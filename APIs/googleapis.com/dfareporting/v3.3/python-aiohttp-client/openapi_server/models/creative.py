# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.click_tag import ClickTag
from openapi_server.models.creative_asset import CreativeAsset
from openapi_server.models.creative_asset_selection import CreativeAssetSelection
from openapi_server.models.creative_click_through_url import CreativeClickThroughUrl
from openapi_server.models.creative_custom_event import CreativeCustomEvent
from openapi_server.models.creative_field_assignment import CreativeFieldAssignment
from openapi_server.models.dimension_value import DimensionValue
from openapi_server.models.fs_command import FsCommand
from openapi_server.models.last_modified_info import LastModifiedInfo
from openapi_server.models.size import Size
from openapi_server.models.target_window import TargetWindow
from openapi_server.models.third_party_tracking_url import ThirdPartyTrackingUrl
from openapi_server.models.universal_ad_id import UniversalAdId
from openapi_server.models.video_offset import VideoOffset
from openapi_server import util


class Creative(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, active: bool=None, ad_parameters: str=None, ad_tag_keys: List[str]=None, additional_sizes: List[Size]=None, advertiser_id: str=None, allow_script_access: bool=None, archived: bool=None, artwork_type: str=None, authoring_source: str=None, authoring_tool: str=None, auto_advance_images: bool=None, background_color: str=None, backup_image_click_through_url: CreativeClickThroughUrl=None, backup_image_features: List[str]=None, backup_image_reporting_label: str=None, backup_image_target_window: TargetWindow=None, click_tags: List[ClickTag]=None, commercial_id: str=None, companion_creatives: List[str]=None, compatibility: List[str]=None, convert_flash_to_html5: bool=None, counter_custom_events: List[CreativeCustomEvent]=None, creative_asset_selection: CreativeAssetSelection=None, creative_assets: List[CreativeAsset]=None, creative_field_assignments: List[CreativeFieldAssignment]=None, custom_key_values: List[str]=None, dynamic_asset_selection: bool=None, exit_custom_events: List[CreativeCustomEvent]=None, fs_command: FsCommand=None, html_code: str=None, html_code_locked: bool=None, id: str=None, id_dimension_value: DimensionValue=None, kind: str=None, last_modified_info: LastModifiedInfo=None, latest_trafficked_creative_id: str=None, media_description: str=None, media_duration: float=None, name: str=None, override_css: str=None, progress_offset: VideoOffset=None, redirect_url: str=None, rendering_id: str=None, rendering_id_dimension_value: DimensionValue=None, required_flash_plugin_version: str=None, required_flash_version: int=None, size: Size=None, skip_offset: VideoOffset=None, skippable: bool=None, ssl_compliant: bool=None, ssl_override: bool=None, studio_advertiser_id: str=None, studio_creative_id: str=None, studio_trafficked_creative_id: str=None, subaccount_id: str=None, third_party_backup_image_impressions_url: str=None, third_party_rich_media_impressions_url: str=None, third_party_urls: List[ThirdPartyTrackingUrl]=None, timer_custom_events: List[CreativeCustomEvent]=None, total_file_size: str=None, type: str=None, universal_ad_id: UniversalAdId=None, version: int=None):
        """Creative - a model defined in OpenAPI

        :param account_id: The account_id of this Creative.
        :param active: The active of this Creative.
        :param ad_parameters: The ad_parameters of this Creative.
        :param ad_tag_keys: The ad_tag_keys of this Creative.
        :param additional_sizes: The additional_sizes of this Creative.
        :param advertiser_id: The advertiser_id of this Creative.
        :param allow_script_access: The allow_script_access of this Creative.
        :param archived: The archived of this Creative.
        :param artwork_type: The artwork_type of this Creative.
        :param authoring_source: The authoring_source of this Creative.
        :param authoring_tool: The authoring_tool of this Creative.
        :param auto_advance_images: The auto_advance_images of this Creative.
        :param background_color: The background_color of this Creative.
        :param backup_image_click_through_url: The backup_image_click_through_url of this Creative.
        :param backup_image_features: The backup_image_features of this Creative.
        :param backup_image_reporting_label: The backup_image_reporting_label of this Creative.
        :param backup_image_target_window: The backup_image_target_window of this Creative.
        :param click_tags: The click_tags of this Creative.
        :param commercial_id: The commercial_id of this Creative.
        :param companion_creatives: The companion_creatives of this Creative.
        :param compatibility: The compatibility of this Creative.
        :param convert_flash_to_html5: The convert_flash_to_html5 of this Creative.
        :param counter_custom_events: The counter_custom_events of this Creative.
        :param creative_asset_selection: The creative_asset_selection of this Creative.
        :param creative_assets: The creative_assets of this Creative.
        :param creative_field_assignments: The creative_field_assignments of this Creative.
        :param custom_key_values: The custom_key_values of this Creative.
        :param dynamic_asset_selection: The dynamic_asset_selection of this Creative.
        :param exit_custom_events: The exit_custom_events of this Creative.
        :param fs_command: The fs_command of this Creative.
        :param html_code: The html_code of this Creative.
        :param html_code_locked: The html_code_locked of this Creative.
        :param id: The id of this Creative.
        :param id_dimension_value: The id_dimension_value of this Creative.
        :param kind: The kind of this Creative.
        :param last_modified_info: The last_modified_info of this Creative.
        :param latest_trafficked_creative_id: The latest_trafficked_creative_id of this Creative.
        :param media_description: The media_description of this Creative.
        :param media_duration: The media_duration of this Creative.
        :param name: The name of this Creative.
        :param override_css: The override_css of this Creative.
        :param progress_offset: The progress_offset of this Creative.
        :param redirect_url: The redirect_url of this Creative.
        :param rendering_id: The rendering_id of this Creative.
        :param rendering_id_dimension_value: The rendering_id_dimension_value of this Creative.
        :param required_flash_plugin_version: The required_flash_plugin_version of this Creative.
        :param required_flash_version: The required_flash_version of this Creative.
        :param size: The size of this Creative.
        :param skip_offset: The skip_offset of this Creative.
        :param skippable: The skippable of this Creative.
        :param ssl_compliant: The ssl_compliant of this Creative.
        :param ssl_override: The ssl_override of this Creative.
        :param studio_advertiser_id: The studio_advertiser_id of this Creative.
        :param studio_creative_id: The studio_creative_id of this Creative.
        :param studio_trafficked_creative_id: The studio_trafficked_creative_id of this Creative.
        :param subaccount_id: The subaccount_id of this Creative.
        :param third_party_backup_image_impressions_url: The third_party_backup_image_impressions_url of this Creative.
        :param third_party_rich_media_impressions_url: The third_party_rich_media_impressions_url of this Creative.
        :param third_party_urls: The third_party_urls of this Creative.
        :param timer_custom_events: The timer_custom_events of this Creative.
        :param total_file_size: The total_file_size of this Creative.
        :param type: The type of this Creative.
        :param universal_ad_id: The universal_ad_id of this Creative.
        :param version: The version of this Creative.
        """
        self.openapi_types = {
            'account_id': str,
            'active': bool,
            'ad_parameters': str,
            'ad_tag_keys': List[str],
            'additional_sizes': List[Size],
            'advertiser_id': str,
            'allow_script_access': bool,
            'archived': bool,
            'artwork_type': str,
            'authoring_source': str,
            'authoring_tool': str,
            'auto_advance_images': bool,
            'background_color': str,
            'backup_image_click_through_url': CreativeClickThroughUrl,
            'backup_image_features': List[str],
            'backup_image_reporting_label': str,
            'backup_image_target_window': TargetWindow,
            'click_tags': List[ClickTag],
            'commercial_id': str,
            'companion_creatives': List[str],
            'compatibility': List[str],
            'convert_flash_to_html5': bool,
            'counter_custom_events': List[CreativeCustomEvent],
            'creative_asset_selection': CreativeAssetSelection,
            'creative_assets': List[CreativeAsset],
            'creative_field_assignments': List[CreativeFieldAssignment],
            'custom_key_values': List[str],
            'dynamic_asset_selection': bool,
            'exit_custom_events': List[CreativeCustomEvent],
            'fs_command': FsCommand,
            'html_code': str,
            'html_code_locked': bool,
            'id': str,
            'id_dimension_value': DimensionValue,
            'kind': str,
            'last_modified_info': LastModifiedInfo,
            'latest_trafficked_creative_id': str,
            'media_description': str,
            'media_duration': float,
            'name': str,
            'override_css': str,
            'progress_offset': VideoOffset,
            'redirect_url': str,
            'rendering_id': str,
            'rendering_id_dimension_value': DimensionValue,
            'required_flash_plugin_version': str,
            'required_flash_version': int,
            'size': Size,
            'skip_offset': VideoOffset,
            'skippable': bool,
            'ssl_compliant': bool,
            'ssl_override': bool,
            'studio_advertiser_id': str,
            'studio_creative_id': str,
            'studio_trafficked_creative_id': str,
            'subaccount_id': str,
            'third_party_backup_image_impressions_url': str,
            'third_party_rich_media_impressions_url': str,
            'third_party_urls': List[ThirdPartyTrackingUrl],
            'timer_custom_events': List[CreativeCustomEvent],
            'total_file_size': str,
            'type': str,
            'universal_ad_id': UniversalAdId,
            'version': int
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'active': 'active',
            'ad_parameters': 'adParameters',
            'ad_tag_keys': 'adTagKeys',
            'additional_sizes': 'additionalSizes',
            'advertiser_id': 'advertiserId',
            'allow_script_access': 'allowScriptAccess',
            'archived': 'archived',
            'artwork_type': 'artworkType',
            'authoring_source': 'authoringSource',
            'authoring_tool': 'authoringTool',
            'auto_advance_images': 'autoAdvanceImages',
            'background_color': 'backgroundColor',
            'backup_image_click_through_url': 'backupImageClickThroughUrl',
            'backup_image_features': 'backupImageFeatures',
            'backup_image_reporting_label': 'backupImageReportingLabel',
            'backup_image_target_window': 'backupImageTargetWindow',
            'click_tags': 'clickTags',
            'commercial_id': 'commercialId',
            'companion_creatives': 'companionCreatives',
            'compatibility': 'compatibility',
            'convert_flash_to_html5': 'convertFlashToHtml5',
            'counter_custom_events': 'counterCustomEvents',
            'creative_asset_selection': 'creativeAssetSelection',
            'creative_assets': 'creativeAssets',
            'creative_field_assignments': 'creativeFieldAssignments',
            'custom_key_values': 'customKeyValues',
            'dynamic_asset_selection': 'dynamicAssetSelection',
            'exit_custom_events': 'exitCustomEvents',
            'fs_command': 'fsCommand',
            'html_code': 'htmlCode',
            'html_code_locked': 'htmlCodeLocked',
            'id': 'id',
            'id_dimension_value': 'idDimensionValue',
            'kind': 'kind',
            'last_modified_info': 'lastModifiedInfo',
            'latest_trafficked_creative_id': 'latestTraffickedCreativeId',
            'media_description': 'mediaDescription',
            'media_duration': 'mediaDuration',
            'name': 'name',
            'override_css': 'overrideCss',
            'progress_offset': 'progressOffset',
            'redirect_url': 'redirectUrl',
            'rendering_id': 'renderingId',
            'rendering_id_dimension_value': 'renderingIdDimensionValue',
            'required_flash_plugin_version': 'requiredFlashPluginVersion',
            'required_flash_version': 'requiredFlashVersion',
            'size': 'size',
            'skip_offset': 'skipOffset',
            'skippable': 'skippable',
            'ssl_compliant': 'sslCompliant',
            'ssl_override': 'sslOverride',
            'studio_advertiser_id': 'studioAdvertiserId',
            'studio_creative_id': 'studioCreativeId',
            'studio_trafficked_creative_id': 'studioTraffickedCreativeId',
            'subaccount_id': 'subaccountId',
            'third_party_backup_image_impressions_url': 'thirdPartyBackupImageImpressionsUrl',
            'third_party_rich_media_impressions_url': 'thirdPartyRichMediaImpressionsUrl',
            'third_party_urls': 'thirdPartyUrls',
            'timer_custom_events': 'timerCustomEvents',
            'total_file_size': 'totalFileSize',
            'type': 'type',
            'universal_ad_id': 'universalAdId',
            'version': 'version'
        }

        self._account_id = account_id
        self._active = active
        self._ad_parameters = ad_parameters
        self._ad_tag_keys = ad_tag_keys
        self._additional_sizes = additional_sizes
        self._advertiser_id = advertiser_id
        self._allow_script_access = allow_script_access
        self._archived = archived
        self._artwork_type = artwork_type
        self._authoring_source = authoring_source
        self._authoring_tool = authoring_tool
        self._auto_advance_images = auto_advance_images
        self._background_color = background_color
        self._backup_image_click_through_url = backup_image_click_through_url
        self._backup_image_features = backup_image_features
        self._backup_image_reporting_label = backup_image_reporting_label
        self._backup_image_target_window = backup_image_target_window
        self._click_tags = click_tags
        self._commercial_id = commercial_id
        self._companion_creatives = companion_creatives
        self._compatibility = compatibility
        self._convert_flash_to_html5 = convert_flash_to_html5
        self._counter_custom_events = counter_custom_events
        self._creative_asset_selection = creative_asset_selection
        self._creative_assets = creative_assets
        self._creative_field_assignments = creative_field_assignments
        self._custom_key_values = custom_key_values
        self._dynamic_asset_selection = dynamic_asset_selection
        self._exit_custom_events = exit_custom_events
        self._fs_command = fs_command
        self._html_code = html_code
        self._html_code_locked = html_code_locked
        self._id = id
        self._id_dimension_value = id_dimension_value
        self._kind = kind
        self._last_modified_info = last_modified_info
        self._latest_trafficked_creative_id = latest_trafficked_creative_id
        self._media_description = media_description
        self._media_duration = media_duration
        self._name = name
        self._override_css = override_css
        self._progress_offset = progress_offset
        self._redirect_url = redirect_url
        self._rendering_id = rendering_id
        self._rendering_id_dimension_value = rendering_id_dimension_value
        self._required_flash_plugin_version = required_flash_plugin_version
        self._required_flash_version = required_flash_version
        self._size = size
        self._skip_offset = skip_offset
        self._skippable = skippable
        self._ssl_compliant = ssl_compliant
        self._ssl_override = ssl_override
        self._studio_advertiser_id = studio_advertiser_id
        self._studio_creative_id = studio_creative_id
        self._studio_trafficked_creative_id = studio_trafficked_creative_id
        self._subaccount_id = subaccount_id
        self._third_party_backup_image_impressions_url = third_party_backup_image_impressions_url
        self._third_party_rich_media_impressions_url = third_party_rich_media_impressions_url
        self._third_party_urls = third_party_urls
        self._timer_custom_events = timer_custom_events
        self._total_file_size = total_file_size
        self._type = type
        self._universal_ad_id = universal_ad_id
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Creative':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Creative of this Creative.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this Creative.

        Account ID of this creative. This field, if left unset, will be auto-generated for both insert and update operations. Applicable to all creative types.

        :return: The account_id of this Creative.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Creative.

        Account ID of this creative. This field, if left unset, will be auto-generated for both insert and update operations. Applicable to all creative types.

        :param account_id: The account_id of this Creative.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def active(self):
        """Gets the active of this Creative.

        Whether the creative is active. Applicable to all creative types.

        :return: The active of this Creative.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Creative.

        Whether the creative is active. Applicable to all creative types.

        :param active: The active of this Creative.
        :type active: bool
        """

        self._active = active

    @property
    def ad_parameters(self):
        """Gets the ad_parameters of this Creative.

        Ad parameters user for VPAID creative. This is a read-only field. Applicable to the following creative types: all VPAID.

        :return: The ad_parameters of this Creative.
        :rtype: str
        """
        return self._ad_parameters

    @ad_parameters.setter
    def ad_parameters(self, ad_parameters):
        """Sets the ad_parameters of this Creative.

        Ad parameters user for VPAID creative. This is a read-only field. Applicable to the following creative types: all VPAID.

        :param ad_parameters: The ad_parameters of this Creative.
        :type ad_parameters: str
        """

        self._ad_parameters = ad_parameters

    @property
    def ad_tag_keys(self):
        """Gets the ad_tag_keys of this Creative.

        Keywords for a Rich Media creative. Keywords let you customize the creative settings of a Rich Media ad running on your site without having to contact the advertiser. You can use keywords to dynamically change the look or functionality of a creative. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.

        :return: The ad_tag_keys of this Creative.
        :rtype: List[str]
        """
        return self._ad_tag_keys

    @ad_tag_keys.setter
    def ad_tag_keys(self, ad_tag_keys):
        """Sets the ad_tag_keys of this Creative.

        Keywords for a Rich Media creative. Keywords let you customize the creative settings of a Rich Media ad running on your site without having to contact the advertiser. You can use keywords to dynamically change the look or functionality of a creative. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.

        :param ad_tag_keys: The ad_tag_keys of this Creative.
        :type ad_tag_keys: List[str]
        """

        self._ad_tag_keys = ad_tag_keys

    @property
    def additional_sizes(self):
        """Gets the additional_sizes of this Creative.

        Additional sizes associated with a responsive creative. When inserting or updating a creative either the size ID field or size width and height fields can be used. Applicable to DISPLAY creatives when the primary asset type is HTML_IMAGE.

        :return: The additional_sizes of this Creative.
        :rtype: List[Size]
        """
        return self._additional_sizes

    @additional_sizes.setter
    def additional_sizes(self, additional_sizes):
        """Sets the additional_sizes of this Creative.

        Additional sizes associated with a responsive creative. When inserting or updating a creative either the size ID field or size width and height fields can be used. Applicable to DISPLAY creatives when the primary asset type is HTML_IMAGE.

        :param additional_sizes: The additional_sizes of this Creative.
        :type additional_sizes: List[Size]
        """

        self._additional_sizes = additional_sizes

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this Creative.

        Advertiser ID of this creative. This is a required field. Applicable to all creative types.

        :return: The advertiser_id of this Creative.
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this Creative.

        Advertiser ID of this creative. This is a required field. Applicable to all creative types.

        :param advertiser_id: The advertiser_id of this Creative.
        :type advertiser_id: str
        """

        self._advertiser_id = advertiser_id

    @property
    def allow_script_access(self):
        """Gets the allow_script_access of this Creative.

        Whether script access is allowed for this creative. This is a read-only and deprecated field which will automatically be set to true on update. Applicable to the following creative types: FLASH_INPAGE.

        :return: The allow_script_access of this Creative.
        :rtype: bool
        """
        return self._allow_script_access

    @allow_script_access.setter
    def allow_script_access(self, allow_script_access):
        """Sets the allow_script_access of this Creative.

        Whether script access is allowed for this creative. This is a read-only and deprecated field which will automatically be set to true on update. Applicable to the following creative types: FLASH_INPAGE.

        :param allow_script_access: The allow_script_access of this Creative.
        :type allow_script_access: bool
        """

        self._allow_script_access = allow_script_access

    @property
    def archived(self):
        """Gets the archived of this Creative.

        Whether the creative is archived. Applicable to all creative types.

        :return: The archived of this Creative.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this Creative.

        Whether the creative is archived. Applicable to all creative types.

        :param archived: The archived of this Creative.
        :type archived: bool
        """

        self._archived = archived

    @property
    def artwork_type(self):
        """Gets the artwork_type of this Creative.

        Type of artwork used for the creative. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.

        :return: The artwork_type of this Creative.
        :rtype: str
        """
        return self._artwork_type

    @artwork_type.setter
    def artwork_type(self, artwork_type):
        """Sets the artwork_type of this Creative.

        Type of artwork used for the creative. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.

        :param artwork_type: The artwork_type of this Creative.
        :type artwork_type: str
        """
        allowed_values = ["ARTWORK_TYPE_FLASH", "ARTWORK_TYPE_HTML5", "ARTWORK_TYPE_MIXED", "ARTWORK_TYPE_IMAGE"]  # noqa: E501
        if artwork_type not in allowed_values:
            raise ValueError(
                "Invalid value for `artwork_type` ({0}), must be one of {1}"
                .format(artwork_type, allowed_values)
            )

        self._artwork_type = artwork_type

    @property
    def authoring_source(self):
        """Gets the authoring_source of this Creative.

        Source application where creative was authored. Presently, only DBM authored creatives will have this field set. Applicable to all creative types.

        :return: The authoring_source of this Creative.
        :rtype: str
        """
        return self._authoring_source

    @authoring_source.setter
    def authoring_source(self, authoring_source):
        """Sets the authoring_source of this Creative.

        Source application where creative was authored. Presently, only DBM authored creatives will have this field set. Applicable to all creative types.

        :param authoring_source: The authoring_source of this Creative.
        :type authoring_source: str
        """
        allowed_values = ["CREATIVE_AUTHORING_SOURCE_DCM", "CREATIVE_AUTHORING_SOURCE_DBM", "CREATIVE_AUTHORING_SOURCE_STUDIO", "CREATIVE_AUTHORING_SOURCE_GWD"]  # noqa: E501
        if authoring_source not in allowed_values:
            raise ValueError(
                "Invalid value for `authoring_source` ({0}), must be one of {1}"
                .format(authoring_source, allowed_values)
            )

        self._authoring_source = authoring_source

    @property
    def authoring_tool(self):
        """Gets the authoring_tool of this Creative.

        Authoring tool for HTML5 banner creatives. This is a read-only field. Applicable to the following creative types: HTML5_BANNER.

        :return: The authoring_tool of this Creative.
        :rtype: str
        """
        return self._authoring_tool

    @authoring_tool.setter
    def authoring_tool(self, authoring_tool):
        """Sets the authoring_tool of this Creative.

        Authoring tool for HTML5 banner creatives. This is a read-only field. Applicable to the following creative types: HTML5_BANNER.

        :param authoring_tool: The authoring_tool of this Creative.
        :type authoring_tool: str
        """
        allowed_values = ["NINJA", "SWIFFY"]  # noqa: E501
        if authoring_tool not in allowed_values:
            raise ValueError(
                "Invalid value for `authoring_tool` ({0}), must be one of {1}"
                .format(authoring_tool, allowed_values)
            )

        self._authoring_tool = authoring_tool

    @property
    def auto_advance_images(self):
        """Gets the auto_advance_images of this Creative.

        Whether images are automatically advanced for image gallery creatives. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY.

        :return: The auto_advance_images of this Creative.
        :rtype: bool
        """
        return self._auto_advance_images

    @auto_advance_images.setter
    def auto_advance_images(self, auto_advance_images):
        """Sets the auto_advance_images of this Creative.

        Whether images are automatically advanced for image gallery creatives. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY.

        :param auto_advance_images: The auto_advance_images of this Creative.
        :type auto_advance_images: bool
        """

        self._auto_advance_images = auto_advance_images

    @property
    def background_color(self):
        """Gets the background_color of this Creative.

        The 6-character HTML color code, beginning with #, for the background of the window area where the Flash file is displayed. Default is white. Applicable to the following creative types: FLASH_INPAGE.

        :return: The background_color of this Creative.
        :rtype: str
        """
        return self._background_color

    @background_color.setter
    def background_color(self, background_color):
        """Sets the background_color of this Creative.

        The 6-character HTML color code, beginning with #, for the background of the window area where the Flash file is displayed. Default is white. Applicable to the following creative types: FLASH_INPAGE.

        :param background_color: The background_color of this Creative.
        :type background_color: str
        """

        self._background_color = background_color

    @property
    def backup_image_click_through_url(self):
        """Gets the backup_image_click_through_url of this Creative.


        :return: The backup_image_click_through_url of this Creative.
        :rtype: CreativeClickThroughUrl
        """
        return self._backup_image_click_through_url

    @backup_image_click_through_url.setter
    def backup_image_click_through_url(self, backup_image_click_through_url):
        """Sets the backup_image_click_through_url of this Creative.


        :param backup_image_click_through_url: The backup_image_click_through_url of this Creative.
        :type backup_image_click_through_url: CreativeClickThroughUrl
        """

        self._backup_image_click_through_url = backup_image_click_through_url

    @property
    def backup_image_features(self):
        """Gets the backup_image_features of this Creative.

        List of feature dependencies that will cause a backup image to be served if the browser that serves the ad does not support them. Feature dependencies are features that a browser must be able to support in order to render your HTML5 creative asset correctly. This field is initially auto-generated to contain all features detected by Campaign Manager for all the assets of this creative and can then be modified by the client. To reset this field, copy over all the creativeAssets' detected features. Applicable to the following creative types: HTML5_BANNER. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.

        :return: The backup_image_features of this Creative.
        :rtype: List[str]
        """
        return self._backup_image_features

    @backup_image_features.setter
    def backup_image_features(self, backup_image_features):
        """Sets the backup_image_features of this Creative.

        List of feature dependencies that will cause a backup image to be served if the browser that serves the ad does not support them. Feature dependencies are features that a browser must be able to support in order to render your HTML5 creative asset correctly. This field is initially auto-generated to contain all features detected by Campaign Manager for all the assets of this creative and can then be modified by the client. To reset this field, copy over all the creativeAssets' detected features. Applicable to the following creative types: HTML5_BANNER. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.

        :param backup_image_features: The backup_image_features of this Creative.
        :type backup_image_features: List[str]
        """
        allowed_values = ["CSS_FONT_FACE", "CSS_BACKGROUND_SIZE", "CSS_BORDER_IMAGE", "CSS_BORDER_RADIUS", "CSS_BOX_SHADOW", "CSS_FLEX_BOX", "CSS_HSLA", "CSS_MULTIPLE_BGS", "CSS_OPACITY", "CSS_RGBA", "CSS_TEXT_SHADOW", "CSS_ANIMATIONS", "CSS_COLUMNS", "CSS_GENERATED_CONTENT", "CSS_GRADIENTS", "CSS_REFLECTIONS", "CSS_TRANSFORMS", "CSS_TRANSFORMS3D", "CSS_TRANSITIONS", "APPLICATION_CACHE", "CANVAS", "CANVAS_TEXT", "DRAG_AND_DROP", "HASH_CHANGE", "HISTORY", "AUDIO", "VIDEO", "INDEXED_DB", "INPUT_ATTR_AUTOCOMPLETE", "INPUT_ATTR_AUTOFOCUS", "INPUT_ATTR_LIST", "INPUT_ATTR_PLACEHOLDER", "INPUT_ATTR_MAX", "INPUT_ATTR_MIN", "INPUT_ATTR_MULTIPLE", "INPUT_ATTR_PATTERN", "INPUT_ATTR_REQUIRED", "INPUT_ATTR_STEP", "INPUT_TYPE_SEARCH", "INPUT_TYPE_TEL", "INPUT_TYPE_URL", "INPUT_TYPE_EMAIL", "INPUT_TYPE_DATETIME", "INPUT_TYPE_DATE", "INPUT_TYPE_MONTH", "INPUT_TYPE_WEEK", "INPUT_TYPE_TIME", "INPUT_TYPE_DATETIME_LOCAL", "INPUT_TYPE_NUMBER", "INPUT_TYPE_RANGE", "INPUT_TYPE_COLOR", "LOCAL_STORAGE", "POST_MESSAGE", "SESSION_STORAGE", "WEB_SOCKETS", "WEB_SQL_DATABASE", "WEB_WORKERS", "GEO_LOCATION", "INLINE_SVG", "SMIL", "SVG_HREF", "SVG_CLIP_PATHS", "TOUCH", "WEBGL", "SVG_FILTERS", "SVG_FE_IMAGE"]  # noqa: E501
        if not set(backup_image_features).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `backup_image_features` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(backup_image_features) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._backup_image_features = backup_image_features

    @property
    def backup_image_reporting_label(self):
        """Gets the backup_image_reporting_label of this Creative.

        Reporting label used for HTML5 banner backup image. Applicable to the following creative types: DISPLAY when the primary asset type is not HTML_IMAGE.

        :return: The backup_image_reporting_label of this Creative.
        :rtype: str
        """
        return self._backup_image_reporting_label

    @backup_image_reporting_label.setter
    def backup_image_reporting_label(self, backup_image_reporting_label):
        """Sets the backup_image_reporting_label of this Creative.

        Reporting label used for HTML5 banner backup image. Applicable to the following creative types: DISPLAY when the primary asset type is not HTML_IMAGE.

        :param backup_image_reporting_label: The backup_image_reporting_label of this Creative.
        :type backup_image_reporting_label: str
        """

        self._backup_image_reporting_label = backup_image_reporting_label

    @property
    def backup_image_target_window(self):
        """Gets the backup_image_target_window of this Creative.


        :return: The backup_image_target_window of this Creative.
        :rtype: TargetWindow
        """
        return self._backup_image_target_window

    @backup_image_target_window.setter
    def backup_image_target_window(self, backup_image_target_window):
        """Sets the backup_image_target_window of this Creative.


        :param backup_image_target_window: The backup_image_target_window of this Creative.
        :type backup_image_target_window: TargetWindow
        """

        self._backup_image_target_window = backup_image_target_window

    @property
    def click_tags(self):
        """Gets the click_tags of this Creative.

        Click tags of the creative. For DISPLAY, FLASH_INPAGE, and HTML5_BANNER creatives, this is a subset of detected click tags for the assets associated with this creative. After creating a flash asset, detected click tags will be returned in the creativeAssetMetadata. When inserting the creative, populate the creative clickTags field using the creativeAssetMetadata.clickTags field. For DISPLAY_IMAGE_GALLERY creatives, there should be exactly one entry in this list for each image creative asset. A click tag is matched with a corresponding creative asset by matching the clickTag.name field with the creativeAsset.assetIdentifier.name field. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY, FLASH_INPAGE, HTML5_BANNER. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.

        :return: The click_tags of this Creative.
        :rtype: List[ClickTag]
        """
        return self._click_tags

    @click_tags.setter
    def click_tags(self, click_tags):
        """Sets the click_tags of this Creative.

        Click tags of the creative. For DISPLAY, FLASH_INPAGE, and HTML5_BANNER creatives, this is a subset of detected click tags for the assets associated with this creative. After creating a flash asset, detected click tags will be returned in the creativeAssetMetadata. When inserting the creative, populate the creative clickTags field using the creativeAssetMetadata.clickTags field. For DISPLAY_IMAGE_GALLERY creatives, there should be exactly one entry in this list for each image creative asset. A click tag is matched with a corresponding creative asset by matching the clickTag.name field with the creativeAsset.assetIdentifier.name field. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY, FLASH_INPAGE, HTML5_BANNER. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.

        :param click_tags: The click_tags of this Creative.
        :type click_tags: List[ClickTag]
        """

        self._click_tags = click_tags

    @property
    def commercial_id(self):
        """Gets the commercial_id of this Creative.

        Industry standard ID assigned to creative for reach and frequency. Applicable to INSTREAM_VIDEO_REDIRECT creatives.

        :return: The commercial_id of this Creative.
        :rtype: str
        """
        return self._commercial_id

    @commercial_id.setter
    def commercial_id(self, commercial_id):
        """Sets the commercial_id of this Creative.

        Industry standard ID assigned to creative for reach and frequency. Applicable to INSTREAM_VIDEO_REDIRECT creatives.

        :param commercial_id: The commercial_id of this Creative.
        :type commercial_id: str
        """

        self._commercial_id = commercial_id

    @property
    def companion_creatives(self):
        """Gets the companion_creatives of this Creative.

        List of companion creatives assigned to an in-Stream video creative. Acceptable values include IDs of existing flash and image creatives. Applicable to the following creative types: all VPAID, all INSTREAM_AUDIO and all INSTREAM_VIDEO with dynamicAssetSelection set to false.

        :return: The companion_creatives of this Creative.
        :rtype: List[str]
        """
        return self._companion_creatives

    @companion_creatives.setter
    def companion_creatives(self, companion_creatives):
        """Sets the companion_creatives of this Creative.

        List of companion creatives assigned to an in-Stream video creative. Acceptable values include IDs of existing flash and image creatives. Applicable to the following creative types: all VPAID, all INSTREAM_AUDIO and all INSTREAM_VIDEO with dynamicAssetSelection set to false.

        :param companion_creatives: The companion_creatives of this Creative.
        :type companion_creatives: List[str]
        """

        self._companion_creatives = companion_creatives

    @property
    def compatibility(self):
        """Gets the compatibility of this Creative.

        Compatibilities associated with this creative. This is a read-only field. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop or on mobile devices or in mobile apps for regular or interstitial ads, respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. Only pre-existing creatives may have these compatibilities since new creatives will either be assigned DISPLAY or DISPLAY_INTERSTITIAL instead. IN_STREAM_VIDEO refers to rendering in in-stream video ads developed with the VAST standard. IN_STREAM_AUDIO refers to rendering in in-stream audio ads developed with the VAST standard. Applicable to all creative types. Acceptable values are: - \"APP\" - \"APP_INTERSTITIAL\" - \"IN_STREAM_VIDEO\" - \"IN_STREAM_AUDIO\" - \"DISPLAY\" - \"DISPLAY_INTERSTITIAL\" 

        :return: The compatibility of this Creative.
        :rtype: List[str]
        """
        return self._compatibility

    @compatibility.setter
    def compatibility(self, compatibility):
        """Sets the compatibility of this Creative.

        Compatibilities associated with this creative. This is a read-only field. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop or on mobile devices or in mobile apps for regular or interstitial ads, respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. Only pre-existing creatives may have these compatibilities since new creatives will either be assigned DISPLAY or DISPLAY_INTERSTITIAL instead. IN_STREAM_VIDEO refers to rendering in in-stream video ads developed with the VAST standard. IN_STREAM_AUDIO refers to rendering in in-stream audio ads developed with the VAST standard. Applicable to all creative types. Acceptable values are: - \"APP\" - \"APP_INTERSTITIAL\" - \"IN_STREAM_VIDEO\" - \"IN_STREAM_AUDIO\" - \"DISPLAY\" - \"DISPLAY_INTERSTITIAL\" 

        :param compatibility: The compatibility of this Creative.
        :type compatibility: List[str]
        """
        allowed_values = ["DISPLAY", "DISPLAY_INTERSTITIAL", "APP", "APP_INTERSTITIAL", "IN_STREAM_VIDEO", "IN_STREAM_AUDIO"]  # noqa: E501
        if not set(compatibility).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `compatibility` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(compatibility) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._compatibility = compatibility

    @property
    def convert_flash_to_html5(self):
        """Gets the convert_flash_to_html5 of this Creative.

        Whether Flash assets associated with the creative need to be automatically converted to HTML5. This flag is enabled by default and users can choose to disable it if they don't want the system to generate and use HTML5 asset for this creative. Applicable to the following creative type: FLASH_INPAGE. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.

        :return: The convert_flash_to_html5 of this Creative.
        :rtype: bool
        """
        return self._convert_flash_to_html5

    @convert_flash_to_html5.setter
    def convert_flash_to_html5(self, convert_flash_to_html5):
        """Sets the convert_flash_to_html5 of this Creative.

        Whether Flash assets associated with the creative need to be automatically converted to HTML5. This flag is enabled by default and users can choose to disable it if they don't want the system to generate and use HTML5 asset for this creative. Applicable to the following creative type: FLASH_INPAGE. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.

        :param convert_flash_to_html5: The convert_flash_to_html5 of this Creative.
        :type convert_flash_to_html5: bool
        """

        self._convert_flash_to_html5 = convert_flash_to_html5

    @property
    def counter_custom_events(self):
        """Gets the counter_custom_events of this Creative.

        List of counter events configured for the creative. For DISPLAY_IMAGE_GALLERY creatives, these are read-only and auto-generated from clickTags. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY, all RICH_MEDIA, and all VPAID.

        :return: The counter_custom_events of this Creative.
        :rtype: List[CreativeCustomEvent]
        """
        return self._counter_custom_events

    @counter_custom_events.setter
    def counter_custom_events(self, counter_custom_events):
        """Sets the counter_custom_events of this Creative.

        List of counter events configured for the creative. For DISPLAY_IMAGE_GALLERY creatives, these are read-only and auto-generated from clickTags. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY, all RICH_MEDIA, and all VPAID.

        :param counter_custom_events: The counter_custom_events of this Creative.
        :type counter_custom_events: List[CreativeCustomEvent]
        """

        self._counter_custom_events = counter_custom_events

    @property
    def creative_asset_selection(self):
        """Gets the creative_asset_selection of this Creative.


        :return: The creative_asset_selection of this Creative.
        :rtype: CreativeAssetSelection
        """
        return self._creative_asset_selection

    @creative_asset_selection.setter
    def creative_asset_selection(self, creative_asset_selection):
        """Sets the creative_asset_selection of this Creative.


        :param creative_asset_selection: The creative_asset_selection of this Creative.
        :type creative_asset_selection: CreativeAssetSelection
        """

        self._creative_asset_selection = creative_asset_selection

    @property
    def creative_assets(self):
        """Gets the creative_assets of this Creative.

        Assets associated with a creative. Applicable to all but the following creative types: INTERNAL_REDIRECT, INTERSTITIAL_INTERNAL_REDIRECT, and REDIRECT

        :return: The creative_assets of this Creative.
        :rtype: List[CreativeAsset]
        """
        return self._creative_assets

    @creative_assets.setter
    def creative_assets(self, creative_assets):
        """Sets the creative_assets of this Creative.

        Assets associated with a creative. Applicable to all but the following creative types: INTERNAL_REDIRECT, INTERSTITIAL_INTERNAL_REDIRECT, and REDIRECT

        :param creative_assets: The creative_assets of this Creative.
        :type creative_assets: List[CreativeAsset]
        """

        self._creative_assets = creative_assets

    @property
    def creative_field_assignments(self):
        """Gets the creative_field_assignments of this Creative.

        Creative field assignments for this creative. Applicable to all creative types.

        :return: The creative_field_assignments of this Creative.
        :rtype: List[CreativeFieldAssignment]
        """
        return self._creative_field_assignments

    @creative_field_assignments.setter
    def creative_field_assignments(self, creative_field_assignments):
        """Sets the creative_field_assignments of this Creative.

        Creative field assignments for this creative. Applicable to all creative types.

        :param creative_field_assignments: The creative_field_assignments of this Creative.
        :type creative_field_assignments: List[CreativeFieldAssignment]
        """

        self._creative_field_assignments = creative_field_assignments

    @property
    def custom_key_values(self):
        """Gets the custom_key_values of this Creative.

        Custom key-values for a Rich Media creative. Key-values let you customize the creative settings of a Rich Media ad running on your site without having to contact the advertiser. You can use key-values to dynamically change the look or functionality of a creative. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.

        :return: The custom_key_values of this Creative.
        :rtype: List[str]
        """
        return self._custom_key_values

    @custom_key_values.setter
    def custom_key_values(self, custom_key_values):
        """Sets the custom_key_values of this Creative.

        Custom key-values for a Rich Media creative. Key-values let you customize the creative settings of a Rich Media ad running on your site without having to contact the advertiser. You can use key-values to dynamically change the look or functionality of a creative. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.

        :param custom_key_values: The custom_key_values of this Creative.
        :type custom_key_values: List[str]
        """

        self._custom_key_values = custom_key_values

    @property
    def dynamic_asset_selection(self):
        """Gets the dynamic_asset_selection of this Creative.

        Set this to true to enable the use of rules to target individual assets in this creative. When set to true creativeAssetSelection must be set. This also controls asset-level companions. When this is true, companion creatives should be assigned to creative assets. Learn more. Applicable to INSTREAM_VIDEO creatives.

        :return: The dynamic_asset_selection of this Creative.
        :rtype: bool
        """
        return self._dynamic_asset_selection

    @dynamic_asset_selection.setter
    def dynamic_asset_selection(self, dynamic_asset_selection):
        """Sets the dynamic_asset_selection of this Creative.

        Set this to true to enable the use of rules to target individual assets in this creative. When set to true creativeAssetSelection must be set. This also controls asset-level companions. When this is true, companion creatives should be assigned to creative assets. Learn more. Applicable to INSTREAM_VIDEO creatives.

        :param dynamic_asset_selection: The dynamic_asset_selection of this Creative.
        :type dynamic_asset_selection: bool
        """

        self._dynamic_asset_selection = dynamic_asset_selection

    @property
    def exit_custom_events(self):
        """Gets the exit_custom_events of this Creative.

        List of exit events configured for the creative. For DISPLAY and DISPLAY_IMAGE_GALLERY creatives, these are read-only and auto-generated from clickTags, For DISPLAY, an event is also created from the backupImageReportingLabel. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY, all RICH_MEDIA, and all VPAID. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.

        :return: The exit_custom_events of this Creative.
        :rtype: List[CreativeCustomEvent]
        """
        return self._exit_custom_events

    @exit_custom_events.setter
    def exit_custom_events(self, exit_custom_events):
        """Sets the exit_custom_events of this Creative.

        List of exit events configured for the creative. For DISPLAY and DISPLAY_IMAGE_GALLERY creatives, these are read-only and auto-generated from clickTags, For DISPLAY, an event is also created from the backupImageReportingLabel. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY, all RICH_MEDIA, and all VPAID. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.

        :param exit_custom_events: The exit_custom_events of this Creative.
        :type exit_custom_events: List[CreativeCustomEvent]
        """

        self._exit_custom_events = exit_custom_events

    @property
    def fs_command(self):
        """Gets the fs_command of this Creative.


        :return: The fs_command of this Creative.
        :rtype: FsCommand
        """
        return self._fs_command

    @fs_command.setter
    def fs_command(self, fs_command):
        """Sets the fs_command of this Creative.


        :param fs_command: The fs_command of this Creative.
        :type fs_command: FsCommand
        """

        self._fs_command = fs_command

    @property
    def html_code(self):
        """Gets the html_code of this Creative.

        HTML code for the creative. This is a required field when applicable. This field is ignored if htmlCodeLocked is true. Applicable to the following creative types: all CUSTOM, FLASH_INPAGE, and HTML5_BANNER, and all RICH_MEDIA.

        :return: The html_code of this Creative.
        :rtype: str
        """
        return self._html_code

    @html_code.setter
    def html_code(self, html_code):
        """Sets the html_code of this Creative.

        HTML code for the creative. This is a required field when applicable. This field is ignored if htmlCodeLocked is true. Applicable to the following creative types: all CUSTOM, FLASH_INPAGE, and HTML5_BANNER, and all RICH_MEDIA.

        :param html_code: The html_code of this Creative.
        :type html_code: str
        """

        self._html_code = html_code

    @property
    def html_code_locked(self):
        """Gets the html_code_locked of this Creative.

        Whether HTML code is generated by Campaign Manager or manually entered. Set to true to ignore changes to htmlCode. Applicable to the following creative types: FLASH_INPAGE and HTML5_BANNER.

        :return: The html_code_locked of this Creative.
        :rtype: bool
        """
        return self._html_code_locked

    @html_code_locked.setter
    def html_code_locked(self, html_code_locked):
        """Sets the html_code_locked of this Creative.

        Whether HTML code is generated by Campaign Manager or manually entered. Set to true to ignore changes to htmlCode. Applicable to the following creative types: FLASH_INPAGE and HTML5_BANNER.

        :param html_code_locked: The html_code_locked of this Creative.
        :type html_code_locked: bool
        """

        self._html_code_locked = html_code_locked

    @property
    def id(self):
        """Gets the id of this Creative.

        ID of this creative. This is a read-only, auto-generated field. Applicable to all creative types.

        :return: The id of this Creative.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Creative.

        ID of this creative. This is a read-only, auto-generated field. Applicable to all creative types.

        :param id: The id of this Creative.
        :type id: str
        """

        self._id = id

    @property
    def id_dimension_value(self):
        """Gets the id_dimension_value of this Creative.


        :return: The id_dimension_value of this Creative.
        :rtype: DimensionValue
        """
        return self._id_dimension_value

    @id_dimension_value.setter
    def id_dimension_value(self, id_dimension_value):
        """Sets the id_dimension_value of this Creative.


        :param id_dimension_value: The id_dimension_value of this Creative.
        :type id_dimension_value: DimensionValue
        """

        self._id_dimension_value = id_dimension_value

    @property
    def kind(self):
        """Gets the kind of this Creative.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#creative\".

        :return: The kind of this Creative.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Creative.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#creative\".

        :param kind: The kind of this Creative.
        :type kind: str
        """

        self._kind = kind

    @property
    def last_modified_info(self):
        """Gets the last_modified_info of this Creative.


        :return: The last_modified_info of this Creative.
        :rtype: LastModifiedInfo
        """
        return self._last_modified_info

    @last_modified_info.setter
    def last_modified_info(self, last_modified_info):
        """Sets the last_modified_info of this Creative.


        :param last_modified_info: The last_modified_info of this Creative.
        :type last_modified_info: LastModifiedInfo
        """

        self._last_modified_info = last_modified_info

    @property
    def latest_trafficked_creative_id(self):
        """Gets the latest_trafficked_creative_id of this Creative.

        Latest Studio trafficked creative ID associated with rich media and VPAID creatives. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.

        :return: The latest_trafficked_creative_id of this Creative.
        :rtype: str
        """
        return self._latest_trafficked_creative_id

    @latest_trafficked_creative_id.setter
    def latest_trafficked_creative_id(self, latest_trafficked_creative_id):
        """Sets the latest_trafficked_creative_id of this Creative.

        Latest Studio trafficked creative ID associated with rich media and VPAID creatives. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.

        :param latest_trafficked_creative_id: The latest_trafficked_creative_id of this Creative.
        :type latest_trafficked_creative_id: str
        """

        self._latest_trafficked_creative_id = latest_trafficked_creative_id

    @property
    def media_description(self):
        """Gets the media_description of this Creative.

        Description of the audio or video ad. Applicable to the following creative types: all INSTREAM_VIDEO, INSTREAM_AUDIO, and all VPAID.

        :return: The media_description of this Creative.
        :rtype: str
        """
        return self._media_description

    @media_description.setter
    def media_description(self, media_description):
        """Sets the media_description of this Creative.

        Description of the audio or video ad. Applicable to the following creative types: all INSTREAM_VIDEO, INSTREAM_AUDIO, and all VPAID.

        :param media_description: The media_description of this Creative.
        :type media_description: str
        """

        self._media_description = media_description

    @property
    def media_duration(self):
        """Gets the media_duration of this Creative.

        Creative audio or video duration in seconds. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO, INSTREAM_AUDIO, all RICH_MEDIA, and all VPAID.

        :return: The media_duration of this Creative.
        :rtype: float
        """
        return self._media_duration

    @media_duration.setter
    def media_duration(self, media_duration):
        """Sets the media_duration of this Creative.

        Creative audio or video duration in seconds. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO, INSTREAM_AUDIO, all RICH_MEDIA, and all VPAID.

        :param media_duration: The media_duration of this Creative.
        :type media_duration: float
        """

        self._media_duration = media_duration

    @property
    def name(self):
        """Gets the name of this Creative.

        Name of the creative. This is a required field and must be less than 256 characters long. Applicable to all creative types.

        :return: The name of this Creative.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Creative.

        Name of the creative. This is a required field and must be less than 256 characters long. Applicable to all creative types.

        :param name: The name of this Creative.
        :type name: str
        """

        self._name = name

    @property
    def override_css(self):
        """Gets the override_css of this Creative.

        Override CSS value for rich media creatives. Applicable to the following creative types: all RICH_MEDIA.

        :return: The override_css of this Creative.
        :rtype: str
        """
        return self._override_css

    @override_css.setter
    def override_css(self, override_css):
        """Sets the override_css of this Creative.

        Override CSS value for rich media creatives. Applicable to the following creative types: all RICH_MEDIA.

        :param override_css: The override_css of this Creative.
        :type override_css: str
        """

        self._override_css = override_css

    @property
    def progress_offset(self):
        """Gets the progress_offset of this Creative.


        :return: The progress_offset of this Creative.
        :rtype: VideoOffset
        """
        return self._progress_offset

    @progress_offset.setter
    def progress_offset(self, progress_offset):
        """Sets the progress_offset of this Creative.


        :param progress_offset: The progress_offset of this Creative.
        :type progress_offset: VideoOffset
        """

        self._progress_offset = progress_offset

    @property
    def redirect_url(self):
        """Gets the redirect_url of this Creative.

        URL of hosted image or hosted video or another ad tag. For INSTREAM_VIDEO_REDIRECT creatives this is the in-stream video redirect URL. The standard for a VAST (Video Ad Serving Template) ad response allows for a redirect link to another VAST 2.0 or 3.0 call. This is a required field when applicable. Applicable to the following creative types: DISPLAY_REDIRECT, INTERNAL_REDIRECT, INTERSTITIAL_INTERNAL_REDIRECT, and INSTREAM_VIDEO_REDIRECT

        :return: The redirect_url of this Creative.
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """Sets the redirect_url of this Creative.

        URL of hosted image or hosted video or another ad tag. For INSTREAM_VIDEO_REDIRECT creatives this is the in-stream video redirect URL. The standard for a VAST (Video Ad Serving Template) ad response allows for a redirect link to another VAST 2.0 or 3.0 call. This is a required field when applicable. Applicable to the following creative types: DISPLAY_REDIRECT, INTERNAL_REDIRECT, INTERSTITIAL_INTERNAL_REDIRECT, and INSTREAM_VIDEO_REDIRECT

        :param redirect_url: The redirect_url of this Creative.
        :type redirect_url: str
        """

        self._redirect_url = redirect_url

    @property
    def rendering_id(self):
        """Gets the rendering_id of this Creative.

        ID of current rendering version. This is a read-only field. Applicable to all creative types.

        :return: The rendering_id of this Creative.
        :rtype: str
        """
        return self._rendering_id

    @rendering_id.setter
    def rendering_id(self, rendering_id):
        """Sets the rendering_id of this Creative.

        ID of current rendering version. This is a read-only field. Applicable to all creative types.

        :param rendering_id: The rendering_id of this Creative.
        :type rendering_id: str
        """

        self._rendering_id = rendering_id

    @property
    def rendering_id_dimension_value(self):
        """Gets the rendering_id_dimension_value of this Creative.


        :return: The rendering_id_dimension_value of this Creative.
        :rtype: DimensionValue
        """
        return self._rendering_id_dimension_value

    @rendering_id_dimension_value.setter
    def rendering_id_dimension_value(self, rendering_id_dimension_value):
        """Sets the rendering_id_dimension_value of this Creative.


        :param rendering_id_dimension_value: The rendering_id_dimension_value of this Creative.
        :type rendering_id_dimension_value: DimensionValue
        """

        self._rendering_id_dimension_value = rendering_id_dimension_value

    @property
    def required_flash_plugin_version(self):
        """Gets the required_flash_plugin_version of this Creative.

        The minimum required Flash plugin version for this creative. For example, 11.2.202.235. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.

        :return: The required_flash_plugin_version of this Creative.
        :rtype: str
        """
        return self._required_flash_plugin_version

    @required_flash_plugin_version.setter
    def required_flash_plugin_version(self, required_flash_plugin_version):
        """Sets the required_flash_plugin_version of this Creative.

        The minimum required Flash plugin version for this creative. For example, 11.2.202.235. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.

        :param required_flash_plugin_version: The required_flash_plugin_version of this Creative.
        :type required_flash_plugin_version: str
        """

        self._required_flash_plugin_version = required_flash_plugin_version

    @property
    def required_flash_version(self):
        """Gets the required_flash_version of this Creative.

        The internal Flash version for this creative as calculated by Studio. This is a read-only field. Applicable to the following creative types: FLASH_INPAGE all RICH_MEDIA, and all VPAID. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.

        :return: The required_flash_version of this Creative.
        :rtype: int
        """
        return self._required_flash_version

    @required_flash_version.setter
    def required_flash_version(self, required_flash_version):
        """Sets the required_flash_version of this Creative.

        The internal Flash version for this creative as calculated by Studio. This is a read-only field. Applicable to the following creative types: FLASH_INPAGE all RICH_MEDIA, and all VPAID. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.

        :param required_flash_version: The required_flash_version of this Creative.
        :type required_flash_version: int
        """

        self._required_flash_version = required_flash_version

    @property
    def size(self):
        """Gets the size of this Creative.


        :return: The size of this Creative.
        :rtype: Size
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Creative.


        :param size: The size of this Creative.
        :type size: Size
        """

        self._size = size

    @property
    def skip_offset(self):
        """Gets the skip_offset of this Creative.


        :return: The skip_offset of this Creative.
        :rtype: VideoOffset
        """
        return self._skip_offset

    @skip_offset.setter
    def skip_offset(self, skip_offset):
        """Sets the skip_offset of this Creative.


        :param skip_offset: The skip_offset of this Creative.
        :type skip_offset: VideoOffset
        """

        self._skip_offset = skip_offset

    @property
    def skippable(self):
        """Gets the skippable of this Creative.

        Whether the user can choose to skip the creative. Applicable to the following creative types: all INSTREAM_VIDEO and all VPAID.

        :return: The skippable of this Creative.
        :rtype: bool
        """
        return self._skippable

    @skippable.setter
    def skippable(self, skippable):
        """Sets the skippable of this Creative.

        Whether the user can choose to skip the creative. Applicable to the following creative types: all INSTREAM_VIDEO and all VPAID.

        :param skippable: The skippable of this Creative.
        :type skippable: bool
        """

        self._skippable = skippable

    @property
    def ssl_compliant(self):
        """Gets the ssl_compliant of this Creative.

        Whether the creative is SSL-compliant. This is a read-only field. Applicable to all creative types.

        :return: The ssl_compliant of this Creative.
        :rtype: bool
        """
        return self._ssl_compliant

    @ssl_compliant.setter
    def ssl_compliant(self, ssl_compliant):
        """Sets the ssl_compliant of this Creative.

        Whether the creative is SSL-compliant. This is a read-only field. Applicable to all creative types.

        :param ssl_compliant: The ssl_compliant of this Creative.
        :type ssl_compliant: bool
        """

        self._ssl_compliant = ssl_compliant

    @property
    def ssl_override(self):
        """Gets the ssl_override of this Creative.

        Whether creative should be treated as SSL compliant even if the system scan shows it's not. Applicable to all creative types.

        :return: The ssl_override of this Creative.
        :rtype: bool
        """
        return self._ssl_override

    @ssl_override.setter
    def ssl_override(self, ssl_override):
        """Sets the ssl_override of this Creative.

        Whether creative should be treated as SSL compliant even if the system scan shows it's not. Applicable to all creative types.

        :param ssl_override: The ssl_override of this Creative.
        :type ssl_override: bool
        """

        self._ssl_override = ssl_override

    @property
    def studio_advertiser_id(self):
        """Gets the studio_advertiser_id of this Creative.

        Studio advertiser ID associated with rich media and VPAID creatives. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.

        :return: The studio_advertiser_id of this Creative.
        :rtype: str
        """
        return self._studio_advertiser_id

    @studio_advertiser_id.setter
    def studio_advertiser_id(self, studio_advertiser_id):
        """Sets the studio_advertiser_id of this Creative.

        Studio advertiser ID associated with rich media and VPAID creatives. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.

        :param studio_advertiser_id: The studio_advertiser_id of this Creative.
        :type studio_advertiser_id: str
        """

        self._studio_advertiser_id = studio_advertiser_id

    @property
    def studio_creative_id(self):
        """Gets the studio_creative_id of this Creative.

        Studio creative ID associated with rich media and VPAID creatives. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.

        :return: The studio_creative_id of this Creative.
        :rtype: str
        """
        return self._studio_creative_id

    @studio_creative_id.setter
    def studio_creative_id(self, studio_creative_id):
        """Sets the studio_creative_id of this Creative.

        Studio creative ID associated with rich media and VPAID creatives. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.

        :param studio_creative_id: The studio_creative_id of this Creative.
        :type studio_creative_id: str
        """

        self._studio_creative_id = studio_creative_id

    @property
    def studio_trafficked_creative_id(self):
        """Gets the studio_trafficked_creative_id of this Creative.

        Studio trafficked creative ID associated with rich media and VPAID creatives. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.

        :return: The studio_trafficked_creative_id of this Creative.
        :rtype: str
        """
        return self._studio_trafficked_creative_id

    @studio_trafficked_creative_id.setter
    def studio_trafficked_creative_id(self, studio_trafficked_creative_id):
        """Sets the studio_trafficked_creative_id of this Creative.

        Studio trafficked creative ID associated with rich media and VPAID creatives. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.

        :param studio_trafficked_creative_id: The studio_trafficked_creative_id of this Creative.
        :type studio_trafficked_creative_id: str
        """

        self._studio_trafficked_creative_id = studio_trafficked_creative_id

    @property
    def subaccount_id(self):
        """Gets the subaccount_id of this Creative.

        Subaccount ID of this creative. This field, if left unset, will be auto-generated for both insert and update operations. Applicable to all creative types.

        :return: The subaccount_id of this Creative.
        :rtype: str
        """
        return self._subaccount_id

    @subaccount_id.setter
    def subaccount_id(self, subaccount_id):
        """Sets the subaccount_id of this Creative.

        Subaccount ID of this creative. This field, if left unset, will be auto-generated for both insert and update operations. Applicable to all creative types.

        :param subaccount_id: The subaccount_id of this Creative.
        :type subaccount_id: str
        """

        self._subaccount_id = subaccount_id

    @property
    def third_party_backup_image_impressions_url(self):
        """Gets the third_party_backup_image_impressions_url of this Creative.

        Third-party URL used to record backup image impressions. Applicable to the following creative types: all RICH_MEDIA.

        :return: The third_party_backup_image_impressions_url of this Creative.
        :rtype: str
        """
        return self._third_party_backup_image_impressions_url

    @third_party_backup_image_impressions_url.setter
    def third_party_backup_image_impressions_url(self, third_party_backup_image_impressions_url):
        """Sets the third_party_backup_image_impressions_url of this Creative.

        Third-party URL used to record backup image impressions. Applicable to the following creative types: all RICH_MEDIA.

        :param third_party_backup_image_impressions_url: The third_party_backup_image_impressions_url of this Creative.
        :type third_party_backup_image_impressions_url: str
        """

        self._third_party_backup_image_impressions_url = third_party_backup_image_impressions_url

    @property
    def third_party_rich_media_impressions_url(self):
        """Gets the third_party_rich_media_impressions_url of this Creative.

        Third-party URL used to record rich media impressions. Applicable to the following creative types: all RICH_MEDIA.

        :return: The third_party_rich_media_impressions_url of this Creative.
        :rtype: str
        """
        return self._third_party_rich_media_impressions_url

    @third_party_rich_media_impressions_url.setter
    def third_party_rich_media_impressions_url(self, third_party_rich_media_impressions_url):
        """Sets the third_party_rich_media_impressions_url of this Creative.

        Third-party URL used to record rich media impressions. Applicable to the following creative types: all RICH_MEDIA.

        :param third_party_rich_media_impressions_url: The third_party_rich_media_impressions_url of this Creative.
        :type third_party_rich_media_impressions_url: str
        """

        self._third_party_rich_media_impressions_url = third_party_rich_media_impressions_url

    @property
    def third_party_urls(self):
        """Gets the third_party_urls of this Creative.

        Third-party URLs for tracking in-stream creative events. Applicable to the following creative types: all INSTREAM_VIDEO, all INSTREAM_AUDIO, and all VPAID.

        :return: The third_party_urls of this Creative.
        :rtype: List[ThirdPartyTrackingUrl]
        """
        return self._third_party_urls

    @third_party_urls.setter
    def third_party_urls(self, third_party_urls):
        """Sets the third_party_urls of this Creative.

        Third-party URLs for tracking in-stream creative events. Applicable to the following creative types: all INSTREAM_VIDEO, all INSTREAM_AUDIO, and all VPAID.

        :param third_party_urls: The third_party_urls of this Creative.
        :type third_party_urls: List[ThirdPartyTrackingUrl]
        """

        self._third_party_urls = third_party_urls

    @property
    def timer_custom_events(self):
        """Gets the timer_custom_events of this Creative.

        List of timer events configured for the creative. For DISPLAY_IMAGE_GALLERY creatives, these are read-only and auto-generated from clickTags. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY, all RICH_MEDIA, and all VPAID. Applicable to DISPLAY when the primary asset is not HTML_IMAGE.

        :return: The timer_custom_events of this Creative.
        :rtype: List[CreativeCustomEvent]
        """
        return self._timer_custom_events

    @timer_custom_events.setter
    def timer_custom_events(self, timer_custom_events):
        """Sets the timer_custom_events of this Creative.

        List of timer events configured for the creative. For DISPLAY_IMAGE_GALLERY creatives, these are read-only and auto-generated from clickTags. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY, all RICH_MEDIA, and all VPAID. Applicable to DISPLAY when the primary asset is not HTML_IMAGE.

        :param timer_custom_events: The timer_custom_events of this Creative.
        :type timer_custom_events: List[CreativeCustomEvent]
        """

        self._timer_custom_events = timer_custom_events

    @property
    def total_file_size(self):
        """Gets the total_file_size of this Creative.

        Combined size of all creative assets. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.

        :return: The total_file_size of this Creative.
        :rtype: str
        """
        return self._total_file_size

    @total_file_size.setter
    def total_file_size(self, total_file_size):
        """Sets the total_file_size of this Creative.

        Combined size of all creative assets. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.

        :param total_file_size: The total_file_size of this Creative.
        :type total_file_size: str
        """

        self._total_file_size = total_file_size

    @property
    def type(self):
        """Gets the type of this Creative.

        Type of this creative. This is a required field. Applicable to all creative types. *Note:* FLASH_INPAGE, HTML5_BANNER, and IMAGE are only used for existing creatives. New creatives should use DISPLAY as a replacement for these types.

        :return: The type of this Creative.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Creative.

        Type of this creative. This is a required field. Applicable to all creative types. *Note:* FLASH_INPAGE, HTML5_BANNER, and IMAGE are only used for existing creatives. New creatives should use DISPLAY as a replacement for these types.

        :param type: The type of this Creative.
        :type type: str
        """
        allowed_values = ["IMAGE", "DISPLAY_REDIRECT", "CUSTOM_DISPLAY", "INTERNAL_REDIRECT", "CUSTOM_DISPLAY_INTERSTITIAL", "INTERSTITIAL_INTERNAL_REDIRECT", "TRACKING_TEXT", "RICH_MEDIA_DISPLAY_BANNER", "RICH_MEDIA_INPAGE_FLOATING", "RICH_MEDIA_IM_EXPAND", "RICH_MEDIA_DISPLAY_EXPANDING", "RICH_MEDIA_DISPLAY_INTERSTITIAL", "RICH_MEDIA_DISPLAY_MULTI_FLOATING_INTERSTITIAL", "RICH_MEDIA_MOBILE_IN_APP", "FLASH_INPAGE", "INSTREAM_VIDEO", "VPAID_LINEAR_VIDEO", "VPAID_NON_LINEAR_VIDEO", "INSTREAM_VIDEO_REDIRECT", "RICH_MEDIA_PEEL_DOWN", "HTML5_BANNER", "DISPLAY", "DISPLAY_IMAGE_GALLERY", "BRAND_SAFE_DEFAULT_INSTREAM_VIDEO", "INSTREAM_AUDIO"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def universal_ad_id(self):
        """Gets the universal_ad_id of this Creative.


        :return: The universal_ad_id of this Creative.
        :rtype: UniversalAdId
        """
        return self._universal_ad_id

    @universal_ad_id.setter
    def universal_ad_id(self, universal_ad_id):
        """Sets the universal_ad_id of this Creative.


        :param universal_ad_id: The universal_ad_id of this Creative.
        :type universal_ad_id: UniversalAdId
        """

        self._universal_ad_id = universal_ad_id

    @property
    def version(self):
        """Gets the version of this Creative.

        The version number helps you keep track of multiple versions of your creative in your reports. The version number will always be auto-generated during insert operations to start at 1. For tracking creatives the version cannot be incremented and will always remain at 1. For all other creative types the version can be incremented only by 1 during update operations. In addition, the version will be automatically incremented by 1 when undergoing Rich Media creative merging. Applicable to all creative types.

        :return: The version of this Creative.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Creative.

        The version number helps you keep track of multiple versions of your creative in your reports. The version number will always be auto-generated during insert operations to start at 1. For tracking creatives the version cannot be incremented and will always remain at 1. For all other creative types the version can be incremented only by 1 during update operations. In addition, the version will be automatically incremented by 1 when undergoing Rich Media creative merging. Applicable to all creative types.

        :param version: The version of this Creative.
        :type version: int
        """

        self._version = version
