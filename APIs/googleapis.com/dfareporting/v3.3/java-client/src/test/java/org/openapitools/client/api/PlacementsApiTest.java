/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Placement;
import org.openapitools.client.model.PlacementsGenerateTagsResponse;
import org.openapitools.client.model.PlacementsListResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PlacementsApi
 */
@Disabled
public class PlacementsApiTest {

    private final PlacementsApi api = new PlacementsApi();

    /**
     * Generates tags for a placement.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dfareportingPlacementsGeneratetagsTest() throws ApiException {
        String profileId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String campaignId = null;
        List<String> placementIds = null;
        List<String> tagFormats = null;
        PlacementsGenerateTagsResponse response = api.dfareportingPlacementsGeneratetags(profileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, campaignId, placementIds, tagFormats);
        // TODO: test validations
    }

    /**
     * Gets one placement by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dfareportingPlacementsGetTest() throws ApiException {
        String profileId = null;
        String id = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Placement response = api.dfareportingPlacementsGet(profileId, id, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Inserts a new placement.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dfareportingPlacementsInsertTest() throws ApiException {
        String profileId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Placement placement = null;
        Placement response = api.dfareportingPlacementsInsert(profileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, placement);
        // TODO: test validations
    }

    /**
     * Retrieves a list of placements, possibly filtered. This method supports paging.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dfareportingPlacementsListTest() throws ApiException {
        String profileId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        List<String> advertiserIds = null;
        Boolean archived = null;
        List<String> campaignIds = null;
        List<String> compatibilities = null;
        List<String> contentCategoryIds = null;
        List<String> directorySiteIds = null;
        List<String> groupIds = null;
        List<String> ids = null;
        String maxEndDate = null;
        Integer maxResults = null;
        String maxStartDate = null;
        String minEndDate = null;
        String minStartDate = null;
        String pageToken = null;
        String paymentSource = null;
        List<String> placementStrategyIds = null;
        List<String> pricingTypes = null;
        String searchString = null;
        List<String> siteIds = null;
        List<String> sizeIds = null;
        String sortField = null;
        String sortOrder = null;
        PlacementsListResponse response = api.dfareportingPlacementsList(profileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, advertiserIds, archived, campaignIds, compatibilities, contentCategoryIds, directorySiteIds, groupIds, ids, maxEndDate, maxResults, maxStartDate, minEndDate, minStartDate, pageToken, paymentSource, placementStrategyIds, pricingTypes, searchString, siteIds, sizeIds, sortField, sortOrder);
        // TODO: test validations
    }

    /**
     * Updates an existing placement. This method supports patch semantics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dfareportingPlacementsPatchTest() throws ApiException {
        String profileId = null;
        String id = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Placement placement = null;
        Placement response = api.dfareportingPlacementsPatch(profileId, id, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, placement);
        // TODO: test validations
    }

    /**
     * Updates an existing placement.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dfareportingPlacementsUpdateTest() throws ApiException {
        String profileId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Placement placement = null;
        Placement response = api.dfareportingPlacementsUpdate(profileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, placement);
        // TODO: test validations
    }

}
