/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CompatibleFields;
import org.openapitools.client.model.FileList;
import org.openapitools.client.model.ModelFile;
import org.openapitools.client.model.Report;
import org.openapitools.client.model.ReportList;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReportsApi
 */
@Disabled
public class ReportsApiTest {

    private final ReportsApi api = new ReportsApi();

    /**
     * Returns the fields that are compatible to be selected in the respective sections of a report criteria, given the fields already selected in the input report and user permissions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dfareportingReportsCompatibleFieldsQueryTest() throws ApiException {
        String profileId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Report report = null;
        CompatibleFields response = api.dfareportingReportsCompatibleFieldsQuery(profileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, report);
        // TODO: test validations
    }

    /**
     * Deletes a report by its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dfareportingReportsDeleteTest() throws ApiException {
        String profileId = null;
        String reportId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.dfareportingReportsDelete(profileId, reportId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Retrieves a report file by its report ID and file ID. This method supports media download.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dfareportingReportsFilesGetTest() throws ApiException {
        String profileId = null;
        String reportId = null;
        String fileId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ModelFile response = api.dfareportingReportsFilesGet(profileId, reportId, fileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists files for a report.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dfareportingReportsFilesListTest() throws ApiException {
        String profileId = null;
        String reportId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer maxResults = null;
        String pageToken = null;
        String sortField = null;
        String sortOrder = null;
        FileList response = api.dfareportingReportsFilesList(profileId, reportId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, maxResults, pageToken, sortField, sortOrder);
        // TODO: test validations
    }

    /**
     * Retrieves a report by its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dfareportingReportsGetTest() throws ApiException {
        String profileId = null;
        String reportId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Report response = api.dfareportingReportsGet(profileId, reportId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Creates a report.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dfareportingReportsInsertTest() throws ApiException {
        String profileId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Report report = null;
        Report response = api.dfareportingReportsInsert(profileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, report);
        // TODO: test validations
    }

    /**
     * Retrieves list of reports.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dfareportingReportsListTest() throws ApiException {
        String profileId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer maxResults = null;
        String pageToken = null;
        String scope = null;
        String sortField = null;
        String sortOrder = null;
        ReportList response = api.dfareportingReportsList(profileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, maxResults, pageToken, scope, sortField, sortOrder);
        // TODO: test validations
    }

    /**
     * Updates an existing report. This method supports patch semantics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dfareportingReportsPatchTest() throws ApiException {
        String profileId = null;
        String reportId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Report report = null;
        Report response = api.dfareportingReportsPatch(profileId, reportId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, report);
        // TODO: test validations
    }

    /**
     * Runs a report.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dfareportingReportsRunTest() throws ApiException {
        String profileId = null;
        String reportId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean synchronous = null;
        ModelFile response = api.dfareportingReportsRun(profileId, reportId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, synchronous);
        // TODO: test validations
    }

    /**
     * Updates a report.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dfareportingReportsUpdateTest() throws ApiException {
        String profileId = null;
        String reportId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Report report = null;
        Report response = api.dfareportingReportsUpdate(profileId, reportId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, report);
        // TODO: test validations
    }

}
