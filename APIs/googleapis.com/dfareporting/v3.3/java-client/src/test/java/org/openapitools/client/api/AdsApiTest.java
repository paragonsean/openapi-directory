/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Ad;
import org.openapitools.client.model.AdsListResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AdsApi
 */
@Disabled
public class AdsApiTest {

    private final AdsApi api = new AdsApi();

    /**
     * Gets one ad by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dfareportingAdsGetTest() throws ApiException {
        String profileId = null;
        String id = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Ad response = api.dfareportingAdsGet(profileId, id, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Inserts a new ad.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dfareportingAdsInsertTest() throws ApiException {
        String profileId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Ad ad = null;
        Ad response = api.dfareportingAdsInsert(profileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, ad);
        // TODO: test validations
    }

    /**
     * Retrieves a list of ads, possibly filtered. This method supports paging.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dfareportingAdsListTest() throws ApiException {
        String profileId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean active = null;
        String advertiserId = null;
        Boolean archived = null;
        List<String> audienceSegmentIds = null;
        List<String> campaignIds = null;
        String compatibility = null;
        List<String> creativeIds = null;
        List<String> creativeOptimizationConfigurationIds = null;
        Boolean dynamicClickTracker = null;
        List<String> ids = null;
        List<String> landingPageIds = null;
        Integer maxResults = null;
        String overriddenEventTagId = null;
        String pageToken = null;
        List<String> placementIds = null;
        List<String> remarketingListIds = null;
        String searchString = null;
        List<String> sizeIds = null;
        String sortField = null;
        String sortOrder = null;
        Boolean sslCompliant = null;
        Boolean sslRequired = null;
        List<String> type = null;
        AdsListResponse response = api.dfareportingAdsList(profileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, active, advertiserId, archived, audienceSegmentIds, campaignIds, compatibility, creativeIds, creativeOptimizationConfigurationIds, dynamicClickTracker, ids, landingPageIds, maxResults, overriddenEventTagId, pageToken, placementIds, remarketingListIds, searchString, sizeIds, sortField, sortOrder, sslCompliant, sslRequired, type);
        // TODO: test validations
    }

    /**
     * Updates an existing ad. This method supports patch semantics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dfareportingAdsPatchTest() throws ApiException {
        String profileId = null;
        String id = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Ad ad = null;
        Ad response = api.dfareportingAdsPatch(profileId, id, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, ad);
        // TODO: test validations
    }

    /**
     * Updates an existing ad.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dfareportingAdsUpdateTest() throws ApiException {
        String profileId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Ad ad = null;
        Ad response = api.dfareportingAdsUpdate(profileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, ad);
        // TODO: test validations
    }

}
