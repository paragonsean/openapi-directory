/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DynamicTargetingKey;
import org.openapitools.client.model.DynamicTargetingKeysListResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DynamicTargetingKeysApi
 */
@Disabled
public class DynamicTargetingKeysApiTest {

    private final DynamicTargetingKeysApi api = new DynamicTargetingKeysApi();

    /**
     * Deletes an existing dynamic targeting key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dfareportingDynamicTargetingKeysDeleteTest() throws ApiException {
        String profileId = null;
        String objectId = null;
        String name = null;
        String objectType = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.dfareportingDynamicTargetingKeysDelete(profileId, objectId, name, objectType, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Inserts a new dynamic targeting key. Keys must be created at the advertiser level before being assigned to the advertiser&#39;s ads, creatives, or placements. There is a maximum of 1000 keys per advertiser, out of which a maximum of 20 keys can be assigned per ad, creative, or placement.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dfareportingDynamicTargetingKeysInsertTest() throws ApiException {
        String profileId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        DynamicTargetingKey dynamicTargetingKey = null;
        DynamicTargetingKey response = api.dfareportingDynamicTargetingKeysInsert(profileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, dynamicTargetingKey);
        // TODO: test validations
    }

    /**
     * Retrieves a list of dynamic targeting keys.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dfareportingDynamicTargetingKeysListTest() throws ApiException {
        String profileId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String advertiserId = null;
        List<String> names = null;
        String objectId = null;
        String objectType = null;
        DynamicTargetingKeysListResponse response = api.dfareportingDynamicTargetingKeysList(profileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, advertiserId, names, objectId, objectType);
        // TODO: test validations
    }

}
