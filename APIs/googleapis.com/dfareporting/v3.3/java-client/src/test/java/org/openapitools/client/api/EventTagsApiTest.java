/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.EventTag;
import org.openapitools.client.model.EventTagsListResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EventTagsApi
 */
@Disabled
public class EventTagsApiTest {

    private final EventTagsApi api = new EventTagsApi();

    /**
     * Deletes an existing event tag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dfareportingEventTagsDeleteTest() throws ApiException {
        String profileId = null;
        String id = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.dfareportingEventTagsDelete(profileId, id, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets one event tag by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dfareportingEventTagsGetTest() throws ApiException {
        String profileId = null;
        String id = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        EventTag response = api.dfareportingEventTagsGet(profileId, id, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Inserts a new event tag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dfareportingEventTagsInsertTest() throws ApiException {
        String profileId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        EventTag eventTag = null;
        EventTag response = api.dfareportingEventTagsInsert(profileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, eventTag);
        // TODO: test validations
    }

    /**
     * Retrieves a list of event tags, possibly filtered.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dfareportingEventTagsListTest() throws ApiException {
        String profileId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String adId = null;
        String advertiserId = null;
        String campaignId = null;
        Boolean definitionsOnly = null;
        Boolean enabled = null;
        List<String> eventTagTypes = null;
        List<String> ids = null;
        String searchString = null;
        String sortField = null;
        String sortOrder = null;
        EventTagsListResponse response = api.dfareportingEventTagsList(profileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, adId, advertiserId, campaignId, definitionsOnly, enabled, eventTagTypes, ids, searchString, sortField, sortOrder);
        // TODO: test validations
    }

    /**
     * Updates an existing event tag. This method supports patch semantics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dfareportingEventTagsPatchTest() throws ApiException {
        String profileId = null;
        String id = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        EventTag eventTag = null;
        EventTag response = api.dfareportingEventTagsPatch(profileId, id, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, eventTag);
        // TODO: test validations
    }

    /**
     * Updates an existing event tag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dfareportingEventTagsUpdateTest() throws ApiException {
        String profileId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        EventTag eventTag = null;
        EventTag response = api.dfareportingEventTagsUpdate(profileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, eventTag);
        // TODO: test validations
    }

}
