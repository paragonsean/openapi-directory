/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Site;
import org.openapitools.client.model.SitesListResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SitesApi
 */
@Disabled
public class SitesApiTest {

    private final SitesApi api = new SitesApi();

    /**
     * Gets one site by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dfareportingSitesGetTest() throws ApiException {
        String profileId = null;
        String id = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Site response = api.dfareportingSitesGet(profileId, id, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Inserts a new site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dfareportingSitesInsertTest() throws ApiException {
        String profileId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Site site = null;
        Site response = api.dfareportingSitesInsert(profileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, site);
        // TODO: test validations
    }

    /**
     * Retrieves a list of sites, possibly filtered. This method supports paging.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dfareportingSitesListTest() throws ApiException {
        String profileId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean acceptsInStreamVideoPlacements = null;
        Boolean acceptsInterstitialPlacements = null;
        Boolean acceptsPublisherPaidPlacements = null;
        Boolean adWordsSite = null;
        Boolean approved = null;
        List<String> campaignIds = null;
        List<String> directorySiteIds = null;
        List<String> ids = null;
        Integer maxResults = null;
        String pageToken = null;
        String searchString = null;
        String sortField = null;
        String sortOrder = null;
        String subaccountId = null;
        Boolean unmappedSite = null;
        SitesListResponse response = api.dfareportingSitesList(profileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, acceptsInStreamVideoPlacements, acceptsInterstitialPlacements, acceptsPublisherPaidPlacements, adWordsSite, approved, campaignIds, directorySiteIds, ids, maxResults, pageToken, searchString, sortField, sortOrder, subaccountId, unmappedSite);
        // TODO: test validations
    }

    /**
     * Updates an existing site. This method supports patch semantics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dfareportingSitesPatchTest() throws ApiException {
        String profileId = null;
        String id = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Site site = null;
        Site response = api.dfareportingSitesPatch(profileId, id, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, site);
        // TODO: test validations
    }

    /**
     * Updates an existing site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dfareportingSitesUpdateTest() throws ApiException {
        String profileId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Site site = null;
        Site response = api.dfareportingSitesUpdate(profileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, site);
        // TODO: test validations
    }

}
