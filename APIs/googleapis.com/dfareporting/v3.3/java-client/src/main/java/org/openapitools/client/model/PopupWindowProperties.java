/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.OffsetPosition;
import org.openapitools.client.model.Size;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Popup Window Properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:12.851901-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PopupWindowProperties {
  public static final String SERIALIZED_NAME_DIMENSION = "dimension";
  @SerializedName(SERIALIZED_NAME_DIMENSION)
  private Size dimension;

  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private OffsetPosition offset;

  /**
   * Popup window position either centered or at specific coordinate.
   */
  @JsonAdapter(PositionTypeEnum.Adapter.class)
  public enum PositionTypeEnum {
    CENTER("CENTER"),
    
    COORDINATES("COORDINATES");

    private String value;

    PositionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PositionTypeEnum fromValue(String value) {
      for (PositionTypeEnum b : PositionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PositionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PositionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PositionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PositionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PositionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_POSITION_TYPE = "positionType";
  @SerializedName(SERIALIZED_NAME_POSITION_TYPE)
  private PositionTypeEnum positionType;

  public static final String SERIALIZED_NAME_SHOW_ADDRESS_BAR = "showAddressBar";
  @SerializedName(SERIALIZED_NAME_SHOW_ADDRESS_BAR)
  private Boolean showAddressBar;

  public static final String SERIALIZED_NAME_SHOW_MENU_BAR = "showMenuBar";
  @SerializedName(SERIALIZED_NAME_SHOW_MENU_BAR)
  private Boolean showMenuBar;

  public static final String SERIALIZED_NAME_SHOW_SCROLL_BAR = "showScrollBar";
  @SerializedName(SERIALIZED_NAME_SHOW_SCROLL_BAR)
  private Boolean showScrollBar;

  public static final String SERIALIZED_NAME_SHOW_STATUS_BAR = "showStatusBar";
  @SerializedName(SERIALIZED_NAME_SHOW_STATUS_BAR)
  private Boolean showStatusBar;

  public static final String SERIALIZED_NAME_SHOW_TOOL_BAR = "showToolBar";
  @SerializedName(SERIALIZED_NAME_SHOW_TOOL_BAR)
  private Boolean showToolBar;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public PopupWindowProperties() {
  }

  public PopupWindowProperties dimension(Size dimension) {
    this.dimension = dimension;
    return this;
  }

  /**
   * Get dimension
   * @return dimension
   */
  @javax.annotation.Nullable
  public Size getDimension() {
    return dimension;
  }

  public void setDimension(Size dimension) {
    this.dimension = dimension;
  }


  public PopupWindowProperties offset(OffsetPosition offset) {
    this.offset = offset;
    return this;
  }

  /**
   * Get offset
   * @return offset
   */
  @javax.annotation.Nullable
  public OffsetPosition getOffset() {
    return offset;
  }

  public void setOffset(OffsetPosition offset) {
    this.offset = offset;
  }


  public PopupWindowProperties positionType(PositionTypeEnum positionType) {
    this.positionType = positionType;
    return this;
  }

  /**
   * Popup window position either centered or at specific coordinate.
   * @return positionType
   */
  @javax.annotation.Nullable
  public PositionTypeEnum getPositionType() {
    return positionType;
  }

  public void setPositionType(PositionTypeEnum positionType) {
    this.positionType = positionType;
  }


  public PopupWindowProperties showAddressBar(Boolean showAddressBar) {
    this.showAddressBar = showAddressBar;
    return this;
  }

  /**
   * Whether to display the browser address bar.
   * @return showAddressBar
   */
  @javax.annotation.Nullable
  public Boolean getShowAddressBar() {
    return showAddressBar;
  }

  public void setShowAddressBar(Boolean showAddressBar) {
    this.showAddressBar = showAddressBar;
  }


  public PopupWindowProperties showMenuBar(Boolean showMenuBar) {
    this.showMenuBar = showMenuBar;
    return this;
  }

  /**
   * Whether to display the browser menu bar.
   * @return showMenuBar
   */
  @javax.annotation.Nullable
  public Boolean getShowMenuBar() {
    return showMenuBar;
  }

  public void setShowMenuBar(Boolean showMenuBar) {
    this.showMenuBar = showMenuBar;
  }


  public PopupWindowProperties showScrollBar(Boolean showScrollBar) {
    this.showScrollBar = showScrollBar;
    return this;
  }

  /**
   * Whether to display the browser scroll bar.
   * @return showScrollBar
   */
  @javax.annotation.Nullable
  public Boolean getShowScrollBar() {
    return showScrollBar;
  }

  public void setShowScrollBar(Boolean showScrollBar) {
    this.showScrollBar = showScrollBar;
  }


  public PopupWindowProperties showStatusBar(Boolean showStatusBar) {
    this.showStatusBar = showStatusBar;
    return this;
  }

  /**
   * Whether to display the browser status bar.
   * @return showStatusBar
   */
  @javax.annotation.Nullable
  public Boolean getShowStatusBar() {
    return showStatusBar;
  }

  public void setShowStatusBar(Boolean showStatusBar) {
    this.showStatusBar = showStatusBar;
  }


  public PopupWindowProperties showToolBar(Boolean showToolBar) {
    this.showToolBar = showToolBar;
    return this;
  }

  /**
   * Whether to display the browser tool bar.
   * @return showToolBar
   */
  @javax.annotation.Nullable
  public Boolean getShowToolBar() {
    return showToolBar;
  }

  public void setShowToolBar(Boolean showToolBar) {
    this.showToolBar = showToolBar;
  }


  public PopupWindowProperties title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title of popup window.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PopupWindowProperties popupWindowProperties = (PopupWindowProperties) o;
    return Objects.equals(this.dimension, popupWindowProperties.dimension) &&
        Objects.equals(this.offset, popupWindowProperties.offset) &&
        Objects.equals(this.positionType, popupWindowProperties.positionType) &&
        Objects.equals(this.showAddressBar, popupWindowProperties.showAddressBar) &&
        Objects.equals(this.showMenuBar, popupWindowProperties.showMenuBar) &&
        Objects.equals(this.showScrollBar, popupWindowProperties.showScrollBar) &&
        Objects.equals(this.showStatusBar, popupWindowProperties.showStatusBar) &&
        Objects.equals(this.showToolBar, popupWindowProperties.showToolBar) &&
        Objects.equals(this.title, popupWindowProperties.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dimension, offset, positionType, showAddressBar, showMenuBar, showScrollBar, showStatusBar, showToolBar, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PopupWindowProperties {\n");
    sb.append("    dimension: ").append(toIndentedString(dimension)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    positionType: ").append(toIndentedString(positionType)).append("\n");
    sb.append("    showAddressBar: ").append(toIndentedString(showAddressBar)).append("\n");
    sb.append("    showMenuBar: ").append(toIndentedString(showMenuBar)).append("\n");
    sb.append("    showScrollBar: ").append(toIndentedString(showScrollBar)).append("\n");
    sb.append("    showStatusBar: ").append(toIndentedString(showStatusBar)).append("\n");
    sb.append("    showToolBar: ").append(toIndentedString(showToolBar)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dimension");
    openapiFields.add("offset");
    openapiFields.add("positionType");
    openapiFields.add("showAddressBar");
    openapiFields.add("showMenuBar");
    openapiFields.add("showScrollBar");
    openapiFields.add("showStatusBar");
    openapiFields.add("showToolBar");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PopupWindowProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PopupWindowProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PopupWindowProperties is not found in the empty JSON string", PopupWindowProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PopupWindowProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PopupWindowProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `dimension`
      if (jsonObj.get("dimension") != null && !jsonObj.get("dimension").isJsonNull()) {
        Size.validateJsonElement(jsonObj.get("dimension"));
      }
      // validate the optional field `offset`
      if (jsonObj.get("offset") != null && !jsonObj.get("offset").isJsonNull()) {
        OffsetPosition.validateJsonElement(jsonObj.get("offset"));
      }
      if ((jsonObj.get("positionType") != null && !jsonObj.get("positionType").isJsonNull()) && !jsonObj.get("positionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `positionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("positionType").toString()));
      }
      // validate the optional field `positionType`
      if (jsonObj.get("positionType") != null && !jsonObj.get("positionType").isJsonNull()) {
        PositionTypeEnum.validateJsonElement(jsonObj.get("positionType"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PopupWindowProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PopupWindowProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PopupWindowProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PopupWindowProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<PopupWindowProperties>() {
           @Override
           public void write(JsonWriter out, PopupWindowProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PopupWindowProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PopupWindowProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PopupWindowProperties
   * @throws IOException if the JSON string is invalid with respect to PopupWindowProperties
   */
  public static PopupWindowProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PopupWindowProperties.class);
  }

  /**
   * Convert an instance of PopupWindowProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

