/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ClickThroughUrl;
import org.openapitools.client.model.CompanionClickThroughOverride;
import org.openapitools.client.model.CreativeGroupAssignment;
import org.openapitools.client.model.DimensionValue;
import org.openapitools.client.model.RichMediaExitOverride;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Creative Assignment.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:12.851901-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreativeAssignment {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_APPLY_EVENT_TAGS = "applyEventTags";
  @SerializedName(SERIALIZED_NAME_APPLY_EVENT_TAGS)
  private Boolean applyEventTags;

  public static final String SERIALIZED_NAME_CLICK_THROUGH_URL = "clickThroughUrl";
  @SerializedName(SERIALIZED_NAME_CLICK_THROUGH_URL)
  private ClickThroughUrl clickThroughUrl;

  public static final String SERIALIZED_NAME_COMPANION_CREATIVE_OVERRIDES = "companionCreativeOverrides";
  @SerializedName(SERIALIZED_NAME_COMPANION_CREATIVE_OVERRIDES)
  private List<CompanionClickThroughOverride> companionCreativeOverrides = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATIVE_GROUP_ASSIGNMENTS = "creativeGroupAssignments";
  @SerializedName(SERIALIZED_NAME_CREATIVE_GROUP_ASSIGNMENTS)
  private List<CreativeGroupAssignment> creativeGroupAssignments = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATIVE_ID = "creativeId";
  @SerializedName(SERIALIZED_NAME_CREATIVE_ID)
  private String creativeId;

  public static final String SERIALIZED_NAME_CREATIVE_ID_DIMENSION_VALUE = "creativeIdDimensionValue";
  @SerializedName(SERIALIZED_NAME_CREATIVE_ID_DIMENSION_VALUE)
  private DimensionValue creativeIdDimensionValue;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_RICH_MEDIA_EXIT_OVERRIDES = "richMediaExitOverrides";
  @SerializedName(SERIALIZED_NAME_RICH_MEDIA_EXIT_OVERRIDES)
  private List<RichMediaExitOverride> richMediaExitOverrides = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEQUENCE = "sequence";
  @SerializedName(SERIALIZED_NAME_SEQUENCE)
  private Integer sequence;

  public static final String SERIALIZED_NAME_SSL_COMPLIANT = "sslCompliant";
  @SerializedName(SERIALIZED_NAME_SSL_COMPLIANT)
  private Boolean sslCompliant;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Integer weight;

  public CreativeAssignment() {
  }

  public CreativeAssignment active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Whether this creative assignment is active. When true, the creative will be included in the ad&#39;s rotation.
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public CreativeAssignment applyEventTags(Boolean applyEventTags) {
    this.applyEventTags = applyEventTags;
    return this;
  }

  /**
   * Whether applicable event tags should fire when this creative assignment is rendered. If this value is unset when the ad is inserted or updated, it will default to true for all creative types EXCEPT for INTERNAL_REDIRECT, INTERSTITIAL_INTERNAL_REDIRECT, and INSTREAM_VIDEO.
   * @return applyEventTags
   */
  @javax.annotation.Nullable
  public Boolean getApplyEventTags() {
    return applyEventTags;
  }

  public void setApplyEventTags(Boolean applyEventTags) {
    this.applyEventTags = applyEventTags;
  }


  public CreativeAssignment clickThroughUrl(ClickThroughUrl clickThroughUrl) {
    this.clickThroughUrl = clickThroughUrl;
    return this;
  }

  /**
   * Get clickThroughUrl
   * @return clickThroughUrl
   */
  @javax.annotation.Nullable
  public ClickThroughUrl getClickThroughUrl() {
    return clickThroughUrl;
  }

  public void setClickThroughUrl(ClickThroughUrl clickThroughUrl) {
    this.clickThroughUrl = clickThroughUrl;
  }


  public CreativeAssignment companionCreativeOverrides(List<CompanionClickThroughOverride> companionCreativeOverrides) {
    this.companionCreativeOverrides = companionCreativeOverrides;
    return this;
  }

  public CreativeAssignment addCompanionCreativeOverridesItem(CompanionClickThroughOverride companionCreativeOverridesItem) {
    if (this.companionCreativeOverrides == null) {
      this.companionCreativeOverrides = new ArrayList<>();
    }
    this.companionCreativeOverrides.add(companionCreativeOverridesItem);
    return this;
  }

  /**
   * Companion creative overrides for this creative assignment. Applicable to video ads.
   * @return companionCreativeOverrides
   */
  @javax.annotation.Nullable
  public List<CompanionClickThroughOverride> getCompanionCreativeOverrides() {
    return companionCreativeOverrides;
  }

  public void setCompanionCreativeOverrides(List<CompanionClickThroughOverride> companionCreativeOverrides) {
    this.companionCreativeOverrides = companionCreativeOverrides;
  }


  public CreativeAssignment creativeGroupAssignments(List<CreativeGroupAssignment> creativeGroupAssignments) {
    this.creativeGroupAssignments = creativeGroupAssignments;
    return this;
  }

  public CreativeAssignment addCreativeGroupAssignmentsItem(CreativeGroupAssignment creativeGroupAssignmentsItem) {
    if (this.creativeGroupAssignments == null) {
      this.creativeGroupAssignments = new ArrayList<>();
    }
    this.creativeGroupAssignments.add(creativeGroupAssignmentsItem);
    return this;
  }

  /**
   * Creative group assignments for this creative assignment. Only one assignment per creative group number is allowed for a maximum of two assignments.
   * @return creativeGroupAssignments
   */
  @javax.annotation.Nullable
  public List<CreativeGroupAssignment> getCreativeGroupAssignments() {
    return creativeGroupAssignments;
  }

  public void setCreativeGroupAssignments(List<CreativeGroupAssignment> creativeGroupAssignments) {
    this.creativeGroupAssignments = creativeGroupAssignments;
  }


  public CreativeAssignment creativeId(String creativeId) {
    this.creativeId = creativeId;
    return this;
  }

  /**
   * ID of the creative to be assigned. This is a required field.
   * @return creativeId
   */
  @javax.annotation.Nullable
  public String getCreativeId() {
    return creativeId;
  }

  public void setCreativeId(String creativeId) {
    this.creativeId = creativeId;
  }


  public CreativeAssignment creativeIdDimensionValue(DimensionValue creativeIdDimensionValue) {
    this.creativeIdDimensionValue = creativeIdDimensionValue;
    return this;
  }

  /**
   * Get creativeIdDimensionValue
   * @return creativeIdDimensionValue
   */
  @javax.annotation.Nullable
  public DimensionValue getCreativeIdDimensionValue() {
    return creativeIdDimensionValue;
  }

  public void setCreativeIdDimensionValue(DimensionValue creativeIdDimensionValue) {
    this.creativeIdDimensionValue = creativeIdDimensionValue;
  }


  public CreativeAssignment endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public CreativeAssignment richMediaExitOverrides(List<RichMediaExitOverride> richMediaExitOverrides) {
    this.richMediaExitOverrides = richMediaExitOverrides;
    return this;
  }

  public CreativeAssignment addRichMediaExitOverridesItem(RichMediaExitOverride richMediaExitOverridesItem) {
    if (this.richMediaExitOverrides == null) {
      this.richMediaExitOverrides = new ArrayList<>();
    }
    this.richMediaExitOverrides.add(richMediaExitOverridesItem);
    return this;
  }

  /**
   * Rich media exit overrides for this creative assignment. Applicable when the creative type is any of the following: - DISPLAY - RICH_MEDIA_INPAGE - RICH_MEDIA_INPAGE_FLOATING - RICH_MEDIA_IM_EXPAND - RICH_MEDIA_EXPANDING - RICH_MEDIA_INTERSTITIAL_FLOAT - RICH_MEDIA_MOBILE_IN_APP - RICH_MEDIA_MULTI_FLOATING - RICH_MEDIA_PEEL_DOWN - VPAID_LINEAR - VPAID_NON_LINEAR 
   * @return richMediaExitOverrides
   */
  @javax.annotation.Nullable
  public List<RichMediaExitOverride> getRichMediaExitOverrides() {
    return richMediaExitOverrides;
  }

  public void setRichMediaExitOverrides(List<RichMediaExitOverride> richMediaExitOverrides) {
    this.richMediaExitOverrides = richMediaExitOverrides;
  }


  public CreativeAssignment sequence(Integer sequence) {
    this.sequence = sequence;
    return this;
  }

  /**
   * Sequence number of the creative assignment, applicable when the rotation type is CREATIVE_ROTATION_TYPE_SEQUENTIAL. Acceptable values are 1 to 65535, inclusive.
   * @return sequence
   */
  @javax.annotation.Nullable
  public Integer getSequence() {
    return sequence;
  }

  public void setSequence(Integer sequence) {
    this.sequence = sequence;
  }


  public CreativeAssignment sslCompliant(Boolean sslCompliant) {
    this.sslCompliant = sslCompliant;
    return this;
  }

  /**
   * Whether the creative to be assigned is SSL-compliant. This is a read-only field that is auto-generated when the ad is inserted or updated.
   * @return sslCompliant
   */
  @javax.annotation.Nullable
  public Boolean getSslCompliant() {
    return sslCompliant;
  }

  public void setSslCompliant(Boolean sslCompliant) {
    this.sslCompliant = sslCompliant;
  }


  public CreativeAssignment startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public CreativeAssignment weight(Integer weight) {
    this.weight = weight;
    return this;
  }

  /**
   * Weight of the creative assignment, applicable when the rotation type is CREATIVE_ROTATION_TYPE_RANDOM. Value must be greater than or equal to 1.
   * @return weight
   */
  @javax.annotation.Nullable
  public Integer getWeight() {
    return weight;
  }

  public void setWeight(Integer weight) {
    this.weight = weight;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreativeAssignment creativeAssignment = (CreativeAssignment) o;
    return Objects.equals(this.active, creativeAssignment.active) &&
        Objects.equals(this.applyEventTags, creativeAssignment.applyEventTags) &&
        Objects.equals(this.clickThroughUrl, creativeAssignment.clickThroughUrl) &&
        Objects.equals(this.companionCreativeOverrides, creativeAssignment.companionCreativeOverrides) &&
        Objects.equals(this.creativeGroupAssignments, creativeAssignment.creativeGroupAssignments) &&
        Objects.equals(this.creativeId, creativeAssignment.creativeId) &&
        Objects.equals(this.creativeIdDimensionValue, creativeAssignment.creativeIdDimensionValue) &&
        Objects.equals(this.endTime, creativeAssignment.endTime) &&
        Objects.equals(this.richMediaExitOverrides, creativeAssignment.richMediaExitOverrides) &&
        Objects.equals(this.sequence, creativeAssignment.sequence) &&
        Objects.equals(this.sslCompliant, creativeAssignment.sslCompliant) &&
        Objects.equals(this.startTime, creativeAssignment.startTime) &&
        Objects.equals(this.weight, creativeAssignment.weight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, applyEventTags, clickThroughUrl, companionCreativeOverrides, creativeGroupAssignments, creativeId, creativeIdDimensionValue, endTime, richMediaExitOverrides, sequence, sslCompliant, startTime, weight);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreativeAssignment {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    applyEventTags: ").append(toIndentedString(applyEventTags)).append("\n");
    sb.append("    clickThroughUrl: ").append(toIndentedString(clickThroughUrl)).append("\n");
    sb.append("    companionCreativeOverrides: ").append(toIndentedString(companionCreativeOverrides)).append("\n");
    sb.append("    creativeGroupAssignments: ").append(toIndentedString(creativeGroupAssignments)).append("\n");
    sb.append("    creativeId: ").append(toIndentedString(creativeId)).append("\n");
    sb.append("    creativeIdDimensionValue: ").append(toIndentedString(creativeIdDimensionValue)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    richMediaExitOverrides: ").append(toIndentedString(richMediaExitOverrides)).append("\n");
    sb.append("    sequence: ").append(toIndentedString(sequence)).append("\n");
    sb.append("    sslCompliant: ").append(toIndentedString(sslCompliant)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("applyEventTags");
    openapiFields.add("clickThroughUrl");
    openapiFields.add("companionCreativeOverrides");
    openapiFields.add("creativeGroupAssignments");
    openapiFields.add("creativeId");
    openapiFields.add("creativeIdDimensionValue");
    openapiFields.add("endTime");
    openapiFields.add("richMediaExitOverrides");
    openapiFields.add("sequence");
    openapiFields.add("sslCompliant");
    openapiFields.add("startTime");
    openapiFields.add("weight");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreativeAssignment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreativeAssignment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreativeAssignment is not found in the empty JSON string", CreativeAssignment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreativeAssignment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreativeAssignment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `clickThroughUrl`
      if (jsonObj.get("clickThroughUrl") != null && !jsonObj.get("clickThroughUrl").isJsonNull()) {
        ClickThroughUrl.validateJsonElement(jsonObj.get("clickThroughUrl"));
      }
      if (jsonObj.get("companionCreativeOverrides") != null && !jsonObj.get("companionCreativeOverrides").isJsonNull()) {
        JsonArray jsonArraycompanionCreativeOverrides = jsonObj.getAsJsonArray("companionCreativeOverrides");
        if (jsonArraycompanionCreativeOverrides != null) {
          // ensure the json data is an array
          if (!jsonObj.get("companionCreativeOverrides").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `companionCreativeOverrides` to be an array in the JSON string but got `%s`", jsonObj.get("companionCreativeOverrides").toString()));
          }

          // validate the optional field `companionCreativeOverrides` (array)
          for (int i = 0; i < jsonArraycompanionCreativeOverrides.size(); i++) {
            CompanionClickThroughOverride.validateJsonElement(jsonArraycompanionCreativeOverrides.get(i));
          };
        }
      }
      if (jsonObj.get("creativeGroupAssignments") != null && !jsonObj.get("creativeGroupAssignments").isJsonNull()) {
        JsonArray jsonArraycreativeGroupAssignments = jsonObj.getAsJsonArray("creativeGroupAssignments");
        if (jsonArraycreativeGroupAssignments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("creativeGroupAssignments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `creativeGroupAssignments` to be an array in the JSON string but got `%s`", jsonObj.get("creativeGroupAssignments").toString()));
          }

          // validate the optional field `creativeGroupAssignments` (array)
          for (int i = 0; i < jsonArraycreativeGroupAssignments.size(); i++) {
            CreativeGroupAssignment.validateJsonElement(jsonArraycreativeGroupAssignments.get(i));
          };
        }
      }
      if ((jsonObj.get("creativeId") != null && !jsonObj.get("creativeId").isJsonNull()) && !jsonObj.get("creativeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creativeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creativeId").toString()));
      }
      // validate the optional field `creativeIdDimensionValue`
      if (jsonObj.get("creativeIdDimensionValue") != null && !jsonObj.get("creativeIdDimensionValue").isJsonNull()) {
        DimensionValue.validateJsonElement(jsonObj.get("creativeIdDimensionValue"));
      }
      if (jsonObj.get("richMediaExitOverrides") != null && !jsonObj.get("richMediaExitOverrides").isJsonNull()) {
        JsonArray jsonArrayrichMediaExitOverrides = jsonObj.getAsJsonArray("richMediaExitOverrides");
        if (jsonArrayrichMediaExitOverrides != null) {
          // ensure the json data is an array
          if (!jsonObj.get("richMediaExitOverrides").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `richMediaExitOverrides` to be an array in the JSON string but got `%s`", jsonObj.get("richMediaExitOverrides").toString()));
          }

          // validate the optional field `richMediaExitOverrides` (array)
          for (int i = 0; i < jsonArrayrichMediaExitOverrides.size(); i++) {
            RichMediaExitOverride.validateJsonElement(jsonArrayrichMediaExitOverrides.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreativeAssignment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreativeAssignment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreativeAssignment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreativeAssignment.class));

       return (TypeAdapter<T>) new TypeAdapter<CreativeAssignment>() {
           @Override
           public void write(JsonWriter out, CreativeAssignment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreativeAssignment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreativeAssignment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreativeAssignment
   * @throws IOException if the JSON string is invalid with respect to CreativeAssignment
   */
  public static CreativeAssignment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreativeAssignment.class);
  }

  /**
   * Convert an instance of CreativeAssignment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

