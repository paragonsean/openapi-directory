/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CrossDimensionReachReportCompatibleFields;
import org.openapitools.client.model.FloodlightReportCompatibleFields;
import org.openapitools.client.model.PathToConversionReportCompatibleFields;
import org.openapitools.client.model.ReachReportCompatibleFields;
import org.openapitools.client.model.ReportCompatibleFields;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a response to the queryCompatibleFields method.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:12.851901-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CompatibleFields {
  public static final String SERIALIZED_NAME_CROSS_DIMENSION_REACH_REPORT_COMPATIBLE_FIELDS = "crossDimensionReachReportCompatibleFields";
  @SerializedName(SERIALIZED_NAME_CROSS_DIMENSION_REACH_REPORT_COMPATIBLE_FIELDS)
  private CrossDimensionReachReportCompatibleFields crossDimensionReachReportCompatibleFields;

  public static final String SERIALIZED_NAME_FLOODLIGHT_REPORT_COMPATIBLE_FIELDS = "floodlightReportCompatibleFields";
  @SerializedName(SERIALIZED_NAME_FLOODLIGHT_REPORT_COMPATIBLE_FIELDS)
  private FloodlightReportCompatibleFields floodlightReportCompatibleFields;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_PATH_TO_CONVERSION_REPORT_COMPATIBLE_FIELDS = "pathToConversionReportCompatibleFields";
  @SerializedName(SERIALIZED_NAME_PATH_TO_CONVERSION_REPORT_COMPATIBLE_FIELDS)
  private PathToConversionReportCompatibleFields pathToConversionReportCompatibleFields;

  public static final String SERIALIZED_NAME_REACH_REPORT_COMPATIBLE_FIELDS = "reachReportCompatibleFields";
  @SerializedName(SERIALIZED_NAME_REACH_REPORT_COMPATIBLE_FIELDS)
  private ReachReportCompatibleFields reachReportCompatibleFields;

  public static final String SERIALIZED_NAME_REPORT_COMPATIBLE_FIELDS = "reportCompatibleFields";
  @SerializedName(SERIALIZED_NAME_REPORT_COMPATIBLE_FIELDS)
  private ReportCompatibleFields reportCompatibleFields;

  public CompatibleFields() {
  }

  public CompatibleFields crossDimensionReachReportCompatibleFields(CrossDimensionReachReportCompatibleFields crossDimensionReachReportCompatibleFields) {
    this.crossDimensionReachReportCompatibleFields = crossDimensionReachReportCompatibleFields;
    return this;
  }

  /**
   * Get crossDimensionReachReportCompatibleFields
   * @return crossDimensionReachReportCompatibleFields
   */
  @javax.annotation.Nullable
  public CrossDimensionReachReportCompatibleFields getCrossDimensionReachReportCompatibleFields() {
    return crossDimensionReachReportCompatibleFields;
  }

  public void setCrossDimensionReachReportCompatibleFields(CrossDimensionReachReportCompatibleFields crossDimensionReachReportCompatibleFields) {
    this.crossDimensionReachReportCompatibleFields = crossDimensionReachReportCompatibleFields;
  }


  public CompatibleFields floodlightReportCompatibleFields(FloodlightReportCompatibleFields floodlightReportCompatibleFields) {
    this.floodlightReportCompatibleFields = floodlightReportCompatibleFields;
    return this;
  }

  /**
   * Get floodlightReportCompatibleFields
   * @return floodlightReportCompatibleFields
   */
  @javax.annotation.Nullable
  public FloodlightReportCompatibleFields getFloodlightReportCompatibleFields() {
    return floodlightReportCompatibleFields;
  }

  public void setFloodlightReportCompatibleFields(FloodlightReportCompatibleFields floodlightReportCompatibleFields) {
    this.floodlightReportCompatibleFields = floodlightReportCompatibleFields;
  }


  public CompatibleFields kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * The kind of resource this is, in this case dfareporting#compatibleFields.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public CompatibleFields pathToConversionReportCompatibleFields(PathToConversionReportCompatibleFields pathToConversionReportCompatibleFields) {
    this.pathToConversionReportCompatibleFields = pathToConversionReportCompatibleFields;
    return this;
  }

  /**
   * Get pathToConversionReportCompatibleFields
   * @return pathToConversionReportCompatibleFields
   */
  @javax.annotation.Nullable
  public PathToConversionReportCompatibleFields getPathToConversionReportCompatibleFields() {
    return pathToConversionReportCompatibleFields;
  }

  public void setPathToConversionReportCompatibleFields(PathToConversionReportCompatibleFields pathToConversionReportCompatibleFields) {
    this.pathToConversionReportCompatibleFields = pathToConversionReportCompatibleFields;
  }


  public CompatibleFields reachReportCompatibleFields(ReachReportCompatibleFields reachReportCompatibleFields) {
    this.reachReportCompatibleFields = reachReportCompatibleFields;
    return this;
  }

  /**
   * Get reachReportCompatibleFields
   * @return reachReportCompatibleFields
   */
  @javax.annotation.Nullable
  public ReachReportCompatibleFields getReachReportCompatibleFields() {
    return reachReportCompatibleFields;
  }

  public void setReachReportCompatibleFields(ReachReportCompatibleFields reachReportCompatibleFields) {
    this.reachReportCompatibleFields = reachReportCompatibleFields;
  }


  public CompatibleFields reportCompatibleFields(ReportCompatibleFields reportCompatibleFields) {
    this.reportCompatibleFields = reportCompatibleFields;
    return this;
  }

  /**
   * Get reportCompatibleFields
   * @return reportCompatibleFields
   */
  @javax.annotation.Nullable
  public ReportCompatibleFields getReportCompatibleFields() {
    return reportCompatibleFields;
  }

  public void setReportCompatibleFields(ReportCompatibleFields reportCompatibleFields) {
    this.reportCompatibleFields = reportCompatibleFields;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompatibleFields compatibleFields = (CompatibleFields) o;
    return Objects.equals(this.crossDimensionReachReportCompatibleFields, compatibleFields.crossDimensionReachReportCompatibleFields) &&
        Objects.equals(this.floodlightReportCompatibleFields, compatibleFields.floodlightReportCompatibleFields) &&
        Objects.equals(this.kind, compatibleFields.kind) &&
        Objects.equals(this.pathToConversionReportCompatibleFields, compatibleFields.pathToConversionReportCompatibleFields) &&
        Objects.equals(this.reachReportCompatibleFields, compatibleFields.reachReportCompatibleFields) &&
        Objects.equals(this.reportCompatibleFields, compatibleFields.reportCompatibleFields);
  }

  @Override
  public int hashCode() {
    return Objects.hash(crossDimensionReachReportCompatibleFields, floodlightReportCompatibleFields, kind, pathToConversionReportCompatibleFields, reachReportCompatibleFields, reportCompatibleFields);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompatibleFields {\n");
    sb.append("    crossDimensionReachReportCompatibleFields: ").append(toIndentedString(crossDimensionReachReportCompatibleFields)).append("\n");
    sb.append("    floodlightReportCompatibleFields: ").append(toIndentedString(floodlightReportCompatibleFields)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    pathToConversionReportCompatibleFields: ").append(toIndentedString(pathToConversionReportCompatibleFields)).append("\n");
    sb.append("    reachReportCompatibleFields: ").append(toIndentedString(reachReportCompatibleFields)).append("\n");
    sb.append("    reportCompatibleFields: ").append(toIndentedString(reportCompatibleFields)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("crossDimensionReachReportCompatibleFields");
    openapiFields.add("floodlightReportCompatibleFields");
    openapiFields.add("kind");
    openapiFields.add("pathToConversionReportCompatibleFields");
    openapiFields.add("reachReportCompatibleFields");
    openapiFields.add("reportCompatibleFields");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CompatibleFields
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CompatibleFields.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompatibleFields is not found in the empty JSON string", CompatibleFields.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CompatibleFields.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CompatibleFields` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `crossDimensionReachReportCompatibleFields`
      if (jsonObj.get("crossDimensionReachReportCompatibleFields") != null && !jsonObj.get("crossDimensionReachReportCompatibleFields").isJsonNull()) {
        CrossDimensionReachReportCompatibleFields.validateJsonElement(jsonObj.get("crossDimensionReachReportCompatibleFields"));
      }
      // validate the optional field `floodlightReportCompatibleFields`
      if (jsonObj.get("floodlightReportCompatibleFields") != null && !jsonObj.get("floodlightReportCompatibleFields").isJsonNull()) {
        FloodlightReportCompatibleFields.validateJsonElement(jsonObj.get("floodlightReportCompatibleFields"));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `pathToConversionReportCompatibleFields`
      if (jsonObj.get("pathToConversionReportCompatibleFields") != null && !jsonObj.get("pathToConversionReportCompatibleFields").isJsonNull()) {
        PathToConversionReportCompatibleFields.validateJsonElement(jsonObj.get("pathToConversionReportCompatibleFields"));
      }
      // validate the optional field `reachReportCompatibleFields`
      if (jsonObj.get("reachReportCompatibleFields") != null && !jsonObj.get("reachReportCompatibleFields").isJsonNull()) {
        ReachReportCompatibleFields.validateJsonElement(jsonObj.get("reachReportCompatibleFields"));
      }
      // validate the optional field `reportCompatibleFields`
      if (jsonObj.get("reportCompatibleFields") != null && !jsonObj.get("reportCompatibleFields").isJsonNull()) {
        ReportCompatibleFields.validateJsonElement(jsonObj.get("reportCompatibleFields"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompatibleFields.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompatibleFields' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompatibleFields> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompatibleFields.class));

       return (TypeAdapter<T>) new TypeAdapter<CompatibleFields>() {
           @Override
           public void write(JsonWriter out, CompatibleFields value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CompatibleFields read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CompatibleFields given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CompatibleFields
   * @throws IOException if the JSON string is invalid with respect to CompatibleFields
   */
  public static CompatibleFields fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompatibleFields.class);
  }

  /**
   * Convert an instance of CompatibleFields to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

