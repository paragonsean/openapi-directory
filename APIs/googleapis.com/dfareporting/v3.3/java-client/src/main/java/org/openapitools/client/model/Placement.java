/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DimensionValue;
import org.openapitools.client.model.LastModifiedInfo;
import org.openapitools.client.model.LookbackConfiguration;
import org.openapitools.client.model.PricingSchedule;
import org.openapitools.client.model.Size;
import org.openapitools.client.model.TagSetting;
import org.openapitools.client.model.VideoSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains properties of a placement.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:12.851901-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Placement {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_AD_BLOCKING_OPT_OUT = "adBlockingOptOut";
  @SerializedName(SERIALIZED_NAME_AD_BLOCKING_OPT_OUT)
  private Boolean adBlockingOptOut;

  public static final String SERIALIZED_NAME_ADDITIONAL_SIZES = "additionalSizes";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_SIZES)
  private List<Size> additionalSizes = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADVERTISER_ID = "advertiserId";
  @SerializedName(SERIALIZED_NAME_ADVERTISER_ID)
  private String advertiserId;

  public static final String SERIALIZED_NAME_ADVERTISER_ID_DIMENSION_VALUE = "advertiserIdDimensionValue";
  @SerializedName(SERIALIZED_NAME_ADVERTISER_ID_DIMENSION_VALUE)
  private DimensionValue advertiserIdDimensionValue;

  public static final String SERIALIZED_NAME_ARCHIVED = "archived";
  @SerializedName(SERIALIZED_NAME_ARCHIVED)
  private Boolean archived;

  public static final String SERIALIZED_NAME_CAMPAIGN_ID = "campaignId";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_ID)
  private String campaignId;

  public static final String SERIALIZED_NAME_CAMPAIGN_ID_DIMENSION_VALUE = "campaignIdDimensionValue";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_ID_DIMENSION_VALUE)
  private DimensionValue campaignIdDimensionValue;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  /**
   * Placement compatibility. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering on desktop, on mobile devices or in mobile apps for regular or interstitial ads respectively. APP and APP_INTERSTITIAL are no longer allowed for new placement insertions. Instead, use DISPLAY or DISPLAY_INTERSTITIAL. IN_STREAM_VIDEO refers to rendering in in-stream video ads developed with the VAST standard. This field is required on insertion.
   */
  @JsonAdapter(CompatibilityEnum.Adapter.class)
  public enum CompatibilityEnum {
    DISPLAY("DISPLAY"),
    
    DISPLAY_INTERSTITIAL("DISPLAY_INTERSTITIAL"),
    
    APP("APP"),
    
    APP_INTERSTITIAL("APP_INTERSTITIAL"),
    
    IN_STREAM_VIDEO("IN_STREAM_VIDEO"),
    
    IN_STREAM_AUDIO("IN_STREAM_AUDIO");

    private String value;

    CompatibilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CompatibilityEnum fromValue(String value) {
      for (CompatibilityEnum b : CompatibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CompatibilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CompatibilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CompatibilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CompatibilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CompatibilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMPATIBILITY = "compatibility";
  @SerializedName(SERIALIZED_NAME_COMPATIBILITY)
  private CompatibilityEnum compatibility;

  public static final String SERIALIZED_NAME_CONTENT_CATEGORY_ID = "contentCategoryId";
  @SerializedName(SERIALIZED_NAME_CONTENT_CATEGORY_ID)
  private String contentCategoryId;

  public static final String SERIALIZED_NAME_CREATE_INFO = "createInfo";
  @SerializedName(SERIALIZED_NAME_CREATE_INFO)
  private LastModifiedInfo createInfo;

  public static final String SERIALIZED_NAME_DIRECTORY_SITE_ID = "directorySiteId";
  @SerializedName(SERIALIZED_NAME_DIRECTORY_SITE_ID)
  private String directorySiteId;

  public static final String SERIALIZED_NAME_DIRECTORY_SITE_ID_DIMENSION_VALUE = "directorySiteIdDimensionValue";
  @SerializedName(SERIALIZED_NAME_DIRECTORY_SITE_ID_DIMENSION_VALUE)
  private DimensionValue directorySiteIdDimensionValue;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ID_DIMENSION_VALUE = "idDimensionValue";
  @SerializedName(SERIALIZED_NAME_ID_DIMENSION_VALUE)
  private DimensionValue idDimensionValue;

  public static final String SERIALIZED_NAME_KEY_NAME = "keyName";
  @SerializedName(SERIALIZED_NAME_KEY_NAME)
  private String keyName;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_INFO = "lastModifiedInfo";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_INFO)
  private LastModifiedInfo lastModifiedInfo;

  public static final String SERIALIZED_NAME_LOOKBACK_CONFIGURATION = "lookbackConfiguration";
  @SerializedName(SERIALIZED_NAME_LOOKBACK_CONFIGURATION)
  private LookbackConfiguration lookbackConfiguration;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PAYMENT_APPROVED = "paymentApproved";
  @SerializedName(SERIALIZED_NAME_PAYMENT_APPROVED)
  private Boolean paymentApproved;

  /**
   * Payment source for this placement. This is a required field that is read-only after insertion.
   */
  @JsonAdapter(PaymentSourceEnum.Adapter.class)
  public enum PaymentSourceEnum {
    AGENCY_PAID("PLACEMENT_AGENCY_PAID"),
    
    PUBLISHER_PAID("PLACEMENT_PUBLISHER_PAID");

    private String value;

    PaymentSourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentSourceEnum fromValue(String value) {
      for (PaymentSourceEnum b : PaymentSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentSourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentSourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentSourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentSourceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PaymentSourceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_SOURCE = "paymentSource";
  @SerializedName(SERIALIZED_NAME_PAYMENT_SOURCE)
  private PaymentSourceEnum paymentSource;

  public static final String SERIALIZED_NAME_PLACEMENT_GROUP_ID = "placementGroupId";
  @SerializedName(SERIALIZED_NAME_PLACEMENT_GROUP_ID)
  private String placementGroupId;

  public static final String SERIALIZED_NAME_PLACEMENT_GROUP_ID_DIMENSION_VALUE = "placementGroupIdDimensionValue";
  @SerializedName(SERIALIZED_NAME_PLACEMENT_GROUP_ID_DIMENSION_VALUE)
  private DimensionValue placementGroupIdDimensionValue;

  public static final String SERIALIZED_NAME_PLACEMENT_STRATEGY_ID = "placementStrategyId";
  @SerializedName(SERIALIZED_NAME_PLACEMENT_STRATEGY_ID)
  private String placementStrategyId;

  public static final String SERIALIZED_NAME_PRICING_SCHEDULE = "pricingSchedule";
  @SerializedName(SERIALIZED_NAME_PRICING_SCHEDULE)
  private PricingSchedule pricingSchedule;

  public static final String SERIALIZED_NAME_PRIMARY = "primary";
  @SerializedName(SERIALIZED_NAME_PRIMARY)
  private Boolean primary;

  public static final String SERIALIZED_NAME_PUBLISHER_UPDATE_INFO = "publisherUpdateInfo";
  @SerializedName(SERIALIZED_NAME_PUBLISHER_UPDATE_INFO)
  private LastModifiedInfo publisherUpdateInfo;

  public static final String SERIALIZED_NAME_SITE_ID = "siteId";
  @SerializedName(SERIALIZED_NAME_SITE_ID)
  private String siteId;

  public static final String SERIALIZED_NAME_SITE_ID_DIMENSION_VALUE = "siteIdDimensionValue";
  @SerializedName(SERIALIZED_NAME_SITE_ID_DIMENSION_VALUE)
  private DimensionValue siteIdDimensionValue;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Size size;

  public static final String SERIALIZED_NAME_SSL_REQUIRED = "sslRequired";
  @SerializedName(SERIALIZED_NAME_SSL_REQUIRED)
  private Boolean sslRequired;

  /**
   * Third-party placement status.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    PENDING_REVIEW("PENDING_REVIEW"),
    
    PAYMENT_ACCEPTED("PAYMENT_ACCEPTED"),
    
    PAYMENT_REJECTED("PAYMENT_REJECTED"),
    
    ACKNOWLEDGE_REJECTION("ACKNOWLEDGE_REJECTION"),
    
    ACKNOWLEDGE_ACCEPTANCE("ACKNOWLEDGE_ACCEPTANCE"),
    
    DRAFT("DRAFT");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_SUBACCOUNT_ID = "subaccountId";
  @SerializedName(SERIALIZED_NAME_SUBACCOUNT_ID)
  private String subaccountId;

  /**
   * Gets or Sets tagFormats
   */
  @JsonAdapter(TagFormatsEnum.Adapter.class)
  public enum TagFormatsEnum {
    STANDARD("PLACEMENT_TAG_STANDARD"),
    
    IFRAME_JAVASCRIPT("PLACEMENT_TAG_IFRAME_JAVASCRIPT"),
    
    IFRAME_ILAYER("PLACEMENT_TAG_IFRAME_ILAYER"),
    
    INTERNAL_REDIRECT("PLACEMENT_TAG_INTERNAL_REDIRECT"),
    
    JAVASCRIPT("PLACEMENT_TAG_JAVASCRIPT"),
    
    INTERSTITIAL_IFRAME_JAVASCRIPT("PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT"),
    
    INTERSTITIAL_INTERNAL_REDIRECT("PLACEMENT_TAG_INTERSTITIAL_INTERNAL_REDIRECT"),
    
    INTERSTITIAL_JAVASCRIPT("PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT"),
    
    CLICK_COMMANDS("PLACEMENT_TAG_CLICK_COMMANDS"),
    
    INSTREAM_VIDEO_PREFETCH("PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH"),
    
    TRACKING("PLACEMENT_TAG_TRACKING"),
    
    TRACKING_IFRAME("PLACEMENT_TAG_TRACKING_IFRAME"),
    
    TRACKING_JAVASCRIPT("PLACEMENT_TAG_TRACKING_JAVASCRIPT"),
    
    INSTREAM_VIDEO_PREFETCH_VAST_3("PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_3"),
    
    IFRAME_JAVASCRIPT_LEGACY("PLACEMENT_TAG_IFRAME_JAVASCRIPT_LEGACY"),
    
    JAVASCRIPT_LEGACY("PLACEMENT_TAG_JAVASCRIPT_LEGACY"),
    
    INTERSTITIAL_IFRAME_JAVASCRIPT_LEGACY("PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT_LEGACY"),
    
    INTERSTITIAL_JAVASCRIPT_LEGACY("PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT_LEGACY"),
    
    INSTREAM_VIDEO_PREFETCH_VAST_4("PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_4"),
    
    TRACKING_THIRD_PARTY_MEASUREMENT("PLACEMENT_TAG_TRACKING_THIRD_PARTY_MEASUREMENT");

    private String value;

    TagFormatsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TagFormatsEnum fromValue(String value) {
      for (TagFormatsEnum b : TagFormatsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TagFormatsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TagFormatsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TagFormatsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TagFormatsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TagFormatsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TAG_FORMATS = "tagFormats";
  @SerializedName(SERIALIZED_NAME_TAG_FORMATS)
  private List<TagFormatsEnum> tagFormats = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAG_SETTING = "tagSetting";
  @SerializedName(SERIALIZED_NAME_TAG_SETTING)
  private TagSetting tagSetting;

  public static final String SERIALIZED_NAME_VIDEO_ACTIVE_VIEW_OPT_OUT = "videoActiveViewOptOut";
  @SerializedName(SERIALIZED_NAME_VIDEO_ACTIVE_VIEW_OPT_OUT)
  private Boolean videoActiveViewOptOut;

  public static final String SERIALIZED_NAME_VIDEO_SETTINGS = "videoSettings";
  @SerializedName(SERIALIZED_NAME_VIDEO_SETTINGS)
  private VideoSettings videoSettings;

  /**
   * VPAID adapter setting for this placement. Controls which VPAID format the measurement adapter will use for in-stream video creatives assigned to this placement. *Note:* Flash is no longer supported. This field now defaults to HTML5 when the following values are provided: FLASH, BOTH.
   */
  @JsonAdapter(VpaidAdapterChoiceEnum.Adapter.class)
  public enum VpaidAdapterChoiceEnum {
    DEFAULT("DEFAULT"),
    
    FLASH("FLASH"),
    
    HTML5("HTML5"),
    
    BOTH("BOTH");

    private String value;

    VpaidAdapterChoiceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VpaidAdapterChoiceEnum fromValue(String value) {
      for (VpaidAdapterChoiceEnum b : VpaidAdapterChoiceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VpaidAdapterChoiceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VpaidAdapterChoiceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VpaidAdapterChoiceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VpaidAdapterChoiceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VpaidAdapterChoiceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VPAID_ADAPTER_CHOICE = "vpaidAdapterChoice";
  @SerializedName(SERIALIZED_NAME_VPAID_ADAPTER_CHOICE)
  private VpaidAdapterChoiceEnum vpaidAdapterChoice;

  public Placement() {
  }

  public Placement accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Account ID of this placement. This field can be left blank.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public Placement adBlockingOptOut(Boolean adBlockingOptOut) {
    this.adBlockingOptOut = adBlockingOptOut;
    return this;
  }

  /**
   * Whether this placement opts out of ad blocking. When true, ad blocking is disabled for this placement. When false, the campaign and site settings take effect.
   * @return adBlockingOptOut
   */
  @javax.annotation.Nullable
  public Boolean getAdBlockingOptOut() {
    return adBlockingOptOut;
  }

  public void setAdBlockingOptOut(Boolean adBlockingOptOut) {
    this.adBlockingOptOut = adBlockingOptOut;
  }


  public Placement additionalSizes(List<Size> additionalSizes) {
    this.additionalSizes = additionalSizes;
    return this;
  }

  public Placement addAdditionalSizesItem(Size additionalSizesItem) {
    if (this.additionalSizes == null) {
      this.additionalSizes = new ArrayList<>();
    }
    this.additionalSizes.add(additionalSizesItem);
    return this;
  }

  /**
   * Additional sizes associated with this placement. When inserting or updating a placement, only the size ID field is used.
   * @return additionalSizes
   */
  @javax.annotation.Nullable
  public List<Size> getAdditionalSizes() {
    return additionalSizes;
  }

  public void setAdditionalSizes(List<Size> additionalSizes) {
    this.additionalSizes = additionalSizes;
  }


  public Placement advertiserId(String advertiserId) {
    this.advertiserId = advertiserId;
    return this;
  }

  /**
   * Advertiser ID of this placement. This field can be left blank.
   * @return advertiserId
   */
  @javax.annotation.Nullable
  public String getAdvertiserId() {
    return advertiserId;
  }

  public void setAdvertiserId(String advertiserId) {
    this.advertiserId = advertiserId;
  }


  public Placement advertiserIdDimensionValue(DimensionValue advertiserIdDimensionValue) {
    this.advertiserIdDimensionValue = advertiserIdDimensionValue;
    return this;
  }

  /**
   * Get advertiserIdDimensionValue
   * @return advertiserIdDimensionValue
   */
  @javax.annotation.Nullable
  public DimensionValue getAdvertiserIdDimensionValue() {
    return advertiserIdDimensionValue;
  }

  public void setAdvertiserIdDimensionValue(DimensionValue advertiserIdDimensionValue) {
    this.advertiserIdDimensionValue = advertiserIdDimensionValue;
  }


  public Placement archived(Boolean archived) {
    this.archived = archived;
    return this;
  }

  /**
   * Whether this placement is archived.
   * @return archived
   */
  @javax.annotation.Nullable
  public Boolean getArchived() {
    return archived;
  }

  public void setArchived(Boolean archived) {
    this.archived = archived;
  }


  public Placement campaignId(String campaignId) {
    this.campaignId = campaignId;
    return this;
  }

  /**
   * Campaign ID of this placement. This field is a required field on insertion.
   * @return campaignId
   */
  @javax.annotation.Nullable
  public String getCampaignId() {
    return campaignId;
  }

  public void setCampaignId(String campaignId) {
    this.campaignId = campaignId;
  }


  public Placement campaignIdDimensionValue(DimensionValue campaignIdDimensionValue) {
    this.campaignIdDimensionValue = campaignIdDimensionValue;
    return this;
  }

  /**
   * Get campaignIdDimensionValue
   * @return campaignIdDimensionValue
   */
  @javax.annotation.Nullable
  public DimensionValue getCampaignIdDimensionValue() {
    return campaignIdDimensionValue;
  }

  public void setCampaignIdDimensionValue(DimensionValue campaignIdDimensionValue) {
    this.campaignIdDimensionValue = campaignIdDimensionValue;
  }


  public Placement comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Comments for this placement.
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public Placement compatibility(CompatibilityEnum compatibility) {
    this.compatibility = compatibility;
    return this;
  }

  /**
   * Placement compatibility. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering on desktop, on mobile devices or in mobile apps for regular or interstitial ads respectively. APP and APP_INTERSTITIAL are no longer allowed for new placement insertions. Instead, use DISPLAY or DISPLAY_INTERSTITIAL. IN_STREAM_VIDEO refers to rendering in in-stream video ads developed with the VAST standard. This field is required on insertion.
   * @return compatibility
   */
  @javax.annotation.Nullable
  public CompatibilityEnum getCompatibility() {
    return compatibility;
  }

  public void setCompatibility(CompatibilityEnum compatibility) {
    this.compatibility = compatibility;
  }


  public Placement contentCategoryId(String contentCategoryId) {
    this.contentCategoryId = contentCategoryId;
    return this;
  }

  /**
   * ID of the content category assigned to this placement.
   * @return contentCategoryId
   */
  @javax.annotation.Nullable
  public String getContentCategoryId() {
    return contentCategoryId;
  }

  public void setContentCategoryId(String contentCategoryId) {
    this.contentCategoryId = contentCategoryId;
  }


  public Placement createInfo(LastModifiedInfo createInfo) {
    this.createInfo = createInfo;
    return this;
  }

  /**
   * Get createInfo
   * @return createInfo
   */
  @javax.annotation.Nullable
  public LastModifiedInfo getCreateInfo() {
    return createInfo;
  }

  public void setCreateInfo(LastModifiedInfo createInfo) {
    this.createInfo = createInfo;
  }


  public Placement directorySiteId(String directorySiteId) {
    this.directorySiteId = directorySiteId;
    return this;
  }

  /**
   * Directory site ID of this placement. On insert, you must set either this field or the siteId field to specify the site associated with this placement. This is a required field that is read-only after insertion.
   * @return directorySiteId
   */
  @javax.annotation.Nullable
  public String getDirectorySiteId() {
    return directorySiteId;
  }

  public void setDirectorySiteId(String directorySiteId) {
    this.directorySiteId = directorySiteId;
  }


  public Placement directorySiteIdDimensionValue(DimensionValue directorySiteIdDimensionValue) {
    this.directorySiteIdDimensionValue = directorySiteIdDimensionValue;
    return this;
  }

  /**
   * Get directorySiteIdDimensionValue
   * @return directorySiteIdDimensionValue
   */
  @javax.annotation.Nullable
  public DimensionValue getDirectorySiteIdDimensionValue() {
    return directorySiteIdDimensionValue;
  }

  public void setDirectorySiteIdDimensionValue(DimensionValue directorySiteIdDimensionValue) {
    this.directorySiteIdDimensionValue = directorySiteIdDimensionValue;
  }


  public Placement externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

  /**
   * External ID for this placement.
   * @return externalId
   */
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  public Placement id(String id) {
    this.id = id;
    return this;
  }

  /**
   * ID of this placement. This is a read-only, auto-generated field.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Placement idDimensionValue(DimensionValue idDimensionValue) {
    this.idDimensionValue = idDimensionValue;
    return this;
  }

  /**
   * Get idDimensionValue
   * @return idDimensionValue
   */
  @javax.annotation.Nullable
  public DimensionValue getIdDimensionValue() {
    return idDimensionValue;
  }

  public void setIdDimensionValue(DimensionValue idDimensionValue) {
    this.idDimensionValue = idDimensionValue;
  }


  public Placement keyName(String keyName) {
    this.keyName = keyName;
    return this;
  }

  /**
   * Key name of this placement. This is a read-only, auto-generated field.
   * @return keyName
   */
  @javax.annotation.Nullable
  public String getKeyName() {
    return keyName;
  }

  public void setKeyName(String keyName) {
    this.keyName = keyName;
  }


  public Placement kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string \&quot;dfareporting#placement\&quot;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Placement lastModifiedInfo(LastModifiedInfo lastModifiedInfo) {
    this.lastModifiedInfo = lastModifiedInfo;
    return this;
  }

  /**
   * Get lastModifiedInfo
   * @return lastModifiedInfo
   */
  @javax.annotation.Nullable
  public LastModifiedInfo getLastModifiedInfo() {
    return lastModifiedInfo;
  }

  public void setLastModifiedInfo(LastModifiedInfo lastModifiedInfo) {
    this.lastModifiedInfo = lastModifiedInfo;
  }


  public Placement lookbackConfiguration(LookbackConfiguration lookbackConfiguration) {
    this.lookbackConfiguration = lookbackConfiguration;
    return this;
  }

  /**
   * Get lookbackConfiguration
   * @return lookbackConfiguration
   */
  @javax.annotation.Nullable
  public LookbackConfiguration getLookbackConfiguration() {
    return lookbackConfiguration;
  }

  public void setLookbackConfiguration(LookbackConfiguration lookbackConfiguration) {
    this.lookbackConfiguration = lookbackConfiguration;
  }


  public Placement name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of this placement.This is a required field and must be less than or equal to 256 characters long.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Placement paymentApproved(Boolean paymentApproved) {
    this.paymentApproved = paymentApproved;
    return this;
  }

  /**
   * Whether payment was approved for this placement. This is a read-only field relevant only to publisher-paid placements.
   * @return paymentApproved
   */
  @javax.annotation.Nullable
  public Boolean getPaymentApproved() {
    return paymentApproved;
  }

  public void setPaymentApproved(Boolean paymentApproved) {
    this.paymentApproved = paymentApproved;
  }


  public Placement paymentSource(PaymentSourceEnum paymentSource) {
    this.paymentSource = paymentSource;
    return this;
  }

  /**
   * Payment source for this placement. This is a required field that is read-only after insertion.
   * @return paymentSource
   */
  @javax.annotation.Nullable
  public PaymentSourceEnum getPaymentSource() {
    return paymentSource;
  }

  public void setPaymentSource(PaymentSourceEnum paymentSource) {
    this.paymentSource = paymentSource;
  }


  public Placement placementGroupId(String placementGroupId) {
    this.placementGroupId = placementGroupId;
    return this;
  }

  /**
   * ID of this placement&#39;s group, if applicable.
   * @return placementGroupId
   */
  @javax.annotation.Nullable
  public String getPlacementGroupId() {
    return placementGroupId;
  }

  public void setPlacementGroupId(String placementGroupId) {
    this.placementGroupId = placementGroupId;
  }


  public Placement placementGroupIdDimensionValue(DimensionValue placementGroupIdDimensionValue) {
    this.placementGroupIdDimensionValue = placementGroupIdDimensionValue;
    return this;
  }

  /**
   * Get placementGroupIdDimensionValue
   * @return placementGroupIdDimensionValue
   */
  @javax.annotation.Nullable
  public DimensionValue getPlacementGroupIdDimensionValue() {
    return placementGroupIdDimensionValue;
  }

  public void setPlacementGroupIdDimensionValue(DimensionValue placementGroupIdDimensionValue) {
    this.placementGroupIdDimensionValue = placementGroupIdDimensionValue;
  }


  public Placement placementStrategyId(String placementStrategyId) {
    this.placementStrategyId = placementStrategyId;
    return this;
  }

  /**
   * ID of the placement strategy assigned to this placement.
   * @return placementStrategyId
   */
  @javax.annotation.Nullable
  public String getPlacementStrategyId() {
    return placementStrategyId;
  }

  public void setPlacementStrategyId(String placementStrategyId) {
    this.placementStrategyId = placementStrategyId;
  }


  public Placement pricingSchedule(PricingSchedule pricingSchedule) {
    this.pricingSchedule = pricingSchedule;
    return this;
  }

  /**
   * Get pricingSchedule
   * @return pricingSchedule
   */
  @javax.annotation.Nullable
  public PricingSchedule getPricingSchedule() {
    return pricingSchedule;
  }

  public void setPricingSchedule(PricingSchedule pricingSchedule) {
    this.pricingSchedule = pricingSchedule;
  }


  public Placement primary(Boolean primary) {
    this.primary = primary;
    return this;
  }

  /**
   * Whether this placement is the primary placement of a roadblock (placement group). You cannot change this field from true to false. Setting this field to true will automatically set the primary field on the original primary placement of the roadblock to false, and it will automatically set the roadblock&#39;s primaryPlacementId field to the ID of this placement.
   * @return primary
   */
  @javax.annotation.Nullable
  public Boolean getPrimary() {
    return primary;
  }

  public void setPrimary(Boolean primary) {
    this.primary = primary;
  }


  public Placement publisherUpdateInfo(LastModifiedInfo publisherUpdateInfo) {
    this.publisherUpdateInfo = publisherUpdateInfo;
    return this;
  }

  /**
   * Get publisherUpdateInfo
   * @return publisherUpdateInfo
   */
  @javax.annotation.Nullable
  public LastModifiedInfo getPublisherUpdateInfo() {
    return publisherUpdateInfo;
  }

  public void setPublisherUpdateInfo(LastModifiedInfo publisherUpdateInfo) {
    this.publisherUpdateInfo = publisherUpdateInfo;
  }


  public Placement siteId(String siteId) {
    this.siteId = siteId;
    return this;
  }

  /**
   * Site ID associated with this placement. On insert, you must set either this field or the directorySiteId field to specify the site associated with this placement. This is a required field that is read-only after insertion.
   * @return siteId
   */
  @javax.annotation.Nullable
  public String getSiteId() {
    return siteId;
  }

  public void setSiteId(String siteId) {
    this.siteId = siteId;
  }


  public Placement siteIdDimensionValue(DimensionValue siteIdDimensionValue) {
    this.siteIdDimensionValue = siteIdDimensionValue;
    return this;
  }

  /**
   * Get siteIdDimensionValue
   * @return siteIdDimensionValue
   */
  @javax.annotation.Nullable
  public DimensionValue getSiteIdDimensionValue() {
    return siteIdDimensionValue;
  }

  public void setSiteIdDimensionValue(DimensionValue siteIdDimensionValue) {
    this.siteIdDimensionValue = siteIdDimensionValue;
  }


  public Placement size(Size size) {
    this.size = size;
    return this;
  }

  /**
   * Get size
   * @return size
   */
  @javax.annotation.Nullable
  public Size getSize() {
    return size;
  }

  public void setSize(Size size) {
    this.size = size;
  }


  public Placement sslRequired(Boolean sslRequired) {
    this.sslRequired = sslRequired;
    return this;
  }

  /**
   * Whether creatives assigned to this placement must be SSL-compliant.
   * @return sslRequired
   */
  @javax.annotation.Nullable
  public Boolean getSslRequired() {
    return sslRequired;
  }

  public void setSslRequired(Boolean sslRequired) {
    this.sslRequired = sslRequired;
  }


  public Placement status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Third-party placement status.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Placement subaccountId(String subaccountId) {
    this.subaccountId = subaccountId;
    return this;
  }

  /**
   * Subaccount ID of this placement. This field can be left blank.
   * @return subaccountId
   */
  @javax.annotation.Nullable
  public String getSubaccountId() {
    return subaccountId;
  }

  public void setSubaccountId(String subaccountId) {
    this.subaccountId = subaccountId;
  }


  public Placement tagFormats(List<TagFormatsEnum> tagFormats) {
    this.tagFormats = tagFormats;
    return this;
  }

  public Placement addTagFormatsItem(TagFormatsEnum tagFormatsItem) {
    if (this.tagFormats == null) {
      this.tagFormats = new ArrayList<>();
    }
    this.tagFormats.add(tagFormatsItem);
    return this;
  }

  /**
   * Tag formats to generate for this placement. This field is required on insertion. Acceptable values are: - \&quot;PLACEMENT_TAG_STANDARD\&quot; - \&quot;PLACEMENT_TAG_IFRAME_JAVASCRIPT\&quot; - \&quot;PLACEMENT_TAG_IFRAME_ILAYER\&quot; - \&quot;PLACEMENT_TAG_INTERNAL_REDIRECT\&quot; - \&quot;PLACEMENT_TAG_JAVASCRIPT\&quot; - \&quot;PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT\&quot; - \&quot;PLACEMENT_TAG_INTERSTITIAL_INTERNAL_REDIRECT\&quot; - \&quot;PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT\&quot; - \&quot;PLACEMENT_TAG_CLICK_COMMANDS\&quot; - \&quot;PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH\&quot; - \&quot;PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_3\&quot; - \&quot;PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_4\&quot; - \&quot;PLACEMENT_TAG_TRACKING\&quot; - \&quot;PLACEMENT_TAG_TRACKING_IFRAME\&quot; - \&quot;PLACEMENT_TAG_TRACKING_JAVASCRIPT\&quot; 
   * @return tagFormats
   */
  @javax.annotation.Nullable
  public List<TagFormatsEnum> getTagFormats() {
    return tagFormats;
  }

  public void setTagFormats(List<TagFormatsEnum> tagFormats) {
    this.tagFormats = tagFormats;
  }


  public Placement tagSetting(TagSetting tagSetting) {
    this.tagSetting = tagSetting;
    return this;
  }

  /**
   * Get tagSetting
   * @return tagSetting
   */
  @javax.annotation.Nullable
  public TagSetting getTagSetting() {
    return tagSetting;
  }

  public void setTagSetting(TagSetting tagSetting) {
    this.tagSetting = tagSetting;
  }


  public Placement videoActiveViewOptOut(Boolean videoActiveViewOptOut) {
    this.videoActiveViewOptOut = videoActiveViewOptOut;
    return this;
  }

  /**
   * Whether Verification and ActiveView are disabled for in-stream video creatives for this placement. The same setting videoActiveViewOptOut exists on the site level -- the opt out occurs if either of these settings are true. These settings are distinct from DirectorySites.settings.activeViewOptOut or Sites.siteSettings.activeViewOptOut which only apply to display ads. However, Accounts.activeViewOptOut opts out both video traffic, as well as display ads, from Verification and ActiveView.
   * @return videoActiveViewOptOut
   */
  @javax.annotation.Nullable
  public Boolean getVideoActiveViewOptOut() {
    return videoActiveViewOptOut;
  }

  public void setVideoActiveViewOptOut(Boolean videoActiveViewOptOut) {
    this.videoActiveViewOptOut = videoActiveViewOptOut;
  }


  public Placement videoSettings(VideoSettings videoSettings) {
    this.videoSettings = videoSettings;
    return this;
  }

  /**
   * Get videoSettings
   * @return videoSettings
   */
  @javax.annotation.Nullable
  public VideoSettings getVideoSettings() {
    return videoSettings;
  }

  public void setVideoSettings(VideoSettings videoSettings) {
    this.videoSettings = videoSettings;
  }


  public Placement vpaidAdapterChoice(VpaidAdapterChoiceEnum vpaidAdapterChoice) {
    this.vpaidAdapterChoice = vpaidAdapterChoice;
    return this;
  }

  /**
   * VPAID adapter setting for this placement. Controls which VPAID format the measurement adapter will use for in-stream video creatives assigned to this placement. *Note:* Flash is no longer supported. This field now defaults to HTML5 when the following values are provided: FLASH, BOTH.
   * @return vpaidAdapterChoice
   */
  @javax.annotation.Nullable
  public VpaidAdapterChoiceEnum getVpaidAdapterChoice() {
    return vpaidAdapterChoice;
  }

  public void setVpaidAdapterChoice(VpaidAdapterChoiceEnum vpaidAdapterChoice) {
    this.vpaidAdapterChoice = vpaidAdapterChoice;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Placement placement = (Placement) o;
    return Objects.equals(this.accountId, placement.accountId) &&
        Objects.equals(this.adBlockingOptOut, placement.adBlockingOptOut) &&
        Objects.equals(this.additionalSizes, placement.additionalSizes) &&
        Objects.equals(this.advertiserId, placement.advertiserId) &&
        Objects.equals(this.advertiserIdDimensionValue, placement.advertiserIdDimensionValue) &&
        Objects.equals(this.archived, placement.archived) &&
        Objects.equals(this.campaignId, placement.campaignId) &&
        Objects.equals(this.campaignIdDimensionValue, placement.campaignIdDimensionValue) &&
        Objects.equals(this.comment, placement.comment) &&
        Objects.equals(this.compatibility, placement.compatibility) &&
        Objects.equals(this.contentCategoryId, placement.contentCategoryId) &&
        Objects.equals(this.createInfo, placement.createInfo) &&
        Objects.equals(this.directorySiteId, placement.directorySiteId) &&
        Objects.equals(this.directorySiteIdDimensionValue, placement.directorySiteIdDimensionValue) &&
        Objects.equals(this.externalId, placement.externalId) &&
        Objects.equals(this.id, placement.id) &&
        Objects.equals(this.idDimensionValue, placement.idDimensionValue) &&
        Objects.equals(this.keyName, placement.keyName) &&
        Objects.equals(this.kind, placement.kind) &&
        Objects.equals(this.lastModifiedInfo, placement.lastModifiedInfo) &&
        Objects.equals(this.lookbackConfiguration, placement.lookbackConfiguration) &&
        Objects.equals(this.name, placement.name) &&
        Objects.equals(this.paymentApproved, placement.paymentApproved) &&
        Objects.equals(this.paymentSource, placement.paymentSource) &&
        Objects.equals(this.placementGroupId, placement.placementGroupId) &&
        Objects.equals(this.placementGroupIdDimensionValue, placement.placementGroupIdDimensionValue) &&
        Objects.equals(this.placementStrategyId, placement.placementStrategyId) &&
        Objects.equals(this.pricingSchedule, placement.pricingSchedule) &&
        Objects.equals(this.primary, placement.primary) &&
        Objects.equals(this.publisherUpdateInfo, placement.publisherUpdateInfo) &&
        Objects.equals(this.siteId, placement.siteId) &&
        Objects.equals(this.siteIdDimensionValue, placement.siteIdDimensionValue) &&
        Objects.equals(this.size, placement.size) &&
        Objects.equals(this.sslRequired, placement.sslRequired) &&
        Objects.equals(this.status, placement.status) &&
        Objects.equals(this.subaccountId, placement.subaccountId) &&
        Objects.equals(this.tagFormats, placement.tagFormats) &&
        Objects.equals(this.tagSetting, placement.tagSetting) &&
        Objects.equals(this.videoActiveViewOptOut, placement.videoActiveViewOptOut) &&
        Objects.equals(this.videoSettings, placement.videoSettings) &&
        Objects.equals(this.vpaidAdapterChoice, placement.vpaidAdapterChoice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, adBlockingOptOut, additionalSizes, advertiserId, advertiserIdDimensionValue, archived, campaignId, campaignIdDimensionValue, comment, compatibility, contentCategoryId, createInfo, directorySiteId, directorySiteIdDimensionValue, externalId, id, idDimensionValue, keyName, kind, lastModifiedInfo, lookbackConfiguration, name, paymentApproved, paymentSource, placementGroupId, placementGroupIdDimensionValue, placementStrategyId, pricingSchedule, primary, publisherUpdateInfo, siteId, siteIdDimensionValue, size, sslRequired, status, subaccountId, tagFormats, tagSetting, videoActiveViewOptOut, videoSettings, vpaidAdapterChoice);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Placement {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    adBlockingOptOut: ").append(toIndentedString(adBlockingOptOut)).append("\n");
    sb.append("    additionalSizes: ").append(toIndentedString(additionalSizes)).append("\n");
    sb.append("    advertiserId: ").append(toIndentedString(advertiserId)).append("\n");
    sb.append("    advertiserIdDimensionValue: ").append(toIndentedString(advertiserIdDimensionValue)).append("\n");
    sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
    sb.append("    campaignId: ").append(toIndentedString(campaignId)).append("\n");
    sb.append("    campaignIdDimensionValue: ").append(toIndentedString(campaignIdDimensionValue)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    compatibility: ").append(toIndentedString(compatibility)).append("\n");
    sb.append("    contentCategoryId: ").append(toIndentedString(contentCategoryId)).append("\n");
    sb.append("    createInfo: ").append(toIndentedString(createInfo)).append("\n");
    sb.append("    directorySiteId: ").append(toIndentedString(directorySiteId)).append("\n");
    sb.append("    directorySiteIdDimensionValue: ").append(toIndentedString(directorySiteIdDimensionValue)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    idDimensionValue: ").append(toIndentedString(idDimensionValue)).append("\n");
    sb.append("    keyName: ").append(toIndentedString(keyName)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    lastModifiedInfo: ").append(toIndentedString(lastModifiedInfo)).append("\n");
    sb.append("    lookbackConfiguration: ").append(toIndentedString(lookbackConfiguration)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    paymentApproved: ").append(toIndentedString(paymentApproved)).append("\n");
    sb.append("    paymentSource: ").append(toIndentedString(paymentSource)).append("\n");
    sb.append("    placementGroupId: ").append(toIndentedString(placementGroupId)).append("\n");
    sb.append("    placementGroupIdDimensionValue: ").append(toIndentedString(placementGroupIdDimensionValue)).append("\n");
    sb.append("    placementStrategyId: ").append(toIndentedString(placementStrategyId)).append("\n");
    sb.append("    pricingSchedule: ").append(toIndentedString(pricingSchedule)).append("\n");
    sb.append("    primary: ").append(toIndentedString(primary)).append("\n");
    sb.append("    publisherUpdateInfo: ").append(toIndentedString(publisherUpdateInfo)).append("\n");
    sb.append("    siteId: ").append(toIndentedString(siteId)).append("\n");
    sb.append("    siteIdDimensionValue: ").append(toIndentedString(siteIdDimensionValue)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    sslRequired: ").append(toIndentedString(sslRequired)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subaccountId: ").append(toIndentedString(subaccountId)).append("\n");
    sb.append("    tagFormats: ").append(toIndentedString(tagFormats)).append("\n");
    sb.append("    tagSetting: ").append(toIndentedString(tagSetting)).append("\n");
    sb.append("    videoActiveViewOptOut: ").append(toIndentedString(videoActiveViewOptOut)).append("\n");
    sb.append("    videoSettings: ").append(toIndentedString(videoSettings)).append("\n");
    sb.append("    vpaidAdapterChoice: ").append(toIndentedString(vpaidAdapterChoice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("adBlockingOptOut");
    openapiFields.add("additionalSizes");
    openapiFields.add("advertiserId");
    openapiFields.add("advertiserIdDimensionValue");
    openapiFields.add("archived");
    openapiFields.add("campaignId");
    openapiFields.add("campaignIdDimensionValue");
    openapiFields.add("comment");
    openapiFields.add("compatibility");
    openapiFields.add("contentCategoryId");
    openapiFields.add("createInfo");
    openapiFields.add("directorySiteId");
    openapiFields.add("directorySiteIdDimensionValue");
    openapiFields.add("externalId");
    openapiFields.add("id");
    openapiFields.add("idDimensionValue");
    openapiFields.add("keyName");
    openapiFields.add("kind");
    openapiFields.add("lastModifiedInfo");
    openapiFields.add("lookbackConfiguration");
    openapiFields.add("name");
    openapiFields.add("paymentApproved");
    openapiFields.add("paymentSource");
    openapiFields.add("placementGroupId");
    openapiFields.add("placementGroupIdDimensionValue");
    openapiFields.add("placementStrategyId");
    openapiFields.add("pricingSchedule");
    openapiFields.add("primary");
    openapiFields.add("publisherUpdateInfo");
    openapiFields.add("siteId");
    openapiFields.add("siteIdDimensionValue");
    openapiFields.add("size");
    openapiFields.add("sslRequired");
    openapiFields.add("status");
    openapiFields.add("subaccountId");
    openapiFields.add("tagFormats");
    openapiFields.add("tagSetting");
    openapiFields.add("videoActiveViewOptOut");
    openapiFields.add("videoSettings");
    openapiFields.add("vpaidAdapterChoice");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Placement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Placement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Placement is not found in the empty JSON string", Placement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Placement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Placement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if (jsonObj.get("additionalSizes") != null && !jsonObj.get("additionalSizes").isJsonNull()) {
        JsonArray jsonArrayadditionalSizes = jsonObj.getAsJsonArray("additionalSizes");
        if (jsonArrayadditionalSizes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalSizes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalSizes` to be an array in the JSON string but got `%s`", jsonObj.get("additionalSizes").toString()));
          }

          // validate the optional field `additionalSizes` (array)
          for (int i = 0; i < jsonArrayadditionalSizes.size(); i++) {
            Size.validateJsonElement(jsonArrayadditionalSizes.get(i));
          };
        }
      }
      if ((jsonObj.get("advertiserId") != null && !jsonObj.get("advertiserId").isJsonNull()) && !jsonObj.get("advertiserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advertiserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advertiserId").toString()));
      }
      // validate the optional field `advertiserIdDimensionValue`
      if (jsonObj.get("advertiserIdDimensionValue") != null && !jsonObj.get("advertiserIdDimensionValue").isJsonNull()) {
        DimensionValue.validateJsonElement(jsonObj.get("advertiserIdDimensionValue"));
      }
      if ((jsonObj.get("campaignId") != null && !jsonObj.get("campaignId").isJsonNull()) && !jsonObj.get("campaignId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `campaignId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("campaignId").toString()));
      }
      // validate the optional field `campaignIdDimensionValue`
      if (jsonObj.get("campaignIdDimensionValue") != null && !jsonObj.get("campaignIdDimensionValue").isJsonNull()) {
        DimensionValue.validateJsonElement(jsonObj.get("campaignIdDimensionValue"));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("compatibility") != null && !jsonObj.get("compatibility").isJsonNull()) && !jsonObj.get("compatibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compatibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compatibility").toString()));
      }
      // validate the optional field `compatibility`
      if (jsonObj.get("compatibility") != null && !jsonObj.get("compatibility").isJsonNull()) {
        CompatibilityEnum.validateJsonElement(jsonObj.get("compatibility"));
      }
      if ((jsonObj.get("contentCategoryId") != null && !jsonObj.get("contentCategoryId").isJsonNull()) && !jsonObj.get("contentCategoryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentCategoryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentCategoryId").toString()));
      }
      // validate the optional field `createInfo`
      if (jsonObj.get("createInfo") != null && !jsonObj.get("createInfo").isJsonNull()) {
        LastModifiedInfo.validateJsonElement(jsonObj.get("createInfo"));
      }
      if ((jsonObj.get("directorySiteId") != null && !jsonObj.get("directorySiteId").isJsonNull()) && !jsonObj.get("directorySiteId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `directorySiteId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("directorySiteId").toString()));
      }
      // validate the optional field `directorySiteIdDimensionValue`
      if (jsonObj.get("directorySiteIdDimensionValue") != null && !jsonObj.get("directorySiteIdDimensionValue").isJsonNull()) {
        DimensionValue.validateJsonElement(jsonObj.get("directorySiteIdDimensionValue"));
      }
      if ((jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) && !jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `idDimensionValue`
      if (jsonObj.get("idDimensionValue") != null && !jsonObj.get("idDimensionValue").isJsonNull()) {
        DimensionValue.validateJsonElement(jsonObj.get("idDimensionValue"));
      }
      if ((jsonObj.get("keyName") != null && !jsonObj.get("keyName").isJsonNull()) && !jsonObj.get("keyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyName").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `lastModifiedInfo`
      if (jsonObj.get("lastModifiedInfo") != null && !jsonObj.get("lastModifiedInfo").isJsonNull()) {
        LastModifiedInfo.validateJsonElement(jsonObj.get("lastModifiedInfo"));
      }
      // validate the optional field `lookbackConfiguration`
      if (jsonObj.get("lookbackConfiguration") != null && !jsonObj.get("lookbackConfiguration").isJsonNull()) {
        LookbackConfiguration.validateJsonElement(jsonObj.get("lookbackConfiguration"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("paymentSource") != null && !jsonObj.get("paymentSource").isJsonNull()) && !jsonObj.get("paymentSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentSource").toString()));
      }
      // validate the optional field `paymentSource`
      if (jsonObj.get("paymentSource") != null && !jsonObj.get("paymentSource").isJsonNull()) {
        PaymentSourceEnum.validateJsonElement(jsonObj.get("paymentSource"));
      }
      if ((jsonObj.get("placementGroupId") != null && !jsonObj.get("placementGroupId").isJsonNull()) && !jsonObj.get("placementGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `placementGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("placementGroupId").toString()));
      }
      // validate the optional field `placementGroupIdDimensionValue`
      if (jsonObj.get("placementGroupIdDimensionValue") != null && !jsonObj.get("placementGroupIdDimensionValue").isJsonNull()) {
        DimensionValue.validateJsonElement(jsonObj.get("placementGroupIdDimensionValue"));
      }
      if ((jsonObj.get("placementStrategyId") != null && !jsonObj.get("placementStrategyId").isJsonNull()) && !jsonObj.get("placementStrategyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `placementStrategyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("placementStrategyId").toString()));
      }
      // validate the optional field `pricingSchedule`
      if (jsonObj.get("pricingSchedule") != null && !jsonObj.get("pricingSchedule").isJsonNull()) {
        PricingSchedule.validateJsonElement(jsonObj.get("pricingSchedule"));
      }
      // validate the optional field `publisherUpdateInfo`
      if (jsonObj.get("publisherUpdateInfo") != null && !jsonObj.get("publisherUpdateInfo").isJsonNull()) {
        LastModifiedInfo.validateJsonElement(jsonObj.get("publisherUpdateInfo"));
      }
      if ((jsonObj.get("siteId") != null && !jsonObj.get("siteId").isJsonNull()) && !jsonObj.get("siteId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `siteId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("siteId").toString()));
      }
      // validate the optional field `siteIdDimensionValue`
      if (jsonObj.get("siteIdDimensionValue") != null && !jsonObj.get("siteIdDimensionValue").isJsonNull()) {
        DimensionValue.validateJsonElement(jsonObj.get("siteIdDimensionValue"));
      }
      // validate the optional field `size`
      if (jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) {
        Size.validateJsonElement(jsonObj.get("size"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("subaccountId") != null && !jsonObj.get("subaccountId").isJsonNull()) && !jsonObj.get("subaccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subaccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subaccountId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tagFormats") != null && !jsonObj.get("tagFormats").isJsonNull() && !jsonObj.get("tagFormats").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tagFormats` to be an array in the JSON string but got `%s`", jsonObj.get("tagFormats").toString()));
      }
      // validate the optional field `tagSetting`
      if (jsonObj.get("tagSetting") != null && !jsonObj.get("tagSetting").isJsonNull()) {
        TagSetting.validateJsonElement(jsonObj.get("tagSetting"));
      }
      // validate the optional field `videoSettings`
      if (jsonObj.get("videoSettings") != null && !jsonObj.get("videoSettings").isJsonNull()) {
        VideoSettings.validateJsonElement(jsonObj.get("videoSettings"));
      }
      if ((jsonObj.get("vpaidAdapterChoice") != null && !jsonObj.get("vpaidAdapterChoice").isJsonNull()) && !jsonObj.get("vpaidAdapterChoice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vpaidAdapterChoice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vpaidAdapterChoice").toString()));
      }
      // validate the optional field `vpaidAdapterChoice`
      if (jsonObj.get("vpaidAdapterChoice") != null && !jsonObj.get("vpaidAdapterChoice").isJsonNull()) {
        VpaidAdapterChoiceEnum.validateJsonElement(jsonObj.get("vpaidAdapterChoice"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Placement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Placement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Placement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Placement.class));

       return (TypeAdapter<T>) new TypeAdapter<Placement>() {
           @Override
           public void write(JsonWriter out, Placement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Placement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Placement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Placement
   * @throws IOException if the JSON string is invalid with respect to Placement
   */
  public static Placement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Placement.class);
  }

  /**
   * Convert an instance of Placement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

