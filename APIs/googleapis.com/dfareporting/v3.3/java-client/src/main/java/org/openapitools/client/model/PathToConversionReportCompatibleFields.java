/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Dimension;
import org.openapitools.client.model.Metric;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents fields that are compatible to be selected for a report of type \&quot;PATH_TO_CONVERSION\&quot;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:12.851901-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PathToConversionReportCompatibleFields {
  public static final String SERIALIZED_NAME_CONVERSION_DIMENSIONS = "conversionDimensions";
  @SerializedName(SERIALIZED_NAME_CONVERSION_DIMENSIONS)
  private List<Dimension> conversionDimensions = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOM_FLOODLIGHT_VARIABLES = "customFloodlightVariables";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FLOODLIGHT_VARIABLES)
  private List<Dimension> customFloodlightVariables = new ArrayList<>();

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private List<Metric> metrics = new ArrayList<>();

  public static final String SERIALIZED_NAME_PER_INTERACTION_DIMENSIONS = "perInteractionDimensions";
  @SerializedName(SERIALIZED_NAME_PER_INTERACTION_DIMENSIONS)
  private List<Dimension> perInteractionDimensions = new ArrayList<>();

  public PathToConversionReportCompatibleFields() {
  }

  public PathToConversionReportCompatibleFields conversionDimensions(List<Dimension> conversionDimensions) {
    this.conversionDimensions = conversionDimensions;
    return this;
  }

  public PathToConversionReportCompatibleFields addConversionDimensionsItem(Dimension conversionDimensionsItem) {
    if (this.conversionDimensions == null) {
      this.conversionDimensions = new ArrayList<>();
    }
    this.conversionDimensions.add(conversionDimensionsItem);
    return this;
  }

  /**
   * Conversion dimensions which are compatible to be selected in the \&quot;conversionDimensions\&quot; section of the report.
   * @return conversionDimensions
   */
  @javax.annotation.Nullable
  public List<Dimension> getConversionDimensions() {
    return conversionDimensions;
  }

  public void setConversionDimensions(List<Dimension> conversionDimensions) {
    this.conversionDimensions = conversionDimensions;
  }


  public PathToConversionReportCompatibleFields customFloodlightVariables(List<Dimension> customFloodlightVariables) {
    this.customFloodlightVariables = customFloodlightVariables;
    return this;
  }

  public PathToConversionReportCompatibleFields addCustomFloodlightVariablesItem(Dimension customFloodlightVariablesItem) {
    if (this.customFloodlightVariables == null) {
      this.customFloodlightVariables = new ArrayList<>();
    }
    this.customFloodlightVariables.add(customFloodlightVariablesItem);
    return this;
  }

  /**
   * Custom floodlight variables which are compatible to be selected in the \&quot;customFloodlightVariables\&quot; section of the report.
   * @return customFloodlightVariables
   */
  @javax.annotation.Nullable
  public List<Dimension> getCustomFloodlightVariables() {
    return customFloodlightVariables;
  }

  public void setCustomFloodlightVariables(List<Dimension> customFloodlightVariables) {
    this.customFloodlightVariables = customFloodlightVariables;
  }


  public PathToConversionReportCompatibleFields kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * The kind of resource this is, in this case dfareporting#pathToConversionReportCompatibleFields.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public PathToConversionReportCompatibleFields metrics(List<Metric> metrics) {
    this.metrics = metrics;
    return this;
  }

  public PathToConversionReportCompatibleFields addMetricsItem(Metric metricsItem) {
    if (this.metrics == null) {
      this.metrics = new ArrayList<>();
    }
    this.metrics.add(metricsItem);
    return this;
  }

  /**
   * Metrics which are compatible to be selected in the \&quot;metricNames\&quot; section of the report.
   * @return metrics
   */
  @javax.annotation.Nullable
  public List<Metric> getMetrics() {
    return metrics;
  }

  public void setMetrics(List<Metric> metrics) {
    this.metrics = metrics;
  }


  public PathToConversionReportCompatibleFields perInteractionDimensions(List<Dimension> perInteractionDimensions) {
    this.perInteractionDimensions = perInteractionDimensions;
    return this;
  }

  public PathToConversionReportCompatibleFields addPerInteractionDimensionsItem(Dimension perInteractionDimensionsItem) {
    if (this.perInteractionDimensions == null) {
      this.perInteractionDimensions = new ArrayList<>();
    }
    this.perInteractionDimensions.add(perInteractionDimensionsItem);
    return this;
  }

  /**
   * Per-interaction dimensions which are compatible to be selected in the \&quot;perInteractionDimensions\&quot; section of the report.
   * @return perInteractionDimensions
   */
  @javax.annotation.Nullable
  public List<Dimension> getPerInteractionDimensions() {
    return perInteractionDimensions;
  }

  public void setPerInteractionDimensions(List<Dimension> perInteractionDimensions) {
    this.perInteractionDimensions = perInteractionDimensions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PathToConversionReportCompatibleFields pathToConversionReportCompatibleFields = (PathToConversionReportCompatibleFields) o;
    return Objects.equals(this.conversionDimensions, pathToConversionReportCompatibleFields.conversionDimensions) &&
        Objects.equals(this.customFloodlightVariables, pathToConversionReportCompatibleFields.customFloodlightVariables) &&
        Objects.equals(this.kind, pathToConversionReportCompatibleFields.kind) &&
        Objects.equals(this.metrics, pathToConversionReportCompatibleFields.metrics) &&
        Objects.equals(this.perInteractionDimensions, pathToConversionReportCompatibleFields.perInteractionDimensions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conversionDimensions, customFloodlightVariables, kind, metrics, perInteractionDimensions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PathToConversionReportCompatibleFields {\n");
    sb.append("    conversionDimensions: ").append(toIndentedString(conversionDimensions)).append("\n");
    sb.append("    customFloodlightVariables: ").append(toIndentedString(customFloodlightVariables)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    perInteractionDimensions: ").append(toIndentedString(perInteractionDimensions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("conversionDimensions");
    openapiFields.add("customFloodlightVariables");
    openapiFields.add("kind");
    openapiFields.add("metrics");
    openapiFields.add("perInteractionDimensions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PathToConversionReportCompatibleFields
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PathToConversionReportCompatibleFields.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PathToConversionReportCompatibleFields is not found in the empty JSON string", PathToConversionReportCompatibleFields.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PathToConversionReportCompatibleFields.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PathToConversionReportCompatibleFields` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("conversionDimensions") != null && !jsonObj.get("conversionDimensions").isJsonNull()) {
        JsonArray jsonArrayconversionDimensions = jsonObj.getAsJsonArray("conversionDimensions");
        if (jsonArrayconversionDimensions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conversionDimensions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conversionDimensions` to be an array in the JSON string but got `%s`", jsonObj.get("conversionDimensions").toString()));
          }

          // validate the optional field `conversionDimensions` (array)
          for (int i = 0; i < jsonArrayconversionDimensions.size(); i++) {
            Dimension.validateJsonElement(jsonArrayconversionDimensions.get(i));
          };
        }
      }
      if (jsonObj.get("customFloodlightVariables") != null && !jsonObj.get("customFloodlightVariables").isJsonNull()) {
        JsonArray jsonArraycustomFloodlightVariables = jsonObj.getAsJsonArray("customFloodlightVariables");
        if (jsonArraycustomFloodlightVariables != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customFloodlightVariables").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customFloodlightVariables` to be an array in the JSON string but got `%s`", jsonObj.get("customFloodlightVariables").toString()));
          }

          // validate the optional field `customFloodlightVariables` (array)
          for (int i = 0; i < jsonArraycustomFloodlightVariables.size(); i++) {
            Dimension.validateJsonElement(jsonArraycustomFloodlightVariables.get(i));
          };
        }
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if (jsonObj.get("metrics") != null && !jsonObj.get("metrics").isJsonNull()) {
        JsonArray jsonArraymetrics = jsonObj.getAsJsonArray("metrics");
        if (jsonArraymetrics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metrics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metrics` to be an array in the JSON string but got `%s`", jsonObj.get("metrics").toString()));
          }

          // validate the optional field `metrics` (array)
          for (int i = 0; i < jsonArraymetrics.size(); i++) {
            Metric.validateJsonElement(jsonArraymetrics.get(i));
          };
        }
      }
      if (jsonObj.get("perInteractionDimensions") != null && !jsonObj.get("perInteractionDimensions").isJsonNull()) {
        JsonArray jsonArrayperInteractionDimensions = jsonObj.getAsJsonArray("perInteractionDimensions");
        if (jsonArrayperInteractionDimensions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("perInteractionDimensions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `perInteractionDimensions` to be an array in the JSON string but got `%s`", jsonObj.get("perInteractionDimensions").toString()));
          }

          // validate the optional field `perInteractionDimensions` (array)
          for (int i = 0; i < jsonArrayperInteractionDimensions.size(); i++) {
            Dimension.validateJsonElement(jsonArrayperInteractionDimensions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PathToConversionReportCompatibleFields.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PathToConversionReportCompatibleFields' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PathToConversionReportCompatibleFields> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PathToConversionReportCompatibleFields.class));

       return (TypeAdapter<T>) new TypeAdapter<PathToConversionReportCompatibleFields>() {
           @Override
           public void write(JsonWriter out, PathToConversionReportCompatibleFields value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PathToConversionReportCompatibleFields read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PathToConversionReportCompatibleFields given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PathToConversionReportCompatibleFields
   * @throws IOException if the JSON string is invalid with respect to PathToConversionReportCompatibleFields
   */
  public static PathToConversionReportCompatibleFields fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PathToConversionReportCompatibleFields.class);
  }

  /**
   * Convert an instance of PathToConversionReportCompatibleFields to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

