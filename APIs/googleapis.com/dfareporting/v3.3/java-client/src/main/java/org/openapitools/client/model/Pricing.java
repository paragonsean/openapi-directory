/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Flight;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Pricing Information
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:12.851901-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Pricing {
  /**
   * Cap cost type of this inventory item.
   */
  @JsonAdapter(CapCostTypeEnum.Adapter.class)
  public enum CapCostTypeEnum {
    NONE("PLANNING_PLACEMENT_CAP_COST_TYPE_NONE"),
    
    MONTHLY("PLANNING_PLACEMENT_CAP_COST_TYPE_MONTHLY"),
    
    CUMULATIVE("PLANNING_PLACEMENT_CAP_COST_TYPE_CUMULATIVE");

    private String value;

    CapCostTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CapCostTypeEnum fromValue(String value) {
      for (CapCostTypeEnum b : CapCostTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CapCostTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CapCostTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CapCostTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CapCostTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CapCostTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CAP_COST_TYPE = "capCostType";
  @SerializedName(SERIALIZED_NAME_CAP_COST_TYPE)
  private CapCostTypeEnum capCostType;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private LocalDate endDate;

  public static final String SERIALIZED_NAME_FLIGHTS = "flights";
  @SerializedName(SERIALIZED_NAME_FLIGHTS)
  private List<Flight> flights = new ArrayList<>();

  /**
   * Group type of this inventory item if it represents a placement group. Is null otherwise. There are two type of placement groups: PLANNING_PLACEMENT_GROUP_TYPE_PACKAGE is a simple group of inventory items that acts as a single pricing point for a group of tags. PLANNING_PLACEMENT_GROUP_TYPE_ROADBLOCK is a group of inventory items that not only acts as a single pricing point, but also assumes that all the tags in it will be served at the same time. A roadblock requires one of its assigned inventory items to be marked as primary.
   */
  @JsonAdapter(GroupTypeEnum.Adapter.class)
  public enum GroupTypeEnum {
    PACKAGE("PLANNING_PLACEMENT_GROUP_TYPE_PACKAGE"),
    
    ROADBLOCK("PLANNING_PLACEMENT_GROUP_TYPE_ROADBLOCK");

    private String value;

    GroupTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GroupTypeEnum fromValue(String value) {
      for (GroupTypeEnum b : GroupTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GroupTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GroupTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GroupTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GroupTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GroupTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GROUP_TYPE = "groupType";
  @SerializedName(SERIALIZED_NAME_GROUP_TYPE)
  private GroupTypeEnum groupType;

  /**
   * Pricing type of this inventory item.
   */
  @JsonAdapter(PricingTypeEnum.Adapter.class)
  public enum PricingTypeEnum {
    IMPRESSIONS("PLANNING_PLACEMENT_PRICING_TYPE_IMPRESSIONS"),
    
    CPM("PLANNING_PLACEMENT_PRICING_TYPE_CPM"),
    
    CLICKS("PLANNING_PLACEMENT_PRICING_TYPE_CLICKS"),
    
    CPC("PLANNING_PLACEMENT_PRICING_TYPE_CPC"),
    
    CPA("PLANNING_PLACEMENT_PRICING_TYPE_CPA"),
    
    FLAT_RATE_IMPRESSIONS("PLANNING_PLACEMENT_PRICING_TYPE_FLAT_RATE_IMPRESSIONS"),
    
    FLAT_RATE_CLICKS("PLANNING_PLACEMENT_PRICING_TYPE_FLAT_RATE_CLICKS"),
    
    CPM_ACTIVEVIEW("PLANNING_PLACEMENT_PRICING_TYPE_CPM_ACTIVEVIEW");

    private String value;

    PricingTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PricingTypeEnum fromValue(String value) {
      for (PricingTypeEnum b : PricingTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PricingTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PricingTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PricingTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PricingTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PricingTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRICING_TYPE = "pricingType";
  @SerializedName(SERIALIZED_NAME_PRICING_TYPE)
  private PricingTypeEnum pricingType;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private LocalDate startDate;

  public Pricing() {
  }

  public Pricing capCostType(CapCostTypeEnum capCostType) {
    this.capCostType = capCostType;
    return this;
  }

  /**
   * Cap cost type of this inventory item.
   * @return capCostType
   */
  @javax.annotation.Nullable
  public CapCostTypeEnum getCapCostType() {
    return capCostType;
  }

  public void setCapCostType(CapCostTypeEnum capCostType) {
    this.capCostType = capCostType;
  }


  public Pricing endDate(LocalDate endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * Get endDate
   * @return endDate
   */
  @javax.annotation.Nullable
  public LocalDate getEndDate() {
    return endDate;
  }

  public void setEndDate(LocalDate endDate) {
    this.endDate = endDate;
  }


  public Pricing flights(List<Flight> flights) {
    this.flights = flights;
    return this;
  }

  public Pricing addFlightsItem(Flight flightsItem) {
    if (this.flights == null) {
      this.flights = new ArrayList<>();
    }
    this.flights.add(flightsItem);
    return this;
  }

  /**
   * Flights of this inventory item. A flight (a.k.a. pricing period) represents the inventory item pricing information for a specific period of time.
   * @return flights
   */
  @javax.annotation.Nullable
  public List<Flight> getFlights() {
    return flights;
  }

  public void setFlights(List<Flight> flights) {
    this.flights = flights;
  }


  public Pricing groupType(GroupTypeEnum groupType) {
    this.groupType = groupType;
    return this;
  }

  /**
   * Group type of this inventory item if it represents a placement group. Is null otherwise. There are two type of placement groups: PLANNING_PLACEMENT_GROUP_TYPE_PACKAGE is a simple group of inventory items that acts as a single pricing point for a group of tags. PLANNING_PLACEMENT_GROUP_TYPE_ROADBLOCK is a group of inventory items that not only acts as a single pricing point, but also assumes that all the tags in it will be served at the same time. A roadblock requires one of its assigned inventory items to be marked as primary.
   * @return groupType
   */
  @javax.annotation.Nullable
  public GroupTypeEnum getGroupType() {
    return groupType;
  }

  public void setGroupType(GroupTypeEnum groupType) {
    this.groupType = groupType;
  }


  public Pricing pricingType(PricingTypeEnum pricingType) {
    this.pricingType = pricingType;
    return this;
  }

  /**
   * Pricing type of this inventory item.
   * @return pricingType
   */
  @javax.annotation.Nullable
  public PricingTypeEnum getPricingType() {
    return pricingType;
  }

  public void setPricingType(PricingTypeEnum pricingType) {
    this.pricingType = pricingType;
  }


  public Pricing startDate(LocalDate startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nullable
  public LocalDate getStartDate() {
    return startDate;
  }

  public void setStartDate(LocalDate startDate) {
    this.startDate = startDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Pricing pricing = (Pricing) o;
    return Objects.equals(this.capCostType, pricing.capCostType) &&
        Objects.equals(this.endDate, pricing.endDate) &&
        Objects.equals(this.flights, pricing.flights) &&
        Objects.equals(this.groupType, pricing.groupType) &&
        Objects.equals(this.pricingType, pricing.pricingType) &&
        Objects.equals(this.startDate, pricing.startDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(capCostType, endDate, flights, groupType, pricingType, startDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Pricing {\n");
    sb.append("    capCostType: ").append(toIndentedString(capCostType)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    flights: ").append(toIndentedString(flights)).append("\n");
    sb.append("    groupType: ").append(toIndentedString(groupType)).append("\n");
    sb.append("    pricingType: ").append(toIndentedString(pricingType)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("capCostType");
    openapiFields.add("endDate");
    openapiFields.add("flights");
    openapiFields.add("groupType");
    openapiFields.add("pricingType");
    openapiFields.add("startDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Pricing
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Pricing.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Pricing is not found in the empty JSON string", Pricing.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Pricing.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Pricing` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("capCostType") != null && !jsonObj.get("capCostType").isJsonNull()) && !jsonObj.get("capCostType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `capCostType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("capCostType").toString()));
      }
      // validate the optional field `capCostType`
      if (jsonObj.get("capCostType") != null && !jsonObj.get("capCostType").isJsonNull()) {
        CapCostTypeEnum.validateJsonElement(jsonObj.get("capCostType"));
      }
      if (jsonObj.get("flights") != null && !jsonObj.get("flights").isJsonNull()) {
        JsonArray jsonArrayflights = jsonObj.getAsJsonArray("flights");
        if (jsonArrayflights != null) {
          // ensure the json data is an array
          if (!jsonObj.get("flights").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `flights` to be an array in the JSON string but got `%s`", jsonObj.get("flights").toString()));
          }

          // validate the optional field `flights` (array)
          for (int i = 0; i < jsonArrayflights.size(); i++) {
            Flight.validateJsonElement(jsonArrayflights.get(i));
          };
        }
      }
      if ((jsonObj.get("groupType") != null && !jsonObj.get("groupType").isJsonNull()) && !jsonObj.get("groupType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupType").toString()));
      }
      // validate the optional field `groupType`
      if (jsonObj.get("groupType") != null && !jsonObj.get("groupType").isJsonNull()) {
        GroupTypeEnum.validateJsonElement(jsonObj.get("groupType"));
      }
      if ((jsonObj.get("pricingType") != null && !jsonObj.get("pricingType").isJsonNull()) && !jsonObj.get("pricingType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pricingType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pricingType").toString()));
      }
      // validate the optional field `pricingType`
      if (jsonObj.get("pricingType") != null && !jsonObj.get("pricingType").isJsonNull()) {
        PricingTypeEnum.validateJsonElement(jsonObj.get("pricingType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Pricing.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Pricing' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Pricing> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Pricing.class));

       return (TypeAdapter<T>) new TypeAdapter<Pricing>() {
           @Override
           public void write(JsonWriter out, Pricing value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Pricing read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Pricing given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Pricing
   * @throws IOException if the JSON string is invalid with respect to Pricing
   */
  public static Pricing fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Pricing.class);
  }

  /**
   * Convert an instance of Pricing to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

