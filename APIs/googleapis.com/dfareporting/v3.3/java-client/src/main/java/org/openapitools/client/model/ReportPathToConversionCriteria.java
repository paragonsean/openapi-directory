/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DateRange;
import org.openapitools.client.model.DimensionValue;
import org.openapitools.client.model.ReportPathToConversionCriteriaReportProperties;
import org.openapitools.client.model.SortedDimension;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The report criteria for a report of type \&quot;PATH_TO_CONVERSION\&quot;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:12.851901-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReportPathToConversionCriteria {
  public static final String SERIALIZED_NAME_ACTIVITY_FILTERS = "activityFilters";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_FILTERS)
  private List<DimensionValue> activityFilters = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONVERSION_DIMENSIONS = "conversionDimensions";
  @SerializedName(SERIALIZED_NAME_CONVERSION_DIMENSIONS)
  private List<SortedDimension> conversionDimensions = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOM_FLOODLIGHT_VARIABLES = "customFloodlightVariables";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FLOODLIGHT_VARIABLES)
  private List<SortedDimension> customFloodlightVariables = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOM_RICH_MEDIA_EVENTS = "customRichMediaEvents";
  @SerializedName(SERIALIZED_NAME_CUSTOM_RICH_MEDIA_EVENTS)
  private List<DimensionValue> customRichMediaEvents = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATE_RANGE = "dateRange";
  @SerializedName(SERIALIZED_NAME_DATE_RANGE)
  private DateRange dateRange;

  public static final String SERIALIZED_NAME_FLOODLIGHT_CONFIG_ID = "floodlightConfigId";
  @SerializedName(SERIALIZED_NAME_FLOODLIGHT_CONFIG_ID)
  private DimensionValue floodlightConfigId;

  public static final String SERIALIZED_NAME_METRIC_NAMES = "metricNames";
  @SerializedName(SERIALIZED_NAME_METRIC_NAMES)
  private List<String> metricNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_PER_INTERACTION_DIMENSIONS = "perInteractionDimensions";
  @SerializedName(SERIALIZED_NAME_PER_INTERACTION_DIMENSIONS)
  private List<SortedDimension> perInteractionDimensions = new ArrayList<>();

  public static final String SERIALIZED_NAME_REPORT_PROPERTIES = "reportProperties";
  @SerializedName(SERIALIZED_NAME_REPORT_PROPERTIES)
  private ReportPathToConversionCriteriaReportProperties reportProperties;

  public ReportPathToConversionCriteria() {
  }

  public ReportPathToConversionCriteria activityFilters(List<DimensionValue> activityFilters) {
    this.activityFilters = activityFilters;
    return this;
  }

  public ReportPathToConversionCriteria addActivityFiltersItem(DimensionValue activityFiltersItem) {
    if (this.activityFilters == null) {
      this.activityFilters = new ArrayList<>();
    }
    this.activityFilters.add(activityFiltersItem);
    return this;
  }

  /**
   * The list of &#39;dfa:activity&#39; values to filter on.
   * @return activityFilters
   */
  @javax.annotation.Nullable
  public List<DimensionValue> getActivityFilters() {
    return activityFilters;
  }

  public void setActivityFilters(List<DimensionValue> activityFilters) {
    this.activityFilters = activityFilters;
  }


  public ReportPathToConversionCriteria conversionDimensions(List<SortedDimension> conversionDimensions) {
    this.conversionDimensions = conversionDimensions;
    return this;
  }

  public ReportPathToConversionCriteria addConversionDimensionsItem(SortedDimension conversionDimensionsItem) {
    if (this.conversionDimensions == null) {
      this.conversionDimensions = new ArrayList<>();
    }
    this.conversionDimensions.add(conversionDimensionsItem);
    return this;
  }

  /**
   * The list of conversion dimensions the report should include.
   * @return conversionDimensions
   */
  @javax.annotation.Nullable
  public List<SortedDimension> getConversionDimensions() {
    return conversionDimensions;
  }

  public void setConversionDimensions(List<SortedDimension> conversionDimensions) {
    this.conversionDimensions = conversionDimensions;
  }


  public ReportPathToConversionCriteria customFloodlightVariables(List<SortedDimension> customFloodlightVariables) {
    this.customFloodlightVariables = customFloodlightVariables;
    return this;
  }

  public ReportPathToConversionCriteria addCustomFloodlightVariablesItem(SortedDimension customFloodlightVariablesItem) {
    if (this.customFloodlightVariables == null) {
      this.customFloodlightVariables = new ArrayList<>();
    }
    this.customFloodlightVariables.add(customFloodlightVariablesItem);
    return this;
  }

  /**
   * The list of custom floodlight variables the report should include.
   * @return customFloodlightVariables
   */
  @javax.annotation.Nullable
  public List<SortedDimension> getCustomFloodlightVariables() {
    return customFloodlightVariables;
  }

  public void setCustomFloodlightVariables(List<SortedDimension> customFloodlightVariables) {
    this.customFloodlightVariables = customFloodlightVariables;
  }


  public ReportPathToConversionCriteria customRichMediaEvents(List<DimensionValue> customRichMediaEvents) {
    this.customRichMediaEvents = customRichMediaEvents;
    return this;
  }

  public ReportPathToConversionCriteria addCustomRichMediaEventsItem(DimensionValue customRichMediaEventsItem) {
    if (this.customRichMediaEvents == null) {
      this.customRichMediaEvents = new ArrayList<>();
    }
    this.customRichMediaEvents.add(customRichMediaEventsItem);
    return this;
  }

  /**
   * The list of custom rich media events to include.
   * @return customRichMediaEvents
   */
  @javax.annotation.Nullable
  public List<DimensionValue> getCustomRichMediaEvents() {
    return customRichMediaEvents;
  }

  public void setCustomRichMediaEvents(List<DimensionValue> customRichMediaEvents) {
    this.customRichMediaEvents = customRichMediaEvents;
  }


  public ReportPathToConversionCriteria dateRange(DateRange dateRange) {
    this.dateRange = dateRange;
    return this;
  }

  /**
   * Get dateRange
   * @return dateRange
   */
  @javax.annotation.Nullable
  public DateRange getDateRange() {
    return dateRange;
  }

  public void setDateRange(DateRange dateRange) {
    this.dateRange = dateRange;
  }


  public ReportPathToConversionCriteria floodlightConfigId(DimensionValue floodlightConfigId) {
    this.floodlightConfigId = floodlightConfigId;
    return this;
  }

  /**
   * Get floodlightConfigId
   * @return floodlightConfigId
   */
  @javax.annotation.Nullable
  public DimensionValue getFloodlightConfigId() {
    return floodlightConfigId;
  }

  public void setFloodlightConfigId(DimensionValue floodlightConfigId) {
    this.floodlightConfigId = floodlightConfigId;
  }


  public ReportPathToConversionCriteria metricNames(List<String> metricNames) {
    this.metricNames = metricNames;
    return this;
  }

  public ReportPathToConversionCriteria addMetricNamesItem(String metricNamesItem) {
    if (this.metricNames == null) {
      this.metricNames = new ArrayList<>();
    }
    this.metricNames.add(metricNamesItem);
    return this;
  }

  /**
   * The list of names of metrics the report should include.
   * @return metricNames
   */
  @javax.annotation.Nullable
  public List<String> getMetricNames() {
    return metricNames;
  }

  public void setMetricNames(List<String> metricNames) {
    this.metricNames = metricNames;
  }


  public ReportPathToConversionCriteria perInteractionDimensions(List<SortedDimension> perInteractionDimensions) {
    this.perInteractionDimensions = perInteractionDimensions;
    return this;
  }

  public ReportPathToConversionCriteria addPerInteractionDimensionsItem(SortedDimension perInteractionDimensionsItem) {
    if (this.perInteractionDimensions == null) {
      this.perInteractionDimensions = new ArrayList<>();
    }
    this.perInteractionDimensions.add(perInteractionDimensionsItem);
    return this;
  }

  /**
   * The list of per interaction dimensions the report should include.
   * @return perInteractionDimensions
   */
  @javax.annotation.Nullable
  public List<SortedDimension> getPerInteractionDimensions() {
    return perInteractionDimensions;
  }

  public void setPerInteractionDimensions(List<SortedDimension> perInteractionDimensions) {
    this.perInteractionDimensions = perInteractionDimensions;
  }


  public ReportPathToConversionCriteria reportProperties(ReportPathToConversionCriteriaReportProperties reportProperties) {
    this.reportProperties = reportProperties;
    return this;
  }

  /**
   * Get reportProperties
   * @return reportProperties
   */
  @javax.annotation.Nullable
  public ReportPathToConversionCriteriaReportProperties getReportProperties() {
    return reportProperties;
  }

  public void setReportProperties(ReportPathToConversionCriteriaReportProperties reportProperties) {
    this.reportProperties = reportProperties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportPathToConversionCriteria reportPathToConversionCriteria = (ReportPathToConversionCriteria) o;
    return Objects.equals(this.activityFilters, reportPathToConversionCriteria.activityFilters) &&
        Objects.equals(this.conversionDimensions, reportPathToConversionCriteria.conversionDimensions) &&
        Objects.equals(this.customFloodlightVariables, reportPathToConversionCriteria.customFloodlightVariables) &&
        Objects.equals(this.customRichMediaEvents, reportPathToConversionCriteria.customRichMediaEvents) &&
        Objects.equals(this.dateRange, reportPathToConversionCriteria.dateRange) &&
        Objects.equals(this.floodlightConfigId, reportPathToConversionCriteria.floodlightConfigId) &&
        Objects.equals(this.metricNames, reportPathToConversionCriteria.metricNames) &&
        Objects.equals(this.perInteractionDimensions, reportPathToConversionCriteria.perInteractionDimensions) &&
        Objects.equals(this.reportProperties, reportPathToConversionCriteria.reportProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityFilters, conversionDimensions, customFloodlightVariables, customRichMediaEvents, dateRange, floodlightConfigId, metricNames, perInteractionDimensions, reportProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportPathToConversionCriteria {\n");
    sb.append("    activityFilters: ").append(toIndentedString(activityFilters)).append("\n");
    sb.append("    conversionDimensions: ").append(toIndentedString(conversionDimensions)).append("\n");
    sb.append("    customFloodlightVariables: ").append(toIndentedString(customFloodlightVariables)).append("\n");
    sb.append("    customRichMediaEvents: ").append(toIndentedString(customRichMediaEvents)).append("\n");
    sb.append("    dateRange: ").append(toIndentedString(dateRange)).append("\n");
    sb.append("    floodlightConfigId: ").append(toIndentedString(floodlightConfigId)).append("\n");
    sb.append("    metricNames: ").append(toIndentedString(metricNames)).append("\n");
    sb.append("    perInteractionDimensions: ").append(toIndentedString(perInteractionDimensions)).append("\n");
    sb.append("    reportProperties: ").append(toIndentedString(reportProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activityFilters");
    openapiFields.add("conversionDimensions");
    openapiFields.add("customFloodlightVariables");
    openapiFields.add("customRichMediaEvents");
    openapiFields.add("dateRange");
    openapiFields.add("floodlightConfigId");
    openapiFields.add("metricNames");
    openapiFields.add("perInteractionDimensions");
    openapiFields.add("reportProperties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportPathToConversionCriteria
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportPathToConversionCriteria.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportPathToConversionCriteria is not found in the empty JSON string", ReportPathToConversionCriteria.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportPathToConversionCriteria.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportPathToConversionCriteria` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("activityFilters") != null && !jsonObj.get("activityFilters").isJsonNull()) {
        JsonArray jsonArrayactivityFilters = jsonObj.getAsJsonArray("activityFilters");
        if (jsonArrayactivityFilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("activityFilters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `activityFilters` to be an array in the JSON string but got `%s`", jsonObj.get("activityFilters").toString()));
          }

          // validate the optional field `activityFilters` (array)
          for (int i = 0; i < jsonArrayactivityFilters.size(); i++) {
            DimensionValue.validateJsonElement(jsonArrayactivityFilters.get(i));
          };
        }
      }
      if (jsonObj.get("conversionDimensions") != null && !jsonObj.get("conversionDimensions").isJsonNull()) {
        JsonArray jsonArrayconversionDimensions = jsonObj.getAsJsonArray("conversionDimensions");
        if (jsonArrayconversionDimensions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conversionDimensions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conversionDimensions` to be an array in the JSON string but got `%s`", jsonObj.get("conversionDimensions").toString()));
          }

          // validate the optional field `conversionDimensions` (array)
          for (int i = 0; i < jsonArrayconversionDimensions.size(); i++) {
            SortedDimension.validateJsonElement(jsonArrayconversionDimensions.get(i));
          };
        }
      }
      if (jsonObj.get("customFloodlightVariables") != null && !jsonObj.get("customFloodlightVariables").isJsonNull()) {
        JsonArray jsonArraycustomFloodlightVariables = jsonObj.getAsJsonArray("customFloodlightVariables");
        if (jsonArraycustomFloodlightVariables != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customFloodlightVariables").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customFloodlightVariables` to be an array in the JSON string but got `%s`", jsonObj.get("customFloodlightVariables").toString()));
          }

          // validate the optional field `customFloodlightVariables` (array)
          for (int i = 0; i < jsonArraycustomFloodlightVariables.size(); i++) {
            SortedDimension.validateJsonElement(jsonArraycustomFloodlightVariables.get(i));
          };
        }
      }
      if (jsonObj.get("customRichMediaEvents") != null && !jsonObj.get("customRichMediaEvents").isJsonNull()) {
        JsonArray jsonArraycustomRichMediaEvents = jsonObj.getAsJsonArray("customRichMediaEvents");
        if (jsonArraycustomRichMediaEvents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customRichMediaEvents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customRichMediaEvents` to be an array in the JSON string but got `%s`", jsonObj.get("customRichMediaEvents").toString()));
          }

          // validate the optional field `customRichMediaEvents` (array)
          for (int i = 0; i < jsonArraycustomRichMediaEvents.size(); i++) {
            DimensionValue.validateJsonElement(jsonArraycustomRichMediaEvents.get(i));
          };
        }
      }
      // validate the optional field `dateRange`
      if (jsonObj.get("dateRange") != null && !jsonObj.get("dateRange").isJsonNull()) {
        DateRange.validateJsonElement(jsonObj.get("dateRange"));
      }
      // validate the optional field `floodlightConfigId`
      if (jsonObj.get("floodlightConfigId") != null && !jsonObj.get("floodlightConfigId").isJsonNull()) {
        DimensionValue.validateJsonElement(jsonObj.get("floodlightConfigId"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("metricNames") != null && !jsonObj.get("metricNames").isJsonNull() && !jsonObj.get("metricNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `metricNames` to be an array in the JSON string but got `%s`", jsonObj.get("metricNames").toString()));
      }
      if (jsonObj.get("perInteractionDimensions") != null && !jsonObj.get("perInteractionDimensions").isJsonNull()) {
        JsonArray jsonArrayperInteractionDimensions = jsonObj.getAsJsonArray("perInteractionDimensions");
        if (jsonArrayperInteractionDimensions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("perInteractionDimensions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `perInteractionDimensions` to be an array in the JSON string but got `%s`", jsonObj.get("perInteractionDimensions").toString()));
          }

          // validate the optional field `perInteractionDimensions` (array)
          for (int i = 0; i < jsonArrayperInteractionDimensions.size(); i++) {
            SortedDimension.validateJsonElement(jsonArrayperInteractionDimensions.get(i));
          };
        }
      }
      // validate the optional field `reportProperties`
      if (jsonObj.get("reportProperties") != null && !jsonObj.get("reportProperties").isJsonNull()) {
        ReportPathToConversionCriteriaReportProperties.validateJsonElement(jsonObj.get("reportProperties"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportPathToConversionCriteria.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportPathToConversionCriteria' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportPathToConversionCriteria> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportPathToConversionCriteria.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportPathToConversionCriteria>() {
           @Override
           public void write(JsonWriter out, ReportPathToConversionCriteria value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportPathToConversionCriteria read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportPathToConversionCriteria given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportPathToConversionCriteria
   * @throws IOException if the JSON string is invalid with respect to ReportPathToConversionCriteria
   */
  public static ReportPathToConversionCriteria fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportPathToConversionCriteria.class);
  }

  /**
   * Convert an instance of ReportPathToConversionCriteria to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

