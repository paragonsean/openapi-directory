/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LastModifiedInfo;
import org.openapitools.client.model.OrderContact;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes properties of a Planning order.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:12.851901-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Order {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_ADVERTISER_ID = "advertiserId";
  @SerializedName(SERIALIZED_NAME_ADVERTISER_ID)
  private String advertiserId;

  public static final String SERIALIZED_NAME_APPROVER_USER_PROFILE_IDS = "approverUserProfileIds";
  @SerializedName(SERIALIZED_NAME_APPROVER_USER_PROFILE_IDS)
  private List<String> approverUserProfileIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_BUYER_INVOICE_ID = "buyerInvoiceId";
  @SerializedName(SERIALIZED_NAME_BUYER_INVOICE_ID)
  private String buyerInvoiceId;

  public static final String SERIALIZED_NAME_BUYER_ORGANIZATION_NAME = "buyerOrganizationName";
  @SerializedName(SERIALIZED_NAME_BUYER_ORGANIZATION_NAME)
  private String buyerOrganizationName;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private String comments;

  public static final String SERIALIZED_NAME_CONTACTS = "contacts";
  @SerializedName(SERIALIZED_NAME_CONTACTS)
  private List<OrderContact> contacts = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_INFO = "lastModifiedInfo";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_INFO)
  private LastModifiedInfo lastModifiedInfo;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_PLANNING_TERM_ID = "planningTermId";
  @SerializedName(SERIALIZED_NAME_PLANNING_TERM_ID)
  private String planningTermId;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private String projectId;

  public static final String SERIALIZED_NAME_SELLER_ORDER_ID = "sellerOrderId";
  @SerializedName(SERIALIZED_NAME_SELLER_ORDER_ID)
  private String sellerOrderId;

  public static final String SERIALIZED_NAME_SELLER_ORGANIZATION_NAME = "sellerOrganizationName";
  @SerializedName(SERIALIZED_NAME_SELLER_ORGANIZATION_NAME)
  private String sellerOrganizationName;

  public static final String SERIALIZED_NAME_SITE_ID = "siteId";
  @SerializedName(SERIALIZED_NAME_SITE_ID)
  private List<String> siteId = new ArrayList<>();

  public static final String SERIALIZED_NAME_SITE_NAMES = "siteNames";
  @SerializedName(SERIALIZED_NAME_SITE_NAMES)
  private List<String> siteNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBACCOUNT_ID = "subaccountId";
  @SerializedName(SERIALIZED_NAME_SUBACCOUNT_ID)
  private String subaccountId;

  public static final String SERIALIZED_NAME_TERMS_AND_CONDITIONS = "termsAndConditions";
  @SerializedName(SERIALIZED_NAME_TERMS_AND_CONDITIONS)
  private String termsAndConditions;

  public Order() {
  }

  public Order accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Account ID of this order.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public Order advertiserId(String advertiserId) {
    this.advertiserId = advertiserId;
    return this;
  }

  /**
   * Advertiser ID of this order.
   * @return advertiserId
   */
  @javax.annotation.Nullable
  public String getAdvertiserId() {
    return advertiserId;
  }

  public void setAdvertiserId(String advertiserId) {
    this.advertiserId = advertiserId;
  }


  public Order approverUserProfileIds(List<String> approverUserProfileIds) {
    this.approverUserProfileIds = approverUserProfileIds;
    return this;
  }

  public Order addApproverUserProfileIdsItem(String approverUserProfileIdsItem) {
    if (this.approverUserProfileIds == null) {
      this.approverUserProfileIds = new ArrayList<>();
    }
    this.approverUserProfileIds.add(approverUserProfileIdsItem);
    return this;
  }

  /**
   * IDs for users that have to approve documents created for this order.
   * @return approverUserProfileIds
   */
  @javax.annotation.Nullable
  public List<String> getApproverUserProfileIds() {
    return approverUserProfileIds;
  }

  public void setApproverUserProfileIds(List<String> approverUserProfileIds) {
    this.approverUserProfileIds = approverUserProfileIds;
  }


  public Order buyerInvoiceId(String buyerInvoiceId) {
    this.buyerInvoiceId = buyerInvoiceId;
    return this;
  }

  /**
   * Buyer invoice ID associated with this order.
   * @return buyerInvoiceId
   */
  @javax.annotation.Nullable
  public String getBuyerInvoiceId() {
    return buyerInvoiceId;
  }

  public void setBuyerInvoiceId(String buyerInvoiceId) {
    this.buyerInvoiceId = buyerInvoiceId;
  }


  public Order buyerOrganizationName(String buyerOrganizationName) {
    this.buyerOrganizationName = buyerOrganizationName;
    return this;
  }

  /**
   * Name of the buyer organization.
   * @return buyerOrganizationName
   */
  @javax.annotation.Nullable
  public String getBuyerOrganizationName() {
    return buyerOrganizationName;
  }

  public void setBuyerOrganizationName(String buyerOrganizationName) {
    this.buyerOrganizationName = buyerOrganizationName;
  }


  public Order comments(String comments) {
    this.comments = comments;
    return this;
  }

  /**
   * Comments in this order.
   * @return comments
   */
  @javax.annotation.Nullable
  public String getComments() {
    return comments;
  }

  public void setComments(String comments) {
    this.comments = comments;
  }


  public Order contacts(List<OrderContact> contacts) {
    this.contacts = contacts;
    return this;
  }

  public Order addContactsItem(OrderContact contactsItem) {
    if (this.contacts == null) {
      this.contacts = new ArrayList<>();
    }
    this.contacts.add(contactsItem);
    return this;
  }

  /**
   * Contacts for this order.
   * @return contacts
   */
  @javax.annotation.Nullable
  public List<OrderContact> getContacts() {
    return contacts;
  }

  public void setContacts(List<OrderContact> contacts) {
    this.contacts = contacts;
  }


  public Order id(String id) {
    this.id = id;
    return this;
  }

  /**
   * ID of this order. This is a read-only, auto-generated field.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Order kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string \&quot;dfareporting#order\&quot;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Order lastModifiedInfo(LastModifiedInfo lastModifiedInfo) {
    this.lastModifiedInfo = lastModifiedInfo;
    return this;
  }

  /**
   * Get lastModifiedInfo
   * @return lastModifiedInfo
   */
  @javax.annotation.Nullable
  public LastModifiedInfo getLastModifiedInfo() {
    return lastModifiedInfo;
  }

  public void setLastModifiedInfo(LastModifiedInfo lastModifiedInfo) {
    this.lastModifiedInfo = lastModifiedInfo;
  }


  public Order name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of this order.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Order notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Notes of this order.
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public Order planningTermId(String planningTermId) {
    this.planningTermId = planningTermId;
    return this;
  }

  /**
   * ID of the terms and conditions template used in this order.
   * @return planningTermId
   */
  @javax.annotation.Nullable
  public String getPlanningTermId() {
    return planningTermId;
  }

  public void setPlanningTermId(String planningTermId) {
    this.planningTermId = planningTermId;
  }


  public Order projectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * Project ID of this order.
   * @return projectId
   */
  @javax.annotation.Nullable
  public String getProjectId() {
    return projectId;
  }

  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }


  public Order sellerOrderId(String sellerOrderId) {
    this.sellerOrderId = sellerOrderId;
    return this;
  }

  /**
   * Seller order ID associated with this order.
   * @return sellerOrderId
   */
  @javax.annotation.Nullable
  public String getSellerOrderId() {
    return sellerOrderId;
  }

  public void setSellerOrderId(String sellerOrderId) {
    this.sellerOrderId = sellerOrderId;
  }


  public Order sellerOrganizationName(String sellerOrganizationName) {
    this.sellerOrganizationName = sellerOrganizationName;
    return this;
  }

  /**
   * Name of the seller organization.
   * @return sellerOrganizationName
   */
  @javax.annotation.Nullable
  public String getSellerOrganizationName() {
    return sellerOrganizationName;
  }

  public void setSellerOrganizationName(String sellerOrganizationName) {
    this.sellerOrganizationName = sellerOrganizationName;
  }


  public Order siteId(List<String> siteId) {
    this.siteId = siteId;
    return this;
  }

  public Order addSiteIdItem(String siteIdItem) {
    if (this.siteId == null) {
      this.siteId = new ArrayList<>();
    }
    this.siteId.add(siteIdItem);
    return this;
  }

  /**
   * Site IDs this order is associated with.
   * @return siteId
   */
  @javax.annotation.Nullable
  public List<String> getSiteId() {
    return siteId;
  }

  public void setSiteId(List<String> siteId) {
    this.siteId = siteId;
  }


  public Order siteNames(List<String> siteNames) {
    this.siteNames = siteNames;
    return this;
  }

  public Order addSiteNamesItem(String siteNamesItem) {
    if (this.siteNames == null) {
      this.siteNames = new ArrayList<>();
    }
    this.siteNames.add(siteNamesItem);
    return this;
  }

  /**
   * Free-form site names this order is associated with.
   * @return siteNames
   */
  @javax.annotation.Nullable
  public List<String> getSiteNames() {
    return siteNames;
  }

  public void setSiteNames(List<String> siteNames) {
    this.siteNames = siteNames;
  }


  public Order subaccountId(String subaccountId) {
    this.subaccountId = subaccountId;
    return this;
  }

  /**
   * Subaccount ID of this order.
   * @return subaccountId
   */
  @javax.annotation.Nullable
  public String getSubaccountId() {
    return subaccountId;
  }

  public void setSubaccountId(String subaccountId) {
    this.subaccountId = subaccountId;
  }


  public Order termsAndConditions(String termsAndConditions) {
    this.termsAndConditions = termsAndConditions;
    return this;
  }

  /**
   * Terms and conditions of this order.
   * @return termsAndConditions
   */
  @javax.annotation.Nullable
  public String getTermsAndConditions() {
    return termsAndConditions;
  }

  public void setTermsAndConditions(String termsAndConditions) {
    this.termsAndConditions = termsAndConditions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Order order = (Order) o;
    return Objects.equals(this.accountId, order.accountId) &&
        Objects.equals(this.advertiserId, order.advertiserId) &&
        Objects.equals(this.approverUserProfileIds, order.approverUserProfileIds) &&
        Objects.equals(this.buyerInvoiceId, order.buyerInvoiceId) &&
        Objects.equals(this.buyerOrganizationName, order.buyerOrganizationName) &&
        Objects.equals(this.comments, order.comments) &&
        Objects.equals(this.contacts, order.contacts) &&
        Objects.equals(this.id, order.id) &&
        Objects.equals(this.kind, order.kind) &&
        Objects.equals(this.lastModifiedInfo, order.lastModifiedInfo) &&
        Objects.equals(this.name, order.name) &&
        Objects.equals(this.notes, order.notes) &&
        Objects.equals(this.planningTermId, order.planningTermId) &&
        Objects.equals(this.projectId, order.projectId) &&
        Objects.equals(this.sellerOrderId, order.sellerOrderId) &&
        Objects.equals(this.sellerOrganizationName, order.sellerOrganizationName) &&
        Objects.equals(this.siteId, order.siteId) &&
        Objects.equals(this.siteNames, order.siteNames) &&
        Objects.equals(this.subaccountId, order.subaccountId) &&
        Objects.equals(this.termsAndConditions, order.termsAndConditions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, advertiserId, approverUserProfileIds, buyerInvoiceId, buyerOrganizationName, comments, contacts, id, kind, lastModifiedInfo, name, notes, planningTermId, projectId, sellerOrderId, sellerOrganizationName, siteId, siteNames, subaccountId, termsAndConditions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Order {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    advertiserId: ").append(toIndentedString(advertiserId)).append("\n");
    sb.append("    approverUserProfileIds: ").append(toIndentedString(approverUserProfileIds)).append("\n");
    sb.append("    buyerInvoiceId: ").append(toIndentedString(buyerInvoiceId)).append("\n");
    sb.append("    buyerOrganizationName: ").append(toIndentedString(buyerOrganizationName)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    contacts: ").append(toIndentedString(contacts)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    lastModifiedInfo: ").append(toIndentedString(lastModifiedInfo)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    planningTermId: ").append(toIndentedString(planningTermId)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    sellerOrderId: ").append(toIndentedString(sellerOrderId)).append("\n");
    sb.append("    sellerOrganizationName: ").append(toIndentedString(sellerOrganizationName)).append("\n");
    sb.append("    siteId: ").append(toIndentedString(siteId)).append("\n");
    sb.append("    siteNames: ").append(toIndentedString(siteNames)).append("\n");
    sb.append("    subaccountId: ").append(toIndentedString(subaccountId)).append("\n");
    sb.append("    termsAndConditions: ").append(toIndentedString(termsAndConditions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("advertiserId");
    openapiFields.add("approverUserProfileIds");
    openapiFields.add("buyerInvoiceId");
    openapiFields.add("buyerOrganizationName");
    openapiFields.add("comments");
    openapiFields.add("contacts");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("lastModifiedInfo");
    openapiFields.add("name");
    openapiFields.add("notes");
    openapiFields.add("planningTermId");
    openapiFields.add("projectId");
    openapiFields.add("sellerOrderId");
    openapiFields.add("sellerOrganizationName");
    openapiFields.add("siteId");
    openapiFields.add("siteNames");
    openapiFields.add("subaccountId");
    openapiFields.add("termsAndConditions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Order
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Order.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Order is not found in the empty JSON string", Order.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Order.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Order` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if ((jsonObj.get("advertiserId") != null && !jsonObj.get("advertiserId").isJsonNull()) && !jsonObj.get("advertiserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advertiserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advertiserId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("approverUserProfileIds") != null && !jsonObj.get("approverUserProfileIds").isJsonNull() && !jsonObj.get("approverUserProfileIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `approverUserProfileIds` to be an array in the JSON string but got `%s`", jsonObj.get("approverUserProfileIds").toString()));
      }
      if ((jsonObj.get("buyerInvoiceId") != null && !jsonObj.get("buyerInvoiceId").isJsonNull()) && !jsonObj.get("buyerInvoiceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buyerInvoiceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buyerInvoiceId").toString()));
      }
      if ((jsonObj.get("buyerOrganizationName") != null && !jsonObj.get("buyerOrganizationName").isJsonNull()) && !jsonObj.get("buyerOrganizationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buyerOrganizationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buyerOrganizationName").toString()));
      }
      if ((jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonNull()) && !jsonObj.get("comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments").toString()));
      }
      if (jsonObj.get("contacts") != null && !jsonObj.get("contacts").isJsonNull()) {
        JsonArray jsonArraycontacts = jsonObj.getAsJsonArray("contacts");
        if (jsonArraycontacts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("contacts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `contacts` to be an array in the JSON string but got `%s`", jsonObj.get("contacts").toString()));
          }

          // validate the optional field `contacts` (array)
          for (int i = 0; i < jsonArraycontacts.size(); i++) {
            OrderContact.validateJsonElement(jsonArraycontacts.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `lastModifiedInfo`
      if (jsonObj.get("lastModifiedInfo") != null && !jsonObj.get("lastModifiedInfo").isJsonNull()) {
        LastModifiedInfo.validateJsonElement(jsonObj.get("lastModifiedInfo"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if ((jsonObj.get("planningTermId") != null && !jsonObj.get("planningTermId").isJsonNull()) && !jsonObj.get("planningTermId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `planningTermId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("planningTermId").toString()));
      }
      if ((jsonObj.get("projectId") != null && !jsonObj.get("projectId").isJsonNull()) && !jsonObj.get("projectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectId").toString()));
      }
      if ((jsonObj.get("sellerOrderId") != null && !jsonObj.get("sellerOrderId").isJsonNull()) && !jsonObj.get("sellerOrderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sellerOrderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sellerOrderId").toString()));
      }
      if ((jsonObj.get("sellerOrganizationName") != null && !jsonObj.get("sellerOrganizationName").isJsonNull()) && !jsonObj.get("sellerOrganizationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sellerOrganizationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sellerOrganizationName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("siteId") != null && !jsonObj.get("siteId").isJsonNull() && !jsonObj.get("siteId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `siteId` to be an array in the JSON string but got `%s`", jsonObj.get("siteId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("siteNames") != null && !jsonObj.get("siteNames").isJsonNull() && !jsonObj.get("siteNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `siteNames` to be an array in the JSON string but got `%s`", jsonObj.get("siteNames").toString()));
      }
      if ((jsonObj.get("subaccountId") != null && !jsonObj.get("subaccountId").isJsonNull()) && !jsonObj.get("subaccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subaccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subaccountId").toString()));
      }
      if ((jsonObj.get("termsAndConditions") != null && !jsonObj.get("termsAndConditions").isJsonNull()) && !jsonObj.get("termsAndConditions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `termsAndConditions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("termsAndConditions").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Order.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Order' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Order> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Order.class));

       return (TypeAdapter<T>) new TypeAdapter<Order>() {
           @Override
           public void write(JsonWriter out, Order value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Order read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Order given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Order
   * @throws IOException if the JSON string is invalid with respect to Order
   */
  public static Order fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Order.class);
  }

  /**
   * Convert an instance of Order to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

