/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreativeAssetId;
import org.openapitools.client.model.CreativeCustomEvent;
import org.openapitools.client.model.DimensionValue;
import org.openapitools.client.model.OffsetPosition;
import org.openapitools.client.model.Size;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Creative Asset.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:12.851901-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreativeAsset {
  public static final String SERIALIZED_NAME_ACTION_SCRIPT3 = "actionScript3";
  @SerializedName(SERIALIZED_NAME_ACTION_SCRIPT3)
  private Boolean actionScript3;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_ADDITIONAL_SIZES = "additionalSizes";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_SIZES)
  private List<Size> additionalSizes = new ArrayList<>();

  /**
   * Possible alignments for an asset. This is a read-only field. Applicable to the following creative types: RICH_MEDIA_DISPLAY_MULTI_FLOATING_INTERSTITIAL .
   */
  @JsonAdapter(AlignmentEnum.Adapter.class)
  public enum AlignmentEnum {
    TOP("ALIGNMENT_TOP"),
    
    RIGHT("ALIGNMENT_RIGHT"),
    
    BOTTOM("ALIGNMENT_BOTTOM"),
    
    LEFT("ALIGNMENT_LEFT");

    private String value;

    AlignmentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AlignmentEnum fromValue(String value) {
      for (AlignmentEnum b : AlignmentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AlignmentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AlignmentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AlignmentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AlignmentEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AlignmentEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ALIGNMENT = "alignment";
  @SerializedName(SERIALIZED_NAME_ALIGNMENT)
  private AlignmentEnum alignment;

  /**
   * Artwork type of rich media creative. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.
   */
  @JsonAdapter(ArtworkTypeEnum.Adapter.class)
  public enum ArtworkTypeEnum {
    FLASH("ARTWORK_TYPE_FLASH"),
    
    HTML5("ARTWORK_TYPE_HTML5"),
    
    MIXED("ARTWORK_TYPE_MIXED"),
    
    IMAGE("ARTWORK_TYPE_IMAGE");

    private String value;

    ArtworkTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ArtworkTypeEnum fromValue(String value) {
      for (ArtworkTypeEnum b : ArtworkTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ArtworkTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ArtworkTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ArtworkTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ArtworkTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ArtworkTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ARTWORK_TYPE = "artworkType";
  @SerializedName(SERIALIZED_NAME_ARTWORK_TYPE)
  private ArtworkTypeEnum artworkType;

  public static final String SERIALIZED_NAME_ASSET_IDENTIFIER = "assetIdentifier";
  @SerializedName(SERIALIZED_NAME_ASSET_IDENTIFIER)
  private CreativeAssetId assetIdentifier;

  public static final String SERIALIZED_NAME_AUDIO_BIT_RATE = "audioBitRate";
  @SerializedName(SERIALIZED_NAME_AUDIO_BIT_RATE)
  private Integer audioBitRate;

  public static final String SERIALIZED_NAME_AUDIO_SAMPLE_RATE = "audioSampleRate";
  @SerializedName(SERIALIZED_NAME_AUDIO_SAMPLE_RATE)
  private Integer audioSampleRate;

  public static final String SERIALIZED_NAME_BACKUP_IMAGE_EXIT = "backupImageExit";
  @SerializedName(SERIALIZED_NAME_BACKUP_IMAGE_EXIT)
  private CreativeCustomEvent backupImageExit;

  public static final String SERIALIZED_NAME_BIT_RATE = "bitRate";
  @SerializedName(SERIALIZED_NAME_BIT_RATE)
  private Integer bitRate;

  /**
   * Rich media child asset type. This is a read-only field. Applicable to the following creative types: all VPAID.
   */
  @JsonAdapter(ChildAssetTypeEnum.Adapter.class)
  public enum ChildAssetTypeEnum {
    FLASH("CHILD_ASSET_TYPE_FLASH"),
    
    VIDEO("CHILD_ASSET_TYPE_VIDEO"),
    
    IMAGE("CHILD_ASSET_TYPE_IMAGE"),
    
    DATA("CHILD_ASSET_TYPE_DATA");

    private String value;

    ChildAssetTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChildAssetTypeEnum fromValue(String value) {
      for (ChildAssetTypeEnum b : ChildAssetTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChildAssetTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChildAssetTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChildAssetTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChildAssetTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ChildAssetTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CHILD_ASSET_TYPE = "childAssetType";
  @SerializedName(SERIALIZED_NAME_CHILD_ASSET_TYPE)
  private ChildAssetTypeEnum childAssetType;

  public static final String SERIALIZED_NAME_COLLAPSED_SIZE = "collapsedSize";
  @SerializedName(SERIALIZED_NAME_COLLAPSED_SIZE)
  private Size collapsedSize;

  public static final String SERIALIZED_NAME_COMPANION_CREATIVE_IDS = "companionCreativeIds";
  @SerializedName(SERIALIZED_NAME_COMPANION_CREATIVE_IDS)
  private List<String> companionCreativeIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOM_START_TIME_VALUE = "customStartTimeValue";
  @SerializedName(SERIALIZED_NAME_CUSTOM_START_TIME_VALUE)
  private Integer customStartTimeValue;

  /**
   * Gets or Sets detectedFeatures
   */
  @JsonAdapter(DetectedFeaturesEnum.Adapter.class)
  public enum DetectedFeaturesEnum {
    CSS_FONT_FACE("CSS_FONT_FACE"),
    
    CSS_BACKGROUND_SIZE("CSS_BACKGROUND_SIZE"),
    
    CSS_BORDER_IMAGE("CSS_BORDER_IMAGE"),
    
    CSS_BORDER_RADIUS("CSS_BORDER_RADIUS"),
    
    CSS_BOX_SHADOW("CSS_BOX_SHADOW"),
    
    CSS_FLEX_BOX("CSS_FLEX_BOX"),
    
    CSS_HSLA("CSS_HSLA"),
    
    CSS_MULTIPLE_BGS("CSS_MULTIPLE_BGS"),
    
    CSS_OPACITY("CSS_OPACITY"),
    
    CSS_RGBA("CSS_RGBA"),
    
    CSS_TEXT_SHADOW("CSS_TEXT_SHADOW"),
    
    CSS_ANIMATIONS("CSS_ANIMATIONS"),
    
    CSS_COLUMNS("CSS_COLUMNS"),
    
    CSS_GENERATED_CONTENT("CSS_GENERATED_CONTENT"),
    
    CSS_GRADIENTS("CSS_GRADIENTS"),
    
    CSS_REFLECTIONS("CSS_REFLECTIONS"),
    
    CSS_TRANSFORMS("CSS_TRANSFORMS"),
    
    CSS_TRANSFORMS3_D("CSS_TRANSFORMS3D"),
    
    CSS_TRANSITIONS("CSS_TRANSITIONS"),
    
    APPLICATION_CACHE("APPLICATION_CACHE"),
    
    CANVAS("CANVAS"),
    
    CANVAS_TEXT("CANVAS_TEXT"),
    
    DRAG_AND_DROP("DRAG_AND_DROP"),
    
    HASH_CHANGE("HASH_CHANGE"),
    
    HISTORY("HISTORY"),
    
    AUDIO("AUDIO"),
    
    VIDEO("VIDEO"),
    
    INDEXED_DB("INDEXED_DB"),
    
    INPUT_ATTR_AUTOCOMPLETE("INPUT_ATTR_AUTOCOMPLETE"),
    
    INPUT_ATTR_AUTOFOCUS("INPUT_ATTR_AUTOFOCUS"),
    
    INPUT_ATTR_LIST("INPUT_ATTR_LIST"),
    
    INPUT_ATTR_PLACEHOLDER("INPUT_ATTR_PLACEHOLDER"),
    
    INPUT_ATTR_MAX("INPUT_ATTR_MAX"),
    
    INPUT_ATTR_MIN("INPUT_ATTR_MIN"),
    
    INPUT_ATTR_MULTIPLE("INPUT_ATTR_MULTIPLE"),
    
    INPUT_ATTR_PATTERN("INPUT_ATTR_PATTERN"),
    
    INPUT_ATTR_REQUIRED("INPUT_ATTR_REQUIRED"),
    
    INPUT_ATTR_STEP("INPUT_ATTR_STEP"),
    
    INPUT_TYPE_SEARCH("INPUT_TYPE_SEARCH"),
    
    INPUT_TYPE_TEL("INPUT_TYPE_TEL"),
    
    INPUT_TYPE_URL("INPUT_TYPE_URL"),
    
    INPUT_TYPE_EMAIL("INPUT_TYPE_EMAIL"),
    
    INPUT_TYPE_DATETIME("INPUT_TYPE_DATETIME"),
    
    INPUT_TYPE_DATE("INPUT_TYPE_DATE"),
    
    INPUT_TYPE_MONTH("INPUT_TYPE_MONTH"),
    
    INPUT_TYPE_WEEK("INPUT_TYPE_WEEK"),
    
    INPUT_TYPE_TIME("INPUT_TYPE_TIME"),
    
    INPUT_TYPE_DATETIME_LOCAL("INPUT_TYPE_DATETIME_LOCAL"),
    
    INPUT_TYPE_NUMBER("INPUT_TYPE_NUMBER"),
    
    INPUT_TYPE_RANGE("INPUT_TYPE_RANGE"),
    
    INPUT_TYPE_COLOR("INPUT_TYPE_COLOR"),
    
    LOCAL_STORAGE("LOCAL_STORAGE"),
    
    POST_MESSAGE("POST_MESSAGE"),
    
    SESSION_STORAGE("SESSION_STORAGE"),
    
    WEB_SOCKETS("WEB_SOCKETS"),
    
    WEB_SQL_DATABASE("WEB_SQL_DATABASE"),
    
    WEB_WORKERS("WEB_WORKERS"),
    
    GEO_LOCATION("GEO_LOCATION"),
    
    INLINE_SVG("INLINE_SVG"),
    
    SMIL("SMIL"),
    
    SVG_HREF("SVG_HREF"),
    
    SVG_CLIP_PATHS("SVG_CLIP_PATHS"),
    
    TOUCH("TOUCH"),
    
    WEBGL("WEBGL"),
    
    SVG_FILTERS("SVG_FILTERS"),
    
    SVG_FE_IMAGE("SVG_FE_IMAGE");

    private String value;

    DetectedFeaturesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DetectedFeaturesEnum fromValue(String value) {
      for (DetectedFeaturesEnum b : DetectedFeaturesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DetectedFeaturesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DetectedFeaturesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DetectedFeaturesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DetectedFeaturesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DetectedFeaturesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DETECTED_FEATURES = "detectedFeatures";
  @SerializedName(SERIALIZED_NAME_DETECTED_FEATURES)
  private List<DetectedFeaturesEnum> detectedFeatures = new ArrayList<>();

  /**
   * Type of rich media asset. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.
   */
  @JsonAdapter(DisplayTypeEnum.Adapter.class)
  public enum DisplayTypeEnum {
    INPAGE("ASSET_DISPLAY_TYPE_INPAGE"),
    
    FLOATING("ASSET_DISPLAY_TYPE_FLOATING"),
    
    OVERLAY("ASSET_DISPLAY_TYPE_OVERLAY"),
    
    EXPANDING("ASSET_DISPLAY_TYPE_EXPANDING"),
    
    FLASH_IN_FLASH("ASSET_DISPLAY_TYPE_FLASH_IN_FLASH"),
    
    FLASH_IN_FLASH_EXPANDING("ASSET_DISPLAY_TYPE_FLASH_IN_FLASH_EXPANDING"),
    
    PEEL_DOWN("ASSET_DISPLAY_TYPE_PEEL_DOWN"),
    
    VPAID_LINEAR("ASSET_DISPLAY_TYPE_VPAID_LINEAR"),
    
    VPAID_NON_LINEAR("ASSET_DISPLAY_TYPE_VPAID_NON_LINEAR"),
    
    BACKDROP("ASSET_DISPLAY_TYPE_BACKDROP");

    private String value;

    DisplayTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DisplayTypeEnum fromValue(String value) {
      for (DisplayTypeEnum b : DisplayTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DisplayTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DisplayTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DisplayTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DisplayTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DisplayTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DISPLAY_TYPE = "displayType";
  @SerializedName(SERIALIZED_NAME_DISPLAY_TYPE)
  private DisplayTypeEnum displayType;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  /**
   * Duration type for which an asset will be displayed. Applicable to the following creative types: all RICH_MEDIA.
   */
  @JsonAdapter(DurationTypeEnum.Adapter.class)
  public enum DurationTypeEnum {
    AUTO("ASSET_DURATION_TYPE_AUTO"),
    
    NONE("ASSET_DURATION_TYPE_NONE"),
    
    CUSTOM("ASSET_DURATION_TYPE_CUSTOM");

    private String value;

    DurationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DurationTypeEnum fromValue(String value) {
      for (DurationTypeEnum b : DurationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DurationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DurationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DurationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DurationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DurationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DURATION_TYPE = "durationType";
  @SerializedName(SERIALIZED_NAME_DURATION_TYPE)
  private DurationTypeEnum durationType;

  public static final String SERIALIZED_NAME_EXPANDED_DIMENSION = "expandedDimension";
  @SerializedName(SERIALIZED_NAME_EXPANDED_DIMENSION)
  private Size expandedDimension;

  public static final String SERIALIZED_NAME_FILE_SIZE = "fileSize";
  @SerializedName(SERIALIZED_NAME_FILE_SIZE)
  private String fileSize;

  public static final String SERIALIZED_NAME_FLASH_VERSION = "flashVersion";
  @SerializedName(SERIALIZED_NAME_FLASH_VERSION)
  private Integer flashVersion;

  public static final String SERIALIZED_NAME_FRAME_RATE = "frameRate";
  @SerializedName(SERIALIZED_NAME_FRAME_RATE)
  private Float frameRate;

  public static final String SERIALIZED_NAME_HIDE_FLASH_OBJECTS = "hideFlashObjects";
  @SerializedName(SERIALIZED_NAME_HIDE_FLASH_OBJECTS)
  private Boolean hideFlashObjects;

  public static final String SERIALIZED_NAME_HIDE_SELECTION_BOXES = "hideSelectionBoxes";
  @SerializedName(SERIALIZED_NAME_HIDE_SELECTION_BOXES)
  private Boolean hideSelectionBoxes;

  public static final String SERIALIZED_NAME_HORIZONTALLY_LOCKED = "horizontallyLocked";
  @SerializedName(SERIALIZED_NAME_HORIZONTALLY_LOCKED)
  private Boolean horizontallyLocked;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ID_DIMENSION_VALUE = "idDimensionValue";
  @SerializedName(SERIALIZED_NAME_ID_DIMENSION_VALUE)
  private DimensionValue idDimensionValue;

  public static final String SERIALIZED_NAME_MEDIA_DURATION = "mediaDuration";
  @SerializedName(SERIALIZED_NAME_MEDIA_DURATION)
  private Float mediaDuration;

  public static final String SERIALIZED_NAME_MIME_TYPE = "mimeType";
  @SerializedName(SERIALIZED_NAME_MIME_TYPE)
  private String mimeType;

  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private OffsetPosition offset;

  /**
   * Orientation of video asset. This is a read-only, auto-generated field.
   */
  @JsonAdapter(OrientationEnum.Adapter.class)
  public enum OrientationEnum {
    LANDSCAPE("LANDSCAPE"),
    
    PORTRAIT("PORTRAIT"),
    
    SQUARE("SQUARE");

    private String value;

    OrientationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrientationEnum fromValue(String value) {
      for (OrientationEnum b : OrientationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OrientationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrientationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrientationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OrientationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OrientationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ORIENTATION = "orientation";
  @SerializedName(SERIALIZED_NAME_ORIENTATION)
  private OrientationEnum orientation;

  public static final String SERIALIZED_NAME_ORIGINAL_BACKUP = "originalBackup";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_BACKUP)
  private Boolean originalBackup;

  public static final String SERIALIZED_NAME_POLITE_LOAD = "politeLoad";
  @SerializedName(SERIALIZED_NAME_POLITE_LOAD)
  private Boolean politeLoad;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private OffsetPosition position;

  /**
   * Offset left unit for an asset. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.
   */
  @JsonAdapter(PositionLeftUnitEnum.Adapter.class)
  public enum PositionLeftUnitEnum {
    PIXEL("OFFSET_UNIT_PIXEL"),
    
    PERCENT("OFFSET_UNIT_PERCENT"),
    
    PIXEL_FROM_CENTER("OFFSET_UNIT_PIXEL_FROM_CENTER");

    private String value;

    PositionLeftUnitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PositionLeftUnitEnum fromValue(String value) {
      for (PositionLeftUnitEnum b : PositionLeftUnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PositionLeftUnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PositionLeftUnitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PositionLeftUnitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PositionLeftUnitEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PositionLeftUnitEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_POSITION_LEFT_UNIT = "positionLeftUnit";
  @SerializedName(SERIALIZED_NAME_POSITION_LEFT_UNIT)
  private PositionLeftUnitEnum positionLeftUnit;

  /**
   * Offset top unit for an asset. This is a read-only field if the asset displayType is ASSET_DISPLAY_TYPE_OVERLAY. Applicable to the following creative types: all RICH_MEDIA.
   */
  @JsonAdapter(PositionTopUnitEnum.Adapter.class)
  public enum PositionTopUnitEnum {
    PIXEL("OFFSET_UNIT_PIXEL"),
    
    PERCENT("OFFSET_UNIT_PERCENT"),
    
    PIXEL_FROM_CENTER("OFFSET_UNIT_PIXEL_FROM_CENTER");

    private String value;

    PositionTopUnitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PositionTopUnitEnum fromValue(String value) {
      for (PositionTopUnitEnum b : PositionTopUnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PositionTopUnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PositionTopUnitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PositionTopUnitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PositionTopUnitEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PositionTopUnitEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_POSITION_TOP_UNIT = "positionTopUnit";
  @SerializedName(SERIALIZED_NAME_POSITION_TOP_UNIT)
  private PositionTopUnitEnum positionTopUnit;

  public static final String SERIALIZED_NAME_PROGRESSIVE_SERVING_URL = "progressiveServingUrl";
  @SerializedName(SERIALIZED_NAME_PROGRESSIVE_SERVING_URL)
  private String progressiveServingUrl;

  public static final String SERIALIZED_NAME_PUSHDOWN = "pushdown";
  @SerializedName(SERIALIZED_NAME_PUSHDOWN)
  private Boolean pushdown;

  public static final String SERIALIZED_NAME_PUSHDOWN_DURATION = "pushdownDuration";
  @SerializedName(SERIALIZED_NAME_PUSHDOWN_DURATION)
  private Float pushdownDuration;

  /**
   * Role of the asset in relation to creative. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT. This is a required field. PRIMARY applies to DISPLAY, FLASH_INPAGE, HTML5_BANNER, IMAGE, DISPLAY_IMAGE_GALLERY, all RICH_MEDIA (which may contain multiple primary assets), and all VPAID creatives. BACKUP_IMAGE applies to FLASH_INPAGE, HTML5_BANNER, all RICH_MEDIA, and all VPAID creatives. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE. ADDITIONAL_IMAGE and ADDITIONAL_FLASH apply to FLASH_INPAGE creatives. OTHER refers to assets from sources other than Campaign Manager, such as Studio uploaded assets, applicable to all RICH_MEDIA and all VPAID creatives. PARENT_VIDEO refers to videos uploaded by the user in Campaign Manager and is applicable to INSTREAM_VIDEO and VPAID_LINEAR_VIDEO creatives. TRANSCODED_VIDEO refers to videos transcoded by Campaign Manager from PARENT_VIDEO assets and is applicable to INSTREAM_VIDEO and VPAID_LINEAR_VIDEO creatives. ALTERNATE_VIDEO refers to the Campaign Manager representation of child asset videos from Studio, and is applicable to VPAID_LINEAR_VIDEO creatives. These cannot be added or removed within Campaign Manager. For VPAID_LINEAR_VIDEO creatives, PARENT_VIDEO, TRANSCODED_VIDEO and ALTERNATE_VIDEO assets that are marked active serve as backup in case the VPAID creative cannot be served. Only PARENT_VIDEO assets can be added or removed for an INSTREAM_VIDEO or VPAID_LINEAR_VIDEO creative. PARENT_AUDIO refers to audios uploaded by the user in Campaign Manager and is applicable to INSTREAM_AUDIO creatives. TRANSCODED_AUDIO refers to audios transcoded by Campaign Manager from PARENT_AUDIO assets and is applicable to INSTREAM_AUDIO creatives. 
   */
  @JsonAdapter(RoleEnum.Adapter.class)
  public enum RoleEnum {
    PRIMARY("PRIMARY"),
    
    BACKUP_IMAGE("BACKUP_IMAGE"),
    
    ADDITIONAL_IMAGE("ADDITIONAL_IMAGE"),
    
    ADDITIONAL_FLASH("ADDITIONAL_FLASH"),
    
    PARENT_VIDEO("PARENT_VIDEO"),
    
    TRANSCODED_VIDEO("TRANSCODED_VIDEO"),
    
    OTHER("OTHER"),
    
    ALTERNATE_VIDEO("ALTERNATE_VIDEO"),
    
    PARENT_AUDIO("PARENT_AUDIO"),
    
    TRANSCODED_AUDIO("TRANSCODED_AUDIO");

    private String value;

    RoleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RoleEnum fromValue(String value) {
      for (RoleEnum b : RoleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RoleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RoleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RoleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RoleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RoleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private RoleEnum role;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Size size;

  public static final String SERIALIZED_NAME_SSL_COMPLIANT = "sslCompliant";
  @SerializedName(SERIALIZED_NAME_SSL_COMPLIANT)
  private Boolean sslCompliant;

  /**
   * Initial wait time type before making the asset visible. Applicable to the following creative types: all RICH_MEDIA.
   */
  @JsonAdapter(StartTimeTypeEnum.Adapter.class)
  public enum StartTimeTypeEnum {
    NONE("ASSET_START_TIME_TYPE_NONE"),
    
    CUSTOM("ASSET_START_TIME_TYPE_CUSTOM");

    private String value;

    StartTimeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StartTimeTypeEnum fromValue(String value) {
      for (StartTimeTypeEnum b : StartTimeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StartTimeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StartTimeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StartTimeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StartTimeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StartTimeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_START_TIME_TYPE = "startTimeType";
  @SerializedName(SERIALIZED_NAME_START_TIME_TYPE)
  private StartTimeTypeEnum startTimeType;

  public static final String SERIALIZED_NAME_STREAMING_SERVING_URL = "streamingServingUrl";
  @SerializedName(SERIALIZED_NAME_STREAMING_SERVING_URL)
  private String streamingServingUrl;

  public static final String SERIALIZED_NAME_TRANSPARENCY = "transparency";
  @SerializedName(SERIALIZED_NAME_TRANSPARENCY)
  private Boolean transparency;

  public static final String SERIALIZED_NAME_VERTICALLY_LOCKED = "verticallyLocked";
  @SerializedName(SERIALIZED_NAME_VERTICALLY_LOCKED)
  private Boolean verticallyLocked;

  /**
   * Window mode options for flash assets. Applicable to the following creative types: FLASH_INPAGE, RICH_MEDIA_DISPLAY_EXPANDING, RICH_MEDIA_IM_EXPAND, RICH_MEDIA_DISPLAY_BANNER, and RICH_MEDIA_INPAGE_FLOATING.
   */
  @JsonAdapter(WindowModeEnum.Adapter.class)
  public enum WindowModeEnum {
    OPAQUE("OPAQUE"),
    
    WINDOW("WINDOW"),
    
    TRANSPARENT("TRANSPARENT");

    private String value;

    WindowModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WindowModeEnum fromValue(String value) {
      for (WindowModeEnum b : WindowModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WindowModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WindowModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WindowModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WindowModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WindowModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WINDOW_MODE = "windowMode";
  @SerializedName(SERIALIZED_NAME_WINDOW_MODE)
  private WindowModeEnum windowMode;

  public static final String SERIALIZED_NAME_Z_INDEX = "zIndex";
  @SerializedName(SERIALIZED_NAME_Z_INDEX)
  private Integer zIndex;

  public static final String SERIALIZED_NAME_ZIP_FILENAME = "zipFilename";
  @SerializedName(SERIALIZED_NAME_ZIP_FILENAME)
  private String zipFilename;

  public static final String SERIALIZED_NAME_ZIP_FILESIZE = "zipFilesize";
  @SerializedName(SERIALIZED_NAME_ZIP_FILESIZE)
  private String zipFilesize;

  public CreativeAsset() {
  }

  public CreativeAsset actionScript3(Boolean actionScript3) {
    this.actionScript3 = actionScript3;
    return this;
  }

  /**
   * Whether ActionScript3 is enabled for the flash asset. This is a read-only field. Applicable to the following creative type: FLASH_INPAGE. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.
   * @return actionScript3
   */
  @javax.annotation.Nullable
  public Boolean getActionScript3() {
    return actionScript3;
  }

  public void setActionScript3(Boolean actionScript3) {
    this.actionScript3 = actionScript3;
  }


  public CreativeAsset active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Whether the video or audio asset is active. This is a read-only field for VPAID_NON_LINEAR_VIDEO assets. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID.
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public CreativeAsset additionalSizes(List<Size> additionalSizes) {
    this.additionalSizes = additionalSizes;
    return this;
  }

  public CreativeAsset addAdditionalSizesItem(Size additionalSizesItem) {
    if (this.additionalSizes == null) {
      this.additionalSizes = new ArrayList<>();
    }
    this.additionalSizes.add(additionalSizesItem);
    return this;
  }

  /**
   * Additional sizes associated with this creative asset. HTML5 asset generated by compatible software such as GWD will be able to support more sizes this creative asset can render.
   * @return additionalSizes
   */
  @javax.annotation.Nullable
  public List<Size> getAdditionalSizes() {
    return additionalSizes;
  }

  public void setAdditionalSizes(List<Size> additionalSizes) {
    this.additionalSizes = additionalSizes;
  }


  public CreativeAsset alignment(AlignmentEnum alignment) {
    this.alignment = alignment;
    return this;
  }

  /**
   * Possible alignments for an asset. This is a read-only field. Applicable to the following creative types: RICH_MEDIA_DISPLAY_MULTI_FLOATING_INTERSTITIAL .
   * @return alignment
   */
  @javax.annotation.Nullable
  public AlignmentEnum getAlignment() {
    return alignment;
  }

  public void setAlignment(AlignmentEnum alignment) {
    this.alignment = alignment;
  }


  public CreativeAsset artworkType(ArtworkTypeEnum artworkType) {
    this.artworkType = artworkType;
    return this;
  }

  /**
   * Artwork type of rich media creative. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.
   * @return artworkType
   */
  @javax.annotation.Nullable
  public ArtworkTypeEnum getArtworkType() {
    return artworkType;
  }

  public void setArtworkType(ArtworkTypeEnum artworkType) {
    this.artworkType = artworkType;
  }


  public CreativeAsset assetIdentifier(CreativeAssetId assetIdentifier) {
    this.assetIdentifier = assetIdentifier;
    return this;
  }

  /**
   * Get assetIdentifier
   * @return assetIdentifier
   */
  @javax.annotation.Nullable
  public CreativeAssetId getAssetIdentifier() {
    return assetIdentifier;
  }

  public void setAssetIdentifier(CreativeAssetId assetIdentifier) {
    this.assetIdentifier = assetIdentifier;
  }


  public CreativeAsset audioBitRate(Integer audioBitRate) {
    this.audioBitRate = audioBitRate;
    return this;
  }

  /**
   * Audio stream bit rate in kbps. This is a read-only field. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID.
   * @return audioBitRate
   */
  @javax.annotation.Nullable
  public Integer getAudioBitRate() {
    return audioBitRate;
  }

  public void setAudioBitRate(Integer audioBitRate) {
    this.audioBitRate = audioBitRate;
  }


  public CreativeAsset audioSampleRate(Integer audioSampleRate) {
    this.audioSampleRate = audioSampleRate;
    return this;
  }

  /**
   * Audio sample bit rate in hertz. This is a read-only field. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID.
   * @return audioSampleRate
   */
  @javax.annotation.Nullable
  public Integer getAudioSampleRate() {
    return audioSampleRate;
  }

  public void setAudioSampleRate(Integer audioSampleRate) {
    this.audioSampleRate = audioSampleRate;
  }


  public CreativeAsset backupImageExit(CreativeCustomEvent backupImageExit) {
    this.backupImageExit = backupImageExit;
    return this;
  }

  /**
   * Get backupImageExit
   * @return backupImageExit
   */
  @javax.annotation.Nullable
  public CreativeCustomEvent getBackupImageExit() {
    return backupImageExit;
  }

  public void setBackupImageExit(CreativeCustomEvent backupImageExit) {
    this.backupImageExit = backupImageExit;
  }


  public CreativeAsset bitRate(Integer bitRate) {
    this.bitRate = bitRate;
    return this;
  }

  /**
   * Detected bit-rate for audio or video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID.
   * @return bitRate
   */
  @javax.annotation.Nullable
  public Integer getBitRate() {
    return bitRate;
  }

  public void setBitRate(Integer bitRate) {
    this.bitRate = bitRate;
  }


  public CreativeAsset childAssetType(ChildAssetTypeEnum childAssetType) {
    this.childAssetType = childAssetType;
    return this;
  }

  /**
   * Rich media child asset type. This is a read-only field. Applicable to the following creative types: all VPAID.
   * @return childAssetType
   */
  @javax.annotation.Nullable
  public ChildAssetTypeEnum getChildAssetType() {
    return childAssetType;
  }

  public void setChildAssetType(ChildAssetTypeEnum childAssetType) {
    this.childAssetType = childAssetType;
  }


  public CreativeAsset collapsedSize(Size collapsedSize) {
    this.collapsedSize = collapsedSize;
    return this;
  }

  /**
   * Get collapsedSize
   * @return collapsedSize
   */
  @javax.annotation.Nullable
  public Size getCollapsedSize() {
    return collapsedSize;
  }

  public void setCollapsedSize(Size collapsedSize) {
    this.collapsedSize = collapsedSize;
  }


  public CreativeAsset companionCreativeIds(List<String> companionCreativeIds) {
    this.companionCreativeIds = companionCreativeIds;
    return this;
  }

  public CreativeAsset addCompanionCreativeIdsItem(String companionCreativeIdsItem) {
    if (this.companionCreativeIds == null) {
      this.companionCreativeIds = new ArrayList<>();
    }
    this.companionCreativeIds.add(companionCreativeIdsItem);
    return this;
  }

  /**
   * List of companion creatives assigned to an in-stream video creative asset. Acceptable values include IDs of existing flash and image creatives. Applicable to INSTREAM_VIDEO creative type with dynamicAssetSelection set to true.
   * @return companionCreativeIds
   */
  @javax.annotation.Nullable
  public List<String> getCompanionCreativeIds() {
    return companionCreativeIds;
  }

  public void setCompanionCreativeIds(List<String> companionCreativeIds) {
    this.companionCreativeIds = companionCreativeIds;
  }


  public CreativeAsset customStartTimeValue(Integer customStartTimeValue) {
    this.customStartTimeValue = customStartTimeValue;
    return this;
  }

  /**
   * Custom start time in seconds for making the asset visible. Applicable to the following creative types: all RICH_MEDIA. Value must be greater than or equal to 0.
   * @return customStartTimeValue
   */
  @javax.annotation.Nullable
  public Integer getCustomStartTimeValue() {
    return customStartTimeValue;
  }

  public void setCustomStartTimeValue(Integer customStartTimeValue) {
    this.customStartTimeValue = customStartTimeValue;
  }


  public CreativeAsset detectedFeatures(List<DetectedFeaturesEnum> detectedFeatures) {
    this.detectedFeatures = detectedFeatures;
    return this;
  }

  public CreativeAsset addDetectedFeaturesItem(DetectedFeaturesEnum detectedFeaturesItem) {
    if (this.detectedFeatures == null) {
      this.detectedFeatures = new ArrayList<>();
    }
    this.detectedFeatures.add(detectedFeaturesItem);
    return this;
  }

  /**
   * List of feature dependencies for the creative asset that are detected by Campaign Manager. Feature dependencies are features that a browser must be able to support in order to render your HTML5 creative correctly. This is a read-only, auto-generated field. Applicable to the following creative types: HTML5_BANNER. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.
   * @return detectedFeatures
   */
  @javax.annotation.Nullable
  public List<DetectedFeaturesEnum> getDetectedFeatures() {
    return detectedFeatures;
  }

  public void setDetectedFeatures(List<DetectedFeaturesEnum> detectedFeatures) {
    this.detectedFeatures = detectedFeatures;
  }


  public CreativeAsset displayType(DisplayTypeEnum displayType) {
    this.displayType = displayType;
    return this;
  }

  /**
   * Type of rich media asset. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.
   * @return displayType
   */
  @javax.annotation.Nullable
  public DisplayTypeEnum getDisplayType() {
    return displayType;
  }

  public void setDisplayType(DisplayTypeEnum displayType) {
    this.displayType = displayType;
  }


  public CreativeAsset duration(Integer duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Duration in seconds for which an asset will be displayed. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and VPAID_LINEAR_VIDEO. Value must be greater than or equal to 1.
   * @return duration
   */
  @javax.annotation.Nullable
  public Integer getDuration() {
    return duration;
  }

  public void setDuration(Integer duration) {
    this.duration = duration;
  }


  public CreativeAsset durationType(DurationTypeEnum durationType) {
    this.durationType = durationType;
    return this;
  }

  /**
   * Duration type for which an asset will be displayed. Applicable to the following creative types: all RICH_MEDIA.
   * @return durationType
   */
  @javax.annotation.Nullable
  public DurationTypeEnum getDurationType() {
    return durationType;
  }

  public void setDurationType(DurationTypeEnum durationType) {
    this.durationType = durationType;
  }


  public CreativeAsset expandedDimension(Size expandedDimension) {
    this.expandedDimension = expandedDimension;
    return this;
  }

  /**
   * Get expandedDimension
   * @return expandedDimension
   */
  @javax.annotation.Nullable
  public Size getExpandedDimension() {
    return expandedDimension;
  }

  public void setExpandedDimension(Size expandedDimension) {
    this.expandedDimension = expandedDimension;
  }


  public CreativeAsset fileSize(String fileSize) {
    this.fileSize = fileSize;
    return this;
  }

  /**
   * File size associated with this creative asset. This is a read-only field. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT.
   * @return fileSize
   */
  @javax.annotation.Nullable
  public String getFileSize() {
    return fileSize;
  }

  public void setFileSize(String fileSize) {
    this.fileSize = fileSize;
  }


  public CreativeAsset flashVersion(Integer flashVersion) {
    this.flashVersion = flashVersion;
    return this;
  }

  /**
   * Flash version of the asset. This is a read-only field. Applicable to the following creative types: FLASH_INPAGE, all RICH_MEDIA, and all VPAID. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.
   * @return flashVersion
   */
  @javax.annotation.Nullable
  public Integer getFlashVersion() {
    return flashVersion;
  }

  public void setFlashVersion(Integer flashVersion) {
    this.flashVersion = flashVersion;
  }


  public CreativeAsset frameRate(Float frameRate) {
    this.frameRate = frameRate;
    return this;
  }

  /**
   * Video frame rate for video asset in frames per second. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID.
   * @return frameRate
   */
  @javax.annotation.Nullable
  public Float getFrameRate() {
    return frameRate;
  }

  public void setFrameRate(Float frameRate) {
    this.frameRate = frameRate;
  }


  public CreativeAsset hideFlashObjects(Boolean hideFlashObjects) {
    this.hideFlashObjects = hideFlashObjects;
    return this;
  }

  /**
   * Whether to hide Flash objects flag for an asset. Applicable to the following creative types: all RICH_MEDIA.
   * @return hideFlashObjects
   */
  @javax.annotation.Nullable
  public Boolean getHideFlashObjects() {
    return hideFlashObjects;
  }

  public void setHideFlashObjects(Boolean hideFlashObjects) {
    this.hideFlashObjects = hideFlashObjects;
  }


  public CreativeAsset hideSelectionBoxes(Boolean hideSelectionBoxes) {
    this.hideSelectionBoxes = hideSelectionBoxes;
    return this;
  }

  /**
   * Whether to hide selection boxes flag for an asset. Applicable to the following creative types: all RICH_MEDIA.
   * @return hideSelectionBoxes
   */
  @javax.annotation.Nullable
  public Boolean getHideSelectionBoxes() {
    return hideSelectionBoxes;
  }

  public void setHideSelectionBoxes(Boolean hideSelectionBoxes) {
    this.hideSelectionBoxes = hideSelectionBoxes;
  }


  public CreativeAsset horizontallyLocked(Boolean horizontallyLocked) {
    this.horizontallyLocked = horizontallyLocked;
    return this;
  }

  /**
   * Whether the asset is horizontally locked. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.
   * @return horizontallyLocked
   */
  @javax.annotation.Nullable
  public Boolean getHorizontallyLocked() {
    return horizontallyLocked;
  }

  public void setHorizontallyLocked(Boolean horizontallyLocked) {
    this.horizontallyLocked = horizontallyLocked;
  }


  public CreativeAsset id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Numeric ID of this creative asset. This is a required field and should not be modified. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CreativeAsset idDimensionValue(DimensionValue idDimensionValue) {
    this.idDimensionValue = idDimensionValue;
    return this;
  }

  /**
   * Get idDimensionValue
   * @return idDimensionValue
   */
  @javax.annotation.Nullable
  public DimensionValue getIdDimensionValue() {
    return idDimensionValue;
  }

  public void setIdDimensionValue(DimensionValue idDimensionValue) {
    this.idDimensionValue = idDimensionValue;
  }


  public CreativeAsset mediaDuration(Float mediaDuration) {
    this.mediaDuration = mediaDuration;
    return this;
  }

  /**
   * Detected duration for audio or video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID.
   * @return mediaDuration
   */
  @javax.annotation.Nullable
  public Float getMediaDuration() {
    return mediaDuration;
  }

  public void setMediaDuration(Float mediaDuration) {
    this.mediaDuration = mediaDuration;
  }


  public CreativeAsset mimeType(String mimeType) {
    this.mimeType = mimeType;
    return this;
  }

  /**
   * Detected MIME type for audio or video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID.
   * @return mimeType
   */
  @javax.annotation.Nullable
  public String getMimeType() {
    return mimeType;
  }

  public void setMimeType(String mimeType) {
    this.mimeType = mimeType;
  }


  public CreativeAsset offset(OffsetPosition offset) {
    this.offset = offset;
    return this;
  }

  /**
   * Get offset
   * @return offset
   */
  @javax.annotation.Nullable
  public OffsetPosition getOffset() {
    return offset;
  }

  public void setOffset(OffsetPosition offset) {
    this.offset = offset;
  }


  public CreativeAsset orientation(OrientationEnum orientation) {
    this.orientation = orientation;
    return this;
  }

  /**
   * Orientation of video asset. This is a read-only, auto-generated field.
   * @return orientation
   */
  @javax.annotation.Nullable
  public OrientationEnum getOrientation() {
    return orientation;
  }

  public void setOrientation(OrientationEnum orientation) {
    this.orientation = orientation;
  }


  public CreativeAsset originalBackup(Boolean originalBackup) {
    this.originalBackup = originalBackup;
    return this;
  }

  /**
   * Whether the backup asset is original or changed by the user in Campaign Manager. Applicable to the following creative types: all RICH_MEDIA.
   * @return originalBackup
   */
  @javax.annotation.Nullable
  public Boolean getOriginalBackup() {
    return originalBackup;
  }

  public void setOriginalBackup(Boolean originalBackup) {
    this.originalBackup = originalBackup;
  }


  public CreativeAsset politeLoad(Boolean politeLoad) {
    this.politeLoad = politeLoad;
    return this;
  }

  /**
   * Whether this asset is used as a polite load asset.
   * @return politeLoad
   */
  @javax.annotation.Nullable
  public Boolean getPoliteLoad() {
    return politeLoad;
  }

  public void setPoliteLoad(Boolean politeLoad) {
    this.politeLoad = politeLoad;
  }


  public CreativeAsset position(OffsetPosition position) {
    this.position = position;
    return this;
  }

  /**
   * Get position
   * @return position
   */
  @javax.annotation.Nullable
  public OffsetPosition getPosition() {
    return position;
  }

  public void setPosition(OffsetPosition position) {
    this.position = position;
  }


  public CreativeAsset positionLeftUnit(PositionLeftUnitEnum positionLeftUnit) {
    this.positionLeftUnit = positionLeftUnit;
    return this;
  }

  /**
   * Offset left unit for an asset. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.
   * @return positionLeftUnit
   */
  @javax.annotation.Nullable
  public PositionLeftUnitEnum getPositionLeftUnit() {
    return positionLeftUnit;
  }

  public void setPositionLeftUnit(PositionLeftUnitEnum positionLeftUnit) {
    this.positionLeftUnit = positionLeftUnit;
  }


  public CreativeAsset positionTopUnit(PositionTopUnitEnum positionTopUnit) {
    this.positionTopUnit = positionTopUnit;
    return this;
  }

  /**
   * Offset top unit for an asset. This is a read-only field if the asset displayType is ASSET_DISPLAY_TYPE_OVERLAY. Applicable to the following creative types: all RICH_MEDIA.
   * @return positionTopUnit
   */
  @javax.annotation.Nullable
  public PositionTopUnitEnum getPositionTopUnit() {
    return positionTopUnit;
  }

  public void setPositionTopUnit(PositionTopUnitEnum positionTopUnit) {
    this.positionTopUnit = positionTopUnit;
  }


  public CreativeAsset progressiveServingUrl(String progressiveServingUrl) {
    this.progressiveServingUrl = progressiveServingUrl;
    return this;
  }

  /**
   * Progressive URL for video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID.
   * @return progressiveServingUrl
   */
  @javax.annotation.Nullable
  public String getProgressiveServingUrl() {
    return progressiveServingUrl;
  }

  public void setProgressiveServingUrl(String progressiveServingUrl) {
    this.progressiveServingUrl = progressiveServingUrl;
  }


  public CreativeAsset pushdown(Boolean pushdown) {
    this.pushdown = pushdown;
    return this;
  }

  /**
   * Whether the asset pushes down other content. Applicable to the following creative types: all RICH_MEDIA. Additionally, only applicable when the asset offsets are 0, the collapsedSize.width matches size.width, and the collapsedSize.height is less than size.height.
   * @return pushdown
   */
  @javax.annotation.Nullable
  public Boolean getPushdown() {
    return pushdown;
  }

  public void setPushdown(Boolean pushdown) {
    this.pushdown = pushdown;
  }


  public CreativeAsset pushdownDuration(Float pushdownDuration) {
    this.pushdownDuration = pushdownDuration;
    return this;
  }

  /**
   * Pushdown duration in seconds for an asset. Applicable to the following creative types: all RICH_MEDIA.Additionally, only applicable when the asset pushdown field is true, the offsets are 0, the collapsedSize.width matches size.width, and the collapsedSize.height is less than size.height. Acceptable values are 0 to 9.99, inclusive.
   * @return pushdownDuration
   */
  @javax.annotation.Nullable
  public Float getPushdownDuration() {
    return pushdownDuration;
  }

  public void setPushdownDuration(Float pushdownDuration) {
    this.pushdownDuration = pushdownDuration;
  }


  public CreativeAsset role(RoleEnum role) {
    this.role = role;
    return this;
  }

  /**
   * Role of the asset in relation to creative. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT. This is a required field. PRIMARY applies to DISPLAY, FLASH_INPAGE, HTML5_BANNER, IMAGE, DISPLAY_IMAGE_GALLERY, all RICH_MEDIA (which may contain multiple primary assets), and all VPAID creatives. BACKUP_IMAGE applies to FLASH_INPAGE, HTML5_BANNER, all RICH_MEDIA, and all VPAID creatives. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE. ADDITIONAL_IMAGE and ADDITIONAL_FLASH apply to FLASH_INPAGE creatives. OTHER refers to assets from sources other than Campaign Manager, such as Studio uploaded assets, applicable to all RICH_MEDIA and all VPAID creatives. PARENT_VIDEO refers to videos uploaded by the user in Campaign Manager and is applicable to INSTREAM_VIDEO and VPAID_LINEAR_VIDEO creatives. TRANSCODED_VIDEO refers to videos transcoded by Campaign Manager from PARENT_VIDEO assets and is applicable to INSTREAM_VIDEO and VPAID_LINEAR_VIDEO creatives. ALTERNATE_VIDEO refers to the Campaign Manager representation of child asset videos from Studio, and is applicable to VPAID_LINEAR_VIDEO creatives. These cannot be added or removed within Campaign Manager. For VPAID_LINEAR_VIDEO creatives, PARENT_VIDEO, TRANSCODED_VIDEO and ALTERNATE_VIDEO assets that are marked active serve as backup in case the VPAID creative cannot be served. Only PARENT_VIDEO assets can be added or removed for an INSTREAM_VIDEO or VPAID_LINEAR_VIDEO creative. PARENT_AUDIO refers to audios uploaded by the user in Campaign Manager and is applicable to INSTREAM_AUDIO creatives. TRANSCODED_AUDIO refers to audios transcoded by Campaign Manager from PARENT_AUDIO assets and is applicable to INSTREAM_AUDIO creatives. 
   * @return role
   */
  @javax.annotation.Nullable
  public RoleEnum getRole() {
    return role;
  }

  public void setRole(RoleEnum role) {
    this.role = role;
  }


  public CreativeAsset size(Size size) {
    this.size = size;
    return this;
  }

  /**
   * Get size
   * @return size
   */
  @javax.annotation.Nullable
  public Size getSize() {
    return size;
  }

  public void setSize(Size size) {
    this.size = size;
  }


  public CreativeAsset sslCompliant(Boolean sslCompliant) {
    this.sslCompliant = sslCompliant;
    return this;
  }

  /**
   * Whether the asset is SSL-compliant. This is a read-only field. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT.
   * @return sslCompliant
   */
  @javax.annotation.Nullable
  public Boolean getSslCompliant() {
    return sslCompliant;
  }

  public void setSslCompliant(Boolean sslCompliant) {
    this.sslCompliant = sslCompliant;
  }


  public CreativeAsset startTimeType(StartTimeTypeEnum startTimeType) {
    this.startTimeType = startTimeType;
    return this;
  }

  /**
   * Initial wait time type before making the asset visible. Applicable to the following creative types: all RICH_MEDIA.
   * @return startTimeType
   */
  @javax.annotation.Nullable
  public StartTimeTypeEnum getStartTimeType() {
    return startTimeType;
  }

  public void setStartTimeType(StartTimeTypeEnum startTimeType) {
    this.startTimeType = startTimeType;
  }


  public CreativeAsset streamingServingUrl(String streamingServingUrl) {
    this.streamingServingUrl = streamingServingUrl;
    return this;
  }

  /**
   * Streaming URL for video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID.
   * @return streamingServingUrl
   */
  @javax.annotation.Nullable
  public String getStreamingServingUrl() {
    return streamingServingUrl;
  }

  public void setStreamingServingUrl(String streamingServingUrl) {
    this.streamingServingUrl = streamingServingUrl;
  }


  public CreativeAsset transparency(Boolean transparency) {
    this.transparency = transparency;
    return this;
  }

  /**
   * Whether the asset is transparent. Applicable to the following creative types: all RICH_MEDIA. Additionally, only applicable to HTML5 assets.
   * @return transparency
   */
  @javax.annotation.Nullable
  public Boolean getTransparency() {
    return transparency;
  }

  public void setTransparency(Boolean transparency) {
    this.transparency = transparency;
  }


  public CreativeAsset verticallyLocked(Boolean verticallyLocked) {
    this.verticallyLocked = verticallyLocked;
    return this;
  }

  /**
   * Whether the asset is vertically locked. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.
   * @return verticallyLocked
   */
  @javax.annotation.Nullable
  public Boolean getVerticallyLocked() {
    return verticallyLocked;
  }

  public void setVerticallyLocked(Boolean verticallyLocked) {
    this.verticallyLocked = verticallyLocked;
  }


  public CreativeAsset windowMode(WindowModeEnum windowMode) {
    this.windowMode = windowMode;
    return this;
  }

  /**
   * Window mode options for flash assets. Applicable to the following creative types: FLASH_INPAGE, RICH_MEDIA_DISPLAY_EXPANDING, RICH_MEDIA_IM_EXPAND, RICH_MEDIA_DISPLAY_BANNER, and RICH_MEDIA_INPAGE_FLOATING.
   * @return windowMode
   */
  @javax.annotation.Nullable
  public WindowModeEnum getWindowMode() {
    return windowMode;
  }

  public void setWindowMode(WindowModeEnum windowMode) {
    this.windowMode = windowMode;
  }


  public CreativeAsset zIndex(Integer zIndex) {
    this.zIndex = zIndex;
    return this;
  }

  /**
   * zIndex value of an asset. Applicable to the following creative types: all RICH_MEDIA.Additionally, only applicable to assets whose displayType is NOT one of the following types: ASSET_DISPLAY_TYPE_INPAGE or ASSET_DISPLAY_TYPE_OVERLAY. Acceptable values are -999999999 to 999999999, inclusive.
   * @return zIndex
   */
  @javax.annotation.Nullable
  public Integer getzIndex() {
    return zIndex;
  }

  public void setzIndex(Integer zIndex) {
    this.zIndex = zIndex;
  }


  public CreativeAsset zipFilename(String zipFilename) {
    this.zipFilename = zipFilename;
    return this;
  }

  /**
   * File name of zip file. This is a read-only field. Applicable to the following creative types: HTML5_BANNER.
   * @return zipFilename
   */
  @javax.annotation.Nullable
  public String getZipFilename() {
    return zipFilename;
  }

  public void setZipFilename(String zipFilename) {
    this.zipFilename = zipFilename;
  }


  public CreativeAsset zipFilesize(String zipFilesize) {
    this.zipFilesize = zipFilesize;
    return this;
  }

  /**
   * Size of zip file. This is a read-only field. Applicable to the following creative types: HTML5_BANNER.
   * @return zipFilesize
   */
  @javax.annotation.Nullable
  public String getZipFilesize() {
    return zipFilesize;
  }

  public void setZipFilesize(String zipFilesize) {
    this.zipFilesize = zipFilesize;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreativeAsset creativeAsset = (CreativeAsset) o;
    return Objects.equals(this.actionScript3, creativeAsset.actionScript3) &&
        Objects.equals(this.active, creativeAsset.active) &&
        Objects.equals(this.additionalSizes, creativeAsset.additionalSizes) &&
        Objects.equals(this.alignment, creativeAsset.alignment) &&
        Objects.equals(this.artworkType, creativeAsset.artworkType) &&
        Objects.equals(this.assetIdentifier, creativeAsset.assetIdentifier) &&
        Objects.equals(this.audioBitRate, creativeAsset.audioBitRate) &&
        Objects.equals(this.audioSampleRate, creativeAsset.audioSampleRate) &&
        Objects.equals(this.backupImageExit, creativeAsset.backupImageExit) &&
        Objects.equals(this.bitRate, creativeAsset.bitRate) &&
        Objects.equals(this.childAssetType, creativeAsset.childAssetType) &&
        Objects.equals(this.collapsedSize, creativeAsset.collapsedSize) &&
        Objects.equals(this.companionCreativeIds, creativeAsset.companionCreativeIds) &&
        Objects.equals(this.customStartTimeValue, creativeAsset.customStartTimeValue) &&
        Objects.equals(this.detectedFeatures, creativeAsset.detectedFeatures) &&
        Objects.equals(this.displayType, creativeAsset.displayType) &&
        Objects.equals(this.duration, creativeAsset.duration) &&
        Objects.equals(this.durationType, creativeAsset.durationType) &&
        Objects.equals(this.expandedDimension, creativeAsset.expandedDimension) &&
        Objects.equals(this.fileSize, creativeAsset.fileSize) &&
        Objects.equals(this.flashVersion, creativeAsset.flashVersion) &&
        Objects.equals(this.frameRate, creativeAsset.frameRate) &&
        Objects.equals(this.hideFlashObjects, creativeAsset.hideFlashObjects) &&
        Objects.equals(this.hideSelectionBoxes, creativeAsset.hideSelectionBoxes) &&
        Objects.equals(this.horizontallyLocked, creativeAsset.horizontallyLocked) &&
        Objects.equals(this.id, creativeAsset.id) &&
        Objects.equals(this.idDimensionValue, creativeAsset.idDimensionValue) &&
        Objects.equals(this.mediaDuration, creativeAsset.mediaDuration) &&
        Objects.equals(this.mimeType, creativeAsset.mimeType) &&
        Objects.equals(this.offset, creativeAsset.offset) &&
        Objects.equals(this.orientation, creativeAsset.orientation) &&
        Objects.equals(this.originalBackup, creativeAsset.originalBackup) &&
        Objects.equals(this.politeLoad, creativeAsset.politeLoad) &&
        Objects.equals(this.position, creativeAsset.position) &&
        Objects.equals(this.positionLeftUnit, creativeAsset.positionLeftUnit) &&
        Objects.equals(this.positionTopUnit, creativeAsset.positionTopUnit) &&
        Objects.equals(this.progressiveServingUrl, creativeAsset.progressiveServingUrl) &&
        Objects.equals(this.pushdown, creativeAsset.pushdown) &&
        Objects.equals(this.pushdownDuration, creativeAsset.pushdownDuration) &&
        Objects.equals(this.role, creativeAsset.role) &&
        Objects.equals(this.size, creativeAsset.size) &&
        Objects.equals(this.sslCompliant, creativeAsset.sslCompliant) &&
        Objects.equals(this.startTimeType, creativeAsset.startTimeType) &&
        Objects.equals(this.streamingServingUrl, creativeAsset.streamingServingUrl) &&
        Objects.equals(this.transparency, creativeAsset.transparency) &&
        Objects.equals(this.verticallyLocked, creativeAsset.verticallyLocked) &&
        Objects.equals(this.windowMode, creativeAsset.windowMode) &&
        Objects.equals(this.zIndex, creativeAsset.zIndex) &&
        Objects.equals(this.zipFilename, creativeAsset.zipFilename) &&
        Objects.equals(this.zipFilesize, creativeAsset.zipFilesize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionScript3, active, additionalSizes, alignment, artworkType, assetIdentifier, audioBitRate, audioSampleRate, backupImageExit, bitRate, childAssetType, collapsedSize, companionCreativeIds, customStartTimeValue, detectedFeatures, displayType, duration, durationType, expandedDimension, fileSize, flashVersion, frameRate, hideFlashObjects, hideSelectionBoxes, horizontallyLocked, id, idDimensionValue, mediaDuration, mimeType, offset, orientation, originalBackup, politeLoad, position, positionLeftUnit, positionTopUnit, progressiveServingUrl, pushdown, pushdownDuration, role, size, sslCompliant, startTimeType, streamingServingUrl, transparency, verticallyLocked, windowMode, zIndex, zipFilename, zipFilesize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreativeAsset {\n");
    sb.append("    actionScript3: ").append(toIndentedString(actionScript3)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    additionalSizes: ").append(toIndentedString(additionalSizes)).append("\n");
    sb.append("    alignment: ").append(toIndentedString(alignment)).append("\n");
    sb.append("    artworkType: ").append(toIndentedString(artworkType)).append("\n");
    sb.append("    assetIdentifier: ").append(toIndentedString(assetIdentifier)).append("\n");
    sb.append("    audioBitRate: ").append(toIndentedString(audioBitRate)).append("\n");
    sb.append("    audioSampleRate: ").append(toIndentedString(audioSampleRate)).append("\n");
    sb.append("    backupImageExit: ").append(toIndentedString(backupImageExit)).append("\n");
    sb.append("    bitRate: ").append(toIndentedString(bitRate)).append("\n");
    sb.append("    childAssetType: ").append(toIndentedString(childAssetType)).append("\n");
    sb.append("    collapsedSize: ").append(toIndentedString(collapsedSize)).append("\n");
    sb.append("    companionCreativeIds: ").append(toIndentedString(companionCreativeIds)).append("\n");
    sb.append("    customStartTimeValue: ").append(toIndentedString(customStartTimeValue)).append("\n");
    sb.append("    detectedFeatures: ").append(toIndentedString(detectedFeatures)).append("\n");
    sb.append("    displayType: ").append(toIndentedString(displayType)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    durationType: ").append(toIndentedString(durationType)).append("\n");
    sb.append("    expandedDimension: ").append(toIndentedString(expandedDimension)).append("\n");
    sb.append("    fileSize: ").append(toIndentedString(fileSize)).append("\n");
    sb.append("    flashVersion: ").append(toIndentedString(flashVersion)).append("\n");
    sb.append("    frameRate: ").append(toIndentedString(frameRate)).append("\n");
    sb.append("    hideFlashObjects: ").append(toIndentedString(hideFlashObjects)).append("\n");
    sb.append("    hideSelectionBoxes: ").append(toIndentedString(hideSelectionBoxes)).append("\n");
    sb.append("    horizontallyLocked: ").append(toIndentedString(horizontallyLocked)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    idDimensionValue: ").append(toIndentedString(idDimensionValue)).append("\n");
    sb.append("    mediaDuration: ").append(toIndentedString(mediaDuration)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    orientation: ").append(toIndentedString(orientation)).append("\n");
    sb.append("    originalBackup: ").append(toIndentedString(originalBackup)).append("\n");
    sb.append("    politeLoad: ").append(toIndentedString(politeLoad)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    positionLeftUnit: ").append(toIndentedString(positionLeftUnit)).append("\n");
    sb.append("    positionTopUnit: ").append(toIndentedString(positionTopUnit)).append("\n");
    sb.append("    progressiveServingUrl: ").append(toIndentedString(progressiveServingUrl)).append("\n");
    sb.append("    pushdown: ").append(toIndentedString(pushdown)).append("\n");
    sb.append("    pushdownDuration: ").append(toIndentedString(pushdownDuration)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    sslCompliant: ").append(toIndentedString(sslCompliant)).append("\n");
    sb.append("    startTimeType: ").append(toIndentedString(startTimeType)).append("\n");
    sb.append("    streamingServingUrl: ").append(toIndentedString(streamingServingUrl)).append("\n");
    sb.append("    transparency: ").append(toIndentedString(transparency)).append("\n");
    sb.append("    verticallyLocked: ").append(toIndentedString(verticallyLocked)).append("\n");
    sb.append("    windowMode: ").append(toIndentedString(windowMode)).append("\n");
    sb.append("    zIndex: ").append(toIndentedString(zIndex)).append("\n");
    sb.append("    zipFilename: ").append(toIndentedString(zipFilename)).append("\n");
    sb.append("    zipFilesize: ").append(toIndentedString(zipFilesize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actionScript3");
    openapiFields.add("active");
    openapiFields.add("additionalSizes");
    openapiFields.add("alignment");
    openapiFields.add("artworkType");
    openapiFields.add("assetIdentifier");
    openapiFields.add("audioBitRate");
    openapiFields.add("audioSampleRate");
    openapiFields.add("backupImageExit");
    openapiFields.add("bitRate");
    openapiFields.add("childAssetType");
    openapiFields.add("collapsedSize");
    openapiFields.add("companionCreativeIds");
    openapiFields.add("customStartTimeValue");
    openapiFields.add("detectedFeatures");
    openapiFields.add("displayType");
    openapiFields.add("duration");
    openapiFields.add("durationType");
    openapiFields.add("expandedDimension");
    openapiFields.add("fileSize");
    openapiFields.add("flashVersion");
    openapiFields.add("frameRate");
    openapiFields.add("hideFlashObjects");
    openapiFields.add("hideSelectionBoxes");
    openapiFields.add("horizontallyLocked");
    openapiFields.add("id");
    openapiFields.add("idDimensionValue");
    openapiFields.add("mediaDuration");
    openapiFields.add("mimeType");
    openapiFields.add("offset");
    openapiFields.add("orientation");
    openapiFields.add("originalBackup");
    openapiFields.add("politeLoad");
    openapiFields.add("position");
    openapiFields.add("positionLeftUnit");
    openapiFields.add("positionTopUnit");
    openapiFields.add("progressiveServingUrl");
    openapiFields.add("pushdown");
    openapiFields.add("pushdownDuration");
    openapiFields.add("role");
    openapiFields.add("size");
    openapiFields.add("sslCompliant");
    openapiFields.add("startTimeType");
    openapiFields.add("streamingServingUrl");
    openapiFields.add("transparency");
    openapiFields.add("verticallyLocked");
    openapiFields.add("windowMode");
    openapiFields.add("zIndex");
    openapiFields.add("zipFilename");
    openapiFields.add("zipFilesize");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreativeAsset
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreativeAsset.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreativeAsset is not found in the empty JSON string", CreativeAsset.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreativeAsset.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreativeAsset` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("additionalSizes") != null && !jsonObj.get("additionalSizes").isJsonNull()) {
        JsonArray jsonArrayadditionalSizes = jsonObj.getAsJsonArray("additionalSizes");
        if (jsonArrayadditionalSizes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalSizes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalSizes` to be an array in the JSON string but got `%s`", jsonObj.get("additionalSizes").toString()));
          }

          // validate the optional field `additionalSizes` (array)
          for (int i = 0; i < jsonArrayadditionalSizes.size(); i++) {
            Size.validateJsonElement(jsonArrayadditionalSizes.get(i));
          };
        }
      }
      if ((jsonObj.get("alignment") != null && !jsonObj.get("alignment").isJsonNull()) && !jsonObj.get("alignment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alignment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alignment").toString()));
      }
      // validate the optional field `alignment`
      if (jsonObj.get("alignment") != null && !jsonObj.get("alignment").isJsonNull()) {
        AlignmentEnum.validateJsonElement(jsonObj.get("alignment"));
      }
      if ((jsonObj.get("artworkType") != null && !jsonObj.get("artworkType").isJsonNull()) && !jsonObj.get("artworkType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artworkType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artworkType").toString()));
      }
      // validate the optional field `artworkType`
      if (jsonObj.get("artworkType") != null && !jsonObj.get("artworkType").isJsonNull()) {
        ArtworkTypeEnum.validateJsonElement(jsonObj.get("artworkType"));
      }
      // validate the optional field `assetIdentifier`
      if (jsonObj.get("assetIdentifier") != null && !jsonObj.get("assetIdentifier").isJsonNull()) {
        CreativeAssetId.validateJsonElement(jsonObj.get("assetIdentifier"));
      }
      // validate the optional field `backupImageExit`
      if (jsonObj.get("backupImageExit") != null && !jsonObj.get("backupImageExit").isJsonNull()) {
        CreativeCustomEvent.validateJsonElement(jsonObj.get("backupImageExit"));
      }
      if ((jsonObj.get("childAssetType") != null && !jsonObj.get("childAssetType").isJsonNull()) && !jsonObj.get("childAssetType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `childAssetType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("childAssetType").toString()));
      }
      // validate the optional field `childAssetType`
      if (jsonObj.get("childAssetType") != null && !jsonObj.get("childAssetType").isJsonNull()) {
        ChildAssetTypeEnum.validateJsonElement(jsonObj.get("childAssetType"));
      }
      // validate the optional field `collapsedSize`
      if (jsonObj.get("collapsedSize") != null && !jsonObj.get("collapsedSize").isJsonNull()) {
        Size.validateJsonElement(jsonObj.get("collapsedSize"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("companionCreativeIds") != null && !jsonObj.get("companionCreativeIds").isJsonNull() && !jsonObj.get("companionCreativeIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `companionCreativeIds` to be an array in the JSON string but got `%s`", jsonObj.get("companionCreativeIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("detectedFeatures") != null && !jsonObj.get("detectedFeatures").isJsonNull() && !jsonObj.get("detectedFeatures").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `detectedFeatures` to be an array in the JSON string but got `%s`", jsonObj.get("detectedFeatures").toString()));
      }
      if ((jsonObj.get("displayType") != null && !jsonObj.get("displayType").isJsonNull()) && !jsonObj.get("displayType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayType").toString()));
      }
      // validate the optional field `displayType`
      if (jsonObj.get("displayType") != null && !jsonObj.get("displayType").isJsonNull()) {
        DisplayTypeEnum.validateJsonElement(jsonObj.get("displayType"));
      }
      if ((jsonObj.get("durationType") != null && !jsonObj.get("durationType").isJsonNull()) && !jsonObj.get("durationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `durationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("durationType").toString()));
      }
      // validate the optional field `durationType`
      if (jsonObj.get("durationType") != null && !jsonObj.get("durationType").isJsonNull()) {
        DurationTypeEnum.validateJsonElement(jsonObj.get("durationType"));
      }
      // validate the optional field `expandedDimension`
      if (jsonObj.get("expandedDimension") != null && !jsonObj.get("expandedDimension").isJsonNull()) {
        Size.validateJsonElement(jsonObj.get("expandedDimension"));
      }
      if ((jsonObj.get("fileSize") != null && !jsonObj.get("fileSize").isJsonNull()) && !jsonObj.get("fileSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileSize").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `idDimensionValue`
      if (jsonObj.get("idDimensionValue") != null && !jsonObj.get("idDimensionValue").isJsonNull()) {
        DimensionValue.validateJsonElement(jsonObj.get("idDimensionValue"));
      }
      if ((jsonObj.get("mimeType") != null && !jsonObj.get("mimeType").isJsonNull()) && !jsonObj.get("mimeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mimeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mimeType").toString()));
      }
      // validate the optional field `offset`
      if (jsonObj.get("offset") != null && !jsonObj.get("offset").isJsonNull()) {
        OffsetPosition.validateJsonElement(jsonObj.get("offset"));
      }
      if ((jsonObj.get("orientation") != null && !jsonObj.get("orientation").isJsonNull()) && !jsonObj.get("orientation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orientation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orientation").toString()));
      }
      // validate the optional field `orientation`
      if (jsonObj.get("orientation") != null && !jsonObj.get("orientation").isJsonNull()) {
        OrientationEnum.validateJsonElement(jsonObj.get("orientation"));
      }
      // validate the optional field `position`
      if (jsonObj.get("position") != null && !jsonObj.get("position").isJsonNull()) {
        OffsetPosition.validateJsonElement(jsonObj.get("position"));
      }
      if ((jsonObj.get("positionLeftUnit") != null && !jsonObj.get("positionLeftUnit").isJsonNull()) && !jsonObj.get("positionLeftUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `positionLeftUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("positionLeftUnit").toString()));
      }
      // validate the optional field `positionLeftUnit`
      if (jsonObj.get("positionLeftUnit") != null && !jsonObj.get("positionLeftUnit").isJsonNull()) {
        PositionLeftUnitEnum.validateJsonElement(jsonObj.get("positionLeftUnit"));
      }
      if ((jsonObj.get("positionTopUnit") != null && !jsonObj.get("positionTopUnit").isJsonNull()) && !jsonObj.get("positionTopUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `positionTopUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("positionTopUnit").toString()));
      }
      // validate the optional field `positionTopUnit`
      if (jsonObj.get("positionTopUnit") != null && !jsonObj.get("positionTopUnit").isJsonNull()) {
        PositionTopUnitEnum.validateJsonElement(jsonObj.get("positionTopUnit"));
      }
      if ((jsonObj.get("progressiveServingUrl") != null && !jsonObj.get("progressiveServingUrl").isJsonNull()) && !jsonObj.get("progressiveServingUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `progressiveServingUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("progressiveServingUrl").toString()));
      }
      if ((jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) && !jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
      // validate the optional field `role`
      if (jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) {
        RoleEnum.validateJsonElement(jsonObj.get("role"));
      }
      // validate the optional field `size`
      if (jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) {
        Size.validateJsonElement(jsonObj.get("size"));
      }
      if ((jsonObj.get("startTimeType") != null && !jsonObj.get("startTimeType").isJsonNull()) && !jsonObj.get("startTimeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTimeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTimeType").toString()));
      }
      // validate the optional field `startTimeType`
      if (jsonObj.get("startTimeType") != null && !jsonObj.get("startTimeType").isJsonNull()) {
        StartTimeTypeEnum.validateJsonElement(jsonObj.get("startTimeType"));
      }
      if ((jsonObj.get("streamingServingUrl") != null && !jsonObj.get("streamingServingUrl").isJsonNull()) && !jsonObj.get("streamingServingUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streamingServingUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streamingServingUrl").toString()));
      }
      if ((jsonObj.get("windowMode") != null && !jsonObj.get("windowMode").isJsonNull()) && !jsonObj.get("windowMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `windowMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("windowMode").toString()));
      }
      // validate the optional field `windowMode`
      if (jsonObj.get("windowMode") != null && !jsonObj.get("windowMode").isJsonNull()) {
        WindowModeEnum.validateJsonElement(jsonObj.get("windowMode"));
      }
      if ((jsonObj.get("zipFilename") != null && !jsonObj.get("zipFilename").isJsonNull()) && !jsonObj.get("zipFilename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zipFilename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zipFilename").toString()));
      }
      if ((jsonObj.get("zipFilesize") != null && !jsonObj.get("zipFilesize").isJsonNull()) && !jsonObj.get("zipFilesize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zipFilesize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zipFilesize").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreativeAsset.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreativeAsset' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreativeAsset> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreativeAsset.class));

       return (TypeAdapter<T>) new TypeAdapter<CreativeAsset>() {
           @Override
           public void write(JsonWriter out, CreativeAsset value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreativeAsset read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreativeAsset given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreativeAsset
   * @throws IOException if the JSON string is invalid with respect to CreativeAsset
   */
  public static CreativeAsset fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreativeAsset.class);
  }

  /**
   * Convert an instance of CreativeAsset to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

