/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DimensionValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains properties of an event tag.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:12.851901-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventTag {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_ADVERTISER_ID = "advertiserId";
  @SerializedName(SERIALIZED_NAME_ADVERTISER_ID)
  private String advertiserId;

  public static final String SERIALIZED_NAME_ADVERTISER_ID_DIMENSION_VALUE = "advertiserIdDimensionValue";
  @SerializedName(SERIALIZED_NAME_ADVERTISER_ID_DIMENSION_VALUE)
  private DimensionValue advertiserIdDimensionValue;

  public static final String SERIALIZED_NAME_CAMPAIGN_ID = "campaignId";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_ID)
  private String campaignId;

  public static final String SERIALIZED_NAME_CAMPAIGN_ID_DIMENSION_VALUE = "campaignIdDimensionValue";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_ID_DIMENSION_VALUE)
  private DimensionValue campaignIdDimensionValue;

  public static final String SERIALIZED_NAME_ENABLED_BY_DEFAULT = "enabledByDefault";
  @SerializedName(SERIALIZED_NAME_ENABLED_BY_DEFAULT)
  private Boolean enabledByDefault;

  public static final String SERIALIZED_NAME_EXCLUDE_FROM_ADX_REQUESTS = "excludeFromAdxRequests";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_FROM_ADX_REQUESTS)
  private Boolean excludeFromAdxRequests;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Site filter type for this event tag. If no type is specified then the event tag will be applied to all sites.
   */
  @JsonAdapter(SiteFilterTypeEnum.Adapter.class)
  public enum SiteFilterTypeEnum {
    WHITELIST("WHITELIST"),
    
    BLACKLIST("BLACKLIST");

    private String value;

    SiteFilterTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SiteFilterTypeEnum fromValue(String value) {
      for (SiteFilterTypeEnum b : SiteFilterTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SiteFilterTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SiteFilterTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SiteFilterTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SiteFilterTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SiteFilterTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SITE_FILTER_TYPE = "siteFilterType";
  @SerializedName(SERIALIZED_NAME_SITE_FILTER_TYPE)
  private SiteFilterTypeEnum siteFilterType;

  public static final String SERIALIZED_NAME_SITE_IDS = "siteIds";
  @SerializedName(SERIALIZED_NAME_SITE_IDS)
  private List<String> siteIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_SSL_COMPLIANT = "sslCompliant";
  @SerializedName(SERIALIZED_NAME_SSL_COMPLIANT)
  private Boolean sslCompliant;

  /**
   * Status of this event tag. Must be ENABLED for this event tag to fire. This is a required field.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ENABLED("ENABLED"),
    
    DISABLED("DISABLED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_SUBACCOUNT_ID = "subaccountId";
  @SerializedName(SERIALIZED_NAME_SUBACCOUNT_ID)
  private String subaccountId;

  /**
   * Event tag type. Can be used to specify whether to use a third-party pixel, a third-party JavaScript URL, or a third-party click-through URL for either impression or click tracking. This is a required field.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    IMPRESSION_IMAGE_EVENT_TAG("IMPRESSION_IMAGE_EVENT_TAG"),
    
    IMPRESSION_JAVASCRIPT_EVENT_TAG("IMPRESSION_JAVASCRIPT_EVENT_TAG"),
    
    CLICK_THROUGH_EVENT_TAG("CLICK_THROUGH_EVENT_TAG");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_URL_ESCAPE_LEVELS = "urlEscapeLevels";
  @SerializedName(SERIALIZED_NAME_URL_ESCAPE_LEVELS)
  private Integer urlEscapeLevels;

  public EventTag() {
  }

  public EventTag accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Account ID of this event tag. This is a read-only field that can be left blank.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public EventTag advertiserId(String advertiserId) {
    this.advertiserId = advertiserId;
    return this;
  }

  /**
   * Advertiser ID of this event tag. This field or the campaignId field is required on insertion.
   * @return advertiserId
   */
  @javax.annotation.Nullable
  public String getAdvertiserId() {
    return advertiserId;
  }

  public void setAdvertiserId(String advertiserId) {
    this.advertiserId = advertiserId;
  }


  public EventTag advertiserIdDimensionValue(DimensionValue advertiserIdDimensionValue) {
    this.advertiserIdDimensionValue = advertiserIdDimensionValue;
    return this;
  }

  /**
   * Get advertiserIdDimensionValue
   * @return advertiserIdDimensionValue
   */
  @javax.annotation.Nullable
  public DimensionValue getAdvertiserIdDimensionValue() {
    return advertiserIdDimensionValue;
  }

  public void setAdvertiserIdDimensionValue(DimensionValue advertiserIdDimensionValue) {
    this.advertiserIdDimensionValue = advertiserIdDimensionValue;
  }


  public EventTag campaignId(String campaignId) {
    this.campaignId = campaignId;
    return this;
  }

  /**
   * Campaign ID of this event tag. This field or the advertiserId field is required on insertion.
   * @return campaignId
   */
  @javax.annotation.Nullable
  public String getCampaignId() {
    return campaignId;
  }

  public void setCampaignId(String campaignId) {
    this.campaignId = campaignId;
  }


  public EventTag campaignIdDimensionValue(DimensionValue campaignIdDimensionValue) {
    this.campaignIdDimensionValue = campaignIdDimensionValue;
    return this;
  }

  /**
   * Get campaignIdDimensionValue
   * @return campaignIdDimensionValue
   */
  @javax.annotation.Nullable
  public DimensionValue getCampaignIdDimensionValue() {
    return campaignIdDimensionValue;
  }

  public void setCampaignIdDimensionValue(DimensionValue campaignIdDimensionValue) {
    this.campaignIdDimensionValue = campaignIdDimensionValue;
  }


  public EventTag enabledByDefault(Boolean enabledByDefault) {
    this.enabledByDefault = enabledByDefault;
    return this;
  }

  /**
   * Whether this event tag should be automatically enabled for all of the advertiser&#39;s campaigns and ads.
   * @return enabledByDefault
   */
  @javax.annotation.Nullable
  public Boolean getEnabledByDefault() {
    return enabledByDefault;
  }

  public void setEnabledByDefault(Boolean enabledByDefault) {
    this.enabledByDefault = enabledByDefault;
  }


  public EventTag excludeFromAdxRequests(Boolean excludeFromAdxRequests) {
    this.excludeFromAdxRequests = excludeFromAdxRequests;
    return this;
  }

  /**
   * Whether to remove this event tag from ads that are trafficked through Display &amp; Video 360 to Ad Exchange. This may be useful if the event tag uses a pixel that is unapproved for Ad Exchange bids on one or more networks, such as the Google Display Network.
   * @return excludeFromAdxRequests
   */
  @javax.annotation.Nullable
  public Boolean getExcludeFromAdxRequests() {
    return excludeFromAdxRequests;
  }

  public void setExcludeFromAdxRequests(Boolean excludeFromAdxRequests) {
    this.excludeFromAdxRequests = excludeFromAdxRequests;
  }


  public EventTag id(String id) {
    this.id = id;
    return this;
  }

  /**
   * ID of this event tag. This is a read-only, auto-generated field.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public EventTag kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string \&quot;dfareporting#eventTag\&quot;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public EventTag name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of this event tag. This is a required field and must be less than 256 characters long.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EventTag siteFilterType(SiteFilterTypeEnum siteFilterType) {
    this.siteFilterType = siteFilterType;
    return this;
  }

  /**
   * Site filter type for this event tag. If no type is specified then the event tag will be applied to all sites.
   * @return siteFilterType
   */
  @javax.annotation.Nullable
  public SiteFilterTypeEnum getSiteFilterType() {
    return siteFilterType;
  }

  public void setSiteFilterType(SiteFilterTypeEnum siteFilterType) {
    this.siteFilterType = siteFilterType;
  }


  public EventTag siteIds(List<String> siteIds) {
    this.siteIds = siteIds;
    return this;
  }

  public EventTag addSiteIdsItem(String siteIdsItem) {
    if (this.siteIds == null) {
      this.siteIds = new ArrayList<>();
    }
    this.siteIds.add(siteIdsItem);
    return this;
  }

  /**
   * Filter list of site IDs associated with this event tag. The siteFilterType determines whether this is a allowlist or blocklist filter.
   * @return siteIds
   */
  @javax.annotation.Nullable
  public List<String> getSiteIds() {
    return siteIds;
  }

  public void setSiteIds(List<String> siteIds) {
    this.siteIds = siteIds;
  }


  public EventTag sslCompliant(Boolean sslCompliant) {
    this.sslCompliant = sslCompliant;
    return this;
  }

  /**
   * Whether this tag is SSL-compliant or not. This is a read-only field.
   * @return sslCompliant
   */
  @javax.annotation.Nullable
  public Boolean getSslCompliant() {
    return sslCompliant;
  }

  public void setSslCompliant(Boolean sslCompliant) {
    this.sslCompliant = sslCompliant;
  }


  public EventTag status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Status of this event tag. Must be ENABLED for this event tag to fire. This is a required field.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public EventTag subaccountId(String subaccountId) {
    this.subaccountId = subaccountId;
    return this;
  }

  /**
   * Subaccount ID of this event tag. This is a read-only field that can be left blank.
   * @return subaccountId
   */
  @javax.annotation.Nullable
  public String getSubaccountId() {
    return subaccountId;
  }

  public void setSubaccountId(String subaccountId) {
    this.subaccountId = subaccountId;
  }


  public EventTag type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Event tag type. Can be used to specify whether to use a third-party pixel, a third-party JavaScript URL, or a third-party click-through URL for either impression or click tracking. This is a required field.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public EventTag url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Payload URL for this event tag. The URL on a click-through event tag should have a landing page URL appended to the end of it. This field is required on insertion.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public EventTag urlEscapeLevels(Integer urlEscapeLevels) {
    this.urlEscapeLevels = urlEscapeLevels;
    return this;
  }

  /**
   * Number of times the landing page URL should be URL-escaped before being appended to the click-through event tag URL. Only applies to click-through event tags as specified by the event tag type.
   * @return urlEscapeLevels
   */
  @javax.annotation.Nullable
  public Integer getUrlEscapeLevels() {
    return urlEscapeLevels;
  }

  public void setUrlEscapeLevels(Integer urlEscapeLevels) {
    this.urlEscapeLevels = urlEscapeLevels;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventTag eventTag = (EventTag) o;
    return Objects.equals(this.accountId, eventTag.accountId) &&
        Objects.equals(this.advertiserId, eventTag.advertiserId) &&
        Objects.equals(this.advertiserIdDimensionValue, eventTag.advertiserIdDimensionValue) &&
        Objects.equals(this.campaignId, eventTag.campaignId) &&
        Objects.equals(this.campaignIdDimensionValue, eventTag.campaignIdDimensionValue) &&
        Objects.equals(this.enabledByDefault, eventTag.enabledByDefault) &&
        Objects.equals(this.excludeFromAdxRequests, eventTag.excludeFromAdxRequests) &&
        Objects.equals(this.id, eventTag.id) &&
        Objects.equals(this.kind, eventTag.kind) &&
        Objects.equals(this.name, eventTag.name) &&
        Objects.equals(this.siteFilterType, eventTag.siteFilterType) &&
        Objects.equals(this.siteIds, eventTag.siteIds) &&
        Objects.equals(this.sslCompliant, eventTag.sslCompliant) &&
        Objects.equals(this.status, eventTag.status) &&
        Objects.equals(this.subaccountId, eventTag.subaccountId) &&
        Objects.equals(this.type, eventTag.type) &&
        Objects.equals(this.url, eventTag.url) &&
        Objects.equals(this.urlEscapeLevels, eventTag.urlEscapeLevels);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, advertiserId, advertiserIdDimensionValue, campaignId, campaignIdDimensionValue, enabledByDefault, excludeFromAdxRequests, id, kind, name, siteFilterType, siteIds, sslCompliant, status, subaccountId, type, url, urlEscapeLevels);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventTag {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    advertiserId: ").append(toIndentedString(advertiserId)).append("\n");
    sb.append("    advertiserIdDimensionValue: ").append(toIndentedString(advertiserIdDimensionValue)).append("\n");
    sb.append("    campaignId: ").append(toIndentedString(campaignId)).append("\n");
    sb.append("    campaignIdDimensionValue: ").append(toIndentedString(campaignIdDimensionValue)).append("\n");
    sb.append("    enabledByDefault: ").append(toIndentedString(enabledByDefault)).append("\n");
    sb.append("    excludeFromAdxRequests: ").append(toIndentedString(excludeFromAdxRequests)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    siteFilterType: ").append(toIndentedString(siteFilterType)).append("\n");
    sb.append("    siteIds: ").append(toIndentedString(siteIds)).append("\n");
    sb.append("    sslCompliant: ").append(toIndentedString(sslCompliant)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subaccountId: ").append(toIndentedString(subaccountId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    urlEscapeLevels: ").append(toIndentedString(urlEscapeLevels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("advertiserId");
    openapiFields.add("advertiserIdDimensionValue");
    openapiFields.add("campaignId");
    openapiFields.add("campaignIdDimensionValue");
    openapiFields.add("enabledByDefault");
    openapiFields.add("excludeFromAdxRequests");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("name");
    openapiFields.add("siteFilterType");
    openapiFields.add("siteIds");
    openapiFields.add("sslCompliant");
    openapiFields.add("status");
    openapiFields.add("subaccountId");
    openapiFields.add("type");
    openapiFields.add("url");
    openapiFields.add("urlEscapeLevels");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventTag
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventTag.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventTag is not found in the empty JSON string", EventTag.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventTag.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventTag` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if ((jsonObj.get("advertiserId") != null && !jsonObj.get("advertiserId").isJsonNull()) && !jsonObj.get("advertiserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advertiserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advertiserId").toString()));
      }
      // validate the optional field `advertiserIdDimensionValue`
      if (jsonObj.get("advertiserIdDimensionValue") != null && !jsonObj.get("advertiserIdDimensionValue").isJsonNull()) {
        DimensionValue.validateJsonElement(jsonObj.get("advertiserIdDimensionValue"));
      }
      if ((jsonObj.get("campaignId") != null && !jsonObj.get("campaignId").isJsonNull()) && !jsonObj.get("campaignId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `campaignId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("campaignId").toString()));
      }
      // validate the optional field `campaignIdDimensionValue`
      if (jsonObj.get("campaignIdDimensionValue") != null && !jsonObj.get("campaignIdDimensionValue").isJsonNull()) {
        DimensionValue.validateJsonElement(jsonObj.get("campaignIdDimensionValue"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("siteFilterType") != null && !jsonObj.get("siteFilterType").isJsonNull()) && !jsonObj.get("siteFilterType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `siteFilterType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("siteFilterType").toString()));
      }
      // validate the optional field `siteFilterType`
      if (jsonObj.get("siteFilterType") != null && !jsonObj.get("siteFilterType").isJsonNull()) {
        SiteFilterTypeEnum.validateJsonElement(jsonObj.get("siteFilterType"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("siteIds") != null && !jsonObj.get("siteIds").isJsonNull() && !jsonObj.get("siteIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `siteIds` to be an array in the JSON string but got `%s`", jsonObj.get("siteIds").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("subaccountId") != null && !jsonObj.get("subaccountId").isJsonNull()) && !jsonObj.get("subaccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subaccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subaccountId").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventTag.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventTag' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventTag> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventTag.class));

       return (TypeAdapter<T>) new TypeAdapter<EventTag>() {
           @Override
           public void write(JsonWriter out, EventTag value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventTag read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventTag given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventTag
   * @throws IOException if the JSON string is invalid with respect to EventTag
   */
  public static EventTag fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventTag.class);
  }

  /**
   * Convert an instance of EventTag to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

