/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains properties of a remarketing list&#39;s sharing information. Sharing allows other accounts or advertisers to target to your remarketing lists. This resource can be used to manage remarketing list sharing to other accounts and advertisers.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:12.851901-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RemarketingListShare {
  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_REMARKETING_LIST_ID = "remarketingListId";
  @SerializedName(SERIALIZED_NAME_REMARKETING_LIST_ID)
  private String remarketingListId;

  public static final String SERIALIZED_NAME_SHARED_ACCOUNT_IDS = "sharedAccountIds";
  @SerializedName(SERIALIZED_NAME_SHARED_ACCOUNT_IDS)
  private List<String> sharedAccountIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHARED_ADVERTISER_IDS = "sharedAdvertiserIds";
  @SerializedName(SERIALIZED_NAME_SHARED_ADVERTISER_IDS)
  private List<String> sharedAdvertiserIds = new ArrayList<>();

  public RemarketingListShare() {
  }

  public RemarketingListShare kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string \&quot;dfareporting#remarketingListShare\&quot;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public RemarketingListShare remarketingListId(String remarketingListId) {
    this.remarketingListId = remarketingListId;
    return this;
  }

  /**
   * Remarketing list ID. This is a read-only, auto-generated field.
   * @return remarketingListId
   */
  @javax.annotation.Nullable
  public String getRemarketingListId() {
    return remarketingListId;
  }

  public void setRemarketingListId(String remarketingListId) {
    this.remarketingListId = remarketingListId;
  }


  public RemarketingListShare sharedAccountIds(List<String> sharedAccountIds) {
    this.sharedAccountIds = sharedAccountIds;
    return this;
  }

  public RemarketingListShare addSharedAccountIdsItem(String sharedAccountIdsItem) {
    if (this.sharedAccountIds == null) {
      this.sharedAccountIds = new ArrayList<>();
    }
    this.sharedAccountIds.add(sharedAccountIdsItem);
    return this;
  }

  /**
   * Accounts that the remarketing list is shared with.
   * @return sharedAccountIds
   */
  @javax.annotation.Nullable
  public List<String> getSharedAccountIds() {
    return sharedAccountIds;
  }

  public void setSharedAccountIds(List<String> sharedAccountIds) {
    this.sharedAccountIds = sharedAccountIds;
  }


  public RemarketingListShare sharedAdvertiserIds(List<String> sharedAdvertiserIds) {
    this.sharedAdvertiserIds = sharedAdvertiserIds;
    return this;
  }

  public RemarketingListShare addSharedAdvertiserIdsItem(String sharedAdvertiserIdsItem) {
    if (this.sharedAdvertiserIds == null) {
      this.sharedAdvertiserIds = new ArrayList<>();
    }
    this.sharedAdvertiserIds.add(sharedAdvertiserIdsItem);
    return this;
  }

  /**
   * Advertisers that the remarketing list is shared with.
   * @return sharedAdvertiserIds
   */
  @javax.annotation.Nullable
  public List<String> getSharedAdvertiserIds() {
    return sharedAdvertiserIds;
  }

  public void setSharedAdvertiserIds(List<String> sharedAdvertiserIds) {
    this.sharedAdvertiserIds = sharedAdvertiserIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RemarketingListShare remarketingListShare = (RemarketingListShare) o;
    return Objects.equals(this.kind, remarketingListShare.kind) &&
        Objects.equals(this.remarketingListId, remarketingListShare.remarketingListId) &&
        Objects.equals(this.sharedAccountIds, remarketingListShare.sharedAccountIds) &&
        Objects.equals(this.sharedAdvertiserIds, remarketingListShare.sharedAdvertiserIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(kind, remarketingListId, sharedAccountIds, sharedAdvertiserIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RemarketingListShare {\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    remarketingListId: ").append(toIndentedString(remarketingListId)).append("\n");
    sb.append("    sharedAccountIds: ").append(toIndentedString(sharedAccountIds)).append("\n");
    sb.append("    sharedAdvertiserIds: ").append(toIndentedString(sharedAdvertiserIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("kind");
    openapiFields.add("remarketingListId");
    openapiFields.add("sharedAccountIds");
    openapiFields.add("sharedAdvertiserIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RemarketingListShare
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RemarketingListShare.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RemarketingListShare is not found in the empty JSON string", RemarketingListShare.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RemarketingListShare.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RemarketingListShare` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("remarketingListId") != null && !jsonObj.get("remarketingListId").isJsonNull()) && !jsonObj.get("remarketingListId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remarketingListId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remarketingListId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sharedAccountIds") != null && !jsonObj.get("sharedAccountIds").isJsonNull() && !jsonObj.get("sharedAccountIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sharedAccountIds` to be an array in the JSON string but got `%s`", jsonObj.get("sharedAccountIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sharedAdvertiserIds") != null && !jsonObj.get("sharedAdvertiserIds").isJsonNull() && !jsonObj.get("sharedAdvertiserIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sharedAdvertiserIds` to be an array in the JSON string but got `%s`", jsonObj.get("sharedAdvertiserIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RemarketingListShare.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RemarketingListShare' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RemarketingListShare> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RemarketingListShare.class));

       return (TypeAdapter<T>) new TypeAdapter<RemarketingListShare>() {
           @Override
           public void write(JsonWriter out, RemarketingListShare value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RemarketingListShare read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RemarketingListShare given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RemarketingListShare
   * @throws IOException if the JSON string is invalid with respect to RemarketingListShare
   */
  public static RemarketingListShare fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RemarketingListShare.class);
  }

  /**
   * Convert an instance of RemarketingListShare to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

