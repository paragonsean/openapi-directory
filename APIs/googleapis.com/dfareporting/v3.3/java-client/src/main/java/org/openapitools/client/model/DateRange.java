/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a date range.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:12.851901-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DateRange {
  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private LocalDate endDate;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  /**
   * The date range relative to the date of when the report is run.
   */
  @JsonAdapter(RelativeDateRangeEnum.Adapter.class)
  public enum RelativeDateRangeEnum {
    TODAY("TODAY"),
    
    YESTERDAY("YESTERDAY"),
    
    WEEK_TO_DATE("WEEK_TO_DATE"),
    
    MONTH_TO_DATE("MONTH_TO_DATE"),
    
    QUARTER_TO_DATE("QUARTER_TO_DATE"),
    
    YEAR_TO_DATE("YEAR_TO_DATE"),
    
    PREVIOUS_WEEK("PREVIOUS_WEEK"),
    
    PREVIOUS_MONTH("PREVIOUS_MONTH"),
    
    PREVIOUS_QUARTER("PREVIOUS_QUARTER"),
    
    PREVIOUS_YEAR("PREVIOUS_YEAR"),
    
    LAST_7_DAYS("LAST_7_DAYS"),
    
    LAST_30_DAYS("LAST_30_DAYS"),
    
    LAST_90_DAYS("LAST_90_DAYS"),
    
    LAST_365_DAYS("LAST_365_DAYS"),
    
    LAST_24_MONTHS("LAST_24_MONTHS"),
    
    LAST_14_DAYS("LAST_14_DAYS"),
    
    LAST_60_DAYS("LAST_60_DAYS");

    private String value;

    RelativeDateRangeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RelativeDateRangeEnum fromValue(String value) {
      for (RelativeDateRangeEnum b : RelativeDateRangeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RelativeDateRangeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RelativeDateRangeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RelativeDateRangeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RelativeDateRangeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RelativeDateRangeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RELATIVE_DATE_RANGE = "relativeDateRange";
  @SerializedName(SERIALIZED_NAME_RELATIVE_DATE_RANGE)
  private RelativeDateRangeEnum relativeDateRange;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private LocalDate startDate;

  public DateRange() {
  }

  public DateRange endDate(LocalDate endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * Get endDate
   * @return endDate
   */
  @javax.annotation.Nullable
  public LocalDate getEndDate() {
    return endDate;
  }

  public void setEndDate(LocalDate endDate) {
    this.endDate = endDate;
  }


  public DateRange kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * The kind of resource this is, in this case dfareporting#dateRange.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public DateRange relativeDateRange(RelativeDateRangeEnum relativeDateRange) {
    this.relativeDateRange = relativeDateRange;
    return this;
  }

  /**
   * The date range relative to the date of when the report is run.
   * @return relativeDateRange
   */
  @javax.annotation.Nullable
  public RelativeDateRangeEnum getRelativeDateRange() {
    return relativeDateRange;
  }

  public void setRelativeDateRange(RelativeDateRangeEnum relativeDateRange) {
    this.relativeDateRange = relativeDateRange;
  }


  public DateRange startDate(LocalDate startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nullable
  public LocalDate getStartDate() {
    return startDate;
  }

  public void setStartDate(LocalDate startDate) {
    this.startDate = startDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DateRange dateRange = (DateRange) o;
    return Objects.equals(this.endDate, dateRange.endDate) &&
        Objects.equals(this.kind, dateRange.kind) &&
        Objects.equals(this.relativeDateRange, dateRange.relativeDateRange) &&
        Objects.equals(this.startDate, dateRange.startDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endDate, kind, relativeDateRange, startDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DateRange {\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    relativeDateRange: ").append(toIndentedString(relativeDateRange)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endDate");
    openapiFields.add("kind");
    openapiFields.add("relativeDateRange");
    openapiFields.add("startDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DateRange
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DateRange.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DateRange is not found in the empty JSON string", DateRange.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DateRange.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DateRange` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("relativeDateRange") != null && !jsonObj.get("relativeDateRange").isJsonNull()) && !jsonObj.get("relativeDateRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relativeDateRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relativeDateRange").toString()));
      }
      // validate the optional field `relativeDateRange`
      if (jsonObj.get("relativeDateRange") != null && !jsonObj.get("relativeDateRange").isJsonNull()) {
        RelativeDateRangeEnum.validateJsonElement(jsonObj.get("relativeDateRange"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DateRange.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DateRange' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DateRange> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DateRange.class));

       return (TypeAdapter<T>) new TypeAdapter<DateRange>() {
           @Override
           public void write(JsonWriter out, DateRange value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DateRange read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DateRange given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DateRange
   * @throws IOException if the JSON string is invalid with respect to DateRange
   */
  public static DateRange fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DateRange.class);
  }

  /**
   * Convert an instance of DateRange to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

