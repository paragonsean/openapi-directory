/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreativeClickThroughUrl;
import org.openapitools.client.model.PopupWindowProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Creative Custom Event.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:12.851901-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreativeCustomEvent {
  public static final String SERIALIZED_NAME_ADVERTISER_CUSTOM_EVENT_ID = "advertiserCustomEventId";
  @SerializedName(SERIALIZED_NAME_ADVERTISER_CUSTOM_EVENT_ID)
  private String advertiserCustomEventId;

  public static final String SERIALIZED_NAME_ADVERTISER_CUSTOM_EVENT_NAME = "advertiserCustomEventName";
  @SerializedName(SERIALIZED_NAME_ADVERTISER_CUSTOM_EVENT_NAME)
  private String advertiserCustomEventName;

  /**
   * Type of the event. This is a read-only field.
   */
  @JsonAdapter(AdvertiserCustomEventTypeEnum.Adapter.class)
  public enum AdvertiserCustomEventTypeEnum {
    TIMER("ADVERTISER_EVENT_TIMER"),
    
    EXIT("ADVERTISER_EVENT_EXIT"),
    
    COUNTER("ADVERTISER_EVENT_COUNTER");

    private String value;

    AdvertiserCustomEventTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AdvertiserCustomEventTypeEnum fromValue(String value) {
      for (AdvertiserCustomEventTypeEnum b : AdvertiserCustomEventTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AdvertiserCustomEventTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AdvertiserCustomEventTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AdvertiserCustomEventTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AdvertiserCustomEventTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AdvertiserCustomEventTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ADVERTISER_CUSTOM_EVENT_TYPE = "advertiserCustomEventType";
  @SerializedName(SERIALIZED_NAME_ADVERTISER_CUSTOM_EVENT_TYPE)
  private AdvertiserCustomEventTypeEnum advertiserCustomEventType;

  public static final String SERIALIZED_NAME_ARTWORK_LABEL = "artworkLabel";
  @SerializedName(SERIALIZED_NAME_ARTWORK_LABEL)
  private String artworkLabel;

  /**
   * Artwork type used by the creative.This is a read-only field.
   */
  @JsonAdapter(ArtworkTypeEnum.Adapter.class)
  public enum ArtworkTypeEnum {
    FLASH("ARTWORK_TYPE_FLASH"),
    
    HTML5("ARTWORK_TYPE_HTML5"),
    
    MIXED("ARTWORK_TYPE_MIXED"),
    
    IMAGE("ARTWORK_TYPE_IMAGE");

    private String value;

    ArtworkTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ArtworkTypeEnum fromValue(String value) {
      for (ArtworkTypeEnum b : ArtworkTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ArtworkTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ArtworkTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ArtworkTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ArtworkTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ArtworkTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ARTWORK_TYPE = "artworkType";
  @SerializedName(SERIALIZED_NAME_ARTWORK_TYPE)
  private ArtworkTypeEnum artworkType;

  public static final String SERIALIZED_NAME_EXIT_CLICK_THROUGH_URL = "exitClickThroughUrl";
  @SerializedName(SERIALIZED_NAME_EXIT_CLICK_THROUGH_URL)
  private CreativeClickThroughUrl exitClickThroughUrl;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_POPUP_WINDOW_PROPERTIES = "popupWindowProperties";
  @SerializedName(SERIALIZED_NAME_POPUP_WINDOW_PROPERTIES)
  private PopupWindowProperties popupWindowProperties;

  /**
   * Target type used by the event.
   */
  @JsonAdapter(TargetTypeEnum.Adapter.class)
  public enum TargetTypeEnum {
    BLANK("TARGET_BLANK"),
    
    TOP("TARGET_TOP"),
    
    SELF("TARGET_SELF"),
    
    PARENT("TARGET_PARENT"),
    
    POPUP("TARGET_POPUP");

    private String value;

    TargetTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TargetTypeEnum fromValue(String value) {
      for (TargetTypeEnum b : TargetTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TargetTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TargetTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TargetTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TargetTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TargetTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TARGET_TYPE = "targetType";
  @SerializedName(SERIALIZED_NAME_TARGET_TYPE)
  private TargetTypeEnum targetType;

  public static final String SERIALIZED_NAME_VIDEO_REPORTING_ID = "videoReportingId";
  @SerializedName(SERIALIZED_NAME_VIDEO_REPORTING_ID)
  private String videoReportingId;

  public CreativeCustomEvent() {
  }

  public CreativeCustomEvent advertiserCustomEventId(String advertiserCustomEventId) {
    this.advertiserCustomEventId = advertiserCustomEventId;
    return this;
  }

  /**
   * Unique ID of this event used by Reporting and Data Transfer. This is a read-only field.
   * @return advertiserCustomEventId
   */
  @javax.annotation.Nullable
  public String getAdvertiserCustomEventId() {
    return advertiserCustomEventId;
  }

  public void setAdvertiserCustomEventId(String advertiserCustomEventId) {
    this.advertiserCustomEventId = advertiserCustomEventId;
  }


  public CreativeCustomEvent advertiserCustomEventName(String advertiserCustomEventName) {
    this.advertiserCustomEventName = advertiserCustomEventName;
    return this;
  }

  /**
   * User-entered name for the event.
   * @return advertiserCustomEventName
   */
  @javax.annotation.Nullable
  public String getAdvertiserCustomEventName() {
    return advertiserCustomEventName;
  }

  public void setAdvertiserCustomEventName(String advertiserCustomEventName) {
    this.advertiserCustomEventName = advertiserCustomEventName;
  }


  public CreativeCustomEvent advertiserCustomEventType(AdvertiserCustomEventTypeEnum advertiserCustomEventType) {
    this.advertiserCustomEventType = advertiserCustomEventType;
    return this;
  }

  /**
   * Type of the event. This is a read-only field.
   * @return advertiserCustomEventType
   */
  @javax.annotation.Nullable
  public AdvertiserCustomEventTypeEnum getAdvertiserCustomEventType() {
    return advertiserCustomEventType;
  }

  public void setAdvertiserCustomEventType(AdvertiserCustomEventTypeEnum advertiserCustomEventType) {
    this.advertiserCustomEventType = advertiserCustomEventType;
  }


  public CreativeCustomEvent artworkLabel(String artworkLabel) {
    this.artworkLabel = artworkLabel;
    return this;
  }

  /**
   * Artwork label column, used to link events in Campaign Manager back to events in Studio. This is a required field and should not be modified after insertion.
   * @return artworkLabel
   */
  @javax.annotation.Nullable
  public String getArtworkLabel() {
    return artworkLabel;
  }

  public void setArtworkLabel(String artworkLabel) {
    this.artworkLabel = artworkLabel;
  }


  public CreativeCustomEvent artworkType(ArtworkTypeEnum artworkType) {
    this.artworkType = artworkType;
    return this;
  }

  /**
   * Artwork type used by the creative.This is a read-only field.
   * @return artworkType
   */
  @javax.annotation.Nullable
  public ArtworkTypeEnum getArtworkType() {
    return artworkType;
  }

  public void setArtworkType(ArtworkTypeEnum artworkType) {
    this.artworkType = artworkType;
  }


  public CreativeCustomEvent exitClickThroughUrl(CreativeClickThroughUrl exitClickThroughUrl) {
    this.exitClickThroughUrl = exitClickThroughUrl;
    return this;
  }

  /**
   * Get exitClickThroughUrl
   * @return exitClickThroughUrl
   */
  @javax.annotation.Nullable
  public CreativeClickThroughUrl getExitClickThroughUrl() {
    return exitClickThroughUrl;
  }

  public void setExitClickThroughUrl(CreativeClickThroughUrl exitClickThroughUrl) {
    this.exitClickThroughUrl = exitClickThroughUrl;
  }


  public CreativeCustomEvent id(String id) {
    this.id = id;
    return this;
  }

  /**
   * ID of this event. This is a required field and should not be modified after insertion.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CreativeCustomEvent popupWindowProperties(PopupWindowProperties popupWindowProperties) {
    this.popupWindowProperties = popupWindowProperties;
    return this;
  }

  /**
   * Get popupWindowProperties
   * @return popupWindowProperties
   */
  @javax.annotation.Nullable
  public PopupWindowProperties getPopupWindowProperties() {
    return popupWindowProperties;
  }

  public void setPopupWindowProperties(PopupWindowProperties popupWindowProperties) {
    this.popupWindowProperties = popupWindowProperties;
  }


  public CreativeCustomEvent targetType(TargetTypeEnum targetType) {
    this.targetType = targetType;
    return this;
  }

  /**
   * Target type used by the event.
   * @return targetType
   */
  @javax.annotation.Nullable
  public TargetTypeEnum getTargetType() {
    return targetType;
  }

  public void setTargetType(TargetTypeEnum targetType) {
    this.targetType = targetType;
  }


  public CreativeCustomEvent videoReportingId(String videoReportingId) {
    this.videoReportingId = videoReportingId;
    return this;
  }

  /**
   * Video reporting ID, used to differentiate multiple videos in a single creative. This is a read-only field.
   * @return videoReportingId
   */
  @javax.annotation.Nullable
  public String getVideoReportingId() {
    return videoReportingId;
  }

  public void setVideoReportingId(String videoReportingId) {
    this.videoReportingId = videoReportingId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreativeCustomEvent creativeCustomEvent = (CreativeCustomEvent) o;
    return Objects.equals(this.advertiserCustomEventId, creativeCustomEvent.advertiserCustomEventId) &&
        Objects.equals(this.advertiserCustomEventName, creativeCustomEvent.advertiserCustomEventName) &&
        Objects.equals(this.advertiserCustomEventType, creativeCustomEvent.advertiserCustomEventType) &&
        Objects.equals(this.artworkLabel, creativeCustomEvent.artworkLabel) &&
        Objects.equals(this.artworkType, creativeCustomEvent.artworkType) &&
        Objects.equals(this.exitClickThroughUrl, creativeCustomEvent.exitClickThroughUrl) &&
        Objects.equals(this.id, creativeCustomEvent.id) &&
        Objects.equals(this.popupWindowProperties, creativeCustomEvent.popupWindowProperties) &&
        Objects.equals(this.targetType, creativeCustomEvent.targetType) &&
        Objects.equals(this.videoReportingId, creativeCustomEvent.videoReportingId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(advertiserCustomEventId, advertiserCustomEventName, advertiserCustomEventType, artworkLabel, artworkType, exitClickThroughUrl, id, popupWindowProperties, targetType, videoReportingId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreativeCustomEvent {\n");
    sb.append("    advertiserCustomEventId: ").append(toIndentedString(advertiserCustomEventId)).append("\n");
    sb.append("    advertiserCustomEventName: ").append(toIndentedString(advertiserCustomEventName)).append("\n");
    sb.append("    advertiserCustomEventType: ").append(toIndentedString(advertiserCustomEventType)).append("\n");
    sb.append("    artworkLabel: ").append(toIndentedString(artworkLabel)).append("\n");
    sb.append("    artworkType: ").append(toIndentedString(artworkType)).append("\n");
    sb.append("    exitClickThroughUrl: ").append(toIndentedString(exitClickThroughUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    popupWindowProperties: ").append(toIndentedString(popupWindowProperties)).append("\n");
    sb.append("    targetType: ").append(toIndentedString(targetType)).append("\n");
    sb.append("    videoReportingId: ").append(toIndentedString(videoReportingId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("advertiserCustomEventId");
    openapiFields.add("advertiserCustomEventName");
    openapiFields.add("advertiserCustomEventType");
    openapiFields.add("artworkLabel");
    openapiFields.add("artworkType");
    openapiFields.add("exitClickThroughUrl");
    openapiFields.add("id");
    openapiFields.add("popupWindowProperties");
    openapiFields.add("targetType");
    openapiFields.add("videoReportingId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreativeCustomEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreativeCustomEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreativeCustomEvent is not found in the empty JSON string", CreativeCustomEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreativeCustomEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreativeCustomEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("advertiserCustomEventId") != null && !jsonObj.get("advertiserCustomEventId").isJsonNull()) && !jsonObj.get("advertiserCustomEventId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advertiserCustomEventId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advertiserCustomEventId").toString()));
      }
      if ((jsonObj.get("advertiserCustomEventName") != null && !jsonObj.get("advertiserCustomEventName").isJsonNull()) && !jsonObj.get("advertiserCustomEventName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advertiserCustomEventName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advertiserCustomEventName").toString()));
      }
      if ((jsonObj.get("advertiserCustomEventType") != null && !jsonObj.get("advertiserCustomEventType").isJsonNull()) && !jsonObj.get("advertiserCustomEventType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advertiserCustomEventType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advertiserCustomEventType").toString()));
      }
      // validate the optional field `advertiserCustomEventType`
      if (jsonObj.get("advertiserCustomEventType") != null && !jsonObj.get("advertiserCustomEventType").isJsonNull()) {
        AdvertiserCustomEventTypeEnum.validateJsonElement(jsonObj.get("advertiserCustomEventType"));
      }
      if ((jsonObj.get("artworkLabel") != null && !jsonObj.get("artworkLabel").isJsonNull()) && !jsonObj.get("artworkLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artworkLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artworkLabel").toString()));
      }
      if ((jsonObj.get("artworkType") != null && !jsonObj.get("artworkType").isJsonNull()) && !jsonObj.get("artworkType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artworkType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artworkType").toString()));
      }
      // validate the optional field `artworkType`
      if (jsonObj.get("artworkType") != null && !jsonObj.get("artworkType").isJsonNull()) {
        ArtworkTypeEnum.validateJsonElement(jsonObj.get("artworkType"));
      }
      // validate the optional field `exitClickThroughUrl`
      if (jsonObj.get("exitClickThroughUrl") != null && !jsonObj.get("exitClickThroughUrl").isJsonNull()) {
        CreativeClickThroughUrl.validateJsonElement(jsonObj.get("exitClickThroughUrl"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `popupWindowProperties`
      if (jsonObj.get("popupWindowProperties") != null && !jsonObj.get("popupWindowProperties").isJsonNull()) {
        PopupWindowProperties.validateJsonElement(jsonObj.get("popupWindowProperties"));
      }
      if ((jsonObj.get("targetType") != null && !jsonObj.get("targetType").isJsonNull()) && !jsonObj.get("targetType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetType").toString()));
      }
      // validate the optional field `targetType`
      if (jsonObj.get("targetType") != null && !jsonObj.get("targetType").isJsonNull()) {
        TargetTypeEnum.validateJsonElement(jsonObj.get("targetType"));
      }
      if ((jsonObj.get("videoReportingId") != null && !jsonObj.get("videoReportingId").isJsonNull()) && !jsonObj.get("videoReportingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `videoReportingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("videoReportingId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreativeCustomEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreativeCustomEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreativeCustomEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreativeCustomEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<CreativeCustomEvent>() {
           @Override
           public void write(JsonWriter out, CreativeCustomEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreativeCustomEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreativeCustomEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreativeCustomEvent
   * @throws IOException if the JSON string is invalid with respect to CreativeCustomEvent
   */
  public static CreativeCustomEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreativeCustomEvent.class);
  }

  /**
   * Convert an instance of CreativeCustomEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

