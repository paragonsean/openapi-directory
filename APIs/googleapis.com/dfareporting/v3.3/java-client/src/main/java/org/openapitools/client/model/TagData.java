/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Placement Tag Data
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:12.851901-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TagData {
  public static final String SERIALIZED_NAME_AD_ID = "adId";
  @SerializedName(SERIALIZED_NAME_AD_ID)
  private String adId;

  public static final String SERIALIZED_NAME_CLICK_TAG = "clickTag";
  @SerializedName(SERIALIZED_NAME_CLICK_TAG)
  private String clickTag;

  public static final String SERIALIZED_NAME_CREATIVE_ID = "creativeId";
  @SerializedName(SERIALIZED_NAME_CREATIVE_ID)
  private String creativeId;

  /**
   * TagData tag format of this tag.
   */
  @JsonAdapter(FormatEnum.Adapter.class)
  public enum FormatEnum {
    STANDARD("PLACEMENT_TAG_STANDARD"),
    
    IFRAME_JAVASCRIPT("PLACEMENT_TAG_IFRAME_JAVASCRIPT"),
    
    IFRAME_ILAYER("PLACEMENT_TAG_IFRAME_ILAYER"),
    
    INTERNAL_REDIRECT("PLACEMENT_TAG_INTERNAL_REDIRECT"),
    
    JAVASCRIPT("PLACEMENT_TAG_JAVASCRIPT"),
    
    INTERSTITIAL_IFRAME_JAVASCRIPT("PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT"),
    
    INTERSTITIAL_INTERNAL_REDIRECT("PLACEMENT_TAG_INTERSTITIAL_INTERNAL_REDIRECT"),
    
    INTERSTITIAL_JAVASCRIPT("PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT"),
    
    CLICK_COMMANDS("PLACEMENT_TAG_CLICK_COMMANDS"),
    
    INSTREAM_VIDEO_PREFETCH("PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH"),
    
    TRACKING("PLACEMENT_TAG_TRACKING"),
    
    TRACKING_IFRAME("PLACEMENT_TAG_TRACKING_IFRAME"),
    
    TRACKING_JAVASCRIPT("PLACEMENT_TAG_TRACKING_JAVASCRIPT"),
    
    INSTREAM_VIDEO_PREFETCH_VAST_3("PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_3"),
    
    IFRAME_JAVASCRIPT_LEGACY("PLACEMENT_TAG_IFRAME_JAVASCRIPT_LEGACY"),
    
    JAVASCRIPT_LEGACY("PLACEMENT_TAG_JAVASCRIPT_LEGACY"),
    
    INTERSTITIAL_IFRAME_JAVASCRIPT_LEGACY("PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT_LEGACY"),
    
    INTERSTITIAL_JAVASCRIPT_LEGACY("PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT_LEGACY"),
    
    INSTREAM_VIDEO_PREFETCH_VAST_4("PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_4"),
    
    TRACKING_THIRD_PARTY_MEASUREMENT("PLACEMENT_TAG_TRACKING_THIRD_PARTY_MEASUREMENT");

    private String value;

    FormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FormatEnum fromValue(String value) {
      for (FormatEnum b : FormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private FormatEnum format;

  public static final String SERIALIZED_NAME_IMPRESSION_TAG = "impressionTag";
  @SerializedName(SERIALIZED_NAME_IMPRESSION_TAG)
  private String impressionTag;

  public TagData() {
  }

  public TagData adId(String adId) {
    this.adId = adId;
    return this;
  }

  /**
   * Ad associated with this placement tag. Applicable only when format is PLACEMENT_TAG_TRACKING.
   * @return adId
   */
  @javax.annotation.Nullable
  public String getAdId() {
    return adId;
  }

  public void setAdId(String adId) {
    this.adId = adId;
  }


  public TagData clickTag(String clickTag) {
    this.clickTag = clickTag;
    return this;
  }

  /**
   * Tag string to record a click.
   * @return clickTag
   */
  @javax.annotation.Nullable
  public String getClickTag() {
    return clickTag;
  }

  public void setClickTag(String clickTag) {
    this.clickTag = clickTag;
  }


  public TagData creativeId(String creativeId) {
    this.creativeId = creativeId;
    return this;
  }

  /**
   * Creative associated with this placement tag. Applicable only when format is PLACEMENT_TAG_TRACKING.
   * @return creativeId
   */
  @javax.annotation.Nullable
  public String getCreativeId() {
    return creativeId;
  }

  public void setCreativeId(String creativeId) {
    this.creativeId = creativeId;
  }


  public TagData format(FormatEnum format) {
    this.format = format;
    return this;
  }

  /**
   * TagData tag format of this tag.
   * @return format
   */
  @javax.annotation.Nullable
  public FormatEnum getFormat() {
    return format;
  }

  public void setFormat(FormatEnum format) {
    this.format = format;
  }


  public TagData impressionTag(String impressionTag) {
    this.impressionTag = impressionTag;
    return this;
  }

  /**
   * Tag string for serving an ad.
   * @return impressionTag
   */
  @javax.annotation.Nullable
  public String getImpressionTag() {
    return impressionTag;
  }

  public void setImpressionTag(String impressionTag) {
    this.impressionTag = impressionTag;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TagData tagData = (TagData) o;
    return Objects.equals(this.adId, tagData.adId) &&
        Objects.equals(this.clickTag, tagData.clickTag) &&
        Objects.equals(this.creativeId, tagData.creativeId) &&
        Objects.equals(this.format, tagData.format) &&
        Objects.equals(this.impressionTag, tagData.impressionTag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adId, clickTag, creativeId, format, impressionTag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TagData {\n");
    sb.append("    adId: ").append(toIndentedString(adId)).append("\n");
    sb.append("    clickTag: ").append(toIndentedString(clickTag)).append("\n");
    sb.append("    creativeId: ").append(toIndentedString(creativeId)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    impressionTag: ").append(toIndentedString(impressionTag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adId");
    openapiFields.add("clickTag");
    openapiFields.add("creativeId");
    openapiFields.add("format");
    openapiFields.add("impressionTag");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TagData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TagData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TagData is not found in the empty JSON string", TagData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TagData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TagData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("adId") != null && !jsonObj.get("adId").isJsonNull()) && !jsonObj.get("adId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adId").toString()));
      }
      if ((jsonObj.get("clickTag") != null && !jsonObj.get("clickTag").isJsonNull()) && !jsonObj.get("clickTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clickTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clickTag").toString()));
      }
      if ((jsonObj.get("creativeId") != null && !jsonObj.get("creativeId").isJsonNull()) && !jsonObj.get("creativeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creativeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creativeId").toString()));
      }
      if ((jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) && !jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      // validate the optional field `format`
      if (jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) {
        FormatEnum.validateJsonElement(jsonObj.get("format"));
      }
      if ((jsonObj.get("impressionTag") != null && !jsonObj.get("impressionTag").isJsonNull()) && !jsonObj.get("impressionTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `impressionTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("impressionTag").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TagData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TagData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TagData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TagData.class));

       return (TypeAdapter<T>) new TypeAdapter<TagData>() {
           @Override
           public void write(JsonWriter out, TagData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TagData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TagData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TagData
   * @throws IOException if the JSON string is invalid with respect to TagData
   */
  public static TagData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TagData.class);
  }

  /**
   * Convert an instance of TagData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

