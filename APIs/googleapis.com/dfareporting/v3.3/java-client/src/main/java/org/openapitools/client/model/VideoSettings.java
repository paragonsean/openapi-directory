/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CompanionSetting;
import org.openapitools.client.model.SkippableSetting;
import org.openapitools.client.model.TranscodeSetting;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Video Settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:12.851901-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VideoSettings {
  public static final String SERIALIZED_NAME_COMPANION_SETTINGS = "companionSettings";
  @SerializedName(SERIALIZED_NAME_COMPANION_SETTINGS)
  private CompanionSetting companionSettings;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  /**
   * Orientation of a video placement. If this value is set, placement will return assets matching the specified orientation.
   */
  @JsonAdapter(OrientationEnum.Adapter.class)
  public enum OrientationEnum {
    ANY("ANY"),
    
    LANDSCAPE("LANDSCAPE"),
    
    PORTRAIT("PORTRAIT");

    private String value;

    OrientationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrientationEnum fromValue(String value) {
      for (OrientationEnum b : OrientationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OrientationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrientationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrientationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OrientationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OrientationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ORIENTATION = "orientation";
  @SerializedName(SERIALIZED_NAME_ORIENTATION)
  private OrientationEnum orientation;

  public static final String SERIALIZED_NAME_SKIPPABLE_SETTINGS = "skippableSettings";
  @SerializedName(SERIALIZED_NAME_SKIPPABLE_SETTINGS)
  private SkippableSetting skippableSettings;

  public static final String SERIALIZED_NAME_TRANSCODE_SETTINGS = "transcodeSettings";
  @SerializedName(SERIALIZED_NAME_TRANSCODE_SETTINGS)
  private TranscodeSetting transcodeSettings;

  public VideoSettings() {
  }

  public VideoSettings companionSettings(CompanionSetting companionSettings) {
    this.companionSettings = companionSettings;
    return this;
  }

  /**
   * Get companionSettings
   * @return companionSettings
   */
  @javax.annotation.Nullable
  public CompanionSetting getCompanionSettings() {
    return companionSettings;
  }

  public void setCompanionSettings(CompanionSetting companionSettings) {
    this.companionSettings = companionSettings;
  }


  public VideoSettings kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string \&quot;dfareporting#videoSettings\&quot;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public VideoSettings orientation(OrientationEnum orientation) {
    this.orientation = orientation;
    return this;
  }

  /**
   * Orientation of a video placement. If this value is set, placement will return assets matching the specified orientation.
   * @return orientation
   */
  @javax.annotation.Nullable
  public OrientationEnum getOrientation() {
    return orientation;
  }

  public void setOrientation(OrientationEnum orientation) {
    this.orientation = orientation;
  }


  public VideoSettings skippableSettings(SkippableSetting skippableSettings) {
    this.skippableSettings = skippableSettings;
    return this;
  }

  /**
   * Get skippableSettings
   * @return skippableSettings
   */
  @javax.annotation.Nullable
  public SkippableSetting getSkippableSettings() {
    return skippableSettings;
  }

  public void setSkippableSettings(SkippableSetting skippableSettings) {
    this.skippableSettings = skippableSettings;
  }


  public VideoSettings transcodeSettings(TranscodeSetting transcodeSettings) {
    this.transcodeSettings = transcodeSettings;
    return this;
  }

  /**
   * Get transcodeSettings
   * @return transcodeSettings
   */
  @javax.annotation.Nullable
  public TranscodeSetting getTranscodeSettings() {
    return transcodeSettings;
  }

  public void setTranscodeSettings(TranscodeSetting transcodeSettings) {
    this.transcodeSettings = transcodeSettings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoSettings videoSettings = (VideoSettings) o;
    return Objects.equals(this.companionSettings, videoSettings.companionSettings) &&
        Objects.equals(this.kind, videoSettings.kind) &&
        Objects.equals(this.orientation, videoSettings.orientation) &&
        Objects.equals(this.skippableSettings, videoSettings.skippableSettings) &&
        Objects.equals(this.transcodeSettings, videoSettings.transcodeSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(companionSettings, kind, orientation, skippableSettings, transcodeSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoSettings {\n");
    sb.append("    companionSettings: ").append(toIndentedString(companionSettings)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    orientation: ").append(toIndentedString(orientation)).append("\n");
    sb.append("    skippableSettings: ").append(toIndentedString(skippableSettings)).append("\n");
    sb.append("    transcodeSettings: ").append(toIndentedString(transcodeSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("companionSettings");
    openapiFields.add("kind");
    openapiFields.add("orientation");
    openapiFields.add("skippableSettings");
    openapiFields.add("transcodeSettings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoSettings is not found in the empty JSON string", VideoSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `companionSettings`
      if (jsonObj.get("companionSettings") != null && !jsonObj.get("companionSettings").isJsonNull()) {
        CompanionSetting.validateJsonElement(jsonObj.get("companionSettings"));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("orientation") != null && !jsonObj.get("orientation").isJsonNull()) && !jsonObj.get("orientation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orientation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orientation").toString()));
      }
      // validate the optional field `orientation`
      if (jsonObj.get("orientation") != null && !jsonObj.get("orientation").isJsonNull()) {
        OrientationEnum.validateJsonElement(jsonObj.get("orientation"));
      }
      // validate the optional field `skippableSettings`
      if (jsonObj.get("skippableSettings") != null && !jsonObj.get("skippableSettings").isJsonNull()) {
        SkippableSetting.validateJsonElement(jsonObj.get("skippableSettings"));
      }
      // validate the optional field `transcodeSettings`
      if (jsonObj.get("transcodeSettings") != null && !jsonObj.get("transcodeSettings").isJsonNull()) {
        TranscodeSetting.validateJsonElement(jsonObj.get("transcodeSettings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoSettings>() {
           @Override
           public void write(JsonWriter out, VideoSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoSettings
   * @throws IOException if the JSON string is invalid with respect to VideoSettings
   */
  public static VideoSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoSettings.class);
  }

  /**
   * Convert an instance of VideoSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

