/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ObjectFilter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccountUserProfiles contains properties of a Campaign Manager user profile. This resource is specifically for managing user profiles, whereas UserProfiles is for accessing the API.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:12.851901-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountUserProfile {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_ADVERTISER_FILTER = "advertiserFilter";
  @SerializedName(SERIALIZED_NAME_ADVERTISER_FILTER)
  private ObjectFilter advertiserFilter;

  public static final String SERIALIZED_NAME_CAMPAIGN_FILTER = "campaignFilter";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_FILTER)
  private ObjectFilter campaignFilter;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private String comments;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SITE_FILTER = "siteFilter";
  @SerializedName(SERIALIZED_NAME_SITE_FILTER)
  private ObjectFilter siteFilter;

  public static final String SERIALIZED_NAME_SUBACCOUNT_ID = "subaccountId";
  @SerializedName(SERIALIZED_NAME_SUBACCOUNT_ID)
  private String subaccountId;

  /**
   * Trafficker type of this user profile. This is a read-only field.
   */
  @JsonAdapter(TraffickerTypeEnum.Adapter.class)
  public enum TraffickerTypeEnum {
    INTERNAL_NON_TRAFFICKER("INTERNAL_NON_TRAFFICKER"),
    
    INTERNAL_TRAFFICKER("INTERNAL_TRAFFICKER"),
    
    EXTERNAL_TRAFFICKER("EXTERNAL_TRAFFICKER");

    private String value;

    TraffickerTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TraffickerTypeEnum fromValue(String value) {
      for (TraffickerTypeEnum b : TraffickerTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TraffickerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TraffickerTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TraffickerTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TraffickerTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TraffickerTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRAFFICKER_TYPE = "traffickerType";
  @SerializedName(SERIALIZED_NAME_TRAFFICKER_TYPE)
  private TraffickerTypeEnum traffickerType;

  /**
   * User type of the user profile. This is a read-only field that can be left blank.
   */
  @JsonAdapter(UserAccessTypeEnum.Adapter.class)
  public enum UserAccessTypeEnum {
    NORMAL_USER("NORMAL_USER"),
    
    SUPER_USER("SUPER_USER"),
    
    INTERNAL_ADMINISTRATOR("INTERNAL_ADMINISTRATOR"),
    
    READ_ONLY_SUPER_USER("READ_ONLY_SUPER_USER");

    private String value;

    UserAccessTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UserAccessTypeEnum fromValue(String value) {
      for (UserAccessTypeEnum b : UserAccessTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UserAccessTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UserAccessTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UserAccessTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UserAccessTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UserAccessTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_USER_ACCESS_TYPE = "userAccessType";
  @SerializedName(SERIALIZED_NAME_USER_ACCESS_TYPE)
  private UserAccessTypeEnum userAccessType;

  public static final String SERIALIZED_NAME_USER_ROLE_FILTER = "userRoleFilter";
  @SerializedName(SERIALIZED_NAME_USER_ROLE_FILTER)
  private ObjectFilter userRoleFilter;

  public static final String SERIALIZED_NAME_USER_ROLE_ID = "userRoleId";
  @SerializedName(SERIALIZED_NAME_USER_ROLE_ID)
  private String userRoleId;

  public AccountUserProfile() {
  }

  public AccountUserProfile accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Account ID of the user profile. This is a read-only field that can be left blank.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public AccountUserProfile active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Whether this user profile is active. This defaults to false, and must be set true on insert for the user profile to be usable.
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public AccountUserProfile advertiserFilter(ObjectFilter advertiserFilter) {
    this.advertiserFilter = advertiserFilter;
    return this;
  }

  /**
   * Get advertiserFilter
   * @return advertiserFilter
   */
  @javax.annotation.Nullable
  public ObjectFilter getAdvertiserFilter() {
    return advertiserFilter;
  }

  public void setAdvertiserFilter(ObjectFilter advertiserFilter) {
    this.advertiserFilter = advertiserFilter;
  }


  public AccountUserProfile campaignFilter(ObjectFilter campaignFilter) {
    this.campaignFilter = campaignFilter;
    return this;
  }

  /**
   * Get campaignFilter
   * @return campaignFilter
   */
  @javax.annotation.Nullable
  public ObjectFilter getCampaignFilter() {
    return campaignFilter;
  }

  public void setCampaignFilter(ObjectFilter campaignFilter) {
    this.campaignFilter = campaignFilter;
  }


  public AccountUserProfile comments(String comments) {
    this.comments = comments;
    return this;
  }

  /**
   * Comments for this user profile.
   * @return comments
   */
  @javax.annotation.Nullable
  public String getComments() {
    return comments;
  }

  public void setComments(String comments) {
    this.comments = comments;
  }


  public AccountUserProfile email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Email of the user profile. The email addresss must be linked to a Google Account. This field is required on insertion and is read-only after insertion.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public AccountUserProfile id(String id) {
    this.id = id;
    return this;
  }

  /**
   * ID of the user profile. This is a read-only, auto-generated field.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AccountUserProfile kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string \&quot;dfareporting#accountUserProfile\&quot;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public AccountUserProfile locale(String locale) {
    this.locale = locale;
    return this;
  }

  /**
   * Locale of the user profile. This is a required field. Acceptable values are: - \&quot;cs\&quot; (Czech) - \&quot;de\&quot; (German) - \&quot;en\&quot; (English) - \&quot;en-GB\&quot; (English United Kingdom) - \&quot;es\&quot; (Spanish) - \&quot;fr\&quot; (French) - \&quot;it\&quot; (Italian) - \&quot;ja\&quot; (Japanese) - \&quot;ko\&quot; (Korean) - \&quot;pl\&quot; (Polish) - \&quot;pt-BR\&quot; (Portuguese Brazil) - \&quot;ru\&quot; (Russian) - \&quot;sv\&quot; (Swedish) - \&quot;tr\&quot; (Turkish) - \&quot;zh-CN\&quot; (Chinese Simplified) - \&quot;zh-TW\&quot; (Chinese Traditional) 
   * @return locale
   */
  @javax.annotation.Nullable
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }


  public AccountUserProfile name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the user profile. This is a required field. Must be less than 64 characters long, must be globally unique, and cannot contain whitespace or any of the following characters: \&quot;&amp;;&lt;&gt;\&quot;#%,\&quot;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AccountUserProfile siteFilter(ObjectFilter siteFilter) {
    this.siteFilter = siteFilter;
    return this;
  }

  /**
   * Get siteFilter
   * @return siteFilter
   */
  @javax.annotation.Nullable
  public ObjectFilter getSiteFilter() {
    return siteFilter;
  }

  public void setSiteFilter(ObjectFilter siteFilter) {
    this.siteFilter = siteFilter;
  }


  public AccountUserProfile subaccountId(String subaccountId) {
    this.subaccountId = subaccountId;
    return this;
  }

  /**
   * Subaccount ID of the user profile. This is a read-only field that can be left blank.
   * @return subaccountId
   */
  @javax.annotation.Nullable
  public String getSubaccountId() {
    return subaccountId;
  }

  public void setSubaccountId(String subaccountId) {
    this.subaccountId = subaccountId;
  }


  public AccountUserProfile traffickerType(TraffickerTypeEnum traffickerType) {
    this.traffickerType = traffickerType;
    return this;
  }

  /**
   * Trafficker type of this user profile. This is a read-only field.
   * @return traffickerType
   */
  @javax.annotation.Nullable
  public TraffickerTypeEnum getTraffickerType() {
    return traffickerType;
  }

  public void setTraffickerType(TraffickerTypeEnum traffickerType) {
    this.traffickerType = traffickerType;
  }


  public AccountUserProfile userAccessType(UserAccessTypeEnum userAccessType) {
    this.userAccessType = userAccessType;
    return this;
  }

  /**
   * User type of the user profile. This is a read-only field that can be left blank.
   * @return userAccessType
   */
  @javax.annotation.Nullable
  public UserAccessTypeEnum getUserAccessType() {
    return userAccessType;
  }

  public void setUserAccessType(UserAccessTypeEnum userAccessType) {
    this.userAccessType = userAccessType;
  }


  public AccountUserProfile userRoleFilter(ObjectFilter userRoleFilter) {
    this.userRoleFilter = userRoleFilter;
    return this;
  }

  /**
   * Get userRoleFilter
   * @return userRoleFilter
   */
  @javax.annotation.Nullable
  public ObjectFilter getUserRoleFilter() {
    return userRoleFilter;
  }

  public void setUserRoleFilter(ObjectFilter userRoleFilter) {
    this.userRoleFilter = userRoleFilter;
  }


  public AccountUserProfile userRoleId(String userRoleId) {
    this.userRoleId = userRoleId;
    return this;
  }

  /**
   * User role ID of the user profile. This is a required field.
   * @return userRoleId
   */
  @javax.annotation.Nullable
  public String getUserRoleId() {
    return userRoleId;
  }

  public void setUserRoleId(String userRoleId) {
    this.userRoleId = userRoleId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountUserProfile accountUserProfile = (AccountUserProfile) o;
    return Objects.equals(this.accountId, accountUserProfile.accountId) &&
        Objects.equals(this.active, accountUserProfile.active) &&
        Objects.equals(this.advertiserFilter, accountUserProfile.advertiserFilter) &&
        Objects.equals(this.campaignFilter, accountUserProfile.campaignFilter) &&
        Objects.equals(this.comments, accountUserProfile.comments) &&
        Objects.equals(this.email, accountUserProfile.email) &&
        Objects.equals(this.id, accountUserProfile.id) &&
        Objects.equals(this.kind, accountUserProfile.kind) &&
        Objects.equals(this.locale, accountUserProfile.locale) &&
        Objects.equals(this.name, accountUserProfile.name) &&
        Objects.equals(this.siteFilter, accountUserProfile.siteFilter) &&
        Objects.equals(this.subaccountId, accountUserProfile.subaccountId) &&
        Objects.equals(this.traffickerType, accountUserProfile.traffickerType) &&
        Objects.equals(this.userAccessType, accountUserProfile.userAccessType) &&
        Objects.equals(this.userRoleFilter, accountUserProfile.userRoleFilter) &&
        Objects.equals(this.userRoleId, accountUserProfile.userRoleId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, active, advertiserFilter, campaignFilter, comments, email, id, kind, locale, name, siteFilter, subaccountId, traffickerType, userAccessType, userRoleFilter, userRoleId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountUserProfile {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    advertiserFilter: ").append(toIndentedString(advertiserFilter)).append("\n");
    sb.append("    campaignFilter: ").append(toIndentedString(campaignFilter)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    siteFilter: ").append(toIndentedString(siteFilter)).append("\n");
    sb.append("    subaccountId: ").append(toIndentedString(subaccountId)).append("\n");
    sb.append("    traffickerType: ").append(toIndentedString(traffickerType)).append("\n");
    sb.append("    userAccessType: ").append(toIndentedString(userAccessType)).append("\n");
    sb.append("    userRoleFilter: ").append(toIndentedString(userRoleFilter)).append("\n");
    sb.append("    userRoleId: ").append(toIndentedString(userRoleId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("active");
    openapiFields.add("advertiserFilter");
    openapiFields.add("campaignFilter");
    openapiFields.add("comments");
    openapiFields.add("email");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("locale");
    openapiFields.add("name");
    openapiFields.add("siteFilter");
    openapiFields.add("subaccountId");
    openapiFields.add("traffickerType");
    openapiFields.add("userAccessType");
    openapiFields.add("userRoleFilter");
    openapiFields.add("userRoleId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountUserProfile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountUserProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountUserProfile is not found in the empty JSON string", AccountUserProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountUserProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountUserProfile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      // validate the optional field `advertiserFilter`
      if (jsonObj.get("advertiserFilter") != null && !jsonObj.get("advertiserFilter").isJsonNull()) {
        ObjectFilter.validateJsonElement(jsonObj.get("advertiserFilter"));
      }
      // validate the optional field `campaignFilter`
      if (jsonObj.get("campaignFilter") != null && !jsonObj.get("campaignFilter").isJsonNull()) {
        ObjectFilter.validateJsonElement(jsonObj.get("campaignFilter"));
      }
      if ((jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonNull()) && !jsonObj.get("comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) && !jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `siteFilter`
      if (jsonObj.get("siteFilter") != null && !jsonObj.get("siteFilter").isJsonNull()) {
        ObjectFilter.validateJsonElement(jsonObj.get("siteFilter"));
      }
      if ((jsonObj.get("subaccountId") != null && !jsonObj.get("subaccountId").isJsonNull()) && !jsonObj.get("subaccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subaccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subaccountId").toString()));
      }
      if ((jsonObj.get("traffickerType") != null && !jsonObj.get("traffickerType").isJsonNull()) && !jsonObj.get("traffickerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `traffickerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("traffickerType").toString()));
      }
      // validate the optional field `traffickerType`
      if (jsonObj.get("traffickerType") != null && !jsonObj.get("traffickerType").isJsonNull()) {
        TraffickerTypeEnum.validateJsonElement(jsonObj.get("traffickerType"));
      }
      if ((jsonObj.get("userAccessType") != null && !jsonObj.get("userAccessType").isJsonNull()) && !jsonObj.get("userAccessType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userAccessType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userAccessType").toString()));
      }
      // validate the optional field `userAccessType`
      if (jsonObj.get("userAccessType") != null && !jsonObj.get("userAccessType").isJsonNull()) {
        UserAccessTypeEnum.validateJsonElement(jsonObj.get("userAccessType"));
      }
      // validate the optional field `userRoleFilter`
      if (jsonObj.get("userRoleFilter") != null && !jsonObj.get("userRoleFilter").isJsonNull()) {
        ObjectFilter.validateJsonElement(jsonObj.get("userRoleFilter"));
      }
      if ((jsonObj.get("userRoleId") != null && !jsonObj.get("userRoleId").isJsonNull()) && !jsonObj.get("userRoleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userRoleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userRoleId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountUserProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountUserProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountUserProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountUserProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountUserProfile>() {
           @Override
           public void write(JsonWriter out, AccountUserProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountUserProfile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountUserProfile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountUserProfile
   * @throws IOException if the JSON string is invalid with respect to AccountUserProfile
   */
  public static AccountUserProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountUserProfile.class);
  }

  /**
   * Convert an instance of AccountUserProfile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

