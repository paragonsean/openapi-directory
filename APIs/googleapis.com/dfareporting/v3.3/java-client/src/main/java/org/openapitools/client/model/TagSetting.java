/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Tag Settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:12.851901-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TagSetting {
  public static final String SERIALIZED_NAME_ADDITIONAL_KEY_VALUES = "additionalKeyValues";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_KEY_VALUES)
  private String additionalKeyValues;

  public static final String SERIALIZED_NAME_INCLUDE_CLICK_THROUGH_URLS = "includeClickThroughUrls";
  @SerializedName(SERIALIZED_NAME_INCLUDE_CLICK_THROUGH_URLS)
  private Boolean includeClickThroughUrls;

  public static final String SERIALIZED_NAME_INCLUDE_CLICK_TRACKING = "includeClickTracking";
  @SerializedName(SERIALIZED_NAME_INCLUDE_CLICK_TRACKING)
  private Boolean includeClickTracking;

  /**
   * Option specifying how keywords are embedded in ad tags. This setting can be used to specify whether keyword placeholders are inserted in placement tags for this site. Publishers can then add keywords to those placeholders.
   */
  @JsonAdapter(KeywordOptionEnum.Adapter.class)
  public enum KeywordOptionEnum {
    PLACEHOLDER_WITH_LIST_OF_KEYWORDS("PLACEHOLDER_WITH_LIST_OF_KEYWORDS"),
    
    IGNORE("IGNORE"),
    
    GENERATE_SEPARATE_TAG_FOR_EACH_KEYWORD("GENERATE_SEPARATE_TAG_FOR_EACH_KEYWORD");

    private String value;

    KeywordOptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KeywordOptionEnum fromValue(String value) {
      for (KeywordOptionEnum b : KeywordOptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KeywordOptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KeywordOptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KeywordOptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KeywordOptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KeywordOptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KEYWORD_OPTION = "keywordOption";
  @SerializedName(SERIALIZED_NAME_KEYWORD_OPTION)
  private KeywordOptionEnum keywordOption;

  public TagSetting() {
  }

  public TagSetting additionalKeyValues(String additionalKeyValues) {
    this.additionalKeyValues = additionalKeyValues;
    return this;
  }

  /**
   * Additional key-values to be included in tags. Each key-value pair must be of the form key&#x3D;value, and pairs must be separated by a semicolon (;). Keys and values must not contain commas. For example, id&#x3D;2;color&#x3D;red is a valid value for this field.
   * @return additionalKeyValues
   */
  @javax.annotation.Nullable
  public String getAdditionalKeyValues() {
    return additionalKeyValues;
  }

  public void setAdditionalKeyValues(String additionalKeyValues) {
    this.additionalKeyValues = additionalKeyValues;
  }


  public TagSetting includeClickThroughUrls(Boolean includeClickThroughUrls) {
    this.includeClickThroughUrls = includeClickThroughUrls;
    return this;
  }

  /**
   * Whether static landing page URLs should be included in the tags. This setting applies only to placements.
   * @return includeClickThroughUrls
   */
  @javax.annotation.Nullable
  public Boolean getIncludeClickThroughUrls() {
    return includeClickThroughUrls;
  }

  public void setIncludeClickThroughUrls(Boolean includeClickThroughUrls) {
    this.includeClickThroughUrls = includeClickThroughUrls;
  }


  public TagSetting includeClickTracking(Boolean includeClickTracking) {
    this.includeClickTracking = includeClickTracking;
    return this;
  }

  /**
   * Whether click-tracking string should be included in the tags.
   * @return includeClickTracking
   */
  @javax.annotation.Nullable
  public Boolean getIncludeClickTracking() {
    return includeClickTracking;
  }

  public void setIncludeClickTracking(Boolean includeClickTracking) {
    this.includeClickTracking = includeClickTracking;
  }


  public TagSetting keywordOption(KeywordOptionEnum keywordOption) {
    this.keywordOption = keywordOption;
    return this;
  }

  /**
   * Option specifying how keywords are embedded in ad tags. This setting can be used to specify whether keyword placeholders are inserted in placement tags for this site. Publishers can then add keywords to those placeholders.
   * @return keywordOption
   */
  @javax.annotation.Nullable
  public KeywordOptionEnum getKeywordOption() {
    return keywordOption;
  }

  public void setKeywordOption(KeywordOptionEnum keywordOption) {
    this.keywordOption = keywordOption;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TagSetting tagSetting = (TagSetting) o;
    return Objects.equals(this.additionalKeyValues, tagSetting.additionalKeyValues) &&
        Objects.equals(this.includeClickThroughUrls, tagSetting.includeClickThroughUrls) &&
        Objects.equals(this.includeClickTracking, tagSetting.includeClickTracking) &&
        Objects.equals(this.keywordOption, tagSetting.keywordOption);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalKeyValues, includeClickThroughUrls, includeClickTracking, keywordOption);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TagSetting {\n");
    sb.append("    additionalKeyValues: ").append(toIndentedString(additionalKeyValues)).append("\n");
    sb.append("    includeClickThroughUrls: ").append(toIndentedString(includeClickThroughUrls)).append("\n");
    sb.append("    includeClickTracking: ").append(toIndentedString(includeClickTracking)).append("\n");
    sb.append("    keywordOption: ").append(toIndentedString(keywordOption)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalKeyValues");
    openapiFields.add("includeClickThroughUrls");
    openapiFields.add("includeClickTracking");
    openapiFields.add("keywordOption");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TagSetting
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TagSetting.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TagSetting is not found in the empty JSON string", TagSetting.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TagSetting.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TagSetting` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("additionalKeyValues") != null && !jsonObj.get("additionalKeyValues").isJsonNull()) && !jsonObj.get("additionalKeyValues").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalKeyValues` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalKeyValues").toString()));
      }
      if ((jsonObj.get("keywordOption") != null && !jsonObj.get("keywordOption").isJsonNull()) && !jsonObj.get("keywordOption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keywordOption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keywordOption").toString()));
      }
      // validate the optional field `keywordOption`
      if (jsonObj.get("keywordOption") != null && !jsonObj.get("keywordOption").isJsonNull()) {
        KeywordOptionEnum.validateJsonElement(jsonObj.get("keywordOption"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TagSetting.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TagSetting' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TagSetting> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TagSetting.class));

       return (TypeAdapter<T>) new TypeAdapter<TagSetting>() {
           @Override
           public void write(JsonWriter out, TagSetting value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TagSetting read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TagSetting given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TagSetting
   * @throws IOException if the JSON string is invalid with respect to TagSetting
   */
  public static TagSetting fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TagSetting.class);
  }

  /**
   * Convert an instance of TagSetting to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

