/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Dimension;
import org.openapitools.client.model.Metric;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents fields that are compatible to be selected for a report of type \&quot;FlOODLIGHT\&quot;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:12.851901-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FloodlightReportCompatibleFields {
  public static final String SERIALIZED_NAME_DIMENSION_FILTERS = "dimensionFilters";
  @SerializedName(SERIALIZED_NAME_DIMENSION_FILTERS)
  private List<Dimension> dimensionFilters = new ArrayList<>();

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private List<Dimension> dimensions = new ArrayList<>();

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private List<Metric> metrics = new ArrayList<>();

  public FloodlightReportCompatibleFields() {
  }

  public FloodlightReportCompatibleFields dimensionFilters(List<Dimension> dimensionFilters) {
    this.dimensionFilters = dimensionFilters;
    return this;
  }

  public FloodlightReportCompatibleFields addDimensionFiltersItem(Dimension dimensionFiltersItem) {
    if (this.dimensionFilters == null) {
      this.dimensionFilters = new ArrayList<>();
    }
    this.dimensionFilters.add(dimensionFiltersItem);
    return this;
  }

  /**
   * Dimensions which are compatible to be selected in the \&quot;dimensionFilters\&quot; section of the report.
   * @return dimensionFilters
   */
  @javax.annotation.Nullable
  public List<Dimension> getDimensionFilters() {
    return dimensionFilters;
  }

  public void setDimensionFilters(List<Dimension> dimensionFilters) {
    this.dimensionFilters = dimensionFilters;
  }


  public FloodlightReportCompatibleFields dimensions(List<Dimension> dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  public FloodlightReportCompatibleFields addDimensionsItem(Dimension dimensionsItem) {
    if (this.dimensions == null) {
      this.dimensions = new ArrayList<>();
    }
    this.dimensions.add(dimensionsItem);
    return this;
  }

  /**
   * Dimensions which are compatible to be selected in the \&quot;dimensions\&quot; section of the report.
   * @return dimensions
   */
  @javax.annotation.Nullable
  public List<Dimension> getDimensions() {
    return dimensions;
  }

  public void setDimensions(List<Dimension> dimensions) {
    this.dimensions = dimensions;
  }


  public FloodlightReportCompatibleFields kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * The kind of resource this is, in this case dfareporting#floodlightReportCompatibleFields.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public FloodlightReportCompatibleFields metrics(List<Metric> metrics) {
    this.metrics = metrics;
    return this;
  }

  public FloodlightReportCompatibleFields addMetricsItem(Metric metricsItem) {
    if (this.metrics == null) {
      this.metrics = new ArrayList<>();
    }
    this.metrics.add(metricsItem);
    return this;
  }

  /**
   * Metrics which are compatible to be selected in the \&quot;metricNames\&quot; section of the report.
   * @return metrics
   */
  @javax.annotation.Nullable
  public List<Metric> getMetrics() {
    return metrics;
  }

  public void setMetrics(List<Metric> metrics) {
    this.metrics = metrics;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FloodlightReportCompatibleFields floodlightReportCompatibleFields = (FloodlightReportCompatibleFields) o;
    return Objects.equals(this.dimensionFilters, floodlightReportCompatibleFields.dimensionFilters) &&
        Objects.equals(this.dimensions, floodlightReportCompatibleFields.dimensions) &&
        Objects.equals(this.kind, floodlightReportCompatibleFields.kind) &&
        Objects.equals(this.metrics, floodlightReportCompatibleFields.metrics);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dimensionFilters, dimensions, kind, metrics);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FloodlightReportCompatibleFields {\n");
    sb.append("    dimensionFilters: ").append(toIndentedString(dimensionFilters)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dimensionFilters");
    openapiFields.add("dimensions");
    openapiFields.add("kind");
    openapiFields.add("metrics");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FloodlightReportCompatibleFields
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FloodlightReportCompatibleFields.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FloodlightReportCompatibleFields is not found in the empty JSON string", FloodlightReportCompatibleFields.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FloodlightReportCompatibleFields.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FloodlightReportCompatibleFields` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("dimensionFilters") != null && !jsonObj.get("dimensionFilters").isJsonNull()) {
        JsonArray jsonArraydimensionFilters = jsonObj.getAsJsonArray("dimensionFilters");
        if (jsonArraydimensionFilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dimensionFilters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dimensionFilters` to be an array in the JSON string but got `%s`", jsonObj.get("dimensionFilters").toString()));
          }

          // validate the optional field `dimensionFilters` (array)
          for (int i = 0; i < jsonArraydimensionFilters.size(); i++) {
            Dimension.validateJsonElement(jsonArraydimensionFilters.get(i));
          };
        }
      }
      if (jsonObj.get("dimensions") != null && !jsonObj.get("dimensions").isJsonNull()) {
        JsonArray jsonArraydimensions = jsonObj.getAsJsonArray("dimensions");
        if (jsonArraydimensions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dimensions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dimensions` to be an array in the JSON string but got `%s`", jsonObj.get("dimensions").toString()));
          }

          // validate the optional field `dimensions` (array)
          for (int i = 0; i < jsonArraydimensions.size(); i++) {
            Dimension.validateJsonElement(jsonArraydimensions.get(i));
          };
        }
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if (jsonObj.get("metrics") != null && !jsonObj.get("metrics").isJsonNull()) {
        JsonArray jsonArraymetrics = jsonObj.getAsJsonArray("metrics");
        if (jsonArraymetrics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metrics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metrics` to be an array in the JSON string but got `%s`", jsonObj.get("metrics").toString()));
          }

          // validate the optional field `metrics` (array)
          for (int i = 0; i < jsonArraymetrics.size(); i++) {
            Metric.validateJsonElement(jsonArraymetrics.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FloodlightReportCompatibleFields.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FloodlightReportCompatibleFields' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FloodlightReportCompatibleFields> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FloodlightReportCompatibleFields.class));

       return (TypeAdapter<T>) new TypeAdapter<FloodlightReportCompatibleFields>() {
           @Override
           public void write(JsonWriter out, FloodlightReportCompatibleFields value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FloodlightReportCompatibleFields read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FloodlightReportCompatibleFields given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FloodlightReportCompatibleFields
   * @throws IOException if the JSON string is invalid with respect to FloodlightReportCompatibleFields
   */
  public static FloodlightReportCompatibleFields fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FloodlightReportCompatibleFields.class);
  }

  /**
   * Convert an instance of FloodlightReportCompatibleFields to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

