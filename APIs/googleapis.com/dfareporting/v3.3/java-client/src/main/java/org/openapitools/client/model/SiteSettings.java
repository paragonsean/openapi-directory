/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TagSetting;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Site Settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:12.851901-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SiteSettings {
  public static final String SERIALIZED_NAME_ACTIVE_VIEW_OPT_OUT = "activeViewOptOut";
  @SerializedName(SERIALIZED_NAME_ACTIVE_VIEW_OPT_OUT)
  private Boolean activeViewOptOut;

  public static final String SERIALIZED_NAME_AD_BLOCKING_OPT_OUT = "adBlockingOptOut";
  @SerializedName(SERIALIZED_NAME_AD_BLOCKING_OPT_OUT)
  private Boolean adBlockingOptOut;

  public static final String SERIALIZED_NAME_DISABLE_NEW_COOKIE = "disableNewCookie";
  @SerializedName(SERIALIZED_NAME_DISABLE_NEW_COOKIE)
  private Boolean disableNewCookie;

  public static final String SERIALIZED_NAME_TAG_SETTING = "tagSetting";
  @SerializedName(SERIALIZED_NAME_TAG_SETTING)
  private TagSetting tagSetting;

  public static final String SERIALIZED_NAME_VIDEO_ACTIVE_VIEW_OPT_OUT_TEMPLATE = "videoActiveViewOptOutTemplate";
  @SerializedName(SERIALIZED_NAME_VIDEO_ACTIVE_VIEW_OPT_OUT_TEMPLATE)
  private Boolean videoActiveViewOptOutTemplate;

  /**
   * Default VPAID adapter setting for new placements created under this site. This value will be used to populate the placements.vpaidAdapterChoice field, when no value is specified for the new placement. Controls which VPAID format the measurement adapter will use for in-stream video creatives assigned to the placement. The publisher&#39;s specifications will typically determine this setting. For VPAID creatives, the adapter format will match the VPAID format (HTML5 VPAID creatives use the HTML5 adapter). *Note:* Flash is no longer supported. This field now defaults to HTML5 when the following values are provided: FLASH, BOTH.
   */
  @JsonAdapter(VpaidAdapterChoiceTemplateEnum.Adapter.class)
  public enum VpaidAdapterChoiceTemplateEnum {
    DEFAULT("DEFAULT"),
    
    FLASH("FLASH"),
    
    HTML5("HTML5"),
    
    BOTH("BOTH");

    private String value;

    VpaidAdapterChoiceTemplateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VpaidAdapterChoiceTemplateEnum fromValue(String value) {
      for (VpaidAdapterChoiceTemplateEnum b : VpaidAdapterChoiceTemplateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VpaidAdapterChoiceTemplateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VpaidAdapterChoiceTemplateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VpaidAdapterChoiceTemplateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VpaidAdapterChoiceTemplateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VpaidAdapterChoiceTemplateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VPAID_ADAPTER_CHOICE_TEMPLATE = "vpaidAdapterChoiceTemplate";
  @SerializedName(SERIALIZED_NAME_VPAID_ADAPTER_CHOICE_TEMPLATE)
  private VpaidAdapterChoiceTemplateEnum vpaidAdapterChoiceTemplate;

  public SiteSettings() {
  }

  public SiteSettings activeViewOptOut(Boolean activeViewOptOut) {
    this.activeViewOptOut = activeViewOptOut;
    return this;
  }

  /**
   * Whether active view creatives are disabled for this site.
   * @return activeViewOptOut
   */
  @javax.annotation.Nullable
  public Boolean getActiveViewOptOut() {
    return activeViewOptOut;
  }

  public void setActiveViewOptOut(Boolean activeViewOptOut) {
    this.activeViewOptOut = activeViewOptOut;
  }


  public SiteSettings adBlockingOptOut(Boolean adBlockingOptOut) {
    this.adBlockingOptOut = adBlockingOptOut;
    return this;
  }

  /**
   * Whether this site opts out of ad blocking. When true, ad blocking is disabled for all placements under the site, regardless of the individual placement settings. When false, the campaign and placement settings take effect.
   * @return adBlockingOptOut
   */
  @javax.annotation.Nullable
  public Boolean getAdBlockingOptOut() {
    return adBlockingOptOut;
  }

  public void setAdBlockingOptOut(Boolean adBlockingOptOut) {
    this.adBlockingOptOut = adBlockingOptOut;
  }


  public SiteSettings disableNewCookie(Boolean disableNewCookie) {
    this.disableNewCookie = disableNewCookie;
    return this;
  }

  /**
   * Whether new cookies are disabled for this site.
   * @return disableNewCookie
   */
  @javax.annotation.Nullable
  public Boolean getDisableNewCookie() {
    return disableNewCookie;
  }

  public void setDisableNewCookie(Boolean disableNewCookie) {
    this.disableNewCookie = disableNewCookie;
  }


  public SiteSettings tagSetting(TagSetting tagSetting) {
    this.tagSetting = tagSetting;
    return this;
  }

  /**
   * Get tagSetting
   * @return tagSetting
   */
  @javax.annotation.Nullable
  public TagSetting getTagSetting() {
    return tagSetting;
  }

  public void setTagSetting(TagSetting tagSetting) {
    this.tagSetting = tagSetting;
  }


  public SiteSettings videoActiveViewOptOutTemplate(Boolean videoActiveViewOptOutTemplate) {
    this.videoActiveViewOptOutTemplate = videoActiveViewOptOutTemplate;
    return this;
  }

  /**
   * Whether Verification and ActiveView for in-stream video creatives are disabled by default for new placements created under this site. This value will be used to populate the placement.videoActiveViewOptOut field, when no value is specified for the new placement.
   * @return videoActiveViewOptOutTemplate
   */
  @javax.annotation.Nullable
  public Boolean getVideoActiveViewOptOutTemplate() {
    return videoActiveViewOptOutTemplate;
  }

  public void setVideoActiveViewOptOutTemplate(Boolean videoActiveViewOptOutTemplate) {
    this.videoActiveViewOptOutTemplate = videoActiveViewOptOutTemplate;
  }


  public SiteSettings vpaidAdapterChoiceTemplate(VpaidAdapterChoiceTemplateEnum vpaidAdapterChoiceTemplate) {
    this.vpaidAdapterChoiceTemplate = vpaidAdapterChoiceTemplate;
    return this;
  }

  /**
   * Default VPAID adapter setting for new placements created under this site. This value will be used to populate the placements.vpaidAdapterChoice field, when no value is specified for the new placement. Controls which VPAID format the measurement adapter will use for in-stream video creatives assigned to the placement. The publisher&#39;s specifications will typically determine this setting. For VPAID creatives, the adapter format will match the VPAID format (HTML5 VPAID creatives use the HTML5 adapter). *Note:* Flash is no longer supported. This field now defaults to HTML5 when the following values are provided: FLASH, BOTH.
   * @return vpaidAdapterChoiceTemplate
   */
  @javax.annotation.Nullable
  public VpaidAdapterChoiceTemplateEnum getVpaidAdapterChoiceTemplate() {
    return vpaidAdapterChoiceTemplate;
  }

  public void setVpaidAdapterChoiceTemplate(VpaidAdapterChoiceTemplateEnum vpaidAdapterChoiceTemplate) {
    this.vpaidAdapterChoiceTemplate = vpaidAdapterChoiceTemplate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SiteSettings siteSettings = (SiteSettings) o;
    return Objects.equals(this.activeViewOptOut, siteSettings.activeViewOptOut) &&
        Objects.equals(this.adBlockingOptOut, siteSettings.adBlockingOptOut) &&
        Objects.equals(this.disableNewCookie, siteSettings.disableNewCookie) &&
        Objects.equals(this.tagSetting, siteSettings.tagSetting) &&
        Objects.equals(this.videoActiveViewOptOutTemplate, siteSettings.videoActiveViewOptOutTemplate) &&
        Objects.equals(this.vpaidAdapterChoiceTemplate, siteSettings.vpaidAdapterChoiceTemplate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeViewOptOut, adBlockingOptOut, disableNewCookie, tagSetting, videoActiveViewOptOutTemplate, vpaidAdapterChoiceTemplate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SiteSettings {\n");
    sb.append("    activeViewOptOut: ").append(toIndentedString(activeViewOptOut)).append("\n");
    sb.append("    adBlockingOptOut: ").append(toIndentedString(adBlockingOptOut)).append("\n");
    sb.append("    disableNewCookie: ").append(toIndentedString(disableNewCookie)).append("\n");
    sb.append("    tagSetting: ").append(toIndentedString(tagSetting)).append("\n");
    sb.append("    videoActiveViewOptOutTemplate: ").append(toIndentedString(videoActiveViewOptOutTemplate)).append("\n");
    sb.append("    vpaidAdapterChoiceTemplate: ").append(toIndentedString(vpaidAdapterChoiceTemplate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activeViewOptOut");
    openapiFields.add("adBlockingOptOut");
    openapiFields.add("disableNewCookie");
    openapiFields.add("tagSetting");
    openapiFields.add("videoActiveViewOptOutTemplate");
    openapiFields.add("vpaidAdapterChoiceTemplate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SiteSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SiteSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SiteSettings is not found in the empty JSON string", SiteSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SiteSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SiteSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `tagSetting`
      if (jsonObj.get("tagSetting") != null && !jsonObj.get("tagSetting").isJsonNull()) {
        TagSetting.validateJsonElement(jsonObj.get("tagSetting"));
      }
      if ((jsonObj.get("vpaidAdapterChoiceTemplate") != null && !jsonObj.get("vpaidAdapterChoiceTemplate").isJsonNull()) && !jsonObj.get("vpaidAdapterChoiceTemplate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vpaidAdapterChoiceTemplate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vpaidAdapterChoiceTemplate").toString()));
      }
      // validate the optional field `vpaidAdapterChoiceTemplate`
      if (jsonObj.get("vpaidAdapterChoiceTemplate") != null && !jsonObj.get("vpaidAdapterChoiceTemplate").isJsonNull()) {
        VpaidAdapterChoiceTemplateEnum.validateJsonElement(jsonObj.get("vpaidAdapterChoiceTemplate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SiteSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SiteSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SiteSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SiteSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<SiteSettings>() {
           @Override
           public void write(JsonWriter out, SiteSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SiteSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SiteSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SiteSettings
   * @throws IOException if the JSON string is invalid with respect to SiteSettings
   */
  public static SiteSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SiteSettings.class);
  }

  /**
   * Convert an instance of SiteSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

