/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Campaign ad blocking settings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:12.851901-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AdBlockingConfiguration {
  public static final String SERIALIZED_NAME_CLICK_THROUGH_URL = "clickThroughUrl";
  @SerializedName(SERIALIZED_NAME_CLICK_THROUGH_URL)
  private String clickThroughUrl;

  public static final String SERIALIZED_NAME_CREATIVE_BUNDLE_ID = "creativeBundleId";
  @SerializedName(SERIALIZED_NAME_CREATIVE_BUNDLE_ID)
  private String creativeBundleId;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_OVERRIDE_CLICK_THROUGH_URL = "overrideClickThroughUrl";
  @SerializedName(SERIALIZED_NAME_OVERRIDE_CLICK_THROUGH_URL)
  private Boolean overrideClickThroughUrl;

  public AdBlockingConfiguration() {
  }

  public AdBlockingConfiguration clickThroughUrl(String clickThroughUrl) {
    this.clickThroughUrl = clickThroughUrl;
    return this;
  }

  /**
   * Click-through URL used by brand-neutral ads. This is a required field when overrideClickThroughUrl is set to true.
   * @return clickThroughUrl
   */
  @javax.annotation.Nullable
  public String getClickThroughUrl() {
    return clickThroughUrl;
  }

  public void setClickThroughUrl(String clickThroughUrl) {
    this.clickThroughUrl = clickThroughUrl;
  }


  public AdBlockingConfiguration creativeBundleId(String creativeBundleId) {
    this.creativeBundleId = creativeBundleId;
    return this;
  }

  /**
   * ID of a creative bundle to use for this campaign. If set, brand-neutral ads will select creatives from this bundle. Otherwise, a default transparent pixel will be used.
   * @return creativeBundleId
   */
  @javax.annotation.Nullable
  public String getCreativeBundleId() {
    return creativeBundleId;
  }

  public void setCreativeBundleId(String creativeBundleId) {
    this.creativeBundleId = creativeBundleId;
  }


  public AdBlockingConfiguration enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Whether this campaign has enabled ad blocking. When true, ad blocking is enabled for placements in the campaign, but this may be overridden by site and placement settings. When false, ad blocking is disabled for all placements under the campaign, regardless of site and placement settings.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public AdBlockingConfiguration overrideClickThroughUrl(Boolean overrideClickThroughUrl) {
    this.overrideClickThroughUrl = overrideClickThroughUrl;
    return this;
  }

  /**
   * Whether the brand-neutral ad&#39;s click-through URL comes from the campaign&#39;s creative bundle or the override URL. Must be set to true if ad blocking is enabled and no creative bundle is configured.
   * @return overrideClickThroughUrl
   */
  @javax.annotation.Nullable
  public Boolean getOverrideClickThroughUrl() {
    return overrideClickThroughUrl;
  }

  public void setOverrideClickThroughUrl(Boolean overrideClickThroughUrl) {
    this.overrideClickThroughUrl = overrideClickThroughUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdBlockingConfiguration adBlockingConfiguration = (AdBlockingConfiguration) o;
    return Objects.equals(this.clickThroughUrl, adBlockingConfiguration.clickThroughUrl) &&
        Objects.equals(this.creativeBundleId, adBlockingConfiguration.creativeBundleId) &&
        Objects.equals(this.enabled, adBlockingConfiguration.enabled) &&
        Objects.equals(this.overrideClickThroughUrl, adBlockingConfiguration.overrideClickThroughUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clickThroughUrl, creativeBundleId, enabled, overrideClickThroughUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdBlockingConfiguration {\n");
    sb.append("    clickThroughUrl: ").append(toIndentedString(clickThroughUrl)).append("\n");
    sb.append("    creativeBundleId: ").append(toIndentedString(creativeBundleId)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    overrideClickThroughUrl: ").append(toIndentedString(overrideClickThroughUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clickThroughUrl");
    openapiFields.add("creativeBundleId");
    openapiFields.add("enabled");
    openapiFields.add("overrideClickThroughUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdBlockingConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdBlockingConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdBlockingConfiguration is not found in the empty JSON string", AdBlockingConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdBlockingConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdBlockingConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clickThroughUrl") != null && !jsonObj.get("clickThroughUrl").isJsonNull()) && !jsonObj.get("clickThroughUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clickThroughUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clickThroughUrl").toString()));
      }
      if ((jsonObj.get("creativeBundleId") != null && !jsonObj.get("creativeBundleId").isJsonNull()) && !jsonObj.get("creativeBundleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creativeBundleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creativeBundleId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdBlockingConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdBlockingConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdBlockingConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdBlockingConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<AdBlockingConfiguration>() {
           @Override
           public void write(JsonWriter out, AdBlockingConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdBlockingConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdBlockingConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdBlockingConfiguration
   * @throws IOException if the JSON string is invalid with respect to AdBlockingConfiguration
   */
  public static AdBlockingConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdBlockingConfiguration.class);
  }

  /**
   * Convert an instance of AdBlockingConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

