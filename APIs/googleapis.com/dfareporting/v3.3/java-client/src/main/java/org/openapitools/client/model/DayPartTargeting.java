/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Day Part Targeting.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:12.851901-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DayPartTargeting {
  /**
   * Gets or Sets daysOfWeek
   */
  @JsonAdapter(DaysOfWeekEnum.Adapter.class)
  public enum DaysOfWeekEnum {
    MONDAY("MONDAY"),
    
    TUESDAY("TUESDAY"),
    
    WEDNESDAY("WEDNESDAY"),
    
    THURSDAY("THURSDAY"),
    
    FRIDAY("FRIDAY"),
    
    SATURDAY("SATURDAY"),
    
    SUNDAY("SUNDAY");

    private String value;

    DaysOfWeekEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DaysOfWeekEnum fromValue(String value) {
      for (DaysOfWeekEnum b : DaysOfWeekEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DaysOfWeekEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DaysOfWeekEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DaysOfWeekEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DaysOfWeekEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DaysOfWeekEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DAYS_OF_WEEK = "daysOfWeek";
  @SerializedName(SERIALIZED_NAME_DAYS_OF_WEEK)
  private List<DaysOfWeekEnum> daysOfWeek = new ArrayList<>();

  public static final String SERIALIZED_NAME_HOURS_OF_DAY = "hoursOfDay";
  @SerializedName(SERIALIZED_NAME_HOURS_OF_DAY)
  private List<Integer> hoursOfDay = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER_LOCAL_TIME = "userLocalTime";
  @SerializedName(SERIALIZED_NAME_USER_LOCAL_TIME)
  private Boolean userLocalTime;

  public DayPartTargeting() {
  }

  public DayPartTargeting daysOfWeek(List<DaysOfWeekEnum> daysOfWeek) {
    this.daysOfWeek = daysOfWeek;
    return this;
  }

  public DayPartTargeting addDaysOfWeekItem(DaysOfWeekEnum daysOfWeekItem) {
    if (this.daysOfWeek == null) {
      this.daysOfWeek = new ArrayList<>();
    }
    this.daysOfWeek.add(daysOfWeekItem);
    return this;
  }

  /**
   * Days of the week when the ad will serve. Acceptable values are: - \&quot;SUNDAY\&quot; - \&quot;MONDAY\&quot; - \&quot;TUESDAY\&quot; - \&quot;WEDNESDAY\&quot; - \&quot;THURSDAY\&quot; - \&quot;FRIDAY\&quot; - \&quot;SATURDAY\&quot; 
   * @return daysOfWeek
   */
  @javax.annotation.Nullable
  public List<DaysOfWeekEnum> getDaysOfWeek() {
    return daysOfWeek;
  }

  public void setDaysOfWeek(List<DaysOfWeekEnum> daysOfWeek) {
    this.daysOfWeek = daysOfWeek;
  }


  public DayPartTargeting hoursOfDay(List<Integer> hoursOfDay) {
    this.hoursOfDay = hoursOfDay;
    return this;
  }

  public DayPartTargeting addHoursOfDayItem(Integer hoursOfDayItem) {
    if (this.hoursOfDay == null) {
      this.hoursOfDay = new ArrayList<>();
    }
    this.hoursOfDay.add(hoursOfDayItem);
    return this;
  }

  /**
   * Hours of the day when the ad will serve, where 0 is midnight to 1 AM and 23 is 11 PM to midnight. Can be specified with days of week, in which case the ad would serve during these hours on the specified days. For example if Monday, Wednesday, Friday are the days of week specified and 9-10am, 3-5pm (hours 9, 15, and 16) is specified, the ad would serve Monday, Wednesdays, and Fridays at 9-10am and 3-5pm. Acceptable values are 0 to 23, inclusive.
   * @return hoursOfDay
   */
  @javax.annotation.Nullable
  public List<Integer> getHoursOfDay() {
    return hoursOfDay;
  }

  public void setHoursOfDay(List<Integer> hoursOfDay) {
    this.hoursOfDay = hoursOfDay;
  }


  public DayPartTargeting userLocalTime(Boolean userLocalTime) {
    this.userLocalTime = userLocalTime;
    return this;
  }

  /**
   * Whether or not to use the user&#39;s local time. If false, the America/New York time zone applies.
   * @return userLocalTime
   */
  @javax.annotation.Nullable
  public Boolean getUserLocalTime() {
    return userLocalTime;
  }

  public void setUserLocalTime(Boolean userLocalTime) {
    this.userLocalTime = userLocalTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DayPartTargeting dayPartTargeting = (DayPartTargeting) o;
    return Objects.equals(this.daysOfWeek, dayPartTargeting.daysOfWeek) &&
        Objects.equals(this.hoursOfDay, dayPartTargeting.hoursOfDay) &&
        Objects.equals(this.userLocalTime, dayPartTargeting.userLocalTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(daysOfWeek, hoursOfDay, userLocalTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DayPartTargeting {\n");
    sb.append("    daysOfWeek: ").append(toIndentedString(daysOfWeek)).append("\n");
    sb.append("    hoursOfDay: ").append(toIndentedString(hoursOfDay)).append("\n");
    sb.append("    userLocalTime: ").append(toIndentedString(userLocalTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("daysOfWeek");
    openapiFields.add("hoursOfDay");
    openapiFields.add("userLocalTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DayPartTargeting
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DayPartTargeting.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DayPartTargeting is not found in the empty JSON string", DayPartTargeting.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DayPartTargeting.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DayPartTargeting` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("daysOfWeek") != null && !jsonObj.get("daysOfWeek").isJsonNull() && !jsonObj.get("daysOfWeek").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `daysOfWeek` to be an array in the JSON string but got `%s`", jsonObj.get("daysOfWeek").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("hoursOfDay") != null && !jsonObj.get("hoursOfDay").isJsonNull() && !jsonObj.get("hoursOfDay").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hoursOfDay` to be an array in the JSON string but got `%s`", jsonObj.get("hoursOfDay").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DayPartTargeting.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DayPartTargeting' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DayPartTargeting> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DayPartTargeting.class));

       return (TypeAdapter<T>) new TypeAdapter<DayPartTargeting>() {
           @Override
           public void write(JsonWriter out, DayPartTargeting value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DayPartTargeting read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DayPartTargeting given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DayPartTargeting
   * @throws IOException if the JSON string is invalid with respect to DayPartTargeting
   */
  public static DayPartTargeting fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DayPartTargeting.class);
  }

  /**
   * Convert an instance of DayPartTargeting to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

