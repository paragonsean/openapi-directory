/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DimensionValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains properties of a Floodlight activity group.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:12.851901-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FloodlightActivityGroup {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_ADVERTISER_ID = "advertiserId";
  @SerializedName(SERIALIZED_NAME_ADVERTISER_ID)
  private String advertiserId;

  public static final String SERIALIZED_NAME_ADVERTISER_ID_DIMENSION_VALUE = "advertiserIdDimensionValue";
  @SerializedName(SERIALIZED_NAME_ADVERTISER_ID_DIMENSION_VALUE)
  private DimensionValue advertiserIdDimensionValue;

  public static final String SERIALIZED_NAME_FLOODLIGHT_CONFIGURATION_ID = "floodlightConfigurationId";
  @SerializedName(SERIALIZED_NAME_FLOODLIGHT_CONFIGURATION_ID)
  private String floodlightConfigurationId;

  public static final String SERIALIZED_NAME_FLOODLIGHT_CONFIGURATION_ID_DIMENSION_VALUE = "floodlightConfigurationIdDimensionValue";
  @SerializedName(SERIALIZED_NAME_FLOODLIGHT_CONFIGURATION_ID_DIMENSION_VALUE)
  private DimensionValue floodlightConfigurationIdDimensionValue;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ID_DIMENSION_VALUE = "idDimensionValue";
  @SerializedName(SERIALIZED_NAME_ID_DIMENSION_VALUE)
  private DimensionValue idDimensionValue;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SUBACCOUNT_ID = "subaccountId";
  @SerializedName(SERIALIZED_NAME_SUBACCOUNT_ID)
  private String subaccountId;

  public static final String SERIALIZED_NAME_TAG_STRING = "tagString";
  @SerializedName(SERIALIZED_NAME_TAG_STRING)
  private String tagString;

  /**
   * Type of the floodlight activity group. This is a required field that is read-only after insertion.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    COUNTER("COUNTER"),
    
    SALE("SALE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public FloodlightActivityGroup() {
  }

  public FloodlightActivityGroup accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Account ID of this floodlight activity group. This is a read-only field that can be left blank.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public FloodlightActivityGroup advertiserId(String advertiserId) {
    this.advertiserId = advertiserId;
    return this;
  }

  /**
   * Advertiser ID of this floodlight activity group. If this field is left blank, the value will be copied over either from the floodlight configuration&#39;s advertiser or from the existing activity group&#39;s advertiser.
   * @return advertiserId
   */
  @javax.annotation.Nullable
  public String getAdvertiserId() {
    return advertiserId;
  }

  public void setAdvertiserId(String advertiserId) {
    this.advertiserId = advertiserId;
  }


  public FloodlightActivityGroup advertiserIdDimensionValue(DimensionValue advertiserIdDimensionValue) {
    this.advertiserIdDimensionValue = advertiserIdDimensionValue;
    return this;
  }

  /**
   * Get advertiserIdDimensionValue
   * @return advertiserIdDimensionValue
   */
  @javax.annotation.Nullable
  public DimensionValue getAdvertiserIdDimensionValue() {
    return advertiserIdDimensionValue;
  }

  public void setAdvertiserIdDimensionValue(DimensionValue advertiserIdDimensionValue) {
    this.advertiserIdDimensionValue = advertiserIdDimensionValue;
  }


  public FloodlightActivityGroup floodlightConfigurationId(String floodlightConfigurationId) {
    this.floodlightConfigurationId = floodlightConfigurationId;
    return this;
  }

  /**
   * Floodlight configuration ID of this floodlight activity group. This is a required field.
   * @return floodlightConfigurationId
   */
  @javax.annotation.Nullable
  public String getFloodlightConfigurationId() {
    return floodlightConfigurationId;
  }

  public void setFloodlightConfigurationId(String floodlightConfigurationId) {
    this.floodlightConfigurationId = floodlightConfigurationId;
  }


  public FloodlightActivityGroup floodlightConfigurationIdDimensionValue(DimensionValue floodlightConfigurationIdDimensionValue) {
    this.floodlightConfigurationIdDimensionValue = floodlightConfigurationIdDimensionValue;
    return this;
  }

  /**
   * Get floodlightConfigurationIdDimensionValue
   * @return floodlightConfigurationIdDimensionValue
   */
  @javax.annotation.Nullable
  public DimensionValue getFloodlightConfigurationIdDimensionValue() {
    return floodlightConfigurationIdDimensionValue;
  }

  public void setFloodlightConfigurationIdDimensionValue(DimensionValue floodlightConfigurationIdDimensionValue) {
    this.floodlightConfigurationIdDimensionValue = floodlightConfigurationIdDimensionValue;
  }


  public FloodlightActivityGroup id(String id) {
    this.id = id;
    return this;
  }

  /**
   * ID of this floodlight activity group. This is a read-only, auto-generated field.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public FloodlightActivityGroup idDimensionValue(DimensionValue idDimensionValue) {
    this.idDimensionValue = idDimensionValue;
    return this;
  }

  /**
   * Get idDimensionValue
   * @return idDimensionValue
   */
  @javax.annotation.Nullable
  public DimensionValue getIdDimensionValue() {
    return idDimensionValue;
  }

  public void setIdDimensionValue(DimensionValue idDimensionValue) {
    this.idDimensionValue = idDimensionValue;
  }


  public FloodlightActivityGroup kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string \&quot;dfareporting#floodlightActivityGroup\&quot;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public FloodlightActivityGroup name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of this floodlight activity group. This is a required field. Must be less than 65 characters long and cannot contain quotes.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public FloodlightActivityGroup subaccountId(String subaccountId) {
    this.subaccountId = subaccountId;
    return this;
  }

  /**
   * Subaccount ID of this floodlight activity group. This is a read-only field that can be left blank.
   * @return subaccountId
   */
  @javax.annotation.Nullable
  public String getSubaccountId() {
    return subaccountId;
  }

  public void setSubaccountId(String subaccountId) {
    this.subaccountId = subaccountId;
  }


  public FloodlightActivityGroup tagString(String tagString) {
    this.tagString = tagString;
    return this;
  }

  /**
   * Value of the type&#x3D; parameter in the floodlight tag, which the ad servers use to identify the activity group that the activity belongs to. This is optional: if empty, a new tag string will be generated for you. This string must be 1 to 8 characters long, with valid characters being a-z0-9[ _ ]. This tag string must also be unique among activity groups of the same floodlight configuration. This field is read-only after insertion.
   * @return tagString
   */
  @javax.annotation.Nullable
  public String getTagString() {
    return tagString;
  }

  public void setTagString(String tagString) {
    this.tagString = tagString;
  }


  public FloodlightActivityGroup type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Type of the floodlight activity group. This is a required field that is read-only after insertion.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FloodlightActivityGroup floodlightActivityGroup = (FloodlightActivityGroup) o;
    return Objects.equals(this.accountId, floodlightActivityGroup.accountId) &&
        Objects.equals(this.advertiserId, floodlightActivityGroup.advertiserId) &&
        Objects.equals(this.advertiserIdDimensionValue, floodlightActivityGroup.advertiserIdDimensionValue) &&
        Objects.equals(this.floodlightConfigurationId, floodlightActivityGroup.floodlightConfigurationId) &&
        Objects.equals(this.floodlightConfigurationIdDimensionValue, floodlightActivityGroup.floodlightConfigurationIdDimensionValue) &&
        Objects.equals(this.id, floodlightActivityGroup.id) &&
        Objects.equals(this.idDimensionValue, floodlightActivityGroup.idDimensionValue) &&
        Objects.equals(this.kind, floodlightActivityGroup.kind) &&
        Objects.equals(this.name, floodlightActivityGroup.name) &&
        Objects.equals(this.subaccountId, floodlightActivityGroup.subaccountId) &&
        Objects.equals(this.tagString, floodlightActivityGroup.tagString) &&
        Objects.equals(this.type, floodlightActivityGroup.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, advertiserId, advertiserIdDimensionValue, floodlightConfigurationId, floodlightConfigurationIdDimensionValue, id, idDimensionValue, kind, name, subaccountId, tagString, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FloodlightActivityGroup {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    advertiserId: ").append(toIndentedString(advertiserId)).append("\n");
    sb.append("    advertiserIdDimensionValue: ").append(toIndentedString(advertiserIdDimensionValue)).append("\n");
    sb.append("    floodlightConfigurationId: ").append(toIndentedString(floodlightConfigurationId)).append("\n");
    sb.append("    floodlightConfigurationIdDimensionValue: ").append(toIndentedString(floodlightConfigurationIdDimensionValue)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    idDimensionValue: ").append(toIndentedString(idDimensionValue)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    subaccountId: ").append(toIndentedString(subaccountId)).append("\n");
    sb.append("    tagString: ").append(toIndentedString(tagString)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("advertiserId");
    openapiFields.add("advertiserIdDimensionValue");
    openapiFields.add("floodlightConfigurationId");
    openapiFields.add("floodlightConfigurationIdDimensionValue");
    openapiFields.add("id");
    openapiFields.add("idDimensionValue");
    openapiFields.add("kind");
    openapiFields.add("name");
    openapiFields.add("subaccountId");
    openapiFields.add("tagString");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FloodlightActivityGroup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FloodlightActivityGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FloodlightActivityGroup is not found in the empty JSON string", FloodlightActivityGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FloodlightActivityGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FloodlightActivityGroup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if ((jsonObj.get("advertiserId") != null && !jsonObj.get("advertiserId").isJsonNull()) && !jsonObj.get("advertiserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advertiserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advertiserId").toString()));
      }
      // validate the optional field `advertiserIdDimensionValue`
      if (jsonObj.get("advertiserIdDimensionValue") != null && !jsonObj.get("advertiserIdDimensionValue").isJsonNull()) {
        DimensionValue.validateJsonElement(jsonObj.get("advertiserIdDimensionValue"));
      }
      if ((jsonObj.get("floodlightConfigurationId") != null && !jsonObj.get("floodlightConfigurationId").isJsonNull()) && !jsonObj.get("floodlightConfigurationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `floodlightConfigurationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("floodlightConfigurationId").toString()));
      }
      // validate the optional field `floodlightConfigurationIdDimensionValue`
      if (jsonObj.get("floodlightConfigurationIdDimensionValue") != null && !jsonObj.get("floodlightConfigurationIdDimensionValue").isJsonNull()) {
        DimensionValue.validateJsonElement(jsonObj.get("floodlightConfigurationIdDimensionValue"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `idDimensionValue`
      if (jsonObj.get("idDimensionValue") != null && !jsonObj.get("idDimensionValue").isJsonNull()) {
        DimensionValue.validateJsonElement(jsonObj.get("idDimensionValue"));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("subaccountId") != null && !jsonObj.get("subaccountId").isJsonNull()) && !jsonObj.get("subaccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subaccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subaccountId").toString()));
      }
      if ((jsonObj.get("tagString") != null && !jsonObj.get("tagString").isJsonNull()) && !jsonObj.get("tagString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tagString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tagString").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FloodlightActivityGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FloodlightActivityGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FloodlightActivityGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FloodlightActivityGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<FloodlightActivityGroup>() {
           @Override
           public void write(JsonWriter out, FloodlightActivityGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FloodlightActivityGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FloodlightActivityGroup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FloodlightActivityGroup
   * @throws IOException if the JSON string is invalid with respect to FloodlightActivityGroup
   */
  public static FloodlightActivityGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FloodlightActivityGroup.class);
  }

  /**
   * Convert an instance of FloodlightActivityGroup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

