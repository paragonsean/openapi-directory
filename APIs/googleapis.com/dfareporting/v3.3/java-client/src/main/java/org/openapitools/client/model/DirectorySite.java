/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DimensionValue;
import org.openapitools.client.model.DirectorySiteSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DirectorySites contains properties of a website from the Site Directory. Sites need to be added to an account via the Sites resource before they can be assigned to a placement.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:12.851901-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DirectorySite {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ID_DIMENSION_VALUE = "idDimensionValue";
  @SerializedName(SERIALIZED_NAME_ID_DIMENSION_VALUE)
  private DimensionValue idDimensionValue;

  /**
   * Gets or Sets inpageTagFormats
   */
  @JsonAdapter(InpageTagFormatsEnum.Adapter.class)
  public enum InpageTagFormatsEnum {
    STANDARD("STANDARD"),
    
    IFRAME_JAVASCRIPT_INPAGE("IFRAME_JAVASCRIPT_INPAGE"),
    
    INTERNAL_REDIRECT_INPAGE("INTERNAL_REDIRECT_INPAGE"),
    
    JAVASCRIPT_INPAGE("JAVASCRIPT_INPAGE");

    private String value;

    InpageTagFormatsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InpageTagFormatsEnum fromValue(String value) {
      for (InpageTagFormatsEnum b : InpageTagFormatsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InpageTagFormatsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InpageTagFormatsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InpageTagFormatsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InpageTagFormatsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InpageTagFormatsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INPAGE_TAG_FORMATS = "inpageTagFormats";
  @SerializedName(SERIALIZED_NAME_INPAGE_TAG_FORMATS)
  private List<InpageTagFormatsEnum> inpageTagFormats = new ArrayList<>();

  /**
   * Gets or Sets interstitialTagFormats
   */
  @JsonAdapter(InterstitialTagFormatsEnum.Adapter.class)
  public enum InterstitialTagFormatsEnum {
    IFRAME_JAVASCRIPT_INTERSTITIAL("IFRAME_JAVASCRIPT_INTERSTITIAL"),
    
    INTERNAL_REDIRECT_INTERSTITIAL("INTERNAL_REDIRECT_INTERSTITIAL"),
    
    JAVASCRIPT_INTERSTITIAL("JAVASCRIPT_INTERSTITIAL");

    private String value;

    InterstitialTagFormatsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InterstitialTagFormatsEnum fromValue(String value) {
      for (InterstitialTagFormatsEnum b : InterstitialTagFormatsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InterstitialTagFormatsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InterstitialTagFormatsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InterstitialTagFormatsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InterstitialTagFormatsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InterstitialTagFormatsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INTERSTITIAL_TAG_FORMATS = "interstitialTagFormats";
  @SerializedName(SERIALIZED_NAME_INTERSTITIAL_TAG_FORMATS)
  private List<InterstitialTagFormatsEnum> interstitialTagFormats = new ArrayList<>();

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SETTINGS = "settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private DirectorySiteSettings settings;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public DirectorySite() {
  }

  public DirectorySite active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Whether this directory site is active.
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public DirectorySite id(String id) {
    this.id = id;
    return this;
  }

  /**
   * ID of this directory site. This is a read-only, auto-generated field.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public DirectorySite idDimensionValue(DimensionValue idDimensionValue) {
    this.idDimensionValue = idDimensionValue;
    return this;
  }

  /**
   * Get idDimensionValue
   * @return idDimensionValue
   */
  @javax.annotation.Nullable
  public DimensionValue getIdDimensionValue() {
    return idDimensionValue;
  }

  public void setIdDimensionValue(DimensionValue idDimensionValue) {
    this.idDimensionValue = idDimensionValue;
  }


  public DirectorySite inpageTagFormats(List<InpageTagFormatsEnum> inpageTagFormats) {
    this.inpageTagFormats = inpageTagFormats;
    return this;
  }

  public DirectorySite addInpageTagFormatsItem(InpageTagFormatsEnum inpageTagFormatsItem) {
    if (this.inpageTagFormats == null) {
      this.inpageTagFormats = new ArrayList<>();
    }
    this.inpageTagFormats.add(inpageTagFormatsItem);
    return this;
  }

  /**
   * Tag types for regular placements. Acceptable values are: - \&quot;STANDARD\&quot; - \&quot;IFRAME_JAVASCRIPT_INPAGE\&quot; - \&quot;INTERNAL_REDIRECT_INPAGE\&quot; - \&quot;JAVASCRIPT_INPAGE\&quot; 
   * @return inpageTagFormats
   */
  @javax.annotation.Nullable
  public List<InpageTagFormatsEnum> getInpageTagFormats() {
    return inpageTagFormats;
  }

  public void setInpageTagFormats(List<InpageTagFormatsEnum> inpageTagFormats) {
    this.inpageTagFormats = inpageTagFormats;
  }


  public DirectorySite interstitialTagFormats(List<InterstitialTagFormatsEnum> interstitialTagFormats) {
    this.interstitialTagFormats = interstitialTagFormats;
    return this;
  }

  public DirectorySite addInterstitialTagFormatsItem(InterstitialTagFormatsEnum interstitialTagFormatsItem) {
    if (this.interstitialTagFormats == null) {
      this.interstitialTagFormats = new ArrayList<>();
    }
    this.interstitialTagFormats.add(interstitialTagFormatsItem);
    return this;
  }

  /**
   * Tag types for interstitial placements. Acceptable values are: - \&quot;IFRAME_JAVASCRIPT_INTERSTITIAL\&quot; - \&quot;INTERNAL_REDIRECT_INTERSTITIAL\&quot; - \&quot;JAVASCRIPT_INTERSTITIAL\&quot; 
   * @return interstitialTagFormats
   */
  @javax.annotation.Nullable
  public List<InterstitialTagFormatsEnum> getInterstitialTagFormats() {
    return interstitialTagFormats;
  }

  public void setInterstitialTagFormats(List<InterstitialTagFormatsEnum> interstitialTagFormats) {
    this.interstitialTagFormats = interstitialTagFormats;
  }


  public DirectorySite kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string \&quot;dfareporting#directorySite\&quot;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public DirectorySite name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of this directory site.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DirectorySite settings(DirectorySiteSettings settings) {
    this.settings = settings;
    return this;
  }

  /**
   * Get settings
   * @return settings
   */
  @javax.annotation.Nullable
  public DirectorySiteSettings getSettings() {
    return settings;
  }

  public void setSettings(DirectorySiteSettings settings) {
    this.settings = settings;
  }


  public DirectorySite url(String url) {
    this.url = url;
    return this;
  }

  /**
   * URL of this directory site.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DirectorySite directorySite = (DirectorySite) o;
    return Objects.equals(this.active, directorySite.active) &&
        Objects.equals(this.id, directorySite.id) &&
        Objects.equals(this.idDimensionValue, directorySite.idDimensionValue) &&
        Objects.equals(this.inpageTagFormats, directorySite.inpageTagFormats) &&
        Objects.equals(this.interstitialTagFormats, directorySite.interstitialTagFormats) &&
        Objects.equals(this.kind, directorySite.kind) &&
        Objects.equals(this.name, directorySite.name) &&
        Objects.equals(this.settings, directorySite.settings) &&
        Objects.equals(this.url, directorySite.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, id, idDimensionValue, inpageTagFormats, interstitialTagFormats, kind, name, settings, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DirectorySite {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    idDimensionValue: ").append(toIndentedString(idDimensionValue)).append("\n");
    sb.append("    inpageTagFormats: ").append(toIndentedString(inpageTagFormats)).append("\n");
    sb.append("    interstitialTagFormats: ").append(toIndentedString(interstitialTagFormats)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("id");
    openapiFields.add("idDimensionValue");
    openapiFields.add("inpageTagFormats");
    openapiFields.add("interstitialTagFormats");
    openapiFields.add("kind");
    openapiFields.add("name");
    openapiFields.add("settings");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DirectorySite
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DirectorySite.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DirectorySite is not found in the empty JSON string", DirectorySite.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DirectorySite.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DirectorySite` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `idDimensionValue`
      if (jsonObj.get("idDimensionValue") != null && !jsonObj.get("idDimensionValue").isJsonNull()) {
        DimensionValue.validateJsonElement(jsonObj.get("idDimensionValue"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("inpageTagFormats") != null && !jsonObj.get("inpageTagFormats").isJsonNull() && !jsonObj.get("inpageTagFormats").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `inpageTagFormats` to be an array in the JSON string but got `%s`", jsonObj.get("inpageTagFormats").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("interstitialTagFormats") != null && !jsonObj.get("interstitialTagFormats").isJsonNull() && !jsonObj.get("interstitialTagFormats").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `interstitialTagFormats` to be an array in the JSON string but got `%s`", jsonObj.get("interstitialTagFormats").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `settings`
      if (jsonObj.get("settings") != null && !jsonObj.get("settings").isJsonNull()) {
        DirectorySiteSettings.validateJsonElement(jsonObj.get("settings"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DirectorySite.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DirectorySite' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DirectorySite> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DirectorySite.class));

       return (TypeAdapter<T>) new TypeAdapter<DirectorySite>() {
           @Override
           public void write(JsonWriter out, DirectorySite value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DirectorySite read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DirectorySite given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DirectorySite
   * @throws IOException if the JSON string is invalid with respect to DirectorySite
   */
  public static DirectorySite fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DirectorySite.class);
  }

  /**
   * Convert an instance of DirectorySite to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

