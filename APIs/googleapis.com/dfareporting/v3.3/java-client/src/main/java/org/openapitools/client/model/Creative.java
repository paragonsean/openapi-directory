/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ClickTag;
import org.openapitools.client.model.CreativeAsset;
import org.openapitools.client.model.CreativeAssetSelection;
import org.openapitools.client.model.CreativeClickThroughUrl;
import org.openapitools.client.model.CreativeCustomEvent;
import org.openapitools.client.model.CreativeFieldAssignment;
import org.openapitools.client.model.DimensionValue;
import org.openapitools.client.model.FsCommand;
import org.openapitools.client.model.LastModifiedInfo;
import org.openapitools.client.model.Size;
import org.openapitools.client.model.TargetWindow;
import org.openapitools.client.model.ThirdPartyTrackingUrl;
import org.openapitools.client.model.UniversalAdId;
import org.openapitools.client.model.VideoOffset;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains properties of a Creative.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:12.851901-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Creative {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_AD_PARAMETERS = "adParameters";
  @SerializedName(SERIALIZED_NAME_AD_PARAMETERS)
  private String adParameters;

  public static final String SERIALIZED_NAME_AD_TAG_KEYS = "adTagKeys";
  @SerializedName(SERIALIZED_NAME_AD_TAG_KEYS)
  private List<String> adTagKeys = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADDITIONAL_SIZES = "additionalSizes";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_SIZES)
  private List<Size> additionalSizes = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADVERTISER_ID = "advertiserId";
  @SerializedName(SERIALIZED_NAME_ADVERTISER_ID)
  private String advertiserId;

  public static final String SERIALIZED_NAME_ALLOW_SCRIPT_ACCESS = "allowScriptAccess";
  @SerializedName(SERIALIZED_NAME_ALLOW_SCRIPT_ACCESS)
  private Boolean allowScriptAccess;

  public static final String SERIALIZED_NAME_ARCHIVED = "archived";
  @SerializedName(SERIALIZED_NAME_ARCHIVED)
  private Boolean archived;

  /**
   * Type of artwork used for the creative. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.
   */
  @JsonAdapter(ArtworkTypeEnum.Adapter.class)
  public enum ArtworkTypeEnum {
    FLASH("ARTWORK_TYPE_FLASH"),
    
    HTML5("ARTWORK_TYPE_HTML5"),
    
    MIXED("ARTWORK_TYPE_MIXED"),
    
    IMAGE("ARTWORK_TYPE_IMAGE");

    private String value;

    ArtworkTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ArtworkTypeEnum fromValue(String value) {
      for (ArtworkTypeEnum b : ArtworkTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ArtworkTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ArtworkTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ArtworkTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ArtworkTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ArtworkTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ARTWORK_TYPE = "artworkType";
  @SerializedName(SERIALIZED_NAME_ARTWORK_TYPE)
  private ArtworkTypeEnum artworkType;

  /**
   * Source application where creative was authored. Presently, only DBM authored creatives will have this field set. Applicable to all creative types.
   */
  @JsonAdapter(AuthoringSourceEnum.Adapter.class)
  public enum AuthoringSourceEnum {
    DCM("CREATIVE_AUTHORING_SOURCE_DCM"),
    
    DBM("CREATIVE_AUTHORING_SOURCE_DBM"),
    
    STUDIO("CREATIVE_AUTHORING_SOURCE_STUDIO"),
    
    GWD("CREATIVE_AUTHORING_SOURCE_GWD");

    private String value;

    AuthoringSourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthoringSourceEnum fromValue(String value) {
      for (AuthoringSourceEnum b : AuthoringSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthoringSourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthoringSourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthoringSourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthoringSourceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthoringSourceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTHORING_SOURCE = "authoringSource";
  @SerializedName(SERIALIZED_NAME_AUTHORING_SOURCE)
  private AuthoringSourceEnum authoringSource;

  /**
   * Authoring tool for HTML5 banner creatives. This is a read-only field. Applicable to the following creative types: HTML5_BANNER.
   */
  @JsonAdapter(AuthoringToolEnum.Adapter.class)
  public enum AuthoringToolEnum {
    NINJA("NINJA"),
    
    SWIFFY("SWIFFY");

    private String value;

    AuthoringToolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthoringToolEnum fromValue(String value) {
      for (AuthoringToolEnum b : AuthoringToolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthoringToolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthoringToolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthoringToolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthoringToolEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthoringToolEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTHORING_TOOL = "authoringTool";
  @SerializedName(SERIALIZED_NAME_AUTHORING_TOOL)
  private AuthoringToolEnum authoringTool;

  public static final String SERIALIZED_NAME_AUTO_ADVANCE_IMAGES = "autoAdvanceImages";
  @SerializedName(SERIALIZED_NAME_AUTO_ADVANCE_IMAGES)
  private Boolean autoAdvanceImages;

  public static final String SERIALIZED_NAME_BACKGROUND_COLOR = "backgroundColor";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_COLOR)
  private String backgroundColor;

  public static final String SERIALIZED_NAME_BACKUP_IMAGE_CLICK_THROUGH_URL = "backupImageClickThroughUrl";
  @SerializedName(SERIALIZED_NAME_BACKUP_IMAGE_CLICK_THROUGH_URL)
  private CreativeClickThroughUrl backupImageClickThroughUrl;

  /**
   * Gets or Sets backupImageFeatures
   */
  @JsonAdapter(BackupImageFeaturesEnum.Adapter.class)
  public enum BackupImageFeaturesEnum {
    CSS_FONT_FACE("CSS_FONT_FACE"),
    
    CSS_BACKGROUND_SIZE("CSS_BACKGROUND_SIZE"),
    
    CSS_BORDER_IMAGE("CSS_BORDER_IMAGE"),
    
    CSS_BORDER_RADIUS("CSS_BORDER_RADIUS"),
    
    CSS_BOX_SHADOW("CSS_BOX_SHADOW"),
    
    CSS_FLEX_BOX("CSS_FLEX_BOX"),
    
    CSS_HSLA("CSS_HSLA"),
    
    CSS_MULTIPLE_BGS("CSS_MULTIPLE_BGS"),
    
    CSS_OPACITY("CSS_OPACITY"),
    
    CSS_RGBA("CSS_RGBA"),
    
    CSS_TEXT_SHADOW("CSS_TEXT_SHADOW"),
    
    CSS_ANIMATIONS("CSS_ANIMATIONS"),
    
    CSS_COLUMNS("CSS_COLUMNS"),
    
    CSS_GENERATED_CONTENT("CSS_GENERATED_CONTENT"),
    
    CSS_GRADIENTS("CSS_GRADIENTS"),
    
    CSS_REFLECTIONS("CSS_REFLECTIONS"),
    
    CSS_TRANSFORMS("CSS_TRANSFORMS"),
    
    CSS_TRANSFORMS3_D("CSS_TRANSFORMS3D"),
    
    CSS_TRANSITIONS("CSS_TRANSITIONS"),
    
    APPLICATION_CACHE("APPLICATION_CACHE"),
    
    CANVAS("CANVAS"),
    
    CANVAS_TEXT("CANVAS_TEXT"),
    
    DRAG_AND_DROP("DRAG_AND_DROP"),
    
    HASH_CHANGE("HASH_CHANGE"),
    
    HISTORY("HISTORY"),
    
    AUDIO("AUDIO"),
    
    VIDEO("VIDEO"),
    
    INDEXED_DB("INDEXED_DB"),
    
    INPUT_ATTR_AUTOCOMPLETE("INPUT_ATTR_AUTOCOMPLETE"),
    
    INPUT_ATTR_AUTOFOCUS("INPUT_ATTR_AUTOFOCUS"),
    
    INPUT_ATTR_LIST("INPUT_ATTR_LIST"),
    
    INPUT_ATTR_PLACEHOLDER("INPUT_ATTR_PLACEHOLDER"),
    
    INPUT_ATTR_MAX("INPUT_ATTR_MAX"),
    
    INPUT_ATTR_MIN("INPUT_ATTR_MIN"),
    
    INPUT_ATTR_MULTIPLE("INPUT_ATTR_MULTIPLE"),
    
    INPUT_ATTR_PATTERN("INPUT_ATTR_PATTERN"),
    
    INPUT_ATTR_REQUIRED("INPUT_ATTR_REQUIRED"),
    
    INPUT_ATTR_STEP("INPUT_ATTR_STEP"),
    
    INPUT_TYPE_SEARCH("INPUT_TYPE_SEARCH"),
    
    INPUT_TYPE_TEL("INPUT_TYPE_TEL"),
    
    INPUT_TYPE_URL("INPUT_TYPE_URL"),
    
    INPUT_TYPE_EMAIL("INPUT_TYPE_EMAIL"),
    
    INPUT_TYPE_DATETIME("INPUT_TYPE_DATETIME"),
    
    INPUT_TYPE_DATE("INPUT_TYPE_DATE"),
    
    INPUT_TYPE_MONTH("INPUT_TYPE_MONTH"),
    
    INPUT_TYPE_WEEK("INPUT_TYPE_WEEK"),
    
    INPUT_TYPE_TIME("INPUT_TYPE_TIME"),
    
    INPUT_TYPE_DATETIME_LOCAL("INPUT_TYPE_DATETIME_LOCAL"),
    
    INPUT_TYPE_NUMBER("INPUT_TYPE_NUMBER"),
    
    INPUT_TYPE_RANGE("INPUT_TYPE_RANGE"),
    
    INPUT_TYPE_COLOR("INPUT_TYPE_COLOR"),
    
    LOCAL_STORAGE("LOCAL_STORAGE"),
    
    POST_MESSAGE("POST_MESSAGE"),
    
    SESSION_STORAGE("SESSION_STORAGE"),
    
    WEB_SOCKETS("WEB_SOCKETS"),
    
    WEB_SQL_DATABASE("WEB_SQL_DATABASE"),
    
    WEB_WORKERS("WEB_WORKERS"),
    
    GEO_LOCATION("GEO_LOCATION"),
    
    INLINE_SVG("INLINE_SVG"),
    
    SMIL("SMIL"),
    
    SVG_HREF("SVG_HREF"),
    
    SVG_CLIP_PATHS("SVG_CLIP_PATHS"),
    
    TOUCH("TOUCH"),
    
    WEBGL("WEBGL"),
    
    SVG_FILTERS("SVG_FILTERS"),
    
    SVG_FE_IMAGE("SVG_FE_IMAGE");

    private String value;

    BackupImageFeaturesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BackupImageFeaturesEnum fromValue(String value) {
      for (BackupImageFeaturesEnum b : BackupImageFeaturesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BackupImageFeaturesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BackupImageFeaturesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BackupImageFeaturesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BackupImageFeaturesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BackupImageFeaturesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BACKUP_IMAGE_FEATURES = "backupImageFeatures";
  @SerializedName(SERIALIZED_NAME_BACKUP_IMAGE_FEATURES)
  private List<BackupImageFeaturesEnum> backupImageFeatures = new ArrayList<>();

  public static final String SERIALIZED_NAME_BACKUP_IMAGE_REPORTING_LABEL = "backupImageReportingLabel";
  @SerializedName(SERIALIZED_NAME_BACKUP_IMAGE_REPORTING_LABEL)
  private String backupImageReportingLabel;

  public static final String SERIALIZED_NAME_BACKUP_IMAGE_TARGET_WINDOW = "backupImageTargetWindow";
  @SerializedName(SERIALIZED_NAME_BACKUP_IMAGE_TARGET_WINDOW)
  private TargetWindow backupImageTargetWindow;

  public static final String SERIALIZED_NAME_CLICK_TAGS = "clickTags";
  @SerializedName(SERIALIZED_NAME_CLICK_TAGS)
  private List<ClickTag> clickTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMMERCIAL_ID = "commercialId";
  @SerializedName(SERIALIZED_NAME_COMMERCIAL_ID)
  private String commercialId;

  public static final String SERIALIZED_NAME_COMPANION_CREATIVES = "companionCreatives";
  @SerializedName(SERIALIZED_NAME_COMPANION_CREATIVES)
  private List<String> companionCreatives = new ArrayList<>();

  /**
   * Gets or Sets compatibility
   */
  @JsonAdapter(CompatibilityEnum.Adapter.class)
  public enum CompatibilityEnum {
    DISPLAY("DISPLAY"),
    
    DISPLAY_INTERSTITIAL("DISPLAY_INTERSTITIAL"),
    
    APP("APP"),
    
    APP_INTERSTITIAL("APP_INTERSTITIAL"),
    
    IN_STREAM_VIDEO("IN_STREAM_VIDEO"),
    
    IN_STREAM_AUDIO("IN_STREAM_AUDIO");

    private String value;

    CompatibilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CompatibilityEnum fromValue(String value) {
      for (CompatibilityEnum b : CompatibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CompatibilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CompatibilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CompatibilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CompatibilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CompatibilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMPATIBILITY = "compatibility";
  @SerializedName(SERIALIZED_NAME_COMPATIBILITY)
  private List<CompatibilityEnum> compatibility = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONVERT_FLASH_TO_HTML5 = "convertFlashToHtml5";
  @SerializedName(SERIALIZED_NAME_CONVERT_FLASH_TO_HTML5)
  private Boolean convertFlashToHtml5;

  public static final String SERIALIZED_NAME_COUNTER_CUSTOM_EVENTS = "counterCustomEvents";
  @SerializedName(SERIALIZED_NAME_COUNTER_CUSTOM_EVENTS)
  private List<CreativeCustomEvent> counterCustomEvents = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATIVE_ASSET_SELECTION = "creativeAssetSelection";
  @SerializedName(SERIALIZED_NAME_CREATIVE_ASSET_SELECTION)
  private CreativeAssetSelection creativeAssetSelection;

  public static final String SERIALIZED_NAME_CREATIVE_ASSETS = "creativeAssets";
  @SerializedName(SERIALIZED_NAME_CREATIVE_ASSETS)
  private List<CreativeAsset> creativeAssets = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATIVE_FIELD_ASSIGNMENTS = "creativeFieldAssignments";
  @SerializedName(SERIALIZED_NAME_CREATIVE_FIELD_ASSIGNMENTS)
  private List<CreativeFieldAssignment> creativeFieldAssignments = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOM_KEY_VALUES = "customKeyValues";
  @SerializedName(SERIALIZED_NAME_CUSTOM_KEY_VALUES)
  private List<String> customKeyValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_DYNAMIC_ASSET_SELECTION = "dynamicAssetSelection";
  @SerializedName(SERIALIZED_NAME_DYNAMIC_ASSET_SELECTION)
  private Boolean dynamicAssetSelection;

  public static final String SERIALIZED_NAME_EXIT_CUSTOM_EVENTS = "exitCustomEvents";
  @SerializedName(SERIALIZED_NAME_EXIT_CUSTOM_EVENTS)
  private List<CreativeCustomEvent> exitCustomEvents = new ArrayList<>();

  public static final String SERIALIZED_NAME_FS_COMMAND = "fsCommand";
  @SerializedName(SERIALIZED_NAME_FS_COMMAND)
  private FsCommand fsCommand;

  public static final String SERIALIZED_NAME_HTML_CODE = "htmlCode";
  @SerializedName(SERIALIZED_NAME_HTML_CODE)
  private String htmlCode;

  public static final String SERIALIZED_NAME_HTML_CODE_LOCKED = "htmlCodeLocked";
  @SerializedName(SERIALIZED_NAME_HTML_CODE_LOCKED)
  private Boolean htmlCodeLocked;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ID_DIMENSION_VALUE = "idDimensionValue";
  @SerializedName(SERIALIZED_NAME_ID_DIMENSION_VALUE)
  private DimensionValue idDimensionValue;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_INFO = "lastModifiedInfo";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_INFO)
  private LastModifiedInfo lastModifiedInfo;

  public static final String SERIALIZED_NAME_LATEST_TRAFFICKED_CREATIVE_ID = "latestTraffickedCreativeId";
  @SerializedName(SERIALIZED_NAME_LATEST_TRAFFICKED_CREATIVE_ID)
  private String latestTraffickedCreativeId;

  public static final String SERIALIZED_NAME_MEDIA_DESCRIPTION = "mediaDescription";
  @SerializedName(SERIALIZED_NAME_MEDIA_DESCRIPTION)
  private String mediaDescription;

  public static final String SERIALIZED_NAME_MEDIA_DURATION = "mediaDuration";
  @SerializedName(SERIALIZED_NAME_MEDIA_DURATION)
  private Float mediaDuration;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OVERRIDE_CSS = "overrideCss";
  @SerializedName(SERIALIZED_NAME_OVERRIDE_CSS)
  private String overrideCss;

  public static final String SERIALIZED_NAME_PROGRESS_OFFSET = "progressOffset";
  @SerializedName(SERIALIZED_NAME_PROGRESS_OFFSET)
  private VideoOffset progressOffset;

  public static final String SERIALIZED_NAME_REDIRECT_URL = "redirectUrl";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URL)
  private String redirectUrl;

  public static final String SERIALIZED_NAME_RENDERING_ID = "renderingId";
  @SerializedName(SERIALIZED_NAME_RENDERING_ID)
  private String renderingId;

  public static final String SERIALIZED_NAME_RENDERING_ID_DIMENSION_VALUE = "renderingIdDimensionValue";
  @SerializedName(SERIALIZED_NAME_RENDERING_ID_DIMENSION_VALUE)
  private DimensionValue renderingIdDimensionValue;

  public static final String SERIALIZED_NAME_REQUIRED_FLASH_PLUGIN_VERSION = "requiredFlashPluginVersion";
  @SerializedName(SERIALIZED_NAME_REQUIRED_FLASH_PLUGIN_VERSION)
  private String requiredFlashPluginVersion;

  public static final String SERIALIZED_NAME_REQUIRED_FLASH_VERSION = "requiredFlashVersion";
  @SerializedName(SERIALIZED_NAME_REQUIRED_FLASH_VERSION)
  private Integer requiredFlashVersion;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Size size;

  public static final String SERIALIZED_NAME_SKIP_OFFSET = "skipOffset";
  @SerializedName(SERIALIZED_NAME_SKIP_OFFSET)
  private VideoOffset skipOffset;

  public static final String SERIALIZED_NAME_SKIPPABLE = "skippable";
  @SerializedName(SERIALIZED_NAME_SKIPPABLE)
  private Boolean skippable;

  public static final String SERIALIZED_NAME_SSL_COMPLIANT = "sslCompliant";
  @SerializedName(SERIALIZED_NAME_SSL_COMPLIANT)
  private Boolean sslCompliant;

  public static final String SERIALIZED_NAME_SSL_OVERRIDE = "sslOverride";
  @SerializedName(SERIALIZED_NAME_SSL_OVERRIDE)
  private Boolean sslOverride;

  public static final String SERIALIZED_NAME_STUDIO_ADVERTISER_ID = "studioAdvertiserId";
  @SerializedName(SERIALIZED_NAME_STUDIO_ADVERTISER_ID)
  private String studioAdvertiserId;

  public static final String SERIALIZED_NAME_STUDIO_CREATIVE_ID = "studioCreativeId";
  @SerializedName(SERIALIZED_NAME_STUDIO_CREATIVE_ID)
  private String studioCreativeId;

  public static final String SERIALIZED_NAME_STUDIO_TRAFFICKED_CREATIVE_ID = "studioTraffickedCreativeId";
  @SerializedName(SERIALIZED_NAME_STUDIO_TRAFFICKED_CREATIVE_ID)
  private String studioTraffickedCreativeId;

  public static final String SERIALIZED_NAME_SUBACCOUNT_ID = "subaccountId";
  @SerializedName(SERIALIZED_NAME_SUBACCOUNT_ID)
  private String subaccountId;

  public static final String SERIALIZED_NAME_THIRD_PARTY_BACKUP_IMAGE_IMPRESSIONS_URL = "thirdPartyBackupImageImpressionsUrl";
  @SerializedName(SERIALIZED_NAME_THIRD_PARTY_BACKUP_IMAGE_IMPRESSIONS_URL)
  private String thirdPartyBackupImageImpressionsUrl;

  public static final String SERIALIZED_NAME_THIRD_PARTY_RICH_MEDIA_IMPRESSIONS_URL = "thirdPartyRichMediaImpressionsUrl";
  @SerializedName(SERIALIZED_NAME_THIRD_PARTY_RICH_MEDIA_IMPRESSIONS_URL)
  private String thirdPartyRichMediaImpressionsUrl;

  public static final String SERIALIZED_NAME_THIRD_PARTY_URLS = "thirdPartyUrls";
  @SerializedName(SERIALIZED_NAME_THIRD_PARTY_URLS)
  private List<ThirdPartyTrackingUrl> thirdPartyUrls = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIMER_CUSTOM_EVENTS = "timerCustomEvents";
  @SerializedName(SERIALIZED_NAME_TIMER_CUSTOM_EVENTS)
  private List<CreativeCustomEvent> timerCustomEvents = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL_FILE_SIZE = "totalFileSize";
  @SerializedName(SERIALIZED_NAME_TOTAL_FILE_SIZE)
  private String totalFileSize;

  /**
   * Type of this creative. This is a required field. Applicable to all creative types. *Note:* FLASH_INPAGE, HTML5_BANNER, and IMAGE are only used for existing creatives. New creatives should use DISPLAY as a replacement for these types.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    IMAGE("IMAGE"),
    
    DISPLAY_REDIRECT("DISPLAY_REDIRECT"),
    
    CUSTOM_DISPLAY("CUSTOM_DISPLAY"),
    
    INTERNAL_REDIRECT("INTERNAL_REDIRECT"),
    
    CUSTOM_DISPLAY_INTERSTITIAL("CUSTOM_DISPLAY_INTERSTITIAL"),
    
    INTERSTITIAL_INTERNAL_REDIRECT("INTERSTITIAL_INTERNAL_REDIRECT"),
    
    TRACKING_TEXT("TRACKING_TEXT"),
    
    RICH_MEDIA_DISPLAY_BANNER("RICH_MEDIA_DISPLAY_BANNER"),
    
    RICH_MEDIA_INPAGE_FLOATING("RICH_MEDIA_INPAGE_FLOATING"),
    
    RICH_MEDIA_IM_EXPAND("RICH_MEDIA_IM_EXPAND"),
    
    RICH_MEDIA_DISPLAY_EXPANDING("RICH_MEDIA_DISPLAY_EXPANDING"),
    
    RICH_MEDIA_DISPLAY_INTERSTITIAL("RICH_MEDIA_DISPLAY_INTERSTITIAL"),
    
    RICH_MEDIA_DISPLAY_MULTI_FLOATING_INTERSTITIAL("RICH_MEDIA_DISPLAY_MULTI_FLOATING_INTERSTITIAL"),
    
    RICH_MEDIA_MOBILE_IN_APP("RICH_MEDIA_MOBILE_IN_APP"),
    
    FLASH_INPAGE("FLASH_INPAGE"),
    
    INSTREAM_VIDEO("INSTREAM_VIDEO"),
    
    VPAID_LINEAR_VIDEO("VPAID_LINEAR_VIDEO"),
    
    VPAID_NON_LINEAR_VIDEO("VPAID_NON_LINEAR_VIDEO"),
    
    INSTREAM_VIDEO_REDIRECT("INSTREAM_VIDEO_REDIRECT"),
    
    RICH_MEDIA_PEEL_DOWN("RICH_MEDIA_PEEL_DOWN"),
    
    HTML5_BANNER("HTML5_BANNER"),
    
    DISPLAY("DISPLAY"),
    
    DISPLAY_IMAGE_GALLERY("DISPLAY_IMAGE_GALLERY"),
    
    BRAND_SAFE_DEFAULT_INSTREAM_VIDEO("BRAND_SAFE_DEFAULT_INSTREAM_VIDEO"),
    
    INSTREAM_AUDIO("INSTREAM_AUDIO");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UNIVERSAL_AD_ID = "universalAdId";
  @SerializedName(SERIALIZED_NAME_UNIVERSAL_AD_ID)
  private UniversalAdId universalAdId;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public Creative() {
  }

  public Creative accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Account ID of this creative. This field, if left unset, will be auto-generated for both insert and update operations. Applicable to all creative types.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public Creative active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Whether the creative is active. Applicable to all creative types.
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public Creative adParameters(String adParameters) {
    this.adParameters = adParameters;
    return this;
  }

  /**
   * Ad parameters user for VPAID creative. This is a read-only field. Applicable to the following creative types: all VPAID.
   * @return adParameters
   */
  @javax.annotation.Nullable
  public String getAdParameters() {
    return adParameters;
  }

  public void setAdParameters(String adParameters) {
    this.adParameters = adParameters;
  }


  public Creative adTagKeys(List<String> adTagKeys) {
    this.adTagKeys = adTagKeys;
    return this;
  }

  public Creative addAdTagKeysItem(String adTagKeysItem) {
    if (this.adTagKeys == null) {
      this.adTagKeys = new ArrayList<>();
    }
    this.adTagKeys.add(adTagKeysItem);
    return this;
  }

  /**
   * Keywords for a Rich Media creative. Keywords let you customize the creative settings of a Rich Media ad running on your site without having to contact the advertiser. You can use keywords to dynamically change the look or functionality of a creative. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.
   * @return adTagKeys
   */
  @javax.annotation.Nullable
  public List<String> getAdTagKeys() {
    return adTagKeys;
  }

  public void setAdTagKeys(List<String> adTagKeys) {
    this.adTagKeys = adTagKeys;
  }


  public Creative additionalSizes(List<Size> additionalSizes) {
    this.additionalSizes = additionalSizes;
    return this;
  }

  public Creative addAdditionalSizesItem(Size additionalSizesItem) {
    if (this.additionalSizes == null) {
      this.additionalSizes = new ArrayList<>();
    }
    this.additionalSizes.add(additionalSizesItem);
    return this;
  }

  /**
   * Additional sizes associated with a responsive creative. When inserting or updating a creative either the size ID field or size width and height fields can be used. Applicable to DISPLAY creatives when the primary asset type is HTML_IMAGE.
   * @return additionalSizes
   */
  @javax.annotation.Nullable
  public List<Size> getAdditionalSizes() {
    return additionalSizes;
  }

  public void setAdditionalSizes(List<Size> additionalSizes) {
    this.additionalSizes = additionalSizes;
  }


  public Creative advertiserId(String advertiserId) {
    this.advertiserId = advertiserId;
    return this;
  }

  /**
   * Advertiser ID of this creative. This is a required field. Applicable to all creative types.
   * @return advertiserId
   */
  @javax.annotation.Nullable
  public String getAdvertiserId() {
    return advertiserId;
  }

  public void setAdvertiserId(String advertiserId) {
    this.advertiserId = advertiserId;
  }


  public Creative allowScriptAccess(Boolean allowScriptAccess) {
    this.allowScriptAccess = allowScriptAccess;
    return this;
  }

  /**
   * Whether script access is allowed for this creative. This is a read-only and deprecated field which will automatically be set to true on update. Applicable to the following creative types: FLASH_INPAGE.
   * @return allowScriptAccess
   */
  @javax.annotation.Nullable
  public Boolean getAllowScriptAccess() {
    return allowScriptAccess;
  }

  public void setAllowScriptAccess(Boolean allowScriptAccess) {
    this.allowScriptAccess = allowScriptAccess;
  }


  public Creative archived(Boolean archived) {
    this.archived = archived;
    return this;
  }

  /**
   * Whether the creative is archived. Applicable to all creative types.
   * @return archived
   */
  @javax.annotation.Nullable
  public Boolean getArchived() {
    return archived;
  }

  public void setArchived(Boolean archived) {
    this.archived = archived;
  }


  public Creative artworkType(ArtworkTypeEnum artworkType) {
    this.artworkType = artworkType;
    return this;
  }

  /**
   * Type of artwork used for the creative. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.
   * @return artworkType
   */
  @javax.annotation.Nullable
  public ArtworkTypeEnum getArtworkType() {
    return artworkType;
  }

  public void setArtworkType(ArtworkTypeEnum artworkType) {
    this.artworkType = artworkType;
  }


  public Creative authoringSource(AuthoringSourceEnum authoringSource) {
    this.authoringSource = authoringSource;
    return this;
  }

  /**
   * Source application where creative was authored. Presently, only DBM authored creatives will have this field set. Applicable to all creative types.
   * @return authoringSource
   */
  @javax.annotation.Nullable
  public AuthoringSourceEnum getAuthoringSource() {
    return authoringSource;
  }

  public void setAuthoringSource(AuthoringSourceEnum authoringSource) {
    this.authoringSource = authoringSource;
  }


  public Creative authoringTool(AuthoringToolEnum authoringTool) {
    this.authoringTool = authoringTool;
    return this;
  }

  /**
   * Authoring tool for HTML5 banner creatives. This is a read-only field. Applicable to the following creative types: HTML5_BANNER.
   * @return authoringTool
   */
  @javax.annotation.Nullable
  public AuthoringToolEnum getAuthoringTool() {
    return authoringTool;
  }

  public void setAuthoringTool(AuthoringToolEnum authoringTool) {
    this.authoringTool = authoringTool;
  }


  public Creative autoAdvanceImages(Boolean autoAdvanceImages) {
    this.autoAdvanceImages = autoAdvanceImages;
    return this;
  }

  /**
   * Whether images are automatically advanced for image gallery creatives. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY.
   * @return autoAdvanceImages
   */
  @javax.annotation.Nullable
  public Boolean getAutoAdvanceImages() {
    return autoAdvanceImages;
  }

  public void setAutoAdvanceImages(Boolean autoAdvanceImages) {
    this.autoAdvanceImages = autoAdvanceImages;
  }


  public Creative backgroundColor(String backgroundColor) {
    this.backgroundColor = backgroundColor;
    return this;
  }

  /**
   * The 6-character HTML color code, beginning with #, for the background of the window area where the Flash file is displayed. Default is white. Applicable to the following creative types: FLASH_INPAGE.
   * @return backgroundColor
   */
  @javax.annotation.Nullable
  public String getBackgroundColor() {
    return backgroundColor;
  }

  public void setBackgroundColor(String backgroundColor) {
    this.backgroundColor = backgroundColor;
  }


  public Creative backupImageClickThroughUrl(CreativeClickThroughUrl backupImageClickThroughUrl) {
    this.backupImageClickThroughUrl = backupImageClickThroughUrl;
    return this;
  }

  /**
   * Get backupImageClickThroughUrl
   * @return backupImageClickThroughUrl
   */
  @javax.annotation.Nullable
  public CreativeClickThroughUrl getBackupImageClickThroughUrl() {
    return backupImageClickThroughUrl;
  }

  public void setBackupImageClickThroughUrl(CreativeClickThroughUrl backupImageClickThroughUrl) {
    this.backupImageClickThroughUrl = backupImageClickThroughUrl;
  }


  public Creative backupImageFeatures(List<BackupImageFeaturesEnum> backupImageFeatures) {
    this.backupImageFeatures = backupImageFeatures;
    return this;
  }

  public Creative addBackupImageFeaturesItem(BackupImageFeaturesEnum backupImageFeaturesItem) {
    if (this.backupImageFeatures == null) {
      this.backupImageFeatures = new ArrayList<>();
    }
    this.backupImageFeatures.add(backupImageFeaturesItem);
    return this;
  }

  /**
   * List of feature dependencies that will cause a backup image to be served if the browser that serves the ad does not support them. Feature dependencies are features that a browser must be able to support in order to render your HTML5 creative asset correctly. This field is initially auto-generated to contain all features detected by Campaign Manager for all the assets of this creative and can then be modified by the client. To reset this field, copy over all the creativeAssets&#39; detected features. Applicable to the following creative types: HTML5_BANNER. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.
   * @return backupImageFeatures
   */
  @javax.annotation.Nullable
  public List<BackupImageFeaturesEnum> getBackupImageFeatures() {
    return backupImageFeatures;
  }

  public void setBackupImageFeatures(List<BackupImageFeaturesEnum> backupImageFeatures) {
    this.backupImageFeatures = backupImageFeatures;
  }


  public Creative backupImageReportingLabel(String backupImageReportingLabel) {
    this.backupImageReportingLabel = backupImageReportingLabel;
    return this;
  }

  /**
   * Reporting label used for HTML5 banner backup image. Applicable to the following creative types: DISPLAY when the primary asset type is not HTML_IMAGE.
   * @return backupImageReportingLabel
   */
  @javax.annotation.Nullable
  public String getBackupImageReportingLabel() {
    return backupImageReportingLabel;
  }

  public void setBackupImageReportingLabel(String backupImageReportingLabel) {
    this.backupImageReportingLabel = backupImageReportingLabel;
  }


  public Creative backupImageTargetWindow(TargetWindow backupImageTargetWindow) {
    this.backupImageTargetWindow = backupImageTargetWindow;
    return this;
  }

  /**
   * Get backupImageTargetWindow
   * @return backupImageTargetWindow
   */
  @javax.annotation.Nullable
  public TargetWindow getBackupImageTargetWindow() {
    return backupImageTargetWindow;
  }

  public void setBackupImageTargetWindow(TargetWindow backupImageTargetWindow) {
    this.backupImageTargetWindow = backupImageTargetWindow;
  }


  public Creative clickTags(List<ClickTag> clickTags) {
    this.clickTags = clickTags;
    return this;
  }

  public Creative addClickTagsItem(ClickTag clickTagsItem) {
    if (this.clickTags == null) {
      this.clickTags = new ArrayList<>();
    }
    this.clickTags.add(clickTagsItem);
    return this;
  }

  /**
   * Click tags of the creative. For DISPLAY, FLASH_INPAGE, and HTML5_BANNER creatives, this is a subset of detected click tags for the assets associated with this creative. After creating a flash asset, detected click tags will be returned in the creativeAssetMetadata. When inserting the creative, populate the creative clickTags field using the creativeAssetMetadata.clickTags field. For DISPLAY_IMAGE_GALLERY creatives, there should be exactly one entry in this list for each image creative asset. A click tag is matched with a corresponding creative asset by matching the clickTag.name field with the creativeAsset.assetIdentifier.name field. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY, FLASH_INPAGE, HTML5_BANNER. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.
   * @return clickTags
   */
  @javax.annotation.Nullable
  public List<ClickTag> getClickTags() {
    return clickTags;
  }

  public void setClickTags(List<ClickTag> clickTags) {
    this.clickTags = clickTags;
  }


  public Creative commercialId(String commercialId) {
    this.commercialId = commercialId;
    return this;
  }

  /**
   * Industry standard ID assigned to creative for reach and frequency. Applicable to INSTREAM_VIDEO_REDIRECT creatives.
   * @return commercialId
   */
  @javax.annotation.Nullable
  public String getCommercialId() {
    return commercialId;
  }

  public void setCommercialId(String commercialId) {
    this.commercialId = commercialId;
  }


  public Creative companionCreatives(List<String> companionCreatives) {
    this.companionCreatives = companionCreatives;
    return this;
  }

  public Creative addCompanionCreativesItem(String companionCreativesItem) {
    if (this.companionCreatives == null) {
      this.companionCreatives = new ArrayList<>();
    }
    this.companionCreatives.add(companionCreativesItem);
    return this;
  }

  /**
   * List of companion creatives assigned to an in-Stream video creative. Acceptable values include IDs of existing flash and image creatives. Applicable to the following creative types: all VPAID, all INSTREAM_AUDIO and all INSTREAM_VIDEO with dynamicAssetSelection set to false.
   * @return companionCreatives
   */
  @javax.annotation.Nullable
  public List<String> getCompanionCreatives() {
    return companionCreatives;
  }

  public void setCompanionCreatives(List<String> companionCreatives) {
    this.companionCreatives = companionCreatives;
  }


  public Creative compatibility(List<CompatibilityEnum> compatibility) {
    this.compatibility = compatibility;
    return this;
  }

  public Creative addCompatibilityItem(CompatibilityEnum compatibilityItem) {
    if (this.compatibility == null) {
      this.compatibility = new ArrayList<>();
    }
    this.compatibility.add(compatibilityItem);
    return this;
  }

  /**
   * Compatibilities associated with this creative. This is a read-only field. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop or on mobile devices or in mobile apps for regular or interstitial ads, respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. Only pre-existing creatives may have these compatibilities since new creatives will either be assigned DISPLAY or DISPLAY_INTERSTITIAL instead. IN_STREAM_VIDEO refers to rendering in in-stream video ads developed with the VAST standard. IN_STREAM_AUDIO refers to rendering in in-stream audio ads developed with the VAST standard. Applicable to all creative types. Acceptable values are: - \&quot;APP\&quot; - \&quot;APP_INTERSTITIAL\&quot; - \&quot;IN_STREAM_VIDEO\&quot; - \&quot;IN_STREAM_AUDIO\&quot; - \&quot;DISPLAY\&quot; - \&quot;DISPLAY_INTERSTITIAL\&quot; 
   * @return compatibility
   */
  @javax.annotation.Nullable
  public List<CompatibilityEnum> getCompatibility() {
    return compatibility;
  }

  public void setCompatibility(List<CompatibilityEnum> compatibility) {
    this.compatibility = compatibility;
  }


  public Creative convertFlashToHtml5(Boolean convertFlashToHtml5) {
    this.convertFlashToHtml5 = convertFlashToHtml5;
    return this;
  }

  /**
   * Whether Flash assets associated with the creative need to be automatically converted to HTML5. This flag is enabled by default and users can choose to disable it if they don&#39;t want the system to generate and use HTML5 asset for this creative. Applicable to the following creative type: FLASH_INPAGE. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.
   * @return convertFlashToHtml5
   */
  @javax.annotation.Nullable
  public Boolean getConvertFlashToHtml5() {
    return convertFlashToHtml5;
  }

  public void setConvertFlashToHtml5(Boolean convertFlashToHtml5) {
    this.convertFlashToHtml5 = convertFlashToHtml5;
  }


  public Creative counterCustomEvents(List<CreativeCustomEvent> counterCustomEvents) {
    this.counterCustomEvents = counterCustomEvents;
    return this;
  }

  public Creative addCounterCustomEventsItem(CreativeCustomEvent counterCustomEventsItem) {
    if (this.counterCustomEvents == null) {
      this.counterCustomEvents = new ArrayList<>();
    }
    this.counterCustomEvents.add(counterCustomEventsItem);
    return this;
  }

  /**
   * List of counter events configured for the creative. For DISPLAY_IMAGE_GALLERY creatives, these are read-only and auto-generated from clickTags. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY, all RICH_MEDIA, and all VPAID.
   * @return counterCustomEvents
   */
  @javax.annotation.Nullable
  public List<CreativeCustomEvent> getCounterCustomEvents() {
    return counterCustomEvents;
  }

  public void setCounterCustomEvents(List<CreativeCustomEvent> counterCustomEvents) {
    this.counterCustomEvents = counterCustomEvents;
  }


  public Creative creativeAssetSelection(CreativeAssetSelection creativeAssetSelection) {
    this.creativeAssetSelection = creativeAssetSelection;
    return this;
  }

  /**
   * Get creativeAssetSelection
   * @return creativeAssetSelection
   */
  @javax.annotation.Nullable
  public CreativeAssetSelection getCreativeAssetSelection() {
    return creativeAssetSelection;
  }

  public void setCreativeAssetSelection(CreativeAssetSelection creativeAssetSelection) {
    this.creativeAssetSelection = creativeAssetSelection;
  }


  public Creative creativeAssets(List<CreativeAsset> creativeAssets) {
    this.creativeAssets = creativeAssets;
    return this;
  }

  public Creative addCreativeAssetsItem(CreativeAsset creativeAssetsItem) {
    if (this.creativeAssets == null) {
      this.creativeAssets = new ArrayList<>();
    }
    this.creativeAssets.add(creativeAssetsItem);
    return this;
  }

  /**
   * Assets associated with a creative. Applicable to all but the following creative types: INTERNAL_REDIRECT, INTERSTITIAL_INTERNAL_REDIRECT, and REDIRECT
   * @return creativeAssets
   */
  @javax.annotation.Nullable
  public List<CreativeAsset> getCreativeAssets() {
    return creativeAssets;
  }

  public void setCreativeAssets(List<CreativeAsset> creativeAssets) {
    this.creativeAssets = creativeAssets;
  }


  public Creative creativeFieldAssignments(List<CreativeFieldAssignment> creativeFieldAssignments) {
    this.creativeFieldAssignments = creativeFieldAssignments;
    return this;
  }

  public Creative addCreativeFieldAssignmentsItem(CreativeFieldAssignment creativeFieldAssignmentsItem) {
    if (this.creativeFieldAssignments == null) {
      this.creativeFieldAssignments = new ArrayList<>();
    }
    this.creativeFieldAssignments.add(creativeFieldAssignmentsItem);
    return this;
  }

  /**
   * Creative field assignments for this creative. Applicable to all creative types.
   * @return creativeFieldAssignments
   */
  @javax.annotation.Nullable
  public List<CreativeFieldAssignment> getCreativeFieldAssignments() {
    return creativeFieldAssignments;
  }

  public void setCreativeFieldAssignments(List<CreativeFieldAssignment> creativeFieldAssignments) {
    this.creativeFieldAssignments = creativeFieldAssignments;
  }


  public Creative customKeyValues(List<String> customKeyValues) {
    this.customKeyValues = customKeyValues;
    return this;
  }

  public Creative addCustomKeyValuesItem(String customKeyValuesItem) {
    if (this.customKeyValues == null) {
      this.customKeyValues = new ArrayList<>();
    }
    this.customKeyValues.add(customKeyValuesItem);
    return this;
  }

  /**
   * Custom key-values for a Rich Media creative. Key-values let you customize the creative settings of a Rich Media ad running on your site without having to contact the advertiser. You can use key-values to dynamically change the look or functionality of a creative. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.
   * @return customKeyValues
   */
  @javax.annotation.Nullable
  public List<String> getCustomKeyValues() {
    return customKeyValues;
  }

  public void setCustomKeyValues(List<String> customKeyValues) {
    this.customKeyValues = customKeyValues;
  }


  public Creative dynamicAssetSelection(Boolean dynamicAssetSelection) {
    this.dynamicAssetSelection = dynamicAssetSelection;
    return this;
  }

  /**
   * Set this to true to enable the use of rules to target individual assets in this creative. When set to true creativeAssetSelection must be set. This also controls asset-level companions. When this is true, companion creatives should be assigned to creative assets. Learn more. Applicable to INSTREAM_VIDEO creatives.
   * @return dynamicAssetSelection
   */
  @javax.annotation.Nullable
  public Boolean getDynamicAssetSelection() {
    return dynamicAssetSelection;
  }

  public void setDynamicAssetSelection(Boolean dynamicAssetSelection) {
    this.dynamicAssetSelection = dynamicAssetSelection;
  }


  public Creative exitCustomEvents(List<CreativeCustomEvent> exitCustomEvents) {
    this.exitCustomEvents = exitCustomEvents;
    return this;
  }

  public Creative addExitCustomEventsItem(CreativeCustomEvent exitCustomEventsItem) {
    if (this.exitCustomEvents == null) {
      this.exitCustomEvents = new ArrayList<>();
    }
    this.exitCustomEvents.add(exitCustomEventsItem);
    return this;
  }

  /**
   * List of exit events configured for the creative. For DISPLAY and DISPLAY_IMAGE_GALLERY creatives, these are read-only and auto-generated from clickTags, For DISPLAY, an event is also created from the backupImageReportingLabel. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY, all RICH_MEDIA, and all VPAID. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.
   * @return exitCustomEvents
   */
  @javax.annotation.Nullable
  public List<CreativeCustomEvent> getExitCustomEvents() {
    return exitCustomEvents;
  }

  public void setExitCustomEvents(List<CreativeCustomEvent> exitCustomEvents) {
    this.exitCustomEvents = exitCustomEvents;
  }


  public Creative fsCommand(FsCommand fsCommand) {
    this.fsCommand = fsCommand;
    return this;
  }

  /**
   * Get fsCommand
   * @return fsCommand
   */
  @javax.annotation.Nullable
  public FsCommand getFsCommand() {
    return fsCommand;
  }

  public void setFsCommand(FsCommand fsCommand) {
    this.fsCommand = fsCommand;
  }


  public Creative htmlCode(String htmlCode) {
    this.htmlCode = htmlCode;
    return this;
  }

  /**
   * HTML code for the creative. This is a required field when applicable. This field is ignored if htmlCodeLocked is true. Applicable to the following creative types: all CUSTOM, FLASH_INPAGE, and HTML5_BANNER, and all RICH_MEDIA.
   * @return htmlCode
   */
  @javax.annotation.Nullable
  public String getHtmlCode() {
    return htmlCode;
  }

  public void setHtmlCode(String htmlCode) {
    this.htmlCode = htmlCode;
  }


  public Creative htmlCodeLocked(Boolean htmlCodeLocked) {
    this.htmlCodeLocked = htmlCodeLocked;
    return this;
  }

  /**
   * Whether HTML code is generated by Campaign Manager or manually entered. Set to true to ignore changes to htmlCode. Applicable to the following creative types: FLASH_INPAGE and HTML5_BANNER.
   * @return htmlCodeLocked
   */
  @javax.annotation.Nullable
  public Boolean getHtmlCodeLocked() {
    return htmlCodeLocked;
  }

  public void setHtmlCodeLocked(Boolean htmlCodeLocked) {
    this.htmlCodeLocked = htmlCodeLocked;
  }


  public Creative id(String id) {
    this.id = id;
    return this;
  }

  /**
   * ID of this creative. This is a read-only, auto-generated field. Applicable to all creative types.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Creative idDimensionValue(DimensionValue idDimensionValue) {
    this.idDimensionValue = idDimensionValue;
    return this;
  }

  /**
   * Get idDimensionValue
   * @return idDimensionValue
   */
  @javax.annotation.Nullable
  public DimensionValue getIdDimensionValue() {
    return idDimensionValue;
  }

  public void setIdDimensionValue(DimensionValue idDimensionValue) {
    this.idDimensionValue = idDimensionValue;
  }


  public Creative kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string \&quot;dfareporting#creative\&quot;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Creative lastModifiedInfo(LastModifiedInfo lastModifiedInfo) {
    this.lastModifiedInfo = lastModifiedInfo;
    return this;
  }

  /**
   * Get lastModifiedInfo
   * @return lastModifiedInfo
   */
  @javax.annotation.Nullable
  public LastModifiedInfo getLastModifiedInfo() {
    return lastModifiedInfo;
  }

  public void setLastModifiedInfo(LastModifiedInfo lastModifiedInfo) {
    this.lastModifiedInfo = lastModifiedInfo;
  }


  public Creative latestTraffickedCreativeId(String latestTraffickedCreativeId) {
    this.latestTraffickedCreativeId = latestTraffickedCreativeId;
    return this;
  }

  /**
   * Latest Studio trafficked creative ID associated with rich media and VPAID creatives. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.
   * @return latestTraffickedCreativeId
   */
  @javax.annotation.Nullable
  public String getLatestTraffickedCreativeId() {
    return latestTraffickedCreativeId;
  }

  public void setLatestTraffickedCreativeId(String latestTraffickedCreativeId) {
    this.latestTraffickedCreativeId = latestTraffickedCreativeId;
  }


  public Creative mediaDescription(String mediaDescription) {
    this.mediaDescription = mediaDescription;
    return this;
  }

  /**
   * Description of the audio or video ad. Applicable to the following creative types: all INSTREAM_VIDEO, INSTREAM_AUDIO, and all VPAID.
   * @return mediaDescription
   */
  @javax.annotation.Nullable
  public String getMediaDescription() {
    return mediaDescription;
  }

  public void setMediaDescription(String mediaDescription) {
    this.mediaDescription = mediaDescription;
  }


  public Creative mediaDuration(Float mediaDuration) {
    this.mediaDuration = mediaDuration;
    return this;
  }

  /**
   * Creative audio or video duration in seconds. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO, INSTREAM_AUDIO, all RICH_MEDIA, and all VPAID.
   * @return mediaDuration
   */
  @javax.annotation.Nullable
  public Float getMediaDuration() {
    return mediaDuration;
  }

  public void setMediaDuration(Float mediaDuration) {
    this.mediaDuration = mediaDuration;
  }


  public Creative name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the creative. This is a required field and must be less than 256 characters long. Applicable to all creative types.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Creative overrideCss(String overrideCss) {
    this.overrideCss = overrideCss;
    return this;
  }

  /**
   * Override CSS value for rich media creatives. Applicable to the following creative types: all RICH_MEDIA.
   * @return overrideCss
   */
  @javax.annotation.Nullable
  public String getOverrideCss() {
    return overrideCss;
  }

  public void setOverrideCss(String overrideCss) {
    this.overrideCss = overrideCss;
  }


  public Creative progressOffset(VideoOffset progressOffset) {
    this.progressOffset = progressOffset;
    return this;
  }

  /**
   * Get progressOffset
   * @return progressOffset
   */
  @javax.annotation.Nullable
  public VideoOffset getProgressOffset() {
    return progressOffset;
  }

  public void setProgressOffset(VideoOffset progressOffset) {
    this.progressOffset = progressOffset;
  }


  public Creative redirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
    return this;
  }

  /**
   * URL of hosted image or hosted video or another ad tag. For INSTREAM_VIDEO_REDIRECT creatives this is the in-stream video redirect URL. The standard for a VAST (Video Ad Serving Template) ad response allows for a redirect link to another VAST 2.0 or 3.0 call. This is a required field when applicable. Applicable to the following creative types: DISPLAY_REDIRECT, INTERNAL_REDIRECT, INTERSTITIAL_INTERNAL_REDIRECT, and INSTREAM_VIDEO_REDIRECT
   * @return redirectUrl
   */
  @javax.annotation.Nullable
  public String getRedirectUrl() {
    return redirectUrl;
  }

  public void setRedirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
  }


  public Creative renderingId(String renderingId) {
    this.renderingId = renderingId;
    return this;
  }

  /**
   * ID of current rendering version. This is a read-only field. Applicable to all creative types.
   * @return renderingId
   */
  @javax.annotation.Nullable
  public String getRenderingId() {
    return renderingId;
  }

  public void setRenderingId(String renderingId) {
    this.renderingId = renderingId;
  }


  public Creative renderingIdDimensionValue(DimensionValue renderingIdDimensionValue) {
    this.renderingIdDimensionValue = renderingIdDimensionValue;
    return this;
  }

  /**
   * Get renderingIdDimensionValue
   * @return renderingIdDimensionValue
   */
  @javax.annotation.Nullable
  public DimensionValue getRenderingIdDimensionValue() {
    return renderingIdDimensionValue;
  }

  public void setRenderingIdDimensionValue(DimensionValue renderingIdDimensionValue) {
    this.renderingIdDimensionValue = renderingIdDimensionValue;
  }


  public Creative requiredFlashPluginVersion(String requiredFlashPluginVersion) {
    this.requiredFlashPluginVersion = requiredFlashPluginVersion;
    return this;
  }

  /**
   * The minimum required Flash plugin version for this creative. For example, 11.2.202.235. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.
   * @return requiredFlashPluginVersion
   */
  @javax.annotation.Nullable
  public String getRequiredFlashPluginVersion() {
    return requiredFlashPluginVersion;
  }

  public void setRequiredFlashPluginVersion(String requiredFlashPluginVersion) {
    this.requiredFlashPluginVersion = requiredFlashPluginVersion;
  }


  public Creative requiredFlashVersion(Integer requiredFlashVersion) {
    this.requiredFlashVersion = requiredFlashVersion;
    return this;
  }

  /**
   * The internal Flash version for this creative as calculated by Studio. This is a read-only field. Applicable to the following creative types: FLASH_INPAGE all RICH_MEDIA, and all VPAID. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.
   * @return requiredFlashVersion
   */
  @javax.annotation.Nullable
  public Integer getRequiredFlashVersion() {
    return requiredFlashVersion;
  }

  public void setRequiredFlashVersion(Integer requiredFlashVersion) {
    this.requiredFlashVersion = requiredFlashVersion;
  }


  public Creative size(Size size) {
    this.size = size;
    return this;
  }

  /**
   * Get size
   * @return size
   */
  @javax.annotation.Nullable
  public Size getSize() {
    return size;
  }

  public void setSize(Size size) {
    this.size = size;
  }


  public Creative skipOffset(VideoOffset skipOffset) {
    this.skipOffset = skipOffset;
    return this;
  }

  /**
   * Get skipOffset
   * @return skipOffset
   */
  @javax.annotation.Nullable
  public VideoOffset getSkipOffset() {
    return skipOffset;
  }

  public void setSkipOffset(VideoOffset skipOffset) {
    this.skipOffset = skipOffset;
  }


  public Creative skippable(Boolean skippable) {
    this.skippable = skippable;
    return this;
  }

  /**
   * Whether the user can choose to skip the creative. Applicable to the following creative types: all INSTREAM_VIDEO and all VPAID.
   * @return skippable
   */
  @javax.annotation.Nullable
  public Boolean getSkippable() {
    return skippable;
  }

  public void setSkippable(Boolean skippable) {
    this.skippable = skippable;
  }


  public Creative sslCompliant(Boolean sslCompliant) {
    this.sslCompliant = sslCompliant;
    return this;
  }

  /**
   * Whether the creative is SSL-compliant. This is a read-only field. Applicable to all creative types.
   * @return sslCompliant
   */
  @javax.annotation.Nullable
  public Boolean getSslCompliant() {
    return sslCompliant;
  }

  public void setSslCompliant(Boolean sslCompliant) {
    this.sslCompliant = sslCompliant;
  }


  public Creative sslOverride(Boolean sslOverride) {
    this.sslOverride = sslOverride;
    return this;
  }

  /**
   * Whether creative should be treated as SSL compliant even if the system scan shows it&#39;s not. Applicable to all creative types.
   * @return sslOverride
   */
  @javax.annotation.Nullable
  public Boolean getSslOverride() {
    return sslOverride;
  }

  public void setSslOverride(Boolean sslOverride) {
    this.sslOverride = sslOverride;
  }


  public Creative studioAdvertiserId(String studioAdvertiserId) {
    this.studioAdvertiserId = studioAdvertiserId;
    return this;
  }

  /**
   * Studio advertiser ID associated with rich media and VPAID creatives. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.
   * @return studioAdvertiserId
   */
  @javax.annotation.Nullable
  public String getStudioAdvertiserId() {
    return studioAdvertiserId;
  }

  public void setStudioAdvertiserId(String studioAdvertiserId) {
    this.studioAdvertiserId = studioAdvertiserId;
  }


  public Creative studioCreativeId(String studioCreativeId) {
    this.studioCreativeId = studioCreativeId;
    return this;
  }

  /**
   * Studio creative ID associated with rich media and VPAID creatives. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.
   * @return studioCreativeId
   */
  @javax.annotation.Nullable
  public String getStudioCreativeId() {
    return studioCreativeId;
  }

  public void setStudioCreativeId(String studioCreativeId) {
    this.studioCreativeId = studioCreativeId;
  }


  public Creative studioTraffickedCreativeId(String studioTraffickedCreativeId) {
    this.studioTraffickedCreativeId = studioTraffickedCreativeId;
    return this;
  }

  /**
   * Studio trafficked creative ID associated with rich media and VPAID creatives. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.
   * @return studioTraffickedCreativeId
   */
  @javax.annotation.Nullable
  public String getStudioTraffickedCreativeId() {
    return studioTraffickedCreativeId;
  }

  public void setStudioTraffickedCreativeId(String studioTraffickedCreativeId) {
    this.studioTraffickedCreativeId = studioTraffickedCreativeId;
  }


  public Creative subaccountId(String subaccountId) {
    this.subaccountId = subaccountId;
    return this;
  }

  /**
   * Subaccount ID of this creative. This field, if left unset, will be auto-generated for both insert and update operations. Applicable to all creative types.
   * @return subaccountId
   */
  @javax.annotation.Nullable
  public String getSubaccountId() {
    return subaccountId;
  }

  public void setSubaccountId(String subaccountId) {
    this.subaccountId = subaccountId;
  }


  public Creative thirdPartyBackupImageImpressionsUrl(String thirdPartyBackupImageImpressionsUrl) {
    this.thirdPartyBackupImageImpressionsUrl = thirdPartyBackupImageImpressionsUrl;
    return this;
  }

  /**
   * Third-party URL used to record backup image impressions. Applicable to the following creative types: all RICH_MEDIA.
   * @return thirdPartyBackupImageImpressionsUrl
   */
  @javax.annotation.Nullable
  public String getThirdPartyBackupImageImpressionsUrl() {
    return thirdPartyBackupImageImpressionsUrl;
  }

  public void setThirdPartyBackupImageImpressionsUrl(String thirdPartyBackupImageImpressionsUrl) {
    this.thirdPartyBackupImageImpressionsUrl = thirdPartyBackupImageImpressionsUrl;
  }


  public Creative thirdPartyRichMediaImpressionsUrl(String thirdPartyRichMediaImpressionsUrl) {
    this.thirdPartyRichMediaImpressionsUrl = thirdPartyRichMediaImpressionsUrl;
    return this;
  }

  /**
   * Third-party URL used to record rich media impressions. Applicable to the following creative types: all RICH_MEDIA.
   * @return thirdPartyRichMediaImpressionsUrl
   */
  @javax.annotation.Nullable
  public String getThirdPartyRichMediaImpressionsUrl() {
    return thirdPartyRichMediaImpressionsUrl;
  }

  public void setThirdPartyRichMediaImpressionsUrl(String thirdPartyRichMediaImpressionsUrl) {
    this.thirdPartyRichMediaImpressionsUrl = thirdPartyRichMediaImpressionsUrl;
  }


  public Creative thirdPartyUrls(List<ThirdPartyTrackingUrl> thirdPartyUrls) {
    this.thirdPartyUrls = thirdPartyUrls;
    return this;
  }

  public Creative addThirdPartyUrlsItem(ThirdPartyTrackingUrl thirdPartyUrlsItem) {
    if (this.thirdPartyUrls == null) {
      this.thirdPartyUrls = new ArrayList<>();
    }
    this.thirdPartyUrls.add(thirdPartyUrlsItem);
    return this;
  }

  /**
   * Third-party URLs for tracking in-stream creative events. Applicable to the following creative types: all INSTREAM_VIDEO, all INSTREAM_AUDIO, and all VPAID.
   * @return thirdPartyUrls
   */
  @javax.annotation.Nullable
  public List<ThirdPartyTrackingUrl> getThirdPartyUrls() {
    return thirdPartyUrls;
  }

  public void setThirdPartyUrls(List<ThirdPartyTrackingUrl> thirdPartyUrls) {
    this.thirdPartyUrls = thirdPartyUrls;
  }


  public Creative timerCustomEvents(List<CreativeCustomEvent> timerCustomEvents) {
    this.timerCustomEvents = timerCustomEvents;
    return this;
  }

  public Creative addTimerCustomEventsItem(CreativeCustomEvent timerCustomEventsItem) {
    if (this.timerCustomEvents == null) {
      this.timerCustomEvents = new ArrayList<>();
    }
    this.timerCustomEvents.add(timerCustomEventsItem);
    return this;
  }

  /**
   * List of timer events configured for the creative. For DISPLAY_IMAGE_GALLERY creatives, these are read-only and auto-generated from clickTags. Applicable to the following creative types: DISPLAY_IMAGE_GALLERY, all RICH_MEDIA, and all VPAID. Applicable to DISPLAY when the primary asset is not HTML_IMAGE.
   * @return timerCustomEvents
   */
  @javax.annotation.Nullable
  public List<CreativeCustomEvent> getTimerCustomEvents() {
    return timerCustomEvents;
  }

  public void setTimerCustomEvents(List<CreativeCustomEvent> timerCustomEvents) {
    this.timerCustomEvents = timerCustomEvents;
  }


  public Creative totalFileSize(String totalFileSize) {
    this.totalFileSize = totalFileSize;
    return this;
  }

  /**
   * Combined size of all creative assets. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA, and all VPAID.
   * @return totalFileSize
   */
  @javax.annotation.Nullable
  public String getTotalFileSize() {
    return totalFileSize;
  }

  public void setTotalFileSize(String totalFileSize) {
    this.totalFileSize = totalFileSize;
  }


  public Creative type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Type of this creative. This is a required field. Applicable to all creative types. *Note:* FLASH_INPAGE, HTML5_BANNER, and IMAGE are only used for existing creatives. New creatives should use DISPLAY as a replacement for these types.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Creative universalAdId(UniversalAdId universalAdId) {
    this.universalAdId = universalAdId;
    return this;
  }

  /**
   * Get universalAdId
   * @return universalAdId
   */
  @javax.annotation.Nullable
  public UniversalAdId getUniversalAdId() {
    return universalAdId;
  }

  public void setUniversalAdId(UniversalAdId universalAdId) {
    this.universalAdId = universalAdId;
  }


  public Creative version(Integer version) {
    this.version = version;
    return this;
  }

  /**
   * The version number helps you keep track of multiple versions of your creative in your reports. The version number will always be auto-generated during insert operations to start at 1. For tracking creatives the version cannot be incremented and will always remain at 1. For all other creative types the version can be incremented only by 1 during update operations. In addition, the version will be automatically incremented by 1 when undergoing Rich Media creative merging. Applicable to all creative types.
   * @return version
   */
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Creative creative = (Creative) o;
    return Objects.equals(this.accountId, creative.accountId) &&
        Objects.equals(this.active, creative.active) &&
        Objects.equals(this.adParameters, creative.adParameters) &&
        Objects.equals(this.adTagKeys, creative.adTagKeys) &&
        Objects.equals(this.additionalSizes, creative.additionalSizes) &&
        Objects.equals(this.advertiserId, creative.advertiserId) &&
        Objects.equals(this.allowScriptAccess, creative.allowScriptAccess) &&
        Objects.equals(this.archived, creative.archived) &&
        Objects.equals(this.artworkType, creative.artworkType) &&
        Objects.equals(this.authoringSource, creative.authoringSource) &&
        Objects.equals(this.authoringTool, creative.authoringTool) &&
        Objects.equals(this.autoAdvanceImages, creative.autoAdvanceImages) &&
        Objects.equals(this.backgroundColor, creative.backgroundColor) &&
        Objects.equals(this.backupImageClickThroughUrl, creative.backupImageClickThroughUrl) &&
        Objects.equals(this.backupImageFeatures, creative.backupImageFeatures) &&
        Objects.equals(this.backupImageReportingLabel, creative.backupImageReportingLabel) &&
        Objects.equals(this.backupImageTargetWindow, creative.backupImageTargetWindow) &&
        Objects.equals(this.clickTags, creative.clickTags) &&
        Objects.equals(this.commercialId, creative.commercialId) &&
        Objects.equals(this.companionCreatives, creative.companionCreatives) &&
        Objects.equals(this.compatibility, creative.compatibility) &&
        Objects.equals(this.convertFlashToHtml5, creative.convertFlashToHtml5) &&
        Objects.equals(this.counterCustomEvents, creative.counterCustomEvents) &&
        Objects.equals(this.creativeAssetSelection, creative.creativeAssetSelection) &&
        Objects.equals(this.creativeAssets, creative.creativeAssets) &&
        Objects.equals(this.creativeFieldAssignments, creative.creativeFieldAssignments) &&
        Objects.equals(this.customKeyValues, creative.customKeyValues) &&
        Objects.equals(this.dynamicAssetSelection, creative.dynamicAssetSelection) &&
        Objects.equals(this.exitCustomEvents, creative.exitCustomEvents) &&
        Objects.equals(this.fsCommand, creative.fsCommand) &&
        Objects.equals(this.htmlCode, creative.htmlCode) &&
        Objects.equals(this.htmlCodeLocked, creative.htmlCodeLocked) &&
        Objects.equals(this.id, creative.id) &&
        Objects.equals(this.idDimensionValue, creative.idDimensionValue) &&
        Objects.equals(this.kind, creative.kind) &&
        Objects.equals(this.lastModifiedInfo, creative.lastModifiedInfo) &&
        Objects.equals(this.latestTraffickedCreativeId, creative.latestTraffickedCreativeId) &&
        Objects.equals(this.mediaDescription, creative.mediaDescription) &&
        Objects.equals(this.mediaDuration, creative.mediaDuration) &&
        Objects.equals(this.name, creative.name) &&
        Objects.equals(this.overrideCss, creative.overrideCss) &&
        Objects.equals(this.progressOffset, creative.progressOffset) &&
        Objects.equals(this.redirectUrl, creative.redirectUrl) &&
        Objects.equals(this.renderingId, creative.renderingId) &&
        Objects.equals(this.renderingIdDimensionValue, creative.renderingIdDimensionValue) &&
        Objects.equals(this.requiredFlashPluginVersion, creative.requiredFlashPluginVersion) &&
        Objects.equals(this.requiredFlashVersion, creative.requiredFlashVersion) &&
        Objects.equals(this.size, creative.size) &&
        Objects.equals(this.skipOffset, creative.skipOffset) &&
        Objects.equals(this.skippable, creative.skippable) &&
        Objects.equals(this.sslCompliant, creative.sslCompliant) &&
        Objects.equals(this.sslOverride, creative.sslOverride) &&
        Objects.equals(this.studioAdvertiserId, creative.studioAdvertiserId) &&
        Objects.equals(this.studioCreativeId, creative.studioCreativeId) &&
        Objects.equals(this.studioTraffickedCreativeId, creative.studioTraffickedCreativeId) &&
        Objects.equals(this.subaccountId, creative.subaccountId) &&
        Objects.equals(this.thirdPartyBackupImageImpressionsUrl, creative.thirdPartyBackupImageImpressionsUrl) &&
        Objects.equals(this.thirdPartyRichMediaImpressionsUrl, creative.thirdPartyRichMediaImpressionsUrl) &&
        Objects.equals(this.thirdPartyUrls, creative.thirdPartyUrls) &&
        Objects.equals(this.timerCustomEvents, creative.timerCustomEvents) &&
        Objects.equals(this.totalFileSize, creative.totalFileSize) &&
        Objects.equals(this.type, creative.type) &&
        Objects.equals(this.universalAdId, creative.universalAdId) &&
        Objects.equals(this.version, creative.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, active, adParameters, adTagKeys, additionalSizes, advertiserId, allowScriptAccess, archived, artworkType, authoringSource, authoringTool, autoAdvanceImages, backgroundColor, backupImageClickThroughUrl, backupImageFeatures, backupImageReportingLabel, backupImageTargetWindow, clickTags, commercialId, companionCreatives, compatibility, convertFlashToHtml5, counterCustomEvents, creativeAssetSelection, creativeAssets, creativeFieldAssignments, customKeyValues, dynamicAssetSelection, exitCustomEvents, fsCommand, htmlCode, htmlCodeLocked, id, idDimensionValue, kind, lastModifiedInfo, latestTraffickedCreativeId, mediaDescription, mediaDuration, name, overrideCss, progressOffset, redirectUrl, renderingId, renderingIdDimensionValue, requiredFlashPluginVersion, requiredFlashVersion, size, skipOffset, skippable, sslCompliant, sslOverride, studioAdvertiserId, studioCreativeId, studioTraffickedCreativeId, subaccountId, thirdPartyBackupImageImpressionsUrl, thirdPartyRichMediaImpressionsUrl, thirdPartyUrls, timerCustomEvents, totalFileSize, type, universalAdId, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Creative {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    adParameters: ").append(toIndentedString(adParameters)).append("\n");
    sb.append("    adTagKeys: ").append(toIndentedString(adTagKeys)).append("\n");
    sb.append("    additionalSizes: ").append(toIndentedString(additionalSizes)).append("\n");
    sb.append("    advertiserId: ").append(toIndentedString(advertiserId)).append("\n");
    sb.append("    allowScriptAccess: ").append(toIndentedString(allowScriptAccess)).append("\n");
    sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
    sb.append("    artworkType: ").append(toIndentedString(artworkType)).append("\n");
    sb.append("    authoringSource: ").append(toIndentedString(authoringSource)).append("\n");
    sb.append("    authoringTool: ").append(toIndentedString(authoringTool)).append("\n");
    sb.append("    autoAdvanceImages: ").append(toIndentedString(autoAdvanceImages)).append("\n");
    sb.append("    backgroundColor: ").append(toIndentedString(backgroundColor)).append("\n");
    sb.append("    backupImageClickThroughUrl: ").append(toIndentedString(backupImageClickThroughUrl)).append("\n");
    sb.append("    backupImageFeatures: ").append(toIndentedString(backupImageFeatures)).append("\n");
    sb.append("    backupImageReportingLabel: ").append(toIndentedString(backupImageReportingLabel)).append("\n");
    sb.append("    backupImageTargetWindow: ").append(toIndentedString(backupImageTargetWindow)).append("\n");
    sb.append("    clickTags: ").append(toIndentedString(clickTags)).append("\n");
    sb.append("    commercialId: ").append(toIndentedString(commercialId)).append("\n");
    sb.append("    companionCreatives: ").append(toIndentedString(companionCreatives)).append("\n");
    sb.append("    compatibility: ").append(toIndentedString(compatibility)).append("\n");
    sb.append("    convertFlashToHtml5: ").append(toIndentedString(convertFlashToHtml5)).append("\n");
    sb.append("    counterCustomEvents: ").append(toIndentedString(counterCustomEvents)).append("\n");
    sb.append("    creativeAssetSelection: ").append(toIndentedString(creativeAssetSelection)).append("\n");
    sb.append("    creativeAssets: ").append(toIndentedString(creativeAssets)).append("\n");
    sb.append("    creativeFieldAssignments: ").append(toIndentedString(creativeFieldAssignments)).append("\n");
    sb.append("    customKeyValues: ").append(toIndentedString(customKeyValues)).append("\n");
    sb.append("    dynamicAssetSelection: ").append(toIndentedString(dynamicAssetSelection)).append("\n");
    sb.append("    exitCustomEvents: ").append(toIndentedString(exitCustomEvents)).append("\n");
    sb.append("    fsCommand: ").append(toIndentedString(fsCommand)).append("\n");
    sb.append("    htmlCode: ").append(toIndentedString(htmlCode)).append("\n");
    sb.append("    htmlCodeLocked: ").append(toIndentedString(htmlCodeLocked)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    idDimensionValue: ").append(toIndentedString(idDimensionValue)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    lastModifiedInfo: ").append(toIndentedString(lastModifiedInfo)).append("\n");
    sb.append("    latestTraffickedCreativeId: ").append(toIndentedString(latestTraffickedCreativeId)).append("\n");
    sb.append("    mediaDescription: ").append(toIndentedString(mediaDescription)).append("\n");
    sb.append("    mediaDuration: ").append(toIndentedString(mediaDuration)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    overrideCss: ").append(toIndentedString(overrideCss)).append("\n");
    sb.append("    progressOffset: ").append(toIndentedString(progressOffset)).append("\n");
    sb.append("    redirectUrl: ").append(toIndentedString(redirectUrl)).append("\n");
    sb.append("    renderingId: ").append(toIndentedString(renderingId)).append("\n");
    sb.append("    renderingIdDimensionValue: ").append(toIndentedString(renderingIdDimensionValue)).append("\n");
    sb.append("    requiredFlashPluginVersion: ").append(toIndentedString(requiredFlashPluginVersion)).append("\n");
    sb.append("    requiredFlashVersion: ").append(toIndentedString(requiredFlashVersion)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    skipOffset: ").append(toIndentedString(skipOffset)).append("\n");
    sb.append("    skippable: ").append(toIndentedString(skippable)).append("\n");
    sb.append("    sslCompliant: ").append(toIndentedString(sslCompliant)).append("\n");
    sb.append("    sslOverride: ").append(toIndentedString(sslOverride)).append("\n");
    sb.append("    studioAdvertiserId: ").append(toIndentedString(studioAdvertiserId)).append("\n");
    sb.append("    studioCreativeId: ").append(toIndentedString(studioCreativeId)).append("\n");
    sb.append("    studioTraffickedCreativeId: ").append(toIndentedString(studioTraffickedCreativeId)).append("\n");
    sb.append("    subaccountId: ").append(toIndentedString(subaccountId)).append("\n");
    sb.append("    thirdPartyBackupImageImpressionsUrl: ").append(toIndentedString(thirdPartyBackupImageImpressionsUrl)).append("\n");
    sb.append("    thirdPartyRichMediaImpressionsUrl: ").append(toIndentedString(thirdPartyRichMediaImpressionsUrl)).append("\n");
    sb.append("    thirdPartyUrls: ").append(toIndentedString(thirdPartyUrls)).append("\n");
    sb.append("    timerCustomEvents: ").append(toIndentedString(timerCustomEvents)).append("\n");
    sb.append("    totalFileSize: ").append(toIndentedString(totalFileSize)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    universalAdId: ").append(toIndentedString(universalAdId)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("active");
    openapiFields.add("adParameters");
    openapiFields.add("adTagKeys");
    openapiFields.add("additionalSizes");
    openapiFields.add("advertiserId");
    openapiFields.add("allowScriptAccess");
    openapiFields.add("archived");
    openapiFields.add("artworkType");
    openapiFields.add("authoringSource");
    openapiFields.add("authoringTool");
    openapiFields.add("autoAdvanceImages");
    openapiFields.add("backgroundColor");
    openapiFields.add("backupImageClickThroughUrl");
    openapiFields.add("backupImageFeatures");
    openapiFields.add("backupImageReportingLabel");
    openapiFields.add("backupImageTargetWindow");
    openapiFields.add("clickTags");
    openapiFields.add("commercialId");
    openapiFields.add("companionCreatives");
    openapiFields.add("compatibility");
    openapiFields.add("convertFlashToHtml5");
    openapiFields.add("counterCustomEvents");
    openapiFields.add("creativeAssetSelection");
    openapiFields.add("creativeAssets");
    openapiFields.add("creativeFieldAssignments");
    openapiFields.add("customKeyValues");
    openapiFields.add("dynamicAssetSelection");
    openapiFields.add("exitCustomEvents");
    openapiFields.add("fsCommand");
    openapiFields.add("htmlCode");
    openapiFields.add("htmlCodeLocked");
    openapiFields.add("id");
    openapiFields.add("idDimensionValue");
    openapiFields.add("kind");
    openapiFields.add("lastModifiedInfo");
    openapiFields.add("latestTraffickedCreativeId");
    openapiFields.add("mediaDescription");
    openapiFields.add("mediaDuration");
    openapiFields.add("name");
    openapiFields.add("overrideCss");
    openapiFields.add("progressOffset");
    openapiFields.add("redirectUrl");
    openapiFields.add("renderingId");
    openapiFields.add("renderingIdDimensionValue");
    openapiFields.add("requiredFlashPluginVersion");
    openapiFields.add("requiredFlashVersion");
    openapiFields.add("size");
    openapiFields.add("skipOffset");
    openapiFields.add("skippable");
    openapiFields.add("sslCompliant");
    openapiFields.add("sslOverride");
    openapiFields.add("studioAdvertiserId");
    openapiFields.add("studioCreativeId");
    openapiFields.add("studioTraffickedCreativeId");
    openapiFields.add("subaccountId");
    openapiFields.add("thirdPartyBackupImageImpressionsUrl");
    openapiFields.add("thirdPartyRichMediaImpressionsUrl");
    openapiFields.add("thirdPartyUrls");
    openapiFields.add("timerCustomEvents");
    openapiFields.add("totalFileSize");
    openapiFields.add("type");
    openapiFields.add("universalAdId");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Creative
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Creative.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Creative is not found in the empty JSON string", Creative.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Creative.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Creative` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if ((jsonObj.get("adParameters") != null && !jsonObj.get("adParameters").isJsonNull()) && !jsonObj.get("adParameters").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adParameters` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adParameters").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("adTagKeys") != null && !jsonObj.get("adTagKeys").isJsonNull() && !jsonObj.get("adTagKeys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `adTagKeys` to be an array in the JSON string but got `%s`", jsonObj.get("adTagKeys").toString()));
      }
      if (jsonObj.get("additionalSizes") != null && !jsonObj.get("additionalSizes").isJsonNull()) {
        JsonArray jsonArrayadditionalSizes = jsonObj.getAsJsonArray("additionalSizes");
        if (jsonArrayadditionalSizes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalSizes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalSizes` to be an array in the JSON string but got `%s`", jsonObj.get("additionalSizes").toString()));
          }

          // validate the optional field `additionalSizes` (array)
          for (int i = 0; i < jsonArrayadditionalSizes.size(); i++) {
            Size.validateJsonElement(jsonArrayadditionalSizes.get(i));
          };
        }
      }
      if ((jsonObj.get("advertiserId") != null && !jsonObj.get("advertiserId").isJsonNull()) && !jsonObj.get("advertiserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advertiserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advertiserId").toString()));
      }
      if ((jsonObj.get("artworkType") != null && !jsonObj.get("artworkType").isJsonNull()) && !jsonObj.get("artworkType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artworkType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artworkType").toString()));
      }
      // validate the optional field `artworkType`
      if (jsonObj.get("artworkType") != null && !jsonObj.get("artworkType").isJsonNull()) {
        ArtworkTypeEnum.validateJsonElement(jsonObj.get("artworkType"));
      }
      if ((jsonObj.get("authoringSource") != null && !jsonObj.get("authoringSource").isJsonNull()) && !jsonObj.get("authoringSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authoringSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authoringSource").toString()));
      }
      // validate the optional field `authoringSource`
      if (jsonObj.get("authoringSource") != null && !jsonObj.get("authoringSource").isJsonNull()) {
        AuthoringSourceEnum.validateJsonElement(jsonObj.get("authoringSource"));
      }
      if ((jsonObj.get("authoringTool") != null && !jsonObj.get("authoringTool").isJsonNull()) && !jsonObj.get("authoringTool").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authoringTool` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authoringTool").toString()));
      }
      // validate the optional field `authoringTool`
      if (jsonObj.get("authoringTool") != null && !jsonObj.get("authoringTool").isJsonNull()) {
        AuthoringToolEnum.validateJsonElement(jsonObj.get("authoringTool"));
      }
      if ((jsonObj.get("backgroundColor") != null && !jsonObj.get("backgroundColor").isJsonNull()) && !jsonObj.get("backgroundColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backgroundColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backgroundColor").toString()));
      }
      // validate the optional field `backupImageClickThroughUrl`
      if (jsonObj.get("backupImageClickThroughUrl") != null && !jsonObj.get("backupImageClickThroughUrl").isJsonNull()) {
        CreativeClickThroughUrl.validateJsonElement(jsonObj.get("backupImageClickThroughUrl"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("backupImageFeatures") != null && !jsonObj.get("backupImageFeatures").isJsonNull() && !jsonObj.get("backupImageFeatures").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `backupImageFeatures` to be an array in the JSON string but got `%s`", jsonObj.get("backupImageFeatures").toString()));
      }
      if ((jsonObj.get("backupImageReportingLabel") != null && !jsonObj.get("backupImageReportingLabel").isJsonNull()) && !jsonObj.get("backupImageReportingLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backupImageReportingLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backupImageReportingLabel").toString()));
      }
      // validate the optional field `backupImageTargetWindow`
      if (jsonObj.get("backupImageTargetWindow") != null && !jsonObj.get("backupImageTargetWindow").isJsonNull()) {
        TargetWindow.validateJsonElement(jsonObj.get("backupImageTargetWindow"));
      }
      if (jsonObj.get("clickTags") != null && !jsonObj.get("clickTags").isJsonNull()) {
        JsonArray jsonArrayclickTags = jsonObj.getAsJsonArray("clickTags");
        if (jsonArrayclickTags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("clickTags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `clickTags` to be an array in the JSON string but got `%s`", jsonObj.get("clickTags").toString()));
          }

          // validate the optional field `clickTags` (array)
          for (int i = 0; i < jsonArrayclickTags.size(); i++) {
            ClickTag.validateJsonElement(jsonArrayclickTags.get(i));
          };
        }
      }
      if ((jsonObj.get("commercialId") != null && !jsonObj.get("commercialId").isJsonNull()) && !jsonObj.get("commercialId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commercialId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commercialId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("companionCreatives") != null && !jsonObj.get("companionCreatives").isJsonNull() && !jsonObj.get("companionCreatives").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `companionCreatives` to be an array in the JSON string but got `%s`", jsonObj.get("companionCreatives").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("compatibility") != null && !jsonObj.get("compatibility").isJsonNull() && !jsonObj.get("compatibility").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `compatibility` to be an array in the JSON string but got `%s`", jsonObj.get("compatibility").toString()));
      }
      if (jsonObj.get("counterCustomEvents") != null && !jsonObj.get("counterCustomEvents").isJsonNull()) {
        JsonArray jsonArraycounterCustomEvents = jsonObj.getAsJsonArray("counterCustomEvents");
        if (jsonArraycounterCustomEvents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("counterCustomEvents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `counterCustomEvents` to be an array in the JSON string but got `%s`", jsonObj.get("counterCustomEvents").toString()));
          }

          // validate the optional field `counterCustomEvents` (array)
          for (int i = 0; i < jsonArraycounterCustomEvents.size(); i++) {
            CreativeCustomEvent.validateJsonElement(jsonArraycounterCustomEvents.get(i));
          };
        }
      }
      // validate the optional field `creativeAssetSelection`
      if (jsonObj.get("creativeAssetSelection") != null && !jsonObj.get("creativeAssetSelection").isJsonNull()) {
        CreativeAssetSelection.validateJsonElement(jsonObj.get("creativeAssetSelection"));
      }
      if (jsonObj.get("creativeAssets") != null && !jsonObj.get("creativeAssets").isJsonNull()) {
        JsonArray jsonArraycreativeAssets = jsonObj.getAsJsonArray("creativeAssets");
        if (jsonArraycreativeAssets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("creativeAssets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `creativeAssets` to be an array in the JSON string but got `%s`", jsonObj.get("creativeAssets").toString()));
          }

          // validate the optional field `creativeAssets` (array)
          for (int i = 0; i < jsonArraycreativeAssets.size(); i++) {
            CreativeAsset.validateJsonElement(jsonArraycreativeAssets.get(i));
          };
        }
      }
      if (jsonObj.get("creativeFieldAssignments") != null && !jsonObj.get("creativeFieldAssignments").isJsonNull()) {
        JsonArray jsonArraycreativeFieldAssignments = jsonObj.getAsJsonArray("creativeFieldAssignments");
        if (jsonArraycreativeFieldAssignments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("creativeFieldAssignments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `creativeFieldAssignments` to be an array in the JSON string but got `%s`", jsonObj.get("creativeFieldAssignments").toString()));
          }

          // validate the optional field `creativeFieldAssignments` (array)
          for (int i = 0; i < jsonArraycreativeFieldAssignments.size(); i++) {
            CreativeFieldAssignment.validateJsonElement(jsonArraycreativeFieldAssignments.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("customKeyValues") != null && !jsonObj.get("customKeyValues").isJsonNull() && !jsonObj.get("customKeyValues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `customKeyValues` to be an array in the JSON string but got `%s`", jsonObj.get("customKeyValues").toString()));
      }
      if (jsonObj.get("exitCustomEvents") != null && !jsonObj.get("exitCustomEvents").isJsonNull()) {
        JsonArray jsonArrayexitCustomEvents = jsonObj.getAsJsonArray("exitCustomEvents");
        if (jsonArrayexitCustomEvents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("exitCustomEvents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `exitCustomEvents` to be an array in the JSON string but got `%s`", jsonObj.get("exitCustomEvents").toString()));
          }

          // validate the optional field `exitCustomEvents` (array)
          for (int i = 0; i < jsonArrayexitCustomEvents.size(); i++) {
            CreativeCustomEvent.validateJsonElement(jsonArrayexitCustomEvents.get(i));
          };
        }
      }
      // validate the optional field `fsCommand`
      if (jsonObj.get("fsCommand") != null && !jsonObj.get("fsCommand").isJsonNull()) {
        FsCommand.validateJsonElement(jsonObj.get("fsCommand"));
      }
      if ((jsonObj.get("htmlCode") != null && !jsonObj.get("htmlCode").isJsonNull()) && !jsonObj.get("htmlCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `htmlCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("htmlCode").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `idDimensionValue`
      if (jsonObj.get("idDimensionValue") != null && !jsonObj.get("idDimensionValue").isJsonNull()) {
        DimensionValue.validateJsonElement(jsonObj.get("idDimensionValue"));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `lastModifiedInfo`
      if (jsonObj.get("lastModifiedInfo") != null && !jsonObj.get("lastModifiedInfo").isJsonNull()) {
        LastModifiedInfo.validateJsonElement(jsonObj.get("lastModifiedInfo"));
      }
      if ((jsonObj.get("latestTraffickedCreativeId") != null && !jsonObj.get("latestTraffickedCreativeId").isJsonNull()) && !jsonObj.get("latestTraffickedCreativeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `latestTraffickedCreativeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("latestTraffickedCreativeId").toString()));
      }
      if ((jsonObj.get("mediaDescription") != null && !jsonObj.get("mediaDescription").isJsonNull()) && !jsonObj.get("mediaDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mediaDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mediaDescription").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("overrideCss") != null && !jsonObj.get("overrideCss").isJsonNull()) && !jsonObj.get("overrideCss").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `overrideCss` to be a primitive type in the JSON string but got `%s`", jsonObj.get("overrideCss").toString()));
      }
      // validate the optional field `progressOffset`
      if (jsonObj.get("progressOffset") != null && !jsonObj.get("progressOffset").isJsonNull()) {
        VideoOffset.validateJsonElement(jsonObj.get("progressOffset"));
      }
      if ((jsonObj.get("redirectUrl") != null && !jsonObj.get("redirectUrl").isJsonNull()) && !jsonObj.get("redirectUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirectUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirectUrl").toString()));
      }
      if ((jsonObj.get("renderingId") != null && !jsonObj.get("renderingId").isJsonNull()) && !jsonObj.get("renderingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `renderingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("renderingId").toString()));
      }
      // validate the optional field `renderingIdDimensionValue`
      if (jsonObj.get("renderingIdDimensionValue") != null && !jsonObj.get("renderingIdDimensionValue").isJsonNull()) {
        DimensionValue.validateJsonElement(jsonObj.get("renderingIdDimensionValue"));
      }
      if ((jsonObj.get("requiredFlashPluginVersion") != null && !jsonObj.get("requiredFlashPluginVersion").isJsonNull()) && !jsonObj.get("requiredFlashPluginVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requiredFlashPluginVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requiredFlashPluginVersion").toString()));
      }
      // validate the optional field `size`
      if (jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) {
        Size.validateJsonElement(jsonObj.get("size"));
      }
      // validate the optional field `skipOffset`
      if (jsonObj.get("skipOffset") != null && !jsonObj.get("skipOffset").isJsonNull()) {
        VideoOffset.validateJsonElement(jsonObj.get("skipOffset"));
      }
      if ((jsonObj.get("studioAdvertiserId") != null && !jsonObj.get("studioAdvertiserId").isJsonNull()) && !jsonObj.get("studioAdvertiserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `studioAdvertiserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("studioAdvertiserId").toString()));
      }
      if ((jsonObj.get("studioCreativeId") != null && !jsonObj.get("studioCreativeId").isJsonNull()) && !jsonObj.get("studioCreativeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `studioCreativeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("studioCreativeId").toString()));
      }
      if ((jsonObj.get("studioTraffickedCreativeId") != null && !jsonObj.get("studioTraffickedCreativeId").isJsonNull()) && !jsonObj.get("studioTraffickedCreativeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `studioTraffickedCreativeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("studioTraffickedCreativeId").toString()));
      }
      if ((jsonObj.get("subaccountId") != null && !jsonObj.get("subaccountId").isJsonNull()) && !jsonObj.get("subaccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subaccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subaccountId").toString()));
      }
      if ((jsonObj.get("thirdPartyBackupImageImpressionsUrl") != null && !jsonObj.get("thirdPartyBackupImageImpressionsUrl").isJsonNull()) && !jsonObj.get("thirdPartyBackupImageImpressionsUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thirdPartyBackupImageImpressionsUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thirdPartyBackupImageImpressionsUrl").toString()));
      }
      if ((jsonObj.get("thirdPartyRichMediaImpressionsUrl") != null && !jsonObj.get("thirdPartyRichMediaImpressionsUrl").isJsonNull()) && !jsonObj.get("thirdPartyRichMediaImpressionsUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thirdPartyRichMediaImpressionsUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thirdPartyRichMediaImpressionsUrl").toString()));
      }
      if (jsonObj.get("thirdPartyUrls") != null && !jsonObj.get("thirdPartyUrls").isJsonNull()) {
        JsonArray jsonArraythirdPartyUrls = jsonObj.getAsJsonArray("thirdPartyUrls");
        if (jsonArraythirdPartyUrls != null) {
          // ensure the json data is an array
          if (!jsonObj.get("thirdPartyUrls").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `thirdPartyUrls` to be an array in the JSON string but got `%s`", jsonObj.get("thirdPartyUrls").toString()));
          }

          // validate the optional field `thirdPartyUrls` (array)
          for (int i = 0; i < jsonArraythirdPartyUrls.size(); i++) {
            ThirdPartyTrackingUrl.validateJsonElement(jsonArraythirdPartyUrls.get(i));
          };
        }
      }
      if (jsonObj.get("timerCustomEvents") != null && !jsonObj.get("timerCustomEvents").isJsonNull()) {
        JsonArray jsonArraytimerCustomEvents = jsonObj.getAsJsonArray("timerCustomEvents");
        if (jsonArraytimerCustomEvents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("timerCustomEvents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `timerCustomEvents` to be an array in the JSON string but got `%s`", jsonObj.get("timerCustomEvents").toString()));
          }

          // validate the optional field `timerCustomEvents` (array)
          for (int i = 0; i < jsonArraytimerCustomEvents.size(); i++) {
            CreativeCustomEvent.validateJsonElement(jsonArraytimerCustomEvents.get(i));
          };
        }
      }
      if ((jsonObj.get("totalFileSize") != null && !jsonObj.get("totalFileSize").isJsonNull()) && !jsonObj.get("totalFileSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalFileSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalFileSize").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      // validate the optional field `universalAdId`
      if (jsonObj.get("universalAdId") != null && !jsonObj.get("universalAdId").isJsonNull()) {
        UniversalAdId.validateJsonElement(jsonObj.get("universalAdId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Creative.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Creative' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Creative> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Creative.class));

       return (TypeAdapter<T>) new TypeAdapter<Creative>() {
           @Override
           public void write(JsonWriter out, Creative value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Creative read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Creative given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Creative
   * @throws IOException if the JSON string is invalid with respect to Creative
   */
  public static Creative fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Creative.class);
  }

  /**
   * Convert an instance of Creative to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

