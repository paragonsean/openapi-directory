/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ClickTag;
import org.openapitools.client.model.CreativeAssetId;
import org.openapitools.client.model.DimensionValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreativeAssets contains properties of a creative asset file which will be uploaded or has already been uploaded. Refer to the creative sample code for how to upload assets and insert a creative.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:12.851901-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreativeAssetMetadata {
  public static final String SERIALIZED_NAME_ASSET_IDENTIFIER = "assetIdentifier";
  @SerializedName(SERIALIZED_NAME_ASSET_IDENTIFIER)
  private CreativeAssetId assetIdentifier;

  public static final String SERIALIZED_NAME_CLICK_TAGS = "clickTags";
  @SerializedName(SERIALIZED_NAME_CLICK_TAGS)
  private List<ClickTag> clickTags = new ArrayList<>();

  /**
   * Gets or Sets detectedFeatures
   */
  @JsonAdapter(DetectedFeaturesEnum.Adapter.class)
  public enum DetectedFeaturesEnum {
    CSS_FONT_FACE("CSS_FONT_FACE"),
    
    CSS_BACKGROUND_SIZE("CSS_BACKGROUND_SIZE"),
    
    CSS_BORDER_IMAGE("CSS_BORDER_IMAGE"),
    
    CSS_BORDER_RADIUS("CSS_BORDER_RADIUS"),
    
    CSS_BOX_SHADOW("CSS_BOX_SHADOW"),
    
    CSS_FLEX_BOX("CSS_FLEX_BOX"),
    
    CSS_HSLA("CSS_HSLA"),
    
    CSS_MULTIPLE_BGS("CSS_MULTIPLE_BGS"),
    
    CSS_OPACITY("CSS_OPACITY"),
    
    CSS_RGBA("CSS_RGBA"),
    
    CSS_TEXT_SHADOW("CSS_TEXT_SHADOW"),
    
    CSS_ANIMATIONS("CSS_ANIMATIONS"),
    
    CSS_COLUMNS("CSS_COLUMNS"),
    
    CSS_GENERATED_CONTENT("CSS_GENERATED_CONTENT"),
    
    CSS_GRADIENTS("CSS_GRADIENTS"),
    
    CSS_REFLECTIONS("CSS_REFLECTIONS"),
    
    CSS_TRANSFORMS("CSS_TRANSFORMS"),
    
    CSS_TRANSFORMS3_D("CSS_TRANSFORMS3D"),
    
    CSS_TRANSITIONS("CSS_TRANSITIONS"),
    
    APPLICATION_CACHE("APPLICATION_CACHE"),
    
    CANVAS("CANVAS"),
    
    CANVAS_TEXT("CANVAS_TEXT"),
    
    DRAG_AND_DROP("DRAG_AND_DROP"),
    
    HASH_CHANGE("HASH_CHANGE"),
    
    HISTORY("HISTORY"),
    
    AUDIO("AUDIO"),
    
    VIDEO("VIDEO"),
    
    INDEXED_DB("INDEXED_DB"),
    
    INPUT_ATTR_AUTOCOMPLETE("INPUT_ATTR_AUTOCOMPLETE"),
    
    INPUT_ATTR_AUTOFOCUS("INPUT_ATTR_AUTOFOCUS"),
    
    INPUT_ATTR_LIST("INPUT_ATTR_LIST"),
    
    INPUT_ATTR_PLACEHOLDER("INPUT_ATTR_PLACEHOLDER"),
    
    INPUT_ATTR_MAX("INPUT_ATTR_MAX"),
    
    INPUT_ATTR_MIN("INPUT_ATTR_MIN"),
    
    INPUT_ATTR_MULTIPLE("INPUT_ATTR_MULTIPLE"),
    
    INPUT_ATTR_PATTERN("INPUT_ATTR_PATTERN"),
    
    INPUT_ATTR_REQUIRED("INPUT_ATTR_REQUIRED"),
    
    INPUT_ATTR_STEP("INPUT_ATTR_STEP"),
    
    INPUT_TYPE_SEARCH("INPUT_TYPE_SEARCH"),
    
    INPUT_TYPE_TEL("INPUT_TYPE_TEL"),
    
    INPUT_TYPE_URL("INPUT_TYPE_URL"),
    
    INPUT_TYPE_EMAIL("INPUT_TYPE_EMAIL"),
    
    INPUT_TYPE_DATETIME("INPUT_TYPE_DATETIME"),
    
    INPUT_TYPE_DATE("INPUT_TYPE_DATE"),
    
    INPUT_TYPE_MONTH("INPUT_TYPE_MONTH"),
    
    INPUT_TYPE_WEEK("INPUT_TYPE_WEEK"),
    
    INPUT_TYPE_TIME("INPUT_TYPE_TIME"),
    
    INPUT_TYPE_DATETIME_LOCAL("INPUT_TYPE_DATETIME_LOCAL"),
    
    INPUT_TYPE_NUMBER("INPUT_TYPE_NUMBER"),
    
    INPUT_TYPE_RANGE("INPUT_TYPE_RANGE"),
    
    INPUT_TYPE_COLOR("INPUT_TYPE_COLOR"),
    
    LOCAL_STORAGE("LOCAL_STORAGE"),
    
    POST_MESSAGE("POST_MESSAGE"),
    
    SESSION_STORAGE("SESSION_STORAGE"),
    
    WEB_SOCKETS("WEB_SOCKETS"),
    
    WEB_SQL_DATABASE("WEB_SQL_DATABASE"),
    
    WEB_WORKERS("WEB_WORKERS"),
    
    GEO_LOCATION("GEO_LOCATION"),
    
    INLINE_SVG("INLINE_SVG"),
    
    SMIL("SMIL"),
    
    SVG_HREF("SVG_HREF"),
    
    SVG_CLIP_PATHS("SVG_CLIP_PATHS"),
    
    TOUCH("TOUCH"),
    
    WEBGL("WEBGL"),
    
    SVG_FILTERS("SVG_FILTERS"),
    
    SVG_FE_IMAGE("SVG_FE_IMAGE");

    private String value;

    DetectedFeaturesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DetectedFeaturesEnum fromValue(String value) {
      for (DetectedFeaturesEnum b : DetectedFeaturesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DetectedFeaturesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DetectedFeaturesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DetectedFeaturesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DetectedFeaturesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DetectedFeaturesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DETECTED_FEATURES = "detectedFeatures";
  @SerializedName(SERIALIZED_NAME_DETECTED_FEATURES)
  private List<DetectedFeaturesEnum> detectedFeatures = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ID_DIMENSION_VALUE = "idDimensionValue";
  @SerializedName(SERIALIZED_NAME_ID_DIMENSION_VALUE)
  private DimensionValue idDimensionValue;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  /**
   * Gets or Sets warnedValidationRules
   */
  @JsonAdapter(WarnedValidationRulesEnum.Adapter.class)
  public enum WarnedValidationRulesEnum {
    CLICK_TAG_NON_TOP_LEVEL("CLICK_TAG_NON_TOP_LEVEL"),
    
    CLICK_TAG_MISSING("CLICK_TAG_MISSING"),
    
    CLICK_TAG_MORE_THAN_ONE("CLICK_TAG_MORE_THAN_ONE"),
    
    CLICK_TAG_INVALID("CLICK_TAG_INVALID"),
    
    ORPHANED_ASSET("ORPHANED_ASSET"),
    
    PRIMARY_HTML_MISSING("PRIMARY_HTML_MISSING"),
    
    EXTERNAL_FILE_REFERENCED("EXTERNAL_FILE_REFERENCED"),
    
    MRAID_REFERENCED("MRAID_REFERENCED"),
    
    ADMOB_REFERENCED("ADMOB_REFERENCED"),
    
    FILE_TYPE_INVALID("FILE_TYPE_INVALID"),
    
    ZIP_INVALID("ZIP_INVALID"),
    
    LINKED_FILE_NOT_FOUND("LINKED_FILE_NOT_FOUND"),
    
    MAX_FLASH_VERSION_11("MAX_FLASH_VERSION_11"),
    
    NOT_SSL_COMPLIANT("NOT_SSL_COMPLIANT"),
    
    FILE_DETAIL_EMPTY("FILE_DETAIL_EMPTY"),
    
    ASSET_INVALID("ASSET_INVALID"),
    
    GWD_PROPERTIES_INVALID("GWD_PROPERTIES_INVALID"),
    
    ENABLER_UNSUPPORTED_METHOD_DCM("ENABLER_UNSUPPORTED_METHOD_DCM"),
    
    ASSET_FORMAT_UNSUPPORTED_DCM("ASSET_FORMAT_UNSUPPORTED_DCM"),
    
    COMPONENT_UNSUPPORTED_DCM("COMPONENT_UNSUPPORTED_DCM"),
    
    HTML5_FEATURE_UNSUPPORTED("HTML5_FEATURE_UNSUPPORTED"),
    
    CLICK_TAG_IN_GWD("CLICK_TAG_IN_GWD"),
    
    CLICK_TAG_HARD_CODED("CLICK_TAG_HARD_CODED"),
    
    SVG_INVALID("SVG_INVALID"),
    
    CLICK_TAG_IN_RICH_MEDIA("CLICK_TAG_IN_RICH_MEDIA");

    private String value;

    WarnedValidationRulesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WarnedValidationRulesEnum fromValue(String value) {
      for (WarnedValidationRulesEnum b : WarnedValidationRulesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WarnedValidationRulesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WarnedValidationRulesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WarnedValidationRulesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WarnedValidationRulesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WarnedValidationRulesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WARNED_VALIDATION_RULES = "warnedValidationRules";
  @SerializedName(SERIALIZED_NAME_WARNED_VALIDATION_RULES)
  private List<WarnedValidationRulesEnum> warnedValidationRules = new ArrayList<>();

  public CreativeAssetMetadata() {
  }

  public CreativeAssetMetadata assetIdentifier(CreativeAssetId assetIdentifier) {
    this.assetIdentifier = assetIdentifier;
    return this;
  }

  /**
   * Get assetIdentifier
   * @return assetIdentifier
   */
  @javax.annotation.Nullable
  public CreativeAssetId getAssetIdentifier() {
    return assetIdentifier;
  }

  public void setAssetIdentifier(CreativeAssetId assetIdentifier) {
    this.assetIdentifier = assetIdentifier;
  }


  public CreativeAssetMetadata clickTags(List<ClickTag> clickTags) {
    this.clickTags = clickTags;
    return this;
  }

  public CreativeAssetMetadata addClickTagsItem(ClickTag clickTagsItem) {
    if (this.clickTags == null) {
      this.clickTags = new ArrayList<>();
    }
    this.clickTags.add(clickTagsItem);
    return this;
  }

  /**
   * List of detected click tags for assets. This is a read-only, auto-generated field. This field is empty for a rich media asset.
   * @return clickTags
   */
  @javax.annotation.Nullable
  public List<ClickTag> getClickTags() {
    return clickTags;
  }

  public void setClickTags(List<ClickTag> clickTags) {
    this.clickTags = clickTags;
  }


  public CreativeAssetMetadata detectedFeatures(List<DetectedFeaturesEnum> detectedFeatures) {
    this.detectedFeatures = detectedFeatures;
    return this;
  }

  public CreativeAssetMetadata addDetectedFeaturesItem(DetectedFeaturesEnum detectedFeaturesItem) {
    if (this.detectedFeatures == null) {
      this.detectedFeatures = new ArrayList<>();
    }
    this.detectedFeatures.add(detectedFeaturesItem);
    return this;
  }

  /**
   * List of feature dependencies for the creative asset that are detected by Campaign Manager. Feature dependencies are features that a browser must be able to support in order to render your HTML5 creative correctly. This is a read-only, auto-generated field.
   * @return detectedFeatures
   */
  @javax.annotation.Nullable
  public List<DetectedFeaturesEnum> getDetectedFeatures() {
    return detectedFeatures;
  }

  public void setDetectedFeatures(List<DetectedFeaturesEnum> detectedFeatures) {
    this.detectedFeatures = detectedFeatures;
  }


  public CreativeAssetMetadata id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Numeric ID of the asset. This is a read-only, auto-generated field.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CreativeAssetMetadata idDimensionValue(DimensionValue idDimensionValue) {
    this.idDimensionValue = idDimensionValue;
    return this;
  }

  /**
   * Get idDimensionValue
   * @return idDimensionValue
   */
  @javax.annotation.Nullable
  public DimensionValue getIdDimensionValue() {
    return idDimensionValue;
  }

  public void setIdDimensionValue(DimensionValue idDimensionValue) {
    this.idDimensionValue = idDimensionValue;
  }


  public CreativeAssetMetadata kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string \&quot;dfareporting#creativeAssetMetadata\&quot;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public CreativeAssetMetadata warnedValidationRules(List<WarnedValidationRulesEnum> warnedValidationRules) {
    this.warnedValidationRules = warnedValidationRules;
    return this;
  }

  public CreativeAssetMetadata addWarnedValidationRulesItem(WarnedValidationRulesEnum warnedValidationRulesItem) {
    if (this.warnedValidationRules == null) {
      this.warnedValidationRules = new ArrayList<>();
    }
    this.warnedValidationRules.add(warnedValidationRulesItem);
    return this;
  }

  /**
   * Rules validated during code generation that generated a warning. This is a read-only, auto-generated field. Possible values are: - \&quot;ADMOB_REFERENCED\&quot; - \&quot;ASSET_FORMAT_UNSUPPORTED_DCM\&quot; - \&quot;ASSET_INVALID\&quot; - \&quot;CLICK_TAG_HARD_CODED\&quot; - \&quot;CLICK_TAG_INVALID\&quot; - \&quot;CLICK_TAG_IN_GWD\&quot; - \&quot;CLICK_TAG_MISSING\&quot; - \&quot;CLICK_TAG_MORE_THAN_ONE\&quot; - \&quot;CLICK_TAG_NON_TOP_LEVEL\&quot; - \&quot;COMPONENT_UNSUPPORTED_DCM\&quot; - \&quot;ENABLER_UNSUPPORTED_METHOD_DCM\&quot; - \&quot;EXTERNAL_FILE_REFERENCED\&quot; - \&quot;FILE_DETAIL_EMPTY\&quot; - \&quot;FILE_TYPE_INVALID\&quot; - \&quot;GWD_PROPERTIES_INVALID\&quot; - \&quot;HTML5_FEATURE_UNSUPPORTED\&quot; - \&quot;LINKED_FILE_NOT_FOUND\&quot; - \&quot;MAX_FLASH_VERSION_11\&quot; - \&quot;MRAID_REFERENCED\&quot; - \&quot;NOT_SSL_COMPLIANT\&quot; - \&quot;ORPHANED_ASSET\&quot; - \&quot;PRIMARY_HTML_MISSING\&quot; - \&quot;SVG_INVALID\&quot; - \&quot;ZIP_INVALID\&quot; 
   * @return warnedValidationRules
   */
  @javax.annotation.Nullable
  public List<WarnedValidationRulesEnum> getWarnedValidationRules() {
    return warnedValidationRules;
  }

  public void setWarnedValidationRules(List<WarnedValidationRulesEnum> warnedValidationRules) {
    this.warnedValidationRules = warnedValidationRules;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreativeAssetMetadata creativeAssetMetadata = (CreativeAssetMetadata) o;
    return Objects.equals(this.assetIdentifier, creativeAssetMetadata.assetIdentifier) &&
        Objects.equals(this.clickTags, creativeAssetMetadata.clickTags) &&
        Objects.equals(this.detectedFeatures, creativeAssetMetadata.detectedFeatures) &&
        Objects.equals(this.id, creativeAssetMetadata.id) &&
        Objects.equals(this.idDimensionValue, creativeAssetMetadata.idDimensionValue) &&
        Objects.equals(this.kind, creativeAssetMetadata.kind) &&
        Objects.equals(this.warnedValidationRules, creativeAssetMetadata.warnedValidationRules);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assetIdentifier, clickTags, detectedFeatures, id, idDimensionValue, kind, warnedValidationRules);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreativeAssetMetadata {\n");
    sb.append("    assetIdentifier: ").append(toIndentedString(assetIdentifier)).append("\n");
    sb.append("    clickTags: ").append(toIndentedString(clickTags)).append("\n");
    sb.append("    detectedFeatures: ").append(toIndentedString(detectedFeatures)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    idDimensionValue: ").append(toIndentedString(idDimensionValue)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    warnedValidationRules: ").append(toIndentedString(warnedValidationRules)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assetIdentifier");
    openapiFields.add("clickTags");
    openapiFields.add("detectedFeatures");
    openapiFields.add("id");
    openapiFields.add("idDimensionValue");
    openapiFields.add("kind");
    openapiFields.add("warnedValidationRules");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreativeAssetMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreativeAssetMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreativeAssetMetadata is not found in the empty JSON string", CreativeAssetMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreativeAssetMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreativeAssetMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `assetIdentifier`
      if (jsonObj.get("assetIdentifier") != null && !jsonObj.get("assetIdentifier").isJsonNull()) {
        CreativeAssetId.validateJsonElement(jsonObj.get("assetIdentifier"));
      }
      if (jsonObj.get("clickTags") != null && !jsonObj.get("clickTags").isJsonNull()) {
        JsonArray jsonArrayclickTags = jsonObj.getAsJsonArray("clickTags");
        if (jsonArrayclickTags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("clickTags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `clickTags` to be an array in the JSON string but got `%s`", jsonObj.get("clickTags").toString()));
          }

          // validate the optional field `clickTags` (array)
          for (int i = 0; i < jsonArrayclickTags.size(); i++) {
            ClickTag.validateJsonElement(jsonArrayclickTags.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("detectedFeatures") != null && !jsonObj.get("detectedFeatures").isJsonNull() && !jsonObj.get("detectedFeatures").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `detectedFeatures` to be an array in the JSON string but got `%s`", jsonObj.get("detectedFeatures").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `idDimensionValue`
      if (jsonObj.get("idDimensionValue") != null && !jsonObj.get("idDimensionValue").isJsonNull()) {
        DimensionValue.validateJsonElement(jsonObj.get("idDimensionValue"));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("warnedValidationRules") != null && !jsonObj.get("warnedValidationRules").isJsonNull() && !jsonObj.get("warnedValidationRules").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `warnedValidationRules` to be an array in the JSON string but got `%s`", jsonObj.get("warnedValidationRules").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreativeAssetMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreativeAssetMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreativeAssetMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreativeAssetMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<CreativeAssetMetadata>() {
           @Override
           public void write(JsonWriter out, CreativeAssetMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreativeAssetMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreativeAssetMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreativeAssetMetadata
   * @throws IOException if the JSON string is invalid with respect to CreativeAssetMetadata
   */
  public static CreativeAssetMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreativeAssetMetadata.class);
  }

  /**
   * Convert an instance of CreativeAssetMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

