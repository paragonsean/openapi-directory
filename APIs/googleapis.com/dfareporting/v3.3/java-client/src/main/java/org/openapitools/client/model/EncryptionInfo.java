/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A description of how user IDs are encrypted.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:12.851901-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EncryptionInfo {
  public static final String SERIALIZED_NAME_ENCRYPTION_ENTITY_ID = "encryptionEntityId";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_ENTITY_ID)
  private String encryptionEntityId;

  /**
   * The encryption entity type. This should match the encryption configuration for ad serving or Data Transfer.
   */
  @JsonAdapter(EncryptionEntityTypeEnum.Adapter.class)
  public enum EncryptionEntityTypeEnum {
    ENCRYPTION_ENTITY_TYPE_UNKNOWN("ENCRYPTION_ENTITY_TYPE_UNKNOWN"),
    
    DCM_ACCOUNT("DCM_ACCOUNT"),
    
    DCM_ADVERTISER("DCM_ADVERTISER"),
    
    DBM_PARTNER("DBM_PARTNER"),
    
    DBM_ADVERTISER("DBM_ADVERTISER"),
    
    ADWORDS_CUSTOMER("ADWORDS_CUSTOMER"),
    
    DFP_NETWORK_CODE("DFP_NETWORK_CODE");

    private String value;

    EncryptionEntityTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EncryptionEntityTypeEnum fromValue(String value) {
      for (EncryptionEntityTypeEnum b : EncryptionEntityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EncryptionEntityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EncryptionEntityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EncryptionEntityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EncryptionEntityTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EncryptionEntityTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENCRYPTION_ENTITY_TYPE = "encryptionEntityType";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_ENTITY_TYPE)
  private EncryptionEntityTypeEnum encryptionEntityType;

  /**
   * Describes whether the encrypted cookie was received from ad serving (the %m macro) or from Data Transfer.
   */
  @JsonAdapter(EncryptionSourceEnum.Adapter.class)
  public enum EncryptionSourceEnum {
    ENCRYPTION_SCOPE_UNKNOWN("ENCRYPTION_SCOPE_UNKNOWN"),
    
    AD_SERVING("AD_SERVING"),
    
    DATA_TRANSFER("DATA_TRANSFER");

    private String value;

    EncryptionSourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EncryptionSourceEnum fromValue(String value) {
      for (EncryptionSourceEnum b : EncryptionSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EncryptionSourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EncryptionSourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EncryptionSourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EncryptionSourceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EncryptionSourceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENCRYPTION_SOURCE = "encryptionSource";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_SOURCE)
  private EncryptionSourceEnum encryptionSource;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public EncryptionInfo() {
  }

  public EncryptionInfo encryptionEntityId(String encryptionEntityId) {
    this.encryptionEntityId = encryptionEntityId;
    return this;
  }

  /**
   * The encryption entity ID. This should match the encryption configuration for ad serving or Data Transfer.
   * @return encryptionEntityId
   */
  @javax.annotation.Nullable
  public String getEncryptionEntityId() {
    return encryptionEntityId;
  }

  public void setEncryptionEntityId(String encryptionEntityId) {
    this.encryptionEntityId = encryptionEntityId;
  }


  public EncryptionInfo encryptionEntityType(EncryptionEntityTypeEnum encryptionEntityType) {
    this.encryptionEntityType = encryptionEntityType;
    return this;
  }

  /**
   * The encryption entity type. This should match the encryption configuration for ad serving or Data Transfer.
   * @return encryptionEntityType
   */
  @javax.annotation.Nullable
  public EncryptionEntityTypeEnum getEncryptionEntityType() {
    return encryptionEntityType;
  }

  public void setEncryptionEntityType(EncryptionEntityTypeEnum encryptionEntityType) {
    this.encryptionEntityType = encryptionEntityType;
  }


  public EncryptionInfo encryptionSource(EncryptionSourceEnum encryptionSource) {
    this.encryptionSource = encryptionSource;
    return this;
  }

  /**
   * Describes whether the encrypted cookie was received from ad serving (the %m macro) or from Data Transfer.
   * @return encryptionSource
   */
  @javax.annotation.Nullable
  public EncryptionSourceEnum getEncryptionSource() {
    return encryptionSource;
  }

  public void setEncryptionSource(EncryptionSourceEnum encryptionSource) {
    this.encryptionSource = encryptionSource;
  }


  public EncryptionInfo kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string \&quot;dfareporting#encryptionInfo\&quot;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EncryptionInfo encryptionInfo = (EncryptionInfo) o;
    return Objects.equals(this.encryptionEntityId, encryptionInfo.encryptionEntityId) &&
        Objects.equals(this.encryptionEntityType, encryptionInfo.encryptionEntityType) &&
        Objects.equals(this.encryptionSource, encryptionInfo.encryptionSource) &&
        Objects.equals(this.kind, encryptionInfo.kind);
  }

  @Override
  public int hashCode() {
    return Objects.hash(encryptionEntityId, encryptionEntityType, encryptionSource, kind);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EncryptionInfo {\n");
    sb.append("    encryptionEntityId: ").append(toIndentedString(encryptionEntityId)).append("\n");
    sb.append("    encryptionEntityType: ").append(toIndentedString(encryptionEntityType)).append("\n");
    sb.append("    encryptionSource: ").append(toIndentedString(encryptionSource)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("encryptionEntityId");
    openapiFields.add("encryptionEntityType");
    openapiFields.add("encryptionSource");
    openapiFields.add("kind");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EncryptionInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EncryptionInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EncryptionInfo is not found in the empty JSON string", EncryptionInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EncryptionInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EncryptionInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("encryptionEntityId") != null && !jsonObj.get("encryptionEntityId").isJsonNull()) && !jsonObj.get("encryptionEntityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptionEntityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryptionEntityId").toString()));
      }
      if ((jsonObj.get("encryptionEntityType") != null && !jsonObj.get("encryptionEntityType").isJsonNull()) && !jsonObj.get("encryptionEntityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptionEntityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryptionEntityType").toString()));
      }
      // validate the optional field `encryptionEntityType`
      if (jsonObj.get("encryptionEntityType") != null && !jsonObj.get("encryptionEntityType").isJsonNull()) {
        EncryptionEntityTypeEnum.validateJsonElement(jsonObj.get("encryptionEntityType"));
      }
      if ((jsonObj.get("encryptionSource") != null && !jsonObj.get("encryptionSource").isJsonNull()) && !jsonObj.get("encryptionSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptionSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryptionSource").toString()));
      }
      // validate the optional field `encryptionSource`
      if (jsonObj.get("encryptionSource") != null && !jsonObj.get("encryptionSource").isJsonNull()) {
        EncryptionSourceEnum.validateJsonElement(jsonObj.get("encryptionSource"));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EncryptionInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EncryptionInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EncryptionInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EncryptionInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<EncryptionInfo>() {
           @Override
           public void write(JsonWriter out, EncryptionInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EncryptionInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EncryptionInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EncryptionInfo
   * @throws IOException if the JSON string is invalid with respect to EncryptionInfo
   */
  public static EncryptionInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EncryptionInfo.class);
  }

  /**
   * Convert an instance of EncryptionInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

