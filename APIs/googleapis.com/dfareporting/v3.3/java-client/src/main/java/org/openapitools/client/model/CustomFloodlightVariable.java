/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A custom floodlight variable. This field may only be used when calling batchinsert; it is not supported by batchupdate.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:12.851901-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CustomFloodlightVariable {
  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  /**
   * The type of custom floodlight variable to supply a value for. These map to the \&quot;u[1-20]&#x3D;\&quot; in the tags.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    U1("U1"),
    
    U2("U2"),
    
    U3("U3"),
    
    U4("U4"),
    
    U5("U5"),
    
    U6("U6"),
    
    U7("U7"),
    
    U8("U8"),
    
    U9("U9"),
    
    U10("U10"),
    
    U11("U11"),
    
    U12("U12"),
    
    U13("U13"),
    
    U14("U14"),
    
    U15("U15"),
    
    U16("U16"),
    
    U17("U17"),
    
    U18("U18"),
    
    U19("U19"),
    
    U20("U20"),
    
    U21("U21"),
    
    U22("U22"),
    
    U23("U23"),
    
    U24("U24"),
    
    U25("U25"),
    
    U26("U26"),
    
    U27("U27"),
    
    U28("U28"),
    
    U29("U29"),
    
    U30("U30"),
    
    U31("U31"),
    
    U32("U32"),
    
    U33("U33"),
    
    U34("U34"),
    
    U35("U35"),
    
    U36("U36"),
    
    U37("U37"),
    
    U38("U38"),
    
    U39("U39"),
    
    U40("U40"),
    
    U41("U41"),
    
    U42("U42"),
    
    U43("U43"),
    
    U44("U44"),
    
    U45("U45"),
    
    U46("U46"),
    
    U47("U47"),
    
    U48("U48"),
    
    U49("U49"),
    
    U50("U50"),
    
    U51("U51"),
    
    U52("U52"),
    
    U53("U53"),
    
    U54("U54"),
    
    U55("U55"),
    
    U56("U56"),
    
    U57("U57"),
    
    U58("U58"),
    
    U59("U59"),
    
    U60("U60"),
    
    U61("U61"),
    
    U62("U62"),
    
    U63("U63"),
    
    U64("U64"),
    
    U65("U65"),
    
    U66("U66"),
    
    U67("U67"),
    
    U68("U68"),
    
    U69("U69"),
    
    U70("U70"),
    
    U71("U71"),
    
    U72("U72"),
    
    U73("U73"),
    
    U74("U74"),
    
    U75("U75"),
    
    U76("U76"),
    
    U77("U77"),
    
    U78("U78"),
    
    U79("U79"),
    
    U80("U80"),
    
    U81("U81"),
    
    U82("U82"),
    
    U83("U83"),
    
    U84("U84"),
    
    U85("U85"),
    
    U86("U86"),
    
    U87("U87"),
    
    U88("U88"),
    
    U89("U89"),
    
    U90("U90"),
    
    U91("U91"),
    
    U92("U92"),
    
    U93("U93"),
    
    U94("U94"),
    
    U95("U95"),
    
    U96("U96"),
    
    U97("U97"),
    
    U98("U98"),
    
    U99("U99"),
    
    U100("U100");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public CustomFloodlightVariable() {
  }

  public CustomFloodlightVariable kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string \&quot;dfareporting#customFloodlightVariable\&quot;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public CustomFloodlightVariable type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of custom floodlight variable to supply a value for. These map to the \&quot;u[1-20]&#x3D;\&quot; in the tags.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public CustomFloodlightVariable value(String value) {
    this.value = value;
    return this;
  }

  /**
   * The value of the custom floodlight variable. The length of string must not exceed 100 characters.
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomFloodlightVariable customFloodlightVariable = (CustomFloodlightVariable) o;
    return Objects.equals(this.kind, customFloodlightVariable.kind) &&
        Objects.equals(this.type, customFloodlightVariable.type) &&
        Objects.equals(this.value, customFloodlightVariable.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(kind, type, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomFloodlightVariable {\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("kind");
    openapiFields.add("type");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomFloodlightVariable
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomFloodlightVariable.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomFloodlightVariable is not found in the empty JSON string", CustomFloodlightVariable.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomFloodlightVariable.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomFloodlightVariable` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomFloodlightVariable.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomFloodlightVariable' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomFloodlightVariable> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomFloodlightVariable.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomFloodlightVariable>() {
           @Override
           public void write(JsonWriter out, CustomFloodlightVariable value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomFloodlightVariable read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomFloodlightVariable given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomFloodlightVariable
   * @throws IOException if the JSON string is invalid with respect to CustomFloodlightVariable
   */
  public static CustomFloodlightVariable fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomFloodlightVariable.class);
  }

  /**
   * Convert an instance of CustomFloodlightVariable to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

