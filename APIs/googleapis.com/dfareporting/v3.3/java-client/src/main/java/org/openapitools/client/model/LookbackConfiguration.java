/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Lookback configuration settings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:12.851901-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LookbackConfiguration {
  public static final String SERIALIZED_NAME_CLICK_DURATION = "clickDuration";
  @SerializedName(SERIALIZED_NAME_CLICK_DURATION)
  private Integer clickDuration;

  public static final String SERIALIZED_NAME_POST_IMPRESSION_ACTIVITIES_DURATION = "postImpressionActivitiesDuration";
  @SerializedName(SERIALIZED_NAME_POST_IMPRESSION_ACTIVITIES_DURATION)
  private Integer postImpressionActivitiesDuration;

  public LookbackConfiguration() {
  }

  public LookbackConfiguration clickDuration(Integer clickDuration) {
    this.clickDuration = clickDuration;
    return this;
  }

  /**
   * Lookback window, in days, from the last time a given user clicked on one of your ads. If you enter 0, clicks will not be considered as triggering events for floodlight tracking. If you leave this field blank, the default value for your account will be used. Acceptable values are 0 to 90, inclusive.
   * @return clickDuration
   */
  @javax.annotation.Nullable
  public Integer getClickDuration() {
    return clickDuration;
  }

  public void setClickDuration(Integer clickDuration) {
    this.clickDuration = clickDuration;
  }


  public LookbackConfiguration postImpressionActivitiesDuration(Integer postImpressionActivitiesDuration) {
    this.postImpressionActivitiesDuration = postImpressionActivitiesDuration;
    return this;
  }

  /**
   * Lookback window, in days, from the last time a given user viewed one of your ads. If you enter 0, impressions will not be considered as triggering events for floodlight tracking. If you leave this field blank, the default value for your account will be used. Acceptable values are 0 to 90, inclusive.
   * @return postImpressionActivitiesDuration
   */
  @javax.annotation.Nullable
  public Integer getPostImpressionActivitiesDuration() {
    return postImpressionActivitiesDuration;
  }

  public void setPostImpressionActivitiesDuration(Integer postImpressionActivitiesDuration) {
    this.postImpressionActivitiesDuration = postImpressionActivitiesDuration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LookbackConfiguration lookbackConfiguration = (LookbackConfiguration) o;
    return Objects.equals(this.clickDuration, lookbackConfiguration.clickDuration) &&
        Objects.equals(this.postImpressionActivitiesDuration, lookbackConfiguration.postImpressionActivitiesDuration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clickDuration, postImpressionActivitiesDuration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LookbackConfiguration {\n");
    sb.append("    clickDuration: ").append(toIndentedString(clickDuration)).append("\n");
    sb.append("    postImpressionActivitiesDuration: ").append(toIndentedString(postImpressionActivitiesDuration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clickDuration");
    openapiFields.add("postImpressionActivitiesDuration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LookbackConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LookbackConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LookbackConfiguration is not found in the empty JSON string", LookbackConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LookbackConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LookbackConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LookbackConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LookbackConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LookbackConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LookbackConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<LookbackConfiguration>() {
           @Override
           public void write(JsonWriter out, LookbackConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LookbackConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LookbackConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LookbackConfiguration
   * @throws IOException if the JSON string is invalid with respect to LookbackConfiguration
   */
  public static LookbackConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LookbackConfiguration.class);
  }

  /**
   * Convert an instance of LookbackConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

