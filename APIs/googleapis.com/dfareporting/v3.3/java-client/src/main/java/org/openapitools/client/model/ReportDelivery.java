/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Recipient;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The report&#39;s email delivery settings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:12.851901-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReportDelivery {
  public static final String SERIALIZED_NAME_EMAIL_OWNER = "emailOwner";
  @SerializedName(SERIALIZED_NAME_EMAIL_OWNER)
  private Boolean emailOwner;

  /**
   * The type of delivery for the owner to receive, if enabled.
   */
  @JsonAdapter(EmailOwnerDeliveryTypeEnum.Adapter.class)
  public enum EmailOwnerDeliveryTypeEnum {
    LINK("LINK"),
    
    ATTACHMENT("ATTACHMENT");

    private String value;

    EmailOwnerDeliveryTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EmailOwnerDeliveryTypeEnum fromValue(String value) {
      for (EmailOwnerDeliveryTypeEnum b : EmailOwnerDeliveryTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EmailOwnerDeliveryTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EmailOwnerDeliveryTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EmailOwnerDeliveryTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EmailOwnerDeliveryTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EmailOwnerDeliveryTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EMAIL_OWNER_DELIVERY_TYPE = "emailOwnerDeliveryType";
  @SerializedName(SERIALIZED_NAME_EMAIL_OWNER_DELIVERY_TYPE)
  private EmailOwnerDeliveryTypeEnum emailOwnerDeliveryType;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_RECIPIENTS = "recipients";
  @SerializedName(SERIALIZED_NAME_RECIPIENTS)
  private List<Recipient> recipients = new ArrayList<>();

  public ReportDelivery() {
  }

  public ReportDelivery emailOwner(Boolean emailOwner) {
    this.emailOwner = emailOwner;
    return this;
  }

  /**
   * Whether the report should be emailed to the report owner.
   * @return emailOwner
   */
  @javax.annotation.Nullable
  public Boolean getEmailOwner() {
    return emailOwner;
  }

  public void setEmailOwner(Boolean emailOwner) {
    this.emailOwner = emailOwner;
  }


  public ReportDelivery emailOwnerDeliveryType(EmailOwnerDeliveryTypeEnum emailOwnerDeliveryType) {
    this.emailOwnerDeliveryType = emailOwnerDeliveryType;
    return this;
  }

  /**
   * The type of delivery for the owner to receive, if enabled.
   * @return emailOwnerDeliveryType
   */
  @javax.annotation.Nullable
  public EmailOwnerDeliveryTypeEnum getEmailOwnerDeliveryType() {
    return emailOwnerDeliveryType;
  }

  public void setEmailOwnerDeliveryType(EmailOwnerDeliveryTypeEnum emailOwnerDeliveryType) {
    this.emailOwnerDeliveryType = emailOwnerDeliveryType;
  }


  public ReportDelivery message(String message) {
    this.message = message;
    return this;
  }

  /**
   * The message to be sent with each email.
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public ReportDelivery recipients(List<Recipient> recipients) {
    this.recipients = recipients;
    return this;
  }

  public ReportDelivery addRecipientsItem(Recipient recipientsItem) {
    if (this.recipients == null) {
      this.recipients = new ArrayList<>();
    }
    this.recipients.add(recipientsItem);
    return this;
  }

  /**
   * The list of recipients to which to email the report.
   * @return recipients
   */
  @javax.annotation.Nullable
  public List<Recipient> getRecipients() {
    return recipients;
  }

  public void setRecipients(List<Recipient> recipients) {
    this.recipients = recipients;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportDelivery reportDelivery = (ReportDelivery) o;
    return Objects.equals(this.emailOwner, reportDelivery.emailOwner) &&
        Objects.equals(this.emailOwnerDeliveryType, reportDelivery.emailOwnerDeliveryType) &&
        Objects.equals(this.message, reportDelivery.message) &&
        Objects.equals(this.recipients, reportDelivery.recipients);
  }

  @Override
  public int hashCode() {
    return Objects.hash(emailOwner, emailOwnerDeliveryType, message, recipients);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportDelivery {\n");
    sb.append("    emailOwner: ").append(toIndentedString(emailOwner)).append("\n");
    sb.append("    emailOwnerDeliveryType: ").append(toIndentedString(emailOwnerDeliveryType)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("emailOwner");
    openapiFields.add("emailOwnerDeliveryType");
    openapiFields.add("message");
    openapiFields.add("recipients");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportDelivery
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportDelivery.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportDelivery is not found in the empty JSON string", ReportDelivery.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportDelivery.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportDelivery` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("emailOwnerDeliveryType") != null && !jsonObj.get("emailOwnerDeliveryType").isJsonNull()) && !jsonObj.get("emailOwnerDeliveryType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailOwnerDeliveryType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailOwnerDeliveryType").toString()));
      }
      // validate the optional field `emailOwnerDeliveryType`
      if (jsonObj.get("emailOwnerDeliveryType") != null && !jsonObj.get("emailOwnerDeliveryType").isJsonNull()) {
        EmailOwnerDeliveryTypeEnum.validateJsonElement(jsonObj.get("emailOwnerDeliveryType"));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if (jsonObj.get("recipients") != null && !jsonObj.get("recipients").isJsonNull()) {
        JsonArray jsonArrayrecipients = jsonObj.getAsJsonArray("recipients");
        if (jsonArrayrecipients != null) {
          // ensure the json data is an array
          if (!jsonObj.get("recipients").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `recipients` to be an array in the JSON string but got `%s`", jsonObj.get("recipients").toString()));
          }

          // validate the optional field `recipients` (array)
          for (int i = 0; i < jsonArrayrecipients.size(); i++) {
            Recipient.validateJsonElement(jsonArrayrecipients.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportDelivery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportDelivery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportDelivery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportDelivery.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportDelivery>() {
           @Override
           public void write(JsonWriter out, ReportDelivery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportDelivery read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportDelivery given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportDelivery
   * @throws IOException if the JSON string is invalid with respect to ReportDelivery
   */
  public static ReportDelivery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportDelivery.class);
  }

  /**
   * Convert an instance of ReportDelivery to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

