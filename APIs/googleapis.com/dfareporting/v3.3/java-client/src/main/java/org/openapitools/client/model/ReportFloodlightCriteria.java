/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DateRange;
import org.openapitools.client.model.DimensionValue;
import org.openapitools.client.model.ReportFloodlightCriteriaReportProperties;
import org.openapitools.client.model.SortedDimension;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The report criteria for a report of type \&quot;FLOODLIGHT\&quot;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:12.851901-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReportFloodlightCriteria {
  public static final String SERIALIZED_NAME_CUSTOM_RICH_MEDIA_EVENTS = "customRichMediaEvents";
  @SerializedName(SERIALIZED_NAME_CUSTOM_RICH_MEDIA_EVENTS)
  private List<DimensionValue> customRichMediaEvents = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATE_RANGE = "dateRange";
  @SerializedName(SERIALIZED_NAME_DATE_RANGE)
  private DateRange dateRange;

  public static final String SERIALIZED_NAME_DIMENSION_FILTERS = "dimensionFilters";
  @SerializedName(SERIALIZED_NAME_DIMENSION_FILTERS)
  private List<DimensionValue> dimensionFilters = new ArrayList<>();

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private List<SortedDimension> dimensions = new ArrayList<>();

  public static final String SERIALIZED_NAME_FLOODLIGHT_CONFIG_ID = "floodlightConfigId";
  @SerializedName(SERIALIZED_NAME_FLOODLIGHT_CONFIG_ID)
  private DimensionValue floodlightConfigId;

  public static final String SERIALIZED_NAME_METRIC_NAMES = "metricNames";
  @SerializedName(SERIALIZED_NAME_METRIC_NAMES)
  private List<String> metricNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_REPORT_PROPERTIES = "reportProperties";
  @SerializedName(SERIALIZED_NAME_REPORT_PROPERTIES)
  private ReportFloodlightCriteriaReportProperties reportProperties;

  public ReportFloodlightCriteria() {
  }

  public ReportFloodlightCriteria customRichMediaEvents(List<DimensionValue> customRichMediaEvents) {
    this.customRichMediaEvents = customRichMediaEvents;
    return this;
  }

  public ReportFloodlightCriteria addCustomRichMediaEventsItem(DimensionValue customRichMediaEventsItem) {
    if (this.customRichMediaEvents == null) {
      this.customRichMediaEvents = new ArrayList<>();
    }
    this.customRichMediaEvents.add(customRichMediaEventsItem);
    return this;
  }

  /**
   * The list of custom rich media events to include.
   * @return customRichMediaEvents
   */
  @javax.annotation.Nullable
  public List<DimensionValue> getCustomRichMediaEvents() {
    return customRichMediaEvents;
  }

  public void setCustomRichMediaEvents(List<DimensionValue> customRichMediaEvents) {
    this.customRichMediaEvents = customRichMediaEvents;
  }


  public ReportFloodlightCriteria dateRange(DateRange dateRange) {
    this.dateRange = dateRange;
    return this;
  }

  /**
   * Get dateRange
   * @return dateRange
   */
  @javax.annotation.Nullable
  public DateRange getDateRange() {
    return dateRange;
  }

  public void setDateRange(DateRange dateRange) {
    this.dateRange = dateRange;
  }


  public ReportFloodlightCriteria dimensionFilters(List<DimensionValue> dimensionFilters) {
    this.dimensionFilters = dimensionFilters;
    return this;
  }

  public ReportFloodlightCriteria addDimensionFiltersItem(DimensionValue dimensionFiltersItem) {
    if (this.dimensionFilters == null) {
      this.dimensionFilters = new ArrayList<>();
    }
    this.dimensionFilters.add(dimensionFiltersItem);
    return this;
  }

  /**
   * The list of filters on which dimensions are filtered. Filters for different dimensions are ANDed, filters for the same dimension are grouped together and ORed.
   * @return dimensionFilters
   */
  @javax.annotation.Nullable
  public List<DimensionValue> getDimensionFilters() {
    return dimensionFilters;
  }

  public void setDimensionFilters(List<DimensionValue> dimensionFilters) {
    this.dimensionFilters = dimensionFilters;
  }


  public ReportFloodlightCriteria dimensions(List<SortedDimension> dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  public ReportFloodlightCriteria addDimensionsItem(SortedDimension dimensionsItem) {
    if (this.dimensions == null) {
      this.dimensions = new ArrayList<>();
    }
    this.dimensions.add(dimensionsItem);
    return this;
  }

  /**
   * The list of dimensions the report should include.
   * @return dimensions
   */
  @javax.annotation.Nullable
  public List<SortedDimension> getDimensions() {
    return dimensions;
  }

  public void setDimensions(List<SortedDimension> dimensions) {
    this.dimensions = dimensions;
  }


  public ReportFloodlightCriteria floodlightConfigId(DimensionValue floodlightConfigId) {
    this.floodlightConfigId = floodlightConfigId;
    return this;
  }

  /**
   * Get floodlightConfigId
   * @return floodlightConfigId
   */
  @javax.annotation.Nullable
  public DimensionValue getFloodlightConfigId() {
    return floodlightConfigId;
  }

  public void setFloodlightConfigId(DimensionValue floodlightConfigId) {
    this.floodlightConfigId = floodlightConfigId;
  }


  public ReportFloodlightCriteria metricNames(List<String> metricNames) {
    this.metricNames = metricNames;
    return this;
  }

  public ReportFloodlightCriteria addMetricNamesItem(String metricNamesItem) {
    if (this.metricNames == null) {
      this.metricNames = new ArrayList<>();
    }
    this.metricNames.add(metricNamesItem);
    return this;
  }

  /**
   * The list of names of metrics the report should include.
   * @return metricNames
   */
  @javax.annotation.Nullable
  public List<String> getMetricNames() {
    return metricNames;
  }

  public void setMetricNames(List<String> metricNames) {
    this.metricNames = metricNames;
  }


  public ReportFloodlightCriteria reportProperties(ReportFloodlightCriteriaReportProperties reportProperties) {
    this.reportProperties = reportProperties;
    return this;
  }

  /**
   * Get reportProperties
   * @return reportProperties
   */
  @javax.annotation.Nullable
  public ReportFloodlightCriteriaReportProperties getReportProperties() {
    return reportProperties;
  }

  public void setReportProperties(ReportFloodlightCriteriaReportProperties reportProperties) {
    this.reportProperties = reportProperties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportFloodlightCriteria reportFloodlightCriteria = (ReportFloodlightCriteria) o;
    return Objects.equals(this.customRichMediaEvents, reportFloodlightCriteria.customRichMediaEvents) &&
        Objects.equals(this.dateRange, reportFloodlightCriteria.dateRange) &&
        Objects.equals(this.dimensionFilters, reportFloodlightCriteria.dimensionFilters) &&
        Objects.equals(this.dimensions, reportFloodlightCriteria.dimensions) &&
        Objects.equals(this.floodlightConfigId, reportFloodlightCriteria.floodlightConfigId) &&
        Objects.equals(this.metricNames, reportFloodlightCriteria.metricNames) &&
        Objects.equals(this.reportProperties, reportFloodlightCriteria.reportProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customRichMediaEvents, dateRange, dimensionFilters, dimensions, floodlightConfigId, metricNames, reportProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportFloodlightCriteria {\n");
    sb.append("    customRichMediaEvents: ").append(toIndentedString(customRichMediaEvents)).append("\n");
    sb.append("    dateRange: ").append(toIndentedString(dateRange)).append("\n");
    sb.append("    dimensionFilters: ").append(toIndentedString(dimensionFilters)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    floodlightConfigId: ").append(toIndentedString(floodlightConfigId)).append("\n");
    sb.append("    metricNames: ").append(toIndentedString(metricNames)).append("\n");
    sb.append("    reportProperties: ").append(toIndentedString(reportProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customRichMediaEvents");
    openapiFields.add("dateRange");
    openapiFields.add("dimensionFilters");
    openapiFields.add("dimensions");
    openapiFields.add("floodlightConfigId");
    openapiFields.add("metricNames");
    openapiFields.add("reportProperties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportFloodlightCriteria
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportFloodlightCriteria.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportFloodlightCriteria is not found in the empty JSON string", ReportFloodlightCriteria.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportFloodlightCriteria.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportFloodlightCriteria` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("customRichMediaEvents") != null && !jsonObj.get("customRichMediaEvents").isJsonNull()) {
        JsonArray jsonArraycustomRichMediaEvents = jsonObj.getAsJsonArray("customRichMediaEvents");
        if (jsonArraycustomRichMediaEvents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customRichMediaEvents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customRichMediaEvents` to be an array in the JSON string but got `%s`", jsonObj.get("customRichMediaEvents").toString()));
          }

          // validate the optional field `customRichMediaEvents` (array)
          for (int i = 0; i < jsonArraycustomRichMediaEvents.size(); i++) {
            DimensionValue.validateJsonElement(jsonArraycustomRichMediaEvents.get(i));
          };
        }
      }
      // validate the optional field `dateRange`
      if (jsonObj.get("dateRange") != null && !jsonObj.get("dateRange").isJsonNull()) {
        DateRange.validateJsonElement(jsonObj.get("dateRange"));
      }
      if (jsonObj.get("dimensionFilters") != null && !jsonObj.get("dimensionFilters").isJsonNull()) {
        JsonArray jsonArraydimensionFilters = jsonObj.getAsJsonArray("dimensionFilters");
        if (jsonArraydimensionFilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dimensionFilters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dimensionFilters` to be an array in the JSON string but got `%s`", jsonObj.get("dimensionFilters").toString()));
          }

          // validate the optional field `dimensionFilters` (array)
          for (int i = 0; i < jsonArraydimensionFilters.size(); i++) {
            DimensionValue.validateJsonElement(jsonArraydimensionFilters.get(i));
          };
        }
      }
      if (jsonObj.get("dimensions") != null && !jsonObj.get("dimensions").isJsonNull()) {
        JsonArray jsonArraydimensions = jsonObj.getAsJsonArray("dimensions");
        if (jsonArraydimensions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dimensions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dimensions` to be an array in the JSON string but got `%s`", jsonObj.get("dimensions").toString()));
          }

          // validate the optional field `dimensions` (array)
          for (int i = 0; i < jsonArraydimensions.size(); i++) {
            SortedDimension.validateJsonElement(jsonArraydimensions.get(i));
          };
        }
      }
      // validate the optional field `floodlightConfigId`
      if (jsonObj.get("floodlightConfigId") != null && !jsonObj.get("floodlightConfigId").isJsonNull()) {
        DimensionValue.validateJsonElement(jsonObj.get("floodlightConfigId"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("metricNames") != null && !jsonObj.get("metricNames").isJsonNull() && !jsonObj.get("metricNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `metricNames` to be an array in the JSON string but got `%s`", jsonObj.get("metricNames").toString()));
      }
      // validate the optional field `reportProperties`
      if (jsonObj.get("reportProperties") != null && !jsonObj.get("reportProperties").isJsonNull()) {
        ReportFloodlightCriteriaReportProperties.validateJsonElement(jsonObj.get("reportProperties"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportFloodlightCriteria.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportFloodlightCriteria' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportFloodlightCriteria> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportFloodlightCriteria.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportFloodlightCriteria>() {
           @Override
           public void write(JsonWriter out, ReportFloodlightCriteria value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportFloodlightCriteria read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportFloodlightCriteria given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportFloodlightCriteria
   * @throws IOException if the JSON string is invalid with respect to ReportFloodlightCriteria
   */
  public static ReportFloodlightCriteria fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportFloodlightCriteria.class);
  }

  /**
   * Convert an instance of ReportFloodlightCriteria to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

