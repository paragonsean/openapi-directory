/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDateRange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDateRange::OAIDateRange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDateRange::OAIDateRange() {
    this->initializeModel();
}

OAIDateRange::~OAIDateRange() {}

void OAIDateRange::initializeModel() {

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_relative_date_range_isSet = false;
    m_relative_date_range_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;
}

void OAIDateRange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDateRange::fromJsonObject(QJsonObject json) {

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_relative_date_range_isValid = ::OpenAPI::fromJsonValue(m_relative_date_range, json[QString("relativeDateRange")]);
    m_relative_date_range_isSet = !json[QString("relativeDateRange")].isNull() && m_relative_date_range_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;
}

QString OAIDateRange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDateRange::asJsonObject() const {
    QJsonObject obj;
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_relative_date_range_isSet) {
        obj.insert(QString("relativeDateRange"), ::OpenAPI::toJsonValue(m_relative_date_range));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    return obj;
}

QDate OAIDateRange::getEndDate() const {
    return m_end_date;
}
void OAIDateRange::setEndDate(const QDate &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIDateRange::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIDateRange::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAIDateRange::getKind() const {
    return m_kind;
}
void OAIDateRange::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIDateRange::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIDateRange::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIDateRange::getRelativeDateRange() const {
    return m_relative_date_range;
}
void OAIDateRange::setRelativeDateRange(const QString &relative_date_range) {
    m_relative_date_range = relative_date_range;
    m_relative_date_range_isSet = true;
}

bool OAIDateRange::is_relative_date_range_Set() const{
    return m_relative_date_range_isSet;
}

bool OAIDateRange::is_relative_date_range_Valid() const{
    return m_relative_date_range_isValid;
}

QDate OAIDateRange::getStartDate() const {
    return m_start_date;
}
void OAIDateRange::setStartDate(const QDate &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIDateRange::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIDateRange::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAIDateRange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relative_date_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDateRange::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
