/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreative.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreative::OAICreative(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreative::OAICreative() {
    this->initializeModel();
}

OAICreative::~OAICreative() {}

void OAICreative::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_active_isSet = false;
    m_active_isValid = false;

    m_ad_parameters_isSet = false;
    m_ad_parameters_isValid = false;

    m_ad_tag_keys_isSet = false;
    m_ad_tag_keys_isValid = false;

    m_additional_sizes_isSet = false;
    m_additional_sizes_isValid = false;

    m_advertiser_id_isSet = false;
    m_advertiser_id_isValid = false;

    m_allow_script_access_isSet = false;
    m_allow_script_access_isValid = false;

    m_archived_isSet = false;
    m_archived_isValid = false;

    m_artwork_type_isSet = false;
    m_artwork_type_isValid = false;

    m_authoring_source_isSet = false;
    m_authoring_source_isValid = false;

    m_authoring_tool_isSet = false;
    m_authoring_tool_isValid = false;

    m_auto_advance_images_isSet = false;
    m_auto_advance_images_isValid = false;

    m_background_color_isSet = false;
    m_background_color_isValid = false;

    m_backup_image_click_through_url_isSet = false;
    m_backup_image_click_through_url_isValid = false;

    m_backup_image_features_isSet = false;
    m_backup_image_features_isValid = false;

    m_backup_image_reporting_label_isSet = false;
    m_backup_image_reporting_label_isValid = false;

    m_backup_image_target_window_isSet = false;
    m_backup_image_target_window_isValid = false;

    m_click_tags_isSet = false;
    m_click_tags_isValid = false;

    m_commercial_id_isSet = false;
    m_commercial_id_isValid = false;

    m_companion_creatives_isSet = false;
    m_companion_creatives_isValid = false;

    m_compatibility_isSet = false;
    m_compatibility_isValid = false;

    m_convert_flash_to_html5_isSet = false;
    m_convert_flash_to_html5_isValid = false;

    m_counter_custom_events_isSet = false;
    m_counter_custom_events_isValid = false;

    m_creative_asset_selection_isSet = false;
    m_creative_asset_selection_isValid = false;

    m_creative_assets_isSet = false;
    m_creative_assets_isValid = false;

    m_creative_field_assignments_isSet = false;
    m_creative_field_assignments_isValid = false;

    m_custom_key_values_isSet = false;
    m_custom_key_values_isValid = false;

    m_dynamic_asset_selection_isSet = false;
    m_dynamic_asset_selection_isValid = false;

    m_exit_custom_events_isSet = false;
    m_exit_custom_events_isValid = false;

    m_fs_command_isSet = false;
    m_fs_command_isValid = false;

    m_html_code_isSet = false;
    m_html_code_isValid = false;

    m_html_code_locked_isSet = false;
    m_html_code_locked_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_id_dimension_value_isSet = false;
    m_id_dimension_value_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_last_modified_info_isSet = false;
    m_last_modified_info_isValid = false;

    m_latest_trafficked_creative_id_isSet = false;
    m_latest_trafficked_creative_id_isValid = false;

    m_media_description_isSet = false;
    m_media_description_isValid = false;

    m_media_duration_isSet = false;
    m_media_duration_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_override_css_isSet = false;
    m_override_css_isValid = false;

    m_progress_offset_isSet = false;
    m_progress_offset_isValid = false;

    m_redirect_url_isSet = false;
    m_redirect_url_isValid = false;

    m_rendering_id_isSet = false;
    m_rendering_id_isValid = false;

    m_rendering_id_dimension_value_isSet = false;
    m_rendering_id_dimension_value_isValid = false;

    m_required_flash_plugin_version_isSet = false;
    m_required_flash_plugin_version_isValid = false;

    m_required_flash_version_isSet = false;
    m_required_flash_version_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_skip_offset_isSet = false;
    m_skip_offset_isValid = false;

    m_skippable_isSet = false;
    m_skippable_isValid = false;

    m_ssl_compliant_isSet = false;
    m_ssl_compliant_isValid = false;

    m_ssl_override_isSet = false;
    m_ssl_override_isValid = false;

    m_studio_advertiser_id_isSet = false;
    m_studio_advertiser_id_isValid = false;

    m_studio_creative_id_isSet = false;
    m_studio_creative_id_isValid = false;

    m_studio_trafficked_creative_id_isSet = false;
    m_studio_trafficked_creative_id_isValid = false;

    m_subaccount_id_isSet = false;
    m_subaccount_id_isValid = false;

    m_third_party_backup_image_impressions_url_isSet = false;
    m_third_party_backup_image_impressions_url_isValid = false;

    m_third_party_rich_media_impressions_url_isSet = false;
    m_third_party_rich_media_impressions_url_isValid = false;

    m_third_party_urls_isSet = false;
    m_third_party_urls_isValid = false;

    m_timer_custom_events_isSet = false;
    m_timer_custom_events_isValid = false;

    m_total_file_size_isSet = false;
    m_total_file_size_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_universal_ad_id_isSet = false;
    m_universal_ad_id_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAICreative::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreative::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_ad_parameters_isValid = ::OpenAPI::fromJsonValue(m_ad_parameters, json[QString("adParameters")]);
    m_ad_parameters_isSet = !json[QString("adParameters")].isNull() && m_ad_parameters_isValid;

    m_ad_tag_keys_isValid = ::OpenAPI::fromJsonValue(m_ad_tag_keys, json[QString("adTagKeys")]);
    m_ad_tag_keys_isSet = !json[QString("adTagKeys")].isNull() && m_ad_tag_keys_isValid;

    m_additional_sizes_isValid = ::OpenAPI::fromJsonValue(m_additional_sizes, json[QString("additionalSizes")]);
    m_additional_sizes_isSet = !json[QString("additionalSizes")].isNull() && m_additional_sizes_isValid;

    m_advertiser_id_isValid = ::OpenAPI::fromJsonValue(m_advertiser_id, json[QString("advertiserId")]);
    m_advertiser_id_isSet = !json[QString("advertiserId")].isNull() && m_advertiser_id_isValid;

    m_allow_script_access_isValid = ::OpenAPI::fromJsonValue(m_allow_script_access, json[QString("allowScriptAccess")]);
    m_allow_script_access_isSet = !json[QString("allowScriptAccess")].isNull() && m_allow_script_access_isValid;

    m_archived_isValid = ::OpenAPI::fromJsonValue(m_archived, json[QString("archived")]);
    m_archived_isSet = !json[QString("archived")].isNull() && m_archived_isValid;

    m_artwork_type_isValid = ::OpenAPI::fromJsonValue(m_artwork_type, json[QString("artworkType")]);
    m_artwork_type_isSet = !json[QString("artworkType")].isNull() && m_artwork_type_isValid;

    m_authoring_source_isValid = ::OpenAPI::fromJsonValue(m_authoring_source, json[QString("authoringSource")]);
    m_authoring_source_isSet = !json[QString("authoringSource")].isNull() && m_authoring_source_isValid;

    m_authoring_tool_isValid = ::OpenAPI::fromJsonValue(m_authoring_tool, json[QString("authoringTool")]);
    m_authoring_tool_isSet = !json[QString("authoringTool")].isNull() && m_authoring_tool_isValid;

    m_auto_advance_images_isValid = ::OpenAPI::fromJsonValue(m_auto_advance_images, json[QString("autoAdvanceImages")]);
    m_auto_advance_images_isSet = !json[QString("autoAdvanceImages")].isNull() && m_auto_advance_images_isValid;

    m_background_color_isValid = ::OpenAPI::fromJsonValue(m_background_color, json[QString("backgroundColor")]);
    m_background_color_isSet = !json[QString("backgroundColor")].isNull() && m_background_color_isValid;

    m_backup_image_click_through_url_isValid = ::OpenAPI::fromJsonValue(m_backup_image_click_through_url, json[QString("backupImageClickThroughUrl")]);
    m_backup_image_click_through_url_isSet = !json[QString("backupImageClickThroughUrl")].isNull() && m_backup_image_click_through_url_isValid;

    m_backup_image_features_isValid = ::OpenAPI::fromJsonValue(m_backup_image_features, json[QString("backupImageFeatures")]);
    m_backup_image_features_isSet = !json[QString("backupImageFeatures")].isNull() && m_backup_image_features_isValid;

    m_backup_image_reporting_label_isValid = ::OpenAPI::fromJsonValue(m_backup_image_reporting_label, json[QString("backupImageReportingLabel")]);
    m_backup_image_reporting_label_isSet = !json[QString("backupImageReportingLabel")].isNull() && m_backup_image_reporting_label_isValid;

    m_backup_image_target_window_isValid = ::OpenAPI::fromJsonValue(m_backup_image_target_window, json[QString("backupImageTargetWindow")]);
    m_backup_image_target_window_isSet = !json[QString("backupImageTargetWindow")].isNull() && m_backup_image_target_window_isValid;

    m_click_tags_isValid = ::OpenAPI::fromJsonValue(m_click_tags, json[QString("clickTags")]);
    m_click_tags_isSet = !json[QString("clickTags")].isNull() && m_click_tags_isValid;

    m_commercial_id_isValid = ::OpenAPI::fromJsonValue(m_commercial_id, json[QString("commercialId")]);
    m_commercial_id_isSet = !json[QString("commercialId")].isNull() && m_commercial_id_isValid;

    m_companion_creatives_isValid = ::OpenAPI::fromJsonValue(m_companion_creatives, json[QString("companionCreatives")]);
    m_companion_creatives_isSet = !json[QString("companionCreatives")].isNull() && m_companion_creatives_isValid;

    m_compatibility_isValid = ::OpenAPI::fromJsonValue(m_compatibility, json[QString("compatibility")]);
    m_compatibility_isSet = !json[QString("compatibility")].isNull() && m_compatibility_isValid;

    m_convert_flash_to_html5_isValid = ::OpenAPI::fromJsonValue(m_convert_flash_to_html5, json[QString("convertFlashToHtml5")]);
    m_convert_flash_to_html5_isSet = !json[QString("convertFlashToHtml5")].isNull() && m_convert_flash_to_html5_isValid;

    m_counter_custom_events_isValid = ::OpenAPI::fromJsonValue(m_counter_custom_events, json[QString("counterCustomEvents")]);
    m_counter_custom_events_isSet = !json[QString("counterCustomEvents")].isNull() && m_counter_custom_events_isValid;

    m_creative_asset_selection_isValid = ::OpenAPI::fromJsonValue(m_creative_asset_selection, json[QString("creativeAssetSelection")]);
    m_creative_asset_selection_isSet = !json[QString("creativeAssetSelection")].isNull() && m_creative_asset_selection_isValid;

    m_creative_assets_isValid = ::OpenAPI::fromJsonValue(m_creative_assets, json[QString("creativeAssets")]);
    m_creative_assets_isSet = !json[QString("creativeAssets")].isNull() && m_creative_assets_isValid;

    m_creative_field_assignments_isValid = ::OpenAPI::fromJsonValue(m_creative_field_assignments, json[QString("creativeFieldAssignments")]);
    m_creative_field_assignments_isSet = !json[QString("creativeFieldAssignments")].isNull() && m_creative_field_assignments_isValid;

    m_custom_key_values_isValid = ::OpenAPI::fromJsonValue(m_custom_key_values, json[QString("customKeyValues")]);
    m_custom_key_values_isSet = !json[QString("customKeyValues")].isNull() && m_custom_key_values_isValid;

    m_dynamic_asset_selection_isValid = ::OpenAPI::fromJsonValue(m_dynamic_asset_selection, json[QString("dynamicAssetSelection")]);
    m_dynamic_asset_selection_isSet = !json[QString("dynamicAssetSelection")].isNull() && m_dynamic_asset_selection_isValid;

    m_exit_custom_events_isValid = ::OpenAPI::fromJsonValue(m_exit_custom_events, json[QString("exitCustomEvents")]);
    m_exit_custom_events_isSet = !json[QString("exitCustomEvents")].isNull() && m_exit_custom_events_isValid;

    m_fs_command_isValid = ::OpenAPI::fromJsonValue(m_fs_command, json[QString("fsCommand")]);
    m_fs_command_isSet = !json[QString("fsCommand")].isNull() && m_fs_command_isValid;

    m_html_code_isValid = ::OpenAPI::fromJsonValue(m_html_code, json[QString("htmlCode")]);
    m_html_code_isSet = !json[QString("htmlCode")].isNull() && m_html_code_isValid;

    m_html_code_locked_isValid = ::OpenAPI::fromJsonValue(m_html_code_locked, json[QString("htmlCodeLocked")]);
    m_html_code_locked_isSet = !json[QString("htmlCodeLocked")].isNull() && m_html_code_locked_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_id_dimension_value_isValid = ::OpenAPI::fromJsonValue(m_id_dimension_value, json[QString("idDimensionValue")]);
    m_id_dimension_value_isSet = !json[QString("idDimensionValue")].isNull() && m_id_dimension_value_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_last_modified_info_isValid = ::OpenAPI::fromJsonValue(m_last_modified_info, json[QString("lastModifiedInfo")]);
    m_last_modified_info_isSet = !json[QString("lastModifiedInfo")].isNull() && m_last_modified_info_isValid;

    m_latest_trafficked_creative_id_isValid = ::OpenAPI::fromJsonValue(m_latest_trafficked_creative_id, json[QString("latestTraffickedCreativeId")]);
    m_latest_trafficked_creative_id_isSet = !json[QString("latestTraffickedCreativeId")].isNull() && m_latest_trafficked_creative_id_isValid;

    m_media_description_isValid = ::OpenAPI::fromJsonValue(m_media_description, json[QString("mediaDescription")]);
    m_media_description_isSet = !json[QString("mediaDescription")].isNull() && m_media_description_isValid;

    m_media_duration_isValid = ::OpenAPI::fromJsonValue(m_media_duration, json[QString("mediaDuration")]);
    m_media_duration_isSet = !json[QString("mediaDuration")].isNull() && m_media_duration_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_override_css_isValid = ::OpenAPI::fromJsonValue(m_override_css, json[QString("overrideCss")]);
    m_override_css_isSet = !json[QString("overrideCss")].isNull() && m_override_css_isValid;

    m_progress_offset_isValid = ::OpenAPI::fromJsonValue(m_progress_offset, json[QString("progressOffset")]);
    m_progress_offset_isSet = !json[QString("progressOffset")].isNull() && m_progress_offset_isValid;

    m_redirect_url_isValid = ::OpenAPI::fromJsonValue(m_redirect_url, json[QString("redirectUrl")]);
    m_redirect_url_isSet = !json[QString("redirectUrl")].isNull() && m_redirect_url_isValid;

    m_rendering_id_isValid = ::OpenAPI::fromJsonValue(m_rendering_id, json[QString("renderingId")]);
    m_rendering_id_isSet = !json[QString("renderingId")].isNull() && m_rendering_id_isValid;

    m_rendering_id_dimension_value_isValid = ::OpenAPI::fromJsonValue(m_rendering_id_dimension_value, json[QString("renderingIdDimensionValue")]);
    m_rendering_id_dimension_value_isSet = !json[QString("renderingIdDimensionValue")].isNull() && m_rendering_id_dimension_value_isValid;

    m_required_flash_plugin_version_isValid = ::OpenAPI::fromJsonValue(m_required_flash_plugin_version, json[QString("requiredFlashPluginVersion")]);
    m_required_flash_plugin_version_isSet = !json[QString("requiredFlashPluginVersion")].isNull() && m_required_flash_plugin_version_isValid;

    m_required_flash_version_isValid = ::OpenAPI::fromJsonValue(m_required_flash_version, json[QString("requiredFlashVersion")]);
    m_required_flash_version_isSet = !json[QString("requiredFlashVersion")].isNull() && m_required_flash_version_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_skip_offset_isValid = ::OpenAPI::fromJsonValue(m_skip_offset, json[QString("skipOffset")]);
    m_skip_offset_isSet = !json[QString("skipOffset")].isNull() && m_skip_offset_isValid;

    m_skippable_isValid = ::OpenAPI::fromJsonValue(m_skippable, json[QString("skippable")]);
    m_skippable_isSet = !json[QString("skippable")].isNull() && m_skippable_isValid;

    m_ssl_compliant_isValid = ::OpenAPI::fromJsonValue(m_ssl_compliant, json[QString("sslCompliant")]);
    m_ssl_compliant_isSet = !json[QString("sslCompliant")].isNull() && m_ssl_compliant_isValid;

    m_ssl_override_isValid = ::OpenAPI::fromJsonValue(m_ssl_override, json[QString("sslOverride")]);
    m_ssl_override_isSet = !json[QString("sslOverride")].isNull() && m_ssl_override_isValid;

    m_studio_advertiser_id_isValid = ::OpenAPI::fromJsonValue(m_studio_advertiser_id, json[QString("studioAdvertiserId")]);
    m_studio_advertiser_id_isSet = !json[QString("studioAdvertiserId")].isNull() && m_studio_advertiser_id_isValid;

    m_studio_creative_id_isValid = ::OpenAPI::fromJsonValue(m_studio_creative_id, json[QString("studioCreativeId")]);
    m_studio_creative_id_isSet = !json[QString("studioCreativeId")].isNull() && m_studio_creative_id_isValid;

    m_studio_trafficked_creative_id_isValid = ::OpenAPI::fromJsonValue(m_studio_trafficked_creative_id, json[QString("studioTraffickedCreativeId")]);
    m_studio_trafficked_creative_id_isSet = !json[QString("studioTraffickedCreativeId")].isNull() && m_studio_trafficked_creative_id_isValid;

    m_subaccount_id_isValid = ::OpenAPI::fromJsonValue(m_subaccount_id, json[QString("subaccountId")]);
    m_subaccount_id_isSet = !json[QString("subaccountId")].isNull() && m_subaccount_id_isValid;

    m_third_party_backup_image_impressions_url_isValid = ::OpenAPI::fromJsonValue(m_third_party_backup_image_impressions_url, json[QString("thirdPartyBackupImageImpressionsUrl")]);
    m_third_party_backup_image_impressions_url_isSet = !json[QString("thirdPartyBackupImageImpressionsUrl")].isNull() && m_third_party_backup_image_impressions_url_isValid;

    m_third_party_rich_media_impressions_url_isValid = ::OpenAPI::fromJsonValue(m_third_party_rich_media_impressions_url, json[QString("thirdPartyRichMediaImpressionsUrl")]);
    m_third_party_rich_media_impressions_url_isSet = !json[QString("thirdPartyRichMediaImpressionsUrl")].isNull() && m_third_party_rich_media_impressions_url_isValid;

    m_third_party_urls_isValid = ::OpenAPI::fromJsonValue(m_third_party_urls, json[QString("thirdPartyUrls")]);
    m_third_party_urls_isSet = !json[QString("thirdPartyUrls")].isNull() && m_third_party_urls_isValid;

    m_timer_custom_events_isValid = ::OpenAPI::fromJsonValue(m_timer_custom_events, json[QString("timerCustomEvents")]);
    m_timer_custom_events_isSet = !json[QString("timerCustomEvents")].isNull() && m_timer_custom_events_isValid;

    m_total_file_size_isValid = ::OpenAPI::fromJsonValue(m_total_file_size, json[QString("totalFileSize")]);
    m_total_file_size_isSet = !json[QString("totalFileSize")].isNull() && m_total_file_size_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_universal_ad_id_isValid = ::OpenAPI::fromJsonValue(m_universal_ad_id, json[QString("universalAdId")]);
    m_universal_ad_id_isSet = !json[QString("universalAdId")].isNull() && m_universal_ad_id_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAICreative::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreative::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_ad_parameters_isSet) {
        obj.insert(QString("adParameters"), ::OpenAPI::toJsonValue(m_ad_parameters));
    }
    if (m_ad_tag_keys.size() > 0) {
        obj.insert(QString("adTagKeys"), ::OpenAPI::toJsonValue(m_ad_tag_keys));
    }
    if (m_additional_sizes.size() > 0) {
        obj.insert(QString("additionalSizes"), ::OpenAPI::toJsonValue(m_additional_sizes));
    }
    if (m_advertiser_id_isSet) {
        obj.insert(QString("advertiserId"), ::OpenAPI::toJsonValue(m_advertiser_id));
    }
    if (m_allow_script_access_isSet) {
        obj.insert(QString("allowScriptAccess"), ::OpenAPI::toJsonValue(m_allow_script_access));
    }
    if (m_archived_isSet) {
        obj.insert(QString("archived"), ::OpenAPI::toJsonValue(m_archived));
    }
    if (m_artwork_type_isSet) {
        obj.insert(QString("artworkType"), ::OpenAPI::toJsonValue(m_artwork_type));
    }
    if (m_authoring_source_isSet) {
        obj.insert(QString("authoringSource"), ::OpenAPI::toJsonValue(m_authoring_source));
    }
    if (m_authoring_tool_isSet) {
        obj.insert(QString("authoringTool"), ::OpenAPI::toJsonValue(m_authoring_tool));
    }
    if (m_auto_advance_images_isSet) {
        obj.insert(QString("autoAdvanceImages"), ::OpenAPI::toJsonValue(m_auto_advance_images));
    }
    if (m_background_color_isSet) {
        obj.insert(QString("backgroundColor"), ::OpenAPI::toJsonValue(m_background_color));
    }
    if (m_backup_image_click_through_url.isSet()) {
        obj.insert(QString("backupImageClickThroughUrl"), ::OpenAPI::toJsonValue(m_backup_image_click_through_url));
    }
    if (m_backup_image_features.size() > 0) {
        obj.insert(QString("backupImageFeatures"), ::OpenAPI::toJsonValue(m_backup_image_features));
    }
    if (m_backup_image_reporting_label_isSet) {
        obj.insert(QString("backupImageReportingLabel"), ::OpenAPI::toJsonValue(m_backup_image_reporting_label));
    }
    if (m_backup_image_target_window.isSet()) {
        obj.insert(QString("backupImageTargetWindow"), ::OpenAPI::toJsonValue(m_backup_image_target_window));
    }
    if (m_click_tags.size() > 0) {
        obj.insert(QString("clickTags"), ::OpenAPI::toJsonValue(m_click_tags));
    }
    if (m_commercial_id_isSet) {
        obj.insert(QString("commercialId"), ::OpenAPI::toJsonValue(m_commercial_id));
    }
    if (m_companion_creatives.size() > 0) {
        obj.insert(QString("companionCreatives"), ::OpenAPI::toJsonValue(m_companion_creatives));
    }
    if (m_compatibility.size() > 0) {
        obj.insert(QString("compatibility"), ::OpenAPI::toJsonValue(m_compatibility));
    }
    if (m_convert_flash_to_html5_isSet) {
        obj.insert(QString("convertFlashToHtml5"), ::OpenAPI::toJsonValue(m_convert_flash_to_html5));
    }
    if (m_counter_custom_events.size() > 0) {
        obj.insert(QString("counterCustomEvents"), ::OpenAPI::toJsonValue(m_counter_custom_events));
    }
    if (m_creative_asset_selection.isSet()) {
        obj.insert(QString("creativeAssetSelection"), ::OpenAPI::toJsonValue(m_creative_asset_selection));
    }
    if (m_creative_assets.size() > 0) {
        obj.insert(QString("creativeAssets"), ::OpenAPI::toJsonValue(m_creative_assets));
    }
    if (m_creative_field_assignments.size() > 0) {
        obj.insert(QString("creativeFieldAssignments"), ::OpenAPI::toJsonValue(m_creative_field_assignments));
    }
    if (m_custom_key_values.size() > 0) {
        obj.insert(QString("customKeyValues"), ::OpenAPI::toJsonValue(m_custom_key_values));
    }
    if (m_dynamic_asset_selection_isSet) {
        obj.insert(QString("dynamicAssetSelection"), ::OpenAPI::toJsonValue(m_dynamic_asset_selection));
    }
    if (m_exit_custom_events.size() > 0) {
        obj.insert(QString("exitCustomEvents"), ::OpenAPI::toJsonValue(m_exit_custom_events));
    }
    if (m_fs_command.isSet()) {
        obj.insert(QString("fsCommand"), ::OpenAPI::toJsonValue(m_fs_command));
    }
    if (m_html_code_isSet) {
        obj.insert(QString("htmlCode"), ::OpenAPI::toJsonValue(m_html_code));
    }
    if (m_html_code_locked_isSet) {
        obj.insert(QString("htmlCodeLocked"), ::OpenAPI::toJsonValue(m_html_code_locked));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_id_dimension_value.isSet()) {
        obj.insert(QString("idDimensionValue"), ::OpenAPI::toJsonValue(m_id_dimension_value));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_last_modified_info.isSet()) {
        obj.insert(QString("lastModifiedInfo"), ::OpenAPI::toJsonValue(m_last_modified_info));
    }
    if (m_latest_trafficked_creative_id_isSet) {
        obj.insert(QString("latestTraffickedCreativeId"), ::OpenAPI::toJsonValue(m_latest_trafficked_creative_id));
    }
    if (m_media_description_isSet) {
        obj.insert(QString("mediaDescription"), ::OpenAPI::toJsonValue(m_media_description));
    }
    if (m_media_duration_isSet) {
        obj.insert(QString("mediaDuration"), ::OpenAPI::toJsonValue(m_media_duration));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_override_css_isSet) {
        obj.insert(QString("overrideCss"), ::OpenAPI::toJsonValue(m_override_css));
    }
    if (m_progress_offset.isSet()) {
        obj.insert(QString("progressOffset"), ::OpenAPI::toJsonValue(m_progress_offset));
    }
    if (m_redirect_url_isSet) {
        obj.insert(QString("redirectUrl"), ::OpenAPI::toJsonValue(m_redirect_url));
    }
    if (m_rendering_id_isSet) {
        obj.insert(QString("renderingId"), ::OpenAPI::toJsonValue(m_rendering_id));
    }
    if (m_rendering_id_dimension_value.isSet()) {
        obj.insert(QString("renderingIdDimensionValue"), ::OpenAPI::toJsonValue(m_rendering_id_dimension_value));
    }
    if (m_required_flash_plugin_version_isSet) {
        obj.insert(QString("requiredFlashPluginVersion"), ::OpenAPI::toJsonValue(m_required_flash_plugin_version));
    }
    if (m_required_flash_version_isSet) {
        obj.insert(QString("requiredFlashVersion"), ::OpenAPI::toJsonValue(m_required_flash_version));
    }
    if (m_size.isSet()) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_skip_offset.isSet()) {
        obj.insert(QString("skipOffset"), ::OpenAPI::toJsonValue(m_skip_offset));
    }
    if (m_skippable_isSet) {
        obj.insert(QString("skippable"), ::OpenAPI::toJsonValue(m_skippable));
    }
    if (m_ssl_compliant_isSet) {
        obj.insert(QString("sslCompliant"), ::OpenAPI::toJsonValue(m_ssl_compliant));
    }
    if (m_ssl_override_isSet) {
        obj.insert(QString("sslOverride"), ::OpenAPI::toJsonValue(m_ssl_override));
    }
    if (m_studio_advertiser_id_isSet) {
        obj.insert(QString("studioAdvertiserId"), ::OpenAPI::toJsonValue(m_studio_advertiser_id));
    }
    if (m_studio_creative_id_isSet) {
        obj.insert(QString("studioCreativeId"), ::OpenAPI::toJsonValue(m_studio_creative_id));
    }
    if (m_studio_trafficked_creative_id_isSet) {
        obj.insert(QString("studioTraffickedCreativeId"), ::OpenAPI::toJsonValue(m_studio_trafficked_creative_id));
    }
    if (m_subaccount_id_isSet) {
        obj.insert(QString("subaccountId"), ::OpenAPI::toJsonValue(m_subaccount_id));
    }
    if (m_third_party_backup_image_impressions_url_isSet) {
        obj.insert(QString("thirdPartyBackupImageImpressionsUrl"), ::OpenAPI::toJsonValue(m_third_party_backup_image_impressions_url));
    }
    if (m_third_party_rich_media_impressions_url_isSet) {
        obj.insert(QString("thirdPartyRichMediaImpressionsUrl"), ::OpenAPI::toJsonValue(m_third_party_rich_media_impressions_url));
    }
    if (m_third_party_urls.size() > 0) {
        obj.insert(QString("thirdPartyUrls"), ::OpenAPI::toJsonValue(m_third_party_urls));
    }
    if (m_timer_custom_events.size() > 0) {
        obj.insert(QString("timerCustomEvents"), ::OpenAPI::toJsonValue(m_timer_custom_events));
    }
    if (m_total_file_size_isSet) {
        obj.insert(QString("totalFileSize"), ::OpenAPI::toJsonValue(m_total_file_size));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_universal_ad_id.isSet()) {
        obj.insert(QString("universalAdId"), ::OpenAPI::toJsonValue(m_universal_ad_id));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAICreative::getAccountId() const {
    return m_account_id;
}
void OAICreative::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAICreative::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAICreative::is_account_id_Valid() const{
    return m_account_id_isValid;
}

bool OAICreative::isActive() const {
    return m_active;
}
void OAICreative::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAICreative::is_active_Set() const{
    return m_active_isSet;
}

bool OAICreative::is_active_Valid() const{
    return m_active_isValid;
}

QString OAICreative::getAdParameters() const {
    return m_ad_parameters;
}
void OAICreative::setAdParameters(const QString &ad_parameters) {
    m_ad_parameters = ad_parameters;
    m_ad_parameters_isSet = true;
}

bool OAICreative::is_ad_parameters_Set() const{
    return m_ad_parameters_isSet;
}

bool OAICreative::is_ad_parameters_Valid() const{
    return m_ad_parameters_isValid;
}

QList<QString> OAICreative::getAdTagKeys() const {
    return m_ad_tag_keys;
}
void OAICreative::setAdTagKeys(const QList<QString> &ad_tag_keys) {
    m_ad_tag_keys = ad_tag_keys;
    m_ad_tag_keys_isSet = true;
}

bool OAICreative::is_ad_tag_keys_Set() const{
    return m_ad_tag_keys_isSet;
}

bool OAICreative::is_ad_tag_keys_Valid() const{
    return m_ad_tag_keys_isValid;
}

QList<OAISize> OAICreative::getAdditionalSizes() const {
    return m_additional_sizes;
}
void OAICreative::setAdditionalSizes(const QList<OAISize> &additional_sizes) {
    m_additional_sizes = additional_sizes;
    m_additional_sizes_isSet = true;
}

bool OAICreative::is_additional_sizes_Set() const{
    return m_additional_sizes_isSet;
}

bool OAICreative::is_additional_sizes_Valid() const{
    return m_additional_sizes_isValid;
}

QString OAICreative::getAdvertiserId() const {
    return m_advertiser_id;
}
void OAICreative::setAdvertiserId(const QString &advertiser_id) {
    m_advertiser_id = advertiser_id;
    m_advertiser_id_isSet = true;
}

bool OAICreative::is_advertiser_id_Set() const{
    return m_advertiser_id_isSet;
}

bool OAICreative::is_advertiser_id_Valid() const{
    return m_advertiser_id_isValid;
}

bool OAICreative::isAllowScriptAccess() const {
    return m_allow_script_access;
}
void OAICreative::setAllowScriptAccess(const bool &allow_script_access) {
    m_allow_script_access = allow_script_access;
    m_allow_script_access_isSet = true;
}

bool OAICreative::is_allow_script_access_Set() const{
    return m_allow_script_access_isSet;
}

bool OAICreative::is_allow_script_access_Valid() const{
    return m_allow_script_access_isValid;
}

bool OAICreative::isArchived() const {
    return m_archived;
}
void OAICreative::setArchived(const bool &archived) {
    m_archived = archived;
    m_archived_isSet = true;
}

bool OAICreative::is_archived_Set() const{
    return m_archived_isSet;
}

bool OAICreative::is_archived_Valid() const{
    return m_archived_isValid;
}

QString OAICreative::getArtworkType() const {
    return m_artwork_type;
}
void OAICreative::setArtworkType(const QString &artwork_type) {
    m_artwork_type = artwork_type;
    m_artwork_type_isSet = true;
}

bool OAICreative::is_artwork_type_Set() const{
    return m_artwork_type_isSet;
}

bool OAICreative::is_artwork_type_Valid() const{
    return m_artwork_type_isValid;
}

QString OAICreative::getAuthoringSource() const {
    return m_authoring_source;
}
void OAICreative::setAuthoringSource(const QString &authoring_source) {
    m_authoring_source = authoring_source;
    m_authoring_source_isSet = true;
}

bool OAICreative::is_authoring_source_Set() const{
    return m_authoring_source_isSet;
}

bool OAICreative::is_authoring_source_Valid() const{
    return m_authoring_source_isValid;
}

QString OAICreative::getAuthoringTool() const {
    return m_authoring_tool;
}
void OAICreative::setAuthoringTool(const QString &authoring_tool) {
    m_authoring_tool = authoring_tool;
    m_authoring_tool_isSet = true;
}

bool OAICreative::is_authoring_tool_Set() const{
    return m_authoring_tool_isSet;
}

bool OAICreative::is_authoring_tool_Valid() const{
    return m_authoring_tool_isValid;
}

bool OAICreative::isAutoAdvanceImages() const {
    return m_auto_advance_images;
}
void OAICreative::setAutoAdvanceImages(const bool &auto_advance_images) {
    m_auto_advance_images = auto_advance_images;
    m_auto_advance_images_isSet = true;
}

bool OAICreative::is_auto_advance_images_Set() const{
    return m_auto_advance_images_isSet;
}

bool OAICreative::is_auto_advance_images_Valid() const{
    return m_auto_advance_images_isValid;
}

QString OAICreative::getBackgroundColor() const {
    return m_background_color;
}
void OAICreative::setBackgroundColor(const QString &background_color) {
    m_background_color = background_color;
    m_background_color_isSet = true;
}

bool OAICreative::is_background_color_Set() const{
    return m_background_color_isSet;
}

bool OAICreative::is_background_color_Valid() const{
    return m_background_color_isValid;
}

OAICreativeClickThroughUrl OAICreative::getBackupImageClickThroughUrl() const {
    return m_backup_image_click_through_url;
}
void OAICreative::setBackupImageClickThroughUrl(const OAICreativeClickThroughUrl &backup_image_click_through_url) {
    m_backup_image_click_through_url = backup_image_click_through_url;
    m_backup_image_click_through_url_isSet = true;
}

bool OAICreative::is_backup_image_click_through_url_Set() const{
    return m_backup_image_click_through_url_isSet;
}

bool OAICreative::is_backup_image_click_through_url_Valid() const{
    return m_backup_image_click_through_url_isValid;
}

QList<QString> OAICreative::getBackupImageFeatures() const {
    return m_backup_image_features;
}
void OAICreative::setBackupImageFeatures(const QList<QString> &backup_image_features) {
    m_backup_image_features = backup_image_features;
    m_backup_image_features_isSet = true;
}

bool OAICreative::is_backup_image_features_Set() const{
    return m_backup_image_features_isSet;
}

bool OAICreative::is_backup_image_features_Valid() const{
    return m_backup_image_features_isValid;
}

QString OAICreative::getBackupImageReportingLabel() const {
    return m_backup_image_reporting_label;
}
void OAICreative::setBackupImageReportingLabel(const QString &backup_image_reporting_label) {
    m_backup_image_reporting_label = backup_image_reporting_label;
    m_backup_image_reporting_label_isSet = true;
}

bool OAICreative::is_backup_image_reporting_label_Set() const{
    return m_backup_image_reporting_label_isSet;
}

bool OAICreative::is_backup_image_reporting_label_Valid() const{
    return m_backup_image_reporting_label_isValid;
}

OAITargetWindow OAICreative::getBackupImageTargetWindow() const {
    return m_backup_image_target_window;
}
void OAICreative::setBackupImageTargetWindow(const OAITargetWindow &backup_image_target_window) {
    m_backup_image_target_window = backup_image_target_window;
    m_backup_image_target_window_isSet = true;
}

bool OAICreative::is_backup_image_target_window_Set() const{
    return m_backup_image_target_window_isSet;
}

bool OAICreative::is_backup_image_target_window_Valid() const{
    return m_backup_image_target_window_isValid;
}

QList<OAIClickTag> OAICreative::getClickTags() const {
    return m_click_tags;
}
void OAICreative::setClickTags(const QList<OAIClickTag> &click_tags) {
    m_click_tags = click_tags;
    m_click_tags_isSet = true;
}

bool OAICreative::is_click_tags_Set() const{
    return m_click_tags_isSet;
}

bool OAICreative::is_click_tags_Valid() const{
    return m_click_tags_isValid;
}

QString OAICreative::getCommercialId() const {
    return m_commercial_id;
}
void OAICreative::setCommercialId(const QString &commercial_id) {
    m_commercial_id = commercial_id;
    m_commercial_id_isSet = true;
}

bool OAICreative::is_commercial_id_Set() const{
    return m_commercial_id_isSet;
}

bool OAICreative::is_commercial_id_Valid() const{
    return m_commercial_id_isValid;
}

QList<QString> OAICreative::getCompanionCreatives() const {
    return m_companion_creatives;
}
void OAICreative::setCompanionCreatives(const QList<QString> &companion_creatives) {
    m_companion_creatives = companion_creatives;
    m_companion_creatives_isSet = true;
}

bool OAICreative::is_companion_creatives_Set() const{
    return m_companion_creatives_isSet;
}

bool OAICreative::is_companion_creatives_Valid() const{
    return m_companion_creatives_isValid;
}

QList<QString> OAICreative::getCompatibility() const {
    return m_compatibility;
}
void OAICreative::setCompatibility(const QList<QString> &compatibility) {
    m_compatibility = compatibility;
    m_compatibility_isSet = true;
}

bool OAICreative::is_compatibility_Set() const{
    return m_compatibility_isSet;
}

bool OAICreative::is_compatibility_Valid() const{
    return m_compatibility_isValid;
}

bool OAICreative::isConvertFlashToHtml5() const {
    return m_convert_flash_to_html5;
}
void OAICreative::setConvertFlashToHtml5(const bool &convert_flash_to_html5) {
    m_convert_flash_to_html5 = convert_flash_to_html5;
    m_convert_flash_to_html5_isSet = true;
}

bool OAICreative::is_convert_flash_to_html5_Set() const{
    return m_convert_flash_to_html5_isSet;
}

bool OAICreative::is_convert_flash_to_html5_Valid() const{
    return m_convert_flash_to_html5_isValid;
}

QList<OAICreativeCustomEvent> OAICreative::getCounterCustomEvents() const {
    return m_counter_custom_events;
}
void OAICreative::setCounterCustomEvents(const QList<OAICreativeCustomEvent> &counter_custom_events) {
    m_counter_custom_events = counter_custom_events;
    m_counter_custom_events_isSet = true;
}

bool OAICreative::is_counter_custom_events_Set() const{
    return m_counter_custom_events_isSet;
}

bool OAICreative::is_counter_custom_events_Valid() const{
    return m_counter_custom_events_isValid;
}

OAICreativeAssetSelection OAICreative::getCreativeAssetSelection() const {
    return m_creative_asset_selection;
}
void OAICreative::setCreativeAssetSelection(const OAICreativeAssetSelection &creative_asset_selection) {
    m_creative_asset_selection = creative_asset_selection;
    m_creative_asset_selection_isSet = true;
}

bool OAICreative::is_creative_asset_selection_Set() const{
    return m_creative_asset_selection_isSet;
}

bool OAICreative::is_creative_asset_selection_Valid() const{
    return m_creative_asset_selection_isValid;
}

QList<OAICreativeAsset> OAICreative::getCreativeAssets() const {
    return m_creative_assets;
}
void OAICreative::setCreativeAssets(const QList<OAICreativeAsset> &creative_assets) {
    m_creative_assets = creative_assets;
    m_creative_assets_isSet = true;
}

bool OAICreative::is_creative_assets_Set() const{
    return m_creative_assets_isSet;
}

bool OAICreative::is_creative_assets_Valid() const{
    return m_creative_assets_isValid;
}

QList<OAICreativeFieldAssignment> OAICreative::getCreativeFieldAssignments() const {
    return m_creative_field_assignments;
}
void OAICreative::setCreativeFieldAssignments(const QList<OAICreativeFieldAssignment> &creative_field_assignments) {
    m_creative_field_assignments = creative_field_assignments;
    m_creative_field_assignments_isSet = true;
}

bool OAICreative::is_creative_field_assignments_Set() const{
    return m_creative_field_assignments_isSet;
}

bool OAICreative::is_creative_field_assignments_Valid() const{
    return m_creative_field_assignments_isValid;
}

QList<QString> OAICreative::getCustomKeyValues() const {
    return m_custom_key_values;
}
void OAICreative::setCustomKeyValues(const QList<QString> &custom_key_values) {
    m_custom_key_values = custom_key_values;
    m_custom_key_values_isSet = true;
}

bool OAICreative::is_custom_key_values_Set() const{
    return m_custom_key_values_isSet;
}

bool OAICreative::is_custom_key_values_Valid() const{
    return m_custom_key_values_isValid;
}

bool OAICreative::isDynamicAssetSelection() const {
    return m_dynamic_asset_selection;
}
void OAICreative::setDynamicAssetSelection(const bool &dynamic_asset_selection) {
    m_dynamic_asset_selection = dynamic_asset_selection;
    m_dynamic_asset_selection_isSet = true;
}

bool OAICreative::is_dynamic_asset_selection_Set() const{
    return m_dynamic_asset_selection_isSet;
}

bool OAICreative::is_dynamic_asset_selection_Valid() const{
    return m_dynamic_asset_selection_isValid;
}

QList<OAICreativeCustomEvent> OAICreative::getExitCustomEvents() const {
    return m_exit_custom_events;
}
void OAICreative::setExitCustomEvents(const QList<OAICreativeCustomEvent> &exit_custom_events) {
    m_exit_custom_events = exit_custom_events;
    m_exit_custom_events_isSet = true;
}

bool OAICreative::is_exit_custom_events_Set() const{
    return m_exit_custom_events_isSet;
}

bool OAICreative::is_exit_custom_events_Valid() const{
    return m_exit_custom_events_isValid;
}

OAIFsCommand OAICreative::getFsCommand() const {
    return m_fs_command;
}
void OAICreative::setFsCommand(const OAIFsCommand &fs_command) {
    m_fs_command = fs_command;
    m_fs_command_isSet = true;
}

bool OAICreative::is_fs_command_Set() const{
    return m_fs_command_isSet;
}

bool OAICreative::is_fs_command_Valid() const{
    return m_fs_command_isValid;
}

QString OAICreative::getHtmlCode() const {
    return m_html_code;
}
void OAICreative::setHtmlCode(const QString &html_code) {
    m_html_code = html_code;
    m_html_code_isSet = true;
}

bool OAICreative::is_html_code_Set() const{
    return m_html_code_isSet;
}

bool OAICreative::is_html_code_Valid() const{
    return m_html_code_isValid;
}

bool OAICreative::isHtmlCodeLocked() const {
    return m_html_code_locked;
}
void OAICreative::setHtmlCodeLocked(const bool &html_code_locked) {
    m_html_code_locked = html_code_locked;
    m_html_code_locked_isSet = true;
}

bool OAICreative::is_html_code_locked_Set() const{
    return m_html_code_locked_isSet;
}

bool OAICreative::is_html_code_locked_Valid() const{
    return m_html_code_locked_isValid;
}

QString OAICreative::getId() const {
    return m_id;
}
void OAICreative::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICreative::is_id_Set() const{
    return m_id_isSet;
}

bool OAICreative::is_id_Valid() const{
    return m_id_isValid;
}

OAIDimensionValue OAICreative::getIdDimensionValue() const {
    return m_id_dimension_value;
}
void OAICreative::setIdDimensionValue(const OAIDimensionValue &id_dimension_value) {
    m_id_dimension_value = id_dimension_value;
    m_id_dimension_value_isSet = true;
}

bool OAICreative::is_id_dimension_value_Set() const{
    return m_id_dimension_value_isSet;
}

bool OAICreative::is_id_dimension_value_Valid() const{
    return m_id_dimension_value_isValid;
}

QString OAICreative::getKind() const {
    return m_kind;
}
void OAICreative::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAICreative::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAICreative::is_kind_Valid() const{
    return m_kind_isValid;
}

OAILastModifiedInfo OAICreative::getLastModifiedInfo() const {
    return m_last_modified_info;
}
void OAICreative::setLastModifiedInfo(const OAILastModifiedInfo &last_modified_info) {
    m_last_modified_info = last_modified_info;
    m_last_modified_info_isSet = true;
}

bool OAICreative::is_last_modified_info_Set() const{
    return m_last_modified_info_isSet;
}

bool OAICreative::is_last_modified_info_Valid() const{
    return m_last_modified_info_isValid;
}

QString OAICreative::getLatestTraffickedCreativeId() const {
    return m_latest_trafficked_creative_id;
}
void OAICreative::setLatestTraffickedCreativeId(const QString &latest_trafficked_creative_id) {
    m_latest_trafficked_creative_id = latest_trafficked_creative_id;
    m_latest_trafficked_creative_id_isSet = true;
}

bool OAICreative::is_latest_trafficked_creative_id_Set() const{
    return m_latest_trafficked_creative_id_isSet;
}

bool OAICreative::is_latest_trafficked_creative_id_Valid() const{
    return m_latest_trafficked_creative_id_isValid;
}

QString OAICreative::getMediaDescription() const {
    return m_media_description;
}
void OAICreative::setMediaDescription(const QString &media_description) {
    m_media_description = media_description;
    m_media_description_isSet = true;
}

bool OAICreative::is_media_description_Set() const{
    return m_media_description_isSet;
}

bool OAICreative::is_media_description_Valid() const{
    return m_media_description_isValid;
}

float OAICreative::getMediaDuration() const {
    return m_media_duration;
}
void OAICreative::setMediaDuration(const float &media_duration) {
    m_media_duration = media_duration;
    m_media_duration_isSet = true;
}

bool OAICreative::is_media_duration_Set() const{
    return m_media_duration_isSet;
}

bool OAICreative::is_media_duration_Valid() const{
    return m_media_duration_isValid;
}

QString OAICreative::getName() const {
    return m_name;
}
void OAICreative::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreative::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreative::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreative::getOverrideCss() const {
    return m_override_css;
}
void OAICreative::setOverrideCss(const QString &override_css) {
    m_override_css = override_css;
    m_override_css_isSet = true;
}

bool OAICreative::is_override_css_Set() const{
    return m_override_css_isSet;
}

bool OAICreative::is_override_css_Valid() const{
    return m_override_css_isValid;
}

OAIVideoOffset OAICreative::getProgressOffset() const {
    return m_progress_offset;
}
void OAICreative::setProgressOffset(const OAIVideoOffset &progress_offset) {
    m_progress_offset = progress_offset;
    m_progress_offset_isSet = true;
}

bool OAICreative::is_progress_offset_Set() const{
    return m_progress_offset_isSet;
}

bool OAICreative::is_progress_offset_Valid() const{
    return m_progress_offset_isValid;
}

QString OAICreative::getRedirectUrl() const {
    return m_redirect_url;
}
void OAICreative::setRedirectUrl(const QString &redirect_url) {
    m_redirect_url = redirect_url;
    m_redirect_url_isSet = true;
}

bool OAICreative::is_redirect_url_Set() const{
    return m_redirect_url_isSet;
}

bool OAICreative::is_redirect_url_Valid() const{
    return m_redirect_url_isValid;
}

QString OAICreative::getRenderingId() const {
    return m_rendering_id;
}
void OAICreative::setRenderingId(const QString &rendering_id) {
    m_rendering_id = rendering_id;
    m_rendering_id_isSet = true;
}

bool OAICreative::is_rendering_id_Set() const{
    return m_rendering_id_isSet;
}

bool OAICreative::is_rendering_id_Valid() const{
    return m_rendering_id_isValid;
}

OAIDimensionValue OAICreative::getRenderingIdDimensionValue() const {
    return m_rendering_id_dimension_value;
}
void OAICreative::setRenderingIdDimensionValue(const OAIDimensionValue &rendering_id_dimension_value) {
    m_rendering_id_dimension_value = rendering_id_dimension_value;
    m_rendering_id_dimension_value_isSet = true;
}

bool OAICreative::is_rendering_id_dimension_value_Set() const{
    return m_rendering_id_dimension_value_isSet;
}

bool OAICreative::is_rendering_id_dimension_value_Valid() const{
    return m_rendering_id_dimension_value_isValid;
}

QString OAICreative::getRequiredFlashPluginVersion() const {
    return m_required_flash_plugin_version;
}
void OAICreative::setRequiredFlashPluginVersion(const QString &required_flash_plugin_version) {
    m_required_flash_plugin_version = required_flash_plugin_version;
    m_required_flash_plugin_version_isSet = true;
}

bool OAICreative::is_required_flash_plugin_version_Set() const{
    return m_required_flash_plugin_version_isSet;
}

bool OAICreative::is_required_flash_plugin_version_Valid() const{
    return m_required_flash_plugin_version_isValid;
}

qint32 OAICreative::getRequiredFlashVersion() const {
    return m_required_flash_version;
}
void OAICreative::setRequiredFlashVersion(const qint32 &required_flash_version) {
    m_required_flash_version = required_flash_version;
    m_required_flash_version_isSet = true;
}

bool OAICreative::is_required_flash_version_Set() const{
    return m_required_flash_version_isSet;
}

bool OAICreative::is_required_flash_version_Valid() const{
    return m_required_flash_version_isValid;
}

OAISize OAICreative::getSize() const {
    return m_size;
}
void OAICreative::setSize(const OAISize &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAICreative::is_size_Set() const{
    return m_size_isSet;
}

bool OAICreative::is_size_Valid() const{
    return m_size_isValid;
}

OAIVideoOffset OAICreative::getSkipOffset() const {
    return m_skip_offset;
}
void OAICreative::setSkipOffset(const OAIVideoOffset &skip_offset) {
    m_skip_offset = skip_offset;
    m_skip_offset_isSet = true;
}

bool OAICreative::is_skip_offset_Set() const{
    return m_skip_offset_isSet;
}

bool OAICreative::is_skip_offset_Valid() const{
    return m_skip_offset_isValid;
}

bool OAICreative::isSkippable() const {
    return m_skippable;
}
void OAICreative::setSkippable(const bool &skippable) {
    m_skippable = skippable;
    m_skippable_isSet = true;
}

bool OAICreative::is_skippable_Set() const{
    return m_skippable_isSet;
}

bool OAICreative::is_skippable_Valid() const{
    return m_skippable_isValid;
}

bool OAICreative::isSslCompliant() const {
    return m_ssl_compliant;
}
void OAICreative::setSslCompliant(const bool &ssl_compliant) {
    m_ssl_compliant = ssl_compliant;
    m_ssl_compliant_isSet = true;
}

bool OAICreative::is_ssl_compliant_Set() const{
    return m_ssl_compliant_isSet;
}

bool OAICreative::is_ssl_compliant_Valid() const{
    return m_ssl_compliant_isValid;
}

bool OAICreative::isSslOverride() const {
    return m_ssl_override;
}
void OAICreative::setSslOverride(const bool &ssl_override) {
    m_ssl_override = ssl_override;
    m_ssl_override_isSet = true;
}

bool OAICreative::is_ssl_override_Set() const{
    return m_ssl_override_isSet;
}

bool OAICreative::is_ssl_override_Valid() const{
    return m_ssl_override_isValid;
}

QString OAICreative::getStudioAdvertiserId() const {
    return m_studio_advertiser_id;
}
void OAICreative::setStudioAdvertiserId(const QString &studio_advertiser_id) {
    m_studio_advertiser_id = studio_advertiser_id;
    m_studio_advertiser_id_isSet = true;
}

bool OAICreative::is_studio_advertiser_id_Set() const{
    return m_studio_advertiser_id_isSet;
}

bool OAICreative::is_studio_advertiser_id_Valid() const{
    return m_studio_advertiser_id_isValid;
}

QString OAICreative::getStudioCreativeId() const {
    return m_studio_creative_id;
}
void OAICreative::setStudioCreativeId(const QString &studio_creative_id) {
    m_studio_creative_id = studio_creative_id;
    m_studio_creative_id_isSet = true;
}

bool OAICreative::is_studio_creative_id_Set() const{
    return m_studio_creative_id_isSet;
}

bool OAICreative::is_studio_creative_id_Valid() const{
    return m_studio_creative_id_isValid;
}

QString OAICreative::getStudioTraffickedCreativeId() const {
    return m_studio_trafficked_creative_id;
}
void OAICreative::setStudioTraffickedCreativeId(const QString &studio_trafficked_creative_id) {
    m_studio_trafficked_creative_id = studio_trafficked_creative_id;
    m_studio_trafficked_creative_id_isSet = true;
}

bool OAICreative::is_studio_trafficked_creative_id_Set() const{
    return m_studio_trafficked_creative_id_isSet;
}

bool OAICreative::is_studio_trafficked_creative_id_Valid() const{
    return m_studio_trafficked_creative_id_isValid;
}

QString OAICreative::getSubaccountId() const {
    return m_subaccount_id;
}
void OAICreative::setSubaccountId(const QString &subaccount_id) {
    m_subaccount_id = subaccount_id;
    m_subaccount_id_isSet = true;
}

bool OAICreative::is_subaccount_id_Set() const{
    return m_subaccount_id_isSet;
}

bool OAICreative::is_subaccount_id_Valid() const{
    return m_subaccount_id_isValid;
}

QString OAICreative::getThirdPartyBackupImageImpressionsUrl() const {
    return m_third_party_backup_image_impressions_url;
}
void OAICreative::setThirdPartyBackupImageImpressionsUrl(const QString &third_party_backup_image_impressions_url) {
    m_third_party_backup_image_impressions_url = third_party_backup_image_impressions_url;
    m_third_party_backup_image_impressions_url_isSet = true;
}

bool OAICreative::is_third_party_backup_image_impressions_url_Set() const{
    return m_third_party_backup_image_impressions_url_isSet;
}

bool OAICreative::is_third_party_backup_image_impressions_url_Valid() const{
    return m_third_party_backup_image_impressions_url_isValid;
}

QString OAICreative::getThirdPartyRichMediaImpressionsUrl() const {
    return m_third_party_rich_media_impressions_url;
}
void OAICreative::setThirdPartyRichMediaImpressionsUrl(const QString &third_party_rich_media_impressions_url) {
    m_third_party_rich_media_impressions_url = third_party_rich_media_impressions_url;
    m_third_party_rich_media_impressions_url_isSet = true;
}

bool OAICreative::is_third_party_rich_media_impressions_url_Set() const{
    return m_third_party_rich_media_impressions_url_isSet;
}

bool OAICreative::is_third_party_rich_media_impressions_url_Valid() const{
    return m_third_party_rich_media_impressions_url_isValid;
}

QList<OAIThirdPartyTrackingUrl> OAICreative::getThirdPartyUrls() const {
    return m_third_party_urls;
}
void OAICreative::setThirdPartyUrls(const QList<OAIThirdPartyTrackingUrl> &third_party_urls) {
    m_third_party_urls = third_party_urls;
    m_third_party_urls_isSet = true;
}

bool OAICreative::is_third_party_urls_Set() const{
    return m_third_party_urls_isSet;
}

bool OAICreative::is_third_party_urls_Valid() const{
    return m_third_party_urls_isValid;
}

QList<OAICreativeCustomEvent> OAICreative::getTimerCustomEvents() const {
    return m_timer_custom_events;
}
void OAICreative::setTimerCustomEvents(const QList<OAICreativeCustomEvent> &timer_custom_events) {
    m_timer_custom_events = timer_custom_events;
    m_timer_custom_events_isSet = true;
}

bool OAICreative::is_timer_custom_events_Set() const{
    return m_timer_custom_events_isSet;
}

bool OAICreative::is_timer_custom_events_Valid() const{
    return m_timer_custom_events_isValid;
}

QString OAICreative::getTotalFileSize() const {
    return m_total_file_size;
}
void OAICreative::setTotalFileSize(const QString &total_file_size) {
    m_total_file_size = total_file_size;
    m_total_file_size_isSet = true;
}

bool OAICreative::is_total_file_size_Set() const{
    return m_total_file_size_isSet;
}

bool OAICreative::is_total_file_size_Valid() const{
    return m_total_file_size_isValid;
}

QString OAICreative::getType() const {
    return m_type;
}
void OAICreative::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreative::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreative::is_type_Valid() const{
    return m_type_isValid;
}

OAIUniversalAdId OAICreative::getUniversalAdId() const {
    return m_universal_ad_id;
}
void OAICreative::setUniversalAdId(const OAIUniversalAdId &universal_ad_id) {
    m_universal_ad_id = universal_ad_id;
    m_universal_ad_id_isSet = true;
}

bool OAICreative::is_universal_ad_id_Set() const{
    return m_universal_ad_id_isSet;
}

bool OAICreative::is_universal_ad_id_Valid() const{
    return m_universal_ad_id_isValid;
}

qint32 OAICreative::getVersion() const {
    return m_version;
}
void OAICreative::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAICreative::is_version_Set() const{
    return m_version_isSet;
}

bool OAICreative::is_version_Valid() const{
    return m_version_isValid;
}

bool OAICreative::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ad_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ad_tag_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_sizes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_advertiser_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_script_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_archived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artwork_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authoring_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authoring_tool_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_advance_images_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_background_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_image_click_through_url.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_image_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_image_reporting_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_image_target_window.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_click_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_commercial_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_companion_creatives.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_compatibility.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_convert_flash_to_html5_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counter_custom_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_creative_asset_selection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creative_assets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_creative_field_assignments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_key_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dynamic_asset_selection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exit_custom_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fs_command.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_code_locked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_dimension_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_trafficked_creative_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_css_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_offset.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rendering_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rendering_id_dimension_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_flash_plugin_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_flash_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_offset.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_skippable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_compliant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_studio_advertiser_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_studio_creative_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_studio_trafficked_creative_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subaccount_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_third_party_backup_image_impressions_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_third_party_rich_media_impressions_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_third_party_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_timer_custom_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_file_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_universal_ad_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreative::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
