/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFloodlightActivityPublisherDynamicTag.h
 *
 * Publisher Dynamic Tag
 */

#ifndef OAIFloodlightActivityPublisherDynamicTag_H
#define OAIFloodlightActivityPublisherDynamicTag_H

#include <QJsonObject>

#include "OAIDimensionValue.h"
#include "OAIFloodlightActivityDynamicTag.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIFloodlightActivityDynamicTag;
class OAIDimensionValue;

class OAIFloodlightActivityPublisherDynamicTag : public OAIObject {
public:
    OAIFloodlightActivityPublisherDynamicTag();
    OAIFloodlightActivityPublisherDynamicTag(QString json);
    ~OAIFloodlightActivityPublisherDynamicTag() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isClickThrough() const;
    void setClickThrough(const bool &click_through);
    bool is_click_through_Set() const;
    bool is_click_through_Valid() const;

    QString getDirectorySiteId() const;
    void setDirectorySiteId(const QString &directory_site_id);
    bool is_directory_site_id_Set() const;
    bool is_directory_site_id_Valid() const;

    OAIFloodlightActivityDynamicTag getDynamicTag() const;
    void setDynamicTag(const OAIFloodlightActivityDynamicTag &dynamic_tag);
    bool is_dynamic_tag_Set() const;
    bool is_dynamic_tag_Valid() const;

    QString getSiteId() const;
    void setSiteId(const QString &site_id);
    bool is_site_id_Set() const;
    bool is_site_id_Valid() const;

    OAIDimensionValue getSiteIdDimensionValue() const;
    void setSiteIdDimensionValue(const OAIDimensionValue &site_id_dimension_value);
    bool is_site_id_dimension_value_Set() const;
    bool is_site_id_dimension_value_Valid() const;

    bool isViewThrough() const;
    void setViewThrough(const bool &view_through);
    bool is_view_through_Set() const;
    bool is_view_through_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_click_through;
    bool m_click_through_isSet;
    bool m_click_through_isValid;

    QString m_directory_site_id;
    bool m_directory_site_id_isSet;
    bool m_directory_site_id_isValid;

    OAIFloodlightActivityDynamicTag m_dynamic_tag;
    bool m_dynamic_tag_isSet;
    bool m_dynamic_tag_isValid;

    QString m_site_id;
    bool m_site_id_isSet;
    bool m_site_id_isValid;

    OAIDimensionValue m_site_id_dimension_value;
    bool m_site_id_dimension_value_isSet;
    bool m_site_id_dimension_value_isValid;

    bool m_view_through;
    bool m_view_through_isSet;
    bool m_view_through_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFloodlightActivityPublisherDynamicTag)

#endif // OAIFloodlightActivityPublisherDynamicTag_H
