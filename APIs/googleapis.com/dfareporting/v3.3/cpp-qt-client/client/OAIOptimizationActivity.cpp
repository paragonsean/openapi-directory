/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOptimizationActivity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOptimizationActivity::OAIOptimizationActivity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOptimizationActivity::OAIOptimizationActivity() {
    this->initializeModel();
}

OAIOptimizationActivity::~OAIOptimizationActivity() {}

void OAIOptimizationActivity::initializeModel() {

    m_floodlight_activity_id_isSet = false;
    m_floodlight_activity_id_isValid = false;

    m_floodlight_activity_id_dimension_value_isSet = false;
    m_floodlight_activity_id_dimension_value_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAIOptimizationActivity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOptimizationActivity::fromJsonObject(QJsonObject json) {

    m_floodlight_activity_id_isValid = ::OpenAPI::fromJsonValue(m_floodlight_activity_id, json[QString("floodlightActivityId")]);
    m_floodlight_activity_id_isSet = !json[QString("floodlightActivityId")].isNull() && m_floodlight_activity_id_isValid;

    m_floodlight_activity_id_dimension_value_isValid = ::OpenAPI::fromJsonValue(m_floodlight_activity_id_dimension_value, json[QString("floodlightActivityIdDimensionValue")]);
    m_floodlight_activity_id_dimension_value_isSet = !json[QString("floodlightActivityIdDimensionValue")].isNull() && m_floodlight_activity_id_dimension_value_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;
}

QString OAIOptimizationActivity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOptimizationActivity::asJsonObject() const {
    QJsonObject obj;
    if (m_floodlight_activity_id_isSet) {
        obj.insert(QString("floodlightActivityId"), ::OpenAPI::toJsonValue(m_floodlight_activity_id));
    }
    if (m_floodlight_activity_id_dimension_value.isSet()) {
        obj.insert(QString("floodlightActivityIdDimensionValue"), ::OpenAPI::toJsonValue(m_floodlight_activity_id_dimension_value));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

QString OAIOptimizationActivity::getFloodlightActivityId() const {
    return m_floodlight_activity_id;
}
void OAIOptimizationActivity::setFloodlightActivityId(const QString &floodlight_activity_id) {
    m_floodlight_activity_id = floodlight_activity_id;
    m_floodlight_activity_id_isSet = true;
}

bool OAIOptimizationActivity::is_floodlight_activity_id_Set() const{
    return m_floodlight_activity_id_isSet;
}

bool OAIOptimizationActivity::is_floodlight_activity_id_Valid() const{
    return m_floodlight_activity_id_isValid;
}

OAIDimensionValue OAIOptimizationActivity::getFloodlightActivityIdDimensionValue() const {
    return m_floodlight_activity_id_dimension_value;
}
void OAIOptimizationActivity::setFloodlightActivityIdDimensionValue(const OAIDimensionValue &floodlight_activity_id_dimension_value) {
    m_floodlight_activity_id_dimension_value = floodlight_activity_id_dimension_value;
    m_floodlight_activity_id_dimension_value_isSet = true;
}

bool OAIOptimizationActivity::is_floodlight_activity_id_dimension_value_Set() const{
    return m_floodlight_activity_id_dimension_value_isSet;
}

bool OAIOptimizationActivity::is_floodlight_activity_id_dimension_value_Valid() const{
    return m_floodlight_activity_id_dimension_value_isValid;
}

qint32 OAIOptimizationActivity::getWeight() const {
    return m_weight;
}
void OAIOptimizationActivity::setWeight(const qint32 &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIOptimizationActivity::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIOptimizationActivity::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAIOptimizationActivity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_floodlight_activity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_floodlight_activity_id_dimension_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOptimizationActivity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
