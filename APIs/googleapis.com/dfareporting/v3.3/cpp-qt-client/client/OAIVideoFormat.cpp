/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoFormat::OAIVideoFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoFormat::OAIVideoFormat() {
    this->initializeModel();
}

OAIVideoFormat::~OAIVideoFormat() {}

void OAIVideoFormat::initializeModel() {

    m_file_type_isSet = false;
    m_file_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_resolution_isSet = false;
    m_resolution_isValid = false;

    m_target_bit_rate_isSet = false;
    m_target_bit_rate_isValid = false;
}

void OAIVideoFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoFormat::fromJsonObject(QJsonObject json) {

    m_file_type_isValid = ::OpenAPI::fromJsonValue(m_file_type, json[QString("fileType")]);
    m_file_type_isSet = !json[QString("fileType")].isNull() && m_file_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_resolution_isValid = ::OpenAPI::fromJsonValue(m_resolution, json[QString("resolution")]);
    m_resolution_isSet = !json[QString("resolution")].isNull() && m_resolution_isValid;

    m_target_bit_rate_isValid = ::OpenAPI::fromJsonValue(m_target_bit_rate, json[QString("targetBitRate")]);
    m_target_bit_rate_isSet = !json[QString("targetBitRate")].isNull() && m_target_bit_rate_isValid;
}

QString OAIVideoFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_file_type_isSet) {
        obj.insert(QString("fileType"), ::OpenAPI::toJsonValue(m_file_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_resolution.isSet()) {
        obj.insert(QString("resolution"), ::OpenAPI::toJsonValue(m_resolution));
    }
    if (m_target_bit_rate_isSet) {
        obj.insert(QString("targetBitRate"), ::OpenAPI::toJsonValue(m_target_bit_rate));
    }
    return obj;
}

QString OAIVideoFormat::getFileType() const {
    return m_file_type;
}
void OAIVideoFormat::setFileType(const QString &file_type) {
    m_file_type = file_type;
    m_file_type_isSet = true;
}

bool OAIVideoFormat::is_file_type_Set() const{
    return m_file_type_isSet;
}

bool OAIVideoFormat::is_file_type_Valid() const{
    return m_file_type_isValid;
}

qint32 OAIVideoFormat::getId() const {
    return m_id;
}
void OAIVideoFormat::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIVideoFormat::is_id_Set() const{
    return m_id_isSet;
}

bool OAIVideoFormat::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIVideoFormat::getKind() const {
    return m_kind;
}
void OAIVideoFormat::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIVideoFormat::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIVideoFormat::is_kind_Valid() const{
    return m_kind_isValid;
}

OAISize OAIVideoFormat::getResolution() const {
    return m_resolution;
}
void OAIVideoFormat::setResolution(const OAISize &resolution) {
    m_resolution = resolution;
    m_resolution_isSet = true;
}

bool OAIVideoFormat::is_resolution_Set() const{
    return m_resolution_isSet;
}

bool OAIVideoFormat::is_resolution_Valid() const{
    return m_resolution_isValid;
}

qint32 OAIVideoFormat::getTargetBitRate() const {
    return m_target_bit_rate;
}
void OAIVideoFormat::setTargetBitRate(const qint32 &target_bit_rate) {
    m_target_bit_rate = target_bit_rate;
    m_target_bit_rate_isSet = true;
}

bool OAIVideoFormat::is_target_bit_rate_Set() const{
    return m_target_bit_rate_isSet;
}

bool OAIVideoFormat::is_target_bit_rate_Valid() const{
    return m_target_bit_rate_isValid;
}

bool OAIVideoFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_bit_rate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
