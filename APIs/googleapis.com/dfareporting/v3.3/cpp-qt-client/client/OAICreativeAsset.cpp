/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreativeAsset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreativeAsset::OAICreativeAsset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreativeAsset::OAICreativeAsset() {
    this->initializeModel();
}

OAICreativeAsset::~OAICreativeAsset() {}

void OAICreativeAsset::initializeModel() {

    m_action_script3_isSet = false;
    m_action_script3_isValid = false;

    m_active_isSet = false;
    m_active_isValid = false;

    m_additional_sizes_isSet = false;
    m_additional_sizes_isValid = false;

    m_alignment_isSet = false;
    m_alignment_isValid = false;

    m_artwork_type_isSet = false;
    m_artwork_type_isValid = false;

    m_asset_identifier_isSet = false;
    m_asset_identifier_isValid = false;

    m_audio_bit_rate_isSet = false;
    m_audio_bit_rate_isValid = false;

    m_audio_sample_rate_isSet = false;
    m_audio_sample_rate_isValid = false;

    m_backup_image_exit_isSet = false;
    m_backup_image_exit_isValid = false;

    m_bit_rate_isSet = false;
    m_bit_rate_isValid = false;

    m_child_asset_type_isSet = false;
    m_child_asset_type_isValid = false;

    m_collapsed_size_isSet = false;
    m_collapsed_size_isValid = false;

    m_companion_creative_ids_isSet = false;
    m_companion_creative_ids_isValid = false;

    m_custom_start_time_value_isSet = false;
    m_custom_start_time_value_isValid = false;

    m_detected_features_isSet = false;
    m_detected_features_isValid = false;

    m_display_type_isSet = false;
    m_display_type_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_duration_type_isSet = false;
    m_duration_type_isValid = false;

    m_expanded_dimension_isSet = false;
    m_expanded_dimension_isValid = false;

    m_file_size_isSet = false;
    m_file_size_isValid = false;

    m_flash_version_isSet = false;
    m_flash_version_isValid = false;

    m_frame_rate_isSet = false;
    m_frame_rate_isValid = false;

    m_hide_flash_objects_isSet = false;
    m_hide_flash_objects_isValid = false;

    m_hide_selection_boxes_isSet = false;
    m_hide_selection_boxes_isValid = false;

    m_horizontally_locked_isSet = false;
    m_horizontally_locked_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_id_dimension_value_isSet = false;
    m_id_dimension_value_isValid = false;

    m_media_duration_isSet = false;
    m_media_duration_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_orientation_isSet = false;
    m_orientation_isValid = false;

    m_original_backup_isSet = false;
    m_original_backup_isValid = false;

    m_polite_load_isSet = false;
    m_polite_load_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_position_left_unit_isSet = false;
    m_position_left_unit_isValid = false;

    m_position_top_unit_isSet = false;
    m_position_top_unit_isValid = false;

    m_progressive_serving_url_isSet = false;
    m_progressive_serving_url_isValid = false;

    m_pushdown_isSet = false;
    m_pushdown_isValid = false;

    m_pushdown_duration_isSet = false;
    m_pushdown_duration_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_ssl_compliant_isSet = false;
    m_ssl_compliant_isValid = false;

    m_start_time_type_isSet = false;
    m_start_time_type_isValid = false;

    m_streaming_serving_url_isSet = false;
    m_streaming_serving_url_isValid = false;

    m_transparency_isSet = false;
    m_transparency_isValid = false;

    m_vertically_locked_isSet = false;
    m_vertically_locked_isValid = false;

    m_window_mode_isSet = false;
    m_window_mode_isValid = false;

    m_z_index_isSet = false;
    m_z_index_isValid = false;

    m_zip_filename_isSet = false;
    m_zip_filename_isValid = false;

    m_zip_filesize_isSet = false;
    m_zip_filesize_isValid = false;
}

void OAICreativeAsset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreativeAsset::fromJsonObject(QJsonObject json) {

    m_action_script3_isValid = ::OpenAPI::fromJsonValue(m_action_script3, json[QString("actionScript3")]);
    m_action_script3_isSet = !json[QString("actionScript3")].isNull() && m_action_script3_isValid;

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_additional_sizes_isValid = ::OpenAPI::fromJsonValue(m_additional_sizes, json[QString("additionalSizes")]);
    m_additional_sizes_isSet = !json[QString("additionalSizes")].isNull() && m_additional_sizes_isValid;

    m_alignment_isValid = ::OpenAPI::fromJsonValue(m_alignment, json[QString("alignment")]);
    m_alignment_isSet = !json[QString("alignment")].isNull() && m_alignment_isValid;

    m_artwork_type_isValid = ::OpenAPI::fromJsonValue(m_artwork_type, json[QString("artworkType")]);
    m_artwork_type_isSet = !json[QString("artworkType")].isNull() && m_artwork_type_isValid;

    m_asset_identifier_isValid = ::OpenAPI::fromJsonValue(m_asset_identifier, json[QString("assetIdentifier")]);
    m_asset_identifier_isSet = !json[QString("assetIdentifier")].isNull() && m_asset_identifier_isValid;

    m_audio_bit_rate_isValid = ::OpenAPI::fromJsonValue(m_audio_bit_rate, json[QString("audioBitRate")]);
    m_audio_bit_rate_isSet = !json[QString("audioBitRate")].isNull() && m_audio_bit_rate_isValid;

    m_audio_sample_rate_isValid = ::OpenAPI::fromJsonValue(m_audio_sample_rate, json[QString("audioSampleRate")]);
    m_audio_sample_rate_isSet = !json[QString("audioSampleRate")].isNull() && m_audio_sample_rate_isValid;

    m_backup_image_exit_isValid = ::OpenAPI::fromJsonValue(m_backup_image_exit, json[QString("backupImageExit")]);
    m_backup_image_exit_isSet = !json[QString("backupImageExit")].isNull() && m_backup_image_exit_isValid;

    m_bit_rate_isValid = ::OpenAPI::fromJsonValue(m_bit_rate, json[QString("bitRate")]);
    m_bit_rate_isSet = !json[QString("bitRate")].isNull() && m_bit_rate_isValid;

    m_child_asset_type_isValid = ::OpenAPI::fromJsonValue(m_child_asset_type, json[QString("childAssetType")]);
    m_child_asset_type_isSet = !json[QString("childAssetType")].isNull() && m_child_asset_type_isValid;

    m_collapsed_size_isValid = ::OpenAPI::fromJsonValue(m_collapsed_size, json[QString("collapsedSize")]);
    m_collapsed_size_isSet = !json[QString("collapsedSize")].isNull() && m_collapsed_size_isValid;

    m_companion_creative_ids_isValid = ::OpenAPI::fromJsonValue(m_companion_creative_ids, json[QString("companionCreativeIds")]);
    m_companion_creative_ids_isSet = !json[QString("companionCreativeIds")].isNull() && m_companion_creative_ids_isValid;

    m_custom_start_time_value_isValid = ::OpenAPI::fromJsonValue(m_custom_start_time_value, json[QString("customStartTimeValue")]);
    m_custom_start_time_value_isSet = !json[QString("customStartTimeValue")].isNull() && m_custom_start_time_value_isValid;

    m_detected_features_isValid = ::OpenAPI::fromJsonValue(m_detected_features, json[QString("detectedFeatures")]);
    m_detected_features_isSet = !json[QString("detectedFeatures")].isNull() && m_detected_features_isValid;

    m_display_type_isValid = ::OpenAPI::fromJsonValue(m_display_type, json[QString("displayType")]);
    m_display_type_isSet = !json[QString("displayType")].isNull() && m_display_type_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_duration_type_isValid = ::OpenAPI::fromJsonValue(m_duration_type, json[QString("durationType")]);
    m_duration_type_isSet = !json[QString("durationType")].isNull() && m_duration_type_isValid;

    m_expanded_dimension_isValid = ::OpenAPI::fromJsonValue(m_expanded_dimension, json[QString("expandedDimension")]);
    m_expanded_dimension_isSet = !json[QString("expandedDimension")].isNull() && m_expanded_dimension_isValid;

    m_file_size_isValid = ::OpenAPI::fromJsonValue(m_file_size, json[QString("fileSize")]);
    m_file_size_isSet = !json[QString("fileSize")].isNull() && m_file_size_isValid;

    m_flash_version_isValid = ::OpenAPI::fromJsonValue(m_flash_version, json[QString("flashVersion")]);
    m_flash_version_isSet = !json[QString("flashVersion")].isNull() && m_flash_version_isValid;

    m_frame_rate_isValid = ::OpenAPI::fromJsonValue(m_frame_rate, json[QString("frameRate")]);
    m_frame_rate_isSet = !json[QString("frameRate")].isNull() && m_frame_rate_isValid;

    m_hide_flash_objects_isValid = ::OpenAPI::fromJsonValue(m_hide_flash_objects, json[QString("hideFlashObjects")]);
    m_hide_flash_objects_isSet = !json[QString("hideFlashObjects")].isNull() && m_hide_flash_objects_isValid;

    m_hide_selection_boxes_isValid = ::OpenAPI::fromJsonValue(m_hide_selection_boxes, json[QString("hideSelectionBoxes")]);
    m_hide_selection_boxes_isSet = !json[QString("hideSelectionBoxes")].isNull() && m_hide_selection_boxes_isValid;

    m_horizontally_locked_isValid = ::OpenAPI::fromJsonValue(m_horizontally_locked, json[QString("horizontallyLocked")]);
    m_horizontally_locked_isSet = !json[QString("horizontallyLocked")].isNull() && m_horizontally_locked_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_id_dimension_value_isValid = ::OpenAPI::fromJsonValue(m_id_dimension_value, json[QString("idDimensionValue")]);
    m_id_dimension_value_isSet = !json[QString("idDimensionValue")].isNull() && m_id_dimension_value_isValid;

    m_media_duration_isValid = ::OpenAPI::fromJsonValue(m_media_duration, json[QString("mediaDuration")]);
    m_media_duration_isSet = !json[QString("mediaDuration")].isNull() && m_media_duration_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mimeType")]);
    m_mime_type_isSet = !json[QString("mimeType")].isNull() && m_mime_type_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_orientation_isValid = ::OpenAPI::fromJsonValue(m_orientation, json[QString("orientation")]);
    m_orientation_isSet = !json[QString("orientation")].isNull() && m_orientation_isValid;

    m_original_backup_isValid = ::OpenAPI::fromJsonValue(m_original_backup, json[QString("originalBackup")]);
    m_original_backup_isSet = !json[QString("originalBackup")].isNull() && m_original_backup_isValid;

    m_polite_load_isValid = ::OpenAPI::fromJsonValue(m_polite_load, json[QString("politeLoad")]);
    m_polite_load_isSet = !json[QString("politeLoad")].isNull() && m_polite_load_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_position_left_unit_isValid = ::OpenAPI::fromJsonValue(m_position_left_unit, json[QString("positionLeftUnit")]);
    m_position_left_unit_isSet = !json[QString("positionLeftUnit")].isNull() && m_position_left_unit_isValid;

    m_position_top_unit_isValid = ::OpenAPI::fromJsonValue(m_position_top_unit, json[QString("positionTopUnit")]);
    m_position_top_unit_isSet = !json[QString("positionTopUnit")].isNull() && m_position_top_unit_isValid;

    m_progressive_serving_url_isValid = ::OpenAPI::fromJsonValue(m_progressive_serving_url, json[QString("progressiveServingUrl")]);
    m_progressive_serving_url_isSet = !json[QString("progressiveServingUrl")].isNull() && m_progressive_serving_url_isValid;

    m_pushdown_isValid = ::OpenAPI::fromJsonValue(m_pushdown, json[QString("pushdown")]);
    m_pushdown_isSet = !json[QString("pushdown")].isNull() && m_pushdown_isValid;

    m_pushdown_duration_isValid = ::OpenAPI::fromJsonValue(m_pushdown_duration, json[QString("pushdownDuration")]);
    m_pushdown_duration_isSet = !json[QString("pushdownDuration")].isNull() && m_pushdown_duration_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_ssl_compliant_isValid = ::OpenAPI::fromJsonValue(m_ssl_compliant, json[QString("sslCompliant")]);
    m_ssl_compliant_isSet = !json[QString("sslCompliant")].isNull() && m_ssl_compliant_isValid;

    m_start_time_type_isValid = ::OpenAPI::fromJsonValue(m_start_time_type, json[QString("startTimeType")]);
    m_start_time_type_isSet = !json[QString("startTimeType")].isNull() && m_start_time_type_isValid;

    m_streaming_serving_url_isValid = ::OpenAPI::fromJsonValue(m_streaming_serving_url, json[QString("streamingServingUrl")]);
    m_streaming_serving_url_isSet = !json[QString("streamingServingUrl")].isNull() && m_streaming_serving_url_isValid;

    m_transparency_isValid = ::OpenAPI::fromJsonValue(m_transparency, json[QString("transparency")]);
    m_transparency_isSet = !json[QString("transparency")].isNull() && m_transparency_isValid;

    m_vertically_locked_isValid = ::OpenAPI::fromJsonValue(m_vertically_locked, json[QString("verticallyLocked")]);
    m_vertically_locked_isSet = !json[QString("verticallyLocked")].isNull() && m_vertically_locked_isValid;

    m_window_mode_isValid = ::OpenAPI::fromJsonValue(m_window_mode, json[QString("windowMode")]);
    m_window_mode_isSet = !json[QString("windowMode")].isNull() && m_window_mode_isValid;

    m_z_index_isValid = ::OpenAPI::fromJsonValue(m_z_index, json[QString("zIndex")]);
    m_z_index_isSet = !json[QString("zIndex")].isNull() && m_z_index_isValid;

    m_zip_filename_isValid = ::OpenAPI::fromJsonValue(m_zip_filename, json[QString("zipFilename")]);
    m_zip_filename_isSet = !json[QString("zipFilename")].isNull() && m_zip_filename_isValid;

    m_zip_filesize_isValid = ::OpenAPI::fromJsonValue(m_zip_filesize, json[QString("zipFilesize")]);
    m_zip_filesize_isSet = !json[QString("zipFilesize")].isNull() && m_zip_filesize_isValid;
}

QString OAICreativeAsset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreativeAsset::asJsonObject() const {
    QJsonObject obj;
    if (m_action_script3_isSet) {
        obj.insert(QString("actionScript3"), ::OpenAPI::toJsonValue(m_action_script3));
    }
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_additional_sizes.size() > 0) {
        obj.insert(QString("additionalSizes"), ::OpenAPI::toJsonValue(m_additional_sizes));
    }
    if (m_alignment_isSet) {
        obj.insert(QString("alignment"), ::OpenAPI::toJsonValue(m_alignment));
    }
    if (m_artwork_type_isSet) {
        obj.insert(QString("artworkType"), ::OpenAPI::toJsonValue(m_artwork_type));
    }
    if (m_asset_identifier.isSet()) {
        obj.insert(QString("assetIdentifier"), ::OpenAPI::toJsonValue(m_asset_identifier));
    }
    if (m_audio_bit_rate_isSet) {
        obj.insert(QString("audioBitRate"), ::OpenAPI::toJsonValue(m_audio_bit_rate));
    }
    if (m_audio_sample_rate_isSet) {
        obj.insert(QString("audioSampleRate"), ::OpenAPI::toJsonValue(m_audio_sample_rate));
    }
    if (m_backup_image_exit.isSet()) {
        obj.insert(QString("backupImageExit"), ::OpenAPI::toJsonValue(m_backup_image_exit));
    }
    if (m_bit_rate_isSet) {
        obj.insert(QString("bitRate"), ::OpenAPI::toJsonValue(m_bit_rate));
    }
    if (m_child_asset_type_isSet) {
        obj.insert(QString("childAssetType"), ::OpenAPI::toJsonValue(m_child_asset_type));
    }
    if (m_collapsed_size.isSet()) {
        obj.insert(QString("collapsedSize"), ::OpenAPI::toJsonValue(m_collapsed_size));
    }
    if (m_companion_creative_ids.size() > 0) {
        obj.insert(QString("companionCreativeIds"), ::OpenAPI::toJsonValue(m_companion_creative_ids));
    }
    if (m_custom_start_time_value_isSet) {
        obj.insert(QString("customStartTimeValue"), ::OpenAPI::toJsonValue(m_custom_start_time_value));
    }
    if (m_detected_features.size() > 0) {
        obj.insert(QString("detectedFeatures"), ::OpenAPI::toJsonValue(m_detected_features));
    }
    if (m_display_type_isSet) {
        obj.insert(QString("displayType"), ::OpenAPI::toJsonValue(m_display_type));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_duration_type_isSet) {
        obj.insert(QString("durationType"), ::OpenAPI::toJsonValue(m_duration_type));
    }
    if (m_expanded_dimension.isSet()) {
        obj.insert(QString("expandedDimension"), ::OpenAPI::toJsonValue(m_expanded_dimension));
    }
    if (m_file_size_isSet) {
        obj.insert(QString("fileSize"), ::OpenAPI::toJsonValue(m_file_size));
    }
    if (m_flash_version_isSet) {
        obj.insert(QString("flashVersion"), ::OpenAPI::toJsonValue(m_flash_version));
    }
    if (m_frame_rate_isSet) {
        obj.insert(QString("frameRate"), ::OpenAPI::toJsonValue(m_frame_rate));
    }
    if (m_hide_flash_objects_isSet) {
        obj.insert(QString("hideFlashObjects"), ::OpenAPI::toJsonValue(m_hide_flash_objects));
    }
    if (m_hide_selection_boxes_isSet) {
        obj.insert(QString("hideSelectionBoxes"), ::OpenAPI::toJsonValue(m_hide_selection_boxes));
    }
    if (m_horizontally_locked_isSet) {
        obj.insert(QString("horizontallyLocked"), ::OpenAPI::toJsonValue(m_horizontally_locked));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_id_dimension_value.isSet()) {
        obj.insert(QString("idDimensionValue"), ::OpenAPI::toJsonValue(m_id_dimension_value));
    }
    if (m_media_duration_isSet) {
        obj.insert(QString("mediaDuration"), ::OpenAPI::toJsonValue(m_media_duration));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mimeType"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    if (m_offset.isSet()) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_orientation_isSet) {
        obj.insert(QString("orientation"), ::OpenAPI::toJsonValue(m_orientation));
    }
    if (m_original_backup_isSet) {
        obj.insert(QString("originalBackup"), ::OpenAPI::toJsonValue(m_original_backup));
    }
    if (m_polite_load_isSet) {
        obj.insert(QString("politeLoad"), ::OpenAPI::toJsonValue(m_polite_load));
    }
    if (m_position.isSet()) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_position_left_unit_isSet) {
        obj.insert(QString("positionLeftUnit"), ::OpenAPI::toJsonValue(m_position_left_unit));
    }
    if (m_position_top_unit_isSet) {
        obj.insert(QString("positionTopUnit"), ::OpenAPI::toJsonValue(m_position_top_unit));
    }
    if (m_progressive_serving_url_isSet) {
        obj.insert(QString("progressiveServingUrl"), ::OpenAPI::toJsonValue(m_progressive_serving_url));
    }
    if (m_pushdown_isSet) {
        obj.insert(QString("pushdown"), ::OpenAPI::toJsonValue(m_pushdown));
    }
    if (m_pushdown_duration_isSet) {
        obj.insert(QString("pushdownDuration"), ::OpenAPI::toJsonValue(m_pushdown_duration));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_size.isSet()) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_ssl_compliant_isSet) {
        obj.insert(QString("sslCompliant"), ::OpenAPI::toJsonValue(m_ssl_compliant));
    }
    if (m_start_time_type_isSet) {
        obj.insert(QString("startTimeType"), ::OpenAPI::toJsonValue(m_start_time_type));
    }
    if (m_streaming_serving_url_isSet) {
        obj.insert(QString("streamingServingUrl"), ::OpenAPI::toJsonValue(m_streaming_serving_url));
    }
    if (m_transparency_isSet) {
        obj.insert(QString("transparency"), ::OpenAPI::toJsonValue(m_transparency));
    }
    if (m_vertically_locked_isSet) {
        obj.insert(QString("verticallyLocked"), ::OpenAPI::toJsonValue(m_vertically_locked));
    }
    if (m_window_mode_isSet) {
        obj.insert(QString("windowMode"), ::OpenAPI::toJsonValue(m_window_mode));
    }
    if (m_z_index_isSet) {
        obj.insert(QString("zIndex"), ::OpenAPI::toJsonValue(m_z_index));
    }
    if (m_zip_filename_isSet) {
        obj.insert(QString("zipFilename"), ::OpenAPI::toJsonValue(m_zip_filename));
    }
    if (m_zip_filesize_isSet) {
        obj.insert(QString("zipFilesize"), ::OpenAPI::toJsonValue(m_zip_filesize));
    }
    return obj;
}

bool OAICreativeAsset::isActionScript3() const {
    return m_action_script3;
}
void OAICreativeAsset::setActionScript3(const bool &action_script3) {
    m_action_script3 = action_script3;
    m_action_script3_isSet = true;
}

bool OAICreativeAsset::is_action_script3_Set() const{
    return m_action_script3_isSet;
}

bool OAICreativeAsset::is_action_script3_Valid() const{
    return m_action_script3_isValid;
}

bool OAICreativeAsset::isActive() const {
    return m_active;
}
void OAICreativeAsset::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAICreativeAsset::is_active_Set() const{
    return m_active_isSet;
}

bool OAICreativeAsset::is_active_Valid() const{
    return m_active_isValid;
}

QList<OAISize> OAICreativeAsset::getAdditionalSizes() const {
    return m_additional_sizes;
}
void OAICreativeAsset::setAdditionalSizes(const QList<OAISize> &additional_sizes) {
    m_additional_sizes = additional_sizes;
    m_additional_sizes_isSet = true;
}

bool OAICreativeAsset::is_additional_sizes_Set() const{
    return m_additional_sizes_isSet;
}

bool OAICreativeAsset::is_additional_sizes_Valid() const{
    return m_additional_sizes_isValid;
}

QString OAICreativeAsset::getAlignment() const {
    return m_alignment;
}
void OAICreativeAsset::setAlignment(const QString &alignment) {
    m_alignment = alignment;
    m_alignment_isSet = true;
}

bool OAICreativeAsset::is_alignment_Set() const{
    return m_alignment_isSet;
}

bool OAICreativeAsset::is_alignment_Valid() const{
    return m_alignment_isValid;
}

QString OAICreativeAsset::getArtworkType() const {
    return m_artwork_type;
}
void OAICreativeAsset::setArtworkType(const QString &artwork_type) {
    m_artwork_type = artwork_type;
    m_artwork_type_isSet = true;
}

bool OAICreativeAsset::is_artwork_type_Set() const{
    return m_artwork_type_isSet;
}

bool OAICreativeAsset::is_artwork_type_Valid() const{
    return m_artwork_type_isValid;
}

OAICreativeAssetId OAICreativeAsset::getAssetIdentifier() const {
    return m_asset_identifier;
}
void OAICreativeAsset::setAssetIdentifier(const OAICreativeAssetId &asset_identifier) {
    m_asset_identifier = asset_identifier;
    m_asset_identifier_isSet = true;
}

bool OAICreativeAsset::is_asset_identifier_Set() const{
    return m_asset_identifier_isSet;
}

bool OAICreativeAsset::is_asset_identifier_Valid() const{
    return m_asset_identifier_isValid;
}

qint32 OAICreativeAsset::getAudioBitRate() const {
    return m_audio_bit_rate;
}
void OAICreativeAsset::setAudioBitRate(const qint32 &audio_bit_rate) {
    m_audio_bit_rate = audio_bit_rate;
    m_audio_bit_rate_isSet = true;
}

bool OAICreativeAsset::is_audio_bit_rate_Set() const{
    return m_audio_bit_rate_isSet;
}

bool OAICreativeAsset::is_audio_bit_rate_Valid() const{
    return m_audio_bit_rate_isValid;
}

qint32 OAICreativeAsset::getAudioSampleRate() const {
    return m_audio_sample_rate;
}
void OAICreativeAsset::setAudioSampleRate(const qint32 &audio_sample_rate) {
    m_audio_sample_rate = audio_sample_rate;
    m_audio_sample_rate_isSet = true;
}

bool OAICreativeAsset::is_audio_sample_rate_Set() const{
    return m_audio_sample_rate_isSet;
}

bool OAICreativeAsset::is_audio_sample_rate_Valid() const{
    return m_audio_sample_rate_isValid;
}

OAICreativeCustomEvent OAICreativeAsset::getBackupImageExit() const {
    return m_backup_image_exit;
}
void OAICreativeAsset::setBackupImageExit(const OAICreativeCustomEvent &backup_image_exit) {
    m_backup_image_exit = backup_image_exit;
    m_backup_image_exit_isSet = true;
}

bool OAICreativeAsset::is_backup_image_exit_Set() const{
    return m_backup_image_exit_isSet;
}

bool OAICreativeAsset::is_backup_image_exit_Valid() const{
    return m_backup_image_exit_isValid;
}

qint32 OAICreativeAsset::getBitRate() const {
    return m_bit_rate;
}
void OAICreativeAsset::setBitRate(const qint32 &bit_rate) {
    m_bit_rate = bit_rate;
    m_bit_rate_isSet = true;
}

bool OAICreativeAsset::is_bit_rate_Set() const{
    return m_bit_rate_isSet;
}

bool OAICreativeAsset::is_bit_rate_Valid() const{
    return m_bit_rate_isValid;
}

QString OAICreativeAsset::getChildAssetType() const {
    return m_child_asset_type;
}
void OAICreativeAsset::setChildAssetType(const QString &child_asset_type) {
    m_child_asset_type = child_asset_type;
    m_child_asset_type_isSet = true;
}

bool OAICreativeAsset::is_child_asset_type_Set() const{
    return m_child_asset_type_isSet;
}

bool OAICreativeAsset::is_child_asset_type_Valid() const{
    return m_child_asset_type_isValid;
}

OAISize OAICreativeAsset::getCollapsedSize() const {
    return m_collapsed_size;
}
void OAICreativeAsset::setCollapsedSize(const OAISize &collapsed_size) {
    m_collapsed_size = collapsed_size;
    m_collapsed_size_isSet = true;
}

bool OAICreativeAsset::is_collapsed_size_Set() const{
    return m_collapsed_size_isSet;
}

bool OAICreativeAsset::is_collapsed_size_Valid() const{
    return m_collapsed_size_isValid;
}

QList<QString> OAICreativeAsset::getCompanionCreativeIds() const {
    return m_companion_creative_ids;
}
void OAICreativeAsset::setCompanionCreativeIds(const QList<QString> &companion_creative_ids) {
    m_companion_creative_ids = companion_creative_ids;
    m_companion_creative_ids_isSet = true;
}

bool OAICreativeAsset::is_companion_creative_ids_Set() const{
    return m_companion_creative_ids_isSet;
}

bool OAICreativeAsset::is_companion_creative_ids_Valid() const{
    return m_companion_creative_ids_isValid;
}

qint32 OAICreativeAsset::getCustomStartTimeValue() const {
    return m_custom_start_time_value;
}
void OAICreativeAsset::setCustomStartTimeValue(const qint32 &custom_start_time_value) {
    m_custom_start_time_value = custom_start_time_value;
    m_custom_start_time_value_isSet = true;
}

bool OAICreativeAsset::is_custom_start_time_value_Set() const{
    return m_custom_start_time_value_isSet;
}

bool OAICreativeAsset::is_custom_start_time_value_Valid() const{
    return m_custom_start_time_value_isValid;
}

QList<QString> OAICreativeAsset::getDetectedFeatures() const {
    return m_detected_features;
}
void OAICreativeAsset::setDetectedFeatures(const QList<QString> &detected_features) {
    m_detected_features = detected_features;
    m_detected_features_isSet = true;
}

bool OAICreativeAsset::is_detected_features_Set() const{
    return m_detected_features_isSet;
}

bool OAICreativeAsset::is_detected_features_Valid() const{
    return m_detected_features_isValid;
}

QString OAICreativeAsset::getDisplayType() const {
    return m_display_type;
}
void OAICreativeAsset::setDisplayType(const QString &display_type) {
    m_display_type = display_type;
    m_display_type_isSet = true;
}

bool OAICreativeAsset::is_display_type_Set() const{
    return m_display_type_isSet;
}

bool OAICreativeAsset::is_display_type_Valid() const{
    return m_display_type_isValid;
}

qint32 OAICreativeAsset::getDuration() const {
    return m_duration;
}
void OAICreativeAsset::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAICreativeAsset::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAICreativeAsset::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAICreativeAsset::getDurationType() const {
    return m_duration_type;
}
void OAICreativeAsset::setDurationType(const QString &duration_type) {
    m_duration_type = duration_type;
    m_duration_type_isSet = true;
}

bool OAICreativeAsset::is_duration_type_Set() const{
    return m_duration_type_isSet;
}

bool OAICreativeAsset::is_duration_type_Valid() const{
    return m_duration_type_isValid;
}

OAISize OAICreativeAsset::getExpandedDimension() const {
    return m_expanded_dimension;
}
void OAICreativeAsset::setExpandedDimension(const OAISize &expanded_dimension) {
    m_expanded_dimension = expanded_dimension;
    m_expanded_dimension_isSet = true;
}

bool OAICreativeAsset::is_expanded_dimension_Set() const{
    return m_expanded_dimension_isSet;
}

bool OAICreativeAsset::is_expanded_dimension_Valid() const{
    return m_expanded_dimension_isValid;
}

QString OAICreativeAsset::getFileSize() const {
    return m_file_size;
}
void OAICreativeAsset::setFileSize(const QString &file_size) {
    m_file_size = file_size;
    m_file_size_isSet = true;
}

bool OAICreativeAsset::is_file_size_Set() const{
    return m_file_size_isSet;
}

bool OAICreativeAsset::is_file_size_Valid() const{
    return m_file_size_isValid;
}

qint32 OAICreativeAsset::getFlashVersion() const {
    return m_flash_version;
}
void OAICreativeAsset::setFlashVersion(const qint32 &flash_version) {
    m_flash_version = flash_version;
    m_flash_version_isSet = true;
}

bool OAICreativeAsset::is_flash_version_Set() const{
    return m_flash_version_isSet;
}

bool OAICreativeAsset::is_flash_version_Valid() const{
    return m_flash_version_isValid;
}

float OAICreativeAsset::getFrameRate() const {
    return m_frame_rate;
}
void OAICreativeAsset::setFrameRate(const float &frame_rate) {
    m_frame_rate = frame_rate;
    m_frame_rate_isSet = true;
}

bool OAICreativeAsset::is_frame_rate_Set() const{
    return m_frame_rate_isSet;
}

bool OAICreativeAsset::is_frame_rate_Valid() const{
    return m_frame_rate_isValid;
}

bool OAICreativeAsset::isHideFlashObjects() const {
    return m_hide_flash_objects;
}
void OAICreativeAsset::setHideFlashObjects(const bool &hide_flash_objects) {
    m_hide_flash_objects = hide_flash_objects;
    m_hide_flash_objects_isSet = true;
}

bool OAICreativeAsset::is_hide_flash_objects_Set() const{
    return m_hide_flash_objects_isSet;
}

bool OAICreativeAsset::is_hide_flash_objects_Valid() const{
    return m_hide_flash_objects_isValid;
}

bool OAICreativeAsset::isHideSelectionBoxes() const {
    return m_hide_selection_boxes;
}
void OAICreativeAsset::setHideSelectionBoxes(const bool &hide_selection_boxes) {
    m_hide_selection_boxes = hide_selection_boxes;
    m_hide_selection_boxes_isSet = true;
}

bool OAICreativeAsset::is_hide_selection_boxes_Set() const{
    return m_hide_selection_boxes_isSet;
}

bool OAICreativeAsset::is_hide_selection_boxes_Valid() const{
    return m_hide_selection_boxes_isValid;
}

bool OAICreativeAsset::isHorizontallyLocked() const {
    return m_horizontally_locked;
}
void OAICreativeAsset::setHorizontallyLocked(const bool &horizontally_locked) {
    m_horizontally_locked = horizontally_locked;
    m_horizontally_locked_isSet = true;
}

bool OAICreativeAsset::is_horizontally_locked_Set() const{
    return m_horizontally_locked_isSet;
}

bool OAICreativeAsset::is_horizontally_locked_Valid() const{
    return m_horizontally_locked_isValid;
}

QString OAICreativeAsset::getId() const {
    return m_id;
}
void OAICreativeAsset::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICreativeAsset::is_id_Set() const{
    return m_id_isSet;
}

bool OAICreativeAsset::is_id_Valid() const{
    return m_id_isValid;
}

OAIDimensionValue OAICreativeAsset::getIdDimensionValue() const {
    return m_id_dimension_value;
}
void OAICreativeAsset::setIdDimensionValue(const OAIDimensionValue &id_dimension_value) {
    m_id_dimension_value = id_dimension_value;
    m_id_dimension_value_isSet = true;
}

bool OAICreativeAsset::is_id_dimension_value_Set() const{
    return m_id_dimension_value_isSet;
}

bool OAICreativeAsset::is_id_dimension_value_Valid() const{
    return m_id_dimension_value_isValid;
}

float OAICreativeAsset::getMediaDuration() const {
    return m_media_duration;
}
void OAICreativeAsset::setMediaDuration(const float &media_duration) {
    m_media_duration = media_duration;
    m_media_duration_isSet = true;
}

bool OAICreativeAsset::is_media_duration_Set() const{
    return m_media_duration_isSet;
}

bool OAICreativeAsset::is_media_duration_Valid() const{
    return m_media_duration_isValid;
}

QString OAICreativeAsset::getMimeType() const {
    return m_mime_type;
}
void OAICreativeAsset::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAICreativeAsset::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAICreativeAsset::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

OAIOffsetPosition OAICreativeAsset::getOffset() const {
    return m_offset;
}
void OAICreativeAsset::setOffset(const OAIOffsetPosition &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAICreativeAsset::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAICreativeAsset::is_offset_Valid() const{
    return m_offset_isValid;
}

QString OAICreativeAsset::getOrientation() const {
    return m_orientation;
}
void OAICreativeAsset::setOrientation(const QString &orientation) {
    m_orientation = orientation;
    m_orientation_isSet = true;
}

bool OAICreativeAsset::is_orientation_Set() const{
    return m_orientation_isSet;
}

bool OAICreativeAsset::is_orientation_Valid() const{
    return m_orientation_isValid;
}

bool OAICreativeAsset::isOriginalBackup() const {
    return m_original_backup;
}
void OAICreativeAsset::setOriginalBackup(const bool &original_backup) {
    m_original_backup = original_backup;
    m_original_backup_isSet = true;
}

bool OAICreativeAsset::is_original_backup_Set() const{
    return m_original_backup_isSet;
}

bool OAICreativeAsset::is_original_backup_Valid() const{
    return m_original_backup_isValid;
}

bool OAICreativeAsset::isPoliteLoad() const {
    return m_polite_load;
}
void OAICreativeAsset::setPoliteLoad(const bool &polite_load) {
    m_polite_load = polite_load;
    m_polite_load_isSet = true;
}

bool OAICreativeAsset::is_polite_load_Set() const{
    return m_polite_load_isSet;
}

bool OAICreativeAsset::is_polite_load_Valid() const{
    return m_polite_load_isValid;
}

OAIOffsetPosition OAICreativeAsset::getPosition() const {
    return m_position;
}
void OAICreativeAsset::setPosition(const OAIOffsetPosition &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAICreativeAsset::is_position_Set() const{
    return m_position_isSet;
}

bool OAICreativeAsset::is_position_Valid() const{
    return m_position_isValid;
}

QString OAICreativeAsset::getPositionLeftUnit() const {
    return m_position_left_unit;
}
void OAICreativeAsset::setPositionLeftUnit(const QString &position_left_unit) {
    m_position_left_unit = position_left_unit;
    m_position_left_unit_isSet = true;
}

bool OAICreativeAsset::is_position_left_unit_Set() const{
    return m_position_left_unit_isSet;
}

bool OAICreativeAsset::is_position_left_unit_Valid() const{
    return m_position_left_unit_isValid;
}

QString OAICreativeAsset::getPositionTopUnit() const {
    return m_position_top_unit;
}
void OAICreativeAsset::setPositionTopUnit(const QString &position_top_unit) {
    m_position_top_unit = position_top_unit;
    m_position_top_unit_isSet = true;
}

bool OAICreativeAsset::is_position_top_unit_Set() const{
    return m_position_top_unit_isSet;
}

bool OAICreativeAsset::is_position_top_unit_Valid() const{
    return m_position_top_unit_isValid;
}

QString OAICreativeAsset::getProgressiveServingUrl() const {
    return m_progressive_serving_url;
}
void OAICreativeAsset::setProgressiveServingUrl(const QString &progressive_serving_url) {
    m_progressive_serving_url = progressive_serving_url;
    m_progressive_serving_url_isSet = true;
}

bool OAICreativeAsset::is_progressive_serving_url_Set() const{
    return m_progressive_serving_url_isSet;
}

bool OAICreativeAsset::is_progressive_serving_url_Valid() const{
    return m_progressive_serving_url_isValid;
}

bool OAICreativeAsset::isPushdown() const {
    return m_pushdown;
}
void OAICreativeAsset::setPushdown(const bool &pushdown) {
    m_pushdown = pushdown;
    m_pushdown_isSet = true;
}

bool OAICreativeAsset::is_pushdown_Set() const{
    return m_pushdown_isSet;
}

bool OAICreativeAsset::is_pushdown_Valid() const{
    return m_pushdown_isValid;
}

float OAICreativeAsset::getPushdownDuration() const {
    return m_pushdown_duration;
}
void OAICreativeAsset::setPushdownDuration(const float &pushdown_duration) {
    m_pushdown_duration = pushdown_duration;
    m_pushdown_duration_isSet = true;
}

bool OAICreativeAsset::is_pushdown_duration_Set() const{
    return m_pushdown_duration_isSet;
}

bool OAICreativeAsset::is_pushdown_duration_Valid() const{
    return m_pushdown_duration_isValid;
}

QString OAICreativeAsset::getRole() const {
    return m_role;
}
void OAICreativeAsset::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAICreativeAsset::is_role_Set() const{
    return m_role_isSet;
}

bool OAICreativeAsset::is_role_Valid() const{
    return m_role_isValid;
}

OAISize OAICreativeAsset::getSize() const {
    return m_size;
}
void OAICreativeAsset::setSize(const OAISize &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAICreativeAsset::is_size_Set() const{
    return m_size_isSet;
}

bool OAICreativeAsset::is_size_Valid() const{
    return m_size_isValid;
}

bool OAICreativeAsset::isSslCompliant() const {
    return m_ssl_compliant;
}
void OAICreativeAsset::setSslCompliant(const bool &ssl_compliant) {
    m_ssl_compliant = ssl_compliant;
    m_ssl_compliant_isSet = true;
}

bool OAICreativeAsset::is_ssl_compliant_Set() const{
    return m_ssl_compliant_isSet;
}

bool OAICreativeAsset::is_ssl_compliant_Valid() const{
    return m_ssl_compliant_isValid;
}

QString OAICreativeAsset::getStartTimeType() const {
    return m_start_time_type;
}
void OAICreativeAsset::setStartTimeType(const QString &start_time_type) {
    m_start_time_type = start_time_type;
    m_start_time_type_isSet = true;
}

bool OAICreativeAsset::is_start_time_type_Set() const{
    return m_start_time_type_isSet;
}

bool OAICreativeAsset::is_start_time_type_Valid() const{
    return m_start_time_type_isValid;
}

QString OAICreativeAsset::getStreamingServingUrl() const {
    return m_streaming_serving_url;
}
void OAICreativeAsset::setStreamingServingUrl(const QString &streaming_serving_url) {
    m_streaming_serving_url = streaming_serving_url;
    m_streaming_serving_url_isSet = true;
}

bool OAICreativeAsset::is_streaming_serving_url_Set() const{
    return m_streaming_serving_url_isSet;
}

bool OAICreativeAsset::is_streaming_serving_url_Valid() const{
    return m_streaming_serving_url_isValid;
}

bool OAICreativeAsset::isTransparency() const {
    return m_transparency;
}
void OAICreativeAsset::setTransparency(const bool &transparency) {
    m_transparency = transparency;
    m_transparency_isSet = true;
}

bool OAICreativeAsset::is_transparency_Set() const{
    return m_transparency_isSet;
}

bool OAICreativeAsset::is_transparency_Valid() const{
    return m_transparency_isValid;
}

bool OAICreativeAsset::isVerticallyLocked() const {
    return m_vertically_locked;
}
void OAICreativeAsset::setVerticallyLocked(const bool &vertically_locked) {
    m_vertically_locked = vertically_locked;
    m_vertically_locked_isSet = true;
}

bool OAICreativeAsset::is_vertically_locked_Set() const{
    return m_vertically_locked_isSet;
}

bool OAICreativeAsset::is_vertically_locked_Valid() const{
    return m_vertically_locked_isValid;
}

QString OAICreativeAsset::getWindowMode() const {
    return m_window_mode;
}
void OAICreativeAsset::setWindowMode(const QString &window_mode) {
    m_window_mode = window_mode;
    m_window_mode_isSet = true;
}

bool OAICreativeAsset::is_window_mode_Set() const{
    return m_window_mode_isSet;
}

bool OAICreativeAsset::is_window_mode_Valid() const{
    return m_window_mode_isValid;
}

qint32 OAICreativeAsset::getZIndex() const {
    return m_z_index;
}
void OAICreativeAsset::setZIndex(const qint32 &z_index) {
    m_z_index = z_index;
    m_z_index_isSet = true;
}

bool OAICreativeAsset::is_z_index_Set() const{
    return m_z_index_isSet;
}

bool OAICreativeAsset::is_z_index_Valid() const{
    return m_z_index_isValid;
}

QString OAICreativeAsset::getZipFilename() const {
    return m_zip_filename;
}
void OAICreativeAsset::setZipFilename(const QString &zip_filename) {
    m_zip_filename = zip_filename;
    m_zip_filename_isSet = true;
}

bool OAICreativeAsset::is_zip_filename_Set() const{
    return m_zip_filename_isSet;
}

bool OAICreativeAsset::is_zip_filename_Valid() const{
    return m_zip_filename_isValid;
}

QString OAICreativeAsset::getZipFilesize() const {
    return m_zip_filesize;
}
void OAICreativeAsset::setZipFilesize(const QString &zip_filesize) {
    m_zip_filesize = zip_filesize;
    m_zip_filesize_isSet = true;
}

bool OAICreativeAsset::is_zip_filesize_Set() const{
    return m_zip_filesize_isSet;
}

bool OAICreativeAsset::is_zip_filesize_Valid() const{
    return m_zip_filesize_isValid;
}

bool OAICreativeAsset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_script3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_sizes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_alignment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artwork_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_identifier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_bit_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_sample_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_image_exit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bit_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_child_asset_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collapsed_size.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_companion_creative_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_start_time_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detected_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expanded_dimension.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flash_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frame_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_flash_objects_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_selection_boxes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_horizontally_locked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_dimension_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_orientation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_backup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_polite_load_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_left_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_top_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progressive_serving_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pushdown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pushdown_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_compliant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_streaming_serving_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transparency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vertically_locked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_window_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_z_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_filename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_filesize_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreativeAsset::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
