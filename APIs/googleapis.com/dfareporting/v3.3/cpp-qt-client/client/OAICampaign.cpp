/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICampaign.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICampaign::OAICampaign(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICampaign::OAICampaign() {
    this->initializeModel();
}

OAICampaign::~OAICampaign() {}

void OAICampaign::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_ad_blocking_configuration_isSet = false;
    m_ad_blocking_configuration_isValid = false;

    m_additional_creative_optimization_configurations_isSet = false;
    m_additional_creative_optimization_configurations_isValid = false;

    m_advertiser_group_id_isSet = false;
    m_advertiser_group_id_isValid = false;

    m_advertiser_id_isSet = false;
    m_advertiser_id_isValid = false;

    m_advertiser_id_dimension_value_isSet = false;
    m_advertiser_id_dimension_value_isValid = false;

    m_archived_isSet = false;
    m_archived_isValid = false;

    m_audience_segment_groups_isSet = false;
    m_audience_segment_groups_isValid = false;

    m_billing_invoice_code_isSet = false;
    m_billing_invoice_code_isValid = false;

    m_click_through_url_suffix_properties_isSet = false;
    m_click_through_url_suffix_properties_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_create_info_isSet = false;
    m_create_info_isValid = false;

    m_creative_group_ids_isSet = false;
    m_creative_group_ids_isValid = false;

    m_creative_optimization_configuration_isSet = false;
    m_creative_optimization_configuration_isValid = false;

    m_default_click_through_event_tag_properties_isSet = false;
    m_default_click_through_event_tag_properties_isValid = false;

    m_default_landing_page_id_isSet = false;
    m_default_landing_page_id_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_event_tag_overrides_isSet = false;
    m_event_tag_overrides_isValid = false;

    m_external_id_isSet = false;
    m_external_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_id_dimension_value_isSet = false;
    m_id_dimension_value_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_last_modified_info_isSet = false;
    m_last_modified_info_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_nielsen_ocr_enabled_isSet = false;
    m_nielsen_ocr_enabled_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_subaccount_id_isSet = false;
    m_subaccount_id_isValid = false;

    m_trafficker_emails_isSet = false;
    m_trafficker_emails_isValid = false;
}

void OAICampaign::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICampaign::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_ad_blocking_configuration_isValid = ::OpenAPI::fromJsonValue(m_ad_blocking_configuration, json[QString("adBlockingConfiguration")]);
    m_ad_blocking_configuration_isSet = !json[QString("adBlockingConfiguration")].isNull() && m_ad_blocking_configuration_isValid;

    m_additional_creative_optimization_configurations_isValid = ::OpenAPI::fromJsonValue(m_additional_creative_optimization_configurations, json[QString("additionalCreativeOptimizationConfigurations")]);
    m_additional_creative_optimization_configurations_isSet = !json[QString("additionalCreativeOptimizationConfigurations")].isNull() && m_additional_creative_optimization_configurations_isValid;

    m_advertiser_group_id_isValid = ::OpenAPI::fromJsonValue(m_advertiser_group_id, json[QString("advertiserGroupId")]);
    m_advertiser_group_id_isSet = !json[QString("advertiserGroupId")].isNull() && m_advertiser_group_id_isValid;

    m_advertiser_id_isValid = ::OpenAPI::fromJsonValue(m_advertiser_id, json[QString("advertiserId")]);
    m_advertiser_id_isSet = !json[QString("advertiserId")].isNull() && m_advertiser_id_isValid;

    m_advertiser_id_dimension_value_isValid = ::OpenAPI::fromJsonValue(m_advertiser_id_dimension_value, json[QString("advertiserIdDimensionValue")]);
    m_advertiser_id_dimension_value_isSet = !json[QString("advertiserIdDimensionValue")].isNull() && m_advertiser_id_dimension_value_isValid;

    m_archived_isValid = ::OpenAPI::fromJsonValue(m_archived, json[QString("archived")]);
    m_archived_isSet = !json[QString("archived")].isNull() && m_archived_isValid;

    m_audience_segment_groups_isValid = ::OpenAPI::fromJsonValue(m_audience_segment_groups, json[QString("audienceSegmentGroups")]);
    m_audience_segment_groups_isSet = !json[QString("audienceSegmentGroups")].isNull() && m_audience_segment_groups_isValid;

    m_billing_invoice_code_isValid = ::OpenAPI::fromJsonValue(m_billing_invoice_code, json[QString("billingInvoiceCode")]);
    m_billing_invoice_code_isSet = !json[QString("billingInvoiceCode")].isNull() && m_billing_invoice_code_isValid;

    m_click_through_url_suffix_properties_isValid = ::OpenAPI::fromJsonValue(m_click_through_url_suffix_properties, json[QString("clickThroughUrlSuffixProperties")]);
    m_click_through_url_suffix_properties_isSet = !json[QString("clickThroughUrlSuffixProperties")].isNull() && m_click_through_url_suffix_properties_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_create_info_isValid = ::OpenAPI::fromJsonValue(m_create_info, json[QString("createInfo")]);
    m_create_info_isSet = !json[QString("createInfo")].isNull() && m_create_info_isValid;

    m_creative_group_ids_isValid = ::OpenAPI::fromJsonValue(m_creative_group_ids, json[QString("creativeGroupIds")]);
    m_creative_group_ids_isSet = !json[QString("creativeGroupIds")].isNull() && m_creative_group_ids_isValid;

    m_creative_optimization_configuration_isValid = ::OpenAPI::fromJsonValue(m_creative_optimization_configuration, json[QString("creativeOptimizationConfiguration")]);
    m_creative_optimization_configuration_isSet = !json[QString("creativeOptimizationConfiguration")].isNull() && m_creative_optimization_configuration_isValid;

    m_default_click_through_event_tag_properties_isValid = ::OpenAPI::fromJsonValue(m_default_click_through_event_tag_properties, json[QString("defaultClickThroughEventTagProperties")]);
    m_default_click_through_event_tag_properties_isSet = !json[QString("defaultClickThroughEventTagProperties")].isNull() && m_default_click_through_event_tag_properties_isValid;

    m_default_landing_page_id_isValid = ::OpenAPI::fromJsonValue(m_default_landing_page_id, json[QString("defaultLandingPageId")]);
    m_default_landing_page_id_isSet = !json[QString("defaultLandingPageId")].isNull() && m_default_landing_page_id_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_event_tag_overrides_isValid = ::OpenAPI::fromJsonValue(m_event_tag_overrides, json[QString("eventTagOverrides")]);
    m_event_tag_overrides_isSet = !json[QString("eventTagOverrides")].isNull() && m_event_tag_overrides_isValid;

    m_external_id_isValid = ::OpenAPI::fromJsonValue(m_external_id, json[QString("externalId")]);
    m_external_id_isSet = !json[QString("externalId")].isNull() && m_external_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_id_dimension_value_isValid = ::OpenAPI::fromJsonValue(m_id_dimension_value, json[QString("idDimensionValue")]);
    m_id_dimension_value_isSet = !json[QString("idDimensionValue")].isNull() && m_id_dimension_value_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_last_modified_info_isValid = ::OpenAPI::fromJsonValue(m_last_modified_info, json[QString("lastModifiedInfo")]);
    m_last_modified_info_isSet = !json[QString("lastModifiedInfo")].isNull() && m_last_modified_info_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_nielsen_ocr_enabled_isValid = ::OpenAPI::fromJsonValue(m_nielsen_ocr_enabled, json[QString("nielsenOcrEnabled")]);
    m_nielsen_ocr_enabled_isSet = !json[QString("nielsenOcrEnabled")].isNull() && m_nielsen_ocr_enabled_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_subaccount_id_isValid = ::OpenAPI::fromJsonValue(m_subaccount_id, json[QString("subaccountId")]);
    m_subaccount_id_isSet = !json[QString("subaccountId")].isNull() && m_subaccount_id_isValid;

    m_trafficker_emails_isValid = ::OpenAPI::fromJsonValue(m_trafficker_emails, json[QString("traffickerEmails")]);
    m_trafficker_emails_isSet = !json[QString("traffickerEmails")].isNull() && m_trafficker_emails_isValid;
}

QString OAICampaign::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICampaign::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_ad_blocking_configuration.isSet()) {
        obj.insert(QString("adBlockingConfiguration"), ::OpenAPI::toJsonValue(m_ad_blocking_configuration));
    }
    if (m_additional_creative_optimization_configurations.size() > 0) {
        obj.insert(QString("additionalCreativeOptimizationConfigurations"), ::OpenAPI::toJsonValue(m_additional_creative_optimization_configurations));
    }
    if (m_advertiser_group_id_isSet) {
        obj.insert(QString("advertiserGroupId"), ::OpenAPI::toJsonValue(m_advertiser_group_id));
    }
    if (m_advertiser_id_isSet) {
        obj.insert(QString("advertiserId"), ::OpenAPI::toJsonValue(m_advertiser_id));
    }
    if (m_advertiser_id_dimension_value.isSet()) {
        obj.insert(QString("advertiserIdDimensionValue"), ::OpenAPI::toJsonValue(m_advertiser_id_dimension_value));
    }
    if (m_archived_isSet) {
        obj.insert(QString("archived"), ::OpenAPI::toJsonValue(m_archived));
    }
    if (m_audience_segment_groups.size() > 0) {
        obj.insert(QString("audienceSegmentGroups"), ::OpenAPI::toJsonValue(m_audience_segment_groups));
    }
    if (m_billing_invoice_code_isSet) {
        obj.insert(QString("billingInvoiceCode"), ::OpenAPI::toJsonValue(m_billing_invoice_code));
    }
    if (m_click_through_url_suffix_properties.isSet()) {
        obj.insert(QString("clickThroughUrlSuffixProperties"), ::OpenAPI::toJsonValue(m_click_through_url_suffix_properties));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_create_info.isSet()) {
        obj.insert(QString("createInfo"), ::OpenAPI::toJsonValue(m_create_info));
    }
    if (m_creative_group_ids.size() > 0) {
        obj.insert(QString("creativeGroupIds"), ::OpenAPI::toJsonValue(m_creative_group_ids));
    }
    if (m_creative_optimization_configuration.isSet()) {
        obj.insert(QString("creativeOptimizationConfiguration"), ::OpenAPI::toJsonValue(m_creative_optimization_configuration));
    }
    if (m_default_click_through_event_tag_properties.isSet()) {
        obj.insert(QString("defaultClickThroughEventTagProperties"), ::OpenAPI::toJsonValue(m_default_click_through_event_tag_properties));
    }
    if (m_default_landing_page_id_isSet) {
        obj.insert(QString("defaultLandingPageId"), ::OpenAPI::toJsonValue(m_default_landing_page_id));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_event_tag_overrides.size() > 0) {
        obj.insert(QString("eventTagOverrides"), ::OpenAPI::toJsonValue(m_event_tag_overrides));
    }
    if (m_external_id_isSet) {
        obj.insert(QString("externalId"), ::OpenAPI::toJsonValue(m_external_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_id_dimension_value.isSet()) {
        obj.insert(QString("idDimensionValue"), ::OpenAPI::toJsonValue(m_id_dimension_value));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_last_modified_info.isSet()) {
        obj.insert(QString("lastModifiedInfo"), ::OpenAPI::toJsonValue(m_last_modified_info));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_nielsen_ocr_enabled_isSet) {
        obj.insert(QString("nielsenOcrEnabled"), ::OpenAPI::toJsonValue(m_nielsen_ocr_enabled));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_subaccount_id_isSet) {
        obj.insert(QString("subaccountId"), ::OpenAPI::toJsonValue(m_subaccount_id));
    }
    if (m_trafficker_emails.size() > 0) {
        obj.insert(QString("traffickerEmails"), ::OpenAPI::toJsonValue(m_trafficker_emails));
    }
    return obj;
}

QString OAICampaign::getAccountId() const {
    return m_account_id;
}
void OAICampaign::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAICampaign::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAICampaign::is_account_id_Valid() const{
    return m_account_id_isValid;
}

OAIAdBlockingConfiguration OAICampaign::getAdBlockingConfiguration() const {
    return m_ad_blocking_configuration;
}
void OAICampaign::setAdBlockingConfiguration(const OAIAdBlockingConfiguration &ad_blocking_configuration) {
    m_ad_blocking_configuration = ad_blocking_configuration;
    m_ad_blocking_configuration_isSet = true;
}

bool OAICampaign::is_ad_blocking_configuration_Set() const{
    return m_ad_blocking_configuration_isSet;
}

bool OAICampaign::is_ad_blocking_configuration_Valid() const{
    return m_ad_blocking_configuration_isValid;
}

QList<OAICreativeOptimizationConfiguration> OAICampaign::getAdditionalCreativeOptimizationConfigurations() const {
    return m_additional_creative_optimization_configurations;
}
void OAICampaign::setAdditionalCreativeOptimizationConfigurations(const QList<OAICreativeOptimizationConfiguration> &additional_creative_optimization_configurations) {
    m_additional_creative_optimization_configurations = additional_creative_optimization_configurations;
    m_additional_creative_optimization_configurations_isSet = true;
}

bool OAICampaign::is_additional_creative_optimization_configurations_Set() const{
    return m_additional_creative_optimization_configurations_isSet;
}

bool OAICampaign::is_additional_creative_optimization_configurations_Valid() const{
    return m_additional_creative_optimization_configurations_isValid;
}

QString OAICampaign::getAdvertiserGroupId() const {
    return m_advertiser_group_id;
}
void OAICampaign::setAdvertiserGroupId(const QString &advertiser_group_id) {
    m_advertiser_group_id = advertiser_group_id;
    m_advertiser_group_id_isSet = true;
}

bool OAICampaign::is_advertiser_group_id_Set() const{
    return m_advertiser_group_id_isSet;
}

bool OAICampaign::is_advertiser_group_id_Valid() const{
    return m_advertiser_group_id_isValid;
}

QString OAICampaign::getAdvertiserId() const {
    return m_advertiser_id;
}
void OAICampaign::setAdvertiserId(const QString &advertiser_id) {
    m_advertiser_id = advertiser_id;
    m_advertiser_id_isSet = true;
}

bool OAICampaign::is_advertiser_id_Set() const{
    return m_advertiser_id_isSet;
}

bool OAICampaign::is_advertiser_id_Valid() const{
    return m_advertiser_id_isValid;
}

OAIDimensionValue OAICampaign::getAdvertiserIdDimensionValue() const {
    return m_advertiser_id_dimension_value;
}
void OAICampaign::setAdvertiserIdDimensionValue(const OAIDimensionValue &advertiser_id_dimension_value) {
    m_advertiser_id_dimension_value = advertiser_id_dimension_value;
    m_advertiser_id_dimension_value_isSet = true;
}

bool OAICampaign::is_advertiser_id_dimension_value_Set() const{
    return m_advertiser_id_dimension_value_isSet;
}

bool OAICampaign::is_advertiser_id_dimension_value_Valid() const{
    return m_advertiser_id_dimension_value_isValid;
}

bool OAICampaign::isArchived() const {
    return m_archived;
}
void OAICampaign::setArchived(const bool &archived) {
    m_archived = archived;
    m_archived_isSet = true;
}

bool OAICampaign::is_archived_Set() const{
    return m_archived_isSet;
}

bool OAICampaign::is_archived_Valid() const{
    return m_archived_isValid;
}

QList<OAIAudienceSegmentGroup> OAICampaign::getAudienceSegmentGroups() const {
    return m_audience_segment_groups;
}
void OAICampaign::setAudienceSegmentGroups(const QList<OAIAudienceSegmentGroup> &audience_segment_groups) {
    m_audience_segment_groups = audience_segment_groups;
    m_audience_segment_groups_isSet = true;
}

bool OAICampaign::is_audience_segment_groups_Set() const{
    return m_audience_segment_groups_isSet;
}

bool OAICampaign::is_audience_segment_groups_Valid() const{
    return m_audience_segment_groups_isValid;
}

QString OAICampaign::getBillingInvoiceCode() const {
    return m_billing_invoice_code;
}
void OAICampaign::setBillingInvoiceCode(const QString &billing_invoice_code) {
    m_billing_invoice_code = billing_invoice_code;
    m_billing_invoice_code_isSet = true;
}

bool OAICampaign::is_billing_invoice_code_Set() const{
    return m_billing_invoice_code_isSet;
}

bool OAICampaign::is_billing_invoice_code_Valid() const{
    return m_billing_invoice_code_isValid;
}

OAIClickThroughUrlSuffixProperties OAICampaign::getClickThroughUrlSuffixProperties() const {
    return m_click_through_url_suffix_properties;
}
void OAICampaign::setClickThroughUrlSuffixProperties(const OAIClickThroughUrlSuffixProperties &click_through_url_suffix_properties) {
    m_click_through_url_suffix_properties = click_through_url_suffix_properties;
    m_click_through_url_suffix_properties_isSet = true;
}

bool OAICampaign::is_click_through_url_suffix_properties_Set() const{
    return m_click_through_url_suffix_properties_isSet;
}

bool OAICampaign::is_click_through_url_suffix_properties_Valid() const{
    return m_click_through_url_suffix_properties_isValid;
}

QString OAICampaign::getComment() const {
    return m_comment;
}
void OAICampaign::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAICampaign::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAICampaign::is_comment_Valid() const{
    return m_comment_isValid;
}

OAILastModifiedInfo OAICampaign::getCreateInfo() const {
    return m_create_info;
}
void OAICampaign::setCreateInfo(const OAILastModifiedInfo &create_info) {
    m_create_info = create_info;
    m_create_info_isSet = true;
}

bool OAICampaign::is_create_info_Set() const{
    return m_create_info_isSet;
}

bool OAICampaign::is_create_info_Valid() const{
    return m_create_info_isValid;
}

QList<QString> OAICampaign::getCreativeGroupIds() const {
    return m_creative_group_ids;
}
void OAICampaign::setCreativeGroupIds(const QList<QString> &creative_group_ids) {
    m_creative_group_ids = creative_group_ids;
    m_creative_group_ids_isSet = true;
}

bool OAICampaign::is_creative_group_ids_Set() const{
    return m_creative_group_ids_isSet;
}

bool OAICampaign::is_creative_group_ids_Valid() const{
    return m_creative_group_ids_isValid;
}

OAICreativeOptimizationConfiguration OAICampaign::getCreativeOptimizationConfiguration() const {
    return m_creative_optimization_configuration;
}
void OAICampaign::setCreativeOptimizationConfiguration(const OAICreativeOptimizationConfiguration &creative_optimization_configuration) {
    m_creative_optimization_configuration = creative_optimization_configuration;
    m_creative_optimization_configuration_isSet = true;
}

bool OAICampaign::is_creative_optimization_configuration_Set() const{
    return m_creative_optimization_configuration_isSet;
}

bool OAICampaign::is_creative_optimization_configuration_Valid() const{
    return m_creative_optimization_configuration_isValid;
}

OAIDefaultClickThroughEventTagProperties OAICampaign::getDefaultClickThroughEventTagProperties() const {
    return m_default_click_through_event_tag_properties;
}
void OAICampaign::setDefaultClickThroughEventTagProperties(const OAIDefaultClickThroughEventTagProperties &default_click_through_event_tag_properties) {
    m_default_click_through_event_tag_properties = default_click_through_event_tag_properties;
    m_default_click_through_event_tag_properties_isSet = true;
}

bool OAICampaign::is_default_click_through_event_tag_properties_Set() const{
    return m_default_click_through_event_tag_properties_isSet;
}

bool OAICampaign::is_default_click_through_event_tag_properties_Valid() const{
    return m_default_click_through_event_tag_properties_isValid;
}

QString OAICampaign::getDefaultLandingPageId() const {
    return m_default_landing_page_id;
}
void OAICampaign::setDefaultLandingPageId(const QString &default_landing_page_id) {
    m_default_landing_page_id = default_landing_page_id;
    m_default_landing_page_id_isSet = true;
}

bool OAICampaign::is_default_landing_page_id_Set() const{
    return m_default_landing_page_id_isSet;
}

bool OAICampaign::is_default_landing_page_id_Valid() const{
    return m_default_landing_page_id_isValid;
}

QDate OAICampaign::getEndDate() const {
    return m_end_date;
}
void OAICampaign::setEndDate(const QDate &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAICampaign::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAICampaign::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QList<OAIEventTagOverride> OAICampaign::getEventTagOverrides() const {
    return m_event_tag_overrides;
}
void OAICampaign::setEventTagOverrides(const QList<OAIEventTagOverride> &event_tag_overrides) {
    m_event_tag_overrides = event_tag_overrides;
    m_event_tag_overrides_isSet = true;
}

bool OAICampaign::is_event_tag_overrides_Set() const{
    return m_event_tag_overrides_isSet;
}

bool OAICampaign::is_event_tag_overrides_Valid() const{
    return m_event_tag_overrides_isValid;
}

QString OAICampaign::getExternalId() const {
    return m_external_id;
}
void OAICampaign::setExternalId(const QString &external_id) {
    m_external_id = external_id;
    m_external_id_isSet = true;
}

bool OAICampaign::is_external_id_Set() const{
    return m_external_id_isSet;
}

bool OAICampaign::is_external_id_Valid() const{
    return m_external_id_isValid;
}

QString OAICampaign::getId() const {
    return m_id;
}
void OAICampaign::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICampaign::is_id_Set() const{
    return m_id_isSet;
}

bool OAICampaign::is_id_Valid() const{
    return m_id_isValid;
}

OAIDimensionValue OAICampaign::getIdDimensionValue() const {
    return m_id_dimension_value;
}
void OAICampaign::setIdDimensionValue(const OAIDimensionValue &id_dimension_value) {
    m_id_dimension_value = id_dimension_value;
    m_id_dimension_value_isSet = true;
}

bool OAICampaign::is_id_dimension_value_Set() const{
    return m_id_dimension_value_isSet;
}

bool OAICampaign::is_id_dimension_value_Valid() const{
    return m_id_dimension_value_isValid;
}

QString OAICampaign::getKind() const {
    return m_kind;
}
void OAICampaign::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAICampaign::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAICampaign::is_kind_Valid() const{
    return m_kind_isValid;
}

OAILastModifiedInfo OAICampaign::getLastModifiedInfo() const {
    return m_last_modified_info;
}
void OAICampaign::setLastModifiedInfo(const OAILastModifiedInfo &last_modified_info) {
    m_last_modified_info = last_modified_info;
    m_last_modified_info_isSet = true;
}

bool OAICampaign::is_last_modified_info_Set() const{
    return m_last_modified_info_isSet;
}

bool OAICampaign::is_last_modified_info_Valid() const{
    return m_last_modified_info_isValid;
}

QString OAICampaign::getName() const {
    return m_name;
}
void OAICampaign::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICampaign::is_name_Set() const{
    return m_name_isSet;
}

bool OAICampaign::is_name_Valid() const{
    return m_name_isValid;
}

bool OAICampaign::isNielsenOcrEnabled() const {
    return m_nielsen_ocr_enabled;
}
void OAICampaign::setNielsenOcrEnabled(const bool &nielsen_ocr_enabled) {
    m_nielsen_ocr_enabled = nielsen_ocr_enabled;
    m_nielsen_ocr_enabled_isSet = true;
}

bool OAICampaign::is_nielsen_ocr_enabled_Set() const{
    return m_nielsen_ocr_enabled_isSet;
}

bool OAICampaign::is_nielsen_ocr_enabled_Valid() const{
    return m_nielsen_ocr_enabled_isValid;
}

QDate OAICampaign::getStartDate() const {
    return m_start_date;
}
void OAICampaign::setStartDate(const QDate &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAICampaign::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAICampaign::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAICampaign::getSubaccountId() const {
    return m_subaccount_id;
}
void OAICampaign::setSubaccountId(const QString &subaccount_id) {
    m_subaccount_id = subaccount_id;
    m_subaccount_id_isSet = true;
}

bool OAICampaign::is_subaccount_id_Set() const{
    return m_subaccount_id_isSet;
}

bool OAICampaign::is_subaccount_id_Valid() const{
    return m_subaccount_id_isValid;
}

QList<QString> OAICampaign::getTraffickerEmails() const {
    return m_trafficker_emails;
}
void OAICampaign::setTraffickerEmails(const QList<QString> &trafficker_emails) {
    m_trafficker_emails = trafficker_emails;
    m_trafficker_emails_isSet = true;
}

bool OAICampaign::is_trafficker_emails_Set() const{
    return m_trafficker_emails_isSet;
}

bool OAICampaign::is_trafficker_emails_Valid() const{
    return m_trafficker_emails_isValid;
}

bool OAICampaign::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ad_blocking_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_creative_optimization_configurations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_advertiser_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_advertiser_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_advertiser_id_dimension_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_archived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audience_segment_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_invoice_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_click_through_url_suffix_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creative_group_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_creative_optimization_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_click_through_event_tag_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_landing_page_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_tag_overrides.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_dimension_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nielsen_ocr_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subaccount_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trafficker_emails.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICampaign::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
