/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDimensionValueRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDimensionValueRequest::OAIDimensionValueRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDimensionValueRequest::OAIDimensionValueRequest() {
    this->initializeModel();
}

OAIDimensionValueRequest::~OAIDimensionValueRequest() {}

void OAIDimensionValueRequest::initializeModel() {

    m_dimension_name_isSet = false;
    m_dimension_name_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;
}

void OAIDimensionValueRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDimensionValueRequest::fromJsonObject(QJsonObject json) {

    m_dimension_name_isValid = ::OpenAPI::fromJsonValue(m_dimension_name, json[QString("dimensionName")]);
    m_dimension_name_isSet = !json[QString("dimensionName")].isNull() && m_dimension_name_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("filters")]);
    m_filters_isSet = !json[QString("filters")].isNull() && m_filters_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;
}

QString OAIDimensionValueRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDimensionValueRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_dimension_name_isSet) {
        obj.insert(QString("dimensionName"), ::OpenAPI::toJsonValue(m_dimension_name));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_filters.size() > 0) {
        obj.insert(QString("filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    return obj;
}

QString OAIDimensionValueRequest::getDimensionName() const {
    return m_dimension_name;
}
void OAIDimensionValueRequest::setDimensionName(const QString &dimension_name) {
    m_dimension_name = dimension_name;
    m_dimension_name_isSet = true;
}

bool OAIDimensionValueRequest::is_dimension_name_Set() const{
    return m_dimension_name_isSet;
}

bool OAIDimensionValueRequest::is_dimension_name_Valid() const{
    return m_dimension_name_isValid;
}

QDate OAIDimensionValueRequest::getEndDate() const {
    return m_end_date;
}
void OAIDimensionValueRequest::setEndDate(const QDate &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIDimensionValueRequest::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIDimensionValueRequest::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QList<OAIDimensionFilter> OAIDimensionValueRequest::getFilters() const {
    return m_filters;
}
void OAIDimensionValueRequest::setFilters(const QList<OAIDimensionFilter> &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIDimensionValueRequest::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIDimensionValueRequest::is_filters_Valid() const{
    return m_filters_isValid;
}

QString OAIDimensionValueRequest::getKind() const {
    return m_kind;
}
void OAIDimensionValueRequest::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIDimensionValueRequest::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIDimensionValueRequest::is_kind_Valid() const{
    return m_kind_isValid;
}

QDate OAIDimensionValueRequest::getStartDate() const {
    return m_start_date;
}
void OAIDimensionValueRequest::setStartDate(const QDate &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIDimensionValueRequest::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIDimensionValueRequest::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAIDimensionValueRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dimension_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDimensionValueRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
