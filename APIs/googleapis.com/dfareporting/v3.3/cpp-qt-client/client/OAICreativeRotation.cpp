/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreativeRotation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreativeRotation::OAICreativeRotation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreativeRotation::OAICreativeRotation() {
    this->initializeModel();
}

OAICreativeRotation::~OAICreativeRotation() {}

void OAICreativeRotation::initializeModel() {

    m_creative_assignments_isSet = false;
    m_creative_assignments_isValid = false;

    m_creative_optimization_configuration_id_isSet = false;
    m_creative_optimization_configuration_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_weight_calculation_strategy_isSet = false;
    m_weight_calculation_strategy_isValid = false;
}

void OAICreativeRotation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreativeRotation::fromJsonObject(QJsonObject json) {

    m_creative_assignments_isValid = ::OpenAPI::fromJsonValue(m_creative_assignments, json[QString("creativeAssignments")]);
    m_creative_assignments_isSet = !json[QString("creativeAssignments")].isNull() && m_creative_assignments_isValid;

    m_creative_optimization_configuration_id_isValid = ::OpenAPI::fromJsonValue(m_creative_optimization_configuration_id, json[QString("creativeOptimizationConfigurationId")]);
    m_creative_optimization_configuration_id_isSet = !json[QString("creativeOptimizationConfigurationId")].isNull() && m_creative_optimization_configuration_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_weight_calculation_strategy_isValid = ::OpenAPI::fromJsonValue(m_weight_calculation_strategy, json[QString("weightCalculationStrategy")]);
    m_weight_calculation_strategy_isSet = !json[QString("weightCalculationStrategy")].isNull() && m_weight_calculation_strategy_isValid;
}

QString OAICreativeRotation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreativeRotation::asJsonObject() const {
    QJsonObject obj;
    if (m_creative_assignments.size() > 0) {
        obj.insert(QString("creativeAssignments"), ::OpenAPI::toJsonValue(m_creative_assignments));
    }
    if (m_creative_optimization_configuration_id_isSet) {
        obj.insert(QString("creativeOptimizationConfigurationId"), ::OpenAPI::toJsonValue(m_creative_optimization_configuration_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_weight_calculation_strategy_isSet) {
        obj.insert(QString("weightCalculationStrategy"), ::OpenAPI::toJsonValue(m_weight_calculation_strategy));
    }
    return obj;
}

QList<OAICreativeAssignment> OAICreativeRotation::getCreativeAssignments() const {
    return m_creative_assignments;
}
void OAICreativeRotation::setCreativeAssignments(const QList<OAICreativeAssignment> &creative_assignments) {
    m_creative_assignments = creative_assignments;
    m_creative_assignments_isSet = true;
}

bool OAICreativeRotation::is_creative_assignments_Set() const{
    return m_creative_assignments_isSet;
}

bool OAICreativeRotation::is_creative_assignments_Valid() const{
    return m_creative_assignments_isValid;
}

QString OAICreativeRotation::getCreativeOptimizationConfigurationId() const {
    return m_creative_optimization_configuration_id;
}
void OAICreativeRotation::setCreativeOptimizationConfigurationId(const QString &creative_optimization_configuration_id) {
    m_creative_optimization_configuration_id = creative_optimization_configuration_id;
    m_creative_optimization_configuration_id_isSet = true;
}

bool OAICreativeRotation::is_creative_optimization_configuration_id_Set() const{
    return m_creative_optimization_configuration_id_isSet;
}

bool OAICreativeRotation::is_creative_optimization_configuration_id_Valid() const{
    return m_creative_optimization_configuration_id_isValid;
}

QString OAICreativeRotation::getType() const {
    return m_type;
}
void OAICreativeRotation::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreativeRotation::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreativeRotation::is_type_Valid() const{
    return m_type_isValid;
}

QString OAICreativeRotation::getWeightCalculationStrategy() const {
    return m_weight_calculation_strategy;
}
void OAICreativeRotation::setWeightCalculationStrategy(const QString &weight_calculation_strategy) {
    m_weight_calculation_strategy = weight_calculation_strategy;
    m_weight_calculation_strategy_isSet = true;
}

bool OAICreativeRotation::is_weight_calculation_strategy_Set() const{
    return m_weight_calculation_strategy_isSet;
}

bool OAICreativeRotation::is_weight_calculation_strategy_Valid() const{
    return m_weight_calculation_strategy_isValid;
}

bool OAICreativeRotation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creative_assignments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_creative_optimization_configuration_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_calculation_strategy_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreativeRotation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
