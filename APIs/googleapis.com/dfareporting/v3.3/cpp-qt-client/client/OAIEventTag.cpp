/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventTag.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventTag::OAIEventTag(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventTag::OAIEventTag() {
    this->initializeModel();
}

OAIEventTag::~OAIEventTag() {}

void OAIEventTag::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_advertiser_id_isSet = false;
    m_advertiser_id_isValid = false;

    m_advertiser_id_dimension_value_isSet = false;
    m_advertiser_id_dimension_value_isValid = false;

    m_campaign_id_isSet = false;
    m_campaign_id_isValid = false;

    m_campaign_id_dimension_value_isSet = false;
    m_campaign_id_dimension_value_isValid = false;

    m_enabled_by_default_isSet = false;
    m_enabled_by_default_isValid = false;

    m_exclude_from_adx_requests_isSet = false;
    m_exclude_from_adx_requests_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_site_filter_type_isSet = false;
    m_site_filter_type_isValid = false;

    m_site_ids_isSet = false;
    m_site_ids_isValid = false;

    m_ssl_compliant_isSet = false;
    m_ssl_compliant_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_subaccount_id_isSet = false;
    m_subaccount_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_url_escape_levels_isSet = false;
    m_url_escape_levels_isValid = false;
}

void OAIEventTag::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventTag::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_advertiser_id_isValid = ::OpenAPI::fromJsonValue(m_advertiser_id, json[QString("advertiserId")]);
    m_advertiser_id_isSet = !json[QString("advertiserId")].isNull() && m_advertiser_id_isValid;

    m_advertiser_id_dimension_value_isValid = ::OpenAPI::fromJsonValue(m_advertiser_id_dimension_value, json[QString("advertiserIdDimensionValue")]);
    m_advertiser_id_dimension_value_isSet = !json[QString("advertiserIdDimensionValue")].isNull() && m_advertiser_id_dimension_value_isValid;

    m_campaign_id_isValid = ::OpenAPI::fromJsonValue(m_campaign_id, json[QString("campaignId")]);
    m_campaign_id_isSet = !json[QString("campaignId")].isNull() && m_campaign_id_isValid;

    m_campaign_id_dimension_value_isValid = ::OpenAPI::fromJsonValue(m_campaign_id_dimension_value, json[QString("campaignIdDimensionValue")]);
    m_campaign_id_dimension_value_isSet = !json[QString("campaignIdDimensionValue")].isNull() && m_campaign_id_dimension_value_isValid;

    m_enabled_by_default_isValid = ::OpenAPI::fromJsonValue(m_enabled_by_default, json[QString("enabledByDefault")]);
    m_enabled_by_default_isSet = !json[QString("enabledByDefault")].isNull() && m_enabled_by_default_isValid;

    m_exclude_from_adx_requests_isValid = ::OpenAPI::fromJsonValue(m_exclude_from_adx_requests, json[QString("excludeFromAdxRequests")]);
    m_exclude_from_adx_requests_isSet = !json[QString("excludeFromAdxRequests")].isNull() && m_exclude_from_adx_requests_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_site_filter_type_isValid = ::OpenAPI::fromJsonValue(m_site_filter_type, json[QString("siteFilterType")]);
    m_site_filter_type_isSet = !json[QString("siteFilterType")].isNull() && m_site_filter_type_isValid;

    m_site_ids_isValid = ::OpenAPI::fromJsonValue(m_site_ids, json[QString("siteIds")]);
    m_site_ids_isSet = !json[QString("siteIds")].isNull() && m_site_ids_isValid;

    m_ssl_compliant_isValid = ::OpenAPI::fromJsonValue(m_ssl_compliant, json[QString("sslCompliant")]);
    m_ssl_compliant_isSet = !json[QString("sslCompliant")].isNull() && m_ssl_compliant_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_subaccount_id_isValid = ::OpenAPI::fromJsonValue(m_subaccount_id, json[QString("subaccountId")]);
    m_subaccount_id_isSet = !json[QString("subaccountId")].isNull() && m_subaccount_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_url_escape_levels_isValid = ::OpenAPI::fromJsonValue(m_url_escape_levels, json[QString("urlEscapeLevels")]);
    m_url_escape_levels_isSet = !json[QString("urlEscapeLevels")].isNull() && m_url_escape_levels_isValid;
}

QString OAIEventTag::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventTag::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_advertiser_id_isSet) {
        obj.insert(QString("advertiserId"), ::OpenAPI::toJsonValue(m_advertiser_id));
    }
    if (m_advertiser_id_dimension_value.isSet()) {
        obj.insert(QString("advertiserIdDimensionValue"), ::OpenAPI::toJsonValue(m_advertiser_id_dimension_value));
    }
    if (m_campaign_id_isSet) {
        obj.insert(QString("campaignId"), ::OpenAPI::toJsonValue(m_campaign_id));
    }
    if (m_campaign_id_dimension_value.isSet()) {
        obj.insert(QString("campaignIdDimensionValue"), ::OpenAPI::toJsonValue(m_campaign_id_dimension_value));
    }
    if (m_enabled_by_default_isSet) {
        obj.insert(QString("enabledByDefault"), ::OpenAPI::toJsonValue(m_enabled_by_default));
    }
    if (m_exclude_from_adx_requests_isSet) {
        obj.insert(QString("excludeFromAdxRequests"), ::OpenAPI::toJsonValue(m_exclude_from_adx_requests));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_site_filter_type_isSet) {
        obj.insert(QString("siteFilterType"), ::OpenAPI::toJsonValue(m_site_filter_type));
    }
    if (m_site_ids.size() > 0) {
        obj.insert(QString("siteIds"), ::OpenAPI::toJsonValue(m_site_ids));
    }
    if (m_ssl_compliant_isSet) {
        obj.insert(QString("sslCompliant"), ::OpenAPI::toJsonValue(m_ssl_compliant));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subaccount_id_isSet) {
        obj.insert(QString("subaccountId"), ::OpenAPI::toJsonValue(m_subaccount_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_url_escape_levels_isSet) {
        obj.insert(QString("urlEscapeLevels"), ::OpenAPI::toJsonValue(m_url_escape_levels));
    }
    return obj;
}

QString OAIEventTag::getAccountId() const {
    return m_account_id;
}
void OAIEventTag::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIEventTag::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIEventTag::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIEventTag::getAdvertiserId() const {
    return m_advertiser_id;
}
void OAIEventTag::setAdvertiserId(const QString &advertiser_id) {
    m_advertiser_id = advertiser_id;
    m_advertiser_id_isSet = true;
}

bool OAIEventTag::is_advertiser_id_Set() const{
    return m_advertiser_id_isSet;
}

bool OAIEventTag::is_advertiser_id_Valid() const{
    return m_advertiser_id_isValid;
}

OAIDimensionValue OAIEventTag::getAdvertiserIdDimensionValue() const {
    return m_advertiser_id_dimension_value;
}
void OAIEventTag::setAdvertiserIdDimensionValue(const OAIDimensionValue &advertiser_id_dimension_value) {
    m_advertiser_id_dimension_value = advertiser_id_dimension_value;
    m_advertiser_id_dimension_value_isSet = true;
}

bool OAIEventTag::is_advertiser_id_dimension_value_Set() const{
    return m_advertiser_id_dimension_value_isSet;
}

bool OAIEventTag::is_advertiser_id_dimension_value_Valid() const{
    return m_advertiser_id_dimension_value_isValid;
}

QString OAIEventTag::getCampaignId() const {
    return m_campaign_id;
}
void OAIEventTag::setCampaignId(const QString &campaign_id) {
    m_campaign_id = campaign_id;
    m_campaign_id_isSet = true;
}

bool OAIEventTag::is_campaign_id_Set() const{
    return m_campaign_id_isSet;
}

bool OAIEventTag::is_campaign_id_Valid() const{
    return m_campaign_id_isValid;
}

OAIDimensionValue OAIEventTag::getCampaignIdDimensionValue() const {
    return m_campaign_id_dimension_value;
}
void OAIEventTag::setCampaignIdDimensionValue(const OAIDimensionValue &campaign_id_dimension_value) {
    m_campaign_id_dimension_value = campaign_id_dimension_value;
    m_campaign_id_dimension_value_isSet = true;
}

bool OAIEventTag::is_campaign_id_dimension_value_Set() const{
    return m_campaign_id_dimension_value_isSet;
}

bool OAIEventTag::is_campaign_id_dimension_value_Valid() const{
    return m_campaign_id_dimension_value_isValid;
}

bool OAIEventTag::isEnabledByDefault() const {
    return m_enabled_by_default;
}
void OAIEventTag::setEnabledByDefault(const bool &enabled_by_default) {
    m_enabled_by_default = enabled_by_default;
    m_enabled_by_default_isSet = true;
}

bool OAIEventTag::is_enabled_by_default_Set() const{
    return m_enabled_by_default_isSet;
}

bool OAIEventTag::is_enabled_by_default_Valid() const{
    return m_enabled_by_default_isValid;
}

bool OAIEventTag::isExcludeFromAdxRequests() const {
    return m_exclude_from_adx_requests;
}
void OAIEventTag::setExcludeFromAdxRequests(const bool &exclude_from_adx_requests) {
    m_exclude_from_adx_requests = exclude_from_adx_requests;
    m_exclude_from_adx_requests_isSet = true;
}

bool OAIEventTag::is_exclude_from_adx_requests_Set() const{
    return m_exclude_from_adx_requests_isSet;
}

bool OAIEventTag::is_exclude_from_adx_requests_Valid() const{
    return m_exclude_from_adx_requests_isValid;
}

QString OAIEventTag::getId() const {
    return m_id;
}
void OAIEventTag::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEventTag::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEventTag::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIEventTag::getKind() const {
    return m_kind;
}
void OAIEventTag::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIEventTag::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIEventTag::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIEventTag::getName() const {
    return m_name;
}
void OAIEventTag::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEventTag::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEventTag::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIEventTag::getSiteFilterType() const {
    return m_site_filter_type;
}
void OAIEventTag::setSiteFilterType(const QString &site_filter_type) {
    m_site_filter_type = site_filter_type;
    m_site_filter_type_isSet = true;
}

bool OAIEventTag::is_site_filter_type_Set() const{
    return m_site_filter_type_isSet;
}

bool OAIEventTag::is_site_filter_type_Valid() const{
    return m_site_filter_type_isValid;
}

QList<QString> OAIEventTag::getSiteIds() const {
    return m_site_ids;
}
void OAIEventTag::setSiteIds(const QList<QString> &site_ids) {
    m_site_ids = site_ids;
    m_site_ids_isSet = true;
}

bool OAIEventTag::is_site_ids_Set() const{
    return m_site_ids_isSet;
}

bool OAIEventTag::is_site_ids_Valid() const{
    return m_site_ids_isValid;
}

bool OAIEventTag::isSslCompliant() const {
    return m_ssl_compliant;
}
void OAIEventTag::setSslCompliant(const bool &ssl_compliant) {
    m_ssl_compliant = ssl_compliant;
    m_ssl_compliant_isSet = true;
}

bool OAIEventTag::is_ssl_compliant_Set() const{
    return m_ssl_compliant_isSet;
}

bool OAIEventTag::is_ssl_compliant_Valid() const{
    return m_ssl_compliant_isValid;
}

QString OAIEventTag::getStatus() const {
    return m_status;
}
void OAIEventTag::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIEventTag::is_status_Set() const{
    return m_status_isSet;
}

bool OAIEventTag::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIEventTag::getSubaccountId() const {
    return m_subaccount_id;
}
void OAIEventTag::setSubaccountId(const QString &subaccount_id) {
    m_subaccount_id = subaccount_id;
    m_subaccount_id_isSet = true;
}

bool OAIEventTag::is_subaccount_id_Set() const{
    return m_subaccount_id_isSet;
}

bool OAIEventTag::is_subaccount_id_Valid() const{
    return m_subaccount_id_isValid;
}

QString OAIEventTag::getType() const {
    return m_type;
}
void OAIEventTag::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEventTag::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEventTag::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIEventTag::getUrl() const {
    return m_url;
}
void OAIEventTag::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIEventTag::is_url_Set() const{
    return m_url_isSet;
}

bool OAIEventTag::is_url_Valid() const{
    return m_url_isValid;
}

qint32 OAIEventTag::getUrlEscapeLevels() const {
    return m_url_escape_levels;
}
void OAIEventTag::setUrlEscapeLevels(const qint32 &url_escape_levels) {
    m_url_escape_levels = url_escape_levels;
    m_url_escape_levels_isSet = true;
}

bool OAIEventTag::is_url_escape_levels_Set() const{
    return m_url_escape_levels_isSet;
}

bool OAIEventTag::is_url_escape_levels_Valid() const{
    return m_url_escape_levels_isValid;
}

bool OAIEventTag::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_advertiser_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_advertiser_id_dimension_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_campaign_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_campaign_id_dimension_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_by_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_from_adx_requests_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_filter_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_compliant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subaccount_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_escape_levels_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventTag::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
