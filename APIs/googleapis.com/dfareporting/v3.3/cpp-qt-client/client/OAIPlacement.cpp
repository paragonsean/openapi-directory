/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlacement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlacement::OAIPlacement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlacement::OAIPlacement() {
    this->initializeModel();
}

OAIPlacement::~OAIPlacement() {}

void OAIPlacement::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_ad_blocking_opt_out_isSet = false;
    m_ad_blocking_opt_out_isValid = false;

    m_additional_sizes_isSet = false;
    m_additional_sizes_isValid = false;

    m_advertiser_id_isSet = false;
    m_advertiser_id_isValid = false;

    m_advertiser_id_dimension_value_isSet = false;
    m_advertiser_id_dimension_value_isValid = false;

    m_archived_isSet = false;
    m_archived_isValid = false;

    m_campaign_id_isSet = false;
    m_campaign_id_isValid = false;

    m_campaign_id_dimension_value_isSet = false;
    m_campaign_id_dimension_value_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_compatibility_isSet = false;
    m_compatibility_isValid = false;

    m_content_category_id_isSet = false;
    m_content_category_id_isValid = false;

    m_create_info_isSet = false;
    m_create_info_isValid = false;

    m_directory_site_id_isSet = false;
    m_directory_site_id_isValid = false;

    m_directory_site_id_dimension_value_isSet = false;
    m_directory_site_id_dimension_value_isValid = false;

    m_external_id_isSet = false;
    m_external_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_id_dimension_value_isSet = false;
    m_id_dimension_value_isValid = false;

    m_key_name_isSet = false;
    m_key_name_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_last_modified_info_isSet = false;
    m_last_modified_info_isValid = false;

    m_lookback_configuration_isSet = false;
    m_lookback_configuration_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_payment_approved_isSet = false;
    m_payment_approved_isValid = false;

    m_payment_source_isSet = false;
    m_payment_source_isValid = false;

    m_placement_group_id_isSet = false;
    m_placement_group_id_isValid = false;

    m_placement_group_id_dimension_value_isSet = false;
    m_placement_group_id_dimension_value_isValid = false;

    m_placement_strategy_id_isSet = false;
    m_placement_strategy_id_isValid = false;

    m_pricing_schedule_isSet = false;
    m_pricing_schedule_isValid = false;

    m_primary_isSet = false;
    m_primary_isValid = false;

    m_publisher_update_info_isSet = false;
    m_publisher_update_info_isValid = false;

    m_site_id_isSet = false;
    m_site_id_isValid = false;

    m_site_id_dimension_value_isSet = false;
    m_site_id_dimension_value_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_ssl_required_isSet = false;
    m_ssl_required_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_subaccount_id_isSet = false;
    m_subaccount_id_isValid = false;

    m_tag_formats_isSet = false;
    m_tag_formats_isValid = false;

    m_tag_setting_isSet = false;
    m_tag_setting_isValid = false;

    m_video_active_view_opt_out_isSet = false;
    m_video_active_view_opt_out_isValid = false;

    m_video_settings_isSet = false;
    m_video_settings_isValid = false;

    m_vpaid_adapter_choice_isSet = false;
    m_vpaid_adapter_choice_isValid = false;
}

void OAIPlacement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlacement::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_ad_blocking_opt_out_isValid = ::OpenAPI::fromJsonValue(m_ad_blocking_opt_out, json[QString("adBlockingOptOut")]);
    m_ad_blocking_opt_out_isSet = !json[QString("adBlockingOptOut")].isNull() && m_ad_blocking_opt_out_isValid;

    m_additional_sizes_isValid = ::OpenAPI::fromJsonValue(m_additional_sizes, json[QString("additionalSizes")]);
    m_additional_sizes_isSet = !json[QString("additionalSizes")].isNull() && m_additional_sizes_isValid;

    m_advertiser_id_isValid = ::OpenAPI::fromJsonValue(m_advertiser_id, json[QString("advertiserId")]);
    m_advertiser_id_isSet = !json[QString("advertiserId")].isNull() && m_advertiser_id_isValid;

    m_advertiser_id_dimension_value_isValid = ::OpenAPI::fromJsonValue(m_advertiser_id_dimension_value, json[QString("advertiserIdDimensionValue")]);
    m_advertiser_id_dimension_value_isSet = !json[QString("advertiserIdDimensionValue")].isNull() && m_advertiser_id_dimension_value_isValid;

    m_archived_isValid = ::OpenAPI::fromJsonValue(m_archived, json[QString("archived")]);
    m_archived_isSet = !json[QString("archived")].isNull() && m_archived_isValid;

    m_campaign_id_isValid = ::OpenAPI::fromJsonValue(m_campaign_id, json[QString("campaignId")]);
    m_campaign_id_isSet = !json[QString("campaignId")].isNull() && m_campaign_id_isValid;

    m_campaign_id_dimension_value_isValid = ::OpenAPI::fromJsonValue(m_campaign_id_dimension_value, json[QString("campaignIdDimensionValue")]);
    m_campaign_id_dimension_value_isSet = !json[QString("campaignIdDimensionValue")].isNull() && m_campaign_id_dimension_value_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_compatibility_isValid = ::OpenAPI::fromJsonValue(m_compatibility, json[QString("compatibility")]);
    m_compatibility_isSet = !json[QString("compatibility")].isNull() && m_compatibility_isValid;

    m_content_category_id_isValid = ::OpenAPI::fromJsonValue(m_content_category_id, json[QString("contentCategoryId")]);
    m_content_category_id_isSet = !json[QString("contentCategoryId")].isNull() && m_content_category_id_isValid;

    m_create_info_isValid = ::OpenAPI::fromJsonValue(m_create_info, json[QString("createInfo")]);
    m_create_info_isSet = !json[QString("createInfo")].isNull() && m_create_info_isValid;

    m_directory_site_id_isValid = ::OpenAPI::fromJsonValue(m_directory_site_id, json[QString("directorySiteId")]);
    m_directory_site_id_isSet = !json[QString("directorySiteId")].isNull() && m_directory_site_id_isValid;

    m_directory_site_id_dimension_value_isValid = ::OpenAPI::fromJsonValue(m_directory_site_id_dimension_value, json[QString("directorySiteIdDimensionValue")]);
    m_directory_site_id_dimension_value_isSet = !json[QString("directorySiteIdDimensionValue")].isNull() && m_directory_site_id_dimension_value_isValid;

    m_external_id_isValid = ::OpenAPI::fromJsonValue(m_external_id, json[QString("externalId")]);
    m_external_id_isSet = !json[QString("externalId")].isNull() && m_external_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_id_dimension_value_isValid = ::OpenAPI::fromJsonValue(m_id_dimension_value, json[QString("idDimensionValue")]);
    m_id_dimension_value_isSet = !json[QString("idDimensionValue")].isNull() && m_id_dimension_value_isValid;

    m_key_name_isValid = ::OpenAPI::fromJsonValue(m_key_name, json[QString("keyName")]);
    m_key_name_isSet = !json[QString("keyName")].isNull() && m_key_name_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_last_modified_info_isValid = ::OpenAPI::fromJsonValue(m_last_modified_info, json[QString("lastModifiedInfo")]);
    m_last_modified_info_isSet = !json[QString("lastModifiedInfo")].isNull() && m_last_modified_info_isValid;

    m_lookback_configuration_isValid = ::OpenAPI::fromJsonValue(m_lookback_configuration, json[QString("lookbackConfiguration")]);
    m_lookback_configuration_isSet = !json[QString("lookbackConfiguration")].isNull() && m_lookback_configuration_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_payment_approved_isValid = ::OpenAPI::fromJsonValue(m_payment_approved, json[QString("paymentApproved")]);
    m_payment_approved_isSet = !json[QString("paymentApproved")].isNull() && m_payment_approved_isValid;

    m_payment_source_isValid = ::OpenAPI::fromJsonValue(m_payment_source, json[QString("paymentSource")]);
    m_payment_source_isSet = !json[QString("paymentSource")].isNull() && m_payment_source_isValid;

    m_placement_group_id_isValid = ::OpenAPI::fromJsonValue(m_placement_group_id, json[QString("placementGroupId")]);
    m_placement_group_id_isSet = !json[QString("placementGroupId")].isNull() && m_placement_group_id_isValid;

    m_placement_group_id_dimension_value_isValid = ::OpenAPI::fromJsonValue(m_placement_group_id_dimension_value, json[QString("placementGroupIdDimensionValue")]);
    m_placement_group_id_dimension_value_isSet = !json[QString("placementGroupIdDimensionValue")].isNull() && m_placement_group_id_dimension_value_isValid;

    m_placement_strategy_id_isValid = ::OpenAPI::fromJsonValue(m_placement_strategy_id, json[QString("placementStrategyId")]);
    m_placement_strategy_id_isSet = !json[QString("placementStrategyId")].isNull() && m_placement_strategy_id_isValid;

    m_pricing_schedule_isValid = ::OpenAPI::fromJsonValue(m_pricing_schedule, json[QString("pricingSchedule")]);
    m_pricing_schedule_isSet = !json[QString("pricingSchedule")].isNull() && m_pricing_schedule_isValid;

    m_primary_isValid = ::OpenAPI::fromJsonValue(m_primary, json[QString("primary")]);
    m_primary_isSet = !json[QString("primary")].isNull() && m_primary_isValid;

    m_publisher_update_info_isValid = ::OpenAPI::fromJsonValue(m_publisher_update_info, json[QString("publisherUpdateInfo")]);
    m_publisher_update_info_isSet = !json[QString("publisherUpdateInfo")].isNull() && m_publisher_update_info_isValid;

    m_site_id_isValid = ::OpenAPI::fromJsonValue(m_site_id, json[QString("siteId")]);
    m_site_id_isSet = !json[QString("siteId")].isNull() && m_site_id_isValid;

    m_site_id_dimension_value_isValid = ::OpenAPI::fromJsonValue(m_site_id_dimension_value, json[QString("siteIdDimensionValue")]);
    m_site_id_dimension_value_isSet = !json[QString("siteIdDimensionValue")].isNull() && m_site_id_dimension_value_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_ssl_required_isValid = ::OpenAPI::fromJsonValue(m_ssl_required, json[QString("sslRequired")]);
    m_ssl_required_isSet = !json[QString("sslRequired")].isNull() && m_ssl_required_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_subaccount_id_isValid = ::OpenAPI::fromJsonValue(m_subaccount_id, json[QString("subaccountId")]);
    m_subaccount_id_isSet = !json[QString("subaccountId")].isNull() && m_subaccount_id_isValid;

    m_tag_formats_isValid = ::OpenAPI::fromJsonValue(m_tag_formats, json[QString("tagFormats")]);
    m_tag_formats_isSet = !json[QString("tagFormats")].isNull() && m_tag_formats_isValid;

    m_tag_setting_isValid = ::OpenAPI::fromJsonValue(m_tag_setting, json[QString("tagSetting")]);
    m_tag_setting_isSet = !json[QString("tagSetting")].isNull() && m_tag_setting_isValid;

    m_video_active_view_opt_out_isValid = ::OpenAPI::fromJsonValue(m_video_active_view_opt_out, json[QString("videoActiveViewOptOut")]);
    m_video_active_view_opt_out_isSet = !json[QString("videoActiveViewOptOut")].isNull() && m_video_active_view_opt_out_isValid;

    m_video_settings_isValid = ::OpenAPI::fromJsonValue(m_video_settings, json[QString("videoSettings")]);
    m_video_settings_isSet = !json[QString("videoSettings")].isNull() && m_video_settings_isValid;

    m_vpaid_adapter_choice_isValid = ::OpenAPI::fromJsonValue(m_vpaid_adapter_choice, json[QString("vpaidAdapterChoice")]);
    m_vpaid_adapter_choice_isSet = !json[QString("vpaidAdapterChoice")].isNull() && m_vpaid_adapter_choice_isValid;
}

QString OAIPlacement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlacement::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_ad_blocking_opt_out_isSet) {
        obj.insert(QString("adBlockingOptOut"), ::OpenAPI::toJsonValue(m_ad_blocking_opt_out));
    }
    if (m_additional_sizes.size() > 0) {
        obj.insert(QString("additionalSizes"), ::OpenAPI::toJsonValue(m_additional_sizes));
    }
    if (m_advertiser_id_isSet) {
        obj.insert(QString("advertiserId"), ::OpenAPI::toJsonValue(m_advertiser_id));
    }
    if (m_advertiser_id_dimension_value.isSet()) {
        obj.insert(QString("advertiserIdDimensionValue"), ::OpenAPI::toJsonValue(m_advertiser_id_dimension_value));
    }
    if (m_archived_isSet) {
        obj.insert(QString("archived"), ::OpenAPI::toJsonValue(m_archived));
    }
    if (m_campaign_id_isSet) {
        obj.insert(QString("campaignId"), ::OpenAPI::toJsonValue(m_campaign_id));
    }
    if (m_campaign_id_dimension_value.isSet()) {
        obj.insert(QString("campaignIdDimensionValue"), ::OpenAPI::toJsonValue(m_campaign_id_dimension_value));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_compatibility_isSet) {
        obj.insert(QString("compatibility"), ::OpenAPI::toJsonValue(m_compatibility));
    }
    if (m_content_category_id_isSet) {
        obj.insert(QString("contentCategoryId"), ::OpenAPI::toJsonValue(m_content_category_id));
    }
    if (m_create_info.isSet()) {
        obj.insert(QString("createInfo"), ::OpenAPI::toJsonValue(m_create_info));
    }
    if (m_directory_site_id_isSet) {
        obj.insert(QString("directorySiteId"), ::OpenAPI::toJsonValue(m_directory_site_id));
    }
    if (m_directory_site_id_dimension_value.isSet()) {
        obj.insert(QString("directorySiteIdDimensionValue"), ::OpenAPI::toJsonValue(m_directory_site_id_dimension_value));
    }
    if (m_external_id_isSet) {
        obj.insert(QString("externalId"), ::OpenAPI::toJsonValue(m_external_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_id_dimension_value.isSet()) {
        obj.insert(QString("idDimensionValue"), ::OpenAPI::toJsonValue(m_id_dimension_value));
    }
    if (m_key_name_isSet) {
        obj.insert(QString("keyName"), ::OpenAPI::toJsonValue(m_key_name));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_last_modified_info.isSet()) {
        obj.insert(QString("lastModifiedInfo"), ::OpenAPI::toJsonValue(m_last_modified_info));
    }
    if (m_lookback_configuration.isSet()) {
        obj.insert(QString("lookbackConfiguration"), ::OpenAPI::toJsonValue(m_lookback_configuration));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_payment_approved_isSet) {
        obj.insert(QString("paymentApproved"), ::OpenAPI::toJsonValue(m_payment_approved));
    }
    if (m_payment_source_isSet) {
        obj.insert(QString("paymentSource"), ::OpenAPI::toJsonValue(m_payment_source));
    }
    if (m_placement_group_id_isSet) {
        obj.insert(QString("placementGroupId"), ::OpenAPI::toJsonValue(m_placement_group_id));
    }
    if (m_placement_group_id_dimension_value.isSet()) {
        obj.insert(QString("placementGroupIdDimensionValue"), ::OpenAPI::toJsonValue(m_placement_group_id_dimension_value));
    }
    if (m_placement_strategy_id_isSet) {
        obj.insert(QString("placementStrategyId"), ::OpenAPI::toJsonValue(m_placement_strategy_id));
    }
    if (m_pricing_schedule.isSet()) {
        obj.insert(QString("pricingSchedule"), ::OpenAPI::toJsonValue(m_pricing_schedule));
    }
    if (m_primary_isSet) {
        obj.insert(QString("primary"), ::OpenAPI::toJsonValue(m_primary));
    }
    if (m_publisher_update_info.isSet()) {
        obj.insert(QString("publisherUpdateInfo"), ::OpenAPI::toJsonValue(m_publisher_update_info));
    }
    if (m_site_id_isSet) {
        obj.insert(QString("siteId"), ::OpenAPI::toJsonValue(m_site_id));
    }
    if (m_site_id_dimension_value.isSet()) {
        obj.insert(QString("siteIdDimensionValue"), ::OpenAPI::toJsonValue(m_site_id_dimension_value));
    }
    if (m_size.isSet()) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_ssl_required_isSet) {
        obj.insert(QString("sslRequired"), ::OpenAPI::toJsonValue(m_ssl_required));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subaccount_id_isSet) {
        obj.insert(QString("subaccountId"), ::OpenAPI::toJsonValue(m_subaccount_id));
    }
    if (m_tag_formats.size() > 0) {
        obj.insert(QString("tagFormats"), ::OpenAPI::toJsonValue(m_tag_formats));
    }
    if (m_tag_setting.isSet()) {
        obj.insert(QString("tagSetting"), ::OpenAPI::toJsonValue(m_tag_setting));
    }
    if (m_video_active_view_opt_out_isSet) {
        obj.insert(QString("videoActiveViewOptOut"), ::OpenAPI::toJsonValue(m_video_active_view_opt_out));
    }
    if (m_video_settings.isSet()) {
        obj.insert(QString("videoSettings"), ::OpenAPI::toJsonValue(m_video_settings));
    }
    if (m_vpaid_adapter_choice_isSet) {
        obj.insert(QString("vpaidAdapterChoice"), ::OpenAPI::toJsonValue(m_vpaid_adapter_choice));
    }
    return obj;
}

QString OAIPlacement::getAccountId() const {
    return m_account_id;
}
void OAIPlacement::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIPlacement::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIPlacement::is_account_id_Valid() const{
    return m_account_id_isValid;
}

bool OAIPlacement::isAdBlockingOptOut() const {
    return m_ad_blocking_opt_out;
}
void OAIPlacement::setAdBlockingOptOut(const bool &ad_blocking_opt_out) {
    m_ad_blocking_opt_out = ad_blocking_opt_out;
    m_ad_blocking_opt_out_isSet = true;
}

bool OAIPlacement::is_ad_blocking_opt_out_Set() const{
    return m_ad_blocking_opt_out_isSet;
}

bool OAIPlacement::is_ad_blocking_opt_out_Valid() const{
    return m_ad_blocking_opt_out_isValid;
}

QList<OAISize> OAIPlacement::getAdditionalSizes() const {
    return m_additional_sizes;
}
void OAIPlacement::setAdditionalSizes(const QList<OAISize> &additional_sizes) {
    m_additional_sizes = additional_sizes;
    m_additional_sizes_isSet = true;
}

bool OAIPlacement::is_additional_sizes_Set() const{
    return m_additional_sizes_isSet;
}

bool OAIPlacement::is_additional_sizes_Valid() const{
    return m_additional_sizes_isValid;
}

QString OAIPlacement::getAdvertiserId() const {
    return m_advertiser_id;
}
void OAIPlacement::setAdvertiserId(const QString &advertiser_id) {
    m_advertiser_id = advertiser_id;
    m_advertiser_id_isSet = true;
}

bool OAIPlacement::is_advertiser_id_Set() const{
    return m_advertiser_id_isSet;
}

bool OAIPlacement::is_advertiser_id_Valid() const{
    return m_advertiser_id_isValid;
}

OAIDimensionValue OAIPlacement::getAdvertiserIdDimensionValue() const {
    return m_advertiser_id_dimension_value;
}
void OAIPlacement::setAdvertiserIdDimensionValue(const OAIDimensionValue &advertiser_id_dimension_value) {
    m_advertiser_id_dimension_value = advertiser_id_dimension_value;
    m_advertiser_id_dimension_value_isSet = true;
}

bool OAIPlacement::is_advertiser_id_dimension_value_Set() const{
    return m_advertiser_id_dimension_value_isSet;
}

bool OAIPlacement::is_advertiser_id_dimension_value_Valid() const{
    return m_advertiser_id_dimension_value_isValid;
}

bool OAIPlacement::isArchived() const {
    return m_archived;
}
void OAIPlacement::setArchived(const bool &archived) {
    m_archived = archived;
    m_archived_isSet = true;
}

bool OAIPlacement::is_archived_Set() const{
    return m_archived_isSet;
}

bool OAIPlacement::is_archived_Valid() const{
    return m_archived_isValid;
}

QString OAIPlacement::getCampaignId() const {
    return m_campaign_id;
}
void OAIPlacement::setCampaignId(const QString &campaign_id) {
    m_campaign_id = campaign_id;
    m_campaign_id_isSet = true;
}

bool OAIPlacement::is_campaign_id_Set() const{
    return m_campaign_id_isSet;
}

bool OAIPlacement::is_campaign_id_Valid() const{
    return m_campaign_id_isValid;
}

OAIDimensionValue OAIPlacement::getCampaignIdDimensionValue() const {
    return m_campaign_id_dimension_value;
}
void OAIPlacement::setCampaignIdDimensionValue(const OAIDimensionValue &campaign_id_dimension_value) {
    m_campaign_id_dimension_value = campaign_id_dimension_value;
    m_campaign_id_dimension_value_isSet = true;
}

bool OAIPlacement::is_campaign_id_dimension_value_Set() const{
    return m_campaign_id_dimension_value_isSet;
}

bool OAIPlacement::is_campaign_id_dimension_value_Valid() const{
    return m_campaign_id_dimension_value_isValid;
}

QString OAIPlacement::getComment() const {
    return m_comment;
}
void OAIPlacement::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIPlacement::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIPlacement::is_comment_Valid() const{
    return m_comment_isValid;
}

QString OAIPlacement::getCompatibility() const {
    return m_compatibility;
}
void OAIPlacement::setCompatibility(const QString &compatibility) {
    m_compatibility = compatibility;
    m_compatibility_isSet = true;
}

bool OAIPlacement::is_compatibility_Set() const{
    return m_compatibility_isSet;
}

bool OAIPlacement::is_compatibility_Valid() const{
    return m_compatibility_isValid;
}

QString OAIPlacement::getContentCategoryId() const {
    return m_content_category_id;
}
void OAIPlacement::setContentCategoryId(const QString &content_category_id) {
    m_content_category_id = content_category_id;
    m_content_category_id_isSet = true;
}

bool OAIPlacement::is_content_category_id_Set() const{
    return m_content_category_id_isSet;
}

bool OAIPlacement::is_content_category_id_Valid() const{
    return m_content_category_id_isValid;
}

OAILastModifiedInfo OAIPlacement::getCreateInfo() const {
    return m_create_info;
}
void OAIPlacement::setCreateInfo(const OAILastModifiedInfo &create_info) {
    m_create_info = create_info;
    m_create_info_isSet = true;
}

bool OAIPlacement::is_create_info_Set() const{
    return m_create_info_isSet;
}

bool OAIPlacement::is_create_info_Valid() const{
    return m_create_info_isValid;
}

QString OAIPlacement::getDirectorySiteId() const {
    return m_directory_site_id;
}
void OAIPlacement::setDirectorySiteId(const QString &directory_site_id) {
    m_directory_site_id = directory_site_id;
    m_directory_site_id_isSet = true;
}

bool OAIPlacement::is_directory_site_id_Set() const{
    return m_directory_site_id_isSet;
}

bool OAIPlacement::is_directory_site_id_Valid() const{
    return m_directory_site_id_isValid;
}

OAIDimensionValue OAIPlacement::getDirectorySiteIdDimensionValue() const {
    return m_directory_site_id_dimension_value;
}
void OAIPlacement::setDirectorySiteIdDimensionValue(const OAIDimensionValue &directory_site_id_dimension_value) {
    m_directory_site_id_dimension_value = directory_site_id_dimension_value;
    m_directory_site_id_dimension_value_isSet = true;
}

bool OAIPlacement::is_directory_site_id_dimension_value_Set() const{
    return m_directory_site_id_dimension_value_isSet;
}

bool OAIPlacement::is_directory_site_id_dimension_value_Valid() const{
    return m_directory_site_id_dimension_value_isValid;
}

QString OAIPlacement::getExternalId() const {
    return m_external_id;
}
void OAIPlacement::setExternalId(const QString &external_id) {
    m_external_id = external_id;
    m_external_id_isSet = true;
}

bool OAIPlacement::is_external_id_Set() const{
    return m_external_id_isSet;
}

bool OAIPlacement::is_external_id_Valid() const{
    return m_external_id_isValid;
}

QString OAIPlacement::getId() const {
    return m_id;
}
void OAIPlacement::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPlacement::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPlacement::is_id_Valid() const{
    return m_id_isValid;
}

OAIDimensionValue OAIPlacement::getIdDimensionValue() const {
    return m_id_dimension_value;
}
void OAIPlacement::setIdDimensionValue(const OAIDimensionValue &id_dimension_value) {
    m_id_dimension_value = id_dimension_value;
    m_id_dimension_value_isSet = true;
}

bool OAIPlacement::is_id_dimension_value_Set() const{
    return m_id_dimension_value_isSet;
}

bool OAIPlacement::is_id_dimension_value_Valid() const{
    return m_id_dimension_value_isValid;
}

QString OAIPlacement::getKeyName() const {
    return m_key_name;
}
void OAIPlacement::setKeyName(const QString &key_name) {
    m_key_name = key_name;
    m_key_name_isSet = true;
}

bool OAIPlacement::is_key_name_Set() const{
    return m_key_name_isSet;
}

bool OAIPlacement::is_key_name_Valid() const{
    return m_key_name_isValid;
}

QString OAIPlacement::getKind() const {
    return m_kind;
}
void OAIPlacement::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIPlacement::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIPlacement::is_kind_Valid() const{
    return m_kind_isValid;
}

OAILastModifiedInfo OAIPlacement::getLastModifiedInfo() const {
    return m_last_modified_info;
}
void OAIPlacement::setLastModifiedInfo(const OAILastModifiedInfo &last_modified_info) {
    m_last_modified_info = last_modified_info;
    m_last_modified_info_isSet = true;
}

bool OAIPlacement::is_last_modified_info_Set() const{
    return m_last_modified_info_isSet;
}

bool OAIPlacement::is_last_modified_info_Valid() const{
    return m_last_modified_info_isValid;
}

OAILookbackConfiguration OAIPlacement::getLookbackConfiguration() const {
    return m_lookback_configuration;
}
void OAIPlacement::setLookbackConfiguration(const OAILookbackConfiguration &lookback_configuration) {
    m_lookback_configuration = lookback_configuration;
    m_lookback_configuration_isSet = true;
}

bool OAIPlacement::is_lookback_configuration_Set() const{
    return m_lookback_configuration_isSet;
}

bool OAIPlacement::is_lookback_configuration_Valid() const{
    return m_lookback_configuration_isValid;
}

QString OAIPlacement::getName() const {
    return m_name;
}
void OAIPlacement::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPlacement::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPlacement::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIPlacement::isPaymentApproved() const {
    return m_payment_approved;
}
void OAIPlacement::setPaymentApproved(const bool &payment_approved) {
    m_payment_approved = payment_approved;
    m_payment_approved_isSet = true;
}

bool OAIPlacement::is_payment_approved_Set() const{
    return m_payment_approved_isSet;
}

bool OAIPlacement::is_payment_approved_Valid() const{
    return m_payment_approved_isValid;
}

QString OAIPlacement::getPaymentSource() const {
    return m_payment_source;
}
void OAIPlacement::setPaymentSource(const QString &payment_source) {
    m_payment_source = payment_source;
    m_payment_source_isSet = true;
}

bool OAIPlacement::is_payment_source_Set() const{
    return m_payment_source_isSet;
}

bool OAIPlacement::is_payment_source_Valid() const{
    return m_payment_source_isValid;
}

QString OAIPlacement::getPlacementGroupId() const {
    return m_placement_group_id;
}
void OAIPlacement::setPlacementGroupId(const QString &placement_group_id) {
    m_placement_group_id = placement_group_id;
    m_placement_group_id_isSet = true;
}

bool OAIPlacement::is_placement_group_id_Set() const{
    return m_placement_group_id_isSet;
}

bool OAIPlacement::is_placement_group_id_Valid() const{
    return m_placement_group_id_isValid;
}

OAIDimensionValue OAIPlacement::getPlacementGroupIdDimensionValue() const {
    return m_placement_group_id_dimension_value;
}
void OAIPlacement::setPlacementGroupIdDimensionValue(const OAIDimensionValue &placement_group_id_dimension_value) {
    m_placement_group_id_dimension_value = placement_group_id_dimension_value;
    m_placement_group_id_dimension_value_isSet = true;
}

bool OAIPlacement::is_placement_group_id_dimension_value_Set() const{
    return m_placement_group_id_dimension_value_isSet;
}

bool OAIPlacement::is_placement_group_id_dimension_value_Valid() const{
    return m_placement_group_id_dimension_value_isValid;
}

QString OAIPlacement::getPlacementStrategyId() const {
    return m_placement_strategy_id;
}
void OAIPlacement::setPlacementStrategyId(const QString &placement_strategy_id) {
    m_placement_strategy_id = placement_strategy_id;
    m_placement_strategy_id_isSet = true;
}

bool OAIPlacement::is_placement_strategy_id_Set() const{
    return m_placement_strategy_id_isSet;
}

bool OAIPlacement::is_placement_strategy_id_Valid() const{
    return m_placement_strategy_id_isValid;
}

OAIPricingSchedule OAIPlacement::getPricingSchedule() const {
    return m_pricing_schedule;
}
void OAIPlacement::setPricingSchedule(const OAIPricingSchedule &pricing_schedule) {
    m_pricing_schedule = pricing_schedule;
    m_pricing_schedule_isSet = true;
}

bool OAIPlacement::is_pricing_schedule_Set() const{
    return m_pricing_schedule_isSet;
}

bool OAIPlacement::is_pricing_schedule_Valid() const{
    return m_pricing_schedule_isValid;
}

bool OAIPlacement::isPrimary() const {
    return m_primary;
}
void OAIPlacement::setPrimary(const bool &primary) {
    m_primary = primary;
    m_primary_isSet = true;
}

bool OAIPlacement::is_primary_Set() const{
    return m_primary_isSet;
}

bool OAIPlacement::is_primary_Valid() const{
    return m_primary_isValid;
}

OAILastModifiedInfo OAIPlacement::getPublisherUpdateInfo() const {
    return m_publisher_update_info;
}
void OAIPlacement::setPublisherUpdateInfo(const OAILastModifiedInfo &publisher_update_info) {
    m_publisher_update_info = publisher_update_info;
    m_publisher_update_info_isSet = true;
}

bool OAIPlacement::is_publisher_update_info_Set() const{
    return m_publisher_update_info_isSet;
}

bool OAIPlacement::is_publisher_update_info_Valid() const{
    return m_publisher_update_info_isValid;
}

QString OAIPlacement::getSiteId() const {
    return m_site_id;
}
void OAIPlacement::setSiteId(const QString &site_id) {
    m_site_id = site_id;
    m_site_id_isSet = true;
}

bool OAIPlacement::is_site_id_Set() const{
    return m_site_id_isSet;
}

bool OAIPlacement::is_site_id_Valid() const{
    return m_site_id_isValid;
}

OAIDimensionValue OAIPlacement::getSiteIdDimensionValue() const {
    return m_site_id_dimension_value;
}
void OAIPlacement::setSiteIdDimensionValue(const OAIDimensionValue &site_id_dimension_value) {
    m_site_id_dimension_value = site_id_dimension_value;
    m_site_id_dimension_value_isSet = true;
}

bool OAIPlacement::is_site_id_dimension_value_Set() const{
    return m_site_id_dimension_value_isSet;
}

bool OAIPlacement::is_site_id_dimension_value_Valid() const{
    return m_site_id_dimension_value_isValid;
}

OAISize OAIPlacement::getSize() const {
    return m_size;
}
void OAIPlacement::setSize(const OAISize &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIPlacement::is_size_Set() const{
    return m_size_isSet;
}

bool OAIPlacement::is_size_Valid() const{
    return m_size_isValid;
}

bool OAIPlacement::isSslRequired() const {
    return m_ssl_required;
}
void OAIPlacement::setSslRequired(const bool &ssl_required) {
    m_ssl_required = ssl_required;
    m_ssl_required_isSet = true;
}

bool OAIPlacement::is_ssl_required_Set() const{
    return m_ssl_required_isSet;
}

bool OAIPlacement::is_ssl_required_Valid() const{
    return m_ssl_required_isValid;
}

QString OAIPlacement::getStatus() const {
    return m_status;
}
void OAIPlacement::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPlacement::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPlacement::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIPlacement::getSubaccountId() const {
    return m_subaccount_id;
}
void OAIPlacement::setSubaccountId(const QString &subaccount_id) {
    m_subaccount_id = subaccount_id;
    m_subaccount_id_isSet = true;
}

bool OAIPlacement::is_subaccount_id_Set() const{
    return m_subaccount_id_isSet;
}

bool OAIPlacement::is_subaccount_id_Valid() const{
    return m_subaccount_id_isValid;
}

QList<QString> OAIPlacement::getTagFormats() const {
    return m_tag_formats;
}
void OAIPlacement::setTagFormats(const QList<QString> &tag_formats) {
    m_tag_formats = tag_formats;
    m_tag_formats_isSet = true;
}

bool OAIPlacement::is_tag_formats_Set() const{
    return m_tag_formats_isSet;
}

bool OAIPlacement::is_tag_formats_Valid() const{
    return m_tag_formats_isValid;
}

OAITagSetting OAIPlacement::getTagSetting() const {
    return m_tag_setting;
}
void OAIPlacement::setTagSetting(const OAITagSetting &tag_setting) {
    m_tag_setting = tag_setting;
    m_tag_setting_isSet = true;
}

bool OAIPlacement::is_tag_setting_Set() const{
    return m_tag_setting_isSet;
}

bool OAIPlacement::is_tag_setting_Valid() const{
    return m_tag_setting_isValid;
}

bool OAIPlacement::isVideoActiveViewOptOut() const {
    return m_video_active_view_opt_out;
}
void OAIPlacement::setVideoActiveViewOptOut(const bool &video_active_view_opt_out) {
    m_video_active_view_opt_out = video_active_view_opt_out;
    m_video_active_view_opt_out_isSet = true;
}

bool OAIPlacement::is_video_active_view_opt_out_Set() const{
    return m_video_active_view_opt_out_isSet;
}

bool OAIPlacement::is_video_active_view_opt_out_Valid() const{
    return m_video_active_view_opt_out_isValid;
}

OAIVideoSettings OAIPlacement::getVideoSettings() const {
    return m_video_settings;
}
void OAIPlacement::setVideoSettings(const OAIVideoSettings &video_settings) {
    m_video_settings = video_settings;
    m_video_settings_isSet = true;
}

bool OAIPlacement::is_video_settings_Set() const{
    return m_video_settings_isSet;
}

bool OAIPlacement::is_video_settings_Valid() const{
    return m_video_settings_isValid;
}

QString OAIPlacement::getVpaidAdapterChoice() const {
    return m_vpaid_adapter_choice;
}
void OAIPlacement::setVpaidAdapterChoice(const QString &vpaid_adapter_choice) {
    m_vpaid_adapter_choice = vpaid_adapter_choice;
    m_vpaid_adapter_choice_isSet = true;
}

bool OAIPlacement::is_vpaid_adapter_choice_Set() const{
    return m_vpaid_adapter_choice_isSet;
}

bool OAIPlacement::is_vpaid_adapter_choice_Valid() const{
    return m_vpaid_adapter_choice_isValid;
}

bool OAIPlacement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ad_blocking_opt_out_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_sizes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_advertiser_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_advertiser_id_dimension_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_archived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_campaign_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_campaign_id_dimension_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compatibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_directory_site_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_directory_site_id_dimension_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_dimension_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lookback_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_approved_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement_group_id_dimension_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement_strategy_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pricing_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_update_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_id_dimension_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_size.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subaccount_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_formats.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_setting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_active_view_opt_out_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpaid_adapter_choice_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlacement::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
