/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListPopulationTerm.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListPopulationTerm::OAIListPopulationTerm(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListPopulationTerm::OAIListPopulationTerm() {
    this->initializeModel();
}

OAIListPopulationTerm::~OAIListPopulationTerm() {}

void OAIListPopulationTerm::initializeModel() {

    m_contains_isSet = false;
    m_contains_isValid = false;

    m_negation_isSet = false;
    m_negation_isValid = false;

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;

    m_remarketing_list_id_isSet = false;
    m_remarketing_list_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_variable_friendly_name_isSet = false;
    m_variable_friendly_name_isValid = false;

    m_variable_name_isSet = false;
    m_variable_name_isValid = false;
}

void OAIListPopulationTerm::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListPopulationTerm::fromJsonObject(QJsonObject json) {

    m_contains_isValid = ::OpenAPI::fromJsonValue(m_contains, json[QString("contains")]);
    m_contains_isSet = !json[QString("contains")].isNull() && m_contains_isValid;

    m_negation_isValid = ::OpenAPI::fromJsonValue(m_negation, json[QString("negation")]);
    m_negation_isSet = !json[QString("negation")].isNull() && m_negation_isValid;

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("operator")]);
    m_r_operator_isSet = !json[QString("operator")].isNull() && m_r_operator_isValid;

    m_remarketing_list_id_isValid = ::OpenAPI::fromJsonValue(m_remarketing_list_id, json[QString("remarketingListId")]);
    m_remarketing_list_id_isSet = !json[QString("remarketingListId")].isNull() && m_remarketing_list_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_variable_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_variable_friendly_name, json[QString("variableFriendlyName")]);
    m_variable_friendly_name_isSet = !json[QString("variableFriendlyName")].isNull() && m_variable_friendly_name_isValid;

    m_variable_name_isValid = ::OpenAPI::fromJsonValue(m_variable_name, json[QString("variableName")]);
    m_variable_name_isSet = !json[QString("variableName")].isNull() && m_variable_name_isValid;
}

QString OAIListPopulationTerm::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListPopulationTerm::asJsonObject() const {
    QJsonObject obj;
    if (m_contains_isSet) {
        obj.insert(QString("contains"), ::OpenAPI::toJsonValue(m_contains));
    }
    if (m_negation_isSet) {
        obj.insert(QString("negation"), ::OpenAPI::toJsonValue(m_negation));
    }
    if (m_r_operator_isSet) {
        obj.insert(QString("operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    if (m_remarketing_list_id_isSet) {
        obj.insert(QString("remarketingListId"), ::OpenAPI::toJsonValue(m_remarketing_list_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_variable_friendly_name_isSet) {
        obj.insert(QString("variableFriendlyName"), ::OpenAPI::toJsonValue(m_variable_friendly_name));
    }
    if (m_variable_name_isSet) {
        obj.insert(QString("variableName"), ::OpenAPI::toJsonValue(m_variable_name));
    }
    return obj;
}

bool OAIListPopulationTerm::isContains() const {
    return m_contains;
}
void OAIListPopulationTerm::setContains(const bool &contains) {
    m_contains = contains;
    m_contains_isSet = true;
}

bool OAIListPopulationTerm::is_contains_Set() const{
    return m_contains_isSet;
}

bool OAIListPopulationTerm::is_contains_Valid() const{
    return m_contains_isValid;
}

bool OAIListPopulationTerm::isNegation() const {
    return m_negation;
}
void OAIListPopulationTerm::setNegation(const bool &negation) {
    m_negation = negation;
    m_negation_isSet = true;
}

bool OAIListPopulationTerm::is_negation_Set() const{
    return m_negation_isSet;
}

bool OAIListPopulationTerm::is_negation_Valid() const{
    return m_negation_isValid;
}

QString OAIListPopulationTerm::getROperator() const {
    return m_r_operator;
}
void OAIListPopulationTerm::setROperator(const QString &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAIListPopulationTerm::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAIListPopulationTerm::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

QString OAIListPopulationTerm::getRemarketingListId() const {
    return m_remarketing_list_id;
}
void OAIListPopulationTerm::setRemarketingListId(const QString &remarketing_list_id) {
    m_remarketing_list_id = remarketing_list_id;
    m_remarketing_list_id_isSet = true;
}

bool OAIListPopulationTerm::is_remarketing_list_id_Set() const{
    return m_remarketing_list_id_isSet;
}

bool OAIListPopulationTerm::is_remarketing_list_id_Valid() const{
    return m_remarketing_list_id_isValid;
}

QString OAIListPopulationTerm::getType() const {
    return m_type;
}
void OAIListPopulationTerm::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIListPopulationTerm::is_type_Set() const{
    return m_type_isSet;
}

bool OAIListPopulationTerm::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIListPopulationTerm::getValue() const {
    return m_value;
}
void OAIListPopulationTerm::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIListPopulationTerm::is_value_Set() const{
    return m_value_isSet;
}

bool OAIListPopulationTerm::is_value_Valid() const{
    return m_value_isValid;
}

QString OAIListPopulationTerm::getVariableFriendlyName() const {
    return m_variable_friendly_name;
}
void OAIListPopulationTerm::setVariableFriendlyName(const QString &variable_friendly_name) {
    m_variable_friendly_name = variable_friendly_name;
    m_variable_friendly_name_isSet = true;
}

bool OAIListPopulationTerm::is_variable_friendly_name_Set() const{
    return m_variable_friendly_name_isSet;
}

bool OAIListPopulationTerm::is_variable_friendly_name_Valid() const{
    return m_variable_friendly_name_isValid;
}

QString OAIListPopulationTerm::getVariableName() const {
    return m_variable_name;
}
void OAIListPopulationTerm::setVariableName(const QString &variable_name) {
    m_variable_name = variable_name;
    m_variable_name_isSet = true;
}

bool OAIListPopulationTerm::is_variable_name_Set() const{
    return m_variable_name_isSet;
}

bool OAIListPopulationTerm::is_variable_name_Valid() const{
    return m_variable_name_isValid;
}

bool OAIListPopulationTerm::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contains_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_negation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_operator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remarketing_list_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variable_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variable_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListPopulationTerm::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
