/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIReport_crossDimensionReachCriteria.h
 *
 * The report criteria for a report of type \&quot;CROSS_DIMENSION_REACH\&quot;.
 */

#ifndef OAIReport_crossDimensionReachCriteria_H
#define OAIReport_crossDimensionReachCriteria_H

#include <QJsonObject>

#include "OAIDateRange.h"
#include "OAIDimensionValue.h"
#include "OAISortedDimension.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISortedDimension;
class OAIDateRange;
class OAIDimensionValue;

class OAIReport_crossDimensionReachCriteria : public OAIObject {
public:
    OAIReport_crossDimensionReachCriteria();
    OAIReport_crossDimensionReachCriteria(QString json);
    ~OAIReport_crossDimensionReachCriteria() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAISortedDimension> getBreakdown() const;
    void setBreakdown(const QList<OAISortedDimension> &breakdown);
    bool is_breakdown_Set() const;
    bool is_breakdown_Valid() const;

    OAIDateRange getDateRange() const;
    void setDateRange(const OAIDateRange &date_range);
    bool is_date_range_Set() const;
    bool is_date_range_Valid() const;

    QString getDimension() const;
    void setDimension(const QString &dimension);
    bool is_dimension_Set() const;
    bool is_dimension_Valid() const;

    QList<OAIDimensionValue> getDimensionFilters() const;
    void setDimensionFilters(const QList<OAIDimensionValue> &dimension_filters);
    bool is_dimension_filters_Set() const;
    bool is_dimension_filters_Valid() const;

    QList<QString> getMetricNames() const;
    void setMetricNames(const QList<QString> &metric_names);
    bool is_metric_names_Set() const;
    bool is_metric_names_Valid() const;

    QList<QString> getOverlapMetricNames() const;
    void setOverlapMetricNames(const QList<QString> &overlap_metric_names);
    bool is_overlap_metric_names_Set() const;
    bool is_overlap_metric_names_Valid() const;

    bool isPivoted() const;
    void setPivoted(const bool &pivoted);
    bool is_pivoted_Set() const;
    bool is_pivoted_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAISortedDimension> m_breakdown;
    bool m_breakdown_isSet;
    bool m_breakdown_isValid;

    OAIDateRange m_date_range;
    bool m_date_range_isSet;
    bool m_date_range_isValid;

    QString m_dimension;
    bool m_dimension_isSet;
    bool m_dimension_isValid;

    QList<OAIDimensionValue> m_dimension_filters;
    bool m_dimension_filters_isSet;
    bool m_dimension_filters_isValid;

    QList<QString> m_metric_names;
    bool m_metric_names_isSet;
    bool m_metric_names_isValid;

    QList<QString> m_overlap_metric_names;
    bool m_overlap_metric_names_isSet;
    bool m_overlap_metric_names_isValid;

    bool m_pivoted;
    bool m_pivoted_isSet;
    bool m_pivoted_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIReport_crossDimensionReachCriteria)

#endif // OAIReport_crossDimensionReachCriteria_H
