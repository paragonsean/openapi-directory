/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFloodlightActivityPublisherDynamicTag.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFloodlightActivityPublisherDynamicTag::OAIFloodlightActivityPublisherDynamicTag(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFloodlightActivityPublisherDynamicTag::OAIFloodlightActivityPublisherDynamicTag() {
    this->initializeModel();
}

OAIFloodlightActivityPublisherDynamicTag::~OAIFloodlightActivityPublisherDynamicTag() {}

void OAIFloodlightActivityPublisherDynamicTag::initializeModel() {

    m_click_through_isSet = false;
    m_click_through_isValid = false;

    m_directory_site_id_isSet = false;
    m_directory_site_id_isValid = false;

    m_dynamic_tag_isSet = false;
    m_dynamic_tag_isValid = false;

    m_site_id_isSet = false;
    m_site_id_isValid = false;

    m_site_id_dimension_value_isSet = false;
    m_site_id_dimension_value_isValid = false;

    m_view_through_isSet = false;
    m_view_through_isValid = false;
}

void OAIFloodlightActivityPublisherDynamicTag::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFloodlightActivityPublisherDynamicTag::fromJsonObject(QJsonObject json) {

    m_click_through_isValid = ::OpenAPI::fromJsonValue(m_click_through, json[QString("clickThrough")]);
    m_click_through_isSet = !json[QString("clickThrough")].isNull() && m_click_through_isValid;

    m_directory_site_id_isValid = ::OpenAPI::fromJsonValue(m_directory_site_id, json[QString("directorySiteId")]);
    m_directory_site_id_isSet = !json[QString("directorySiteId")].isNull() && m_directory_site_id_isValid;

    m_dynamic_tag_isValid = ::OpenAPI::fromJsonValue(m_dynamic_tag, json[QString("dynamicTag")]);
    m_dynamic_tag_isSet = !json[QString("dynamicTag")].isNull() && m_dynamic_tag_isValid;

    m_site_id_isValid = ::OpenAPI::fromJsonValue(m_site_id, json[QString("siteId")]);
    m_site_id_isSet = !json[QString("siteId")].isNull() && m_site_id_isValid;

    m_site_id_dimension_value_isValid = ::OpenAPI::fromJsonValue(m_site_id_dimension_value, json[QString("siteIdDimensionValue")]);
    m_site_id_dimension_value_isSet = !json[QString("siteIdDimensionValue")].isNull() && m_site_id_dimension_value_isValid;

    m_view_through_isValid = ::OpenAPI::fromJsonValue(m_view_through, json[QString("viewThrough")]);
    m_view_through_isSet = !json[QString("viewThrough")].isNull() && m_view_through_isValid;
}

QString OAIFloodlightActivityPublisherDynamicTag::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFloodlightActivityPublisherDynamicTag::asJsonObject() const {
    QJsonObject obj;
    if (m_click_through_isSet) {
        obj.insert(QString("clickThrough"), ::OpenAPI::toJsonValue(m_click_through));
    }
    if (m_directory_site_id_isSet) {
        obj.insert(QString("directorySiteId"), ::OpenAPI::toJsonValue(m_directory_site_id));
    }
    if (m_dynamic_tag.isSet()) {
        obj.insert(QString("dynamicTag"), ::OpenAPI::toJsonValue(m_dynamic_tag));
    }
    if (m_site_id_isSet) {
        obj.insert(QString("siteId"), ::OpenAPI::toJsonValue(m_site_id));
    }
    if (m_site_id_dimension_value.isSet()) {
        obj.insert(QString("siteIdDimensionValue"), ::OpenAPI::toJsonValue(m_site_id_dimension_value));
    }
    if (m_view_through_isSet) {
        obj.insert(QString("viewThrough"), ::OpenAPI::toJsonValue(m_view_through));
    }
    return obj;
}

bool OAIFloodlightActivityPublisherDynamicTag::isClickThrough() const {
    return m_click_through;
}
void OAIFloodlightActivityPublisherDynamicTag::setClickThrough(const bool &click_through) {
    m_click_through = click_through;
    m_click_through_isSet = true;
}

bool OAIFloodlightActivityPublisherDynamicTag::is_click_through_Set() const{
    return m_click_through_isSet;
}

bool OAIFloodlightActivityPublisherDynamicTag::is_click_through_Valid() const{
    return m_click_through_isValid;
}

QString OAIFloodlightActivityPublisherDynamicTag::getDirectorySiteId() const {
    return m_directory_site_id;
}
void OAIFloodlightActivityPublisherDynamicTag::setDirectorySiteId(const QString &directory_site_id) {
    m_directory_site_id = directory_site_id;
    m_directory_site_id_isSet = true;
}

bool OAIFloodlightActivityPublisherDynamicTag::is_directory_site_id_Set() const{
    return m_directory_site_id_isSet;
}

bool OAIFloodlightActivityPublisherDynamicTag::is_directory_site_id_Valid() const{
    return m_directory_site_id_isValid;
}

OAIFloodlightActivityDynamicTag OAIFloodlightActivityPublisherDynamicTag::getDynamicTag() const {
    return m_dynamic_tag;
}
void OAIFloodlightActivityPublisherDynamicTag::setDynamicTag(const OAIFloodlightActivityDynamicTag &dynamic_tag) {
    m_dynamic_tag = dynamic_tag;
    m_dynamic_tag_isSet = true;
}

bool OAIFloodlightActivityPublisherDynamicTag::is_dynamic_tag_Set() const{
    return m_dynamic_tag_isSet;
}

bool OAIFloodlightActivityPublisherDynamicTag::is_dynamic_tag_Valid() const{
    return m_dynamic_tag_isValid;
}

QString OAIFloodlightActivityPublisherDynamicTag::getSiteId() const {
    return m_site_id;
}
void OAIFloodlightActivityPublisherDynamicTag::setSiteId(const QString &site_id) {
    m_site_id = site_id;
    m_site_id_isSet = true;
}

bool OAIFloodlightActivityPublisherDynamicTag::is_site_id_Set() const{
    return m_site_id_isSet;
}

bool OAIFloodlightActivityPublisherDynamicTag::is_site_id_Valid() const{
    return m_site_id_isValid;
}

OAIDimensionValue OAIFloodlightActivityPublisherDynamicTag::getSiteIdDimensionValue() const {
    return m_site_id_dimension_value;
}
void OAIFloodlightActivityPublisherDynamicTag::setSiteIdDimensionValue(const OAIDimensionValue &site_id_dimension_value) {
    m_site_id_dimension_value = site_id_dimension_value;
    m_site_id_dimension_value_isSet = true;
}

bool OAIFloodlightActivityPublisherDynamicTag::is_site_id_dimension_value_Set() const{
    return m_site_id_dimension_value_isSet;
}

bool OAIFloodlightActivityPublisherDynamicTag::is_site_id_dimension_value_Valid() const{
    return m_site_id_dimension_value_isValid;
}

bool OAIFloodlightActivityPublisherDynamicTag::isViewThrough() const {
    return m_view_through;
}
void OAIFloodlightActivityPublisherDynamicTag::setViewThrough(const bool &view_through) {
    m_view_through = view_through;
    m_view_through_isSet = true;
}

bool OAIFloodlightActivityPublisherDynamicTag::is_view_through_Set() const{
    return m_view_through_isSet;
}

bool OAIFloodlightActivityPublisherDynamicTag::is_view_through_Valid() const{
    return m_view_through_isValid;
}

bool OAIFloodlightActivityPublisherDynamicTag::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_click_through_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_directory_site_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dynamic_tag.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_id_dimension_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_through_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFloodlightActivityPublisherDynamicTag::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
