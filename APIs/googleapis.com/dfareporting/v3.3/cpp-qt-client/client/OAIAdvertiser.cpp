/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdvertiser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdvertiser::OAIAdvertiser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdvertiser::OAIAdvertiser() {
    this->initializeModel();
}

OAIAdvertiser::~OAIAdvertiser() {}

void OAIAdvertiser::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_advertiser_group_id_isSet = false;
    m_advertiser_group_id_isValid = false;

    m_click_through_url_suffix_isSet = false;
    m_click_through_url_suffix_isValid = false;

    m_default_click_through_event_tag_id_isSet = false;
    m_default_click_through_event_tag_id_isValid = false;

    m_default_email_isSet = false;
    m_default_email_isValid = false;

    m_floodlight_configuration_id_isSet = false;
    m_floodlight_configuration_id_isValid = false;

    m_floodlight_configuration_id_dimension_value_isSet = false;
    m_floodlight_configuration_id_dimension_value_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_id_dimension_value_isSet = false;
    m_id_dimension_value_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_original_floodlight_configuration_id_isSet = false;
    m_original_floodlight_configuration_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_subaccount_id_isSet = false;
    m_subaccount_id_isValid = false;

    m_suspended_isSet = false;
    m_suspended_isValid = false;
}

void OAIAdvertiser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdvertiser::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_advertiser_group_id_isValid = ::OpenAPI::fromJsonValue(m_advertiser_group_id, json[QString("advertiserGroupId")]);
    m_advertiser_group_id_isSet = !json[QString("advertiserGroupId")].isNull() && m_advertiser_group_id_isValid;

    m_click_through_url_suffix_isValid = ::OpenAPI::fromJsonValue(m_click_through_url_suffix, json[QString("clickThroughUrlSuffix")]);
    m_click_through_url_suffix_isSet = !json[QString("clickThroughUrlSuffix")].isNull() && m_click_through_url_suffix_isValid;

    m_default_click_through_event_tag_id_isValid = ::OpenAPI::fromJsonValue(m_default_click_through_event_tag_id, json[QString("defaultClickThroughEventTagId")]);
    m_default_click_through_event_tag_id_isSet = !json[QString("defaultClickThroughEventTagId")].isNull() && m_default_click_through_event_tag_id_isValid;

    m_default_email_isValid = ::OpenAPI::fromJsonValue(m_default_email, json[QString("defaultEmail")]);
    m_default_email_isSet = !json[QString("defaultEmail")].isNull() && m_default_email_isValid;

    m_floodlight_configuration_id_isValid = ::OpenAPI::fromJsonValue(m_floodlight_configuration_id, json[QString("floodlightConfigurationId")]);
    m_floodlight_configuration_id_isSet = !json[QString("floodlightConfigurationId")].isNull() && m_floodlight_configuration_id_isValid;

    m_floodlight_configuration_id_dimension_value_isValid = ::OpenAPI::fromJsonValue(m_floodlight_configuration_id_dimension_value, json[QString("floodlightConfigurationIdDimensionValue")]);
    m_floodlight_configuration_id_dimension_value_isSet = !json[QString("floodlightConfigurationIdDimensionValue")].isNull() && m_floodlight_configuration_id_dimension_value_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_id_dimension_value_isValid = ::OpenAPI::fromJsonValue(m_id_dimension_value, json[QString("idDimensionValue")]);
    m_id_dimension_value_isSet = !json[QString("idDimensionValue")].isNull() && m_id_dimension_value_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_original_floodlight_configuration_id_isValid = ::OpenAPI::fromJsonValue(m_original_floodlight_configuration_id, json[QString("originalFloodlightConfigurationId")]);
    m_original_floodlight_configuration_id_isSet = !json[QString("originalFloodlightConfigurationId")].isNull() && m_original_floodlight_configuration_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_subaccount_id_isValid = ::OpenAPI::fromJsonValue(m_subaccount_id, json[QString("subaccountId")]);
    m_subaccount_id_isSet = !json[QString("subaccountId")].isNull() && m_subaccount_id_isValid;

    m_suspended_isValid = ::OpenAPI::fromJsonValue(m_suspended, json[QString("suspended")]);
    m_suspended_isSet = !json[QString("suspended")].isNull() && m_suspended_isValid;
}

QString OAIAdvertiser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdvertiser::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_advertiser_group_id_isSet) {
        obj.insert(QString("advertiserGroupId"), ::OpenAPI::toJsonValue(m_advertiser_group_id));
    }
    if (m_click_through_url_suffix_isSet) {
        obj.insert(QString("clickThroughUrlSuffix"), ::OpenAPI::toJsonValue(m_click_through_url_suffix));
    }
    if (m_default_click_through_event_tag_id_isSet) {
        obj.insert(QString("defaultClickThroughEventTagId"), ::OpenAPI::toJsonValue(m_default_click_through_event_tag_id));
    }
    if (m_default_email_isSet) {
        obj.insert(QString("defaultEmail"), ::OpenAPI::toJsonValue(m_default_email));
    }
    if (m_floodlight_configuration_id_isSet) {
        obj.insert(QString("floodlightConfigurationId"), ::OpenAPI::toJsonValue(m_floodlight_configuration_id));
    }
    if (m_floodlight_configuration_id_dimension_value.isSet()) {
        obj.insert(QString("floodlightConfigurationIdDimensionValue"), ::OpenAPI::toJsonValue(m_floodlight_configuration_id_dimension_value));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_id_dimension_value.isSet()) {
        obj.insert(QString("idDimensionValue"), ::OpenAPI::toJsonValue(m_id_dimension_value));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_original_floodlight_configuration_id_isSet) {
        obj.insert(QString("originalFloodlightConfigurationId"), ::OpenAPI::toJsonValue(m_original_floodlight_configuration_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subaccount_id_isSet) {
        obj.insert(QString("subaccountId"), ::OpenAPI::toJsonValue(m_subaccount_id));
    }
    if (m_suspended_isSet) {
        obj.insert(QString("suspended"), ::OpenAPI::toJsonValue(m_suspended));
    }
    return obj;
}

QString OAIAdvertiser::getAccountId() const {
    return m_account_id;
}
void OAIAdvertiser::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIAdvertiser::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIAdvertiser::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIAdvertiser::getAdvertiserGroupId() const {
    return m_advertiser_group_id;
}
void OAIAdvertiser::setAdvertiserGroupId(const QString &advertiser_group_id) {
    m_advertiser_group_id = advertiser_group_id;
    m_advertiser_group_id_isSet = true;
}

bool OAIAdvertiser::is_advertiser_group_id_Set() const{
    return m_advertiser_group_id_isSet;
}

bool OAIAdvertiser::is_advertiser_group_id_Valid() const{
    return m_advertiser_group_id_isValid;
}

QString OAIAdvertiser::getClickThroughUrlSuffix() const {
    return m_click_through_url_suffix;
}
void OAIAdvertiser::setClickThroughUrlSuffix(const QString &click_through_url_suffix) {
    m_click_through_url_suffix = click_through_url_suffix;
    m_click_through_url_suffix_isSet = true;
}

bool OAIAdvertiser::is_click_through_url_suffix_Set() const{
    return m_click_through_url_suffix_isSet;
}

bool OAIAdvertiser::is_click_through_url_suffix_Valid() const{
    return m_click_through_url_suffix_isValid;
}

QString OAIAdvertiser::getDefaultClickThroughEventTagId() const {
    return m_default_click_through_event_tag_id;
}
void OAIAdvertiser::setDefaultClickThroughEventTagId(const QString &default_click_through_event_tag_id) {
    m_default_click_through_event_tag_id = default_click_through_event_tag_id;
    m_default_click_through_event_tag_id_isSet = true;
}

bool OAIAdvertiser::is_default_click_through_event_tag_id_Set() const{
    return m_default_click_through_event_tag_id_isSet;
}

bool OAIAdvertiser::is_default_click_through_event_tag_id_Valid() const{
    return m_default_click_through_event_tag_id_isValid;
}

QString OAIAdvertiser::getDefaultEmail() const {
    return m_default_email;
}
void OAIAdvertiser::setDefaultEmail(const QString &default_email) {
    m_default_email = default_email;
    m_default_email_isSet = true;
}

bool OAIAdvertiser::is_default_email_Set() const{
    return m_default_email_isSet;
}

bool OAIAdvertiser::is_default_email_Valid() const{
    return m_default_email_isValid;
}

QString OAIAdvertiser::getFloodlightConfigurationId() const {
    return m_floodlight_configuration_id;
}
void OAIAdvertiser::setFloodlightConfigurationId(const QString &floodlight_configuration_id) {
    m_floodlight_configuration_id = floodlight_configuration_id;
    m_floodlight_configuration_id_isSet = true;
}

bool OAIAdvertiser::is_floodlight_configuration_id_Set() const{
    return m_floodlight_configuration_id_isSet;
}

bool OAIAdvertiser::is_floodlight_configuration_id_Valid() const{
    return m_floodlight_configuration_id_isValid;
}

OAIDimensionValue OAIAdvertiser::getFloodlightConfigurationIdDimensionValue() const {
    return m_floodlight_configuration_id_dimension_value;
}
void OAIAdvertiser::setFloodlightConfigurationIdDimensionValue(const OAIDimensionValue &floodlight_configuration_id_dimension_value) {
    m_floodlight_configuration_id_dimension_value = floodlight_configuration_id_dimension_value;
    m_floodlight_configuration_id_dimension_value_isSet = true;
}

bool OAIAdvertiser::is_floodlight_configuration_id_dimension_value_Set() const{
    return m_floodlight_configuration_id_dimension_value_isSet;
}

bool OAIAdvertiser::is_floodlight_configuration_id_dimension_value_Valid() const{
    return m_floodlight_configuration_id_dimension_value_isValid;
}

QString OAIAdvertiser::getId() const {
    return m_id;
}
void OAIAdvertiser::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAdvertiser::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAdvertiser::is_id_Valid() const{
    return m_id_isValid;
}

OAIDimensionValue OAIAdvertiser::getIdDimensionValue() const {
    return m_id_dimension_value;
}
void OAIAdvertiser::setIdDimensionValue(const OAIDimensionValue &id_dimension_value) {
    m_id_dimension_value = id_dimension_value;
    m_id_dimension_value_isSet = true;
}

bool OAIAdvertiser::is_id_dimension_value_Set() const{
    return m_id_dimension_value_isSet;
}

bool OAIAdvertiser::is_id_dimension_value_Valid() const{
    return m_id_dimension_value_isValid;
}

QString OAIAdvertiser::getKind() const {
    return m_kind;
}
void OAIAdvertiser::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIAdvertiser::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIAdvertiser::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIAdvertiser::getName() const {
    return m_name;
}
void OAIAdvertiser::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAdvertiser::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAdvertiser::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAdvertiser::getOriginalFloodlightConfigurationId() const {
    return m_original_floodlight_configuration_id;
}
void OAIAdvertiser::setOriginalFloodlightConfigurationId(const QString &original_floodlight_configuration_id) {
    m_original_floodlight_configuration_id = original_floodlight_configuration_id;
    m_original_floodlight_configuration_id_isSet = true;
}

bool OAIAdvertiser::is_original_floodlight_configuration_id_Set() const{
    return m_original_floodlight_configuration_id_isSet;
}

bool OAIAdvertiser::is_original_floodlight_configuration_id_Valid() const{
    return m_original_floodlight_configuration_id_isValid;
}

QString OAIAdvertiser::getStatus() const {
    return m_status;
}
void OAIAdvertiser::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAdvertiser::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAdvertiser::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIAdvertiser::getSubaccountId() const {
    return m_subaccount_id;
}
void OAIAdvertiser::setSubaccountId(const QString &subaccount_id) {
    m_subaccount_id = subaccount_id;
    m_subaccount_id_isSet = true;
}

bool OAIAdvertiser::is_subaccount_id_Set() const{
    return m_subaccount_id_isSet;
}

bool OAIAdvertiser::is_subaccount_id_Valid() const{
    return m_subaccount_id_isValid;
}

bool OAIAdvertiser::isSuspended() const {
    return m_suspended;
}
void OAIAdvertiser::setSuspended(const bool &suspended) {
    m_suspended = suspended;
    m_suspended_isSet = true;
}

bool OAIAdvertiser::is_suspended_Set() const{
    return m_suspended_isSet;
}

bool OAIAdvertiser::is_suspended_Valid() const{
    return m_suspended_isValid;
}

bool OAIAdvertiser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_advertiser_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_click_through_url_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_click_through_event_tag_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_floodlight_configuration_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_floodlight_configuration_id_dimension_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_dimension_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_floodlight_configuration_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subaccount_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suspended_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdvertiser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
