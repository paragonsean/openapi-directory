/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISite.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISite::OAISite(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISite::OAISite() {
    this->initializeModel();
}

OAISite::~OAISite() {}

void OAISite::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_approved_isSet = false;
    m_approved_isValid = false;

    m_directory_site_id_isSet = false;
    m_directory_site_id_isValid = false;

    m_directory_site_id_dimension_value_isSet = false;
    m_directory_site_id_dimension_value_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_id_dimension_value_isSet = false;
    m_id_dimension_value_isValid = false;

    m_key_name_isSet = false;
    m_key_name_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_site_contacts_isSet = false;
    m_site_contacts_isValid = false;

    m_site_settings_isSet = false;
    m_site_settings_isValid = false;

    m_subaccount_id_isSet = false;
    m_subaccount_id_isValid = false;

    m_video_settings_isSet = false;
    m_video_settings_isValid = false;
}

void OAISite::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISite::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_approved_isValid = ::OpenAPI::fromJsonValue(m_approved, json[QString("approved")]);
    m_approved_isSet = !json[QString("approved")].isNull() && m_approved_isValid;

    m_directory_site_id_isValid = ::OpenAPI::fromJsonValue(m_directory_site_id, json[QString("directorySiteId")]);
    m_directory_site_id_isSet = !json[QString("directorySiteId")].isNull() && m_directory_site_id_isValid;

    m_directory_site_id_dimension_value_isValid = ::OpenAPI::fromJsonValue(m_directory_site_id_dimension_value, json[QString("directorySiteIdDimensionValue")]);
    m_directory_site_id_dimension_value_isSet = !json[QString("directorySiteIdDimensionValue")].isNull() && m_directory_site_id_dimension_value_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_id_dimension_value_isValid = ::OpenAPI::fromJsonValue(m_id_dimension_value, json[QString("idDimensionValue")]);
    m_id_dimension_value_isSet = !json[QString("idDimensionValue")].isNull() && m_id_dimension_value_isValid;

    m_key_name_isValid = ::OpenAPI::fromJsonValue(m_key_name, json[QString("keyName")]);
    m_key_name_isSet = !json[QString("keyName")].isNull() && m_key_name_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_site_contacts_isValid = ::OpenAPI::fromJsonValue(m_site_contacts, json[QString("siteContacts")]);
    m_site_contacts_isSet = !json[QString("siteContacts")].isNull() && m_site_contacts_isValid;

    m_site_settings_isValid = ::OpenAPI::fromJsonValue(m_site_settings, json[QString("siteSettings")]);
    m_site_settings_isSet = !json[QString("siteSettings")].isNull() && m_site_settings_isValid;

    m_subaccount_id_isValid = ::OpenAPI::fromJsonValue(m_subaccount_id, json[QString("subaccountId")]);
    m_subaccount_id_isSet = !json[QString("subaccountId")].isNull() && m_subaccount_id_isValid;

    m_video_settings_isValid = ::OpenAPI::fromJsonValue(m_video_settings, json[QString("videoSettings")]);
    m_video_settings_isSet = !json[QString("videoSettings")].isNull() && m_video_settings_isValid;
}

QString OAISite::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISite::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_approved_isSet) {
        obj.insert(QString("approved"), ::OpenAPI::toJsonValue(m_approved));
    }
    if (m_directory_site_id_isSet) {
        obj.insert(QString("directorySiteId"), ::OpenAPI::toJsonValue(m_directory_site_id));
    }
    if (m_directory_site_id_dimension_value.isSet()) {
        obj.insert(QString("directorySiteIdDimensionValue"), ::OpenAPI::toJsonValue(m_directory_site_id_dimension_value));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_id_dimension_value.isSet()) {
        obj.insert(QString("idDimensionValue"), ::OpenAPI::toJsonValue(m_id_dimension_value));
    }
    if (m_key_name_isSet) {
        obj.insert(QString("keyName"), ::OpenAPI::toJsonValue(m_key_name));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_site_contacts.size() > 0) {
        obj.insert(QString("siteContacts"), ::OpenAPI::toJsonValue(m_site_contacts));
    }
    if (m_site_settings.isSet()) {
        obj.insert(QString("siteSettings"), ::OpenAPI::toJsonValue(m_site_settings));
    }
    if (m_subaccount_id_isSet) {
        obj.insert(QString("subaccountId"), ::OpenAPI::toJsonValue(m_subaccount_id));
    }
    if (m_video_settings.isSet()) {
        obj.insert(QString("videoSettings"), ::OpenAPI::toJsonValue(m_video_settings));
    }
    return obj;
}

QString OAISite::getAccountId() const {
    return m_account_id;
}
void OAISite::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAISite::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAISite::is_account_id_Valid() const{
    return m_account_id_isValid;
}

bool OAISite::isApproved() const {
    return m_approved;
}
void OAISite::setApproved(const bool &approved) {
    m_approved = approved;
    m_approved_isSet = true;
}

bool OAISite::is_approved_Set() const{
    return m_approved_isSet;
}

bool OAISite::is_approved_Valid() const{
    return m_approved_isValid;
}

QString OAISite::getDirectorySiteId() const {
    return m_directory_site_id;
}
void OAISite::setDirectorySiteId(const QString &directory_site_id) {
    m_directory_site_id = directory_site_id;
    m_directory_site_id_isSet = true;
}

bool OAISite::is_directory_site_id_Set() const{
    return m_directory_site_id_isSet;
}

bool OAISite::is_directory_site_id_Valid() const{
    return m_directory_site_id_isValid;
}

OAIDimensionValue OAISite::getDirectorySiteIdDimensionValue() const {
    return m_directory_site_id_dimension_value;
}
void OAISite::setDirectorySiteIdDimensionValue(const OAIDimensionValue &directory_site_id_dimension_value) {
    m_directory_site_id_dimension_value = directory_site_id_dimension_value;
    m_directory_site_id_dimension_value_isSet = true;
}

bool OAISite::is_directory_site_id_dimension_value_Set() const{
    return m_directory_site_id_dimension_value_isSet;
}

bool OAISite::is_directory_site_id_dimension_value_Valid() const{
    return m_directory_site_id_dimension_value_isValid;
}

QString OAISite::getId() const {
    return m_id;
}
void OAISite::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISite::is_id_Set() const{
    return m_id_isSet;
}

bool OAISite::is_id_Valid() const{
    return m_id_isValid;
}

OAIDimensionValue OAISite::getIdDimensionValue() const {
    return m_id_dimension_value;
}
void OAISite::setIdDimensionValue(const OAIDimensionValue &id_dimension_value) {
    m_id_dimension_value = id_dimension_value;
    m_id_dimension_value_isSet = true;
}

bool OAISite::is_id_dimension_value_Set() const{
    return m_id_dimension_value_isSet;
}

bool OAISite::is_id_dimension_value_Valid() const{
    return m_id_dimension_value_isValid;
}

QString OAISite::getKeyName() const {
    return m_key_name;
}
void OAISite::setKeyName(const QString &key_name) {
    m_key_name = key_name;
    m_key_name_isSet = true;
}

bool OAISite::is_key_name_Set() const{
    return m_key_name_isSet;
}

bool OAISite::is_key_name_Valid() const{
    return m_key_name_isValid;
}

QString OAISite::getKind() const {
    return m_kind;
}
void OAISite::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAISite::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAISite::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAISite::getName() const {
    return m_name;
}
void OAISite::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISite::is_name_Set() const{
    return m_name_isSet;
}

bool OAISite::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAISiteContact> OAISite::getSiteContacts() const {
    return m_site_contacts;
}
void OAISite::setSiteContacts(const QList<OAISiteContact> &site_contacts) {
    m_site_contacts = site_contacts;
    m_site_contacts_isSet = true;
}

bool OAISite::is_site_contacts_Set() const{
    return m_site_contacts_isSet;
}

bool OAISite::is_site_contacts_Valid() const{
    return m_site_contacts_isValid;
}

OAISiteSettings OAISite::getSiteSettings() const {
    return m_site_settings;
}
void OAISite::setSiteSettings(const OAISiteSettings &site_settings) {
    m_site_settings = site_settings;
    m_site_settings_isSet = true;
}

bool OAISite::is_site_settings_Set() const{
    return m_site_settings_isSet;
}

bool OAISite::is_site_settings_Valid() const{
    return m_site_settings_isValid;
}

QString OAISite::getSubaccountId() const {
    return m_subaccount_id;
}
void OAISite::setSubaccountId(const QString &subaccount_id) {
    m_subaccount_id = subaccount_id;
    m_subaccount_id_isSet = true;
}

bool OAISite::is_subaccount_id_Set() const{
    return m_subaccount_id_isSet;
}

bool OAISite::is_subaccount_id_Valid() const{
    return m_subaccount_id_isValid;
}

OAISiteVideoSettings OAISite::getVideoSettings() const {
    return m_video_settings;
}
void OAISite::setVideoSettings(const OAISiteVideoSettings &video_settings) {
    m_video_settings = video_settings;
    m_video_settings_isSet = true;
}

bool OAISite::is_video_settings_Set() const{
    return m_video_settings_isSet;
}

bool OAISite::is_video_settings_Valid() const{
    return m_video_settings_isValid;
}

bool OAISite::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_approved_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_directory_site_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_directory_site_id_dimension_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_dimension_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_contacts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subaccount_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISite::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
