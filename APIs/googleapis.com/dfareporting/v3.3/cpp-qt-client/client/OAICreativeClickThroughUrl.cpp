/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreativeClickThroughUrl.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreativeClickThroughUrl::OAICreativeClickThroughUrl(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreativeClickThroughUrl::OAICreativeClickThroughUrl() {
    this->initializeModel();
}

OAICreativeClickThroughUrl::~OAICreativeClickThroughUrl() {}

void OAICreativeClickThroughUrl::initializeModel() {

    m_computed_click_through_url_isSet = false;
    m_computed_click_through_url_isValid = false;

    m_custom_click_through_url_isSet = false;
    m_custom_click_through_url_isValid = false;

    m_landing_page_id_isSet = false;
    m_landing_page_id_isValid = false;
}

void OAICreativeClickThroughUrl::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreativeClickThroughUrl::fromJsonObject(QJsonObject json) {

    m_computed_click_through_url_isValid = ::OpenAPI::fromJsonValue(m_computed_click_through_url, json[QString("computedClickThroughUrl")]);
    m_computed_click_through_url_isSet = !json[QString("computedClickThroughUrl")].isNull() && m_computed_click_through_url_isValid;

    m_custom_click_through_url_isValid = ::OpenAPI::fromJsonValue(m_custom_click_through_url, json[QString("customClickThroughUrl")]);
    m_custom_click_through_url_isSet = !json[QString("customClickThroughUrl")].isNull() && m_custom_click_through_url_isValid;

    m_landing_page_id_isValid = ::OpenAPI::fromJsonValue(m_landing_page_id, json[QString("landingPageId")]);
    m_landing_page_id_isSet = !json[QString("landingPageId")].isNull() && m_landing_page_id_isValid;
}

QString OAICreativeClickThroughUrl::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreativeClickThroughUrl::asJsonObject() const {
    QJsonObject obj;
    if (m_computed_click_through_url_isSet) {
        obj.insert(QString("computedClickThroughUrl"), ::OpenAPI::toJsonValue(m_computed_click_through_url));
    }
    if (m_custom_click_through_url_isSet) {
        obj.insert(QString("customClickThroughUrl"), ::OpenAPI::toJsonValue(m_custom_click_through_url));
    }
    if (m_landing_page_id_isSet) {
        obj.insert(QString("landingPageId"), ::OpenAPI::toJsonValue(m_landing_page_id));
    }
    return obj;
}

QString OAICreativeClickThroughUrl::getComputedClickThroughUrl() const {
    return m_computed_click_through_url;
}
void OAICreativeClickThroughUrl::setComputedClickThroughUrl(const QString &computed_click_through_url) {
    m_computed_click_through_url = computed_click_through_url;
    m_computed_click_through_url_isSet = true;
}

bool OAICreativeClickThroughUrl::is_computed_click_through_url_Set() const{
    return m_computed_click_through_url_isSet;
}

bool OAICreativeClickThroughUrl::is_computed_click_through_url_Valid() const{
    return m_computed_click_through_url_isValid;
}

QString OAICreativeClickThroughUrl::getCustomClickThroughUrl() const {
    return m_custom_click_through_url;
}
void OAICreativeClickThroughUrl::setCustomClickThroughUrl(const QString &custom_click_through_url) {
    m_custom_click_through_url = custom_click_through_url;
    m_custom_click_through_url_isSet = true;
}

bool OAICreativeClickThroughUrl::is_custom_click_through_url_Set() const{
    return m_custom_click_through_url_isSet;
}

bool OAICreativeClickThroughUrl::is_custom_click_through_url_Valid() const{
    return m_custom_click_through_url_isValid;
}

QString OAICreativeClickThroughUrl::getLandingPageId() const {
    return m_landing_page_id;
}
void OAICreativeClickThroughUrl::setLandingPageId(const QString &landing_page_id) {
    m_landing_page_id = landing_page_id;
    m_landing_page_id_isSet = true;
}

bool OAICreativeClickThroughUrl::is_landing_page_id_Set() const{
    return m_landing_page_id_isSet;
}

bool OAICreativeClickThroughUrl::is_landing_page_id_Valid() const{
    return m_landing_page_id_isValid;
}

bool OAICreativeClickThroughUrl::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_computed_click_through_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_click_through_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_landing_page_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreativeClickThroughUrl::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
