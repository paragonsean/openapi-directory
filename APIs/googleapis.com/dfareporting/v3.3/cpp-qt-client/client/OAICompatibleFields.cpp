/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompatibleFields.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompatibleFields::OAICompatibleFields(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompatibleFields::OAICompatibleFields() {
    this->initializeModel();
}

OAICompatibleFields::~OAICompatibleFields() {}

void OAICompatibleFields::initializeModel() {

    m_cross_dimension_reach_report_compatible_fields_isSet = false;
    m_cross_dimension_reach_report_compatible_fields_isValid = false;

    m_floodlight_report_compatible_fields_isSet = false;
    m_floodlight_report_compatible_fields_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_path_to_conversion_report_compatible_fields_isSet = false;
    m_path_to_conversion_report_compatible_fields_isValid = false;

    m_reach_report_compatible_fields_isSet = false;
    m_reach_report_compatible_fields_isValid = false;

    m_report_compatible_fields_isSet = false;
    m_report_compatible_fields_isValid = false;
}

void OAICompatibleFields::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompatibleFields::fromJsonObject(QJsonObject json) {

    m_cross_dimension_reach_report_compatible_fields_isValid = ::OpenAPI::fromJsonValue(m_cross_dimension_reach_report_compatible_fields, json[QString("crossDimensionReachReportCompatibleFields")]);
    m_cross_dimension_reach_report_compatible_fields_isSet = !json[QString("crossDimensionReachReportCompatibleFields")].isNull() && m_cross_dimension_reach_report_compatible_fields_isValid;

    m_floodlight_report_compatible_fields_isValid = ::OpenAPI::fromJsonValue(m_floodlight_report_compatible_fields, json[QString("floodlightReportCompatibleFields")]);
    m_floodlight_report_compatible_fields_isSet = !json[QString("floodlightReportCompatibleFields")].isNull() && m_floodlight_report_compatible_fields_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_path_to_conversion_report_compatible_fields_isValid = ::OpenAPI::fromJsonValue(m_path_to_conversion_report_compatible_fields, json[QString("pathToConversionReportCompatibleFields")]);
    m_path_to_conversion_report_compatible_fields_isSet = !json[QString("pathToConversionReportCompatibleFields")].isNull() && m_path_to_conversion_report_compatible_fields_isValid;

    m_reach_report_compatible_fields_isValid = ::OpenAPI::fromJsonValue(m_reach_report_compatible_fields, json[QString("reachReportCompatibleFields")]);
    m_reach_report_compatible_fields_isSet = !json[QString("reachReportCompatibleFields")].isNull() && m_reach_report_compatible_fields_isValid;

    m_report_compatible_fields_isValid = ::OpenAPI::fromJsonValue(m_report_compatible_fields, json[QString("reportCompatibleFields")]);
    m_report_compatible_fields_isSet = !json[QString("reportCompatibleFields")].isNull() && m_report_compatible_fields_isValid;
}

QString OAICompatibleFields::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompatibleFields::asJsonObject() const {
    QJsonObject obj;
    if (m_cross_dimension_reach_report_compatible_fields.isSet()) {
        obj.insert(QString("crossDimensionReachReportCompatibleFields"), ::OpenAPI::toJsonValue(m_cross_dimension_reach_report_compatible_fields));
    }
    if (m_floodlight_report_compatible_fields.isSet()) {
        obj.insert(QString("floodlightReportCompatibleFields"), ::OpenAPI::toJsonValue(m_floodlight_report_compatible_fields));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_path_to_conversion_report_compatible_fields.isSet()) {
        obj.insert(QString("pathToConversionReportCompatibleFields"), ::OpenAPI::toJsonValue(m_path_to_conversion_report_compatible_fields));
    }
    if (m_reach_report_compatible_fields.isSet()) {
        obj.insert(QString("reachReportCompatibleFields"), ::OpenAPI::toJsonValue(m_reach_report_compatible_fields));
    }
    if (m_report_compatible_fields.isSet()) {
        obj.insert(QString("reportCompatibleFields"), ::OpenAPI::toJsonValue(m_report_compatible_fields));
    }
    return obj;
}

OAICrossDimensionReachReportCompatibleFields OAICompatibleFields::getCrossDimensionReachReportCompatibleFields() const {
    return m_cross_dimension_reach_report_compatible_fields;
}
void OAICompatibleFields::setCrossDimensionReachReportCompatibleFields(const OAICrossDimensionReachReportCompatibleFields &cross_dimension_reach_report_compatible_fields) {
    m_cross_dimension_reach_report_compatible_fields = cross_dimension_reach_report_compatible_fields;
    m_cross_dimension_reach_report_compatible_fields_isSet = true;
}

bool OAICompatibleFields::is_cross_dimension_reach_report_compatible_fields_Set() const{
    return m_cross_dimension_reach_report_compatible_fields_isSet;
}

bool OAICompatibleFields::is_cross_dimension_reach_report_compatible_fields_Valid() const{
    return m_cross_dimension_reach_report_compatible_fields_isValid;
}

OAIFloodlightReportCompatibleFields OAICompatibleFields::getFloodlightReportCompatibleFields() const {
    return m_floodlight_report_compatible_fields;
}
void OAICompatibleFields::setFloodlightReportCompatibleFields(const OAIFloodlightReportCompatibleFields &floodlight_report_compatible_fields) {
    m_floodlight_report_compatible_fields = floodlight_report_compatible_fields;
    m_floodlight_report_compatible_fields_isSet = true;
}

bool OAICompatibleFields::is_floodlight_report_compatible_fields_Set() const{
    return m_floodlight_report_compatible_fields_isSet;
}

bool OAICompatibleFields::is_floodlight_report_compatible_fields_Valid() const{
    return m_floodlight_report_compatible_fields_isValid;
}

QString OAICompatibleFields::getKind() const {
    return m_kind;
}
void OAICompatibleFields::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAICompatibleFields::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAICompatibleFields::is_kind_Valid() const{
    return m_kind_isValid;
}

OAIPathToConversionReportCompatibleFields OAICompatibleFields::getPathToConversionReportCompatibleFields() const {
    return m_path_to_conversion_report_compatible_fields;
}
void OAICompatibleFields::setPathToConversionReportCompatibleFields(const OAIPathToConversionReportCompatibleFields &path_to_conversion_report_compatible_fields) {
    m_path_to_conversion_report_compatible_fields = path_to_conversion_report_compatible_fields;
    m_path_to_conversion_report_compatible_fields_isSet = true;
}

bool OAICompatibleFields::is_path_to_conversion_report_compatible_fields_Set() const{
    return m_path_to_conversion_report_compatible_fields_isSet;
}

bool OAICompatibleFields::is_path_to_conversion_report_compatible_fields_Valid() const{
    return m_path_to_conversion_report_compatible_fields_isValid;
}

OAIReachReportCompatibleFields OAICompatibleFields::getReachReportCompatibleFields() const {
    return m_reach_report_compatible_fields;
}
void OAICompatibleFields::setReachReportCompatibleFields(const OAIReachReportCompatibleFields &reach_report_compatible_fields) {
    m_reach_report_compatible_fields = reach_report_compatible_fields;
    m_reach_report_compatible_fields_isSet = true;
}

bool OAICompatibleFields::is_reach_report_compatible_fields_Set() const{
    return m_reach_report_compatible_fields_isSet;
}

bool OAICompatibleFields::is_reach_report_compatible_fields_Valid() const{
    return m_reach_report_compatible_fields_isValid;
}

OAIReportCompatibleFields OAICompatibleFields::getReportCompatibleFields() const {
    return m_report_compatible_fields;
}
void OAICompatibleFields::setReportCompatibleFields(const OAIReportCompatibleFields &report_compatible_fields) {
    m_report_compatible_fields = report_compatible_fields;
    m_report_compatible_fields_isSet = true;
}

bool OAICompatibleFields::is_report_compatible_fields_Set() const{
    return m_report_compatible_fields_isSet;
}

bool OAICompatibleFields::is_report_compatible_fields_Valid() const{
    return m_report_compatible_fields_isValid;
}

bool OAICompatibleFields::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cross_dimension_reach_report_compatible_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_floodlight_report_compatible_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_to_conversion_report_compatible_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reach_report_compatible_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_compatible_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompatibleFields::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
