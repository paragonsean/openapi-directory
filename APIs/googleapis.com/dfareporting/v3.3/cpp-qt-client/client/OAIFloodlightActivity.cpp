/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFloodlightActivity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFloodlightActivity::OAIFloodlightActivity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFloodlightActivity::OAIFloodlightActivity() {
    this->initializeModel();
}

OAIFloodlightActivity::~OAIFloodlightActivity() {}

void OAIFloodlightActivity::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_advertiser_id_isSet = false;
    m_advertiser_id_isValid = false;

    m_advertiser_id_dimension_value_isSet = false;
    m_advertiser_id_dimension_value_isValid = false;

    m_cache_busting_type_isSet = false;
    m_cache_busting_type_isValid = false;

    m_counting_method_isSet = false;
    m_counting_method_isValid = false;

    m_default_tags_isSet = false;
    m_default_tags_isValid = false;

    m_expected_url_isSet = false;
    m_expected_url_isValid = false;

    m_floodlight_activity_group_id_isSet = false;
    m_floodlight_activity_group_id_isValid = false;

    m_floodlight_activity_group_name_isSet = false;
    m_floodlight_activity_group_name_isValid = false;

    m_floodlight_activity_group_tag_string_isSet = false;
    m_floodlight_activity_group_tag_string_isValid = false;

    m_floodlight_activity_group_type_isSet = false;
    m_floodlight_activity_group_type_isValid = false;

    m_floodlight_configuration_id_isSet = false;
    m_floodlight_configuration_id_isValid = false;

    m_floodlight_configuration_id_dimension_value_isSet = false;
    m_floodlight_configuration_id_dimension_value_isValid = false;

    m_floodlight_tag_type_isSet = false;
    m_floodlight_tag_type_isValid = false;

    m_hidden_isSet = false;
    m_hidden_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_id_dimension_value_isSet = false;
    m_id_dimension_value_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_publisher_tags_isSet = false;
    m_publisher_tags_isValid = false;

    m_secure_isSet = false;
    m_secure_isValid = false;

    m_ssl_compliant_isSet = false;
    m_ssl_compliant_isValid = false;

    m_ssl_required_isSet = false;
    m_ssl_required_isValid = false;

    m_subaccount_id_isSet = false;
    m_subaccount_id_isValid = false;

    m_tag_format_isSet = false;
    m_tag_format_isValid = false;

    m_tag_string_isSet = false;
    m_tag_string_isValid = false;

    m_user_defined_variable_types_isSet = false;
    m_user_defined_variable_types_isValid = false;
}

void OAIFloodlightActivity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFloodlightActivity::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_advertiser_id_isValid = ::OpenAPI::fromJsonValue(m_advertiser_id, json[QString("advertiserId")]);
    m_advertiser_id_isSet = !json[QString("advertiserId")].isNull() && m_advertiser_id_isValid;

    m_advertiser_id_dimension_value_isValid = ::OpenAPI::fromJsonValue(m_advertiser_id_dimension_value, json[QString("advertiserIdDimensionValue")]);
    m_advertiser_id_dimension_value_isSet = !json[QString("advertiserIdDimensionValue")].isNull() && m_advertiser_id_dimension_value_isValid;

    m_cache_busting_type_isValid = ::OpenAPI::fromJsonValue(m_cache_busting_type, json[QString("cacheBustingType")]);
    m_cache_busting_type_isSet = !json[QString("cacheBustingType")].isNull() && m_cache_busting_type_isValid;

    m_counting_method_isValid = ::OpenAPI::fromJsonValue(m_counting_method, json[QString("countingMethod")]);
    m_counting_method_isSet = !json[QString("countingMethod")].isNull() && m_counting_method_isValid;

    m_default_tags_isValid = ::OpenAPI::fromJsonValue(m_default_tags, json[QString("defaultTags")]);
    m_default_tags_isSet = !json[QString("defaultTags")].isNull() && m_default_tags_isValid;

    m_expected_url_isValid = ::OpenAPI::fromJsonValue(m_expected_url, json[QString("expectedUrl")]);
    m_expected_url_isSet = !json[QString("expectedUrl")].isNull() && m_expected_url_isValid;

    m_floodlight_activity_group_id_isValid = ::OpenAPI::fromJsonValue(m_floodlight_activity_group_id, json[QString("floodlightActivityGroupId")]);
    m_floodlight_activity_group_id_isSet = !json[QString("floodlightActivityGroupId")].isNull() && m_floodlight_activity_group_id_isValid;

    m_floodlight_activity_group_name_isValid = ::OpenAPI::fromJsonValue(m_floodlight_activity_group_name, json[QString("floodlightActivityGroupName")]);
    m_floodlight_activity_group_name_isSet = !json[QString("floodlightActivityGroupName")].isNull() && m_floodlight_activity_group_name_isValid;

    m_floodlight_activity_group_tag_string_isValid = ::OpenAPI::fromJsonValue(m_floodlight_activity_group_tag_string, json[QString("floodlightActivityGroupTagString")]);
    m_floodlight_activity_group_tag_string_isSet = !json[QString("floodlightActivityGroupTagString")].isNull() && m_floodlight_activity_group_tag_string_isValid;

    m_floodlight_activity_group_type_isValid = ::OpenAPI::fromJsonValue(m_floodlight_activity_group_type, json[QString("floodlightActivityGroupType")]);
    m_floodlight_activity_group_type_isSet = !json[QString("floodlightActivityGroupType")].isNull() && m_floodlight_activity_group_type_isValid;

    m_floodlight_configuration_id_isValid = ::OpenAPI::fromJsonValue(m_floodlight_configuration_id, json[QString("floodlightConfigurationId")]);
    m_floodlight_configuration_id_isSet = !json[QString("floodlightConfigurationId")].isNull() && m_floodlight_configuration_id_isValid;

    m_floodlight_configuration_id_dimension_value_isValid = ::OpenAPI::fromJsonValue(m_floodlight_configuration_id_dimension_value, json[QString("floodlightConfigurationIdDimensionValue")]);
    m_floodlight_configuration_id_dimension_value_isSet = !json[QString("floodlightConfigurationIdDimensionValue")].isNull() && m_floodlight_configuration_id_dimension_value_isValid;

    m_floodlight_tag_type_isValid = ::OpenAPI::fromJsonValue(m_floodlight_tag_type, json[QString("floodlightTagType")]);
    m_floodlight_tag_type_isSet = !json[QString("floodlightTagType")].isNull() && m_floodlight_tag_type_isValid;

    m_hidden_isValid = ::OpenAPI::fromJsonValue(m_hidden, json[QString("hidden")]);
    m_hidden_isSet = !json[QString("hidden")].isNull() && m_hidden_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_id_dimension_value_isValid = ::OpenAPI::fromJsonValue(m_id_dimension_value, json[QString("idDimensionValue")]);
    m_id_dimension_value_isSet = !json[QString("idDimensionValue")].isNull() && m_id_dimension_value_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_publisher_tags_isValid = ::OpenAPI::fromJsonValue(m_publisher_tags, json[QString("publisherTags")]);
    m_publisher_tags_isSet = !json[QString("publisherTags")].isNull() && m_publisher_tags_isValid;

    m_secure_isValid = ::OpenAPI::fromJsonValue(m_secure, json[QString("secure")]);
    m_secure_isSet = !json[QString("secure")].isNull() && m_secure_isValid;

    m_ssl_compliant_isValid = ::OpenAPI::fromJsonValue(m_ssl_compliant, json[QString("sslCompliant")]);
    m_ssl_compliant_isSet = !json[QString("sslCompliant")].isNull() && m_ssl_compliant_isValid;

    m_ssl_required_isValid = ::OpenAPI::fromJsonValue(m_ssl_required, json[QString("sslRequired")]);
    m_ssl_required_isSet = !json[QString("sslRequired")].isNull() && m_ssl_required_isValid;

    m_subaccount_id_isValid = ::OpenAPI::fromJsonValue(m_subaccount_id, json[QString("subaccountId")]);
    m_subaccount_id_isSet = !json[QString("subaccountId")].isNull() && m_subaccount_id_isValid;

    m_tag_format_isValid = ::OpenAPI::fromJsonValue(m_tag_format, json[QString("tagFormat")]);
    m_tag_format_isSet = !json[QString("tagFormat")].isNull() && m_tag_format_isValid;

    m_tag_string_isValid = ::OpenAPI::fromJsonValue(m_tag_string, json[QString("tagString")]);
    m_tag_string_isSet = !json[QString("tagString")].isNull() && m_tag_string_isValid;

    m_user_defined_variable_types_isValid = ::OpenAPI::fromJsonValue(m_user_defined_variable_types, json[QString("userDefinedVariableTypes")]);
    m_user_defined_variable_types_isSet = !json[QString("userDefinedVariableTypes")].isNull() && m_user_defined_variable_types_isValid;
}

QString OAIFloodlightActivity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFloodlightActivity::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_advertiser_id_isSet) {
        obj.insert(QString("advertiserId"), ::OpenAPI::toJsonValue(m_advertiser_id));
    }
    if (m_advertiser_id_dimension_value.isSet()) {
        obj.insert(QString("advertiserIdDimensionValue"), ::OpenAPI::toJsonValue(m_advertiser_id_dimension_value));
    }
    if (m_cache_busting_type_isSet) {
        obj.insert(QString("cacheBustingType"), ::OpenAPI::toJsonValue(m_cache_busting_type));
    }
    if (m_counting_method_isSet) {
        obj.insert(QString("countingMethod"), ::OpenAPI::toJsonValue(m_counting_method));
    }
    if (m_default_tags.size() > 0) {
        obj.insert(QString("defaultTags"), ::OpenAPI::toJsonValue(m_default_tags));
    }
    if (m_expected_url_isSet) {
        obj.insert(QString("expectedUrl"), ::OpenAPI::toJsonValue(m_expected_url));
    }
    if (m_floodlight_activity_group_id_isSet) {
        obj.insert(QString("floodlightActivityGroupId"), ::OpenAPI::toJsonValue(m_floodlight_activity_group_id));
    }
    if (m_floodlight_activity_group_name_isSet) {
        obj.insert(QString("floodlightActivityGroupName"), ::OpenAPI::toJsonValue(m_floodlight_activity_group_name));
    }
    if (m_floodlight_activity_group_tag_string_isSet) {
        obj.insert(QString("floodlightActivityGroupTagString"), ::OpenAPI::toJsonValue(m_floodlight_activity_group_tag_string));
    }
    if (m_floodlight_activity_group_type_isSet) {
        obj.insert(QString("floodlightActivityGroupType"), ::OpenAPI::toJsonValue(m_floodlight_activity_group_type));
    }
    if (m_floodlight_configuration_id_isSet) {
        obj.insert(QString("floodlightConfigurationId"), ::OpenAPI::toJsonValue(m_floodlight_configuration_id));
    }
    if (m_floodlight_configuration_id_dimension_value.isSet()) {
        obj.insert(QString("floodlightConfigurationIdDimensionValue"), ::OpenAPI::toJsonValue(m_floodlight_configuration_id_dimension_value));
    }
    if (m_floodlight_tag_type_isSet) {
        obj.insert(QString("floodlightTagType"), ::OpenAPI::toJsonValue(m_floodlight_tag_type));
    }
    if (m_hidden_isSet) {
        obj.insert(QString("hidden"), ::OpenAPI::toJsonValue(m_hidden));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_id_dimension_value.isSet()) {
        obj.insert(QString("idDimensionValue"), ::OpenAPI::toJsonValue(m_id_dimension_value));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_publisher_tags.size() > 0) {
        obj.insert(QString("publisherTags"), ::OpenAPI::toJsonValue(m_publisher_tags));
    }
    if (m_secure_isSet) {
        obj.insert(QString("secure"), ::OpenAPI::toJsonValue(m_secure));
    }
    if (m_ssl_compliant_isSet) {
        obj.insert(QString("sslCompliant"), ::OpenAPI::toJsonValue(m_ssl_compliant));
    }
    if (m_ssl_required_isSet) {
        obj.insert(QString("sslRequired"), ::OpenAPI::toJsonValue(m_ssl_required));
    }
    if (m_subaccount_id_isSet) {
        obj.insert(QString("subaccountId"), ::OpenAPI::toJsonValue(m_subaccount_id));
    }
    if (m_tag_format_isSet) {
        obj.insert(QString("tagFormat"), ::OpenAPI::toJsonValue(m_tag_format));
    }
    if (m_tag_string_isSet) {
        obj.insert(QString("tagString"), ::OpenAPI::toJsonValue(m_tag_string));
    }
    if (m_user_defined_variable_types.size() > 0) {
        obj.insert(QString("userDefinedVariableTypes"), ::OpenAPI::toJsonValue(m_user_defined_variable_types));
    }
    return obj;
}

QString OAIFloodlightActivity::getAccountId() const {
    return m_account_id;
}
void OAIFloodlightActivity::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIFloodlightActivity::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIFloodlightActivity::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIFloodlightActivity::getAdvertiserId() const {
    return m_advertiser_id;
}
void OAIFloodlightActivity::setAdvertiserId(const QString &advertiser_id) {
    m_advertiser_id = advertiser_id;
    m_advertiser_id_isSet = true;
}

bool OAIFloodlightActivity::is_advertiser_id_Set() const{
    return m_advertiser_id_isSet;
}

bool OAIFloodlightActivity::is_advertiser_id_Valid() const{
    return m_advertiser_id_isValid;
}

OAIDimensionValue OAIFloodlightActivity::getAdvertiserIdDimensionValue() const {
    return m_advertiser_id_dimension_value;
}
void OAIFloodlightActivity::setAdvertiserIdDimensionValue(const OAIDimensionValue &advertiser_id_dimension_value) {
    m_advertiser_id_dimension_value = advertiser_id_dimension_value;
    m_advertiser_id_dimension_value_isSet = true;
}

bool OAIFloodlightActivity::is_advertiser_id_dimension_value_Set() const{
    return m_advertiser_id_dimension_value_isSet;
}

bool OAIFloodlightActivity::is_advertiser_id_dimension_value_Valid() const{
    return m_advertiser_id_dimension_value_isValid;
}

QString OAIFloodlightActivity::getCacheBustingType() const {
    return m_cache_busting_type;
}
void OAIFloodlightActivity::setCacheBustingType(const QString &cache_busting_type) {
    m_cache_busting_type = cache_busting_type;
    m_cache_busting_type_isSet = true;
}

bool OAIFloodlightActivity::is_cache_busting_type_Set() const{
    return m_cache_busting_type_isSet;
}

bool OAIFloodlightActivity::is_cache_busting_type_Valid() const{
    return m_cache_busting_type_isValid;
}

QString OAIFloodlightActivity::getCountingMethod() const {
    return m_counting_method;
}
void OAIFloodlightActivity::setCountingMethod(const QString &counting_method) {
    m_counting_method = counting_method;
    m_counting_method_isSet = true;
}

bool OAIFloodlightActivity::is_counting_method_Set() const{
    return m_counting_method_isSet;
}

bool OAIFloodlightActivity::is_counting_method_Valid() const{
    return m_counting_method_isValid;
}

QList<OAIFloodlightActivityDynamicTag> OAIFloodlightActivity::getDefaultTags() const {
    return m_default_tags;
}
void OAIFloodlightActivity::setDefaultTags(const QList<OAIFloodlightActivityDynamicTag> &default_tags) {
    m_default_tags = default_tags;
    m_default_tags_isSet = true;
}

bool OAIFloodlightActivity::is_default_tags_Set() const{
    return m_default_tags_isSet;
}

bool OAIFloodlightActivity::is_default_tags_Valid() const{
    return m_default_tags_isValid;
}

QString OAIFloodlightActivity::getExpectedUrl() const {
    return m_expected_url;
}
void OAIFloodlightActivity::setExpectedUrl(const QString &expected_url) {
    m_expected_url = expected_url;
    m_expected_url_isSet = true;
}

bool OAIFloodlightActivity::is_expected_url_Set() const{
    return m_expected_url_isSet;
}

bool OAIFloodlightActivity::is_expected_url_Valid() const{
    return m_expected_url_isValid;
}

QString OAIFloodlightActivity::getFloodlightActivityGroupId() const {
    return m_floodlight_activity_group_id;
}
void OAIFloodlightActivity::setFloodlightActivityGroupId(const QString &floodlight_activity_group_id) {
    m_floodlight_activity_group_id = floodlight_activity_group_id;
    m_floodlight_activity_group_id_isSet = true;
}

bool OAIFloodlightActivity::is_floodlight_activity_group_id_Set() const{
    return m_floodlight_activity_group_id_isSet;
}

bool OAIFloodlightActivity::is_floodlight_activity_group_id_Valid() const{
    return m_floodlight_activity_group_id_isValid;
}

QString OAIFloodlightActivity::getFloodlightActivityGroupName() const {
    return m_floodlight_activity_group_name;
}
void OAIFloodlightActivity::setFloodlightActivityGroupName(const QString &floodlight_activity_group_name) {
    m_floodlight_activity_group_name = floodlight_activity_group_name;
    m_floodlight_activity_group_name_isSet = true;
}

bool OAIFloodlightActivity::is_floodlight_activity_group_name_Set() const{
    return m_floodlight_activity_group_name_isSet;
}

bool OAIFloodlightActivity::is_floodlight_activity_group_name_Valid() const{
    return m_floodlight_activity_group_name_isValid;
}

QString OAIFloodlightActivity::getFloodlightActivityGroupTagString() const {
    return m_floodlight_activity_group_tag_string;
}
void OAIFloodlightActivity::setFloodlightActivityGroupTagString(const QString &floodlight_activity_group_tag_string) {
    m_floodlight_activity_group_tag_string = floodlight_activity_group_tag_string;
    m_floodlight_activity_group_tag_string_isSet = true;
}

bool OAIFloodlightActivity::is_floodlight_activity_group_tag_string_Set() const{
    return m_floodlight_activity_group_tag_string_isSet;
}

bool OAIFloodlightActivity::is_floodlight_activity_group_tag_string_Valid() const{
    return m_floodlight_activity_group_tag_string_isValid;
}

QString OAIFloodlightActivity::getFloodlightActivityGroupType() const {
    return m_floodlight_activity_group_type;
}
void OAIFloodlightActivity::setFloodlightActivityGroupType(const QString &floodlight_activity_group_type) {
    m_floodlight_activity_group_type = floodlight_activity_group_type;
    m_floodlight_activity_group_type_isSet = true;
}

bool OAIFloodlightActivity::is_floodlight_activity_group_type_Set() const{
    return m_floodlight_activity_group_type_isSet;
}

bool OAIFloodlightActivity::is_floodlight_activity_group_type_Valid() const{
    return m_floodlight_activity_group_type_isValid;
}

QString OAIFloodlightActivity::getFloodlightConfigurationId() const {
    return m_floodlight_configuration_id;
}
void OAIFloodlightActivity::setFloodlightConfigurationId(const QString &floodlight_configuration_id) {
    m_floodlight_configuration_id = floodlight_configuration_id;
    m_floodlight_configuration_id_isSet = true;
}

bool OAIFloodlightActivity::is_floodlight_configuration_id_Set() const{
    return m_floodlight_configuration_id_isSet;
}

bool OAIFloodlightActivity::is_floodlight_configuration_id_Valid() const{
    return m_floodlight_configuration_id_isValid;
}

OAIDimensionValue OAIFloodlightActivity::getFloodlightConfigurationIdDimensionValue() const {
    return m_floodlight_configuration_id_dimension_value;
}
void OAIFloodlightActivity::setFloodlightConfigurationIdDimensionValue(const OAIDimensionValue &floodlight_configuration_id_dimension_value) {
    m_floodlight_configuration_id_dimension_value = floodlight_configuration_id_dimension_value;
    m_floodlight_configuration_id_dimension_value_isSet = true;
}

bool OAIFloodlightActivity::is_floodlight_configuration_id_dimension_value_Set() const{
    return m_floodlight_configuration_id_dimension_value_isSet;
}

bool OAIFloodlightActivity::is_floodlight_configuration_id_dimension_value_Valid() const{
    return m_floodlight_configuration_id_dimension_value_isValid;
}

QString OAIFloodlightActivity::getFloodlightTagType() const {
    return m_floodlight_tag_type;
}
void OAIFloodlightActivity::setFloodlightTagType(const QString &floodlight_tag_type) {
    m_floodlight_tag_type = floodlight_tag_type;
    m_floodlight_tag_type_isSet = true;
}

bool OAIFloodlightActivity::is_floodlight_tag_type_Set() const{
    return m_floodlight_tag_type_isSet;
}

bool OAIFloodlightActivity::is_floodlight_tag_type_Valid() const{
    return m_floodlight_tag_type_isValid;
}

bool OAIFloodlightActivity::isHidden() const {
    return m_hidden;
}
void OAIFloodlightActivity::setHidden(const bool &hidden) {
    m_hidden = hidden;
    m_hidden_isSet = true;
}

bool OAIFloodlightActivity::is_hidden_Set() const{
    return m_hidden_isSet;
}

bool OAIFloodlightActivity::is_hidden_Valid() const{
    return m_hidden_isValid;
}

QString OAIFloodlightActivity::getId() const {
    return m_id;
}
void OAIFloodlightActivity::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFloodlightActivity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFloodlightActivity::is_id_Valid() const{
    return m_id_isValid;
}

OAIDimensionValue OAIFloodlightActivity::getIdDimensionValue() const {
    return m_id_dimension_value;
}
void OAIFloodlightActivity::setIdDimensionValue(const OAIDimensionValue &id_dimension_value) {
    m_id_dimension_value = id_dimension_value;
    m_id_dimension_value_isSet = true;
}

bool OAIFloodlightActivity::is_id_dimension_value_Set() const{
    return m_id_dimension_value_isSet;
}

bool OAIFloodlightActivity::is_id_dimension_value_Valid() const{
    return m_id_dimension_value_isValid;
}

QString OAIFloodlightActivity::getKind() const {
    return m_kind;
}
void OAIFloodlightActivity::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIFloodlightActivity::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIFloodlightActivity::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIFloodlightActivity::getName() const {
    return m_name;
}
void OAIFloodlightActivity::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFloodlightActivity::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFloodlightActivity::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIFloodlightActivity::getNotes() const {
    return m_notes;
}
void OAIFloodlightActivity::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIFloodlightActivity::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIFloodlightActivity::is_notes_Valid() const{
    return m_notes_isValid;
}

QList<OAIFloodlightActivityPublisherDynamicTag> OAIFloodlightActivity::getPublisherTags() const {
    return m_publisher_tags;
}
void OAIFloodlightActivity::setPublisherTags(const QList<OAIFloodlightActivityPublisherDynamicTag> &publisher_tags) {
    m_publisher_tags = publisher_tags;
    m_publisher_tags_isSet = true;
}

bool OAIFloodlightActivity::is_publisher_tags_Set() const{
    return m_publisher_tags_isSet;
}

bool OAIFloodlightActivity::is_publisher_tags_Valid() const{
    return m_publisher_tags_isValid;
}

bool OAIFloodlightActivity::isSecure() const {
    return m_secure;
}
void OAIFloodlightActivity::setSecure(const bool &secure) {
    m_secure = secure;
    m_secure_isSet = true;
}

bool OAIFloodlightActivity::is_secure_Set() const{
    return m_secure_isSet;
}

bool OAIFloodlightActivity::is_secure_Valid() const{
    return m_secure_isValid;
}

bool OAIFloodlightActivity::isSslCompliant() const {
    return m_ssl_compliant;
}
void OAIFloodlightActivity::setSslCompliant(const bool &ssl_compliant) {
    m_ssl_compliant = ssl_compliant;
    m_ssl_compliant_isSet = true;
}

bool OAIFloodlightActivity::is_ssl_compliant_Set() const{
    return m_ssl_compliant_isSet;
}

bool OAIFloodlightActivity::is_ssl_compliant_Valid() const{
    return m_ssl_compliant_isValid;
}

bool OAIFloodlightActivity::isSslRequired() const {
    return m_ssl_required;
}
void OAIFloodlightActivity::setSslRequired(const bool &ssl_required) {
    m_ssl_required = ssl_required;
    m_ssl_required_isSet = true;
}

bool OAIFloodlightActivity::is_ssl_required_Set() const{
    return m_ssl_required_isSet;
}

bool OAIFloodlightActivity::is_ssl_required_Valid() const{
    return m_ssl_required_isValid;
}

QString OAIFloodlightActivity::getSubaccountId() const {
    return m_subaccount_id;
}
void OAIFloodlightActivity::setSubaccountId(const QString &subaccount_id) {
    m_subaccount_id = subaccount_id;
    m_subaccount_id_isSet = true;
}

bool OAIFloodlightActivity::is_subaccount_id_Set() const{
    return m_subaccount_id_isSet;
}

bool OAIFloodlightActivity::is_subaccount_id_Valid() const{
    return m_subaccount_id_isValid;
}

QString OAIFloodlightActivity::getTagFormat() const {
    return m_tag_format;
}
void OAIFloodlightActivity::setTagFormat(const QString &tag_format) {
    m_tag_format = tag_format;
    m_tag_format_isSet = true;
}

bool OAIFloodlightActivity::is_tag_format_Set() const{
    return m_tag_format_isSet;
}

bool OAIFloodlightActivity::is_tag_format_Valid() const{
    return m_tag_format_isValid;
}

QString OAIFloodlightActivity::getTagString() const {
    return m_tag_string;
}
void OAIFloodlightActivity::setTagString(const QString &tag_string) {
    m_tag_string = tag_string;
    m_tag_string_isSet = true;
}

bool OAIFloodlightActivity::is_tag_string_Set() const{
    return m_tag_string_isSet;
}

bool OAIFloodlightActivity::is_tag_string_Valid() const{
    return m_tag_string_isValid;
}

QList<QString> OAIFloodlightActivity::getUserDefinedVariableTypes() const {
    return m_user_defined_variable_types;
}
void OAIFloodlightActivity::setUserDefinedVariableTypes(const QList<QString> &user_defined_variable_types) {
    m_user_defined_variable_types = user_defined_variable_types;
    m_user_defined_variable_types_isSet = true;
}

bool OAIFloodlightActivity::is_user_defined_variable_types_Set() const{
    return m_user_defined_variable_types_isSet;
}

bool OAIFloodlightActivity::is_user_defined_variable_types_Valid() const{
    return m_user_defined_variable_types_isValid;
}

bool OAIFloodlightActivity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_advertiser_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_advertiser_id_dimension_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_busting_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counting_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_floodlight_activity_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_floodlight_activity_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_floodlight_activity_group_tag_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_floodlight_activity_group_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_floodlight_configuration_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_floodlight_configuration_id_dimension_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_floodlight_tag_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hidden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_dimension_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_secure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_compliant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subaccount_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_defined_variable_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFloodlightActivity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
