/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPopupWindowProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPopupWindowProperties::OAIPopupWindowProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPopupWindowProperties::OAIPopupWindowProperties() {
    this->initializeModel();
}

OAIPopupWindowProperties::~OAIPopupWindowProperties() {}

void OAIPopupWindowProperties::initializeModel() {

    m_dimension_isSet = false;
    m_dimension_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_position_type_isSet = false;
    m_position_type_isValid = false;

    m_show_address_bar_isSet = false;
    m_show_address_bar_isValid = false;

    m_show_menu_bar_isSet = false;
    m_show_menu_bar_isValid = false;

    m_show_scroll_bar_isSet = false;
    m_show_scroll_bar_isValid = false;

    m_show_status_bar_isSet = false;
    m_show_status_bar_isValid = false;

    m_show_tool_bar_isSet = false;
    m_show_tool_bar_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIPopupWindowProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPopupWindowProperties::fromJsonObject(QJsonObject json) {

    m_dimension_isValid = ::OpenAPI::fromJsonValue(m_dimension, json[QString("dimension")]);
    m_dimension_isSet = !json[QString("dimension")].isNull() && m_dimension_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_position_type_isValid = ::OpenAPI::fromJsonValue(m_position_type, json[QString("positionType")]);
    m_position_type_isSet = !json[QString("positionType")].isNull() && m_position_type_isValid;

    m_show_address_bar_isValid = ::OpenAPI::fromJsonValue(m_show_address_bar, json[QString("showAddressBar")]);
    m_show_address_bar_isSet = !json[QString("showAddressBar")].isNull() && m_show_address_bar_isValid;

    m_show_menu_bar_isValid = ::OpenAPI::fromJsonValue(m_show_menu_bar, json[QString("showMenuBar")]);
    m_show_menu_bar_isSet = !json[QString("showMenuBar")].isNull() && m_show_menu_bar_isValid;

    m_show_scroll_bar_isValid = ::OpenAPI::fromJsonValue(m_show_scroll_bar, json[QString("showScrollBar")]);
    m_show_scroll_bar_isSet = !json[QString("showScrollBar")].isNull() && m_show_scroll_bar_isValid;

    m_show_status_bar_isValid = ::OpenAPI::fromJsonValue(m_show_status_bar, json[QString("showStatusBar")]);
    m_show_status_bar_isSet = !json[QString("showStatusBar")].isNull() && m_show_status_bar_isValid;

    m_show_tool_bar_isValid = ::OpenAPI::fromJsonValue(m_show_tool_bar, json[QString("showToolBar")]);
    m_show_tool_bar_isSet = !json[QString("showToolBar")].isNull() && m_show_tool_bar_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIPopupWindowProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPopupWindowProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_dimension.isSet()) {
        obj.insert(QString("dimension"), ::OpenAPI::toJsonValue(m_dimension));
    }
    if (m_offset.isSet()) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_position_type_isSet) {
        obj.insert(QString("positionType"), ::OpenAPI::toJsonValue(m_position_type));
    }
    if (m_show_address_bar_isSet) {
        obj.insert(QString("showAddressBar"), ::OpenAPI::toJsonValue(m_show_address_bar));
    }
    if (m_show_menu_bar_isSet) {
        obj.insert(QString("showMenuBar"), ::OpenAPI::toJsonValue(m_show_menu_bar));
    }
    if (m_show_scroll_bar_isSet) {
        obj.insert(QString("showScrollBar"), ::OpenAPI::toJsonValue(m_show_scroll_bar));
    }
    if (m_show_status_bar_isSet) {
        obj.insert(QString("showStatusBar"), ::OpenAPI::toJsonValue(m_show_status_bar));
    }
    if (m_show_tool_bar_isSet) {
        obj.insert(QString("showToolBar"), ::OpenAPI::toJsonValue(m_show_tool_bar));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

OAISize OAIPopupWindowProperties::getDimension() const {
    return m_dimension;
}
void OAIPopupWindowProperties::setDimension(const OAISize &dimension) {
    m_dimension = dimension;
    m_dimension_isSet = true;
}

bool OAIPopupWindowProperties::is_dimension_Set() const{
    return m_dimension_isSet;
}

bool OAIPopupWindowProperties::is_dimension_Valid() const{
    return m_dimension_isValid;
}

OAIOffsetPosition OAIPopupWindowProperties::getOffset() const {
    return m_offset;
}
void OAIPopupWindowProperties::setOffset(const OAIOffsetPosition &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIPopupWindowProperties::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIPopupWindowProperties::is_offset_Valid() const{
    return m_offset_isValid;
}

QString OAIPopupWindowProperties::getPositionType() const {
    return m_position_type;
}
void OAIPopupWindowProperties::setPositionType(const QString &position_type) {
    m_position_type = position_type;
    m_position_type_isSet = true;
}

bool OAIPopupWindowProperties::is_position_type_Set() const{
    return m_position_type_isSet;
}

bool OAIPopupWindowProperties::is_position_type_Valid() const{
    return m_position_type_isValid;
}

bool OAIPopupWindowProperties::isShowAddressBar() const {
    return m_show_address_bar;
}
void OAIPopupWindowProperties::setShowAddressBar(const bool &show_address_bar) {
    m_show_address_bar = show_address_bar;
    m_show_address_bar_isSet = true;
}

bool OAIPopupWindowProperties::is_show_address_bar_Set() const{
    return m_show_address_bar_isSet;
}

bool OAIPopupWindowProperties::is_show_address_bar_Valid() const{
    return m_show_address_bar_isValid;
}

bool OAIPopupWindowProperties::isShowMenuBar() const {
    return m_show_menu_bar;
}
void OAIPopupWindowProperties::setShowMenuBar(const bool &show_menu_bar) {
    m_show_menu_bar = show_menu_bar;
    m_show_menu_bar_isSet = true;
}

bool OAIPopupWindowProperties::is_show_menu_bar_Set() const{
    return m_show_menu_bar_isSet;
}

bool OAIPopupWindowProperties::is_show_menu_bar_Valid() const{
    return m_show_menu_bar_isValid;
}

bool OAIPopupWindowProperties::isShowScrollBar() const {
    return m_show_scroll_bar;
}
void OAIPopupWindowProperties::setShowScrollBar(const bool &show_scroll_bar) {
    m_show_scroll_bar = show_scroll_bar;
    m_show_scroll_bar_isSet = true;
}

bool OAIPopupWindowProperties::is_show_scroll_bar_Set() const{
    return m_show_scroll_bar_isSet;
}

bool OAIPopupWindowProperties::is_show_scroll_bar_Valid() const{
    return m_show_scroll_bar_isValid;
}

bool OAIPopupWindowProperties::isShowStatusBar() const {
    return m_show_status_bar;
}
void OAIPopupWindowProperties::setShowStatusBar(const bool &show_status_bar) {
    m_show_status_bar = show_status_bar;
    m_show_status_bar_isSet = true;
}

bool OAIPopupWindowProperties::is_show_status_bar_Set() const{
    return m_show_status_bar_isSet;
}

bool OAIPopupWindowProperties::is_show_status_bar_Valid() const{
    return m_show_status_bar_isValid;
}

bool OAIPopupWindowProperties::isShowToolBar() const {
    return m_show_tool_bar;
}
void OAIPopupWindowProperties::setShowToolBar(const bool &show_tool_bar) {
    m_show_tool_bar = show_tool_bar;
    m_show_tool_bar_isSet = true;
}

bool OAIPopupWindowProperties::is_show_tool_bar_Set() const{
    return m_show_tool_bar_isSet;
}

bool OAIPopupWindowProperties::is_show_tool_bar_Valid() const{
    return m_show_tool_bar_isValid;
}

QString OAIPopupWindowProperties::getTitle() const {
    return m_title;
}
void OAIPopupWindowProperties::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPopupWindowProperties::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPopupWindowProperties::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIPopupWindowProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dimension.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_address_bar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_menu_bar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_scroll_bar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_status_bar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_tool_bar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPopupWindowProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
