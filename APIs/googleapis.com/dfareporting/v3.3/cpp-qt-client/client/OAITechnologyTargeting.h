/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITechnologyTargeting.h
 *
 * Technology Targeting.
 */

#ifndef OAITechnologyTargeting_H
#define OAITechnologyTargeting_H

#include <QJsonObject>

#include "OAIBrowser.h"
#include "OAIConnectionType.h"
#include "OAIMobileCarrier.h"
#include "OAIOperatingSystem.h"
#include "OAIOperatingSystemVersion.h"
#include "OAIPlatformType.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBrowser;
class OAIConnectionType;
class OAIMobileCarrier;
class OAIOperatingSystemVersion;
class OAIOperatingSystem;
class OAIPlatformType;

class OAITechnologyTargeting : public OAIObject {
public:
    OAITechnologyTargeting();
    OAITechnologyTargeting(QString json);
    ~OAITechnologyTargeting() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIBrowser> getBrowsers() const;
    void setBrowsers(const QList<OAIBrowser> &browsers);
    bool is_browsers_Set() const;
    bool is_browsers_Valid() const;

    QList<OAIConnectionType> getConnectionTypes() const;
    void setConnectionTypes(const QList<OAIConnectionType> &connection_types);
    bool is_connection_types_Set() const;
    bool is_connection_types_Valid() const;

    QList<OAIMobileCarrier> getMobileCarriers() const;
    void setMobileCarriers(const QList<OAIMobileCarrier> &mobile_carriers);
    bool is_mobile_carriers_Set() const;
    bool is_mobile_carriers_Valid() const;

    QList<OAIOperatingSystemVersion> getOperatingSystemVersions() const;
    void setOperatingSystemVersions(const QList<OAIOperatingSystemVersion> &operating_system_versions);
    bool is_operating_system_versions_Set() const;
    bool is_operating_system_versions_Valid() const;

    QList<OAIOperatingSystem> getOperatingSystems() const;
    void setOperatingSystems(const QList<OAIOperatingSystem> &operating_systems);
    bool is_operating_systems_Set() const;
    bool is_operating_systems_Valid() const;

    QList<OAIPlatformType> getPlatformTypes() const;
    void setPlatformTypes(const QList<OAIPlatformType> &platform_types);
    bool is_platform_types_Set() const;
    bool is_platform_types_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIBrowser> m_browsers;
    bool m_browsers_isSet;
    bool m_browsers_isValid;

    QList<OAIConnectionType> m_connection_types;
    bool m_connection_types_isSet;
    bool m_connection_types_isValid;

    QList<OAIMobileCarrier> m_mobile_carriers;
    bool m_mobile_carriers_isSet;
    bool m_mobile_carriers_isValid;

    QList<OAIOperatingSystemVersion> m_operating_system_versions;
    bool m_operating_system_versions_isSet;
    bool m_operating_system_versions_isValid;

    QList<OAIOperatingSystem> m_operating_systems;
    bool m_operating_systems_isSet;
    bool m_operating_systems_isValid;

    QList<OAIPlatformType> m_platform_types;
    bool m_platform_types_isSet;
    bool m_platform_types_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITechnologyTargeting)

#endif // OAITechnologyTargeting_H
