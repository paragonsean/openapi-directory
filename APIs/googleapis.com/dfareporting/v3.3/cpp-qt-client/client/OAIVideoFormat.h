/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVideoFormat.h
 *
 * Contains information about supported video formats.
 */

#ifndef OAIVideoFormat_H
#define OAIVideoFormat_H

#include <QJsonObject>

#include "OAISize.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISize;

class OAIVideoFormat : public OAIObject {
public:
    OAIVideoFormat();
    OAIVideoFormat(QString json);
    ~OAIVideoFormat() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getFileType() const;
    void setFileType(const QString &file_type);
    bool is_file_type_Set() const;
    bool is_file_type_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getKind() const;
    void setKind(const QString &kind);
    bool is_kind_Set() const;
    bool is_kind_Valid() const;

    OAISize getResolution() const;
    void setResolution(const OAISize &resolution);
    bool is_resolution_Set() const;
    bool is_resolution_Valid() const;

    qint32 getTargetBitRate() const;
    void setTargetBitRate(const qint32 &target_bit_rate);
    bool is_target_bit_rate_Set() const;
    bool is_target_bit_rate_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_file_type;
    bool m_file_type_isSet;
    bool m_file_type_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_kind;
    bool m_kind_isSet;
    bool m_kind_isValid;

    OAISize m_resolution;
    bool m_resolution_isSet;
    bool m_resolution_isValid;

    qint32 m_target_bit_rate;
    bool m_target_bit_rate_isSet;
    bool m_target_bit_rate_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVideoFormat)

#endif // OAIVideoFormat_H
