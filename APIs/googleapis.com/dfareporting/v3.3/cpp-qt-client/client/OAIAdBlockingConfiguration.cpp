/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdBlockingConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdBlockingConfiguration::OAIAdBlockingConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdBlockingConfiguration::OAIAdBlockingConfiguration() {
    this->initializeModel();
}

OAIAdBlockingConfiguration::~OAIAdBlockingConfiguration() {}

void OAIAdBlockingConfiguration::initializeModel() {

    m_click_through_url_isSet = false;
    m_click_through_url_isValid = false;

    m_creative_bundle_id_isSet = false;
    m_creative_bundle_id_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_override_click_through_url_isSet = false;
    m_override_click_through_url_isValid = false;
}

void OAIAdBlockingConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdBlockingConfiguration::fromJsonObject(QJsonObject json) {

    m_click_through_url_isValid = ::OpenAPI::fromJsonValue(m_click_through_url, json[QString("clickThroughUrl")]);
    m_click_through_url_isSet = !json[QString("clickThroughUrl")].isNull() && m_click_through_url_isValid;

    m_creative_bundle_id_isValid = ::OpenAPI::fromJsonValue(m_creative_bundle_id, json[QString("creativeBundleId")]);
    m_creative_bundle_id_isSet = !json[QString("creativeBundleId")].isNull() && m_creative_bundle_id_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_override_click_through_url_isValid = ::OpenAPI::fromJsonValue(m_override_click_through_url, json[QString("overrideClickThroughUrl")]);
    m_override_click_through_url_isSet = !json[QString("overrideClickThroughUrl")].isNull() && m_override_click_through_url_isValid;
}

QString OAIAdBlockingConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdBlockingConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_click_through_url_isSet) {
        obj.insert(QString("clickThroughUrl"), ::OpenAPI::toJsonValue(m_click_through_url));
    }
    if (m_creative_bundle_id_isSet) {
        obj.insert(QString("creativeBundleId"), ::OpenAPI::toJsonValue(m_creative_bundle_id));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_override_click_through_url_isSet) {
        obj.insert(QString("overrideClickThroughUrl"), ::OpenAPI::toJsonValue(m_override_click_through_url));
    }
    return obj;
}

QString OAIAdBlockingConfiguration::getClickThroughUrl() const {
    return m_click_through_url;
}
void OAIAdBlockingConfiguration::setClickThroughUrl(const QString &click_through_url) {
    m_click_through_url = click_through_url;
    m_click_through_url_isSet = true;
}

bool OAIAdBlockingConfiguration::is_click_through_url_Set() const{
    return m_click_through_url_isSet;
}

bool OAIAdBlockingConfiguration::is_click_through_url_Valid() const{
    return m_click_through_url_isValid;
}

QString OAIAdBlockingConfiguration::getCreativeBundleId() const {
    return m_creative_bundle_id;
}
void OAIAdBlockingConfiguration::setCreativeBundleId(const QString &creative_bundle_id) {
    m_creative_bundle_id = creative_bundle_id;
    m_creative_bundle_id_isSet = true;
}

bool OAIAdBlockingConfiguration::is_creative_bundle_id_Set() const{
    return m_creative_bundle_id_isSet;
}

bool OAIAdBlockingConfiguration::is_creative_bundle_id_Valid() const{
    return m_creative_bundle_id_isValid;
}

bool OAIAdBlockingConfiguration::isEnabled() const {
    return m_enabled;
}
void OAIAdBlockingConfiguration::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIAdBlockingConfiguration::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIAdBlockingConfiguration::is_enabled_Valid() const{
    return m_enabled_isValid;
}

bool OAIAdBlockingConfiguration::isOverrideClickThroughUrl() const {
    return m_override_click_through_url;
}
void OAIAdBlockingConfiguration::setOverrideClickThroughUrl(const bool &override_click_through_url) {
    m_override_click_through_url = override_click_through_url;
    m_override_click_through_url_isSet = true;
}

bool OAIAdBlockingConfiguration::is_override_click_through_url_Set() const{
    return m_override_click_through_url_isSet;
}

bool OAIAdBlockingConfiguration::is_override_click_through_url_Valid() const{
    return m_override_click_through_url_isValid;
}

bool OAIAdBlockingConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_click_through_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creative_bundle_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_click_through_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdBlockingConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
