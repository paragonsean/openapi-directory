/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISiteSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISiteSettings::OAISiteSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISiteSettings::OAISiteSettings() {
    this->initializeModel();
}

OAISiteSettings::~OAISiteSettings() {}

void OAISiteSettings::initializeModel() {

    m_active_view_opt_out_isSet = false;
    m_active_view_opt_out_isValid = false;

    m_ad_blocking_opt_out_isSet = false;
    m_ad_blocking_opt_out_isValid = false;

    m_disable_new_cookie_isSet = false;
    m_disable_new_cookie_isValid = false;

    m_tag_setting_isSet = false;
    m_tag_setting_isValid = false;

    m_video_active_view_opt_out_template_isSet = false;
    m_video_active_view_opt_out_template_isValid = false;

    m_vpaid_adapter_choice_template_isSet = false;
    m_vpaid_adapter_choice_template_isValid = false;
}

void OAISiteSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISiteSettings::fromJsonObject(QJsonObject json) {

    m_active_view_opt_out_isValid = ::OpenAPI::fromJsonValue(m_active_view_opt_out, json[QString("activeViewOptOut")]);
    m_active_view_opt_out_isSet = !json[QString("activeViewOptOut")].isNull() && m_active_view_opt_out_isValid;

    m_ad_blocking_opt_out_isValid = ::OpenAPI::fromJsonValue(m_ad_blocking_opt_out, json[QString("adBlockingOptOut")]);
    m_ad_blocking_opt_out_isSet = !json[QString("adBlockingOptOut")].isNull() && m_ad_blocking_opt_out_isValid;

    m_disable_new_cookie_isValid = ::OpenAPI::fromJsonValue(m_disable_new_cookie, json[QString("disableNewCookie")]);
    m_disable_new_cookie_isSet = !json[QString("disableNewCookie")].isNull() && m_disable_new_cookie_isValid;

    m_tag_setting_isValid = ::OpenAPI::fromJsonValue(m_tag_setting, json[QString("tagSetting")]);
    m_tag_setting_isSet = !json[QString("tagSetting")].isNull() && m_tag_setting_isValid;

    m_video_active_view_opt_out_template_isValid = ::OpenAPI::fromJsonValue(m_video_active_view_opt_out_template, json[QString("videoActiveViewOptOutTemplate")]);
    m_video_active_view_opt_out_template_isSet = !json[QString("videoActiveViewOptOutTemplate")].isNull() && m_video_active_view_opt_out_template_isValid;

    m_vpaid_adapter_choice_template_isValid = ::OpenAPI::fromJsonValue(m_vpaid_adapter_choice_template, json[QString("vpaidAdapterChoiceTemplate")]);
    m_vpaid_adapter_choice_template_isSet = !json[QString("vpaidAdapterChoiceTemplate")].isNull() && m_vpaid_adapter_choice_template_isValid;
}

QString OAISiteSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISiteSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_active_view_opt_out_isSet) {
        obj.insert(QString("activeViewOptOut"), ::OpenAPI::toJsonValue(m_active_view_opt_out));
    }
    if (m_ad_blocking_opt_out_isSet) {
        obj.insert(QString("adBlockingOptOut"), ::OpenAPI::toJsonValue(m_ad_blocking_opt_out));
    }
    if (m_disable_new_cookie_isSet) {
        obj.insert(QString("disableNewCookie"), ::OpenAPI::toJsonValue(m_disable_new_cookie));
    }
    if (m_tag_setting.isSet()) {
        obj.insert(QString("tagSetting"), ::OpenAPI::toJsonValue(m_tag_setting));
    }
    if (m_video_active_view_opt_out_template_isSet) {
        obj.insert(QString("videoActiveViewOptOutTemplate"), ::OpenAPI::toJsonValue(m_video_active_view_opt_out_template));
    }
    if (m_vpaid_adapter_choice_template_isSet) {
        obj.insert(QString("vpaidAdapterChoiceTemplate"), ::OpenAPI::toJsonValue(m_vpaid_adapter_choice_template));
    }
    return obj;
}

bool OAISiteSettings::isActiveViewOptOut() const {
    return m_active_view_opt_out;
}
void OAISiteSettings::setActiveViewOptOut(const bool &active_view_opt_out) {
    m_active_view_opt_out = active_view_opt_out;
    m_active_view_opt_out_isSet = true;
}

bool OAISiteSettings::is_active_view_opt_out_Set() const{
    return m_active_view_opt_out_isSet;
}

bool OAISiteSettings::is_active_view_opt_out_Valid() const{
    return m_active_view_opt_out_isValid;
}

bool OAISiteSettings::isAdBlockingOptOut() const {
    return m_ad_blocking_opt_out;
}
void OAISiteSettings::setAdBlockingOptOut(const bool &ad_blocking_opt_out) {
    m_ad_blocking_opt_out = ad_blocking_opt_out;
    m_ad_blocking_opt_out_isSet = true;
}

bool OAISiteSettings::is_ad_blocking_opt_out_Set() const{
    return m_ad_blocking_opt_out_isSet;
}

bool OAISiteSettings::is_ad_blocking_opt_out_Valid() const{
    return m_ad_blocking_opt_out_isValid;
}

bool OAISiteSettings::isDisableNewCookie() const {
    return m_disable_new_cookie;
}
void OAISiteSettings::setDisableNewCookie(const bool &disable_new_cookie) {
    m_disable_new_cookie = disable_new_cookie;
    m_disable_new_cookie_isSet = true;
}

bool OAISiteSettings::is_disable_new_cookie_Set() const{
    return m_disable_new_cookie_isSet;
}

bool OAISiteSettings::is_disable_new_cookie_Valid() const{
    return m_disable_new_cookie_isValid;
}

OAITagSetting OAISiteSettings::getTagSetting() const {
    return m_tag_setting;
}
void OAISiteSettings::setTagSetting(const OAITagSetting &tag_setting) {
    m_tag_setting = tag_setting;
    m_tag_setting_isSet = true;
}

bool OAISiteSettings::is_tag_setting_Set() const{
    return m_tag_setting_isSet;
}

bool OAISiteSettings::is_tag_setting_Valid() const{
    return m_tag_setting_isValid;
}

bool OAISiteSettings::isVideoActiveViewOptOutTemplate() const {
    return m_video_active_view_opt_out_template;
}
void OAISiteSettings::setVideoActiveViewOptOutTemplate(const bool &video_active_view_opt_out_template) {
    m_video_active_view_opt_out_template = video_active_view_opt_out_template;
    m_video_active_view_opt_out_template_isSet = true;
}

bool OAISiteSettings::is_video_active_view_opt_out_template_Set() const{
    return m_video_active_view_opt_out_template_isSet;
}

bool OAISiteSettings::is_video_active_view_opt_out_template_Valid() const{
    return m_video_active_view_opt_out_template_isValid;
}

QString OAISiteSettings::getVpaidAdapterChoiceTemplate() const {
    return m_vpaid_adapter_choice_template;
}
void OAISiteSettings::setVpaidAdapterChoiceTemplate(const QString &vpaid_adapter_choice_template) {
    m_vpaid_adapter_choice_template = vpaid_adapter_choice_template;
    m_vpaid_adapter_choice_template_isSet = true;
}

bool OAISiteSettings::is_vpaid_adapter_choice_template_Set() const{
    return m_vpaid_adapter_choice_template_isSet;
}

bool OAISiteSettings::is_vpaid_adapter_choice_template_Valid() const{
    return m_vpaid_adapter_choice_template_isValid;
}

bool OAISiteSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_view_opt_out_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ad_blocking_opt_out_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_new_cookie_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_setting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_active_view_opt_out_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpaid_adapter_choice_template_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISiteSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
