/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFloodlightConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFloodlightConfiguration::OAIFloodlightConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFloodlightConfiguration::OAIFloodlightConfiguration() {
    this->initializeModel();
}

OAIFloodlightConfiguration::~OAIFloodlightConfiguration() {}

void OAIFloodlightConfiguration::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_advertiser_id_isSet = false;
    m_advertiser_id_isValid = false;

    m_advertiser_id_dimension_value_isSet = false;
    m_advertiser_id_dimension_value_isValid = false;

    m_analytics_data_sharing_enabled_isSet = false;
    m_analytics_data_sharing_enabled_isValid = false;

    m_custom_viewability_metric_isSet = false;
    m_custom_viewability_metric_isValid = false;

    m_exposure_to_conversion_enabled_isSet = false;
    m_exposure_to_conversion_enabled_isValid = false;

    m_first_day_of_week_isSet = false;
    m_first_day_of_week_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_id_dimension_value_isSet = false;
    m_id_dimension_value_isValid = false;

    m_in_app_attribution_tracking_enabled_isSet = false;
    m_in_app_attribution_tracking_enabled_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_lookback_configuration_isSet = false;
    m_lookback_configuration_isValid = false;

    m_natural_search_conversion_attribution_option_isSet = false;
    m_natural_search_conversion_attribution_option_isValid = false;

    m_omniture_settings_isSet = false;
    m_omniture_settings_isValid = false;

    m_subaccount_id_isSet = false;
    m_subaccount_id_isValid = false;

    m_tag_settings_isSet = false;
    m_tag_settings_isValid = false;

    m_third_party_authentication_tokens_isSet = false;
    m_third_party_authentication_tokens_isValid = false;

    m_user_defined_variable_configurations_isSet = false;
    m_user_defined_variable_configurations_isValid = false;
}

void OAIFloodlightConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFloodlightConfiguration::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_advertiser_id_isValid = ::OpenAPI::fromJsonValue(m_advertiser_id, json[QString("advertiserId")]);
    m_advertiser_id_isSet = !json[QString("advertiserId")].isNull() && m_advertiser_id_isValid;

    m_advertiser_id_dimension_value_isValid = ::OpenAPI::fromJsonValue(m_advertiser_id_dimension_value, json[QString("advertiserIdDimensionValue")]);
    m_advertiser_id_dimension_value_isSet = !json[QString("advertiserIdDimensionValue")].isNull() && m_advertiser_id_dimension_value_isValid;

    m_analytics_data_sharing_enabled_isValid = ::OpenAPI::fromJsonValue(m_analytics_data_sharing_enabled, json[QString("analyticsDataSharingEnabled")]);
    m_analytics_data_sharing_enabled_isSet = !json[QString("analyticsDataSharingEnabled")].isNull() && m_analytics_data_sharing_enabled_isValid;

    m_custom_viewability_metric_isValid = ::OpenAPI::fromJsonValue(m_custom_viewability_metric, json[QString("customViewabilityMetric")]);
    m_custom_viewability_metric_isSet = !json[QString("customViewabilityMetric")].isNull() && m_custom_viewability_metric_isValid;

    m_exposure_to_conversion_enabled_isValid = ::OpenAPI::fromJsonValue(m_exposure_to_conversion_enabled, json[QString("exposureToConversionEnabled")]);
    m_exposure_to_conversion_enabled_isSet = !json[QString("exposureToConversionEnabled")].isNull() && m_exposure_to_conversion_enabled_isValid;

    m_first_day_of_week_isValid = ::OpenAPI::fromJsonValue(m_first_day_of_week, json[QString("firstDayOfWeek")]);
    m_first_day_of_week_isSet = !json[QString("firstDayOfWeek")].isNull() && m_first_day_of_week_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_id_dimension_value_isValid = ::OpenAPI::fromJsonValue(m_id_dimension_value, json[QString("idDimensionValue")]);
    m_id_dimension_value_isSet = !json[QString("idDimensionValue")].isNull() && m_id_dimension_value_isValid;

    m_in_app_attribution_tracking_enabled_isValid = ::OpenAPI::fromJsonValue(m_in_app_attribution_tracking_enabled, json[QString("inAppAttributionTrackingEnabled")]);
    m_in_app_attribution_tracking_enabled_isSet = !json[QString("inAppAttributionTrackingEnabled")].isNull() && m_in_app_attribution_tracking_enabled_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_lookback_configuration_isValid = ::OpenAPI::fromJsonValue(m_lookback_configuration, json[QString("lookbackConfiguration")]);
    m_lookback_configuration_isSet = !json[QString("lookbackConfiguration")].isNull() && m_lookback_configuration_isValid;

    m_natural_search_conversion_attribution_option_isValid = ::OpenAPI::fromJsonValue(m_natural_search_conversion_attribution_option, json[QString("naturalSearchConversionAttributionOption")]);
    m_natural_search_conversion_attribution_option_isSet = !json[QString("naturalSearchConversionAttributionOption")].isNull() && m_natural_search_conversion_attribution_option_isValid;

    m_omniture_settings_isValid = ::OpenAPI::fromJsonValue(m_omniture_settings, json[QString("omnitureSettings")]);
    m_omniture_settings_isSet = !json[QString("omnitureSettings")].isNull() && m_omniture_settings_isValid;

    m_subaccount_id_isValid = ::OpenAPI::fromJsonValue(m_subaccount_id, json[QString("subaccountId")]);
    m_subaccount_id_isSet = !json[QString("subaccountId")].isNull() && m_subaccount_id_isValid;

    m_tag_settings_isValid = ::OpenAPI::fromJsonValue(m_tag_settings, json[QString("tagSettings")]);
    m_tag_settings_isSet = !json[QString("tagSettings")].isNull() && m_tag_settings_isValid;

    m_third_party_authentication_tokens_isValid = ::OpenAPI::fromJsonValue(m_third_party_authentication_tokens, json[QString("thirdPartyAuthenticationTokens")]);
    m_third_party_authentication_tokens_isSet = !json[QString("thirdPartyAuthenticationTokens")].isNull() && m_third_party_authentication_tokens_isValid;

    m_user_defined_variable_configurations_isValid = ::OpenAPI::fromJsonValue(m_user_defined_variable_configurations, json[QString("userDefinedVariableConfigurations")]);
    m_user_defined_variable_configurations_isSet = !json[QString("userDefinedVariableConfigurations")].isNull() && m_user_defined_variable_configurations_isValid;
}

QString OAIFloodlightConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFloodlightConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_advertiser_id_isSet) {
        obj.insert(QString("advertiserId"), ::OpenAPI::toJsonValue(m_advertiser_id));
    }
    if (m_advertiser_id_dimension_value.isSet()) {
        obj.insert(QString("advertiserIdDimensionValue"), ::OpenAPI::toJsonValue(m_advertiser_id_dimension_value));
    }
    if (m_analytics_data_sharing_enabled_isSet) {
        obj.insert(QString("analyticsDataSharingEnabled"), ::OpenAPI::toJsonValue(m_analytics_data_sharing_enabled));
    }
    if (m_custom_viewability_metric.isSet()) {
        obj.insert(QString("customViewabilityMetric"), ::OpenAPI::toJsonValue(m_custom_viewability_metric));
    }
    if (m_exposure_to_conversion_enabled_isSet) {
        obj.insert(QString("exposureToConversionEnabled"), ::OpenAPI::toJsonValue(m_exposure_to_conversion_enabled));
    }
    if (m_first_day_of_week_isSet) {
        obj.insert(QString("firstDayOfWeek"), ::OpenAPI::toJsonValue(m_first_day_of_week));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_id_dimension_value.isSet()) {
        obj.insert(QString("idDimensionValue"), ::OpenAPI::toJsonValue(m_id_dimension_value));
    }
    if (m_in_app_attribution_tracking_enabled_isSet) {
        obj.insert(QString("inAppAttributionTrackingEnabled"), ::OpenAPI::toJsonValue(m_in_app_attribution_tracking_enabled));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_lookback_configuration.isSet()) {
        obj.insert(QString("lookbackConfiguration"), ::OpenAPI::toJsonValue(m_lookback_configuration));
    }
    if (m_natural_search_conversion_attribution_option_isSet) {
        obj.insert(QString("naturalSearchConversionAttributionOption"), ::OpenAPI::toJsonValue(m_natural_search_conversion_attribution_option));
    }
    if (m_omniture_settings.isSet()) {
        obj.insert(QString("omnitureSettings"), ::OpenAPI::toJsonValue(m_omniture_settings));
    }
    if (m_subaccount_id_isSet) {
        obj.insert(QString("subaccountId"), ::OpenAPI::toJsonValue(m_subaccount_id));
    }
    if (m_tag_settings.isSet()) {
        obj.insert(QString("tagSettings"), ::OpenAPI::toJsonValue(m_tag_settings));
    }
    if (m_third_party_authentication_tokens.size() > 0) {
        obj.insert(QString("thirdPartyAuthenticationTokens"), ::OpenAPI::toJsonValue(m_third_party_authentication_tokens));
    }
    if (m_user_defined_variable_configurations.size() > 0) {
        obj.insert(QString("userDefinedVariableConfigurations"), ::OpenAPI::toJsonValue(m_user_defined_variable_configurations));
    }
    return obj;
}

QString OAIFloodlightConfiguration::getAccountId() const {
    return m_account_id;
}
void OAIFloodlightConfiguration::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIFloodlightConfiguration::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIFloodlightConfiguration::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIFloodlightConfiguration::getAdvertiserId() const {
    return m_advertiser_id;
}
void OAIFloodlightConfiguration::setAdvertiserId(const QString &advertiser_id) {
    m_advertiser_id = advertiser_id;
    m_advertiser_id_isSet = true;
}

bool OAIFloodlightConfiguration::is_advertiser_id_Set() const{
    return m_advertiser_id_isSet;
}

bool OAIFloodlightConfiguration::is_advertiser_id_Valid() const{
    return m_advertiser_id_isValid;
}

OAIDimensionValue OAIFloodlightConfiguration::getAdvertiserIdDimensionValue() const {
    return m_advertiser_id_dimension_value;
}
void OAIFloodlightConfiguration::setAdvertiserIdDimensionValue(const OAIDimensionValue &advertiser_id_dimension_value) {
    m_advertiser_id_dimension_value = advertiser_id_dimension_value;
    m_advertiser_id_dimension_value_isSet = true;
}

bool OAIFloodlightConfiguration::is_advertiser_id_dimension_value_Set() const{
    return m_advertiser_id_dimension_value_isSet;
}

bool OAIFloodlightConfiguration::is_advertiser_id_dimension_value_Valid() const{
    return m_advertiser_id_dimension_value_isValid;
}

bool OAIFloodlightConfiguration::isAnalyticsDataSharingEnabled() const {
    return m_analytics_data_sharing_enabled;
}
void OAIFloodlightConfiguration::setAnalyticsDataSharingEnabled(const bool &analytics_data_sharing_enabled) {
    m_analytics_data_sharing_enabled = analytics_data_sharing_enabled;
    m_analytics_data_sharing_enabled_isSet = true;
}

bool OAIFloodlightConfiguration::is_analytics_data_sharing_enabled_Set() const{
    return m_analytics_data_sharing_enabled_isSet;
}

bool OAIFloodlightConfiguration::is_analytics_data_sharing_enabled_Valid() const{
    return m_analytics_data_sharing_enabled_isValid;
}

OAICustomViewabilityMetric OAIFloodlightConfiguration::getCustomViewabilityMetric() const {
    return m_custom_viewability_metric;
}
void OAIFloodlightConfiguration::setCustomViewabilityMetric(const OAICustomViewabilityMetric &custom_viewability_metric) {
    m_custom_viewability_metric = custom_viewability_metric;
    m_custom_viewability_metric_isSet = true;
}

bool OAIFloodlightConfiguration::is_custom_viewability_metric_Set() const{
    return m_custom_viewability_metric_isSet;
}

bool OAIFloodlightConfiguration::is_custom_viewability_metric_Valid() const{
    return m_custom_viewability_metric_isValid;
}

bool OAIFloodlightConfiguration::isExposureToConversionEnabled() const {
    return m_exposure_to_conversion_enabled;
}
void OAIFloodlightConfiguration::setExposureToConversionEnabled(const bool &exposure_to_conversion_enabled) {
    m_exposure_to_conversion_enabled = exposure_to_conversion_enabled;
    m_exposure_to_conversion_enabled_isSet = true;
}

bool OAIFloodlightConfiguration::is_exposure_to_conversion_enabled_Set() const{
    return m_exposure_to_conversion_enabled_isSet;
}

bool OAIFloodlightConfiguration::is_exposure_to_conversion_enabled_Valid() const{
    return m_exposure_to_conversion_enabled_isValid;
}

QString OAIFloodlightConfiguration::getFirstDayOfWeek() const {
    return m_first_day_of_week;
}
void OAIFloodlightConfiguration::setFirstDayOfWeek(const QString &first_day_of_week) {
    m_first_day_of_week = first_day_of_week;
    m_first_day_of_week_isSet = true;
}

bool OAIFloodlightConfiguration::is_first_day_of_week_Set() const{
    return m_first_day_of_week_isSet;
}

bool OAIFloodlightConfiguration::is_first_day_of_week_Valid() const{
    return m_first_day_of_week_isValid;
}

QString OAIFloodlightConfiguration::getId() const {
    return m_id;
}
void OAIFloodlightConfiguration::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFloodlightConfiguration::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFloodlightConfiguration::is_id_Valid() const{
    return m_id_isValid;
}

OAIDimensionValue OAIFloodlightConfiguration::getIdDimensionValue() const {
    return m_id_dimension_value;
}
void OAIFloodlightConfiguration::setIdDimensionValue(const OAIDimensionValue &id_dimension_value) {
    m_id_dimension_value = id_dimension_value;
    m_id_dimension_value_isSet = true;
}

bool OAIFloodlightConfiguration::is_id_dimension_value_Set() const{
    return m_id_dimension_value_isSet;
}

bool OAIFloodlightConfiguration::is_id_dimension_value_Valid() const{
    return m_id_dimension_value_isValid;
}

bool OAIFloodlightConfiguration::isInAppAttributionTrackingEnabled() const {
    return m_in_app_attribution_tracking_enabled;
}
void OAIFloodlightConfiguration::setInAppAttributionTrackingEnabled(const bool &in_app_attribution_tracking_enabled) {
    m_in_app_attribution_tracking_enabled = in_app_attribution_tracking_enabled;
    m_in_app_attribution_tracking_enabled_isSet = true;
}

bool OAIFloodlightConfiguration::is_in_app_attribution_tracking_enabled_Set() const{
    return m_in_app_attribution_tracking_enabled_isSet;
}

bool OAIFloodlightConfiguration::is_in_app_attribution_tracking_enabled_Valid() const{
    return m_in_app_attribution_tracking_enabled_isValid;
}

QString OAIFloodlightConfiguration::getKind() const {
    return m_kind;
}
void OAIFloodlightConfiguration::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIFloodlightConfiguration::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIFloodlightConfiguration::is_kind_Valid() const{
    return m_kind_isValid;
}

OAILookbackConfiguration OAIFloodlightConfiguration::getLookbackConfiguration() const {
    return m_lookback_configuration;
}
void OAIFloodlightConfiguration::setLookbackConfiguration(const OAILookbackConfiguration &lookback_configuration) {
    m_lookback_configuration = lookback_configuration;
    m_lookback_configuration_isSet = true;
}

bool OAIFloodlightConfiguration::is_lookback_configuration_Set() const{
    return m_lookback_configuration_isSet;
}

bool OAIFloodlightConfiguration::is_lookback_configuration_Valid() const{
    return m_lookback_configuration_isValid;
}

QString OAIFloodlightConfiguration::getNaturalSearchConversionAttributionOption() const {
    return m_natural_search_conversion_attribution_option;
}
void OAIFloodlightConfiguration::setNaturalSearchConversionAttributionOption(const QString &natural_search_conversion_attribution_option) {
    m_natural_search_conversion_attribution_option = natural_search_conversion_attribution_option;
    m_natural_search_conversion_attribution_option_isSet = true;
}

bool OAIFloodlightConfiguration::is_natural_search_conversion_attribution_option_Set() const{
    return m_natural_search_conversion_attribution_option_isSet;
}

bool OAIFloodlightConfiguration::is_natural_search_conversion_attribution_option_Valid() const{
    return m_natural_search_conversion_attribution_option_isValid;
}

OAIOmnitureSettings OAIFloodlightConfiguration::getOmnitureSettings() const {
    return m_omniture_settings;
}
void OAIFloodlightConfiguration::setOmnitureSettings(const OAIOmnitureSettings &omniture_settings) {
    m_omniture_settings = omniture_settings;
    m_omniture_settings_isSet = true;
}

bool OAIFloodlightConfiguration::is_omniture_settings_Set() const{
    return m_omniture_settings_isSet;
}

bool OAIFloodlightConfiguration::is_omniture_settings_Valid() const{
    return m_omniture_settings_isValid;
}

QString OAIFloodlightConfiguration::getSubaccountId() const {
    return m_subaccount_id;
}
void OAIFloodlightConfiguration::setSubaccountId(const QString &subaccount_id) {
    m_subaccount_id = subaccount_id;
    m_subaccount_id_isSet = true;
}

bool OAIFloodlightConfiguration::is_subaccount_id_Set() const{
    return m_subaccount_id_isSet;
}

bool OAIFloodlightConfiguration::is_subaccount_id_Valid() const{
    return m_subaccount_id_isValid;
}

OAITagSettings OAIFloodlightConfiguration::getTagSettings() const {
    return m_tag_settings;
}
void OAIFloodlightConfiguration::setTagSettings(const OAITagSettings &tag_settings) {
    m_tag_settings = tag_settings;
    m_tag_settings_isSet = true;
}

bool OAIFloodlightConfiguration::is_tag_settings_Set() const{
    return m_tag_settings_isSet;
}

bool OAIFloodlightConfiguration::is_tag_settings_Valid() const{
    return m_tag_settings_isValid;
}

QList<OAIThirdPartyAuthenticationToken> OAIFloodlightConfiguration::getThirdPartyAuthenticationTokens() const {
    return m_third_party_authentication_tokens;
}
void OAIFloodlightConfiguration::setThirdPartyAuthenticationTokens(const QList<OAIThirdPartyAuthenticationToken> &third_party_authentication_tokens) {
    m_third_party_authentication_tokens = third_party_authentication_tokens;
    m_third_party_authentication_tokens_isSet = true;
}

bool OAIFloodlightConfiguration::is_third_party_authentication_tokens_Set() const{
    return m_third_party_authentication_tokens_isSet;
}

bool OAIFloodlightConfiguration::is_third_party_authentication_tokens_Valid() const{
    return m_third_party_authentication_tokens_isValid;
}

QList<OAIUserDefinedVariableConfiguration> OAIFloodlightConfiguration::getUserDefinedVariableConfigurations() const {
    return m_user_defined_variable_configurations;
}
void OAIFloodlightConfiguration::setUserDefinedVariableConfigurations(const QList<OAIUserDefinedVariableConfiguration> &user_defined_variable_configurations) {
    m_user_defined_variable_configurations = user_defined_variable_configurations;
    m_user_defined_variable_configurations_isSet = true;
}

bool OAIFloodlightConfiguration::is_user_defined_variable_configurations_Set() const{
    return m_user_defined_variable_configurations_isSet;
}

bool OAIFloodlightConfiguration::is_user_defined_variable_configurations_Valid() const{
    return m_user_defined_variable_configurations_isValid;
}

bool OAIFloodlightConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_advertiser_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_advertiser_id_dimension_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_analytics_data_sharing_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_viewability_metric.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exposure_to_conversion_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_day_of_week_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_dimension_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_app_attribution_tracking_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lookback_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_natural_search_conversion_attribution_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_omniture_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subaccount_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_third_party_authentication_tokens.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_defined_variable_configurations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFloodlightConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
