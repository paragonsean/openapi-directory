/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPricingSchedule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPricingSchedule::OAIPricingSchedule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPricingSchedule::OAIPricingSchedule() {
    this->initializeModel();
}

OAIPricingSchedule::~OAIPricingSchedule() {}

void OAIPricingSchedule::initializeModel() {

    m_cap_cost_option_isSet = false;
    m_cap_cost_option_isValid = false;

    m_disregard_overdelivery_isSet = false;
    m_disregard_overdelivery_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_flighted_isSet = false;
    m_flighted_isValid = false;

    m_floodlight_activity_id_isSet = false;
    m_floodlight_activity_id_isValid = false;

    m_pricing_periods_isSet = false;
    m_pricing_periods_isValid = false;

    m_pricing_type_isSet = false;
    m_pricing_type_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_testing_start_date_isSet = false;
    m_testing_start_date_isValid = false;
}

void OAIPricingSchedule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPricingSchedule::fromJsonObject(QJsonObject json) {

    m_cap_cost_option_isValid = ::OpenAPI::fromJsonValue(m_cap_cost_option, json[QString("capCostOption")]);
    m_cap_cost_option_isSet = !json[QString("capCostOption")].isNull() && m_cap_cost_option_isValid;

    m_disregard_overdelivery_isValid = ::OpenAPI::fromJsonValue(m_disregard_overdelivery, json[QString("disregardOverdelivery")]);
    m_disregard_overdelivery_isSet = !json[QString("disregardOverdelivery")].isNull() && m_disregard_overdelivery_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_flighted_isValid = ::OpenAPI::fromJsonValue(m_flighted, json[QString("flighted")]);
    m_flighted_isSet = !json[QString("flighted")].isNull() && m_flighted_isValid;

    m_floodlight_activity_id_isValid = ::OpenAPI::fromJsonValue(m_floodlight_activity_id, json[QString("floodlightActivityId")]);
    m_floodlight_activity_id_isSet = !json[QString("floodlightActivityId")].isNull() && m_floodlight_activity_id_isValid;

    m_pricing_periods_isValid = ::OpenAPI::fromJsonValue(m_pricing_periods, json[QString("pricingPeriods")]);
    m_pricing_periods_isSet = !json[QString("pricingPeriods")].isNull() && m_pricing_periods_isValid;

    m_pricing_type_isValid = ::OpenAPI::fromJsonValue(m_pricing_type, json[QString("pricingType")]);
    m_pricing_type_isSet = !json[QString("pricingType")].isNull() && m_pricing_type_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_testing_start_date_isValid = ::OpenAPI::fromJsonValue(m_testing_start_date, json[QString("testingStartDate")]);
    m_testing_start_date_isSet = !json[QString("testingStartDate")].isNull() && m_testing_start_date_isValid;
}

QString OAIPricingSchedule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPricingSchedule::asJsonObject() const {
    QJsonObject obj;
    if (m_cap_cost_option_isSet) {
        obj.insert(QString("capCostOption"), ::OpenAPI::toJsonValue(m_cap_cost_option));
    }
    if (m_disregard_overdelivery_isSet) {
        obj.insert(QString("disregardOverdelivery"), ::OpenAPI::toJsonValue(m_disregard_overdelivery));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_flighted_isSet) {
        obj.insert(QString("flighted"), ::OpenAPI::toJsonValue(m_flighted));
    }
    if (m_floodlight_activity_id_isSet) {
        obj.insert(QString("floodlightActivityId"), ::OpenAPI::toJsonValue(m_floodlight_activity_id));
    }
    if (m_pricing_periods.size() > 0) {
        obj.insert(QString("pricingPeriods"), ::OpenAPI::toJsonValue(m_pricing_periods));
    }
    if (m_pricing_type_isSet) {
        obj.insert(QString("pricingType"), ::OpenAPI::toJsonValue(m_pricing_type));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_testing_start_date_isSet) {
        obj.insert(QString("testingStartDate"), ::OpenAPI::toJsonValue(m_testing_start_date));
    }
    return obj;
}

QString OAIPricingSchedule::getCapCostOption() const {
    return m_cap_cost_option;
}
void OAIPricingSchedule::setCapCostOption(const QString &cap_cost_option) {
    m_cap_cost_option = cap_cost_option;
    m_cap_cost_option_isSet = true;
}

bool OAIPricingSchedule::is_cap_cost_option_Set() const{
    return m_cap_cost_option_isSet;
}

bool OAIPricingSchedule::is_cap_cost_option_Valid() const{
    return m_cap_cost_option_isValid;
}

bool OAIPricingSchedule::isDisregardOverdelivery() const {
    return m_disregard_overdelivery;
}
void OAIPricingSchedule::setDisregardOverdelivery(const bool &disregard_overdelivery) {
    m_disregard_overdelivery = disregard_overdelivery;
    m_disregard_overdelivery_isSet = true;
}

bool OAIPricingSchedule::is_disregard_overdelivery_Set() const{
    return m_disregard_overdelivery_isSet;
}

bool OAIPricingSchedule::is_disregard_overdelivery_Valid() const{
    return m_disregard_overdelivery_isValid;
}

QDate OAIPricingSchedule::getEndDate() const {
    return m_end_date;
}
void OAIPricingSchedule::setEndDate(const QDate &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIPricingSchedule::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIPricingSchedule::is_end_date_Valid() const{
    return m_end_date_isValid;
}

bool OAIPricingSchedule::isFlighted() const {
    return m_flighted;
}
void OAIPricingSchedule::setFlighted(const bool &flighted) {
    m_flighted = flighted;
    m_flighted_isSet = true;
}

bool OAIPricingSchedule::is_flighted_Set() const{
    return m_flighted_isSet;
}

bool OAIPricingSchedule::is_flighted_Valid() const{
    return m_flighted_isValid;
}

QString OAIPricingSchedule::getFloodlightActivityId() const {
    return m_floodlight_activity_id;
}
void OAIPricingSchedule::setFloodlightActivityId(const QString &floodlight_activity_id) {
    m_floodlight_activity_id = floodlight_activity_id;
    m_floodlight_activity_id_isSet = true;
}

bool OAIPricingSchedule::is_floodlight_activity_id_Set() const{
    return m_floodlight_activity_id_isSet;
}

bool OAIPricingSchedule::is_floodlight_activity_id_Valid() const{
    return m_floodlight_activity_id_isValid;
}

QList<OAIPricingSchedulePricingPeriod> OAIPricingSchedule::getPricingPeriods() const {
    return m_pricing_periods;
}
void OAIPricingSchedule::setPricingPeriods(const QList<OAIPricingSchedulePricingPeriod> &pricing_periods) {
    m_pricing_periods = pricing_periods;
    m_pricing_periods_isSet = true;
}

bool OAIPricingSchedule::is_pricing_periods_Set() const{
    return m_pricing_periods_isSet;
}

bool OAIPricingSchedule::is_pricing_periods_Valid() const{
    return m_pricing_periods_isValid;
}

QString OAIPricingSchedule::getPricingType() const {
    return m_pricing_type;
}
void OAIPricingSchedule::setPricingType(const QString &pricing_type) {
    m_pricing_type = pricing_type;
    m_pricing_type_isSet = true;
}

bool OAIPricingSchedule::is_pricing_type_Set() const{
    return m_pricing_type_isSet;
}

bool OAIPricingSchedule::is_pricing_type_Valid() const{
    return m_pricing_type_isValid;
}

QDate OAIPricingSchedule::getStartDate() const {
    return m_start_date;
}
void OAIPricingSchedule::setStartDate(const QDate &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIPricingSchedule::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIPricingSchedule::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QDate OAIPricingSchedule::getTestingStartDate() const {
    return m_testing_start_date;
}
void OAIPricingSchedule::setTestingStartDate(const QDate &testing_start_date) {
    m_testing_start_date = testing_start_date;
    m_testing_start_date_isSet = true;
}

bool OAIPricingSchedule::is_testing_start_date_Set() const{
    return m_testing_start_date_isSet;
}

bool OAIPricingSchedule::is_testing_start_date_Valid() const{
    return m_testing_start_date_isValid;
}

bool OAIPricingSchedule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cap_cost_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disregard_overdelivery_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flighted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_floodlight_activity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pricing_periods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pricing_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_testing_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPricingSchedule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
