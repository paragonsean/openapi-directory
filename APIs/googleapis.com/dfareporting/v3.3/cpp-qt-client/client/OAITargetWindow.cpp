/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITargetWindow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITargetWindow::OAITargetWindow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITargetWindow::OAITargetWindow() {
    this->initializeModel();
}

OAITargetWindow::~OAITargetWindow() {}

void OAITargetWindow::initializeModel() {

    m_custom_html_isSet = false;
    m_custom_html_isValid = false;

    m_target_window_option_isSet = false;
    m_target_window_option_isValid = false;
}

void OAITargetWindow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITargetWindow::fromJsonObject(QJsonObject json) {

    m_custom_html_isValid = ::OpenAPI::fromJsonValue(m_custom_html, json[QString("customHtml")]);
    m_custom_html_isSet = !json[QString("customHtml")].isNull() && m_custom_html_isValid;

    m_target_window_option_isValid = ::OpenAPI::fromJsonValue(m_target_window_option, json[QString("targetWindowOption")]);
    m_target_window_option_isSet = !json[QString("targetWindowOption")].isNull() && m_target_window_option_isValid;
}

QString OAITargetWindow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITargetWindow::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_html_isSet) {
        obj.insert(QString("customHtml"), ::OpenAPI::toJsonValue(m_custom_html));
    }
    if (m_target_window_option_isSet) {
        obj.insert(QString("targetWindowOption"), ::OpenAPI::toJsonValue(m_target_window_option));
    }
    return obj;
}

QString OAITargetWindow::getCustomHtml() const {
    return m_custom_html;
}
void OAITargetWindow::setCustomHtml(const QString &custom_html) {
    m_custom_html = custom_html;
    m_custom_html_isSet = true;
}

bool OAITargetWindow::is_custom_html_Set() const{
    return m_custom_html_isSet;
}

bool OAITargetWindow::is_custom_html_Valid() const{
    return m_custom_html_isValid;
}

QString OAITargetWindow::getTargetWindowOption() const {
    return m_target_window_option;
}
void OAITargetWindow::setTargetWindowOption(const QString &target_window_option) {
    m_target_window_option = target_window_option;
    m_target_window_option_isSet = true;
}

bool OAITargetWindow::is_target_window_option_Set() const{
    return m_target_window_option_isSet;
}

bool OAITargetWindow::is_target_window_option_Valid() const{
    return m_target_window_option_isValid;
}

bool OAITargetWindow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_window_option_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITargetWindow::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
