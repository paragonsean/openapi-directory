/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreativeAssignment.h
 *
 * Creative Assignment.
 */

#ifndef OAICreativeAssignment_H
#define OAICreativeAssignment_H

#include <QJsonObject>

#include "OAIClickThroughUrl.h"
#include "OAICompanionClickThroughOverride.h"
#include "OAICreativeGroupAssignment.h"
#include "OAIDimensionValue.h"
#include "OAIRichMediaExitOverride.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIClickThroughUrl;
class OAICompanionClickThroughOverride;
class OAICreativeGroupAssignment;
class OAIDimensionValue;
class OAIRichMediaExitOverride;

class OAICreativeAssignment : public OAIObject {
public:
    OAICreativeAssignment();
    OAICreativeAssignment(QString json);
    ~OAICreativeAssignment() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isActive() const;
    void setActive(const bool &active);
    bool is_active_Set() const;
    bool is_active_Valid() const;

    bool isApplyEventTags() const;
    void setApplyEventTags(const bool &apply_event_tags);
    bool is_apply_event_tags_Set() const;
    bool is_apply_event_tags_Valid() const;

    OAIClickThroughUrl getClickThroughUrl() const;
    void setClickThroughUrl(const OAIClickThroughUrl &click_through_url);
    bool is_click_through_url_Set() const;
    bool is_click_through_url_Valid() const;

    QList<OAICompanionClickThroughOverride> getCompanionCreativeOverrides() const;
    void setCompanionCreativeOverrides(const QList<OAICompanionClickThroughOverride> &companion_creative_overrides);
    bool is_companion_creative_overrides_Set() const;
    bool is_companion_creative_overrides_Valid() const;

    QList<OAICreativeGroupAssignment> getCreativeGroupAssignments() const;
    void setCreativeGroupAssignments(const QList<OAICreativeGroupAssignment> &creative_group_assignments);
    bool is_creative_group_assignments_Set() const;
    bool is_creative_group_assignments_Valid() const;

    QString getCreativeId() const;
    void setCreativeId(const QString &creative_id);
    bool is_creative_id_Set() const;
    bool is_creative_id_Valid() const;

    OAIDimensionValue getCreativeIdDimensionValue() const;
    void setCreativeIdDimensionValue(const OAIDimensionValue &creative_id_dimension_value);
    bool is_creative_id_dimension_value_Set() const;
    bool is_creative_id_dimension_value_Valid() const;

    QDateTime getEndTime() const;
    void setEndTime(const QDateTime &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    QList<OAIRichMediaExitOverride> getRichMediaExitOverrides() const;
    void setRichMediaExitOverrides(const QList<OAIRichMediaExitOverride> &rich_media_exit_overrides);
    bool is_rich_media_exit_overrides_Set() const;
    bool is_rich_media_exit_overrides_Valid() const;

    qint32 getSequence() const;
    void setSequence(const qint32 &sequence);
    bool is_sequence_Set() const;
    bool is_sequence_Valid() const;

    bool isSslCompliant() const;
    void setSslCompliant(const bool &ssl_compliant);
    bool is_ssl_compliant_Set() const;
    bool is_ssl_compliant_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    qint32 getWeight() const;
    void setWeight(const qint32 &weight);
    bool is_weight_Set() const;
    bool is_weight_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_active;
    bool m_active_isSet;
    bool m_active_isValid;

    bool m_apply_event_tags;
    bool m_apply_event_tags_isSet;
    bool m_apply_event_tags_isValid;

    OAIClickThroughUrl m_click_through_url;
    bool m_click_through_url_isSet;
    bool m_click_through_url_isValid;

    QList<OAICompanionClickThroughOverride> m_companion_creative_overrides;
    bool m_companion_creative_overrides_isSet;
    bool m_companion_creative_overrides_isValid;

    QList<OAICreativeGroupAssignment> m_creative_group_assignments;
    bool m_creative_group_assignments_isSet;
    bool m_creative_group_assignments_isValid;

    QString m_creative_id;
    bool m_creative_id_isSet;
    bool m_creative_id_isValid;

    OAIDimensionValue m_creative_id_dimension_value;
    bool m_creative_id_dimension_value_isSet;
    bool m_creative_id_dimension_value_isValid;

    QDateTime m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    QList<OAIRichMediaExitOverride> m_rich_media_exit_overrides;
    bool m_rich_media_exit_overrides_isSet;
    bool m_rich_media_exit_overrides_isValid;

    qint32 m_sequence;
    bool m_sequence_isSet;
    bool m_sequence_isValid;

    bool m_ssl_compliant;
    bool m_ssl_compliant_isSet;
    bool m_ssl_compliant_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    qint32 m_weight;
    bool m_weight_isSet;
    bool m_weight_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreativeAssignment)

#endif // OAICreativeAssignment_H
