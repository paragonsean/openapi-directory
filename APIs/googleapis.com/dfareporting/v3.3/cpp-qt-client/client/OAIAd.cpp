/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAd.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAd::OAIAd(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAd::OAIAd() {
    this->initializeModel();
}

OAIAd::~OAIAd() {}

void OAIAd::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_active_isSet = false;
    m_active_isValid = false;

    m_advertiser_id_isSet = false;
    m_advertiser_id_isValid = false;

    m_advertiser_id_dimension_value_isSet = false;
    m_advertiser_id_dimension_value_isValid = false;

    m_archived_isSet = false;
    m_archived_isValid = false;

    m_audience_segment_id_isSet = false;
    m_audience_segment_id_isValid = false;

    m_campaign_id_isSet = false;
    m_campaign_id_isValid = false;

    m_campaign_id_dimension_value_isSet = false;
    m_campaign_id_dimension_value_isValid = false;

    m_click_through_url_isSet = false;
    m_click_through_url_isValid = false;

    m_click_through_url_suffix_properties_isSet = false;
    m_click_through_url_suffix_properties_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_compatibility_isSet = false;
    m_compatibility_isValid = false;

    m_create_info_isSet = false;
    m_create_info_isValid = false;

    m_creative_group_assignments_isSet = false;
    m_creative_group_assignments_isValid = false;

    m_creative_rotation_isSet = false;
    m_creative_rotation_isValid = false;

    m_day_part_targeting_isSet = false;
    m_day_part_targeting_isValid = false;

    m_default_click_through_event_tag_properties_isSet = false;
    m_default_click_through_event_tag_properties_isValid = false;

    m_delivery_schedule_isSet = false;
    m_delivery_schedule_isValid = false;

    m_dynamic_click_tracker_isSet = false;
    m_dynamic_click_tracker_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_event_tag_overrides_isSet = false;
    m_event_tag_overrides_isValid = false;

    m_geo_targeting_isSet = false;
    m_geo_targeting_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_id_dimension_value_isSet = false;
    m_id_dimension_value_isValid = false;

    m_key_value_targeting_expression_isSet = false;
    m_key_value_targeting_expression_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_language_targeting_isSet = false;
    m_language_targeting_isValid = false;

    m_last_modified_info_isSet = false;
    m_last_modified_info_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_placement_assignments_isSet = false;
    m_placement_assignments_isValid = false;

    m_remarketing_list_expression_isSet = false;
    m_remarketing_list_expression_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_ssl_compliant_isSet = false;
    m_ssl_compliant_isValid = false;

    m_ssl_required_isSet = false;
    m_ssl_required_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_subaccount_id_isSet = false;
    m_subaccount_id_isValid = false;

    m_targeting_template_id_isSet = false;
    m_targeting_template_id_isValid = false;

    m_technology_targeting_isSet = false;
    m_technology_targeting_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAd::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAd::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_advertiser_id_isValid = ::OpenAPI::fromJsonValue(m_advertiser_id, json[QString("advertiserId")]);
    m_advertiser_id_isSet = !json[QString("advertiserId")].isNull() && m_advertiser_id_isValid;

    m_advertiser_id_dimension_value_isValid = ::OpenAPI::fromJsonValue(m_advertiser_id_dimension_value, json[QString("advertiserIdDimensionValue")]);
    m_advertiser_id_dimension_value_isSet = !json[QString("advertiserIdDimensionValue")].isNull() && m_advertiser_id_dimension_value_isValid;

    m_archived_isValid = ::OpenAPI::fromJsonValue(m_archived, json[QString("archived")]);
    m_archived_isSet = !json[QString("archived")].isNull() && m_archived_isValid;

    m_audience_segment_id_isValid = ::OpenAPI::fromJsonValue(m_audience_segment_id, json[QString("audienceSegmentId")]);
    m_audience_segment_id_isSet = !json[QString("audienceSegmentId")].isNull() && m_audience_segment_id_isValid;

    m_campaign_id_isValid = ::OpenAPI::fromJsonValue(m_campaign_id, json[QString("campaignId")]);
    m_campaign_id_isSet = !json[QString("campaignId")].isNull() && m_campaign_id_isValid;

    m_campaign_id_dimension_value_isValid = ::OpenAPI::fromJsonValue(m_campaign_id_dimension_value, json[QString("campaignIdDimensionValue")]);
    m_campaign_id_dimension_value_isSet = !json[QString("campaignIdDimensionValue")].isNull() && m_campaign_id_dimension_value_isValid;

    m_click_through_url_isValid = ::OpenAPI::fromJsonValue(m_click_through_url, json[QString("clickThroughUrl")]);
    m_click_through_url_isSet = !json[QString("clickThroughUrl")].isNull() && m_click_through_url_isValid;

    m_click_through_url_suffix_properties_isValid = ::OpenAPI::fromJsonValue(m_click_through_url_suffix_properties, json[QString("clickThroughUrlSuffixProperties")]);
    m_click_through_url_suffix_properties_isSet = !json[QString("clickThroughUrlSuffixProperties")].isNull() && m_click_through_url_suffix_properties_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_compatibility_isValid = ::OpenAPI::fromJsonValue(m_compatibility, json[QString("compatibility")]);
    m_compatibility_isSet = !json[QString("compatibility")].isNull() && m_compatibility_isValid;

    m_create_info_isValid = ::OpenAPI::fromJsonValue(m_create_info, json[QString("createInfo")]);
    m_create_info_isSet = !json[QString("createInfo")].isNull() && m_create_info_isValid;

    m_creative_group_assignments_isValid = ::OpenAPI::fromJsonValue(m_creative_group_assignments, json[QString("creativeGroupAssignments")]);
    m_creative_group_assignments_isSet = !json[QString("creativeGroupAssignments")].isNull() && m_creative_group_assignments_isValid;

    m_creative_rotation_isValid = ::OpenAPI::fromJsonValue(m_creative_rotation, json[QString("creativeRotation")]);
    m_creative_rotation_isSet = !json[QString("creativeRotation")].isNull() && m_creative_rotation_isValid;

    m_day_part_targeting_isValid = ::OpenAPI::fromJsonValue(m_day_part_targeting, json[QString("dayPartTargeting")]);
    m_day_part_targeting_isSet = !json[QString("dayPartTargeting")].isNull() && m_day_part_targeting_isValid;

    m_default_click_through_event_tag_properties_isValid = ::OpenAPI::fromJsonValue(m_default_click_through_event_tag_properties, json[QString("defaultClickThroughEventTagProperties")]);
    m_default_click_through_event_tag_properties_isSet = !json[QString("defaultClickThroughEventTagProperties")].isNull() && m_default_click_through_event_tag_properties_isValid;

    m_delivery_schedule_isValid = ::OpenAPI::fromJsonValue(m_delivery_schedule, json[QString("deliverySchedule")]);
    m_delivery_schedule_isSet = !json[QString("deliverySchedule")].isNull() && m_delivery_schedule_isValid;

    m_dynamic_click_tracker_isValid = ::OpenAPI::fromJsonValue(m_dynamic_click_tracker, json[QString("dynamicClickTracker")]);
    m_dynamic_click_tracker_isSet = !json[QString("dynamicClickTracker")].isNull() && m_dynamic_click_tracker_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_event_tag_overrides_isValid = ::OpenAPI::fromJsonValue(m_event_tag_overrides, json[QString("eventTagOverrides")]);
    m_event_tag_overrides_isSet = !json[QString("eventTagOverrides")].isNull() && m_event_tag_overrides_isValid;

    m_geo_targeting_isValid = ::OpenAPI::fromJsonValue(m_geo_targeting, json[QString("geoTargeting")]);
    m_geo_targeting_isSet = !json[QString("geoTargeting")].isNull() && m_geo_targeting_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_id_dimension_value_isValid = ::OpenAPI::fromJsonValue(m_id_dimension_value, json[QString("idDimensionValue")]);
    m_id_dimension_value_isSet = !json[QString("idDimensionValue")].isNull() && m_id_dimension_value_isValid;

    m_key_value_targeting_expression_isValid = ::OpenAPI::fromJsonValue(m_key_value_targeting_expression, json[QString("keyValueTargetingExpression")]);
    m_key_value_targeting_expression_isSet = !json[QString("keyValueTargetingExpression")].isNull() && m_key_value_targeting_expression_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_language_targeting_isValid = ::OpenAPI::fromJsonValue(m_language_targeting, json[QString("languageTargeting")]);
    m_language_targeting_isSet = !json[QString("languageTargeting")].isNull() && m_language_targeting_isValid;

    m_last_modified_info_isValid = ::OpenAPI::fromJsonValue(m_last_modified_info, json[QString("lastModifiedInfo")]);
    m_last_modified_info_isSet = !json[QString("lastModifiedInfo")].isNull() && m_last_modified_info_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_placement_assignments_isValid = ::OpenAPI::fromJsonValue(m_placement_assignments, json[QString("placementAssignments")]);
    m_placement_assignments_isSet = !json[QString("placementAssignments")].isNull() && m_placement_assignments_isValid;

    m_remarketing_list_expression_isValid = ::OpenAPI::fromJsonValue(m_remarketing_list_expression, json[QString("remarketingListExpression")]);
    m_remarketing_list_expression_isSet = !json[QString("remarketingListExpression")].isNull() && m_remarketing_list_expression_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_ssl_compliant_isValid = ::OpenAPI::fromJsonValue(m_ssl_compliant, json[QString("sslCompliant")]);
    m_ssl_compliant_isSet = !json[QString("sslCompliant")].isNull() && m_ssl_compliant_isValid;

    m_ssl_required_isValid = ::OpenAPI::fromJsonValue(m_ssl_required, json[QString("sslRequired")]);
    m_ssl_required_isSet = !json[QString("sslRequired")].isNull() && m_ssl_required_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_subaccount_id_isValid = ::OpenAPI::fromJsonValue(m_subaccount_id, json[QString("subaccountId")]);
    m_subaccount_id_isSet = !json[QString("subaccountId")].isNull() && m_subaccount_id_isValid;

    m_targeting_template_id_isValid = ::OpenAPI::fromJsonValue(m_targeting_template_id, json[QString("targetingTemplateId")]);
    m_targeting_template_id_isSet = !json[QString("targetingTemplateId")].isNull() && m_targeting_template_id_isValid;

    m_technology_targeting_isValid = ::OpenAPI::fromJsonValue(m_technology_targeting, json[QString("technologyTargeting")]);
    m_technology_targeting_isSet = !json[QString("technologyTargeting")].isNull() && m_technology_targeting_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAd::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAd::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_advertiser_id_isSet) {
        obj.insert(QString("advertiserId"), ::OpenAPI::toJsonValue(m_advertiser_id));
    }
    if (m_advertiser_id_dimension_value.isSet()) {
        obj.insert(QString("advertiserIdDimensionValue"), ::OpenAPI::toJsonValue(m_advertiser_id_dimension_value));
    }
    if (m_archived_isSet) {
        obj.insert(QString("archived"), ::OpenAPI::toJsonValue(m_archived));
    }
    if (m_audience_segment_id_isSet) {
        obj.insert(QString("audienceSegmentId"), ::OpenAPI::toJsonValue(m_audience_segment_id));
    }
    if (m_campaign_id_isSet) {
        obj.insert(QString("campaignId"), ::OpenAPI::toJsonValue(m_campaign_id));
    }
    if (m_campaign_id_dimension_value.isSet()) {
        obj.insert(QString("campaignIdDimensionValue"), ::OpenAPI::toJsonValue(m_campaign_id_dimension_value));
    }
    if (m_click_through_url.isSet()) {
        obj.insert(QString("clickThroughUrl"), ::OpenAPI::toJsonValue(m_click_through_url));
    }
    if (m_click_through_url_suffix_properties.isSet()) {
        obj.insert(QString("clickThroughUrlSuffixProperties"), ::OpenAPI::toJsonValue(m_click_through_url_suffix_properties));
    }
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_compatibility_isSet) {
        obj.insert(QString("compatibility"), ::OpenAPI::toJsonValue(m_compatibility));
    }
    if (m_create_info.isSet()) {
        obj.insert(QString("createInfo"), ::OpenAPI::toJsonValue(m_create_info));
    }
    if (m_creative_group_assignments.size() > 0) {
        obj.insert(QString("creativeGroupAssignments"), ::OpenAPI::toJsonValue(m_creative_group_assignments));
    }
    if (m_creative_rotation.isSet()) {
        obj.insert(QString("creativeRotation"), ::OpenAPI::toJsonValue(m_creative_rotation));
    }
    if (m_day_part_targeting.isSet()) {
        obj.insert(QString("dayPartTargeting"), ::OpenAPI::toJsonValue(m_day_part_targeting));
    }
    if (m_default_click_through_event_tag_properties.isSet()) {
        obj.insert(QString("defaultClickThroughEventTagProperties"), ::OpenAPI::toJsonValue(m_default_click_through_event_tag_properties));
    }
    if (m_delivery_schedule.isSet()) {
        obj.insert(QString("deliverySchedule"), ::OpenAPI::toJsonValue(m_delivery_schedule));
    }
    if (m_dynamic_click_tracker_isSet) {
        obj.insert(QString("dynamicClickTracker"), ::OpenAPI::toJsonValue(m_dynamic_click_tracker));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_event_tag_overrides.size() > 0) {
        obj.insert(QString("eventTagOverrides"), ::OpenAPI::toJsonValue(m_event_tag_overrides));
    }
    if (m_geo_targeting.isSet()) {
        obj.insert(QString("geoTargeting"), ::OpenAPI::toJsonValue(m_geo_targeting));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_id_dimension_value.isSet()) {
        obj.insert(QString("idDimensionValue"), ::OpenAPI::toJsonValue(m_id_dimension_value));
    }
    if (m_key_value_targeting_expression.isSet()) {
        obj.insert(QString("keyValueTargetingExpression"), ::OpenAPI::toJsonValue(m_key_value_targeting_expression));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_language_targeting.isSet()) {
        obj.insert(QString("languageTargeting"), ::OpenAPI::toJsonValue(m_language_targeting));
    }
    if (m_last_modified_info.isSet()) {
        obj.insert(QString("lastModifiedInfo"), ::OpenAPI::toJsonValue(m_last_modified_info));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_placement_assignments.size() > 0) {
        obj.insert(QString("placementAssignments"), ::OpenAPI::toJsonValue(m_placement_assignments));
    }
    if (m_remarketing_list_expression.isSet()) {
        obj.insert(QString("remarketingListExpression"), ::OpenAPI::toJsonValue(m_remarketing_list_expression));
    }
    if (m_size.isSet()) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_ssl_compliant_isSet) {
        obj.insert(QString("sslCompliant"), ::OpenAPI::toJsonValue(m_ssl_compliant));
    }
    if (m_ssl_required_isSet) {
        obj.insert(QString("sslRequired"), ::OpenAPI::toJsonValue(m_ssl_required));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_subaccount_id_isSet) {
        obj.insert(QString("subaccountId"), ::OpenAPI::toJsonValue(m_subaccount_id));
    }
    if (m_targeting_template_id_isSet) {
        obj.insert(QString("targetingTemplateId"), ::OpenAPI::toJsonValue(m_targeting_template_id));
    }
    if (m_technology_targeting.isSet()) {
        obj.insert(QString("technologyTargeting"), ::OpenAPI::toJsonValue(m_technology_targeting));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIAd::getAccountId() const {
    return m_account_id;
}
void OAIAd::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIAd::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIAd::is_account_id_Valid() const{
    return m_account_id_isValid;
}

bool OAIAd::isActive() const {
    return m_active;
}
void OAIAd::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIAd::is_active_Set() const{
    return m_active_isSet;
}

bool OAIAd::is_active_Valid() const{
    return m_active_isValid;
}

QString OAIAd::getAdvertiserId() const {
    return m_advertiser_id;
}
void OAIAd::setAdvertiserId(const QString &advertiser_id) {
    m_advertiser_id = advertiser_id;
    m_advertiser_id_isSet = true;
}

bool OAIAd::is_advertiser_id_Set() const{
    return m_advertiser_id_isSet;
}

bool OAIAd::is_advertiser_id_Valid() const{
    return m_advertiser_id_isValid;
}

OAIDimensionValue OAIAd::getAdvertiserIdDimensionValue() const {
    return m_advertiser_id_dimension_value;
}
void OAIAd::setAdvertiserIdDimensionValue(const OAIDimensionValue &advertiser_id_dimension_value) {
    m_advertiser_id_dimension_value = advertiser_id_dimension_value;
    m_advertiser_id_dimension_value_isSet = true;
}

bool OAIAd::is_advertiser_id_dimension_value_Set() const{
    return m_advertiser_id_dimension_value_isSet;
}

bool OAIAd::is_advertiser_id_dimension_value_Valid() const{
    return m_advertiser_id_dimension_value_isValid;
}

bool OAIAd::isArchived() const {
    return m_archived;
}
void OAIAd::setArchived(const bool &archived) {
    m_archived = archived;
    m_archived_isSet = true;
}

bool OAIAd::is_archived_Set() const{
    return m_archived_isSet;
}

bool OAIAd::is_archived_Valid() const{
    return m_archived_isValid;
}

QString OAIAd::getAudienceSegmentId() const {
    return m_audience_segment_id;
}
void OAIAd::setAudienceSegmentId(const QString &audience_segment_id) {
    m_audience_segment_id = audience_segment_id;
    m_audience_segment_id_isSet = true;
}

bool OAIAd::is_audience_segment_id_Set() const{
    return m_audience_segment_id_isSet;
}

bool OAIAd::is_audience_segment_id_Valid() const{
    return m_audience_segment_id_isValid;
}

QString OAIAd::getCampaignId() const {
    return m_campaign_id;
}
void OAIAd::setCampaignId(const QString &campaign_id) {
    m_campaign_id = campaign_id;
    m_campaign_id_isSet = true;
}

bool OAIAd::is_campaign_id_Set() const{
    return m_campaign_id_isSet;
}

bool OAIAd::is_campaign_id_Valid() const{
    return m_campaign_id_isValid;
}

OAIDimensionValue OAIAd::getCampaignIdDimensionValue() const {
    return m_campaign_id_dimension_value;
}
void OAIAd::setCampaignIdDimensionValue(const OAIDimensionValue &campaign_id_dimension_value) {
    m_campaign_id_dimension_value = campaign_id_dimension_value;
    m_campaign_id_dimension_value_isSet = true;
}

bool OAIAd::is_campaign_id_dimension_value_Set() const{
    return m_campaign_id_dimension_value_isSet;
}

bool OAIAd::is_campaign_id_dimension_value_Valid() const{
    return m_campaign_id_dimension_value_isValid;
}

OAIClickThroughUrl OAIAd::getClickThroughUrl() const {
    return m_click_through_url;
}
void OAIAd::setClickThroughUrl(const OAIClickThroughUrl &click_through_url) {
    m_click_through_url = click_through_url;
    m_click_through_url_isSet = true;
}

bool OAIAd::is_click_through_url_Set() const{
    return m_click_through_url_isSet;
}

bool OAIAd::is_click_through_url_Valid() const{
    return m_click_through_url_isValid;
}

OAIClickThroughUrlSuffixProperties OAIAd::getClickThroughUrlSuffixProperties() const {
    return m_click_through_url_suffix_properties;
}
void OAIAd::setClickThroughUrlSuffixProperties(const OAIClickThroughUrlSuffixProperties &click_through_url_suffix_properties) {
    m_click_through_url_suffix_properties = click_through_url_suffix_properties;
    m_click_through_url_suffix_properties_isSet = true;
}

bool OAIAd::is_click_through_url_suffix_properties_Set() const{
    return m_click_through_url_suffix_properties_isSet;
}

bool OAIAd::is_click_through_url_suffix_properties_Valid() const{
    return m_click_through_url_suffix_properties_isValid;
}

QString OAIAd::getComments() const {
    return m_comments;
}
void OAIAd::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIAd::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIAd::is_comments_Valid() const{
    return m_comments_isValid;
}

QString OAIAd::getCompatibility() const {
    return m_compatibility;
}
void OAIAd::setCompatibility(const QString &compatibility) {
    m_compatibility = compatibility;
    m_compatibility_isSet = true;
}

bool OAIAd::is_compatibility_Set() const{
    return m_compatibility_isSet;
}

bool OAIAd::is_compatibility_Valid() const{
    return m_compatibility_isValid;
}

OAILastModifiedInfo OAIAd::getCreateInfo() const {
    return m_create_info;
}
void OAIAd::setCreateInfo(const OAILastModifiedInfo &create_info) {
    m_create_info = create_info;
    m_create_info_isSet = true;
}

bool OAIAd::is_create_info_Set() const{
    return m_create_info_isSet;
}

bool OAIAd::is_create_info_Valid() const{
    return m_create_info_isValid;
}

QList<OAICreativeGroupAssignment> OAIAd::getCreativeGroupAssignments() const {
    return m_creative_group_assignments;
}
void OAIAd::setCreativeGroupAssignments(const QList<OAICreativeGroupAssignment> &creative_group_assignments) {
    m_creative_group_assignments = creative_group_assignments;
    m_creative_group_assignments_isSet = true;
}

bool OAIAd::is_creative_group_assignments_Set() const{
    return m_creative_group_assignments_isSet;
}

bool OAIAd::is_creative_group_assignments_Valid() const{
    return m_creative_group_assignments_isValid;
}

OAICreativeRotation OAIAd::getCreativeRotation() const {
    return m_creative_rotation;
}
void OAIAd::setCreativeRotation(const OAICreativeRotation &creative_rotation) {
    m_creative_rotation = creative_rotation;
    m_creative_rotation_isSet = true;
}

bool OAIAd::is_creative_rotation_Set() const{
    return m_creative_rotation_isSet;
}

bool OAIAd::is_creative_rotation_Valid() const{
    return m_creative_rotation_isValid;
}

OAIDayPartTargeting OAIAd::getDayPartTargeting() const {
    return m_day_part_targeting;
}
void OAIAd::setDayPartTargeting(const OAIDayPartTargeting &day_part_targeting) {
    m_day_part_targeting = day_part_targeting;
    m_day_part_targeting_isSet = true;
}

bool OAIAd::is_day_part_targeting_Set() const{
    return m_day_part_targeting_isSet;
}

bool OAIAd::is_day_part_targeting_Valid() const{
    return m_day_part_targeting_isValid;
}

OAIDefaultClickThroughEventTagProperties OAIAd::getDefaultClickThroughEventTagProperties() const {
    return m_default_click_through_event_tag_properties;
}
void OAIAd::setDefaultClickThroughEventTagProperties(const OAIDefaultClickThroughEventTagProperties &default_click_through_event_tag_properties) {
    m_default_click_through_event_tag_properties = default_click_through_event_tag_properties;
    m_default_click_through_event_tag_properties_isSet = true;
}

bool OAIAd::is_default_click_through_event_tag_properties_Set() const{
    return m_default_click_through_event_tag_properties_isSet;
}

bool OAIAd::is_default_click_through_event_tag_properties_Valid() const{
    return m_default_click_through_event_tag_properties_isValid;
}

OAIDeliverySchedule OAIAd::getDeliverySchedule() const {
    return m_delivery_schedule;
}
void OAIAd::setDeliverySchedule(const OAIDeliverySchedule &delivery_schedule) {
    m_delivery_schedule = delivery_schedule;
    m_delivery_schedule_isSet = true;
}

bool OAIAd::is_delivery_schedule_Set() const{
    return m_delivery_schedule_isSet;
}

bool OAIAd::is_delivery_schedule_Valid() const{
    return m_delivery_schedule_isValid;
}

bool OAIAd::isDynamicClickTracker() const {
    return m_dynamic_click_tracker;
}
void OAIAd::setDynamicClickTracker(const bool &dynamic_click_tracker) {
    m_dynamic_click_tracker = dynamic_click_tracker;
    m_dynamic_click_tracker_isSet = true;
}

bool OAIAd::is_dynamic_click_tracker_Set() const{
    return m_dynamic_click_tracker_isSet;
}

bool OAIAd::is_dynamic_click_tracker_Valid() const{
    return m_dynamic_click_tracker_isValid;
}

QDateTime OAIAd::getEndTime() const {
    return m_end_time;
}
void OAIAd::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIAd::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIAd::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QList<OAIEventTagOverride> OAIAd::getEventTagOverrides() const {
    return m_event_tag_overrides;
}
void OAIAd::setEventTagOverrides(const QList<OAIEventTagOverride> &event_tag_overrides) {
    m_event_tag_overrides = event_tag_overrides;
    m_event_tag_overrides_isSet = true;
}

bool OAIAd::is_event_tag_overrides_Set() const{
    return m_event_tag_overrides_isSet;
}

bool OAIAd::is_event_tag_overrides_Valid() const{
    return m_event_tag_overrides_isValid;
}

OAIGeoTargeting OAIAd::getGeoTargeting() const {
    return m_geo_targeting;
}
void OAIAd::setGeoTargeting(const OAIGeoTargeting &geo_targeting) {
    m_geo_targeting = geo_targeting;
    m_geo_targeting_isSet = true;
}

bool OAIAd::is_geo_targeting_Set() const{
    return m_geo_targeting_isSet;
}

bool OAIAd::is_geo_targeting_Valid() const{
    return m_geo_targeting_isValid;
}

QString OAIAd::getId() const {
    return m_id;
}
void OAIAd::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAd::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAd::is_id_Valid() const{
    return m_id_isValid;
}

OAIDimensionValue OAIAd::getIdDimensionValue() const {
    return m_id_dimension_value;
}
void OAIAd::setIdDimensionValue(const OAIDimensionValue &id_dimension_value) {
    m_id_dimension_value = id_dimension_value;
    m_id_dimension_value_isSet = true;
}

bool OAIAd::is_id_dimension_value_Set() const{
    return m_id_dimension_value_isSet;
}

bool OAIAd::is_id_dimension_value_Valid() const{
    return m_id_dimension_value_isValid;
}

OAIKeyValueTargetingExpression OAIAd::getKeyValueTargetingExpression() const {
    return m_key_value_targeting_expression;
}
void OAIAd::setKeyValueTargetingExpression(const OAIKeyValueTargetingExpression &key_value_targeting_expression) {
    m_key_value_targeting_expression = key_value_targeting_expression;
    m_key_value_targeting_expression_isSet = true;
}

bool OAIAd::is_key_value_targeting_expression_Set() const{
    return m_key_value_targeting_expression_isSet;
}

bool OAIAd::is_key_value_targeting_expression_Valid() const{
    return m_key_value_targeting_expression_isValid;
}

QString OAIAd::getKind() const {
    return m_kind;
}
void OAIAd::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIAd::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIAd::is_kind_Valid() const{
    return m_kind_isValid;
}

OAILanguageTargeting OAIAd::getLanguageTargeting() const {
    return m_language_targeting;
}
void OAIAd::setLanguageTargeting(const OAILanguageTargeting &language_targeting) {
    m_language_targeting = language_targeting;
    m_language_targeting_isSet = true;
}

bool OAIAd::is_language_targeting_Set() const{
    return m_language_targeting_isSet;
}

bool OAIAd::is_language_targeting_Valid() const{
    return m_language_targeting_isValid;
}

OAILastModifiedInfo OAIAd::getLastModifiedInfo() const {
    return m_last_modified_info;
}
void OAIAd::setLastModifiedInfo(const OAILastModifiedInfo &last_modified_info) {
    m_last_modified_info = last_modified_info;
    m_last_modified_info_isSet = true;
}

bool OAIAd::is_last_modified_info_Set() const{
    return m_last_modified_info_isSet;
}

bool OAIAd::is_last_modified_info_Valid() const{
    return m_last_modified_info_isValid;
}

QString OAIAd::getName() const {
    return m_name;
}
void OAIAd::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAd::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAd::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIPlacementAssignment> OAIAd::getPlacementAssignments() const {
    return m_placement_assignments;
}
void OAIAd::setPlacementAssignments(const QList<OAIPlacementAssignment> &placement_assignments) {
    m_placement_assignments = placement_assignments;
    m_placement_assignments_isSet = true;
}

bool OAIAd::is_placement_assignments_Set() const{
    return m_placement_assignments_isSet;
}

bool OAIAd::is_placement_assignments_Valid() const{
    return m_placement_assignments_isValid;
}

OAIListTargetingExpression OAIAd::getRemarketingListExpression() const {
    return m_remarketing_list_expression;
}
void OAIAd::setRemarketingListExpression(const OAIListTargetingExpression &remarketing_list_expression) {
    m_remarketing_list_expression = remarketing_list_expression;
    m_remarketing_list_expression_isSet = true;
}

bool OAIAd::is_remarketing_list_expression_Set() const{
    return m_remarketing_list_expression_isSet;
}

bool OAIAd::is_remarketing_list_expression_Valid() const{
    return m_remarketing_list_expression_isValid;
}

OAISize OAIAd::getSize() const {
    return m_size;
}
void OAIAd::setSize(const OAISize &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIAd::is_size_Set() const{
    return m_size_isSet;
}

bool OAIAd::is_size_Valid() const{
    return m_size_isValid;
}

bool OAIAd::isSslCompliant() const {
    return m_ssl_compliant;
}
void OAIAd::setSslCompliant(const bool &ssl_compliant) {
    m_ssl_compliant = ssl_compliant;
    m_ssl_compliant_isSet = true;
}

bool OAIAd::is_ssl_compliant_Set() const{
    return m_ssl_compliant_isSet;
}

bool OAIAd::is_ssl_compliant_Valid() const{
    return m_ssl_compliant_isValid;
}

bool OAIAd::isSslRequired() const {
    return m_ssl_required;
}
void OAIAd::setSslRequired(const bool &ssl_required) {
    m_ssl_required = ssl_required;
    m_ssl_required_isSet = true;
}

bool OAIAd::is_ssl_required_Set() const{
    return m_ssl_required_isSet;
}

bool OAIAd::is_ssl_required_Valid() const{
    return m_ssl_required_isValid;
}

QDateTime OAIAd::getStartTime() const {
    return m_start_time;
}
void OAIAd::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIAd::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIAd::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIAd::getSubaccountId() const {
    return m_subaccount_id;
}
void OAIAd::setSubaccountId(const QString &subaccount_id) {
    m_subaccount_id = subaccount_id;
    m_subaccount_id_isSet = true;
}

bool OAIAd::is_subaccount_id_Set() const{
    return m_subaccount_id_isSet;
}

bool OAIAd::is_subaccount_id_Valid() const{
    return m_subaccount_id_isValid;
}

QString OAIAd::getTargetingTemplateId() const {
    return m_targeting_template_id;
}
void OAIAd::setTargetingTemplateId(const QString &targeting_template_id) {
    m_targeting_template_id = targeting_template_id;
    m_targeting_template_id_isSet = true;
}

bool OAIAd::is_targeting_template_id_Set() const{
    return m_targeting_template_id_isSet;
}

bool OAIAd::is_targeting_template_id_Valid() const{
    return m_targeting_template_id_isValid;
}

OAITechnologyTargeting OAIAd::getTechnologyTargeting() const {
    return m_technology_targeting;
}
void OAIAd::setTechnologyTargeting(const OAITechnologyTargeting &technology_targeting) {
    m_technology_targeting = technology_targeting;
    m_technology_targeting_isSet = true;
}

bool OAIAd::is_technology_targeting_Set() const{
    return m_technology_targeting_isSet;
}

bool OAIAd::is_technology_targeting_Valid() const{
    return m_technology_targeting_isValid;
}

QString OAIAd::getType() const {
    return m_type;
}
void OAIAd::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAd::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAd::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAd::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_advertiser_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_advertiser_id_dimension_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_archived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audience_segment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_campaign_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_campaign_id_dimension_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_click_through_url.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_click_through_url_suffix_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compatibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creative_group_assignments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_creative_rotation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_part_targeting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_click_through_event_tag_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dynamic_click_tracker_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_tag_overrides.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo_targeting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_dimension_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_value_targeting_expression.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_targeting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement_assignments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_remarketing_list_expression.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_size.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_compliant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subaccount_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_targeting_template_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_technology_targeting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAd::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
