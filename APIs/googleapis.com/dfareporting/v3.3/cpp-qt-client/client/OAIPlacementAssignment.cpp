/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlacementAssignment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlacementAssignment::OAIPlacementAssignment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlacementAssignment::OAIPlacementAssignment() {
    this->initializeModel();
}

OAIPlacementAssignment::~OAIPlacementAssignment() {}

void OAIPlacementAssignment::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_placement_id_isSet = false;
    m_placement_id_isValid = false;

    m_placement_id_dimension_value_isSet = false;
    m_placement_id_dimension_value_isValid = false;

    m_ssl_required_isSet = false;
    m_ssl_required_isValid = false;
}

void OAIPlacementAssignment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlacementAssignment::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_placement_id_isValid = ::OpenAPI::fromJsonValue(m_placement_id, json[QString("placementId")]);
    m_placement_id_isSet = !json[QString("placementId")].isNull() && m_placement_id_isValid;

    m_placement_id_dimension_value_isValid = ::OpenAPI::fromJsonValue(m_placement_id_dimension_value, json[QString("placementIdDimensionValue")]);
    m_placement_id_dimension_value_isSet = !json[QString("placementIdDimensionValue")].isNull() && m_placement_id_dimension_value_isValid;

    m_ssl_required_isValid = ::OpenAPI::fromJsonValue(m_ssl_required, json[QString("sslRequired")]);
    m_ssl_required_isSet = !json[QString("sslRequired")].isNull() && m_ssl_required_isValid;
}

QString OAIPlacementAssignment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlacementAssignment::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_placement_id_isSet) {
        obj.insert(QString("placementId"), ::OpenAPI::toJsonValue(m_placement_id));
    }
    if (m_placement_id_dimension_value.isSet()) {
        obj.insert(QString("placementIdDimensionValue"), ::OpenAPI::toJsonValue(m_placement_id_dimension_value));
    }
    if (m_ssl_required_isSet) {
        obj.insert(QString("sslRequired"), ::OpenAPI::toJsonValue(m_ssl_required));
    }
    return obj;
}

bool OAIPlacementAssignment::isActive() const {
    return m_active;
}
void OAIPlacementAssignment::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIPlacementAssignment::is_active_Set() const{
    return m_active_isSet;
}

bool OAIPlacementAssignment::is_active_Valid() const{
    return m_active_isValid;
}

QString OAIPlacementAssignment::getPlacementId() const {
    return m_placement_id;
}
void OAIPlacementAssignment::setPlacementId(const QString &placement_id) {
    m_placement_id = placement_id;
    m_placement_id_isSet = true;
}

bool OAIPlacementAssignment::is_placement_id_Set() const{
    return m_placement_id_isSet;
}

bool OAIPlacementAssignment::is_placement_id_Valid() const{
    return m_placement_id_isValid;
}

OAIDimensionValue OAIPlacementAssignment::getPlacementIdDimensionValue() const {
    return m_placement_id_dimension_value;
}
void OAIPlacementAssignment::setPlacementIdDimensionValue(const OAIDimensionValue &placement_id_dimension_value) {
    m_placement_id_dimension_value = placement_id_dimension_value;
    m_placement_id_dimension_value_isSet = true;
}

bool OAIPlacementAssignment::is_placement_id_dimension_value_Set() const{
    return m_placement_id_dimension_value_isSet;
}

bool OAIPlacementAssignment::is_placement_id_dimension_value_Valid() const{
    return m_placement_id_dimension_value_isValid;
}

bool OAIPlacementAssignment::isSslRequired() const {
    return m_ssl_required;
}
void OAIPlacementAssignment::setSslRequired(const bool &ssl_required) {
    m_ssl_required = ssl_required;
    m_ssl_required_isSet = true;
}

bool OAIPlacementAssignment::is_ssl_required_Set() const{
    return m_ssl_required_isSet;
}

bool OAIPlacementAssignment::is_ssl_required_Valid() const{
    return m_ssl_required_isValid;
}

bool OAIPlacementAssignment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement_id_dimension_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_required_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlacementAssignment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
