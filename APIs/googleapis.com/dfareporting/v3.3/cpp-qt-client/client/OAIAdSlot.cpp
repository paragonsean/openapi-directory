/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdSlot.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdSlot::OAIAdSlot(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdSlot::OAIAdSlot() {
    this->initializeModel();
}

OAIAdSlot::~OAIAdSlot() {}

void OAIAdSlot::initializeModel() {

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_compatibility_isSet = false;
    m_compatibility_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_linked_placement_id_isSet = false;
    m_linked_placement_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_payment_source_type_isSet = false;
    m_payment_source_type_isValid = false;

    m_primary_isSet = false;
    m_primary_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIAdSlot::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdSlot::fromJsonObject(QJsonObject json) {

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_compatibility_isValid = ::OpenAPI::fromJsonValue(m_compatibility, json[QString("compatibility")]);
    m_compatibility_isSet = !json[QString("compatibility")].isNull() && m_compatibility_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_linked_placement_id_isValid = ::OpenAPI::fromJsonValue(m_linked_placement_id, json[QString("linkedPlacementId")]);
    m_linked_placement_id_isSet = !json[QString("linkedPlacementId")].isNull() && m_linked_placement_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_payment_source_type_isValid = ::OpenAPI::fromJsonValue(m_payment_source_type, json[QString("paymentSourceType")]);
    m_payment_source_type_isSet = !json[QString("paymentSourceType")].isNull() && m_payment_source_type_isValid;

    m_primary_isValid = ::OpenAPI::fromJsonValue(m_primary, json[QString("primary")]);
    m_primary_isSet = !json[QString("primary")].isNull() && m_primary_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIAdSlot::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdSlot::asJsonObject() const {
    QJsonObject obj;
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_compatibility_isSet) {
        obj.insert(QString("compatibility"), ::OpenAPI::toJsonValue(m_compatibility));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_linked_placement_id_isSet) {
        obj.insert(QString("linkedPlacementId"), ::OpenAPI::toJsonValue(m_linked_placement_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_payment_source_type_isSet) {
        obj.insert(QString("paymentSourceType"), ::OpenAPI::toJsonValue(m_payment_source_type));
    }
    if (m_primary_isSet) {
        obj.insert(QString("primary"), ::OpenAPI::toJsonValue(m_primary));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QString OAIAdSlot::getComment() const {
    return m_comment;
}
void OAIAdSlot::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIAdSlot::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIAdSlot::is_comment_Valid() const{
    return m_comment_isValid;
}

QString OAIAdSlot::getCompatibility() const {
    return m_compatibility;
}
void OAIAdSlot::setCompatibility(const QString &compatibility) {
    m_compatibility = compatibility;
    m_compatibility_isSet = true;
}

bool OAIAdSlot::is_compatibility_Set() const{
    return m_compatibility_isSet;
}

bool OAIAdSlot::is_compatibility_Valid() const{
    return m_compatibility_isValid;
}

QString OAIAdSlot::getHeight() const {
    return m_height;
}
void OAIAdSlot::setHeight(const QString &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIAdSlot::is_height_Set() const{
    return m_height_isSet;
}

bool OAIAdSlot::is_height_Valid() const{
    return m_height_isValid;
}

QString OAIAdSlot::getLinkedPlacementId() const {
    return m_linked_placement_id;
}
void OAIAdSlot::setLinkedPlacementId(const QString &linked_placement_id) {
    m_linked_placement_id = linked_placement_id;
    m_linked_placement_id_isSet = true;
}

bool OAIAdSlot::is_linked_placement_id_Set() const{
    return m_linked_placement_id_isSet;
}

bool OAIAdSlot::is_linked_placement_id_Valid() const{
    return m_linked_placement_id_isValid;
}

QString OAIAdSlot::getName() const {
    return m_name;
}
void OAIAdSlot::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAdSlot::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAdSlot::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAdSlot::getPaymentSourceType() const {
    return m_payment_source_type;
}
void OAIAdSlot::setPaymentSourceType(const QString &payment_source_type) {
    m_payment_source_type = payment_source_type;
    m_payment_source_type_isSet = true;
}

bool OAIAdSlot::is_payment_source_type_Set() const{
    return m_payment_source_type_isSet;
}

bool OAIAdSlot::is_payment_source_type_Valid() const{
    return m_payment_source_type_isValid;
}

bool OAIAdSlot::isPrimary() const {
    return m_primary;
}
void OAIAdSlot::setPrimary(const bool &primary) {
    m_primary = primary;
    m_primary_isSet = true;
}

bool OAIAdSlot::is_primary_Set() const{
    return m_primary_isSet;
}

bool OAIAdSlot::is_primary_Valid() const{
    return m_primary_isValid;
}

QString OAIAdSlot::getWidth() const {
    return m_width;
}
void OAIAdSlot::setWidth(const QString &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIAdSlot::is_width_Set() const{
    return m_width_isSet;
}

bool OAIAdSlot::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIAdSlot::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compatibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_placement_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_source_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdSlot::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
