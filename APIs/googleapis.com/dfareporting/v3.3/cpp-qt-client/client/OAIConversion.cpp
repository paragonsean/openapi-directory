/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConversion::OAIConversion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConversion::OAIConversion() {
    this->initializeModel();
}

OAIConversion::~OAIConversion() {}

void OAIConversion::initializeModel() {

    m_child_directed_treatment_isSet = false;
    m_child_directed_treatment_isValid = false;

    m_custom_variables_isSet = false;
    m_custom_variables_isValid = false;

    m_encrypted_user_id_isSet = false;
    m_encrypted_user_id_isValid = false;

    m_encrypted_user_id_candidates_isSet = false;
    m_encrypted_user_id_candidates_isValid = false;

    m_floodlight_activity_id_isSet = false;
    m_floodlight_activity_id_isValid = false;

    m_floodlight_configuration_id_isSet = false;
    m_floodlight_configuration_id_isValid = false;

    m_gclid_isSet = false;
    m_gclid_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_limit_ad_tracking_isSet = false;
    m_limit_ad_tracking_isValid = false;

    m_match_id_isSet = false;
    m_match_id_isValid = false;

    m_mobile_device_id_isSet = false;
    m_mobile_device_id_isValid = false;

    m_non_personalized_ad_isSet = false;
    m_non_personalized_ad_isValid = false;

    m_ordinal_isSet = false;
    m_ordinal_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_timestamp_micros_isSet = false;
    m_timestamp_micros_isValid = false;

    m_treatment_for_underage_isSet = false;
    m_treatment_for_underage_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIConversion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConversion::fromJsonObject(QJsonObject json) {

    m_child_directed_treatment_isValid = ::OpenAPI::fromJsonValue(m_child_directed_treatment, json[QString("childDirectedTreatment")]);
    m_child_directed_treatment_isSet = !json[QString("childDirectedTreatment")].isNull() && m_child_directed_treatment_isValid;

    m_custom_variables_isValid = ::OpenAPI::fromJsonValue(m_custom_variables, json[QString("customVariables")]);
    m_custom_variables_isSet = !json[QString("customVariables")].isNull() && m_custom_variables_isValid;

    m_encrypted_user_id_isValid = ::OpenAPI::fromJsonValue(m_encrypted_user_id, json[QString("encryptedUserId")]);
    m_encrypted_user_id_isSet = !json[QString("encryptedUserId")].isNull() && m_encrypted_user_id_isValid;

    m_encrypted_user_id_candidates_isValid = ::OpenAPI::fromJsonValue(m_encrypted_user_id_candidates, json[QString("encryptedUserIdCandidates")]);
    m_encrypted_user_id_candidates_isSet = !json[QString("encryptedUserIdCandidates")].isNull() && m_encrypted_user_id_candidates_isValid;

    m_floodlight_activity_id_isValid = ::OpenAPI::fromJsonValue(m_floodlight_activity_id, json[QString("floodlightActivityId")]);
    m_floodlight_activity_id_isSet = !json[QString("floodlightActivityId")].isNull() && m_floodlight_activity_id_isValid;

    m_floodlight_configuration_id_isValid = ::OpenAPI::fromJsonValue(m_floodlight_configuration_id, json[QString("floodlightConfigurationId")]);
    m_floodlight_configuration_id_isSet = !json[QString("floodlightConfigurationId")].isNull() && m_floodlight_configuration_id_isValid;

    m_gclid_isValid = ::OpenAPI::fromJsonValue(m_gclid, json[QString("gclid")]);
    m_gclid_isSet = !json[QString("gclid")].isNull() && m_gclid_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_limit_ad_tracking_isValid = ::OpenAPI::fromJsonValue(m_limit_ad_tracking, json[QString("limitAdTracking")]);
    m_limit_ad_tracking_isSet = !json[QString("limitAdTracking")].isNull() && m_limit_ad_tracking_isValid;

    m_match_id_isValid = ::OpenAPI::fromJsonValue(m_match_id, json[QString("matchId")]);
    m_match_id_isSet = !json[QString("matchId")].isNull() && m_match_id_isValid;

    m_mobile_device_id_isValid = ::OpenAPI::fromJsonValue(m_mobile_device_id, json[QString("mobileDeviceId")]);
    m_mobile_device_id_isSet = !json[QString("mobileDeviceId")].isNull() && m_mobile_device_id_isValid;

    m_non_personalized_ad_isValid = ::OpenAPI::fromJsonValue(m_non_personalized_ad, json[QString("nonPersonalizedAd")]);
    m_non_personalized_ad_isSet = !json[QString("nonPersonalizedAd")].isNull() && m_non_personalized_ad_isValid;

    m_ordinal_isValid = ::OpenAPI::fromJsonValue(m_ordinal, json[QString("ordinal")]);
    m_ordinal_isSet = !json[QString("ordinal")].isNull() && m_ordinal_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_timestamp_micros_isValid = ::OpenAPI::fromJsonValue(m_timestamp_micros, json[QString("timestampMicros")]);
    m_timestamp_micros_isSet = !json[QString("timestampMicros")].isNull() && m_timestamp_micros_isValid;

    m_treatment_for_underage_isValid = ::OpenAPI::fromJsonValue(m_treatment_for_underage, json[QString("treatmentForUnderage")]);
    m_treatment_for_underage_isSet = !json[QString("treatmentForUnderage")].isNull() && m_treatment_for_underage_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIConversion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConversion::asJsonObject() const {
    QJsonObject obj;
    if (m_child_directed_treatment_isSet) {
        obj.insert(QString("childDirectedTreatment"), ::OpenAPI::toJsonValue(m_child_directed_treatment));
    }
    if (m_custom_variables.size() > 0) {
        obj.insert(QString("customVariables"), ::OpenAPI::toJsonValue(m_custom_variables));
    }
    if (m_encrypted_user_id_isSet) {
        obj.insert(QString("encryptedUserId"), ::OpenAPI::toJsonValue(m_encrypted_user_id));
    }
    if (m_encrypted_user_id_candidates.size() > 0) {
        obj.insert(QString("encryptedUserIdCandidates"), ::OpenAPI::toJsonValue(m_encrypted_user_id_candidates));
    }
    if (m_floodlight_activity_id_isSet) {
        obj.insert(QString("floodlightActivityId"), ::OpenAPI::toJsonValue(m_floodlight_activity_id));
    }
    if (m_floodlight_configuration_id_isSet) {
        obj.insert(QString("floodlightConfigurationId"), ::OpenAPI::toJsonValue(m_floodlight_configuration_id));
    }
    if (m_gclid_isSet) {
        obj.insert(QString("gclid"), ::OpenAPI::toJsonValue(m_gclid));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_limit_ad_tracking_isSet) {
        obj.insert(QString("limitAdTracking"), ::OpenAPI::toJsonValue(m_limit_ad_tracking));
    }
    if (m_match_id_isSet) {
        obj.insert(QString("matchId"), ::OpenAPI::toJsonValue(m_match_id));
    }
    if (m_mobile_device_id_isSet) {
        obj.insert(QString("mobileDeviceId"), ::OpenAPI::toJsonValue(m_mobile_device_id));
    }
    if (m_non_personalized_ad_isSet) {
        obj.insert(QString("nonPersonalizedAd"), ::OpenAPI::toJsonValue(m_non_personalized_ad));
    }
    if (m_ordinal_isSet) {
        obj.insert(QString("ordinal"), ::OpenAPI::toJsonValue(m_ordinal));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_timestamp_micros_isSet) {
        obj.insert(QString("timestampMicros"), ::OpenAPI::toJsonValue(m_timestamp_micros));
    }
    if (m_treatment_for_underage_isSet) {
        obj.insert(QString("treatmentForUnderage"), ::OpenAPI::toJsonValue(m_treatment_for_underage));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

bool OAIConversion::isChildDirectedTreatment() const {
    return m_child_directed_treatment;
}
void OAIConversion::setChildDirectedTreatment(const bool &child_directed_treatment) {
    m_child_directed_treatment = child_directed_treatment;
    m_child_directed_treatment_isSet = true;
}

bool OAIConversion::is_child_directed_treatment_Set() const{
    return m_child_directed_treatment_isSet;
}

bool OAIConversion::is_child_directed_treatment_Valid() const{
    return m_child_directed_treatment_isValid;
}

QList<OAICustomFloodlightVariable> OAIConversion::getCustomVariables() const {
    return m_custom_variables;
}
void OAIConversion::setCustomVariables(const QList<OAICustomFloodlightVariable> &custom_variables) {
    m_custom_variables = custom_variables;
    m_custom_variables_isSet = true;
}

bool OAIConversion::is_custom_variables_Set() const{
    return m_custom_variables_isSet;
}

bool OAIConversion::is_custom_variables_Valid() const{
    return m_custom_variables_isValid;
}

QString OAIConversion::getEncryptedUserId() const {
    return m_encrypted_user_id;
}
void OAIConversion::setEncryptedUserId(const QString &encrypted_user_id) {
    m_encrypted_user_id = encrypted_user_id;
    m_encrypted_user_id_isSet = true;
}

bool OAIConversion::is_encrypted_user_id_Set() const{
    return m_encrypted_user_id_isSet;
}

bool OAIConversion::is_encrypted_user_id_Valid() const{
    return m_encrypted_user_id_isValid;
}

QList<QString> OAIConversion::getEncryptedUserIdCandidates() const {
    return m_encrypted_user_id_candidates;
}
void OAIConversion::setEncryptedUserIdCandidates(const QList<QString> &encrypted_user_id_candidates) {
    m_encrypted_user_id_candidates = encrypted_user_id_candidates;
    m_encrypted_user_id_candidates_isSet = true;
}

bool OAIConversion::is_encrypted_user_id_candidates_Set() const{
    return m_encrypted_user_id_candidates_isSet;
}

bool OAIConversion::is_encrypted_user_id_candidates_Valid() const{
    return m_encrypted_user_id_candidates_isValid;
}

QString OAIConversion::getFloodlightActivityId() const {
    return m_floodlight_activity_id;
}
void OAIConversion::setFloodlightActivityId(const QString &floodlight_activity_id) {
    m_floodlight_activity_id = floodlight_activity_id;
    m_floodlight_activity_id_isSet = true;
}

bool OAIConversion::is_floodlight_activity_id_Set() const{
    return m_floodlight_activity_id_isSet;
}

bool OAIConversion::is_floodlight_activity_id_Valid() const{
    return m_floodlight_activity_id_isValid;
}

QString OAIConversion::getFloodlightConfigurationId() const {
    return m_floodlight_configuration_id;
}
void OAIConversion::setFloodlightConfigurationId(const QString &floodlight_configuration_id) {
    m_floodlight_configuration_id = floodlight_configuration_id;
    m_floodlight_configuration_id_isSet = true;
}

bool OAIConversion::is_floodlight_configuration_id_Set() const{
    return m_floodlight_configuration_id_isSet;
}

bool OAIConversion::is_floodlight_configuration_id_Valid() const{
    return m_floodlight_configuration_id_isValid;
}

QString OAIConversion::getGclid() const {
    return m_gclid;
}
void OAIConversion::setGclid(const QString &gclid) {
    m_gclid = gclid;
    m_gclid_isSet = true;
}

bool OAIConversion::is_gclid_Set() const{
    return m_gclid_isSet;
}

bool OAIConversion::is_gclid_Valid() const{
    return m_gclid_isValid;
}

QString OAIConversion::getKind() const {
    return m_kind;
}
void OAIConversion::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIConversion::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIConversion::is_kind_Valid() const{
    return m_kind_isValid;
}

bool OAIConversion::isLimitAdTracking() const {
    return m_limit_ad_tracking;
}
void OAIConversion::setLimitAdTracking(const bool &limit_ad_tracking) {
    m_limit_ad_tracking = limit_ad_tracking;
    m_limit_ad_tracking_isSet = true;
}

bool OAIConversion::is_limit_ad_tracking_Set() const{
    return m_limit_ad_tracking_isSet;
}

bool OAIConversion::is_limit_ad_tracking_Valid() const{
    return m_limit_ad_tracking_isValid;
}

QString OAIConversion::getMatchId() const {
    return m_match_id;
}
void OAIConversion::setMatchId(const QString &match_id) {
    m_match_id = match_id;
    m_match_id_isSet = true;
}

bool OAIConversion::is_match_id_Set() const{
    return m_match_id_isSet;
}

bool OAIConversion::is_match_id_Valid() const{
    return m_match_id_isValid;
}

QString OAIConversion::getMobileDeviceId() const {
    return m_mobile_device_id;
}
void OAIConversion::setMobileDeviceId(const QString &mobile_device_id) {
    m_mobile_device_id = mobile_device_id;
    m_mobile_device_id_isSet = true;
}

bool OAIConversion::is_mobile_device_id_Set() const{
    return m_mobile_device_id_isSet;
}

bool OAIConversion::is_mobile_device_id_Valid() const{
    return m_mobile_device_id_isValid;
}

bool OAIConversion::isNonPersonalizedAd() const {
    return m_non_personalized_ad;
}
void OAIConversion::setNonPersonalizedAd(const bool &non_personalized_ad) {
    m_non_personalized_ad = non_personalized_ad;
    m_non_personalized_ad_isSet = true;
}

bool OAIConversion::is_non_personalized_ad_Set() const{
    return m_non_personalized_ad_isSet;
}

bool OAIConversion::is_non_personalized_ad_Valid() const{
    return m_non_personalized_ad_isValid;
}

QString OAIConversion::getOrdinal() const {
    return m_ordinal;
}
void OAIConversion::setOrdinal(const QString &ordinal) {
    m_ordinal = ordinal;
    m_ordinal_isSet = true;
}

bool OAIConversion::is_ordinal_Set() const{
    return m_ordinal_isSet;
}

bool OAIConversion::is_ordinal_Valid() const{
    return m_ordinal_isValid;
}

QString OAIConversion::getQuantity() const {
    return m_quantity;
}
void OAIConversion::setQuantity(const QString &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIConversion::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIConversion::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAIConversion::getTimestampMicros() const {
    return m_timestamp_micros;
}
void OAIConversion::setTimestampMicros(const QString &timestamp_micros) {
    m_timestamp_micros = timestamp_micros;
    m_timestamp_micros_isSet = true;
}

bool OAIConversion::is_timestamp_micros_Set() const{
    return m_timestamp_micros_isSet;
}

bool OAIConversion::is_timestamp_micros_Valid() const{
    return m_timestamp_micros_isValid;
}

bool OAIConversion::isTreatmentForUnderage() const {
    return m_treatment_for_underage;
}
void OAIConversion::setTreatmentForUnderage(const bool &treatment_for_underage) {
    m_treatment_for_underage = treatment_for_underage;
    m_treatment_for_underage_isSet = true;
}

bool OAIConversion::is_treatment_for_underage_Set() const{
    return m_treatment_for_underage_isSet;
}

bool OAIConversion::is_treatment_for_underage_Valid() const{
    return m_treatment_for_underage_isValid;
}

double OAIConversion::getValue() const {
    return m_value;
}
void OAIConversion::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIConversion::is_value_Set() const{
    return m_value_isSet;
}

bool OAIConversion::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIConversion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_child_directed_treatment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypted_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypted_user_id_candidates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_floodlight_activity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_floodlight_configuration_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gclid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_ad_tracking_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_personalized_ad_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ordinal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_micros_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_treatment_for_underage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConversion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
