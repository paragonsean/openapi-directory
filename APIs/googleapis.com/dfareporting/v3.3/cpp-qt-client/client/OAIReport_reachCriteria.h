/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIReport_reachCriteria.h
 *
 * The report criteria for a report of type \&quot;REACH\&quot;.
 */

#ifndef OAIReport_reachCriteria_H
#define OAIReport_reachCriteria_H

#include <QJsonObject>

#include "OAIActivities.h"
#include "OAICustomRichMediaEvents.h"
#include "OAIDateRange.h"
#include "OAIDimensionValue.h"
#include "OAISortedDimension.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIActivities;
class OAICustomRichMediaEvents;
class OAIDateRange;
class OAIDimensionValue;
class OAISortedDimension;

class OAIReport_reachCriteria : public OAIObject {
public:
    OAIReport_reachCriteria();
    OAIReport_reachCriteria(QString json);
    ~OAIReport_reachCriteria() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIActivities getActivities() const;
    void setActivities(const OAIActivities &activities);
    bool is_activities_Set() const;
    bool is_activities_Valid() const;

    OAICustomRichMediaEvents getCustomRichMediaEvents() const;
    void setCustomRichMediaEvents(const OAICustomRichMediaEvents &custom_rich_media_events);
    bool is_custom_rich_media_events_Set() const;
    bool is_custom_rich_media_events_Valid() const;

    OAIDateRange getDateRange() const;
    void setDateRange(const OAIDateRange &date_range);
    bool is_date_range_Set() const;
    bool is_date_range_Valid() const;

    QList<OAIDimensionValue> getDimensionFilters() const;
    void setDimensionFilters(const QList<OAIDimensionValue> &dimension_filters);
    bool is_dimension_filters_Set() const;
    bool is_dimension_filters_Valid() const;

    QList<OAISortedDimension> getDimensions() const;
    void setDimensions(const QList<OAISortedDimension> &dimensions);
    bool is_dimensions_Set() const;
    bool is_dimensions_Valid() const;

    bool isEnableAllDimensionCombinations() const;
    void setEnableAllDimensionCombinations(const bool &enable_all_dimension_combinations);
    bool is_enable_all_dimension_combinations_Set() const;
    bool is_enable_all_dimension_combinations_Valid() const;

    QList<QString> getMetricNames() const;
    void setMetricNames(const QList<QString> &metric_names);
    bool is_metric_names_Set() const;
    bool is_metric_names_Valid() const;

    QList<QString> getReachByFrequencyMetricNames() const;
    void setReachByFrequencyMetricNames(const QList<QString> &reach_by_frequency_metric_names);
    bool is_reach_by_frequency_metric_names_Set() const;
    bool is_reach_by_frequency_metric_names_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIActivities m_activities;
    bool m_activities_isSet;
    bool m_activities_isValid;

    OAICustomRichMediaEvents m_custom_rich_media_events;
    bool m_custom_rich_media_events_isSet;
    bool m_custom_rich_media_events_isValid;

    OAIDateRange m_date_range;
    bool m_date_range_isSet;
    bool m_date_range_isValid;

    QList<OAIDimensionValue> m_dimension_filters;
    bool m_dimension_filters_isSet;
    bool m_dimension_filters_isValid;

    QList<OAISortedDimension> m_dimensions;
    bool m_dimensions_isSet;
    bool m_dimensions_isValid;

    bool m_enable_all_dimension_combinations;
    bool m_enable_all_dimension_combinations_isSet;
    bool m_enable_all_dimension_combinations_isValid;

    QList<QString> m_metric_names;
    bool m_metric_names_isSet;
    bool m_metric_names_isValid;

    QList<QString> m_reach_by_frequency_metric_names;
    bool m_reach_by_frequency_metric_names_isSet;
    bool m_reach_by_frequency_metric_names_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIReport_reachCriteria)

#endif // OAIReport_reachCriteria_H
