/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreativeAssetMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreativeAssetMetadata::OAICreativeAssetMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreativeAssetMetadata::OAICreativeAssetMetadata() {
    this->initializeModel();
}

OAICreativeAssetMetadata::~OAICreativeAssetMetadata() {}

void OAICreativeAssetMetadata::initializeModel() {

    m_asset_identifier_isSet = false;
    m_asset_identifier_isValid = false;

    m_click_tags_isSet = false;
    m_click_tags_isValid = false;

    m_detected_features_isSet = false;
    m_detected_features_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_id_dimension_value_isSet = false;
    m_id_dimension_value_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_warned_validation_rules_isSet = false;
    m_warned_validation_rules_isValid = false;
}

void OAICreativeAssetMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreativeAssetMetadata::fromJsonObject(QJsonObject json) {

    m_asset_identifier_isValid = ::OpenAPI::fromJsonValue(m_asset_identifier, json[QString("assetIdentifier")]);
    m_asset_identifier_isSet = !json[QString("assetIdentifier")].isNull() && m_asset_identifier_isValid;

    m_click_tags_isValid = ::OpenAPI::fromJsonValue(m_click_tags, json[QString("clickTags")]);
    m_click_tags_isSet = !json[QString("clickTags")].isNull() && m_click_tags_isValid;

    m_detected_features_isValid = ::OpenAPI::fromJsonValue(m_detected_features, json[QString("detectedFeatures")]);
    m_detected_features_isSet = !json[QString("detectedFeatures")].isNull() && m_detected_features_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_id_dimension_value_isValid = ::OpenAPI::fromJsonValue(m_id_dimension_value, json[QString("idDimensionValue")]);
    m_id_dimension_value_isSet = !json[QString("idDimensionValue")].isNull() && m_id_dimension_value_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_warned_validation_rules_isValid = ::OpenAPI::fromJsonValue(m_warned_validation_rules, json[QString("warnedValidationRules")]);
    m_warned_validation_rules_isSet = !json[QString("warnedValidationRules")].isNull() && m_warned_validation_rules_isValid;
}

QString OAICreativeAssetMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreativeAssetMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_identifier.isSet()) {
        obj.insert(QString("assetIdentifier"), ::OpenAPI::toJsonValue(m_asset_identifier));
    }
    if (m_click_tags.size() > 0) {
        obj.insert(QString("clickTags"), ::OpenAPI::toJsonValue(m_click_tags));
    }
    if (m_detected_features.size() > 0) {
        obj.insert(QString("detectedFeatures"), ::OpenAPI::toJsonValue(m_detected_features));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_id_dimension_value.isSet()) {
        obj.insert(QString("idDimensionValue"), ::OpenAPI::toJsonValue(m_id_dimension_value));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_warned_validation_rules.size() > 0) {
        obj.insert(QString("warnedValidationRules"), ::OpenAPI::toJsonValue(m_warned_validation_rules));
    }
    return obj;
}

OAICreativeAssetId OAICreativeAssetMetadata::getAssetIdentifier() const {
    return m_asset_identifier;
}
void OAICreativeAssetMetadata::setAssetIdentifier(const OAICreativeAssetId &asset_identifier) {
    m_asset_identifier = asset_identifier;
    m_asset_identifier_isSet = true;
}

bool OAICreativeAssetMetadata::is_asset_identifier_Set() const{
    return m_asset_identifier_isSet;
}

bool OAICreativeAssetMetadata::is_asset_identifier_Valid() const{
    return m_asset_identifier_isValid;
}

QList<OAIClickTag> OAICreativeAssetMetadata::getClickTags() const {
    return m_click_tags;
}
void OAICreativeAssetMetadata::setClickTags(const QList<OAIClickTag> &click_tags) {
    m_click_tags = click_tags;
    m_click_tags_isSet = true;
}

bool OAICreativeAssetMetadata::is_click_tags_Set() const{
    return m_click_tags_isSet;
}

bool OAICreativeAssetMetadata::is_click_tags_Valid() const{
    return m_click_tags_isValid;
}

QList<QString> OAICreativeAssetMetadata::getDetectedFeatures() const {
    return m_detected_features;
}
void OAICreativeAssetMetadata::setDetectedFeatures(const QList<QString> &detected_features) {
    m_detected_features = detected_features;
    m_detected_features_isSet = true;
}

bool OAICreativeAssetMetadata::is_detected_features_Set() const{
    return m_detected_features_isSet;
}

bool OAICreativeAssetMetadata::is_detected_features_Valid() const{
    return m_detected_features_isValid;
}

QString OAICreativeAssetMetadata::getId() const {
    return m_id;
}
void OAICreativeAssetMetadata::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICreativeAssetMetadata::is_id_Set() const{
    return m_id_isSet;
}

bool OAICreativeAssetMetadata::is_id_Valid() const{
    return m_id_isValid;
}

OAIDimensionValue OAICreativeAssetMetadata::getIdDimensionValue() const {
    return m_id_dimension_value;
}
void OAICreativeAssetMetadata::setIdDimensionValue(const OAIDimensionValue &id_dimension_value) {
    m_id_dimension_value = id_dimension_value;
    m_id_dimension_value_isSet = true;
}

bool OAICreativeAssetMetadata::is_id_dimension_value_Set() const{
    return m_id_dimension_value_isSet;
}

bool OAICreativeAssetMetadata::is_id_dimension_value_Valid() const{
    return m_id_dimension_value_isValid;
}

QString OAICreativeAssetMetadata::getKind() const {
    return m_kind;
}
void OAICreativeAssetMetadata::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAICreativeAssetMetadata::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAICreativeAssetMetadata::is_kind_Valid() const{
    return m_kind_isValid;
}

QList<QString> OAICreativeAssetMetadata::getWarnedValidationRules() const {
    return m_warned_validation_rules;
}
void OAICreativeAssetMetadata::setWarnedValidationRules(const QList<QString> &warned_validation_rules) {
    m_warned_validation_rules = warned_validation_rules;
    m_warned_validation_rules_isSet = true;
}

bool OAICreativeAssetMetadata::is_warned_validation_rules_Set() const{
    return m_warned_validation_rules_isSet;
}

bool OAICreativeAssetMetadata::is_warned_validation_rules_Valid() const{
    return m_warned_validation_rules_isValid;
}

bool OAICreativeAssetMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_identifier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_click_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_detected_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_dimension_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warned_validation_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreativeAssetMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
