/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFile::OAIFile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFile::OAIFile() {
    this->initializeModel();
}

OAIFile::~OAIFile() {}

void OAIFile::initializeModel() {

    m_date_range_isSet = false;
    m_date_range_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_report_id_isSet = false;
    m_report_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_urls_isSet = false;
    m_urls_isValid = false;
}

void OAIFile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFile::fromJsonObject(QJsonObject json) {

    m_date_range_isValid = ::OpenAPI::fromJsonValue(m_date_range, json[QString("dateRange")]);
    m_date_range_isSet = !json[QString("dateRange")].isNull() && m_date_range_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("fileName")]);
    m_file_name_isSet = !json[QString("fileName")].isNull() && m_file_name_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("lastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("lastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_report_id_isValid = ::OpenAPI::fromJsonValue(m_report_id, json[QString("reportId")]);
    m_report_id_isSet = !json[QString("reportId")].isNull() && m_report_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_urls_isValid = ::OpenAPI::fromJsonValue(m_urls, json[QString("urls")]);
    m_urls_isSet = !json[QString("urls")].isNull() && m_urls_isValid;
}

QString OAIFile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFile::asJsonObject() const {
    QJsonObject obj;
    if (m_date_range.isSet()) {
        obj.insert(QString("dateRange"), ::OpenAPI::toJsonValue(m_date_range));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_file_name_isSet) {
        obj.insert(QString("fileName"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("lastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_report_id_isSet) {
        obj.insert(QString("reportId"), ::OpenAPI::toJsonValue(m_report_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_urls.isSet()) {
        obj.insert(QString("urls"), ::OpenAPI::toJsonValue(m_urls));
    }
    return obj;
}

OAIDateRange OAIFile::getDateRange() const {
    return m_date_range;
}
void OAIFile::setDateRange(const OAIDateRange &date_range) {
    m_date_range = date_range;
    m_date_range_isSet = true;
}

bool OAIFile::is_date_range_Set() const{
    return m_date_range_isSet;
}

bool OAIFile::is_date_range_Valid() const{
    return m_date_range_isValid;
}

QString OAIFile::getEtag() const {
    return m_etag;
}
void OAIFile::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIFile::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIFile::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIFile::getFileName() const {
    return m_file_name;
}
void OAIFile::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAIFile::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAIFile::is_file_name_Valid() const{
    return m_file_name_isValid;
}

QString OAIFile::getFormat() const {
    return m_format;
}
void OAIFile::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIFile::is_format_Set() const{
    return m_format_isSet;
}

bool OAIFile::is_format_Valid() const{
    return m_format_isValid;
}

QString OAIFile::getId() const {
    return m_id;
}
void OAIFile::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFile::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFile::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIFile::getKind() const {
    return m_kind;
}
void OAIFile::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIFile::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIFile::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIFile::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIFile::setLastModifiedTime(const QString &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIFile::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIFile::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

QString OAIFile::getReportId() const {
    return m_report_id;
}
void OAIFile::setReportId(const QString &report_id) {
    m_report_id = report_id;
    m_report_id_isSet = true;
}

bool OAIFile::is_report_id_Set() const{
    return m_report_id_isSet;
}

bool OAIFile::is_report_id_Valid() const{
    return m_report_id_isValid;
}

QString OAIFile::getStatus() const {
    return m_status;
}
void OAIFile::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIFile::is_status_Set() const{
    return m_status_isSet;
}

bool OAIFile::is_status_Valid() const{
    return m_status_isValid;
}

OAIFile_urls OAIFile::getUrls() const {
    return m_urls;
}
void OAIFile::setUrls(const OAIFile_urls &urls) {
    m_urls = urls;
    m_urls_isSet = true;
}

bool OAIFile::is_urls_Set() const{
    return m_urls_isSet;
}

bool OAIFile::is_urls_Valid() const{
    return m_urls_isValid;
}

bool OAIFile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_urls.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
