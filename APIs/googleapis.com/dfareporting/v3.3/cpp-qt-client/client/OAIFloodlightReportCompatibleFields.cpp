/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFloodlightReportCompatibleFields.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFloodlightReportCompatibleFields::OAIFloodlightReportCompatibleFields(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFloodlightReportCompatibleFields::OAIFloodlightReportCompatibleFields() {
    this->initializeModel();
}

OAIFloodlightReportCompatibleFields::~OAIFloodlightReportCompatibleFields() {}

void OAIFloodlightReportCompatibleFields::initializeModel() {

    m_dimension_filters_isSet = false;
    m_dimension_filters_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;
}

void OAIFloodlightReportCompatibleFields::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFloodlightReportCompatibleFields::fromJsonObject(QJsonObject json) {

    m_dimension_filters_isValid = ::OpenAPI::fromJsonValue(m_dimension_filters, json[QString("dimensionFilters")]);
    m_dimension_filters_isSet = !json[QString("dimensionFilters")].isNull() && m_dimension_filters_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;
}

QString OAIFloodlightReportCompatibleFields::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFloodlightReportCompatibleFields::asJsonObject() const {
    QJsonObject obj;
    if (m_dimension_filters.size() > 0) {
        obj.insert(QString("dimensionFilters"), ::OpenAPI::toJsonValue(m_dimension_filters));
    }
    if (m_dimensions.size() > 0) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_metrics.size() > 0) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    return obj;
}

QList<OAIDimension> OAIFloodlightReportCompatibleFields::getDimensionFilters() const {
    return m_dimension_filters;
}
void OAIFloodlightReportCompatibleFields::setDimensionFilters(const QList<OAIDimension> &dimension_filters) {
    m_dimension_filters = dimension_filters;
    m_dimension_filters_isSet = true;
}

bool OAIFloodlightReportCompatibleFields::is_dimension_filters_Set() const{
    return m_dimension_filters_isSet;
}

bool OAIFloodlightReportCompatibleFields::is_dimension_filters_Valid() const{
    return m_dimension_filters_isValid;
}

QList<OAIDimension> OAIFloodlightReportCompatibleFields::getDimensions() const {
    return m_dimensions;
}
void OAIFloodlightReportCompatibleFields::setDimensions(const QList<OAIDimension> &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIFloodlightReportCompatibleFields::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIFloodlightReportCompatibleFields::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

QString OAIFloodlightReportCompatibleFields::getKind() const {
    return m_kind;
}
void OAIFloodlightReportCompatibleFields::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIFloodlightReportCompatibleFields::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIFloodlightReportCompatibleFields::is_kind_Valid() const{
    return m_kind_isValid;
}

QList<OAIMetric> OAIFloodlightReportCompatibleFields::getMetrics() const {
    return m_metrics;
}
void OAIFloodlightReportCompatibleFields::setMetrics(const QList<OAIMetric> &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIFloodlightReportCompatibleFields::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIFloodlightReportCompatibleFields::is_metrics_Valid() const{
    return m_metrics_isValid;
}

bool OAIFloodlightReportCompatibleFields::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dimension_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFloodlightReportCompatibleFields::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
