/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIReport_pathToConversionCriteria_reportProperties.h
 *
 * The properties of the report.
 */

#ifndef OAIReport_pathToConversionCriteria_reportProperties_H
#define OAIReport_pathToConversionCriteria_reportProperties_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIReport_pathToConversionCriteria_reportProperties : public OAIObject {
public:
    OAIReport_pathToConversionCriteria_reportProperties();
    OAIReport_pathToConversionCriteria_reportProperties(QString json);
    ~OAIReport_pathToConversionCriteria_reportProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getClicksLookbackWindow() const;
    void setClicksLookbackWindow(const qint32 &clicks_lookback_window);
    bool is_clicks_lookback_window_Set() const;
    bool is_clicks_lookback_window_Valid() const;

    qint32 getImpressionsLookbackWindow() const;
    void setImpressionsLookbackWindow(const qint32 &impressions_lookback_window);
    bool is_impressions_lookback_window_Set() const;
    bool is_impressions_lookback_window_Valid() const;

    bool isIncludeAttributedIpConversions() const;
    void setIncludeAttributedIpConversions(const bool &include_attributed_ip_conversions);
    bool is_include_attributed_ip_conversions_Set() const;
    bool is_include_attributed_ip_conversions_Valid() const;

    bool isIncludeUnattributedCookieConversions() const;
    void setIncludeUnattributedCookieConversions(const bool &include_unattributed_cookie_conversions);
    bool is_include_unattributed_cookie_conversions_Set() const;
    bool is_include_unattributed_cookie_conversions_Valid() const;

    bool isIncludeUnattributedIpConversions() const;
    void setIncludeUnattributedIpConversions(const bool &include_unattributed_ip_conversions);
    bool is_include_unattributed_ip_conversions_Set() const;
    bool is_include_unattributed_ip_conversions_Valid() const;

    qint32 getMaximumClickInteractions() const;
    void setMaximumClickInteractions(const qint32 &maximum_click_interactions);
    bool is_maximum_click_interactions_Set() const;
    bool is_maximum_click_interactions_Valid() const;

    qint32 getMaximumImpressionInteractions() const;
    void setMaximumImpressionInteractions(const qint32 &maximum_impression_interactions);
    bool is_maximum_impression_interactions_Set() const;
    bool is_maximum_impression_interactions_Valid() const;

    qint32 getMaximumInteractionGap() const;
    void setMaximumInteractionGap(const qint32 &maximum_interaction_gap);
    bool is_maximum_interaction_gap_Set() const;
    bool is_maximum_interaction_gap_Valid() const;

    bool isPivotOnInteractionPath() const;
    void setPivotOnInteractionPath(const bool &pivot_on_interaction_path);
    bool is_pivot_on_interaction_path_Set() const;
    bool is_pivot_on_interaction_path_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_clicks_lookback_window;
    bool m_clicks_lookback_window_isSet;
    bool m_clicks_lookback_window_isValid;

    qint32 m_impressions_lookback_window;
    bool m_impressions_lookback_window_isSet;
    bool m_impressions_lookback_window_isValid;

    bool m_include_attributed_ip_conversions;
    bool m_include_attributed_ip_conversions_isSet;
    bool m_include_attributed_ip_conversions_isValid;

    bool m_include_unattributed_cookie_conversions;
    bool m_include_unattributed_cookie_conversions_isSet;
    bool m_include_unattributed_cookie_conversions_isValid;

    bool m_include_unattributed_ip_conversions;
    bool m_include_unattributed_ip_conversions_isSet;
    bool m_include_unattributed_ip_conversions_isValid;

    qint32 m_maximum_click_interactions;
    bool m_maximum_click_interactions_isSet;
    bool m_maximum_click_interactions_isValid;

    qint32 m_maximum_impression_interactions;
    bool m_maximum_impression_interactions_isSet;
    bool m_maximum_impression_interactions_isValid;

    qint32 m_maximum_interaction_gap;
    bool m_maximum_interaction_gap_isSet;
    bool m_maximum_interaction_gap_isValid;

    bool m_pivot_on_interaction_path;
    bool m_pivot_on_interaction_path_isSet;
    bool m_pivot_on_interaction_path_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIReport_pathToConversionCriteria_reportProperties)

#endif // OAIReport_pathToConversionCriteria_reportProperties_H
