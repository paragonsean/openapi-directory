/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPricing.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPricing::OAIPricing(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPricing::OAIPricing() {
    this->initializeModel();
}

OAIPricing::~OAIPricing() {}

void OAIPricing::initializeModel() {

    m_cap_cost_type_isSet = false;
    m_cap_cost_type_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_flights_isSet = false;
    m_flights_isValid = false;

    m_group_type_isSet = false;
    m_group_type_isValid = false;

    m_pricing_type_isSet = false;
    m_pricing_type_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;
}

void OAIPricing::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPricing::fromJsonObject(QJsonObject json) {

    m_cap_cost_type_isValid = ::OpenAPI::fromJsonValue(m_cap_cost_type, json[QString("capCostType")]);
    m_cap_cost_type_isSet = !json[QString("capCostType")].isNull() && m_cap_cost_type_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_flights_isValid = ::OpenAPI::fromJsonValue(m_flights, json[QString("flights")]);
    m_flights_isSet = !json[QString("flights")].isNull() && m_flights_isValid;

    m_group_type_isValid = ::OpenAPI::fromJsonValue(m_group_type, json[QString("groupType")]);
    m_group_type_isSet = !json[QString("groupType")].isNull() && m_group_type_isValid;

    m_pricing_type_isValid = ::OpenAPI::fromJsonValue(m_pricing_type, json[QString("pricingType")]);
    m_pricing_type_isSet = !json[QString("pricingType")].isNull() && m_pricing_type_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;
}

QString OAIPricing::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPricing::asJsonObject() const {
    QJsonObject obj;
    if (m_cap_cost_type_isSet) {
        obj.insert(QString("capCostType"), ::OpenAPI::toJsonValue(m_cap_cost_type));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_flights.size() > 0) {
        obj.insert(QString("flights"), ::OpenAPI::toJsonValue(m_flights));
    }
    if (m_group_type_isSet) {
        obj.insert(QString("groupType"), ::OpenAPI::toJsonValue(m_group_type));
    }
    if (m_pricing_type_isSet) {
        obj.insert(QString("pricingType"), ::OpenAPI::toJsonValue(m_pricing_type));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    return obj;
}

QString OAIPricing::getCapCostType() const {
    return m_cap_cost_type;
}
void OAIPricing::setCapCostType(const QString &cap_cost_type) {
    m_cap_cost_type = cap_cost_type;
    m_cap_cost_type_isSet = true;
}

bool OAIPricing::is_cap_cost_type_Set() const{
    return m_cap_cost_type_isSet;
}

bool OAIPricing::is_cap_cost_type_Valid() const{
    return m_cap_cost_type_isValid;
}

QDate OAIPricing::getEndDate() const {
    return m_end_date;
}
void OAIPricing::setEndDate(const QDate &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIPricing::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIPricing::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QList<OAIFlight> OAIPricing::getFlights() const {
    return m_flights;
}
void OAIPricing::setFlights(const QList<OAIFlight> &flights) {
    m_flights = flights;
    m_flights_isSet = true;
}

bool OAIPricing::is_flights_Set() const{
    return m_flights_isSet;
}

bool OAIPricing::is_flights_Valid() const{
    return m_flights_isValid;
}

QString OAIPricing::getGroupType() const {
    return m_group_type;
}
void OAIPricing::setGroupType(const QString &group_type) {
    m_group_type = group_type;
    m_group_type_isSet = true;
}

bool OAIPricing::is_group_type_Set() const{
    return m_group_type_isSet;
}

bool OAIPricing::is_group_type_Valid() const{
    return m_group_type_isValid;
}

QString OAIPricing::getPricingType() const {
    return m_pricing_type;
}
void OAIPricing::setPricingType(const QString &pricing_type) {
    m_pricing_type = pricing_type;
    m_pricing_type_isSet = true;
}

bool OAIPricing::is_pricing_type_Set() const{
    return m_pricing_type_isSet;
}

bool OAIPricing::is_pricing_type_Valid() const{
    return m_pricing_type_isValid;
}

QDate OAIPricing::getStartDate() const {
    return m_start_date;
}
void OAIPricing::setStartDate(const QDate &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIPricing::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIPricing::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAIPricing::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cap_cost_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flights.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pricing_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPricing::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
