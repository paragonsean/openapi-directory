/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISkippableSetting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISkippableSetting::OAISkippableSetting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISkippableSetting::OAISkippableSetting() {
    this->initializeModel();
}

OAISkippableSetting::~OAISkippableSetting() {}

void OAISkippableSetting::initializeModel() {

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_progress_offset_isSet = false;
    m_progress_offset_isValid = false;

    m_skip_offset_isSet = false;
    m_skip_offset_isValid = false;

    m_skippable_isSet = false;
    m_skippable_isValid = false;
}

void OAISkippableSetting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISkippableSetting::fromJsonObject(QJsonObject json) {

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_progress_offset_isValid = ::OpenAPI::fromJsonValue(m_progress_offset, json[QString("progressOffset")]);
    m_progress_offset_isSet = !json[QString("progressOffset")].isNull() && m_progress_offset_isValid;

    m_skip_offset_isValid = ::OpenAPI::fromJsonValue(m_skip_offset, json[QString("skipOffset")]);
    m_skip_offset_isSet = !json[QString("skipOffset")].isNull() && m_skip_offset_isValid;

    m_skippable_isValid = ::OpenAPI::fromJsonValue(m_skippable, json[QString("skippable")]);
    m_skippable_isSet = !json[QString("skippable")].isNull() && m_skippable_isValid;
}

QString OAISkippableSetting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISkippableSetting::asJsonObject() const {
    QJsonObject obj;
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_progress_offset.isSet()) {
        obj.insert(QString("progressOffset"), ::OpenAPI::toJsonValue(m_progress_offset));
    }
    if (m_skip_offset.isSet()) {
        obj.insert(QString("skipOffset"), ::OpenAPI::toJsonValue(m_skip_offset));
    }
    if (m_skippable_isSet) {
        obj.insert(QString("skippable"), ::OpenAPI::toJsonValue(m_skippable));
    }
    return obj;
}

QString OAISkippableSetting::getKind() const {
    return m_kind;
}
void OAISkippableSetting::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAISkippableSetting::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAISkippableSetting::is_kind_Valid() const{
    return m_kind_isValid;
}

OAIVideoOffset OAISkippableSetting::getProgressOffset() const {
    return m_progress_offset;
}
void OAISkippableSetting::setProgressOffset(const OAIVideoOffset &progress_offset) {
    m_progress_offset = progress_offset;
    m_progress_offset_isSet = true;
}

bool OAISkippableSetting::is_progress_offset_Set() const{
    return m_progress_offset_isSet;
}

bool OAISkippableSetting::is_progress_offset_Valid() const{
    return m_progress_offset_isValid;
}

OAIVideoOffset OAISkippableSetting::getSkipOffset() const {
    return m_skip_offset;
}
void OAISkippableSetting::setSkipOffset(const OAIVideoOffset &skip_offset) {
    m_skip_offset = skip_offset;
    m_skip_offset_isSet = true;
}

bool OAISkippableSetting::is_skip_offset_Set() const{
    return m_skip_offset_isSet;
}

bool OAISkippableSetting::is_skip_offset_Valid() const{
    return m_skip_offset_isValid;
}

bool OAISkippableSetting::isSkippable() const {
    return m_skippable;
}
void OAISkippableSetting::setSkippable(const bool &skippable) {
    m_skippable = skippable;
    m_skippable_isSet = true;
}

bool OAISkippableSetting::is_skippable_Set() const{
    return m_skippable_isSet;
}

bool OAISkippableSetting::is_skippable_Valid() const{
    return m_skippable_isValid;
}

bool OAISkippableSetting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_offset.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_offset.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_skippable_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISkippableSetting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
