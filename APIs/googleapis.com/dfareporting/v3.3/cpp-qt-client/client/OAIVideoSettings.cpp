/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoSettings::OAIVideoSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoSettings::OAIVideoSettings() {
    this->initializeModel();
}

OAIVideoSettings::~OAIVideoSettings() {}

void OAIVideoSettings::initializeModel() {

    m_companion_settings_isSet = false;
    m_companion_settings_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_orientation_isSet = false;
    m_orientation_isValid = false;

    m_skippable_settings_isSet = false;
    m_skippable_settings_isValid = false;

    m_transcode_settings_isSet = false;
    m_transcode_settings_isValid = false;
}

void OAIVideoSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoSettings::fromJsonObject(QJsonObject json) {

    m_companion_settings_isValid = ::OpenAPI::fromJsonValue(m_companion_settings, json[QString("companionSettings")]);
    m_companion_settings_isSet = !json[QString("companionSettings")].isNull() && m_companion_settings_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_orientation_isValid = ::OpenAPI::fromJsonValue(m_orientation, json[QString("orientation")]);
    m_orientation_isSet = !json[QString("orientation")].isNull() && m_orientation_isValid;

    m_skippable_settings_isValid = ::OpenAPI::fromJsonValue(m_skippable_settings, json[QString("skippableSettings")]);
    m_skippable_settings_isSet = !json[QString("skippableSettings")].isNull() && m_skippable_settings_isValid;

    m_transcode_settings_isValid = ::OpenAPI::fromJsonValue(m_transcode_settings, json[QString("transcodeSettings")]);
    m_transcode_settings_isSet = !json[QString("transcodeSettings")].isNull() && m_transcode_settings_isValid;
}

QString OAIVideoSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_companion_settings.isSet()) {
        obj.insert(QString("companionSettings"), ::OpenAPI::toJsonValue(m_companion_settings));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_orientation_isSet) {
        obj.insert(QString("orientation"), ::OpenAPI::toJsonValue(m_orientation));
    }
    if (m_skippable_settings.isSet()) {
        obj.insert(QString("skippableSettings"), ::OpenAPI::toJsonValue(m_skippable_settings));
    }
    if (m_transcode_settings.isSet()) {
        obj.insert(QString("transcodeSettings"), ::OpenAPI::toJsonValue(m_transcode_settings));
    }
    return obj;
}

OAICompanionSetting OAIVideoSettings::getCompanionSettings() const {
    return m_companion_settings;
}
void OAIVideoSettings::setCompanionSettings(const OAICompanionSetting &companion_settings) {
    m_companion_settings = companion_settings;
    m_companion_settings_isSet = true;
}

bool OAIVideoSettings::is_companion_settings_Set() const{
    return m_companion_settings_isSet;
}

bool OAIVideoSettings::is_companion_settings_Valid() const{
    return m_companion_settings_isValid;
}

QString OAIVideoSettings::getKind() const {
    return m_kind;
}
void OAIVideoSettings::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIVideoSettings::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIVideoSettings::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIVideoSettings::getOrientation() const {
    return m_orientation;
}
void OAIVideoSettings::setOrientation(const QString &orientation) {
    m_orientation = orientation;
    m_orientation_isSet = true;
}

bool OAIVideoSettings::is_orientation_Set() const{
    return m_orientation_isSet;
}

bool OAIVideoSettings::is_orientation_Valid() const{
    return m_orientation_isValid;
}

OAISkippableSetting OAIVideoSettings::getSkippableSettings() const {
    return m_skippable_settings;
}
void OAIVideoSettings::setSkippableSettings(const OAISkippableSetting &skippable_settings) {
    m_skippable_settings = skippable_settings;
    m_skippable_settings_isSet = true;
}

bool OAIVideoSettings::is_skippable_settings_Set() const{
    return m_skippable_settings_isSet;
}

bool OAIVideoSettings::is_skippable_settings_Valid() const{
    return m_skippable_settings_isValid;
}

OAITranscodeSetting OAIVideoSettings::getTranscodeSettings() const {
    return m_transcode_settings;
}
void OAIVideoSettings::setTranscodeSettings(const OAITranscodeSetting &transcode_settings) {
    m_transcode_settings = transcode_settings;
    m_transcode_settings_isSet = true;
}

bool OAIVideoSettings::is_transcode_settings_Set() const{
    return m_transcode_settings_isSet;
}

bool OAIVideoSettings::is_transcode_settings_Valid() const{
    return m_transcode_settings_isValid;
}

bool OAIVideoSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_companion_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orientation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skippable_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transcode_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
