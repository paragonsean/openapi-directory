/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAccount.h
 *
 * Contains properties of a Campaign Manager account.
 */

#ifndef OAIAccount_H
#define OAIAccount_H

#include <QJsonObject>

#include "OAIReportsConfiguration.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIReportsConfiguration;

class OAIAccount : public OAIObject {
public:
    OAIAccount();
    OAIAccount(QString json);
    ~OAIAccount() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getAccountPermissionIds() const;
    void setAccountPermissionIds(const QList<QString> &account_permission_ids);
    bool is_account_permission_ids_Set() const;
    bool is_account_permission_ids_Valid() const;

    QString getAccountProfile() const;
    void setAccountProfile(const QString &account_profile);
    bool is_account_profile_Set() const;
    bool is_account_profile_Valid() const;

    bool isActive() const;
    void setActive(const bool &active);
    bool is_active_Set() const;
    bool is_active_Valid() const;

    QString getActiveAdsLimitTier() const;
    void setActiveAdsLimitTier(const QString &active_ads_limit_tier);
    bool is_active_ads_limit_tier_Set() const;
    bool is_active_ads_limit_tier_Valid() const;

    bool isActiveViewOptOut() const;
    void setActiveViewOptOut(const bool &active_view_opt_out);
    bool is_active_view_opt_out_Set() const;
    bool is_active_view_opt_out_Valid() const;

    QList<QString> getAvailablePermissionIds() const;
    void setAvailablePermissionIds(const QList<QString> &available_permission_ids);
    bool is_available_permission_ids_Set() const;
    bool is_available_permission_ids_Valid() const;

    QString getCountryId() const;
    void setCountryId(const QString &country_id);
    bool is_country_id_Set() const;
    bool is_country_id_Valid() const;

    QString getCurrencyId() const;
    void setCurrencyId(const QString &currency_id);
    bool is_currency_id_Set() const;
    bool is_currency_id_Valid() const;

    QString getDefaultCreativeSizeId() const;
    void setDefaultCreativeSizeId(const QString &default_creative_size_id);
    bool is_default_creative_size_id_Set() const;
    bool is_default_creative_size_id_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getKind() const;
    void setKind(const QString &kind);
    bool is_kind_Set() const;
    bool is_kind_Valid() const;

    QString getLocale() const;
    void setLocale(const QString &locale);
    bool is_locale_Set() const;
    bool is_locale_Valid() const;

    QString getMaximumImageSize() const;
    void setMaximumImageSize(const QString &maximum_image_size);
    bool is_maximum_image_size_Set() const;
    bool is_maximum_image_size_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    bool isNielsenOcrEnabled() const;
    void setNielsenOcrEnabled(const bool &nielsen_ocr_enabled);
    bool is_nielsen_ocr_enabled_Set() const;
    bool is_nielsen_ocr_enabled_Valid() const;

    OAIReportsConfiguration getReportsConfiguration() const;
    void setReportsConfiguration(const OAIReportsConfiguration &reports_configuration);
    bool is_reports_configuration_Set() const;
    bool is_reports_configuration_Valid() const;

    bool isShareReportsWithTwitter() const;
    void setShareReportsWithTwitter(const bool &share_reports_with_twitter);
    bool is_share_reports_with_twitter_Set() const;
    bool is_share_reports_with_twitter_Valid() const;

    QString getTeaserSizeLimit() const;
    void setTeaserSizeLimit(const QString &teaser_size_limit);
    bool is_teaser_size_limit_Set() const;
    bool is_teaser_size_limit_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_account_permission_ids;
    bool m_account_permission_ids_isSet;
    bool m_account_permission_ids_isValid;

    QString m_account_profile;
    bool m_account_profile_isSet;
    bool m_account_profile_isValid;

    bool m_active;
    bool m_active_isSet;
    bool m_active_isValid;

    QString m_active_ads_limit_tier;
    bool m_active_ads_limit_tier_isSet;
    bool m_active_ads_limit_tier_isValid;

    bool m_active_view_opt_out;
    bool m_active_view_opt_out_isSet;
    bool m_active_view_opt_out_isValid;

    QList<QString> m_available_permission_ids;
    bool m_available_permission_ids_isSet;
    bool m_available_permission_ids_isValid;

    QString m_country_id;
    bool m_country_id_isSet;
    bool m_country_id_isValid;

    QString m_currency_id;
    bool m_currency_id_isSet;
    bool m_currency_id_isValid;

    QString m_default_creative_size_id;
    bool m_default_creative_size_id_isSet;
    bool m_default_creative_size_id_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_kind;
    bool m_kind_isSet;
    bool m_kind_isValid;

    QString m_locale;
    bool m_locale_isSet;
    bool m_locale_isValid;

    QString m_maximum_image_size;
    bool m_maximum_image_size_isSet;
    bool m_maximum_image_size_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    bool m_nielsen_ocr_enabled;
    bool m_nielsen_ocr_enabled_isSet;
    bool m_nielsen_ocr_enabled_isValid;

    OAIReportsConfiguration m_reports_configuration;
    bool m_reports_configuration_isSet;
    bool m_reports_configuration_isValid;

    bool m_share_reports_with_twitter;
    bool m_share_reports_with_twitter_isSet;
    bool m_share_reports_with_twitter_isValid;

    QString m_teaser_size_limit;
    bool m_teaser_size_limit_isSet;
    bool m_teaser_size_limit_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAccount)

#endif // OAIAccount_H
