/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOmnitureSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOmnitureSettings::OAIOmnitureSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOmnitureSettings::OAIOmnitureSettings() {
    this->initializeModel();
}

OAIOmnitureSettings::~OAIOmnitureSettings() {}

void OAIOmnitureSettings::initializeModel() {

    m_omniture_cost_data_enabled_isSet = false;
    m_omniture_cost_data_enabled_isValid = false;

    m_omniture_integration_enabled_isSet = false;
    m_omniture_integration_enabled_isValid = false;
}

void OAIOmnitureSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOmnitureSettings::fromJsonObject(QJsonObject json) {

    m_omniture_cost_data_enabled_isValid = ::OpenAPI::fromJsonValue(m_omniture_cost_data_enabled, json[QString("omnitureCostDataEnabled")]);
    m_omniture_cost_data_enabled_isSet = !json[QString("omnitureCostDataEnabled")].isNull() && m_omniture_cost_data_enabled_isValid;

    m_omniture_integration_enabled_isValid = ::OpenAPI::fromJsonValue(m_omniture_integration_enabled, json[QString("omnitureIntegrationEnabled")]);
    m_omniture_integration_enabled_isSet = !json[QString("omnitureIntegrationEnabled")].isNull() && m_omniture_integration_enabled_isValid;
}

QString OAIOmnitureSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOmnitureSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_omniture_cost_data_enabled_isSet) {
        obj.insert(QString("omnitureCostDataEnabled"), ::OpenAPI::toJsonValue(m_omniture_cost_data_enabled));
    }
    if (m_omniture_integration_enabled_isSet) {
        obj.insert(QString("omnitureIntegrationEnabled"), ::OpenAPI::toJsonValue(m_omniture_integration_enabled));
    }
    return obj;
}

bool OAIOmnitureSettings::isOmnitureCostDataEnabled() const {
    return m_omniture_cost_data_enabled;
}
void OAIOmnitureSettings::setOmnitureCostDataEnabled(const bool &omniture_cost_data_enabled) {
    m_omniture_cost_data_enabled = omniture_cost_data_enabled;
    m_omniture_cost_data_enabled_isSet = true;
}

bool OAIOmnitureSettings::is_omniture_cost_data_enabled_Set() const{
    return m_omniture_cost_data_enabled_isSet;
}

bool OAIOmnitureSettings::is_omniture_cost_data_enabled_Valid() const{
    return m_omniture_cost_data_enabled_isValid;
}

bool OAIOmnitureSettings::isOmnitureIntegrationEnabled() const {
    return m_omniture_integration_enabled;
}
void OAIOmnitureSettings::setOmnitureIntegrationEnabled(const bool &omniture_integration_enabled) {
    m_omniture_integration_enabled = omniture_integration_enabled;
    m_omniture_integration_enabled_isSet = true;
}

bool OAIOmnitureSettings::is_omniture_integration_enabled_Set() const{
    return m_omniture_integration_enabled_isSet;
}

bool OAIOmnitureSettings::is_omniture_integration_enabled_Valid() const{
    return m_omniture_integration_enabled_isValid;
}

bool OAIOmnitureSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_omniture_cost_data_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_omniture_integration_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOmnitureSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
