/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Click-through URL
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:21.296999-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreativeClickThroughUrl {
  public static final String SERIALIZED_NAME_COMPUTED_CLICK_THROUGH_URL = "computedClickThroughUrl";
  @SerializedName(SERIALIZED_NAME_COMPUTED_CLICK_THROUGH_URL)
  private String computedClickThroughUrl;

  public static final String SERIALIZED_NAME_CUSTOM_CLICK_THROUGH_URL = "customClickThroughUrl";
  @SerializedName(SERIALIZED_NAME_CUSTOM_CLICK_THROUGH_URL)
  private String customClickThroughUrl;

  public static final String SERIALIZED_NAME_LANDING_PAGE_ID = "landingPageId";
  @SerializedName(SERIALIZED_NAME_LANDING_PAGE_ID)
  private String landingPageId;

  public CreativeClickThroughUrl() {
  }

  public CreativeClickThroughUrl computedClickThroughUrl(String computedClickThroughUrl) {
    this.computedClickThroughUrl = computedClickThroughUrl;
    return this;
  }

  /**
   * Read-only convenience field representing the actual URL that will be used for this click-through. The URL is computed as follows: - If landingPageId is specified then that landing page&#39;s URL is assigned to this field. - Otherwise, the customClickThroughUrl is assigned to this field. 
   * @return computedClickThroughUrl
   */
  @javax.annotation.Nullable
  public String getComputedClickThroughUrl() {
    return computedClickThroughUrl;
  }

  public void setComputedClickThroughUrl(String computedClickThroughUrl) {
    this.computedClickThroughUrl = computedClickThroughUrl;
  }


  public CreativeClickThroughUrl customClickThroughUrl(String customClickThroughUrl) {
    this.customClickThroughUrl = customClickThroughUrl;
    return this;
  }

  /**
   * Custom click-through URL. Applicable if the landingPageId field is left unset.
   * @return customClickThroughUrl
   */
  @javax.annotation.Nullable
  public String getCustomClickThroughUrl() {
    return customClickThroughUrl;
  }

  public void setCustomClickThroughUrl(String customClickThroughUrl) {
    this.customClickThroughUrl = customClickThroughUrl;
  }


  public CreativeClickThroughUrl landingPageId(String landingPageId) {
    this.landingPageId = landingPageId;
    return this;
  }

  /**
   * ID of the landing page for the click-through URL.
   * @return landingPageId
   */
  @javax.annotation.Nullable
  public String getLandingPageId() {
    return landingPageId;
  }

  public void setLandingPageId(String landingPageId) {
    this.landingPageId = landingPageId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreativeClickThroughUrl creativeClickThroughUrl = (CreativeClickThroughUrl) o;
    return Objects.equals(this.computedClickThroughUrl, creativeClickThroughUrl.computedClickThroughUrl) &&
        Objects.equals(this.customClickThroughUrl, creativeClickThroughUrl.customClickThroughUrl) &&
        Objects.equals(this.landingPageId, creativeClickThroughUrl.landingPageId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(computedClickThroughUrl, customClickThroughUrl, landingPageId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreativeClickThroughUrl {\n");
    sb.append("    computedClickThroughUrl: ").append(toIndentedString(computedClickThroughUrl)).append("\n");
    sb.append("    customClickThroughUrl: ").append(toIndentedString(customClickThroughUrl)).append("\n");
    sb.append("    landingPageId: ").append(toIndentedString(landingPageId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("computedClickThroughUrl");
    openapiFields.add("customClickThroughUrl");
    openapiFields.add("landingPageId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreativeClickThroughUrl
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreativeClickThroughUrl.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreativeClickThroughUrl is not found in the empty JSON string", CreativeClickThroughUrl.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreativeClickThroughUrl.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreativeClickThroughUrl` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("computedClickThroughUrl") != null && !jsonObj.get("computedClickThroughUrl").isJsonNull()) && !jsonObj.get("computedClickThroughUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `computedClickThroughUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("computedClickThroughUrl").toString()));
      }
      if ((jsonObj.get("customClickThroughUrl") != null && !jsonObj.get("customClickThroughUrl").isJsonNull()) && !jsonObj.get("customClickThroughUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customClickThroughUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customClickThroughUrl").toString()));
      }
      if ((jsonObj.get("landingPageId") != null && !jsonObj.get("landingPageId").isJsonNull()) && !jsonObj.get("landingPageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `landingPageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("landingPageId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreativeClickThroughUrl.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreativeClickThroughUrl' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreativeClickThroughUrl> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreativeClickThroughUrl.class));

       return (TypeAdapter<T>) new TypeAdapter<CreativeClickThroughUrl>() {
           @Override
           public void write(JsonWriter out, CreativeClickThroughUrl value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreativeClickThroughUrl read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreativeClickThroughUrl given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreativeClickThroughUrl
   * @throws IOException if the JSON string is invalid with respect to CreativeClickThroughUrl
   */
  public static CreativeClickThroughUrl fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreativeClickThroughUrl.class);
  }

  /**
   * Convert an instance of CreativeClickThroughUrl to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

