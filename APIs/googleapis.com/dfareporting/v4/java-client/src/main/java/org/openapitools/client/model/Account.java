/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ReportsConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains properties of a Campaign Manager account.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:21.296999-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Account {
  public static final String SERIALIZED_NAME_ACCOUNT_PERMISSION_IDS = "accountPermissionIds";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_PERMISSION_IDS)
  private List<String> accountPermissionIds = new ArrayList<>();

  /**
   * Profile for this account. This is a read-only field that can be left blank.
   */
  @JsonAdapter(AccountProfileEnum.Adapter.class)
  public enum AccountProfileEnum {
    BASIC("ACCOUNT_PROFILE_BASIC"),
    
    STANDARD("ACCOUNT_PROFILE_STANDARD");

    private String value;

    AccountProfileEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccountProfileEnum fromValue(String value) {
      for (AccountProfileEnum b : AccountProfileEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccountProfileEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccountProfileEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccountProfileEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccountProfileEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AccountProfileEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACCOUNT_PROFILE = "accountProfile";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_PROFILE)
  private AccountProfileEnum accountProfile;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  /**
   * Maximum number of active ads allowed for this account.
   */
  @JsonAdapter(ActiveAdsLimitTierEnum.Adapter.class)
  public enum ActiveAdsLimitTierEnum {
    _40_K("ACTIVE_ADS_TIER_40K"),
    
    _75_K("ACTIVE_ADS_TIER_75K"),
    
    _100_K("ACTIVE_ADS_TIER_100K"),
    
    _200_K("ACTIVE_ADS_TIER_200K"),
    
    _300_K("ACTIVE_ADS_TIER_300K"),
    
    _500_K("ACTIVE_ADS_TIER_500K"),
    
    _750_K("ACTIVE_ADS_TIER_750K"),
    
    _1_M("ACTIVE_ADS_TIER_1M");

    private String value;

    ActiveAdsLimitTierEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActiveAdsLimitTierEnum fromValue(String value) {
      for (ActiveAdsLimitTierEnum b : ActiveAdsLimitTierEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActiveAdsLimitTierEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActiveAdsLimitTierEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActiveAdsLimitTierEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActiveAdsLimitTierEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActiveAdsLimitTierEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTIVE_ADS_LIMIT_TIER = "activeAdsLimitTier";
  @SerializedName(SERIALIZED_NAME_ACTIVE_ADS_LIMIT_TIER)
  private ActiveAdsLimitTierEnum activeAdsLimitTier;

  public static final String SERIALIZED_NAME_ACTIVE_VIEW_OPT_OUT = "activeViewOptOut";
  @SerializedName(SERIALIZED_NAME_ACTIVE_VIEW_OPT_OUT)
  private Boolean activeViewOptOut;

  public static final String SERIALIZED_NAME_AVAILABLE_PERMISSION_IDS = "availablePermissionIds";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_PERMISSION_IDS)
  private List<String> availablePermissionIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_COUNTRY_ID = "countryId";
  @SerializedName(SERIALIZED_NAME_COUNTRY_ID)
  private String countryId;

  public static final String SERIALIZED_NAME_CURRENCY_ID = "currencyId";
  @SerializedName(SERIALIZED_NAME_CURRENCY_ID)
  private String currencyId;

  public static final String SERIALIZED_NAME_DEFAULT_CREATIVE_SIZE_ID = "defaultCreativeSizeId";
  @SerializedName(SERIALIZED_NAME_DEFAULT_CREATIVE_SIZE_ID)
  private String defaultCreativeSizeId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_MAXIMUM_IMAGE_SIZE = "maximumImageSize";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_IMAGE_SIZE)
  private String maximumImageSize;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NIELSEN_OCR_ENABLED = "nielsenOcrEnabled";
  @SerializedName(SERIALIZED_NAME_NIELSEN_OCR_ENABLED)
  private Boolean nielsenOcrEnabled;

  public static final String SERIALIZED_NAME_REPORTS_CONFIGURATION = "reportsConfiguration";
  @SerializedName(SERIALIZED_NAME_REPORTS_CONFIGURATION)
  private ReportsConfiguration reportsConfiguration;

  public static final String SERIALIZED_NAME_SHARE_REPORTS_WITH_TWITTER = "shareReportsWithTwitter";
  @SerializedName(SERIALIZED_NAME_SHARE_REPORTS_WITH_TWITTER)
  private Boolean shareReportsWithTwitter;

  public static final String SERIALIZED_NAME_TEASER_SIZE_LIMIT = "teaserSizeLimit";
  @SerializedName(SERIALIZED_NAME_TEASER_SIZE_LIMIT)
  private String teaserSizeLimit;

  public Account() {
  }

  public Account accountPermissionIds(List<String> accountPermissionIds) {
    this.accountPermissionIds = accountPermissionIds;
    return this;
  }

  public Account addAccountPermissionIdsItem(String accountPermissionIdsItem) {
    if (this.accountPermissionIds == null) {
      this.accountPermissionIds = new ArrayList<>();
    }
    this.accountPermissionIds.add(accountPermissionIdsItem);
    return this;
  }

  /**
   * Account permissions assigned to this account.
   * @return accountPermissionIds
   */
  @javax.annotation.Nullable
  public List<String> getAccountPermissionIds() {
    return accountPermissionIds;
  }

  public void setAccountPermissionIds(List<String> accountPermissionIds) {
    this.accountPermissionIds = accountPermissionIds;
  }


  public Account accountProfile(AccountProfileEnum accountProfile) {
    this.accountProfile = accountProfile;
    return this;
  }

  /**
   * Profile for this account. This is a read-only field that can be left blank.
   * @return accountProfile
   */
  @javax.annotation.Nullable
  public AccountProfileEnum getAccountProfile() {
    return accountProfile;
  }

  public void setAccountProfile(AccountProfileEnum accountProfile) {
    this.accountProfile = accountProfile;
  }


  public Account active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Whether this account is active.
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public Account activeAdsLimitTier(ActiveAdsLimitTierEnum activeAdsLimitTier) {
    this.activeAdsLimitTier = activeAdsLimitTier;
    return this;
  }

  /**
   * Maximum number of active ads allowed for this account.
   * @return activeAdsLimitTier
   */
  @javax.annotation.Nullable
  public ActiveAdsLimitTierEnum getActiveAdsLimitTier() {
    return activeAdsLimitTier;
  }

  public void setActiveAdsLimitTier(ActiveAdsLimitTierEnum activeAdsLimitTier) {
    this.activeAdsLimitTier = activeAdsLimitTier;
  }


  public Account activeViewOptOut(Boolean activeViewOptOut) {
    this.activeViewOptOut = activeViewOptOut;
    return this;
  }

  /**
   * Whether to serve creatives with Active View tags. If disabled, viewability data will not be available for any impressions.
   * @return activeViewOptOut
   */
  @javax.annotation.Nullable
  public Boolean getActiveViewOptOut() {
    return activeViewOptOut;
  }

  public void setActiveViewOptOut(Boolean activeViewOptOut) {
    this.activeViewOptOut = activeViewOptOut;
  }


  public Account availablePermissionIds(List<String> availablePermissionIds) {
    this.availablePermissionIds = availablePermissionIds;
    return this;
  }

  public Account addAvailablePermissionIdsItem(String availablePermissionIdsItem) {
    if (this.availablePermissionIds == null) {
      this.availablePermissionIds = new ArrayList<>();
    }
    this.availablePermissionIds.add(availablePermissionIdsItem);
    return this;
  }

  /**
   * User role permissions available to the user roles of this account.
   * @return availablePermissionIds
   */
  @javax.annotation.Nullable
  public List<String> getAvailablePermissionIds() {
    return availablePermissionIds;
  }

  public void setAvailablePermissionIds(List<String> availablePermissionIds) {
    this.availablePermissionIds = availablePermissionIds;
  }


  public Account countryId(String countryId) {
    this.countryId = countryId;
    return this;
  }

  /**
   * ID of the country associated with this account.
   * @return countryId
   */
  @javax.annotation.Nullable
  public String getCountryId() {
    return countryId;
  }

  public void setCountryId(String countryId) {
    this.countryId = countryId;
  }


  public Account currencyId(String currencyId) {
    this.currencyId = currencyId;
    return this;
  }

  /**
   * ID of currency associated with this account. This is a required field. Acceptable values are: - \&quot;1\&quot; for USD - \&quot;2\&quot; for GBP - \&quot;3\&quot; for ESP - \&quot;4\&quot; for SEK - \&quot;5\&quot; for CAD - \&quot;6\&quot; for JPY - \&quot;7\&quot; for DEM - \&quot;8\&quot; for AUD - \&quot;9\&quot; for FRF - \&quot;10\&quot; for ITL - \&quot;11\&quot; for DKK - \&quot;12\&quot; for NOK - \&quot;13\&quot; for FIM - \&quot;14\&quot; for ZAR - \&quot;15\&quot; for IEP - \&quot;16\&quot; for NLG - \&quot;17\&quot; for EUR - \&quot;18\&quot; for KRW - \&quot;19\&quot; for TWD - \&quot;20\&quot; for SGD - \&quot;21\&quot; for CNY - \&quot;22\&quot; for HKD - \&quot;23\&quot; for NZD - \&quot;24\&quot; for MYR - \&quot;25\&quot; for BRL - \&quot;26\&quot; for PTE - \&quot;28\&quot; for CLP - \&quot;29\&quot; for TRY - \&quot;30\&quot; for ARS - \&quot;31\&quot; for PEN - \&quot;32\&quot; for ILS - \&quot;33\&quot; for CHF - \&quot;34\&quot; for VEF - \&quot;35\&quot; for COP - \&quot;36\&quot; for GTQ - \&quot;37\&quot; for PLN - \&quot;39\&quot; for INR - \&quot;40\&quot; for THB - \&quot;41\&quot; for IDR - \&quot;42\&quot; for CZK - \&quot;43\&quot; for RON - \&quot;44\&quot; for HUF - \&quot;45\&quot; for RUB - \&quot;46\&quot; for AED - \&quot;47\&quot; for BGN - \&quot;48\&quot; for HRK - \&quot;49\&quot; for MXN - \&quot;50\&quot; for NGN - \&quot;51\&quot; for EGP 
   * @return currencyId
   */
  @javax.annotation.Nullable
  public String getCurrencyId() {
    return currencyId;
  }

  public void setCurrencyId(String currencyId) {
    this.currencyId = currencyId;
  }


  public Account defaultCreativeSizeId(String defaultCreativeSizeId) {
    this.defaultCreativeSizeId = defaultCreativeSizeId;
    return this;
  }

  /**
   * Default placement dimensions for this account.
   * @return defaultCreativeSizeId
   */
  @javax.annotation.Nullable
  public String getDefaultCreativeSizeId() {
    return defaultCreativeSizeId;
  }

  public void setDefaultCreativeSizeId(String defaultCreativeSizeId) {
    this.defaultCreativeSizeId = defaultCreativeSizeId;
  }


  public Account description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of this account.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Account id(String id) {
    this.id = id;
    return this;
  }

  /**
   * ID of this account. This is a read-only, auto-generated field.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Account kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string \&quot;dfareporting#account\&quot;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Account locale(String locale) {
    this.locale = locale;
    return this;
  }

  /**
   * Locale of this account. Acceptable values are: - \&quot;cs\&quot; (Czech) - \&quot;de\&quot; (German) - \&quot;en\&quot; (English) - \&quot;en-GB\&quot; (English United Kingdom) - \&quot;es\&quot; (Spanish) - \&quot;fr\&quot; (French) - \&quot;it\&quot; (Italian) - \&quot;ja\&quot; (Japanese) - \&quot;ko\&quot; (Korean) - \&quot;pl\&quot; (Polish) - \&quot;pt-BR\&quot; (Portuguese Brazil) - \&quot;ru\&quot; (Russian) - \&quot;sv\&quot; (Swedish) - \&quot;tr\&quot; (Turkish) - \&quot;zh-CN\&quot; (Chinese Simplified) - \&quot;zh-TW\&quot; (Chinese Traditional) 
   * @return locale
   */
  @javax.annotation.Nullable
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }


  public Account maximumImageSize(String maximumImageSize) {
    this.maximumImageSize = maximumImageSize;
    return this;
  }

  /**
   * Maximum image size allowed for this account, in kilobytes. Value must be greater than or equal to 1.
   * @return maximumImageSize
   */
  @javax.annotation.Nullable
  public String getMaximumImageSize() {
    return maximumImageSize;
  }

  public void setMaximumImageSize(String maximumImageSize) {
    this.maximumImageSize = maximumImageSize;
  }


  public Account name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of this account. This is a required field, and must be less than 128 characters long and be globally unique.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Account nielsenOcrEnabled(Boolean nielsenOcrEnabled) {
    this.nielsenOcrEnabled = nielsenOcrEnabled;
    return this;
  }

  /**
   * Whether campaigns created in this account will be enabled for Nielsen OCR reach ratings by default.
   * @return nielsenOcrEnabled
   */
  @javax.annotation.Nullable
  public Boolean getNielsenOcrEnabled() {
    return nielsenOcrEnabled;
  }

  public void setNielsenOcrEnabled(Boolean nielsenOcrEnabled) {
    this.nielsenOcrEnabled = nielsenOcrEnabled;
  }


  public Account reportsConfiguration(ReportsConfiguration reportsConfiguration) {
    this.reportsConfiguration = reportsConfiguration;
    return this;
  }

  /**
   * Get reportsConfiguration
   * @return reportsConfiguration
   */
  @javax.annotation.Nullable
  public ReportsConfiguration getReportsConfiguration() {
    return reportsConfiguration;
  }

  public void setReportsConfiguration(ReportsConfiguration reportsConfiguration) {
    this.reportsConfiguration = reportsConfiguration;
  }


  public Account shareReportsWithTwitter(Boolean shareReportsWithTwitter) {
    this.shareReportsWithTwitter = shareReportsWithTwitter;
    return this;
  }

  /**
   * Share Path to Conversion reports with Twitter.
   * @return shareReportsWithTwitter
   */
  @javax.annotation.Nullable
  public Boolean getShareReportsWithTwitter() {
    return shareReportsWithTwitter;
  }

  public void setShareReportsWithTwitter(Boolean shareReportsWithTwitter) {
    this.shareReportsWithTwitter = shareReportsWithTwitter;
  }


  public Account teaserSizeLimit(String teaserSizeLimit) {
    this.teaserSizeLimit = teaserSizeLimit;
    return this;
  }

  /**
   * File size limit in kilobytes of Rich Media teaser creatives. Acceptable values are 1 to 10240, inclusive.
   * @return teaserSizeLimit
   */
  @javax.annotation.Nullable
  public String getTeaserSizeLimit() {
    return teaserSizeLimit;
  }

  public void setTeaserSizeLimit(String teaserSizeLimit) {
    this.teaserSizeLimit = teaserSizeLimit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Account account = (Account) o;
    return Objects.equals(this.accountPermissionIds, account.accountPermissionIds) &&
        Objects.equals(this.accountProfile, account.accountProfile) &&
        Objects.equals(this.active, account.active) &&
        Objects.equals(this.activeAdsLimitTier, account.activeAdsLimitTier) &&
        Objects.equals(this.activeViewOptOut, account.activeViewOptOut) &&
        Objects.equals(this.availablePermissionIds, account.availablePermissionIds) &&
        Objects.equals(this.countryId, account.countryId) &&
        Objects.equals(this.currencyId, account.currencyId) &&
        Objects.equals(this.defaultCreativeSizeId, account.defaultCreativeSizeId) &&
        Objects.equals(this.description, account.description) &&
        Objects.equals(this.id, account.id) &&
        Objects.equals(this.kind, account.kind) &&
        Objects.equals(this.locale, account.locale) &&
        Objects.equals(this.maximumImageSize, account.maximumImageSize) &&
        Objects.equals(this.name, account.name) &&
        Objects.equals(this.nielsenOcrEnabled, account.nielsenOcrEnabled) &&
        Objects.equals(this.reportsConfiguration, account.reportsConfiguration) &&
        Objects.equals(this.shareReportsWithTwitter, account.shareReportsWithTwitter) &&
        Objects.equals(this.teaserSizeLimit, account.teaserSizeLimit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountPermissionIds, accountProfile, active, activeAdsLimitTier, activeViewOptOut, availablePermissionIds, countryId, currencyId, defaultCreativeSizeId, description, id, kind, locale, maximumImageSize, name, nielsenOcrEnabled, reportsConfiguration, shareReportsWithTwitter, teaserSizeLimit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Account {\n");
    sb.append("    accountPermissionIds: ").append(toIndentedString(accountPermissionIds)).append("\n");
    sb.append("    accountProfile: ").append(toIndentedString(accountProfile)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    activeAdsLimitTier: ").append(toIndentedString(activeAdsLimitTier)).append("\n");
    sb.append("    activeViewOptOut: ").append(toIndentedString(activeViewOptOut)).append("\n");
    sb.append("    availablePermissionIds: ").append(toIndentedString(availablePermissionIds)).append("\n");
    sb.append("    countryId: ").append(toIndentedString(countryId)).append("\n");
    sb.append("    currencyId: ").append(toIndentedString(currencyId)).append("\n");
    sb.append("    defaultCreativeSizeId: ").append(toIndentedString(defaultCreativeSizeId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    maximumImageSize: ").append(toIndentedString(maximumImageSize)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nielsenOcrEnabled: ").append(toIndentedString(nielsenOcrEnabled)).append("\n");
    sb.append("    reportsConfiguration: ").append(toIndentedString(reportsConfiguration)).append("\n");
    sb.append("    shareReportsWithTwitter: ").append(toIndentedString(shareReportsWithTwitter)).append("\n");
    sb.append("    teaserSizeLimit: ").append(toIndentedString(teaserSizeLimit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountPermissionIds");
    openapiFields.add("accountProfile");
    openapiFields.add("active");
    openapiFields.add("activeAdsLimitTier");
    openapiFields.add("activeViewOptOut");
    openapiFields.add("availablePermissionIds");
    openapiFields.add("countryId");
    openapiFields.add("currencyId");
    openapiFields.add("defaultCreativeSizeId");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("locale");
    openapiFields.add("maximumImageSize");
    openapiFields.add("name");
    openapiFields.add("nielsenOcrEnabled");
    openapiFields.add("reportsConfiguration");
    openapiFields.add("shareReportsWithTwitter");
    openapiFields.add("teaserSizeLimit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Account
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Account.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Account is not found in the empty JSON string", Account.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Account.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Account` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("accountPermissionIds") != null && !jsonObj.get("accountPermissionIds").isJsonNull() && !jsonObj.get("accountPermissionIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountPermissionIds` to be an array in the JSON string but got `%s`", jsonObj.get("accountPermissionIds").toString()));
      }
      if ((jsonObj.get("accountProfile") != null && !jsonObj.get("accountProfile").isJsonNull()) && !jsonObj.get("accountProfile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountProfile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountProfile").toString()));
      }
      // validate the optional field `accountProfile`
      if (jsonObj.get("accountProfile") != null && !jsonObj.get("accountProfile").isJsonNull()) {
        AccountProfileEnum.validateJsonElement(jsonObj.get("accountProfile"));
      }
      if ((jsonObj.get("activeAdsLimitTier") != null && !jsonObj.get("activeAdsLimitTier").isJsonNull()) && !jsonObj.get("activeAdsLimitTier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activeAdsLimitTier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activeAdsLimitTier").toString()));
      }
      // validate the optional field `activeAdsLimitTier`
      if (jsonObj.get("activeAdsLimitTier") != null && !jsonObj.get("activeAdsLimitTier").isJsonNull()) {
        ActiveAdsLimitTierEnum.validateJsonElement(jsonObj.get("activeAdsLimitTier"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("availablePermissionIds") != null && !jsonObj.get("availablePermissionIds").isJsonNull() && !jsonObj.get("availablePermissionIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `availablePermissionIds` to be an array in the JSON string but got `%s`", jsonObj.get("availablePermissionIds").toString()));
      }
      if ((jsonObj.get("countryId") != null && !jsonObj.get("countryId").isJsonNull()) && !jsonObj.get("countryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryId").toString()));
      }
      if ((jsonObj.get("currencyId") != null && !jsonObj.get("currencyId").isJsonNull()) && !jsonObj.get("currencyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyId").toString()));
      }
      if ((jsonObj.get("defaultCreativeSizeId") != null && !jsonObj.get("defaultCreativeSizeId").isJsonNull()) && !jsonObj.get("defaultCreativeSizeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultCreativeSizeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultCreativeSizeId").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) && !jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      if ((jsonObj.get("maximumImageSize") != null && !jsonObj.get("maximumImageSize").isJsonNull()) && !jsonObj.get("maximumImageSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maximumImageSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maximumImageSize").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `reportsConfiguration`
      if (jsonObj.get("reportsConfiguration") != null && !jsonObj.get("reportsConfiguration").isJsonNull()) {
        ReportsConfiguration.validateJsonElement(jsonObj.get("reportsConfiguration"));
      }
      if ((jsonObj.get("teaserSizeLimit") != null && !jsonObj.get("teaserSizeLimit").isJsonNull()) && !jsonObj.get("teaserSizeLimit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `teaserSizeLimit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("teaserSizeLimit").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Account.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Account' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Account> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Account.class));

       return (TypeAdapter<T>) new TypeAdapter<Account>() {
           @Override
           public void write(JsonWriter out, Account value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Account read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Account given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Account
   * @throws IOException if the JSON string is invalid with respect to Account
   */
  public static Account fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Account.class);
  }

  /**
   * Convert an instance of Account to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

