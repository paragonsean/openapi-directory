/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Ad Slot
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:21.296999-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AdSlot {
  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  /**
   * Ad slot compatibility. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop, mobile devices or in mobile apps for regular or interstitial ads respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. IN_STREAM_VIDEO refers to rendering in in-stream video ads developed with the VAST standard.
   */
  @JsonAdapter(CompatibilityEnum.Adapter.class)
  public enum CompatibilityEnum {
    DISPLAY("DISPLAY"),
    
    DISPLAY_INTERSTITIAL("DISPLAY_INTERSTITIAL"),
    
    APP("APP"),
    
    APP_INTERSTITIAL("APP_INTERSTITIAL"),
    
    IN_STREAM_VIDEO("IN_STREAM_VIDEO"),
    
    IN_STREAM_AUDIO("IN_STREAM_AUDIO");

    private String value;

    CompatibilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CompatibilityEnum fromValue(String value) {
      for (CompatibilityEnum b : CompatibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CompatibilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CompatibilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CompatibilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CompatibilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CompatibilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMPATIBILITY = "compatibility";
  @SerializedName(SERIALIZED_NAME_COMPATIBILITY)
  private CompatibilityEnum compatibility;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private String height;

  public static final String SERIALIZED_NAME_LINKED_PLACEMENT_ID = "linkedPlacementId";
  @SerializedName(SERIALIZED_NAME_LINKED_PLACEMENT_ID)
  private String linkedPlacementId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Payment source type of this ad slot.
   */
  @JsonAdapter(PaymentSourceTypeEnum.Adapter.class)
  public enum PaymentSourceTypeEnum {
    AGENCY_PAID("PLANNING_PAYMENT_SOURCE_TYPE_AGENCY_PAID"),
    
    PUBLISHER_PAID("PLANNING_PAYMENT_SOURCE_TYPE_PUBLISHER_PAID");

    private String value;

    PaymentSourceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentSourceTypeEnum fromValue(String value) {
      for (PaymentSourceTypeEnum b : PaymentSourceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentSourceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentSourceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentSourceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentSourceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PaymentSourceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_SOURCE_TYPE = "paymentSourceType";
  @SerializedName(SERIALIZED_NAME_PAYMENT_SOURCE_TYPE)
  private PaymentSourceTypeEnum paymentSourceType;

  public static final String SERIALIZED_NAME_PRIMARY = "primary";
  @SerializedName(SERIALIZED_NAME_PRIMARY)
  private Boolean primary;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private String width;

  public AdSlot() {
  }

  public AdSlot comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Comment for this ad slot.
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public AdSlot compatibility(CompatibilityEnum compatibility) {
    this.compatibility = compatibility;
    return this;
  }

  /**
   * Ad slot compatibility. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop, mobile devices or in mobile apps for regular or interstitial ads respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. IN_STREAM_VIDEO refers to rendering in in-stream video ads developed with the VAST standard.
   * @return compatibility
   */
  @javax.annotation.Nullable
  public CompatibilityEnum getCompatibility() {
    return compatibility;
  }

  public void setCompatibility(CompatibilityEnum compatibility) {
    this.compatibility = compatibility;
  }


  public AdSlot height(String height) {
    this.height = height;
    return this;
  }

  /**
   * Height of this ad slot.
   * @return height
   */
  @javax.annotation.Nullable
  public String getHeight() {
    return height;
  }

  public void setHeight(String height) {
    this.height = height;
  }


  public AdSlot linkedPlacementId(String linkedPlacementId) {
    this.linkedPlacementId = linkedPlacementId;
    return this;
  }

  /**
   * ID of the placement from an external platform that is linked to this ad slot.
   * @return linkedPlacementId
   */
  @javax.annotation.Nullable
  public String getLinkedPlacementId() {
    return linkedPlacementId;
  }

  public void setLinkedPlacementId(String linkedPlacementId) {
    this.linkedPlacementId = linkedPlacementId;
  }


  public AdSlot name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of this ad slot.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AdSlot paymentSourceType(PaymentSourceTypeEnum paymentSourceType) {
    this.paymentSourceType = paymentSourceType;
    return this;
  }

  /**
   * Payment source type of this ad slot.
   * @return paymentSourceType
   */
  @javax.annotation.Nullable
  public PaymentSourceTypeEnum getPaymentSourceType() {
    return paymentSourceType;
  }

  public void setPaymentSourceType(PaymentSourceTypeEnum paymentSourceType) {
    this.paymentSourceType = paymentSourceType;
  }


  public AdSlot primary(Boolean primary) {
    this.primary = primary;
    return this;
  }

  /**
   * Primary ad slot of a roadblock inventory item.
   * @return primary
   */
  @javax.annotation.Nullable
  public Boolean getPrimary() {
    return primary;
  }

  public void setPrimary(Boolean primary) {
    this.primary = primary;
  }


  public AdSlot width(String width) {
    this.width = width;
    return this;
  }

  /**
   * Width of this ad slot.
   * @return width
   */
  @javax.annotation.Nullable
  public String getWidth() {
    return width;
  }

  public void setWidth(String width) {
    this.width = width;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdSlot adSlot = (AdSlot) o;
    return Objects.equals(this.comment, adSlot.comment) &&
        Objects.equals(this.compatibility, adSlot.compatibility) &&
        Objects.equals(this.height, adSlot.height) &&
        Objects.equals(this.linkedPlacementId, adSlot.linkedPlacementId) &&
        Objects.equals(this.name, adSlot.name) &&
        Objects.equals(this.paymentSourceType, adSlot.paymentSourceType) &&
        Objects.equals(this.primary, adSlot.primary) &&
        Objects.equals(this.width, adSlot.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comment, compatibility, height, linkedPlacementId, name, paymentSourceType, primary, width);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdSlot {\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    compatibility: ").append(toIndentedString(compatibility)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    linkedPlacementId: ").append(toIndentedString(linkedPlacementId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    paymentSourceType: ").append(toIndentedString(paymentSourceType)).append("\n");
    sb.append("    primary: ").append(toIndentedString(primary)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("comment");
    openapiFields.add("compatibility");
    openapiFields.add("height");
    openapiFields.add("linkedPlacementId");
    openapiFields.add("name");
    openapiFields.add("paymentSourceType");
    openapiFields.add("primary");
    openapiFields.add("width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdSlot
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdSlot.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdSlot is not found in the empty JSON string", AdSlot.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdSlot.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdSlot` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("compatibility") != null && !jsonObj.get("compatibility").isJsonNull()) && !jsonObj.get("compatibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compatibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compatibility").toString()));
      }
      // validate the optional field `compatibility`
      if (jsonObj.get("compatibility") != null && !jsonObj.get("compatibility").isJsonNull()) {
        CompatibilityEnum.validateJsonElement(jsonObj.get("compatibility"));
      }
      if ((jsonObj.get("height") != null && !jsonObj.get("height").isJsonNull()) && !jsonObj.get("height").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `height` to be a primitive type in the JSON string but got `%s`", jsonObj.get("height").toString()));
      }
      if ((jsonObj.get("linkedPlacementId") != null && !jsonObj.get("linkedPlacementId").isJsonNull()) && !jsonObj.get("linkedPlacementId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkedPlacementId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkedPlacementId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("paymentSourceType") != null && !jsonObj.get("paymentSourceType").isJsonNull()) && !jsonObj.get("paymentSourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentSourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentSourceType").toString()));
      }
      // validate the optional field `paymentSourceType`
      if (jsonObj.get("paymentSourceType") != null && !jsonObj.get("paymentSourceType").isJsonNull()) {
        PaymentSourceTypeEnum.validateJsonElement(jsonObj.get("paymentSourceType"));
      }
      if ((jsonObj.get("width") != null && !jsonObj.get("width").isJsonNull()) && !jsonObj.get("width").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `width` to be a primitive type in the JSON string but got `%s`", jsonObj.get("width").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdSlot.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdSlot' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdSlot> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdSlot.class));

       return (TypeAdapter<T>) new TypeAdapter<AdSlot>() {
           @Override
           public void write(JsonWriter out, AdSlot value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdSlot read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdSlot given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdSlot
   * @throws IOException if the JSON string is invalid with respect to AdSlot
   */
  public static AdSlot fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdSlot.class);
  }

  /**
   * Convert an instance of AdSlot to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

