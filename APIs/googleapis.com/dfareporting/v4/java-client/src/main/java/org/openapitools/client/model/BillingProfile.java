/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains properties of a Campaign Manager Billing Profile.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:21.296999-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BillingProfile {
  public static final String SERIALIZED_NAME_CONSOLIDATED_INVOICE = "consolidatedInvoice";
  @SerializedName(SERIALIZED_NAME_CONSOLIDATED_INVOICE)
  private Boolean consolidatedInvoice;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * Invoice level for this billing profile. Used to group fees into separate invoices by account, advertiser, or campaign.
   */
  @JsonAdapter(InvoiceLevelEnum.Adapter.class)
  public enum InvoiceLevelEnum {
    ACCOUNT_LEVEL("ACCOUNT_LEVEL"),
    
    ADVERTISER_LEVEL("ADVERTISER_LEVEL"),
    
    CAMPAIGN_LEVEL("CAMPAIGN_LEVEL");

    private String value;

    InvoiceLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InvoiceLevelEnum fromValue(String value) {
      for (InvoiceLevelEnum b : InvoiceLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InvoiceLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InvoiceLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InvoiceLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InvoiceLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InvoiceLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INVOICE_LEVEL = "invoiceLevel";
  @SerializedName(SERIALIZED_NAME_INVOICE_LEVEL)
  private InvoiceLevelEnum invoiceLevel;

  public static final String SERIALIZED_NAME_IS_DEFAULT = "isDefault";
  @SerializedName(SERIALIZED_NAME_IS_DEFAULT)
  private Boolean isDefault;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PAYMENTS_ACCOUNT_ID = "paymentsAccountId";
  @SerializedName(SERIALIZED_NAME_PAYMENTS_ACCOUNT_ID)
  private String paymentsAccountId;

  public static final String SERIALIZED_NAME_PAYMENTS_CUSTOMER_ID = "paymentsCustomerId";
  @SerializedName(SERIALIZED_NAME_PAYMENTS_CUSTOMER_ID)
  private String paymentsCustomerId;

  public static final String SERIALIZED_NAME_PURCHASE_ORDER = "purchaseOrder";
  @SerializedName(SERIALIZED_NAME_PURCHASE_ORDER)
  private String purchaseOrder;

  public static final String SERIALIZED_NAME_SECONDARY_PAYMENTS_CUSTOMER_ID = "secondaryPaymentsCustomerId";
  @SerializedName(SERIALIZED_NAME_SECONDARY_PAYMENTS_CUSTOMER_ID)
  private String secondaryPaymentsCustomerId;

  /**
   * Status of this billing profile.This is a read-only field.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    UNDER_REVIEW("UNDER_REVIEW"),
    
    ACTIVE("ACTIVE"),
    
    ARCHIVED("ARCHIVED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public BillingProfile() {
  }

  public BillingProfile consolidatedInvoice(Boolean consolidatedInvoice) {
    this.consolidatedInvoice = consolidatedInvoice;
    return this;
  }

  /**
   * Consolidated invoice option for this billing profile. Used to get a single, consolidated invoice across the chosen invoice level.
   * @return consolidatedInvoice
   */
  @javax.annotation.Nullable
  public Boolean getConsolidatedInvoice() {
    return consolidatedInvoice;
  }

  public void setConsolidatedInvoice(Boolean consolidatedInvoice) {
    this.consolidatedInvoice = consolidatedInvoice;
  }


  public BillingProfile countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * Country code of this billing profile.This is a read-only field.
   * @return countryCode
   */
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public BillingProfile currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * Billing currency code in ISO 4217 format.This is a read-only field.
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public BillingProfile id(String id) {
    this.id = id;
    return this;
  }

  /**
   * ID of this billing profile. This is a read-only, auto-generated field.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public BillingProfile invoiceLevel(InvoiceLevelEnum invoiceLevel) {
    this.invoiceLevel = invoiceLevel;
    return this;
  }

  /**
   * Invoice level for this billing profile. Used to group fees into separate invoices by account, advertiser, or campaign.
   * @return invoiceLevel
   */
  @javax.annotation.Nullable
  public InvoiceLevelEnum getInvoiceLevel() {
    return invoiceLevel;
  }

  public void setInvoiceLevel(InvoiceLevelEnum invoiceLevel) {
    this.invoiceLevel = invoiceLevel;
  }


  public BillingProfile isDefault(Boolean isDefault) {
    this.isDefault = isDefault;
    return this;
  }

  /**
   * True if the billing profile is the account default profile. This is a read-only field.
   * @return isDefault
   */
  @javax.annotation.Nullable
  public Boolean getIsDefault() {
    return isDefault;
  }

  public void setIsDefault(Boolean isDefault) {
    this.isDefault = isDefault;
  }


  public BillingProfile kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string \&quot;dfareporting#billingProfile\&quot;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public BillingProfile name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of this billing profile. This is a required field and must be less than 256 characters long and must be unique among billing profile in the same account.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public BillingProfile paymentsAccountId(String paymentsAccountId) {
    this.paymentsAccountId = paymentsAccountId;
    return this;
  }

  /**
   * The ID of the payment account the billing profile belongs to. This is a read-only field.
   * @return paymentsAccountId
   */
  @javax.annotation.Nullable
  public String getPaymentsAccountId() {
    return paymentsAccountId;
  }

  public void setPaymentsAccountId(String paymentsAccountId) {
    this.paymentsAccountId = paymentsAccountId;
  }


  public BillingProfile paymentsCustomerId(String paymentsCustomerId) {
    this.paymentsCustomerId = paymentsCustomerId;
    return this;
  }

  /**
   * The ID of the payment customer the billing profile belongs to. This is a read-only field.
   * @return paymentsCustomerId
   */
  @javax.annotation.Nullable
  public String getPaymentsCustomerId() {
    return paymentsCustomerId;
  }

  public void setPaymentsCustomerId(String paymentsCustomerId) {
    this.paymentsCustomerId = paymentsCustomerId;
  }


  public BillingProfile purchaseOrder(String purchaseOrder) {
    this.purchaseOrder = purchaseOrder;
    return this;
  }

  /**
   * Purchase order (PO) for this billing profile. This PO number is used in the invoices for all of the advertisers in this billing profile.
   * @return purchaseOrder
   */
  @javax.annotation.Nullable
  public String getPurchaseOrder() {
    return purchaseOrder;
  }

  public void setPurchaseOrder(String purchaseOrder) {
    this.purchaseOrder = purchaseOrder;
  }


  public BillingProfile secondaryPaymentsCustomerId(String secondaryPaymentsCustomerId) {
    this.secondaryPaymentsCustomerId = secondaryPaymentsCustomerId;
    return this;
  }

  /**
   * The ID of the secondary payment customer the billing profile belongs to. This is a read-only field.
   * @return secondaryPaymentsCustomerId
   */
  @javax.annotation.Nullable
  public String getSecondaryPaymentsCustomerId() {
    return secondaryPaymentsCustomerId;
  }

  public void setSecondaryPaymentsCustomerId(String secondaryPaymentsCustomerId) {
    this.secondaryPaymentsCustomerId = secondaryPaymentsCustomerId;
  }


  public BillingProfile status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Status of this billing profile.This is a read-only field.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BillingProfile billingProfile = (BillingProfile) o;
    return Objects.equals(this.consolidatedInvoice, billingProfile.consolidatedInvoice) &&
        Objects.equals(this.countryCode, billingProfile.countryCode) &&
        Objects.equals(this.currencyCode, billingProfile.currencyCode) &&
        Objects.equals(this.id, billingProfile.id) &&
        Objects.equals(this.invoiceLevel, billingProfile.invoiceLevel) &&
        Objects.equals(this.isDefault, billingProfile.isDefault) &&
        Objects.equals(this.kind, billingProfile.kind) &&
        Objects.equals(this.name, billingProfile.name) &&
        Objects.equals(this.paymentsAccountId, billingProfile.paymentsAccountId) &&
        Objects.equals(this.paymentsCustomerId, billingProfile.paymentsCustomerId) &&
        Objects.equals(this.purchaseOrder, billingProfile.purchaseOrder) &&
        Objects.equals(this.secondaryPaymentsCustomerId, billingProfile.secondaryPaymentsCustomerId) &&
        Objects.equals(this.status, billingProfile.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(consolidatedInvoice, countryCode, currencyCode, id, invoiceLevel, isDefault, kind, name, paymentsAccountId, paymentsCustomerId, purchaseOrder, secondaryPaymentsCustomerId, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BillingProfile {\n");
    sb.append("    consolidatedInvoice: ").append(toIndentedString(consolidatedInvoice)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    invoiceLevel: ").append(toIndentedString(invoiceLevel)).append("\n");
    sb.append("    isDefault: ").append(toIndentedString(isDefault)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    paymentsAccountId: ").append(toIndentedString(paymentsAccountId)).append("\n");
    sb.append("    paymentsCustomerId: ").append(toIndentedString(paymentsCustomerId)).append("\n");
    sb.append("    purchaseOrder: ").append(toIndentedString(purchaseOrder)).append("\n");
    sb.append("    secondaryPaymentsCustomerId: ").append(toIndentedString(secondaryPaymentsCustomerId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("consolidatedInvoice");
    openapiFields.add("countryCode");
    openapiFields.add("currencyCode");
    openapiFields.add("id");
    openapiFields.add("invoiceLevel");
    openapiFields.add("isDefault");
    openapiFields.add("kind");
    openapiFields.add("name");
    openapiFields.add("paymentsAccountId");
    openapiFields.add("paymentsCustomerId");
    openapiFields.add("purchaseOrder");
    openapiFields.add("secondaryPaymentsCustomerId");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BillingProfile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BillingProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BillingProfile is not found in the empty JSON string", BillingProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BillingProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BillingProfile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonNull()) && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      if ((jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonNull()) && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("invoiceLevel") != null && !jsonObj.get("invoiceLevel").isJsonNull()) && !jsonObj.get("invoiceLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceLevel").toString()));
      }
      // validate the optional field `invoiceLevel`
      if (jsonObj.get("invoiceLevel") != null && !jsonObj.get("invoiceLevel").isJsonNull()) {
        InvoiceLevelEnum.validateJsonElement(jsonObj.get("invoiceLevel"));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("paymentsAccountId") != null && !jsonObj.get("paymentsAccountId").isJsonNull()) && !jsonObj.get("paymentsAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentsAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentsAccountId").toString()));
      }
      if ((jsonObj.get("paymentsCustomerId") != null && !jsonObj.get("paymentsCustomerId").isJsonNull()) && !jsonObj.get("paymentsCustomerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentsCustomerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentsCustomerId").toString()));
      }
      if ((jsonObj.get("purchaseOrder") != null && !jsonObj.get("purchaseOrder").isJsonNull()) && !jsonObj.get("purchaseOrder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchaseOrder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchaseOrder").toString()));
      }
      if ((jsonObj.get("secondaryPaymentsCustomerId") != null && !jsonObj.get("secondaryPaymentsCustomerId").isJsonNull()) && !jsonObj.get("secondaryPaymentsCustomerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondaryPaymentsCustomerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondaryPaymentsCustomerId").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BillingProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BillingProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BillingProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BillingProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<BillingProfile>() {
           @Override
           public void write(JsonWriter out, BillingProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BillingProfile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BillingProfile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BillingProfile
   * @throws IOException if the JSON string is invalid with respect to BillingProfile
   */
  public static BillingProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BillingProfile.class);
  }

  /**
   * Convert an instance of BillingProfile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

