/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BillingRateTieredRate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BillingRate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:21.296999-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BillingRate {
  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private String endDate;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RATE_IN_MICROS = "rateInMicros";
  @SerializedName(SERIALIZED_NAME_RATE_IN_MICROS)
  private String rateInMicros;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_TIERED_RATES = "tieredRates";
  @SerializedName(SERIALIZED_NAME_TIERED_RATES)
  private List<BillingRateTieredRate> tieredRates = new ArrayList<>();

  /**
   * Type of this billing rate.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    AD_SERVING("AD_SERVING"),
    
    CLICKS("CLICKS"),
    
    MINIMUM_SERVICE("MINIMUM_SERVICE"),
    
    PATH_TO_CONVERSION("PATH_TO_CONVERSION"),
    
    RICH_MEDIA_INPAGE("RICH_MEDIA_INPAGE"),
    
    RICH_MEDIA_EXPANDING("RICH_MEDIA_EXPANDING"),
    
    RICH_MEDIA_FLOATING("RICH_MEDIA_FLOATING"),
    
    RICH_MEDIA_VIDEO("RICH_MEDIA_VIDEO"),
    
    RICH_MEDIA_TEASER("RICH_MEDIA_TEASER"),
    
    RICH_MEDIA_VPAID("RICH_MEDIA_VPAID"),
    
    INSTREAM_VIDEO("INSTREAM_VIDEO"),
    
    PIXEL("PIXEL"),
    
    TRACKING("TRACKING"),
    
    TRAFFICKING_FEATURE("TRAFFICKING_FEATURE"),
    
    CUSTOM_REPORTS("CUSTOM_REPORTS"),
    
    EXPOSURE_TO_CONVERSION("EXPOSURE_TO_CONVERSION"),
    
    DATA_TRANSFER("DATA_TRANSFER"),
    
    DATA_TRANSFER_SETUP("DATA_TRANSFER_SETUP"),
    
    STARTUP("STARTUP"),
    
    STATEMENT_OF_WORK("STATEMENT_OF_WORK"),
    
    PROVIDED_LIST("PROVIDED_LIST"),
    
    PROVIDED_LIST_SETUP("PROVIDED_LIST_SETUP"),
    
    ENHANCED_FORMATS("ENHANCED_FORMATS"),
    
    TRACKING_AD_IMPRESSIONS("TRACKING_AD_IMPRESSIONS"),
    
    TRACKING_AD_CLICKS("TRACKING_AD_CLICKS"),
    
    NIELSEN_DIGITAL_AD_RATINGS_FEE("NIELSEN_DIGITAL_AD_RATINGS_FEE"),
    
    INSTREAM_VIDEO_REDIRECT("INSTREAM_VIDEO_REDIRECT"),
    
    INSTREAM_VIDEO_VPAID("INSTREAM_VIDEO_VPAID"),
    
    DISPLAY_AD_SERVING("DISPLAY_AD_SERVING"),
    
    VIDEO_AD_SERVING("VIDEO_AD_SERVING"),
    
    AUDIO_AD_SERVING("AUDIO_AD_SERVING"),
    
    ADVANCED_DISPLAY_AD_SERVING("ADVANCED_DISPLAY_AD_SERVING");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  /**
   * Unit of measure for this billing rate.
   */
  @JsonAdapter(UnitOfMeasureEnum.Adapter.class)
  public enum UnitOfMeasureEnum {
    CPM("CPM"),
    
    CPC("CPC"),
    
    EA("EA"),
    
    P2_C("P2C");

    private String value;

    UnitOfMeasureEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UnitOfMeasureEnum fromValue(String value) {
      for (UnitOfMeasureEnum b : UnitOfMeasureEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UnitOfMeasureEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UnitOfMeasureEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UnitOfMeasureEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UnitOfMeasureEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UnitOfMeasureEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_UNIT_OF_MEASURE = "unitOfMeasure";
  @SerializedName(SERIALIZED_NAME_UNIT_OF_MEASURE)
  private UnitOfMeasureEnum unitOfMeasure;

  public BillingRate() {
  }

  public BillingRate currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * Billing currency code in ISO 4217 format.
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public BillingRate endDate(String endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * End date of this billing rate.
   * @return endDate
   */
  @javax.annotation.Nullable
  public String getEndDate() {
    return endDate;
  }

  public void setEndDate(String endDate) {
    this.endDate = endDate;
  }


  public BillingRate id(String id) {
    this.id = id;
    return this;
  }

  /**
   * ID of this billing rate.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public BillingRate name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of this billing rate. This must be less than 256 characters long.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public BillingRate rateInMicros(String rateInMicros) {
    this.rateInMicros = rateInMicros;
    return this;
  }

  /**
   * Flat rate in micros of this billing rate. This cannot co-exist with tiered rate.
   * @return rateInMicros
   */
  @javax.annotation.Nullable
  public String getRateInMicros() {
    return rateInMicros;
  }

  public void setRateInMicros(String rateInMicros) {
    this.rateInMicros = rateInMicros;
  }


  public BillingRate startDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Start date of this billing rate.
   * @return startDate
   */
  @javax.annotation.Nullable
  public String getStartDate() {
    return startDate;
  }

  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }


  public BillingRate tieredRates(List<BillingRateTieredRate> tieredRates) {
    this.tieredRates = tieredRates;
    return this;
  }

  public BillingRate addTieredRatesItem(BillingRateTieredRate tieredRatesItem) {
    if (this.tieredRates == null) {
      this.tieredRates = new ArrayList<>();
    }
    this.tieredRates.add(tieredRatesItem);
    return this;
  }

  /**
   * Tiered rate of this billing rate. This cannot co-exist with flat rate.
   * @return tieredRates
   */
  @javax.annotation.Nullable
  public List<BillingRateTieredRate> getTieredRates() {
    return tieredRates;
  }

  public void setTieredRates(List<BillingRateTieredRate> tieredRates) {
    this.tieredRates = tieredRates;
  }


  public BillingRate type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Type of this billing rate.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public BillingRate unitOfMeasure(UnitOfMeasureEnum unitOfMeasure) {
    this.unitOfMeasure = unitOfMeasure;
    return this;
  }

  /**
   * Unit of measure for this billing rate.
   * @return unitOfMeasure
   */
  @javax.annotation.Nullable
  public UnitOfMeasureEnum getUnitOfMeasure() {
    return unitOfMeasure;
  }

  public void setUnitOfMeasure(UnitOfMeasureEnum unitOfMeasure) {
    this.unitOfMeasure = unitOfMeasure;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BillingRate billingRate = (BillingRate) o;
    return Objects.equals(this.currencyCode, billingRate.currencyCode) &&
        Objects.equals(this.endDate, billingRate.endDate) &&
        Objects.equals(this.id, billingRate.id) &&
        Objects.equals(this.name, billingRate.name) &&
        Objects.equals(this.rateInMicros, billingRate.rateInMicros) &&
        Objects.equals(this.startDate, billingRate.startDate) &&
        Objects.equals(this.tieredRates, billingRate.tieredRates) &&
        Objects.equals(this.type, billingRate.type) &&
        Objects.equals(this.unitOfMeasure, billingRate.unitOfMeasure);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currencyCode, endDate, id, name, rateInMicros, startDate, tieredRates, type, unitOfMeasure);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BillingRate {\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    rateInMicros: ").append(toIndentedString(rateInMicros)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    tieredRates: ").append(toIndentedString(tieredRates)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    unitOfMeasure: ").append(toIndentedString(unitOfMeasure)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currencyCode");
    openapiFields.add("endDate");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("rateInMicros");
    openapiFields.add("startDate");
    openapiFields.add("tieredRates");
    openapiFields.add("type");
    openapiFields.add("unitOfMeasure");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BillingRate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BillingRate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BillingRate is not found in the empty JSON string", BillingRate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BillingRate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BillingRate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonNull()) && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      if ((jsonObj.get("endDate") != null && !jsonObj.get("endDate").isJsonNull()) && !jsonObj.get("endDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endDate").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("rateInMicros") != null && !jsonObj.get("rateInMicros").isJsonNull()) && !jsonObj.get("rateInMicros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rateInMicros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rateInMicros").toString()));
      }
      if ((jsonObj.get("startDate") != null && !jsonObj.get("startDate").isJsonNull()) && !jsonObj.get("startDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startDate").toString()));
      }
      if (jsonObj.get("tieredRates") != null && !jsonObj.get("tieredRates").isJsonNull()) {
        JsonArray jsonArraytieredRates = jsonObj.getAsJsonArray("tieredRates");
        if (jsonArraytieredRates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tieredRates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tieredRates` to be an array in the JSON string but got `%s`", jsonObj.get("tieredRates").toString()));
          }

          // validate the optional field `tieredRates` (array)
          for (int i = 0; i < jsonArraytieredRates.size(); i++) {
            BillingRateTieredRate.validateJsonElement(jsonArraytieredRates.get(i));
          };
        }
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("unitOfMeasure") != null && !jsonObj.get("unitOfMeasure").isJsonNull()) && !jsonObj.get("unitOfMeasure").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unitOfMeasure` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unitOfMeasure").toString()));
      }
      // validate the optional field `unitOfMeasure`
      if (jsonObj.get("unitOfMeasure") != null && !jsonObj.get("unitOfMeasure").isJsonNull()) {
        UnitOfMeasureEnum.validateJsonElement(jsonObj.get("unitOfMeasure"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BillingRate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BillingRate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BillingRate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BillingRate.class));

       return (TypeAdapter<T>) new TypeAdapter<BillingRate>() {
           @Override
           public void write(JsonWriter out, BillingRate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BillingRate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BillingRate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BillingRate
   * @throws IOException if the JSON string is invalid with respect to BillingRate
   */
  public static BillingRate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BillingRate.class);
  }

  /**
   * Convert an instance of BillingRate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

