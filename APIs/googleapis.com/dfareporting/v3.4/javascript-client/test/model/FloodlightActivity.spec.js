/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CampaignManager360Api);
  }
}(this, function(expect, CampaignManager360Api) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CampaignManager360Api.FloodlightActivity();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('FloodlightActivity', function() {
    it('should create an instance of FloodlightActivity', function() {
      // uncomment below and update the code to test FloodlightActivity
      //var instance = new CampaignManager360Api.FloodlightActivity();
      //expect(instance).to.be.a(CampaignManager360Api.FloodlightActivity);
    });

    it('should have the property accountId (base name: "accountId")', function() {
      // uncomment below and update the code to test the property accountId
      //var instance = new CampaignManager360Api.FloodlightActivity();
      //expect(instance).to.be();
    });

    it('should have the property advertiserId (base name: "advertiserId")', function() {
      // uncomment below and update the code to test the property advertiserId
      //var instance = new CampaignManager360Api.FloodlightActivity();
      //expect(instance).to.be();
    });

    it('should have the property advertiserIdDimensionValue (base name: "advertiserIdDimensionValue")', function() {
      // uncomment below and update the code to test the property advertiserIdDimensionValue
      //var instance = new CampaignManager360Api.FloodlightActivity();
      //expect(instance).to.be();
    });

    it('should have the property attributionEnabled (base name: "attributionEnabled")', function() {
      // uncomment below and update the code to test the property attributionEnabled
      //var instance = new CampaignManager360Api.FloodlightActivity();
      //expect(instance).to.be();
    });

    it('should have the property cacheBustingType (base name: "cacheBustingType")', function() {
      // uncomment below and update the code to test the property cacheBustingType
      //var instance = new CampaignManager360Api.FloodlightActivity();
      //expect(instance).to.be();
    });

    it('should have the property countingMethod (base name: "countingMethod")', function() {
      // uncomment below and update the code to test the property countingMethod
      //var instance = new CampaignManager360Api.FloodlightActivity();
      //expect(instance).to.be();
    });

    it('should have the property defaultTags (base name: "defaultTags")', function() {
      // uncomment below and update the code to test the property defaultTags
      //var instance = new CampaignManager360Api.FloodlightActivity();
      //expect(instance).to.be();
    });

    it('should have the property expectedUrl (base name: "expectedUrl")', function() {
      // uncomment below and update the code to test the property expectedUrl
      //var instance = new CampaignManager360Api.FloodlightActivity();
      //expect(instance).to.be();
    });

    it('should have the property floodlightActivityGroupId (base name: "floodlightActivityGroupId")', function() {
      // uncomment below and update the code to test the property floodlightActivityGroupId
      //var instance = new CampaignManager360Api.FloodlightActivity();
      //expect(instance).to.be();
    });

    it('should have the property floodlightActivityGroupName (base name: "floodlightActivityGroupName")', function() {
      // uncomment below and update the code to test the property floodlightActivityGroupName
      //var instance = new CampaignManager360Api.FloodlightActivity();
      //expect(instance).to.be();
    });

    it('should have the property floodlightActivityGroupTagString (base name: "floodlightActivityGroupTagString")', function() {
      // uncomment below and update the code to test the property floodlightActivityGroupTagString
      //var instance = new CampaignManager360Api.FloodlightActivity();
      //expect(instance).to.be();
    });

    it('should have the property floodlightActivityGroupType (base name: "floodlightActivityGroupType")', function() {
      // uncomment below and update the code to test the property floodlightActivityGroupType
      //var instance = new CampaignManager360Api.FloodlightActivity();
      //expect(instance).to.be();
    });

    it('should have the property floodlightConfigurationId (base name: "floodlightConfigurationId")', function() {
      // uncomment below and update the code to test the property floodlightConfigurationId
      //var instance = new CampaignManager360Api.FloodlightActivity();
      //expect(instance).to.be();
    });

    it('should have the property floodlightConfigurationIdDimensionValue (base name: "floodlightConfigurationIdDimensionValue")', function() {
      // uncomment below and update the code to test the property floodlightConfigurationIdDimensionValue
      //var instance = new CampaignManager360Api.FloodlightActivity();
      //expect(instance).to.be();
    });

    it('should have the property floodlightTagType (base name: "floodlightTagType")', function() {
      // uncomment below and update the code to test the property floodlightTagType
      //var instance = new CampaignManager360Api.FloodlightActivity();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new CampaignManager360Api.FloodlightActivity();
      //expect(instance).to.be();
    });

    it('should have the property idDimensionValue (base name: "idDimensionValue")', function() {
      // uncomment below and update the code to test the property idDimensionValue
      //var instance = new CampaignManager360Api.FloodlightActivity();
      //expect(instance).to.be();
    });

    it('should have the property kind (base name: "kind")', function() {
      // uncomment below and update the code to test the property kind
      //var instance = new CampaignManager360Api.FloodlightActivity();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new CampaignManager360Api.FloodlightActivity();
      //expect(instance).to.be();
    });

    it('should have the property notes (base name: "notes")', function() {
      // uncomment below and update the code to test the property notes
      //var instance = new CampaignManager360Api.FloodlightActivity();
      //expect(instance).to.be();
    });

    it('should have the property publisherTags (base name: "publisherTags")', function() {
      // uncomment below and update the code to test the property publisherTags
      //var instance = new CampaignManager360Api.FloodlightActivity();
      //expect(instance).to.be();
    });

    it('should have the property secure (base name: "secure")', function() {
      // uncomment below and update the code to test the property secure
      //var instance = new CampaignManager360Api.FloodlightActivity();
      //expect(instance).to.be();
    });

    it('should have the property sslCompliant (base name: "sslCompliant")', function() {
      // uncomment below and update the code to test the property sslCompliant
      //var instance = new CampaignManager360Api.FloodlightActivity();
      //expect(instance).to.be();
    });

    it('should have the property sslRequired (base name: "sslRequired")', function() {
      // uncomment below and update the code to test the property sslRequired
      //var instance = new CampaignManager360Api.FloodlightActivity();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new CampaignManager360Api.FloodlightActivity();
      //expect(instance).to.be();
    });

    it('should have the property subaccountId (base name: "subaccountId")', function() {
      // uncomment below and update the code to test the property subaccountId
      //var instance = new CampaignManager360Api.FloodlightActivity();
      //expect(instance).to.be();
    });

    it('should have the property tagFormat (base name: "tagFormat")', function() {
      // uncomment below and update the code to test the property tagFormat
      //var instance = new CampaignManager360Api.FloodlightActivity();
      //expect(instance).to.be();
    });

    it('should have the property tagString (base name: "tagString")', function() {
      // uncomment below and update the code to test the property tagString
      //var instance = new CampaignManager360Api.FloodlightActivity();
      //expect(instance).to.be();
    });

    it('should have the property userDefinedVariableTypes (base name: "userDefinedVariableTypes")', function() {
      // uncomment below and update the code to test the property userDefinedVariableTypes
      //var instance = new CampaignManager360Api.FloodlightActivity();
      //expect(instance).to.be();
    });

  });

}));
