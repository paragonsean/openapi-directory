/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PricingSchedulePricingPeriod from './PricingSchedulePricingPeriod';

/**
 * The PricingSchedule model module.
 * @module model/PricingSchedule
 * @version v3.4
 */
class PricingSchedule {
    /**
     * Constructs a new <code>PricingSchedule</code>.
     * Pricing Schedule
     * @alias module:model/PricingSchedule
     */
    constructor() { 
        
        PricingSchedule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PricingSchedule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PricingSchedule} obj Optional instance to populate.
     * @return {module:model/PricingSchedule} The populated <code>PricingSchedule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PricingSchedule();

            if (data.hasOwnProperty('capCostOption')) {
                obj['capCostOption'] = ApiClient.convertToType(data['capCostOption'], 'String');
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'Date');
            }
            if (data.hasOwnProperty('flighted')) {
                obj['flighted'] = ApiClient.convertToType(data['flighted'], 'Boolean');
            }
            if (data.hasOwnProperty('floodlightActivityId')) {
                obj['floodlightActivityId'] = ApiClient.convertToType(data['floodlightActivityId'], 'String');
            }
            if (data.hasOwnProperty('pricingPeriods')) {
                obj['pricingPeriods'] = ApiClient.convertToType(data['pricingPeriods'], [PricingSchedulePricingPeriod]);
            }
            if (data.hasOwnProperty('pricingType')) {
                obj['pricingType'] = ApiClient.convertToType(data['pricingType'], 'String');
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
            }
            if (data.hasOwnProperty('testingStartDate')) {
                obj['testingStartDate'] = ApiClient.convertToType(data['testingStartDate'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PricingSchedule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PricingSchedule</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['capCostOption'] && !(typeof data['capCostOption'] === 'string' || data['capCostOption'] instanceof String)) {
            throw new Error("Expected the field `capCostOption` to be a primitive type in the JSON string but got " + data['capCostOption']);
        }
        // ensure the json data is a string
        if (data['floodlightActivityId'] && !(typeof data['floodlightActivityId'] === 'string' || data['floodlightActivityId'] instanceof String)) {
            throw new Error("Expected the field `floodlightActivityId` to be a primitive type in the JSON string but got " + data['floodlightActivityId']);
        }
        if (data['pricingPeriods']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pricingPeriods'])) {
                throw new Error("Expected the field `pricingPeriods` to be an array in the JSON data but got " + data['pricingPeriods']);
            }
            // validate the optional field `pricingPeriods` (array)
            for (const item of data['pricingPeriods']) {
                PricingSchedulePricingPeriod.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['pricingType'] && !(typeof data['pricingType'] === 'string' || data['pricingType'] instanceof String)) {
            throw new Error("Expected the field `pricingType` to be a primitive type in the JSON string but got " + data['pricingType']);
        }

        return true;
    }


}



/**
 * Placement cap cost option.
 * @member {module:model/PricingSchedule.CapCostOptionEnum} capCostOption
 */
PricingSchedule.prototype['capCostOption'] = undefined;

/**
 * @member {Date} endDate
 */
PricingSchedule.prototype['endDate'] = undefined;

/**
 * Whether this placement is flighted. If true, pricing periods will be computed automatically.
 * @member {Boolean} flighted
 */
PricingSchedule.prototype['flighted'] = undefined;

/**
 * Floodlight activity ID associated with this placement. This field should be set when placement pricing type is set to PRICING_TYPE_CPA.
 * @member {String} floodlightActivityId
 */
PricingSchedule.prototype['floodlightActivityId'] = undefined;

/**
 * Pricing periods for this placement.
 * @member {Array.<module:model/PricingSchedulePricingPeriod>} pricingPeriods
 */
PricingSchedule.prototype['pricingPeriods'] = undefined;

/**
 * Placement pricing type. This field is required on insertion.
 * @member {module:model/PricingSchedule.PricingTypeEnum} pricingType
 */
PricingSchedule.prototype['pricingType'] = undefined;

/**
 * @member {Date} startDate
 */
PricingSchedule.prototype['startDate'] = undefined;

/**
 * @member {Date} testingStartDate
 */
PricingSchedule.prototype['testingStartDate'] = undefined;





/**
 * Allowed values for the <code>capCostOption</code> property.
 * @enum {String}
 * @readonly
 */
PricingSchedule['CapCostOptionEnum'] = {

    /**
     * value: "CAP_COST_NONE"
     * @const
     */
    "NONE": "CAP_COST_NONE",

    /**
     * value: "CAP_COST_MONTHLY"
     * @const
     */
    "MONTHLY": "CAP_COST_MONTHLY",

    /**
     * value: "CAP_COST_CUMULATIVE"
     * @const
     */
    "CUMULATIVE": "CAP_COST_CUMULATIVE"
};


/**
 * Allowed values for the <code>pricingType</code> property.
 * @enum {String}
 * @readonly
 */
PricingSchedule['PricingTypeEnum'] = {

    /**
     * value: "PRICING_TYPE_CPM"
     * @const
     */
    "CPM": "PRICING_TYPE_CPM",

    /**
     * value: "PRICING_TYPE_CPC"
     * @const
     */
    "CPC": "PRICING_TYPE_CPC",

    /**
     * value: "PRICING_TYPE_CPA"
     * @const
     */
    "CPA": "PRICING_TYPE_CPA",

    /**
     * value: "PRICING_TYPE_FLAT_RATE_IMPRESSIONS"
     * @const
     */
    "FLAT_RATE_IMPRESSIONS": "PRICING_TYPE_FLAT_RATE_IMPRESSIONS",

    /**
     * value: "PRICING_TYPE_FLAT_RATE_CLICKS"
     * @const
     */
    "FLAT_RATE_CLICKS": "PRICING_TYPE_FLAT_RATE_CLICKS",

    /**
     * value: "PRICING_TYPE_CPM_ACTIVEVIEW"
     * @const
     */
    "CPM_ACTIVEVIEW": "PRICING_TYPE_CPM_ACTIVEVIEW"
};



export default PricingSchedule;

