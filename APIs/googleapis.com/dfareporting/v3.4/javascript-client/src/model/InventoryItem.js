/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdSlot from './AdSlot';
import LastModifiedInfo from './LastModifiedInfo';
import Pricing from './Pricing';

/**
 * The InventoryItem model module.
 * @module model/InventoryItem
 * @version v3.4
 */
class InventoryItem {
    /**
     * Constructs a new <code>InventoryItem</code>.
     * Represents a buy from the Planning inventory store.
     * @alias module:model/InventoryItem
     */
    constructor() { 
        
        InventoryItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InventoryItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InventoryItem} obj Optional instance to populate.
     * @return {module:model/InventoryItem} The populated <code>InventoryItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InventoryItem();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('adSlots')) {
                obj['adSlots'] = ApiClient.convertToType(data['adSlots'], [AdSlot]);
            }
            if (data.hasOwnProperty('advertiserId')) {
                obj['advertiserId'] = ApiClient.convertToType(data['advertiserId'], 'String');
            }
            if (data.hasOwnProperty('contentCategoryId')) {
                obj['contentCategoryId'] = ApiClient.convertToType(data['contentCategoryId'], 'String');
            }
            if (data.hasOwnProperty('estimatedClickThroughRate')) {
                obj['estimatedClickThroughRate'] = ApiClient.convertToType(data['estimatedClickThroughRate'], 'String');
            }
            if (data.hasOwnProperty('estimatedConversionRate')) {
                obj['estimatedConversionRate'] = ApiClient.convertToType(data['estimatedConversionRate'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('inPlan')) {
                obj['inPlan'] = ApiClient.convertToType(data['inPlan'], 'Boolean');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('lastModifiedInfo')) {
                obj['lastModifiedInfo'] = LastModifiedInfo.constructFromObject(data['lastModifiedInfo']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('negotiationChannelId')) {
                obj['negotiationChannelId'] = ApiClient.convertToType(data['negotiationChannelId'], 'String');
            }
            if (data.hasOwnProperty('orderId')) {
                obj['orderId'] = ApiClient.convertToType(data['orderId'], 'String');
            }
            if (data.hasOwnProperty('placementStrategyId')) {
                obj['placementStrategyId'] = ApiClient.convertToType(data['placementStrategyId'], 'String');
            }
            if (data.hasOwnProperty('pricing')) {
                obj['pricing'] = Pricing.constructFromObject(data['pricing']);
            }
            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = ApiClient.convertToType(data['projectId'], 'String');
            }
            if (data.hasOwnProperty('rfpId')) {
                obj['rfpId'] = ApiClient.convertToType(data['rfpId'], 'String');
            }
            if (data.hasOwnProperty('siteId')) {
                obj['siteId'] = ApiClient.convertToType(data['siteId'], 'String');
            }
            if (data.hasOwnProperty('subaccountId')) {
                obj['subaccountId'] = ApiClient.convertToType(data['subaccountId'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InventoryItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InventoryItem</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        if (data['adSlots']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['adSlots'])) {
                throw new Error("Expected the field `adSlots` to be an array in the JSON data but got " + data['adSlots']);
            }
            // validate the optional field `adSlots` (array)
            for (const item of data['adSlots']) {
                AdSlot.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['advertiserId'] && !(typeof data['advertiserId'] === 'string' || data['advertiserId'] instanceof String)) {
            throw new Error("Expected the field `advertiserId` to be a primitive type in the JSON string but got " + data['advertiserId']);
        }
        // ensure the json data is a string
        if (data['contentCategoryId'] && !(typeof data['contentCategoryId'] === 'string' || data['contentCategoryId'] instanceof String)) {
            throw new Error("Expected the field `contentCategoryId` to be a primitive type in the JSON string but got " + data['contentCategoryId']);
        }
        // ensure the json data is a string
        if (data['estimatedClickThroughRate'] && !(typeof data['estimatedClickThroughRate'] === 'string' || data['estimatedClickThroughRate'] instanceof String)) {
            throw new Error("Expected the field `estimatedClickThroughRate` to be a primitive type in the JSON string but got " + data['estimatedClickThroughRate']);
        }
        // ensure the json data is a string
        if (data['estimatedConversionRate'] && !(typeof data['estimatedConversionRate'] === 'string' || data['estimatedConversionRate'] instanceof String)) {
            throw new Error("Expected the field `estimatedConversionRate` to be a primitive type in the JSON string but got " + data['estimatedConversionRate']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // validate the optional field `lastModifiedInfo`
        if (data['lastModifiedInfo']) { // data not null
          LastModifiedInfo.validateJSON(data['lastModifiedInfo']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['negotiationChannelId'] && !(typeof data['negotiationChannelId'] === 'string' || data['negotiationChannelId'] instanceof String)) {
            throw new Error("Expected the field `negotiationChannelId` to be a primitive type in the JSON string but got " + data['negotiationChannelId']);
        }
        // ensure the json data is a string
        if (data['orderId'] && !(typeof data['orderId'] === 'string' || data['orderId'] instanceof String)) {
            throw new Error("Expected the field `orderId` to be a primitive type in the JSON string but got " + data['orderId']);
        }
        // ensure the json data is a string
        if (data['placementStrategyId'] && !(typeof data['placementStrategyId'] === 'string' || data['placementStrategyId'] instanceof String)) {
            throw new Error("Expected the field `placementStrategyId` to be a primitive type in the JSON string but got " + data['placementStrategyId']);
        }
        // validate the optional field `pricing`
        if (data['pricing']) { // data not null
          Pricing.validateJSON(data['pricing']);
        }
        // ensure the json data is a string
        if (data['projectId'] && !(typeof data['projectId'] === 'string' || data['projectId'] instanceof String)) {
            throw new Error("Expected the field `projectId` to be a primitive type in the JSON string but got " + data['projectId']);
        }
        // ensure the json data is a string
        if (data['rfpId'] && !(typeof data['rfpId'] === 'string' || data['rfpId'] instanceof String)) {
            throw new Error("Expected the field `rfpId` to be a primitive type in the JSON string but got " + data['rfpId']);
        }
        // ensure the json data is a string
        if (data['siteId'] && !(typeof data['siteId'] === 'string' || data['siteId'] instanceof String)) {
            throw new Error("Expected the field `siteId` to be a primitive type in the JSON string but got " + data['siteId']);
        }
        // ensure the json data is a string
        if (data['subaccountId'] && !(typeof data['subaccountId'] === 'string' || data['subaccountId'] instanceof String)) {
            throw new Error("Expected the field `subaccountId` to be a primitive type in the JSON string but got " + data['subaccountId']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Account ID of this inventory item.
 * @member {String} accountId
 */
InventoryItem.prototype['accountId'] = undefined;

/**
 * Ad slots of this inventory item. If this inventory item represents a standalone placement, there will be exactly one ad slot. If this inventory item represents a placement group, there will be more than one ad slot, each representing one child placement in that placement group.
 * @member {Array.<module:model/AdSlot>} adSlots
 */
InventoryItem.prototype['adSlots'] = undefined;

/**
 * Advertiser ID of this inventory item.
 * @member {String} advertiserId
 */
InventoryItem.prototype['advertiserId'] = undefined;

/**
 * Content category ID of this inventory item.
 * @member {String} contentCategoryId
 */
InventoryItem.prototype['contentCategoryId'] = undefined;

/**
 * Estimated click-through rate of this inventory item.
 * @member {String} estimatedClickThroughRate
 */
InventoryItem.prototype['estimatedClickThroughRate'] = undefined;

/**
 * Estimated conversion rate of this inventory item.
 * @member {String} estimatedConversionRate
 */
InventoryItem.prototype['estimatedConversionRate'] = undefined;

/**
 * ID of this inventory item.
 * @member {String} id
 */
InventoryItem.prototype['id'] = undefined;

/**
 * Whether this inventory item is in plan.
 * @member {Boolean} inPlan
 */
InventoryItem.prototype['inPlan'] = undefined;

/**
 * Identifies what kind of resource this is. Value: the fixed string \"dfareporting#inventoryItem\".
 * @member {String} kind
 */
InventoryItem.prototype['kind'] = undefined;

/**
 * @member {module:model/LastModifiedInfo} lastModifiedInfo
 */
InventoryItem.prototype['lastModifiedInfo'] = undefined;

/**
 * Name of this inventory item. For standalone inventory items, this is the same name as that of its only ad slot. For group inventory items, this can differ from the name of any of its ad slots.
 * @member {String} name
 */
InventoryItem.prototype['name'] = undefined;

/**
 * Negotiation channel ID of this inventory item.
 * @member {String} negotiationChannelId
 */
InventoryItem.prototype['negotiationChannelId'] = undefined;

/**
 * Order ID of this inventory item.
 * @member {String} orderId
 */
InventoryItem.prototype['orderId'] = undefined;

/**
 * Placement strategy ID of this inventory item.
 * @member {String} placementStrategyId
 */
InventoryItem.prototype['placementStrategyId'] = undefined;

/**
 * @member {module:model/Pricing} pricing
 */
InventoryItem.prototype['pricing'] = undefined;

/**
 * Project ID of this inventory item.
 * @member {String} projectId
 */
InventoryItem.prototype['projectId'] = undefined;

/**
 * RFP ID of this inventory item.
 * @member {String} rfpId
 */
InventoryItem.prototype['rfpId'] = undefined;

/**
 * ID of the site this inventory item is associated with.
 * @member {String} siteId
 */
InventoryItem.prototype['siteId'] = undefined;

/**
 * Subaccount ID of this inventory item.
 * @member {String} subaccountId
 */
InventoryItem.prototype['subaccountId'] = undefined;

/**
 * Type of inventory item.
 * @member {module:model/InventoryItem.TypeEnum} type
 */
InventoryItem.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
InventoryItem['TypeEnum'] = {

    /**
     * value: "PLANNING_PLACEMENT_TYPE_REGULAR"
     * @const
     */
    "REGULAR": "PLANNING_PLACEMENT_TYPE_REGULAR",

    /**
     * value: "PLANNING_PLACEMENT_TYPE_CREDIT"
     * @const
     */
    "CREDIT": "PLANNING_PLACEMENT_TYPE_CREDIT"
};



export default InventoryItem;

