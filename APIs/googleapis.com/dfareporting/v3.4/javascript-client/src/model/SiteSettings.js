/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TagSetting from './TagSetting';

/**
 * The SiteSettings model module.
 * @module model/SiteSettings
 * @version v3.4
 */
class SiteSettings {
    /**
     * Constructs a new <code>SiteSettings</code>.
     * Site Settings
     * @alias module:model/SiteSettings
     */
    constructor() { 
        
        SiteSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SiteSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SiteSettings} obj Optional instance to populate.
     * @return {module:model/SiteSettings} The populated <code>SiteSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SiteSettings();

            if (data.hasOwnProperty('activeViewOptOut')) {
                obj['activeViewOptOut'] = ApiClient.convertToType(data['activeViewOptOut'], 'Boolean');
            }
            if (data.hasOwnProperty('adBlockingOptOut')) {
                obj['adBlockingOptOut'] = ApiClient.convertToType(data['adBlockingOptOut'], 'Boolean');
            }
            if (data.hasOwnProperty('disableNewCookie')) {
                obj['disableNewCookie'] = ApiClient.convertToType(data['disableNewCookie'], 'Boolean');
            }
            if (data.hasOwnProperty('tagSetting')) {
                obj['tagSetting'] = TagSetting.constructFromObject(data['tagSetting']);
            }
            if (data.hasOwnProperty('videoActiveViewOptOutTemplate')) {
                obj['videoActiveViewOptOutTemplate'] = ApiClient.convertToType(data['videoActiveViewOptOutTemplate'], 'Boolean');
            }
            if (data.hasOwnProperty('vpaidAdapterChoiceTemplate')) {
                obj['vpaidAdapterChoiceTemplate'] = ApiClient.convertToType(data['vpaidAdapterChoiceTemplate'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SiteSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SiteSettings</code>.
     */
    static validateJSON(data) {
        // validate the optional field `tagSetting`
        if (data['tagSetting']) { // data not null
          TagSetting.validateJSON(data['tagSetting']);
        }
        // ensure the json data is a string
        if (data['vpaidAdapterChoiceTemplate'] && !(typeof data['vpaidAdapterChoiceTemplate'] === 'string' || data['vpaidAdapterChoiceTemplate'] instanceof String)) {
            throw new Error("Expected the field `vpaidAdapterChoiceTemplate` to be a primitive type in the JSON string but got " + data['vpaidAdapterChoiceTemplate']);
        }

        return true;
    }


}



/**
 * Whether active view creatives are disabled for this site.
 * @member {Boolean} activeViewOptOut
 */
SiteSettings.prototype['activeViewOptOut'] = undefined;

/**
 * Whether this site opts out of ad blocking. When true, ad blocking is disabled for all placements under the site, regardless of the individual placement settings. When false, the campaign and placement settings take effect.
 * @member {Boolean} adBlockingOptOut
 */
SiteSettings.prototype['adBlockingOptOut'] = undefined;

/**
 * Whether new cookies are disabled for this site.
 * @member {Boolean} disableNewCookie
 */
SiteSettings.prototype['disableNewCookie'] = undefined;

/**
 * @member {module:model/TagSetting} tagSetting
 */
SiteSettings.prototype['tagSetting'] = undefined;

/**
 * Whether Verification and ActiveView for in-stream video creatives are disabled by default for new placements created under this site. This value will be used to populate the placement.videoActiveViewOptOut field, when no value is specified for the new placement.
 * @member {Boolean} videoActiveViewOptOutTemplate
 */
SiteSettings.prototype['videoActiveViewOptOutTemplate'] = undefined;

/**
 * Default VPAID adapter setting for new placements created under this site. This value will be used to populate the placements.vpaidAdapterChoice field, when no value is specified for the new placement. Controls which VPAID format the measurement adapter will use for in-stream video creatives assigned to the placement. The publisher's specifications will typically determine this setting. For VPAID creatives, the adapter format will match the VPAID format (HTML5 VPAID creatives use the HTML5 adapter). *Note:* Flash is no longer supported. This field now defaults to HTML5 when the following values are provided: FLASH, BOTH.
 * @member {module:model/SiteSettings.VpaidAdapterChoiceTemplateEnum} vpaidAdapterChoiceTemplate
 */
SiteSettings.prototype['vpaidAdapterChoiceTemplate'] = undefined;





/**
 * Allowed values for the <code>vpaidAdapterChoiceTemplate</code> property.
 * @enum {String}
 * @readonly
 */
SiteSettings['VpaidAdapterChoiceTemplateEnum'] = {

    /**
     * value: "DEFAULT"
     * @const
     */
    "DEFAULT": "DEFAULT",

    /**
     * value: "FLASH"
     * @const
     */
    "FLASH": "FLASH",

    /**
     * value: "HTML5"
     * @const
     */
    "HTML5": "HTML5",

    /**
     * value: "BOTH"
     * @const
     */
    "BOTH": "BOTH"
};



export default SiteSettings;

