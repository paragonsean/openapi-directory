/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Browser from './Browser';
import ConnectionType from './ConnectionType';
import MobileCarrier from './MobileCarrier';
import OperatingSystem from './OperatingSystem';
import OperatingSystemVersion from './OperatingSystemVersion';
import PlatformType from './PlatformType';

/**
 * The TechnologyTargeting model module.
 * @module model/TechnologyTargeting
 * @version v3.4
 */
class TechnologyTargeting {
    /**
     * Constructs a new <code>TechnologyTargeting</code>.
     * Technology Targeting.
     * @alias module:model/TechnologyTargeting
     */
    constructor() { 
        
        TechnologyTargeting.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TechnologyTargeting</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TechnologyTargeting} obj Optional instance to populate.
     * @return {module:model/TechnologyTargeting} The populated <code>TechnologyTargeting</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TechnologyTargeting();

            if (data.hasOwnProperty('browsers')) {
                obj['browsers'] = ApiClient.convertToType(data['browsers'], [Browser]);
            }
            if (data.hasOwnProperty('connectionTypes')) {
                obj['connectionTypes'] = ApiClient.convertToType(data['connectionTypes'], [ConnectionType]);
            }
            if (data.hasOwnProperty('mobileCarriers')) {
                obj['mobileCarriers'] = ApiClient.convertToType(data['mobileCarriers'], [MobileCarrier]);
            }
            if (data.hasOwnProperty('operatingSystemVersions')) {
                obj['operatingSystemVersions'] = ApiClient.convertToType(data['operatingSystemVersions'], [OperatingSystemVersion]);
            }
            if (data.hasOwnProperty('operatingSystems')) {
                obj['operatingSystems'] = ApiClient.convertToType(data['operatingSystems'], [OperatingSystem]);
            }
            if (data.hasOwnProperty('platformTypes')) {
                obj['platformTypes'] = ApiClient.convertToType(data['platformTypes'], [PlatformType]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TechnologyTargeting</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TechnologyTargeting</code>.
     */
    static validateJSON(data) {
        if (data['browsers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['browsers'])) {
                throw new Error("Expected the field `browsers` to be an array in the JSON data but got " + data['browsers']);
            }
            // validate the optional field `browsers` (array)
            for (const item of data['browsers']) {
                Browser.validateJSON(item);
            };
        }
        if (data['connectionTypes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['connectionTypes'])) {
                throw new Error("Expected the field `connectionTypes` to be an array in the JSON data but got " + data['connectionTypes']);
            }
            // validate the optional field `connectionTypes` (array)
            for (const item of data['connectionTypes']) {
                ConnectionType.validateJSON(item);
            };
        }
        if (data['mobileCarriers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mobileCarriers'])) {
                throw new Error("Expected the field `mobileCarriers` to be an array in the JSON data but got " + data['mobileCarriers']);
            }
            // validate the optional field `mobileCarriers` (array)
            for (const item of data['mobileCarriers']) {
                MobileCarrier.validateJSON(item);
            };
        }
        if (data['operatingSystemVersions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['operatingSystemVersions'])) {
                throw new Error("Expected the field `operatingSystemVersions` to be an array in the JSON data but got " + data['operatingSystemVersions']);
            }
            // validate the optional field `operatingSystemVersions` (array)
            for (const item of data['operatingSystemVersions']) {
                OperatingSystemVersion.validateJSON(item);
            };
        }
        if (data['operatingSystems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['operatingSystems'])) {
                throw new Error("Expected the field `operatingSystems` to be an array in the JSON data but got " + data['operatingSystems']);
            }
            // validate the optional field `operatingSystems` (array)
            for (const item of data['operatingSystems']) {
                OperatingSystem.validateJSON(item);
            };
        }
        if (data['platformTypes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['platformTypes'])) {
                throw new Error("Expected the field `platformTypes` to be an array in the JSON data but got " + data['platformTypes']);
            }
            // validate the optional field `platformTypes` (array)
            for (const item of data['platformTypes']) {
                PlatformType.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Browsers that this ad targets. For each browser either set browserVersionId or dartId along with the version numbers. If both are specified, only browserVersionId will be used. The other fields are populated automatically when the ad is inserted or updated.
 * @member {Array.<module:model/Browser>} browsers
 */
TechnologyTargeting.prototype['browsers'] = undefined;

/**
 * Connection types that this ad targets. For each connection type only id is required. The other fields are populated automatically when the ad is inserted or updated.
 * @member {Array.<module:model/ConnectionType>} connectionTypes
 */
TechnologyTargeting.prototype['connectionTypes'] = undefined;

/**
 * Mobile carriers that this ad targets. For each mobile carrier only id is required, and the other fields are populated automatically when the ad is inserted or updated. If targeting a mobile carrier, do not set targeting for any zip codes.
 * @member {Array.<module:model/MobileCarrier>} mobileCarriers
 */
TechnologyTargeting.prototype['mobileCarriers'] = undefined;

/**
 * Operating system versions that this ad targets. To target all versions, use operatingSystems. For each operating system version, only id is required. The other fields are populated automatically when the ad is inserted or updated. If targeting an operating system version, do not set targeting for the corresponding operating system in operatingSystems.
 * @member {Array.<module:model/OperatingSystemVersion>} operatingSystemVersions
 */
TechnologyTargeting.prototype['operatingSystemVersions'] = undefined;

/**
 * Operating systems that this ad targets. To target specific versions, use operatingSystemVersions. For each operating system only dartId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting an operating system, do not set targeting for operating system versions for the same operating system.
 * @member {Array.<module:model/OperatingSystem>} operatingSystems
 */
TechnologyTargeting.prototype['operatingSystems'] = undefined;

/**
 * Platform types that this ad targets. For example, desktop, mobile, or tablet. For each platform type, only id is required, and the other fields are populated automatically when the ad is inserted or updated.
 * @member {Array.<module:model/PlatformType>} platformTypes
 */
TechnologyTargeting.prototype['platformTypes'] = undefined;






export default TechnologyTargeting;

