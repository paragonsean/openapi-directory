/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomEventClickAnnotation from './CustomEventClickAnnotation';
import CustomEventImpressionAnnotation from './CustomEventImpressionAnnotation';
import CustomEventInsert from './CustomEventInsert';
import CustomVariable from './CustomVariable';

/**
 * The CustomEvent model module.
 * @module model/CustomEvent
 * @version v3.4
 */
class CustomEvent {
    /**
     * Constructs a new <code>CustomEvent</code>.
     * Experimental feature (no support provided) A custom event represents a third party impression, a third party click, an annotation on a first party impression, or an annotation on a first party click.
     * @alias module:model/CustomEvent
     */
    constructor() { 
        
        CustomEvent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CustomEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomEvent} obj Optional instance to populate.
     * @return {module:model/CustomEvent} The populated <code>CustomEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomEvent();

            if (data.hasOwnProperty('annotateClickEvent')) {
                obj['annotateClickEvent'] = CustomEventClickAnnotation.constructFromObject(data['annotateClickEvent']);
            }
            if (data.hasOwnProperty('annotateImpressionEvent')) {
                obj['annotateImpressionEvent'] = CustomEventImpressionAnnotation.constructFromObject(data['annotateImpressionEvent']);
            }
            if (data.hasOwnProperty('customVariables')) {
                obj['customVariables'] = ApiClient.convertToType(data['customVariables'], [CustomVariable]);
            }
            if (data.hasOwnProperty('eventType')) {
                obj['eventType'] = ApiClient.convertToType(data['eventType'], 'String');
            }
            if (data.hasOwnProperty('floodlightConfigurationId')) {
                obj['floodlightConfigurationId'] = ApiClient.convertToType(data['floodlightConfigurationId'], 'String');
            }
            if (data.hasOwnProperty('insertEvent')) {
                obj['insertEvent'] = CustomEventInsert.constructFromObject(data['insertEvent']);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('ordinal')) {
                obj['ordinal'] = ApiClient.convertToType(data['ordinal'], 'String');
            }
            if (data.hasOwnProperty('timestampMicros')) {
                obj['timestampMicros'] = ApiClient.convertToType(data['timestampMicros'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomEvent</code>.
     */
    static validateJSON(data) {
        // validate the optional field `annotateClickEvent`
        if (data['annotateClickEvent']) { // data not null
          CustomEventClickAnnotation.validateJSON(data['annotateClickEvent']);
        }
        // validate the optional field `annotateImpressionEvent`
        if (data['annotateImpressionEvent']) { // data not null
          CustomEventImpressionAnnotation.validateJSON(data['annotateImpressionEvent']);
        }
        if (data['customVariables']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['customVariables'])) {
                throw new Error("Expected the field `customVariables` to be an array in the JSON data but got " + data['customVariables']);
            }
            // validate the optional field `customVariables` (array)
            for (const item of data['customVariables']) {
                CustomVariable.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['eventType'] && !(typeof data['eventType'] === 'string' || data['eventType'] instanceof String)) {
            throw new Error("Expected the field `eventType` to be a primitive type in the JSON string but got " + data['eventType']);
        }
        // ensure the json data is a string
        if (data['floodlightConfigurationId'] && !(typeof data['floodlightConfigurationId'] === 'string' || data['floodlightConfigurationId'] instanceof String)) {
            throw new Error("Expected the field `floodlightConfigurationId` to be a primitive type in the JSON string but got " + data['floodlightConfigurationId']);
        }
        // validate the optional field `insertEvent`
        if (data['insertEvent']) { // data not null
          CustomEventInsert.validateJSON(data['insertEvent']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['ordinal'] && !(typeof data['ordinal'] === 'string' || data['ordinal'] instanceof String)) {
            throw new Error("Expected the field `ordinal` to be a primitive type in the JSON string but got " + data['ordinal']);
        }
        // ensure the json data is a string
        if (data['timestampMicros'] && !(typeof data['timestampMicros'] === 'string' || data['timestampMicros'] instanceof String)) {
            throw new Error("Expected the field `timestampMicros` to be a primitive type in the JSON string but got " + data['timestampMicros']);
        }

        return true;
    }


}



/**
 * @member {module:model/CustomEventClickAnnotation} annotateClickEvent
 */
CustomEvent.prototype['annotateClickEvent'] = undefined;

/**
 * @member {module:model/CustomEventImpressionAnnotation} annotateImpressionEvent
 */
CustomEvent.prototype['annotateImpressionEvent'] = undefined;

/**
 * Custom variables associated with the event.
 * @member {Array.<module:model/CustomVariable>} customVariables
 */
CustomEvent.prototype['customVariables'] = undefined;

/**
 * The type of event. If INSERT, the fields in insertEvent need to be populated. If ANNOTATE, the fields in either annotateClickEvent or annotateImpressionEvent need to be populated.
 * @member {module:model/CustomEvent.EventTypeEnum} eventType
 */
CustomEvent.prototype['eventType'] = undefined;

/**
 * Floodlight configuration ID of the advertiser the event is linked to. This is a required field.
 * @member {String} floodlightConfigurationId
 */
CustomEvent.prototype['floodlightConfigurationId'] = undefined;

/**
 * @member {module:model/CustomEventInsert} insertEvent
 */
CustomEvent.prototype['insertEvent'] = undefined;

/**
 * Identifies what kind of resource this is. Value: the fixed string \"dfareporting#customEvent\".
 * @member {String} kind
 */
CustomEvent.prototype['kind'] = undefined;

/**
 * The ordinal of this custom event. This is a required field.
 * @member {String} ordinal
 */
CustomEvent.prototype['ordinal'] = undefined;

/**
 * The timestamp of this custom event, in Unix epoch micros. This is a required field.
 * @member {String} timestampMicros
 */
CustomEvent.prototype['timestampMicros'] = undefined;





/**
 * Allowed values for the <code>eventType</code> property.
 * @enum {String}
 * @readonly
 */
CustomEvent['EventTypeEnum'] = {

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN",

    /**
     * value: "INSERT"
     * @const
     */
    "INSERT": "INSERT",

    /**
     * value: "ANNOTATE"
     * @const
     */
    "ANNOTATE": "ANNOTATE"
};



export default CustomEvent;

