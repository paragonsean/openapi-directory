/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Dimension from './Dimension';
import Metric from './Metric';

/**
 * The PathToConversionReportCompatibleFields model module.
 * @module model/PathToConversionReportCompatibleFields
 * @version v3.4
 */
class PathToConversionReportCompatibleFields {
    /**
     * Constructs a new <code>PathToConversionReportCompatibleFields</code>.
     * Represents fields that are compatible to be selected for a report of type \&quot;PATH_TO_CONVERSION\&quot;.
     * @alias module:model/PathToConversionReportCompatibleFields
     */
    constructor() { 
        
        PathToConversionReportCompatibleFields.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PathToConversionReportCompatibleFields</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PathToConversionReportCompatibleFields} obj Optional instance to populate.
     * @return {module:model/PathToConversionReportCompatibleFields} The populated <code>PathToConversionReportCompatibleFields</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PathToConversionReportCompatibleFields();

            if (data.hasOwnProperty('conversionDimensions')) {
                obj['conversionDimensions'] = ApiClient.convertToType(data['conversionDimensions'], [Dimension]);
            }
            if (data.hasOwnProperty('customFloodlightVariables')) {
                obj['customFloodlightVariables'] = ApiClient.convertToType(data['customFloodlightVariables'], [Dimension]);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('metrics')) {
                obj['metrics'] = ApiClient.convertToType(data['metrics'], [Metric]);
            }
            if (data.hasOwnProperty('perInteractionDimensions')) {
                obj['perInteractionDimensions'] = ApiClient.convertToType(data['perInteractionDimensions'], [Dimension]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PathToConversionReportCompatibleFields</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PathToConversionReportCompatibleFields</code>.
     */
    static validateJSON(data) {
        if (data['conversionDimensions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['conversionDimensions'])) {
                throw new Error("Expected the field `conversionDimensions` to be an array in the JSON data but got " + data['conversionDimensions']);
            }
            // validate the optional field `conversionDimensions` (array)
            for (const item of data['conversionDimensions']) {
                Dimension.validateJSON(item);
            };
        }
        if (data['customFloodlightVariables']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['customFloodlightVariables'])) {
                throw new Error("Expected the field `customFloodlightVariables` to be an array in the JSON data but got " + data['customFloodlightVariables']);
            }
            // validate the optional field `customFloodlightVariables` (array)
            for (const item of data['customFloodlightVariables']) {
                Dimension.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        if (data['metrics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metrics'])) {
                throw new Error("Expected the field `metrics` to be an array in the JSON data but got " + data['metrics']);
            }
            // validate the optional field `metrics` (array)
            for (const item of data['metrics']) {
                Metric.validateJSON(item);
            };
        }
        if (data['perInteractionDimensions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['perInteractionDimensions'])) {
                throw new Error("Expected the field `perInteractionDimensions` to be an array in the JSON data but got " + data['perInteractionDimensions']);
            }
            // validate the optional field `perInteractionDimensions` (array)
            for (const item of data['perInteractionDimensions']) {
                Dimension.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Conversion dimensions which are compatible to be selected in the \"conversionDimensions\" section of the report.
 * @member {Array.<module:model/Dimension>} conversionDimensions
 */
PathToConversionReportCompatibleFields.prototype['conversionDimensions'] = undefined;

/**
 * Custom floodlight variables which are compatible to be selected in the \"customFloodlightVariables\" section of the report.
 * @member {Array.<module:model/Dimension>} customFloodlightVariables
 */
PathToConversionReportCompatibleFields.prototype['customFloodlightVariables'] = undefined;

/**
 * The kind of resource this is, in this case dfareporting#pathToConversionReportCompatibleFields.
 * @member {String} kind
 */
PathToConversionReportCompatibleFields.prototype['kind'] = undefined;

/**
 * Metrics which are compatible to be selected in the \"metricNames\" section of the report.
 * @member {Array.<module:model/Metric>} metrics
 */
PathToConversionReportCompatibleFields.prototype['metrics'] = undefined;

/**
 * Per-interaction dimensions which are compatible to be selected in the \"perInteractionDimensions\" section of the report.
 * @member {Array.<module:model/Dimension>} perInteractionDimensions
 */
PathToConversionReportCompatibleFields.prototype['perInteractionDimensions'] = undefined;






export default PathToConversionReportCompatibleFields;

