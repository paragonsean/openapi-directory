/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReportCriteria from './ReportCriteria';
import ReportCrossDimensionReachCriteria from './ReportCrossDimensionReachCriteria';
import ReportDelivery from './ReportDelivery';
import ReportFloodlightCriteria from './ReportFloodlightCriteria';
import ReportPathAttributionCriteria from './ReportPathAttributionCriteria';
import ReportPathCriteria from './ReportPathCriteria';
import ReportPathToConversionCriteria from './ReportPathToConversionCriteria';
import ReportReachCriteria from './ReportReachCriteria';
import ReportSchedule from './ReportSchedule';

/**
 * The Report model module.
 * @module model/Report
 * @version v3.4
 */
class Report {
    /**
     * Constructs a new <code>Report</code>.
     * Represents a Report resource.
     * @alias module:model/Report
     */
    constructor() { 
        
        Report.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Report</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Report} obj Optional instance to populate.
     * @return {module:model/Report} The populated <code>Report</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Report();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('criteria')) {
                obj['criteria'] = ReportCriteria.constructFromObject(data['criteria']);
            }
            if (data.hasOwnProperty('crossDimensionReachCriteria')) {
                obj['crossDimensionReachCriteria'] = ReportCrossDimensionReachCriteria.constructFromObject(data['crossDimensionReachCriteria']);
            }
            if (data.hasOwnProperty('delivery')) {
                obj['delivery'] = ReportDelivery.constructFromObject(data['delivery']);
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('fileName')) {
                obj['fileName'] = ApiClient.convertToType(data['fileName'], 'String');
            }
            if (data.hasOwnProperty('floodlightCriteria')) {
                obj['floodlightCriteria'] = ReportFloodlightCriteria.constructFromObject(data['floodlightCriteria']);
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('lastModifiedTime')) {
                obj['lastModifiedTime'] = ApiClient.convertToType(data['lastModifiedTime'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('ownerProfileId')) {
                obj['ownerProfileId'] = ApiClient.convertToType(data['ownerProfileId'], 'String');
            }
            if (data.hasOwnProperty('pathAttributionCriteria')) {
                obj['pathAttributionCriteria'] = ReportPathAttributionCriteria.constructFromObject(data['pathAttributionCriteria']);
            }
            if (data.hasOwnProperty('pathCriteria')) {
                obj['pathCriteria'] = ReportPathCriteria.constructFromObject(data['pathCriteria']);
            }
            if (data.hasOwnProperty('pathToConversionCriteria')) {
                obj['pathToConversionCriteria'] = ReportPathToConversionCriteria.constructFromObject(data['pathToConversionCriteria']);
            }
            if (data.hasOwnProperty('reachCriteria')) {
                obj['reachCriteria'] = ReportReachCriteria.constructFromObject(data['reachCriteria']);
            }
            if (data.hasOwnProperty('schedule')) {
                obj['schedule'] = ReportSchedule.constructFromObject(data['schedule']);
            }
            if (data.hasOwnProperty('subAccountId')) {
                obj['subAccountId'] = ApiClient.convertToType(data['subAccountId'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Report</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Report</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        // validate the optional field `criteria`
        if (data['criteria']) { // data not null
          ReportCriteria.validateJSON(data['criteria']);
        }
        // validate the optional field `crossDimensionReachCriteria`
        if (data['crossDimensionReachCriteria']) { // data not null
          ReportCrossDimensionReachCriteria.validateJSON(data['crossDimensionReachCriteria']);
        }
        // validate the optional field `delivery`
        if (data['delivery']) { // data not null
          ReportDelivery.validateJSON(data['delivery']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['fileName'] && !(typeof data['fileName'] === 'string' || data['fileName'] instanceof String)) {
            throw new Error("Expected the field `fileName` to be a primitive type in the JSON string but got " + data['fileName']);
        }
        // validate the optional field `floodlightCriteria`
        if (data['floodlightCriteria']) { // data not null
          ReportFloodlightCriteria.validateJSON(data['floodlightCriteria']);
        }
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['lastModifiedTime'] && !(typeof data['lastModifiedTime'] === 'string' || data['lastModifiedTime'] instanceof String)) {
            throw new Error("Expected the field `lastModifiedTime` to be a primitive type in the JSON string but got " + data['lastModifiedTime']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['ownerProfileId'] && !(typeof data['ownerProfileId'] === 'string' || data['ownerProfileId'] instanceof String)) {
            throw new Error("Expected the field `ownerProfileId` to be a primitive type in the JSON string but got " + data['ownerProfileId']);
        }
        // validate the optional field `pathAttributionCriteria`
        if (data['pathAttributionCriteria']) { // data not null
          ReportPathAttributionCriteria.validateJSON(data['pathAttributionCriteria']);
        }
        // validate the optional field `pathCriteria`
        if (data['pathCriteria']) { // data not null
          ReportPathCriteria.validateJSON(data['pathCriteria']);
        }
        // validate the optional field `pathToConversionCriteria`
        if (data['pathToConversionCriteria']) { // data not null
          ReportPathToConversionCriteria.validateJSON(data['pathToConversionCriteria']);
        }
        // validate the optional field `reachCriteria`
        if (data['reachCriteria']) { // data not null
          ReportReachCriteria.validateJSON(data['reachCriteria']);
        }
        // validate the optional field `schedule`
        if (data['schedule']) { // data not null
          ReportSchedule.validateJSON(data['schedule']);
        }
        // ensure the json data is a string
        if (data['subAccountId'] && !(typeof data['subAccountId'] === 'string' || data['subAccountId'] instanceof String)) {
            throw new Error("Expected the field `subAccountId` to be a primitive type in the JSON string but got " + data['subAccountId']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The account ID to which this report belongs.
 * @member {String} accountId
 */
Report.prototype['accountId'] = undefined;

/**
 * @member {module:model/ReportCriteria} criteria
 */
Report.prototype['criteria'] = undefined;

/**
 * @member {module:model/ReportCrossDimensionReachCriteria} crossDimensionReachCriteria
 */
Report.prototype['crossDimensionReachCriteria'] = undefined;

/**
 * @member {module:model/ReportDelivery} delivery
 */
Report.prototype['delivery'] = undefined;

/**
 * The eTag of this response for caching purposes.
 * @member {String} etag
 */
Report.prototype['etag'] = undefined;

/**
 * The filename used when generating report files for this report.
 * @member {String} fileName
 */
Report.prototype['fileName'] = undefined;

/**
 * @member {module:model/ReportFloodlightCriteria} floodlightCriteria
 */
Report.prototype['floodlightCriteria'] = undefined;

/**
 * The output format of the report. If not specified, default format is \"CSV\". Note that the actual format in the completed report file might differ if for instance the report's size exceeds the format's capabilities. \"CSV\" will then be the fallback format.
 * @member {module:model/Report.FormatEnum} format
 */
Report.prototype['format'] = undefined;

/**
 * The unique ID identifying this report resource.
 * @member {String} id
 */
Report.prototype['id'] = undefined;

/**
 * The kind of resource this is, in this case dfareporting#report.
 * @member {String} kind
 */
Report.prototype['kind'] = undefined;

/**
 * The timestamp (in milliseconds since epoch) of when this report was last modified.
 * @member {String} lastModifiedTime
 */
Report.prototype['lastModifiedTime'] = undefined;

/**
 * The name of the report.
 * @member {String} name
 */
Report.prototype['name'] = undefined;

/**
 * The user profile id of the owner of this report.
 * @member {String} ownerProfileId
 */
Report.prototype['ownerProfileId'] = undefined;

/**
 * @member {module:model/ReportPathAttributionCriteria} pathAttributionCriteria
 */
Report.prototype['pathAttributionCriteria'] = undefined;

/**
 * @member {module:model/ReportPathCriteria} pathCriteria
 */
Report.prototype['pathCriteria'] = undefined;

/**
 * @member {module:model/ReportPathToConversionCriteria} pathToConversionCriteria
 */
Report.prototype['pathToConversionCriteria'] = undefined;

/**
 * @member {module:model/ReportReachCriteria} reachCriteria
 */
Report.prototype['reachCriteria'] = undefined;

/**
 * @member {module:model/ReportSchedule} schedule
 */
Report.prototype['schedule'] = undefined;

/**
 * The subaccount ID to which this report belongs if applicable.
 * @member {String} subAccountId
 */
Report.prototype['subAccountId'] = undefined;

/**
 * The type of the report.
 * @member {module:model/Report.TypeEnum} type
 */
Report.prototype['type'] = undefined;





/**
 * Allowed values for the <code>format</code> property.
 * @enum {String}
 * @readonly
 */
Report['FormatEnum'] = {

    /**
     * value: "CSV"
     * @const
     */
    "CSV": "CSV",

    /**
     * value: "EXCEL"
     * @const
     */
    "EXCEL": "EXCEL"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Report['TypeEnum'] = {

    /**
     * value: "STANDARD"
     * @const
     */
    "STANDARD": "STANDARD",

    /**
     * value: "REACH"
     * @const
     */
    "REACH": "REACH",

    /**
     * value: "PATH_TO_CONVERSION"
     * @const
     */
    "PATH_TO_CONVERSION": "PATH_TO_CONVERSION",

    /**
     * value: "CROSS_DIMENSION_REACH"
     * @const
     */
    "CROSS_DIMENSION_REACH": "CROSS_DIMENSION_REACH",

    /**
     * value: "FLOODLIGHT"
     * @const
     */
    "FLOODLIGHT": "FLOODLIGHT",

    /**
     * value: "PATH"
     * @const
     */
    "PATH": "PATH",

    /**
     * value: "PATH_ATTRIBUTION"
     * @const
     */
    "PATH_ATTRIBUTION": "PATH_ATTRIBUTION"
};



export default Report;

