/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ClickThroughUrl from './ClickThroughUrl';
import CompanionClickThroughOverride from './CompanionClickThroughOverride';
import CreativeGroupAssignment from './CreativeGroupAssignment';
import DimensionValue from './DimensionValue';
import RichMediaExitOverride from './RichMediaExitOverride';

/**
 * The CreativeAssignment model module.
 * @module model/CreativeAssignment
 * @version v3.4
 */
class CreativeAssignment {
    /**
     * Constructs a new <code>CreativeAssignment</code>.
     * Creative Assignment.
     * @alias module:model/CreativeAssignment
     */
    constructor() { 
        
        CreativeAssignment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CreativeAssignment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreativeAssignment} obj Optional instance to populate.
     * @return {module:model/CreativeAssignment} The populated <code>CreativeAssignment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreativeAssignment();

            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('applyEventTags')) {
                obj['applyEventTags'] = ApiClient.convertToType(data['applyEventTags'], 'Boolean');
            }
            if (data.hasOwnProperty('clickThroughUrl')) {
                obj['clickThroughUrl'] = ClickThroughUrl.constructFromObject(data['clickThroughUrl']);
            }
            if (data.hasOwnProperty('companionCreativeOverrides')) {
                obj['companionCreativeOverrides'] = ApiClient.convertToType(data['companionCreativeOverrides'], [CompanionClickThroughOverride]);
            }
            if (data.hasOwnProperty('creativeGroupAssignments')) {
                obj['creativeGroupAssignments'] = ApiClient.convertToType(data['creativeGroupAssignments'], [CreativeGroupAssignment]);
            }
            if (data.hasOwnProperty('creativeId')) {
                obj['creativeId'] = ApiClient.convertToType(data['creativeId'], 'String');
            }
            if (data.hasOwnProperty('creativeIdDimensionValue')) {
                obj['creativeIdDimensionValue'] = DimensionValue.constructFromObject(data['creativeIdDimensionValue']);
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'Date');
            }
            if (data.hasOwnProperty('richMediaExitOverrides')) {
                obj['richMediaExitOverrides'] = ApiClient.convertToType(data['richMediaExitOverrides'], [RichMediaExitOverride]);
            }
            if (data.hasOwnProperty('sequence')) {
                obj['sequence'] = ApiClient.convertToType(data['sequence'], 'Number');
            }
            if (data.hasOwnProperty('sslCompliant')) {
                obj['sslCompliant'] = ApiClient.convertToType(data['sslCompliant'], 'Boolean');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('weight')) {
                obj['weight'] = ApiClient.convertToType(data['weight'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreativeAssignment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreativeAssignment</code>.
     */
    static validateJSON(data) {
        // validate the optional field `clickThroughUrl`
        if (data['clickThroughUrl']) { // data not null
          ClickThroughUrl.validateJSON(data['clickThroughUrl']);
        }
        if (data['companionCreativeOverrides']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['companionCreativeOverrides'])) {
                throw new Error("Expected the field `companionCreativeOverrides` to be an array in the JSON data but got " + data['companionCreativeOverrides']);
            }
            // validate the optional field `companionCreativeOverrides` (array)
            for (const item of data['companionCreativeOverrides']) {
                CompanionClickThroughOverride.validateJSON(item);
            };
        }
        if (data['creativeGroupAssignments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['creativeGroupAssignments'])) {
                throw new Error("Expected the field `creativeGroupAssignments` to be an array in the JSON data but got " + data['creativeGroupAssignments']);
            }
            // validate the optional field `creativeGroupAssignments` (array)
            for (const item of data['creativeGroupAssignments']) {
                CreativeGroupAssignment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['creativeId'] && !(typeof data['creativeId'] === 'string' || data['creativeId'] instanceof String)) {
            throw new Error("Expected the field `creativeId` to be a primitive type in the JSON string but got " + data['creativeId']);
        }
        // validate the optional field `creativeIdDimensionValue`
        if (data['creativeIdDimensionValue']) { // data not null
          DimensionValue.validateJSON(data['creativeIdDimensionValue']);
        }
        if (data['richMediaExitOverrides']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['richMediaExitOverrides'])) {
                throw new Error("Expected the field `richMediaExitOverrides` to be an array in the JSON data but got " + data['richMediaExitOverrides']);
            }
            // validate the optional field `richMediaExitOverrides` (array)
            for (const item of data['richMediaExitOverrides']) {
                RichMediaExitOverride.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Whether this creative assignment is active. When true, the creative will be included in the ad's rotation.
 * @member {Boolean} active
 */
CreativeAssignment.prototype['active'] = undefined;

/**
 * Whether applicable event tags should fire when this creative assignment is rendered. If this value is unset when the ad is inserted or updated, it will default to true for all creative types EXCEPT for INTERNAL_REDIRECT, INTERSTITIAL_INTERNAL_REDIRECT, and INSTREAM_VIDEO.
 * @member {Boolean} applyEventTags
 */
CreativeAssignment.prototype['applyEventTags'] = undefined;

/**
 * @member {module:model/ClickThroughUrl} clickThroughUrl
 */
CreativeAssignment.prototype['clickThroughUrl'] = undefined;

/**
 * Companion creative overrides for this creative assignment. Applicable to video ads.
 * @member {Array.<module:model/CompanionClickThroughOverride>} companionCreativeOverrides
 */
CreativeAssignment.prototype['companionCreativeOverrides'] = undefined;

/**
 * Creative group assignments for this creative assignment. Only one assignment per creative group number is allowed for a maximum of two assignments.
 * @member {Array.<module:model/CreativeGroupAssignment>} creativeGroupAssignments
 */
CreativeAssignment.prototype['creativeGroupAssignments'] = undefined;

/**
 * ID of the creative to be assigned. This is a required field.
 * @member {String} creativeId
 */
CreativeAssignment.prototype['creativeId'] = undefined;

/**
 * @member {module:model/DimensionValue} creativeIdDimensionValue
 */
CreativeAssignment.prototype['creativeIdDimensionValue'] = undefined;

/**
 * @member {Date} endTime
 */
CreativeAssignment.prototype['endTime'] = undefined;

/**
 * Rich media exit overrides for this creative assignment. Applicable when the creative type is any of the following: - DISPLAY - RICH_MEDIA_INPAGE - RICH_MEDIA_INPAGE_FLOATING - RICH_MEDIA_IM_EXPAND - RICH_MEDIA_EXPANDING - RICH_MEDIA_INTERSTITIAL_FLOAT - RICH_MEDIA_MOBILE_IN_APP - RICH_MEDIA_MULTI_FLOATING - RICH_MEDIA_PEEL_DOWN - VPAID_LINEAR - VPAID_NON_LINEAR 
 * @member {Array.<module:model/RichMediaExitOverride>} richMediaExitOverrides
 */
CreativeAssignment.prototype['richMediaExitOverrides'] = undefined;

/**
 * Sequence number of the creative assignment, applicable when the rotation type is CREATIVE_ROTATION_TYPE_SEQUENTIAL. Acceptable values are 1 to 65535, inclusive.
 * @member {Number} sequence
 */
CreativeAssignment.prototype['sequence'] = undefined;

/**
 * Whether the creative to be assigned is SSL-compliant. This is a read-only field that is auto-generated when the ad is inserted or updated.
 * @member {Boolean} sslCompliant
 */
CreativeAssignment.prototype['sslCompliant'] = undefined;

/**
 * @member {Date} startTime
 */
CreativeAssignment.prototype['startTime'] = undefined;

/**
 * Weight of the creative assignment, applicable when the rotation type is CREATIVE_ROTATION_TYPE_RANDOM. Value must be greater than or equal to 1.
 * @member {Number} weight
 */
CreativeAssignment.prototype['weight'] = undefined;






export default CreativeAssignment;

