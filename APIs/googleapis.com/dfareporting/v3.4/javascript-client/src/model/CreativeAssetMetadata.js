/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ClickTag from './ClickTag';
import CreativeAssetId from './CreativeAssetId';
import CreativeCustomEvent from './CreativeCustomEvent';
import DimensionValue from './DimensionValue';

/**
 * The CreativeAssetMetadata model module.
 * @module model/CreativeAssetMetadata
 * @version v3.4
 */
class CreativeAssetMetadata {
    /**
     * Constructs a new <code>CreativeAssetMetadata</code>.
     * CreativeAssets contains properties of a creative asset file which will be uploaded or has already been uploaded. Refer to the creative sample code for how to upload assets and insert a creative.
     * @alias module:model/CreativeAssetMetadata
     */
    constructor() { 
        
        CreativeAssetMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CreativeAssetMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreativeAssetMetadata} obj Optional instance to populate.
     * @return {module:model/CreativeAssetMetadata} The populated <code>CreativeAssetMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreativeAssetMetadata();

            if (data.hasOwnProperty('assetIdentifier')) {
                obj['assetIdentifier'] = CreativeAssetId.constructFromObject(data['assetIdentifier']);
            }
            if (data.hasOwnProperty('clickTags')) {
                obj['clickTags'] = ApiClient.convertToType(data['clickTags'], [ClickTag]);
            }
            if (data.hasOwnProperty('counterCustomEvents')) {
                obj['counterCustomEvents'] = ApiClient.convertToType(data['counterCustomEvents'], [CreativeCustomEvent]);
            }
            if (data.hasOwnProperty('detectedFeatures')) {
                obj['detectedFeatures'] = ApiClient.convertToType(data['detectedFeatures'], ['String']);
            }
            if (data.hasOwnProperty('exitCustomEvents')) {
                obj['exitCustomEvents'] = ApiClient.convertToType(data['exitCustomEvents'], [CreativeCustomEvent]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('idDimensionValue')) {
                obj['idDimensionValue'] = DimensionValue.constructFromObject(data['idDimensionValue']);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('richMedia')) {
                obj['richMedia'] = ApiClient.convertToType(data['richMedia'], 'Boolean');
            }
            if (data.hasOwnProperty('timerCustomEvents')) {
                obj['timerCustomEvents'] = ApiClient.convertToType(data['timerCustomEvents'], [CreativeCustomEvent]);
            }
            if (data.hasOwnProperty('warnedValidationRules')) {
                obj['warnedValidationRules'] = ApiClient.convertToType(data['warnedValidationRules'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreativeAssetMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreativeAssetMetadata</code>.
     */
    static validateJSON(data) {
        // validate the optional field `assetIdentifier`
        if (data['assetIdentifier']) { // data not null
          CreativeAssetId.validateJSON(data['assetIdentifier']);
        }
        if (data['clickTags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['clickTags'])) {
                throw new Error("Expected the field `clickTags` to be an array in the JSON data but got " + data['clickTags']);
            }
            // validate the optional field `clickTags` (array)
            for (const item of data['clickTags']) {
                ClickTag.validateJSON(item);
            };
        }
        if (data['counterCustomEvents']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['counterCustomEvents'])) {
                throw new Error("Expected the field `counterCustomEvents` to be an array in the JSON data but got " + data['counterCustomEvents']);
            }
            // validate the optional field `counterCustomEvents` (array)
            for (const item of data['counterCustomEvents']) {
                CreativeCustomEvent.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['detectedFeatures'])) {
            throw new Error("Expected the field `detectedFeatures` to be an array in the JSON data but got " + data['detectedFeatures']);
        }
        if (data['exitCustomEvents']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['exitCustomEvents'])) {
                throw new Error("Expected the field `exitCustomEvents` to be an array in the JSON data but got " + data['exitCustomEvents']);
            }
            // validate the optional field `exitCustomEvents` (array)
            for (const item of data['exitCustomEvents']) {
                CreativeCustomEvent.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `idDimensionValue`
        if (data['idDimensionValue']) { // data not null
          DimensionValue.validateJSON(data['idDimensionValue']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        if (data['timerCustomEvents']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['timerCustomEvents'])) {
                throw new Error("Expected the field `timerCustomEvents` to be an array in the JSON data but got " + data['timerCustomEvents']);
            }
            // validate the optional field `timerCustomEvents` (array)
            for (const item of data['timerCustomEvents']) {
                CreativeCustomEvent.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['warnedValidationRules'])) {
            throw new Error("Expected the field `warnedValidationRules` to be an array in the JSON data but got " + data['warnedValidationRules']);
        }

        return true;
    }


}



/**
 * @member {module:model/CreativeAssetId} assetIdentifier
 */
CreativeAssetMetadata.prototype['assetIdentifier'] = undefined;

/**
 * List of detected click tags for assets. This is a read-only, auto-generated field. This field is empty for a rich media asset.
 * @member {Array.<module:model/ClickTag>} clickTags
 */
CreativeAssetMetadata.prototype['clickTags'] = undefined;

/**
 * List of counter events configured for the asset. This is a read-only, auto-generated field and only applicable to a rich media asset.
 * @member {Array.<module:model/CreativeCustomEvent>} counterCustomEvents
 */
CreativeAssetMetadata.prototype['counterCustomEvents'] = undefined;

/**
 * List of feature dependencies for the creative asset that are detected by Campaign Manager. Feature dependencies are features that a browser must be able to support in order to render your HTML5 creative correctly. This is a read-only, auto-generated field.
 * @member {Array.<module:model/CreativeAssetMetadata.DetectedFeaturesEnum>} detectedFeatures
 */
CreativeAssetMetadata.prototype['detectedFeatures'] = undefined;

/**
 * List of exit events configured for the asset. This is a read-only, auto-generated field and only applicable to a rich media asset.
 * @member {Array.<module:model/CreativeCustomEvent>} exitCustomEvents
 */
CreativeAssetMetadata.prototype['exitCustomEvents'] = undefined;

/**
 * Numeric ID of the asset. This is a read-only, auto-generated field.
 * @member {String} id
 */
CreativeAssetMetadata.prototype['id'] = undefined;

/**
 * @member {module:model/DimensionValue} idDimensionValue
 */
CreativeAssetMetadata.prototype['idDimensionValue'] = undefined;

/**
 * Identifies what kind of resource this is. Value: the fixed string \"dfareporting#creativeAssetMetadata\".
 * @member {String} kind
 */
CreativeAssetMetadata.prototype['kind'] = undefined;

/**
 * True if the uploaded asset is a rich media asset. This is a read-only, auto-generated field.
 * @member {Boolean} richMedia
 */
CreativeAssetMetadata.prototype['richMedia'] = undefined;

/**
 * List of timer events configured for the asset. This is a read-only, auto-generated field and only applicable to a rich media asset.
 * @member {Array.<module:model/CreativeCustomEvent>} timerCustomEvents
 */
CreativeAssetMetadata.prototype['timerCustomEvents'] = undefined;

/**
 * Rules validated during code generation that generated a warning. This is a read-only, auto-generated field. Possible values are: - \"ADMOB_REFERENCED\" - \"ASSET_FORMAT_UNSUPPORTED_DCM\" - \"ASSET_INVALID\" - \"CLICK_TAG_HARD_CODED\" - \"CLICK_TAG_INVALID\" - \"CLICK_TAG_IN_GWD\" - \"CLICK_TAG_MISSING\" - \"CLICK_TAG_MORE_THAN_ONE\" - \"CLICK_TAG_NON_TOP_LEVEL\" - \"COMPONENT_UNSUPPORTED_DCM\" - \"ENABLER_UNSUPPORTED_METHOD_DCM\" - \"EXTERNAL_FILE_REFERENCED\" - \"FILE_DETAIL_EMPTY\" - \"FILE_TYPE_INVALID\" - \"GWD_PROPERTIES_INVALID\" - \"HTML5_FEATURE_UNSUPPORTED\" - \"LINKED_FILE_NOT_FOUND\" - \"MAX_FLASH_VERSION_11\" - \"MRAID_REFERENCED\" - \"NOT_SSL_COMPLIANT\" - \"ORPHANED_ASSET\" - \"PRIMARY_HTML_MISSING\" - \"SVG_INVALID\" - \"ZIP_INVALID\" 
 * @member {Array.<module:model/CreativeAssetMetadata.WarnedValidationRulesEnum>} warnedValidationRules
 */
CreativeAssetMetadata.prototype['warnedValidationRules'] = undefined;





/**
 * Allowed values for the <code>detectedFeatures</code> property.
 * @enum {String}
 * @readonly
 */
CreativeAssetMetadata['DetectedFeaturesEnum'] = {

    /**
     * value: "CSS_FONT_FACE"
     * @const
     */
    "CSS_FONT_FACE": "CSS_FONT_FACE",

    /**
     * value: "CSS_BACKGROUND_SIZE"
     * @const
     */
    "CSS_BACKGROUND_SIZE": "CSS_BACKGROUND_SIZE",

    /**
     * value: "CSS_BORDER_IMAGE"
     * @const
     */
    "CSS_BORDER_IMAGE": "CSS_BORDER_IMAGE",

    /**
     * value: "CSS_BORDER_RADIUS"
     * @const
     */
    "CSS_BORDER_RADIUS": "CSS_BORDER_RADIUS",

    /**
     * value: "CSS_BOX_SHADOW"
     * @const
     */
    "CSS_BOX_SHADOW": "CSS_BOX_SHADOW",

    /**
     * value: "CSS_FLEX_BOX"
     * @const
     */
    "CSS_FLEX_BOX": "CSS_FLEX_BOX",

    /**
     * value: "CSS_HSLA"
     * @const
     */
    "CSS_HSLA": "CSS_HSLA",

    /**
     * value: "CSS_MULTIPLE_BGS"
     * @const
     */
    "CSS_MULTIPLE_BGS": "CSS_MULTIPLE_BGS",

    /**
     * value: "CSS_OPACITY"
     * @const
     */
    "CSS_OPACITY": "CSS_OPACITY",

    /**
     * value: "CSS_RGBA"
     * @const
     */
    "CSS_RGBA": "CSS_RGBA",

    /**
     * value: "CSS_TEXT_SHADOW"
     * @const
     */
    "CSS_TEXT_SHADOW": "CSS_TEXT_SHADOW",

    /**
     * value: "CSS_ANIMATIONS"
     * @const
     */
    "CSS_ANIMATIONS": "CSS_ANIMATIONS",

    /**
     * value: "CSS_COLUMNS"
     * @const
     */
    "CSS_COLUMNS": "CSS_COLUMNS",

    /**
     * value: "CSS_GENERATED_CONTENT"
     * @const
     */
    "CSS_GENERATED_CONTENT": "CSS_GENERATED_CONTENT",

    /**
     * value: "CSS_GRADIENTS"
     * @const
     */
    "CSS_GRADIENTS": "CSS_GRADIENTS",

    /**
     * value: "CSS_REFLECTIONS"
     * @const
     */
    "CSS_REFLECTIONS": "CSS_REFLECTIONS",

    /**
     * value: "CSS_TRANSFORMS"
     * @const
     */
    "CSS_TRANSFORMS": "CSS_TRANSFORMS",

    /**
     * value: "CSS_TRANSFORMS3D"
     * @const
     */
    "CSS_TRANSFORMS3D": "CSS_TRANSFORMS3D",

    /**
     * value: "CSS_TRANSITIONS"
     * @const
     */
    "CSS_TRANSITIONS": "CSS_TRANSITIONS",

    /**
     * value: "APPLICATION_CACHE"
     * @const
     */
    "APPLICATION_CACHE": "APPLICATION_CACHE",

    /**
     * value: "CANVAS"
     * @const
     */
    "CANVAS": "CANVAS",

    /**
     * value: "CANVAS_TEXT"
     * @const
     */
    "CANVAS_TEXT": "CANVAS_TEXT",

    /**
     * value: "DRAG_AND_DROP"
     * @const
     */
    "DRAG_AND_DROP": "DRAG_AND_DROP",

    /**
     * value: "HASH_CHANGE"
     * @const
     */
    "HASH_CHANGE": "HASH_CHANGE",

    /**
     * value: "HISTORY"
     * @const
     */
    "HISTORY": "HISTORY",

    /**
     * value: "AUDIO"
     * @const
     */
    "AUDIO": "AUDIO",

    /**
     * value: "VIDEO"
     * @const
     */
    "VIDEO": "VIDEO",

    /**
     * value: "INDEXED_DB"
     * @const
     */
    "INDEXED_DB": "INDEXED_DB",

    /**
     * value: "INPUT_ATTR_AUTOCOMPLETE"
     * @const
     */
    "INPUT_ATTR_AUTOCOMPLETE": "INPUT_ATTR_AUTOCOMPLETE",

    /**
     * value: "INPUT_ATTR_AUTOFOCUS"
     * @const
     */
    "INPUT_ATTR_AUTOFOCUS": "INPUT_ATTR_AUTOFOCUS",

    /**
     * value: "INPUT_ATTR_LIST"
     * @const
     */
    "INPUT_ATTR_LIST": "INPUT_ATTR_LIST",

    /**
     * value: "INPUT_ATTR_PLACEHOLDER"
     * @const
     */
    "INPUT_ATTR_PLACEHOLDER": "INPUT_ATTR_PLACEHOLDER",

    /**
     * value: "INPUT_ATTR_MAX"
     * @const
     */
    "INPUT_ATTR_MAX": "INPUT_ATTR_MAX",

    /**
     * value: "INPUT_ATTR_MIN"
     * @const
     */
    "INPUT_ATTR_MIN": "INPUT_ATTR_MIN",

    /**
     * value: "INPUT_ATTR_MULTIPLE"
     * @const
     */
    "INPUT_ATTR_MULTIPLE": "INPUT_ATTR_MULTIPLE",

    /**
     * value: "INPUT_ATTR_PATTERN"
     * @const
     */
    "INPUT_ATTR_PATTERN": "INPUT_ATTR_PATTERN",

    /**
     * value: "INPUT_ATTR_REQUIRED"
     * @const
     */
    "INPUT_ATTR_REQUIRED": "INPUT_ATTR_REQUIRED",

    /**
     * value: "INPUT_ATTR_STEP"
     * @const
     */
    "INPUT_ATTR_STEP": "INPUT_ATTR_STEP",

    /**
     * value: "INPUT_TYPE_SEARCH"
     * @const
     */
    "INPUT_TYPE_SEARCH": "INPUT_TYPE_SEARCH",

    /**
     * value: "INPUT_TYPE_TEL"
     * @const
     */
    "INPUT_TYPE_TEL": "INPUT_TYPE_TEL",

    /**
     * value: "INPUT_TYPE_URL"
     * @const
     */
    "INPUT_TYPE_URL": "INPUT_TYPE_URL",

    /**
     * value: "INPUT_TYPE_EMAIL"
     * @const
     */
    "INPUT_TYPE_EMAIL": "INPUT_TYPE_EMAIL",

    /**
     * value: "INPUT_TYPE_DATETIME"
     * @const
     */
    "INPUT_TYPE_DATETIME": "INPUT_TYPE_DATETIME",

    /**
     * value: "INPUT_TYPE_DATE"
     * @const
     */
    "INPUT_TYPE_DATE": "INPUT_TYPE_DATE",

    /**
     * value: "INPUT_TYPE_MONTH"
     * @const
     */
    "INPUT_TYPE_MONTH": "INPUT_TYPE_MONTH",

    /**
     * value: "INPUT_TYPE_WEEK"
     * @const
     */
    "INPUT_TYPE_WEEK": "INPUT_TYPE_WEEK",

    /**
     * value: "INPUT_TYPE_TIME"
     * @const
     */
    "INPUT_TYPE_TIME": "INPUT_TYPE_TIME",

    /**
     * value: "INPUT_TYPE_DATETIME_LOCAL"
     * @const
     */
    "INPUT_TYPE_DATETIME_LOCAL": "INPUT_TYPE_DATETIME_LOCAL",

    /**
     * value: "INPUT_TYPE_NUMBER"
     * @const
     */
    "INPUT_TYPE_NUMBER": "INPUT_TYPE_NUMBER",

    /**
     * value: "INPUT_TYPE_RANGE"
     * @const
     */
    "INPUT_TYPE_RANGE": "INPUT_TYPE_RANGE",

    /**
     * value: "INPUT_TYPE_COLOR"
     * @const
     */
    "INPUT_TYPE_COLOR": "INPUT_TYPE_COLOR",

    /**
     * value: "LOCAL_STORAGE"
     * @const
     */
    "LOCAL_STORAGE": "LOCAL_STORAGE",

    /**
     * value: "POST_MESSAGE"
     * @const
     */
    "POST_MESSAGE": "POST_MESSAGE",

    /**
     * value: "SESSION_STORAGE"
     * @const
     */
    "SESSION_STORAGE": "SESSION_STORAGE",

    /**
     * value: "WEB_SOCKETS"
     * @const
     */
    "WEB_SOCKETS": "WEB_SOCKETS",

    /**
     * value: "WEB_SQL_DATABASE"
     * @const
     */
    "WEB_SQL_DATABASE": "WEB_SQL_DATABASE",

    /**
     * value: "WEB_WORKERS"
     * @const
     */
    "WEB_WORKERS": "WEB_WORKERS",

    /**
     * value: "GEO_LOCATION"
     * @const
     */
    "GEO_LOCATION": "GEO_LOCATION",

    /**
     * value: "INLINE_SVG"
     * @const
     */
    "INLINE_SVG": "INLINE_SVG",

    /**
     * value: "SMIL"
     * @const
     */
    "SMIL": "SMIL",

    /**
     * value: "SVG_HREF"
     * @const
     */
    "SVG_HREF": "SVG_HREF",

    /**
     * value: "SVG_CLIP_PATHS"
     * @const
     */
    "SVG_CLIP_PATHS": "SVG_CLIP_PATHS",

    /**
     * value: "TOUCH"
     * @const
     */
    "TOUCH": "TOUCH",

    /**
     * value: "WEBGL"
     * @const
     */
    "WEBGL": "WEBGL",

    /**
     * value: "SVG_FILTERS"
     * @const
     */
    "SVG_FILTERS": "SVG_FILTERS",

    /**
     * value: "SVG_FE_IMAGE"
     * @const
     */
    "SVG_FE_IMAGE": "SVG_FE_IMAGE"
};


/**
 * Allowed values for the <code>warnedValidationRules</code> property.
 * @enum {String}
 * @readonly
 */
CreativeAssetMetadata['WarnedValidationRulesEnum'] = {

    /**
     * value: "CLICK_TAG_NON_TOP_LEVEL"
     * @const
     */
    "CLICK_TAG_NON_TOP_LEVEL": "CLICK_TAG_NON_TOP_LEVEL",

    /**
     * value: "CLICK_TAG_MISSING"
     * @const
     */
    "CLICK_TAG_MISSING": "CLICK_TAG_MISSING",

    /**
     * value: "CLICK_TAG_MORE_THAN_ONE"
     * @const
     */
    "CLICK_TAG_MORE_THAN_ONE": "CLICK_TAG_MORE_THAN_ONE",

    /**
     * value: "CLICK_TAG_INVALID"
     * @const
     */
    "CLICK_TAG_INVALID": "CLICK_TAG_INVALID",

    /**
     * value: "ORPHANED_ASSET"
     * @const
     */
    "ORPHANED_ASSET": "ORPHANED_ASSET",

    /**
     * value: "PRIMARY_HTML_MISSING"
     * @const
     */
    "PRIMARY_HTML_MISSING": "PRIMARY_HTML_MISSING",

    /**
     * value: "EXTERNAL_FILE_REFERENCED"
     * @const
     */
    "EXTERNAL_FILE_REFERENCED": "EXTERNAL_FILE_REFERENCED",

    /**
     * value: "MRAID_REFERENCED"
     * @const
     */
    "MRAID_REFERENCED": "MRAID_REFERENCED",

    /**
     * value: "ADMOB_REFERENCED"
     * @const
     */
    "ADMOB_REFERENCED": "ADMOB_REFERENCED",

    /**
     * value: "FILE_TYPE_INVALID"
     * @const
     */
    "FILE_TYPE_INVALID": "FILE_TYPE_INVALID",

    /**
     * value: "ZIP_INVALID"
     * @const
     */
    "ZIP_INVALID": "ZIP_INVALID",

    /**
     * value: "LINKED_FILE_NOT_FOUND"
     * @const
     */
    "LINKED_FILE_NOT_FOUND": "LINKED_FILE_NOT_FOUND",

    /**
     * value: "MAX_FLASH_VERSION_11"
     * @const
     */
    "MAX_FLASH_VERSION_11": "MAX_FLASH_VERSION_11",

    /**
     * value: "NOT_SSL_COMPLIANT"
     * @const
     */
    "NOT_SSL_COMPLIANT": "NOT_SSL_COMPLIANT",

    /**
     * value: "FILE_DETAIL_EMPTY"
     * @const
     */
    "FILE_DETAIL_EMPTY": "FILE_DETAIL_EMPTY",

    /**
     * value: "ASSET_INVALID"
     * @const
     */
    "ASSET_INVALID": "ASSET_INVALID",

    /**
     * value: "GWD_PROPERTIES_INVALID"
     * @const
     */
    "GWD_PROPERTIES_INVALID": "GWD_PROPERTIES_INVALID",

    /**
     * value: "ENABLER_UNSUPPORTED_METHOD_DCM"
     * @const
     */
    "ENABLER_UNSUPPORTED_METHOD_DCM": "ENABLER_UNSUPPORTED_METHOD_DCM",

    /**
     * value: "ASSET_FORMAT_UNSUPPORTED_DCM"
     * @const
     */
    "ASSET_FORMAT_UNSUPPORTED_DCM": "ASSET_FORMAT_UNSUPPORTED_DCM",

    /**
     * value: "COMPONENT_UNSUPPORTED_DCM"
     * @const
     */
    "COMPONENT_UNSUPPORTED_DCM": "COMPONENT_UNSUPPORTED_DCM",

    /**
     * value: "HTML5_FEATURE_UNSUPPORTED"
     * @const
     */
    "HTML5_FEATURE_UNSUPPORTED": "HTML5_FEATURE_UNSUPPORTED",

    /**
     * value: "CLICK_TAG_IN_GWD"
     * @const
     */
    "CLICK_TAG_IN_GWD": "CLICK_TAG_IN_GWD",

    /**
     * value: "CLICK_TAG_HARD_CODED"
     * @const
     */
    "CLICK_TAG_HARD_CODED": "CLICK_TAG_HARD_CODED",

    /**
     * value: "SVG_INVALID"
     * @const
     */
    "SVG_INVALID": "SVG_INVALID",

    /**
     * value: "CLICK_TAG_IN_RICH_MEDIA"
     * @const
     */
    "CLICK_TAG_IN_RICH_MEDIA": "CLICK_TAG_IN_RICH_MEDIA",

    /**
     * value: "MISSING_ENABLER_REFERENCE"
     * @const
     */
    "MISSING_ENABLER_REFERENCE": "MISSING_ENABLER_REFERENCE"
};



export default CreativeAssetMetadata;

