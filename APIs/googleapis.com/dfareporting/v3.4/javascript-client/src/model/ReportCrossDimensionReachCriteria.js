/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DateRange from './DateRange';
import DimensionValue from './DimensionValue';
import SortedDimension from './SortedDimension';

/**
 * The ReportCrossDimensionReachCriteria model module.
 * @module model/ReportCrossDimensionReachCriteria
 * @version v3.4
 */
class ReportCrossDimensionReachCriteria {
    /**
     * Constructs a new <code>ReportCrossDimensionReachCriteria</code>.
     * The report criteria for a report of type \&quot;CROSS_DIMENSION_REACH\&quot;.
     * @alias module:model/ReportCrossDimensionReachCriteria
     */
    constructor() { 
        
        ReportCrossDimensionReachCriteria.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReportCrossDimensionReachCriteria</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReportCrossDimensionReachCriteria} obj Optional instance to populate.
     * @return {module:model/ReportCrossDimensionReachCriteria} The populated <code>ReportCrossDimensionReachCriteria</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReportCrossDimensionReachCriteria();

            if (data.hasOwnProperty('breakdown')) {
                obj['breakdown'] = ApiClient.convertToType(data['breakdown'], [SortedDimension]);
            }
            if (data.hasOwnProperty('dateRange')) {
                obj['dateRange'] = DateRange.constructFromObject(data['dateRange']);
            }
            if (data.hasOwnProperty('dimension')) {
                obj['dimension'] = ApiClient.convertToType(data['dimension'], 'String');
            }
            if (data.hasOwnProperty('dimensionFilters')) {
                obj['dimensionFilters'] = ApiClient.convertToType(data['dimensionFilters'], [DimensionValue]);
            }
            if (data.hasOwnProperty('metricNames')) {
                obj['metricNames'] = ApiClient.convertToType(data['metricNames'], ['String']);
            }
            if (data.hasOwnProperty('overlapMetricNames')) {
                obj['overlapMetricNames'] = ApiClient.convertToType(data['overlapMetricNames'], ['String']);
            }
            if (data.hasOwnProperty('pivoted')) {
                obj['pivoted'] = ApiClient.convertToType(data['pivoted'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReportCrossDimensionReachCriteria</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReportCrossDimensionReachCriteria</code>.
     */
    static validateJSON(data) {
        if (data['breakdown']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['breakdown'])) {
                throw new Error("Expected the field `breakdown` to be an array in the JSON data but got " + data['breakdown']);
            }
            // validate the optional field `breakdown` (array)
            for (const item of data['breakdown']) {
                SortedDimension.validateJSON(item);
            };
        }
        // validate the optional field `dateRange`
        if (data['dateRange']) { // data not null
          DateRange.validateJSON(data['dateRange']);
        }
        // ensure the json data is a string
        if (data['dimension'] && !(typeof data['dimension'] === 'string' || data['dimension'] instanceof String)) {
            throw new Error("Expected the field `dimension` to be a primitive type in the JSON string but got " + data['dimension']);
        }
        if (data['dimensionFilters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dimensionFilters'])) {
                throw new Error("Expected the field `dimensionFilters` to be an array in the JSON data but got " + data['dimensionFilters']);
            }
            // validate the optional field `dimensionFilters` (array)
            for (const item of data['dimensionFilters']) {
                DimensionValue.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['metricNames'])) {
            throw new Error("Expected the field `metricNames` to be an array in the JSON data but got " + data['metricNames']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['overlapMetricNames'])) {
            throw new Error("Expected the field `overlapMetricNames` to be an array in the JSON data but got " + data['overlapMetricNames']);
        }

        return true;
    }


}



/**
 * The list of dimensions the report should include.
 * @member {Array.<module:model/SortedDimension>} breakdown
 */
ReportCrossDimensionReachCriteria.prototype['breakdown'] = undefined;

/**
 * @member {module:model/DateRange} dateRange
 */
ReportCrossDimensionReachCriteria.prototype['dateRange'] = undefined;

/**
 * The dimension option.
 * @member {module:model/ReportCrossDimensionReachCriteria.DimensionEnum} dimension
 */
ReportCrossDimensionReachCriteria.prototype['dimension'] = undefined;

/**
 * The list of filters on which dimensions are filtered.
 * @member {Array.<module:model/DimensionValue>} dimensionFilters
 */
ReportCrossDimensionReachCriteria.prototype['dimensionFilters'] = undefined;

/**
 * The list of names of metrics the report should include.
 * @member {Array.<String>} metricNames
 */
ReportCrossDimensionReachCriteria.prototype['metricNames'] = undefined;

/**
 * The list of names of overlap metrics the report should include.
 * @member {Array.<String>} overlapMetricNames
 */
ReportCrossDimensionReachCriteria.prototype['overlapMetricNames'] = undefined;

/**
 * Whether the report is pivoted or not. Defaults to true.
 * @member {Boolean} pivoted
 */
ReportCrossDimensionReachCriteria.prototype['pivoted'] = undefined;





/**
 * Allowed values for the <code>dimension</code> property.
 * @enum {String}
 * @readonly
 */
ReportCrossDimensionReachCriteria['DimensionEnum'] = {

    /**
     * value: "ADVERTISER"
     * @const
     */
    "ADVERTISER": "ADVERTISER",

    /**
     * value: "CAMPAIGN"
     * @const
     */
    "CAMPAIGN": "CAMPAIGN",

    /**
     * value: "SITE_BY_ADVERTISER"
     * @const
     */
    "SITE_BY_ADVERTISER": "SITE_BY_ADVERTISER",

    /**
     * value: "SITE_BY_CAMPAIGN"
     * @const
     */
    "SITE_BY_CAMPAIGN": "SITE_BY_CAMPAIGN"
};



export default ReportCrossDimensionReachCriteria;

