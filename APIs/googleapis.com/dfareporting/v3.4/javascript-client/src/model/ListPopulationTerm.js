/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ListPopulationTerm model module.
 * @module model/ListPopulationTerm
 * @version v3.4
 */
class ListPopulationTerm {
    /**
     * Constructs a new <code>ListPopulationTerm</code>.
     * Remarketing List Population Rule Term.
     * @alias module:model/ListPopulationTerm
     */
    constructor() { 
        
        ListPopulationTerm.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ListPopulationTerm</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListPopulationTerm} obj Optional instance to populate.
     * @return {module:model/ListPopulationTerm} The populated <code>ListPopulationTerm</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListPopulationTerm();

            if (data.hasOwnProperty('contains')) {
                obj['contains'] = ApiClient.convertToType(data['contains'], 'Boolean');
            }
            if (data.hasOwnProperty('negation')) {
                obj['negation'] = ApiClient.convertToType(data['negation'], 'Boolean');
            }
            if (data.hasOwnProperty('operator')) {
                obj['operator'] = ApiClient.convertToType(data['operator'], 'String');
            }
            if (data.hasOwnProperty('remarketingListId')) {
                obj['remarketingListId'] = ApiClient.convertToType(data['remarketingListId'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
            if (data.hasOwnProperty('variableFriendlyName')) {
                obj['variableFriendlyName'] = ApiClient.convertToType(data['variableFriendlyName'], 'String');
            }
            if (data.hasOwnProperty('variableName')) {
                obj['variableName'] = ApiClient.convertToType(data['variableName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ListPopulationTerm</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ListPopulationTerm</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['operator'] && !(typeof data['operator'] === 'string' || data['operator'] instanceof String)) {
            throw new Error("Expected the field `operator` to be a primitive type in the JSON string but got " + data['operator']);
        }
        // ensure the json data is a string
        if (data['remarketingListId'] && !(typeof data['remarketingListId'] === 'string' || data['remarketingListId'] instanceof String)) {
            throw new Error("Expected the field `remarketingListId` to be a primitive type in the JSON string but got " + data['remarketingListId']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }
        // ensure the json data is a string
        if (data['variableFriendlyName'] && !(typeof data['variableFriendlyName'] === 'string' || data['variableFriendlyName'] instanceof String)) {
            throw new Error("Expected the field `variableFriendlyName` to be a primitive type in the JSON string but got " + data['variableFriendlyName']);
        }
        // ensure the json data is a string
        if (data['variableName'] && !(typeof data['variableName'] === 'string' || data['variableName'] instanceof String)) {
            throw new Error("Expected the field `variableName` to be a primitive type in the JSON string but got " + data['variableName']);
        }

        return true;
    }


}



/**
 * Will be true if the term should check if the user is in the list and false if the term should check if the user is not in the list. This field is only relevant when type is set to LIST_MEMBERSHIP_TERM. False by default.
 * @member {Boolean} contains
 */
ListPopulationTerm.prototype['contains'] = undefined;

/**
 * Whether to negate the comparison result of this term during rule evaluation. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM or REFERRER_TERM.
 * @member {Boolean} negation
 */
ListPopulationTerm.prototype['negation'] = undefined;

/**
 * Comparison operator of this term. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM or REFERRER_TERM.
 * @member {module:model/ListPopulationTerm.OperatorEnum} operator
 */
ListPopulationTerm.prototype['operator'] = undefined;

/**
 * ID of the list in question. This field is only relevant when type is set to LIST_MEMBERSHIP_TERM.
 * @member {String} remarketingListId
 */
ListPopulationTerm.prototype['remarketingListId'] = undefined;

/**
 * List population term type determines the applicable fields in this object. If left unset or set to CUSTOM_VARIABLE_TERM, then variableName, variableFriendlyName, operator, value, and negation are applicable. If set to LIST_MEMBERSHIP_TERM then remarketingListId and contains are applicable. If set to REFERRER_TERM then operator, value, and negation are applicable.
 * @member {module:model/ListPopulationTerm.TypeEnum} type
 */
ListPopulationTerm.prototype['type'] = undefined;

/**
 * Literal to compare the variable to. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM or REFERRER_TERM.
 * @member {String} value
 */
ListPopulationTerm.prototype['value'] = undefined;

/**
 * Friendly name of this term's variable. This is a read-only, auto-generated field. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM.
 * @member {String} variableFriendlyName
 */
ListPopulationTerm.prototype['variableFriendlyName'] = undefined;

/**
 * Name of the variable (U1, U2, etc.) being compared in this term. This field is only relevant when type is set to null, CUSTOM_VARIABLE_TERM or REFERRER_TERM.
 * @member {String} variableName
 */
ListPopulationTerm.prototype['variableName'] = undefined;





/**
 * Allowed values for the <code>operator</code> property.
 * @enum {String}
 * @readonly
 */
ListPopulationTerm['OperatorEnum'] = {

    /**
     * value: "NUM_EQUALS"
     * @const
     */
    "NUM_EQUALS": "NUM_EQUALS",

    /**
     * value: "NUM_LESS_THAN"
     * @const
     */
    "NUM_LESS_THAN": "NUM_LESS_THAN",

    /**
     * value: "NUM_LESS_THAN_EQUAL"
     * @const
     */
    "NUM_LESS_THAN_EQUAL": "NUM_LESS_THAN_EQUAL",

    /**
     * value: "NUM_GREATER_THAN"
     * @const
     */
    "NUM_GREATER_THAN": "NUM_GREATER_THAN",

    /**
     * value: "NUM_GREATER_THAN_EQUAL"
     * @const
     */
    "NUM_GREATER_THAN_EQUAL": "NUM_GREATER_THAN_EQUAL",

    /**
     * value: "STRING_EQUALS"
     * @const
     */
    "STRING_EQUALS": "STRING_EQUALS",

    /**
     * value: "STRING_CONTAINS"
     * @const
     */
    "STRING_CONTAINS": "STRING_CONTAINS"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ListPopulationTerm['TypeEnum'] = {

    /**
     * value: "CUSTOM_VARIABLE_TERM"
     * @const
     */
    "CUSTOM_VARIABLE_TERM": "CUSTOM_VARIABLE_TERM",

    /**
     * value: "LIST_MEMBERSHIP_TERM"
     * @const
     */
    "LIST_MEMBERSHIP_TERM": "LIST_MEMBERSHIP_TERM",

    /**
     * value: "REFERRER_TERM"
     * @const
     */
    "REFERRER_TERM": "REFERRER_TERM"
};



export default ListPopulationTerm;

