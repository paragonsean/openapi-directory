/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DimensionValue from './DimensionValue';
import FloodlightActivityDynamicTag from './FloodlightActivityDynamicTag';

/**
 * The FloodlightActivityPublisherDynamicTag model module.
 * @module model/FloodlightActivityPublisherDynamicTag
 * @version v3.4
 */
class FloodlightActivityPublisherDynamicTag {
    /**
     * Constructs a new <code>FloodlightActivityPublisherDynamicTag</code>.
     * Publisher Dynamic Tag
     * @alias module:model/FloodlightActivityPublisherDynamicTag
     */
    constructor() { 
        
        FloodlightActivityPublisherDynamicTag.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FloodlightActivityPublisherDynamicTag</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FloodlightActivityPublisherDynamicTag} obj Optional instance to populate.
     * @return {module:model/FloodlightActivityPublisherDynamicTag} The populated <code>FloodlightActivityPublisherDynamicTag</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FloodlightActivityPublisherDynamicTag();

            if (data.hasOwnProperty('clickThrough')) {
                obj['clickThrough'] = ApiClient.convertToType(data['clickThrough'], 'Boolean');
            }
            if (data.hasOwnProperty('directorySiteId')) {
                obj['directorySiteId'] = ApiClient.convertToType(data['directorySiteId'], 'String');
            }
            if (data.hasOwnProperty('dynamicTag')) {
                obj['dynamicTag'] = FloodlightActivityDynamicTag.constructFromObject(data['dynamicTag']);
            }
            if (data.hasOwnProperty('siteId')) {
                obj['siteId'] = ApiClient.convertToType(data['siteId'], 'String');
            }
            if (data.hasOwnProperty('siteIdDimensionValue')) {
                obj['siteIdDimensionValue'] = DimensionValue.constructFromObject(data['siteIdDimensionValue']);
            }
            if (data.hasOwnProperty('viewThrough')) {
                obj['viewThrough'] = ApiClient.convertToType(data['viewThrough'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FloodlightActivityPublisherDynamicTag</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FloodlightActivityPublisherDynamicTag</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['directorySiteId'] && !(typeof data['directorySiteId'] === 'string' || data['directorySiteId'] instanceof String)) {
            throw new Error("Expected the field `directorySiteId` to be a primitive type in the JSON string but got " + data['directorySiteId']);
        }
        // validate the optional field `dynamicTag`
        if (data['dynamicTag']) { // data not null
          FloodlightActivityDynamicTag.validateJSON(data['dynamicTag']);
        }
        // ensure the json data is a string
        if (data['siteId'] && !(typeof data['siteId'] === 'string' || data['siteId'] instanceof String)) {
            throw new Error("Expected the field `siteId` to be a primitive type in the JSON string but got " + data['siteId']);
        }
        // validate the optional field `siteIdDimensionValue`
        if (data['siteIdDimensionValue']) { // data not null
          DimensionValue.validateJSON(data['siteIdDimensionValue']);
        }

        return true;
    }


}



/**
 * Whether this tag is applicable only for click-throughs.
 * @member {Boolean} clickThrough
 */
FloodlightActivityPublisherDynamicTag.prototype['clickThrough'] = undefined;

/**
 * Directory site ID of this dynamic tag. This is a write-only field that can be used as an alternative to the siteId field. When this resource is retrieved, only the siteId field will be populated.
 * @member {String} directorySiteId
 */
FloodlightActivityPublisherDynamicTag.prototype['directorySiteId'] = undefined;

/**
 * @member {module:model/FloodlightActivityDynamicTag} dynamicTag
 */
FloodlightActivityPublisherDynamicTag.prototype['dynamicTag'] = undefined;

/**
 * Site ID of this dynamic tag.
 * @member {String} siteId
 */
FloodlightActivityPublisherDynamicTag.prototype['siteId'] = undefined;

/**
 * @member {module:model/DimensionValue} siteIdDimensionValue
 */
FloodlightActivityPublisherDynamicTag.prototype['siteIdDimensionValue'] = undefined;

/**
 * Whether this tag is applicable only for view-throughs.
 * @member {Boolean} viewThrough
 */
FloodlightActivityPublisherDynamicTag.prototype['viewThrough'] = undefined;






export default FloodlightActivityPublisherDynamicTag;

