/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChannelGroupingRule from './ChannelGroupingRule';

/**
 * The ChannelGrouping model module.
 * @module model/ChannelGrouping
 * @version v3.4
 */
class ChannelGrouping {
    /**
     * Constructs a new <code>ChannelGrouping</code>.
     * Represents a DfaReporting channel grouping.
     * @alias module:model/ChannelGrouping
     */
    constructor() { 
        
        ChannelGrouping.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ChannelGrouping</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChannelGrouping} obj Optional instance to populate.
     * @return {module:model/ChannelGrouping} The populated <code>ChannelGrouping</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChannelGrouping();

            if (data.hasOwnProperty('fallbackName')) {
                obj['fallbackName'] = ApiClient.convertToType(data['fallbackName'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('rules')) {
                obj['rules'] = ApiClient.convertToType(data['rules'], [ChannelGroupingRule]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChannelGrouping</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChannelGrouping</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['fallbackName'] && !(typeof data['fallbackName'] === 'string' || data['fallbackName'] instanceof String)) {
            throw new Error("Expected the field `fallbackName` to be a primitive type in the JSON string but got " + data['fallbackName']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['rules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rules'])) {
                throw new Error("Expected the field `rules` to be an array in the JSON data but got " + data['rules']);
            }
            // validate the optional field `rules` (array)
            for (const item of data['rules']) {
                ChannelGroupingRule.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * ChannelGrouping fallback name.
 * @member {String} fallbackName
 */
ChannelGrouping.prototype['fallbackName'] = undefined;

/**
 * The kind of resource this is, in this case dfareporting#channelGrouping.
 * @member {String} kind
 */
ChannelGrouping.prototype['kind'] = undefined;

/**
 * ChannelGrouping name.
 * @member {String} name
 */
ChannelGrouping.prototype['name'] = undefined;

/**
 * The rules contained within this channel grouping.
 * @member {Array.<module:model/ChannelGroupingRule>} rules
 */
ChannelGrouping.prototype['rules'] = undefined;






export default ChannelGrouping;

