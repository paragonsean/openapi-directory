/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DimensionValue model module.
 * @module model/DimensionValue
 * @version v3.4
 */
class DimensionValue {
    /**
     * Constructs a new <code>DimensionValue</code>.
     * Represents a DimensionValue resource.
     * @alias module:model/DimensionValue
     */
    constructor() { 
        
        DimensionValue.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DimensionValue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DimensionValue} obj Optional instance to populate.
     * @return {module:model/DimensionValue} The populated <code>DimensionValue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DimensionValue();

            if (data.hasOwnProperty('dimensionName')) {
                obj['dimensionName'] = ApiClient.convertToType(data['dimensionName'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('matchType')) {
                obj['matchType'] = ApiClient.convertToType(data['matchType'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DimensionValue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DimensionValue</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dimensionName'] && !(typeof data['dimensionName'] === 'string' || data['dimensionName'] instanceof String)) {
            throw new Error("Expected the field `dimensionName` to be a primitive type in the JSON string but got " + data['dimensionName']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['matchType'] && !(typeof data['matchType'] === 'string' || data['matchType'] instanceof String)) {
            throw new Error("Expected the field `matchType` to be a primitive type in the JSON string but got " + data['matchType']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}



/**
 * The name of the dimension.
 * @member {String} dimensionName
 */
DimensionValue.prototype['dimensionName'] = undefined;

/**
 * The eTag of this response for caching purposes.
 * @member {String} etag
 */
DimensionValue.prototype['etag'] = undefined;

/**
 * The ID associated with the value if available.
 * @member {String} id
 */
DimensionValue.prototype['id'] = undefined;

/**
 * The kind of resource this is, in this case dfareporting#dimensionValue.
 * @member {String} kind
 */
DimensionValue.prototype['kind'] = undefined;

/**
 * Determines how the 'value' field is matched when filtering. If not specified, defaults to EXACT. If set to WILDCARD_EXPRESSION, '*' is allowed as a placeholder for variable length character sequences, and it can be escaped with a backslash. Note, only paid search dimensions ('dfa:paidSearch*') allow a matchType other than EXACT.
 * @member {module:model/DimensionValue.MatchTypeEnum} matchType
 */
DimensionValue.prototype['matchType'] = undefined;

/**
 * The value of the dimension.
 * @member {String} value
 */
DimensionValue.prototype['value'] = undefined;





/**
 * Allowed values for the <code>matchType</code> property.
 * @enum {String}
 * @readonly
 */
DimensionValue['MatchTypeEnum'] = {

    /**
     * value: "EXACT"
     * @const
     */
    "EXACT": "EXACT",

    /**
     * value: "BEGINS_WITH"
     * @const
     */
    "BEGINS_WITH": "BEGINS_WITH",

    /**
     * value: "CONTAINS"
     * @const
     */
    "CONTAINS": "CONTAINS",

    /**
     * value: "WILDCARD_EXPRESSION"
     * @const
     */
    "WILDCARD_EXPRESSION": "WILDCARD_EXPRESSION"
};



export default DimensionValue;

