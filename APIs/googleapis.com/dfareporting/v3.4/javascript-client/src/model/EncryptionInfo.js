/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EncryptionInfo model module.
 * @module model/EncryptionInfo
 * @version v3.4
 */
class EncryptionInfo {
    /**
     * Constructs a new <code>EncryptionInfo</code>.
     * A description of how user IDs are encrypted.
     * @alias module:model/EncryptionInfo
     */
    constructor() { 
        
        EncryptionInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EncryptionInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EncryptionInfo} obj Optional instance to populate.
     * @return {module:model/EncryptionInfo} The populated <code>EncryptionInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EncryptionInfo();

            if (data.hasOwnProperty('encryptionEntityId')) {
                obj['encryptionEntityId'] = ApiClient.convertToType(data['encryptionEntityId'], 'String');
            }
            if (data.hasOwnProperty('encryptionEntityType')) {
                obj['encryptionEntityType'] = ApiClient.convertToType(data['encryptionEntityType'], 'String');
            }
            if (data.hasOwnProperty('encryptionSource')) {
                obj['encryptionSource'] = ApiClient.convertToType(data['encryptionSource'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EncryptionInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EncryptionInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['encryptionEntityId'] && !(typeof data['encryptionEntityId'] === 'string' || data['encryptionEntityId'] instanceof String)) {
            throw new Error("Expected the field `encryptionEntityId` to be a primitive type in the JSON string but got " + data['encryptionEntityId']);
        }
        // ensure the json data is a string
        if (data['encryptionEntityType'] && !(typeof data['encryptionEntityType'] === 'string' || data['encryptionEntityType'] instanceof String)) {
            throw new Error("Expected the field `encryptionEntityType` to be a primitive type in the JSON string but got " + data['encryptionEntityType']);
        }
        // ensure the json data is a string
        if (data['encryptionSource'] && !(typeof data['encryptionSource'] === 'string' || data['encryptionSource'] instanceof String)) {
            throw new Error("Expected the field `encryptionSource` to be a primitive type in the JSON string but got " + data['encryptionSource']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }

        return true;
    }


}



/**
 * The encryption entity ID. This should match the encryption configuration for ad serving or Data Transfer.
 * @member {String} encryptionEntityId
 */
EncryptionInfo.prototype['encryptionEntityId'] = undefined;

/**
 * The encryption entity type. This should match the encryption configuration for ad serving or Data Transfer.
 * @member {module:model/EncryptionInfo.EncryptionEntityTypeEnum} encryptionEntityType
 */
EncryptionInfo.prototype['encryptionEntityType'] = undefined;

/**
 * Describes whether the encrypted cookie was received from ad serving (the %m macro) or from Data Transfer.
 * @member {module:model/EncryptionInfo.EncryptionSourceEnum} encryptionSource
 */
EncryptionInfo.prototype['encryptionSource'] = undefined;

/**
 * Identifies what kind of resource this is. Value: the fixed string \"dfareporting#encryptionInfo\".
 * @member {String} kind
 */
EncryptionInfo.prototype['kind'] = undefined;





/**
 * Allowed values for the <code>encryptionEntityType</code> property.
 * @enum {String}
 * @readonly
 */
EncryptionInfo['EncryptionEntityTypeEnum'] = {

    /**
     * value: "ENCRYPTION_ENTITY_TYPE_UNKNOWN"
     * @const
     */
    "ENCRYPTION_ENTITY_TYPE_UNKNOWN": "ENCRYPTION_ENTITY_TYPE_UNKNOWN",

    /**
     * value: "DCM_ACCOUNT"
     * @const
     */
    "DCM_ACCOUNT": "DCM_ACCOUNT",

    /**
     * value: "DCM_ADVERTISER"
     * @const
     */
    "DCM_ADVERTISER": "DCM_ADVERTISER",

    /**
     * value: "DBM_PARTNER"
     * @const
     */
    "DBM_PARTNER": "DBM_PARTNER",

    /**
     * value: "DBM_ADVERTISER"
     * @const
     */
    "DBM_ADVERTISER": "DBM_ADVERTISER",

    /**
     * value: "ADWORDS_CUSTOMER"
     * @const
     */
    "ADWORDS_CUSTOMER": "ADWORDS_CUSTOMER",

    /**
     * value: "DFP_NETWORK_CODE"
     * @const
     */
    "DFP_NETWORK_CODE": "DFP_NETWORK_CODE"
};


/**
 * Allowed values for the <code>encryptionSource</code> property.
 * @enum {String}
 * @readonly
 */
EncryptionInfo['EncryptionSourceEnum'] = {

    /**
     * value: "ENCRYPTION_SCOPE_UNKNOWN"
     * @const
     */
    "ENCRYPTION_SCOPE_UNKNOWN": "ENCRYPTION_SCOPE_UNKNOWN",

    /**
     * value: "AD_SERVING"
     * @const
     */
    "AD_SERVING": "AD_SERVING",

    /**
     * value: "DATA_TRANSFER"
     * @const
     */
    "DATA_TRANSFER": "DATA_TRANSFER"
};



export default EncryptionInfo;

