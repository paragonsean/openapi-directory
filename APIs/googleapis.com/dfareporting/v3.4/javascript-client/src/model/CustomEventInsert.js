/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CampaignManagerIds from './CampaignManagerIds';
import DV3Ids from './DV3Ids';

/**
 * The CustomEventInsert model module.
 * @module model/CustomEventInsert
 * @version v3.4
 */
class CustomEventInsert {
    /**
     * Constructs a new <code>CustomEventInsert</code>.
     * Custom event to be inserted.
     * @alias module:model/CustomEventInsert
     */
    constructor() { 
        
        CustomEventInsert.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CustomEventInsert</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomEventInsert} obj Optional instance to populate.
     * @return {module:model/CustomEventInsert} The populated <code>CustomEventInsert</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomEventInsert();

            if (data.hasOwnProperty('cmDimensions')) {
                obj['cmDimensions'] = CampaignManagerIds.constructFromObject(data['cmDimensions']);
            }
            if (data.hasOwnProperty('dv3Dimensions')) {
                obj['dv3Dimensions'] = DV3Ids.constructFromObject(data['dv3Dimensions']);
            }
            if (data.hasOwnProperty('insertEventType')) {
                obj['insertEventType'] = ApiClient.convertToType(data['insertEventType'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('matchId')) {
                obj['matchId'] = ApiClient.convertToType(data['matchId'], 'String');
            }
            if (data.hasOwnProperty('mobileDeviceId')) {
                obj['mobileDeviceId'] = ApiClient.convertToType(data['mobileDeviceId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomEventInsert</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomEventInsert</code>.
     */
    static validateJSON(data) {
        // validate the optional field `cmDimensions`
        if (data['cmDimensions']) { // data not null
          CampaignManagerIds.validateJSON(data['cmDimensions']);
        }
        // validate the optional field `dv3Dimensions`
        if (data['dv3Dimensions']) { // data not null
          DV3Ids.validateJSON(data['dv3Dimensions']);
        }
        // ensure the json data is a string
        if (data['insertEventType'] && !(typeof data['insertEventType'] === 'string' || data['insertEventType'] instanceof String)) {
            throw new Error("Expected the field `insertEventType` to be a primitive type in the JSON string but got " + data['insertEventType']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['matchId'] && !(typeof data['matchId'] === 'string' || data['matchId'] instanceof String)) {
            throw new Error("Expected the field `matchId` to be a primitive type in the JSON string but got " + data['matchId']);
        }
        // ensure the json data is a string
        if (data['mobileDeviceId'] && !(typeof data['mobileDeviceId'] === 'string' || data['mobileDeviceId'] instanceof String)) {
            throw new Error("Expected the field `mobileDeviceId` to be a primitive type in the JSON string but got " + data['mobileDeviceId']);
        }

        return true;
    }


}



/**
 * @member {module:model/CampaignManagerIds} cmDimensions
 */
CustomEventInsert.prototype['cmDimensions'] = undefined;

/**
 * @member {module:model/DV3Ids} dv3Dimensions
 */
CustomEventInsert.prototype['dv3Dimensions'] = undefined;

/**
 * The type of event to insert.
 * @member {module:model/CustomEventInsert.InsertEventTypeEnum} insertEventType
 */
CustomEventInsert.prototype['insertEventType'] = undefined;

/**
 * Identifies what kind of resource this is. Value: the fixed string \"dfareporting#customEventInsert\".
 * @member {String} kind
 */
CustomEventInsert.prototype['kind'] = undefined;

/**
 * The match ID field. A match ID is your own first-party identifier that has been synced with Google using the match ID feature in Floodlight. This field is mutually exclusive with mobileDeviceId, and at least one of the two fields is required.
 * @member {String} matchId
 */
CustomEventInsert.prototype['matchId'] = undefined;

/**
 * The mobile device ID. This field is mutually exclusive with matchId, and at least one of the two fields is required.
 * @member {String} mobileDeviceId
 */
CustomEventInsert.prototype['mobileDeviceId'] = undefined;





/**
 * Allowed values for the <code>insertEventType</code> property.
 * @enum {String}
 * @readonly
 */
CustomEventInsert['InsertEventTypeEnum'] = {

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN",

    /**
     * value: "IMPRESSION"
     * @const
     */
    "IMPRESSION": "IMPRESSION",

    /**
     * value: "CLICK"
     * @const
     */
    "CLICK": "CLICK"
};



export default CustomEventInsert;

