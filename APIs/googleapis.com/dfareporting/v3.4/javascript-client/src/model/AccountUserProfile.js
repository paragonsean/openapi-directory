/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ObjectFilter from './ObjectFilter';

/**
 * The AccountUserProfile model module.
 * @module model/AccountUserProfile
 * @version v3.4
 */
class AccountUserProfile {
    /**
     * Constructs a new <code>AccountUserProfile</code>.
     * AccountUserProfiles contains properties of a Campaign Manager user profile. This resource is specifically for managing user profiles, whereas UserProfiles is for accessing the API.
     * @alias module:model/AccountUserProfile
     */
    constructor() { 
        
        AccountUserProfile.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AccountUserProfile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountUserProfile} obj Optional instance to populate.
     * @return {module:model/AccountUserProfile} The populated <code>AccountUserProfile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountUserProfile();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('advertiserFilter')) {
                obj['advertiserFilter'] = ObjectFilter.constructFromObject(data['advertiserFilter']);
            }
            if (data.hasOwnProperty('campaignFilter')) {
                obj['campaignFilter'] = ObjectFilter.constructFromObject(data['campaignFilter']);
            }
            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('locale')) {
                obj['locale'] = ApiClient.convertToType(data['locale'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('siteFilter')) {
                obj['siteFilter'] = ObjectFilter.constructFromObject(data['siteFilter']);
            }
            if (data.hasOwnProperty('subaccountId')) {
                obj['subaccountId'] = ApiClient.convertToType(data['subaccountId'], 'String');
            }
            if (data.hasOwnProperty('traffickerType')) {
                obj['traffickerType'] = ApiClient.convertToType(data['traffickerType'], 'String');
            }
            if (data.hasOwnProperty('userAccessType')) {
                obj['userAccessType'] = ApiClient.convertToType(data['userAccessType'], 'String');
            }
            if (data.hasOwnProperty('userRoleFilter')) {
                obj['userRoleFilter'] = ObjectFilter.constructFromObject(data['userRoleFilter']);
            }
            if (data.hasOwnProperty('userRoleId')) {
                obj['userRoleId'] = ApiClient.convertToType(data['userRoleId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccountUserProfile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccountUserProfile</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        // validate the optional field `advertiserFilter`
        if (data['advertiserFilter']) { // data not null
          ObjectFilter.validateJSON(data['advertiserFilter']);
        }
        // validate the optional field `campaignFilter`
        if (data['campaignFilter']) { // data not null
          ObjectFilter.validateJSON(data['campaignFilter']);
        }
        // ensure the json data is a string
        if (data['comments'] && !(typeof data['comments'] === 'string' || data['comments'] instanceof String)) {
            throw new Error("Expected the field `comments` to be a primitive type in the JSON string but got " + data['comments']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['locale'] && !(typeof data['locale'] === 'string' || data['locale'] instanceof String)) {
            throw new Error("Expected the field `locale` to be a primitive type in the JSON string but got " + data['locale']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `siteFilter`
        if (data['siteFilter']) { // data not null
          ObjectFilter.validateJSON(data['siteFilter']);
        }
        // ensure the json data is a string
        if (data['subaccountId'] && !(typeof data['subaccountId'] === 'string' || data['subaccountId'] instanceof String)) {
            throw new Error("Expected the field `subaccountId` to be a primitive type in the JSON string but got " + data['subaccountId']);
        }
        // ensure the json data is a string
        if (data['traffickerType'] && !(typeof data['traffickerType'] === 'string' || data['traffickerType'] instanceof String)) {
            throw new Error("Expected the field `traffickerType` to be a primitive type in the JSON string but got " + data['traffickerType']);
        }
        // ensure the json data is a string
        if (data['userAccessType'] && !(typeof data['userAccessType'] === 'string' || data['userAccessType'] instanceof String)) {
            throw new Error("Expected the field `userAccessType` to be a primitive type in the JSON string but got " + data['userAccessType']);
        }
        // validate the optional field `userRoleFilter`
        if (data['userRoleFilter']) { // data not null
          ObjectFilter.validateJSON(data['userRoleFilter']);
        }
        // ensure the json data is a string
        if (data['userRoleId'] && !(typeof data['userRoleId'] === 'string' || data['userRoleId'] instanceof String)) {
            throw new Error("Expected the field `userRoleId` to be a primitive type in the JSON string but got " + data['userRoleId']);
        }

        return true;
    }


}



/**
 * Account ID of the user profile. This is a read-only field that can be left blank.
 * @member {String} accountId
 */
AccountUserProfile.prototype['accountId'] = undefined;

/**
 * Whether this user profile is active. This defaults to false, and must be set true on insert for the user profile to be usable.
 * @member {Boolean} active
 */
AccountUserProfile.prototype['active'] = undefined;

/**
 * @member {module:model/ObjectFilter} advertiserFilter
 */
AccountUserProfile.prototype['advertiserFilter'] = undefined;

/**
 * @member {module:model/ObjectFilter} campaignFilter
 */
AccountUserProfile.prototype['campaignFilter'] = undefined;

/**
 * Comments for this user profile.
 * @member {String} comments
 */
AccountUserProfile.prototype['comments'] = undefined;

/**
 * Email of the user profile. The email addresss must be linked to a Google Account. This field is required on insertion and is read-only after insertion.
 * @member {String} email
 */
AccountUserProfile.prototype['email'] = undefined;

/**
 * ID of the user profile. This is a read-only, auto-generated field.
 * @member {String} id
 */
AccountUserProfile.prototype['id'] = undefined;

/**
 * Identifies what kind of resource this is. Value: the fixed string \"dfareporting#accountUserProfile\".
 * @member {String} kind
 */
AccountUserProfile.prototype['kind'] = undefined;

/**
 * Locale of the user profile. This is a required field. Acceptable values are: - \"cs\" (Czech) - \"de\" (German) - \"en\" (English) - \"en-GB\" (English United Kingdom) - \"es\" (Spanish) - \"fr\" (French) - \"it\" (Italian) - \"ja\" (Japanese) - \"ko\" (Korean) - \"pl\" (Polish) - \"pt-BR\" (Portuguese Brazil) - \"ru\" (Russian) - \"sv\" (Swedish) - \"tr\" (Turkish) - \"zh-CN\" (Chinese Simplified) - \"zh-TW\" (Chinese Traditional) 
 * @member {String} locale
 */
AccountUserProfile.prototype['locale'] = undefined;

/**
 * Name of the user profile. This is a required field. Must be less than 64 characters long, must be globally unique, and cannot contain whitespace or any of the following characters: \"&;<>\"#%,\".
 * @member {String} name
 */
AccountUserProfile.prototype['name'] = undefined;

/**
 * @member {module:model/ObjectFilter} siteFilter
 */
AccountUserProfile.prototype['siteFilter'] = undefined;

/**
 * Subaccount ID of the user profile. This is a read-only field that can be left blank.
 * @member {String} subaccountId
 */
AccountUserProfile.prototype['subaccountId'] = undefined;

/**
 * Trafficker type of this user profile. This is a read-only field.
 * @member {module:model/AccountUserProfile.TraffickerTypeEnum} traffickerType
 */
AccountUserProfile.prototype['traffickerType'] = undefined;

/**
 * User type of the user profile. This is a read-only field that can be left blank.
 * @member {module:model/AccountUserProfile.UserAccessTypeEnum} userAccessType
 */
AccountUserProfile.prototype['userAccessType'] = undefined;

/**
 * @member {module:model/ObjectFilter} userRoleFilter
 */
AccountUserProfile.prototype['userRoleFilter'] = undefined;

/**
 * User role ID of the user profile. This is a required field.
 * @member {String} userRoleId
 */
AccountUserProfile.prototype['userRoleId'] = undefined;





/**
 * Allowed values for the <code>traffickerType</code> property.
 * @enum {String}
 * @readonly
 */
AccountUserProfile['TraffickerTypeEnum'] = {

    /**
     * value: "INTERNAL_NON_TRAFFICKER"
     * @const
     */
    "INTERNAL_NON_TRAFFICKER": "INTERNAL_NON_TRAFFICKER",

    /**
     * value: "INTERNAL_TRAFFICKER"
     * @const
     */
    "INTERNAL_TRAFFICKER": "INTERNAL_TRAFFICKER",

    /**
     * value: "EXTERNAL_TRAFFICKER"
     * @const
     */
    "EXTERNAL_TRAFFICKER": "EXTERNAL_TRAFFICKER"
};


/**
 * Allowed values for the <code>userAccessType</code> property.
 * @enum {String}
 * @readonly
 */
AccountUserProfile['UserAccessTypeEnum'] = {

    /**
     * value: "NORMAL_USER"
     * @const
     */
    "NORMAL_USER": "NORMAL_USER",

    /**
     * value: "SUPER_USER"
     * @const
     */
    "SUPER_USER": "SUPER_USER",

    /**
     * value: "INTERNAL_ADMINISTRATOR"
     * @const
     */
    "INTERNAL_ADMINISTRATOR": "INTERNAL_ADMINISTRATOR",

    /**
     * value: "READ_ONLY_SUPER_USER"
     * @const
     */
    "READ_ONLY_SUPER_USER": "READ_ONLY_SUPER_USER"
};



export default AccountUserProfile;

