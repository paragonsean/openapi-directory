/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreativeAssetId from './CreativeAssetId';
import CreativeCustomEvent from './CreativeCustomEvent';
import DimensionValue from './DimensionValue';
import OffsetPosition from './OffsetPosition';
import Size from './Size';

/**
 * The CreativeAsset model module.
 * @module model/CreativeAsset
 * @version v3.4
 */
class CreativeAsset {
    /**
     * Constructs a new <code>CreativeAsset</code>.
     * Creative Asset.
     * @alias module:model/CreativeAsset
     */
    constructor() { 
        
        CreativeAsset.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CreativeAsset</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreativeAsset} obj Optional instance to populate.
     * @return {module:model/CreativeAsset} The populated <code>CreativeAsset</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreativeAsset();

            if (data.hasOwnProperty('actionScript3')) {
                obj['actionScript3'] = ApiClient.convertToType(data['actionScript3'], 'Boolean');
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('additionalSizes')) {
                obj['additionalSizes'] = ApiClient.convertToType(data['additionalSizes'], [Size]);
            }
            if (data.hasOwnProperty('alignment')) {
                obj['alignment'] = ApiClient.convertToType(data['alignment'], 'String');
            }
            if (data.hasOwnProperty('artworkType')) {
                obj['artworkType'] = ApiClient.convertToType(data['artworkType'], 'String');
            }
            if (data.hasOwnProperty('assetIdentifier')) {
                obj['assetIdentifier'] = CreativeAssetId.constructFromObject(data['assetIdentifier']);
            }
            if (data.hasOwnProperty('audioBitRate')) {
                obj['audioBitRate'] = ApiClient.convertToType(data['audioBitRate'], 'Number');
            }
            if (data.hasOwnProperty('audioSampleRate')) {
                obj['audioSampleRate'] = ApiClient.convertToType(data['audioSampleRate'], 'Number');
            }
            if (data.hasOwnProperty('backupImageExit')) {
                obj['backupImageExit'] = CreativeCustomEvent.constructFromObject(data['backupImageExit']);
            }
            if (data.hasOwnProperty('bitRate')) {
                obj['bitRate'] = ApiClient.convertToType(data['bitRate'], 'Number');
            }
            if (data.hasOwnProperty('childAssetType')) {
                obj['childAssetType'] = ApiClient.convertToType(data['childAssetType'], 'String');
            }
            if (data.hasOwnProperty('collapsedSize')) {
                obj['collapsedSize'] = Size.constructFromObject(data['collapsedSize']);
            }
            if (data.hasOwnProperty('companionCreativeIds')) {
                obj['companionCreativeIds'] = ApiClient.convertToType(data['companionCreativeIds'], ['String']);
            }
            if (data.hasOwnProperty('customStartTimeValue')) {
                obj['customStartTimeValue'] = ApiClient.convertToType(data['customStartTimeValue'], 'Number');
            }
            if (data.hasOwnProperty('detectedFeatures')) {
                obj['detectedFeatures'] = ApiClient.convertToType(data['detectedFeatures'], ['String']);
            }
            if (data.hasOwnProperty('displayType')) {
                obj['displayType'] = ApiClient.convertToType(data['displayType'], 'String');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('durationType')) {
                obj['durationType'] = ApiClient.convertToType(data['durationType'], 'String');
            }
            if (data.hasOwnProperty('expandedDimension')) {
                obj['expandedDimension'] = Size.constructFromObject(data['expandedDimension']);
            }
            if (data.hasOwnProperty('fileSize')) {
                obj['fileSize'] = ApiClient.convertToType(data['fileSize'], 'String');
            }
            if (data.hasOwnProperty('flashVersion')) {
                obj['flashVersion'] = ApiClient.convertToType(data['flashVersion'], 'Number');
            }
            if (data.hasOwnProperty('frameRate')) {
                obj['frameRate'] = ApiClient.convertToType(data['frameRate'], 'Number');
            }
            if (data.hasOwnProperty('hideFlashObjects')) {
                obj['hideFlashObjects'] = ApiClient.convertToType(data['hideFlashObjects'], 'Boolean');
            }
            if (data.hasOwnProperty('hideSelectionBoxes')) {
                obj['hideSelectionBoxes'] = ApiClient.convertToType(data['hideSelectionBoxes'], 'Boolean');
            }
            if (data.hasOwnProperty('horizontallyLocked')) {
                obj['horizontallyLocked'] = ApiClient.convertToType(data['horizontallyLocked'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('idDimensionValue')) {
                obj['idDimensionValue'] = DimensionValue.constructFromObject(data['idDimensionValue']);
            }
            if (data.hasOwnProperty('mediaDuration')) {
                obj['mediaDuration'] = ApiClient.convertToType(data['mediaDuration'], 'Number');
            }
            if (data.hasOwnProperty('mimeType')) {
                obj['mimeType'] = ApiClient.convertToType(data['mimeType'], 'String');
            }
            if (data.hasOwnProperty('offset')) {
                obj['offset'] = OffsetPosition.constructFromObject(data['offset']);
            }
            if (data.hasOwnProperty('orientation')) {
                obj['orientation'] = ApiClient.convertToType(data['orientation'], 'String');
            }
            if (data.hasOwnProperty('originalBackup')) {
                obj['originalBackup'] = ApiClient.convertToType(data['originalBackup'], 'Boolean');
            }
            if (data.hasOwnProperty('politeLoad')) {
                obj['politeLoad'] = ApiClient.convertToType(data['politeLoad'], 'Boolean');
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = OffsetPosition.constructFromObject(data['position']);
            }
            if (data.hasOwnProperty('positionLeftUnit')) {
                obj['positionLeftUnit'] = ApiClient.convertToType(data['positionLeftUnit'], 'String');
            }
            if (data.hasOwnProperty('positionTopUnit')) {
                obj['positionTopUnit'] = ApiClient.convertToType(data['positionTopUnit'], 'String');
            }
            if (data.hasOwnProperty('progressiveServingUrl')) {
                obj['progressiveServingUrl'] = ApiClient.convertToType(data['progressiveServingUrl'], 'String');
            }
            if (data.hasOwnProperty('pushdown')) {
                obj['pushdown'] = ApiClient.convertToType(data['pushdown'], 'Boolean');
            }
            if (data.hasOwnProperty('pushdownDuration')) {
                obj['pushdownDuration'] = ApiClient.convertToType(data['pushdownDuration'], 'Number');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = Size.constructFromObject(data['size']);
            }
            if (data.hasOwnProperty('sslCompliant')) {
                obj['sslCompliant'] = ApiClient.convertToType(data['sslCompliant'], 'Boolean');
            }
            if (data.hasOwnProperty('startTimeType')) {
                obj['startTimeType'] = ApiClient.convertToType(data['startTimeType'], 'String');
            }
            if (data.hasOwnProperty('streamingServingUrl')) {
                obj['streamingServingUrl'] = ApiClient.convertToType(data['streamingServingUrl'], 'String');
            }
            if (data.hasOwnProperty('transparency')) {
                obj['transparency'] = ApiClient.convertToType(data['transparency'], 'Boolean');
            }
            if (data.hasOwnProperty('verticallyLocked')) {
                obj['verticallyLocked'] = ApiClient.convertToType(data['verticallyLocked'], 'Boolean');
            }
            if (data.hasOwnProperty('windowMode')) {
                obj['windowMode'] = ApiClient.convertToType(data['windowMode'], 'String');
            }
            if (data.hasOwnProperty('zIndex')) {
                obj['zIndex'] = ApiClient.convertToType(data['zIndex'], 'Number');
            }
            if (data.hasOwnProperty('zipFilename')) {
                obj['zipFilename'] = ApiClient.convertToType(data['zipFilename'], 'String');
            }
            if (data.hasOwnProperty('zipFilesize')) {
                obj['zipFilesize'] = ApiClient.convertToType(data['zipFilesize'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreativeAsset</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreativeAsset</code>.
     */
    static validateJSON(data) {
        if (data['additionalSizes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additionalSizes'])) {
                throw new Error("Expected the field `additionalSizes` to be an array in the JSON data but got " + data['additionalSizes']);
            }
            // validate the optional field `additionalSizes` (array)
            for (const item of data['additionalSizes']) {
                Size.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['alignment'] && !(typeof data['alignment'] === 'string' || data['alignment'] instanceof String)) {
            throw new Error("Expected the field `alignment` to be a primitive type in the JSON string but got " + data['alignment']);
        }
        // ensure the json data is a string
        if (data['artworkType'] && !(typeof data['artworkType'] === 'string' || data['artworkType'] instanceof String)) {
            throw new Error("Expected the field `artworkType` to be a primitive type in the JSON string but got " + data['artworkType']);
        }
        // validate the optional field `assetIdentifier`
        if (data['assetIdentifier']) { // data not null
          CreativeAssetId.validateJSON(data['assetIdentifier']);
        }
        // validate the optional field `backupImageExit`
        if (data['backupImageExit']) { // data not null
          CreativeCustomEvent.validateJSON(data['backupImageExit']);
        }
        // ensure the json data is a string
        if (data['childAssetType'] && !(typeof data['childAssetType'] === 'string' || data['childAssetType'] instanceof String)) {
            throw new Error("Expected the field `childAssetType` to be a primitive type in the JSON string but got " + data['childAssetType']);
        }
        // validate the optional field `collapsedSize`
        if (data['collapsedSize']) { // data not null
          Size.validateJSON(data['collapsedSize']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['companionCreativeIds'])) {
            throw new Error("Expected the field `companionCreativeIds` to be an array in the JSON data but got " + data['companionCreativeIds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['detectedFeatures'])) {
            throw new Error("Expected the field `detectedFeatures` to be an array in the JSON data but got " + data['detectedFeatures']);
        }
        // ensure the json data is a string
        if (data['displayType'] && !(typeof data['displayType'] === 'string' || data['displayType'] instanceof String)) {
            throw new Error("Expected the field `displayType` to be a primitive type in the JSON string but got " + data['displayType']);
        }
        // ensure the json data is a string
        if (data['durationType'] && !(typeof data['durationType'] === 'string' || data['durationType'] instanceof String)) {
            throw new Error("Expected the field `durationType` to be a primitive type in the JSON string but got " + data['durationType']);
        }
        // validate the optional field `expandedDimension`
        if (data['expandedDimension']) { // data not null
          Size.validateJSON(data['expandedDimension']);
        }
        // ensure the json data is a string
        if (data['fileSize'] && !(typeof data['fileSize'] === 'string' || data['fileSize'] instanceof String)) {
            throw new Error("Expected the field `fileSize` to be a primitive type in the JSON string but got " + data['fileSize']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `idDimensionValue`
        if (data['idDimensionValue']) { // data not null
          DimensionValue.validateJSON(data['idDimensionValue']);
        }
        // ensure the json data is a string
        if (data['mimeType'] && !(typeof data['mimeType'] === 'string' || data['mimeType'] instanceof String)) {
            throw new Error("Expected the field `mimeType` to be a primitive type in the JSON string but got " + data['mimeType']);
        }
        // validate the optional field `offset`
        if (data['offset']) { // data not null
          OffsetPosition.validateJSON(data['offset']);
        }
        // ensure the json data is a string
        if (data['orientation'] && !(typeof data['orientation'] === 'string' || data['orientation'] instanceof String)) {
            throw new Error("Expected the field `orientation` to be a primitive type in the JSON string but got " + data['orientation']);
        }
        // validate the optional field `position`
        if (data['position']) { // data not null
          OffsetPosition.validateJSON(data['position']);
        }
        // ensure the json data is a string
        if (data['positionLeftUnit'] && !(typeof data['positionLeftUnit'] === 'string' || data['positionLeftUnit'] instanceof String)) {
            throw new Error("Expected the field `positionLeftUnit` to be a primitive type in the JSON string but got " + data['positionLeftUnit']);
        }
        // ensure the json data is a string
        if (data['positionTopUnit'] && !(typeof data['positionTopUnit'] === 'string' || data['positionTopUnit'] instanceof String)) {
            throw new Error("Expected the field `positionTopUnit` to be a primitive type in the JSON string but got " + data['positionTopUnit']);
        }
        // ensure the json data is a string
        if (data['progressiveServingUrl'] && !(typeof data['progressiveServingUrl'] === 'string' || data['progressiveServingUrl'] instanceof String)) {
            throw new Error("Expected the field `progressiveServingUrl` to be a primitive type in the JSON string but got " + data['progressiveServingUrl']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }
        // validate the optional field `size`
        if (data['size']) { // data not null
          Size.validateJSON(data['size']);
        }
        // ensure the json data is a string
        if (data['startTimeType'] && !(typeof data['startTimeType'] === 'string' || data['startTimeType'] instanceof String)) {
            throw new Error("Expected the field `startTimeType` to be a primitive type in the JSON string but got " + data['startTimeType']);
        }
        // ensure the json data is a string
        if (data['streamingServingUrl'] && !(typeof data['streamingServingUrl'] === 'string' || data['streamingServingUrl'] instanceof String)) {
            throw new Error("Expected the field `streamingServingUrl` to be a primitive type in the JSON string but got " + data['streamingServingUrl']);
        }
        // ensure the json data is a string
        if (data['windowMode'] && !(typeof data['windowMode'] === 'string' || data['windowMode'] instanceof String)) {
            throw new Error("Expected the field `windowMode` to be a primitive type in the JSON string but got " + data['windowMode']);
        }
        // ensure the json data is a string
        if (data['zipFilename'] && !(typeof data['zipFilename'] === 'string' || data['zipFilename'] instanceof String)) {
            throw new Error("Expected the field `zipFilename` to be a primitive type in the JSON string but got " + data['zipFilename']);
        }
        // ensure the json data is a string
        if (data['zipFilesize'] && !(typeof data['zipFilesize'] === 'string' || data['zipFilesize'] instanceof String)) {
            throw new Error("Expected the field `zipFilesize` to be a primitive type in the JSON string but got " + data['zipFilesize']);
        }

        return true;
    }


}



/**
 * Whether ActionScript3 is enabled for the flash asset. This is a read-only field. Applicable to the following creative type: FLASH_INPAGE. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.
 * @member {Boolean} actionScript3
 */
CreativeAsset.prototype['actionScript3'] = undefined;

/**
 * Whether the video or audio asset is active. This is a read-only field for VPAID_NON_LINEAR_VIDEO assets. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID.
 * @member {Boolean} active
 */
CreativeAsset.prototype['active'] = undefined;

/**
 * Additional sizes associated with this creative asset. HTML5 asset generated by compatible software such as GWD will be able to support more sizes this creative asset can render.
 * @member {Array.<module:model/Size>} additionalSizes
 */
CreativeAsset.prototype['additionalSizes'] = undefined;

/**
 * Possible alignments for an asset. This is a read-only field. Applicable to the following creative types: RICH_MEDIA_DISPLAY_MULTI_FLOATING_INTERSTITIAL .
 * @member {module:model/CreativeAsset.AlignmentEnum} alignment
 */
CreativeAsset.prototype['alignment'] = undefined;

/**
 * Artwork type of rich media creative. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.
 * @member {module:model/CreativeAsset.ArtworkTypeEnum} artworkType
 */
CreativeAsset.prototype['artworkType'] = undefined;

/**
 * @member {module:model/CreativeAssetId} assetIdentifier
 */
CreativeAsset.prototype['assetIdentifier'] = undefined;

/**
 * Audio stream bit rate in kbps. This is a read-only field. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID.
 * @member {Number} audioBitRate
 */
CreativeAsset.prototype['audioBitRate'] = undefined;

/**
 * Audio sample bit rate in hertz. This is a read-only field. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID.
 * @member {Number} audioSampleRate
 */
CreativeAsset.prototype['audioSampleRate'] = undefined;

/**
 * @member {module:model/CreativeCustomEvent} backupImageExit
 */
CreativeAsset.prototype['backupImageExit'] = undefined;

/**
 * Detected bit-rate for audio or video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID.
 * @member {Number} bitRate
 */
CreativeAsset.prototype['bitRate'] = undefined;

/**
 * Rich media child asset type. This is a read-only field. Applicable to the following creative types: all VPAID.
 * @member {module:model/CreativeAsset.ChildAssetTypeEnum} childAssetType
 */
CreativeAsset.prototype['childAssetType'] = undefined;

/**
 * @member {module:model/Size} collapsedSize
 */
CreativeAsset.prototype['collapsedSize'] = undefined;

/**
 * List of companion creatives assigned to an in-stream video creative asset. Acceptable values include IDs of existing flash and image creatives. Applicable to INSTREAM_VIDEO creative type with dynamicAssetSelection set to true.
 * @member {Array.<String>} companionCreativeIds
 */
CreativeAsset.prototype['companionCreativeIds'] = undefined;

/**
 * Custom start time in seconds for making the asset visible. Applicable to the following creative types: all RICH_MEDIA. Value must be greater than or equal to 0.
 * @member {Number} customStartTimeValue
 */
CreativeAsset.prototype['customStartTimeValue'] = undefined;

/**
 * List of feature dependencies for the creative asset that are detected by Campaign Manager. Feature dependencies are features that a browser must be able to support in order to render your HTML5 creative correctly. This is a read-only, auto-generated field. Applicable to the following creative types: HTML5_BANNER. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.
 * @member {Array.<module:model/CreativeAsset.DetectedFeaturesEnum>} detectedFeatures
 */
CreativeAsset.prototype['detectedFeatures'] = undefined;

/**
 * Type of rich media asset. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.
 * @member {module:model/CreativeAsset.DisplayTypeEnum} displayType
 */
CreativeAsset.prototype['displayType'] = undefined;

/**
 * Duration in seconds for which an asset will be displayed. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and VPAID_LINEAR_VIDEO. Value must be greater than or equal to 1.
 * @member {Number} duration
 */
CreativeAsset.prototype['duration'] = undefined;

/**
 * Duration type for which an asset will be displayed. Applicable to the following creative types: all RICH_MEDIA.
 * @member {module:model/CreativeAsset.DurationTypeEnum} durationType
 */
CreativeAsset.prototype['durationType'] = undefined;

/**
 * @member {module:model/Size} expandedDimension
 */
CreativeAsset.prototype['expandedDimension'] = undefined;

/**
 * File size associated with this creative asset. This is a read-only field. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT.
 * @member {String} fileSize
 */
CreativeAsset.prototype['fileSize'] = undefined;

/**
 * Flash version of the asset. This is a read-only field. Applicable to the following creative types: FLASH_INPAGE, all RICH_MEDIA, and all VPAID. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.
 * @member {Number} flashVersion
 */
CreativeAsset.prototype['flashVersion'] = undefined;

/**
 * Video frame rate for video asset in frames per second. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID.
 * @member {Number} frameRate
 */
CreativeAsset.prototype['frameRate'] = undefined;

/**
 * Whether to hide Flash objects flag for an asset. Applicable to the following creative types: all RICH_MEDIA.
 * @member {Boolean} hideFlashObjects
 */
CreativeAsset.prototype['hideFlashObjects'] = undefined;

/**
 * Whether to hide selection boxes flag for an asset. Applicable to the following creative types: all RICH_MEDIA.
 * @member {Boolean} hideSelectionBoxes
 */
CreativeAsset.prototype['hideSelectionBoxes'] = undefined;

/**
 * Whether the asset is horizontally locked. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.
 * @member {Boolean} horizontallyLocked
 */
CreativeAsset.prototype['horizontallyLocked'] = undefined;

/**
 * Numeric ID of this creative asset. This is a required field and should not be modified. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT.
 * @member {String} id
 */
CreativeAsset.prototype['id'] = undefined;

/**
 * @member {module:model/DimensionValue} idDimensionValue
 */
CreativeAsset.prototype['idDimensionValue'] = undefined;

/**
 * Detected duration for audio or video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID.
 * @member {Number} mediaDuration
 */
CreativeAsset.prototype['mediaDuration'] = undefined;

/**
 * Detected MIME type for audio or video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID.
 * @member {String} mimeType
 */
CreativeAsset.prototype['mimeType'] = undefined;

/**
 * @member {module:model/OffsetPosition} offset
 */
CreativeAsset.prototype['offset'] = undefined;

/**
 * Orientation of video asset. This is a read-only, auto-generated field.
 * @member {module:model/CreativeAsset.OrientationEnum} orientation
 */
CreativeAsset.prototype['orientation'] = undefined;

/**
 * Whether the backup asset is original or changed by the user in Campaign Manager. Applicable to the following creative types: all RICH_MEDIA.
 * @member {Boolean} originalBackup
 */
CreativeAsset.prototype['originalBackup'] = undefined;

/**
 * Whether this asset is used as a polite load asset.
 * @member {Boolean} politeLoad
 */
CreativeAsset.prototype['politeLoad'] = undefined;

/**
 * @member {module:model/OffsetPosition} position
 */
CreativeAsset.prototype['position'] = undefined;

/**
 * Offset left unit for an asset. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.
 * @member {module:model/CreativeAsset.PositionLeftUnitEnum} positionLeftUnit
 */
CreativeAsset.prototype['positionLeftUnit'] = undefined;

/**
 * Offset top unit for an asset. This is a read-only field if the asset displayType is ASSET_DISPLAY_TYPE_OVERLAY. Applicable to the following creative types: all RICH_MEDIA.
 * @member {module:model/CreativeAsset.PositionTopUnitEnum} positionTopUnit
 */
CreativeAsset.prototype['positionTopUnit'] = undefined;

/**
 * Progressive URL for video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID.
 * @member {String} progressiveServingUrl
 */
CreativeAsset.prototype['progressiveServingUrl'] = undefined;

/**
 * Whether the asset pushes down other content. Applicable to the following creative types: all RICH_MEDIA. Additionally, only applicable when the asset offsets are 0, the collapsedSize.width matches size.width, and the collapsedSize.height is less than size.height.
 * @member {Boolean} pushdown
 */
CreativeAsset.prototype['pushdown'] = undefined;

/**
 * Pushdown duration in seconds for an asset. Applicable to the following creative types: all RICH_MEDIA.Additionally, only applicable when the asset pushdown field is true, the offsets are 0, the collapsedSize.width matches size.width, and the collapsedSize.height is less than size.height. Acceptable values are 0 to 9.99, inclusive.
 * @member {Number} pushdownDuration
 */
CreativeAsset.prototype['pushdownDuration'] = undefined;

/**
 * Role of the asset in relation to creative. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT. This is a required field. PRIMARY applies to DISPLAY, FLASH_INPAGE, HTML5_BANNER, IMAGE, DISPLAY_IMAGE_GALLERY, all RICH_MEDIA (which may contain multiple primary assets), and all VPAID creatives. BACKUP_IMAGE applies to FLASH_INPAGE, HTML5_BANNER, all RICH_MEDIA, and all VPAID creatives. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE. ADDITIONAL_IMAGE and ADDITIONAL_FLASH apply to FLASH_INPAGE creatives. OTHER refers to assets from sources other than Campaign Manager, such as Studio uploaded assets, applicable to all RICH_MEDIA and all VPAID creatives. PARENT_VIDEO refers to videos uploaded by the user in Campaign Manager and is applicable to INSTREAM_VIDEO and VPAID_LINEAR_VIDEO creatives. TRANSCODED_VIDEO refers to videos transcoded by Campaign Manager from PARENT_VIDEO assets and is applicable to INSTREAM_VIDEO and VPAID_LINEAR_VIDEO creatives. ALTERNATE_VIDEO refers to the Campaign Manager representation of child asset videos from Studio, and is applicable to VPAID_LINEAR_VIDEO creatives. These cannot be added or removed within Campaign Manager. For VPAID_LINEAR_VIDEO creatives, PARENT_VIDEO, TRANSCODED_VIDEO and ALTERNATE_VIDEO assets that are marked active serve as backup in case the VPAID creative cannot be served. Only PARENT_VIDEO assets can be added or removed for an INSTREAM_VIDEO or VPAID_LINEAR_VIDEO creative. PARENT_AUDIO refers to audios uploaded by the user in Campaign Manager and is applicable to INSTREAM_AUDIO creatives. TRANSCODED_AUDIO refers to audios transcoded by Campaign Manager from PARENT_AUDIO assets and is applicable to INSTREAM_AUDIO creatives. 
 * @member {module:model/CreativeAsset.RoleEnum} role
 */
CreativeAsset.prototype['role'] = undefined;

/**
 * @member {module:model/Size} size
 */
CreativeAsset.prototype['size'] = undefined;

/**
 * Whether the asset is SSL-compliant. This is a read-only field. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT.
 * @member {Boolean} sslCompliant
 */
CreativeAsset.prototype['sslCompliant'] = undefined;

/**
 * Initial wait time type before making the asset visible. Applicable to the following creative types: all RICH_MEDIA.
 * @member {module:model/CreativeAsset.StartTimeTypeEnum} startTimeType
 */
CreativeAsset.prototype['startTimeType'] = undefined;

/**
 * Streaming URL for video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID.
 * @member {String} streamingServingUrl
 */
CreativeAsset.prototype['streamingServingUrl'] = undefined;

/**
 * Whether the asset is transparent. Applicable to the following creative types: all RICH_MEDIA. Additionally, only applicable to HTML5 assets.
 * @member {Boolean} transparency
 */
CreativeAsset.prototype['transparency'] = undefined;

/**
 * Whether the asset is vertically locked. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.
 * @member {Boolean} verticallyLocked
 */
CreativeAsset.prototype['verticallyLocked'] = undefined;

/**
 * Window mode options for flash assets. Applicable to the following creative types: FLASH_INPAGE, RICH_MEDIA_DISPLAY_EXPANDING, RICH_MEDIA_IM_EXPAND, RICH_MEDIA_DISPLAY_BANNER, and RICH_MEDIA_INPAGE_FLOATING.
 * @member {module:model/CreativeAsset.WindowModeEnum} windowMode
 */
CreativeAsset.prototype['windowMode'] = undefined;

/**
 * zIndex value of an asset. Applicable to the following creative types: all RICH_MEDIA.Additionally, only applicable to assets whose displayType is NOT one of the following types: ASSET_DISPLAY_TYPE_INPAGE or ASSET_DISPLAY_TYPE_OVERLAY. Acceptable values are -999999999 to 999999999, inclusive.
 * @member {Number} zIndex
 */
CreativeAsset.prototype['zIndex'] = undefined;

/**
 * File name of zip file. This is a read-only field. Applicable to the following creative types: HTML5_BANNER.
 * @member {String} zipFilename
 */
CreativeAsset.prototype['zipFilename'] = undefined;

/**
 * Size of zip file. This is a read-only field. Applicable to the following creative types: HTML5_BANNER.
 * @member {String} zipFilesize
 */
CreativeAsset.prototype['zipFilesize'] = undefined;





/**
 * Allowed values for the <code>alignment</code> property.
 * @enum {String}
 * @readonly
 */
CreativeAsset['AlignmentEnum'] = {

    /**
     * value: "ALIGNMENT_TOP"
     * @const
     */
    "TOP": "ALIGNMENT_TOP",

    /**
     * value: "ALIGNMENT_RIGHT"
     * @const
     */
    "RIGHT": "ALIGNMENT_RIGHT",

    /**
     * value: "ALIGNMENT_BOTTOM"
     * @const
     */
    "BOTTOM": "ALIGNMENT_BOTTOM",

    /**
     * value: "ALIGNMENT_LEFT"
     * @const
     */
    "LEFT": "ALIGNMENT_LEFT"
};


/**
 * Allowed values for the <code>artworkType</code> property.
 * @enum {String}
 * @readonly
 */
CreativeAsset['ArtworkTypeEnum'] = {

    /**
     * value: "ARTWORK_TYPE_FLASH"
     * @const
     */
    "FLASH": "ARTWORK_TYPE_FLASH",

    /**
     * value: "ARTWORK_TYPE_HTML5"
     * @const
     */
    "HTML5": "ARTWORK_TYPE_HTML5",

    /**
     * value: "ARTWORK_TYPE_MIXED"
     * @const
     */
    "MIXED": "ARTWORK_TYPE_MIXED",

    /**
     * value: "ARTWORK_TYPE_IMAGE"
     * @const
     */
    "IMAGE": "ARTWORK_TYPE_IMAGE"
};


/**
 * Allowed values for the <code>childAssetType</code> property.
 * @enum {String}
 * @readonly
 */
CreativeAsset['ChildAssetTypeEnum'] = {

    /**
     * value: "CHILD_ASSET_TYPE_FLASH"
     * @const
     */
    "FLASH": "CHILD_ASSET_TYPE_FLASH",

    /**
     * value: "CHILD_ASSET_TYPE_VIDEO"
     * @const
     */
    "VIDEO": "CHILD_ASSET_TYPE_VIDEO",

    /**
     * value: "CHILD_ASSET_TYPE_IMAGE"
     * @const
     */
    "IMAGE": "CHILD_ASSET_TYPE_IMAGE",

    /**
     * value: "CHILD_ASSET_TYPE_DATA"
     * @const
     */
    "DATA": "CHILD_ASSET_TYPE_DATA"
};


/**
 * Allowed values for the <code>detectedFeatures</code> property.
 * @enum {String}
 * @readonly
 */
CreativeAsset['DetectedFeaturesEnum'] = {

    /**
     * value: "CSS_FONT_FACE"
     * @const
     */
    "CSS_FONT_FACE": "CSS_FONT_FACE",

    /**
     * value: "CSS_BACKGROUND_SIZE"
     * @const
     */
    "CSS_BACKGROUND_SIZE": "CSS_BACKGROUND_SIZE",

    /**
     * value: "CSS_BORDER_IMAGE"
     * @const
     */
    "CSS_BORDER_IMAGE": "CSS_BORDER_IMAGE",

    /**
     * value: "CSS_BORDER_RADIUS"
     * @const
     */
    "CSS_BORDER_RADIUS": "CSS_BORDER_RADIUS",

    /**
     * value: "CSS_BOX_SHADOW"
     * @const
     */
    "CSS_BOX_SHADOW": "CSS_BOX_SHADOW",

    /**
     * value: "CSS_FLEX_BOX"
     * @const
     */
    "CSS_FLEX_BOX": "CSS_FLEX_BOX",

    /**
     * value: "CSS_HSLA"
     * @const
     */
    "CSS_HSLA": "CSS_HSLA",

    /**
     * value: "CSS_MULTIPLE_BGS"
     * @const
     */
    "CSS_MULTIPLE_BGS": "CSS_MULTIPLE_BGS",

    /**
     * value: "CSS_OPACITY"
     * @const
     */
    "CSS_OPACITY": "CSS_OPACITY",

    /**
     * value: "CSS_RGBA"
     * @const
     */
    "CSS_RGBA": "CSS_RGBA",

    /**
     * value: "CSS_TEXT_SHADOW"
     * @const
     */
    "CSS_TEXT_SHADOW": "CSS_TEXT_SHADOW",

    /**
     * value: "CSS_ANIMATIONS"
     * @const
     */
    "CSS_ANIMATIONS": "CSS_ANIMATIONS",

    /**
     * value: "CSS_COLUMNS"
     * @const
     */
    "CSS_COLUMNS": "CSS_COLUMNS",

    /**
     * value: "CSS_GENERATED_CONTENT"
     * @const
     */
    "CSS_GENERATED_CONTENT": "CSS_GENERATED_CONTENT",

    /**
     * value: "CSS_GRADIENTS"
     * @const
     */
    "CSS_GRADIENTS": "CSS_GRADIENTS",

    /**
     * value: "CSS_REFLECTIONS"
     * @const
     */
    "CSS_REFLECTIONS": "CSS_REFLECTIONS",

    /**
     * value: "CSS_TRANSFORMS"
     * @const
     */
    "CSS_TRANSFORMS": "CSS_TRANSFORMS",

    /**
     * value: "CSS_TRANSFORMS3D"
     * @const
     */
    "CSS_TRANSFORMS3D": "CSS_TRANSFORMS3D",

    /**
     * value: "CSS_TRANSITIONS"
     * @const
     */
    "CSS_TRANSITIONS": "CSS_TRANSITIONS",

    /**
     * value: "APPLICATION_CACHE"
     * @const
     */
    "APPLICATION_CACHE": "APPLICATION_CACHE",

    /**
     * value: "CANVAS"
     * @const
     */
    "CANVAS": "CANVAS",

    /**
     * value: "CANVAS_TEXT"
     * @const
     */
    "CANVAS_TEXT": "CANVAS_TEXT",

    /**
     * value: "DRAG_AND_DROP"
     * @const
     */
    "DRAG_AND_DROP": "DRAG_AND_DROP",

    /**
     * value: "HASH_CHANGE"
     * @const
     */
    "HASH_CHANGE": "HASH_CHANGE",

    /**
     * value: "HISTORY"
     * @const
     */
    "HISTORY": "HISTORY",

    /**
     * value: "AUDIO"
     * @const
     */
    "AUDIO": "AUDIO",

    /**
     * value: "VIDEO"
     * @const
     */
    "VIDEO": "VIDEO",

    /**
     * value: "INDEXED_DB"
     * @const
     */
    "INDEXED_DB": "INDEXED_DB",

    /**
     * value: "INPUT_ATTR_AUTOCOMPLETE"
     * @const
     */
    "INPUT_ATTR_AUTOCOMPLETE": "INPUT_ATTR_AUTOCOMPLETE",

    /**
     * value: "INPUT_ATTR_AUTOFOCUS"
     * @const
     */
    "INPUT_ATTR_AUTOFOCUS": "INPUT_ATTR_AUTOFOCUS",

    /**
     * value: "INPUT_ATTR_LIST"
     * @const
     */
    "INPUT_ATTR_LIST": "INPUT_ATTR_LIST",

    /**
     * value: "INPUT_ATTR_PLACEHOLDER"
     * @const
     */
    "INPUT_ATTR_PLACEHOLDER": "INPUT_ATTR_PLACEHOLDER",

    /**
     * value: "INPUT_ATTR_MAX"
     * @const
     */
    "INPUT_ATTR_MAX": "INPUT_ATTR_MAX",

    /**
     * value: "INPUT_ATTR_MIN"
     * @const
     */
    "INPUT_ATTR_MIN": "INPUT_ATTR_MIN",

    /**
     * value: "INPUT_ATTR_MULTIPLE"
     * @const
     */
    "INPUT_ATTR_MULTIPLE": "INPUT_ATTR_MULTIPLE",

    /**
     * value: "INPUT_ATTR_PATTERN"
     * @const
     */
    "INPUT_ATTR_PATTERN": "INPUT_ATTR_PATTERN",

    /**
     * value: "INPUT_ATTR_REQUIRED"
     * @const
     */
    "INPUT_ATTR_REQUIRED": "INPUT_ATTR_REQUIRED",

    /**
     * value: "INPUT_ATTR_STEP"
     * @const
     */
    "INPUT_ATTR_STEP": "INPUT_ATTR_STEP",

    /**
     * value: "INPUT_TYPE_SEARCH"
     * @const
     */
    "INPUT_TYPE_SEARCH": "INPUT_TYPE_SEARCH",

    /**
     * value: "INPUT_TYPE_TEL"
     * @const
     */
    "INPUT_TYPE_TEL": "INPUT_TYPE_TEL",

    /**
     * value: "INPUT_TYPE_URL"
     * @const
     */
    "INPUT_TYPE_URL": "INPUT_TYPE_URL",

    /**
     * value: "INPUT_TYPE_EMAIL"
     * @const
     */
    "INPUT_TYPE_EMAIL": "INPUT_TYPE_EMAIL",

    /**
     * value: "INPUT_TYPE_DATETIME"
     * @const
     */
    "INPUT_TYPE_DATETIME": "INPUT_TYPE_DATETIME",

    /**
     * value: "INPUT_TYPE_DATE"
     * @const
     */
    "INPUT_TYPE_DATE": "INPUT_TYPE_DATE",

    /**
     * value: "INPUT_TYPE_MONTH"
     * @const
     */
    "INPUT_TYPE_MONTH": "INPUT_TYPE_MONTH",

    /**
     * value: "INPUT_TYPE_WEEK"
     * @const
     */
    "INPUT_TYPE_WEEK": "INPUT_TYPE_WEEK",

    /**
     * value: "INPUT_TYPE_TIME"
     * @const
     */
    "INPUT_TYPE_TIME": "INPUT_TYPE_TIME",

    /**
     * value: "INPUT_TYPE_DATETIME_LOCAL"
     * @const
     */
    "INPUT_TYPE_DATETIME_LOCAL": "INPUT_TYPE_DATETIME_LOCAL",

    /**
     * value: "INPUT_TYPE_NUMBER"
     * @const
     */
    "INPUT_TYPE_NUMBER": "INPUT_TYPE_NUMBER",

    /**
     * value: "INPUT_TYPE_RANGE"
     * @const
     */
    "INPUT_TYPE_RANGE": "INPUT_TYPE_RANGE",

    /**
     * value: "INPUT_TYPE_COLOR"
     * @const
     */
    "INPUT_TYPE_COLOR": "INPUT_TYPE_COLOR",

    /**
     * value: "LOCAL_STORAGE"
     * @const
     */
    "LOCAL_STORAGE": "LOCAL_STORAGE",

    /**
     * value: "POST_MESSAGE"
     * @const
     */
    "POST_MESSAGE": "POST_MESSAGE",

    /**
     * value: "SESSION_STORAGE"
     * @const
     */
    "SESSION_STORAGE": "SESSION_STORAGE",

    /**
     * value: "WEB_SOCKETS"
     * @const
     */
    "WEB_SOCKETS": "WEB_SOCKETS",

    /**
     * value: "WEB_SQL_DATABASE"
     * @const
     */
    "WEB_SQL_DATABASE": "WEB_SQL_DATABASE",

    /**
     * value: "WEB_WORKERS"
     * @const
     */
    "WEB_WORKERS": "WEB_WORKERS",

    /**
     * value: "GEO_LOCATION"
     * @const
     */
    "GEO_LOCATION": "GEO_LOCATION",

    /**
     * value: "INLINE_SVG"
     * @const
     */
    "INLINE_SVG": "INLINE_SVG",

    /**
     * value: "SMIL"
     * @const
     */
    "SMIL": "SMIL",

    /**
     * value: "SVG_HREF"
     * @const
     */
    "SVG_HREF": "SVG_HREF",

    /**
     * value: "SVG_CLIP_PATHS"
     * @const
     */
    "SVG_CLIP_PATHS": "SVG_CLIP_PATHS",

    /**
     * value: "TOUCH"
     * @const
     */
    "TOUCH": "TOUCH",

    /**
     * value: "WEBGL"
     * @const
     */
    "WEBGL": "WEBGL",

    /**
     * value: "SVG_FILTERS"
     * @const
     */
    "SVG_FILTERS": "SVG_FILTERS",

    /**
     * value: "SVG_FE_IMAGE"
     * @const
     */
    "SVG_FE_IMAGE": "SVG_FE_IMAGE"
};


/**
 * Allowed values for the <code>displayType</code> property.
 * @enum {String}
 * @readonly
 */
CreativeAsset['DisplayTypeEnum'] = {

    /**
     * value: "ASSET_DISPLAY_TYPE_INPAGE"
     * @const
     */
    "INPAGE": "ASSET_DISPLAY_TYPE_INPAGE",

    /**
     * value: "ASSET_DISPLAY_TYPE_FLOATING"
     * @const
     */
    "FLOATING": "ASSET_DISPLAY_TYPE_FLOATING",

    /**
     * value: "ASSET_DISPLAY_TYPE_OVERLAY"
     * @const
     */
    "OVERLAY": "ASSET_DISPLAY_TYPE_OVERLAY",

    /**
     * value: "ASSET_DISPLAY_TYPE_EXPANDING"
     * @const
     */
    "EXPANDING": "ASSET_DISPLAY_TYPE_EXPANDING",

    /**
     * value: "ASSET_DISPLAY_TYPE_FLASH_IN_FLASH"
     * @const
     */
    "FLASH_IN_FLASH": "ASSET_DISPLAY_TYPE_FLASH_IN_FLASH",

    /**
     * value: "ASSET_DISPLAY_TYPE_FLASH_IN_FLASH_EXPANDING"
     * @const
     */
    "FLASH_IN_FLASH_EXPANDING": "ASSET_DISPLAY_TYPE_FLASH_IN_FLASH_EXPANDING",

    /**
     * value: "ASSET_DISPLAY_TYPE_PEEL_DOWN"
     * @const
     */
    "PEEL_DOWN": "ASSET_DISPLAY_TYPE_PEEL_DOWN",

    /**
     * value: "ASSET_DISPLAY_TYPE_VPAID_LINEAR"
     * @const
     */
    "VPAID_LINEAR": "ASSET_DISPLAY_TYPE_VPAID_LINEAR",

    /**
     * value: "ASSET_DISPLAY_TYPE_VPAID_NON_LINEAR"
     * @const
     */
    "VPAID_NON_LINEAR": "ASSET_DISPLAY_TYPE_VPAID_NON_LINEAR",

    /**
     * value: "ASSET_DISPLAY_TYPE_BACKDROP"
     * @const
     */
    "BACKDROP": "ASSET_DISPLAY_TYPE_BACKDROP"
};


/**
 * Allowed values for the <code>durationType</code> property.
 * @enum {String}
 * @readonly
 */
CreativeAsset['DurationTypeEnum'] = {

    /**
     * value: "ASSET_DURATION_TYPE_AUTO"
     * @const
     */
    "AUTO": "ASSET_DURATION_TYPE_AUTO",

    /**
     * value: "ASSET_DURATION_TYPE_NONE"
     * @const
     */
    "NONE": "ASSET_DURATION_TYPE_NONE",

    /**
     * value: "ASSET_DURATION_TYPE_CUSTOM"
     * @const
     */
    "CUSTOM": "ASSET_DURATION_TYPE_CUSTOM"
};


/**
 * Allowed values for the <code>orientation</code> property.
 * @enum {String}
 * @readonly
 */
CreativeAsset['OrientationEnum'] = {

    /**
     * value: "LANDSCAPE"
     * @const
     */
    "LANDSCAPE": "LANDSCAPE",

    /**
     * value: "PORTRAIT"
     * @const
     */
    "PORTRAIT": "PORTRAIT",

    /**
     * value: "SQUARE"
     * @const
     */
    "SQUARE": "SQUARE"
};


/**
 * Allowed values for the <code>positionLeftUnit</code> property.
 * @enum {String}
 * @readonly
 */
CreativeAsset['PositionLeftUnitEnum'] = {

    /**
     * value: "OFFSET_UNIT_PIXEL"
     * @const
     */
    "PIXEL": "OFFSET_UNIT_PIXEL",

    /**
     * value: "OFFSET_UNIT_PERCENT"
     * @const
     */
    "PERCENT": "OFFSET_UNIT_PERCENT",

    /**
     * value: "OFFSET_UNIT_PIXEL_FROM_CENTER"
     * @const
     */
    "PIXEL_FROM_CENTER": "OFFSET_UNIT_PIXEL_FROM_CENTER"
};


/**
 * Allowed values for the <code>positionTopUnit</code> property.
 * @enum {String}
 * @readonly
 */
CreativeAsset['PositionTopUnitEnum'] = {

    /**
     * value: "OFFSET_UNIT_PIXEL"
     * @const
     */
    "PIXEL": "OFFSET_UNIT_PIXEL",

    /**
     * value: "OFFSET_UNIT_PERCENT"
     * @const
     */
    "PERCENT": "OFFSET_UNIT_PERCENT",

    /**
     * value: "OFFSET_UNIT_PIXEL_FROM_CENTER"
     * @const
     */
    "PIXEL_FROM_CENTER": "OFFSET_UNIT_PIXEL_FROM_CENTER"
};


/**
 * Allowed values for the <code>role</code> property.
 * @enum {String}
 * @readonly
 */
CreativeAsset['RoleEnum'] = {

    /**
     * value: "PRIMARY"
     * @const
     */
    "PRIMARY": "PRIMARY",

    /**
     * value: "BACKUP_IMAGE"
     * @const
     */
    "BACKUP_IMAGE": "BACKUP_IMAGE",

    /**
     * value: "ADDITIONAL_IMAGE"
     * @const
     */
    "ADDITIONAL_IMAGE": "ADDITIONAL_IMAGE",

    /**
     * value: "ADDITIONAL_FLASH"
     * @const
     */
    "ADDITIONAL_FLASH": "ADDITIONAL_FLASH",

    /**
     * value: "PARENT_VIDEO"
     * @const
     */
    "PARENT_VIDEO": "PARENT_VIDEO",

    /**
     * value: "TRANSCODED_VIDEO"
     * @const
     */
    "TRANSCODED_VIDEO": "TRANSCODED_VIDEO",

    /**
     * value: "OTHER"
     * @const
     */
    "OTHER": "OTHER",

    /**
     * value: "ALTERNATE_VIDEO"
     * @const
     */
    "ALTERNATE_VIDEO": "ALTERNATE_VIDEO",

    /**
     * value: "PARENT_AUDIO"
     * @const
     */
    "PARENT_AUDIO": "PARENT_AUDIO",

    /**
     * value: "TRANSCODED_AUDIO"
     * @const
     */
    "TRANSCODED_AUDIO": "TRANSCODED_AUDIO"
};


/**
 * Allowed values for the <code>startTimeType</code> property.
 * @enum {String}
 * @readonly
 */
CreativeAsset['StartTimeTypeEnum'] = {

    /**
     * value: "ASSET_START_TIME_TYPE_NONE"
     * @const
     */
    "NONE": "ASSET_START_TIME_TYPE_NONE",

    /**
     * value: "ASSET_START_TIME_TYPE_CUSTOM"
     * @const
     */
    "CUSTOM": "ASSET_START_TIME_TYPE_CUSTOM"
};


/**
 * Allowed values for the <code>windowMode</code> property.
 * @enum {String}
 * @readonly
 */
CreativeAsset['WindowModeEnum'] = {

    /**
     * value: "OPAQUE"
     * @const
     */
    "OPAQUE": "OPAQUE",

    /**
     * value: "WINDOW"
     * @const
     */
    "WINDOW": "WINDOW",

    /**
     * value: "TRANSPARENT"
     * @const
     */
    "TRANSPARENT": "TRANSPARENT"
};



export default CreativeAsset;

