/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OrderContact model module.
 * @module model/OrderContact
 * @version v3.4
 */
class OrderContact {
    /**
     * Constructs a new <code>OrderContact</code>.
     * Contact of an order.
     * @alias module:model/OrderContact
     */
    constructor() { 
        
        OrderContact.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrderContact</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderContact} obj Optional instance to populate.
     * @return {module:model/OrderContact} The populated <code>OrderContact</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderContact();

            if (data.hasOwnProperty('contactInfo')) {
                obj['contactInfo'] = ApiClient.convertToType(data['contactInfo'], 'String');
            }
            if (data.hasOwnProperty('contactName')) {
                obj['contactName'] = ApiClient.convertToType(data['contactName'], 'String');
            }
            if (data.hasOwnProperty('contactTitle')) {
                obj['contactTitle'] = ApiClient.convertToType(data['contactTitle'], 'String');
            }
            if (data.hasOwnProperty('contactType')) {
                obj['contactType'] = ApiClient.convertToType(data['contactType'], 'String');
            }
            if (data.hasOwnProperty('signatureUserProfileId')) {
                obj['signatureUserProfileId'] = ApiClient.convertToType(data['signatureUserProfileId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderContact</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderContact</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['contactInfo'] && !(typeof data['contactInfo'] === 'string' || data['contactInfo'] instanceof String)) {
            throw new Error("Expected the field `contactInfo` to be a primitive type in the JSON string but got " + data['contactInfo']);
        }
        // ensure the json data is a string
        if (data['contactName'] && !(typeof data['contactName'] === 'string' || data['contactName'] instanceof String)) {
            throw new Error("Expected the field `contactName` to be a primitive type in the JSON string but got " + data['contactName']);
        }
        // ensure the json data is a string
        if (data['contactTitle'] && !(typeof data['contactTitle'] === 'string' || data['contactTitle'] instanceof String)) {
            throw new Error("Expected the field `contactTitle` to be a primitive type in the JSON string but got " + data['contactTitle']);
        }
        // ensure the json data is a string
        if (data['contactType'] && !(typeof data['contactType'] === 'string' || data['contactType'] instanceof String)) {
            throw new Error("Expected the field `contactType` to be a primitive type in the JSON string but got " + data['contactType']);
        }
        // ensure the json data is a string
        if (data['signatureUserProfileId'] && !(typeof data['signatureUserProfileId'] === 'string' || data['signatureUserProfileId'] instanceof String)) {
            throw new Error("Expected the field `signatureUserProfileId` to be a primitive type in the JSON string but got " + data['signatureUserProfileId']);
        }

        return true;
    }


}



/**
 * Free-form information about this contact. It could be any information related to this contact in addition to type, title, name, and signature user profile ID.
 * @member {String} contactInfo
 */
OrderContact.prototype['contactInfo'] = undefined;

/**
 * Name of this contact.
 * @member {String} contactName
 */
OrderContact.prototype['contactName'] = undefined;

/**
 * Title of this contact.
 * @member {String} contactTitle
 */
OrderContact.prototype['contactTitle'] = undefined;

/**
 * Type of this contact.
 * @member {module:model/OrderContact.ContactTypeEnum} contactType
 */
OrderContact.prototype['contactType'] = undefined;

/**
 * ID of the user profile containing the signature that will be embedded into order documents.
 * @member {String} signatureUserProfileId
 */
OrderContact.prototype['signatureUserProfileId'] = undefined;





/**
 * Allowed values for the <code>contactType</code> property.
 * @enum {String}
 * @readonly
 */
OrderContact['ContactTypeEnum'] = {

    /**
     * value: "PLANNING_ORDER_CONTACT_BUYER_CONTACT"
     * @const
     */
    "BUYER_CONTACT": "PLANNING_ORDER_CONTACT_BUYER_CONTACT",

    /**
     * value: "PLANNING_ORDER_CONTACT_BUYER_BILLING_CONTACT"
     * @const
     */
    "BUYER_BILLING_CONTACT": "PLANNING_ORDER_CONTACT_BUYER_BILLING_CONTACT",

    /**
     * value: "PLANNING_ORDER_CONTACT_SELLER_CONTACT"
     * @const
     */
    "SELLER_CONTACT": "PLANNING_ORDER_CONTACT_SELLER_CONTACT"
};



export default OrderContact;

