/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChannelGrouping from './ChannelGrouping';
import DateRange from './DateRange';
import DimensionValue from './DimensionValue';
import PathFilter from './PathFilter';
import SortedDimension from './SortedDimension';

/**
 * The ReportPathCriteria model module.
 * @module model/ReportPathCriteria
 * @version v3.4
 */
class ReportPathCriteria {
    /**
     * Constructs a new <code>ReportPathCriteria</code>.
     * The report criteria for a report of type \&quot;PATH\&quot;.
     * @alias module:model/ReportPathCriteria
     */
    constructor() { 
        
        ReportPathCriteria.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReportPathCriteria</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReportPathCriteria} obj Optional instance to populate.
     * @return {module:model/ReportPathCriteria} The populated <code>ReportPathCriteria</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReportPathCriteria();

            if (data.hasOwnProperty('activityFilters')) {
                obj['activityFilters'] = ApiClient.convertToType(data['activityFilters'], [DimensionValue]);
            }
            if (data.hasOwnProperty('customChannelGrouping')) {
                obj['customChannelGrouping'] = ChannelGrouping.constructFromObject(data['customChannelGrouping']);
            }
            if (data.hasOwnProperty('dateRange')) {
                obj['dateRange'] = DateRange.constructFromObject(data['dateRange']);
            }
            if (data.hasOwnProperty('dimensions')) {
                obj['dimensions'] = ApiClient.convertToType(data['dimensions'], [SortedDimension]);
            }
            if (data.hasOwnProperty('floodlightConfigId')) {
                obj['floodlightConfigId'] = DimensionValue.constructFromObject(data['floodlightConfigId']);
            }
            if (data.hasOwnProperty('metricNames')) {
                obj['metricNames'] = ApiClient.convertToType(data['metricNames'], ['String']);
            }
            if (data.hasOwnProperty('pathFilters')) {
                obj['pathFilters'] = ApiClient.convertToType(data['pathFilters'], [PathFilter]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReportPathCriteria</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReportPathCriteria</code>.
     */
    static validateJSON(data) {
        if (data['activityFilters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['activityFilters'])) {
                throw new Error("Expected the field `activityFilters` to be an array in the JSON data but got " + data['activityFilters']);
            }
            // validate the optional field `activityFilters` (array)
            for (const item of data['activityFilters']) {
                DimensionValue.validateJSON(item);
            };
        }
        // validate the optional field `customChannelGrouping`
        if (data['customChannelGrouping']) { // data not null
          ChannelGrouping.validateJSON(data['customChannelGrouping']);
        }
        // validate the optional field `dateRange`
        if (data['dateRange']) { // data not null
          DateRange.validateJSON(data['dateRange']);
        }
        if (data['dimensions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dimensions'])) {
                throw new Error("Expected the field `dimensions` to be an array in the JSON data but got " + data['dimensions']);
            }
            // validate the optional field `dimensions` (array)
            for (const item of data['dimensions']) {
                SortedDimension.validateJSON(item);
            };
        }
        // validate the optional field `floodlightConfigId`
        if (data['floodlightConfigId']) { // data not null
          DimensionValue.validateJSON(data['floodlightConfigId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['metricNames'])) {
            throw new Error("Expected the field `metricNames` to be an array in the JSON data but got " + data['metricNames']);
        }
        if (data['pathFilters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pathFilters'])) {
                throw new Error("Expected the field `pathFilters` to be an array in the JSON data but got " + data['pathFilters']);
            }
            // validate the optional field `pathFilters` (array)
            for (const item of data['pathFilters']) {
                PathFilter.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The list of 'dfa:activity' values to filter on.
 * @member {Array.<module:model/DimensionValue>} activityFilters
 */
ReportPathCriteria.prototype['activityFilters'] = undefined;

/**
 * @member {module:model/ChannelGrouping} customChannelGrouping
 */
ReportPathCriteria.prototype['customChannelGrouping'] = undefined;

/**
 * @member {module:model/DateRange} dateRange
 */
ReportPathCriteria.prototype['dateRange'] = undefined;

/**
 * The list of dimensions the report should include.
 * @member {Array.<module:model/SortedDimension>} dimensions
 */
ReportPathCriteria.prototype['dimensions'] = undefined;

/**
 * @member {module:model/DimensionValue} floodlightConfigId
 */
ReportPathCriteria.prototype['floodlightConfigId'] = undefined;

/**
 * The list of names of metrics the report should include.
 * @member {Array.<String>} metricNames
 */
ReportPathCriteria.prototype['metricNames'] = undefined;

/**
 * Path Filters.
 * @member {Array.<module:model/PathFilter>} pathFilters
 */
ReportPathCriteria.prototype['pathFilters'] = undefined;






export default ReportPathCriteria;

