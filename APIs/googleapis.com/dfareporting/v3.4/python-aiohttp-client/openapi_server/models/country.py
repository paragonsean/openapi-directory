# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Country(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country_code: str=None, dart_id: str=None, kind: str=None, name: str=None, ssl_enabled: bool=None):
        """Country - a model defined in OpenAPI

        :param country_code: The country_code of this Country.
        :param dart_id: The dart_id of this Country.
        :param kind: The kind of this Country.
        :param name: The name of this Country.
        :param ssl_enabled: The ssl_enabled of this Country.
        """
        self.openapi_types = {
            'country_code': str,
            'dart_id': str,
            'kind': str,
            'name': str,
            'ssl_enabled': bool
        }

        self.attribute_map = {
            'country_code': 'countryCode',
            'dart_id': 'dartId',
            'kind': 'kind',
            'name': 'name',
            'ssl_enabled': 'sslEnabled'
        }

        self._country_code = country_code
        self._dart_id = dart_id
        self._kind = kind
        self._name = name
        self._ssl_enabled = ssl_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Country':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Country of this Country.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country_code(self):
        """Gets the country_code of this Country.

        Country code.

        :return: The country_code of this Country.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Country.

        Country code.

        :param country_code: The country_code of this Country.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def dart_id(self):
        """Gets the dart_id of this Country.

        DART ID of this country. This is the ID used for targeting and generating reports.

        :return: The dart_id of this Country.
        :rtype: str
        """
        return self._dart_id

    @dart_id.setter
    def dart_id(self, dart_id):
        """Sets the dart_id of this Country.

        DART ID of this country. This is the ID used for targeting and generating reports.

        :param dart_id: The dart_id of this Country.
        :type dart_id: str
        """

        self._dart_id = dart_id

    @property
    def kind(self):
        """Gets the kind of this Country.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#country\".

        :return: The kind of this Country.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Country.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#country\".

        :param kind: The kind of this Country.
        :type kind: str
        """

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this Country.

        Name of this country.

        :return: The name of this Country.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Country.

        Name of this country.

        :param name: The name of this Country.
        :type name: str
        """

        self._name = name

    @property
    def ssl_enabled(self):
        """Gets the ssl_enabled of this Country.

        Whether ad serving supports secure servers in this country.

        :return: The ssl_enabled of this Country.
        :rtype: bool
        """
        return self._ssl_enabled

    @ssl_enabled.setter
    def ssl_enabled(self, ssl_enabled):
        """Sets the ssl_enabled of this Country.

        Whether ad serving supports secure servers in this country.

        :param ssl_enabled: The ssl_enabled of this Country.
        :type ssl_enabled: bool
        """

        self._ssl_enabled = ssl_enabled
