# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OperatingSystem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dart_id: str=None, desktop: bool=None, kind: str=None, mobile: bool=None, name: str=None):
        """OperatingSystem - a model defined in OpenAPI

        :param dart_id: The dart_id of this OperatingSystem.
        :param desktop: The desktop of this OperatingSystem.
        :param kind: The kind of this OperatingSystem.
        :param mobile: The mobile of this OperatingSystem.
        :param name: The name of this OperatingSystem.
        """
        self.openapi_types = {
            'dart_id': str,
            'desktop': bool,
            'kind': str,
            'mobile': bool,
            'name': str
        }

        self.attribute_map = {
            'dart_id': 'dartId',
            'desktop': 'desktop',
            'kind': 'kind',
            'mobile': 'mobile',
            'name': 'name'
        }

        self._dart_id = dart_id
        self._desktop = desktop
        self._kind = kind
        self._mobile = mobile
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OperatingSystem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OperatingSystem of this OperatingSystem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dart_id(self):
        """Gets the dart_id of this OperatingSystem.

        DART ID of this operating system. This is the ID used for targeting.

        :return: The dart_id of this OperatingSystem.
        :rtype: str
        """
        return self._dart_id

    @dart_id.setter
    def dart_id(self, dart_id):
        """Sets the dart_id of this OperatingSystem.

        DART ID of this operating system. This is the ID used for targeting.

        :param dart_id: The dart_id of this OperatingSystem.
        :type dart_id: str
        """

        self._dart_id = dart_id

    @property
    def desktop(self):
        """Gets the desktop of this OperatingSystem.

        Whether this operating system is for desktop.

        :return: The desktop of this OperatingSystem.
        :rtype: bool
        """
        return self._desktop

    @desktop.setter
    def desktop(self, desktop):
        """Sets the desktop of this OperatingSystem.

        Whether this operating system is for desktop.

        :param desktop: The desktop of this OperatingSystem.
        :type desktop: bool
        """

        self._desktop = desktop

    @property
    def kind(self):
        """Gets the kind of this OperatingSystem.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#operatingSystem\".

        :return: The kind of this OperatingSystem.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this OperatingSystem.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#operatingSystem\".

        :param kind: The kind of this OperatingSystem.
        :type kind: str
        """

        self._kind = kind

    @property
    def mobile(self):
        """Gets the mobile of this OperatingSystem.

        Whether this operating system is for mobile.

        :return: The mobile of this OperatingSystem.
        :rtype: bool
        """
        return self._mobile

    @mobile.setter
    def mobile(self, mobile):
        """Sets the mobile of this OperatingSystem.

        Whether this operating system is for mobile.

        :param mobile: The mobile of this OperatingSystem.
        :type mobile: bool
        """

        self._mobile = mobile

    @property
    def name(self):
        """Gets the name of this OperatingSystem.

        Name of this operating system.

        :return: The name of this OperatingSystem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OperatingSystem.

        Name of this operating system.

        :param name: The name of this OperatingSystem.
        :type name: str
        """

        self._name = name
