# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SiteContact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, contact_type: str=None, email: str=None, first_name: str=None, id: str=None, last_name: str=None, phone: str=None, title: str=None):
        """SiteContact - a model defined in OpenAPI

        :param address: The address of this SiteContact.
        :param contact_type: The contact_type of this SiteContact.
        :param email: The email of this SiteContact.
        :param first_name: The first_name of this SiteContact.
        :param id: The id of this SiteContact.
        :param last_name: The last_name of this SiteContact.
        :param phone: The phone of this SiteContact.
        :param title: The title of this SiteContact.
        """
        self.openapi_types = {
            'address': str,
            'contact_type': str,
            'email': str,
            'first_name': str,
            'id': str,
            'last_name': str,
            'phone': str,
            'title': str
        }

        self.attribute_map = {
            'address': 'address',
            'contact_type': 'contactType',
            'email': 'email',
            'first_name': 'firstName',
            'id': 'id',
            'last_name': 'lastName',
            'phone': 'phone',
            'title': 'title'
        }

        self._address = address
        self._contact_type = contact_type
        self._email = email
        self._first_name = first_name
        self._id = id
        self._last_name = last_name
        self._phone = phone
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SiteContact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SiteContact of this SiteContact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this SiteContact.

        Address of this site contact.

        :return: The address of this SiteContact.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this SiteContact.

        Address of this site contact.

        :param address: The address of this SiteContact.
        :type address: str
        """

        self._address = address

    @property
    def contact_type(self):
        """Gets the contact_type of this SiteContact.

        Site contact type.

        :return: The contact_type of this SiteContact.
        :rtype: str
        """
        return self._contact_type

    @contact_type.setter
    def contact_type(self, contact_type):
        """Sets the contact_type of this SiteContact.

        Site contact type.

        :param contact_type: The contact_type of this SiteContact.
        :type contact_type: str
        """
        allowed_values = ["SALES_PERSON", "TRAFFICKER"]  # noqa: E501
        if contact_type not in allowed_values:
            raise ValueError(
                "Invalid value for `contact_type` ({0}), must be one of {1}"
                .format(contact_type, allowed_values)
            )

        self._contact_type = contact_type

    @property
    def email(self):
        """Gets the email of this SiteContact.

        Email address of this site contact. This is a required field.

        :return: The email of this SiteContact.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this SiteContact.

        Email address of this site contact. This is a required field.

        :param email: The email of this SiteContact.
        :type email: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this SiteContact.

        First name of this site contact.

        :return: The first_name of this SiteContact.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this SiteContact.

        First name of this site contact.

        :param first_name: The first_name of this SiteContact.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this SiteContact.

        ID of this site contact. This is a read-only, auto-generated field.

        :return: The id of this SiteContact.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SiteContact.

        ID of this site contact. This is a read-only, auto-generated field.

        :param id: The id of this SiteContact.
        :type id: str
        """

        self._id = id

    @property
    def last_name(self):
        """Gets the last_name of this SiteContact.

        Last name of this site contact.

        :return: The last_name of this SiteContact.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this SiteContact.

        Last name of this site contact.

        :param last_name: The last_name of this SiteContact.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def phone(self):
        """Gets the phone of this SiteContact.

        Primary phone number of this site contact.

        :return: The phone of this SiteContact.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this SiteContact.

        Primary phone number of this site contact.

        :param phone: The phone of this SiteContact.
        :type phone: str
        """

        self._phone = phone

    @property
    def title(self):
        """Gets the title of this SiteContact.

        Title or designation of this site contact.

        :return: The title of this SiteContact.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SiteContact.

        Title or designation of this site contact.

        :param title: The title of this SiteContact.
        :type title: str
        """

        self._title = title
