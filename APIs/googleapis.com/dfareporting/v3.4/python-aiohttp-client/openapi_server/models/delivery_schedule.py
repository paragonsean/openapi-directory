# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.frequency_cap import FrequencyCap
from openapi_server import util


class DeliverySchedule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, frequency_cap: FrequencyCap=None, hard_cutoff: bool=None, impression_ratio: str=None, priority: str=None):
        """DeliverySchedule - a model defined in OpenAPI

        :param frequency_cap: The frequency_cap of this DeliverySchedule.
        :param hard_cutoff: The hard_cutoff of this DeliverySchedule.
        :param impression_ratio: The impression_ratio of this DeliverySchedule.
        :param priority: The priority of this DeliverySchedule.
        """
        self.openapi_types = {
            'frequency_cap': FrequencyCap,
            'hard_cutoff': bool,
            'impression_ratio': str,
            'priority': str
        }

        self.attribute_map = {
            'frequency_cap': 'frequencyCap',
            'hard_cutoff': 'hardCutoff',
            'impression_ratio': 'impressionRatio',
            'priority': 'priority'
        }

        self._frequency_cap = frequency_cap
        self._hard_cutoff = hard_cutoff
        self._impression_ratio = impression_ratio
        self._priority = priority

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeliverySchedule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeliverySchedule of this DeliverySchedule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def frequency_cap(self):
        """Gets the frequency_cap of this DeliverySchedule.


        :return: The frequency_cap of this DeliverySchedule.
        :rtype: FrequencyCap
        """
        return self._frequency_cap

    @frequency_cap.setter
    def frequency_cap(self, frequency_cap):
        """Sets the frequency_cap of this DeliverySchedule.


        :param frequency_cap: The frequency_cap of this DeliverySchedule.
        :type frequency_cap: FrequencyCap
        """

        self._frequency_cap = frequency_cap

    @property
    def hard_cutoff(self):
        """Gets the hard_cutoff of this DeliverySchedule.

        Whether or not hard cutoff is enabled. If true, the ad will not serve after the end date and time. Otherwise the ad will continue to be served until it has reached its delivery goals.

        :return: The hard_cutoff of this DeliverySchedule.
        :rtype: bool
        """
        return self._hard_cutoff

    @hard_cutoff.setter
    def hard_cutoff(self, hard_cutoff):
        """Sets the hard_cutoff of this DeliverySchedule.

        Whether or not hard cutoff is enabled. If true, the ad will not serve after the end date and time. Otherwise the ad will continue to be served until it has reached its delivery goals.

        :param hard_cutoff: The hard_cutoff of this DeliverySchedule.
        :type hard_cutoff: bool
        """

        self._hard_cutoff = hard_cutoff

    @property
    def impression_ratio(self):
        """Gets the impression_ratio of this DeliverySchedule.

        Impression ratio for this ad. This ratio determines how often each ad is served relative to the others. For example, if ad A has an impression ratio of 1 and ad B has an impression ratio of 3, then Campaign Manager will serve ad B three times as often as ad A. Acceptable values are 1 to 10, inclusive.

        :return: The impression_ratio of this DeliverySchedule.
        :rtype: str
        """
        return self._impression_ratio

    @impression_ratio.setter
    def impression_ratio(self, impression_ratio):
        """Sets the impression_ratio of this DeliverySchedule.

        Impression ratio for this ad. This ratio determines how often each ad is served relative to the others. For example, if ad A has an impression ratio of 1 and ad B has an impression ratio of 3, then Campaign Manager will serve ad B three times as often as ad A. Acceptable values are 1 to 10, inclusive.

        :param impression_ratio: The impression_ratio of this DeliverySchedule.
        :type impression_ratio: str
        """

        self._impression_ratio = impression_ratio

    @property
    def priority(self):
        """Gets the priority of this DeliverySchedule.

        Serving priority of an ad, with respect to other ads. The lower the priority number, the greater the priority with which it is served.

        :return: The priority of this DeliverySchedule.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this DeliverySchedule.

        Serving priority of an ad, with respect to other ads. The lower the priority number, the greater the priority with which it is served.

        :param priority: The priority of this DeliverySchedule.
        :type priority: str
        """
        allowed_values = ["AD_PRIORITY_01", "AD_PRIORITY_02", "AD_PRIORITY_03", "AD_PRIORITY_04", "AD_PRIORITY_05", "AD_PRIORITY_06", "AD_PRIORITY_07", "AD_PRIORITY_08", "AD_PRIORITY_09", "AD_PRIORITY_10", "AD_PRIORITY_11", "AD_PRIORITY_12", "AD_PRIORITY_13", "AD_PRIORITY_14", "AD_PRIORITY_15", "AD_PRIORITY_16"]  # noqa: E501
        if priority not in allowed_values:
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"
                .format(priority, allowed_values)
            )

        self._priority = priority
