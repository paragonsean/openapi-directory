# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dimension_value import DimensionValue
from openapi_server import util


class EventTag(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, advertiser_id: str=None, advertiser_id_dimension_value: DimensionValue=None, campaign_id: str=None, campaign_id_dimension_value: DimensionValue=None, enabled_by_default: bool=None, exclude_from_adx_requests: bool=None, id: str=None, kind: str=None, name: str=None, site_filter_type: str=None, site_ids: List[str]=None, ssl_compliant: bool=None, status: str=None, subaccount_id: str=None, type: str=None, url: str=None, url_escape_levels: int=None):
        """EventTag - a model defined in OpenAPI

        :param account_id: The account_id of this EventTag.
        :param advertiser_id: The advertiser_id of this EventTag.
        :param advertiser_id_dimension_value: The advertiser_id_dimension_value of this EventTag.
        :param campaign_id: The campaign_id of this EventTag.
        :param campaign_id_dimension_value: The campaign_id_dimension_value of this EventTag.
        :param enabled_by_default: The enabled_by_default of this EventTag.
        :param exclude_from_adx_requests: The exclude_from_adx_requests of this EventTag.
        :param id: The id of this EventTag.
        :param kind: The kind of this EventTag.
        :param name: The name of this EventTag.
        :param site_filter_type: The site_filter_type of this EventTag.
        :param site_ids: The site_ids of this EventTag.
        :param ssl_compliant: The ssl_compliant of this EventTag.
        :param status: The status of this EventTag.
        :param subaccount_id: The subaccount_id of this EventTag.
        :param type: The type of this EventTag.
        :param url: The url of this EventTag.
        :param url_escape_levels: The url_escape_levels of this EventTag.
        """
        self.openapi_types = {
            'account_id': str,
            'advertiser_id': str,
            'advertiser_id_dimension_value': DimensionValue,
            'campaign_id': str,
            'campaign_id_dimension_value': DimensionValue,
            'enabled_by_default': bool,
            'exclude_from_adx_requests': bool,
            'id': str,
            'kind': str,
            'name': str,
            'site_filter_type': str,
            'site_ids': List[str],
            'ssl_compliant': bool,
            'status': str,
            'subaccount_id': str,
            'type': str,
            'url': str,
            'url_escape_levels': int
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'advertiser_id': 'advertiserId',
            'advertiser_id_dimension_value': 'advertiserIdDimensionValue',
            'campaign_id': 'campaignId',
            'campaign_id_dimension_value': 'campaignIdDimensionValue',
            'enabled_by_default': 'enabledByDefault',
            'exclude_from_adx_requests': 'excludeFromAdxRequests',
            'id': 'id',
            'kind': 'kind',
            'name': 'name',
            'site_filter_type': 'siteFilterType',
            'site_ids': 'siteIds',
            'ssl_compliant': 'sslCompliant',
            'status': 'status',
            'subaccount_id': 'subaccountId',
            'type': 'type',
            'url': 'url',
            'url_escape_levels': 'urlEscapeLevels'
        }

        self._account_id = account_id
        self._advertiser_id = advertiser_id
        self._advertiser_id_dimension_value = advertiser_id_dimension_value
        self._campaign_id = campaign_id
        self._campaign_id_dimension_value = campaign_id_dimension_value
        self._enabled_by_default = enabled_by_default
        self._exclude_from_adx_requests = exclude_from_adx_requests
        self._id = id
        self._kind = kind
        self._name = name
        self._site_filter_type = site_filter_type
        self._site_ids = site_ids
        self._ssl_compliant = ssl_compliant
        self._status = status
        self._subaccount_id = subaccount_id
        self._type = type
        self._url = url
        self._url_escape_levels = url_escape_levels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventTag':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventTag of this EventTag.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this EventTag.

        Account ID of this event tag. This is a read-only field that can be left blank.

        :return: The account_id of this EventTag.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this EventTag.

        Account ID of this event tag. This is a read-only field that can be left blank.

        :param account_id: The account_id of this EventTag.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this EventTag.

        Advertiser ID of this event tag. This field or the campaignId field is required on insertion.

        :return: The advertiser_id of this EventTag.
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this EventTag.

        Advertiser ID of this event tag. This field or the campaignId field is required on insertion.

        :param advertiser_id: The advertiser_id of this EventTag.
        :type advertiser_id: str
        """

        self._advertiser_id = advertiser_id

    @property
    def advertiser_id_dimension_value(self):
        """Gets the advertiser_id_dimension_value of this EventTag.


        :return: The advertiser_id_dimension_value of this EventTag.
        :rtype: DimensionValue
        """
        return self._advertiser_id_dimension_value

    @advertiser_id_dimension_value.setter
    def advertiser_id_dimension_value(self, advertiser_id_dimension_value):
        """Sets the advertiser_id_dimension_value of this EventTag.


        :param advertiser_id_dimension_value: The advertiser_id_dimension_value of this EventTag.
        :type advertiser_id_dimension_value: DimensionValue
        """

        self._advertiser_id_dimension_value = advertiser_id_dimension_value

    @property
    def campaign_id(self):
        """Gets the campaign_id of this EventTag.

        Campaign ID of this event tag. This field or the advertiserId field is required on insertion.

        :return: The campaign_id of this EventTag.
        :rtype: str
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this EventTag.

        Campaign ID of this event tag. This field or the advertiserId field is required on insertion.

        :param campaign_id: The campaign_id of this EventTag.
        :type campaign_id: str
        """

        self._campaign_id = campaign_id

    @property
    def campaign_id_dimension_value(self):
        """Gets the campaign_id_dimension_value of this EventTag.


        :return: The campaign_id_dimension_value of this EventTag.
        :rtype: DimensionValue
        """
        return self._campaign_id_dimension_value

    @campaign_id_dimension_value.setter
    def campaign_id_dimension_value(self, campaign_id_dimension_value):
        """Sets the campaign_id_dimension_value of this EventTag.


        :param campaign_id_dimension_value: The campaign_id_dimension_value of this EventTag.
        :type campaign_id_dimension_value: DimensionValue
        """

        self._campaign_id_dimension_value = campaign_id_dimension_value

    @property
    def enabled_by_default(self):
        """Gets the enabled_by_default of this EventTag.

        Whether this event tag should be automatically enabled for all of the advertiser's campaigns and ads.

        :return: The enabled_by_default of this EventTag.
        :rtype: bool
        """
        return self._enabled_by_default

    @enabled_by_default.setter
    def enabled_by_default(self, enabled_by_default):
        """Sets the enabled_by_default of this EventTag.

        Whether this event tag should be automatically enabled for all of the advertiser's campaigns and ads.

        :param enabled_by_default: The enabled_by_default of this EventTag.
        :type enabled_by_default: bool
        """

        self._enabled_by_default = enabled_by_default

    @property
    def exclude_from_adx_requests(self):
        """Gets the exclude_from_adx_requests of this EventTag.

        Whether to remove this event tag from ads that are trafficked through Display & Video 360 to Ad Exchange. This may be useful if the event tag uses a pixel that is unapproved for Ad Exchange bids on one or more networks, such as the Google Display Network.

        :return: The exclude_from_adx_requests of this EventTag.
        :rtype: bool
        """
        return self._exclude_from_adx_requests

    @exclude_from_adx_requests.setter
    def exclude_from_adx_requests(self, exclude_from_adx_requests):
        """Sets the exclude_from_adx_requests of this EventTag.

        Whether to remove this event tag from ads that are trafficked through Display & Video 360 to Ad Exchange. This may be useful if the event tag uses a pixel that is unapproved for Ad Exchange bids on one or more networks, such as the Google Display Network.

        :param exclude_from_adx_requests: The exclude_from_adx_requests of this EventTag.
        :type exclude_from_adx_requests: bool
        """

        self._exclude_from_adx_requests = exclude_from_adx_requests

    @property
    def id(self):
        """Gets the id of this EventTag.

        ID of this event tag. This is a read-only, auto-generated field.

        :return: The id of this EventTag.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventTag.

        ID of this event tag. This is a read-only, auto-generated field.

        :param id: The id of this EventTag.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this EventTag.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#eventTag\".

        :return: The kind of this EventTag.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this EventTag.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#eventTag\".

        :param kind: The kind of this EventTag.
        :type kind: str
        """

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this EventTag.

        Name of this event tag. This is a required field and must be less than 256 characters long.

        :return: The name of this EventTag.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EventTag.

        Name of this event tag. This is a required field and must be less than 256 characters long.

        :param name: The name of this EventTag.
        :type name: str
        """

        self._name = name

    @property
    def site_filter_type(self):
        """Gets the site_filter_type of this EventTag.

        Site filter type for this event tag. If no type is specified then the event tag will be applied to all sites.

        :return: The site_filter_type of this EventTag.
        :rtype: str
        """
        return self._site_filter_type

    @site_filter_type.setter
    def site_filter_type(self, site_filter_type):
        """Sets the site_filter_type of this EventTag.

        Site filter type for this event tag. If no type is specified then the event tag will be applied to all sites.

        :param site_filter_type: The site_filter_type of this EventTag.
        :type site_filter_type: str
        """
        allowed_values = ["WHITELIST", "BLACKLIST"]  # noqa: E501
        if site_filter_type not in allowed_values:
            raise ValueError(
                "Invalid value for `site_filter_type` ({0}), must be one of {1}"
                .format(site_filter_type, allowed_values)
            )

        self._site_filter_type = site_filter_type

    @property
    def site_ids(self):
        """Gets the site_ids of this EventTag.

        Filter list of site IDs associated with this event tag. The siteFilterType determines whether this is a allowlist or blocklist filter.

        :return: The site_ids of this EventTag.
        :rtype: List[str]
        """
        return self._site_ids

    @site_ids.setter
    def site_ids(self, site_ids):
        """Sets the site_ids of this EventTag.

        Filter list of site IDs associated with this event tag. The siteFilterType determines whether this is a allowlist or blocklist filter.

        :param site_ids: The site_ids of this EventTag.
        :type site_ids: List[str]
        """

        self._site_ids = site_ids

    @property
    def ssl_compliant(self):
        """Gets the ssl_compliant of this EventTag.

        Whether this tag is SSL-compliant or not. This is a read-only field.

        :return: The ssl_compliant of this EventTag.
        :rtype: bool
        """
        return self._ssl_compliant

    @ssl_compliant.setter
    def ssl_compliant(self, ssl_compliant):
        """Sets the ssl_compliant of this EventTag.

        Whether this tag is SSL-compliant or not. This is a read-only field.

        :param ssl_compliant: The ssl_compliant of this EventTag.
        :type ssl_compliant: bool
        """

        self._ssl_compliant = ssl_compliant

    @property
    def status(self):
        """Gets the status of this EventTag.

        Status of this event tag. Must be ENABLED for this event tag to fire. This is a required field.

        :return: The status of this EventTag.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EventTag.

        Status of this event tag. Must be ENABLED for this event tag to fire. This is a required field.

        :param status: The status of this EventTag.
        :type status: str
        """
        allowed_values = ["ENABLED", "DISABLED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def subaccount_id(self):
        """Gets the subaccount_id of this EventTag.

        Subaccount ID of this event tag. This is a read-only field that can be left blank.

        :return: The subaccount_id of this EventTag.
        :rtype: str
        """
        return self._subaccount_id

    @subaccount_id.setter
    def subaccount_id(self, subaccount_id):
        """Sets the subaccount_id of this EventTag.

        Subaccount ID of this event tag. This is a read-only field that can be left blank.

        :param subaccount_id: The subaccount_id of this EventTag.
        :type subaccount_id: str
        """

        self._subaccount_id = subaccount_id

    @property
    def type(self):
        """Gets the type of this EventTag.

        Event tag type. Can be used to specify whether to use a third-party pixel, a third-party JavaScript URL, or a third-party click-through URL for either impression or click tracking. This is a required field.

        :return: The type of this EventTag.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EventTag.

        Event tag type. Can be used to specify whether to use a third-party pixel, a third-party JavaScript URL, or a third-party click-through URL for either impression or click tracking. This is a required field.

        :param type: The type of this EventTag.
        :type type: str
        """
        allowed_values = ["IMPRESSION_IMAGE_EVENT_TAG", "IMPRESSION_JAVASCRIPT_EVENT_TAG", "CLICK_THROUGH_EVENT_TAG"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def url(self):
        """Gets the url of this EventTag.

        Payload URL for this event tag. The URL on a click-through event tag should have a landing page URL appended to the end of it. This field is required on insertion.

        :return: The url of this EventTag.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this EventTag.

        Payload URL for this event tag. The URL on a click-through event tag should have a landing page URL appended to the end of it. This field is required on insertion.

        :param url: The url of this EventTag.
        :type url: str
        """

        self._url = url

    @property
    def url_escape_levels(self):
        """Gets the url_escape_levels of this EventTag.

        Number of times the landing page URL should be URL-escaped before being appended to the click-through event tag URL. Only applies to click-through event tags as specified by the event tag type.

        :return: The url_escape_levels of this EventTag.
        :rtype: int
        """
        return self._url_escape_levels

    @url_escape_levels.setter
    def url_escape_levels(self, url_escape_levels):
        """Sets the url_escape_levels of this EventTag.

        Number of times the landing page URL should be URL-escaped before being appended to the click-through event tag URL. Only applies to click-through event tags as specified by the event tag type.

        :param url_escape_levels: The url_escape_levels of this EventTag.
        :type url_escape_levels: int
        """

        self._url_escape_levels = url_escape_levels
