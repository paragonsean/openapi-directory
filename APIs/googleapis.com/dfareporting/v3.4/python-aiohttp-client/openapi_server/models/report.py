# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.report_criteria import ReportCriteria
from openapi_server.models.report_cross_dimension_reach_criteria import ReportCrossDimensionReachCriteria
from openapi_server.models.report_delivery import ReportDelivery
from openapi_server.models.report_floodlight_criteria import ReportFloodlightCriteria
from openapi_server.models.report_path_attribution_criteria import ReportPathAttributionCriteria
from openapi_server.models.report_path_criteria import ReportPathCriteria
from openapi_server.models.report_path_to_conversion_criteria import ReportPathToConversionCriteria
from openapi_server.models.report_reach_criteria import ReportReachCriteria
from openapi_server.models.report_schedule import ReportSchedule
from openapi_server import util


class Report(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, criteria: ReportCriteria=None, cross_dimension_reach_criteria: ReportCrossDimensionReachCriteria=None, delivery: ReportDelivery=None, etag: str=None, file_name: str=None, floodlight_criteria: ReportFloodlightCriteria=None, format: str=None, id: str=None, kind: str=None, last_modified_time: str=None, name: str=None, owner_profile_id: str=None, path_attribution_criteria: ReportPathAttributionCriteria=None, path_criteria: ReportPathCriteria=None, path_to_conversion_criteria: ReportPathToConversionCriteria=None, reach_criteria: ReportReachCriteria=None, schedule: ReportSchedule=None, sub_account_id: str=None, type: str=None):
        """Report - a model defined in OpenAPI

        :param account_id: The account_id of this Report.
        :param criteria: The criteria of this Report.
        :param cross_dimension_reach_criteria: The cross_dimension_reach_criteria of this Report.
        :param delivery: The delivery of this Report.
        :param etag: The etag of this Report.
        :param file_name: The file_name of this Report.
        :param floodlight_criteria: The floodlight_criteria of this Report.
        :param format: The format of this Report.
        :param id: The id of this Report.
        :param kind: The kind of this Report.
        :param last_modified_time: The last_modified_time of this Report.
        :param name: The name of this Report.
        :param owner_profile_id: The owner_profile_id of this Report.
        :param path_attribution_criteria: The path_attribution_criteria of this Report.
        :param path_criteria: The path_criteria of this Report.
        :param path_to_conversion_criteria: The path_to_conversion_criteria of this Report.
        :param reach_criteria: The reach_criteria of this Report.
        :param schedule: The schedule of this Report.
        :param sub_account_id: The sub_account_id of this Report.
        :param type: The type of this Report.
        """
        self.openapi_types = {
            'account_id': str,
            'criteria': ReportCriteria,
            'cross_dimension_reach_criteria': ReportCrossDimensionReachCriteria,
            'delivery': ReportDelivery,
            'etag': str,
            'file_name': str,
            'floodlight_criteria': ReportFloodlightCriteria,
            'format': str,
            'id': str,
            'kind': str,
            'last_modified_time': str,
            'name': str,
            'owner_profile_id': str,
            'path_attribution_criteria': ReportPathAttributionCriteria,
            'path_criteria': ReportPathCriteria,
            'path_to_conversion_criteria': ReportPathToConversionCriteria,
            'reach_criteria': ReportReachCriteria,
            'schedule': ReportSchedule,
            'sub_account_id': str,
            'type': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'criteria': 'criteria',
            'cross_dimension_reach_criteria': 'crossDimensionReachCriteria',
            'delivery': 'delivery',
            'etag': 'etag',
            'file_name': 'fileName',
            'floodlight_criteria': 'floodlightCriteria',
            'format': 'format',
            'id': 'id',
            'kind': 'kind',
            'last_modified_time': 'lastModifiedTime',
            'name': 'name',
            'owner_profile_id': 'ownerProfileId',
            'path_attribution_criteria': 'pathAttributionCriteria',
            'path_criteria': 'pathCriteria',
            'path_to_conversion_criteria': 'pathToConversionCriteria',
            'reach_criteria': 'reachCriteria',
            'schedule': 'schedule',
            'sub_account_id': 'subAccountId',
            'type': 'type'
        }

        self._account_id = account_id
        self._criteria = criteria
        self._cross_dimension_reach_criteria = cross_dimension_reach_criteria
        self._delivery = delivery
        self._etag = etag
        self._file_name = file_name
        self._floodlight_criteria = floodlight_criteria
        self._format = format
        self._id = id
        self._kind = kind
        self._last_modified_time = last_modified_time
        self._name = name
        self._owner_profile_id = owner_profile_id
        self._path_attribution_criteria = path_attribution_criteria
        self._path_criteria = path_criteria
        self._path_to_conversion_criteria = path_to_conversion_criteria
        self._reach_criteria = reach_criteria
        self._schedule = schedule
        self._sub_account_id = sub_account_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Report':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Report of this Report.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this Report.

        The account ID to which this report belongs.

        :return: The account_id of this Report.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Report.

        The account ID to which this report belongs.

        :param account_id: The account_id of this Report.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def criteria(self):
        """Gets the criteria of this Report.


        :return: The criteria of this Report.
        :rtype: ReportCriteria
        """
        return self._criteria

    @criteria.setter
    def criteria(self, criteria):
        """Sets the criteria of this Report.


        :param criteria: The criteria of this Report.
        :type criteria: ReportCriteria
        """

        self._criteria = criteria

    @property
    def cross_dimension_reach_criteria(self):
        """Gets the cross_dimension_reach_criteria of this Report.


        :return: The cross_dimension_reach_criteria of this Report.
        :rtype: ReportCrossDimensionReachCriteria
        """
        return self._cross_dimension_reach_criteria

    @cross_dimension_reach_criteria.setter
    def cross_dimension_reach_criteria(self, cross_dimension_reach_criteria):
        """Sets the cross_dimension_reach_criteria of this Report.


        :param cross_dimension_reach_criteria: The cross_dimension_reach_criteria of this Report.
        :type cross_dimension_reach_criteria: ReportCrossDimensionReachCriteria
        """

        self._cross_dimension_reach_criteria = cross_dimension_reach_criteria

    @property
    def delivery(self):
        """Gets the delivery of this Report.


        :return: The delivery of this Report.
        :rtype: ReportDelivery
        """
        return self._delivery

    @delivery.setter
    def delivery(self, delivery):
        """Sets the delivery of this Report.


        :param delivery: The delivery of this Report.
        :type delivery: ReportDelivery
        """

        self._delivery = delivery

    @property
    def etag(self):
        """Gets the etag of this Report.

        The eTag of this response for caching purposes.

        :return: The etag of this Report.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Report.

        The eTag of this response for caching purposes.

        :param etag: The etag of this Report.
        :type etag: str
        """

        self._etag = etag

    @property
    def file_name(self):
        """Gets the file_name of this Report.

        The filename used when generating report files for this report.

        :return: The file_name of this Report.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this Report.

        The filename used when generating report files for this report.

        :param file_name: The file_name of this Report.
        :type file_name: str
        """

        self._file_name = file_name

    @property
    def floodlight_criteria(self):
        """Gets the floodlight_criteria of this Report.


        :return: The floodlight_criteria of this Report.
        :rtype: ReportFloodlightCriteria
        """
        return self._floodlight_criteria

    @floodlight_criteria.setter
    def floodlight_criteria(self, floodlight_criteria):
        """Sets the floodlight_criteria of this Report.


        :param floodlight_criteria: The floodlight_criteria of this Report.
        :type floodlight_criteria: ReportFloodlightCriteria
        """

        self._floodlight_criteria = floodlight_criteria

    @property
    def format(self):
        """Gets the format of this Report.

        The output format of the report. If not specified, default format is \"CSV\". Note that the actual format in the completed report file might differ if for instance the report's size exceeds the format's capabilities. \"CSV\" will then be the fallback format.

        :return: The format of this Report.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this Report.

        The output format of the report. If not specified, default format is \"CSV\". Note that the actual format in the completed report file might differ if for instance the report's size exceeds the format's capabilities. \"CSV\" will then be the fallback format.

        :param format: The format of this Report.
        :type format: str
        """
        allowed_values = ["CSV", "EXCEL"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def id(self):
        """Gets the id of this Report.

        The unique ID identifying this report resource.

        :return: The id of this Report.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Report.

        The unique ID identifying this report resource.

        :param id: The id of this Report.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this Report.

        The kind of resource this is, in this case dfareporting#report.

        :return: The kind of this Report.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Report.

        The kind of resource this is, in this case dfareporting#report.

        :param kind: The kind of this Report.
        :type kind: str
        """

        self._kind = kind

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this Report.

        The timestamp (in milliseconds since epoch) of when this report was last modified.

        :return: The last_modified_time of this Report.
        :rtype: str
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this Report.

        The timestamp (in milliseconds since epoch) of when this report was last modified.

        :param last_modified_time: The last_modified_time of this Report.
        :type last_modified_time: str
        """

        self._last_modified_time = last_modified_time

    @property
    def name(self):
        """Gets the name of this Report.

        The name of the report.

        :return: The name of this Report.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Report.

        The name of the report.

        :param name: The name of this Report.
        :type name: str
        """

        self._name = name

    @property
    def owner_profile_id(self):
        """Gets the owner_profile_id of this Report.

        The user profile id of the owner of this report.

        :return: The owner_profile_id of this Report.
        :rtype: str
        """
        return self._owner_profile_id

    @owner_profile_id.setter
    def owner_profile_id(self, owner_profile_id):
        """Sets the owner_profile_id of this Report.

        The user profile id of the owner of this report.

        :param owner_profile_id: The owner_profile_id of this Report.
        :type owner_profile_id: str
        """

        self._owner_profile_id = owner_profile_id

    @property
    def path_attribution_criteria(self):
        """Gets the path_attribution_criteria of this Report.


        :return: The path_attribution_criteria of this Report.
        :rtype: ReportPathAttributionCriteria
        """
        return self._path_attribution_criteria

    @path_attribution_criteria.setter
    def path_attribution_criteria(self, path_attribution_criteria):
        """Sets the path_attribution_criteria of this Report.


        :param path_attribution_criteria: The path_attribution_criteria of this Report.
        :type path_attribution_criteria: ReportPathAttributionCriteria
        """

        self._path_attribution_criteria = path_attribution_criteria

    @property
    def path_criteria(self):
        """Gets the path_criteria of this Report.


        :return: The path_criteria of this Report.
        :rtype: ReportPathCriteria
        """
        return self._path_criteria

    @path_criteria.setter
    def path_criteria(self, path_criteria):
        """Sets the path_criteria of this Report.


        :param path_criteria: The path_criteria of this Report.
        :type path_criteria: ReportPathCriteria
        """

        self._path_criteria = path_criteria

    @property
    def path_to_conversion_criteria(self):
        """Gets the path_to_conversion_criteria of this Report.


        :return: The path_to_conversion_criteria of this Report.
        :rtype: ReportPathToConversionCriteria
        """
        return self._path_to_conversion_criteria

    @path_to_conversion_criteria.setter
    def path_to_conversion_criteria(self, path_to_conversion_criteria):
        """Sets the path_to_conversion_criteria of this Report.


        :param path_to_conversion_criteria: The path_to_conversion_criteria of this Report.
        :type path_to_conversion_criteria: ReportPathToConversionCriteria
        """

        self._path_to_conversion_criteria = path_to_conversion_criteria

    @property
    def reach_criteria(self):
        """Gets the reach_criteria of this Report.


        :return: The reach_criteria of this Report.
        :rtype: ReportReachCriteria
        """
        return self._reach_criteria

    @reach_criteria.setter
    def reach_criteria(self, reach_criteria):
        """Sets the reach_criteria of this Report.


        :param reach_criteria: The reach_criteria of this Report.
        :type reach_criteria: ReportReachCriteria
        """

        self._reach_criteria = reach_criteria

    @property
    def schedule(self):
        """Gets the schedule of this Report.


        :return: The schedule of this Report.
        :rtype: ReportSchedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this Report.


        :param schedule: The schedule of this Report.
        :type schedule: ReportSchedule
        """

        self._schedule = schedule

    @property
    def sub_account_id(self):
        """Gets the sub_account_id of this Report.

        The subaccount ID to which this report belongs if applicable.

        :return: The sub_account_id of this Report.
        :rtype: str
        """
        return self._sub_account_id

    @sub_account_id.setter
    def sub_account_id(self, sub_account_id):
        """Sets the sub_account_id of this Report.

        The subaccount ID to which this report belongs if applicable.

        :param sub_account_id: The sub_account_id of this Report.
        :type sub_account_id: str
        """

        self._sub_account_id = sub_account_id

    @property
    def type(self):
        """Gets the type of this Report.

        The type of the report.

        :return: The type of this Report.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Report.

        The type of the report.

        :param type: The type of this Report.
        :type type: str
        """
        allowed_values = ["STANDARD", "REACH", "PATH_TO_CONVERSION", "CROSS_DIMENSION_REACH", "FLOODLIGHT", "PATH", "PATH_ATTRIBUTION"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
