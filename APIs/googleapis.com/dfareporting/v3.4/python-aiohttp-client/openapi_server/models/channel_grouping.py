# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_grouping_rule import ChannelGroupingRule
from openapi_server import util


class ChannelGrouping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fallback_name: str=None, kind: str=None, name: str=None, rules: List[ChannelGroupingRule]=None):
        """ChannelGrouping - a model defined in OpenAPI

        :param fallback_name: The fallback_name of this ChannelGrouping.
        :param kind: The kind of this ChannelGrouping.
        :param name: The name of this ChannelGrouping.
        :param rules: The rules of this ChannelGrouping.
        """
        self.openapi_types = {
            'fallback_name': str,
            'kind': str,
            'name': str,
            'rules': List[ChannelGroupingRule]
        }

        self.attribute_map = {
            'fallback_name': 'fallbackName',
            'kind': 'kind',
            'name': 'name',
            'rules': 'rules'
        }

        self._fallback_name = fallback_name
        self._kind = kind
        self._name = name
        self._rules = rules

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelGrouping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChannelGrouping of this ChannelGrouping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fallback_name(self):
        """Gets the fallback_name of this ChannelGrouping.

        ChannelGrouping fallback name.

        :return: The fallback_name of this ChannelGrouping.
        :rtype: str
        """
        return self._fallback_name

    @fallback_name.setter
    def fallback_name(self, fallback_name):
        """Sets the fallback_name of this ChannelGrouping.

        ChannelGrouping fallback name.

        :param fallback_name: The fallback_name of this ChannelGrouping.
        :type fallback_name: str
        """

        self._fallback_name = fallback_name

    @property
    def kind(self):
        """Gets the kind of this ChannelGrouping.

        The kind of resource this is, in this case dfareporting#channelGrouping.

        :return: The kind of this ChannelGrouping.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ChannelGrouping.

        The kind of resource this is, in this case dfareporting#channelGrouping.

        :param kind: The kind of this ChannelGrouping.
        :type kind: str
        """

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this ChannelGrouping.

        ChannelGrouping name.

        :return: The name of this ChannelGrouping.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ChannelGrouping.

        ChannelGrouping name.

        :param name: The name of this ChannelGrouping.
        :type name: str
        """

        self._name = name

    @property
    def rules(self):
        """Gets the rules of this ChannelGrouping.

        The rules contained within this channel grouping.

        :return: The rules of this ChannelGrouping.
        :rtype: List[ChannelGroupingRule]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this ChannelGrouping.

        The rules contained within this channel grouping.

        :param rules: The rules of this ChannelGrouping.
        :type rules: List[ChannelGroupingRule]
        """

        self._rules = rules
