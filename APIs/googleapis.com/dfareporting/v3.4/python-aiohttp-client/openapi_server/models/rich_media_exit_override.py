# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.click_through_url import ClickThroughUrl
from openapi_server import util


class RichMediaExitOverride(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, click_through_url: ClickThroughUrl=None, enabled: bool=None, exit_id: str=None):
        """RichMediaExitOverride - a model defined in OpenAPI

        :param click_through_url: The click_through_url of this RichMediaExitOverride.
        :param enabled: The enabled of this RichMediaExitOverride.
        :param exit_id: The exit_id of this RichMediaExitOverride.
        """
        self.openapi_types = {
            'click_through_url': ClickThroughUrl,
            'enabled': bool,
            'exit_id': str
        }

        self.attribute_map = {
            'click_through_url': 'clickThroughUrl',
            'enabled': 'enabled',
            'exit_id': 'exitId'
        }

        self._click_through_url = click_through_url
        self._enabled = enabled
        self._exit_id = exit_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RichMediaExitOverride':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RichMediaExitOverride of this RichMediaExitOverride.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def click_through_url(self):
        """Gets the click_through_url of this RichMediaExitOverride.


        :return: The click_through_url of this RichMediaExitOverride.
        :rtype: ClickThroughUrl
        """
        return self._click_through_url

    @click_through_url.setter
    def click_through_url(self, click_through_url):
        """Sets the click_through_url of this RichMediaExitOverride.


        :param click_through_url: The click_through_url of this RichMediaExitOverride.
        :type click_through_url: ClickThroughUrl
        """

        self._click_through_url = click_through_url

    @property
    def enabled(self):
        """Gets the enabled of this RichMediaExitOverride.

        Whether to use the clickThroughUrl. If false, the creative-level exit will be used.

        :return: The enabled of this RichMediaExitOverride.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this RichMediaExitOverride.

        Whether to use the clickThroughUrl. If false, the creative-level exit will be used.

        :param enabled: The enabled of this RichMediaExitOverride.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def exit_id(self):
        """Gets the exit_id of this RichMediaExitOverride.

        ID for the override to refer to a specific exit in the creative.

        :return: The exit_id of this RichMediaExitOverride.
        :rtype: str
        """
        return self._exit_id

    @exit_id.setter
    def exit_id(self, exit_id):
        """Sets the exit_id of this RichMediaExitOverride.

        ID for the override to refer to a specific exit in the creative.

        :param exit_id: The exit_id of this RichMediaExitOverride.
        :type exit_id: str
        """

        self._exit_id = exit_id
