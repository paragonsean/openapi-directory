# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DimensionValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dimension_name: str=None, etag: str=None, id: str=None, kind: str=None, match_type: str=None, value: str=None):
        """DimensionValue - a model defined in OpenAPI

        :param dimension_name: The dimension_name of this DimensionValue.
        :param etag: The etag of this DimensionValue.
        :param id: The id of this DimensionValue.
        :param kind: The kind of this DimensionValue.
        :param match_type: The match_type of this DimensionValue.
        :param value: The value of this DimensionValue.
        """
        self.openapi_types = {
            'dimension_name': str,
            'etag': str,
            'id': str,
            'kind': str,
            'match_type': str,
            'value': str
        }

        self.attribute_map = {
            'dimension_name': 'dimensionName',
            'etag': 'etag',
            'id': 'id',
            'kind': 'kind',
            'match_type': 'matchType',
            'value': 'value'
        }

        self._dimension_name = dimension_name
        self._etag = etag
        self._id = id
        self._kind = kind
        self._match_type = match_type
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DimensionValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DimensionValue of this DimensionValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dimension_name(self):
        """Gets the dimension_name of this DimensionValue.

        The name of the dimension.

        :return: The dimension_name of this DimensionValue.
        :rtype: str
        """
        return self._dimension_name

    @dimension_name.setter
    def dimension_name(self, dimension_name):
        """Sets the dimension_name of this DimensionValue.

        The name of the dimension.

        :param dimension_name: The dimension_name of this DimensionValue.
        :type dimension_name: str
        """

        self._dimension_name = dimension_name

    @property
    def etag(self):
        """Gets the etag of this DimensionValue.

        The eTag of this response for caching purposes.

        :return: The etag of this DimensionValue.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this DimensionValue.

        The eTag of this response for caching purposes.

        :param etag: The etag of this DimensionValue.
        :type etag: str
        """

        self._etag = etag

    @property
    def id(self):
        """Gets the id of this DimensionValue.

        The ID associated with the value if available.

        :return: The id of this DimensionValue.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DimensionValue.

        The ID associated with the value if available.

        :param id: The id of this DimensionValue.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this DimensionValue.

        The kind of resource this is, in this case dfareporting#dimensionValue.

        :return: The kind of this DimensionValue.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this DimensionValue.

        The kind of resource this is, in this case dfareporting#dimensionValue.

        :param kind: The kind of this DimensionValue.
        :type kind: str
        """

        self._kind = kind

    @property
    def match_type(self):
        """Gets the match_type of this DimensionValue.

        Determines how the 'value' field is matched when filtering. If not specified, defaults to EXACT. If set to WILDCARD_EXPRESSION, '*' is allowed as a placeholder for variable length character sequences, and it can be escaped with a backslash. Note, only paid search dimensions ('dfa:paidSearch*') allow a matchType other than EXACT.

        :return: The match_type of this DimensionValue.
        :rtype: str
        """
        return self._match_type

    @match_type.setter
    def match_type(self, match_type):
        """Sets the match_type of this DimensionValue.

        Determines how the 'value' field is matched when filtering. If not specified, defaults to EXACT. If set to WILDCARD_EXPRESSION, '*' is allowed as a placeholder for variable length character sequences, and it can be escaped with a backslash. Note, only paid search dimensions ('dfa:paidSearch*') allow a matchType other than EXACT.

        :param match_type: The match_type of this DimensionValue.
        :type match_type: str
        """
        allowed_values = ["EXACT", "BEGINS_WITH", "CONTAINS", "WILDCARD_EXPRESSION"]  # noqa: E501
        if match_type not in allowed_values:
            raise ValueError(
                "Invalid value for `match_type` ({0}), must be one of {1}"
                .format(match_type, allowed_values)
            )

        self._match_type = match_type

    @property
    def value(self):
        """Gets the value of this DimensionValue.

        The value of the dimension.

        :return: The value of this DimensionValue.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this DimensionValue.

        The value of the dimension.

        :param value: The value of this DimensionValue.
        :type value: str
        """

        self._value = value
