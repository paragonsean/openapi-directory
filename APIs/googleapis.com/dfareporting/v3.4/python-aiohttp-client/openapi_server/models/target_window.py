# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TargetWindow(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_html: str=None, target_window_option: str=None):
        """TargetWindow - a model defined in OpenAPI

        :param custom_html: The custom_html of this TargetWindow.
        :param target_window_option: The target_window_option of this TargetWindow.
        """
        self.openapi_types = {
            'custom_html': str,
            'target_window_option': str
        }

        self.attribute_map = {
            'custom_html': 'customHtml',
            'target_window_option': 'targetWindowOption'
        }

        self._custom_html = custom_html
        self._target_window_option = target_window_option

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TargetWindow':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TargetWindow of this TargetWindow.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_html(self):
        """Gets the custom_html of this TargetWindow.

        User-entered value.

        :return: The custom_html of this TargetWindow.
        :rtype: str
        """
        return self._custom_html

    @custom_html.setter
    def custom_html(self, custom_html):
        """Sets the custom_html of this TargetWindow.

        User-entered value.

        :param custom_html: The custom_html of this TargetWindow.
        :type custom_html: str
        """

        self._custom_html = custom_html

    @property
    def target_window_option(self):
        """Gets the target_window_option of this TargetWindow.

        Type of browser window for which the backup image of the flash creative can be displayed.

        :return: The target_window_option of this TargetWindow.
        :rtype: str
        """
        return self._target_window_option

    @target_window_option.setter
    def target_window_option(self, target_window_option):
        """Sets the target_window_option of this TargetWindow.

        Type of browser window for which the backup image of the flash creative can be displayed.

        :param target_window_option: The target_window_option of this TargetWindow.
        :type target_window_option: str
        """
        allowed_values = ["NEW_WINDOW", "CURRENT_WINDOW", "CUSTOM"]  # noqa: E501
        if target_window_option not in allowed_values:
            raise ValueError(
                "Invalid value for `target_window_option` ({0}), must be one of {1}"
                .format(target_window_option, allowed_values)
            )

        self._target_window_option = target_window_option
