# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.recipient import Recipient
from openapi_server import util


class ReportDelivery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email_owner: bool=None, email_owner_delivery_type: str=None, message: str=None, recipients: List[Recipient]=None):
        """ReportDelivery - a model defined in OpenAPI

        :param email_owner: The email_owner of this ReportDelivery.
        :param email_owner_delivery_type: The email_owner_delivery_type of this ReportDelivery.
        :param message: The message of this ReportDelivery.
        :param recipients: The recipients of this ReportDelivery.
        """
        self.openapi_types = {
            'email_owner': bool,
            'email_owner_delivery_type': str,
            'message': str,
            'recipients': List[Recipient]
        }

        self.attribute_map = {
            'email_owner': 'emailOwner',
            'email_owner_delivery_type': 'emailOwnerDeliveryType',
            'message': 'message',
            'recipients': 'recipients'
        }

        self._email_owner = email_owner
        self._email_owner_delivery_type = email_owner_delivery_type
        self._message = message
        self._recipients = recipients

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportDelivery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Report_delivery of this ReportDelivery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email_owner(self):
        """Gets the email_owner of this ReportDelivery.

        Whether the report should be emailed to the report owner.

        :return: The email_owner of this ReportDelivery.
        :rtype: bool
        """
        return self._email_owner

    @email_owner.setter
    def email_owner(self, email_owner):
        """Sets the email_owner of this ReportDelivery.

        Whether the report should be emailed to the report owner.

        :param email_owner: The email_owner of this ReportDelivery.
        :type email_owner: bool
        """

        self._email_owner = email_owner

    @property
    def email_owner_delivery_type(self):
        """Gets the email_owner_delivery_type of this ReportDelivery.

        The type of delivery for the owner to receive, if enabled.

        :return: The email_owner_delivery_type of this ReportDelivery.
        :rtype: str
        """
        return self._email_owner_delivery_type

    @email_owner_delivery_type.setter
    def email_owner_delivery_type(self, email_owner_delivery_type):
        """Sets the email_owner_delivery_type of this ReportDelivery.

        The type of delivery for the owner to receive, if enabled.

        :param email_owner_delivery_type: The email_owner_delivery_type of this ReportDelivery.
        :type email_owner_delivery_type: str
        """
        allowed_values = ["LINK", "ATTACHMENT"]  # noqa: E501
        if email_owner_delivery_type not in allowed_values:
            raise ValueError(
                "Invalid value for `email_owner_delivery_type` ({0}), must be one of {1}"
                .format(email_owner_delivery_type, allowed_values)
            )

        self._email_owner_delivery_type = email_owner_delivery_type

    @property
    def message(self):
        """Gets the message of this ReportDelivery.

        The message to be sent with each email.

        :return: The message of this ReportDelivery.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ReportDelivery.

        The message to be sent with each email.

        :param message: The message of this ReportDelivery.
        :type message: str
        """

        self._message = message

    @property
    def recipients(self):
        """Gets the recipients of this ReportDelivery.

        The list of recipients to which to email the report.

        :return: The recipients of this ReportDelivery.
        :rtype: List[Recipient]
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this ReportDelivery.

        The list of recipients to which to email the report.

        :param recipients: The recipients of this ReportDelivery.
        :type recipients: List[Recipient]
        """

        self._recipients = recipients
