# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.creative_click_through_url import CreativeClickThroughUrl
from openapi_server.models.popup_window_properties import PopupWindowProperties
from openapi_server import util


class CreativeCustomEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, advertiser_custom_event_id: str=None, advertiser_custom_event_name: str=None, advertiser_custom_event_type: str=None, artwork_label: str=None, artwork_type: str=None, exit_click_through_url: CreativeClickThroughUrl=None, id: str=None, popup_window_properties: PopupWindowProperties=None, target_type: str=None, video_reporting_id: str=None):
        """CreativeCustomEvent - a model defined in OpenAPI

        :param advertiser_custom_event_id: The advertiser_custom_event_id of this CreativeCustomEvent.
        :param advertiser_custom_event_name: The advertiser_custom_event_name of this CreativeCustomEvent.
        :param advertiser_custom_event_type: The advertiser_custom_event_type of this CreativeCustomEvent.
        :param artwork_label: The artwork_label of this CreativeCustomEvent.
        :param artwork_type: The artwork_type of this CreativeCustomEvent.
        :param exit_click_through_url: The exit_click_through_url of this CreativeCustomEvent.
        :param id: The id of this CreativeCustomEvent.
        :param popup_window_properties: The popup_window_properties of this CreativeCustomEvent.
        :param target_type: The target_type of this CreativeCustomEvent.
        :param video_reporting_id: The video_reporting_id of this CreativeCustomEvent.
        """
        self.openapi_types = {
            'advertiser_custom_event_id': str,
            'advertiser_custom_event_name': str,
            'advertiser_custom_event_type': str,
            'artwork_label': str,
            'artwork_type': str,
            'exit_click_through_url': CreativeClickThroughUrl,
            'id': str,
            'popup_window_properties': PopupWindowProperties,
            'target_type': str,
            'video_reporting_id': str
        }

        self.attribute_map = {
            'advertiser_custom_event_id': 'advertiserCustomEventId',
            'advertiser_custom_event_name': 'advertiserCustomEventName',
            'advertiser_custom_event_type': 'advertiserCustomEventType',
            'artwork_label': 'artworkLabel',
            'artwork_type': 'artworkType',
            'exit_click_through_url': 'exitClickThroughUrl',
            'id': 'id',
            'popup_window_properties': 'popupWindowProperties',
            'target_type': 'targetType',
            'video_reporting_id': 'videoReportingId'
        }

        self._advertiser_custom_event_id = advertiser_custom_event_id
        self._advertiser_custom_event_name = advertiser_custom_event_name
        self._advertiser_custom_event_type = advertiser_custom_event_type
        self._artwork_label = artwork_label
        self._artwork_type = artwork_type
        self._exit_click_through_url = exit_click_through_url
        self._id = id
        self._popup_window_properties = popup_window_properties
        self._target_type = target_type
        self._video_reporting_id = video_reporting_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreativeCustomEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreativeCustomEvent of this CreativeCustomEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advertiser_custom_event_id(self):
        """Gets the advertiser_custom_event_id of this CreativeCustomEvent.

        Unique ID of this event used by Reporting and Data Transfer. This is a read-only field.

        :return: The advertiser_custom_event_id of this CreativeCustomEvent.
        :rtype: str
        """
        return self._advertiser_custom_event_id

    @advertiser_custom_event_id.setter
    def advertiser_custom_event_id(self, advertiser_custom_event_id):
        """Sets the advertiser_custom_event_id of this CreativeCustomEvent.

        Unique ID of this event used by Reporting and Data Transfer. This is a read-only field.

        :param advertiser_custom_event_id: The advertiser_custom_event_id of this CreativeCustomEvent.
        :type advertiser_custom_event_id: str
        """

        self._advertiser_custom_event_id = advertiser_custom_event_id

    @property
    def advertiser_custom_event_name(self):
        """Gets the advertiser_custom_event_name of this CreativeCustomEvent.

        User-entered name for the event.

        :return: The advertiser_custom_event_name of this CreativeCustomEvent.
        :rtype: str
        """
        return self._advertiser_custom_event_name

    @advertiser_custom_event_name.setter
    def advertiser_custom_event_name(self, advertiser_custom_event_name):
        """Sets the advertiser_custom_event_name of this CreativeCustomEvent.

        User-entered name for the event.

        :param advertiser_custom_event_name: The advertiser_custom_event_name of this CreativeCustomEvent.
        :type advertiser_custom_event_name: str
        """

        self._advertiser_custom_event_name = advertiser_custom_event_name

    @property
    def advertiser_custom_event_type(self):
        """Gets the advertiser_custom_event_type of this CreativeCustomEvent.

        Type of the event. This is a read-only field.

        :return: The advertiser_custom_event_type of this CreativeCustomEvent.
        :rtype: str
        """
        return self._advertiser_custom_event_type

    @advertiser_custom_event_type.setter
    def advertiser_custom_event_type(self, advertiser_custom_event_type):
        """Sets the advertiser_custom_event_type of this CreativeCustomEvent.

        Type of the event. This is a read-only field.

        :param advertiser_custom_event_type: The advertiser_custom_event_type of this CreativeCustomEvent.
        :type advertiser_custom_event_type: str
        """
        allowed_values = ["ADVERTISER_EVENT_TIMER", "ADVERTISER_EVENT_EXIT", "ADVERTISER_EVENT_COUNTER"]  # noqa: E501
        if advertiser_custom_event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `advertiser_custom_event_type` ({0}), must be one of {1}"
                .format(advertiser_custom_event_type, allowed_values)
            )

        self._advertiser_custom_event_type = advertiser_custom_event_type

    @property
    def artwork_label(self):
        """Gets the artwork_label of this CreativeCustomEvent.

        Artwork label column, used to link events in Campaign Manager back to events in Studio. This is a required field and should not be modified after insertion.

        :return: The artwork_label of this CreativeCustomEvent.
        :rtype: str
        """
        return self._artwork_label

    @artwork_label.setter
    def artwork_label(self, artwork_label):
        """Sets the artwork_label of this CreativeCustomEvent.

        Artwork label column, used to link events in Campaign Manager back to events in Studio. This is a required field and should not be modified after insertion.

        :param artwork_label: The artwork_label of this CreativeCustomEvent.
        :type artwork_label: str
        """

        self._artwork_label = artwork_label

    @property
    def artwork_type(self):
        """Gets the artwork_type of this CreativeCustomEvent.

        Artwork type used by the creative.This is a read-only field.

        :return: The artwork_type of this CreativeCustomEvent.
        :rtype: str
        """
        return self._artwork_type

    @artwork_type.setter
    def artwork_type(self, artwork_type):
        """Sets the artwork_type of this CreativeCustomEvent.

        Artwork type used by the creative.This is a read-only field.

        :param artwork_type: The artwork_type of this CreativeCustomEvent.
        :type artwork_type: str
        """
        allowed_values = ["ARTWORK_TYPE_FLASH", "ARTWORK_TYPE_HTML5", "ARTWORK_TYPE_MIXED", "ARTWORK_TYPE_IMAGE"]  # noqa: E501
        if artwork_type not in allowed_values:
            raise ValueError(
                "Invalid value for `artwork_type` ({0}), must be one of {1}"
                .format(artwork_type, allowed_values)
            )

        self._artwork_type = artwork_type

    @property
    def exit_click_through_url(self):
        """Gets the exit_click_through_url of this CreativeCustomEvent.


        :return: The exit_click_through_url of this CreativeCustomEvent.
        :rtype: CreativeClickThroughUrl
        """
        return self._exit_click_through_url

    @exit_click_through_url.setter
    def exit_click_through_url(self, exit_click_through_url):
        """Sets the exit_click_through_url of this CreativeCustomEvent.


        :param exit_click_through_url: The exit_click_through_url of this CreativeCustomEvent.
        :type exit_click_through_url: CreativeClickThroughUrl
        """

        self._exit_click_through_url = exit_click_through_url

    @property
    def id(self):
        """Gets the id of this CreativeCustomEvent.

        ID of this event. This is a required field and should not be modified after insertion.

        :return: The id of this CreativeCustomEvent.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreativeCustomEvent.

        ID of this event. This is a required field and should not be modified after insertion.

        :param id: The id of this CreativeCustomEvent.
        :type id: str
        """

        self._id = id

    @property
    def popup_window_properties(self):
        """Gets the popup_window_properties of this CreativeCustomEvent.


        :return: The popup_window_properties of this CreativeCustomEvent.
        :rtype: PopupWindowProperties
        """
        return self._popup_window_properties

    @popup_window_properties.setter
    def popup_window_properties(self, popup_window_properties):
        """Sets the popup_window_properties of this CreativeCustomEvent.


        :param popup_window_properties: The popup_window_properties of this CreativeCustomEvent.
        :type popup_window_properties: PopupWindowProperties
        """

        self._popup_window_properties = popup_window_properties

    @property
    def target_type(self):
        """Gets the target_type of this CreativeCustomEvent.

        Target type used by the event.

        :return: The target_type of this CreativeCustomEvent.
        :rtype: str
        """
        return self._target_type

    @target_type.setter
    def target_type(self, target_type):
        """Sets the target_type of this CreativeCustomEvent.

        Target type used by the event.

        :param target_type: The target_type of this CreativeCustomEvent.
        :type target_type: str
        """
        allowed_values = ["TARGET_BLANK", "TARGET_TOP", "TARGET_SELF", "TARGET_PARENT", "TARGET_POPUP"]  # noqa: E501
        if target_type not in allowed_values:
            raise ValueError(
                "Invalid value for `target_type` ({0}), must be one of {1}"
                .format(target_type, allowed_values)
            )

        self._target_type = target_type

    @property
    def video_reporting_id(self):
        """Gets the video_reporting_id of this CreativeCustomEvent.

        Video reporting ID, used to differentiate multiple videos in a single creative. This is a read-only field.

        :return: The video_reporting_id of this CreativeCustomEvent.
        :rtype: str
        """
        return self._video_reporting_id

    @video_reporting_id.setter
    def video_reporting_id(self, video_reporting_id):
        """Sets the video_reporting_id of this CreativeCustomEvent.

        Video reporting ID, used to differentiate multiple videos in a single creative. This is a read-only field.

        :param video_reporting_id: The video_reporting_id of this CreativeCustomEvent.
        :type video_reporting_id: str
        """

        self._video_reporting_id = video_reporting_id
