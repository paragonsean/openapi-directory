# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccountPermission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_profiles: List[str]=None, id: str=None, kind: str=None, level: str=None, name: str=None, permission_group_id: str=None):
        """AccountPermission - a model defined in OpenAPI

        :param account_profiles: The account_profiles of this AccountPermission.
        :param id: The id of this AccountPermission.
        :param kind: The kind of this AccountPermission.
        :param level: The level of this AccountPermission.
        :param name: The name of this AccountPermission.
        :param permission_group_id: The permission_group_id of this AccountPermission.
        """
        self.openapi_types = {
            'account_profiles': List[str],
            'id': str,
            'kind': str,
            'level': str,
            'name': str,
            'permission_group_id': str
        }

        self.attribute_map = {
            'account_profiles': 'accountProfiles',
            'id': 'id',
            'kind': 'kind',
            'level': 'level',
            'name': 'name',
            'permission_group_id': 'permissionGroupId'
        }

        self._account_profiles = account_profiles
        self._id = id
        self._kind = kind
        self._level = level
        self._name = name
        self._permission_group_id = permission_group_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountPermission':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountPermission of this AccountPermission.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_profiles(self):
        """Gets the account_profiles of this AccountPermission.

        Account profiles associated with this account permission. Possible values are: - \"ACCOUNT_PROFILE_BASIC\" - \"ACCOUNT_PROFILE_STANDARD\" 

        :return: The account_profiles of this AccountPermission.
        :rtype: List[str]
        """
        return self._account_profiles

    @account_profiles.setter
    def account_profiles(self, account_profiles):
        """Sets the account_profiles of this AccountPermission.

        Account profiles associated with this account permission. Possible values are: - \"ACCOUNT_PROFILE_BASIC\" - \"ACCOUNT_PROFILE_STANDARD\" 

        :param account_profiles: The account_profiles of this AccountPermission.
        :type account_profiles: List[str]
        """
        allowed_values = ["ACCOUNT_PROFILE_BASIC", "ACCOUNT_PROFILE_STANDARD"]  # noqa: E501
        if not set(account_profiles).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `account_profiles` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(account_profiles) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._account_profiles = account_profiles

    @property
    def id(self):
        """Gets the id of this AccountPermission.

        ID of this account permission.

        :return: The id of this AccountPermission.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountPermission.

        ID of this account permission.

        :param id: The id of this AccountPermission.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this AccountPermission.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#accountPermission\".

        :return: The kind of this AccountPermission.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this AccountPermission.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#accountPermission\".

        :param kind: The kind of this AccountPermission.
        :type kind: str
        """

        self._kind = kind

    @property
    def level(self):
        """Gets the level of this AccountPermission.

        Administrative level required to enable this account permission.

        :return: The level of this AccountPermission.
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this AccountPermission.

        Administrative level required to enable this account permission.

        :param level: The level of this AccountPermission.
        :type level: str
        """
        allowed_values = ["USER", "ADMINISTRATOR"]  # noqa: E501
        if level not in allowed_values:
            raise ValueError(
                "Invalid value for `level` ({0}), must be one of {1}"
                .format(level, allowed_values)
            )

        self._level = level

    @property
    def name(self):
        """Gets the name of this AccountPermission.

        Name of this account permission.

        :return: The name of this AccountPermission.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountPermission.

        Name of this account permission.

        :param name: The name of this AccountPermission.
        :type name: str
        """

        self._name = name

    @property
    def permission_group_id(self):
        """Gets the permission_group_id of this AccountPermission.

        Permission group of this account permission.

        :return: The permission_group_id of this AccountPermission.
        :rtype: str
        """
        return self._permission_group_id

    @permission_group_id.setter
    def permission_group_id(self, permission_group_id):
        """Sets the permission_group_id of this AccountPermission.

        Permission group of this account permission.

        :param permission_group_id: The permission_group_id of this AccountPermission.
        :type permission_group_id: str
        """

        self._permission_group_id = permission_group_id
