# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_filter import EventFilter
from openapi_server import util


class DisjunctiveMatchStatement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_filters: List[EventFilter]=None, kind: str=None):
        """DisjunctiveMatchStatement - a model defined in OpenAPI

        :param event_filters: The event_filters of this DisjunctiveMatchStatement.
        :param kind: The kind of this DisjunctiveMatchStatement.
        """
        self.openapi_types = {
            'event_filters': List[EventFilter],
            'kind': str
        }

        self.attribute_map = {
            'event_filters': 'eventFilters',
            'kind': 'kind'
        }

        self._event_filters = event_filters
        self._kind = kind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DisjunctiveMatchStatement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DisjunctiveMatchStatement of this DisjunctiveMatchStatement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_filters(self):
        """Gets the event_filters of this DisjunctiveMatchStatement.

        The event filters contained within this disjunctive match statement.

        :return: The event_filters of this DisjunctiveMatchStatement.
        :rtype: List[EventFilter]
        """
        return self._event_filters

    @event_filters.setter
    def event_filters(self, event_filters):
        """Sets the event_filters of this DisjunctiveMatchStatement.

        The event filters contained within this disjunctive match statement.

        :param event_filters: The event_filters of this DisjunctiveMatchStatement.
        :type event_filters: List[EventFilter]
        """

        self._event_filters = event_filters

    @property
    def kind(self):
        """Gets the kind of this DisjunctiveMatchStatement.

        The kind of resource this is, in this case dfareporting#disjunctiveMatchStatement.

        :return: The kind of this DisjunctiveMatchStatement.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this DisjunctiveMatchStatement.

        The kind of resource this is, in this case dfareporting#disjunctiveMatchStatement.

        :param kind: The kind of this DisjunctiveMatchStatement.
        :type kind: str
        """

        self._kind = kind
