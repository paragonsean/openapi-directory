# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.video_offset import VideoOffset
from openapi_server import util


class SiteSkippableSetting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kind: str=None, progress_offset: VideoOffset=None, skip_offset: VideoOffset=None, skippable: bool=None):
        """SiteSkippableSetting - a model defined in OpenAPI

        :param kind: The kind of this SiteSkippableSetting.
        :param progress_offset: The progress_offset of this SiteSkippableSetting.
        :param skip_offset: The skip_offset of this SiteSkippableSetting.
        :param skippable: The skippable of this SiteSkippableSetting.
        """
        self.openapi_types = {
            'kind': str,
            'progress_offset': VideoOffset,
            'skip_offset': VideoOffset,
            'skippable': bool
        }

        self.attribute_map = {
            'kind': 'kind',
            'progress_offset': 'progressOffset',
            'skip_offset': 'skipOffset',
            'skippable': 'skippable'
        }

        self._kind = kind
        self._progress_offset = progress_offset
        self._skip_offset = skip_offset
        self._skippable = skippable

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SiteSkippableSetting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SiteSkippableSetting of this SiteSkippableSetting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kind(self):
        """Gets the kind of this SiteSkippableSetting.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#siteSkippableSetting\".

        :return: The kind of this SiteSkippableSetting.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this SiteSkippableSetting.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#siteSkippableSetting\".

        :param kind: The kind of this SiteSkippableSetting.
        :type kind: str
        """

        self._kind = kind

    @property
    def progress_offset(self):
        """Gets the progress_offset of this SiteSkippableSetting.


        :return: The progress_offset of this SiteSkippableSetting.
        :rtype: VideoOffset
        """
        return self._progress_offset

    @progress_offset.setter
    def progress_offset(self, progress_offset):
        """Sets the progress_offset of this SiteSkippableSetting.


        :param progress_offset: The progress_offset of this SiteSkippableSetting.
        :type progress_offset: VideoOffset
        """

        self._progress_offset = progress_offset

    @property
    def skip_offset(self):
        """Gets the skip_offset of this SiteSkippableSetting.


        :return: The skip_offset of this SiteSkippableSetting.
        :rtype: VideoOffset
        """
        return self._skip_offset

    @skip_offset.setter
    def skip_offset(self, skip_offset):
        """Sets the skip_offset of this SiteSkippableSetting.


        :param skip_offset: The skip_offset of this SiteSkippableSetting.
        :type skip_offset: VideoOffset
        """

        self._skip_offset = skip_offset

    @property
    def skippable(self):
        """Gets the skippable of this SiteSkippableSetting.

        Whether the user can skip creatives served to this site. This will act as default for new placements created under this site.

        :return: The skippable of this SiteSkippableSetting.
        :rtype: bool
        """
        return self._skippable

    @skippable.setter
    def skippable(self, skippable):
        """Sets the skippable of this SiteSkippableSetting.

        Whether the user can skip creatives served to this site. This will act as default for new placements created under this site.

        :param skippable: The skippable of this SiteSkippableSetting.
        :type skippable: bool
        """

        self._skippable = skippable
