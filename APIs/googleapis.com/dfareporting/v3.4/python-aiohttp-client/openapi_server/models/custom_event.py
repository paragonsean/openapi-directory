# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.custom_event_click_annotation import CustomEventClickAnnotation
from openapi_server.models.custom_event_impression_annotation import CustomEventImpressionAnnotation
from openapi_server.models.custom_event_insert import CustomEventInsert
from openapi_server.models.custom_variable import CustomVariable
from openapi_server import util


class CustomEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotate_click_event: CustomEventClickAnnotation=None, annotate_impression_event: CustomEventImpressionAnnotation=None, custom_variables: List[CustomVariable]=None, event_type: str=None, floodlight_configuration_id: str=None, insert_event: CustomEventInsert=None, kind: str=None, ordinal: str=None, timestamp_micros: str=None):
        """CustomEvent - a model defined in OpenAPI

        :param annotate_click_event: The annotate_click_event of this CustomEvent.
        :param annotate_impression_event: The annotate_impression_event of this CustomEvent.
        :param custom_variables: The custom_variables of this CustomEvent.
        :param event_type: The event_type of this CustomEvent.
        :param floodlight_configuration_id: The floodlight_configuration_id of this CustomEvent.
        :param insert_event: The insert_event of this CustomEvent.
        :param kind: The kind of this CustomEvent.
        :param ordinal: The ordinal of this CustomEvent.
        :param timestamp_micros: The timestamp_micros of this CustomEvent.
        """
        self.openapi_types = {
            'annotate_click_event': CustomEventClickAnnotation,
            'annotate_impression_event': CustomEventImpressionAnnotation,
            'custom_variables': List[CustomVariable],
            'event_type': str,
            'floodlight_configuration_id': str,
            'insert_event': CustomEventInsert,
            'kind': str,
            'ordinal': str,
            'timestamp_micros': str
        }

        self.attribute_map = {
            'annotate_click_event': 'annotateClickEvent',
            'annotate_impression_event': 'annotateImpressionEvent',
            'custom_variables': 'customVariables',
            'event_type': 'eventType',
            'floodlight_configuration_id': 'floodlightConfigurationId',
            'insert_event': 'insertEvent',
            'kind': 'kind',
            'ordinal': 'ordinal',
            'timestamp_micros': 'timestampMicros'
        }

        self._annotate_click_event = annotate_click_event
        self._annotate_impression_event = annotate_impression_event
        self._custom_variables = custom_variables
        self._event_type = event_type
        self._floodlight_configuration_id = floodlight_configuration_id
        self._insert_event = insert_event
        self._kind = kind
        self._ordinal = ordinal
        self._timestamp_micros = timestamp_micros

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomEvent of this CustomEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotate_click_event(self):
        """Gets the annotate_click_event of this CustomEvent.


        :return: The annotate_click_event of this CustomEvent.
        :rtype: CustomEventClickAnnotation
        """
        return self._annotate_click_event

    @annotate_click_event.setter
    def annotate_click_event(self, annotate_click_event):
        """Sets the annotate_click_event of this CustomEvent.


        :param annotate_click_event: The annotate_click_event of this CustomEvent.
        :type annotate_click_event: CustomEventClickAnnotation
        """

        self._annotate_click_event = annotate_click_event

    @property
    def annotate_impression_event(self):
        """Gets the annotate_impression_event of this CustomEvent.


        :return: The annotate_impression_event of this CustomEvent.
        :rtype: CustomEventImpressionAnnotation
        """
        return self._annotate_impression_event

    @annotate_impression_event.setter
    def annotate_impression_event(self, annotate_impression_event):
        """Sets the annotate_impression_event of this CustomEvent.


        :param annotate_impression_event: The annotate_impression_event of this CustomEvent.
        :type annotate_impression_event: CustomEventImpressionAnnotation
        """

        self._annotate_impression_event = annotate_impression_event

    @property
    def custom_variables(self):
        """Gets the custom_variables of this CustomEvent.

        Custom variables associated with the event.

        :return: The custom_variables of this CustomEvent.
        :rtype: List[CustomVariable]
        """
        return self._custom_variables

    @custom_variables.setter
    def custom_variables(self, custom_variables):
        """Sets the custom_variables of this CustomEvent.

        Custom variables associated with the event.

        :param custom_variables: The custom_variables of this CustomEvent.
        :type custom_variables: List[CustomVariable]
        """

        self._custom_variables = custom_variables

    @property
    def event_type(self):
        """Gets the event_type of this CustomEvent.

        The type of event. If INSERT, the fields in insertEvent need to be populated. If ANNOTATE, the fields in either annotateClickEvent or annotateImpressionEvent need to be populated.

        :return: The event_type of this CustomEvent.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this CustomEvent.

        The type of event. If INSERT, the fields in insertEvent need to be populated. If ANNOTATE, the fields in either annotateClickEvent or annotateImpressionEvent need to be populated.

        :param event_type: The event_type of this CustomEvent.
        :type event_type: str
        """
        allowed_values = ["UNKNOWN", "INSERT", "ANNOTATE"]  # noqa: E501
        if event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def floodlight_configuration_id(self):
        """Gets the floodlight_configuration_id of this CustomEvent.

        Floodlight configuration ID of the advertiser the event is linked to. This is a required field.

        :return: The floodlight_configuration_id of this CustomEvent.
        :rtype: str
        """
        return self._floodlight_configuration_id

    @floodlight_configuration_id.setter
    def floodlight_configuration_id(self, floodlight_configuration_id):
        """Sets the floodlight_configuration_id of this CustomEvent.

        Floodlight configuration ID of the advertiser the event is linked to. This is a required field.

        :param floodlight_configuration_id: The floodlight_configuration_id of this CustomEvent.
        :type floodlight_configuration_id: str
        """

        self._floodlight_configuration_id = floodlight_configuration_id

    @property
    def insert_event(self):
        """Gets the insert_event of this CustomEvent.


        :return: The insert_event of this CustomEvent.
        :rtype: CustomEventInsert
        """
        return self._insert_event

    @insert_event.setter
    def insert_event(self, insert_event):
        """Sets the insert_event of this CustomEvent.


        :param insert_event: The insert_event of this CustomEvent.
        :type insert_event: CustomEventInsert
        """

        self._insert_event = insert_event

    @property
    def kind(self):
        """Gets the kind of this CustomEvent.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#customEvent\".

        :return: The kind of this CustomEvent.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this CustomEvent.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#customEvent\".

        :param kind: The kind of this CustomEvent.
        :type kind: str
        """

        self._kind = kind

    @property
    def ordinal(self):
        """Gets the ordinal of this CustomEvent.

        The ordinal of this custom event. This is a required field.

        :return: The ordinal of this CustomEvent.
        :rtype: str
        """
        return self._ordinal

    @ordinal.setter
    def ordinal(self, ordinal):
        """Sets the ordinal of this CustomEvent.

        The ordinal of this custom event. This is a required field.

        :param ordinal: The ordinal of this CustomEvent.
        :type ordinal: str
        """

        self._ordinal = ordinal

    @property
    def timestamp_micros(self):
        """Gets the timestamp_micros of this CustomEvent.

        The timestamp of this custom event, in Unix epoch micros. This is a required field.

        :return: The timestamp_micros of this CustomEvent.
        :rtype: str
        """
        return self._timestamp_micros

    @timestamp_micros.setter
    def timestamp_micros(self, timestamp_micros):
        """Sets the timestamp_micros of this CustomEvent.

        The timestamp of this custom event, in Unix epoch micros. This is a required field.

        :param timestamp_micros: The timestamp_micros of this CustomEvent.
        :type timestamp_micros: str
        """

        self._timestamp_micros = timestamp_micros
