# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_grouping import ChannelGrouping
from openapi_server.models.date_range import DateRange
from openapi_server.models.dimension_value import DimensionValue
from openapi_server.models.path_filter import PathFilter
from openapi_server.models.sorted_dimension import SortedDimension
from openapi_server import util


class ReportPathAttributionCriteria(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activity_filters: List[DimensionValue]=None, custom_channel_grouping: ChannelGrouping=None, date_range: DateRange=None, dimensions: List[SortedDimension]=None, floodlight_config_id: DimensionValue=None, metric_names: List[str]=None, path_filters: List[PathFilter]=None):
        """ReportPathAttributionCriteria - a model defined in OpenAPI

        :param activity_filters: The activity_filters of this ReportPathAttributionCriteria.
        :param custom_channel_grouping: The custom_channel_grouping of this ReportPathAttributionCriteria.
        :param date_range: The date_range of this ReportPathAttributionCriteria.
        :param dimensions: The dimensions of this ReportPathAttributionCriteria.
        :param floodlight_config_id: The floodlight_config_id of this ReportPathAttributionCriteria.
        :param metric_names: The metric_names of this ReportPathAttributionCriteria.
        :param path_filters: The path_filters of this ReportPathAttributionCriteria.
        """
        self.openapi_types = {
            'activity_filters': List[DimensionValue],
            'custom_channel_grouping': ChannelGrouping,
            'date_range': DateRange,
            'dimensions': List[SortedDimension],
            'floodlight_config_id': DimensionValue,
            'metric_names': List[str],
            'path_filters': List[PathFilter]
        }

        self.attribute_map = {
            'activity_filters': 'activityFilters',
            'custom_channel_grouping': 'customChannelGrouping',
            'date_range': 'dateRange',
            'dimensions': 'dimensions',
            'floodlight_config_id': 'floodlightConfigId',
            'metric_names': 'metricNames',
            'path_filters': 'pathFilters'
        }

        self._activity_filters = activity_filters
        self._custom_channel_grouping = custom_channel_grouping
        self._date_range = date_range
        self._dimensions = dimensions
        self._floodlight_config_id = floodlight_config_id
        self._metric_names = metric_names
        self._path_filters = path_filters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportPathAttributionCriteria':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Report_pathAttributionCriteria of this ReportPathAttributionCriteria.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activity_filters(self):
        """Gets the activity_filters of this ReportPathAttributionCriteria.

        The list of 'dfa:activity' values to filter on.

        :return: The activity_filters of this ReportPathAttributionCriteria.
        :rtype: List[DimensionValue]
        """
        return self._activity_filters

    @activity_filters.setter
    def activity_filters(self, activity_filters):
        """Sets the activity_filters of this ReportPathAttributionCriteria.

        The list of 'dfa:activity' values to filter on.

        :param activity_filters: The activity_filters of this ReportPathAttributionCriteria.
        :type activity_filters: List[DimensionValue]
        """

        self._activity_filters = activity_filters

    @property
    def custom_channel_grouping(self):
        """Gets the custom_channel_grouping of this ReportPathAttributionCriteria.


        :return: The custom_channel_grouping of this ReportPathAttributionCriteria.
        :rtype: ChannelGrouping
        """
        return self._custom_channel_grouping

    @custom_channel_grouping.setter
    def custom_channel_grouping(self, custom_channel_grouping):
        """Sets the custom_channel_grouping of this ReportPathAttributionCriteria.


        :param custom_channel_grouping: The custom_channel_grouping of this ReportPathAttributionCriteria.
        :type custom_channel_grouping: ChannelGrouping
        """

        self._custom_channel_grouping = custom_channel_grouping

    @property
    def date_range(self):
        """Gets the date_range of this ReportPathAttributionCriteria.


        :return: The date_range of this ReportPathAttributionCriteria.
        :rtype: DateRange
        """
        return self._date_range

    @date_range.setter
    def date_range(self, date_range):
        """Sets the date_range of this ReportPathAttributionCriteria.


        :param date_range: The date_range of this ReportPathAttributionCriteria.
        :type date_range: DateRange
        """

        self._date_range = date_range

    @property
    def dimensions(self):
        """Gets the dimensions of this ReportPathAttributionCriteria.

        The list of dimensions the report should include.

        :return: The dimensions of this ReportPathAttributionCriteria.
        :rtype: List[SortedDimension]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this ReportPathAttributionCriteria.

        The list of dimensions the report should include.

        :param dimensions: The dimensions of this ReportPathAttributionCriteria.
        :type dimensions: List[SortedDimension]
        """

        self._dimensions = dimensions

    @property
    def floodlight_config_id(self):
        """Gets the floodlight_config_id of this ReportPathAttributionCriteria.


        :return: The floodlight_config_id of this ReportPathAttributionCriteria.
        :rtype: DimensionValue
        """
        return self._floodlight_config_id

    @floodlight_config_id.setter
    def floodlight_config_id(self, floodlight_config_id):
        """Sets the floodlight_config_id of this ReportPathAttributionCriteria.


        :param floodlight_config_id: The floodlight_config_id of this ReportPathAttributionCriteria.
        :type floodlight_config_id: DimensionValue
        """

        self._floodlight_config_id = floodlight_config_id

    @property
    def metric_names(self):
        """Gets the metric_names of this ReportPathAttributionCriteria.

        The list of names of metrics the report should include.

        :return: The metric_names of this ReportPathAttributionCriteria.
        :rtype: List[str]
        """
        return self._metric_names

    @metric_names.setter
    def metric_names(self, metric_names):
        """Sets the metric_names of this ReportPathAttributionCriteria.

        The list of names of metrics the report should include.

        :param metric_names: The metric_names of this ReportPathAttributionCriteria.
        :type metric_names: List[str]
        """

        self._metric_names = metric_names

    @property
    def path_filters(self):
        """Gets the path_filters of this ReportPathAttributionCriteria.

        Path Filters.

        :return: The path_filters of this ReportPathAttributionCriteria.
        :rtype: List[PathFilter]
        """
        return self._path_filters

    @path_filters.setter
    def path_filters(self, path_filters):
        """Sets the path_filters of this ReportPathAttributionCriteria.

        Path Filters.

        :param path_filters: The path_filters of this ReportPathAttributionCriteria.
        :type path_filters: List[PathFilter]
        """

        self._path_filters = path_filters
