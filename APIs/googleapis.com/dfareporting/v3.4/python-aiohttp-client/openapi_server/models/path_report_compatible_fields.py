# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dimension import Dimension
from openapi_server.models.metric import Metric
from openapi_server import util


class PathReportCompatibleFields(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_groupings: List[Dimension]=None, dimensions: List[Dimension]=None, kind: str=None, metrics: List[Metric]=None, path_filters: List[Dimension]=None):
        """PathReportCompatibleFields - a model defined in OpenAPI

        :param channel_groupings: The channel_groupings of this PathReportCompatibleFields.
        :param dimensions: The dimensions of this PathReportCompatibleFields.
        :param kind: The kind of this PathReportCompatibleFields.
        :param metrics: The metrics of this PathReportCompatibleFields.
        :param path_filters: The path_filters of this PathReportCompatibleFields.
        """
        self.openapi_types = {
            'channel_groupings': List[Dimension],
            'dimensions': List[Dimension],
            'kind': str,
            'metrics': List[Metric],
            'path_filters': List[Dimension]
        }

        self.attribute_map = {
            'channel_groupings': 'channelGroupings',
            'dimensions': 'dimensions',
            'kind': 'kind',
            'metrics': 'metrics',
            'path_filters': 'pathFilters'
        }

        self._channel_groupings = channel_groupings
        self._dimensions = dimensions
        self._kind = kind
        self._metrics = metrics
        self._path_filters = path_filters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PathReportCompatibleFields':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PathReportCompatibleFields of this PathReportCompatibleFields.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_groupings(self):
        """Gets the channel_groupings of this PathReportCompatibleFields.

        Dimensions which are compatible to be selected in the \"channelGroupings\" section of the report.

        :return: The channel_groupings of this PathReportCompatibleFields.
        :rtype: List[Dimension]
        """
        return self._channel_groupings

    @channel_groupings.setter
    def channel_groupings(self, channel_groupings):
        """Sets the channel_groupings of this PathReportCompatibleFields.

        Dimensions which are compatible to be selected in the \"channelGroupings\" section of the report.

        :param channel_groupings: The channel_groupings of this PathReportCompatibleFields.
        :type channel_groupings: List[Dimension]
        """

        self._channel_groupings = channel_groupings

    @property
    def dimensions(self):
        """Gets the dimensions of this PathReportCompatibleFields.

        Dimensions which are compatible to be selected in the \"dimensions\" section of the report.

        :return: The dimensions of this PathReportCompatibleFields.
        :rtype: List[Dimension]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this PathReportCompatibleFields.

        Dimensions which are compatible to be selected in the \"dimensions\" section of the report.

        :param dimensions: The dimensions of this PathReportCompatibleFields.
        :type dimensions: List[Dimension]
        """

        self._dimensions = dimensions

    @property
    def kind(self):
        """Gets the kind of this PathReportCompatibleFields.

        The kind of resource this is, in this case dfareporting#pathReportCompatibleFields.

        :return: The kind of this PathReportCompatibleFields.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this PathReportCompatibleFields.

        The kind of resource this is, in this case dfareporting#pathReportCompatibleFields.

        :param kind: The kind of this PathReportCompatibleFields.
        :type kind: str
        """

        self._kind = kind

    @property
    def metrics(self):
        """Gets the metrics of this PathReportCompatibleFields.

        Metrics which are compatible to be selected in the \"metricNames\" section of the report.

        :return: The metrics of this PathReportCompatibleFields.
        :rtype: List[Metric]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this PathReportCompatibleFields.

        Metrics which are compatible to be selected in the \"metricNames\" section of the report.

        :param metrics: The metrics of this PathReportCompatibleFields.
        :type metrics: List[Metric]
        """

        self._metrics = metrics

    @property
    def path_filters(self):
        """Gets the path_filters of this PathReportCompatibleFields.

        Dimensions which are compatible to be selected in the \"pathFilters\" section of the report.

        :return: The path_filters of this PathReportCompatibleFields.
        :rtype: List[Dimension]
        """
        return self._path_filters

    @path_filters.setter
    def path_filters(self, path_filters):
        """Sets the path_filters of this PathReportCompatibleFields.

        Dimensions which are compatible to be selected in the \"pathFilters\" section of the report.

        :param path_filters: The path_filters of this PathReportCompatibleFields.
        :type path_filters: List[Dimension]
        """

        self._path_filters = path_filters
