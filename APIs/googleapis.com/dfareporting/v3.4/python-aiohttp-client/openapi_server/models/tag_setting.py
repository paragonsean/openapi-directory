# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TagSetting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_key_values: str=None, include_click_through_urls: bool=None, include_click_tracking: bool=None, keyword_option: str=None):
        """TagSetting - a model defined in OpenAPI

        :param additional_key_values: The additional_key_values of this TagSetting.
        :param include_click_through_urls: The include_click_through_urls of this TagSetting.
        :param include_click_tracking: The include_click_tracking of this TagSetting.
        :param keyword_option: The keyword_option of this TagSetting.
        """
        self.openapi_types = {
            'additional_key_values': str,
            'include_click_through_urls': bool,
            'include_click_tracking': bool,
            'keyword_option': str
        }

        self.attribute_map = {
            'additional_key_values': 'additionalKeyValues',
            'include_click_through_urls': 'includeClickThroughUrls',
            'include_click_tracking': 'includeClickTracking',
            'keyword_option': 'keywordOption'
        }

        self._additional_key_values = additional_key_values
        self._include_click_through_urls = include_click_through_urls
        self._include_click_tracking = include_click_tracking
        self._keyword_option = keyword_option

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TagSetting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TagSetting of this TagSetting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_key_values(self):
        """Gets the additional_key_values of this TagSetting.

        Additional key-values to be included in tags. Each key-value pair must be of the form key=value, and pairs must be separated by a semicolon (;). Keys and values must not contain commas. For example, id=2;color=red is a valid value for this field.

        :return: The additional_key_values of this TagSetting.
        :rtype: str
        """
        return self._additional_key_values

    @additional_key_values.setter
    def additional_key_values(self, additional_key_values):
        """Sets the additional_key_values of this TagSetting.

        Additional key-values to be included in tags. Each key-value pair must be of the form key=value, and pairs must be separated by a semicolon (;). Keys and values must not contain commas. For example, id=2;color=red is a valid value for this field.

        :param additional_key_values: The additional_key_values of this TagSetting.
        :type additional_key_values: str
        """

        self._additional_key_values = additional_key_values

    @property
    def include_click_through_urls(self):
        """Gets the include_click_through_urls of this TagSetting.

        Whether static landing page URLs should be included in the tags. This setting applies only to placements.

        :return: The include_click_through_urls of this TagSetting.
        :rtype: bool
        """
        return self._include_click_through_urls

    @include_click_through_urls.setter
    def include_click_through_urls(self, include_click_through_urls):
        """Sets the include_click_through_urls of this TagSetting.

        Whether static landing page URLs should be included in the tags. This setting applies only to placements.

        :param include_click_through_urls: The include_click_through_urls of this TagSetting.
        :type include_click_through_urls: bool
        """

        self._include_click_through_urls = include_click_through_urls

    @property
    def include_click_tracking(self):
        """Gets the include_click_tracking of this TagSetting.

        Whether click-tracking string should be included in the tags.

        :return: The include_click_tracking of this TagSetting.
        :rtype: bool
        """
        return self._include_click_tracking

    @include_click_tracking.setter
    def include_click_tracking(self, include_click_tracking):
        """Sets the include_click_tracking of this TagSetting.

        Whether click-tracking string should be included in the tags.

        :param include_click_tracking: The include_click_tracking of this TagSetting.
        :type include_click_tracking: bool
        """

        self._include_click_tracking = include_click_tracking

    @property
    def keyword_option(self):
        """Gets the keyword_option of this TagSetting.

        Option specifying how keywords are embedded in ad tags. This setting can be used to specify whether keyword placeholders are inserted in placement tags for this site. Publishers can then add keywords to those placeholders.

        :return: The keyword_option of this TagSetting.
        :rtype: str
        """
        return self._keyword_option

    @keyword_option.setter
    def keyword_option(self, keyword_option):
        """Sets the keyword_option of this TagSetting.

        Option specifying how keywords are embedded in ad tags. This setting can be used to specify whether keyword placeholders are inserted in placement tags for this site. Publishers can then add keywords to those placeholders.

        :param keyword_option: The keyword_option of this TagSetting.
        :type keyword_option: str
        """
        allowed_values = ["PLACEHOLDER_WITH_LIST_OF_KEYWORDS", "IGNORE", "GENERATE_SEPARATE_TAG_FOR_EACH_KEYWORD"]  # noqa: E501
        if keyword_option not in allowed_values:
            raise ValueError(
                "Invalid value for `keyword_option` ({0}), must be one of {1}"
                .format(keyword_option, allowed_values)
            )

        self._keyword_option = keyword_option
