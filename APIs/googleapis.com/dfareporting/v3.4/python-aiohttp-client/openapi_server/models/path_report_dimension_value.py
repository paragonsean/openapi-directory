# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PathReportDimensionValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dimension_name: str=None, ids: List[str]=None, kind: str=None, match_type: str=None, values: List[str]=None):
        """PathReportDimensionValue - a model defined in OpenAPI

        :param dimension_name: The dimension_name of this PathReportDimensionValue.
        :param ids: The ids of this PathReportDimensionValue.
        :param kind: The kind of this PathReportDimensionValue.
        :param match_type: The match_type of this PathReportDimensionValue.
        :param values: The values of this PathReportDimensionValue.
        """
        self.openapi_types = {
            'dimension_name': str,
            'ids': List[str],
            'kind': str,
            'match_type': str,
            'values': List[str]
        }

        self.attribute_map = {
            'dimension_name': 'dimensionName',
            'ids': 'ids',
            'kind': 'kind',
            'match_type': 'matchType',
            'values': 'values'
        }

        self._dimension_name = dimension_name
        self._ids = ids
        self._kind = kind
        self._match_type = match_type
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PathReportDimensionValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PathReportDimensionValue of this PathReportDimensionValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dimension_name(self):
        """Gets the dimension_name of this PathReportDimensionValue.

        The name of the dimension.

        :return: The dimension_name of this PathReportDimensionValue.
        :rtype: str
        """
        return self._dimension_name

    @dimension_name.setter
    def dimension_name(self, dimension_name):
        """Sets the dimension_name of this PathReportDimensionValue.

        The name of the dimension.

        :param dimension_name: The dimension_name of this PathReportDimensionValue.
        :type dimension_name: str
        """

        self._dimension_name = dimension_name

    @property
    def ids(self):
        """Gets the ids of this PathReportDimensionValue.

        The possible ID's associated with the value if available.

        :return: The ids of this PathReportDimensionValue.
        :rtype: List[str]
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this PathReportDimensionValue.

        The possible ID's associated with the value if available.

        :param ids: The ids of this PathReportDimensionValue.
        :type ids: List[str]
        """

        self._ids = ids

    @property
    def kind(self):
        """Gets the kind of this PathReportDimensionValue.

        The kind of resource this is, in this case dfareporting#pathReportDimensionValue.

        :return: The kind of this PathReportDimensionValue.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this PathReportDimensionValue.

        The kind of resource this is, in this case dfareporting#pathReportDimensionValue.

        :param kind: The kind of this PathReportDimensionValue.
        :type kind: str
        """

        self._kind = kind

    @property
    def match_type(self):
        """Gets the match_type of this PathReportDimensionValue.

        Determines how the 'value' field is matched when filtering. If not specified, defaults to EXACT. If set to WILDCARD_EXPRESSION, '*' is allowed as a placeholder for variable length character sequences, and it can be escaped with a backslash. Note, only paid search dimensions ('dfa:paidSearch*') allow a matchType other than EXACT.

        :return: The match_type of this PathReportDimensionValue.
        :rtype: str
        """
        return self._match_type

    @match_type.setter
    def match_type(self, match_type):
        """Sets the match_type of this PathReportDimensionValue.

        Determines how the 'value' field is matched when filtering. If not specified, defaults to EXACT. If set to WILDCARD_EXPRESSION, '*' is allowed as a placeholder for variable length character sequences, and it can be escaped with a backslash. Note, only paid search dimensions ('dfa:paidSearch*') allow a matchType other than EXACT.

        :param match_type: The match_type of this PathReportDimensionValue.
        :type match_type: str
        """
        allowed_values = ["EXACT", "BEGINS_WITH", "CONTAINS", "WILDCARD_EXPRESSION"]  # noqa: E501
        if match_type not in allowed_values:
            raise ValueError(
                "Invalid value for `match_type` ({0}), must be one of {1}"
                .format(match_type, allowed_values)
            )

        self._match_type = match_type

    @property
    def values(self):
        """Gets the values of this PathReportDimensionValue.

        The possible values of the dimension.

        :return: The values of this PathReportDimensionValue.
        :rtype: List[str]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this PathReportDimensionValue.

        The possible values of the dimension.

        :param values: The values of this PathReportDimensionValue.
        :type values: List[str]
        """

        self._values = values
