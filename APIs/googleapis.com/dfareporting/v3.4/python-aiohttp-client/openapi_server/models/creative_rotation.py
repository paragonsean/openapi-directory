# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.creative_assignment import CreativeAssignment
from openapi_server import util


class CreativeRotation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creative_assignments: List[CreativeAssignment]=None, creative_optimization_configuration_id: str=None, type: str=None, weight_calculation_strategy: str=None):
        """CreativeRotation - a model defined in OpenAPI

        :param creative_assignments: The creative_assignments of this CreativeRotation.
        :param creative_optimization_configuration_id: The creative_optimization_configuration_id of this CreativeRotation.
        :param type: The type of this CreativeRotation.
        :param weight_calculation_strategy: The weight_calculation_strategy of this CreativeRotation.
        """
        self.openapi_types = {
            'creative_assignments': List[CreativeAssignment],
            'creative_optimization_configuration_id': str,
            'type': str,
            'weight_calculation_strategy': str
        }

        self.attribute_map = {
            'creative_assignments': 'creativeAssignments',
            'creative_optimization_configuration_id': 'creativeOptimizationConfigurationId',
            'type': 'type',
            'weight_calculation_strategy': 'weightCalculationStrategy'
        }

        self._creative_assignments = creative_assignments
        self._creative_optimization_configuration_id = creative_optimization_configuration_id
        self._type = type
        self._weight_calculation_strategy = weight_calculation_strategy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreativeRotation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreativeRotation of this CreativeRotation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creative_assignments(self):
        """Gets the creative_assignments of this CreativeRotation.

        Creative assignments in this creative rotation.

        :return: The creative_assignments of this CreativeRotation.
        :rtype: List[CreativeAssignment]
        """
        return self._creative_assignments

    @creative_assignments.setter
    def creative_assignments(self, creative_assignments):
        """Sets the creative_assignments of this CreativeRotation.

        Creative assignments in this creative rotation.

        :param creative_assignments: The creative_assignments of this CreativeRotation.
        :type creative_assignments: List[CreativeAssignment]
        """

        self._creative_assignments = creative_assignments

    @property
    def creative_optimization_configuration_id(self):
        """Gets the creative_optimization_configuration_id of this CreativeRotation.

        Creative optimization configuration that is used by this ad. It should refer to one of the existing optimization configurations in the ad's campaign. If it is unset or set to 0, then the campaign's default optimization configuration will be used for this ad.

        :return: The creative_optimization_configuration_id of this CreativeRotation.
        :rtype: str
        """
        return self._creative_optimization_configuration_id

    @creative_optimization_configuration_id.setter
    def creative_optimization_configuration_id(self, creative_optimization_configuration_id):
        """Sets the creative_optimization_configuration_id of this CreativeRotation.

        Creative optimization configuration that is used by this ad. It should refer to one of the existing optimization configurations in the ad's campaign. If it is unset or set to 0, then the campaign's default optimization configuration will be used for this ad.

        :param creative_optimization_configuration_id: The creative_optimization_configuration_id of this CreativeRotation.
        :type creative_optimization_configuration_id: str
        """

        self._creative_optimization_configuration_id = creative_optimization_configuration_id

    @property
    def type(self):
        """Gets the type of this CreativeRotation.

        Type of creative rotation. Can be used to specify whether to use sequential or random rotation.

        :return: The type of this CreativeRotation.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreativeRotation.

        Type of creative rotation. Can be used to specify whether to use sequential or random rotation.

        :param type: The type of this CreativeRotation.
        :type type: str
        """
        allowed_values = ["CREATIVE_ROTATION_TYPE_SEQUENTIAL", "CREATIVE_ROTATION_TYPE_RANDOM"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def weight_calculation_strategy(self):
        """Gets the weight_calculation_strategy of this CreativeRotation.

        Strategy for calculating weights. Used with CREATIVE_ROTATION_TYPE_RANDOM.

        :return: The weight_calculation_strategy of this CreativeRotation.
        :rtype: str
        """
        return self._weight_calculation_strategy

    @weight_calculation_strategy.setter
    def weight_calculation_strategy(self, weight_calculation_strategy):
        """Sets the weight_calculation_strategy of this CreativeRotation.

        Strategy for calculating weights. Used with CREATIVE_ROTATION_TYPE_RANDOM.

        :param weight_calculation_strategy: The weight_calculation_strategy of this CreativeRotation.
        :type weight_calculation_strategy: str
        """
        allowed_values = ["WEIGHT_STRATEGY_EQUAL", "WEIGHT_STRATEGY_CUSTOM", "WEIGHT_STRATEGY_HIGHEST_CTR", "WEIGHT_STRATEGY_OPTIMIZED"]  # noqa: E501
        if weight_calculation_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `weight_calculation_strategy` ({0}), must be one of {1}"
                .format(weight_calculation_strategy, allowed_values)
            )

        self._weight_calculation_strategy = weight_calculation_strategy
