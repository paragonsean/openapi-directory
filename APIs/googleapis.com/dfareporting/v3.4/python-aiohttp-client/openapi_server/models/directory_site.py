# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dimension_value import DimensionValue
from openapi_server.models.directory_site_settings import DirectorySiteSettings
from openapi_server import util


class DirectorySite(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, id_dimension_value: DimensionValue=None, inpage_tag_formats: List[str]=None, interstitial_tag_formats: List[str]=None, kind: str=None, name: str=None, settings: DirectorySiteSettings=None, url: str=None):
        """DirectorySite - a model defined in OpenAPI

        :param id: The id of this DirectorySite.
        :param id_dimension_value: The id_dimension_value of this DirectorySite.
        :param inpage_tag_formats: The inpage_tag_formats of this DirectorySite.
        :param interstitial_tag_formats: The interstitial_tag_formats of this DirectorySite.
        :param kind: The kind of this DirectorySite.
        :param name: The name of this DirectorySite.
        :param settings: The settings of this DirectorySite.
        :param url: The url of this DirectorySite.
        """
        self.openapi_types = {
            'id': str,
            'id_dimension_value': DimensionValue,
            'inpage_tag_formats': List[str],
            'interstitial_tag_formats': List[str],
            'kind': str,
            'name': str,
            'settings': DirectorySiteSettings,
            'url': str
        }

        self.attribute_map = {
            'id': 'id',
            'id_dimension_value': 'idDimensionValue',
            'inpage_tag_formats': 'inpageTagFormats',
            'interstitial_tag_formats': 'interstitialTagFormats',
            'kind': 'kind',
            'name': 'name',
            'settings': 'settings',
            'url': 'url'
        }

        self._id = id
        self._id_dimension_value = id_dimension_value
        self._inpage_tag_formats = inpage_tag_formats
        self._interstitial_tag_formats = interstitial_tag_formats
        self._kind = kind
        self._name = name
        self._settings = settings
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DirectorySite':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DirectorySite of this DirectorySite.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this DirectorySite.

        ID of this directory site. This is a read-only, auto-generated field.

        :return: The id of this DirectorySite.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DirectorySite.

        ID of this directory site. This is a read-only, auto-generated field.

        :param id: The id of this DirectorySite.
        :type id: str
        """

        self._id = id

    @property
    def id_dimension_value(self):
        """Gets the id_dimension_value of this DirectorySite.


        :return: The id_dimension_value of this DirectorySite.
        :rtype: DimensionValue
        """
        return self._id_dimension_value

    @id_dimension_value.setter
    def id_dimension_value(self, id_dimension_value):
        """Sets the id_dimension_value of this DirectorySite.


        :param id_dimension_value: The id_dimension_value of this DirectorySite.
        :type id_dimension_value: DimensionValue
        """

        self._id_dimension_value = id_dimension_value

    @property
    def inpage_tag_formats(self):
        """Gets the inpage_tag_formats of this DirectorySite.

        Tag types for regular placements. Acceptable values are: - \"STANDARD\" - \"IFRAME_JAVASCRIPT_INPAGE\" - \"INTERNAL_REDIRECT_INPAGE\" - \"JAVASCRIPT_INPAGE\" 

        :return: The inpage_tag_formats of this DirectorySite.
        :rtype: List[str]
        """
        return self._inpage_tag_formats

    @inpage_tag_formats.setter
    def inpage_tag_formats(self, inpage_tag_formats):
        """Sets the inpage_tag_formats of this DirectorySite.

        Tag types for regular placements. Acceptable values are: - \"STANDARD\" - \"IFRAME_JAVASCRIPT_INPAGE\" - \"INTERNAL_REDIRECT_INPAGE\" - \"JAVASCRIPT_INPAGE\" 

        :param inpage_tag_formats: The inpage_tag_formats of this DirectorySite.
        :type inpage_tag_formats: List[str]
        """
        allowed_values = ["STANDARD", "IFRAME_JAVASCRIPT_INPAGE", "INTERNAL_REDIRECT_INPAGE", "JAVASCRIPT_INPAGE"]  # noqa: E501
        if not set(inpage_tag_formats).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `inpage_tag_formats` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(inpage_tag_formats) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._inpage_tag_formats = inpage_tag_formats

    @property
    def interstitial_tag_formats(self):
        """Gets the interstitial_tag_formats of this DirectorySite.

        Tag types for interstitial placements. Acceptable values are: - \"IFRAME_JAVASCRIPT_INTERSTITIAL\" - \"INTERNAL_REDIRECT_INTERSTITIAL\" - \"JAVASCRIPT_INTERSTITIAL\" 

        :return: The interstitial_tag_formats of this DirectorySite.
        :rtype: List[str]
        """
        return self._interstitial_tag_formats

    @interstitial_tag_formats.setter
    def interstitial_tag_formats(self, interstitial_tag_formats):
        """Sets the interstitial_tag_formats of this DirectorySite.

        Tag types for interstitial placements. Acceptable values are: - \"IFRAME_JAVASCRIPT_INTERSTITIAL\" - \"INTERNAL_REDIRECT_INTERSTITIAL\" - \"JAVASCRIPT_INTERSTITIAL\" 

        :param interstitial_tag_formats: The interstitial_tag_formats of this DirectorySite.
        :type interstitial_tag_formats: List[str]
        """
        allowed_values = ["IFRAME_JAVASCRIPT_INTERSTITIAL", "INTERNAL_REDIRECT_INTERSTITIAL", "JAVASCRIPT_INTERSTITIAL"]  # noqa: E501
        if not set(interstitial_tag_formats).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `interstitial_tag_formats` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(interstitial_tag_formats) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._interstitial_tag_formats = interstitial_tag_formats

    @property
    def kind(self):
        """Gets the kind of this DirectorySite.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#directorySite\".

        :return: The kind of this DirectorySite.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this DirectorySite.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#directorySite\".

        :param kind: The kind of this DirectorySite.
        :type kind: str
        """

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this DirectorySite.

        Name of this directory site.

        :return: The name of this DirectorySite.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DirectorySite.

        Name of this directory site.

        :param name: The name of this DirectorySite.
        :type name: str
        """

        self._name = name

    @property
    def settings(self):
        """Gets the settings of this DirectorySite.


        :return: The settings of this DirectorySite.
        :rtype: DirectorySiteSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this DirectorySite.


        :param settings: The settings of this DirectorySite.
        :type settings: DirectorySiteSettings
        """

        self._settings = settings

    @property
    def url(self):
        """Gets the url of this DirectorySite.

        URL of this directory site.

        :return: The url of this DirectorySite.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this DirectorySite.

        URL of this directory site.

        :param url: The url of this DirectorySite.
        :type url: str
        """

        self._url = url
