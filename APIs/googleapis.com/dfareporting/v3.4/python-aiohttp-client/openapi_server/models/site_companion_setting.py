# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.size import Size
from openapi_server import util


class SiteCompanionSetting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, companions_disabled: bool=None, enabled_sizes: List[Size]=None, image_only: bool=None, kind: str=None):
        """SiteCompanionSetting - a model defined in OpenAPI

        :param companions_disabled: The companions_disabled of this SiteCompanionSetting.
        :param enabled_sizes: The enabled_sizes of this SiteCompanionSetting.
        :param image_only: The image_only of this SiteCompanionSetting.
        :param kind: The kind of this SiteCompanionSetting.
        """
        self.openapi_types = {
            'companions_disabled': bool,
            'enabled_sizes': List[Size],
            'image_only': bool,
            'kind': str
        }

        self.attribute_map = {
            'companions_disabled': 'companionsDisabled',
            'enabled_sizes': 'enabledSizes',
            'image_only': 'imageOnly',
            'kind': 'kind'
        }

        self._companions_disabled = companions_disabled
        self._enabled_sizes = enabled_sizes
        self._image_only = image_only
        self._kind = kind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SiteCompanionSetting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SiteCompanionSetting of this SiteCompanionSetting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def companions_disabled(self):
        """Gets the companions_disabled of this SiteCompanionSetting.

        Whether companions are disabled for this site template.

        :return: The companions_disabled of this SiteCompanionSetting.
        :rtype: bool
        """
        return self._companions_disabled

    @companions_disabled.setter
    def companions_disabled(self, companions_disabled):
        """Sets the companions_disabled of this SiteCompanionSetting.

        Whether companions are disabled for this site template.

        :param companions_disabled: The companions_disabled of this SiteCompanionSetting.
        :type companions_disabled: bool
        """

        self._companions_disabled = companions_disabled

    @property
    def enabled_sizes(self):
        """Gets the enabled_sizes of this SiteCompanionSetting.

        Allowlist of companion sizes to be served via this site template. Set this list to null or empty to serve all companion sizes.

        :return: The enabled_sizes of this SiteCompanionSetting.
        :rtype: List[Size]
        """
        return self._enabled_sizes

    @enabled_sizes.setter
    def enabled_sizes(self, enabled_sizes):
        """Sets the enabled_sizes of this SiteCompanionSetting.

        Allowlist of companion sizes to be served via this site template. Set this list to null or empty to serve all companion sizes.

        :param enabled_sizes: The enabled_sizes of this SiteCompanionSetting.
        :type enabled_sizes: List[Size]
        """

        self._enabled_sizes = enabled_sizes

    @property
    def image_only(self):
        """Gets the image_only of this SiteCompanionSetting.

        Whether to serve only static images as companions.

        :return: The image_only of this SiteCompanionSetting.
        :rtype: bool
        """
        return self._image_only

    @image_only.setter
    def image_only(self, image_only):
        """Sets the image_only of this SiteCompanionSetting.

        Whether to serve only static images as companions.

        :param image_only: The image_only of this SiteCompanionSetting.
        :type image_only: bool
        """

        self._image_only = image_only

    @property
    def kind(self):
        """Gets the kind of this SiteCompanionSetting.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#siteCompanionSetting\".

        :return: The kind of this SiteCompanionSetting.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this SiteCompanionSetting.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#siteCompanionSetting\".

        :param kind: The kind of this SiteCompanionSetting.
        :type kind: str
        """

        self._kind = kind
