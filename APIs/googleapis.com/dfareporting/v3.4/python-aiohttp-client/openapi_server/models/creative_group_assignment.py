# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreativeGroupAssignment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creative_group_id: str=None, creative_group_number: str=None):
        """CreativeGroupAssignment - a model defined in OpenAPI

        :param creative_group_id: The creative_group_id of this CreativeGroupAssignment.
        :param creative_group_number: The creative_group_number of this CreativeGroupAssignment.
        """
        self.openapi_types = {
            'creative_group_id': str,
            'creative_group_number': str
        }

        self.attribute_map = {
            'creative_group_id': 'creativeGroupId',
            'creative_group_number': 'creativeGroupNumber'
        }

        self._creative_group_id = creative_group_id
        self._creative_group_number = creative_group_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreativeGroupAssignment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreativeGroupAssignment of this CreativeGroupAssignment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creative_group_id(self):
        """Gets the creative_group_id of this CreativeGroupAssignment.

        ID of the creative group to be assigned.

        :return: The creative_group_id of this CreativeGroupAssignment.
        :rtype: str
        """
        return self._creative_group_id

    @creative_group_id.setter
    def creative_group_id(self, creative_group_id):
        """Sets the creative_group_id of this CreativeGroupAssignment.

        ID of the creative group to be assigned.

        :param creative_group_id: The creative_group_id of this CreativeGroupAssignment.
        :type creative_group_id: str
        """

        self._creative_group_id = creative_group_id

    @property
    def creative_group_number(self):
        """Gets the creative_group_number of this CreativeGroupAssignment.

        Creative group number of the creative group assignment.

        :return: The creative_group_number of this CreativeGroupAssignment.
        :rtype: str
        """
        return self._creative_group_number

    @creative_group_number.setter
    def creative_group_number(self, creative_group_number):
        """Sets the creative_group_number of this CreativeGroupAssignment.

        Creative group number of the creative group assignment.

        :param creative_group_number: The creative_group_number of this CreativeGroupAssignment.
        :type creative_group_number: str
        """
        allowed_values = ["CREATIVE_GROUP_ONE", "CREATIVE_GROUP_TWO"]  # noqa: E501
        if creative_group_number not in allowed_values:
            raise ValueError(
                "Invalid value for `creative_group_number` ({0}), must be one of {1}"
                .format(creative_group_number, allowed_values)
            )

        self._creative_group_number = creative_group_number
