# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Recipient(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delivery_type: str=None, email: str=None, kind: str=None):
        """Recipient - a model defined in OpenAPI

        :param delivery_type: The delivery_type of this Recipient.
        :param email: The email of this Recipient.
        :param kind: The kind of this Recipient.
        """
        self.openapi_types = {
            'delivery_type': str,
            'email': str,
            'kind': str
        }

        self.attribute_map = {
            'delivery_type': 'deliveryType',
            'email': 'email',
            'kind': 'kind'
        }

        self._delivery_type = delivery_type
        self._email = email
        self._kind = kind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Recipient':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Recipient of this Recipient.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delivery_type(self):
        """Gets the delivery_type of this Recipient.

        The delivery type for the recipient.

        :return: The delivery_type of this Recipient.
        :rtype: str
        """
        return self._delivery_type

    @delivery_type.setter
    def delivery_type(self, delivery_type):
        """Sets the delivery_type of this Recipient.

        The delivery type for the recipient.

        :param delivery_type: The delivery_type of this Recipient.
        :type delivery_type: str
        """
        allowed_values = ["LINK", "ATTACHMENT"]  # noqa: E501
        if delivery_type not in allowed_values:
            raise ValueError(
                "Invalid value for `delivery_type` ({0}), must be one of {1}"
                .format(delivery_type, allowed_values)
            )

        self._delivery_type = delivery_type

    @property
    def email(self):
        """Gets the email of this Recipient.

        The email address of the recipient.

        :return: The email of this Recipient.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Recipient.

        The email address of the recipient.

        :param email: The email of this Recipient.
        :type email: str
        """

        self._email = email

    @property
    def kind(self):
        """Gets the kind of this Recipient.

        The kind of resource this is, in this case dfareporting#recipient.

        :return: The kind of this Recipient.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Recipient.

        The kind of resource this is, in this case dfareporting#recipient.

        :param kind: The kind of this Recipient.
        :type kind: str
        """

        self._kind = kind
