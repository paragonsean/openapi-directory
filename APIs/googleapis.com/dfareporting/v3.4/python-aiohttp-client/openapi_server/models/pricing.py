# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.flight import Flight
from openapi_server import util


class Pricing(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cap_cost_type: str=None, end_date: date=None, flights: List[Flight]=None, group_type: str=None, pricing_type: str=None, start_date: date=None):
        """Pricing - a model defined in OpenAPI

        :param cap_cost_type: The cap_cost_type of this Pricing.
        :param end_date: The end_date of this Pricing.
        :param flights: The flights of this Pricing.
        :param group_type: The group_type of this Pricing.
        :param pricing_type: The pricing_type of this Pricing.
        :param start_date: The start_date of this Pricing.
        """
        self.openapi_types = {
            'cap_cost_type': str,
            'end_date': date,
            'flights': List[Flight],
            'group_type': str,
            'pricing_type': str,
            'start_date': date
        }

        self.attribute_map = {
            'cap_cost_type': 'capCostType',
            'end_date': 'endDate',
            'flights': 'flights',
            'group_type': 'groupType',
            'pricing_type': 'pricingType',
            'start_date': 'startDate'
        }

        self._cap_cost_type = cap_cost_type
        self._end_date = end_date
        self._flights = flights
        self._group_type = group_type
        self._pricing_type = pricing_type
        self._start_date = start_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Pricing':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Pricing of this Pricing.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cap_cost_type(self):
        """Gets the cap_cost_type of this Pricing.

        Cap cost type of this inventory item.

        :return: The cap_cost_type of this Pricing.
        :rtype: str
        """
        return self._cap_cost_type

    @cap_cost_type.setter
    def cap_cost_type(self, cap_cost_type):
        """Sets the cap_cost_type of this Pricing.

        Cap cost type of this inventory item.

        :param cap_cost_type: The cap_cost_type of this Pricing.
        :type cap_cost_type: str
        """
        allowed_values = ["PLANNING_PLACEMENT_CAP_COST_TYPE_NONE", "PLANNING_PLACEMENT_CAP_COST_TYPE_MONTHLY", "PLANNING_PLACEMENT_CAP_COST_TYPE_CUMULATIVE"]  # noqa: E501
        if cap_cost_type not in allowed_values:
            raise ValueError(
                "Invalid value for `cap_cost_type` ({0}), must be one of {1}"
                .format(cap_cost_type, allowed_values)
            )

        self._cap_cost_type = cap_cost_type

    @property
    def end_date(self):
        """Gets the end_date of this Pricing.


        :return: The end_date of this Pricing.
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Pricing.


        :param end_date: The end_date of this Pricing.
        :type end_date: date
        """

        self._end_date = end_date

    @property
    def flights(self):
        """Gets the flights of this Pricing.

        Flights of this inventory item. A flight (a.k.a. pricing period) represents the inventory item pricing information for a specific period of time.

        :return: The flights of this Pricing.
        :rtype: List[Flight]
        """
        return self._flights

    @flights.setter
    def flights(self, flights):
        """Sets the flights of this Pricing.

        Flights of this inventory item. A flight (a.k.a. pricing period) represents the inventory item pricing information for a specific period of time.

        :param flights: The flights of this Pricing.
        :type flights: List[Flight]
        """

        self._flights = flights

    @property
    def group_type(self):
        """Gets the group_type of this Pricing.

        Group type of this inventory item if it represents a placement group. Is null otherwise. There are two type of placement groups: PLANNING_PLACEMENT_GROUP_TYPE_PACKAGE is a simple group of inventory items that acts as a single pricing point for a group of tags. PLANNING_PLACEMENT_GROUP_TYPE_ROADBLOCK is a group of inventory items that not only acts as a single pricing point, but also assumes that all the tags in it will be served at the same time. A roadblock requires one of its assigned inventory items to be marked as primary.

        :return: The group_type of this Pricing.
        :rtype: str
        """
        return self._group_type

    @group_type.setter
    def group_type(self, group_type):
        """Sets the group_type of this Pricing.

        Group type of this inventory item if it represents a placement group. Is null otherwise. There are two type of placement groups: PLANNING_PLACEMENT_GROUP_TYPE_PACKAGE is a simple group of inventory items that acts as a single pricing point for a group of tags. PLANNING_PLACEMENT_GROUP_TYPE_ROADBLOCK is a group of inventory items that not only acts as a single pricing point, but also assumes that all the tags in it will be served at the same time. A roadblock requires one of its assigned inventory items to be marked as primary.

        :param group_type: The group_type of this Pricing.
        :type group_type: str
        """
        allowed_values = ["PLANNING_PLACEMENT_GROUP_TYPE_PACKAGE", "PLANNING_PLACEMENT_GROUP_TYPE_ROADBLOCK"]  # noqa: E501
        if group_type not in allowed_values:
            raise ValueError(
                "Invalid value for `group_type` ({0}), must be one of {1}"
                .format(group_type, allowed_values)
            )

        self._group_type = group_type

    @property
    def pricing_type(self):
        """Gets the pricing_type of this Pricing.

        Pricing type of this inventory item.

        :return: The pricing_type of this Pricing.
        :rtype: str
        """
        return self._pricing_type

    @pricing_type.setter
    def pricing_type(self, pricing_type):
        """Sets the pricing_type of this Pricing.

        Pricing type of this inventory item.

        :param pricing_type: The pricing_type of this Pricing.
        :type pricing_type: str
        """
        allowed_values = ["PLANNING_PLACEMENT_PRICING_TYPE_IMPRESSIONS", "PLANNING_PLACEMENT_PRICING_TYPE_CPM", "PLANNING_PLACEMENT_PRICING_TYPE_CLICKS", "PLANNING_PLACEMENT_PRICING_TYPE_CPC", "PLANNING_PLACEMENT_PRICING_TYPE_CPA", "PLANNING_PLACEMENT_PRICING_TYPE_FLAT_RATE_IMPRESSIONS", "PLANNING_PLACEMENT_PRICING_TYPE_FLAT_RATE_CLICKS", "PLANNING_PLACEMENT_PRICING_TYPE_CPM_ACTIVEVIEW"]  # noqa: E501
        if pricing_type not in allowed_values:
            raise ValueError(
                "Invalid value for `pricing_type` ({0}), must be one of {1}"
                .format(pricing_type, allowed_values)
            )

        self._pricing_type = pricing_type

    @property
    def start_date(self):
        """Gets the start_date of this Pricing.


        :return: The start_date of this Pricing.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Pricing.


        :param start_date: The start_date of this Pricing.
        :type start_date: date
        """

        self._start_date = start_date
