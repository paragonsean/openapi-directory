# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Browser(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, browser_version_id: str=None, dart_id: str=None, kind: str=None, major_version: str=None, minor_version: str=None, name: str=None):
        """Browser - a model defined in OpenAPI

        :param browser_version_id: The browser_version_id of this Browser.
        :param dart_id: The dart_id of this Browser.
        :param kind: The kind of this Browser.
        :param major_version: The major_version of this Browser.
        :param minor_version: The minor_version of this Browser.
        :param name: The name of this Browser.
        """
        self.openapi_types = {
            'browser_version_id': str,
            'dart_id': str,
            'kind': str,
            'major_version': str,
            'minor_version': str,
            'name': str
        }

        self.attribute_map = {
            'browser_version_id': 'browserVersionId',
            'dart_id': 'dartId',
            'kind': 'kind',
            'major_version': 'majorVersion',
            'minor_version': 'minorVersion',
            'name': 'name'
        }

        self._browser_version_id = browser_version_id
        self._dart_id = dart_id
        self._kind = kind
        self._major_version = major_version
        self._minor_version = minor_version
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Browser':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Browser of this Browser.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def browser_version_id(self):
        """Gets the browser_version_id of this Browser.

        ID referring to this grouping of browser and version numbers. This is the ID used for targeting.

        :return: The browser_version_id of this Browser.
        :rtype: str
        """
        return self._browser_version_id

    @browser_version_id.setter
    def browser_version_id(self, browser_version_id):
        """Sets the browser_version_id of this Browser.

        ID referring to this grouping of browser and version numbers. This is the ID used for targeting.

        :param browser_version_id: The browser_version_id of this Browser.
        :type browser_version_id: str
        """

        self._browser_version_id = browser_version_id

    @property
    def dart_id(self):
        """Gets the dart_id of this Browser.

        DART ID of this browser. This is the ID used when generating reports.

        :return: The dart_id of this Browser.
        :rtype: str
        """
        return self._dart_id

    @dart_id.setter
    def dart_id(self, dart_id):
        """Sets the dart_id of this Browser.

        DART ID of this browser. This is the ID used when generating reports.

        :param dart_id: The dart_id of this Browser.
        :type dart_id: str
        """

        self._dart_id = dart_id

    @property
    def kind(self):
        """Gets the kind of this Browser.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#browser\".

        :return: The kind of this Browser.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Browser.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#browser\".

        :param kind: The kind of this Browser.
        :type kind: str
        """

        self._kind = kind

    @property
    def major_version(self):
        """Gets the major_version of this Browser.

        Major version number (leftmost number) of this browser. For example, for Chrome 5.0.376.86 beta, this field should be set to 5. An asterisk (*) may be used to target any version number, and a question mark (?) may be used to target cases where the version number cannot be identified. For example, Chrome *.* targets any version of Chrome: 1.2, 2.5, 3.5, and so on. Chrome 3.* targets Chrome 3.1, 3.5, but not 4.0. Firefox ?.? targets cases where the ad server knows the browser is Firefox but can't tell which version it is.

        :return: The major_version of this Browser.
        :rtype: str
        """
        return self._major_version

    @major_version.setter
    def major_version(self, major_version):
        """Sets the major_version of this Browser.

        Major version number (leftmost number) of this browser. For example, for Chrome 5.0.376.86 beta, this field should be set to 5. An asterisk (*) may be used to target any version number, and a question mark (?) may be used to target cases where the version number cannot be identified. For example, Chrome *.* targets any version of Chrome: 1.2, 2.5, 3.5, and so on. Chrome 3.* targets Chrome 3.1, 3.5, but not 4.0. Firefox ?.? targets cases where the ad server knows the browser is Firefox but can't tell which version it is.

        :param major_version: The major_version of this Browser.
        :type major_version: str
        """

        self._major_version = major_version

    @property
    def minor_version(self):
        """Gets the minor_version of this Browser.

        Minor version number (number after first dot on left) of this browser. For example, for Chrome 5.0.375.86 beta, this field should be set to 0. An asterisk (*) may be used to target any version number, and a question mark (?) may be used to target cases where the version number cannot be identified. For example, Chrome *.* targets any version of Chrome: 1.2, 2.5, 3.5, and so on. Chrome 3.* targets Chrome 3.1, 3.5, but not 4.0. Firefox ?.? targets cases where the ad server knows the browser is Firefox but can't tell which version it is.

        :return: The minor_version of this Browser.
        :rtype: str
        """
        return self._minor_version

    @minor_version.setter
    def minor_version(self, minor_version):
        """Sets the minor_version of this Browser.

        Minor version number (number after first dot on left) of this browser. For example, for Chrome 5.0.375.86 beta, this field should be set to 0. An asterisk (*) may be used to target any version number, and a question mark (?) may be used to target cases where the version number cannot be identified. For example, Chrome *.* targets any version of Chrome: 1.2, 2.5, 3.5, and so on. Chrome 3.* targets Chrome 3.1, 3.5, but not 4.0. Firefox ?.? targets cases where the ad server knows the browser is Firefox but can't tell which version it is.

        :param minor_version: The minor_version of this Browser.
        :type minor_version: str
        """

        self._minor_version = minor_version

    @property
    def name(self):
        """Gets the name of this Browser.

        Name of this browser.

        :return: The name of this Browser.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Browser.

        Name of this browser.

        :param name: The name of this Browser.
        :type name: str
        """

        self._name = name
