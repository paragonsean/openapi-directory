# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dimension_value import DimensionValue
from openapi_server import util


class OptimizationActivity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, floodlight_activity_id: str=None, floodlight_activity_id_dimension_value: DimensionValue=None, weight: int=None):
        """OptimizationActivity - a model defined in OpenAPI

        :param floodlight_activity_id: The floodlight_activity_id of this OptimizationActivity.
        :param floodlight_activity_id_dimension_value: The floodlight_activity_id_dimension_value of this OptimizationActivity.
        :param weight: The weight of this OptimizationActivity.
        """
        self.openapi_types = {
            'floodlight_activity_id': str,
            'floodlight_activity_id_dimension_value': DimensionValue,
            'weight': int
        }

        self.attribute_map = {
            'floodlight_activity_id': 'floodlightActivityId',
            'floodlight_activity_id_dimension_value': 'floodlightActivityIdDimensionValue',
            'weight': 'weight'
        }

        self._floodlight_activity_id = floodlight_activity_id
        self._floodlight_activity_id_dimension_value = floodlight_activity_id_dimension_value
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OptimizationActivity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OptimizationActivity of this OptimizationActivity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def floodlight_activity_id(self):
        """Gets the floodlight_activity_id of this OptimizationActivity.

        Floodlight activity ID of this optimization activity. This is a required field.

        :return: The floodlight_activity_id of this OptimizationActivity.
        :rtype: str
        """
        return self._floodlight_activity_id

    @floodlight_activity_id.setter
    def floodlight_activity_id(self, floodlight_activity_id):
        """Sets the floodlight_activity_id of this OptimizationActivity.

        Floodlight activity ID of this optimization activity. This is a required field.

        :param floodlight_activity_id: The floodlight_activity_id of this OptimizationActivity.
        :type floodlight_activity_id: str
        """

        self._floodlight_activity_id = floodlight_activity_id

    @property
    def floodlight_activity_id_dimension_value(self):
        """Gets the floodlight_activity_id_dimension_value of this OptimizationActivity.


        :return: The floodlight_activity_id_dimension_value of this OptimizationActivity.
        :rtype: DimensionValue
        """
        return self._floodlight_activity_id_dimension_value

    @floodlight_activity_id_dimension_value.setter
    def floodlight_activity_id_dimension_value(self, floodlight_activity_id_dimension_value):
        """Sets the floodlight_activity_id_dimension_value of this OptimizationActivity.


        :param floodlight_activity_id_dimension_value: The floodlight_activity_id_dimension_value of this OptimizationActivity.
        :type floodlight_activity_id_dimension_value: DimensionValue
        """

        self._floodlight_activity_id_dimension_value = floodlight_activity_id_dimension_value

    @property
    def weight(self):
        """Gets the weight of this OptimizationActivity.

        Weight associated with this optimization. The weight assigned will be understood in proportion to the weights assigned to the other optimization activities. Value must be greater than or equal to 1.

        :return: The weight of this OptimizationActivity.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this OptimizationActivity.

        Weight associated with this optimization. The weight assigned will be understood in proportion to the weights assigned to the other optimization activities. Value must be greater than or equal to 1.

        :param weight: The weight of this OptimizationActivity.
        :type weight: int
        """

        self._weight = weight
