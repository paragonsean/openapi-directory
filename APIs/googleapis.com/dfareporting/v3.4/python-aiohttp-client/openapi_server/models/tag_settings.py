# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TagSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dynamic_tag_enabled: bool=None, image_tag_enabled: bool=None):
        """TagSettings - a model defined in OpenAPI

        :param dynamic_tag_enabled: The dynamic_tag_enabled of this TagSettings.
        :param image_tag_enabled: The image_tag_enabled of this TagSettings.
        """
        self.openapi_types = {
            'dynamic_tag_enabled': bool,
            'image_tag_enabled': bool
        }

        self.attribute_map = {
            'dynamic_tag_enabled': 'dynamicTagEnabled',
            'image_tag_enabled': 'imageTagEnabled'
        }

        self._dynamic_tag_enabled = dynamic_tag_enabled
        self._image_tag_enabled = image_tag_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TagSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TagSettings of this TagSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dynamic_tag_enabled(self):
        """Gets the dynamic_tag_enabled of this TagSettings.

        Whether dynamic floodlight tags are enabled.

        :return: The dynamic_tag_enabled of this TagSettings.
        :rtype: bool
        """
        return self._dynamic_tag_enabled

    @dynamic_tag_enabled.setter
    def dynamic_tag_enabled(self, dynamic_tag_enabled):
        """Sets the dynamic_tag_enabled of this TagSettings.

        Whether dynamic floodlight tags are enabled.

        :param dynamic_tag_enabled: The dynamic_tag_enabled of this TagSettings.
        :type dynamic_tag_enabled: bool
        """

        self._dynamic_tag_enabled = dynamic_tag_enabled

    @property
    def image_tag_enabled(self):
        """Gets the image_tag_enabled of this TagSettings.

        Whether image tags are enabled.

        :return: The image_tag_enabled of this TagSettings.
        :rtype: bool
        """
        return self._image_tag_enabled

    @image_tag_enabled.setter
    def image_tag_enabled(self, image_tag_enabled):
        """Sets the image_tag_enabled of this TagSettings.

        Whether image tags are enabled.

        :param image_tag_enabled: The image_tag_enabled of this TagSettings.
        :type image_tag_enabled: bool
        """

        self._image_tag_enabled = image_tag_enabled
