# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccountActiveAdSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, active_ads: str=None, active_ads_limit_tier: str=None, available_ads: str=None, kind: str=None):
        """AccountActiveAdSummary - a model defined in OpenAPI

        :param account_id: The account_id of this AccountActiveAdSummary.
        :param active_ads: The active_ads of this AccountActiveAdSummary.
        :param active_ads_limit_tier: The active_ads_limit_tier of this AccountActiveAdSummary.
        :param available_ads: The available_ads of this AccountActiveAdSummary.
        :param kind: The kind of this AccountActiveAdSummary.
        """
        self.openapi_types = {
            'account_id': str,
            'active_ads': str,
            'active_ads_limit_tier': str,
            'available_ads': str,
            'kind': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'active_ads': 'activeAds',
            'active_ads_limit_tier': 'activeAdsLimitTier',
            'available_ads': 'availableAds',
            'kind': 'kind'
        }

        self._account_id = account_id
        self._active_ads = active_ads
        self._active_ads_limit_tier = active_ads_limit_tier
        self._available_ads = available_ads
        self._kind = kind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountActiveAdSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountActiveAdSummary of this AccountActiveAdSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this AccountActiveAdSummary.

        ID of the account.

        :return: The account_id of this AccountActiveAdSummary.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AccountActiveAdSummary.

        ID of the account.

        :param account_id: The account_id of this AccountActiveAdSummary.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def active_ads(self):
        """Gets the active_ads of this AccountActiveAdSummary.

        Ads that have been activated for the account

        :return: The active_ads of this AccountActiveAdSummary.
        :rtype: str
        """
        return self._active_ads

    @active_ads.setter
    def active_ads(self, active_ads):
        """Sets the active_ads of this AccountActiveAdSummary.

        Ads that have been activated for the account

        :param active_ads: The active_ads of this AccountActiveAdSummary.
        :type active_ads: str
        """

        self._active_ads = active_ads

    @property
    def active_ads_limit_tier(self):
        """Gets the active_ads_limit_tier of this AccountActiveAdSummary.

        Maximum number of active ads allowed for the account.

        :return: The active_ads_limit_tier of this AccountActiveAdSummary.
        :rtype: str
        """
        return self._active_ads_limit_tier

    @active_ads_limit_tier.setter
    def active_ads_limit_tier(self, active_ads_limit_tier):
        """Sets the active_ads_limit_tier of this AccountActiveAdSummary.

        Maximum number of active ads allowed for the account.

        :param active_ads_limit_tier: The active_ads_limit_tier of this AccountActiveAdSummary.
        :type active_ads_limit_tier: str
        """
        allowed_values = ["ACTIVE_ADS_TIER_40K", "ACTIVE_ADS_TIER_75K", "ACTIVE_ADS_TIER_100K", "ACTIVE_ADS_TIER_200K", "ACTIVE_ADS_TIER_300K", "ACTIVE_ADS_TIER_500K", "ACTIVE_ADS_TIER_750K", "ACTIVE_ADS_TIER_1M"]  # noqa: E501
        if active_ads_limit_tier not in allowed_values:
            raise ValueError(
                "Invalid value for `active_ads_limit_tier` ({0}), must be one of {1}"
                .format(active_ads_limit_tier, allowed_values)
            )

        self._active_ads_limit_tier = active_ads_limit_tier

    @property
    def available_ads(self):
        """Gets the available_ads of this AccountActiveAdSummary.

        Ads that can be activated for the account.

        :return: The available_ads of this AccountActiveAdSummary.
        :rtype: str
        """
        return self._available_ads

    @available_ads.setter
    def available_ads(self, available_ads):
        """Sets the available_ads of this AccountActiveAdSummary.

        Ads that can be activated for the account.

        :param available_ads: The available_ads of this AccountActiveAdSummary.
        :type available_ads: str
        """

        self._available_ads = available_ads

    @property
    def kind(self):
        """Gets the kind of this AccountActiveAdSummary.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#accountActiveAdSummary\".

        :return: The kind of this AccountActiveAdSummary.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this AccountActiveAdSummary.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#accountActiveAdSummary\".

        :param kind: The kind of this AccountActiveAdSummary.
        :type kind: str
        """

        self._kind = kind
