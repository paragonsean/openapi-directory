# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OrderContact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact_info: str=None, contact_name: str=None, contact_title: str=None, contact_type: str=None, signature_user_profile_id: str=None):
        """OrderContact - a model defined in OpenAPI

        :param contact_info: The contact_info of this OrderContact.
        :param contact_name: The contact_name of this OrderContact.
        :param contact_title: The contact_title of this OrderContact.
        :param contact_type: The contact_type of this OrderContact.
        :param signature_user_profile_id: The signature_user_profile_id of this OrderContact.
        """
        self.openapi_types = {
            'contact_info': str,
            'contact_name': str,
            'contact_title': str,
            'contact_type': str,
            'signature_user_profile_id': str
        }

        self.attribute_map = {
            'contact_info': 'contactInfo',
            'contact_name': 'contactName',
            'contact_title': 'contactTitle',
            'contact_type': 'contactType',
            'signature_user_profile_id': 'signatureUserProfileId'
        }

        self._contact_info = contact_info
        self._contact_name = contact_name
        self._contact_title = contact_title
        self._contact_type = contact_type
        self._signature_user_profile_id = signature_user_profile_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderContact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderContact of this OrderContact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_info(self):
        """Gets the contact_info of this OrderContact.

        Free-form information about this contact. It could be any information related to this contact in addition to type, title, name, and signature user profile ID.

        :return: The contact_info of this OrderContact.
        :rtype: str
        """
        return self._contact_info

    @contact_info.setter
    def contact_info(self, contact_info):
        """Sets the contact_info of this OrderContact.

        Free-form information about this contact. It could be any information related to this contact in addition to type, title, name, and signature user profile ID.

        :param contact_info: The contact_info of this OrderContact.
        :type contact_info: str
        """

        self._contact_info = contact_info

    @property
    def contact_name(self):
        """Gets the contact_name of this OrderContact.

        Name of this contact.

        :return: The contact_name of this OrderContact.
        :rtype: str
        """
        return self._contact_name

    @contact_name.setter
    def contact_name(self, contact_name):
        """Sets the contact_name of this OrderContact.

        Name of this contact.

        :param contact_name: The contact_name of this OrderContact.
        :type contact_name: str
        """

        self._contact_name = contact_name

    @property
    def contact_title(self):
        """Gets the contact_title of this OrderContact.

        Title of this contact.

        :return: The contact_title of this OrderContact.
        :rtype: str
        """
        return self._contact_title

    @contact_title.setter
    def contact_title(self, contact_title):
        """Sets the contact_title of this OrderContact.

        Title of this contact.

        :param contact_title: The contact_title of this OrderContact.
        :type contact_title: str
        """

        self._contact_title = contact_title

    @property
    def contact_type(self):
        """Gets the contact_type of this OrderContact.

        Type of this contact.

        :return: The contact_type of this OrderContact.
        :rtype: str
        """
        return self._contact_type

    @contact_type.setter
    def contact_type(self, contact_type):
        """Sets the contact_type of this OrderContact.

        Type of this contact.

        :param contact_type: The contact_type of this OrderContact.
        :type contact_type: str
        """
        allowed_values = ["PLANNING_ORDER_CONTACT_BUYER_CONTACT", "PLANNING_ORDER_CONTACT_BUYER_BILLING_CONTACT", "PLANNING_ORDER_CONTACT_SELLER_CONTACT"]  # noqa: E501
        if contact_type not in allowed_values:
            raise ValueError(
                "Invalid value for `contact_type` ({0}), must be one of {1}"
                .format(contact_type, allowed_values)
            )

        self._contact_type = contact_type

    @property
    def signature_user_profile_id(self):
        """Gets the signature_user_profile_id of this OrderContact.

        ID of the user profile containing the signature that will be embedded into order documents.

        :return: The signature_user_profile_id of this OrderContact.
        :rtype: str
        """
        return self._signature_user_profile_id

    @signature_user_profile_id.setter
    def signature_user_profile_id(self, signature_user_profile_id):
        """Sets the signature_user_profile_id of this OrderContact.

        ID of the user profile containing the signature that will be embedded into order documents.

        :param signature_user_profile_id: The signature_user_profile_id of this OrderContact.
        :type signature_user_profile_id: str
        """

        self._signature_user_profile_id = signature_user_profile_id
