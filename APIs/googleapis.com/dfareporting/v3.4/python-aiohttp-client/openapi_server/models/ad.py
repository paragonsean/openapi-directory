# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.click_through_url import ClickThroughUrl
from openapi_server.models.click_through_url_suffix_properties import ClickThroughUrlSuffixProperties
from openapi_server.models.creative_group_assignment import CreativeGroupAssignment
from openapi_server.models.creative_rotation import CreativeRotation
from openapi_server.models.day_part_targeting import DayPartTargeting
from openapi_server.models.default_click_through_event_tag_properties import DefaultClickThroughEventTagProperties
from openapi_server.models.delivery_schedule import DeliverySchedule
from openapi_server.models.dimension_value import DimensionValue
from openapi_server.models.event_tag_override import EventTagOverride
from openapi_server.models.geo_targeting import GeoTargeting
from openapi_server.models.key_value_targeting_expression import KeyValueTargetingExpression
from openapi_server.models.language_targeting import LanguageTargeting
from openapi_server.models.last_modified_info import LastModifiedInfo
from openapi_server.models.list_targeting_expression import ListTargetingExpression
from openapi_server.models.placement_assignment import PlacementAssignment
from openapi_server.models.size import Size
from openapi_server.models.technology_targeting import TechnologyTargeting
from openapi_server import util


class Ad(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, active: bool=None, advertiser_id: str=None, advertiser_id_dimension_value: DimensionValue=None, archived: bool=None, audience_segment_id: str=None, campaign_id: str=None, campaign_id_dimension_value: DimensionValue=None, click_through_url: ClickThroughUrl=None, click_through_url_suffix_properties: ClickThroughUrlSuffixProperties=None, comments: str=None, compatibility: str=None, create_info: LastModifiedInfo=None, creative_group_assignments: List[CreativeGroupAssignment]=None, creative_rotation: CreativeRotation=None, day_part_targeting: DayPartTargeting=None, default_click_through_event_tag_properties: DefaultClickThroughEventTagProperties=None, delivery_schedule: DeliverySchedule=None, dynamic_click_tracker: bool=None, end_time: datetime=None, event_tag_overrides: List[EventTagOverride]=None, geo_targeting: GeoTargeting=None, id: str=None, id_dimension_value: DimensionValue=None, key_value_targeting_expression: KeyValueTargetingExpression=None, kind: str=None, language_targeting: LanguageTargeting=None, last_modified_info: LastModifiedInfo=None, name: str=None, placement_assignments: List[PlacementAssignment]=None, remarketing_list_expression: ListTargetingExpression=None, size: Size=None, ssl_compliant: bool=None, ssl_required: bool=None, start_time: datetime=None, subaccount_id: str=None, targeting_template_id: str=None, technology_targeting: TechnologyTargeting=None, type: str=None):
        """Ad - a model defined in OpenAPI

        :param account_id: The account_id of this Ad.
        :param active: The active of this Ad.
        :param advertiser_id: The advertiser_id of this Ad.
        :param advertiser_id_dimension_value: The advertiser_id_dimension_value of this Ad.
        :param archived: The archived of this Ad.
        :param audience_segment_id: The audience_segment_id of this Ad.
        :param campaign_id: The campaign_id of this Ad.
        :param campaign_id_dimension_value: The campaign_id_dimension_value of this Ad.
        :param click_through_url: The click_through_url of this Ad.
        :param click_through_url_suffix_properties: The click_through_url_suffix_properties of this Ad.
        :param comments: The comments of this Ad.
        :param compatibility: The compatibility of this Ad.
        :param create_info: The create_info of this Ad.
        :param creative_group_assignments: The creative_group_assignments of this Ad.
        :param creative_rotation: The creative_rotation of this Ad.
        :param day_part_targeting: The day_part_targeting of this Ad.
        :param default_click_through_event_tag_properties: The default_click_through_event_tag_properties of this Ad.
        :param delivery_schedule: The delivery_schedule of this Ad.
        :param dynamic_click_tracker: The dynamic_click_tracker of this Ad.
        :param end_time: The end_time of this Ad.
        :param event_tag_overrides: The event_tag_overrides of this Ad.
        :param geo_targeting: The geo_targeting of this Ad.
        :param id: The id of this Ad.
        :param id_dimension_value: The id_dimension_value of this Ad.
        :param key_value_targeting_expression: The key_value_targeting_expression of this Ad.
        :param kind: The kind of this Ad.
        :param language_targeting: The language_targeting of this Ad.
        :param last_modified_info: The last_modified_info of this Ad.
        :param name: The name of this Ad.
        :param placement_assignments: The placement_assignments of this Ad.
        :param remarketing_list_expression: The remarketing_list_expression of this Ad.
        :param size: The size of this Ad.
        :param ssl_compliant: The ssl_compliant of this Ad.
        :param ssl_required: The ssl_required of this Ad.
        :param start_time: The start_time of this Ad.
        :param subaccount_id: The subaccount_id of this Ad.
        :param targeting_template_id: The targeting_template_id of this Ad.
        :param technology_targeting: The technology_targeting of this Ad.
        :param type: The type of this Ad.
        """
        self.openapi_types = {
            'account_id': str,
            'active': bool,
            'advertiser_id': str,
            'advertiser_id_dimension_value': DimensionValue,
            'archived': bool,
            'audience_segment_id': str,
            'campaign_id': str,
            'campaign_id_dimension_value': DimensionValue,
            'click_through_url': ClickThroughUrl,
            'click_through_url_suffix_properties': ClickThroughUrlSuffixProperties,
            'comments': str,
            'compatibility': str,
            'create_info': LastModifiedInfo,
            'creative_group_assignments': List[CreativeGroupAssignment],
            'creative_rotation': CreativeRotation,
            'day_part_targeting': DayPartTargeting,
            'default_click_through_event_tag_properties': DefaultClickThroughEventTagProperties,
            'delivery_schedule': DeliverySchedule,
            'dynamic_click_tracker': bool,
            'end_time': datetime,
            'event_tag_overrides': List[EventTagOverride],
            'geo_targeting': GeoTargeting,
            'id': str,
            'id_dimension_value': DimensionValue,
            'key_value_targeting_expression': KeyValueTargetingExpression,
            'kind': str,
            'language_targeting': LanguageTargeting,
            'last_modified_info': LastModifiedInfo,
            'name': str,
            'placement_assignments': List[PlacementAssignment],
            'remarketing_list_expression': ListTargetingExpression,
            'size': Size,
            'ssl_compliant': bool,
            'ssl_required': bool,
            'start_time': datetime,
            'subaccount_id': str,
            'targeting_template_id': str,
            'technology_targeting': TechnologyTargeting,
            'type': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'active': 'active',
            'advertiser_id': 'advertiserId',
            'advertiser_id_dimension_value': 'advertiserIdDimensionValue',
            'archived': 'archived',
            'audience_segment_id': 'audienceSegmentId',
            'campaign_id': 'campaignId',
            'campaign_id_dimension_value': 'campaignIdDimensionValue',
            'click_through_url': 'clickThroughUrl',
            'click_through_url_suffix_properties': 'clickThroughUrlSuffixProperties',
            'comments': 'comments',
            'compatibility': 'compatibility',
            'create_info': 'createInfo',
            'creative_group_assignments': 'creativeGroupAssignments',
            'creative_rotation': 'creativeRotation',
            'day_part_targeting': 'dayPartTargeting',
            'default_click_through_event_tag_properties': 'defaultClickThroughEventTagProperties',
            'delivery_schedule': 'deliverySchedule',
            'dynamic_click_tracker': 'dynamicClickTracker',
            'end_time': 'endTime',
            'event_tag_overrides': 'eventTagOverrides',
            'geo_targeting': 'geoTargeting',
            'id': 'id',
            'id_dimension_value': 'idDimensionValue',
            'key_value_targeting_expression': 'keyValueTargetingExpression',
            'kind': 'kind',
            'language_targeting': 'languageTargeting',
            'last_modified_info': 'lastModifiedInfo',
            'name': 'name',
            'placement_assignments': 'placementAssignments',
            'remarketing_list_expression': 'remarketingListExpression',
            'size': 'size',
            'ssl_compliant': 'sslCompliant',
            'ssl_required': 'sslRequired',
            'start_time': 'startTime',
            'subaccount_id': 'subaccountId',
            'targeting_template_id': 'targetingTemplateId',
            'technology_targeting': 'technologyTargeting',
            'type': 'type'
        }

        self._account_id = account_id
        self._active = active
        self._advertiser_id = advertiser_id
        self._advertiser_id_dimension_value = advertiser_id_dimension_value
        self._archived = archived
        self._audience_segment_id = audience_segment_id
        self._campaign_id = campaign_id
        self._campaign_id_dimension_value = campaign_id_dimension_value
        self._click_through_url = click_through_url
        self._click_through_url_suffix_properties = click_through_url_suffix_properties
        self._comments = comments
        self._compatibility = compatibility
        self._create_info = create_info
        self._creative_group_assignments = creative_group_assignments
        self._creative_rotation = creative_rotation
        self._day_part_targeting = day_part_targeting
        self._default_click_through_event_tag_properties = default_click_through_event_tag_properties
        self._delivery_schedule = delivery_schedule
        self._dynamic_click_tracker = dynamic_click_tracker
        self._end_time = end_time
        self._event_tag_overrides = event_tag_overrides
        self._geo_targeting = geo_targeting
        self._id = id
        self._id_dimension_value = id_dimension_value
        self._key_value_targeting_expression = key_value_targeting_expression
        self._kind = kind
        self._language_targeting = language_targeting
        self._last_modified_info = last_modified_info
        self._name = name
        self._placement_assignments = placement_assignments
        self._remarketing_list_expression = remarketing_list_expression
        self._size = size
        self._ssl_compliant = ssl_compliant
        self._ssl_required = ssl_required
        self._start_time = start_time
        self._subaccount_id = subaccount_id
        self._targeting_template_id = targeting_template_id
        self._technology_targeting = technology_targeting
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Ad':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Ad of this Ad.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this Ad.

        Account ID of this ad. This is a read-only field that can be left blank.

        :return: The account_id of this Ad.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Ad.

        Account ID of this ad. This is a read-only field that can be left blank.

        :param account_id: The account_id of this Ad.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def active(self):
        """Gets the active of this Ad.

        Whether this ad is active. When true, archived must be false.

        :return: The active of this Ad.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Ad.

        Whether this ad is active. When true, archived must be false.

        :param active: The active of this Ad.
        :type active: bool
        """

        self._active = active

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this Ad.

        Advertiser ID of this ad. This is a required field on insertion.

        :return: The advertiser_id of this Ad.
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this Ad.

        Advertiser ID of this ad. This is a required field on insertion.

        :param advertiser_id: The advertiser_id of this Ad.
        :type advertiser_id: str
        """

        self._advertiser_id = advertiser_id

    @property
    def advertiser_id_dimension_value(self):
        """Gets the advertiser_id_dimension_value of this Ad.


        :return: The advertiser_id_dimension_value of this Ad.
        :rtype: DimensionValue
        """
        return self._advertiser_id_dimension_value

    @advertiser_id_dimension_value.setter
    def advertiser_id_dimension_value(self, advertiser_id_dimension_value):
        """Sets the advertiser_id_dimension_value of this Ad.


        :param advertiser_id_dimension_value: The advertiser_id_dimension_value of this Ad.
        :type advertiser_id_dimension_value: DimensionValue
        """

        self._advertiser_id_dimension_value = advertiser_id_dimension_value

    @property
    def archived(self):
        """Gets the archived of this Ad.

        Whether this ad is archived. When true, active must be false.

        :return: The archived of this Ad.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this Ad.

        Whether this ad is archived. When true, active must be false.

        :param archived: The archived of this Ad.
        :type archived: bool
        """

        self._archived = archived

    @property
    def audience_segment_id(self):
        """Gets the audience_segment_id of this Ad.

        Audience segment ID that is being targeted for this ad. Applicable when type is AD_SERVING_STANDARD_AD.

        :return: The audience_segment_id of this Ad.
        :rtype: str
        """
        return self._audience_segment_id

    @audience_segment_id.setter
    def audience_segment_id(self, audience_segment_id):
        """Sets the audience_segment_id of this Ad.

        Audience segment ID that is being targeted for this ad. Applicable when type is AD_SERVING_STANDARD_AD.

        :param audience_segment_id: The audience_segment_id of this Ad.
        :type audience_segment_id: str
        """

        self._audience_segment_id = audience_segment_id

    @property
    def campaign_id(self):
        """Gets the campaign_id of this Ad.

        Campaign ID of this ad. This is a required field on insertion.

        :return: The campaign_id of this Ad.
        :rtype: str
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this Ad.

        Campaign ID of this ad. This is a required field on insertion.

        :param campaign_id: The campaign_id of this Ad.
        :type campaign_id: str
        """

        self._campaign_id = campaign_id

    @property
    def campaign_id_dimension_value(self):
        """Gets the campaign_id_dimension_value of this Ad.


        :return: The campaign_id_dimension_value of this Ad.
        :rtype: DimensionValue
        """
        return self._campaign_id_dimension_value

    @campaign_id_dimension_value.setter
    def campaign_id_dimension_value(self, campaign_id_dimension_value):
        """Sets the campaign_id_dimension_value of this Ad.


        :param campaign_id_dimension_value: The campaign_id_dimension_value of this Ad.
        :type campaign_id_dimension_value: DimensionValue
        """

        self._campaign_id_dimension_value = campaign_id_dimension_value

    @property
    def click_through_url(self):
        """Gets the click_through_url of this Ad.


        :return: The click_through_url of this Ad.
        :rtype: ClickThroughUrl
        """
        return self._click_through_url

    @click_through_url.setter
    def click_through_url(self, click_through_url):
        """Sets the click_through_url of this Ad.


        :param click_through_url: The click_through_url of this Ad.
        :type click_through_url: ClickThroughUrl
        """

        self._click_through_url = click_through_url

    @property
    def click_through_url_suffix_properties(self):
        """Gets the click_through_url_suffix_properties of this Ad.


        :return: The click_through_url_suffix_properties of this Ad.
        :rtype: ClickThroughUrlSuffixProperties
        """
        return self._click_through_url_suffix_properties

    @click_through_url_suffix_properties.setter
    def click_through_url_suffix_properties(self, click_through_url_suffix_properties):
        """Sets the click_through_url_suffix_properties of this Ad.


        :param click_through_url_suffix_properties: The click_through_url_suffix_properties of this Ad.
        :type click_through_url_suffix_properties: ClickThroughUrlSuffixProperties
        """

        self._click_through_url_suffix_properties = click_through_url_suffix_properties

    @property
    def comments(self):
        """Gets the comments of this Ad.

        Comments for this ad.

        :return: The comments of this Ad.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this Ad.

        Comments for this ad.

        :param comments: The comments of this Ad.
        :type comments: str
        """

        self._comments = comments

    @property
    def compatibility(self):
        """Gets the compatibility of this Ad.

        Compatibility of this ad. Applicable when type is AD_SERVING_DEFAULT_AD. DISPLAY and DISPLAY_INTERSTITIAL refer to either rendering on desktop or on mobile devices or in mobile apps for regular or interstitial ads, respectively. APP and APP_INTERSTITIAL are only used for existing default ads. New mobile placements must be assigned DISPLAY or DISPLAY_INTERSTITIAL and default ads created for those placements will be limited to those compatibility types. IN_STREAM_VIDEO refers to rendering in-stream video ads developed with the VAST standard.

        :return: The compatibility of this Ad.
        :rtype: str
        """
        return self._compatibility

    @compatibility.setter
    def compatibility(self, compatibility):
        """Sets the compatibility of this Ad.

        Compatibility of this ad. Applicable when type is AD_SERVING_DEFAULT_AD. DISPLAY and DISPLAY_INTERSTITIAL refer to either rendering on desktop or on mobile devices or in mobile apps for regular or interstitial ads, respectively. APP and APP_INTERSTITIAL are only used for existing default ads. New mobile placements must be assigned DISPLAY or DISPLAY_INTERSTITIAL and default ads created for those placements will be limited to those compatibility types. IN_STREAM_VIDEO refers to rendering in-stream video ads developed with the VAST standard.

        :param compatibility: The compatibility of this Ad.
        :type compatibility: str
        """
        allowed_values = ["DISPLAY", "DISPLAY_INTERSTITIAL", "APP", "APP_INTERSTITIAL", "IN_STREAM_VIDEO", "IN_STREAM_AUDIO"]  # noqa: E501
        if compatibility not in allowed_values:
            raise ValueError(
                "Invalid value for `compatibility` ({0}), must be one of {1}"
                .format(compatibility, allowed_values)
            )

        self._compatibility = compatibility

    @property
    def create_info(self):
        """Gets the create_info of this Ad.


        :return: The create_info of this Ad.
        :rtype: LastModifiedInfo
        """
        return self._create_info

    @create_info.setter
    def create_info(self, create_info):
        """Sets the create_info of this Ad.


        :param create_info: The create_info of this Ad.
        :type create_info: LastModifiedInfo
        """

        self._create_info = create_info

    @property
    def creative_group_assignments(self):
        """Gets the creative_group_assignments of this Ad.

        Creative group assignments for this ad. Applicable when type is AD_SERVING_CLICK_TRACKER. Only one assignment per creative group number is allowed for a maximum of two assignments.

        :return: The creative_group_assignments of this Ad.
        :rtype: List[CreativeGroupAssignment]
        """
        return self._creative_group_assignments

    @creative_group_assignments.setter
    def creative_group_assignments(self, creative_group_assignments):
        """Sets the creative_group_assignments of this Ad.

        Creative group assignments for this ad. Applicable when type is AD_SERVING_CLICK_TRACKER. Only one assignment per creative group number is allowed for a maximum of two assignments.

        :param creative_group_assignments: The creative_group_assignments of this Ad.
        :type creative_group_assignments: List[CreativeGroupAssignment]
        """

        self._creative_group_assignments = creative_group_assignments

    @property
    def creative_rotation(self):
        """Gets the creative_rotation of this Ad.


        :return: The creative_rotation of this Ad.
        :rtype: CreativeRotation
        """
        return self._creative_rotation

    @creative_rotation.setter
    def creative_rotation(self, creative_rotation):
        """Sets the creative_rotation of this Ad.


        :param creative_rotation: The creative_rotation of this Ad.
        :type creative_rotation: CreativeRotation
        """

        self._creative_rotation = creative_rotation

    @property
    def day_part_targeting(self):
        """Gets the day_part_targeting of this Ad.


        :return: The day_part_targeting of this Ad.
        :rtype: DayPartTargeting
        """
        return self._day_part_targeting

    @day_part_targeting.setter
    def day_part_targeting(self, day_part_targeting):
        """Sets the day_part_targeting of this Ad.


        :param day_part_targeting: The day_part_targeting of this Ad.
        :type day_part_targeting: DayPartTargeting
        """

        self._day_part_targeting = day_part_targeting

    @property
    def default_click_through_event_tag_properties(self):
        """Gets the default_click_through_event_tag_properties of this Ad.


        :return: The default_click_through_event_tag_properties of this Ad.
        :rtype: DefaultClickThroughEventTagProperties
        """
        return self._default_click_through_event_tag_properties

    @default_click_through_event_tag_properties.setter
    def default_click_through_event_tag_properties(self, default_click_through_event_tag_properties):
        """Sets the default_click_through_event_tag_properties of this Ad.


        :param default_click_through_event_tag_properties: The default_click_through_event_tag_properties of this Ad.
        :type default_click_through_event_tag_properties: DefaultClickThroughEventTagProperties
        """

        self._default_click_through_event_tag_properties = default_click_through_event_tag_properties

    @property
    def delivery_schedule(self):
        """Gets the delivery_schedule of this Ad.


        :return: The delivery_schedule of this Ad.
        :rtype: DeliverySchedule
        """
        return self._delivery_schedule

    @delivery_schedule.setter
    def delivery_schedule(self, delivery_schedule):
        """Sets the delivery_schedule of this Ad.


        :param delivery_schedule: The delivery_schedule of this Ad.
        :type delivery_schedule: DeliverySchedule
        """

        self._delivery_schedule = delivery_schedule

    @property
    def dynamic_click_tracker(self):
        """Gets the dynamic_click_tracker of this Ad.

        Whether this ad is a dynamic click tracker. Applicable when type is AD_SERVING_CLICK_TRACKER. This is a required field on insert, and is read-only after insert.

        :return: The dynamic_click_tracker of this Ad.
        :rtype: bool
        """
        return self._dynamic_click_tracker

    @dynamic_click_tracker.setter
    def dynamic_click_tracker(self, dynamic_click_tracker):
        """Sets the dynamic_click_tracker of this Ad.

        Whether this ad is a dynamic click tracker. Applicable when type is AD_SERVING_CLICK_TRACKER. This is a required field on insert, and is read-only after insert.

        :param dynamic_click_tracker: The dynamic_click_tracker of this Ad.
        :type dynamic_click_tracker: bool
        """

        self._dynamic_click_tracker = dynamic_click_tracker

    @property
    def end_time(self):
        """Gets the end_time of this Ad.


        :return: The end_time of this Ad.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this Ad.


        :param end_time: The end_time of this Ad.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def event_tag_overrides(self):
        """Gets the event_tag_overrides of this Ad.

        Event tag overrides for this ad.

        :return: The event_tag_overrides of this Ad.
        :rtype: List[EventTagOverride]
        """
        return self._event_tag_overrides

    @event_tag_overrides.setter
    def event_tag_overrides(self, event_tag_overrides):
        """Sets the event_tag_overrides of this Ad.

        Event tag overrides for this ad.

        :param event_tag_overrides: The event_tag_overrides of this Ad.
        :type event_tag_overrides: List[EventTagOverride]
        """

        self._event_tag_overrides = event_tag_overrides

    @property
    def geo_targeting(self):
        """Gets the geo_targeting of this Ad.


        :return: The geo_targeting of this Ad.
        :rtype: GeoTargeting
        """
        return self._geo_targeting

    @geo_targeting.setter
    def geo_targeting(self, geo_targeting):
        """Sets the geo_targeting of this Ad.


        :param geo_targeting: The geo_targeting of this Ad.
        :type geo_targeting: GeoTargeting
        """

        self._geo_targeting = geo_targeting

    @property
    def id(self):
        """Gets the id of this Ad.

        ID of this ad. This is a read-only, auto-generated field.

        :return: The id of this Ad.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Ad.

        ID of this ad. This is a read-only, auto-generated field.

        :param id: The id of this Ad.
        :type id: str
        """

        self._id = id

    @property
    def id_dimension_value(self):
        """Gets the id_dimension_value of this Ad.


        :return: The id_dimension_value of this Ad.
        :rtype: DimensionValue
        """
        return self._id_dimension_value

    @id_dimension_value.setter
    def id_dimension_value(self, id_dimension_value):
        """Sets the id_dimension_value of this Ad.


        :param id_dimension_value: The id_dimension_value of this Ad.
        :type id_dimension_value: DimensionValue
        """

        self._id_dimension_value = id_dimension_value

    @property
    def key_value_targeting_expression(self):
        """Gets the key_value_targeting_expression of this Ad.


        :return: The key_value_targeting_expression of this Ad.
        :rtype: KeyValueTargetingExpression
        """
        return self._key_value_targeting_expression

    @key_value_targeting_expression.setter
    def key_value_targeting_expression(self, key_value_targeting_expression):
        """Sets the key_value_targeting_expression of this Ad.


        :param key_value_targeting_expression: The key_value_targeting_expression of this Ad.
        :type key_value_targeting_expression: KeyValueTargetingExpression
        """

        self._key_value_targeting_expression = key_value_targeting_expression

    @property
    def kind(self):
        """Gets the kind of this Ad.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#ad\".

        :return: The kind of this Ad.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Ad.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#ad\".

        :param kind: The kind of this Ad.
        :type kind: str
        """

        self._kind = kind

    @property
    def language_targeting(self):
        """Gets the language_targeting of this Ad.


        :return: The language_targeting of this Ad.
        :rtype: LanguageTargeting
        """
        return self._language_targeting

    @language_targeting.setter
    def language_targeting(self, language_targeting):
        """Sets the language_targeting of this Ad.


        :param language_targeting: The language_targeting of this Ad.
        :type language_targeting: LanguageTargeting
        """

        self._language_targeting = language_targeting

    @property
    def last_modified_info(self):
        """Gets the last_modified_info of this Ad.


        :return: The last_modified_info of this Ad.
        :rtype: LastModifiedInfo
        """
        return self._last_modified_info

    @last_modified_info.setter
    def last_modified_info(self, last_modified_info):
        """Sets the last_modified_info of this Ad.


        :param last_modified_info: The last_modified_info of this Ad.
        :type last_modified_info: LastModifiedInfo
        """

        self._last_modified_info = last_modified_info

    @property
    def name(self):
        """Gets the name of this Ad.

        Name of this ad. This is a required field and must be less than 256 characters long.

        :return: The name of this Ad.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Ad.

        Name of this ad. This is a required field and must be less than 256 characters long.

        :param name: The name of this Ad.
        :type name: str
        """

        self._name = name

    @property
    def placement_assignments(self):
        """Gets the placement_assignments of this Ad.

        Placement assignments for this ad.

        :return: The placement_assignments of this Ad.
        :rtype: List[PlacementAssignment]
        """
        return self._placement_assignments

    @placement_assignments.setter
    def placement_assignments(self, placement_assignments):
        """Sets the placement_assignments of this Ad.

        Placement assignments for this ad.

        :param placement_assignments: The placement_assignments of this Ad.
        :type placement_assignments: List[PlacementAssignment]
        """

        self._placement_assignments = placement_assignments

    @property
    def remarketing_list_expression(self):
        """Gets the remarketing_list_expression of this Ad.


        :return: The remarketing_list_expression of this Ad.
        :rtype: ListTargetingExpression
        """
        return self._remarketing_list_expression

    @remarketing_list_expression.setter
    def remarketing_list_expression(self, remarketing_list_expression):
        """Sets the remarketing_list_expression of this Ad.


        :param remarketing_list_expression: The remarketing_list_expression of this Ad.
        :type remarketing_list_expression: ListTargetingExpression
        """

        self._remarketing_list_expression = remarketing_list_expression

    @property
    def size(self):
        """Gets the size of this Ad.


        :return: The size of this Ad.
        :rtype: Size
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Ad.


        :param size: The size of this Ad.
        :type size: Size
        """

        self._size = size

    @property
    def ssl_compliant(self):
        """Gets the ssl_compliant of this Ad.

        Whether this ad is ssl compliant. This is a read-only field that is auto-generated when the ad is inserted or updated.

        :return: The ssl_compliant of this Ad.
        :rtype: bool
        """
        return self._ssl_compliant

    @ssl_compliant.setter
    def ssl_compliant(self, ssl_compliant):
        """Sets the ssl_compliant of this Ad.

        Whether this ad is ssl compliant. This is a read-only field that is auto-generated when the ad is inserted or updated.

        :param ssl_compliant: The ssl_compliant of this Ad.
        :type ssl_compliant: bool
        """

        self._ssl_compliant = ssl_compliant

    @property
    def ssl_required(self):
        """Gets the ssl_required of this Ad.

        Whether this ad requires ssl. This is a read-only field that is auto-generated when the ad is inserted or updated.

        :return: The ssl_required of this Ad.
        :rtype: bool
        """
        return self._ssl_required

    @ssl_required.setter
    def ssl_required(self, ssl_required):
        """Sets the ssl_required of this Ad.

        Whether this ad requires ssl. This is a read-only field that is auto-generated when the ad is inserted or updated.

        :param ssl_required: The ssl_required of this Ad.
        :type ssl_required: bool
        """

        self._ssl_required = ssl_required

    @property
    def start_time(self):
        """Gets the start_time of this Ad.


        :return: The start_time of this Ad.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Ad.


        :param start_time: The start_time of this Ad.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def subaccount_id(self):
        """Gets the subaccount_id of this Ad.

        Subaccount ID of this ad. This is a read-only field that can be left blank.

        :return: The subaccount_id of this Ad.
        :rtype: str
        """
        return self._subaccount_id

    @subaccount_id.setter
    def subaccount_id(self, subaccount_id):
        """Sets the subaccount_id of this Ad.

        Subaccount ID of this ad. This is a read-only field that can be left blank.

        :param subaccount_id: The subaccount_id of this Ad.
        :type subaccount_id: str
        """

        self._subaccount_id = subaccount_id

    @property
    def targeting_template_id(self):
        """Gets the targeting_template_id of this Ad.

        Targeting template ID, used to apply preconfigured targeting information to this ad. This cannot be set while any of dayPartTargeting, geoTargeting, keyValueTargetingExpression, languageTargeting, remarketingListExpression, or technologyTargeting are set. Applicable when type is AD_SERVING_STANDARD_AD.

        :return: The targeting_template_id of this Ad.
        :rtype: str
        """
        return self._targeting_template_id

    @targeting_template_id.setter
    def targeting_template_id(self, targeting_template_id):
        """Sets the targeting_template_id of this Ad.

        Targeting template ID, used to apply preconfigured targeting information to this ad. This cannot be set while any of dayPartTargeting, geoTargeting, keyValueTargetingExpression, languageTargeting, remarketingListExpression, or technologyTargeting are set. Applicable when type is AD_SERVING_STANDARD_AD.

        :param targeting_template_id: The targeting_template_id of this Ad.
        :type targeting_template_id: str
        """

        self._targeting_template_id = targeting_template_id

    @property
    def technology_targeting(self):
        """Gets the technology_targeting of this Ad.


        :return: The technology_targeting of this Ad.
        :rtype: TechnologyTargeting
        """
        return self._technology_targeting

    @technology_targeting.setter
    def technology_targeting(self, technology_targeting):
        """Sets the technology_targeting of this Ad.


        :param technology_targeting: The technology_targeting of this Ad.
        :type technology_targeting: TechnologyTargeting
        """

        self._technology_targeting = technology_targeting

    @property
    def type(self):
        """Gets the type of this Ad.

        Type of ad. This is a required field on insertion. Note that default ads ( AD_SERVING_DEFAULT_AD) cannot be created directly (see Creative resource).

        :return: The type of this Ad.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Ad.

        Type of ad. This is a required field on insertion. Note that default ads ( AD_SERVING_DEFAULT_AD) cannot be created directly (see Creative resource).

        :param type: The type of this Ad.
        :type type: str
        """
        allowed_values = ["AD_SERVING_STANDARD_AD", "AD_SERVING_DEFAULT_AD", "AD_SERVING_CLICK_TRACKER", "AD_SERVING_TRACKING", "AD_SERVING_BRAND_SAFE_AD"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
