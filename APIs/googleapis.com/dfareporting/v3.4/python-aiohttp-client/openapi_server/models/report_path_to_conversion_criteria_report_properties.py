# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReportPathToConversionCriteriaReportProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, clicks_lookback_window: int=None, impressions_lookback_window: int=None, include_attributed_ip_conversions: bool=None, include_unattributed_cookie_conversions: bool=None, include_unattributed_ip_conversions: bool=None, maximum_click_interactions: int=None, maximum_impression_interactions: int=None, maximum_interaction_gap: int=None, pivot_on_interaction_path: bool=None):
        """ReportPathToConversionCriteriaReportProperties - a model defined in OpenAPI

        :param clicks_lookback_window: The clicks_lookback_window of this ReportPathToConversionCriteriaReportProperties.
        :param impressions_lookback_window: The impressions_lookback_window of this ReportPathToConversionCriteriaReportProperties.
        :param include_attributed_ip_conversions: The include_attributed_ip_conversions of this ReportPathToConversionCriteriaReportProperties.
        :param include_unattributed_cookie_conversions: The include_unattributed_cookie_conversions of this ReportPathToConversionCriteriaReportProperties.
        :param include_unattributed_ip_conversions: The include_unattributed_ip_conversions of this ReportPathToConversionCriteriaReportProperties.
        :param maximum_click_interactions: The maximum_click_interactions of this ReportPathToConversionCriteriaReportProperties.
        :param maximum_impression_interactions: The maximum_impression_interactions of this ReportPathToConversionCriteriaReportProperties.
        :param maximum_interaction_gap: The maximum_interaction_gap of this ReportPathToConversionCriteriaReportProperties.
        :param pivot_on_interaction_path: The pivot_on_interaction_path of this ReportPathToConversionCriteriaReportProperties.
        """
        self.openapi_types = {
            'clicks_lookback_window': int,
            'impressions_lookback_window': int,
            'include_attributed_ip_conversions': bool,
            'include_unattributed_cookie_conversions': bool,
            'include_unattributed_ip_conversions': bool,
            'maximum_click_interactions': int,
            'maximum_impression_interactions': int,
            'maximum_interaction_gap': int,
            'pivot_on_interaction_path': bool
        }

        self.attribute_map = {
            'clicks_lookback_window': 'clicksLookbackWindow',
            'impressions_lookback_window': 'impressionsLookbackWindow',
            'include_attributed_ip_conversions': 'includeAttributedIPConversions',
            'include_unattributed_cookie_conversions': 'includeUnattributedCookieConversions',
            'include_unattributed_ip_conversions': 'includeUnattributedIPConversions',
            'maximum_click_interactions': 'maximumClickInteractions',
            'maximum_impression_interactions': 'maximumImpressionInteractions',
            'maximum_interaction_gap': 'maximumInteractionGap',
            'pivot_on_interaction_path': 'pivotOnInteractionPath'
        }

        self._clicks_lookback_window = clicks_lookback_window
        self._impressions_lookback_window = impressions_lookback_window
        self._include_attributed_ip_conversions = include_attributed_ip_conversions
        self._include_unattributed_cookie_conversions = include_unattributed_cookie_conversions
        self._include_unattributed_ip_conversions = include_unattributed_ip_conversions
        self._maximum_click_interactions = maximum_click_interactions
        self._maximum_impression_interactions = maximum_impression_interactions
        self._maximum_interaction_gap = maximum_interaction_gap
        self._pivot_on_interaction_path = pivot_on_interaction_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportPathToConversionCriteriaReportProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Report_pathToConversionCriteria_reportProperties of this ReportPathToConversionCriteriaReportProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def clicks_lookback_window(self):
        """Gets the clicks_lookback_window of this ReportPathToConversionCriteriaReportProperties.

        CM360 checks to see if a click interaction occurred within the specified period of time before a conversion. By default the value is pulled from Floodlight or you can manually enter a custom value. Valid values: 1-90.

        :return: The clicks_lookback_window of this ReportPathToConversionCriteriaReportProperties.
        :rtype: int
        """
        return self._clicks_lookback_window

    @clicks_lookback_window.setter
    def clicks_lookback_window(self, clicks_lookback_window):
        """Sets the clicks_lookback_window of this ReportPathToConversionCriteriaReportProperties.

        CM360 checks to see if a click interaction occurred within the specified period of time before a conversion. By default the value is pulled from Floodlight or you can manually enter a custom value. Valid values: 1-90.

        :param clicks_lookback_window: The clicks_lookback_window of this ReportPathToConversionCriteriaReportProperties.
        :type clicks_lookback_window: int
        """

        self._clicks_lookback_window = clicks_lookback_window

    @property
    def impressions_lookback_window(self):
        """Gets the impressions_lookback_window of this ReportPathToConversionCriteriaReportProperties.

        CM360 checks to see if an impression interaction occurred within the specified period of time before a conversion. By default the value is pulled from Floodlight or you can manually enter a custom value. Valid values: 1-90.

        :return: The impressions_lookback_window of this ReportPathToConversionCriteriaReportProperties.
        :rtype: int
        """
        return self._impressions_lookback_window

    @impressions_lookback_window.setter
    def impressions_lookback_window(self, impressions_lookback_window):
        """Sets the impressions_lookback_window of this ReportPathToConversionCriteriaReportProperties.

        CM360 checks to see if an impression interaction occurred within the specified period of time before a conversion. By default the value is pulled from Floodlight or you can manually enter a custom value. Valid values: 1-90.

        :param impressions_lookback_window: The impressions_lookback_window of this ReportPathToConversionCriteriaReportProperties.
        :type impressions_lookback_window: int
        """

        self._impressions_lookback_window = impressions_lookback_window

    @property
    def include_attributed_ip_conversions(self):
        """Gets the include_attributed_ip_conversions of this ReportPathToConversionCriteriaReportProperties.

        Deprecated: has no effect.

        :return: The include_attributed_ip_conversions of this ReportPathToConversionCriteriaReportProperties.
        :rtype: bool
        """
        return self._include_attributed_ip_conversions

    @include_attributed_ip_conversions.setter
    def include_attributed_ip_conversions(self, include_attributed_ip_conversions):
        """Sets the include_attributed_ip_conversions of this ReportPathToConversionCriteriaReportProperties.

        Deprecated: has no effect.

        :param include_attributed_ip_conversions: The include_attributed_ip_conversions of this ReportPathToConversionCriteriaReportProperties.
        :type include_attributed_ip_conversions: bool
        """

        self._include_attributed_ip_conversions = include_attributed_ip_conversions

    @property
    def include_unattributed_cookie_conversions(self):
        """Gets the include_unattributed_cookie_conversions of this ReportPathToConversionCriteriaReportProperties.

        Include conversions of users with a DoubleClick cookie but without an exposure. That means the user did not click or see an ad from the advertiser within the Floodlight group, or that the interaction happened outside the lookback window.

        :return: The include_unattributed_cookie_conversions of this ReportPathToConversionCriteriaReportProperties.
        :rtype: bool
        """
        return self._include_unattributed_cookie_conversions

    @include_unattributed_cookie_conversions.setter
    def include_unattributed_cookie_conversions(self, include_unattributed_cookie_conversions):
        """Sets the include_unattributed_cookie_conversions of this ReportPathToConversionCriteriaReportProperties.

        Include conversions of users with a DoubleClick cookie but without an exposure. That means the user did not click or see an ad from the advertiser within the Floodlight group, or that the interaction happened outside the lookback window.

        :param include_unattributed_cookie_conversions: The include_unattributed_cookie_conversions of this ReportPathToConversionCriteriaReportProperties.
        :type include_unattributed_cookie_conversions: bool
        """

        self._include_unattributed_cookie_conversions = include_unattributed_cookie_conversions

    @property
    def include_unattributed_ip_conversions(self):
        """Gets the include_unattributed_ip_conversions of this ReportPathToConversionCriteriaReportProperties.

        Include conversions that have no associated cookies and no exposures. Itâ€™s therefore impossible to know how the user was exposed to your ads during the lookback window prior to a conversion.

        :return: The include_unattributed_ip_conversions of this ReportPathToConversionCriteriaReportProperties.
        :rtype: bool
        """
        return self._include_unattributed_ip_conversions

    @include_unattributed_ip_conversions.setter
    def include_unattributed_ip_conversions(self, include_unattributed_ip_conversions):
        """Sets the include_unattributed_ip_conversions of this ReportPathToConversionCriteriaReportProperties.

        Include conversions that have no associated cookies and no exposures. Itâ€™s therefore impossible to know how the user was exposed to your ads during the lookback window prior to a conversion.

        :param include_unattributed_ip_conversions: The include_unattributed_ip_conversions of this ReportPathToConversionCriteriaReportProperties.
        :type include_unattributed_ip_conversions: bool
        """

        self._include_unattributed_ip_conversions = include_unattributed_ip_conversions

    @property
    def maximum_click_interactions(self):
        """Gets the maximum_click_interactions of this ReportPathToConversionCriteriaReportProperties.

        The maximum number of click interactions to include in the report. Advertisers currently paying for E2C reports get up to 200 (100 clicks, 100 impressions). If another advertiser in your network is paying for E2C, you can have up to 5 total exposures per report.

        :return: The maximum_click_interactions of this ReportPathToConversionCriteriaReportProperties.
        :rtype: int
        """
        return self._maximum_click_interactions

    @maximum_click_interactions.setter
    def maximum_click_interactions(self, maximum_click_interactions):
        """Sets the maximum_click_interactions of this ReportPathToConversionCriteriaReportProperties.

        The maximum number of click interactions to include in the report. Advertisers currently paying for E2C reports get up to 200 (100 clicks, 100 impressions). If another advertiser in your network is paying for E2C, you can have up to 5 total exposures per report.

        :param maximum_click_interactions: The maximum_click_interactions of this ReportPathToConversionCriteriaReportProperties.
        :type maximum_click_interactions: int
        """

        self._maximum_click_interactions = maximum_click_interactions

    @property
    def maximum_impression_interactions(self):
        """Gets the maximum_impression_interactions of this ReportPathToConversionCriteriaReportProperties.

        The maximum number of click interactions to include in the report. Advertisers currently paying for E2C reports get up to 200 (100 clicks, 100 impressions). If another advertiser in your network is paying for E2C, you can have up to 5 total exposures per report.

        :return: The maximum_impression_interactions of this ReportPathToConversionCriteriaReportProperties.
        :rtype: int
        """
        return self._maximum_impression_interactions

    @maximum_impression_interactions.setter
    def maximum_impression_interactions(self, maximum_impression_interactions):
        """Sets the maximum_impression_interactions of this ReportPathToConversionCriteriaReportProperties.

        The maximum number of click interactions to include in the report. Advertisers currently paying for E2C reports get up to 200 (100 clicks, 100 impressions). If another advertiser in your network is paying for E2C, you can have up to 5 total exposures per report.

        :param maximum_impression_interactions: The maximum_impression_interactions of this ReportPathToConversionCriteriaReportProperties.
        :type maximum_impression_interactions: int
        """

        self._maximum_impression_interactions = maximum_impression_interactions

    @property
    def maximum_interaction_gap(self):
        """Gets the maximum_interaction_gap of this ReportPathToConversionCriteriaReportProperties.

        The maximum amount of time that can take place between interactions (clicks or impressions) by the same user. Valid values: 1-90.

        :return: The maximum_interaction_gap of this ReportPathToConversionCriteriaReportProperties.
        :rtype: int
        """
        return self._maximum_interaction_gap

    @maximum_interaction_gap.setter
    def maximum_interaction_gap(self, maximum_interaction_gap):
        """Sets the maximum_interaction_gap of this ReportPathToConversionCriteriaReportProperties.

        The maximum amount of time that can take place between interactions (clicks or impressions) by the same user. Valid values: 1-90.

        :param maximum_interaction_gap: The maximum_interaction_gap of this ReportPathToConversionCriteriaReportProperties.
        :type maximum_interaction_gap: int
        """

        self._maximum_interaction_gap = maximum_interaction_gap

    @property
    def pivot_on_interaction_path(self):
        """Gets the pivot_on_interaction_path of this ReportPathToConversionCriteriaReportProperties.

        Enable pivoting on interaction path.

        :return: The pivot_on_interaction_path of this ReportPathToConversionCriteriaReportProperties.
        :rtype: bool
        """
        return self._pivot_on_interaction_path

    @pivot_on_interaction_path.setter
    def pivot_on_interaction_path(self, pivot_on_interaction_path):
        """Sets the pivot_on_interaction_path of this ReportPathToConversionCriteriaReportProperties.

        Enable pivoting on interaction path.

        :param pivot_on_interaction_path: The pivot_on_interaction_path of this ReportPathToConversionCriteriaReportProperties.
        :type pivot_on_interaction_path: bool
        """

        self._pivot_on_interaction_path = pivot_on_interaction_path
