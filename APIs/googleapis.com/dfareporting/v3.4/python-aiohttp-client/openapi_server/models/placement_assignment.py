# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dimension_value import DimensionValue
from openapi_server import util


class PlacementAssignment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, placement_id: str=None, placement_id_dimension_value: DimensionValue=None, ssl_required: bool=None):
        """PlacementAssignment - a model defined in OpenAPI

        :param active: The active of this PlacementAssignment.
        :param placement_id: The placement_id of this PlacementAssignment.
        :param placement_id_dimension_value: The placement_id_dimension_value of this PlacementAssignment.
        :param ssl_required: The ssl_required of this PlacementAssignment.
        """
        self.openapi_types = {
            'active': bool,
            'placement_id': str,
            'placement_id_dimension_value': DimensionValue,
            'ssl_required': bool
        }

        self.attribute_map = {
            'active': 'active',
            'placement_id': 'placementId',
            'placement_id_dimension_value': 'placementIdDimensionValue',
            'ssl_required': 'sslRequired'
        }

        self._active = active
        self._placement_id = placement_id
        self._placement_id_dimension_value = placement_id_dimension_value
        self._ssl_required = ssl_required

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlacementAssignment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlacementAssignment of this PlacementAssignment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this PlacementAssignment.

        Whether this placement assignment is active. When true, the placement will be included in the ad's rotation.

        :return: The active of this PlacementAssignment.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this PlacementAssignment.

        Whether this placement assignment is active. When true, the placement will be included in the ad's rotation.

        :param active: The active of this PlacementAssignment.
        :type active: bool
        """

        self._active = active

    @property
    def placement_id(self):
        """Gets the placement_id of this PlacementAssignment.

        ID of the placement to be assigned. This is a required field.

        :return: The placement_id of this PlacementAssignment.
        :rtype: str
        """
        return self._placement_id

    @placement_id.setter
    def placement_id(self, placement_id):
        """Sets the placement_id of this PlacementAssignment.

        ID of the placement to be assigned. This is a required field.

        :param placement_id: The placement_id of this PlacementAssignment.
        :type placement_id: str
        """

        self._placement_id = placement_id

    @property
    def placement_id_dimension_value(self):
        """Gets the placement_id_dimension_value of this PlacementAssignment.


        :return: The placement_id_dimension_value of this PlacementAssignment.
        :rtype: DimensionValue
        """
        return self._placement_id_dimension_value

    @placement_id_dimension_value.setter
    def placement_id_dimension_value(self, placement_id_dimension_value):
        """Sets the placement_id_dimension_value of this PlacementAssignment.


        :param placement_id_dimension_value: The placement_id_dimension_value of this PlacementAssignment.
        :type placement_id_dimension_value: DimensionValue
        """

        self._placement_id_dimension_value = placement_id_dimension_value

    @property
    def ssl_required(self):
        """Gets the ssl_required of this PlacementAssignment.

        Whether the placement to be assigned requires SSL. This is a read-only field that is auto-generated when the ad is inserted or updated.

        :return: The ssl_required of this PlacementAssignment.
        :rtype: bool
        """
        return self._ssl_required

    @ssl_required.setter
    def ssl_required(self, ssl_required):
        """Sets the ssl_required of this PlacementAssignment.

        Whether the placement to be assigned requires SSL. This is a read-only field that is auto-generated when the ad is inserted or updated.

        :param ssl_required: The ssl_required of this PlacementAssignment.
        :type ssl_required: bool
        """

        self._ssl_required = ssl_required
