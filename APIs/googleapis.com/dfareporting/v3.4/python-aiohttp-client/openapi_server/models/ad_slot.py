# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AdSlot(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comment: str=None, compatibility: str=None, height: str=None, linked_placement_id: str=None, name: str=None, payment_source_type: str=None, primary: bool=None, width: str=None):
        """AdSlot - a model defined in OpenAPI

        :param comment: The comment of this AdSlot.
        :param compatibility: The compatibility of this AdSlot.
        :param height: The height of this AdSlot.
        :param linked_placement_id: The linked_placement_id of this AdSlot.
        :param name: The name of this AdSlot.
        :param payment_source_type: The payment_source_type of this AdSlot.
        :param primary: The primary of this AdSlot.
        :param width: The width of this AdSlot.
        """
        self.openapi_types = {
            'comment': str,
            'compatibility': str,
            'height': str,
            'linked_placement_id': str,
            'name': str,
            'payment_source_type': str,
            'primary': bool,
            'width': str
        }

        self.attribute_map = {
            'comment': 'comment',
            'compatibility': 'compatibility',
            'height': 'height',
            'linked_placement_id': 'linkedPlacementId',
            'name': 'name',
            'payment_source_type': 'paymentSourceType',
            'primary': 'primary',
            'width': 'width'
        }

        self._comment = comment
        self._compatibility = compatibility
        self._height = height
        self._linked_placement_id = linked_placement_id
        self._name = name
        self._payment_source_type = payment_source_type
        self._primary = primary
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdSlot':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdSlot of this AdSlot.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comment(self):
        """Gets the comment of this AdSlot.

        Comment for this ad slot.

        :return: The comment of this AdSlot.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this AdSlot.

        Comment for this ad slot.

        :param comment: The comment of this AdSlot.
        :type comment: str
        """

        self._comment = comment

    @property
    def compatibility(self):
        """Gets the compatibility of this AdSlot.

        Ad slot compatibility. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop, mobile devices or in mobile apps for regular or interstitial ads respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. IN_STREAM_VIDEO refers to rendering in in-stream video ads developed with the VAST standard.

        :return: The compatibility of this AdSlot.
        :rtype: str
        """
        return self._compatibility

    @compatibility.setter
    def compatibility(self, compatibility):
        """Sets the compatibility of this AdSlot.

        Ad slot compatibility. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop, mobile devices or in mobile apps for regular or interstitial ads respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. IN_STREAM_VIDEO refers to rendering in in-stream video ads developed with the VAST standard.

        :param compatibility: The compatibility of this AdSlot.
        :type compatibility: str
        """
        allowed_values = ["DISPLAY", "DISPLAY_INTERSTITIAL", "APP", "APP_INTERSTITIAL", "IN_STREAM_VIDEO", "IN_STREAM_AUDIO"]  # noqa: E501
        if compatibility not in allowed_values:
            raise ValueError(
                "Invalid value for `compatibility` ({0}), must be one of {1}"
                .format(compatibility, allowed_values)
            )

        self._compatibility = compatibility

    @property
    def height(self):
        """Gets the height of this AdSlot.

        Height of this ad slot.

        :return: The height of this AdSlot.
        :rtype: str
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this AdSlot.

        Height of this ad slot.

        :param height: The height of this AdSlot.
        :type height: str
        """

        self._height = height

    @property
    def linked_placement_id(self):
        """Gets the linked_placement_id of this AdSlot.

        ID of the placement from an external platform that is linked to this ad slot.

        :return: The linked_placement_id of this AdSlot.
        :rtype: str
        """
        return self._linked_placement_id

    @linked_placement_id.setter
    def linked_placement_id(self, linked_placement_id):
        """Sets the linked_placement_id of this AdSlot.

        ID of the placement from an external platform that is linked to this ad slot.

        :param linked_placement_id: The linked_placement_id of this AdSlot.
        :type linked_placement_id: str
        """

        self._linked_placement_id = linked_placement_id

    @property
    def name(self):
        """Gets the name of this AdSlot.

        Name of this ad slot.

        :return: The name of this AdSlot.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AdSlot.

        Name of this ad slot.

        :param name: The name of this AdSlot.
        :type name: str
        """

        self._name = name

    @property
    def payment_source_type(self):
        """Gets the payment_source_type of this AdSlot.

        Payment source type of this ad slot.

        :return: The payment_source_type of this AdSlot.
        :rtype: str
        """
        return self._payment_source_type

    @payment_source_type.setter
    def payment_source_type(self, payment_source_type):
        """Sets the payment_source_type of this AdSlot.

        Payment source type of this ad slot.

        :param payment_source_type: The payment_source_type of this AdSlot.
        :type payment_source_type: str
        """
        allowed_values = ["PLANNING_PAYMENT_SOURCE_TYPE_AGENCY_PAID", "PLANNING_PAYMENT_SOURCE_TYPE_PUBLISHER_PAID"]  # noqa: E501
        if payment_source_type not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_source_type` ({0}), must be one of {1}"
                .format(payment_source_type, allowed_values)
            )

        self._payment_source_type = payment_source_type

    @property
    def primary(self):
        """Gets the primary of this AdSlot.

        Primary ad slot of a roadblock inventory item.

        :return: The primary of this AdSlot.
        :rtype: bool
        """
        return self._primary

    @primary.setter
    def primary(self, primary):
        """Sets the primary of this AdSlot.

        Primary ad slot of a roadblock inventory item.

        :param primary: The primary of this AdSlot.
        :type primary: bool
        """

        self._primary = primary

    @property
    def width(self):
        """Gets the width of this AdSlot.

        Width of this ad slot.

        :return: The width of this AdSlot.
        :rtype: str
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this AdSlot.

        Width of this ad slot.

        :param width: The width of this AdSlot.
        :type width: str
        """

        self._width = width
