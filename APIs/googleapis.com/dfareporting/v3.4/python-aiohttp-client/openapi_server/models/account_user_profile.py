# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.object_filter import ObjectFilter
from openapi_server import util


class AccountUserProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, active: bool=None, advertiser_filter: ObjectFilter=None, campaign_filter: ObjectFilter=None, comments: str=None, email: str=None, id: str=None, kind: str=None, locale: str=None, name: str=None, site_filter: ObjectFilter=None, subaccount_id: str=None, trafficker_type: str=None, user_access_type: str=None, user_role_filter: ObjectFilter=None, user_role_id: str=None):
        """AccountUserProfile - a model defined in OpenAPI

        :param account_id: The account_id of this AccountUserProfile.
        :param active: The active of this AccountUserProfile.
        :param advertiser_filter: The advertiser_filter of this AccountUserProfile.
        :param campaign_filter: The campaign_filter of this AccountUserProfile.
        :param comments: The comments of this AccountUserProfile.
        :param email: The email of this AccountUserProfile.
        :param id: The id of this AccountUserProfile.
        :param kind: The kind of this AccountUserProfile.
        :param locale: The locale of this AccountUserProfile.
        :param name: The name of this AccountUserProfile.
        :param site_filter: The site_filter of this AccountUserProfile.
        :param subaccount_id: The subaccount_id of this AccountUserProfile.
        :param trafficker_type: The trafficker_type of this AccountUserProfile.
        :param user_access_type: The user_access_type of this AccountUserProfile.
        :param user_role_filter: The user_role_filter of this AccountUserProfile.
        :param user_role_id: The user_role_id of this AccountUserProfile.
        """
        self.openapi_types = {
            'account_id': str,
            'active': bool,
            'advertiser_filter': ObjectFilter,
            'campaign_filter': ObjectFilter,
            'comments': str,
            'email': str,
            'id': str,
            'kind': str,
            'locale': str,
            'name': str,
            'site_filter': ObjectFilter,
            'subaccount_id': str,
            'trafficker_type': str,
            'user_access_type': str,
            'user_role_filter': ObjectFilter,
            'user_role_id': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'active': 'active',
            'advertiser_filter': 'advertiserFilter',
            'campaign_filter': 'campaignFilter',
            'comments': 'comments',
            'email': 'email',
            'id': 'id',
            'kind': 'kind',
            'locale': 'locale',
            'name': 'name',
            'site_filter': 'siteFilter',
            'subaccount_id': 'subaccountId',
            'trafficker_type': 'traffickerType',
            'user_access_type': 'userAccessType',
            'user_role_filter': 'userRoleFilter',
            'user_role_id': 'userRoleId'
        }

        self._account_id = account_id
        self._active = active
        self._advertiser_filter = advertiser_filter
        self._campaign_filter = campaign_filter
        self._comments = comments
        self._email = email
        self._id = id
        self._kind = kind
        self._locale = locale
        self._name = name
        self._site_filter = site_filter
        self._subaccount_id = subaccount_id
        self._trafficker_type = trafficker_type
        self._user_access_type = user_access_type
        self._user_role_filter = user_role_filter
        self._user_role_id = user_role_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountUserProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountUserProfile of this AccountUserProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this AccountUserProfile.

        Account ID of the user profile. This is a read-only field that can be left blank.

        :return: The account_id of this AccountUserProfile.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AccountUserProfile.

        Account ID of the user profile. This is a read-only field that can be left blank.

        :param account_id: The account_id of this AccountUserProfile.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def active(self):
        """Gets the active of this AccountUserProfile.

        Whether this user profile is active. This defaults to false, and must be set true on insert for the user profile to be usable.

        :return: The active of this AccountUserProfile.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this AccountUserProfile.

        Whether this user profile is active. This defaults to false, and must be set true on insert for the user profile to be usable.

        :param active: The active of this AccountUserProfile.
        :type active: bool
        """

        self._active = active

    @property
    def advertiser_filter(self):
        """Gets the advertiser_filter of this AccountUserProfile.


        :return: The advertiser_filter of this AccountUserProfile.
        :rtype: ObjectFilter
        """
        return self._advertiser_filter

    @advertiser_filter.setter
    def advertiser_filter(self, advertiser_filter):
        """Sets the advertiser_filter of this AccountUserProfile.


        :param advertiser_filter: The advertiser_filter of this AccountUserProfile.
        :type advertiser_filter: ObjectFilter
        """

        self._advertiser_filter = advertiser_filter

    @property
    def campaign_filter(self):
        """Gets the campaign_filter of this AccountUserProfile.


        :return: The campaign_filter of this AccountUserProfile.
        :rtype: ObjectFilter
        """
        return self._campaign_filter

    @campaign_filter.setter
    def campaign_filter(self, campaign_filter):
        """Sets the campaign_filter of this AccountUserProfile.


        :param campaign_filter: The campaign_filter of this AccountUserProfile.
        :type campaign_filter: ObjectFilter
        """

        self._campaign_filter = campaign_filter

    @property
    def comments(self):
        """Gets the comments of this AccountUserProfile.

        Comments for this user profile.

        :return: The comments of this AccountUserProfile.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this AccountUserProfile.

        Comments for this user profile.

        :param comments: The comments of this AccountUserProfile.
        :type comments: str
        """

        self._comments = comments

    @property
    def email(self):
        """Gets the email of this AccountUserProfile.

        Email of the user profile. The email addresss must be linked to a Google Account. This field is required on insertion and is read-only after insertion.

        :return: The email of this AccountUserProfile.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AccountUserProfile.

        Email of the user profile. The email addresss must be linked to a Google Account. This field is required on insertion and is read-only after insertion.

        :param email: The email of this AccountUserProfile.
        :type email: str
        """

        self._email = email

    @property
    def id(self):
        """Gets the id of this AccountUserProfile.

        ID of the user profile. This is a read-only, auto-generated field.

        :return: The id of this AccountUserProfile.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountUserProfile.

        ID of the user profile. This is a read-only, auto-generated field.

        :param id: The id of this AccountUserProfile.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this AccountUserProfile.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#accountUserProfile\".

        :return: The kind of this AccountUserProfile.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this AccountUserProfile.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#accountUserProfile\".

        :param kind: The kind of this AccountUserProfile.
        :type kind: str
        """

        self._kind = kind

    @property
    def locale(self):
        """Gets the locale of this AccountUserProfile.

        Locale of the user profile. This is a required field. Acceptable values are: - \"cs\" (Czech) - \"de\" (German) - \"en\" (English) - \"en-GB\" (English United Kingdom) - \"es\" (Spanish) - \"fr\" (French) - \"it\" (Italian) - \"ja\" (Japanese) - \"ko\" (Korean) - \"pl\" (Polish) - \"pt-BR\" (Portuguese Brazil) - \"ru\" (Russian) - \"sv\" (Swedish) - \"tr\" (Turkish) - \"zh-CN\" (Chinese Simplified) - \"zh-TW\" (Chinese Traditional) 

        :return: The locale of this AccountUserProfile.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this AccountUserProfile.

        Locale of the user profile. This is a required field. Acceptable values are: - \"cs\" (Czech) - \"de\" (German) - \"en\" (English) - \"en-GB\" (English United Kingdom) - \"es\" (Spanish) - \"fr\" (French) - \"it\" (Italian) - \"ja\" (Japanese) - \"ko\" (Korean) - \"pl\" (Polish) - \"pt-BR\" (Portuguese Brazil) - \"ru\" (Russian) - \"sv\" (Swedish) - \"tr\" (Turkish) - \"zh-CN\" (Chinese Simplified) - \"zh-TW\" (Chinese Traditional) 

        :param locale: The locale of this AccountUserProfile.
        :type locale: str
        """

        self._locale = locale

    @property
    def name(self):
        """Gets the name of this AccountUserProfile.

        Name of the user profile. This is a required field. Must be less than 64 characters long, must be globally unique, and cannot contain whitespace or any of the following characters: \"&;<>\"#%,\".

        :return: The name of this AccountUserProfile.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountUserProfile.

        Name of the user profile. This is a required field. Must be less than 64 characters long, must be globally unique, and cannot contain whitespace or any of the following characters: \"&;<>\"#%,\".

        :param name: The name of this AccountUserProfile.
        :type name: str
        """

        self._name = name

    @property
    def site_filter(self):
        """Gets the site_filter of this AccountUserProfile.


        :return: The site_filter of this AccountUserProfile.
        :rtype: ObjectFilter
        """
        return self._site_filter

    @site_filter.setter
    def site_filter(self, site_filter):
        """Sets the site_filter of this AccountUserProfile.


        :param site_filter: The site_filter of this AccountUserProfile.
        :type site_filter: ObjectFilter
        """

        self._site_filter = site_filter

    @property
    def subaccount_id(self):
        """Gets the subaccount_id of this AccountUserProfile.

        Subaccount ID of the user profile. This is a read-only field that can be left blank.

        :return: The subaccount_id of this AccountUserProfile.
        :rtype: str
        """
        return self._subaccount_id

    @subaccount_id.setter
    def subaccount_id(self, subaccount_id):
        """Sets the subaccount_id of this AccountUserProfile.

        Subaccount ID of the user profile. This is a read-only field that can be left blank.

        :param subaccount_id: The subaccount_id of this AccountUserProfile.
        :type subaccount_id: str
        """

        self._subaccount_id = subaccount_id

    @property
    def trafficker_type(self):
        """Gets the trafficker_type of this AccountUserProfile.

        Trafficker type of this user profile. This is a read-only field.

        :return: The trafficker_type of this AccountUserProfile.
        :rtype: str
        """
        return self._trafficker_type

    @trafficker_type.setter
    def trafficker_type(self, trafficker_type):
        """Sets the trafficker_type of this AccountUserProfile.

        Trafficker type of this user profile. This is a read-only field.

        :param trafficker_type: The trafficker_type of this AccountUserProfile.
        :type trafficker_type: str
        """
        allowed_values = ["INTERNAL_NON_TRAFFICKER", "INTERNAL_TRAFFICKER", "EXTERNAL_TRAFFICKER"]  # noqa: E501
        if trafficker_type not in allowed_values:
            raise ValueError(
                "Invalid value for `trafficker_type` ({0}), must be one of {1}"
                .format(trafficker_type, allowed_values)
            )

        self._trafficker_type = trafficker_type

    @property
    def user_access_type(self):
        """Gets the user_access_type of this AccountUserProfile.

        User type of the user profile. This is a read-only field that can be left blank.

        :return: The user_access_type of this AccountUserProfile.
        :rtype: str
        """
        return self._user_access_type

    @user_access_type.setter
    def user_access_type(self, user_access_type):
        """Sets the user_access_type of this AccountUserProfile.

        User type of the user profile. This is a read-only field that can be left blank.

        :param user_access_type: The user_access_type of this AccountUserProfile.
        :type user_access_type: str
        """
        allowed_values = ["NORMAL_USER", "SUPER_USER", "INTERNAL_ADMINISTRATOR", "READ_ONLY_SUPER_USER"]  # noqa: E501
        if user_access_type not in allowed_values:
            raise ValueError(
                "Invalid value for `user_access_type` ({0}), must be one of {1}"
                .format(user_access_type, allowed_values)
            )

        self._user_access_type = user_access_type

    @property
    def user_role_filter(self):
        """Gets the user_role_filter of this AccountUserProfile.


        :return: The user_role_filter of this AccountUserProfile.
        :rtype: ObjectFilter
        """
        return self._user_role_filter

    @user_role_filter.setter
    def user_role_filter(self, user_role_filter):
        """Sets the user_role_filter of this AccountUserProfile.


        :param user_role_filter: The user_role_filter of this AccountUserProfile.
        :type user_role_filter: ObjectFilter
        """

        self._user_role_filter = user_role_filter

    @property
    def user_role_id(self):
        """Gets the user_role_id of this AccountUserProfile.

        User role ID of the user profile. This is a required field.

        :return: The user_role_id of this AccountUserProfile.
        :rtype: str
        """
        return self._user_role_id

    @user_role_id.setter
    def user_role_id(self, user_role_id):
        """Sets the user_role_id of this AccountUserProfile.

        User role ID of the user profile. This is a required field.

        :param user_role_id: The user_role_id of this AccountUserProfile.
        :type user_role_id: str
        """

        self._user_role_id = user_role_id
