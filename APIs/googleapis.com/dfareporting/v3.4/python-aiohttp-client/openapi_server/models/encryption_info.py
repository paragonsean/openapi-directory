# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EncryptionInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encryption_entity_id: str=None, encryption_entity_type: str=None, encryption_source: str=None, kind: str=None):
        """EncryptionInfo - a model defined in OpenAPI

        :param encryption_entity_id: The encryption_entity_id of this EncryptionInfo.
        :param encryption_entity_type: The encryption_entity_type of this EncryptionInfo.
        :param encryption_source: The encryption_source of this EncryptionInfo.
        :param kind: The kind of this EncryptionInfo.
        """
        self.openapi_types = {
            'encryption_entity_id': str,
            'encryption_entity_type': str,
            'encryption_source': str,
            'kind': str
        }

        self.attribute_map = {
            'encryption_entity_id': 'encryptionEntityId',
            'encryption_entity_type': 'encryptionEntityType',
            'encryption_source': 'encryptionSource',
            'kind': 'kind'
        }

        self._encryption_entity_id = encryption_entity_id
        self._encryption_entity_type = encryption_entity_type
        self._encryption_source = encryption_source
        self._kind = kind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EncryptionInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EncryptionInfo of this EncryptionInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encryption_entity_id(self):
        """Gets the encryption_entity_id of this EncryptionInfo.

        The encryption entity ID. This should match the encryption configuration for ad serving or Data Transfer.

        :return: The encryption_entity_id of this EncryptionInfo.
        :rtype: str
        """
        return self._encryption_entity_id

    @encryption_entity_id.setter
    def encryption_entity_id(self, encryption_entity_id):
        """Sets the encryption_entity_id of this EncryptionInfo.

        The encryption entity ID. This should match the encryption configuration for ad serving or Data Transfer.

        :param encryption_entity_id: The encryption_entity_id of this EncryptionInfo.
        :type encryption_entity_id: str
        """

        self._encryption_entity_id = encryption_entity_id

    @property
    def encryption_entity_type(self):
        """Gets the encryption_entity_type of this EncryptionInfo.

        The encryption entity type. This should match the encryption configuration for ad serving or Data Transfer.

        :return: The encryption_entity_type of this EncryptionInfo.
        :rtype: str
        """
        return self._encryption_entity_type

    @encryption_entity_type.setter
    def encryption_entity_type(self, encryption_entity_type):
        """Sets the encryption_entity_type of this EncryptionInfo.

        The encryption entity type. This should match the encryption configuration for ad serving or Data Transfer.

        :param encryption_entity_type: The encryption_entity_type of this EncryptionInfo.
        :type encryption_entity_type: str
        """
        allowed_values = ["ENCRYPTION_ENTITY_TYPE_UNKNOWN", "DCM_ACCOUNT", "DCM_ADVERTISER", "DBM_PARTNER", "DBM_ADVERTISER", "ADWORDS_CUSTOMER", "DFP_NETWORK_CODE"]  # noqa: E501
        if encryption_entity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `encryption_entity_type` ({0}), must be one of {1}"
                .format(encryption_entity_type, allowed_values)
            )

        self._encryption_entity_type = encryption_entity_type

    @property
    def encryption_source(self):
        """Gets the encryption_source of this EncryptionInfo.

        Describes whether the encrypted cookie was received from ad serving (the %m macro) or from Data Transfer.

        :return: The encryption_source of this EncryptionInfo.
        :rtype: str
        """
        return self._encryption_source

    @encryption_source.setter
    def encryption_source(self, encryption_source):
        """Sets the encryption_source of this EncryptionInfo.

        Describes whether the encrypted cookie was received from ad serving (the %m macro) or from Data Transfer.

        :param encryption_source: The encryption_source of this EncryptionInfo.
        :type encryption_source: str
        """
        allowed_values = ["ENCRYPTION_SCOPE_UNKNOWN", "AD_SERVING", "DATA_TRANSFER"]  # noqa: E501
        if encryption_source not in allowed_values:
            raise ValueError(
                "Invalid value for `encryption_source` ({0}), must be one of {1}"
                .format(encryption_source, allowed_values)
            )

        self._encryption_source = encryption_source

    @property
    def kind(self):
        """Gets the kind of this EncryptionInfo.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#encryptionInfo\".

        :return: The kind of this EncryptionInfo.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this EncryptionInfo.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#encryptionInfo\".

        :param kind: The kind of this EncryptionInfo.
        :type kind: str
        """

        self._kind = kind
