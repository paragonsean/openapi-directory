# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.browser import Browser
from openapi_server.models.connection_type import ConnectionType
from openapi_server.models.mobile_carrier import MobileCarrier
from openapi_server.models.operating_system import OperatingSystem
from openapi_server.models.operating_system_version import OperatingSystemVersion
from openapi_server.models.platform_type import PlatformType
from openapi_server import util


class TechnologyTargeting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, browsers: List[Browser]=None, connection_types: List[ConnectionType]=None, mobile_carriers: List[MobileCarrier]=None, operating_system_versions: List[OperatingSystemVersion]=None, operating_systems: List[OperatingSystem]=None, platform_types: List[PlatformType]=None):
        """TechnologyTargeting - a model defined in OpenAPI

        :param browsers: The browsers of this TechnologyTargeting.
        :param connection_types: The connection_types of this TechnologyTargeting.
        :param mobile_carriers: The mobile_carriers of this TechnologyTargeting.
        :param operating_system_versions: The operating_system_versions of this TechnologyTargeting.
        :param operating_systems: The operating_systems of this TechnologyTargeting.
        :param platform_types: The platform_types of this TechnologyTargeting.
        """
        self.openapi_types = {
            'browsers': List[Browser],
            'connection_types': List[ConnectionType],
            'mobile_carriers': List[MobileCarrier],
            'operating_system_versions': List[OperatingSystemVersion],
            'operating_systems': List[OperatingSystem],
            'platform_types': List[PlatformType]
        }

        self.attribute_map = {
            'browsers': 'browsers',
            'connection_types': 'connectionTypes',
            'mobile_carriers': 'mobileCarriers',
            'operating_system_versions': 'operatingSystemVersions',
            'operating_systems': 'operatingSystems',
            'platform_types': 'platformTypes'
        }

        self._browsers = browsers
        self._connection_types = connection_types
        self._mobile_carriers = mobile_carriers
        self._operating_system_versions = operating_system_versions
        self._operating_systems = operating_systems
        self._platform_types = platform_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TechnologyTargeting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TechnologyTargeting of this TechnologyTargeting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def browsers(self):
        """Gets the browsers of this TechnologyTargeting.

        Browsers that this ad targets. For each browser either set browserVersionId or dartId along with the version numbers. If both are specified, only browserVersionId will be used. The other fields are populated automatically when the ad is inserted or updated.

        :return: The browsers of this TechnologyTargeting.
        :rtype: List[Browser]
        """
        return self._browsers

    @browsers.setter
    def browsers(self, browsers):
        """Sets the browsers of this TechnologyTargeting.

        Browsers that this ad targets. For each browser either set browserVersionId or dartId along with the version numbers. If both are specified, only browserVersionId will be used. The other fields are populated automatically when the ad is inserted or updated.

        :param browsers: The browsers of this TechnologyTargeting.
        :type browsers: List[Browser]
        """

        self._browsers = browsers

    @property
    def connection_types(self):
        """Gets the connection_types of this TechnologyTargeting.

        Connection types that this ad targets. For each connection type only id is required. The other fields are populated automatically when the ad is inserted or updated.

        :return: The connection_types of this TechnologyTargeting.
        :rtype: List[ConnectionType]
        """
        return self._connection_types

    @connection_types.setter
    def connection_types(self, connection_types):
        """Sets the connection_types of this TechnologyTargeting.

        Connection types that this ad targets. For each connection type only id is required. The other fields are populated automatically when the ad is inserted or updated.

        :param connection_types: The connection_types of this TechnologyTargeting.
        :type connection_types: List[ConnectionType]
        """

        self._connection_types = connection_types

    @property
    def mobile_carriers(self):
        """Gets the mobile_carriers of this TechnologyTargeting.

        Mobile carriers that this ad targets. For each mobile carrier only id is required, and the other fields are populated automatically when the ad is inserted or updated. If targeting a mobile carrier, do not set targeting for any zip codes.

        :return: The mobile_carriers of this TechnologyTargeting.
        :rtype: List[MobileCarrier]
        """
        return self._mobile_carriers

    @mobile_carriers.setter
    def mobile_carriers(self, mobile_carriers):
        """Sets the mobile_carriers of this TechnologyTargeting.

        Mobile carriers that this ad targets. For each mobile carrier only id is required, and the other fields are populated automatically when the ad is inserted or updated. If targeting a mobile carrier, do not set targeting for any zip codes.

        :param mobile_carriers: The mobile_carriers of this TechnologyTargeting.
        :type mobile_carriers: List[MobileCarrier]
        """

        self._mobile_carriers = mobile_carriers

    @property
    def operating_system_versions(self):
        """Gets the operating_system_versions of this TechnologyTargeting.

        Operating system versions that this ad targets. To target all versions, use operatingSystems. For each operating system version, only id is required. The other fields are populated automatically when the ad is inserted or updated. If targeting an operating system version, do not set targeting for the corresponding operating system in operatingSystems.

        :return: The operating_system_versions of this TechnologyTargeting.
        :rtype: List[OperatingSystemVersion]
        """
        return self._operating_system_versions

    @operating_system_versions.setter
    def operating_system_versions(self, operating_system_versions):
        """Sets the operating_system_versions of this TechnologyTargeting.

        Operating system versions that this ad targets. To target all versions, use operatingSystems. For each operating system version, only id is required. The other fields are populated automatically when the ad is inserted or updated. If targeting an operating system version, do not set targeting for the corresponding operating system in operatingSystems.

        :param operating_system_versions: The operating_system_versions of this TechnologyTargeting.
        :type operating_system_versions: List[OperatingSystemVersion]
        """

        self._operating_system_versions = operating_system_versions

    @property
    def operating_systems(self):
        """Gets the operating_systems of this TechnologyTargeting.

        Operating systems that this ad targets. To target specific versions, use operatingSystemVersions. For each operating system only dartId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting an operating system, do not set targeting for operating system versions for the same operating system.

        :return: The operating_systems of this TechnologyTargeting.
        :rtype: List[OperatingSystem]
        """
        return self._operating_systems

    @operating_systems.setter
    def operating_systems(self, operating_systems):
        """Sets the operating_systems of this TechnologyTargeting.

        Operating systems that this ad targets. To target specific versions, use operatingSystemVersions. For each operating system only dartId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting an operating system, do not set targeting for operating system versions for the same operating system.

        :param operating_systems: The operating_systems of this TechnologyTargeting.
        :type operating_systems: List[OperatingSystem]
        """

        self._operating_systems = operating_systems

    @property
    def platform_types(self):
        """Gets the platform_types of this TechnologyTargeting.

        Platform types that this ad targets. For example, desktop, mobile, or tablet. For each platform type, only id is required, and the other fields are populated automatically when the ad is inserted or updated.

        :return: The platform_types of this TechnologyTargeting.
        :rtype: List[PlatformType]
        """
        return self._platform_types

    @platform_types.setter
    def platform_types(self, platform_types):
        """Sets the platform_types of this TechnologyTargeting.

        Platform types that this ad targets. For example, desktop, mobile, or tablet. For each platform type, only id is required, and the other fields are populated automatically when the ad is inserted or updated.

        :param platform_types: The platform_types of this TechnologyTargeting.
        :type platform_types: List[PlatformType]
        """

        self._platform_types = platform_types
