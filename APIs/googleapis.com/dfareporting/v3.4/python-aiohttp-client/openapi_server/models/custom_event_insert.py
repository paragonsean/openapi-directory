# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.campaign_manager_ids import CampaignManagerIds
from openapi_server.models.dv3_ids import DV3Ids
from openapi_server import util


class CustomEventInsert(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cm_dimensions: CampaignManagerIds=None, dv3_dimensions: DV3Ids=None, insert_event_type: str=None, kind: str=None, match_id: str=None, mobile_device_id: str=None):
        """CustomEventInsert - a model defined in OpenAPI

        :param cm_dimensions: The cm_dimensions of this CustomEventInsert.
        :param dv3_dimensions: The dv3_dimensions of this CustomEventInsert.
        :param insert_event_type: The insert_event_type of this CustomEventInsert.
        :param kind: The kind of this CustomEventInsert.
        :param match_id: The match_id of this CustomEventInsert.
        :param mobile_device_id: The mobile_device_id of this CustomEventInsert.
        """
        self.openapi_types = {
            'cm_dimensions': CampaignManagerIds,
            'dv3_dimensions': DV3Ids,
            'insert_event_type': str,
            'kind': str,
            'match_id': str,
            'mobile_device_id': str
        }

        self.attribute_map = {
            'cm_dimensions': 'cmDimensions',
            'dv3_dimensions': 'dv3Dimensions',
            'insert_event_type': 'insertEventType',
            'kind': 'kind',
            'match_id': 'matchId',
            'mobile_device_id': 'mobileDeviceId'
        }

        self._cm_dimensions = cm_dimensions
        self._dv3_dimensions = dv3_dimensions
        self._insert_event_type = insert_event_type
        self._kind = kind
        self._match_id = match_id
        self._mobile_device_id = mobile_device_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomEventInsert':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomEventInsert of this CustomEventInsert.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cm_dimensions(self):
        """Gets the cm_dimensions of this CustomEventInsert.


        :return: The cm_dimensions of this CustomEventInsert.
        :rtype: CampaignManagerIds
        """
        return self._cm_dimensions

    @cm_dimensions.setter
    def cm_dimensions(self, cm_dimensions):
        """Sets the cm_dimensions of this CustomEventInsert.


        :param cm_dimensions: The cm_dimensions of this CustomEventInsert.
        :type cm_dimensions: CampaignManagerIds
        """

        self._cm_dimensions = cm_dimensions

    @property
    def dv3_dimensions(self):
        """Gets the dv3_dimensions of this CustomEventInsert.


        :return: The dv3_dimensions of this CustomEventInsert.
        :rtype: DV3Ids
        """
        return self._dv3_dimensions

    @dv3_dimensions.setter
    def dv3_dimensions(self, dv3_dimensions):
        """Sets the dv3_dimensions of this CustomEventInsert.


        :param dv3_dimensions: The dv3_dimensions of this CustomEventInsert.
        :type dv3_dimensions: DV3Ids
        """

        self._dv3_dimensions = dv3_dimensions

    @property
    def insert_event_type(self):
        """Gets the insert_event_type of this CustomEventInsert.

        The type of event to insert.

        :return: The insert_event_type of this CustomEventInsert.
        :rtype: str
        """
        return self._insert_event_type

    @insert_event_type.setter
    def insert_event_type(self, insert_event_type):
        """Sets the insert_event_type of this CustomEventInsert.

        The type of event to insert.

        :param insert_event_type: The insert_event_type of this CustomEventInsert.
        :type insert_event_type: str
        """
        allowed_values = ["UNKNOWN", "IMPRESSION", "CLICK"]  # noqa: E501
        if insert_event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `insert_event_type` ({0}), must be one of {1}"
                .format(insert_event_type, allowed_values)
            )

        self._insert_event_type = insert_event_type

    @property
    def kind(self):
        """Gets the kind of this CustomEventInsert.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#customEventInsert\".

        :return: The kind of this CustomEventInsert.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this CustomEventInsert.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#customEventInsert\".

        :param kind: The kind of this CustomEventInsert.
        :type kind: str
        """

        self._kind = kind

    @property
    def match_id(self):
        """Gets the match_id of this CustomEventInsert.

        The match ID field. A match ID is your own first-party identifier that has been synced with Google using the match ID feature in Floodlight. This field is mutually exclusive with mobileDeviceId, and at least one of the two fields is required.

        :return: The match_id of this CustomEventInsert.
        :rtype: str
        """
        return self._match_id

    @match_id.setter
    def match_id(self, match_id):
        """Sets the match_id of this CustomEventInsert.

        The match ID field. A match ID is your own first-party identifier that has been synced with Google using the match ID feature in Floodlight. This field is mutually exclusive with mobileDeviceId, and at least one of the two fields is required.

        :param match_id: The match_id of this CustomEventInsert.
        :type match_id: str
        """

        self._match_id = match_id

    @property
    def mobile_device_id(self):
        """Gets the mobile_device_id of this CustomEventInsert.

        The mobile device ID. This field is mutually exclusive with matchId, and at least one of the two fields is required.

        :return: The mobile_device_id of this CustomEventInsert.
        :rtype: str
        """
        return self._mobile_device_id

    @mobile_device_id.setter
    def mobile_device_id(self, mobile_device_id):
        """Sets the mobile_device_id of this CustomEventInsert.

        The mobile device ID. This field is mutually exclusive with matchId, and at least one of the two fields is required.

        :param mobile_device_id: The mobile_device_id of this CustomEventInsert.
        :type mobile_device_id: str
        """

        self._mobile_device_id = mobile_device_id
