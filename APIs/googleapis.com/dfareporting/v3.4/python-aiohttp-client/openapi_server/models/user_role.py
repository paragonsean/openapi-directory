# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_role_permission import UserRolePermission
from openapi_server import util


class UserRole(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, default_user_role: bool=None, id: str=None, kind: str=None, name: str=None, parent_user_role_id: str=None, permissions: List[UserRolePermission]=None, subaccount_id: str=None):
        """UserRole - a model defined in OpenAPI

        :param account_id: The account_id of this UserRole.
        :param default_user_role: The default_user_role of this UserRole.
        :param id: The id of this UserRole.
        :param kind: The kind of this UserRole.
        :param name: The name of this UserRole.
        :param parent_user_role_id: The parent_user_role_id of this UserRole.
        :param permissions: The permissions of this UserRole.
        :param subaccount_id: The subaccount_id of this UserRole.
        """
        self.openapi_types = {
            'account_id': str,
            'default_user_role': bool,
            'id': str,
            'kind': str,
            'name': str,
            'parent_user_role_id': str,
            'permissions': List[UserRolePermission],
            'subaccount_id': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'default_user_role': 'defaultUserRole',
            'id': 'id',
            'kind': 'kind',
            'name': 'name',
            'parent_user_role_id': 'parentUserRoleId',
            'permissions': 'permissions',
            'subaccount_id': 'subaccountId'
        }

        self._account_id = account_id
        self._default_user_role = default_user_role
        self._id = id
        self._kind = kind
        self._name = name
        self._parent_user_role_id = parent_user_role_id
        self._permissions = permissions
        self._subaccount_id = subaccount_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserRole':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserRole of this UserRole.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this UserRole.

        Account ID of this user role. This is a read-only field that can be left blank.

        :return: The account_id of this UserRole.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this UserRole.

        Account ID of this user role. This is a read-only field that can be left blank.

        :param account_id: The account_id of this UserRole.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def default_user_role(self):
        """Gets the default_user_role of this UserRole.

        Whether this is a default user role. Default user roles are created by the system for the account/subaccount and cannot be modified or deleted. Each default user role comes with a basic set of preassigned permissions.

        :return: The default_user_role of this UserRole.
        :rtype: bool
        """
        return self._default_user_role

    @default_user_role.setter
    def default_user_role(self, default_user_role):
        """Sets the default_user_role of this UserRole.

        Whether this is a default user role. Default user roles are created by the system for the account/subaccount and cannot be modified or deleted. Each default user role comes with a basic set of preassigned permissions.

        :param default_user_role: The default_user_role of this UserRole.
        :type default_user_role: bool
        """

        self._default_user_role = default_user_role

    @property
    def id(self):
        """Gets the id of this UserRole.

        ID of this user role. This is a read-only, auto-generated field.

        :return: The id of this UserRole.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserRole.

        ID of this user role. This is a read-only, auto-generated field.

        :param id: The id of this UserRole.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this UserRole.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#userRole\".

        :return: The kind of this UserRole.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this UserRole.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#userRole\".

        :param kind: The kind of this UserRole.
        :type kind: str
        """

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this UserRole.

        Name of this user role. This is a required field. Must be less than 256 characters long. If this user role is under a subaccount, the name must be unique among sites of the same subaccount. Otherwise, this user role is a top-level user role, and the name must be unique among top-level user roles of the same account.

        :return: The name of this UserRole.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserRole.

        Name of this user role. This is a required field. Must be less than 256 characters long. If this user role is under a subaccount, the name must be unique among sites of the same subaccount. Otherwise, this user role is a top-level user role, and the name must be unique among top-level user roles of the same account.

        :param name: The name of this UserRole.
        :type name: str
        """

        self._name = name

    @property
    def parent_user_role_id(self):
        """Gets the parent_user_role_id of this UserRole.

        ID of the user role that this user role is based on or copied from. This is a required field.

        :return: The parent_user_role_id of this UserRole.
        :rtype: str
        """
        return self._parent_user_role_id

    @parent_user_role_id.setter
    def parent_user_role_id(self, parent_user_role_id):
        """Sets the parent_user_role_id of this UserRole.

        ID of the user role that this user role is based on or copied from. This is a required field.

        :param parent_user_role_id: The parent_user_role_id of this UserRole.
        :type parent_user_role_id: str
        """

        self._parent_user_role_id = parent_user_role_id

    @property
    def permissions(self):
        """Gets the permissions of this UserRole.

        List of permissions associated with this user role.

        :return: The permissions of this UserRole.
        :rtype: List[UserRolePermission]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this UserRole.

        List of permissions associated with this user role.

        :param permissions: The permissions of this UserRole.
        :type permissions: List[UserRolePermission]
        """

        self._permissions = permissions

    @property
    def subaccount_id(self):
        """Gets the subaccount_id of this UserRole.

        Subaccount ID of this user role. This is a read-only field that can be left blank.

        :return: The subaccount_id of this UserRole.
        :rtype: str
        """
        return self._subaccount_id

    @subaccount_id.setter
    def subaccount_id(self, subaccount_id):
        """Sets the subaccount_id of this UserRole.

        Subaccount ID of this user role. This is a read-only field that can be left blank.

        :param subaccount_id: The subaccount_id of this UserRole.
        :type subaccount_id: str
        """

        self._subaccount_id = subaccount_id
