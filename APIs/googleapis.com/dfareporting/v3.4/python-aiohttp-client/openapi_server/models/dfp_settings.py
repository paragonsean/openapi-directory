# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DfpSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dfp_network_code: str=None, dfp_network_name: str=None, programmatic_placement_accepted: bool=None, pub_paid_placement_accepted: bool=None, publisher_portal_only: bool=None):
        """DfpSettings - a model defined in OpenAPI

        :param dfp_network_code: The dfp_network_code of this DfpSettings.
        :param dfp_network_name: The dfp_network_name of this DfpSettings.
        :param programmatic_placement_accepted: The programmatic_placement_accepted of this DfpSettings.
        :param pub_paid_placement_accepted: The pub_paid_placement_accepted of this DfpSettings.
        :param publisher_portal_only: The publisher_portal_only of this DfpSettings.
        """
        self.openapi_types = {
            'dfp_network_code': str,
            'dfp_network_name': str,
            'programmatic_placement_accepted': bool,
            'pub_paid_placement_accepted': bool,
            'publisher_portal_only': bool
        }

        self.attribute_map = {
            'dfp_network_code': 'dfpNetworkCode',
            'dfp_network_name': 'dfpNetworkName',
            'programmatic_placement_accepted': 'programmaticPlacementAccepted',
            'pub_paid_placement_accepted': 'pubPaidPlacementAccepted',
            'publisher_portal_only': 'publisherPortalOnly'
        }

        self._dfp_network_code = dfp_network_code
        self._dfp_network_name = dfp_network_name
        self._programmatic_placement_accepted = programmatic_placement_accepted
        self._pub_paid_placement_accepted = pub_paid_placement_accepted
        self._publisher_portal_only = publisher_portal_only

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DfpSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DfpSettings of this DfpSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dfp_network_code(self):
        """Gets the dfp_network_code of this DfpSettings.

        Ad Manager network code for this directory site.

        :return: The dfp_network_code of this DfpSettings.
        :rtype: str
        """
        return self._dfp_network_code

    @dfp_network_code.setter
    def dfp_network_code(self, dfp_network_code):
        """Sets the dfp_network_code of this DfpSettings.

        Ad Manager network code for this directory site.

        :param dfp_network_code: The dfp_network_code of this DfpSettings.
        :type dfp_network_code: str
        """

        self._dfp_network_code = dfp_network_code

    @property
    def dfp_network_name(self):
        """Gets the dfp_network_name of this DfpSettings.

        Ad Manager network name for this directory site.

        :return: The dfp_network_name of this DfpSettings.
        :rtype: str
        """
        return self._dfp_network_name

    @dfp_network_name.setter
    def dfp_network_name(self, dfp_network_name):
        """Sets the dfp_network_name of this DfpSettings.

        Ad Manager network name for this directory site.

        :param dfp_network_name: The dfp_network_name of this DfpSettings.
        :type dfp_network_name: str
        """

        self._dfp_network_name = dfp_network_name

    @property
    def programmatic_placement_accepted(self):
        """Gets the programmatic_placement_accepted of this DfpSettings.

        Whether this directory site accepts programmatic placements.

        :return: The programmatic_placement_accepted of this DfpSettings.
        :rtype: bool
        """
        return self._programmatic_placement_accepted

    @programmatic_placement_accepted.setter
    def programmatic_placement_accepted(self, programmatic_placement_accepted):
        """Sets the programmatic_placement_accepted of this DfpSettings.

        Whether this directory site accepts programmatic placements.

        :param programmatic_placement_accepted: The programmatic_placement_accepted of this DfpSettings.
        :type programmatic_placement_accepted: bool
        """

        self._programmatic_placement_accepted = programmatic_placement_accepted

    @property
    def pub_paid_placement_accepted(self):
        """Gets the pub_paid_placement_accepted of this DfpSettings.

        Whether this directory site accepts publisher-paid tags.

        :return: The pub_paid_placement_accepted of this DfpSettings.
        :rtype: bool
        """
        return self._pub_paid_placement_accepted

    @pub_paid_placement_accepted.setter
    def pub_paid_placement_accepted(self, pub_paid_placement_accepted):
        """Sets the pub_paid_placement_accepted of this DfpSettings.

        Whether this directory site accepts publisher-paid tags.

        :param pub_paid_placement_accepted: The pub_paid_placement_accepted of this DfpSettings.
        :type pub_paid_placement_accepted: bool
        """

        self._pub_paid_placement_accepted = pub_paid_placement_accepted

    @property
    def publisher_portal_only(self):
        """Gets the publisher_portal_only of this DfpSettings.

        Whether this directory site is available only via Publisher Portal.

        :return: The publisher_portal_only of this DfpSettings.
        :rtype: bool
        """
        return self._publisher_portal_only

    @publisher_portal_only.setter
    def publisher_portal_only(self, publisher_portal_only):
        """Sets the publisher_portal_only of this DfpSettings.

        Whether this directory site is available only via Publisher Portal.

        :param publisher_portal_only: The publisher_portal_only of this DfpSettings.
        :type publisher_portal_only: bool
        """

        self._publisher_portal_only = publisher_portal_only
