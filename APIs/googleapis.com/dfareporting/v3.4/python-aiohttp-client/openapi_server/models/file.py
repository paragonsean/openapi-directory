# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.date_range import DateRange
from openapi_server.models.file_urls import FileUrls
from openapi_server import util


class File(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_range: DateRange=None, etag: str=None, file_name: str=None, format: str=None, id: str=None, kind: str=None, last_modified_time: str=None, report_id: str=None, status: str=None, urls: FileUrls=None):
        """File - a model defined in OpenAPI

        :param date_range: The date_range of this File.
        :param etag: The etag of this File.
        :param file_name: The file_name of this File.
        :param format: The format of this File.
        :param id: The id of this File.
        :param kind: The kind of this File.
        :param last_modified_time: The last_modified_time of this File.
        :param report_id: The report_id of this File.
        :param status: The status of this File.
        :param urls: The urls of this File.
        """
        self.openapi_types = {
            'date_range': DateRange,
            'etag': str,
            'file_name': str,
            'format': str,
            'id': str,
            'kind': str,
            'last_modified_time': str,
            'report_id': str,
            'status': str,
            'urls': FileUrls
        }

        self.attribute_map = {
            'date_range': 'dateRange',
            'etag': 'etag',
            'file_name': 'fileName',
            'format': 'format',
            'id': 'id',
            'kind': 'kind',
            'last_modified_time': 'lastModifiedTime',
            'report_id': 'reportId',
            'status': 'status',
            'urls': 'urls'
        }

        self._date_range = date_range
        self._etag = etag
        self._file_name = file_name
        self._format = format
        self._id = id
        self._kind = kind
        self._last_modified_time = last_modified_time
        self._report_id = report_id
        self._status = status
        self._urls = urls

    @classmethod
    def from_dict(cls, dikt: dict) -> 'File':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The File of this File.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_range(self):
        """Gets the date_range of this File.


        :return: The date_range of this File.
        :rtype: DateRange
        """
        return self._date_range

    @date_range.setter
    def date_range(self, date_range):
        """Sets the date_range of this File.


        :param date_range: The date_range of this File.
        :type date_range: DateRange
        """

        self._date_range = date_range

    @property
    def etag(self):
        """Gets the etag of this File.

        Etag of this resource.

        :return: The etag of this File.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this File.

        Etag of this resource.

        :param etag: The etag of this File.
        :type etag: str
        """

        self._etag = etag

    @property
    def file_name(self):
        """Gets the file_name of this File.

        The filename of the file.

        :return: The file_name of this File.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this File.

        The filename of the file.

        :param file_name: The file_name of this File.
        :type file_name: str
        """

        self._file_name = file_name

    @property
    def format(self):
        """Gets the format of this File.

        The output format of the report. Only available once the file is available.

        :return: The format of this File.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this File.

        The output format of the report. Only available once the file is available.

        :param format: The format of this File.
        :type format: str
        """
        allowed_values = ["CSV", "EXCEL"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def id(self):
        """Gets the id of this File.

        The unique ID of this report file.

        :return: The id of this File.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this File.

        The unique ID of this report file.

        :param id: The id of this File.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this File.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#file\".

        :return: The kind of this File.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this File.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#file\".

        :param kind: The kind of this File.
        :type kind: str
        """

        self._kind = kind

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this File.

        The timestamp in milliseconds since epoch when this file was last modified.

        :return: The last_modified_time of this File.
        :rtype: str
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this File.

        The timestamp in milliseconds since epoch when this file was last modified.

        :param last_modified_time: The last_modified_time of this File.
        :type last_modified_time: str
        """

        self._last_modified_time = last_modified_time

    @property
    def report_id(self):
        """Gets the report_id of this File.

        The ID of the report this file was generated from.

        :return: The report_id of this File.
        :rtype: str
        """
        return self._report_id

    @report_id.setter
    def report_id(self, report_id):
        """Sets the report_id of this File.

        The ID of the report this file was generated from.

        :param report_id: The report_id of this File.
        :type report_id: str
        """

        self._report_id = report_id

    @property
    def status(self):
        """Gets the status of this File.

        The status of the report file.

        :return: The status of this File.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this File.

        The status of the report file.

        :param status: The status of this File.
        :type status: str
        """
        allowed_values = ["PROCESSING", "REPORT_AVAILABLE", "FAILED", "CANCELLED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def urls(self):
        """Gets the urls of this File.


        :return: The urls of this File.
        :rtype: FileUrls
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this File.


        :param urls: The urls of this File.
        :type urls: FileUrls
        """

        self._urls = urls
