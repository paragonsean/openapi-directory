# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomFloodlightVariable(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kind: str=None, type: str=None, value: str=None):
        """CustomFloodlightVariable - a model defined in OpenAPI

        :param kind: The kind of this CustomFloodlightVariable.
        :param type: The type of this CustomFloodlightVariable.
        :param value: The value of this CustomFloodlightVariable.
        """
        self.openapi_types = {
            'kind': str,
            'type': str,
            'value': str
        }

        self.attribute_map = {
            'kind': 'kind',
            'type': 'type',
            'value': 'value'
        }

        self._kind = kind
        self._type = type
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomFloodlightVariable':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomFloodlightVariable of this CustomFloodlightVariable.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kind(self):
        """Gets the kind of this CustomFloodlightVariable.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#customFloodlightVariable\".

        :return: The kind of this CustomFloodlightVariable.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this CustomFloodlightVariable.

        Identifies what kind of resource this is. Value: the fixed string \"dfareporting#customFloodlightVariable\".

        :param kind: The kind of this CustomFloodlightVariable.
        :type kind: str
        """

        self._kind = kind

    @property
    def type(self):
        """Gets the type of this CustomFloodlightVariable.

        The type of custom floodlight variable to supply a value for. These map to the \"u[1-20]=\" in the tags.

        :return: The type of this CustomFloodlightVariable.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CustomFloodlightVariable.

        The type of custom floodlight variable to supply a value for. These map to the \"u[1-20]=\" in the tags.

        :param type: The type of this CustomFloodlightVariable.
        :type type: str
        """
        allowed_values = ["U1", "U2", "U3", "U4", "U5", "U6", "U7", "U8", "U9", "U10", "U11", "U12", "U13", "U14", "U15", "U16", "U17", "U18", "U19", "U20", "U21", "U22", "U23", "U24", "U25", "U26", "U27", "U28", "U29", "U30", "U31", "U32", "U33", "U34", "U35", "U36", "U37", "U38", "U39", "U40", "U41", "U42", "U43", "U44", "U45", "U46", "U47", "U48", "U49", "U50", "U51", "U52", "U53", "U54", "U55", "U56", "U57", "U58", "U59", "U60", "U61", "U62", "U63", "U64", "U65", "U66", "U67", "U68", "U69", "U70", "U71", "U72", "U73", "U74", "U75", "U76", "U77", "U78", "U79", "U80", "U81", "U82", "U83", "U84", "U85", "U86", "U87", "U88", "U89", "U90", "U91", "U92", "U93", "U94", "U95", "U96", "U97", "U98", "U99", "U100"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def value(self):
        """Gets the value of this CustomFloodlightVariable.

        The value of the custom floodlight variable. The length of string must not exceed 100 characters.

        :return: The value of this CustomFloodlightVariable.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CustomFloodlightVariable.

        The value of the custom floodlight variable. The length of string must not exceed 100 characters.

        :param value: The value of this CustomFloodlightVariable.
        :type value: str
        """

        self._value = value
