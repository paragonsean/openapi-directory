/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreativeAssetId;
import org.openapitools.client.model.CreativeCustomEvent;
import org.openapitools.client.model.DimensionValue;
import org.openapitools.client.model.OffsetPosition;
import org.openapitools.client.model.Size;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for CreativeAsset
 */
public class CreativeAssetTest {
    private final CreativeAsset model = new CreativeAsset();

    /**
     * Model tests for CreativeAsset
     */
    @Test
    public void testCreativeAsset() {
        // TODO: test CreativeAsset
    }

    /**
     * Test the property 'actionScript3'
     */
    @Test
    public void actionScript3Test() {
        // TODO: test actionScript3
    }

    /**
     * Test the property 'active'
     */
    @Test
    public void activeTest() {
        // TODO: test active
    }

    /**
     * Test the property 'additionalSizes'
     */
    @Test
    public void additionalSizesTest() {
        // TODO: test additionalSizes
    }

    /**
     * Test the property 'alignment'
     */
    @Test
    public void alignmentTest() {
        // TODO: test alignment
    }

    /**
     * Test the property 'artworkType'
     */
    @Test
    public void artworkTypeTest() {
        // TODO: test artworkType
    }

    /**
     * Test the property 'assetIdentifier'
     */
    @Test
    public void assetIdentifierTest() {
        // TODO: test assetIdentifier
    }

    /**
     * Test the property 'audioBitRate'
     */
    @Test
    public void audioBitRateTest() {
        // TODO: test audioBitRate
    }

    /**
     * Test the property 'audioSampleRate'
     */
    @Test
    public void audioSampleRateTest() {
        // TODO: test audioSampleRate
    }

    /**
     * Test the property 'backupImageExit'
     */
    @Test
    public void backupImageExitTest() {
        // TODO: test backupImageExit
    }

    /**
     * Test the property 'bitRate'
     */
    @Test
    public void bitRateTest() {
        // TODO: test bitRate
    }

    /**
     * Test the property 'childAssetType'
     */
    @Test
    public void childAssetTypeTest() {
        // TODO: test childAssetType
    }

    /**
     * Test the property 'collapsedSize'
     */
    @Test
    public void collapsedSizeTest() {
        // TODO: test collapsedSize
    }

    /**
     * Test the property 'companionCreativeIds'
     */
    @Test
    public void companionCreativeIdsTest() {
        // TODO: test companionCreativeIds
    }

    /**
     * Test the property 'customStartTimeValue'
     */
    @Test
    public void customStartTimeValueTest() {
        // TODO: test customStartTimeValue
    }

    /**
     * Test the property 'detectedFeatures'
     */
    @Test
    public void detectedFeaturesTest() {
        // TODO: test detectedFeatures
    }

    /**
     * Test the property 'displayType'
     */
    @Test
    public void displayTypeTest() {
        // TODO: test displayType
    }

    /**
     * Test the property 'duration'
     */
    @Test
    public void durationTest() {
        // TODO: test duration
    }

    /**
     * Test the property 'durationType'
     */
    @Test
    public void durationTypeTest() {
        // TODO: test durationType
    }

    /**
     * Test the property 'expandedDimension'
     */
    @Test
    public void expandedDimensionTest() {
        // TODO: test expandedDimension
    }

    /**
     * Test the property 'fileSize'
     */
    @Test
    public void fileSizeTest() {
        // TODO: test fileSize
    }

    /**
     * Test the property 'flashVersion'
     */
    @Test
    public void flashVersionTest() {
        // TODO: test flashVersion
    }

    /**
     * Test the property 'frameRate'
     */
    @Test
    public void frameRateTest() {
        // TODO: test frameRate
    }

    /**
     * Test the property 'hideFlashObjects'
     */
    @Test
    public void hideFlashObjectsTest() {
        // TODO: test hideFlashObjects
    }

    /**
     * Test the property 'hideSelectionBoxes'
     */
    @Test
    public void hideSelectionBoxesTest() {
        // TODO: test hideSelectionBoxes
    }

    /**
     * Test the property 'horizontallyLocked'
     */
    @Test
    public void horizontallyLockedTest() {
        // TODO: test horizontallyLocked
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'idDimensionValue'
     */
    @Test
    public void idDimensionValueTest() {
        // TODO: test idDimensionValue
    }

    /**
     * Test the property 'mediaDuration'
     */
    @Test
    public void mediaDurationTest() {
        // TODO: test mediaDuration
    }

    /**
     * Test the property 'mimeType'
     */
    @Test
    public void mimeTypeTest() {
        // TODO: test mimeType
    }

    /**
     * Test the property 'offset'
     */
    @Test
    public void offsetTest() {
        // TODO: test offset
    }

    /**
     * Test the property 'orientation'
     */
    @Test
    public void orientationTest() {
        // TODO: test orientation
    }

    /**
     * Test the property 'originalBackup'
     */
    @Test
    public void originalBackupTest() {
        // TODO: test originalBackup
    }

    /**
     * Test the property 'politeLoad'
     */
    @Test
    public void politeLoadTest() {
        // TODO: test politeLoad
    }

    /**
     * Test the property 'position'
     */
    @Test
    public void positionTest() {
        // TODO: test position
    }

    /**
     * Test the property 'positionLeftUnit'
     */
    @Test
    public void positionLeftUnitTest() {
        // TODO: test positionLeftUnit
    }

    /**
     * Test the property 'positionTopUnit'
     */
    @Test
    public void positionTopUnitTest() {
        // TODO: test positionTopUnit
    }

    /**
     * Test the property 'progressiveServingUrl'
     */
    @Test
    public void progressiveServingUrlTest() {
        // TODO: test progressiveServingUrl
    }

    /**
     * Test the property 'pushdown'
     */
    @Test
    public void pushdownTest() {
        // TODO: test pushdown
    }

    /**
     * Test the property 'pushdownDuration'
     */
    @Test
    public void pushdownDurationTest() {
        // TODO: test pushdownDuration
    }

    /**
     * Test the property 'role'
     */
    @Test
    public void roleTest() {
        // TODO: test role
    }

    /**
     * Test the property 'size'
     */
    @Test
    public void sizeTest() {
        // TODO: test size
    }

    /**
     * Test the property 'sslCompliant'
     */
    @Test
    public void sslCompliantTest() {
        // TODO: test sslCompliant
    }

    /**
     * Test the property 'startTimeType'
     */
    @Test
    public void startTimeTypeTest() {
        // TODO: test startTimeType
    }

    /**
     * Test the property 'streamingServingUrl'
     */
    @Test
    public void streamingServingUrlTest() {
        // TODO: test streamingServingUrl
    }

    /**
     * Test the property 'transparency'
     */
    @Test
    public void transparencyTest() {
        // TODO: test transparency
    }

    /**
     * Test the property 'verticallyLocked'
     */
    @Test
    public void verticallyLockedTest() {
        // TODO: test verticallyLocked
    }

    /**
     * Test the property 'windowMode'
     */
    @Test
    public void windowModeTest() {
        // TODO: test windowMode
    }

    /**
     * Test the property 'zIndex'
     */
    @Test
    public void zIndexTest() {
        // TODO: test zIndex
    }

    /**
     * Test the property 'zipFilename'
     */
    @Test
    public void zipFilenameTest() {
        // TODO: test zipFilename
    }

    /**
     * Test the property 'zipFilesize'
     */
    @Test
    public void zipFilesizeTest() {
        // TODO: test zipFilesize
    }

}
