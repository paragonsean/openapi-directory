/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FrequencyCap;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Delivery Schedule.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:16.070314-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeliverySchedule {
  public static final String SERIALIZED_NAME_FREQUENCY_CAP = "frequencyCap";
  @SerializedName(SERIALIZED_NAME_FREQUENCY_CAP)
  private FrequencyCap frequencyCap;

  public static final String SERIALIZED_NAME_HARD_CUTOFF = "hardCutoff";
  @SerializedName(SERIALIZED_NAME_HARD_CUTOFF)
  private Boolean hardCutoff;

  public static final String SERIALIZED_NAME_IMPRESSION_RATIO = "impressionRatio";
  @SerializedName(SERIALIZED_NAME_IMPRESSION_RATIO)
  private String impressionRatio;

  /**
   * Serving priority of an ad, with respect to other ads. The lower the priority number, the greater the priority with which it is served.
   */
  @JsonAdapter(PriorityEnum.Adapter.class)
  public enum PriorityEnum {
    _01("AD_PRIORITY_01"),
    
    _02("AD_PRIORITY_02"),
    
    _03("AD_PRIORITY_03"),
    
    _04("AD_PRIORITY_04"),
    
    _05("AD_PRIORITY_05"),
    
    _06("AD_PRIORITY_06"),
    
    _07("AD_PRIORITY_07"),
    
    _08("AD_PRIORITY_08"),
    
    _09("AD_PRIORITY_09"),
    
    _10("AD_PRIORITY_10"),
    
    _11("AD_PRIORITY_11"),
    
    _12("AD_PRIORITY_12"),
    
    _13("AD_PRIORITY_13"),
    
    _14("AD_PRIORITY_14"),
    
    _15("AD_PRIORITY_15"),
    
    _16("AD_PRIORITY_16");

    private String value;

    PriorityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PriorityEnum fromValue(String value) {
      for (PriorityEnum b : PriorityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PriorityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PriorityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PriorityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PriorityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PriorityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private PriorityEnum priority;

  public DeliverySchedule() {
  }

  public DeliverySchedule frequencyCap(FrequencyCap frequencyCap) {
    this.frequencyCap = frequencyCap;
    return this;
  }

  /**
   * Get frequencyCap
   * @return frequencyCap
   */
  @javax.annotation.Nullable
  public FrequencyCap getFrequencyCap() {
    return frequencyCap;
  }

  public void setFrequencyCap(FrequencyCap frequencyCap) {
    this.frequencyCap = frequencyCap;
  }


  public DeliverySchedule hardCutoff(Boolean hardCutoff) {
    this.hardCutoff = hardCutoff;
    return this;
  }

  /**
   * Whether or not hard cutoff is enabled. If true, the ad will not serve after the end date and time. Otherwise the ad will continue to be served until it has reached its delivery goals.
   * @return hardCutoff
   */
  @javax.annotation.Nullable
  public Boolean getHardCutoff() {
    return hardCutoff;
  }

  public void setHardCutoff(Boolean hardCutoff) {
    this.hardCutoff = hardCutoff;
  }


  public DeliverySchedule impressionRatio(String impressionRatio) {
    this.impressionRatio = impressionRatio;
    return this;
  }

  /**
   * Impression ratio for this ad. This ratio determines how often each ad is served relative to the others. For example, if ad A has an impression ratio of 1 and ad B has an impression ratio of 3, then Campaign Manager will serve ad B three times as often as ad A. Acceptable values are 1 to 10, inclusive.
   * @return impressionRatio
   */
  @javax.annotation.Nullable
  public String getImpressionRatio() {
    return impressionRatio;
  }

  public void setImpressionRatio(String impressionRatio) {
    this.impressionRatio = impressionRatio;
  }


  public DeliverySchedule priority(PriorityEnum priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Serving priority of an ad, with respect to other ads. The lower the priority number, the greater the priority with which it is served.
   * @return priority
   */
  @javax.annotation.Nullable
  public PriorityEnum getPriority() {
    return priority;
  }

  public void setPriority(PriorityEnum priority) {
    this.priority = priority;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeliverySchedule deliverySchedule = (DeliverySchedule) o;
    return Objects.equals(this.frequencyCap, deliverySchedule.frequencyCap) &&
        Objects.equals(this.hardCutoff, deliverySchedule.hardCutoff) &&
        Objects.equals(this.impressionRatio, deliverySchedule.impressionRatio) &&
        Objects.equals(this.priority, deliverySchedule.priority);
  }

  @Override
  public int hashCode() {
    return Objects.hash(frequencyCap, hardCutoff, impressionRatio, priority);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeliverySchedule {\n");
    sb.append("    frequencyCap: ").append(toIndentedString(frequencyCap)).append("\n");
    sb.append("    hardCutoff: ").append(toIndentedString(hardCutoff)).append("\n");
    sb.append("    impressionRatio: ").append(toIndentedString(impressionRatio)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("frequencyCap");
    openapiFields.add("hardCutoff");
    openapiFields.add("impressionRatio");
    openapiFields.add("priority");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeliverySchedule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeliverySchedule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeliverySchedule is not found in the empty JSON string", DeliverySchedule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeliverySchedule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeliverySchedule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `frequencyCap`
      if (jsonObj.get("frequencyCap") != null && !jsonObj.get("frequencyCap").isJsonNull()) {
        FrequencyCap.validateJsonElement(jsonObj.get("frequencyCap"));
      }
      if ((jsonObj.get("impressionRatio") != null && !jsonObj.get("impressionRatio").isJsonNull()) && !jsonObj.get("impressionRatio").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `impressionRatio` to be a primitive type in the JSON string but got `%s`", jsonObj.get("impressionRatio").toString()));
      }
      if ((jsonObj.get("priority") != null && !jsonObj.get("priority").isJsonNull()) && !jsonObj.get("priority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priority").toString()));
      }
      // validate the optional field `priority`
      if (jsonObj.get("priority") != null && !jsonObj.get("priority").isJsonNull()) {
        PriorityEnum.validateJsonElement(jsonObj.get("priority"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeliverySchedule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeliverySchedule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeliverySchedule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeliverySchedule.class));

       return (TypeAdapter<T>) new TypeAdapter<DeliverySchedule>() {
           @Override
           public void write(JsonWriter out, DeliverySchedule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeliverySchedule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeliverySchedule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeliverySchedule
   * @throws IOException if the JSON string is invalid with respect to DeliverySchedule
   */
  public static DeliverySchedule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeliverySchedule.class);
  }

  /**
   * Convert an instance of DeliverySchedule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

