/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DimensionValue;
import org.openapitools.client.model.FloodlightActivityDynamicTag;
import org.openapitools.client.model.FloodlightActivityPublisherDynamicTag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains properties of a Floodlight activity.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:16.070314-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FloodlightActivity {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_ADVERTISER_ID = "advertiserId";
  @SerializedName(SERIALIZED_NAME_ADVERTISER_ID)
  private String advertiserId;

  public static final String SERIALIZED_NAME_ADVERTISER_ID_DIMENSION_VALUE = "advertiserIdDimensionValue";
  @SerializedName(SERIALIZED_NAME_ADVERTISER_ID_DIMENSION_VALUE)
  private DimensionValue advertiserIdDimensionValue;

  public static final String SERIALIZED_NAME_ATTRIBUTION_ENABLED = "attributionEnabled";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTION_ENABLED)
  private Boolean attributionEnabled;

  /**
   * Code type used for cache busting in the generated tag. Applicable only when floodlightActivityGroupType is COUNTER and countingMethod is STANDARD_COUNTING or UNIQUE_COUNTING.
   */
  @JsonAdapter(CacheBustingTypeEnum.Adapter.class)
  public enum CacheBustingTypeEnum {
    JAVASCRIPT("JAVASCRIPT"),
    
    ACTIVE_SERVER_PAGE("ACTIVE_SERVER_PAGE"),
    
    JSP("JSP"),
    
    PHP("PHP"),
    
    COLD_FUSION("COLD_FUSION");

    private String value;

    CacheBustingTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CacheBustingTypeEnum fromValue(String value) {
      for (CacheBustingTypeEnum b : CacheBustingTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CacheBustingTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CacheBustingTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CacheBustingTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CacheBustingTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CacheBustingTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CACHE_BUSTING_TYPE = "cacheBustingType";
  @SerializedName(SERIALIZED_NAME_CACHE_BUSTING_TYPE)
  private CacheBustingTypeEnum cacheBustingType;

  /**
   * Counting method for conversions for this floodlight activity. This is a required field.
   */
  @JsonAdapter(CountingMethodEnum.Adapter.class)
  public enum CountingMethodEnum {
    STANDARD_COUNTING("STANDARD_COUNTING"),
    
    UNIQUE_COUNTING("UNIQUE_COUNTING"),
    
    SESSION_COUNTING("SESSION_COUNTING"),
    
    TRANSACTIONS_COUNTING("TRANSACTIONS_COUNTING"),
    
    ITEMS_SOLD_COUNTING("ITEMS_SOLD_COUNTING");

    private String value;

    CountingMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CountingMethodEnum fromValue(String value) {
      for (CountingMethodEnum b : CountingMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CountingMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CountingMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CountingMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CountingMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CountingMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COUNTING_METHOD = "countingMethod";
  @SerializedName(SERIALIZED_NAME_COUNTING_METHOD)
  private CountingMethodEnum countingMethod;

  public static final String SERIALIZED_NAME_DEFAULT_TAGS = "defaultTags";
  @SerializedName(SERIALIZED_NAME_DEFAULT_TAGS)
  private List<FloodlightActivityDynamicTag> defaultTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXPECTED_URL = "expectedUrl";
  @SerializedName(SERIALIZED_NAME_EXPECTED_URL)
  private String expectedUrl;

  public static final String SERIALIZED_NAME_FLOODLIGHT_ACTIVITY_GROUP_ID = "floodlightActivityGroupId";
  @SerializedName(SERIALIZED_NAME_FLOODLIGHT_ACTIVITY_GROUP_ID)
  private String floodlightActivityGroupId;

  public static final String SERIALIZED_NAME_FLOODLIGHT_ACTIVITY_GROUP_NAME = "floodlightActivityGroupName";
  @SerializedName(SERIALIZED_NAME_FLOODLIGHT_ACTIVITY_GROUP_NAME)
  private String floodlightActivityGroupName;

  public static final String SERIALIZED_NAME_FLOODLIGHT_ACTIVITY_GROUP_TAG_STRING = "floodlightActivityGroupTagString";
  @SerializedName(SERIALIZED_NAME_FLOODLIGHT_ACTIVITY_GROUP_TAG_STRING)
  private String floodlightActivityGroupTagString;

  /**
   * Type of the associated floodlight activity group. This is a read-only field.
   */
  @JsonAdapter(FloodlightActivityGroupTypeEnum.Adapter.class)
  public enum FloodlightActivityGroupTypeEnum {
    COUNTER("COUNTER"),
    
    SALE("SALE");

    private String value;

    FloodlightActivityGroupTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FloodlightActivityGroupTypeEnum fromValue(String value) {
      for (FloodlightActivityGroupTypeEnum b : FloodlightActivityGroupTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FloodlightActivityGroupTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FloodlightActivityGroupTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FloodlightActivityGroupTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FloodlightActivityGroupTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FloodlightActivityGroupTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FLOODLIGHT_ACTIVITY_GROUP_TYPE = "floodlightActivityGroupType";
  @SerializedName(SERIALIZED_NAME_FLOODLIGHT_ACTIVITY_GROUP_TYPE)
  private FloodlightActivityGroupTypeEnum floodlightActivityGroupType;

  public static final String SERIALIZED_NAME_FLOODLIGHT_CONFIGURATION_ID = "floodlightConfigurationId";
  @SerializedName(SERIALIZED_NAME_FLOODLIGHT_CONFIGURATION_ID)
  private String floodlightConfigurationId;

  public static final String SERIALIZED_NAME_FLOODLIGHT_CONFIGURATION_ID_DIMENSION_VALUE = "floodlightConfigurationIdDimensionValue";
  @SerializedName(SERIALIZED_NAME_FLOODLIGHT_CONFIGURATION_ID_DIMENSION_VALUE)
  private DimensionValue floodlightConfigurationIdDimensionValue;

  /**
   * The type of Floodlight tag this activity will generate. This is a required field.
   */
  @JsonAdapter(FloodlightTagTypeEnum.Adapter.class)
  public enum FloodlightTagTypeEnum {
    IFRAME("IFRAME"),
    
    IMAGE("IMAGE"),
    
    GLOBAL_SITE_TAG("GLOBAL_SITE_TAG");

    private String value;

    FloodlightTagTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FloodlightTagTypeEnum fromValue(String value) {
      for (FloodlightTagTypeEnum b : FloodlightTagTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FloodlightTagTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FloodlightTagTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FloodlightTagTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FloodlightTagTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FloodlightTagTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FLOODLIGHT_TAG_TYPE = "floodlightTagType";
  @SerializedName(SERIALIZED_NAME_FLOODLIGHT_TAG_TYPE)
  private FloodlightTagTypeEnum floodlightTagType;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ID_DIMENSION_VALUE = "idDimensionValue";
  @SerializedName(SERIALIZED_NAME_ID_DIMENSION_VALUE)
  private DimensionValue idDimensionValue;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_PUBLISHER_TAGS = "publisherTags";
  @SerializedName(SERIALIZED_NAME_PUBLISHER_TAGS)
  private List<FloodlightActivityPublisherDynamicTag> publisherTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_SECURE = "secure";
  @SerializedName(SERIALIZED_NAME_SECURE)
  private Boolean secure;

  public static final String SERIALIZED_NAME_SSL_COMPLIANT = "sslCompliant";
  @SerializedName(SERIALIZED_NAME_SSL_COMPLIANT)
  private Boolean sslCompliant;

  public static final String SERIALIZED_NAME_SSL_REQUIRED = "sslRequired";
  @SerializedName(SERIALIZED_NAME_SSL_REQUIRED)
  private Boolean sslRequired;

  /**
   * The status of the activity. This can only be set to ACTIVE or ARCHIVED_AND_DISABLED. The ARCHIVED status is no longer supported and cannot be set for Floodlight activities. The DISABLED_POLICY status indicates that a Floodlight activity is violating Google policy. Contact your account manager for more information.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("ACTIVE"),
    
    ARCHIVED_AND_DISABLED("ARCHIVED_AND_DISABLED"),
    
    ARCHIVED("ARCHIVED"),
    
    DISABLED_POLICY("DISABLED_POLICY");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_SUBACCOUNT_ID = "subaccountId";
  @SerializedName(SERIALIZED_NAME_SUBACCOUNT_ID)
  private String subaccountId;

  /**
   * Tag format type for the floodlight activity. If left blank, the tag format will default to HTML.
   */
  @JsonAdapter(TagFormatEnum.Adapter.class)
  public enum TagFormatEnum {
    HTML("HTML"),
    
    XHTML("XHTML");

    private String value;

    TagFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TagFormatEnum fromValue(String value) {
      for (TagFormatEnum b : TagFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TagFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TagFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TagFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TagFormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TagFormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TAG_FORMAT = "tagFormat";
  @SerializedName(SERIALIZED_NAME_TAG_FORMAT)
  private TagFormatEnum tagFormat;

  public static final String SERIALIZED_NAME_TAG_STRING = "tagString";
  @SerializedName(SERIALIZED_NAME_TAG_STRING)
  private String tagString;

  /**
   * Gets or Sets userDefinedVariableTypes
   */
  @JsonAdapter(UserDefinedVariableTypesEnum.Adapter.class)
  public enum UserDefinedVariableTypesEnum {
    U1("U1"),
    
    U2("U2"),
    
    U3("U3"),
    
    U4("U4"),
    
    U5("U5"),
    
    U6("U6"),
    
    U7("U7"),
    
    U8("U8"),
    
    U9("U9"),
    
    U10("U10"),
    
    U11("U11"),
    
    U12("U12"),
    
    U13("U13"),
    
    U14("U14"),
    
    U15("U15"),
    
    U16("U16"),
    
    U17("U17"),
    
    U18("U18"),
    
    U19("U19"),
    
    U20("U20"),
    
    U21("U21"),
    
    U22("U22"),
    
    U23("U23"),
    
    U24("U24"),
    
    U25("U25"),
    
    U26("U26"),
    
    U27("U27"),
    
    U28("U28"),
    
    U29("U29"),
    
    U30("U30"),
    
    U31("U31"),
    
    U32("U32"),
    
    U33("U33"),
    
    U34("U34"),
    
    U35("U35"),
    
    U36("U36"),
    
    U37("U37"),
    
    U38("U38"),
    
    U39("U39"),
    
    U40("U40"),
    
    U41("U41"),
    
    U42("U42"),
    
    U43("U43"),
    
    U44("U44"),
    
    U45("U45"),
    
    U46("U46"),
    
    U47("U47"),
    
    U48("U48"),
    
    U49("U49"),
    
    U50("U50"),
    
    U51("U51"),
    
    U52("U52"),
    
    U53("U53"),
    
    U54("U54"),
    
    U55("U55"),
    
    U56("U56"),
    
    U57("U57"),
    
    U58("U58"),
    
    U59("U59"),
    
    U60("U60"),
    
    U61("U61"),
    
    U62("U62"),
    
    U63("U63"),
    
    U64("U64"),
    
    U65("U65"),
    
    U66("U66"),
    
    U67("U67"),
    
    U68("U68"),
    
    U69("U69"),
    
    U70("U70"),
    
    U71("U71"),
    
    U72("U72"),
    
    U73("U73"),
    
    U74("U74"),
    
    U75("U75"),
    
    U76("U76"),
    
    U77("U77"),
    
    U78("U78"),
    
    U79("U79"),
    
    U80("U80"),
    
    U81("U81"),
    
    U82("U82"),
    
    U83("U83"),
    
    U84("U84"),
    
    U85("U85"),
    
    U86("U86"),
    
    U87("U87"),
    
    U88("U88"),
    
    U89("U89"),
    
    U90("U90"),
    
    U91("U91"),
    
    U92("U92"),
    
    U93("U93"),
    
    U94("U94"),
    
    U95("U95"),
    
    U96("U96"),
    
    U97("U97"),
    
    U98("U98"),
    
    U99("U99"),
    
    U100("U100");

    private String value;

    UserDefinedVariableTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UserDefinedVariableTypesEnum fromValue(String value) {
      for (UserDefinedVariableTypesEnum b : UserDefinedVariableTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UserDefinedVariableTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UserDefinedVariableTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UserDefinedVariableTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UserDefinedVariableTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UserDefinedVariableTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_USER_DEFINED_VARIABLE_TYPES = "userDefinedVariableTypes";
  @SerializedName(SERIALIZED_NAME_USER_DEFINED_VARIABLE_TYPES)
  private List<UserDefinedVariableTypesEnum> userDefinedVariableTypes = new ArrayList<>();

  public FloodlightActivity() {
  }

  public FloodlightActivity accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Account ID of this floodlight activity. This is a read-only field that can be left blank.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public FloodlightActivity advertiserId(String advertiserId) {
    this.advertiserId = advertiserId;
    return this;
  }

  /**
   * Advertiser ID of this floodlight activity. If this field is left blank, the value will be copied over either from the activity group&#39;s advertiser or the existing activity&#39;s advertiser.
   * @return advertiserId
   */
  @javax.annotation.Nullable
  public String getAdvertiserId() {
    return advertiserId;
  }

  public void setAdvertiserId(String advertiserId) {
    this.advertiserId = advertiserId;
  }


  public FloodlightActivity advertiserIdDimensionValue(DimensionValue advertiserIdDimensionValue) {
    this.advertiserIdDimensionValue = advertiserIdDimensionValue;
    return this;
  }

  /**
   * Get advertiserIdDimensionValue
   * @return advertiserIdDimensionValue
   */
  @javax.annotation.Nullable
  public DimensionValue getAdvertiserIdDimensionValue() {
    return advertiserIdDimensionValue;
  }

  public void setAdvertiserIdDimensionValue(DimensionValue advertiserIdDimensionValue) {
    this.advertiserIdDimensionValue = advertiserIdDimensionValue;
  }


  public FloodlightActivity attributionEnabled(Boolean attributionEnabled) {
    this.attributionEnabled = attributionEnabled;
    return this;
  }

  /**
   * Whether the activity is enabled for attribution.
   * @return attributionEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAttributionEnabled() {
    return attributionEnabled;
  }

  public void setAttributionEnabled(Boolean attributionEnabled) {
    this.attributionEnabled = attributionEnabled;
  }


  public FloodlightActivity cacheBustingType(CacheBustingTypeEnum cacheBustingType) {
    this.cacheBustingType = cacheBustingType;
    return this;
  }

  /**
   * Code type used for cache busting in the generated tag. Applicable only when floodlightActivityGroupType is COUNTER and countingMethod is STANDARD_COUNTING or UNIQUE_COUNTING.
   * @return cacheBustingType
   */
  @javax.annotation.Nullable
  public CacheBustingTypeEnum getCacheBustingType() {
    return cacheBustingType;
  }

  public void setCacheBustingType(CacheBustingTypeEnum cacheBustingType) {
    this.cacheBustingType = cacheBustingType;
  }


  public FloodlightActivity countingMethod(CountingMethodEnum countingMethod) {
    this.countingMethod = countingMethod;
    return this;
  }

  /**
   * Counting method for conversions for this floodlight activity. This is a required field.
   * @return countingMethod
   */
  @javax.annotation.Nullable
  public CountingMethodEnum getCountingMethod() {
    return countingMethod;
  }

  public void setCountingMethod(CountingMethodEnum countingMethod) {
    this.countingMethod = countingMethod;
  }


  public FloodlightActivity defaultTags(List<FloodlightActivityDynamicTag> defaultTags) {
    this.defaultTags = defaultTags;
    return this;
  }

  public FloodlightActivity addDefaultTagsItem(FloodlightActivityDynamicTag defaultTagsItem) {
    if (this.defaultTags == null) {
      this.defaultTags = new ArrayList<>();
    }
    this.defaultTags.add(defaultTagsItem);
    return this;
  }

  /**
   * Dynamic floodlight tags.
   * @return defaultTags
   */
  @javax.annotation.Nullable
  public List<FloodlightActivityDynamicTag> getDefaultTags() {
    return defaultTags;
  }

  public void setDefaultTags(List<FloodlightActivityDynamicTag> defaultTags) {
    this.defaultTags = defaultTags;
  }


  public FloodlightActivity expectedUrl(String expectedUrl) {
    this.expectedUrl = expectedUrl;
    return this;
  }

  /**
   * URL where this tag will be deployed. If specified, must be less than 256 characters long.
   * @return expectedUrl
   */
  @javax.annotation.Nullable
  public String getExpectedUrl() {
    return expectedUrl;
  }

  public void setExpectedUrl(String expectedUrl) {
    this.expectedUrl = expectedUrl;
  }


  public FloodlightActivity floodlightActivityGroupId(String floodlightActivityGroupId) {
    this.floodlightActivityGroupId = floodlightActivityGroupId;
    return this;
  }

  /**
   * Floodlight activity group ID of this floodlight activity. This is a required field.
   * @return floodlightActivityGroupId
   */
  @javax.annotation.Nullable
  public String getFloodlightActivityGroupId() {
    return floodlightActivityGroupId;
  }

  public void setFloodlightActivityGroupId(String floodlightActivityGroupId) {
    this.floodlightActivityGroupId = floodlightActivityGroupId;
  }


  public FloodlightActivity floodlightActivityGroupName(String floodlightActivityGroupName) {
    this.floodlightActivityGroupName = floodlightActivityGroupName;
    return this;
  }

  /**
   * Name of the associated floodlight activity group. This is a read-only field.
   * @return floodlightActivityGroupName
   */
  @javax.annotation.Nullable
  public String getFloodlightActivityGroupName() {
    return floodlightActivityGroupName;
  }

  public void setFloodlightActivityGroupName(String floodlightActivityGroupName) {
    this.floodlightActivityGroupName = floodlightActivityGroupName;
  }


  public FloodlightActivity floodlightActivityGroupTagString(String floodlightActivityGroupTagString) {
    this.floodlightActivityGroupTagString = floodlightActivityGroupTagString;
    return this;
  }

  /**
   * Tag string of the associated floodlight activity group. This is a read-only field.
   * @return floodlightActivityGroupTagString
   */
  @javax.annotation.Nullable
  public String getFloodlightActivityGroupTagString() {
    return floodlightActivityGroupTagString;
  }

  public void setFloodlightActivityGroupTagString(String floodlightActivityGroupTagString) {
    this.floodlightActivityGroupTagString = floodlightActivityGroupTagString;
  }


  public FloodlightActivity floodlightActivityGroupType(FloodlightActivityGroupTypeEnum floodlightActivityGroupType) {
    this.floodlightActivityGroupType = floodlightActivityGroupType;
    return this;
  }

  /**
   * Type of the associated floodlight activity group. This is a read-only field.
   * @return floodlightActivityGroupType
   */
  @javax.annotation.Nullable
  public FloodlightActivityGroupTypeEnum getFloodlightActivityGroupType() {
    return floodlightActivityGroupType;
  }

  public void setFloodlightActivityGroupType(FloodlightActivityGroupTypeEnum floodlightActivityGroupType) {
    this.floodlightActivityGroupType = floodlightActivityGroupType;
  }


  public FloodlightActivity floodlightConfigurationId(String floodlightConfigurationId) {
    this.floodlightConfigurationId = floodlightConfigurationId;
    return this;
  }

  /**
   * Floodlight configuration ID of this floodlight activity. If this field is left blank, the value will be copied over either from the activity group&#39;s floodlight configuration or from the existing activity&#39;s floodlight configuration.
   * @return floodlightConfigurationId
   */
  @javax.annotation.Nullable
  public String getFloodlightConfigurationId() {
    return floodlightConfigurationId;
  }

  public void setFloodlightConfigurationId(String floodlightConfigurationId) {
    this.floodlightConfigurationId = floodlightConfigurationId;
  }


  public FloodlightActivity floodlightConfigurationIdDimensionValue(DimensionValue floodlightConfigurationIdDimensionValue) {
    this.floodlightConfigurationIdDimensionValue = floodlightConfigurationIdDimensionValue;
    return this;
  }

  /**
   * Get floodlightConfigurationIdDimensionValue
   * @return floodlightConfigurationIdDimensionValue
   */
  @javax.annotation.Nullable
  public DimensionValue getFloodlightConfigurationIdDimensionValue() {
    return floodlightConfigurationIdDimensionValue;
  }

  public void setFloodlightConfigurationIdDimensionValue(DimensionValue floodlightConfigurationIdDimensionValue) {
    this.floodlightConfigurationIdDimensionValue = floodlightConfigurationIdDimensionValue;
  }


  public FloodlightActivity floodlightTagType(FloodlightTagTypeEnum floodlightTagType) {
    this.floodlightTagType = floodlightTagType;
    return this;
  }

  /**
   * The type of Floodlight tag this activity will generate. This is a required field.
   * @return floodlightTagType
   */
  @javax.annotation.Nullable
  public FloodlightTagTypeEnum getFloodlightTagType() {
    return floodlightTagType;
  }

  public void setFloodlightTagType(FloodlightTagTypeEnum floodlightTagType) {
    this.floodlightTagType = floodlightTagType;
  }


  public FloodlightActivity id(String id) {
    this.id = id;
    return this;
  }

  /**
   * ID of this floodlight activity. This is a read-only, auto-generated field.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public FloodlightActivity idDimensionValue(DimensionValue idDimensionValue) {
    this.idDimensionValue = idDimensionValue;
    return this;
  }

  /**
   * Get idDimensionValue
   * @return idDimensionValue
   */
  @javax.annotation.Nullable
  public DimensionValue getIdDimensionValue() {
    return idDimensionValue;
  }

  public void setIdDimensionValue(DimensionValue idDimensionValue) {
    this.idDimensionValue = idDimensionValue;
  }


  public FloodlightActivity kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string \&quot;dfareporting#floodlightActivity\&quot;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public FloodlightActivity name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of this floodlight activity. This is a required field. Must be less than 129 characters long and cannot contain quotes.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public FloodlightActivity notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * General notes or implementation instructions for the tag.
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public FloodlightActivity publisherTags(List<FloodlightActivityPublisherDynamicTag> publisherTags) {
    this.publisherTags = publisherTags;
    return this;
  }

  public FloodlightActivity addPublisherTagsItem(FloodlightActivityPublisherDynamicTag publisherTagsItem) {
    if (this.publisherTags == null) {
      this.publisherTags = new ArrayList<>();
    }
    this.publisherTags.add(publisherTagsItem);
    return this;
  }

  /**
   * Publisher dynamic floodlight tags.
   * @return publisherTags
   */
  @javax.annotation.Nullable
  public List<FloodlightActivityPublisherDynamicTag> getPublisherTags() {
    return publisherTags;
  }

  public void setPublisherTags(List<FloodlightActivityPublisherDynamicTag> publisherTags) {
    this.publisherTags = publisherTags;
  }


  public FloodlightActivity secure(Boolean secure) {
    this.secure = secure;
    return this;
  }

  /**
   * Whether this tag should use SSL.
   * @return secure
   */
  @javax.annotation.Nullable
  public Boolean getSecure() {
    return secure;
  }

  public void setSecure(Boolean secure) {
    this.secure = secure;
  }


  public FloodlightActivity sslCompliant(Boolean sslCompliant) {
    this.sslCompliant = sslCompliant;
    return this;
  }

  /**
   * Whether the floodlight activity is SSL-compliant. This is a read-only field, its value detected by the system from the floodlight tags.
   * @return sslCompliant
   */
  @javax.annotation.Nullable
  public Boolean getSslCompliant() {
    return sslCompliant;
  }

  public void setSslCompliant(Boolean sslCompliant) {
    this.sslCompliant = sslCompliant;
  }


  public FloodlightActivity sslRequired(Boolean sslRequired) {
    this.sslRequired = sslRequired;
    return this;
  }

  /**
   * Whether this floodlight activity must be SSL-compliant.
   * @return sslRequired
   */
  @javax.annotation.Nullable
  public Boolean getSslRequired() {
    return sslRequired;
  }

  public void setSslRequired(Boolean sslRequired) {
    this.sslRequired = sslRequired;
  }


  public FloodlightActivity status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the activity. This can only be set to ACTIVE or ARCHIVED_AND_DISABLED. The ARCHIVED status is no longer supported and cannot be set for Floodlight activities. The DISABLED_POLICY status indicates that a Floodlight activity is violating Google policy. Contact your account manager for more information.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public FloodlightActivity subaccountId(String subaccountId) {
    this.subaccountId = subaccountId;
    return this;
  }

  /**
   * Subaccount ID of this floodlight activity. This is a read-only field that can be left blank.
   * @return subaccountId
   */
  @javax.annotation.Nullable
  public String getSubaccountId() {
    return subaccountId;
  }

  public void setSubaccountId(String subaccountId) {
    this.subaccountId = subaccountId;
  }


  public FloodlightActivity tagFormat(TagFormatEnum tagFormat) {
    this.tagFormat = tagFormat;
    return this;
  }

  /**
   * Tag format type for the floodlight activity. If left blank, the tag format will default to HTML.
   * @return tagFormat
   */
  @javax.annotation.Nullable
  public TagFormatEnum getTagFormat() {
    return tagFormat;
  }

  public void setTagFormat(TagFormatEnum tagFormat) {
    this.tagFormat = tagFormat;
  }


  public FloodlightActivity tagString(String tagString) {
    this.tagString = tagString;
    return this;
  }

  /**
   * Value of the cat&#x3D; parameter in the floodlight tag, which the ad servers use to identify the activity. This is optional: if empty, a new tag string will be generated for you. This string must be 1 to 8 characters long, with valid characters being a-z0-9[ _ ]. This tag string must also be unique among activities of the same activity group. This field is read-only after insertion.
   * @return tagString
   */
  @javax.annotation.Nullable
  public String getTagString() {
    return tagString;
  }

  public void setTagString(String tagString) {
    this.tagString = tagString;
  }


  public FloodlightActivity userDefinedVariableTypes(List<UserDefinedVariableTypesEnum> userDefinedVariableTypes) {
    this.userDefinedVariableTypes = userDefinedVariableTypes;
    return this;
  }

  public FloodlightActivity addUserDefinedVariableTypesItem(UserDefinedVariableTypesEnum userDefinedVariableTypesItem) {
    if (this.userDefinedVariableTypes == null) {
      this.userDefinedVariableTypes = new ArrayList<>();
    }
    this.userDefinedVariableTypes.add(userDefinedVariableTypesItem);
    return this;
  }

  /**
   * List of the user-defined variables used by this conversion tag. These map to the \&quot;u[1-100]&#x3D;\&quot; in the tags. Each of these can have a user defined type. Acceptable values are U1 to U100, inclusive. 
   * @return userDefinedVariableTypes
   */
  @javax.annotation.Nullable
  public List<UserDefinedVariableTypesEnum> getUserDefinedVariableTypes() {
    return userDefinedVariableTypes;
  }

  public void setUserDefinedVariableTypes(List<UserDefinedVariableTypesEnum> userDefinedVariableTypes) {
    this.userDefinedVariableTypes = userDefinedVariableTypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FloodlightActivity floodlightActivity = (FloodlightActivity) o;
    return Objects.equals(this.accountId, floodlightActivity.accountId) &&
        Objects.equals(this.advertiserId, floodlightActivity.advertiserId) &&
        Objects.equals(this.advertiserIdDimensionValue, floodlightActivity.advertiserIdDimensionValue) &&
        Objects.equals(this.attributionEnabled, floodlightActivity.attributionEnabled) &&
        Objects.equals(this.cacheBustingType, floodlightActivity.cacheBustingType) &&
        Objects.equals(this.countingMethod, floodlightActivity.countingMethod) &&
        Objects.equals(this.defaultTags, floodlightActivity.defaultTags) &&
        Objects.equals(this.expectedUrl, floodlightActivity.expectedUrl) &&
        Objects.equals(this.floodlightActivityGroupId, floodlightActivity.floodlightActivityGroupId) &&
        Objects.equals(this.floodlightActivityGroupName, floodlightActivity.floodlightActivityGroupName) &&
        Objects.equals(this.floodlightActivityGroupTagString, floodlightActivity.floodlightActivityGroupTagString) &&
        Objects.equals(this.floodlightActivityGroupType, floodlightActivity.floodlightActivityGroupType) &&
        Objects.equals(this.floodlightConfigurationId, floodlightActivity.floodlightConfigurationId) &&
        Objects.equals(this.floodlightConfigurationIdDimensionValue, floodlightActivity.floodlightConfigurationIdDimensionValue) &&
        Objects.equals(this.floodlightTagType, floodlightActivity.floodlightTagType) &&
        Objects.equals(this.id, floodlightActivity.id) &&
        Objects.equals(this.idDimensionValue, floodlightActivity.idDimensionValue) &&
        Objects.equals(this.kind, floodlightActivity.kind) &&
        Objects.equals(this.name, floodlightActivity.name) &&
        Objects.equals(this.notes, floodlightActivity.notes) &&
        Objects.equals(this.publisherTags, floodlightActivity.publisherTags) &&
        Objects.equals(this.secure, floodlightActivity.secure) &&
        Objects.equals(this.sslCompliant, floodlightActivity.sslCompliant) &&
        Objects.equals(this.sslRequired, floodlightActivity.sslRequired) &&
        Objects.equals(this.status, floodlightActivity.status) &&
        Objects.equals(this.subaccountId, floodlightActivity.subaccountId) &&
        Objects.equals(this.tagFormat, floodlightActivity.tagFormat) &&
        Objects.equals(this.tagString, floodlightActivity.tagString) &&
        Objects.equals(this.userDefinedVariableTypes, floodlightActivity.userDefinedVariableTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, advertiserId, advertiserIdDimensionValue, attributionEnabled, cacheBustingType, countingMethod, defaultTags, expectedUrl, floodlightActivityGroupId, floodlightActivityGroupName, floodlightActivityGroupTagString, floodlightActivityGroupType, floodlightConfigurationId, floodlightConfigurationIdDimensionValue, floodlightTagType, id, idDimensionValue, kind, name, notes, publisherTags, secure, sslCompliant, sslRequired, status, subaccountId, tagFormat, tagString, userDefinedVariableTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FloodlightActivity {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    advertiserId: ").append(toIndentedString(advertiserId)).append("\n");
    sb.append("    advertiserIdDimensionValue: ").append(toIndentedString(advertiserIdDimensionValue)).append("\n");
    sb.append("    attributionEnabled: ").append(toIndentedString(attributionEnabled)).append("\n");
    sb.append("    cacheBustingType: ").append(toIndentedString(cacheBustingType)).append("\n");
    sb.append("    countingMethod: ").append(toIndentedString(countingMethod)).append("\n");
    sb.append("    defaultTags: ").append(toIndentedString(defaultTags)).append("\n");
    sb.append("    expectedUrl: ").append(toIndentedString(expectedUrl)).append("\n");
    sb.append("    floodlightActivityGroupId: ").append(toIndentedString(floodlightActivityGroupId)).append("\n");
    sb.append("    floodlightActivityGroupName: ").append(toIndentedString(floodlightActivityGroupName)).append("\n");
    sb.append("    floodlightActivityGroupTagString: ").append(toIndentedString(floodlightActivityGroupTagString)).append("\n");
    sb.append("    floodlightActivityGroupType: ").append(toIndentedString(floodlightActivityGroupType)).append("\n");
    sb.append("    floodlightConfigurationId: ").append(toIndentedString(floodlightConfigurationId)).append("\n");
    sb.append("    floodlightConfigurationIdDimensionValue: ").append(toIndentedString(floodlightConfigurationIdDimensionValue)).append("\n");
    sb.append("    floodlightTagType: ").append(toIndentedString(floodlightTagType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    idDimensionValue: ").append(toIndentedString(idDimensionValue)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    publisherTags: ").append(toIndentedString(publisherTags)).append("\n");
    sb.append("    secure: ").append(toIndentedString(secure)).append("\n");
    sb.append("    sslCompliant: ").append(toIndentedString(sslCompliant)).append("\n");
    sb.append("    sslRequired: ").append(toIndentedString(sslRequired)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subaccountId: ").append(toIndentedString(subaccountId)).append("\n");
    sb.append("    tagFormat: ").append(toIndentedString(tagFormat)).append("\n");
    sb.append("    tagString: ").append(toIndentedString(tagString)).append("\n");
    sb.append("    userDefinedVariableTypes: ").append(toIndentedString(userDefinedVariableTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("advertiserId");
    openapiFields.add("advertiserIdDimensionValue");
    openapiFields.add("attributionEnabled");
    openapiFields.add("cacheBustingType");
    openapiFields.add("countingMethod");
    openapiFields.add("defaultTags");
    openapiFields.add("expectedUrl");
    openapiFields.add("floodlightActivityGroupId");
    openapiFields.add("floodlightActivityGroupName");
    openapiFields.add("floodlightActivityGroupTagString");
    openapiFields.add("floodlightActivityGroupType");
    openapiFields.add("floodlightConfigurationId");
    openapiFields.add("floodlightConfigurationIdDimensionValue");
    openapiFields.add("floodlightTagType");
    openapiFields.add("id");
    openapiFields.add("idDimensionValue");
    openapiFields.add("kind");
    openapiFields.add("name");
    openapiFields.add("notes");
    openapiFields.add("publisherTags");
    openapiFields.add("secure");
    openapiFields.add("sslCompliant");
    openapiFields.add("sslRequired");
    openapiFields.add("status");
    openapiFields.add("subaccountId");
    openapiFields.add("tagFormat");
    openapiFields.add("tagString");
    openapiFields.add("userDefinedVariableTypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FloodlightActivity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FloodlightActivity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FloodlightActivity is not found in the empty JSON string", FloodlightActivity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FloodlightActivity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FloodlightActivity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if ((jsonObj.get("advertiserId") != null && !jsonObj.get("advertiserId").isJsonNull()) && !jsonObj.get("advertiserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advertiserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advertiserId").toString()));
      }
      // validate the optional field `advertiserIdDimensionValue`
      if (jsonObj.get("advertiserIdDimensionValue") != null && !jsonObj.get("advertiserIdDimensionValue").isJsonNull()) {
        DimensionValue.validateJsonElement(jsonObj.get("advertiserIdDimensionValue"));
      }
      if ((jsonObj.get("cacheBustingType") != null && !jsonObj.get("cacheBustingType").isJsonNull()) && !jsonObj.get("cacheBustingType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cacheBustingType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cacheBustingType").toString()));
      }
      // validate the optional field `cacheBustingType`
      if (jsonObj.get("cacheBustingType") != null && !jsonObj.get("cacheBustingType").isJsonNull()) {
        CacheBustingTypeEnum.validateJsonElement(jsonObj.get("cacheBustingType"));
      }
      if ((jsonObj.get("countingMethod") != null && !jsonObj.get("countingMethod").isJsonNull()) && !jsonObj.get("countingMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countingMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countingMethod").toString()));
      }
      // validate the optional field `countingMethod`
      if (jsonObj.get("countingMethod") != null && !jsonObj.get("countingMethod").isJsonNull()) {
        CountingMethodEnum.validateJsonElement(jsonObj.get("countingMethod"));
      }
      if (jsonObj.get("defaultTags") != null && !jsonObj.get("defaultTags").isJsonNull()) {
        JsonArray jsonArraydefaultTags = jsonObj.getAsJsonArray("defaultTags");
        if (jsonArraydefaultTags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("defaultTags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `defaultTags` to be an array in the JSON string but got `%s`", jsonObj.get("defaultTags").toString()));
          }

          // validate the optional field `defaultTags` (array)
          for (int i = 0; i < jsonArraydefaultTags.size(); i++) {
            FloodlightActivityDynamicTag.validateJsonElement(jsonArraydefaultTags.get(i));
          };
        }
      }
      if ((jsonObj.get("expectedUrl") != null && !jsonObj.get("expectedUrl").isJsonNull()) && !jsonObj.get("expectedUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expectedUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expectedUrl").toString()));
      }
      if ((jsonObj.get("floodlightActivityGroupId") != null && !jsonObj.get("floodlightActivityGroupId").isJsonNull()) && !jsonObj.get("floodlightActivityGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `floodlightActivityGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("floodlightActivityGroupId").toString()));
      }
      if ((jsonObj.get("floodlightActivityGroupName") != null && !jsonObj.get("floodlightActivityGroupName").isJsonNull()) && !jsonObj.get("floodlightActivityGroupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `floodlightActivityGroupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("floodlightActivityGroupName").toString()));
      }
      if ((jsonObj.get("floodlightActivityGroupTagString") != null && !jsonObj.get("floodlightActivityGroupTagString").isJsonNull()) && !jsonObj.get("floodlightActivityGroupTagString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `floodlightActivityGroupTagString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("floodlightActivityGroupTagString").toString()));
      }
      if ((jsonObj.get("floodlightActivityGroupType") != null && !jsonObj.get("floodlightActivityGroupType").isJsonNull()) && !jsonObj.get("floodlightActivityGroupType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `floodlightActivityGroupType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("floodlightActivityGroupType").toString()));
      }
      // validate the optional field `floodlightActivityGroupType`
      if (jsonObj.get("floodlightActivityGroupType") != null && !jsonObj.get("floodlightActivityGroupType").isJsonNull()) {
        FloodlightActivityGroupTypeEnum.validateJsonElement(jsonObj.get("floodlightActivityGroupType"));
      }
      if ((jsonObj.get("floodlightConfigurationId") != null && !jsonObj.get("floodlightConfigurationId").isJsonNull()) && !jsonObj.get("floodlightConfigurationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `floodlightConfigurationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("floodlightConfigurationId").toString()));
      }
      // validate the optional field `floodlightConfigurationIdDimensionValue`
      if (jsonObj.get("floodlightConfigurationIdDimensionValue") != null && !jsonObj.get("floodlightConfigurationIdDimensionValue").isJsonNull()) {
        DimensionValue.validateJsonElement(jsonObj.get("floodlightConfigurationIdDimensionValue"));
      }
      if ((jsonObj.get("floodlightTagType") != null && !jsonObj.get("floodlightTagType").isJsonNull()) && !jsonObj.get("floodlightTagType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `floodlightTagType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("floodlightTagType").toString()));
      }
      // validate the optional field `floodlightTagType`
      if (jsonObj.get("floodlightTagType") != null && !jsonObj.get("floodlightTagType").isJsonNull()) {
        FloodlightTagTypeEnum.validateJsonElement(jsonObj.get("floodlightTagType"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `idDimensionValue`
      if (jsonObj.get("idDimensionValue") != null && !jsonObj.get("idDimensionValue").isJsonNull()) {
        DimensionValue.validateJsonElement(jsonObj.get("idDimensionValue"));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if (jsonObj.get("publisherTags") != null && !jsonObj.get("publisherTags").isJsonNull()) {
        JsonArray jsonArraypublisherTags = jsonObj.getAsJsonArray("publisherTags");
        if (jsonArraypublisherTags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("publisherTags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `publisherTags` to be an array in the JSON string but got `%s`", jsonObj.get("publisherTags").toString()));
          }

          // validate the optional field `publisherTags` (array)
          for (int i = 0; i < jsonArraypublisherTags.size(); i++) {
            FloodlightActivityPublisherDynamicTag.validateJsonElement(jsonArraypublisherTags.get(i));
          };
        }
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("subaccountId") != null && !jsonObj.get("subaccountId").isJsonNull()) && !jsonObj.get("subaccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subaccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subaccountId").toString()));
      }
      if ((jsonObj.get("tagFormat") != null && !jsonObj.get("tagFormat").isJsonNull()) && !jsonObj.get("tagFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tagFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tagFormat").toString()));
      }
      // validate the optional field `tagFormat`
      if (jsonObj.get("tagFormat") != null && !jsonObj.get("tagFormat").isJsonNull()) {
        TagFormatEnum.validateJsonElement(jsonObj.get("tagFormat"));
      }
      if ((jsonObj.get("tagString") != null && !jsonObj.get("tagString").isJsonNull()) && !jsonObj.get("tagString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tagString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tagString").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("userDefinedVariableTypes") != null && !jsonObj.get("userDefinedVariableTypes").isJsonNull() && !jsonObj.get("userDefinedVariableTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `userDefinedVariableTypes` to be an array in the JSON string but got `%s`", jsonObj.get("userDefinedVariableTypes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FloodlightActivity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FloodlightActivity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FloodlightActivity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FloodlightActivity.class));

       return (TypeAdapter<T>) new TypeAdapter<FloodlightActivity>() {
           @Override
           public void write(JsonWriter out, FloodlightActivity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FloodlightActivity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FloodlightActivity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FloodlightActivity
   * @throws IOException if the JSON string is invalid with respect to FloodlightActivity
   */
  public static FloodlightActivity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FloodlightActivity.class);
  }

  /**
   * Convert an instance of FloodlightActivity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

