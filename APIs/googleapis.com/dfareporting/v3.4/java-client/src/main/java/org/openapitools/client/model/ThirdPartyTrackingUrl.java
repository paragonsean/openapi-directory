/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Third-party Tracking URL.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:16.070314-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ThirdPartyTrackingUrl {
  /**
   * Third-party URL type for in-stream video and in-stream audio creatives.
   */
  @JsonAdapter(ThirdPartyUrlTypeEnum.Adapter.class)
  public enum ThirdPartyUrlTypeEnum {
    IMPRESSION("IMPRESSION"),
    
    CLICK_TRACKING("CLICK_TRACKING"),
    
    VIDEO_START("VIDEO_START"),
    
    VIDEO_FIRST_QUARTILE("VIDEO_FIRST_QUARTILE"),
    
    VIDEO_MIDPOINT("VIDEO_MIDPOINT"),
    
    VIDEO_THIRD_QUARTILE("VIDEO_THIRD_QUARTILE"),
    
    VIDEO_COMPLETE("VIDEO_COMPLETE"),
    
    VIDEO_MUTE("VIDEO_MUTE"),
    
    VIDEO_PAUSE("VIDEO_PAUSE"),
    
    VIDEO_REWIND("VIDEO_REWIND"),
    
    VIDEO_FULLSCREEN("VIDEO_FULLSCREEN"),
    
    VIDEO_STOP("VIDEO_STOP"),
    
    VIDEO_CUSTOM("VIDEO_CUSTOM"),
    
    SURVEY("SURVEY"),
    
    RICH_MEDIA_IMPRESSION("RICH_MEDIA_IMPRESSION"),
    
    RICH_MEDIA_RM_IMPRESSION("RICH_MEDIA_RM_IMPRESSION"),
    
    RICH_MEDIA_BACKUP_IMPRESSION("RICH_MEDIA_BACKUP_IMPRESSION"),
    
    VIDEO_SKIP("VIDEO_SKIP"),
    
    VIDEO_PROGRESS("VIDEO_PROGRESS");

    private String value;

    ThirdPartyUrlTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ThirdPartyUrlTypeEnum fromValue(String value) {
      for (ThirdPartyUrlTypeEnum b : ThirdPartyUrlTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ThirdPartyUrlTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ThirdPartyUrlTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ThirdPartyUrlTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ThirdPartyUrlTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ThirdPartyUrlTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_THIRD_PARTY_URL_TYPE = "thirdPartyUrlType";
  @SerializedName(SERIALIZED_NAME_THIRD_PARTY_URL_TYPE)
  private ThirdPartyUrlTypeEnum thirdPartyUrlType;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public ThirdPartyTrackingUrl() {
  }

  public ThirdPartyTrackingUrl thirdPartyUrlType(ThirdPartyUrlTypeEnum thirdPartyUrlType) {
    this.thirdPartyUrlType = thirdPartyUrlType;
    return this;
  }

  /**
   * Third-party URL type for in-stream video and in-stream audio creatives.
   * @return thirdPartyUrlType
   */
  @javax.annotation.Nullable
  public ThirdPartyUrlTypeEnum getThirdPartyUrlType() {
    return thirdPartyUrlType;
  }

  public void setThirdPartyUrlType(ThirdPartyUrlTypeEnum thirdPartyUrlType) {
    this.thirdPartyUrlType = thirdPartyUrlType;
  }


  public ThirdPartyTrackingUrl url(String url) {
    this.url = url;
    return this;
  }

  /**
   * URL for the specified third-party URL type.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ThirdPartyTrackingUrl thirdPartyTrackingUrl = (ThirdPartyTrackingUrl) o;
    return Objects.equals(this.thirdPartyUrlType, thirdPartyTrackingUrl.thirdPartyUrlType) &&
        Objects.equals(this.url, thirdPartyTrackingUrl.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(thirdPartyUrlType, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ThirdPartyTrackingUrl {\n");
    sb.append("    thirdPartyUrlType: ").append(toIndentedString(thirdPartyUrlType)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("thirdPartyUrlType");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ThirdPartyTrackingUrl
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ThirdPartyTrackingUrl.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ThirdPartyTrackingUrl is not found in the empty JSON string", ThirdPartyTrackingUrl.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ThirdPartyTrackingUrl.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ThirdPartyTrackingUrl` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("thirdPartyUrlType") != null && !jsonObj.get("thirdPartyUrlType").isJsonNull()) && !jsonObj.get("thirdPartyUrlType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thirdPartyUrlType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thirdPartyUrlType").toString()));
      }
      // validate the optional field `thirdPartyUrlType`
      if (jsonObj.get("thirdPartyUrlType") != null && !jsonObj.get("thirdPartyUrlType").isJsonNull()) {
        ThirdPartyUrlTypeEnum.validateJsonElement(jsonObj.get("thirdPartyUrlType"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ThirdPartyTrackingUrl.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ThirdPartyTrackingUrl' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ThirdPartyTrackingUrl> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ThirdPartyTrackingUrl.class));

       return (TypeAdapter<T>) new TypeAdapter<ThirdPartyTrackingUrl>() {
           @Override
           public void write(JsonWriter out, ThirdPartyTrackingUrl value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ThirdPartyTrackingUrl read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ThirdPartyTrackingUrl given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ThirdPartyTrackingUrl
   * @throws IOException if the JSON string is invalid with respect to ThirdPartyTrackingUrl
   */
  public static ThirdPartyTrackingUrl fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ThirdPartyTrackingUrl.class);
  }

  /**
   * Convert an instance of ThirdPartyTrackingUrl to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

