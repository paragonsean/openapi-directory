/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CustomViewabilityMetric;
import org.openapitools.client.model.DimensionValue;
import org.openapitools.client.model.LookbackConfiguration;
import org.openapitools.client.model.OmnitureSettings;
import org.openapitools.client.model.TagSettings;
import org.openapitools.client.model.ThirdPartyAuthenticationToken;
import org.openapitools.client.model.UserDefinedVariableConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains properties of a Floodlight configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:16.070314-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FloodlightConfiguration {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_ADVERTISER_ID = "advertiserId";
  @SerializedName(SERIALIZED_NAME_ADVERTISER_ID)
  private String advertiserId;

  public static final String SERIALIZED_NAME_ADVERTISER_ID_DIMENSION_VALUE = "advertiserIdDimensionValue";
  @SerializedName(SERIALIZED_NAME_ADVERTISER_ID_DIMENSION_VALUE)
  private DimensionValue advertiserIdDimensionValue;

  public static final String SERIALIZED_NAME_ANALYTICS_DATA_SHARING_ENABLED = "analyticsDataSharingEnabled";
  @SerializedName(SERIALIZED_NAME_ANALYTICS_DATA_SHARING_ENABLED)
  private Boolean analyticsDataSharingEnabled;

  public static final String SERIALIZED_NAME_CUSTOM_VIEWABILITY_METRIC = "customViewabilityMetric";
  @SerializedName(SERIALIZED_NAME_CUSTOM_VIEWABILITY_METRIC)
  private CustomViewabilityMetric customViewabilityMetric;

  public static final String SERIALIZED_NAME_EXPOSURE_TO_CONVERSION_ENABLED = "exposureToConversionEnabled";
  @SerializedName(SERIALIZED_NAME_EXPOSURE_TO_CONVERSION_ENABLED)
  private Boolean exposureToConversionEnabled;

  /**
   * Day that will be counted as the first day of the week in reports. This is a required field.
   */
  @JsonAdapter(FirstDayOfWeekEnum.Adapter.class)
  public enum FirstDayOfWeekEnum {
    MONDAY("MONDAY"),
    
    SUNDAY("SUNDAY");

    private String value;

    FirstDayOfWeekEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FirstDayOfWeekEnum fromValue(String value) {
      for (FirstDayOfWeekEnum b : FirstDayOfWeekEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FirstDayOfWeekEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FirstDayOfWeekEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FirstDayOfWeekEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FirstDayOfWeekEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FirstDayOfWeekEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FIRST_DAY_OF_WEEK = "firstDayOfWeek";
  @SerializedName(SERIALIZED_NAME_FIRST_DAY_OF_WEEK)
  private FirstDayOfWeekEnum firstDayOfWeek;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ID_DIMENSION_VALUE = "idDimensionValue";
  @SerializedName(SERIALIZED_NAME_ID_DIMENSION_VALUE)
  private DimensionValue idDimensionValue;

  public static final String SERIALIZED_NAME_IN_APP_ATTRIBUTION_TRACKING_ENABLED = "inAppAttributionTrackingEnabled";
  @SerializedName(SERIALIZED_NAME_IN_APP_ATTRIBUTION_TRACKING_ENABLED)
  private Boolean inAppAttributionTrackingEnabled;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_LOOKBACK_CONFIGURATION = "lookbackConfiguration";
  @SerializedName(SERIALIZED_NAME_LOOKBACK_CONFIGURATION)
  private LookbackConfiguration lookbackConfiguration;

  /**
   * Types of attribution options for natural search conversions.
   */
  @JsonAdapter(NaturalSearchConversionAttributionOptionEnum.Adapter.class)
  public enum NaturalSearchConversionAttributionOptionEnum {
    EXCLUDE_NATURAL_SEARCH_CONVERSION_ATTRIBUTION("EXCLUDE_NATURAL_SEARCH_CONVERSION_ATTRIBUTION"),
    
    INCLUDE_NATURAL_SEARCH_CONVERSION_ATTRIBUTION("INCLUDE_NATURAL_SEARCH_CONVERSION_ATTRIBUTION"),
    
    INCLUDE_NATURAL_SEARCH_TIERED_CONVERSION_ATTRIBUTION("INCLUDE_NATURAL_SEARCH_TIERED_CONVERSION_ATTRIBUTION");

    private String value;

    NaturalSearchConversionAttributionOptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NaturalSearchConversionAttributionOptionEnum fromValue(String value) {
      for (NaturalSearchConversionAttributionOptionEnum b : NaturalSearchConversionAttributionOptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NaturalSearchConversionAttributionOptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NaturalSearchConversionAttributionOptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NaturalSearchConversionAttributionOptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NaturalSearchConversionAttributionOptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NaturalSearchConversionAttributionOptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NATURAL_SEARCH_CONVERSION_ATTRIBUTION_OPTION = "naturalSearchConversionAttributionOption";
  @SerializedName(SERIALIZED_NAME_NATURAL_SEARCH_CONVERSION_ATTRIBUTION_OPTION)
  private NaturalSearchConversionAttributionOptionEnum naturalSearchConversionAttributionOption;

  public static final String SERIALIZED_NAME_OMNITURE_SETTINGS = "omnitureSettings";
  @SerializedName(SERIALIZED_NAME_OMNITURE_SETTINGS)
  private OmnitureSettings omnitureSettings;

  public static final String SERIALIZED_NAME_SUBACCOUNT_ID = "subaccountId";
  @SerializedName(SERIALIZED_NAME_SUBACCOUNT_ID)
  private String subaccountId;

  public static final String SERIALIZED_NAME_TAG_SETTINGS = "tagSettings";
  @SerializedName(SERIALIZED_NAME_TAG_SETTINGS)
  private TagSettings tagSettings;

  public static final String SERIALIZED_NAME_THIRD_PARTY_AUTHENTICATION_TOKENS = "thirdPartyAuthenticationTokens";
  @SerializedName(SERIALIZED_NAME_THIRD_PARTY_AUTHENTICATION_TOKENS)
  private List<ThirdPartyAuthenticationToken> thirdPartyAuthenticationTokens = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER_DEFINED_VARIABLE_CONFIGURATIONS = "userDefinedVariableConfigurations";
  @SerializedName(SERIALIZED_NAME_USER_DEFINED_VARIABLE_CONFIGURATIONS)
  private List<UserDefinedVariableConfiguration> userDefinedVariableConfigurations = new ArrayList<>();

  public FloodlightConfiguration() {
  }

  public FloodlightConfiguration accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Account ID of this floodlight configuration. This is a read-only field that can be left blank.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public FloodlightConfiguration advertiserId(String advertiserId) {
    this.advertiserId = advertiserId;
    return this;
  }

  /**
   * Advertiser ID of the parent advertiser of this floodlight configuration.
   * @return advertiserId
   */
  @javax.annotation.Nullable
  public String getAdvertiserId() {
    return advertiserId;
  }

  public void setAdvertiserId(String advertiserId) {
    this.advertiserId = advertiserId;
  }


  public FloodlightConfiguration advertiserIdDimensionValue(DimensionValue advertiserIdDimensionValue) {
    this.advertiserIdDimensionValue = advertiserIdDimensionValue;
    return this;
  }

  /**
   * Get advertiserIdDimensionValue
   * @return advertiserIdDimensionValue
   */
  @javax.annotation.Nullable
  public DimensionValue getAdvertiserIdDimensionValue() {
    return advertiserIdDimensionValue;
  }

  public void setAdvertiserIdDimensionValue(DimensionValue advertiserIdDimensionValue) {
    this.advertiserIdDimensionValue = advertiserIdDimensionValue;
  }


  public FloodlightConfiguration analyticsDataSharingEnabled(Boolean analyticsDataSharingEnabled) {
    this.analyticsDataSharingEnabled = analyticsDataSharingEnabled;
    return this;
  }

  /**
   * Whether advertiser data is shared with Google Analytics.
   * @return analyticsDataSharingEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAnalyticsDataSharingEnabled() {
    return analyticsDataSharingEnabled;
  }

  public void setAnalyticsDataSharingEnabled(Boolean analyticsDataSharingEnabled) {
    this.analyticsDataSharingEnabled = analyticsDataSharingEnabled;
  }


  public FloodlightConfiguration customViewabilityMetric(CustomViewabilityMetric customViewabilityMetric) {
    this.customViewabilityMetric = customViewabilityMetric;
    return this;
  }

  /**
   * Get customViewabilityMetric
   * @return customViewabilityMetric
   */
  @javax.annotation.Nullable
  public CustomViewabilityMetric getCustomViewabilityMetric() {
    return customViewabilityMetric;
  }

  public void setCustomViewabilityMetric(CustomViewabilityMetric customViewabilityMetric) {
    this.customViewabilityMetric = customViewabilityMetric;
  }


  public FloodlightConfiguration exposureToConversionEnabled(Boolean exposureToConversionEnabled) {
    this.exposureToConversionEnabled = exposureToConversionEnabled;
    return this;
  }

  /**
   * Whether the exposure-to-conversion report is enabled. This report shows detailed pathway information on up to 10 of the most recent ad exposures seen by a user before converting.
   * @return exposureToConversionEnabled
   */
  @javax.annotation.Nullable
  public Boolean getExposureToConversionEnabled() {
    return exposureToConversionEnabled;
  }

  public void setExposureToConversionEnabled(Boolean exposureToConversionEnabled) {
    this.exposureToConversionEnabled = exposureToConversionEnabled;
  }


  public FloodlightConfiguration firstDayOfWeek(FirstDayOfWeekEnum firstDayOfWeek) {
    this.firstDayOfWeek = firstDayOfWeek;
    return this;
  }

  /**
   * Day that will be counted as the first day of the week in reports. This is a required field.
   * @return firstDayOfWeek
   */
  @javax.annotation.Nullable
  public FirstDayOfWeekEnum getFirstDayOfWeek() {
    return firstDayOfWeek;
  }

  public void setFirstDayOfWeek(FirstDayOfWeekEnum firstDayOfWeek) {
    this.firstDayOfWeek = firstDayOfWeek;
  }


  public FloodlightConfiguration id(String id) {
    this.id = id;
    return this;
  }

  /**
   * ID of this floodlight configuration. This is a read-only, auto-generated field.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public FloodlightConfiguration idDimensionValue(DimensionValue idDimensionValue) {
    this.idDimensionValue = idDimensionValue;
    return this;
  }

  /**
   * Get idDimensionValue
   * @return idDimensionValue
   */
  @javax.annotation.Nullable
  public DimensionValue getIdDimensionValue() {
    return idDimensionValue;
  }

  public void setIdDimensionValue(DimensionValue idDimensionValue) {
    this.idDimensionValue = idDimensionValue;
  }


  public FloodlightConfiguration inAppAttributionTrackingEnabled(Boolean inAppAttributionTrackingEnabled) {
    this.inAppAttributionTrackingEnabled = inAppAttributionTrackingEnabled;
    return this;
  }

  /**
   * Whether in-app attribution tracking is enabled.
   * @return inAppAttributionTrackingEnabled
   */
  @javax.annotation.Nullable
  public Boolean getInAppAttributionTrackingEnabled() {
    return inAppAttributionTrackingEnabled;
  }

  public void setInAppAttributionTrackingEnabled(Boolean inAppAttributionTrackingEnabled) {
    this.inAppAttributionTrackingEnabled = inAppAttributionTrackingEnabled;
  }


  public FloodlightConfiguration kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string \&quot;dfareporting#floodlightConfiguration\&quot;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public FloodlightConfiguration lookbackConfiguration(LookbackConfiguration lookbackConfiguration) {
    this.lookbackConfiguration = lookbackConfiguration;
    return this;
  }

  /**
   * Get lookbackConfiguration
   * @return lookbackConfiguration
   */
  @javax.annotation.Nullable
  public LookbackConfiguration getLookbackConfiguration() {
    return lookbackConfiguration;
  }

  public void setLookbackConfiguration(LookbackConfiguration lookbackConfiguration) {
    this.lookbackConfiguration = lookbackConfiguration;
  }


  public FloodlightConfiguration naturalSearchConversionAttributionOption(NaturalSearchConversionAttributionOptionEnum naturalSearchConversionAttributionOption) {
    this.naturalSearchConversionAttributionOption = naturalSearchConversionAttributionOption;
    return this;
  }

  /**
   * Types of attribution options for natural search conversions.
   * @return naturalSearchConversionAttributionOption
   */
  @javax.annotation.Nullable
  public NaturalSearchConversionAttributionOptionEnum getNaturalSearchConversionAttributionOption() {
    return naturalSearchConversionAttributionOption;
  }

  public void setNaturalSearchConversionAttributionOption(NaturalSearchConversionAttributionOptionEnum naturalSearchConversionAttributionOption) {
    this.naturalSearchConversionAttributionOption = naturalSearchConversionAttributionOption;
  }


  public FloodlightConfiguration omnitureSettings(OmnitureSettings omnitureSettings) {
    this.omnitureSettings = omnitureSettings;
    return this;
  }

  /**
   * Get omnitureSettings
   * @return omnitureSettings
   */
  @javax.annotation.Nullable
  public OmnitureSettings getOmnitureSettings() {
    return omnitureSettings;
  }

  public void setOmnitureSettings(OmnitureSettings omnitureSettings) {
    this.omnitureSettings = omnitureSettings;
  }


  public FloodlightConfiguration subaccountId(String subaccountId) {
    this.subaccountId = subaccountId;
    return this;
  }

  /**
   * Subaccount ID of this floodlight configuration. This is a read-only field that can be left blank.
   * @return subaccountId
   */
  @javax.annotation.Nullable
  public String getSubaccountId() {
    return subaccountId;
  }

  public void setSubaccountId(String subaccountId) {
    this.subaccountId = subaccountId;
  }


  public FloodlightConfiguration tagSettings(TagSettings tagSettings) {
    this.tagSettings = tagSettings;
    return this;
  }

  /**
   * Get tagSettings
   * @return tagSettings
   */
  @javax.annotation.Nullable
  public TagSettings getTagSettings() {
    return tagSettings;
  }

  public void setTagSettings(TagSettings tagSettings) {
    this.tagSettings = tagSettings;
  }


  public FloodlightConfiguration thirdPartyAuthenticationTokens(List<ThirdPartyAuthenticationToken> thirdPartyAuthenticationTokens) {
    this.thirdPartyAuthenticationTokens = thirdPartyAuthenticationTokens;
    return this;
  }

  public FloodlightConfiguration addThirdPartyAuthenticationTokensItem(ThirdPartyAuthenticationToken thirdPartyAuthenticationTokensItem) {
    if (this.thirdPartyAuthenticationTokens == null) {
      this.thirdPartyAuthenticationTokens = new ArrayList<>();
    }
    this.thirdPartyAuthenticationTokens.add(thirdPartyAuthenticationTokensItem);
    return this;
  }

  /**
   * List of third-party authentication tokens enabled for this configuration.
   * @return thirdPartyAuthenticationTokens
   */
  @javax.annotation.Nullable
  public List<ThirdPartyAuthenticationToken> getThirdPartyAuthenticationTokens() {
    return thirdPartyAuthenticationTokens;
  }

  public void setThirdPartyAuthenticationTokens(List<ThirdPartyAuthenticationToken> thirdPartyAuthenticationTokens) {
    this.thirdPartyAuthenticationTokens = thirdPartyAuthenticationTokens;
  }


  public FloodlightConfiguration userDefinedVariableConfigurations(List<UserDefinedVariableConfiguration> userDefinedVariableConfigurations) {
    this.userDefinedVariableConfigurations = userDefinedVariableConfigurations;
    return this;
  }

  public FloodlightConfiguration addUserDefinedVariableConfigurationsItem(UserDefinedVariableConfiguration userDefinedVariableConfigurationsItem) {
    if (this.userDefinedVariableConfigurations == null) {
      this.userDefinedVariableConfigurations = new ArrayList<>();
    }
    this.userDefinedVariableConfigurations.add(userDefinedVariableConfigurationsItem);
    return this;
  }

  /**
   * List of user defined variables enabled for this configuration.
   * @return userDefinedVariableConfigurations
   */
  @javax.annotation.Nullable
  public List<UserDefinedVariableConfiguration> getUserDefinedVariableConfigurations() {
    return userDefinedVariableConfigurations;
  }

  public void setUserDefinedVariableConfigurations(List<UserDefinedVariableConfiguration> userDefinedVariableConfigurations) {
    this.userDefinedVariableConfigurations = userDefinedVariableConfigurations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FloodlightConfiguration floodlightConfiguration = (FloodlightConfiguration) o;
    return Objects.equals(this.accountId, floodlightConfiguration.accountId) &&
        Objects.equals(this.advertiserId, floodlightConfiguration.advertiserId) &&
        Objects.equals(this.advertiserIdDimensionValue, floodlightConfiguration.advertiserIdDimensionValue) &&
        Objects.equals(this.analyticsDataSharingEnabled, floodlightConfiguration.analyticsDataSharingEnabled) &&
        Objects.equals(this.customViewabilityMetric, floodlightConfiguration.customViewabilityMetric) &&
        Objects.equals(this.exposureToConversionEnabled, floodlightConfiguration.exposureToConversionEnabled) &&
        Objects.equals(this.firstDayOfWeek, floodlightConfiguration.firstDayOfWeek) &&
        Objects.equals(this.id, floodlightConfiguration.id) &&
        Objects.equals(this.idDimensionValue, floodlightConfiguration.idDimensionValue) &&
        Objects.equals(this.inAppAttributionTrackingEnabled, floodlightConfiguration.inAppAttributionTrackingEnabled) &&
        Objects.equals(this.kind, floodlightConfiguration.kind) &&
        Objects.equals(this.lookbackConfiguration, floodlightConfiguration.lookbackConfiguration) &&
        Objects.equals(this.naturalSearchConversionAttributionOption, floodlightConfiguration.naturalSearchConversionAttributionOption) &&
        Objects.equals(this.omnitureSettings, floodlightConfiguration.omnitureSettings) &&
        Objects.equals(this.subaccountId, floodlightConfiguration.subaccountId) &&
        Objects.equals(this.tagSettings, floodlightConfiguration.tagSettings) &&
        Objects.equals(this.thirdPartyAuthenticationTokens, floodlightConfiguration.thirdPartyAuthenticationTokens) &&
        Objects.equals(this.userDefinedVariableConfigurations, floodlightConfiguration.userDefinedVariableConfigurations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, advertiserId, advertiserIdDimensionValue, analyticsDataSharingEnabled, customViewabilityMetric, exposureToConversionEnabled, firstDayOfWeek, id, idDimensionValue, inAppAttributionTrackingEnabled, kind, lookbackConfiguration, naturalSearchConversionAttributionOption, omnitureSettings, subaccountId, tagSettings, thirdPartyAuthenticationTokens, userDefinedVariableConfigurations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FloodlightConfiguration {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    advertiserId: ").append(toIndentedString(advertiserId)).append("\n");
    sb.append("    advertiserIdDimensionValue: ").append(toIndentedString(advertiserIdDimensionValue)).append("\n");
    sb.append("    analyticsDataSharingEnabled: ").append(toIndentedString(analyticsDataSharingEnabled)).append("\n");
    sb.append("    customViewabilityMetric: ").append(toIndentedString(customViewabilityMetric)).append("\n");
    sb.append("    exposureToConversionEnabled: ").append(toIndentedString(exposureToConversionEnabled)).append("\n");
    sb.append("    firstDayOfWeek: ").append(toIndentedString(firstDayOfWeek)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    idDimensionValue: ").append(toIndentedString(idDimensionValue)).append("\n");
    sb.append("    inAppAttributionTrackingEnabled: ").append(toIndentedString(inAppAttributionTrackingEnabled)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    lookbackConfiguration: ").append(toIndentedString(lookbackConfiguration)).append("\n");
    sb.append("    naturalSearchConversionAttributionOption: ").append(toIndentedString(naturalSearchConversionAttributionOption)).append("\n");
    sb.append("    omnitureSettings: ").append(toIndentedString(omnitureSettings)).append("\n");
    sb.append("    subaccountId: ").append(toIndentedString(subaccountId)).append("\n");
    sb.append("    tagSettings: ").append(toIndentedString(tagSettings)).append("\n");
    sb.append("    thirdPartyAuthenticationTokens: ").append(toIndentedString(thirdPartyAuthenticationTokens)).append("\n");
    sb.append("    userDefinedVariableConfigurations: ").append(toIndentedString(userDefinedVariableConfigurations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("advertiserId");
    openapiFields.add("advertiserIdDimensionValue");
    openapiFields.add("analyticsDataSharingEnabled");
    openapiFields.add("customViewabilityMetric");
    openapiFields.add("exposureToConversionEnabled");
    openapiFields.add("firstDayOfWeek");
    openapiFields.add("id");
    openapiFields.add("idDimensionValue");
    openapiFields.add("inAppAttributionTrackingEnabled");
    openapiFields.add("kind");
    openapiFields.add("lookbackConfiguration");
    openapiFields.add("naturalSearchConversionAttributionOption");
    openapiFields.add("omnitureSettings");
    openapiFields.add("subaccountId");
    openapiFields.add("tagSettings");
    openapiFields.add("thirdPartyAuthenticationTokens");
    openapiFields.add("userDefinedVariableConfigurations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FloodlightConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FloodlightConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FloodlightConfiguration is not found in the empty JSON string", FloodlightConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FloodlightConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FloodlightConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if ((jsonObj.get("advertiserId") != null && !jsonObj.get("advertiserId").isJsonNull()) && !jsonObj.get("advertiserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advertiserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advertiserId").toString()));
      }
      // validate the optional field `advertiserIdDimensionValue`
      if (jsonObj.get("advertiserIdDimensionValue") != null && !jsonObj.get("advertiserIdDimensionValue").isJsonNull()) {
        DimensionValue.validateJsonElement(jsonObj.get("advertiserIdDimensionValue"));
      }
      // validate the optional field `customViewabilityMetric`
      if (jsonObj.get("customViewabilityMetric") != null && !jsonObj.get("customViewabilityMetric").isJsonNull()) {
        CustomViewabilityMetric.validateJsonElement(jsonObj.get("customViewabilityMetric"));
      }
      if ((jsonObj.get("firstDayOfWeek") != null && !jsonObj.get("firstDayOfWeek").isJsonNull()) && !jsonObj.get("firstDayOfWeek").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstDayOfWeek` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstDayOfWeek").toString()));
      }
      // validate the optional field `firstDayOfWeek`
      if (jsonObj.get("firstDayOfWeek") != null && !jsonObj.get("firstDayOfWeek").isJsonNull()) {
        FirstDayOfWeekEnum.validateJsonElement(jsonObj.get("firstDayOfWeek"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `idDimensionValue`
      if (jsonObj.get("idDimensionValue") != null && !jsonObj.get("idDimensionValue").isJsonNull()) {
        DimensionValue.validateJsonElement(jsonObj.get("idDimensionValue"));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `lookbackConfiguration`
      if (jsonObj.get("lookbackConfiguration") != null && !jsonObj.get("lookbackConfiguration").isJsonNull()) {
        LookbackConfiguration.validateJsonElement(jsonObj.get("lookbackConfiguration"));
      }
      if ((jsonObj.get("naturalSearchConversionAttributionOption") != null && !jsonObj.get("naturalSearchConversionAttributionOption").isJsonNull()) && !jsonObj.get("naturalSearchConversionAttributionOption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `naturalSearchConversionAttributionOption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("naturalSearchConversionAttributionOption").toString()));
      }
      // validate the optional field `naturalSearchConversionAttributionOption`
      if (jsonObj.get("naturalSearchConversionAttributionOption") != null && !jsonObj.get("naturalSearchConversionAttributionOption").isJsonNull()) {
        NaturalSearchConversionAttributionOptionEnum.validateJsonElement(jsonObj.get("naturalSearchConversionAttributionOption"));
      }
      // validate the optional field `omnitureSettings`
      if (jsonObj.get("omnitureSettings") != null && !jsonObj.get("omnitureSettings").isJsonNull()) {
        OmnitureSettings.validateJsonElement(jsonObj.get("omnitureSettings"));
      }
      if ((jsonObj.get("subaccountId") != null && !jsonObj.get("subaccountId").isJsonNull()) && !jsonObj.get("subaccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subaccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subaccountId").toString()));
      }
      // validate the optional field `tagSettings`
      if (jsonObj.get("tagSettings") != null && !jsonObj.get("tagSettings").isJsonNull()) {
        TagSettings.validateJsonElement(jsonObj.get("tagSettings"));
      }
      if (jsonObj.get("thirdPartyAuthenticationTokens") != null && !jsonObj.get("thirdPartyAuthenticationTokens").isJsonNull()) {
        JsonArray jsonArraythirdPartyAuthenticationTokens = jsonObj.getAsJsonArray("thirdPartyAuthenticationTokens");
        if (jsonArraythirdPartyAuthenticationTokens != null) {
          // ensure the json data is an array
          if (!jsonObj.get("thirdPartyAuthenticationTokens").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `thirdPartyAuthenticationTokens` to be an array in the JSON string but got `%s`", jsonObj.get("thirdPartyAuthenticationTokens").toString()));
          }

          // validate the optional field `thirdPartyAuthenticationTokens` (array)
          for (int i = 0; i < jsonArraythirdPartyAuthenticationTokens.size(); i++) {
            ThirdPartyAuthenticationToken.validateJsonElement(jsonArraythirdPartyAuthenticationTokens.get(i));
          };
        }
      }
      if (jsonObj.get("userDefinedVariableConfigurations") != null && !jsonObj.get("userDefinedVariableConfigurations").isJsonNull()) {
        JsonArray jsonArrayuserDefinedVariableConfigurations = jsonObj.getAsJsonArray("userDefinedVariableConfigurations");
        if (jsonArrayuserDefinedVariableConfigurations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("userDefinedVariableConfigurations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `userDefinedVariableConfigurations` to be an array in the JSON string but got `%s`", jsonObj.get("userDefinedVariableConfigurations").toString()));
          }

          // validate the optional field `userDefinedVariableConfigurations` (array)
          for (int i = 0; i < jsonArrayuserDefinedVariableConfigurations.size(); i++) {
            UserDefinedVariableConfiguration.validateJsonElement(jsonArrayuserDefinedVariableConfigurations.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FloodlightConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FloodlightConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FloodlightConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FloodlightConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<FloodlightConfiguration>() {
           @Override
           public void write(JsonWriter out, FloodlightConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FloodlightConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FloodlightConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FloodlightConfiguration
   * @throws IOException if the JSON string is invalid with respect to FloodlightConfiguration
   */
  public static FloodlightConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FloodlightConfiguration.class);
  }

  /**
   * Convert an instance of FloodlightConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

