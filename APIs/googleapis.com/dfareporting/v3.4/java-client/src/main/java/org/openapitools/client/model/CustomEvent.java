/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CustomEventClickAnnotation;
import org.openapitools.client.model.CustomEventImpressionAnnotation;
import org.openapitools.client.model.CustomEventInsert;
import org.openapitools.client.model.CustomVariable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Experimental feature (no support provided) A custom event represents a third party impression, a third party click, an annotation on a first party impression, or an annotation on a first party click.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:16.070314-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CustomEvent {
  public static final String SERIALIZED_NAME_ANNOTATE_CLICK_EVENT = "annotateClickEvent";
  @SerializedName(SERIALIZED_NAME_ANNOTATE_CLICK_EVENT)
  private CustomEventClickAnnotation annotateClickEvent;

  public static final String SERIALIZED_NAME_ANNOTATE_IMPRESSION_EVENT = "annotateImpressionEvent";
  @SerializedName(SERIALIZED_NAME_ANNOTATE_IMPRESSION_EVENT)
  private CustomEventImpressionAnnotation annotateImpressionEvent;

  public static final String SERIALIZED_NAME_CUSTOM_VARIABLES = "customVariables";
  @SerializedName(SERIALIZED_NAME_CUSTOM_VARIABLES)
  private List<CustomVariable> customVariables = new ArrayList<>();

  /**
   * The type of event. If INSERT, the fields in insertEvent need to be populated. If ANNOTATE, the fields in either annotateClickEvent or annotateImpressionEvent need to be populated.
   */
  @JsonAdapter(EventTypeEnum.Adapter.class)
  public enum EventTypeEnum {
    UNKNOWN("UNKNOWN"),
    
    INSERT("INSERT"),
    
    ANNOTATE("ANNOTATE");

    private String value;

    EventTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EventTypeEnum fromValue(String value) {
      for (EventTypeEnum b : EventTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EventTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EventTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EventTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EventTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EVENT_TYPE = "eventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private EventTypeEnum eventType;

  public static final String SERIALIZED_NAME_FLOODLIGHT_CONFIGURATION_ID = "floodlightConfigurationId";
  @SerializedName(SERIALIZED_NAME_FLOODLIGHT_CONFIGURATION_ID)
  private String floodlightConfigurationId;

  public static final String SERIALIZED_NAME_INSERT_EVENT = "insertEvent";
  @SerializedName(SERIALIZED_NAME_INSERT_EVENT)
  private CustomEventInsert insertEvent;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_ORDINAL = "ordinal";
  @SerializedName(SERIALIZED_NAME_ORDINAL)
  private String ordinal;

  public static final String SERIALIZED_NAME_TIMESTAMP_MICROS = "timestampMicros";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP_MICROS)
  private String timestampMicros;

  public CustomEvent() {
  }

  public CustomEvent annotateClickEvent(CustomEventClickAnnotation annotateClickEvent) {
    this.annotateClickEvent = annotateClickEvent;
    return this;
  }

  /**
   * Get annotateClickEvent
   * @return annotateClickEvent
   */
  @javax.annotation.Nullable
  public CustomEventClickAnnotation getAnnotateClickEvent() {
    return annotateClickEvent;
  }

  public void setAnnotateClickEvent(CustomEventClickAnnotation annotateClickEvent) {
    this.annotateClickEvent = annotateClickEvent;
  }


  public CustomEvent annotateImpressionEvent(CustomEventImpressionAnnotation annotateImpressionEvent) {
    this.annotateImpressionEvent = annotateImpressionEvent;
    return this;
  }

  /**
   * Get annotateImpressionEvent
   * @return annotateImpressionEvent
   */
  @javax.annotation.Nullable
  public CustomEventImpressionAnnotation getAnnotateImpressionEvent() {
    return annotateImpressionEvent;
  }

  public void setAnnotateImpressionEvent(CustomEventImpressionAnnotation annotateImpressionEvent) {
    this.annotateImpressionEvent = annotateImpressionEvent;
  }


  public CustomEvent customVariables(List<CustomVariable> customVariables) {
    this.customVariables = customVariables;
    return this;
  }

  public CustomEvent addCustomVariablesItem(CustomVariable customVariablesItem) {
    if (this.customVariables == null) {
      this.customVariables = new ArrayList<>();
    }
    this.customVariables.add(customVariablesItem);
    return this;
  }

  /**
   * Custom variables associated with the event.
   * @return customVariables
   */
  @javax.annotation.Nullable
  public List<CustomVariable> getCustomVariables() {
    return customVariables;
  }

  public void setCustomVariables(List<CustomVariable> customVariables) {
    this.customVariables = customVariables;
  }


  public CustomEvent eventType(EventTypeEnum eventType) {
    this.eventType = eventType;
    return this;
  }

  /**
   * The type of event. If INSERT, the fields in insertEvent need to be populated. If ANNOTATE, the fields in either annotateClickEvent or annotateImpressionEvent need to be populated.
   * @return eventType
   */
  @javax.annotation.Nullable
  public EventTypeEnum getEventType() {
    return eventType;
  }

  public void setEventType(EventTypeEnum eventType) {
    this.eventType = eventType;
  }


  public CustomEvent floodlightConfigurationId(String floodlightConfigurationId) {
    this.floodlightConfigurationId = floodlightConfigurationId;
    return this;
  }

  /**
   * Floodlight configuration ID of the advertiser the event is linked to. This is a required field.
   * @return floodlightConfigurationId
   */
  @javax.annotation.Nullable
  public String getFloodlightConfigurationId() {
    return floodlightConfigurationId;
  }

  public void setFloodlightConfigurationId(String floodlightConfigurationId) {
    this.floodlightConfigurationId = floodlightConfigurationId;
  }


  public CustomEvent insertEvent(CustomEventInsert insertEvent) {
    this.insertEvent = insertEvent;
    return this;
  }

  /**
   * Get insertEvent
   * @return insertEvent
   */
  @javax.annotation.Nullable
  public CustomEventInsert getInsertEvent() {
    return insertEvent;
  }

  public void setInsertEvent(CustomEventInsert insertEvent) {
    this.insertEvent = insertEvent;
  }


  public CustomEvent kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string \&quot;dfareporting#customEvent\&quot;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public CustomEvent ordinal(String ordinal) {
    this.ordinal = ordinal;
    return this;
  }

  /**
   * The ordinal of this custom event. This is a required field.
   * @return ordinal
   */
  @javax.annotation.Nullable
  public String getOrdinal() {
    return ordinal;
  }

  public void setOrdinal(String ordinal) {
    this.ordinal = ordinal;
  }


  public CustomEvent timestampMicros(String timestampMicros) {
    this.timestampMicros = timestampMicros;
    return this;
  }

  /**
   * The timestamp of this custom event, in Unix epoch micros. This is a required field.
   * @return timestampMicros
   */
  @javax.annotation.Nullable
  public String getTimestampMicros() {
    return timestampMicros;
  }

  public void setTimestampMicros(String timestampMicros) {
    this.timestampMicros = timestampMicros;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomEvent customEvent = (CustomEvent) o;
    return Objects.equals(this.annotateClickEvent, customEvent.annotateClickEvent) &&
        Objects.equals(this.annotateImpressionEvent, customEvent.annotateImpressionEvent) &&
        Objects.equals(this.customVariables, customEvent.customVariables) &&
        Objects.equals(this.eventType, customEvent.eventType) &&
        Objects.equals(this.floodlightConfigurationId, customEvent.floodlightConfigurationId) &&
        Objects.equals(this.insertEvent, customEvent.insertEvent) &&
        Objects.equals(this.kind, customEvent.kind) &&
        Objects.equals(this.ordinal, customEvent.ordinal) &&
        Objects.equals(this.timestampMicros, customEvent.timestampMicros);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotateClickEvent, annotateImpressionEvent, customVariables, eventType, floodlightConfigurationId, insertEvent, kind, ordinal, timestampMicros);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomEvent {\n");
    sb.append("    annotateClickEvent: ").append(toIndentedString(annotateClickEvent)).append("\n");
    sb.append("    annotateImpressionEvent: ").append(toIndentedString(annotateImpressionEvent)).append("\n");
    sb.append("    customVariables: ").append(toIndentedString(customVariables)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    floodlightConfigurationId: ").append(toIndentedString(floodlightConfigurationId)).append("\n");
    sb.append("    insertEvent: ").append(toIndentedString(insertEvent)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    ordinal: ").append(toIndentedString(ordinal)).append("\n");
    sb.append("    timestampMicros: ").append(toIndentedString(timestampMicros)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annotateClickEvent");
    openapiFields.add("annotateImpressionEvent");
    openapiFields.add("customVariables");
    openapiFields.add("eventType");
    openapiFields.add("floodlightConfigurationId");
    openapiFields.add("insertEvent");
    openapiFields.add("kind");
    openapiFields.add("ordinal");
    openapiFields.add("timestampMicros");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomEvent is not found in the empty JSON string", CustomEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `annotateClickEvent`
      if (jsonObj.get("annotateClickEvent") != null && !jsonObj.get("annotateClickEvent").isJsonNull()) {
        CustomEventClickAnnotation.validateJsonElement(jsonObj.get("annotateClickEvent"));
      }
      // validate the optional field `annotateImpressionEvent`
      if (jsonObj.get("annotateImpressionEvent") != null && !jsonObj.get("annotateImpressionEvent").isJsonNull()) {
        CustomEventImpressionAnnotation.validateJsonElement(jsonObj.get("annotateImpressionEvent"));
      }
      if (jsonObj.get("customVariables") != null && !jsonObj.get("customVariables").isJsonNull()) {
        JsonArray jsonArraycustomVariables = jsonObj.getAsJsonArray("customVariables");
        if (jsonArraycustomVariables != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customVariables").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customVariables` to be an array in the JSON string but got `%s`", jsonObj.get("customVariables").toString()));
          }

          // validate the optional field `customVariables` (array)
          for (int i = 0; i < jsonArraycustomVariables.size(); i++) {
            CustomVariable.validateJsonElement(jsonArraycustomVariables.get(i));
          };
        }
      }
      if ((jsonObj.get("eventType") != null && !jsonObj.get("eventType").isJsonNull()) && !jsonObj.get("eventType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventType").toString()));
      }
      // validate the optional field `eventType`
      if (jsonObj.get("eventType") != null && !jsonObj.get("eventType").isJsonNull()) {
        EventTypeEnum.validateJsonElement(jsonObj.get("eventType"));
      }
      if ((jsonObj.get("floodlightConfigurationId") != null && !jsonObj.get("floodlightConfigurationId").isJsonNull()) && !jsonObj.get("floodlightConfigurationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `floodlightConfigurationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("floodlightConfigurationId").toString()));
      }
      // validate the optional field `insertEvent`
      if (jsonObj.get("insertEvent") != null && !jsonObj.get("insertEvent").isJsonNull()) {
        CustomEventInsert.validateJsonElement(jsonObj.get("insertEvent"));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("ordinal") != null && !jsonObj.get("ordinal").isJsonNull()) && !jsonObj.get("ordinal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ordinal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ordinal").toString()));
      }
      if ((jsonObj.get("timestampMicros") != null && !jsonObj.get("timestampMicros").isJsonNull()) && !jsonObj.get("timestampMicros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timestampMicros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timestampMicros").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomEvent>() {
           @Override
           public void write(JsonWriter out, CustomEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomEvent
   * @throws IOException if the JSON string is invalid with respect to CustomEvent
   */
  public static CustomEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomEvent.class);
  }

  /**
   * Convert an instance of CustomEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

