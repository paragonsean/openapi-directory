/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the report.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:16.070314-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReportFloodlightCriteriaReportProperties {
  public static final String SERIALIZED_NAME_INCLUDE_ATTRIBUTED_I_P_CONVERSIONS = "includeAttributedIPConversions";
  @SerializedName(SERIALIZED_NAME_INCLUDE_ATTRIBUTED_I_P_CONVERSIONS)
  private Boolean includeAttributedIPConversions;

  public static final String SERIALIZED_NAME_INCLUDE_UNATTRIBUTED_COOKIE_CONVERSIONS = "includeUnattributedCookieConversions";
  @SerializedName(SERIALIZED_NAME_INCLUDE_UNATTRIBUTED_COOKIE_CONVERSIONS)
  private Boolean includeUnattributedCookieConversions;

  public static final String SERIALIZED_NAME_INCLUDE_UNATTRIBUTED_I_P_CONVERSIONS = "includeUnattributedIPConversions";
  @SerializedName(SERIALIZED_NAME_INCLUDE_UNATTRIBUTED_I_P_CONVERSIONS)
  private Boolean includeUnattributedIPConversions;

  public ReportFloodlightCriteriaReportProperties() {
  }

  public ReportFloodlightCriteriaReportProperties includeAttributedIPConversions(Boolean includeAttributedIPConversions) {
    this.includeAttributedIPConversions = includeAttributedIPConversions;
    return this;
  }

  /**
   * Include conversions that have no cookie, but do have an exposure path.
   * @return includeAttributedIPConversions
   */
  @javax.annotation.Nullable
  public Boolean getIncludeAttributedIPConversions() {
    return includeAttributedIPConversions;
  }

  public void setIncludeAttributedIPConversions(Boolean includeAttributedIPConversions) {
    this.includeAttributedIPConversions = includeAttributedIPConversions;
  }


  public ReportFloodlightCriteriaReportProperties includeUnattributedCookieConversions(Boolean includeUnattributedCookieConversions) {
    this.includeUnattributedCookieConversions = includeUnattributedCookieConversions;
    return this;
  }

  /**
   * Include conversions of users with a DoubleClick cookie but without an exposure. That means the user did not click or see an ad from the advertiser within the Floodlight group, or that the interaction happened outside the lookback window.
   * @return includeUnattributedCookieConversions
   */
  @javax.annotation.Nullable
  public Boolean getIncludeUnattributedCookieConversions() {
    return includeUnattributedCookieConversions;
  }

  public void setIncludeUnattributedCookieConversions(Boolean includeUnattributedCookieConversions) {
    this.includeUnattributedCookieConversions = includeUnattributedCookieConversions;
  }


  public ReportFloodlightCriteriaReportProperties includeUnattributedIPConversions(Boolean includeUnattributedIPConversions) {
    this.includeUnattributedIPConversions = includeUnattributedIPConversions;
    return this;
  }

  /**
   * Include conversions that have no associated cookies and no exposures. Itâ€™s therefore impossible to know how the user was exposed to your ads during the lookback window prior to a conversion.
   * @return includeUnattributedIPConversions
   */
  @javax.annotation.Nullable
  public Boolean getIncludeUnattributedIPConversions() {
    return includeUnattributedIPConversions;
  }

  public void setIncludeUnattributedIPConversions(Boolean includeUnattributedIPConversions) {
    this.includeUnattributedIPConversions = includeUnattributedIPConversions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportFloodlightCriteriaReportProperties reportFloodlightCriteriaReportProperties = (ReportFloodlightCriteriaReportProperties) o;
    return Objects.equals(this.includeAttributedIPConversions, reportFloodlightCriteriaReportProperties.includeAttributedIPConversions) &&
        Objects.equals(this.includeUnattributedCookieConversions, reportFloodlightCriteriaReportProperties.includeUnattributedCookieConversions) &&
        Objects.equals(this.includeUnattributedIPConversions, reportFloodlightCriteriaReportProperties.includeUnattributedIPConversions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(includeAttributedIPConversions, includeUnattributedCookieConversions, includeUnattributedIPConversions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportFloodlightCriteriaReportProperties {\n");
    sb.append("    includeAttributedIPConversions: ").append(toIndentedString(includeAttributedIPConversions)).append("\n");
    sb.append("    includeUnattributedCookieConversions: ").append(toIndentedString(includeUnattributedCookieConversions)).append("\n");
    sb.append("    includeUnattributedIPConversions: ").append(toIndentedString(includeUnattributedIPConversions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("includeAttributedIPConversions");
    openapiFields.add("includeUnattributedCookieConversions");
    openapiFields.add("includeUnattributedIPConversions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportFloodlightCriteriaReportProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportFloodlightCriteriaReportProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportFloodlightCriteriaReportProperties is not found in the empty JSON string", ReportFloodlightCriteriaReportProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportFloodlightCriteriaReportProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportFloodlightCriteriaReportProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportFloodlightCriteriaReportProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportFloodlightCriteriaReportProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportFloodlightCriteriaReportProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportFloodlightCriteriaReportProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportFloodlightCriteriaReportProperties>() {
           @Override
           public void write(JsonWriter out, ReportFloodlightCriteriaReportProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportFloodlightCriteriaReportProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportFloodlightCriteriaReportProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportFloodlightCriteriaReportProperties
   * @throws IOException if the JSON string is invalid with respect to ReportFloodlightCriteriaReportProperties
   */
  public static ReportFloodlightCriteriaReportProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportFloodlightCriteriaReportProperties.class);
  }

  /**
   * Convert an instance of ReportFloodlightCriteriaReportProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

