/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ReportCriteria;
import org.openapitools.client.model.ReportCrossDimensionReachCriteria;
import org.openapitools.client.model.ReportDelivery;
import org.openapitools.client.model.ReportFloodlightCriteria;
import org.openapitools.client.model.ReportPathAttributionCriteria;
import org.openapitools.client.model.ReportPathCriteria;
import org.openapitools.client.model.ReportPathToConversionCriteria;
import org.openapitools.client.model.ReportReachCriteria;
import org.openapitools.client.model.ReportSchedule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a Report resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:16.070314-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Report {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_CRITERIA = "criteria";
  @SerializedName(SERIALIZED_NAME_CRITERIA)
  private ReportCriteria criteria;

  public static final String SERIALIZED_NAME_CROSS_DIMENSION_REACH_CRITERIA = "crossDimensionReachCriteria";
  @SerializedName(SERIALIZED_NAME_CROSS_DIMENSION_REACH_CRITERIA)
  private ReportCrossDimensionReachCriteria crossDimensionReachCriteria;

  public static final String SERIALIZED_NAME_DELIVERY = "delivery";
  @SerializedName(SERIALIZED_NAME_DELIVERY)
  private ReportDelivery delivery;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_FILE_NAME = "fileName";
  @SerializedName(SERIALIZED_NAME_FILE_NAME)
  private String fileName;

  public static final String SERIALIZED_NAME_FLOODLIGHT_CRITERIA = "floodlightCriteria";
  @SerializedName(SERIALIZED_NAME_FLOODLIGHT_CRITERIA)
  private ReportFloodlightCriteria floodlightCriteria;

  /**
   * The output format of the report. If not specified, default format is \&quot;CSV\&quot;. Note that the actual format in the completed report file might differ if for instance the report&#39;s size exceeds the format&#39;s capabilities. \&quot;CSV\&quot; will then be the fallback format.
   */
  @JsonAdapter(FormatEnum.Adapter.class)
  public enum FormatEnum {
    CSV("CSV"),
    
    EXCEL("EXCEL");

    private String value;

    FormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FormatEnum fromValue(String value) {
      for (FormatEnum b : FormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private FormatEnum format;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_TIME = "lastModifiedTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_TIME)
  private String lastModifiedTime;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OWNER_PROFILE_ID = "ownerProfileId";
  @SerializedName(SERIALIZED_NAME_OWNER_PROFILE_ID)
  private String ownerProfileId;

  public static final String SERIALIZED_NAME_PATH_ATTRIBUTION_CRITERIA = "pathAttributionCriteria";
  @SerializedName(SERIALIZED_NAME_PATH_ATTRIBUTION_CRITERIA)
  private ReportPathAttributionCriteria pathAttributionCriteria;

  public static final String SERIALIZED_NAME_PATH_CRITERIA = "pathCriteria";
  @SerializedName(SERIALIZED_NAME_PATH_CRITERIA)
  private ReportPathCriteria pathCriteria;

  public static final String SERIALIZED_NAME_PATH_TO_CONVERSION_CRITERIA = "pathToConversionCriteria";
  @SerializedName(SERIALIZED_NAME_PATH_TO_CONVERSION_CRITERIA)
  private ReportPathToConversionCriteria pathToConversionCriteria;

  public static final String SERIALIZED_NAME_REACH_CRITERIA = "reachCriteria";
  @SerializedName(SERIALIZED_NAME_REACH_CRITERIA)
  private ReportReachCriteria reachCriteria;

  public static final String SERIALIZED_NAME_SCHEDULE = "schedule";
  @SerializedName(SERIALIZED_NAME_SCHEDULE)
  private ReportSchedule schedule;

  public static final String SERIALIZED_NAME_SUB_ACCOUNT_ID = "subAccountId";
  @SerializedName(SERIALIZED_NAME_SUB_ACCOUNT_ID)
  private String subAccountId;

  /**
   * The type of the report.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    STANDARD("STANDARD"),
    
    REACH("REACH"),
    
    PATH_TO_CONVERSION("PATH_TO_CONVERSION"),
    
    CROSS_DIMENSION_REACH("CROSS_DIMENSION_REACH"),
    
    FLOODLIGHT("FLOODLIGHT"),
    
    PATH("PATH"),
    
    PATH_ATTRIBUTION("PATH_ATTRIBUTION");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public Report() {
  }

  public Report accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * The account ID to which this report belongs.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public Report criteria(ReportCriteria criteria) {
    this.criteria = criteria;
    return this;
  }

  /**
   * Get criteria
   * @return criteria
   */
  @javax.annotation.Nullable
  public ReportCriteria getCriteria() {
    return criteria;
  }

  public void setCriteria(ReportCriteria criteria) {
    this.criteria = criteria;
  }


  public Report crossDimensionReachCriteria(ReportCrossDimensionReachCriteria crossDimensionReachCriteria) {
    this.crossDimensionReachCriteria = crossDimensionReachCriteria;
    return this;
  }

  /**
   * Get crossDimensionReachCriteria
   * @return crossDimensionReachCriteria
   */
  @javax.annotation.Nullable
  public ReportCrossDimensionReachCriteria getCrossDimensionReachCriteria() {
    return crossDimensionReachCriteria;
  }

  public void setCrossDimensionReachCriteria(ReportCrossDimensionReachCriteria crossDimensionReachCriteria) {
    this.crossDimensionReachCriteria = crossDimensionReachCriteria;
  }


  public Report delivery(ReportDelivery delivery) {
    this.delivery = delivery;
    return this;
  }

  /**
   * Get delivery
   * @return delivery
   */
  @javax.annotation.Nullable
  public ReportDelivery getDelivery() {
    return delivery;
  }

  public void setDelivery(ReportDelivery delivery) {
    this.delivery = delivery;
  }


  public Report etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * The eTag of this response for caching purposes.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public Report fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

  /**
   * The filename used when generating report files for this report.
   * @return fileName
   */
  @javax.annotation.Nullable
  public String getFileName() {
    return fileName;
  }

  public void setFileName(String fileName) {
    this.fileName = fileName;
  }


  public Report floodlightCriteria(ReportFloodlightCriteria floodlightCriteria) {
    this.floodlightCriteria = floodlightCriteria;
    return this;
  }

  /**
   * Get floodlightCriteria
   * @return floodlightCriteria
   */
  @javax.annotation.Nullable
  public ReportFloodlightCriteria getFloodlightCriteria() {
    return floodlightCriteria;
  }

  public void setFloodlightCriteria(ReportFloodlightCriteria floodlightCriteria) {
    this.floodlightCriteria = floodlightCriteria;
  }


  public Report format(FormatEnum format) {
    this.format = format;
    return this;
  }

  /**
   * The output format of the report. If not specified, default format is \&quot;CSV\&quot;. Note that the actual format in the completed report file might differ if for instance the report&#39;s size exceeds the format&#39;s capabilities. \&quot;CSV\&quot; will then be the fallback format.
   * @return format
   */
  @javax.annotation.Nullable
  public FormatEnum getFormat() {
    return format;
  }

  public void setFormat(FormatEnum format) {
    this.format = format;
  }


  public Report id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The unique ID identifying this report resource.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Report kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * The kind of resource this is, in this case dfareporting#report.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Report lastModifiedTime(String lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
    return this;
  }

  /**
   * The timestamp (in milliseconds since epoch) of when this report was last modified.
   * @return lastModifiedTime
   */
  @javax.annotation.Nullable
  public String getLastModifiedTime() {
    return lastModifiedTime;
  }

  public void setLastModifiedTime(String lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
  }


  public Report name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the report.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Report ownerProfileId(String ownerProfileId) {
    this.ownerProfileId = ownerProfileId;
    return this;
  }

  /**
   * The user profile id of the owner of this report.
   * @return ownerProfileId
   */
  @javax.annotation.Nullable
  public String getOwnerProfileId() {
    return ownerProfileId;
  }

  public void setOwnerProfileId(String ownerProfileId) {
    this.ownerProfileId = ownerProfileId;
  }


  public Report pathAttributionCriteria(ReportPathAttributionCriteria pathAttributionCriteria) {
    this.pathAttributionCriteria = pathAttributionCriteria;
    return this;
  }

  /**
   * Get pathAttributionCriteria
   * @return pathAttributionCriteria
   */
  @javax.annotation.Nullable
  public ReportPathAttributionCriteria getPathAttributionCriteria() {
    return pathAttributionCriteria;
  }

  public void setPathAttributionCriteria(ReportPathAttributionCriteria pathAttributionCriteria) {
    this.pathAttributionCriteria = pathAttributionCriteria;
  }


  public Report pathCriteria(ReportPathCriteria pathCriteria) {
    this.pathCriteria = pathCriteria;
    return this;
  }

  /**
   * Get pathCriteria
   * @return pathCriteria
   */
  @javax.annotation.Nullable
  public ReportPathCriteria getPathCriteria() {
    return pathCriteria;
  }

  public void setPathCriteria(ReportPathCriteria pathCriteria) {
    this.pathCriteria = pathCriteria;
  }


  public Report pathToConversionCriteria(ReportPathToConversionCriteria pathToConversionCriteria) {
    this.pathToConversionCriteria = pathToConversionCriteria;
    return this;
  }

  /**
   * Get pathToConversionCriteria
   * @return pathToConversionCriteria
   */
  @javax.annotation.Nullable
  public ReportPathToConversionCriteria getPathToConversionCriteria() {
    return pathToConversionCriteria;
  }

  public void setPathToConversionCriteria(ReportPathToConversionCriteria pathToConversionCriteria) {
    this.pathToConversionCriteria = pathToConversionCriteria;
  }


  public Report reachCriteria(ReportReachCriteria reachCriteria) {
    this.reachCriteria = reachCriteria;
    return this;
  }

  /**
   * Get reachCriteria
   * @return reachCriteria
   */
  @javax.annotation.Nullable
  public ReportReachCriteria getReachCriteria() {
    return reachCriteria;
  }

  public void setReachCriteria(ReportReachCriteria reachCriteria) {
    this.reachCriteria = reachCriteria;
  }


  public Report schedule(ReportSchedule schedule) {
    this.schedule = schedule;
    return this;
  }

  /**
   * Get schedule
   * @return schedule
   */
  @javax.annotation.Nullable
  public ReportSchedule getSchedule() {
    return schedule;
  }

  public void setSchedule(ReportSchedule schedule) {
    this.schedule = schedule;
  }


  public Report subAccountId(String subAccountId) {
    this.subAccountId = subAccountId;
    return this;
  }

  /**
   * The subaccount ID to which this report belongs if applicable.
   * @return subAccountId
   */
  @javax.annotation.Nullable
  public String getSubAccountId() {
    return subAccountId;
  }

  public void setSubAccountId(String subAccountId) {
    this.subAccountId = subAccountId;
  }


  public Report type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the report.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Report report = (Report) o;
    return Objects.equals(this.accountId, report.accountId) &&
        Objects.equals(this.criteria, report.criteria) &&
        Objects.equals(this.crossDimensionReachCriteria, report.crossDimensionReachCriteria) &&
        Objects.equals(this.delivery, report.delivery) &&
        Objects.equals(this.etag, report.etag) &&
        Objects.equals(this.fileName, report.fileName) &&
        Objects.equals(this.floodlightCriteria, report.floodlightCriteria) &&
        Objects.equals(this.format, report.format) &&
        Objects.equals(this.id, report.id) &&
        Objects.equals(this.kind, report.kind) &&
        Objects.equals(this.lastModifiedTime, report.lastModifiedTime) &&
        Objects.equals(this.name, report.name) &&
        Objects.equals(this.ownerProfileId, report.ownerProfileId) &&
        Objects.equals(this.pathAttributionCriteria, report.pathAttributionCriteria) &&
        Objects.equals(this.pathCriteria, report.pathCriteria) &&
        Objects.equals(this.pathToConversionCriteria, report.pathToConversionCriteria) &&
        Objects.equals(this.reachCriteria, report.reachCriteria) &&
        Objects.equals(this.schedule, report.schedule) &&
        Objects.equals(this.subAccountId, report.subAccountId) &&
        Objects.equals(this.type, report.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, criteria, crossDimensionReachCriteria, delivery, etag, fileName, floodlightCriteria, format, id, kind, lastModifiedTime, name, ownerProfileId, pathAttributionCriteria, pathCriteria, pathToConversionCriteria, reachCriteria, schedule, subAccountId, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Report {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    criteria: ").append(toIndentedString(criteria)).append("\n");
    sb.append("    crossDimensionReachCriteria: ").append(toIndentedString(crossDimensionReachCriteria)).append("\n");
    sb.append("    delivery: ").append(toIndentedString(delivery)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    floodlightCriteria: ").append(toIndentedString(floodlightCriteria)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    lastModifiedTime: ").append(toIndentedString(lastModifiedTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ownerProfileId: ").append(toIndentedString(ownerProfileId)).append("\n");
    sb.append("    pathAttributionCriteria: ").append(toIndentedString(pathAttributionCriteria)).append("\n");
    sb.append("    pathCriteria: ").append(toIndentedString(pathCriteria)).append("\n");
    sb.append("    pathToConversionCriteria: ").append(toIndentedString(pathToConversionCriteria)).append("\n");
    sb.append("    reachCriteria: ").append(toIndentedString(reachCriteria)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    subAccountId: ").append(toIndentedString(subAccountId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("criteria");
    openapiFields.add("crossDimensionReachCriteria");
    openapiFields.add("delivery");
    openapiFields.add("etag");
    openapiFields.add("fileName");
    openapiFields.add("floodlightCriteria");
    openapiFields.add("format");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("lastModifiedTime");
    openapiFields.add("name");
    openapiFields.add("ownerProfileId");
    openapiFields.add("pathAttributionCriteria");
    openapiFields.add("pathCriteria");
    openapiFields.add("pathToConversionCriteria");
    openapiFields.add("reachCriteria");
    openapiFields.add("schedule");
    openapiFields.add("subAccountId");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Report
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Report.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Report is not found in the empty JSON string", Report.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Report.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Report` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      // validate the optional field `criteria`
      if (jsonObj.get("criteria") != null && !jsonObj.get("criteria").isJsonNull()) {
        ReportCriteria.validateJsonElement(jsonObj.get("criteria"));
      }
      // validate the optional field `crossDimensionReachCriteria`
      if (jsonObj.get("crossDimensionReachCriteria") != null && !jsonObj.get("crossDimensionReachCriteria").isJsonNull()) {
        ReportCrossDimensionReachCriteria.validateJsonElement(jsonObj.get("crossDimensionReachCriteria"));
      }
      // validate the optional field `delivery`
      if (jsonObj.get("delivery") != null && !jsonObj.get("delivery").isJsonNull()) {
        ReportDelivery.validateJsonElement(jsonObj.get("delivery"));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("fileName") != null && !jsonObj.get("fileName").isJsonNull()) && !jsonObj.get("fileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileName").toString()));
      }
      // validate the optional field `floodlightCriteria`
      if (jsonObj.get("floodlightCriteria") != null && !jsonObj.get("floodlightCriteria").isJsonNull()) {
        ReportFloodlightCriteria.validateJsonElement(jsonObj.get("floodlightCriteria"));
      }
      if ((jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) && !jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      // validate the optional field `format`
      if (jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) {
        FormatEnum.validateJsonElement(jsonObj.get("format"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("lastModifiedTime") != null && !jsonObj.get("lastModifiedTime").isJsonNull()) && !jsonObj.get("lastModifiedTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastModifiedTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastModifiedTime").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("ownerProfileId") != null && !jsonObj.get("ownerProfileId").isJsonNull()) && !jsonObj.get("ownerProfileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerProfileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerProfileId").toString()));
      }
      // validate the optional field `pathAttributionCriteria`
      if (jsonObj.get("pathAttributionCriteria") != null && !jsonObj.get("pathAttributionCriteria").isJsonNull()) {
        ReportPathAttributionCriteria.validateJsonElement(jsonObj.get("pathAttributionCriteria"));
      }
      // validate the optional field `pathCriteria`
      if (jsonObj.get("pathCriteria") != null && !jsonObj.get("pathCriteria").isJsonNull()) {
        ReportPathCriteria.validateJsonElement(jsonObj.get("pathCriteria"));
      }
      // validate the optional field `pathToConversionCriteria`
      if (jsonObj.get("pathToConversionCriteria") != null && !jsonObj.get("pathToConversionCriteria").isJsonNull()) {
        ReportPathToConversionCriteria.validateJsonElement(jsonObj.get("pathToConversionCriteria"));
      }
      // validate the optional field `reachCriteria`
      if (jsonObj.get("reachCriteria") != null && !jsonObj.get("reachCriteria").isJsonNull()) {
        ReportReachCriteria.validateJsonElement(jsonObj.get("reachCriteria"));
      }
      // validate the optional field `schedule`
      if (jsonObj.get("schedule") != null && !jsonObj.get("schedule").isJsonNull()) {
        ReportSchedule.validateJsonElement(jsonObj.get("schedule"));
      }
      if ((jsonObj.get("subAccountId") != null && !jsonObj.get("subAccountId").isJsonNull()) && !jsonObj.get("subAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subAccountId").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Report.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Report' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Report> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Report.class));

       return (TypeAdapter<T>) new TypeAdapter<Report>() {
           @Override
           public void write(JsonWriter out, Report value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Report read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Report given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Report
   * @throws IOException if the JSON string is invalid with respect to Report
   */
  public static Report fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Report.class);
  }

  /**
   * Convert an instance of Report to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

