/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.City;
import org.openapitools.client.model.Country;
import org.openapitools.client.model.Metro;
import org.openapitools.client.model.PostalCode;
import org.openapitools.client.model.Region;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Geographical Targeting.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:16.070314-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GeoTargeting {
  public static final String SERIALIZED_NAME_CITIES = "cities";
  @SerializedName(SERIALIZED_NAME_CITIES)
  private List<City> cities = new ArrayList<>();

  public static final String SERIALIZED_NAME_COUNTRIES = "countries";
  @SerializedName(SERIALIZED_NAME_COUNTRIES)
  private List<Country> countries = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXCLUDE_COUNTRIES = "excludeCountries";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_COUNTRIES)
  private Boolean excludeCountries;

  public static final String SERIALIZED_NAME_METROS = "metros";
  @SerializedName(SERIALIZED_NAME_METROS)
  private List<Metro> metros = new ArrayList<>();

  public static final String SERIALIZED_NAME_POSTAL_CODES = "postalCodes";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODES)
  private List<PostalCode> postalCodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_REGIONS = "regions";
  @SerializedName(SERIALIZED_NAME_REGIONS)
  private List<Region> regions = new ArrayList<>();

  public GeoTargeting() {
  }

  public GeoTargeting cities(List<City> cities) {
    this.cities = cities;
    return this;
  }

  public GeoTargeting addCitiesItem(City citiesItem) {
    if (this.cities == null) {
      this.cities = new ArrayList<>();
    }
    this.cities.add(citiesItem);
    return this;
  }

  /**
   * Cities to be targeted. For each city only dartId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting a city, do not target or exclude the country of the city, and do not target the metro or region of the city.
   * @return cities
   */
  @javax.annotation.Nullable
  public List<City> getCities() {
    return cities;
  }

  public void setCities(List<City> cities) {
    this.cities = cities;
  }


  public GeoTargeting countries(List<Country> countries) {
    this.countries = countries;
    return this;
  }

  public GeoTargeting addCountriesItem(Country countriesItem) {
    if (this.countries == null) {
      this.countries = new ArrayList<>();
    }
    this.countries.add(countriesItem);
    return this;
  }

  /**
   * Countries to be targeted or excluded from targeting, depending on the setting of the excludeCountries field. For each country only dartId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting or excluding a country, do not target regions, cities, metros, or postal codes in the same country.
   * @return countries
   */
  @javax.annotation.Nullable
  public List<Country> getCountries() {
    return countries;
  }

  public void setCountries(List<Country> countries) {
    this.countries = countries;
  }


  public GeoTargeting excludeCountries(Boolean excludeCountries) {
    this.excludeCountries = excludeCountries;
    return this;
  }

  /**
   * Whether or not to exclude the countries in the countries field from targeting. If false, the countries field refers to countries which will be targeted by the ad.
   * @return excludeCountries
   */
  @javax.annotation.Nullable
  public Boolean getExcludeCountries() {
    return excludeCountries;
  }

  public void setExcludeCountries(Boolean excludeCountries) {
    this.excludeCountries = excludeCountries;
  }


  public GeoTargeting metros(List<Metro> metros) {
    this.metros = metros;
    return this;
  }

  public GeoTargeting addMetrosItem(Metro metrosItem) {
    if (this.metros == null) {
      this.metros = new ArrayList<>();
    }
    this.metros.add(metrosItem);
    return this;
  }

  /**
   * Metros to be targeted. For each metro only dmaId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting a metro, do not target or exclude the country of the metro.
   * @return metros
   */
  @javax.annotation.Nullable
  public List<Metro> getMetros() {
    return metros;
  }

  public void setMetros(List<Metro> metros) {
    this.metros = metros;
  }


  public GeoTargeting postalCodes(List<PostalCode> postalCodes) {
    this.postalCodes = postalCodes;
    return this;
  }

  public GeoTargeting addPostalCodesItem(PostalCode postalCodesItem) {
    if (this.postalCodes == null) {
      this.postalCodes = new ArrayList<>();
    }
    this.postalCodes.add(postalCodesItem);
    return this;
  }

  /**
   * Postal codes to be targeted. For each postal code only id is required. The other fields are populated automatically when the ad is inserted or updated. If targeting a postal code, do not target or exclude the country of the postal code.
   * @return postalCodes
   */
  @javax.annotation.Nullable
  public List<PostalCode> getPostalCodes() {
    return postalCodes;
  }

  public void setPostalCodes(List<PostalCode> postalCodes) {
    this.postalCodes = postalCodes;
  }


  public GeoTargeting regions(List<Region> regions) {
    this.regions = regions;
    return this;
  }

  public GeoTargeting addRegionsItem(Region regionsItem) {
    if (this.regions == null) {
      this.regions = new ArrayList<>();
    }
    this.regions.add(regionsItem);
    return this;
  }

  /**
   * Regions to be targeted. For each region only dartId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting a region, do not target or exclude the country of the region.
   * @return regions
   */
  @javax.annotation.Nullable
  public List<Region> getRegions() {
    return regions;
  }

  public void setRegions(List<Region> regions) {
    this.regions = regions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GeoTargeting geoTargeting = (GeoTargeting) o;
    return Objects.equals(this.cities, geoTargeting.cities) &&
        Objects.equals(this.countries, geoTargeting.countries) &&
        Objects.equals(this.excludeCountries, geoTargeting.excludeCountries) &&
        Objects.equals(this.metros, geoTargeting.metros) &&
        Objects.equals(this.postalCodes, geoTargeting.postalCodes) &&
        Objects.equals(this.regions, geoTargeting.regions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cities, countries, excludeCountries, metros, postalCodes, regions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GeoTargeting {\n");
    sb.append("    cities: ").append(toIndentedString(cities)).append("\n");
    sb.append("    countries: ").append(toIndentedString(countries)).append("\n");
    sb.append("    excludeCountries: ").append(toIndentedString(excludeCountries)).append("\n");
    sb.append("    metros: ").append(toIndentedString(metros)).append("\n");
    sb.append("    postalCodes: ").append(toIndentedString(postalCodes)).append("\n");
    sb.append("    regions: ").append(toIndentedString(regions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cities");
    openapiFields.add("countries");
    openapiFields.add("excludeCountries");
    openapiFields.add("metros");
    openapiFields.add("postalCodes");
    openapiFields.add("regions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GeoTargeting
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GeoTargeting.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GeoTargeting is not found in the empty JSON string", GeoTargeting.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GeoTargeting.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GeoTargeting` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("cities") != null && !jsonObj.get("cities").isJsonNull()) {
        JsonArray jsonArraycities = jsonObj.getAsJsonArray("cities");
        if (jsonArraycities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cities` to be an array in the JSON string but got `%s`", jsonObj.get("cities").toString()));
          }

          // validate the optional field `cities` (array)
          for (int i = 0; i < jsonArraycities.size(); i++) {
            City.validateJsonElement(jsonArraycities.get(i));
          };
        }
      }
      if (jsonObj.get("countries") != null && !jsonObj.get("countries").isJsonNull()) {
        JsonArray jsonArraycountries = jsonObj.getAsJsonArray("countries");
        if (jsonArraycountries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("countries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `countries` to be an array in the JSON string but got `%s`", jsonObj.get("countries").toString()));
          }

          // validate the optional field `countries` (array)
          for (int i = 0; i < jsonArraycountries.size(); i++) {
            Country.validateJsonElement(jsonArraycountries.get(i));
          };
        }
      }
      if (jsonObj.get("metros") != null && !jsonObj.get("metros").isJsonNull()) {
        JsonArray jsonArraymetros = jsonObj.getAsJsonArray("metros");
        if (jsonArraymetros != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metros").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metros` to be an array in the JSON string but got `%s`", jsonObj.get("metros").toString()));
          }

          // validate the optional field `metros` (array)
          for (int i = 0; i < jsonArraymetros.size(); i++) {
            Metro.validateJsonElement(jsonArraymetros.get(i));
          };
        }
      }
      if (jsonObj.get("postalCodes") != null && !jsonObj.get("postalCodes").isJsonNull()) {
        JsonArray jsonArraypostalCodes = jsonObj.getAsJsonArray("postalCodes");
        if (jsonArraypostalCodes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("postalCodes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `postalCodes` to be an array in the JSON string but got `%s`", jsonObj.get("postalCodes").toString()));
          }

          // validate the optional field `postalCodes` (array)
          for (int i = 0; i < jsonArraypostalCodes.size(); i++) {
            PostalCode.validateJsonElement(jsonArraypostalCodes.get(i));
          };
        }
      }
      if (jsonObj.get("regions") != null && !jsonObj.get("regions").isJsonNull()) {
        JsonArray jsonArrayregions = jsonObj.getAsJsonArray("regions");
        if (jsonArrayregions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("regions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `regions` to be an array in the JSON string but got `%s`", jsonObj.get("regions").toString()));
          }

          // validate the optional field `regions` (array)
          for (int i = 0; i < jsonArrayregions.size(); i++) {
            Region.validateJsonElement(jsonArrayregions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GeoTargeting.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GeoTargeting' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GeoTargeting> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GeoTargeting.class));

       return (TypeAdapter<T>) new TypeAdapter<GeoTargeting>() {
           @Override
           public void write(JsonWriter out, GeoTargeting value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GeoTargeting read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GeoTargeting given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GeoTargeting
   * @throws IOException if the JSON string is invalid with respect to GeoTargeting
   */
  public static GeoTargeting fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GeoTargeting.class);
  }

  /**
   * Convert an instance of GeoTargeting to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

