/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Browser;
import org.openapitools.client.model.ConnectionType;
import org.openapitools.client.model.MobileCarrier;
import org.openapitools.client.model.OperatingSystem;
import org.openapitools.client.model.OperatingSystemVersion;
import org.openapitools.client.model.PlatformType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Technology Targeting.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:16.070314-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TechnologyTargeting {
  public static final String SERIALIZED_NAME_BROWSERS = "browsers";
  @SerializedName(SERIALIZED_NAME_BROWSERS)
  private List<Browser> browsers = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONNECTION_TYPES = "connectionTypes";
  @SerializedName(SERIALIZED_NAME_CONNECTION_TYPES)
  private List<ConnectionType> connectionTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_MOBILE_CARRIERS = "mobileCarriers";
  @SerializedName(SERIALIZED_NAME_MOBILE_CARRIERS)
  private List<MobileCarrier> mobileCarriers = new ArrayList<>();

  public static final String SERIALIZED_NAME_OPERATING_SYSTEM_VERSIONS = "operatingSystemVersions";
  @SerializedName(SERIALIZED_NAME_OPERATING_SYSTEM_VERSIONS)
  private List<OperatingSystemVersion> operatingSystemVersions = new ArrayList<>();

  public static final String SERIALIZED_NAME_OPERATING_SYSTEMS = "operatingSystems";
  @SerializedName(SERIALIZED_NAME_OPERATING_SYSTEMS)
  private List<OperatingSystem> operatingSystems = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLATFORM_TYPES = "platformTypes";
  @SerializedName(SERIALIZED_NAME_PLATFORM_TYPES)
  private List<PlatformType> platformTypes = new ArrayList<>();

  public TechnologyTargeting() {
  }

  public TechnologyTargeting browsers(List<Browser> browsers) {
    this.browsers = browsers;
    return this;
  }

  public TechnologyTargeting addBrowsersItem(Browser browsersItem) {
    if (this.browsers == null) {
      this.browsers = new ArrayList<>();
    }
    this.browsers.add(browsersItem);
    return this;
  }

  /**
   * Browsers that this ad targets. For each browser either set browserVersionId or dartId along with the version numbers. If both are specified, only browserVersionId will be used. The other fields are populated automatically when the ad is inserted or updated.
   * @return browsers
   */
  @javax.annotation.Nullable
  public List<Browser> getBrowsers() {
    return browsers;
  }

  public void setBrowsers(List<Browser> browsers) {
    this.browsers = browsers;
  }


  public TechnologyTargeting connectionTypes(List<ConnectionType> connectionTypes) {
    this.connectionTypes = connectionTypes;
    return this;
  }

  public TechnologyTargeting addConnectionTypesItem(ConnectionType connectionTypesItem) {
    if (this.connectionTypes == null) {
      this.connectionTypes = new ArrayList<>();
    }
    this.connectionTypes.add(connectionTypesItem);
    return this;
  }

  /**
   * Connection types that this ad targets. For each connection type only id is required. The other fields are populated automatically when the ad is inserted or updated.
   * @return connectionTypes
   */
  @javax.annotation.Nullable
  public List<ConnectionType> getConnectionTypes() {
    return connectionTypes;
  }

  public void setConnectionTypes(List<ConnectionType> connectionTypes) {
    this.connectionTypes = connectionTypes;
  }


  public TechnologyTargeting mobileCarriers(List<MobileCarrier> mobileCarriers) {
    this.mobileCarriers = mobileCarriers;
    return this;
  }

  public TechnologyTargeting addMobileCarriersItem(MobileCarrier mobileCarriersItem) {
    if (this.mobileCarriers == null) {
      this.mobileCarriers = new ArrayList<>();
    }
    this.mobileCarriers.add(mobileCarriersItem);
    return this;
  }

  /**
   * Mobile carriers that this ad targets. For each mobile carrier only id is required, and the other fields are populated automatically when the ad is inserted or updated. If targeting a mobile carrier, do not set targeting for any zip codes.
   * @return mobileCarriers
   */
  @javax.annotation.Nullable
  public List<MobileCarrier> getMobileCarriers() {
    return mobileCarriers;
  }

  public void setMobileCarriers(List<MobileCarrier> mobileCarriers) {
    this.mobileCarriers = mobileCarriers;
  }


  public TechnologyTargeting operatingSystemVersions(List<OperatingSystemVersion> operatingSystemVersions) {
    this.operatingSystemVersions = operatingSystemVersions;
    return this;
  }

  public TechnologyTargeting addOperatingSystemVersionsItem(OperatingSystemVersion operatingSystemVersionsItem) {
    if (this.operatingSystemVersions == null) {
      this.operatingSystemVersions = new ArrayList<>();
    }
    this.operatingSystemVersions.add(operatingSystemVersionsItem);
    return this;
  }

  /**
   * Operating system versions that this ad targets. To target all versions, use operatingSystems. For each operating system version, only id is required. The other fields are populated automatically when the ad is inserted or updated. If targeting an operating system version, do not set targeting for the corresponding operating system in operatingSystems.
   * @return operatingSystemVersions
   */
  @javax.annotation.Nullable
  public List<OperatingSystemVersion> getOperatingSystemVersions() {
    return operatingSystemVersions;
  }

  public void setOperatingSystemVersions(List<OperatingSystemVersion> operatingSystemVersions) {
    this.operatingSystemVersions = operatingSystemVersions;
  }


  public TechnologyTargeting operatingSystems(List<OperatingSystem> operatingSystems) {
    this.operatingSystems = operatingSystems;
    return this;
  }

  public TechnologyTargeting addOperatingSystemsItem(OperatingSystem operatingSystemsItem) {
    if (this.operatingSystems == null) {
      this.operatingSystems = new ArrayList<>();
    }
    this.operatingSystems.add(operatingSystemsItem);
    return this;
  }

  /**
   * Operating systems that this ad targets. To target specific versions, use operatingSystemVersions. For each operating system only dartId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting an operating system, do not set targeting for operating system versions for the same operating system.
   * @return operatingSystems
   */
  @javax.annotation.Nullable
  public List<OperatingSystem> getOperatingSystems() {
    return operatingSystems;
  }

  public void setOperatingSystems(List<OperatingSystem> operatingSystems) {
    this.operatingSystems = operatingSystems;
  }


  public TechnologyTargeting platformTypes(List<PlatformType> platformTypes) {
    this.platformTypes = platformTypes;
    return this;
  }

  public TechnologyTargeting addPlatformTypesItem(PlatformType platformTypesItem) {
    if (this.platformTypes == null) {
      this.platformTypes = new ArrayList<>();
    }
    this.platformTypes.add(platformTypesItem);
    return this;
  }

  /**
   * Platform types that this ad targets. For example, desktop, mobile, or tablet. For each platform type, only id is required, and the other fields are populated automatically when the ad is inserted or updated.
   * @return platformTypes
   */
  @javax.annotation.Nullable
  public List<PlatformType> getPlatformTypes() {
    return platformTypes;
  }

  public void setPlatformTypes(List<PlatformType> platformTypes) {
    this.platformTypes = platformTypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TechnologyTargeting technologyTargeting = (TechnologyTargeting) o;
    return Objects.equals(this.browsers, technologyTargeting.browsers) &&
        Objects.equals(this.connectionTypes, technologyTargeting.connectionTypes) &&
        Objects.equals(this.mobileCarriers, technologyTargeting.mobileCarriers) &&
        Objects.equals(this.operatingSystemVersions, technologyTargeting.operatingSystemVersions) &&
        Objects.equals(this.operatingSystems, technologyTargeting.operatingSystems) &&
        Objects.equals(this.platformTypes, technologyTargeting.platformTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(browsers, connectionTypes, mobileCarriers, operatingSystemVersions, operatingSystems, platformTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TechnologyTargeting {\n");
    sb.append("    browsers: ").append(toIndentedString(browsers)).append("\n");
    sb.append("    connectionTypes: ").append(toIndentedString(connectionTypes)).append("\n");
    sb.append("    mobileCarriers: ").append(toIndentedString(mobileCarriers)).append("\n");
    sb.append("    operatingSystemVersions: ").append(toIndentedString(operatingSystemVersions)).append("\n");
    sb.append("    operatingSystems: ").append(toIndentedString(operatingSystems)).append("\n");
    sb.append("    platformTypes: ").append(toIndentedString(platformTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("browsers");
    openapiFields.add("connectionTypes");
    openapiFields.add("mobileCarriers");
    openapiFields.add("operatingSystemVersions");
    openapiFields.add("operatingSystems");
    openapiFields.add("platformTypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TechnologyTargeting
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TechnologyTargeting.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TechnologyTargeting is not found in the empty JSON string", TechnologyTargeting.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TechnologyTargeting.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TechnologyTargeting` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("browsers") != null && !jsonObj.get("browsers").isJsonNull()) {
        JsonArray jsonArraybrowsers = jsonObj.getAsJsonArray("browsers");
        if (jsonArraybrowsers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("browsers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `browsers` to be an array in the JSON string but got `%s`", jsonObj.get("browsers").toString()));
          }

          // validate the optional field `browsers` (array)
          for (int i = 0; i < jsonArraybrowsers.size(); i++) {
            Browser.validateJsonElement(jsonArraybrowsers.get(i));
          };
        }
      }
      if (jsonObj.get("connectionTypes") != null && !jsonObj.get("connectionTypes").isJsonNull()) {
        JsonArray jsonArrayconnectionTypes = jsonObj.getAsJsonArray("connectionTypes");
        if (jsonArrayconnectionTypes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("connectionTypes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `connectionTypes` to be an array in the JSON string but got `%s`", jsonObj.get("connectionTypes").toString()));
          }

          // validate the optional field `connectionTypes` (array)
          for (int i = 0; i < jsonArrayconnectionTypes.size(); i++) {
            ConnectionType.validateJsonElement(jsonArrayconnectionTypes.get(i));
          };
        }
      }
      if (jsonObj.get("mobileCarriers") != null && !jsonObj.get("mobileCarriers").isJsonNull()) {
        JsonArray jsonArraymobileCarriers = jsonObj.getAsJsonArray("mobileCarriers");
        if (jsonArraymobileCarriers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mobileCarriers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mobileCarriers` to be an array in the JSON string but got `%s`", jsonObj.get("mobileCarriers").toString()));
          }

          // validate the optional field `mobileCarriers` (array)
          for (int i = 0; i < jsonArraymobileCarriers.size(); i++) {
            MobileCarrier.validateJsonElement(jsonArraymobileCarriers.get(i));
          };
        }
      }
      if (jsonObj.get("operatingSystemVersions") != null && !jsonObj.get("operatingSystemVersions").isJsonNull()) {
        JsonArray jsonArrayoperatingSystemVersions = jsonObj.getAsJsonArray("operatingSystemVersions");
        if (jsonArrayoperatingSystemVersions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("operatingSystemVersions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `operatingSystemVersions` to be an array in the JSON string but got `%s`", jsonObj.get("operatingSystemVersions").toString()));
          }

          // validate the optional field `operatingSystemVersions` (array)
          for (int i = 0; i < jsonArrayoperatingSystemVersions.size(); i++) {
            OperatingSystemVersion.validateJsonElement(jsonArrayoperatingSystemVersions.get(i));
          };
        }
      }
      if (jsonObj.get("operatingSystems") != null && !jsonObj.get("operatingSystems").isJsonNull()) {
        JsonArray jsonArrayoperatingSystems = jsonObj.getAsJsonArray("operatingSystems");
        if (jsonArrayoperatingSystems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("operatingSystems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `operatingSystems` to be an array in the JSON string but got `%s`", jsonObj.get("operatingSystems").toString()));
          }

          // validate the optional field `operatingSystems` (array)
          for (int i = 0; i < jsonArrayoperatingSystems.size(); i++) {
            OperatingSystem.validateJsonElement(jsonArrayoperatingSystems.get(i));
          };
        }
      }
      if (jsonObj.get("platformTypes") != null && !jsonObj.get("platformTypes").isJsonNull()) {
        JsonArray jsonArrayplatformTypes = jsonObj.getAsJsonArray("platformTypes");
        if (jsonArrayplatformTypes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("platformTypes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `platformTypes` to be an array in the JSON string but got `%s`", jsonObj.get("platformTypes").toString()));
          }

          // validate the optional field `platformTypes` (array)
          for (int i = 0; i < jsonArrayplatformTypes.size(); i++) {
            PlatformType.validateJsonElement(jsonArrayplatformTypes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TechnologyTargeting.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TechnologyTargeting' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TechnologyTargeting> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TechnologyTargeting.class));

       return (TypeAdapter<T>) new TypeAdapter<TechnologyTargeting>() {
           @Override
           public void write(JsonWriter out, TechnologyTargeting value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TechnologyTargeting read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TechnologyTargeting given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TechnologyTargeting
   * @throws IOException if the JSON string is invalid with respect to TechnologyTargeting
   */
  public static TechnologyTargeting fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TechnologyTargeting.class);
  }

  /**
   * Convert an instance of TechnologyTargeting to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

