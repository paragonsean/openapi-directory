/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The report&#39;s schedule. Can only be set if the report&#39;s &#39;dateRange&#39; is a relative date range and the relative date range is not \&quot;TODAY\&quot;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:16.070314-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReportSchedule {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_EVERY = "every";
  @SerializedName(SERIALIZED_NAME_EVERY)
  private Integer every;

  public static final String SERIALIZED_NAME_EXPIRATION_DATE = "expirationDate";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATE)
  private LocalDate expirationDate;

  public static final String SERIALIZED_NAME_REPEATS = "repeats";
  @SerializedName(SERIALIZED_NAME_REPEATS)
  private String repeats;

  /**
   * Gets or Sets repeatsOnWeekDays
   */
  @JsonAdapter(RepeatsOnWeekDaysEnum.Adapter.class)
  public enum RepeatsOnWeekDaysEnum {
    SUNDAY("SUNDAY"),
    
    MONDAY("MONDAY"),
    
    TUESDAY("TUESDAY"),
    
    WEDNESDAY("WEDNESDAY"),
    
    THURSDAY("THURSDAY"),
    
    FRIDAY("FRIDAY"),
    
    SATURDAY("SATURDAY");

    private String value;

    RepeatsOnWeekDaysEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RepeatsOnWeekDaysEnum fromValue(String value) {
      for (RepeatsOnWeekDaysEnum b : RepeatsOnWeekDaysEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RepeatsOnWeekDaysEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RepeatsOnWeekDaysEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RepeatsOnWeekDaysEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RepeatsOnWeekDaysEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RepeatsOnWeekDaysEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REPEATS_ON_WEEK_DAYS = "repeatsOnWeekDays";
  @SerializedName(SERIALIZED_NAME_REPEATS_ON_WEEK_DAYS)
  private List<RepeatsOnWeekDaysEnum> repeatsOnWeekDays = new ArrayList<>();

  /**
   * Enum to define for \&quot;MONTHLY\&quot; scheduled reports whether reports should be repeated on the same day of the month as \&quot;startDate\&quot; or the same day of the week of the month. Example: If &#39;startDate&#39; is Monday, April 2nd 2012 (2012-04-02), \&quot;DAY_OF_MONTH\&quot; would run subsequent reports on the 2nd of every Month, and \&quot;WEEK_OF_MONTH\&quot; would run subsequent reports on the first Monday of the month.
   */
  @JsonAdapter(RunsOnDayOfMonthEnum.Adapter.class)
  public enum RunsOnDayOfMonthEnum {
    DAY_OF_MONTH("DAY_OF_MONTH"),
    
    WEEK_OF_MONTH("WEEK_OF_MONTH");

    private String value;

    RunsOnDayOfMonthEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RunsOnDayOfMonthEnum fromValue(String value) {
      for (RunsOnDayOfMonthEnum b : RunsOnDayOfMonthEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RunsOnDayOfMonthEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RunsOnDayOfMonthEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RunsOnDayOfMonthEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RunsOnDayOfMonthEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RunsOnDayOfMonthEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RUNS_ON_DAY_OF_MONTH = "runsOnDayOfMonth";
  @SerializedName(SERIALIZED_NAME_RUNS_ON_DAY_OF_MONTH)
  private RunsOnDayOfMonthEnum runsOnDayOfMonth;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private LocalDate startDate;

  public ReportSchedule() {
  }

  public ReportSchedule active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Whether the schedule is active or not. Must be set to either true or false.
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public ReportSchedule every(Integer every) {
    this.every = every;
    return this;
  }

  /**
   * Defines every how many days, weeks or months the report should be run. Needs to be set when \&quot;repeats\&quot; is either \&quot;DAILY\&quot;, \&quot;WEEKLY\&quot; or \&quot;MONTHLY\&quot;.
   * @return every
   */
  @javax.annotation.Nullable
  public Integer getEvery() {
    return every;
  }

  public void setEvery(Integer every) {
    this.every = every;
  }


  public ReportSchedule expirationDate(LocalDate expirationDate) {
    this.expirationDate = expirationDate;
    return this;
  }

  /**
   * Get expirationDate
   * @return expirationDate
   */
  @javax.annotation.Nullable
  public LocalDate getExpirationDate() {
    return expirationDate;
  }

  public void setExpirationDate(LocalDate expirationDate) {
    this.expirationDate = expirationDate;
  }


  public ReportSchedule repeats(String repeats) {
    this.repeats = repeats;
    return this;
  }

  /**
   * The interval for which the report is repeated. Note: - \&quot;DAILY\&quot; also requires field \&quot;every\&quot; to be set. - \&quot;WEEKLY\&quot; also requires fields \&quot;every\&quot; and \&quot;repeatsOnWeekDays\&quot; to be set. - \&quot;MONTHLY\&quot; also requires fields \&quot;every\&quot; and \&quot;runsOnDayOfMonth\&quot; to be set. 
   * @return repeats
   */
  @javax.annotation.Nullable
  public String getRepeats() {
    return repeats;
  }

  public void setRepeats(String repeats) {
    this.repeats = repeats;
  }


  public ReportSchedule repeatsOnWeekDays(List<RepeatsOnWeekDaysEnum> repeatsOnWeekDays) {
    this.repeatsOnWeekDays = repeatsOnWeekDays;
    return this;
  }

  public ReportSchedule addRepeatsOnWeekDaysItem(RepeatsOnWeekDaysEnum repeatsOnWeekDaysItem) {
    if (this.repeatsOnWeekDays == null) {
      this.repeatsOnWeekDays = new ArrayList<>();
    }
    this.repeatsOnWeekDays.add(repeatsOnWeekDaysItem);
    return this;
  }

  /**
   * List of week days \&quot;WEEKLY\&quot; on which scheduled reports should run.
   * @return repeatsOnWeekDays
   */
  @javax.annotation.Nullable
  public List<RepeatsOnWeekDaysEnum> getRepeatsOnWeekDays() {
    return repeatsOnWeekDays;
  }

  public void setRepeatsOnWeekDays(List<RepeatsOnWeekDaysEnum> repeatsOnWeekDays) {
    this.repeatsOnWeekDays = repeatsOnWeekDays;
  }


  public ReportSchedule runsOnDayOfMonth(RunsOnDayOfMonthEnum runsOnDayOfMonth) {
    this.runsOnDayOfMonth = runsOnDayOfMonth;
    return this;
  }

  /**
   * Enum to define for \&quot;MONTHLY\&quot; scheduled reports whether reports should be repeated on the same day of the month as \&quot;startDate\&quot; or the same day of the week of the month. Example: If &#39;startDate&#39; is Monday, April 2nd 2012 (2012-04-02), \&quot;DAY_OF_MONTH\&quot; would run subsequent reports on the 2nd of every Month, and \&quot;WEEK_OF_MONTH\&quot; would run subsequent reports on the first Monday of the month.
   * @return runsOnDayOfMonth
   */
  @javax.annotation.Nullable
  public RunsOnDayOfMonthEnum getRunsOnDayOfMonth() {
    return runsOnDayOfMonth;
  }

  public void setRunsOnDayOfMonth(RunsOnDayOfMonthEnum runsOnDayOfMonth) {
    this.runsOnDayOfMonth = runsOnDayOfMonth;
  }


  public ReportSchedule startDate(LocalDate startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nullable
  public LocalDate getStartDate() {
    return startDate;
  }

  public void setStartDate(LocalDate startDate) {
    this.startDate = startDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportSchedule reportSchedule = (ReportSchedule) o;
    return Objects.equals(this.active, reportSchedule.active) &&
        Objects.equals(this.every, reportSchedule.every) &&
        Objects.equals(this.expirationDate, reportSchedule.expirationDate) &&
        Objects.equals(this.repeats, reportSchedule.repeats) &&
        Objects.equals(this.repeatsOnWeekDays, reportSchedule.repeatsOnWeekDays) &&
        Objects.equals(this.runsOnDayOfMonth, reportSchedule.runsOnDayOfMonth) &&
        Objects.equals(this.startDate, reportSchedule.startDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, every, expirationDate, repeats, repeatsOnWeekDays, runsOnDayOfMonth, startDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportSchedule {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    every: ").append(toIndentedString(every)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    repeats: ").append(toIndentedString(repeats)).append("\n");
    sb.append("    repeatsOnWeekDays: ").append(toIndentedString(repeatsOnWeekDays)).append("\n");
    sb.append("    runsOnDayOfMonth: ").append(toIndentedString(runsOnDayOfMonth)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("every");
    openapiFields.add("expirationDate");
    openapiFields.add("repeats");
    openapiFields.add("repeatsOnWeekDays");
    openapiFields.add("runsOnDayOfMonth");
    openapiFields.add("startDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportSchedule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportSchedule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportSchedule is not found in the empty JSON string", ReportSchedule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportSchedule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportSchedule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("repeats") != null && !jsonObj.get("repeats").isJsonNull()) && !jsonObj.get("repeats").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repeats` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repeats").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("repeatsOnWeekDays") != null && !jsonObj.get("repeatsOnWeekDays").isJsonNull() && !jsonObj.get("repeatsOnWeekDays").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `repeatsOnWeekDays` to be an array in the JSON string but got `%s`", jsonObj.get("repeatsOnWeekDays").toString()));
      }
      if ((jsonObj.get("runsOnDayOfMonth") != null && !jsonObj.get("runsOnDayOfMonth").isJsonNull()) && !jsonObj.get("runsOnDayOfMonth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runsOnDayOfMonth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runsOnDayOfMonth").toString()));
      }
      // validate the optional field `runsOnDayOfMonth`
      if (jsonObj.get("runsOnDayOfMonth") != null && !jsonObj.get("runsOnDayOfMonth").isJsonNull()) {
        RunsOnDayOfMonthEnum.validateJsonElement(jsonObj.get("runsOnDayOfMonth"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportSchedule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportSchedule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportSchedule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportSchedule.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportSchedule>() {
           @Override
           public void write(JsonWriter out, ReportSchedule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportSchedule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportSchedule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportSchedule
   * @throws IOException if the JSON string is invalid with respect to ReportSchedule
   */
  public static ReportSchedule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportSchedule.class);
  }

  /**
   * Convert an instance of ReportSchedule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

