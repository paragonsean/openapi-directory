/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the report.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:16.070314-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReportPathToConversionCriteriaReportProperties {
  public static final String SERIALIZED_NAME_CLICKS_LOOKBACK_WINDOW = "clicksLookbackWindow";
  @SerializedName(SERIALIZED_NAME_CLICKS_LOOKBACK_WINDOW)
  private Integer clicksLookbackWindow;

  public static final String SERIALIZED_NAME_IMPRESSIONS_LOOKBACK_WINDOW = "impressionsLookbackWindow";
  @SerializedName(SERIALIZED_NAME_IMPRESSIONS_LOOKBACK_WINDOW)
  private Integer impressionsLookbackWindow;

  public static final String SERIALIZED_NAME_INCLUDE_ATTRIBUTED_I_P_CONVERSIONS = "includeAttributedIPConversions";
  @SerializedName(SERIALIZED_NAME_INCLUDE_ATTRIBUTED_I_P_CONVERSIONS)
  private Boolean includeAttributedIPConversions;

  public static final String SERIALIZED_NAME_INCLUDE_UNATTRIBUTED_COOKIE_CONVERSIONS = "includeUnattributedCookieConversions";
  @SerializedName(SERIALIZED_NAME_INCLUDE_UNATTRIBUTED_COOKIE_CONVERSIONS)
  private Boolean includeUnattributedCookieConversions;

  public static final String SERIALIZED_NAME_INCLUDE_UNATTRIBUTED_I_P_CONVERSIONS = "includeUnattributedIPConversions";
  @SerializedName(SERIALIZED_NAME_INCLUDE_UNATTRIBUTED_I_P_CONVERSIONS)
  private Boolean includeUnattributedIPConversions;

  public static final String SERIALIZED_NAME_MAXIMUM_CLICK_INTERACTIONS = "maximumClickInteractions";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_CLICK_INTERACTIONS)
  private Integer maximumClickInteractions;

  public static final String SERIALIZED_NAME_MAXIMUM_IMPRESSION_INTERACTIONS = "maximumImpressionInteractions";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_IMPRESSION_INTERACTIONS)
  private Integer maximumImpressionInteractions;

  public static final String SERIALIZED_NAME_MAXIMUM_INTERACTION_GAP = "maximumInteractionGap";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_INTERACTION_GAP)
  private Integer maximumInteractionGap;

  public static final String SERIALIZED_NAME_PIVOT_ON_INTERACTION_PATH = "pivotOnInteractionPath";
  @SerializedName(SERIALIZED_NAME_PIVOT_ON_INTERACTION_PATH)
  private Boolean pivotOnInteractionPath;

  public ReportPathToConversionCriteriaReportProperties() {
  }

  public ReportPathToConversionCriteriaReportProperties clicksLookbackWindow(Integer clicksLookbackWindow) {
    this.clicksLookbackWindow = clicksLookbackWindow;
    return this;
  }

  /**
   * CM360 checks to see if a click interaction occurred within the specified period of time before a conversion. By default the value is pulled from Floodlight or you can manually enter a custom value. Valid values: 1-90.
   * @return clicksLookbackWindow
   */
  @javax.annotation.Nullable
  public Integer getClicksLookbackWindow() {
    return clicksLookbackWindow;
  }

  public void setClicksLookbackWindow(Integer clicksLookbackWindow) {
    this.clicksLookbackWindow = clicksLookbackWindow;
  }


  public ReportPathToConversionCriteriaReportProperties impressionsLookbackWindow(Integer impressionsLookbackWindow) {
    this.impressionsLookbackWindow = impressionsLookbackWindow;
    return this;
  }

  /**
   * CM360 checks to see if an impression interaction occurred within the specified period of time before a conversion. By default the value is pulled from Floodlight or you can manually enter a custom value. Valid values: 1-90.
   * @return impressionsLookbackWindow
   */
  @javax.annotation.Nullable
  public Integer getImpressionsLookbackWindow() {
    return impressionsLookbackWindow;
  }

  public void setImpressionsLookbackWindow(Integer impressionsLookbackWindow) {
    this.impressionsLookbackWindow = impressionsLookbackWindow;
  }


  public ReportPathToConversionCriteriaReportProperties includeAttributedIPConversions(Boolean includeAttributedIPConversions) {
    this.includeAttributedIPConversions = includeAttributedIPConversions;
    return this;
  }

  /**
   * Deprecated: has no effect.
   * @return includeAttributedIPConversions
   */
  @javax.annotation.Nullable
  public Boolean getIncludeAttributedIPConversions() {
    return includeAttributedIPConversions;
  }

  public void setIncludeAttributedIPConversions(Boolean includeAttributedIPConversions) {
    this.includeAttributedIPConversions = includeAttributedIPConversions;
  }


  public ReportPathToConversionCriteriaReportProperties includeUnattributedCookieConversions(Boolean includeUnattributedCookieConversions) {
    this.includeUnattributedCookieConversions = includeUnattributedCookieConversions;
    return this;
  }

  /**
   * Include conversions of users with a DoubleClick cookie but without an exposure. That means the user did not click or see an ad from the advertiser within the Floodlight group, or that the interaction happened outside the lookback window.
   * @return includeUnattributedCookieConversions
   */
  @javax.annotation.Nullable
  public Boolean getIncludeUnattributedCookieConversions() {
    return includeUnattributedCookieConversions;
  }

  public void setIncludeUnattributedCookieConversions(Boolean includeUnattributedCookieConversions) {
    this.includeUnattributedCookieConversions = includeUnattributedCookieConversions;
  }


  public ReportPathToConversionCriteriaReportProperties includeUnattributedIPConversions(Boolean includeUnattributedIPConversions) {
    this.includeUnattributedIPConversions = includeUnattributedIPConversions;
    return this;
  }

  /**
   * Include conversions that have no associated cookies and no exposures. Itâ€™s therefore impossible to know how the user was exposed to your ads during the lookback window prior to a conversion.
   * @return includeUnattributedIPConversions
   */
  @javax.annotation.Nullable
  public Boolean getIncludeUnattributedIPConversions() {
    return includeUnattributedIPConversions;
  }

  public void setIncludeUnattributedIPConversions(Boolean includeUnattributedIPConversions) {
    this.includeUnattributedIPConversions = includeUnattributedIPConversions;
  }


  public ReportPathToConversionCriteriaReportProperties maximumClickInteractions(Integer maximumClickInteractions) {
    this.maximumClickInteractions = maximumClickInteractions;
    return this;
  }

  /**
   * The maximum number of click interactions to include in the report. Advertisers currently paying for E2C reports get up to 200 (100 clicks, 100 impressions). If another advertiser in your network is paying for E2C, you can have up to 5 total exposures per report.
   * @return maximumClickInteractions
   */
  @javax.annotation.Nullable
  public Integer getMaximumClickInteractions() {
    return maximumClickInteractions;
  }

  public void setMaximumClickInteractions(Integer maximumClickInteractions) {
    this.maximumClickInteractions = maximumClickInteractions;
  }


  public ReportPathToConversionCriteriaReportProperties maximumImpressionInteractions(Integer maximumImpressionInteractions) {
    this.maximumImpressionInteractions = maximumImpressionInteractions;
    return this;
  }

  /**
   * The maximum number of click interactions to include in the report. Advertisers currently paying for E2C reports get up to 200 (100 clicks, 100 impressions). If another advertiser in your network is paying for E2C, you can have up to 5 total exposures per report.
   * @return maximumImpressionInteractions
   */
  @javax.annotation.Nullable
  public Integer getMaximumImpressionInteractions() {
    return maximumImpressionInteractions;
  }

  public void setMaximumImpressionInteractions(Integer maximumImpressionInteractions) {
    this.maximumImpressionInteractions = maximumImpressionInteractions;
  }


  public ReportPathToConversionCriteriaReportProperties maximumInteractionGap(Integer maximumInteractionGap) {
    this.maximumInteractionGap = maximumInteractionGap;
    return this;
  }

  /**
   * The maximum amount of time that can take place between interactions (clicks or impressions) by the same user. Valid values: 1-90.
   * @return maximumInteractionGap
   */
  @javax.annotation.Nullable
  public Integer getMaximumInteractionGap() {
    return maximumInteractionGap;
  }

  public void setMaximumInteractionGap(Integer maximumInteractionGap) {
    this.maximumInteractionGap = maximumInteractionGap;
  }


  public ReportPathToConversionCriteriaReportProperties pivotOnInteractionPath(Boolean pivotOnInteractionPath) {
    this.pivotOnInteractionPath = pivotOnInteractionPath;
    return this;
  }

  /**
   * Enable pivoting on interaction path.
   * @return pivotOnInteractionPath
   */
  @javax.annotation.Nullable
  public Boolean getPivotOnInteractionPath() {
    return pivotOnInteractionPath;
  }

  public void setPivotOnInteractionPath(Boolean pivotOnInteractionPath) {
    this.pivotOnInteractionPath = pivotOnInteractionPath;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportPathToConversionCriteriaReportProperties reportPathToConversionCriteriaReportProperties = (ReportPathToConversionCriteriaReportProperties) o;
    return Objects.equals(this.clicksLookbackWindow, reportPathToConversionCriteriaReportProperties.clicksLookbackWindow) &&
        Objects.equals(this.impressionsLookbackWindow, reportPathToConversionCriteriaReportProperties.impressionsLookbackWindow) &&
        Objects.equals(this.includeAttributedIPConversions, reportPathToConversionCriteriaReportProperties.includeAttributedIPConversions) &&
        Objects.equals(this.includeUnattributedCookieConversions, reportPathToConversionCriteriaReportProperties.includeUnattributedCookieConversions) &&
        Objects.equals(this.includeUnattributedIPConversions, reportPathToConversionCriteriaReportProperties.includeUnattributedIPConversions) &&
        Objects.equals(this.maximumClickInteractions, reportPathToConversionCriteriaReportProperties.maximumClickInteractions) &&
        Objects.equals(this.maximumImpressionInteractions, reportPathToConversionCriteriaReportProperties.maximumImpressionInteractions) &&
        Objects.equals(this.maximumInteractionGap, reportPathToConversionCriteriaReportProperties.maximumInteractionGap) &&
        Objects.equals(this.pivotOnInteractionPath, reportPathToConversionCriteriaReportProperties.pivotOnInteractionPath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clicksLookbackWindow, impressionsLookbackWindow, includeAttributedIPConversions, includeUnattributedCookieConversions, includeUnattributedIPConversions, maximumClickInteractions, maximumImpressionInteractions, maximumInteractionGap, pivotOnInteractionPath);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportPathToConversionCriteriaReportProperties {\n");
    sb.append("    clicksLookbackWindow: ").append(toIndentedString(clicksLookbackWindow)).append("\n");
    sb.append("    impressionsLookbackWindow: ").append(toIndentedString(impressionsLookbackWindow)).append("\n");
    sb.append("    includeAttributedIPConversions: ").append(toIndentedString(includeAttributedIPConversions)).append("\n");
    sb.append("    includeUnattributedCookieConversions: ").append(toIndentedString(includeUnattributedCookieConversions)).append("\n");
    sb.append("    includeUnattributedIPConversions: ").append(toIndentedString(includeUnattributedIPConversions)).append("\n");
    sb.append("    maximumClickInteractions: ").append(toIndentedString(maximumClickInteractions)).append("\n");
    sb.append("    maximumImpressionInteractions: ").append(toIndentedString(maximumImpressionInteractions)).append("\n");
    sb.append("    maximumInteractionGap: ").append(toIndentedString(maximumInteractionGap)).append("\n");
    sb.append("    pivotOnInteractionPath: ").append(toIndentedString(pivotOnInteractionPath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clicksLookbackWindow");
    openapiFields.add("impressionsLookbackWindow");
    openapiFields.add("includeAttributedIPConversions");
    openapiFields.add("includeUnattributedCookieConversions");
    openapiFields.add("includeUnattributedIPConversions");
    openapiFields.add("maximumClickInteractions");
    openapiFields.add("maximumImpressionInteractions");
    openapiFields.add("maximumInteractionGap");
    openapiFields.add("pivotOnInteractionPath");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportPathToConversionCriteriaReportProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportPathToConversionCriteriaReportProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportPathToConversionCriteriaReportProperties is not found in the empty JSON string", ReportPathToConversionCriteriaReportProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportPathToConversionCriteriaReportProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportPathToConversionCriteriaReportProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportPathToConversionCriteriaReportProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportPathToConversionCriteriaReportProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportPathToConversionCriteriaReportProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportPathToConversionCriteriaReportProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportPathToConversionCriteriaReportProperties>() {
           @Override
           public void write(JsonWriter out, ReportPathToConversionCriteriaReportProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportPathToConversionCriteriaReportProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportPathToConversionCriteriaReportProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportPathToConversionCriteriaReportProperties
   * @throws IOException if the JSON string is invalid with respect to ReportPathToConversionCriteriaReportProperties
   */
  public static ReportPathToConversionCriteriaReportProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportPathToConversionCriteriaReportProperties.class);
  }

  /**
   * Convert an instance of ReportPathToConversionCriteriaReportProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

