/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PricingSchedulePricingPeriod;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Pricing Schedule
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:16.070314-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PricingSchedule {
  /**
   * Placement cap cost option.
   */
  @JsonAdapter(CapCostOptionEnum.Adapter.class)
  public enum CapCostOptionEnum {
    NONE("CAP_COST_NONE"),
    
    MONTHLY("CAP_COST_MONTHLY"),
    
    CUMULATIVE("CAP_COST_CUMULATIVE");

    private String value;

    CapCostOptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CapCostOptionEnum fromValue(String value) {
      for (CapCostOptionEnum b : CapCostOptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CapCostOptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CapCostOptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CapCostOptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CapCostOptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CapCostOptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CAP_COST_OPTION = "capCostOption";
  @SerializedName(SERIALIZED_NAME_CAP_COST_OPTION)
  private CapCostOptionEnum capCostOption;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private LocalDate endDate;

  public static final String SERIALIZED_NAME_FLIGHTED = "flighted";
  @SerializedName(SERIALIZED_NAME_FLIGHTED)
  private Boolean flighted;

  public static final String SERIALIZED_NAME_FLOODLIGHT_ACTIVITY_ID = "floodlightActivityId";
  @SerializedName(SERIALIZED_NAME_FLOODLIGHT_ACTIVITY_ID)
  private String floodlightActivityId;

  public static final String SERIALIZED_NAME_PRICING_PERIODS = "pricingPeriods";
  @SerializedName(SERIALIZED_NAME_PRICING_PERIODS)
  private List<PricingSchedulePricingPeriod> pricingPeriods = new ArrayList<>();

  /**
   * Placement pricing type. This field is required on insertion.
   */
  @JsonAdapter(PricingTypeEnum.Adapter.class)
  public enum PricingTypeEnum {
    CPM("PRICING_TYPE_CPM"),
    
    CPC("PRICING_TYPE_CPC"),
    
    CPA("PRICING_TYPE_CPA"),
    
    FLAT_RATE_IMPRESSIONS("PRICING_TYPE_FLAT_RATE_IMPRESSIONS"),
    
    FLAT_RATE_CLICKS("PRICING_TYPE_FLAT_RATE_CLICKS"),
    
    CPM_ACTIVEVIEW("PRICING_TYPE_CPM_ACTIVEVIEW");

    private String value;

    PricingTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PricingTypeEnum fromValue(String value) {
      for (PricingTypeEnum b : PricingTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PricingTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PricingTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PricingTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PricingTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PricingTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRICING_TYPE = "pricingType";
  @SerializedName(SERIALIZED_NAME_PRICING_TYPE)
  private PricingTypeEnum pricingType;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private LocalDate startDate;

  public static final String SERIALIZED_NAME_TESTING_START_DATE = "testingStartDate";
  @SerializedName(SERIALIZED_NAME_TESTING_START_DATE)
  private LocalDate testingStartDate;

  public PricingSchedule() {
  }

  public PricingSchedule capCostOption(CapCostOptionEnum capCostOption) {
    this.capCostOption = capCostOption;
    return this;
  }

  /**
   * Placement cap cost option.
   * @return capCostOption
   */
  @javax.annotation.Nullable
  public CapCostOptionEnum getCapCostOption() {
    return capCostOption;
  }

  public void setCapCostOption(CapCostOptionEnum capCostOption) {
    this.capCostOption = capCostOption;
  }


  public PricingSchedule endDate(LocalDate endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * Get endDate
   * @return endDate
   */
  @javax.annotation.Nullable
  public LocalDate getEndDate() {
    return endDate;
  }

  public void setEndDate(LocalDate endDate) {
    this.endDate = endDate;
  }


  public PricingSchedule flighted(Boolean flighted) {
    this.flighted = flighted;
    return this;
  }

  /**
   * Whether this placement is flighted. If true, pricing periods will be computed automatically.
   * @return flighted
   */
  @javax.annotation.Nullable
  public Boolean getFlighted() {
    return flighted;
  }

  public void setFlighted(Boolean flighted) {
    this.flighted = flighted;
  }


  public PricingSchedule floodlightActivityId(String floodlightActivityId) {
    this.floodlightActivityId = floodlightActivityId;
    return this;
  }

  /**
   * Floodlight activity ID associated with this placement. This field should be set when placement pricing type is set to PRICING_TYPE_CPA.
   * @return floodlightActivityId
   */
  @javax.annotation.Nullable
  public String getFloodlightActivityId() {
    return floodlightActivityId;
  }

  public void setFloodlightActivityId(String floodlightActivityId) {
    this.floodlightActivityId = floodlightActivityId;
  }


  public PricingSchedule pricingPeriods(List<PricingSchedulePricingPeriod> pricingPeriods) {
    this.pricingPeriods = pricingPeriods;
    return this;
  }

  public PricingSchedule addPricingPeriodsItem(PricingSchedulePricingPeriod pricingPeriodsItem) {
    if (this.pricingPeriods == null) {
      this.pricingPeriods = new ArrayList<>();
    }
    this.pricingPeriods.add(pricingPeriodsItem);
    return this;
  }

  /**
   * Pricing periods for this placement.
   * @return pricingPeriods
   */
  @javax.annotation.Nullable
  public List<PricingSchedulePricingPeriod> getPricingPeriods() {
    return pricingPeriods;
  }

  public void setPricingPeriods(List<PricingSchedulePricingPeriod> pricingPeriods) {
    this.pricingPeriods = pricingPeriods;
  }


  public PricingSchedule pricingType(PricingTypeEnum pricingType) {
    this.pricingType = pricingType;
    return this;
  }

  /**
   * Placement pricing type. This field is required on insertion.
   * @return pricingType
   */
  @javax.annotation.Nullable
  public PricingTypeEnum getPricingType() {
    return pricingType;
  }

  public void setPricingType(PricingTypeEnum pricingType) {
    this.pricingType = pricingType;
  }


  public PricingSchedule startDate(LocalDate startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nullable
  public LocalDate getStartDate() {
    return startDate;
  }

  public void setStartDate(LocalDate startDate) {
    this.startDate = startDate;
  }


  public PricingSchedule testingStartDate(LocalDate testingStartDate) {
    this.testingStartDate = testingStartDate;
    return this;
  }

  /**
   * Get testingStartDate
   * @return testingStartDate
   */
  @javax.annotation.Nullable
  public LocalDate getTestingStartDate() {
    return testingStartDate;
  }

  public void setTestingStartDate(LocalDate testingStartDate) {
    this.testingStartDate = testingStartDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PricingSchedule pricingSchedule = (PricingSchedule) o;
    return Objects.equals(this.capCostOption, pricingSchedule.capCostOption) &&
        Objects.equals(this.endDate, pricingSchedule.endDate) &&
        Objects.equals(this.flighted, pricingSchedule.flighted) &&
        Objects.equals(this.floodlightActivityId, pricingSchedule.floodlightActivityId) &&
        Objects.equals(this.pricingPeriods, pricingSchedule.pricingPeriods) &&
        Objects.equals(this.pricingType, pricingSchedule.pricingType) &&
        Objects.equals(this.startDate, pricingSchedule.startDate) &&
        Objects.equals(this.testingStartDate, pricingSchedule.testingStartDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(capCostOption, endDate, flighted, floodlightActivityId, pricingPeriods, pricingType, startDate, testingStartDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PricingSchedule {\n");
    sb.append("    capCostOption: ").append(toIndentedString(capCostOption)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    flighted: ").append(toIndentedString(flighted)).append("\n");
    sb.append("    floodlightActivityId: ").append(toIndentedString(floodlightActivityId)).append("\n");
    sb.append("    pricingPeriods: ").append(toIndentedString(pricingPeriods)).append("\n");
    sb.append("    pricingType: ").append(toIndentedString(pricingType)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    testingStartDate: ").append(toIndentedString(testingStartDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("capCostOption");
    openapiFields.add("endDate");
    openapiFields.add("flighted");
    openapiFields.add("floodlightActivityId");
    openapiFields.add("pricingPeriods");
    openapiFields.add("pricingType");
    openapiFields.add("startDate");
    openapiFields.add("testingStartDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PricingSchedule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PricingSchedule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PricingSchedule is not found in the empty JSON string", PricingSchedule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PricingSchedule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PricingSchedule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("capCostOption") != null && !jsonObj.get("capCostOption").isJsonNull()) && !jsonObj.get("capCostOption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `capCostOption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("capCostOption").toString()));
      }
      // validate the optional field `capCostOption`
      if (jsonObj.get("capCostOption") != null && !jsonObj.get("capCostOption").isJsonNull()) {
        CapCostOptionEnum.validateJsonElement(jsonObj.get("capCostOption"));
      }
      if ((jsonObj.get("floodlightActivityId") != null && !jsonObj.get("floodlightActivityId").isJsonNull()) && !jsonObj.get("floodlightActivityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `floodlightActivityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("floodlightActivityId").toString()));
      }
      if (jsonObj.get("pricingPeriods") != null && !jsonObj.get("pricingPeriods").isJsonNull()) {
        JsonArray jsonArraypricingPeriods = jsonObj.getAsJsonArray("pricingPeriods");
        if (jsonArraypricingPeriods != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pricingPeriods").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pricingPeriods` to be an array in the JSON string but got `%s`", jsonObj.get("pricingPeriods").toString()));
          }

          // validate the optional field `pricingPeriods` (array)
          for (int i = 0; i < jsonArraypricingPeriods.size(); i++) {
            PricingSchedulePricingPeriod.validateJsonElement(jsonArraypricingPeriods.get(i));
          };
        }
      }
      if ((jsonObj.get("pricingType") != null && !jsonObj.get("pricingType").isJsonNull()) && !jsonObj.get("pricingType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pricingType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pricingType").toString()));
      }
      // validate the optional field `pricingType`
      if (jsonObj.get("pricingType") != null && !jsonObj.get("pricingType").isJsonNull()) {
        PricingTypeEnum.validateJsonElement(jsonObj.get("pricingType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PricingSchedule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PricingSchedule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PricingSchedule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PricingSchedule.class));

       return (TypeAdapter<T>) new TypeAdapter<PricingSchedule>() {
           @Override
           public void write(JsonWriter out, PricingSchedule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PricingSchedule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PricingSchedule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PricingSchedule
   * @throws IOException if the JSON string is invalid with respect to PricingSchedule
   */
  public static PricingSchedule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PricingSchedule.class);
  }

  /**
   * Convert an instance of PricingSchedule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

