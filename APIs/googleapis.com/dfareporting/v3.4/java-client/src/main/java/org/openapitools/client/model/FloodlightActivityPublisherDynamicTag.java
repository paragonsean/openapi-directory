/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DimensionValue;
import org.openapitools.client.model.FloodlightActivityDynamicTag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Publisher Dynamic Tag
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:16.070314-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FloodlightActivityPublisherDynamicTag {
  public static final String SERIALIZED_NAME_CLICK_THROUGH = "clickThrough";
  @SerializedName(SERIALIZED_NAME_CLICK_THROUGH)
  private Boolean clickThrough;

  public static final String SERIALIZED_NAME_DIRECTORY_SITE_ID = "directorySiteId";
  @SerializedName(SERIALIZED_NAME_DIRECTORY_SITE_ID)
  private String directorySiteId;

  public static final String SERIALIZED_NAME_DYNAMIC_TAG = "dynamicTag";
  @SerializedName(SERIALIZED_NAME_DYNAMIC_TAG)
  private FloodlightActivityDynamicTag dynamicTag;

  public static final String SERIALIZED_NAME_SITE_ID = "siteId";
  @SerializedName(SERIALIZED_NAME_SITE_ID)
  private String siteId;

  public static final String SERIALIZED_NAME_SITE_ID_DIMENSION_VALUE = "siteIdDimensionValue";
  @SerializedName(SERIALIZED_NAME_SITE_ID_DIMENSION_VALUE)
  private DimensionValue siteIdDimensionValue;

  public static final String SERIALIZED_NAME_VIEW_THROUGH = "viewThrough";
  @SerializedName(SERIALIZED_NAME_VIEW_THROUGH)
  private Boolean viewThrough;

  public FloodlightActivityPublisherDynamicTag() {
  }

  public FloodlightActivityPublisherDynamicTag clickThrough(Boolean clickThrough) {
    this.clickThrough = clickThrough;
    return this;
  }

  /**
   * Whether this tag is applicable only for click-throughs.
   * @return clickThrough
   */
  @javax.annotation.Nullable
  public Boolean getClickThrough() {
    return clickThrough;
  }

  public void setClickThrough(Boolean clickThrough) {
    this.clickThrough = clickThrough;
  }


  public FloodlightActivityPublisherDynamicTag directorySiteId(String directorySiteId) {
    this.directorySiteId = directorySiteId;
    return this;
  }

  /**
   * Directory site ID of this dynamic tag. This is a write-only field that can be used as an alternative to the siteId field. When this resource is retrieved, only the siteId field will be populated.
   * @return directorySiteId
   */
  @javax.annotation.Nullable
  public String getDirectorySiteId() {
    return directorySiteId;
  }

  public void setDirectorySiteId(String directorySiteId) {
    this.directorySiteId = directorySiteId;
  }


  public FloodlightActivityPublisherDynamicTag dynamicTag(FloodlightActivityDynamicTag dynamicTag) {
    this.dynamicTag = dynamicTag;
    return this;
  }

  /**
   * Get dynamicTag
   * @return dynamicTag
   */
  @javax.annotation.Nullable
  public FloodlightActivityDynamicTag getDynamicTag() {
    return dynamicTag;
  }

  public void setDynamicTag(FloodlightActivityDynamicTag dynamicTag) {
    this.dynamicTag = dynamicTag;
  }


  public FloodlightActivityPublisherDynamicTag siteId(String siteId) {
    this.siteId = siteId;
    return this;
  }

  /**
   * Site ID of this dynamic tag.
   * @return siteId
   */
  @javax.annotation.Nullable
  public String getSiteId() {
    return siteId;
  }

  public void setSiteId(String siteId) {
    this.siteId = siteId;
  }


  public FloodlightActivityPublisherDynamicTag siteIdDimensionValue(DimensionValue siteIdDimensionValue) {
    this.siteIdDimensionValue = siteIdDimensionValue;
    return this;
  }

  /**
   * Get siteIdDimensionValue
   * @return siteIdDimensionValue
   */
  @javax.annotation.Nullable
  public DimensionValue getSiteIdDimensionValue() {
    return siteIdDimensionValue;
  }

  public void setSiteIdDimensionValue(DimensionValue siteIdDimensionValue) {
    this.siteIdDimensionValue = siteIdDimensionValue;
  }


  public FloodlightActivityPublisherDynamicTag viewThrough(Boolean viewThrough) {
    this.viewThrough = viewThrough;
    return this;
  }

  /**
   * Whether this tag is applicable only for view-throughs.
   * @return viewThrough
   */
  @javax.annotation.Nullable
  public Boolean getViewThrough() {
    return viewThrough;
  }

  public void setViewThrough(Boolean viewThrough) {
    this.viewThrough = viewThrough;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FloodlightActivityPublisherDynamicTag floodlightActivityPublisherDynamicTag = (FloodlightActivityPublisherDynamicTag) o;
    return Objects.equals(this.clickThrough, floodlightActivityPublisherDynamicTag.clickThrough) &&
        Objects.equals(this.directorySiteId, floodlightActivityPublisherDynamicTag.directorySiteId) &&
        Objects.equals(this.dynamicTag, floodlightActivityPublisherDynamicTag.dynamicTag) &&
        Objects.equals(this.siteId, floodlightActivityPublisherDynamicTag.siteId) &&
        Objects.equals(this.siteIdDimensionValue, floodlightActivityPublisherDynamicTag.siteIdDimensionValue) &&
        Objects.equals(this.viewThrough, floodlightActivityPublisherDynamicTag.viewThrough);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clickThrough, directorySiteId, dynamicTag, siteId, siteIdDimensionValue, viewThrough);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FloodlightActivityPublisherDynamicTag {\n");
    sb.append("    clickThrough: ").append(toIndentedString(clickThrough)).append("\n");
    sb.append("    directorySiteId: ").append(toIndentedString(directorySiteId)).append("\n");
    sb.append("    dynamicTag: ").append(toIndentedString(dynamicTag)).append("\n");
    sb.append("    siteId: ").append(toIndentedString(siteId)).append("\n");
    sb.append("    siteIdDimensionValue: ").append(toIndentedString(siteIdDimensionValue)).append("\n");
    sb.append("    viewThrough: ").append(toIndentedString(viewThrough)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clickThrough");
    openapiFields.add("directorySiteId");
    openapiFields.add("dynamicTag");
    openapiFields.add("siteId");
    openapiFields.add("siteIdDimensionValue");
    openapiFields.add("viewThrough");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FloodlightActivityPublisherDynamicTag
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FloodlightActivityPublisherDynamicTag.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FloodlightActivityPublisherDynamicTag is not found in the empty JSON string", FloodlightActivityPublisherDynamicTag.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FloodlightActivityPublisherDynamicTag.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FloodlightActivityPublisherDynamicTag` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("directorySiteId") != null && !jsonObj.get("directorySiteId").isJsonNull()) && !jsonObj.get("directorySiteId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `directorySiteId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("directorySiteId").toString()));
      }
      // validate the optional field `dynamicTag`
      if (jsonObj.get("dynamicTag") != null && !jsonObj.get("dynamicTag").isJsonNull()) {
        FloodlightActivityDynamicTag.validateJsonElement(jsonObj.get("dynamicTag"));
      }
      if ((jsonObj.get("siteId") != null && !jsonObj.get("siteId").isJsonNull()) && !jsonObj.get("siteId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `siteId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("siteId").toString()));
      }
      // validate the optional field `siteIdDimensionValue`
      if (jsonObj.get("siteIdDimensionValue") != null && !jsonObj.get("siteIdDimensionValue").isJsonNull()) {
        DimensionValue.validateJsonElement(jsonObj.get("siteIdDimensionValue"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FloodlightActivityPublisherDynamicTag.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FloodlightActivityPublisherDynamicTag' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FloodlightActivityPublisherDynamicTag> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FloodlightActivityPublisherDynamicTag.class));

       return (TypeAdapter<T>) new TypeAdapter<FloodlightActivityPublisherDynamicTag>() {
           @Override
           public void write(JsonWriter out, FloodlightActivityPublisherDynamicTag value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FloodlightActivityPublisherDynamicTag read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FloodlightActivityPublisherDynamicTag given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FloodlightActivityPublisherDynamicTag
   * @throws IOException if the JSON string is invalid with respect to FloodlightActivityPublisherDynamicTag
   */
  public static FloodlightActivityPublisherDynamicTag fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FloodlightActivityPublisherDynamicTag.class);
  }

  /**
   * Convert an instance of FloodlightActivityPublisherDynamicTag to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

