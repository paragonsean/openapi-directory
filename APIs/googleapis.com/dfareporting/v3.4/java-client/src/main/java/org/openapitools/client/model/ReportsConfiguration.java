/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LookbackConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Reporting Configuration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:16.070314-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReportsConfiguration {
  public static final String SERIALIZED_NAME_EXPOSURE_TO_CONVERSION_ENABLED = "exposureToConversionEnabled";
  @SerializedName(SERIALIZED_NAME_EXPOSURE_TO_CONVERSION_ENABLED)
  private Boolean exposureToConversionEnabled;

  public static final String SERIALIZED_NAME_LOOKBACK_CONFIGURATION = "lookbackConfiguration";
  @SerializedName(SERIALIZED_NAME_LOOKBACK_CONFIGURATION)
  private LookbackConfiguration lookbackConfiguration;

  public static final String SERIALIZED_NAME_REPORT_GENERATION_TIME_ZONE_ID = "reportGenerationTimeZoneId";
  @SerializedName(SERIALIZED_NAME_REPORT_GENERATION_TIME_ZONE_ID)
  private String reportGenerationTimeZoneId;

  public ReportsConfiguration() {
  }

  public ReportsConfiguration exposureToConversionEnabled(Boolean exposureToConversionEnabled) {
    this.exposureToConversionEnabled = exposureToConversionEnabled;
    return this;
  }

  /**
   * Whether the exposure to conversion report is enabled. This report shows detailed pathway information on up to 10 of the most recent ad exposures seen by a user before converting.
   * @return exposureToConversionEnabled
   */
  @javax.annotation.Nullable
  public Boolean getExposureToConversionEnabled() {
    return exposureToConversionEnabled;
  }

  public void setExposureToConversionEnabled(Boolean exposureToConversionEnabled) {
    this.exposureToConversionEnabled = exposureToConversionEnabled;
  }


  public ReportsConfiguration lookbackConfiguration(LookbackConfiguration lookbackConfiguration) {
    this.lookbackConfiguration = lookbackConfiguration;
    return this;
  }

  /**
   * Get lookbackConfiguration
   * @return lookbackConfiguration
   */
  @javax.annotation.Nullable
  public LookbackConfiguration getLookbackConfiguration() {
    return lookbackConfiguration;
  }

  public void setLookbackConfiguration(LookbackConfiguration lookbackConfiguration) {
    this.lookbackConfiguration = lookbackConfiguration;
  }


  public ReportsConfiguration reportGenerationTimeZoneId(String reportGenerationTimeZoneId) {
    this.reportGenerationTimeZoneId = reportGenerationTimeZoneId;
    return this;
  }

  /**
   * Report generation time zone ID of this account. This is a required field that can only be changed by a superuser. Acceptable values are: - \&quot;1\&quot; for \&quot;America/New_York\&quot; - \&quot;2\&quot; for \&quot;Europe/London\&quot; - \&quot;3\&quot; for \&quot;Europe/Paris\&quot; - \&quot;4\&quot; for \&quot;Africa/Johannesburg\&quot; - \&quot;5\&quot; for \&quot;Asia/Jerusalem\&quot; - \&quot;6\&quot; for \&quot;Asia/Shanghai\&quot; - \&quot;7\&quot; for \&quot;Asia/Hong_Kong\&quot; - \&quot;8\&quot; for \&quot;Asia/Tokyo\&quot; - \&quot;9\&quot; for \&quot;Australia/Sydney\&quot; - \&quot;10\&quot; for \&quot;Asia/Dubai\&quot; - \&quot;11\&quot; for \&quot;America/Los_Angeles\&quot; - \&quot;12\&quot; for \&quot;Pacific/Auckland\&quot; - \&quot;13\&quot; for \&quot;America/Sao_Paulo\&quot; - \&quot;16\&quot; for \&quot;America/Asuncion\&quot; - \&quot;17\&quot; for \&quot;America/Chicago\&quot; - \&quot;18\&quot; for \&quot;America/Denver\&quot; - \&quot;19\&quot; for \&quot;America/St_Johns\&quot; - \&quot;20\&quot; for \&quot;Asia/Dhaka\&quot; - \&quot;21\&quot; for \&quot;Asia/Jakarta\&quot; - \&quot;22\&quot; for \&quot;Asia/Kabul\&quot; - \&quot;23\&quot; for \&quot;Asia/Karachi\&quot; - \&quot;24\&quot; for \&quot;Asia/Calcutta\&quot; - \&quot;25\&quot; for \&quot;Asia/Pyongyang\&quot; - \&quot;26\&quot; for \&quot;Asia/Rangoon\&quot; - \&quot;27\&quot; for \&quot;Atlantic/Cape_Verde\&quot; - \&quot;28\&quot; for \&quot;Atlantic/South_Georgia\&quot; - \&quot;29\&quot; for \&quot;Australia/Adelaide\&quot; - \&quot;30\&quot; for \&quot;Australia/Lord_Howe\&quot; - \&quot;31\&quot; for \&quot;Europe/Moscow\&quot; - \&quot;32\&quot; for \&quot;Pacific/Kiritimati\&quot; - \&quot;35\&quot; for \&quot;Pacific/Norfolk\&quot; - \&quot;36\&quot; for \&quot;Pacific/Tongatapu\&quot; 
   * @return reportGenerationTimeZoneId
   */
  @javax.annotation.Nullable
  public String getReportGenerationTimeZoneId() {
    return reportGenerationTimeZoneId;
  }

  public void setReportGenerationTimeZoneId(String reportGenerationTimeZoneId) {
    this.reportGenerationTimeZoneId = reportGenerationTimeZoneId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportsConfiguration reportsConfiguration = (ReportsConfiguration) o;
    return Objects.equals(this.exposureToConversionEnabled, reportsConfiguration.exposureToConversionEnabled) &&
        Objects.equals(this.lookbackConfiguration, reportsConfiguration.lookbackConfiguration) &&
        Objects.equals(this.reportGenerationTimeZoneId, reportsConfiguration.reportGenerationTimeZoneId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exposureToConversionEnabled, lookbackConfiguration, reportGenerationTimeZoneId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportsConfiguration {\n");
    sb.append("    exposureToConversionEnabled: ").append(toIndentedString(exposureToConversionEnabled)).append("\n");
    sb.append("    lookbackConfiguration: ").append(toIndentedString(lookbackConfiguration)).append("\n");
    sb.append("    reportGenerationTimeZoneId: ").append(toIndentedString(reportGenerationTimeZoneId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("exposureToConversionEnabled");
    openapiFields.add("lookbackConfiguration");
    openapiFields.add("reportGenerationTimeZoneId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportsConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportsConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportsConfiguration is not found in the empty JSON string", ReportsConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportsConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportsConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `lookbackConfiguration`
      if (jsonObj.get("lookbackConfiguration") != null && !jsonObj.get("lookbackConfiguration").isJsonNull()) {
        LookbackConfiguration.validateJsonElement(jsonObj.get("lookbackConfiguration"));
      }
      if ((jsonObj.get("reportGenerationTimeZoneId") != null && !jsonObj.get("reportGenerationTimeZoneId").isJsonNull()) && !jsonObj.get("reportGenerationTimeZoneId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportGenerationTimeZoneId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportGenerationTimeZoneId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportsConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportsConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportsConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportsConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportsConfiguration>() {
           @Override
           public void write(JsonWriter out, ReportsConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportsConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportsConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportsConfiguration
   * @throws IOException if the JSON string is invalid with respect to ReportsConfiguration
   */
  public static ReportsConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportsConfiguration.class);
  }

  /**
   * Convert an instance of ReportsConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

