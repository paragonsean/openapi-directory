/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DimensionValue;
import org.openapitools.client.model.SiteContact;
import org.openapitools.client.model.SiteSettings;
import org.openapitools.client.model.SiteVideoSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains properties of a site.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:16.070314-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Site {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_APPROVED = "approved";
  @SerializedName(SERIALIZED_NAME_APPROVED)
  private Boolean approved;

  public static final String SERIALIZED_NAME_DIRECTORY_SITE_ID = "directorySiteId";
  @SerializedName(SERIALIZED_NAME_DIRECTORY_SITE_ID)
  private String directorySiteId;

  public static final String SERIALIZED_NAME_DIRECTORY_SITE_ID_DIMENSION_VALUE = "directorySiteIdDimensionValue";
  @SerializedName(SERIALIZED_NAME_DIRECTORY_SITE_ID_DIMENSION_VALUE)
  private DimensionValue directorySiteIdDimensionValue;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ID_DIMENSION_VALUE = "idDimensionValue";
  @SerializedName(SERIALIZED_NAME_ID_DIMENSION_VALUE)
  private DimensionValue idDimensionValue;

  public static final String SERIALIZED_NAME_KEY_NAME = "keyName";
  @SerializedName(SERIALIZED_NAME_KEY_NAME)
  private String keyName;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SITE_CONTACTS = "siteContacts";
  @SerializedName(SERIALIZED_NAME_SITE_CONTACTS)
  private List<SiteContact> siteContacts = new ArrayList<>();

  public static final String SERIALIZED_NAME_SITE_SETTINGS = "siteSettings";
  @SerializedName(SERIALIZED_NAME_SITE_SETTINGS)
  private SiteSettings siteSettings;

  public static final String SERIALIZED_NAME_SUBACCOUNT_ID = "subaccountId";
  @SerializedName(SERIALIZED_NAME_SUBACCOUNT_ID)
  private String subaccountId;

  public static final String SERIALIZED_NAME_VIDEO_SETTINGS = "videoSettings";
  @SerializedName(SERIALIZED_NAME_VIDEO_SETTINGS)
  private SiteVideoSettings videoSettings;

  public Site() {
  }

  public Site accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Account ID of this site. This is a read-only field that can be left blank.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public Site approved(Boolean approved) {
    this.approved = approved;
    return this;
  }

  /**
   * Whether this site is approved.
   * @return approved
   */
  @javax.annotation.Nullable
  public Boolean getApproved() {
    return approved;
  }

  public void setApproved(Boolean approved) {
    this.approved = approved;
  }


  public Site directorySiteId(String directorySiteId) {
    this.directorySiteId = directorySiteId;
    return this;
  }

  /**
   * Directory site associated with this site. This is a required field that is read-only after insertion.
   * @return directorySiteId
   */
  @javax.annotation.Nullable
  public String getDirectorySiteId() {
    return directorySiteId;
  }

  public void setDirectorySiteId(String directorySiteId) {
    this.directorySiteId = directorySiteId;
  }


  public Site directorySiteIdDimensionValue(DimensionValue directorySiteIdDimensionValue) {
    this.directorySiteIdDimensionValue = directorySiteIdDimensionValue;
    return this;
  }

  /**
   * Get directorySiteIdDimensionValue
   * @return directorySiteIdDimensionValue
   */
  @javax.annotation.Nullable
  public DimensionValue getDirectorySiteIdDimensionValue() {
    return directorySiteIdDimensionValue;
  }

  public void setDirectorySiteIdDimensionValue(DimensionValue directorySiteIdDimensionValue) {
    this.directorySiteIdDimensionValue = directorySiteIdDimensionValue;
  }


  public Site id(String id) {
    this.id = id;
    return this;
  }

  /**
   * ID of this site. This is a read-only, auto-generated field.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Site idDimensionValue(DimensionValue idDimensionValue) {
    this.idDimensionValue = idDimensionValue;
    return this;
  }

  /**
   * Get idDimensionValue
   * @return idDimensionValue
   */
  @javax.annotation.Nullable
  public DimensionValue getIdDimensionValue() {
    return idDimensionValue;
  }

  public void setIdDimensionValue(DimensionValue idDimensionValue) {
    this.idDimensionValue = idDimensionValue;
  }


  public Site keyName(String keyName) {
    this.keyName = keyName;
    return this;
  }

  /**
   * Key name of this site. This is a read-only, auto-generated field.
   * @return keyName
   */
  @javax.annotation.Nullable
  public String getKeyName() {
    return keyName;
  }

  public void setKeyName(String keyName) {
    this.keyName = keyName;
  }


  public Site kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string \&quot;dfareporting#site\&quot;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Site name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of this site.This is a required field. Must be less than 128 characters long. If this site is under a subaccount, the name must be unique among sites of the same subaccount. Otherwise, this site is a top-level site, and the name must be unique among top-level sites of the same account.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Site siteContacts(List<SiteContact> siteContacts) {
    this.siteContacts = siteContacts;
    return this;
  }

  public Site addSiteContactsItem(SiteContact siteContactsItem) {
    if (this.siteContacts == null) {
      this.siteContacts = new ArrayList<>();
    }
    this.siteContacts.add(siteContactsItem);
    return this;
  }

  /**
   * Site contacts.
   * @return siteContacts
   */
  @javax.annotation.Nullable
  public List<SiteContact> getSiteContacts() {
    return siteContacts;
  }

  public void setSiteContacts(List<SiteContact> siteContacts) {
    this.siteContacts = siteContacts;
  }


  public Site siteSettings(SiteSettings siteSettings) {
    this.siteSettings = siteSettings;
    return this;
  }

  /**
   * Get siteSettings
   * @return siteSettings
   */
  @javax.annotation.Nullable
  public SiteSettings getSiteSettings() {
    return siteSettings;
  }

  public void setSiteSettings(SiteSettings siteSettings) {
    this.siteSettings = siteSettings;
  }


  public Site subaccountId(String subaccountId) {
    this.subaccountId = subaccountId;
    return this;
  }

  /**
   * Subaccount ID of this site. This is a read-only field that can be left blank.
   * @return subaccountId
   */
  @javax.annotation.Nullable
  public String getSubaccountId() {
    return subaccountId;
  }

  public void setSubaccountId(String subaccountId) {
    this.subaccountId = subaccountId;
  }


  public Site videoSettings(SiteVideoSettings videoSettings) {
    this.videoSettings = videoSettings;
    return this;
  }

  /**
   * Get videoSettings
   * @return videoSettings
   */
  @javax.annotation.Nullable
  public SiteVideoSettings getVideoSettings() {
    return videoSettings;
  }

  public void setVideoSettings(SiteVideoSettings videoSettings) {
    this.videoSettings = videoSettings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Site site = (Site) o;
    return Objects.equals(this.accountId, site.accountId) &&
        Objects.equals(this.approved, site.approved) &&
        Objects.equals(this.directorySiteId, site.directorySiteId) &&
        Objects.equals(this.directorySiteIdDimensionValue, site.directorySiteIdDimensionValue) &&
        Objects.equals(this.id, site.id) &&
        Objects.equals(this.idDimensionValue, site.idDimensionValue) &&
        Objects.equals(this.keyName, site.keyName) &&
        Objects.equals(this.kind, site.kind) &&
        Objects.equals(this.name, site.name) &&
        Objects.equals(this.siteContacts, site.siteContacts) &&
        Objects.equals(this.siteSettings, site.siteSettings) &&
        Objects.equals(this.subaccountId, site.subaccountId) &&
        Objects.equals(this.videoSettings, site.videoSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, approved, directorySiteId, directorySiteIdDimensionValue, id, idDimensionValue, keyName, kind, name, siteContacts, siteSettings, subaccountId, videoSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Site {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    approved: ").append(toIndentedString(approved)).append("\n");
    sb.append("    directorySiteId: ").append(toIndentedString(directorySiteId)).append("\n");
    sb.append("    directorySiteIdDimensionValue: ").append(toIndentedString(directorySiteIdDimensionValue)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    idDimensionValue: ").append(toIndentedString(idDimensionValue)).append("\n");
    sb.append("    keyName: ").append(toIndentedString(keyName)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    siteContacts: ").append(toIndentedString(siteContacts)).append("\n");
    sb.append("    siteSettings: ").append(toIndentedString(siteSettings)).append("\n");
    sb.append("    subaccountId: ").append(toIndentedString(subaccountId)).append("\n");
    sb.append("    videoSettings: ").append(toIndentedString(videoSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("approved");
    openapiFields.add("directorySiteId");
    openapiFields.add("directorySiteIdDimensionValue");
    openapiFields.add("id");
    openapiFields.add("idDimensionValue");
    openapiFields.add("keyName");
    openapiFields.add("kind");
    openapiFields.add("name");
    openapiFields.add("siteContacts");
    openapiFields.add("siteSettings");
    openapiFields.add("subaccountId");
    openapiFields.add("videoSettings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Site
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Site.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Site is not found in the empty JSON string", Site.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Site.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Site` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if ((jsonObj.get("directorySiteId") != null && !jsonObj.get("directorySiteId").isJsonNull()) && !jsonObj.get("directorySiteId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `directorySiteId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("directorySiteId").toString()));
      }
      // validate the optional field `directorySiteIdDimensionValue`
      if (jsonObj.get("directorySiteIdDimensionValue") != null && !jsonObj.get("directorySiteIdDimensionValue").isJsonNull()) {
        DimensionValue.validateJsonElement(jsonObj.get("directorySiteIdDimensionValue"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `idDimensionValue`
      if (jsonObj.get("idDimensionValue") != null && !jsonObj.get("idDimensionValue").isJsonNull()) {
        DimensionValue.validateJsonElement(jsonObj.get("idDimensionValue"));
      }
      if ((jsonObj.get("keyName") != null && !jsonObj.get("keyName").isJsonNull()) && !jsonObj.get("keyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyName").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("siteContacts") != null && !jsonObj.get("siteContacts").isJsonNull()) {
        JsonArray jsonArraysiteContacts = jsonObj.getAsJsonArray("siteContacts");
        if (jsonArraysiteContacts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("siteContacts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `siteContacts` to be an array in the JSON string but got `%s`", jsonObj.get("siteContacts").toString()));
          }

          // validate the optional field `siteContacts` (array)
          for (int i = 0; i < jsonArraysiteContacts.size(); i++) {
            SiteContact.validateJsonElement(jsonArraysiteContacts.get(i));
          };
        }
      }
      // validate the optional field `siteSettings`
      if (jsonObj.get("siteSettings") != null && !jsonObj.get("siteSettings").isJsonNull()) {
        SiteSettings.validateJsonElement(jsonObj.get("siteSettings"));
      }
      if ((jsonObj.get("subaccountId") != null && !jsonObj.get("subaccountId").isJsonNull()) && !jsonObj.get("subaccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subaccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subaccountId").toString()));
      }
      // validate the optional field `videoSettings`
      if (jsonObj.get("videoSettings") != null && !jsonObj.get("videoSettings").isJsonNull()) {
        SiteVideoSettings.validateJsonElement(jsonObj.get("videoSettings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Site.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Site' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Site> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Site.class));

       return (TypeAdapter<T>) new TypeAdapter<Site>() {
           @Override
           public void write(JsonWriter out, Site value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Site read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Site given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Site
   * @throws IOException if the JSON string is invalid with respect to Site
   */
  public static Site fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Site.class);
  }

  /**
   * Convert an instance of Site to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

