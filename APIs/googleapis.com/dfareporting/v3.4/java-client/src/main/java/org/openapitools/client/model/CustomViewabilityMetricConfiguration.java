/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The attributes, like playtime and percent onscreen, that define the Custom Viewability Metric.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:16.070314-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CustomViewabilityMetricConfiguration {
  public static final String SERIALIZED_NAME_AUDIBLE = "audible";
  @SerializedName(SERIALIZED_NAME_AUDIBLE)
  private Boolean audible;

  public static final String SERIALIZED_NAME_TIME_MILLIS = "timeMillis";
  @SerializedName(SERIALIZED_NAME_TIME_MILLIS)
  private Integer timeMillis;

  public static final String SERIALIZED_NAME_TIME_PERCENT = "timePercent";
  @SerializedName(SERIALIZED_NAME_TIME_PERCENT)
  private Integer timePercent;

  public static final String SERIALIZED_NAME_VIEWABILITY_PERCENT = "viewabilityPercent";
  @SerializedName(SERIALIZED_NAME_VIEWABILITY_PERCENT)
  private Integer viewabilityPercent;

  public CustomViewabilityMetricConfiguration() {
  }

  public CustomViewabilityMetricConfiguration audible(Boolean audible) {
    this.audible = audible;
    return this;
  }

  /**
   * Whether the video must be audible to count an impression.
   * @return audible
   */
  @javax.annotation.Nullable
  public Boolean getAudible() {
    return audible;
  }

  public void setAudible(Boolean audible) {
    this.audible = audible;
  }


  public CustomViewabilityMetricConfiguration timeMillis(Integer timeMillis) {
    this.timeMillis = timeMillis;
    return this;
  }

  /**
   * The time in milliseconds the video must play for the Custom Viewability Metric to count an impression. If both this and timePercent are specified, the earlier of the two will be used.
   * @return timeMillis
   */
  @javax.annotation.Nullable
  public Integer getTimeMillis() {
    return timeMillis;
  }

  public void setTimeMillis(Integer timeMillis) {
    this.timeMillis = timeMillis;
  }


  public CustomViewabilityMetricConfiguration timePercent(Integer timePercent) {
    this.timePercent = timePercent;
    return this;
  }

  /**
   * The percentage of video that must play for the Custom Viewability Metric to count an impression. If both this and timeMillis are specified, the earlier of the two will be used.
   * @return timePercent
   */
  @javax.annotation.Nullable
  public Integer getTimePercent() {
    return timePercent;
  }

  public void setTimePercent(Integer timePercent) {
    this.timePercent = timePercent;
  }


  public CustomViewabilityMetricConfiguration viewabilityPercent(Integer viewabilityPercent) {
    this.viewabilityPercent = viewabilityPercent;
    return this;
  }

  /**
   * The percentage of video that must be on screen for the Custom Viewability Metric to count an impression.
   * @return viewabilityPercent
   */
  @javax.annotation.Nullable
  public Integer getViewabilityPercent() {
    return viewabilityPercent;
  }

  public void setViewabilityPercent(Integer viewabilityPercent) {
    this.viewabilityPercent = viewabilityPercent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomViewabilityMetricConfiguration customViewabilityMetricConfiguration = (CustomViewabilityMetricConfiguration) o;
    return Objects.equals(this.audible, customViewabilityMetricConfiguration.audible) &&
        Objects.equals(this.timeMillis, customViewabilityMetricConfiguration.timeMillis) &&
        Objects.equals(this.timePercent, customViewabilityMetricConfiguration.timePercent) &&
        Objects.equals(this.viewabilityPercent, customViewabilityMetricConfiguration.viewabilityPercent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audible, timeMillis, timePercent, viewabilityPercent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomViewabilityMetricConfiguration {\n");
    sb.append("    audible: ").append(toIndentedString(audible)).append("\n");
    sb.append("    timeMillis: ").append(toIndentedString(timeMillis)).append("\n");
    sb.append("    timePercent: ").append(toIndentedString(timePercent)).append("\n");
    sb.append("    viewabilityPercent: ").append(toIndentedString(viewabilityPercent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("audible");
    openapiFields.add("timeMillis");
    openapiFields.add("timePercent");
    openapiFields.add("viewabilityPercent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomViewabilityMetricConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomViewabilityMetricConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomViewabilityMetricConfiguration is not found in the empty JSON string", CustomViewabilityMetricConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomViewabilityMetricConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomViewabilityMetricConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomViewabilityMetricConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomViewabilityMetricConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomViewabilityMetricConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomViewabilityMetricConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomViewabilityMetricConfiguration>() {
           @Override
           public void write(JsonWriter out, CustomViewabilityMetricConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomViewabilityMetricConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomViewabilityMetricConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomViewabilityMetricConfiguration
   * @throws IOException if the JSON string is invalid with respect to CustomViewabilityMetricConfiguration
   */
  public static CustomViewabilityMetricConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomViewabilityMetricConfiguration.class);
  }

  /**
   * Convert an instance of CustomViewabilityMetricConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

