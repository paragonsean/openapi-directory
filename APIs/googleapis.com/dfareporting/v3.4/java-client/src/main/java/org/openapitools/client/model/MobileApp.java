/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about a mobile app. Used as a landing page deep link.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:16.070314-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MobileApp {
  /**
   * Mobile app directory.
   */
  @JsonAdapter(DirectoryEnum.Adapter.class)
  public enum DirectoryEnum {
    UNKNOWN("UNKNOWN"),
    
    APPLE_APP_STORE("APPLE_APP_STORE"),
    
    GOOGLE_PLAY_STORE("GOOGLE_PLAY_STORE"),
    
    ROKU_APP_STORE("ROKU_APP_STORE"),
    
    AMAZON_FIRETV_APP_STORE("AMAZON_FIRETV_APP_STORE"),
    
    PLAYSTATION_APP_STORE("PLAYSTATION_APP_STORE"),
    
    APPLE_TV_APP_STORE("APPLE_TV_APP_STORE"),
    
    XBOX_APP_STORE("XBOX_APP_STORE"),
    
    SAMSUNG_TV_APP_STORE("SAMSUNG_TV_APP_STORE"),
    
    ANDROID_TV_APP_STORE("ANDROID_TV_APP_STORE"),
    
    GENERIC_CTV_APP_STORE("GENERIC_CTV_APP_STORE");

    private String value;

    DirectoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DirectoryEnum fromValue(String value) {
      for (DirectoryEnum b : DirectoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DirectoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DirectoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DirectoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DirectoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DirectoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DIRECTORY = "directory";
  @SerializedName(SERIALIZED_NAME_DIRECTORY)
  private DirectoryEnum directory;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_PUBLISHER_NAME = "publisherName";
  @SerializedName(SERIALIZED_NAME_PUBLISHER_NAME)
  private String publisherName;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public MobileApp() {
  }

  public MobileApp directory(DirectoryEnum directory) {
    this.directory = directory;
    return this;
  }

  /**
   * Mobile app directory.
   * @return directory
   */
  @javax.annotation.Nullable
  public DirectoryEnum getDirectory() {
    return directory;
  }

  public void setDirectory(DirectoryEnum directory) {
    this.directory = directory;
  }


  public MobileApp id(String id) {
    this.id = id;
    return this;
  }

  /**
   * ID of this mobile app.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public MobileApp kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string \&quot;dfareporting#mobileApp\&quot;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public MobileApp publisherName(String publisherName) {
    this.publisherName = publisherName;
    return this;
  }

  /**
   * Publisher name.
   * @return publisherName
   */
  @javax.annotation.Nullable
  public String getPublisherName() {
    return publisherName;
  }

  public void setPublisherName(String publisherName) {
    this.publisherName = publisherName;
  }


  public MobileApp title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title of this mobile app.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MobileApp mobileApp = (MobileApp) o;
    return Objects.equals(this.directory, mobileApp.directory) &&
        Objects.equals(this.id, mobileApp.id) &&
        Objects.equals(this.kind, mobileApp.kind) &&
        Objects.equals(this.publisherName, mobileApp.publisherName) &&
        Objects.equals(this.title, mobileApp.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(directory, id, kind, publisherName, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MobileApp {\n");
    sb.append("    directory: ").append(toIndentedString(directory)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    publisherName: ").append(toIndentedString(publisherName)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("directory");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("publisherName");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MobileApp
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MobileApp.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MobileApp is not found in the empty JSON string", MobileApp.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MobileApp.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MobileApp` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("directory") != null && !jsonObj.get("directory").isJsonNull()) && !jsonObj.get("directory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `directory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("directory").toString()));
      }
      // validate the optional field `directory`
      if (jsonObj.get("directory") != null && !jsonObj.get("directory").isJsonNull()) {
        DirectoryEnum.validateJsonElement(jsonObj.get("directory"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("publisherName") != null && !jsonObj.get("publisherName").isJsonNull()) && !jsonObj.get("publisherName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publisherName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publisherName").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MobileApp.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MobileApp' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MobileApp> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MobileApp.class));

       return (TypeAdapter<T>) new TypeAdapter<MobileApp>() {
           @Override
           public void write(JsonWriter out, MobileApp value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MobileApp read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MobileApp given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MobileApp
   * @throws IOException if the JSON string is invalid with respect to MobileApp
   */
  public static MobileApp fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MobileApp.class);
  }

  /**
   * Convert an instance of MobileApp to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

