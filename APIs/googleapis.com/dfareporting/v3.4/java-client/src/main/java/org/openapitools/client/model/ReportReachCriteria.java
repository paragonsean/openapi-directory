/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Activities;
import org.openapitools.client.model.CustomRichMediaEvents;
import org.openapitools.client.model.DateRange;
import org.openapitools.client.model.DimensionValue;
import org.openapitools.client.model.SortedDimension;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The report criteria for a report of type \&quot;REACH\&quot;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:16.070314-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReportReachCriteria {
  public static final String SERIALIZED_NAME_ACTIVITIES = "activities";
  @SerializedName(SERIALIZED_NAME_ACTIVITIES)
  private Activities activities;

  public static final String SERIALIZED_NAME_CUSTOM_RICH_MEDIA_EVENTS = "customRichMediaEvents";
  @SerializedName(SERIALIZED_NAME_CUSTOM_RICH_MEDIA_EVENTS)
  private CustomRichMediaEvents customRichMediaEvents;

  public static final String SERIALIZED_NAME_DATE_RANGE = "dateRange";
  @SerializedName(SERIALIZED_NAME_DATE_RANGE)
  private DateRange dateRange;

  public static final String SERIALIZED_NAME_DIMENSION_FILTERS = "dimensionFilters";
  @SerializedName(SERIALIZED_NAME_DIMENSION_FILTERS)
  private List<DimensionValue> dimensionFilters = new ArrayList<>();

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private List<SortedDimension> dimensions = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENABLE_ALL_DIMENSION_COMBINATIONS = "enableAllDimensionCombinations";
  @SerializedName(SERIALIZED_NAME_ENABLE_ALL_DIMENSION_COMBINATIONS)
  private Boolean enableAllDimensionCombinations;

  public static final String SERIALIZED_NAME_METRIC_NAMES = "metricNames";
  @SerializedName(SERIALIZED_NAME_METRIC_NAMES)
  private List<String> metricNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_REACH_BY_FREQUENCY_METRIC_NAMES = "reachByFrequencyMetricNames";
  @SerializedName(SERIALIZED_NAME_REACH_BY_FREQUENCY_METRIC_NAMES)
  private List<String> reachByFrequencyMetricNames = new ArrayList<>();

  public ReportReachCriteria() {
  }

  public ReportReachCriteria activities(Activities activities) {
    this.activities = activities;
    return this;
  }

  /**
   * Get activities
   * @return activities
   */
  @javax.annotation.Nullable
  public Activities getActivities() {
    return activities;
  }

  public void setActivities(Activities activities) {
    this.activities = activities;
  }


  public ReportReachCriteria customRichMediaEvents(CustomRichMediaEvents customRichMediaEvents) {
    this.customRichMediaEvents = customRichMediaEvents;
    return this;
  }

  /**
   * Get customRichMediaEvents
   * @return customRichMediaEvents
   */
  @javax.annotation.Nullable
  public CustomRichMediaEvents getCustomRichMediaEvents() {
    return customRichMediaEvents;
  }

  public void setCustomRichMediaEvents(CustomRichMediaEvents customRichMediaEvents) {
    this.customRichMediaEvents = customRichMediaEvents;
  }


  public ReportReachCriteria dateRange(DateRange dateRange) {
    this.dateRange = dateRange;
    return this;
  }

  /**
   * Get dateRange
   * @return dateRange
   */
  @javax.annotation.Nullable
  public DateRange getDateRange() {
    return dateRange;
  }

  public void setDateRange(DateRange dateRange) {
    this.dateRange = dateRange;
  }


  public ReportReachCriteria dimensionFilters(List<DimensionValue> dimensionFilters) {
    this.dimensionFilters = dimensionFilters;
    return this;
  }

  public ReportReachCriteria addDimensionFiltersItem(DimensionValue dimensionFiltersItem) {
    if (this.dimensionFilters == null) {
      this.dimensionFilters = new ArrayList<>();
    }
    this.dimensionFilters.add(dimensionFiltersItem);
    return this;
  }

  /**
   * The list of filters on which dimensions are filtered. Filters for different dimensions are ANDed, filters for the same dimension are grouped together and ORed.
   * @return dimensionFilters
   */
  @javax.annotation.Nullable
  public List<DimensionValue> getDimensionFilters() {
    return dimensionFilters;
  }

  public void setDimensionFilters(List<DimensionValue> dimensionFilters) {
    this.dimensionFilters = dimensionFilters;
  }


  public ReportReachCriteria dimensions(List<SortedDimension> dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  public ReportReachCriteria addDimensionsItem(SortedDimension dimensionsItem) {
    if (this.dimensions == null) {
      this.dimensions = new ArrayList<>();
    }
    this.dimensions.add(dimensionsItem);
    return this;
  }

  /**
   * The list of dimensions the report should include.
   * @return dimensions
   */
  @javax.annotation.Nullable
  public List<SortedDimension> getDimensions() {
    return dimensions;
  }

  public void setDimensions(List<SortedDimension> dimensions) {
    this.dimensions = dimensions;
  }


  public ReportReachCriteria enableAllDimensionCombinations(Boolean enableAllDimensionCombinations) {
    this.enableAllDimensionCombinations = enableAllDimensionCombinations;
    return this;
  }

  /**
   * Whether to enable all reach dimension combinations in the report. Defaults to false. If enabled, the date range of the report should be within the last 42 days.
   * @return enableAllDimensionCombinations
   */
  @javax.annotation.Nullable
  public Boolean getEnableAllDimensionCombinations() {
    return enableAllDimensionCombinations;
  }

  public void setEnableAllDimensionCombinations(Boolean enableAllDimensionCombinations) {
    this.enableAllDimensionCombinations = enableAllDimensionCombinations;
  }


  public ReportReachCriteria metricNames(List<String> metricNames) {
    this.metricNames = metricNames;
    return this;
  }

  public ReportReachCriteria addMetricNamesItem(String metricNamesItem) {
    if (this.metricNames == null) {
      this.metricNames = new ArrayList<>();
    }
    this.metricNames.add(metricNamesItem);
    return this;
  }

  /**
   * The list of names of metrics the report should include.
   * @return metricNames
   */
  @javax.annotation.Nullable
  public List<String> getMetricNames() {
    return metricNames;
  }

  public void setMetricNames(List<String> metricNames) {
    this.metricNames = metricNames;
  }


  public ReportReachCriteria reachByFrequencyMetricNames(List<String> reachByFrequencyMetricNames) {
    this.reachByFrequencyMetricNames = reachByFrequencyMetricNames;
    return this;
  }

  public ReportReachCriteria addReachByFrequencyMetricNamesItem(String reachByFrequencyMetricNamesItem) {
    if (this.reachByFrequencyMetricNames == null) {
      this.reachByFrequencyMetricNames = new ArrayList<>();
    }
    this.reachByFrequencyMetricNames.add(reachByFrequencyMetricNamesItem);
    return this;
  }

  /**
   * The list of names of Reach By Frequency metrics the report should include.
   * @return reachByFrequencyMetricNames
   */
  @javax.annotation.Nullable
  public List<String> getReachByFrequencyMetricNames() {
    return reachByFrequencyMetricNames;
  }

  public void setReachByFrequencyMetricNames(List<String> reachByFrequencyMetricNames) {
    this.reachByFrequencyMetricNames = reachByFrequencyMetricNames;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportReachCriteria reportReachCriteria = (ReportReachCriteria) o;
    return Objects.equals(this.activities, reportReachCriteria.activities) &&
        Objects.equals(this.customRichMediaEvents, reportReachCriteria.customRichMediaEvents) &&
        Objects.equals(this.dateRange, reportReachCriteria.dateRange) &&
        Objects.equals(this.dimensionFilters, reportReachCriteria.dimensionFilters) &&
        Objects.equals(this.dimensions, reportReachCriteria.dimensions) &&
        Objects.equals(this.enableAllDimensionCombinations, reportReachCriteria.enableAllDimensionCombinations) &&
        Objects.equals(this.metricNames, reportReachCriteria.metricNames) &&
        Objects.equals(this.reachByFrequencyMetricNames, reportReachCriteria.reachByFrequencyMetricNames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activities, customRichMediaEvents, dateRange, dimensionFilters, dimensions, enableAllDimensionCombinations, metricNames, reachByFrequencyMetricNames);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportReachCriteria {\n");
    sb.append("    activities: ").append(toIndentedString(activities)).append("\n");
    sb.append("    customRichMediaEvents: ").append(toIndentedString(customRichMediaEvents)).append("\n");
    sb.append("    dateRange: ").append(toIndentedString(dateRange)).append("\n");
    sb.append("    dimensionFilters: ").append(toIndentedString(dimensionFilters)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    enableAllDimensionCombinations: ").append(toIndentedString(enableAllDimensionCombinations)).append("\n");
    sb.append("    metricNames: ").append(toIndentedString(metricNames)).append("\n");
    sb.append("    reachByFrequencyMetricNames: ").append(toIndentedString(reachByFrequencyMetricNames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activities");
    openapiFields.add("customRichMediaEvents");
    openapiFields.add("dateRange");
    openapiFields.add("dimensionFilters");
    openapiFields.add("dimensions");
    openapiFields.add("enableAllDimensionCombinations");
    openapiFields.add("metricNames");
    openapiFields.add("reachByFrequencyMetricNames");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportReachCriteria
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportReachCriteria.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportReachCriteria is not found in the empty JSON string", ReportReachCriteria.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportReachCriteria.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportReachCriteria` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `activities`
      if (jsonObj.get("activities") != null && !jsonObj.get("activities").isJsonNull()) {
        Activities.validateJsonElement(jsonObj.get("activities"));
      }
      // validate the optional field `customRichMediaEvents`
      if (jsonObj.get("customRichMediaEvents") != null && !jsonObj.get("customRichMediaEvents").isJsonNull()) {
        CustomRichMediaEvents.validateJsonElement(jsonObj.get("customRichMediaEvents"));
      }
      // validate the optional field `dateRange`
      if (jsonObj.get("dateRange") != null && !jsonObj.get("dateRange").isJsonNull()) {
        DateRange.validateJsonElement(jsonObj.get("dateRange"));
      }
      if (jsonObj.get("dimensionFilters") != null && !jsonObj.get("dimensionFilters").isJsonNull()) {
        JsonArray jsonArraydimensionFilters = jsonObj.getAsJsonArray("dimensionFilters");
        if (jsonArraydimensionFilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dimensionFilters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dimensionFilters` to be an array in the JSON string but got `%s`", jsonObj.get("dimensionFilters").toString()));
          }

          // validate the optional field `dimensionFilters` (array)
          for (int i = 0; i < jsonArraydimensionFilters.size(); i++) {
            DimensionValue.validateJsonElement(jsonArraydimensionFilters.get(i));
          };
        }
      }
      if (jsonObj.get("dimensions") != null && !jsonObj.get("dimensions").isJsonNull()) {
        JsonArray jsonArraydimensions = jsonObj.getAsJsonArray("dimensions");
        if (jsonArraydimensions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dimensions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dimensions` to be an array in the JSON string but got `%s`", jsonObj.get("dimensions").toString()));
          }

          // validate the optional field `dimensions` (array)
          for (int i = 0; i < jsonArraydimensions.size(); i++) {
            SortedDimension.validateJsonElement(jsonArraydimensions.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("metricNames") != null && !jsonObj.get("metricNames").isJsonNull() && !jsonObj.get("metricNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `metricNames` to be an array in the JSON string but got `%s`", jsonObj.get("metricNames").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("reachByFrequencyMetricNames") != null && !jsonObj.get("reachByFrequencyMetricNames").isJsonNull() && !jsonObj.get("reachByFrequencyMetricNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `reachByFrequencyMetricNames` to be an array in the JSON string but got `%s`", jsonObj.get("reachByFrequencyMetricNames").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportReachCriteria.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportReachCriteria' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportReachCriteria> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportReachCriteria.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportReachCriteria>() {
           @Override
           public void write(JsonWriter out, ReportReachCriteria value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportReachCriteria read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportReachCriteria given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportReachCriteria
   * @throws IOException if the JSON string is invalid with respect to ReportReachCriteria
   */
  public static ReportReachCriteria fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportReachCriteria.class);
  }

  /**
   * Convert an instance of ReportReachCriteria to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

