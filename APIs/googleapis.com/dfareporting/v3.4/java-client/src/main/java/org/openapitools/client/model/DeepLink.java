/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MobileApp;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about a landing page deep link.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:16.070314-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeepLink {
  public static final String SERIALIZED_NAME_APP_URL = "appUrl";
  @SerializedName(SERIALIZED_NAME_APP_URL)
  private String appUrl;

  public static final String SERIALIZED_NAME_FALLBACK_URL = "fallbackUrl";
  @SerializedName(SERIALIZED_NAME_FALLBACK_URL)
  private String fallbackUrl;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_MOBILE_APP = "mobileApp";
  @SerializedName(SERIALIZED_NAME_MOBILE_APP)
  private MobileApp mobileApp;

  public static final String SERIALIZED_NAME_REMARKETING_LIST_IDS = "remarketingListIds";
  @SerializedName(SERIALIZED_NAME_REMARKETING_LIST_IDS)
  private List<String> remarketingListIds = new ArrayList<>();

  public DeepLink() {
  }

  public DeepLink appUrl(String appUrl) {
    this.appUrl = appUrl;
    return this;
  }

  /**
   * The URL of the mobile app being linked to.
   * @return appUrl
   */
  @javax.annotation.Nullable
  public String getAppUrl() {
    return appUrl;
  }

  public void setAppUrl(String appUrl) {
    this.appUrl = appUrl;
  }


  public DeepLink fallbackUrl(String fallbackUrl) {
    this.fallbackUrl = fallbackUrl;
    return this;
  }

  /**
   * The fallback URL. This URL will be served to users who do not have the mobile app installed.
   * @return fallbackUrl
   */
  @javax.annotation.Nullable
  public String getFallbackUrl() {
    return fallbackUrl;
  }

  public void setFallbackUrl(String fallbackUrl) {
    this.fallbackUrl = fallbackUrl;
  }


  public DeepLink kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string \&quot;dfareporting#deepLink\&quot;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public DeepLink mobileApp(MobileApp mobileApp) {
    this.mobileApp = mobileApp;
    return this;
  }

  /**
   * Get mobileApp
   * @return mobileApp
   */
  @javax.annotation.Nullable
  public MobileApp getMobileApp() {
    return mobileApp;
  }

  public void setMobileApp(MobileApp mobileApp) {
    this.mobileApp = mobileApp;
  }


  public DeepLink remarketingListIds(List<String> remarketingListIds) {
    this.remarketingListIds = remarketingListIds;
    return this;
  }

  public DeepLink addRemarketingListIdsItem(String remarketingListIdsItem) {
    if (this.remarketingListIds == null) {
      this.remarketingListIds = new ArrayList<>();
    }
    this.remarketingListIds.add(remarketingListIdsItem);
    return this;
  }

  /**
   * Ads served to users on these remarketing lists will use this deep link. Applicable when mobileApp.directory is APPLE_APP_STORE.
   * @return remarketingListIds
   */
  @javax.annotation.Nullable
  public List<String> getRemarketingListIds() {
    return remarketingListIds;
  }

  public void setRemarketingListIds(List<String> remarketingListIds) {
    this.remarketingListIds = remarketingListIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeepLink deepLink = (DeepLink) o;
    return Objects.equals(this.appUrl, deepLink.appUrl) &&
        Objects.equals(this.fallbackUrl, deepLink.fallbackUrl) &&
        Objects.equals(this.kind, deepLink.kind) &&
        Objects.equals(this.mobileApp, deepLink.mobileApp) &&
        Objects.equals(this.remarketingListIds, deepLink.remarketingListIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appUrl, fallbackUrl, kind, mobileApp, remarketingListIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeepLink {\n");
    sb.append("    appUrl: ").append(toIndentedString(appUrl)).append("\n");
    sb.append("    fallbackUrl: ").append(toIndentedString(fallbackUrl)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    mobileApp: ").append(toIndentedString(mobileApp)).append("\n");
    sb.append("    remarketingListIds: ").append(toIndentedString(remarketingListIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appUrl");
    openapiFields.add("fallbackUrl");
    openapiFields.add("kind");
    openapiFields.add("mobileApp");
    openapiFields.add("remarketingListIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeepLink
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeepLink.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeepLink is not found in the empty JSON string", DeepLink.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeepLink.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeepLink` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("appUrl") != null && !jsonObj.get("appUrl").isJsonNull()) && !jsonObj.get("appUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appUrl").toString()));
      }
      if ((jsonObj.get("fallbackUrl") != null && !jsonObj.get("fallbackUrl").isJsonNull()) && !jsonObj.get("fallbackUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fallbackUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fallbackUrl").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `mobileApp`
      if (jsonObj.get("mobileApp") != null && !jsonObj.get("mobileApp").isJsonNull()) {
        MobileApp.validateJsonElement(jsonObj.get("mobileApp"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("remarketingListIds") != null && !jsonObj.get("remarketingListIds").isJsonNull() && !jsonObj.get("remarketingListIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `remarketingListIds` to be an array in the JSON string but got `%s`", jsonObj.get("remarketingListIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeepLink.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeepLink' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeepLink> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeepLink.class));

       return (TypeAdapter<T>) new TypeAdapter<DeepLink>() {
           @Override
           public void write(JsonWriter out, DeepLink value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeepLink read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeepLink given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeepLink
   * @throws IOException if the JSON string is invalid with respect to DeepLink
   */
  public static DeepLink fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeepLink.class);
  }

  /**
   * Convert an instance of DeepLink to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

