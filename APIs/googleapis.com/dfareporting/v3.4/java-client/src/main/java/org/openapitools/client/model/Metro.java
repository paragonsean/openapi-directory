/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about a metro region that can be targeted by ads.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:16.070314-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Metro {
  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_COUNTRY_DART_ID = "countryDartId";
  @SerializedName(SERIALIZED_NAME_COUNTRY_DART_ID)
  private String countryDartId;

  public static final String SERIALIZED_NAME_DART_ID = "dartId";
  @SerializedName(SERIALIZED_NAME_DART_ID)
  private String dartId;

  public static final String SERIALIZED_NAME_DMA_ID = "dmaId";
  @SerializedName(SERIALIZED_NAME_DMA_ID)
  private String dmaId;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_METRO_CODE = "metroCode";
  @SerializedName(SERIALIZED_NAME_METRO_CODE)
  private String metroCode;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public Metro() {
  }

  public Metro countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * Country code of the country to which this metro region belongs.
   * @return countryCode
   */
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public Metro countryDartId(String countryDartId) {
    this.countryDartId = countryDartId;
    return this;
  }

  /**
   * DART ID of the country to which this metro region belongs.
   * @return countryDartId
   */
  @javax.annotation.Nullable
  public String getCountryDartId() {
    return countryDartId;
  }

  public void setCountryDartId(String countryDartId) {
    this.countryDartId = countryDartId;
  }


  public Metro dartId(String dartId) {
    this.dartId = dartId;
    return this;
  }

  /**
   * DART ID of this metro region.
   * @return dartId
   */
  @javax.annotation.Nullable
  public String getDartId() {
    return dartId;
  }

  public void setDartId(String dartId) {
    this.dartId = dartId;
  }


  public Metro dmaId(String dmaId) {
    this.dmaId = dmaId;
    return this;
  }

  /**
   * DMA ID of this metro region. This is the ID used for targeting and generating reports, and is equivalent to metro_code.
   * @return dmaId
   */
  @javax.annotation.Nullable
  public String getDmaId() {
    return dmaId;
  }

  public void setDmaId(String dmaId) {
    this.dmaId = dmaId;
  }


  public Metro kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string \&quot;dfareporting#metro\&quot;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Metro metroCode(String metroCode) {
    this.metroCode = metroCode;
    return this;
  }

  /**
   * Metro code of this metro region. This is equivalent to dma_id.
   * @return metroCode
   */
  @javax.annotation.Nullable
  public String getMetroCode() {
    return metroCode;
  }

  public void setMetroCode(String metroCode) {
    this.metroCode = metroCode;
  }


  public Metro name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of this metro region.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Metro metro = (Metro) o;
    return Objects.equals(this.countryCode, metro.countryCode) &&
        Objects.equals(this.countryDartId, metro.countryDartId) &&
        Objects.equals(this.dartId, metro.dartId) &&
        Objects.equals(this.dmaId, metro.dmaId) &&
        Objects.equals(this.kind, metro.kind) &&
        Objects.equals(this.metroCode, metro.metroCode) &&
        Objects.equals(this.name, metro.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countryCode, countryDartId, dartId, dmaId, kind, metroCode, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Metro {\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    countryDartId: ").append(toIndentedString(countryDartId)).append("\n");
    sb.append("    dartId: ").append(toIndentedString(dartId)).append("\n");
    sb.append("    dmaId: ").append(toIndentedString(dmaId)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    metroCode: ").append(toIndentedString(metroCode)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("countryCode");
    openapiFields.add("countryDartId");
    openapiFields.add("dartId");
    openapiFields.add("dmaId");
    openapiFields.add("kind");
    openapiFields.add("metroCode");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Metro
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Metro.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Metro is not found in the empty JSON string", Metro.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Metro.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Metro` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonNull()) && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      if ((jsonObj.get("countryDartId") != null && !jsonObj.get("countryDartId").isJsonNull()) && !jsonObj.get("countryDartId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryDartId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryDartId").toString()));
      }
      if ((jsonObj.get("dartId") != null && !jsonObj.get("dartId").isJsonNull()) && !jsonObj.get("dartId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dartId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dartId").toString()));
      }
      if ((jsonObj.get("dmaId") != null && !jsonObj.get("dmaId").isJsonNull()) && !jsonObj.get("dmaId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dmaId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dmaId").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("metroCode") != null && !jsonObj.get("metroCode").isJsonNull()) && !jsonObj.get("metroCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metroCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metroCode").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Metro.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Metro' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Metro> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Metro.class));

       return (TypeAdapter<T>) new TypeAdapter<Metro>() {
           @Override
           public void write(JsonWriter out, Metro value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Metro read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Metro given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Metro
   * @throws IOException if the JSON string is invalid with respect to Metro
   */
  public static Metro fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Metro.class);
  }

  /**
   * Convert an instance of Metro to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

