/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DimensionValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains properties of a Campaign Manager advertiser.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:16.070314-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Advertiser {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_ADVERTISER_GROUP_ID = "advertiserGroupId";
  @SerializedName(SERIALIZED_NAME_ADVERTISER_GROUP_ID)
  private String advertiserGroupId;

  public static final String SERIALIZED_NAME_CLICK_THROUGH_URL_SUFFIX = "clickThroughUrlSuffix";
  @SerializedName(SERIALIZED_NAME_CLICK_THROUGH_URL_SUFFIX)
  private String clickThroughUrlSuffix;

  public static final String SERIALIZED_NAME_DEFAULT_CLICK_THROUGH_EVENT_TAG_ID = "defaultClickThroughEventTagId";
  @SerializedName(SERIALIZED_NAME_DEFAULT_CLICK_THROUGH_EVENT_TAG_ID)
  private String defaultClickThroughEventTagId;

  public static final String SERIALIZED_NAME_DEFAULT_EMAIL = "defaultEmail";
  @SerializedName(SERIALIZED_NAME_DEFAULT_EMAIL)
  private String defaultEmail;

  public static final String SERIALIZED_NAME_FLOODLIGHT_CONFIGURATION_ID = "floodlightConfigurationId";
  @SerializedName(SERIALIZED_NAME_FLOODLIGHT_CONFIGURATION_ID)
  private String floodlightConfigurationId;

  public static final String SERIALIZED_NAME_FLOODLIGHT_CONFIGURATION_ID_DIMENSION_VALUE = "floodlightConfigurationIdDimensionValue";
  @SerializedName(SERIALIZED_NAME_FLOODLIGHT_CONFIGURATION_ID_DIMENSION_VALUE)
  private DimensionValue floodlightConfigurationIdDimensionValue;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ID_DIMENSION_VALUE = "idDimensionValue";
  @SerializedName(SERIALIZED_NAME_ID_DIMENSION_VALUE)
  private DimensionValue idDimensionValue;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORIGINAL_FLOODLIGHT_CONFIGURATION_ID = "originalFloodlightConfigurationId";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_FLOODLIGHT_CONFIGURATION_ID)
  private String originalFloodlightConfigurationId;

  /**
   * Status of this advertiser.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    APPROVED("APPROVED"),
    
    ON_HOLD("ON_HOLD");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_SUBACCOUNT_ID = "subaccountId";
  @SerializedName(SERIALIZED_NAME_SUBACCOUNT_ID)
  private String subaccountId;

  public static final String SERIALIZED_NAME_SUSPENDED = "suspended";
  @SerializedName(SERIALIZED_NAME_SUSPENDED)
  private Boolean suspended;

  public Advertiser() {
  }

  public Advertiser accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Account ID of this advertiser.This is a read-only field that can be left blank.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public Advertiser advertiserGroupId(String advertiserGroupId) {
    this.advertiserGroupId = advertiserGroupId;
    return this;
  }

  /**
   * ID of the advertiser group this advertiser belongs to. You can group advertisers for reporting purposes, allowing you to see aggregated information for all advertisers in each group.
   * @return advertiserGroupId
   */
  @javax.annotation.Nullable
  public String getAdvertiserGroupId() {
    return advertiserGroupId;
  }

  public void setAdvertiserGroupId(String advertiserGroupId) {
    this.advertiserGroupId = advertiserGroupId;
  }


  public Advertiser clickThroughUrlSuffix(String clickThroughUrlSuffix) {
    this.clickThroughUrlSuffix = clickThroughUrlSuffix;
    return this;
  }

  /**
   * Suffix added to click-through URL of ad creative associations under this advertiser. Must be less than 129 characters long.
   * @return clickThroughUrlSuffix
   */
  @javax.annotation.Nullable
  public String getClickThroughUrlSuffix() {
    return clickThroughUrlSuffix;
  }

  public void setClickThroughUrlSuffix(String clickThroughUrlSuffix) {
    this.clickThroughUrlSuffix = clickThroughUrlSuffix;
  }


  public Advertiser defaultClickThroughEventTagId(String defaultClickThroughEventTagId) {
    this.defaultClickThroughEventTagId = defaultClickThroughEventTagId;
    return this;
  }

  /**
   * ID of the click-through event tag to apply by default to the landing pages of this advertiser&#39;s campaigns.
   * @return defaultClickThroughEventTagId
   */
  @javax.annotation.Nullable
  public String getDefaultClickThroughEventTagId() {
    return defaultClickThroughEventTagId;
  }

  public void setDefaultClickThroughEventTagId(String defaultClickThroughEventTagId) {
    this.defaultClickThroughEventTagId = defaultClickThroughEventTagId;
  }


  public Advertiser defaultEmail(String defaultEmail) {
    this.defaultEmail = defaultEmail;
    return this;
  }

  /**
   * Default email address used in sender field for tag emails.
   * @return defaultEmail
   */
  @javax.annotation.Nullable
  public String getDefaultEmail() {
    return defaultEmail;
  }

  public void setDefaultEmail(String defaultEmail) {
    this.defaultEmail = defaultEmail;
  }


  public Advertiser floodlightConfigurationId(String floodlightConfigurationId) {
    this.floodlightConfigurationId = floodlightConfigurationId;
    return this;
  }

  /**
   * Floodlight configuration ID of this advertiser. The floodlight configuration ID will be created automatically, so on insert this field should be left blank. This field can be set to another advertiser&#39;s floodlight configuration ID in order to share that advertiser&#39;s floodlight configuration with this advertiser, so long as: - This advertiser&#39;s original floodlight configuration is not already associated with floodlight activities or floodlight activity groups. - This advertiser&#39;s original floodlight configuration is not already shared with another advertiser. 
   * @return floodlightConfigurationId
   */
  @javax.annotation.Nullable
  public String getFloodlightConfigurationId() {
    return floodlightConfigurationId;
  }

  public void setFloodlightConfigurationId(String floodlightConfigurationId) {
    this.floodlightConfigurationId = floodlightConfigurationId;
  }


  public Advertiser floodlightConfigurationIdDimensionValue(DimensionValue floodlightConfigurationIdDimensionValue) {
    this.floodlightConfigurationIdDimensionValue = floodlightConfigurationIdDimensionValue;
    return this;
  }

  /**
   * Get floodlightConfigurationIdDimensionValue
   * @return floodlightConfigurationIdDimensionValue
   */
  @javax.annotation.Nullable
  public DimensionValue getFloodlightConfigurationIdDimensionValue() {
    return floodlightConfigurationIdDimensionValue;
  }

  public void setFloodlightConfigurationIdDimensionValue(DimensionValue floodlightConfigurationIdDimensionValue) {
    this.floodlightConfigurationIdDimensionValue = floodlightConfigurationIdDimensionValue;
  }


  public Advertiser id(String id) {
    this.id = id;
    return this;
  }

  /**
   * ID of this advertiser. This is a read-only, auto-generated field.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Advertiser idDimensionValue(DimensionValue idDimensionValue) {
    this.idDimensionValue = idDimensionValue;
    return this;
  }

  /**
   * Get idDimensionValue
   * @return idDimensionValue
   */
  @javax.annotation.Nullable
  public DimensionValue getIdDimensionValue() {
    return idDimensionValue;
  }

  public void setIdDimensionValue(DimensionValue idDimensionValue) {
    this.idDimensionValue = idDimensionValue;
  }


  public Advertiser kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string \&quot;dfareporting#advertiser\&quot;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Advertiser name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of this advertiser. This is a required field and must be less than 256 characters long and unique among advertisers of the same account.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Advertiser originalFloodlightConfigurationId(String originalFloodlightConfigurationId) {
    this.originalFloodlightConfigurationId = originalFloodlightConfigurationId;
    return this;
  }

  /**
   * Original floodlight configuration before any sharing occurred. Set the floodlightConfigurationId of this advertiser to originalFloodlightConfigurationId to unshare the advertiser&#39;s current floodlight configuration. You cannot unshare an advertiser&#39;s floodlight configuration if the shared configuration has activities associated with any campaign or placement.
   * @return originalFloodlightConfigurationId
   */
  @javax.annotation.Nullable
  public String getOriginalFloodlightConfigurationId() {
    return originalFloodlightConfigurationId;
  }

  public void setOriginalFloodlightConfigurationId(String originalFloodlightConfigurationId) {
    this.originalFloodlightConfigurationId = originalFloodlightConfigurationId;
  }


  public Advertiser status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Status of this advertiser.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Advertiser subaccountId(String subaccountId) {
    this.subaccountId = subaccountId;
    return this;
  }

  /**
   * Subaccount ID of this advertiser.This is a read-only field that can be left blank.
   * @return subaccountId
   */
  @javax.annotation.Nullable
  public String getSubaccountId() {
    return subaccountId;
  }

  public void setSubaccountId(String subaccountId) {
    this.subaccountId = subaccountId;
  }


  public Advertiser suspended(Boolean suspended) {
    this.suspended = suspended;
    return this;
  }

  /**
   * Suspension status of this advertiser.
   * @return suspended
   */
  @javax.annotation.Nullable
  public Boolean getSuspended() {
    return suspended;
  }

  public void setSuspended(Boolean suspended) {
    this.suspended = suspended;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Advertiser advertiser = (Advertiser) o;
    return Objects.equals(this.accountId, advertiser.accountId) &&
        Objects.equals(this.advertiserGroupId, advertiser.advertiserGroupId) &&
        Objects.equals(this.clickThroughUrlSuffix, advertiser.clickThroughUrlSuffix) &&
        Objects.equals(this.defaultClickThroughEventTagId, advertiser.defaultClickThroughEventTagId) &&
        Objects.equals(this.defaultEmail, advertiser.defaultEmail) &&
        Objects.equals(this.floodlightConfigurationId, advertiser.floodlightConfigurationId) &&
        Objects.equals(this.floodlightConfigurationIdDimensionValue, advertiser.floodlightConfigurationIdDimensionValue) &&
        Objects.equals(this.id, advertiser.id) &&
        Objects.equals(this.idDimensionValue, advertiser.idDimensionValue) &&
        Objects.equals(this.kind, advertiser.kind) &&
        Objects.equals(this.name, advertiser.name) &&
        Objects.equals(this.originalFloodlightConfigurationId, advertiser.originalFloodlightConfigurationId) &&
        Objects.equals(this.status, advertiser.status) &&
        Objects.equals(this.subaccountId, advertiser.subaccountId) &&
        Objects.equals(this.suspended, advertiser.suspended);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, advertiserGroupId, clickThroughUrlSuffix, defaultClickThroughEventTagId, defaultEmail, floodlightConfigurationId, floodlightConfigurationIdDimensionValue, id, idDimensionValue, kind, name, originalFloodlightConfigurationId, status, subaccountId, suspended);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Advertiser {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    advertiserGroupId: ").append(toIndentedString(advertiserGroupId)).append("\n");
    sb.append("    clickThroughUrlSuffix: ").append(toIndentedString(clickThroughUrlSuffix)).append("\n");
    sb.append("    defaultClickThroughEventTagId: ").append(toIndentedString(defaultClickThroughEventTagId)).append("\n");
    sb.append("    defaultEmail: ").append(toIndentedString(defaultEmail)).append("\n");
    sb.append("    floodlightConfigurationId: ").append(toIndentedString(floodlightConfigurationId)).append("\n");
    sb.append("    floodlightConfigurationIdDimensionValue: ").append(toIndentedString(floodlightConfigurationIdDimensionValue)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    idDimensionValue: ").append(toIndentedString(idDimensionValue)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    originalFloodlightConfigurationId: ").append(toIndentedString(originalFloodlightConfigurationId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subaccountId: ").append(toIndentedString(subaccountId)).append("\n");
    sb.append("    suspended: ").append(toIndentedString(suspended)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("advertiserGroupId");
    openapiFields.add("clickThroughUrlSuffix");
    openapiFields.add("defaultClickThroughEventTagId");
    openapiFields.add("defaultEmail");
    openapiFields.add("floodlightConfigurationId");
    openapiFields.add("floodlightConfigurationIdDimensionValue");
    openapiFields.add("id");
    openapiFields.add("idDimensionValue");
    openapiFields.add("kind");
    openapiFields.add("name");
    openapiFields.add("originalFloodlightConfigurationId");
    openapiFields.add("status");
    openapiFields.add("subaccountId");
    openapiFields.add("suspended");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Advertiser
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Advertiser.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Advertiser is not found in the empty JSON string", Advertiser.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Advertiser.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Advertiser` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if ((jsonObj.get("advertiserGroupId") != null && !jsonObj.get("advertiserGroupId").isJsonNull()) && !jsonObj.get("advertiserGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advertiserGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advertiserGroupId").toString()));
      }
      if ((jsonObj.get("clickThroughUrlSuffix") != null && !jsonObj.get("clickThroughUrlSuffix").isJsonNull()) && !jsonObj.get("clickThroughUrlSuffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clickThroughUrlSuffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clickThroughUrlSuffix").toString()));
      }
      if ((jsonObj.get("defaultClickThroughEventTagId") != null && !jsonObj.get("defaultClickThroughEventTagId").isJsonNull()) && !jsonObj.get("defaultClickThroughEventTagId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultClickThroughEventTagId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultClickThroughEventTagId").toString()));
      }
      if ((jsonObj.get("defaultEmail") != null && !jsonObj.get("defaultEmail").isJsonNull()) && !jsonObj.get("defaultEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultEmail").toString()));
      }
      if ((jsonObj.get("floodlightConfigurationId") != null && !jsonObj.get("floodlightConfigurationId").isJsonNull()) && !jsonObj.get("floodlightConfigurationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `floodlightConfigurationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("floodlightConfigurationId").toString()));
      }
      // validate the optional field `floodlightConfigurationIdDimensionValue`
      if (jsonObj.get("floodlightConfigurationIdDimensionValue") != null && !jsonObj.get("floodlightConfigurationIdDimensionValue").isJsonNull()) {
        DimensionValue.validateJsonElement(jsonObj.get("floodlightConfigurationIdDimensionValue"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `idDimensionValue`
      if (jsonObj.get("idDimensionValue") != null && !jsonObj.get("idDimensionValue").isJsonNull()) {
        DimensionValue.validateJsonElement(jsonObj.get("idDimensionValue"));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("originalFloodlightConfigurationId") != null && !jsonObj.get("originalFloodlightConfigurationId").isJsonNull()) && !jsonObj.get("originalFloodlightConfigurationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalFloodlightConfigurationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalFloodlightConfigurationId").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("subaccountId") != null && !jsonObj.get("subaccountId").isJsonNull()) && !jsonObj.get("subaccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subaccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subaccountId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Advertiser.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Advertiser' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Advertiser> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Advertiser.class));

       return (TypeAdapter<T>) new TypeAdapter<Advertiser>() {
           @Override
           public void write(JsonWriter out, Advertiser value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Advertiser read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Advertiser given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Advertiser
   * @throws IOException if the JSON string is invalid with respect to Advertiser
   */
  public static Advertiser fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Advertiser.class);
  }

  /**
   * Convert an instance of Advertiser to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

