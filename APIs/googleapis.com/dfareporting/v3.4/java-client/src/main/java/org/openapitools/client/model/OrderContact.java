/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contact of an order.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:16.070314-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderContact {
  public static final String SERIALIZED_NAME_CONTACT_INFO = "contactInfo";
  @SerializedName(SERIALIZED_NAME_CONTACT_INFO)
  private String contactInfo;

  public static final String SERIALIZED_NAME_CONTACT_NAME = "contactName";
  @SerializedName(SERIALIZED_NAME_CONTACT_NAME)
  private String contactName;

  public static final String SERIALIZED_NAME_CONTACT_TITLE = "contactTitle";
  @SerializedName(SERIALIZED_NAME_CONTACT_TITLE)
  private String contactTitle;

  /**
   * Type of this contact.
   */
  @JsonAdapter(ContactTypeEnum.Adapter.class)
  public enum ContactTypeEnum {
    BUYER_CONTACT("PLANNING_ORDER_CONTACT_BUYER_CONTACT"),
    
    BUYER_BILLING_CONTACT("PLANNING_ORDER_CONTACT_BUYER_BILLING_CONTACT"),
    
    SELLER_CONTACT("PLANNING_ORDER_CONTACT_SELLER_CONTACT");

    private String value;

    ContactTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContactTypeEnum fromValue(String value) {
      for (ContactTypeEnum b : ContactTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContactTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContactTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContactTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContactTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ContactTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONTACT_TYPE = "contactType";
  @SerializedName(SERIALIZED_NAME_CONTACT_TYPE)
  private ContactTypeEnum contactType;

  public static final String SERIALIZED_NAME_SIGNATURE_USER_PROFILE_ID = "signatureUserProfileId";
  @SerializedName(SERIALIZED_NAME_SIGNATURE_USER_PROFILE_ID)
  private String signatureUserProfileId;

  public OrderContact() {
  }

  public OrderContact contactInfo(String contactInfo) {
    this.contactInfo = contactInfo;
    return this;
  }

  /**
   * Free-form information about this contact. It could be any information related to this contact in addition to type, title, name, and signature user profile ID.
   * @return contactInfo
   */
  @javax.annotation.Nullable
  public String getContactInfo() {
    return contactInfo;
  }

  public void setContactInfo(String contactInfo) {
    this.contactInfo = contactInfo;
  }


  public OrderContact contactName(String contactName) {
    this.contactName = contactName;
    return this;
  }

  /**
   * Name of this contact.
   * @return contactName
   */
  @javax.annotation.Nullable
  public String getContactName() {
    return contactName;
  }

  public void setContactName(String contactName) {
    this.contactName = contactName;
  }


  public OrderContact contactTitle(String contactTitle) {
    this.contactTitle = contactTitle;
    return this;
  }

  /**
   * Title of this contact.
   * @return contactTitle
   */
  @javax.annotation.Nullable
  public String getContactTitle() {
    return contactTitle;
  }

  public void setContactTitle(String contactTitle) {
    this.contactTitle = contactTitle;
  }


  public OrderContact contactType(ContactTypeEnum contactType) {
    this.contactType = contactType;
    return this;
  }

  /**
   * Type of this contact.
   * @return contactType
   */
  @javax.annotation.Nullable
  public ContactTypeEnum getContactType() {
    return contactType;
  }

  public void setContactType(ContactTypeEnum contactType) {
    this.contactType = contactType;
  }


  public OrderContact signatureUserProfileId(String signatureUserProfileId) {
    this.signatureUserProfileId = signatureUserProfileId;
    return this;
  }

  /**
   * ID of the user profile containing the signature that will be embedded into order documents.
   * @return signatureUserProfileId
   */
  @javax.annotation.Nullable
  public String getSignatureUserProfileId() {
    return signatureUserProfileId;
  }

  public void setSignatureUserProfileId(String signatureUserProfileId) {
    this.signatureUserProfileId = signatureUserProfileId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderContact orderContact = (OrderContact) o;
    return Objects.equals(this.contactInfo, orderContact.contactInfo) &&
        Objects.equals(this.contactName, orderContact.contactName) &&
        Objects.equals(this.contactTitle, orderContact.contactTitle) &&
        Objects.equals(this.contactType, orderContact.contactType) &&
        Objects.equals(this.signatureUserProfileId, orderContact.signatureUserProfileId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contactInfo, contactName, contactTitle, contactType, signatureUserProfileId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderContact {\n");
    sb.append("    contactInfo: ").append(toIndentedString(contactInfo)).append("\n");
    sb.append("    contactName: ").append(toIndentedString(contactName)).append("\n");
    sb.append("    contactTitle: ").append(toIndentedString(contactTitle)).append("\n");
    sb.append("    contactType: ").append(toIndentedString(contactType)).append("\n");
    sb.append("    signatureUserProfileId: ").append(toIndentedString(signatureUserProfileId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contactInfo");
    openapiFields.add("contactName");
    openapiFields.add("contactTitle");
    openapiFields.add("contactType");
    openapiFields.add("signatureUserProfileId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderContact
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderContact.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderContact is not found in the empty JSON string", OrderContact.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderContact.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderContact` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("contactInfo") != null && !jsonObj.get("contactInfo").isJsonNull()) && !jsonObj.get("contactInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contactInfo").toString()));
      }
      if ((jsonObj.get("contactName") != null && !jsonObj.get("contactName").isJsonNull()) && !jsonObj.get("contactName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contactName").toString()));
      }
      if ((jsonObj.get("contactTitle") != null && !jsonObj.get("contactTitle").isJsonNull()) && !jsonObj.get("contactTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contactTitle").toString()));
      }
      if ((jsonObj.get("contactType") != null && !jsonObj.get("contactType").isJsonNull()) && !jsonObj.get("contactType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contactType").toString()));
      }
      // validate the optional field `contactType`
      if (jsonObj.get("contactType") != null && !jsonObj.get("contactType").isJsonNull()) {
        ContactTypeEnum.validateJsonElement(jsonObj.get("contactType"));
      }
      if ((jsonObj.get("signatureUserProfileId") != null && !jsonObj.get("signatureUserProfileId").isJsonNull()) && !jsonObj.get("signatureUserProfileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signatureUserProfileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signatureUserProfileId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderContact.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderContact' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderContact> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderContact.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderContact>() {
           @Override
           public void write(JsonWriter out, OrderContact value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderContact read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderContact given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderContact
   * @throws IOException if the JSON string is invalid with respect to OrderContact
   */
  public static OrderContact fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderContact.class);
  }

  /**
   * Convert an instance of OrderContact to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

