/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LastModifiedInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains properties of a Planning order document.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:16.070314-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderDocument {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_ADVERTISER_ID = "advertiserId";
  @SerializedName(SERIALIZED_NAME_ADVERTISER_ID)
  private String advertiserId;

  public static final String SERIALIZED_NAME_AMENDED_ORDER_DOCUMENT_ID = "amendedOrderDocumentId";
  @SerializedName(SERIALIZED_NAME_AMENDED_ORDER_DOCUMENT_ID)
  private String amendedOrderDocumentId;

  public static final String SERIALIZED_NAME_APPROVED_BY_USER_PROFILE_IDS = "approvedByUserProfileIds";
  @SerializedName(SERIALIZED_NAME_APPROVED_BY_USER_PROFILE_IDS)
  private List<String> approvedByUserProfileIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_CANCELLED = "cancelled";
  @SerializedName(SERIALIZED_NAME_CANCELLED)
  private Boolean cancelled;

  public static final String SERIALIZED_NAME_CREATED_INFO = "createdInfo";
  @SerializedName(SERIALIZED_NAME_CREATED_INFO)
  private LastModifiedInfo createdInfo;

  public static final String SERIALIZED_NAME_EFFECTIVE_DATE = "effectiveDate";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_DATE)
  private LocalDate effectiveDate;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_LAST_SENT_RECIPIENTS = "lastSentRecipients";
  @SerializedName(SERIALIZED_NAME_LAST_SENT_RECIPIENTS)
  private List<String> lastSentRecipients = new ArrayList<>();

  public static final String SERIALIZED_NAME_LAST_SENT_TIME = "lastSentTime";
  @SerializedName(SERIALIZED_NAME_LAST_SENT_TIME)
  private OffsetDateTime lastSentTime;

  public static final String SERIALIZED_NAME_ORDER_ID = "orderId";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private String projectId;

  public static final String SERIALIZED_NAME_SIGNED = "signed";
  @SerializedName(SERIALIZED_NAME_SIGNED)
  private Boolean signed;

  public static final String SERIALIZED_NAME_SUBACCOUNT_ID = "subaccountId";
  @SerializedName(SERIALIZED_NAME_SUBACCOUNT_ID)
  private String subaccountId;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  /**
   * Type of this order document
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    INSERTION_ORDER("PLANNING_ORDER_TYPE_INSERTION_ORDER"),
    
    CHANGE_ORDER("PLANNING_ORDER_TYPE_CHANGE_ORDER");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public OrderDocument() {
  }

  public OrderDocument accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Account ID of this order document.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public OrderDocument advertiserId(String advertiserId) {
    this.advertiserId = advertiserId;
    return this;
  }

  /**
   * Advertiser ID of this order document.
   * @return advertiserId
   */
  @javax.annotation.Nullable
  public String getAdvertiserId() {
    return advertiserId;
  }

  public void setAdvertiserId(String advertiserId) {
    this.advertiserId = advertiserId;
  }


  public OrderDocument amendedOrderDocumentId(String amendedOrderDocumentId) {
    this.amendedOrderDocumentId = amendedOrderDocumentId;
    return this;
  }

  /**
   * The amended order document ID of this order document. An order document can be created by optionally amending another order document so that the change history can be preserved.
   * @return amendedOrderDocumentId
   */
  @javax.annotation.Nullable
  public String getAmendedOrderDocumentId() {
    return amendedOrderDocumentId;
  }

  public void setAmendedOrderDocumentId(String amendedOrderDocumentId) {
    this.amendedOrderDocumentId = amendedOrderDocumentId;
  }


  public OrderDocument approvedByUserProfileIds(List<String> approvedByUserProfileIds) {
    this.approvedByUserProfileIds = approvedByUserProfileIds;
    return this;
  }

  public OrderDocument addApprovedByUserProfileIdsItem(String approvedByUserProfileIdsItem) {
    if (this.approvedByUserProfileIds == null) {
      this.approvedByUserProfileIds = new ArrayList<>();
    }
    this.approvedByUserProfileIds.add(approvedByUserProfileIdsItem);
    return this;
  }

  /**
   * IDs of users who have approved this order document.
   * @return approvedByUserProfileIds
   */
  @javax.annotation.Nullable
  public List<String> getApprovedByUserProfileIds() {
    return approvedByUserProfileIds;
  }

  public void setApprovedByUserProfileIds(List<String> approvedByUserProfileIds) {
    this.approvedByUserProfileIds = approvedByUserProfileIds;
  }


  public OrderDocument cancelled(Boolean cancelled) {
    this.cancelled = cancelled;
    return this;
  }

  /**
   * Whether this order document is cancelled.
   * @return cancelled
   */
  @javax.annotation.Nullable
  public Boolean getCancelled() {
    return cancelled;
  }

  public void setCancelled(Boolean cancelled) {
    this.cancelled = cancelled;
  }


  public OrderDocument createdInfo(LastModifiedInfo createdInfo) {
    this.createdInfo = createdInfo;
    return this;
  }

  /**
   * Get createdInfo
   * @return createdInfo
   */
  @javax.annotation.Nullable
  public LastModifiedInfo getCreatedInfo() {
    return createdInfo;
  }

  public void setCreatedInfo(LastModifiedInfo createdInfo) {
    this.createdInfo = createdInfo;
  }


  public OrderDocument effectiveDate(LocalDate effectiveDate) {
    this.effectiveDate = effectiveDate;
    return this;
  }

  /**
   * Get effectiveDate
   * @return effectiveDate
   */
  @javax.annotation.Nullable
  public LocalDate getEffectiveDate() {
    return effectiveDate;
  }

  public void setEffectiveDate(LocalDate effectiveDate) {
    this.effectiveDate = effectiveDate;
  }


  public OrderDocument id(String id) {
    this.id = id;
    return this;
  }

  /**
   * ID of this order document.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public OrderDocument kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string \&quot;dfareporting#orderDocument\&quot;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public OrderDocument lastSentRecipients(List<String> lastSentRecipients) {
    this.lastSentRecipients = lastSentRecipients;
    return this;
  }

  public OrderDocument addLastSentRecipientsItem(String lastSentRecipientsItem) {
    if (this.lastSentRecipients == null) {
      this.lastSentRecipients = new ArrayList<>();
    }
    this.lastSentRecipients.add(lastSentRecipientsItem);
    return this;
  }

  /**
   * List of email addresses that received the last sent document.
   * @return lastSentRecipients
   */
  @javax.annotation.Nullable
  public List<String> getLastSentRecipients() {
    return lastSentRecipients;
  }

  public void setLastSentRecipients(List<String> lastSentRecipients) {
    this.lastSentRecipients = lastSentRecipients;
  }


  public OrderDocument lastSentTime(OffsetDateTime lastSentTime) {
    this.lastSentTime = lastSentTime;
    return this;
  }

  /**
   * Get lastSentTime
   * @return lastSentTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastSentTime() {
    return lastSentTime;
  }

  public void setLastSentTime(OffsetDateTime lastSentTime) {
    this.lastSentTime = lastSentTime;
  }


  public OrderDocument orderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * ID of the order from which this order document is created.
   * @return orderId
   */
  @javax.annotation.Nullable
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }


  public OrderDocument projectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * Project ID of this order document.
   * @return projectId
   */
  @javax.annotation.Nullable
  public String getProjectId() {
    return projectId;
  }

  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }


  public OrderDocument signed(Boolean signed) {
    this.signed = signed;
    return this;
  }

  /**
   * Whether this order document has been signed.
   * @return signed
   */
  @javax.annotation.Nullable
  public Boolean getSigned() {
    return signed;
  }

  public void setSigned(Boolean signed) {
    this.signed = signed;
  }


  public OrderDocument subaccountId(String subaccountId) {
    this.subaccountId = subaccountId;
    return this;
  }

  /**
   * Subaccount ID of this order document.
   * @return subaccountId
   */
  @javax.annotation.Nullable
  public String getSubaccountId() {
    return subaccountId;
  }

  public void setSubaccountId(String subaccountId) {
    this.subaccountId = subaccountId;
  }


  public OrderDocument title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title of this order document.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public OrderDocument type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Type of this order document
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderDocument orderDocument = (OrderDocument) o;
    return Objects.equals(this.accountId, orderDocument.accountId) &&
        Objects.equals(this.advertiserId, orderDocument.advertiserId) &&
        Objects.equals(this.amendedOrderDocumentId, orderDocument.amendedOrderDocumentId) &&
        Objects.equals(this.approvedByUserProfileIds, orderDocument.approvedByUserProfileIds) &&
        Objects.equals(this.cancelled, orderDocument.cancelled) &&
        Objects.equals(this.createdInfo, orderDocument.createdInfo) &&
        Objects.equals(this.effectiveDate, orderDocument.effectiveDate) &&
        Objects.equals(this.id, orderDocument.id) &&
        Objects.equals(this.kind, orderDocument.kind) &&
        Objects.equals(this.lastSentRecipients, orderDocument.lastSentRecipients) &&
        Objects.equals(this.lastSentTime, orderDocument.lastSentTime) &&
        Objects.equals(this.orderId, orderDocument.orderId) &&
        Objects.equals(this.projectId, orderDocument.projectId) &&
        Objects.equals(this.signed, orderDocument.signed) &&
        Objects.equals(this.subaccountId, orderDocument.subaccountId) &&
        Objects.equals(this.title, orderDocument.title) &&
        Objects.equals(this.type, orderDocument.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, advertiserId, amendedOrderDocumentId, approvedByUserProfileIds, cancelled, createdInfo, effectiveDate, id, kind, lastSentRecipients, lastSentTime, orderId, projectId, signed, subaccountId, title, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderDocument {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    advertiserId: ").append(toIndentedString(advertiserId)).append("\n");
    sb.append("    amendedOrderDocumentId: ").append(toIndentedString(amendedOrderDocumentId)).append("\n");
    sb.append("    approvedByUserProfileIds: ").append(toIndentedString(approvedByUserProfileIds)).append("\n");
    sb.append("    cancelled: ").append(toIndentedString(cancelled)).append("\n");
    sb.append("    createdInfo: ").append(toIndentedString(createdInfo)).append("\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    lastSentRecipients: ").append(toIndentedString(lastSentRecipients)).append("\n");
    sb.append("    lastSentTime: ").append(toIndentedString(lastSentTime)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    signed: ").append(toIndentedString(signed)).append("\n");
    sb.append("    subaccountId: ").append(toIndentedString(subaccountId)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("advertiserId");
    openapiFields.add("amendedOrderDocumentId");
    openapiFields.add("approvedByUserProfileIds");
    openapiFields.add("cancelled");
    openapiFields.add("createdInfo");
    openapiFields.add("effectiveDate");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("lastSentRecipients");
    openapiFields.add("lastSentTime");
    openapiFields.add("orderId");
    openapiFields.add("projectId");
    openapiFields.add("signed");
    openapiFields.add("subaccountId");
    openapiFields.add("title");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderDocument
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderDocument.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderDocument is not found in the empty JSON string", OrderDocument.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderDocument.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderDocument` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if ((jsonObj.get("advertiserId") != null && !jsonObj.get("advertiserId").isJsonNull()) && !jsonObj.get("advertiserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advertiserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advertiserId").toString()));
      }
      if ((jsonObj.get("amendedOrderDocumentId") != null && !jsonObj.get("amendedOrderDocumentId").isJsonNull()) && !jsonObj.get("amendedOrderDocumentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amendedOrderDocumentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amendedOrderDocumentId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("approvedByUserProfileIds") != null && !jsonObj.get("approvedByUserProfileIds").isJsonNull() && !jsonObj.get("approvedByUserProfileIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `approvedByUserProfileIds` to be an array in the JSON string but got `%s`", jsonObj.get("approvedByUserProfileIds").toString()));
      }
      // validate the optional field `createdInfo`
      if (jsonObj.get("createdInfo") != null && !jsonObj.get("createdInfo").isJsonNull()) {
        LastModifiedInfo.validateJsonElement(jsonObj.get("createdInfo"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("lastSentRecipients") != null && !jsonObj.get("lastSentRecipients").isJsonNull() && !jsonObj.get("lastSentRecipients").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastSentRecipients` to be an array in the JSON string but got `%s`", jsonObj.get("lastSentRecipients").toString()));
      }
      if ((jsonObj.get("orderId") != null && !jsonObj.get("orderId").isJsonNull()) && !jsonObj.get("orderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderId").toString()));
      }
      if ((jsonObj.get("projectId") != null && !jsonObj.get("projectId").isJsonNull()) && !jsonObj.get("projectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectId").toString()));
      }
      if ((jsonObj.get("subaccountId") != null && !jsonObj.get("subaccountId").isJsonNull()) && !jsonObj.get("subaccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subaccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subaccountId").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderDocument.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderDocument' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderDocument> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderDocument.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderDocument>() {
           @Override
           public void write(JsonWriter out, OrderDocument value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderDocument read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderDocument given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderDocument
   * @throws IOException if the JSON string is invalid with respect to OrderDocument
   */
  public static OrderDocument fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderDocument.class);
  }

  /**
   * Convert an instance of OrderDocument to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

