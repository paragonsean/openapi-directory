/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccountPermissions contains information about a particular account permission. Some features of Campaign Manager require an account permission to be present in the account.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:16.070314-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountPermission {
  /**
   * Gets or Sets accountProfiles
   */
  @JsonAdapter(AccountProfilesEnum.Adapter.class)
  public enum AccountProfilesEnum {
    BASIC("ACCOUNT_PROFILE_BASIC"),
    
    STANDARD("ACCOUNT_PROFILE_STANDARD");

    private String value;

    AccountProfilesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccountProfilesEnum fromValue(String value) {
      for (AccountProfilesEnum b : AccountProfilesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccountProfilesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccountProfilesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccountProfilesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccountProfilesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AccountProfilesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACCOUNT_PROFILES = "accountProfiles";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_PROFILES)
  private List<AccountProfilesEnum> accountProfiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  /**
   * Administrative level required to enable this account permission.
   */
  @JsonAdapter(LevelEnum.Adapter.class)
  public enum LevelEnum {
    USER("USER"),
    
    ADMINISTRATOR("ADMINISTRATOR");

    private String value;

    LevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LevelEnum fromValue(String value) {
      for (LevelEnum b : LevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private LevelEnum level;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PERMISSION_GROUP_ID = "permissionGroupId";
  @SerializedName(SERIALIZED_NAME_PERMISSION_GROUP_ID)
  private String permissionGroupId;

  public AccountPermission() {
  }

  public AccountPermission accountProfiles(List<AccountProfilesEnum> accountProfiles) {
    this.accountProfiles = accountProfiles;
    return this;
  }

  public AccountPermission addAccountProfilesItem(AccountProfilesEnum accountProfilesItem) {
    if (this.accountProfiles == null) {
      this.accountProfiles = new ArrayList<>();
    }
    this.accountProfiles.add(accountProfilesItem);
    return this;
  }

  /**
   * Account profiles associated with this account permission. Possible values are: - \&quot;ACCOUNT_PROFILE_BASIC\&quot; - \&quot;ACCOUNT_PROFILE_STANDARD\&quot; 
   * @return accountProfiles
   */
  @javax.annotation.Nullable
  public List<AccountProfilesEnum> getAccountProfiles() {
    return accountProfiles;
  }

  public void setAccountProfiles(List<AccountProfilesEnum> accountProfiles) {
    this.accountProfiles = accountProfiles;
  }


  public AccountPermission id(String id) {
    this.id = id;
    return this;
  }

  /**
   * ID of this account permission.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AccountPermission kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string \&quot;dfareporting#accountPermission\&quot;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public AccountPermission level(LevelEnum level) {
    this.level = level;
    return this;
  }

  /**
   * Administrative level required to enable this account permission.
   * @return level
   */
  @javax.annotation.Nullable
  public LevelEnum getLevel() {
    return level;
  }

  public void setLevel(LevelEnum level) {
    this.level = level;
  }


  public AccountPermission name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of this account permission.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AccountPermission permissionGroupId(String permissionGroupId) {
    this.permissionGroupId = permissionGroupId;
    return this;
  }

  /**
   * Permission group of this account permission.
   * @return permissionGroupId
   */
  @javax.annotation.Nullable
  public String getPermissionGroupId() {
    return permissionGroupId;
  }

  public void setPermissionGroupId(String permissionGroupId) {
    this.permissionGroupId = permissionGroupId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountPermission accountPermission = (AccountPermission) o;
    return Objects.equals(this.accountProfiles, accountPermission.accountProfiles) &&
        Objects.equals(this.id, accountPermission.id) &&
        Objects.equals(this.kind, accountPermission.kind) &&
        Objects.equals(this.level, accountPermission.level) &&
        Objects.equals(this.name, accountPermission.name) &&
        Objects.equals(this.permissionGroupId, accountPermission.permissionGroupId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountProfiles, id, kind, level, name, permissionGroupId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountPermission {\n");
    sb.append("    accountProfiles: ").append(toIndentedString(accountProfiles)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    permissionGroupId: ").append(toIndentedString(permissionGroupId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountProfiles");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("level");
    openapiFields.add("name");
    openapiFields.add("permissionGroupId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountPermission
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountPermission.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountPermission is not found in the empty JSON string", AccountPermission.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountPermission.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountPermission` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("accountProfiles") != null && !jsonObj.get("accountProfiles").isJsonNull() && !jsonObj.get("accountProfiles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountProfiles` to be an array in the JSON string but got `%s`", jsonObj.get("accountProfiles").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("level") != null && !jsonObj.get("level").isJsonNull()) && !jsonObj.get("level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("level").toString()));
      }
      // validate the optional field `level`
      if (jsonObj.get("level") != null && !jsonObj.get("level").isJsonNull()) {
        LevelEnum.validateJsonElement(jsonObj.get("level"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("permissionGroupId") != null && !jsonObj.get("permissionGroupId").isJsonNull()) && !jsonObj.get("permissionGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permissionGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permissionGroupId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountPermission.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountPermission' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountPermission> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountPermission.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountPermission>() {
           @Override
           public void write(JsonWriter out, AccountPermission value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountPermission read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountPermission given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountPermission
   * @throws IOException if the JSON string is invalid with respect to AccountPermission
   */
  public static AccountPermission fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountPermission.class);
  }

  /**
   * Convert an instance of AccountPermission to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

