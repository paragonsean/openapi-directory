/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CampaignManagerIds;
import org.openapitools.client.model.DV3Ids;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Custom event to be inserted.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:16.070314-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CustomEventInsert {
  public static final String SERIALIZED_NAME_CM_DIMENSIONS = "cmDimensions";
  @SerializedName(SERIALIZED_NAME_CM_DIMENSIONS)
  private CampaignManagerIds cmDimensions;

  public static final String SERIALIZED_NAME_DV3_DIMENSIONS = "dv3Dimensions";
  @SerializedName(SERIALIZED_NAME_DV3_DIMENSIONS)
  private DV3Ids dv3Dimensions;

  /**
   * The type of event to insert.
   */
  @JsonAdapter(InsertEventTypeEnum.Adapter.class)
  public enum InsertEventTypeEnum {
    UNKNOWN("UNKNOWN"),
    
    IMPRESSION("IMPRESSION"),
    
    CLICK("CLICK");

    private String value;

    InsertEventTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InsertEventTypeEnum fromValue(String value) {
      for (InsertEventTypeEnum b : InsertEventTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InsertEventTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InsertEventTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InsertEventTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InsertEventTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InsertEventTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INSERT_EVENT_TYPE = "insertEventType";
  @SerializedName(SERIALIZED_NAME_INSERT_EVENT_TYPE)
  private InsertEventTypeEnum insertEventType;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_MATCH_ID = "matchId";
  @SerializedName(SERIALIZED_NAME_MATCH_ID)
  private String matchId;

  public static final String SERIALIZED_NAME_MOBILE_DEVICE_ID = "mobileDeviceId";
  @SerializedName(SERIALIZED_NAME_MOBILE_DEVICE_ID)
  private String mobileDeviceId;

  public CustomEventInsert() {
  }

  public CustomEventInsert cmDimensions(CampaignManagerIds cmDimensions) {
    this.cmDimensions = cmDimensions;
    return this;
  }

  /**
   * Get cmDimensions
   * @return cmDimensions
   */
  @javax.annotation.Nullable
  public CampaignManagerIds getCmDimensions() {
    return cmDimensions;
  }

  public void setCmDimensions(CampaignManagerIds cmDimensions) {
    this.cmDimensions = cmDimensions;
  }


  public CustomEventInsert dv3Dimensions(DV3Ids dv3Dimensions) {
    this.dv3Dimensions = dv3Dimensions;
    return this;
  }

  /**
   * Get dv3Dimensions
   * @return dv3Dimensions
   */
  @javax.annotation.Nullable
  public DV3Ids getDv3Dimensions() {
    return dv3Dimensions;
  }

  public void setDv3Dimensions(DV3Ids dv3Dimensions) {
    this.dv3Dimensions = dv3Dimensions;
  }


  public CustomEventInsert insertEventType(InsertEventTypeEnum insertEventType) {
    this.insertEventType = insertEventType;
    return this;
  }

  /**
   * The type of event to insert.
   * @return insertEventType
   */
  @javax.annotation.Nullable
  public InsertEventTypeEnum getInsertEventType() {
    return insertEventType;
  }

  public void setInsertEventType(InsertEventTypeEnum insertEventType) {
    this.insertEventType = insertEventType;
  }


  public CustomEventInsert kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string \&quot;dfareporting#customEventInsert\&quot;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public CustomEventInsert matchId(String matchId) {
    this.matchId = matchId;
    return this;
  }

  /**
   * The match ID field. A match ID is your own first-party identifier that has been synced with Google using the match ID feature in Floodlight. This field is mutually exclusive with mobileDeviceId, and at least one of the two fields is required.
   * @return matchId
   */
  @javax.annotation.Nullable
  public String getMatchId() {
    return matchId;
  }

  public void setMatchId(String matchId) {
    this.matchId = matchId;
  }


  public CustomEventInsert mobileDeviceId(String mobileDeviceId) {
    this.mobileDeviceId = mobileDeviceId;
    return this;
  }

  /**
   * The mobile device ID. This field is mutually exclusive with matchId, and at least one of the two fields is required.
   * @return mobileDeviceId
   */
  @javax.annotation.Nullable
  public String getMobileDeviceId() {
    return mobileDeviceId;
  }

  public void setMobileDeviceId(String mobileDeviceId) {
    this.mobileDeviceId = mobileDeviceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomEventInsert customEventInsert = (CustomEventInsert) o;
    return Objects.equals(this.cmDimensions, customEventInsert.cmDimensions) &&
        Objects.equals(this.dv3Dimensions, customEventInsert.dv3Dimensions) &&
        Objects.equals(this.insertEventType, customEventInsert.insertEventType) &&
        Objects.equals(this.kind, customEventInsert.kind) &&
        Objects.equals(this.matchId, customEventInsert.matchId) &&
        Objects.equals(this.mobileDeviceId, customEventInsert.mobileDeviceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cmDimensions, dv3Dimensions, insertEventType, kind, matchId, mobileDeviceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomEventInsert {\n");
    sb.append("    cmDimensions: ").append(toIndentedString(cmDimensions)).append("\n");
    sb.append("    dv3Dimensions: ").append(toIndentedString(dv3Dimensions)).append("\n");
    sb.append("    insertEventType: ").append(toIndentedString(insertEventType)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    matchId: ").append(toIndentedString(matchId)).append("\n");
    sb.append("    mobileDeviceId: ").append(toIndentedString(mobileDeviceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cmDimensions");
    openapiFields.add("dv3Dimensions");
    openapiFields.add("insertEventType");
    openapiFields.add("kind");
    openapiFields.add("matchId");
    openapiFields.add("mobileDeviceId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomEventInsert
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomEventInsert.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomEventInsert is not found in the empty JSON string", CustomEventInsert.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomEventInsert.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomEventInsert` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cmDimensions`
      if (jsonObj.get("cmDimensions") != null && !jsonObj.get("cmDimensions").isJsonNull()) {
        CampaignManagerIds.validateJsonElement(jsonObj.get("cmDimensions"));
      }
      // validate the optional field `dv3Dimensions`
      if (jsonObj.get("dv3Dimensions") != null && !jsonObj.get("dv3Dimensions").isJsonNull()) {
        DV3Ids.validateJsonElement(jsonObj.get("dv3Dimensions"));
      }
      if ((jsonObj.get("insertEventType") != null && !jsonObj.get("insertEventType").isJsonNull()) && !jsonObj.get("insertEventType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `insertEventType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("insertEventType").toString()));
      }
      // validate the optional field `insertEventType`
      if (jsonObj.get("insertEventType") != null && !jsonObj.get("insertEventType").isJsonNull()) {
        InsertEventTypeEnum.validateJsonElement(jsonObj.get("insertEventType"));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("matchId") != null && !jsonObj.get("matchId").isJsonNull()) && !jsonObj.get("matchId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `matchId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("matchId").toString()));
      }
      if ((jsonObj.get("mobileDeviceId") != null && !jsonObj.get("mobileDeviceId").isJsonNull()) && !jsonObj.get("mobileDeviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobileDeviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobileDeviceId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomEventInsert.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomEventInsert' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomEventInsert> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomEventInsert.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomEventInsert>() {
           @Override
           public void write(JsonWriter out, CustomEventInsert value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomEventInsert read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomEventInsert given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomEventInsert
   * @throws IOException if the JSON string is invalid with respect to CustomEventInsert
   */
  public static CustomEventInsert fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomEventInsert.class);
  }

  /**
   * Convert an instance of CustomEventInsert to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

