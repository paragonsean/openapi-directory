/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Size;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Online Behavioral Advertiser icon.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:16.070314-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ObaIcon {
  public static final String SERIALIZED_NAME_ICON_CLICK_THROUGH_URL = "iconClickThroughUrl";
  @SerializedName(SERIALIZED_NAME_ICON_CLICK_THROUGH_URL)
  private String iconClickThroughUrl;

  public static final String SERIALIZED_NAME_ICON_CLICK_TRACKING_URL = "iconClickTrackingUrl";
  @SerializedName(SERIALIZED_NAME_ICON_CLICK_TRACKING_URL)
  private String iconClickTrackingUrl;

  public static final String SERIALIZED_NAME_ICON_VIEW_TRACKING_URL = "iconViewTrackingUrl";
  @SerializedName(SERIALIZED_NAME_ICON_VIEW_TRACKING_URL)
  private String iconViewTrackingUrl;

  public static final String SERIALIZED_NAME_PROGRAM = "program";
  @SerializedName(SERIALIZED_NAME_PROGRAM)
  private String program;

  public static final String SERIALIZED_NAME_RESOURCE_URL = "resourceUrl";
  @SerializedName(SERIALIZED_NAME_RESOURCE_URL)
  private String resourceUrl;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Size size;

  public static final String SERIALIZED_NAME_X_POSITION = "xPosition";
  @SerializedName(SERIALIZED_NAME_X_POSITION)
  private String xPosition;

  public static final String SERIALIZED_NAME_Y_POSITION = "yPosition";
  @SerializedName(SERIALIZED_NAME_Y_POSITION)
  private String yPosition;

  public ObaIcon() {
  }

  public ObaIcon iconClickThroughUrl(String iconClickThroughUrl) {
    this.iconClickThroughUrl = iconClickThroughUrl;
    return this;
  }

  /**
   * URL to redirect to when an OBA icon is clicked.
   * @return iconClickThroughUrl
   */
  @javax.annotation.Nullable
  public String getIconClickThroughUrl() {
    return iconClickThroughUrl;
  }

  public void setIconClickThroughUrl(String iconClickThroughUrl) {
    this.iconClickThroughUrl = iconClickThroughUrl;
  }


  public ObaIcon iconClickTrackingUrl(String iconClickTrackingUrl) {
    this.iconClickTrackingUrl = iconClickTrackingUrl;
    return this;
  }

  /**
   * URL to track click when an OBA icon is clicked.
   * @return iconClickTrackingUrl
   */
  @javax.annotation.Nullable
  public String getIconClickTrackingUrl() {
    return iconClickTrackingUrl;
  }

  public void setIconClickTrackingUrl(String iconClickTrackingUrl) {
    this.iconClickTrackingUrl = iconClickTrackingUrl;
  }


  public ObaIcon iconViewTrackingUrl(String iconViewTrackingUrl) {
    this.iconViewTrackingUrl = iconViewTrackingUrl;
    return this;
  }

  /**
   * URL to track view when an OBA icon is clicked.
   * @return iconViewTrackingUrl
   */
  @javax.annotation.Nullable
  public String getIconViewTrackingUrl() {
    return iconViewTrackingUrl;
  }

  public void setIconViewTrackingUrl(String iconViewTrackingUrl) {
    this.iconViewTrackingUrl = iconViewTrackingUrl;
  }


  public ObaIcon program(String program) {
    this.program = program;
    return this;
  }

  /**
   * Identifies the industry initiative that the icon supports. For example, AdChoices.
   * @return program
   */
  @javax.annotation.Nullable
  public String getProgram() {
    return program;
  }

  public void setProgram(String program) {
    this.program = program;
  }


  public ObaIcon resourceUrl(String resourceUrl) {
    this.resourceUrl = resourceUrl;
    return this;
  }

  /**
   * OBA icon resource URL. Campaign Manager only supports image and JavaScript icons. Learn more
   * @return resourceUrl
   */
  @javax.annotation.Nullable
  public String getResourceUrl() {
    return resourceUrl;
  }

  public void setResourceUrl(String resourceUrl) {
    this.resourceUrl = resourceUrl;
  }


  public ObaIcon size(Size size) {
    this.size = size;
    return this;
  }

  /**
   * Get size
   * @return size
   */
  @javax.annotation.Nullable
  public Size getSize() {
    return size;
  }

  public void setSize(Size size) {
    this.size = size;
  }


  public ObaIcon xPosition(String xPosition) {
    this.xPosition = xPosition;
    return this;
  }

  /**
   * OBA icon x coordinate position. Accepted values are left or right.
   * @return xPosition
   */
  @javax.annotation.Nullable
  public String getxPosition() {
    return xPosition;
  }

  public void setxPosition(String xPosition) {
    this.xPosition = xPosition;
  }


  public ObaIcon yPosition(String yPosition) {
    this.yPosition = yPosition;
    return this;
  }

  /**
   * OBA icon y coordinate position. Accepted values are top or bottom.
   * @return yPosition
   */
  @javax.annotation.Nullable
  public String getyPosition() {
    return yPosition;
  }

  public void setyPosition(String yPosition) {
    this.yPosition = yPosition;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObaIcon obaIcon = (ObaIcon) o;
    return Objects.equals(this.iconClickThroughUrl, obaIcon.iconClickThroughUrl) &&
        Objects.equals(this.iconClickTrackingUrl, obaIcon.iconClickTrackingUrl) &&
        Objects.equals(this.iconViewTrackingUrl, obaIcon.iconViewTrackingUrl) &&
        Objects.equals(this.program, obaIcon.program) &&
        Objects.equals(this.resourceUrl, obaIcon.resourceUrl) &&
        Objects.equals(this.size, obaIcon.size) &&
        Objects.equals(this.xPosition, obaIcon.xPosition) &&
        Objects.equals(this.yPosition, obaIcon.yPosition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(iconClickThroughUrl, iconClickTrackingUrl, iconViewTrackingUrl, program, resourceUrl, size, xPosition, yPosition);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObaIcon {\n");
    sb.append("    iconClickThroughUrl: ").append(toIndentedString(iconClickThroughUrl)).append("\n");
    sb.append("    iconClickTrackingUrl: ").append(toIndentedString(iconClickTrackingUrl)).append("\n");
    sb.append("    iconViewTrackingUrl: ").append(toIndentedString(iconViewTrackingUrl)).append("\n");
    sb.append("    program: ").append(toIndentedString(program)).append("\n");
    sb.append("    resourceUrl: ").append(toIndentedString(resourceUrl)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    xPosition: ").append(toIndentedString(xPosition)).append("\n");
    sb.append("    yPosition: ").append(toIndentedString(yPosition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("iconClickThroughUrl");
    openapiFields.add("iconClickTrackingUrl");
    openapiFields.add("iconViewTrackingUrl");
    openapiFields.add("program");
    openapiFields.add("resourceUrl");
    openapiFields.add("size");
    openapiFields.add("xPosition");
    openapiFields.add("yPosition");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ObaIcon
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ObaIcon.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ObaIcon is not found in the empty JSON string", ObaIcon.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ObaIcon.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ObaIcon` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("iconClickThroughUrl") != null && !jsonObj.get("iconClickThroughUrl").isJsonNull()) && !jsonObj.get("iconClickThroughUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iconClickThroughUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iconClickThroughUrl").toString()));
      }
      if ((jsonObj.get("iconClickTrackingUrl") != null && !jsonObj.get("iconClickTrackingUrl").isJsonNull()) && !jsonObj.get("iconClickTrackingUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iconClickTrackingUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iconClickTrackingUrl").toString()));
      }
      if ((jsonObj.get("iconViewTrackingUrl") != null && !jsonObj.get("iconViewTrackingUrl").isJsonNull()) && !jsonObj.get("iconViewTrackingUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iconViewTrackingUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iconViewTrackingUrl").toString()));
      }
      if ((jsonObj.get("program") != null && !jsonObj.get("program").isJsonNull()) && !jsonObj.get("program").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `program` to be a primitive type in the JSON string but got `%s`", jsonObj.get("program").toString()));
      }
      if ((jsonObj.get("resourceUrl") != null && !jsonObj.get("resourceUrl").isJsonNull()) && !jsonObj.get("resourceUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceUrl").toString()));
      }
      // validate the optional field `size`
      if (jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) {
        Size.validateJsonElement(jsonObj.get("size"));
      }
      if ((jsonObj.get("xPosition") != null && !jsonObj.get("xPosition").isJsonNull()) && !jsonObj.get("xPosition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xPosition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xPosition").toString()));
      }
      if ((jsonObj.get("yPosition") != null && !jsonObj.get("yPosition").isJsonNull()) && !jsonObj.get("yPosition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `yPosition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("yPosition").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ObaIcon.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ObaIcon' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ObaIcon> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ObaIcon.class));

       return (TypeAdapter<T>) new TypeAdapter<ObaIcon>() {
           @Override
           public void write(JsonWriter out, ObaIcon value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ObaIcon read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ObaIcon given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ObaIcon
   * @throws IOException if the JSON string is invalid with respect to ObaIcon
   */
  public static ObaIcon fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ObaIcon.class);
  }

  /**
   * Convert an instance of ObaIcon to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

