/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DimensionValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Creative optimization activity.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:16.070314-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OptimizationActivity {
  public static final String SERIALIZED_NAME_FLOODLIGHT_ACTIVITY_ID = "floodlightActivityId";
  @SerializedName(SERIALIZED_NAME_FLOODLIGHT_ACTIVITY_ID)
  private String floodlightActivityId;

  public static final String SERIALIZED_NAME_FLOODLIGHT_ACTIVITY_ID_DIMENSION_VALUE = "floodlightActivityIdDimensionValue";
  @SerializedName(SERIALIZED_NAME_FLOODLIGHT_ACTIVITY_ID_DIMENSION_VALUE)
  private DimensionValue floodlightActivityIdDimensionValue;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Integer weight;

  public OptimizationActivity() {
  }

  public OptimizationActivity floodlightActivityId(String floodlightActivityId) {
    this.floodlightActivityId = floodlightActivityId;
    return this;
  }

  /**
   * Floodlight activity ID of this optimization activity. This is a required field.
   * @return floodlightActivityId
   */
  @javax.annotation.Nullable
  public String getFloodlightActivityId() {
    return floodlightActivityId;
  }

  public void setFloodlightActivityId(String floodlightActivityId) {
    this.floodlightActivityId = floodlightActivityId;
  }


  public OptimizationActivity floodlightActivityIdDimensionValue(DimensionValue floodlightActivityIdDimensionValue) {
    this.floodlightActivityIdDimensionValue = floodlightActivityIdDimensionValue;
    return this;
  }

  /**
   * Get floodlightActivityIdDimensionValue
   * @return floodlightActivityIdDimensionValue
   */
  @javax.annotation.Nullable
  public DimensionValue getFloodlightActivityIdDimensionValue() {
    return floodlightActivityIdDimensionValue;
  }

  public void setFloodlightActivityIdDimensionValue(DimensionValue floodlightActivityIdDimensionValue) {
    this.floodlightActivityIdDimensionValue = floodlightActivityIdDimensionValue;
  }


  public OptimizationActivity weight(Integer weight) {
    this.weight = weight;
    return this;
  }

  /**
   * Weight associated with this optimization. The weight assigned will be understood in proportion to the weights assigned to the other optimization activities. Value must be greater than or equal to 1.
   * @return weight
   */
  @javax.annotation.Nullable
  public Integer getWeight() {
    return weight;
  }

  public void setWeight(Integer weight) {
    this.weight = weight;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OptimizationActivity optimizationActivity = (OptimizationActivity) o;
    return Objects.equals(this.floodlightActivityId, optimizationActivity.floodlightActivityId) &&
        Objects.equals(this.floodlightActivityIdDimensionValue, optimizationActivity.floodlightActivityIdDimensionValue) &&
        Objects.equals(this.weight, optimizationActivity.weight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(floodlightActivityId, floodlightActivityIdDimensionValue, weight);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OptimizationActivity {\n");
    sb.append("    floodlightActivityId: ").append(toIndentedString(floodlightActivityId)).append("\n");
    sb.append("    floodlightActivityIdDimensionValue: ").append(toIndentedString(floodlightActivityIdDimensionValue)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("floodlightActivityId");
    openapiFields.add("floodlightActivityIdDimensionValue");
    openapiFields.add("weight");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OptimizationActivity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OptimizationActivity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OptimizationActivity is not found in the empty JSON string", OptimizationActivity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OptimizationActivity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OptimizationActivity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("floodlightActivityId") != null && !jsonObj.get("floodlightActivityId").isJsonNull()) && !jsonObj.get("floodlightActivityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `floodlightActivityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("floodlightActivityId").toString()));
      }
      // validate the optional field `floodlightActivityIdDimensionValue`
      if (jsonObj.get("floodlightActivityIdDimensionValue") != null && !jsonObj.get("floodlightActivityIdDimensionValue").isJsonNull()) {
        DimensionValue.validateJsonElement(jsonObj.get("floodlightActivityIdDimensionValue"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OptimizationActivity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OptimizationActivity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OptimizationActivity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OptimizationActivity.class));

       return (TypeAdapter<T>) new TypeAdapter<OptimizationActivity>() {
           @Override
           public void write(JsonWriter out, OptimizationActivity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OptimizationActivity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OptimizationActivity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OptimizationActivity
   * @throws IOException if the JSON string is invalid with respect to OptimizationActivity
   */
  public static OptimizationActivity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OptimizationActivity.class);
  }

  /**
   * Convert an instance of OptimizationActivity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

