/*
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AdSlot;
import org.openapitools.client.model.LastModifiedInfo;
import org.openapitools.client.model.Pricing;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a buy from the Planning inventory store.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:16.070314-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InventoryItem {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_AD_SLOTS = "adSlots";
  @SerializedName(SERIALIZED_NAME_AD_SLOTS)
  private List<AdSlot> adSlots = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADVERTISER_ID = "advertiserId";
  @SerializedName(SERIALIZED_NAME_ADVERTISER_ID)
  private String advertiserId;

  public static final String SERIALIZED_NAME_CONTENT_CATEGORY_ID = "contentCategoryId";
  @SerializedName(SERIALIZED_NAME_CONTENT_CATEGORY_ID)
  private String contentCategoryId;

  public static final String SERIALIZED_NAME_ESTIMATED_CLICK_THROUGH_RATE = "estimatedClickThroughRate";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_CLICK_THROUGH_RATE)
  private String estimatedClickThroughRate;

  public static final String SERIALIZED_NAME_ESTIMATED_CONVERSION_RATE = "estimatedConversionRate";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_CONVERSION_RATE)
  private String estimatedConversionRate;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IN_PLAN = "inPlan";
  @SerializedName(SERIALIZED_NAME_IN_PLAN)
  private Boolean inPlan;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_INFO = "lastModifiedInfo";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_INFO)
  private LastModifiedInfo lastModifiedInfo;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NEGOTIATION_CHANNEL_ID = "negotiationChannelId";
  @SerializedName(SERIALIZED_NAME_NEGOTIATION_CHANNEL_ID)
  private String negotiationChannelId;

  public static final String SERIALIZED_NAME_ORDER_ID = "orderId";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_PLACEMENT_STRATEGY_ID = "placementStrategyId";
  @SerializedName(SERIALIZED_NAME_PLACEMENT_STRATEGY_ID)
  private String placementStrategyId;

  public static final String SERIALIZED_NAME_PRICING = "pricing";
  @SerializedName(SERIALIZED_NAME_PRICING)
  private Pricing pricing;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private String projectId;

  public static final String SERIALIZED_NAME_RFP_ID = "rfpId";
  @SerializedName(SERIALIZED_NAME_RFP_ID)
  private String rfpId;

  public static final String SERIALIZED_NAME_SITE_ID = "siteId";
  @SerializedName(SERIALIZED_NAME_SITE_ID)
  private String siteId;

  public static final String SERIALIZED_NAME_SUBACCOUNT_ID = "subaccountId";
  @SerializedName(SERIALIZED_NAME_SUBACCOUNT_ID)
  private String subaccountId;

  /**
   * Type of inventory item.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    REGULAR("PLANNING_PLACEMENT_TYPE_REGULAR"),
    
    CREDIT("PLANNING_PLACEMENT_TYPE_CREDIT");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public InventoryItem() {
  }

  public InventoryItem accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Account ID of this inventory item.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public InventoryItem adSlots(List<AdSlot> adSlots) {
    this.adSlots = adSlots;
    return this;
  }

  public InventoryItem addAdSlotsItem(AdSlot adSlotsItem) {
    if (this.adSlots == null) {
      this.adSlots = new ArrayList<>();
    }
    this.adSlots.add(adSlotsItem);
    return this;
  }

  /**
   * Ad slots of this inventory item. If this inventory item represents a standalone placement, there will be exactly one ad slot. If this inventory item represents a placement group, there will be more than one ad slot, each representing one child placement in that placement group.
   * @return adSlots
   */
  @javax.annotation.Nullable
  public List<AdSlot> getAdSlots() {
    return adSlots;
  }

  public void setAdSlots(List<AdSlot> adSlots) {
    this.adSlots = adSlots;
  }


  public InventoryItem advertiserId(String advertiserId) {
    this.advertiserId = advertiserId;
    return this;
  }

  /**
   * Advertiser ID of this inventory item.
   * @return advertiserId
   */
  @javax.annotation.Nullable
  public String getAdvertiserId() {
    return advertiserId;
  }

  public void setAdvertiserId(String advertiserId) {
    this.advertiserId = advertiserId;
  }


  public InventoryItem contentCategoryId(String contentCategoryId) {
    this.contentCategoryId = contentCategoryId;
    return this;
  }

  /**
   * Content category ID of this inventory item.
   * @return contentCategoryId
   */
  @javax.annotation.Nullable
  public String getContentCategoryId() {
    return contentCategoryId;
  }

  public void setContentCategoryId(String contentCategoryId) {
    this.contentCategoryId = contentCategoryId;
  }


  public InventoryItem estimatedClickThroughRate(String estimatedClickThroughRate) {
    this.estimatedClickThroughRate = estimatedClickThroughRate;
    return this;
  }

  /**
   * Estimated click-through rate of this inventory item.
   * @return estimatedClickThroughRate
   */
  @javax.annotation.Nullable
  public String getEstimatedClickThroughRate() {
    return estimatedClickThroughRate;
  }

  public void setEstimatedClickThroughRate(String estimatedClickThroughRate) {
    this.estimatedClickThroughRate = estimatedClickThroughRate;
  }


  public InventoryItem estimatedConversionRate(String estimatedConversionRate) {
    this.estimatedConversionRate = estimatedConversionRate;
    return this;
  }

  /**
   * Estimated conversion rate of this inventory item.
   * @return estimatedConversionRate
   */
  @javax.annotation.Nullable
  public String getEstimatedConversionRate() {
    return estimatedConversionRate;
  }

  public void setEstimatedConversionRate(String estimatedConversionRate) {
    this.estimatedConversionRate = estimatedConversionRate;
  }


  public InventoryItem id(String id) {
    this.id = id;
    return this;
  }

  /**
   * ID of this inventory item.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public InventoryItem inPlan(Boolean inPlan) {
    this.inPlan = inPlan;
    return this;
  }

  /**
   * Whether this inventory item is in plan.
   * @return inPlan
   */
  @javax.annotation.Nullable
  public Boolean getInPlan() {
    return inPlan;
  }

  public void setInPlan(Boolean inPlan) {
    this.inPlan = inPlan;
  }


  public InventoryItem kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string \&quot;dfareporting#inventoryItem\&quot;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public InventoryItem lastModifiedInfo(LastModifiedInfo lastModifiedInfo) {
    this.lastModifiedInfo = lastModifiedInfo;
    return this;
  }

  /**
   * Get lastModifiedInfo
   * @return lastModifiedInfo
   */
  @javax.annotation.Nullable
  public LastModifiedInfo getLastModifiedInfo() {
    return lastModifiedInfo;
  }

  public void setLastModifiedInfo(LastModifiedInfo lastModifiedInfo) {
    this.lastModifiedInfo = lastModifiedInfo;
  }


  public InventoryItem name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of this inventory item. For standalone inventory items, this is the same name as that of its only ad slot. For group inventory items, this can differ from the name of any of its ad slots.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public InventoryItem negotiationChannelId(String negotiationChannelId) {
    this.negotiationChannelId = negotiationChannelId;
    return this;
  }

  /**
   * Negotiation channel ID of this inventory item.
   * @return negotiationChannelId
   */
  @javax.annotation.Nullable
  public String getNegotiationChannelId() {
    return negotiationChannelId;
  }

  public void setNegotiationChannelId(String negotiationChannelId) {
    this.negotiationChannelId = negotiationChannelId;
  }


  public InventoryItem orderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * Order ID of this inventory item.
   * @return orderId
   */
  @javax.annotation.Nullable
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }


  public InventoryItem placementStrategyId(String placementStrategyId) {
    this.placementStrategyId = placementStrategyId;
    return this;
  }

  /**
   * Placement strategy ID of this inventory item.
   * @return placementStrategyId
   */
  @javax.annotation.Nullable
  public String getPlacementStrategyId() {
    return placementStrategyId;
  }

  public void setPlacementStrategyId(String placementStrategyId) {
    this.placementStrategyId = placementStrategyId;
  }


  public InventoryItem pricing(Pricing pricing) {
    this.pricing = pricing;
    return this;
  }

  /**
   * Get pricing
   * @return pricing
   */
  @javax.annotation.Nullable
  public Pricing getPricing() {
    return pricing;
  }

  public void setPricing(Pricing pricing) {
    this.pricing = pricing;
  }


  public InventoryItem projectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * Project ID of this inventory item.
   * @return projectId
   */
  @javax.annotation.Nullable
  public String getProjectId() {
    return projectId;
  }

  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }


  public InventoryItem rfpId(String rfpId) {
    this.rfpId = rfpId;
    return this;
  }

  /**
   * RFP ID of this inventory item.
   * @return rfpId
   */
  @javax.annotation.Nullable
  public String getRfpId() {
    return rfpId;
  }

  public void setRfpId(String rfpId) {
    this.rfpId = rfpId;
  }


  public InventoryItem siteId(String siteId) {
    this.siteId = siteId;
    return this;
  }

  /**
   * ID of the site this inventory item is associated with.
   * @return siteId
   */
  @javax.annotation.Nullable
  public String getSiteId() {
    return siteId;
  }

  public void setSiteId(String siteId) {
    this.siteId = siteId;
  }


  public InventoryItem subaccountId(String subaccountId) {
    this.subaccountId = subaccountId;
    return this;
  }

  /**
   * Subaccount ID of this inventory item.
   * @return subaccountId
   */
  @javax.annotation.Nullable
  public String getSubaccountId() {
    return subaccountId;
  }

  public void setSubaccountId(String subaccountId) {
    this.subaccountId = subaccountId;
  }


  public InventoryItem type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Type of inventory item.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InventoryItem inventoryItem = (InventoryItem) o;
    return Objects.equals(this.accountId, inventoryItem.accountId) &&
        Objects.equals(this.adSlots, inventoryItem.adSlots) &&
        Objects.equals(this.advertiserId, inventoryItem.advertiserId) &&
        Objects.equals(this.contentCategoryId, inventoryItem.contentCategoryId) &&
        Objects.equals(this.estimatedClickThroughRate, inventoryItem.estimatedClickThroughRate) &&
        Objects.equals(this.estimatedConversionRate, inventoryItem.estimatedConversionRate) &&
        Objects.equals(this.id, inventoryItem.id) &&
        Objects.equals(this.inPlan, inventoryItem.inPlan) &&
        Objects.equals(this.kind, inventoryItem.kind) &&
        Objects.equals(this.lastModifiedInfo, inventoryItem.lastModifiedInfo) &&
        Objects.equals(this.name, inventoryItem.name) &&
        Objects.equals(this.negotiationChannelId, inventoryItem.negotiationChannelId) &&
        Objects.equals(this.orderId, inventoryItem.orderId) &&
        Objects.equals(this.placementStrategyId, inventoryItem.placementStrategyId) &&
        Objects.equals(this.pricing, inventoryItem.pricing) &&
        Objects.equals(this.projectId, inventoryItem.projectId) &&
        Objects.equals(this.rfpId, inventoryItem.rfpId) &&
        Objects.equals(this.siteId, inventoryItem.siteId) &&
        Objects.equals(this.subaccountId, inventoryItem.subaccountId) &&
        Objects.equals(this.type, inventoryItem.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, adSlots, advertiserId, contentCategoryId, estimatedClickThroughRate, estimatedConversionRate, id, inPlan, kind, lastModifiedInfo, name, negotiationChannelId, orderId, placementStrategyId, pricing, projectId, rfpId, siteId, subaccountId, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InventoryItem {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    adSlots: ").append(toIndentedString(adSlots)).append("\n");
    sb.append("    advertiserId: ").append(toIndentedString(advertiserId)).append("\n");
    sb.append("    contentCategoryId: ").append(toIndentedString(contentCategoryId)).append("\n");
    sb.append("    estimatedClickThroughRate: ").append(toIndentedString(estimatedClickThroughRate)).append("\n");
    sb.append("    estimatedConversionRate: ").append(toIndentedString(estimatedConversionRate)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inPlan: ").append(toIndentedString(inPlan)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    lastModifiedInfo: ").append(toIndentedString(lastModifiedInfo)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    negotiationChannelId: ").append(toIndentedString(negotiationChannelId)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    placementStrategyId: ").append(toIndentedString(placementStrategyId)).append("\n");
    sb.append("    pricing: ").append(toIndentedString(pricing)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    rfpId: ").append(toIndentedString(rfpId)).append("\n");
    sb.append("    siteId: ").append(toIndentedString(siteId)).append("\n");
    sb.append("    subaccountId: ").append(toIndentedString(subaccountId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("adSlots");
    openapiFields.add("advertiserId");
    openapiFields.add("contentCategoryId");
    openapiFields.add("estimatedClickThroughRate");
    openapiFields.add("estimatedConversionRate");
    openapiFields.add("id");
    openapiFields.add("inPlan");
    openapiFields.add("kind");
    openapiFields.add("lastModifiedInfo");
    openapiFields.add("name");
    openapiFields.add("negotiationChannelId");
    openapiFields.add("orderId");
    openapiFields.add("placementStrategyId");
    openapiFields.add("pricing");
    openapiFields.add("projectId");
    openapiFields.add("rfpId");
    openapiFields.add("siteId");
    openapiFields.add("subaccountId");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InventoryItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InventoryItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InventoryItem is not found in the empty JSON string", InventoryItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InventoryItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InventoryItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if (jsonObj.get("adSlots") != null && !jsonObj.get("adSlots").isJsonNull()) {
        JsonArray jsonArrayadSlots = jsonObj.getAsJsonArray("adSlots");
        if (jsonArrayadSlots != null) {
          // ensure the json data is an array
          if (!jsonObj.get("adSlots").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `adSlots` to be an array in the JSON string but got `%s`", jsonObj.get("adSlots").toString()));
          }

          // validate the optional field `adSlots` (array)
          for (int i = 0; i < jsonArrayadSlots.size(); i++) {
            AdSlot.validateJsonElement(jsonArrayadSlots.get(i));
          };
        }
      }
      if ((jsonObj.get("advertiserId") != null && !jsonObj.get("advertiserId").isJsonNull()) && !jsonObj.get("advertiserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advertiserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advertiserId").toString()));
      }
      if ((jsonObj.get("contentCategoryId") != null && !jsonObj.get("contentCategoryId").isJsonNull()) && !jsonObj.get("contentCategoryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentCategoryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentCategoryId").toString()));
      }
      if ((jsonObj.get("estimatedClickThroughRate") != null && !jsonObj.get("estimatedClickThroughRate").isJsonNull()) && !jsonObj.get("estimatedClickThroughRate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `estimatedClickThroughRate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("estimatedClickThroughRate").toString()));
      }
      if ((jsonObj.get("estimatedConversionRate") != null && !jsonObj.get("estimatedConversionRate").isJsonNull()) && !jsonObj.get("estimatedConversionRate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `estimatedConversionRate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("estimatedConversionRate").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `lastModifiedInfo`
      if (jsonObj.get("lastModifiedInfo") != null && !jsonObj.get("lastModifiedInfo").isJsonNull()) {
        LastModifiedInfo.validateJsonElement(jsonObj.get("lastModifiedInfo"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("negotiationChannelId") != null && !jsonObj.get("negotiationChannelId").isJsonNull()) && !jsonObj.get("negotiationChannelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `negotiationChannelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("negotiationChannelId").toString()));
      }
      if ((jsonObj.get("orderId") != null && !jsonObj.get("orderId").isJsonNull()) && !jsonObj.get("orderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderId").toString()));
      }
      if ((jsonObj.get("placementStrategyId") != null && !jsonObj.get("placementStrategyId").isJsonNull()) && !jsonObj.get("placementStrategyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `placementStrategyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("placementStrategyId").toString()));
      }
      // validate the optional field `pricing`
      if (jsonObj.get("pricing") != null && !jsonObj.get("pricing").isJsonNull()) {
        Pricing.validateJsonElement(jsonObj.get("pricing"));
      }
      if ((jsonObj.get("projectId") != null && !jsonObj.get("projectId").isJsonNull()) && !jsonObj.get("projectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectId").toString()));
      }
      if ((jsonObj.get("rfpId") != null && !jsonObj.get("rfpId").isJsonNull()) && !jsonObj.get("rfpId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rfpId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rfpId").toString()));
      }
      if ((jsonObj.get("siteId") != null && !jsonObj.get("siteId").isJsonNull()) && !jsonObj.get("siteId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `siteId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("siteId").toString()));
      }
      if ((jsonObj.get("subaccountId") != null && !jsonObj.get("subaccountId").isJsonNull()) && !jsonObj.get("subaccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subaccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subaccountId").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InventoryItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InventoryItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InventoryItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InventoryItem.class));

       return (TypeAdapter<T>) new TypeAdapter<InventoryItem>() {
           @Override
           public void write(JsonWriter out, InventoryItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InventoryItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InventoryItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InventoryItem
   * @throws IOException if the JSON string is invalid with respect to InventoryItem
   */
  public static InventoryItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InventoryItem.class);
  }

  /**
   * Convert an instance of InventoryItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

