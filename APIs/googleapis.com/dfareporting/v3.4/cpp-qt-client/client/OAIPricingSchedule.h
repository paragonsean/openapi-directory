/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPricingSchedule.h
 *
 * Pricing Schedule
 */

#ifndef OAIPricingSchedule_H
#define OAIPricingSchedule_H

#include <QJsonObject>

#include "OAIPricingSchedulePricingPeriod.h"
#include <QDate>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPricingSchedulePricingPeriod;

class OAIPricingSchedule : public OAIObject {
public:
    OAIPricingSchedule();
    OAIPricingSchedule(QString json);
    ~OAIPricingSchedule() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCapCostOption() const;
    void setCapCostOption(const QString &cap_cost_option);
    bool is_cap_cost_option_Set() const;
    bool is_cap_cost_option_Valid() const;

    QDate getEndDate() const;
    void setEndDate(const QDate &end_date);
    bool is_end_date_Set() const;
    bool is_end_date_Valid() const;

    bool isFlighted() const;
    void setFlighted(const bool &flighted);
    bool is_flighted_Set() const;
    bool is_flighted_Valid() const;

    QString getFloodlightActivityId() const;
    void setFloodlightActivityId(const QString &floodlight_activity_id);
    bool is_floodlight_activity_id_Set() const;
    bool is_floodlight_activity_id_Valid() const;

    QList<OAIPricingSchedulePricingPeriod> getPricingPeriods() const;
    void setPricingPeriods(const QList<OAIPricingSchedulePricingPeriod> &pricing_periods);
    bool is_pricing_periods_Set() const;
    bool is_pricing_periods_Valid() const;

    QString getPricingType() const;
    void setPricingType(const QString &pricing_type);
    bool is_pricing_type_Set() const;
    bool is_pricing_type_Valid() const;

    QDate getStartDate() const;
    void setStartDate(const QDate &start_date);
    bool is_start_date_Set() const;
    bool is_start_date_Valid() const;

    QDate getTestingStartDate() const;
    void setTestingStartDate(const QDate &testing_start_date);
    bool is_testing_start_date_Set() const;
    bool is_testing_start_date_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_cap_cost_option;
    bool m_cap_cost_option_isSet;
    bool m_cap_cost_option_isValid;

    QDate m_end_date;
    bool m_end_date_isSet;
    bool m_end_date_isValid;

    bool m_flighted;
    bool m_flighted_isSet;
    bool m_flighted_isValid;

    QString m_floodlight_activity_id;
    bool m_floodlight_activity_id_isSet;
    bool m_floodlight_activity_id_isValid;

    QList<OAIPricingSchedulePricingPeriod> m_pricing_periods;
    bool m_pricing_periods_isSet;
    bool m_pricing_periods_isValid;

    QString m_pricing_type;
    bool m_pricing_type_isSet;
    bool m_pricing_type_isValid;

    QDate m_start_date;
    bool m_start_date_isSet;
    bool m_start_date_isValid;

    QDate m_testing_start_date;
    bool m_testing_start_date_isSet;
    bool m_testing_start_date_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPricingSchedule)

#endif // OAIPricingSchedule_H
