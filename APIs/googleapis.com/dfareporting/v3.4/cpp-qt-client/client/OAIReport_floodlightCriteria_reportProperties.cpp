/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReport_floodlightCriteria_reportProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReport_floodlightCriteria_reportProperties::OAIReport_floodlightCriteria_reportProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReport_floodlightCriteria_reportProperties::OAIReport_floodlightCriteria_reportProperties() {
    this->initializeModel();
}

OAIReport_floodlightCriteria_reportProperties::~OAIReport_floodlightCriteria_reportProperties() {}

void OAIReport_floodlightCriteria_reportProperties::initializeModel() {

    m_include_attributed_ip_conversions_isSet = false;
    m_include_attributed_ip_conversions_isValid = false;

    m_include_unattributed_cookie_conversions_isSet = false;
    m_include_unattributed_cookie_conversions_isValid = false;

    m_include_unattributed_ip_conversions_isSet = false;
    m_include_unattributed_ip_conversions_isValid = false;
}

void OAIReport_floodlightCriteria_reportProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReport_floodlightCriteria_reportProperties::fromJsonObject(QJsonObject json) {

    m_include_attributed_ip_conversions_isValid = ::OpenAPI::fromJsonValue(m_include_attributed_ip_conversions, json[QString("includeAttributedIPConversions")]);
    m_include_attributed_ip_conversions_isSet = !json[QString("includeAttributedIPConversions")].isNull() && m_include_attributed_ip_conversions_isValid;

    m_include_unattributed_cookie_conversions_isValid = ::OpenAPI::fromJsonValue(m_include_unattributed_cookie_conversions, json[QString("includeUnattributedCookieConversions")]);
    m_include_unattributed_cookie_conversions_isSet = !json[QString("includeUnattributedCookieConversions")].isNull() && m_include_unattributed_cookie_conversions_isValid;

    m_include_unattributed_ip_conversions_isValid = ::OpenAPI::fromJsonValue(m_include_unattributed_ip_conversions, json[QString("includeUnattributedIPConversions")]);
    m_include_unattributed_ip_conversions_isSet = !json[QString("includeUnattributedIPConversions")].isNull() && m_include_unattributed_ip_conversions_isValid;
}

QString OAIReport_floodlightCriteria_reportProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReport_floodlightCriteria_reportProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_include_attributed_ip_conversions_isSet) {
        obj.insert(QString("includeAttributedIPConversions"), ::OpenAPI::toJsonValue(m_include_attributed_ip_conversions));
    }
    if (m_include_unattributed_cookie_conversions_isSet) {
        obj.insert(QString("includeUnattributedCookieConversions"), ::OpenAPI::toJsonValue(m_include_unattributed_cookie_conversions));
    }
    if (m_include_unattributed_ip_conversions_isSet) {
        obj.insert(QString("includeUnattributedIPConversions"), ::OpenAPI::toJsonValue(m_include_unattributed_ip_conversions));
    }
    return obj;
}

bool OAIReport_floodlightCriteria_reportProperties::isIncludeAttributedIpConversions() const {
    return m_include_attributed_ip_conversions;
}
void OAIReport_floodlightCriteria_reportProperties::setIncludeAttributedIpConversions(const bool &include_attributed_ip_conversions) {
    m_include_attributed_ip_conversions = include_attributed_ip_conversions;
    m_include_attributed_ip_conversions_isSet = true;
}

bool OAIReport_floodlightCriteria_reportProperties::is_include_attributed_ip_conversions_Set() const{
    return m_include_attributed_ip_conversions_isSet;
}

bool OAIReport_floodlightCriteria_reportProperties::is_include_attributed_ip_conversions_Valid() const{
    return m_include_attributed_ip_conversions_isValid;
}

bool OAIReport_floodlightCriteria_reportProperties::isIncludeUnattributedCookieConversions() const {
    return m_include_unattributed_cookie_conversions;
}
void OAIReport_floodlightCriteria_reportProperties::setIncludeUnattributedCookieConversions(const bool &include_unattributed_cookie_conversions) {
    m_include_unattributed_cookie_conversions = include_unattributed_cookie_conversions;
    m_include_unattributed_cookie_conversions_isSet = true;
}

bool OAIReport_floodlightCriteria_reportProperties::is_include_unattributed_cookie_conversions_Set() const{
    return m_include_unattributed_cookie_conversions_isSet;
}

bool OAIReport_floodlightCriteria_reportProperties::is_include_unattributed_cookie_conversions_Valid() const{
    return m_include_unattributed_cookie_conversions_isValid;
}

bool OAIReport_floodlightCriteria_reportProperties::isIncludeUnattributedIpConversions() const {
    return m_include_unattributed_ip_conversions;
}
void OAIReport_floodlightCriteria_reportProperties::setIncludeUnattributedIpConversions(const bool &include_unattributed_ip_conversions) {
    m_include_unattributed_ip_conversions = include_unattributed_ip_conversions;
    m_include_unattributed_ip_conversions_isSet = true;
}

bool OAIReport_floodlightCriteria_reportProperties::is_include_unattributed_ip_conversions_Set() const{
    return m_include_unattributed_ip_conversions_isSet;
}

bool OAIReport_floodlightCriteria_reportProperties::is_include_unattributed_ip_conversions_Valid() const{
    return m_include_unattributed_ip_conversions_isValid;
}

bool OAIReport_floodlightCriteria_reportProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_include_attributed_ip_conversions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_unattributed_cookie_conversions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_unattributed_ip_conversions_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReport_floodlightCriteria_reportProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
