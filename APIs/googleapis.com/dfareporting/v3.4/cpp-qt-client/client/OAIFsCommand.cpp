/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFsCommand.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFsCommand::OAIFsCommand(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFsCommand::OAIFsCommand() {
    this->initializeModel();
}

OAIFsCommand::~OAIFsCommand() {}

void OAIFsCommand::initializeModel() {

    m_left_isSet = false;
    m_left_isValid = false;

    m_position_option_isSet = false;
    m_position_option_isValid = false;

    m_top_isSet = false;
    m_top_isValid = false;

    m_window_height_isSet = false;
    m_window_height_isValid = false;

    m_window_width_isSet = false;
    m_window_width_isValid = false;
}

void OAIFsCommand::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFsCommand::fromJsonObject(QJsonObject json) {

    m_left_isValid = ::OpenAPI::fromJsonValue(m_left, json[QString("left")]);
    m_left_isSet = !json[QString("left")].isNull() && m_left_isValid;

    m_position_option_isValid = ::OpenAPI::fromJsonValue(m_position_option, json[QString("positionOption")]);
    m_position_option_isSet = !json[QString("positionOption")].isNull() && m_position_option_isValid;

    m_top_isValid = ::OpenAPI::fromJsonValue(m_top, json[QString("top")]);
    m_top_isSet = !json[QString("top")].isNull() && m_top_isValid;

    m_window_height_isValid = ::OpenAPI::fromJsonValue(m_window_height, json[QString("windowHeight")]);
    m_window_height_isSet = !json[QString("windowHeight")].isNull() && m_window_height_isValid;

    m_window_width_isValid = ::OpenAPI::fromJsonValue(m_window_width, json[QString("windowWidth")]);
    m_window_width_isSet = !json[QString("windowWidth")].isNull() && m_window_width_isValid;
}

QString OAIFsCommand::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFsCommand::asJsonObject() const {
    QJsonObject obj;
    if (m_left_isSet) {
        obj.insert(QString("left"), ::OpenAPI::toJsonValue(m_left));
    }
    if (m_position_option_isSet) {
        obj.insert(QString("positionOption"), ::OpenAPI::toJsonValue(m_position_option));
    }
    if (m_top_isSet) {
        obj.insert(QString("top"), ::OpenAPI::toJsonValue(m_top));
    }
    if (m_window_height_isSet) {
        obj.insert(QString("windowHeight"), ::OpenAPI::toJsonValue(m_window_height));
    }
    if (m_window_width_isSet) {
        obj.insert(QString("windowWidth"), ::OpenAPI::toJsonValue(m_window_width));
    }
    return obj;
}

qint32 OAIFsCommand::getLeft() const {
    return m_left;
}
void OAIFsCommand::setLeft(const qint32 &left) {
    m_left = left;
    m_left_isSet = true;
}

bool OAIFsCommand::is_left_Set() const{
    return m_left_isSet;
}

bool OAIFsCommand::is_left_Valid() const{
    return m_left_isValid;
}

QString OAIFsCommand::getPositionOption() const {
    return m_position_option;
}
void OAIFsCommand::setPositionOption(const QString &position_option) {
    m_position_option = position_option;
    m_position_option_isSet = true;
}

bool OAIFsCommand::is_position_option_Set() const{
    return m_position_option_isSet;
}

bool OAIFsCommand::is_position_option_Valid() const{
    return m_position_option_isValid;
}

qint32 OAIFsCommand::getTop() const {
    return m_top;
}
void OAIFsCommand::setTop(const qint32 &top) {
    m_top = top;
    m_top_isSet = true;
}

bool OAIFsCommand::is_top_Set() const{
    return m_top_isSet;
}

bool OAIFsCommand::is_top_Valid() const{
    return m_top_isValid;
}

qint32 OAIFsCommand::getWindowHeight() const {
    return m_window_height;
}
void OAIFsCommand::setWindowHeight(const qint32 &window_height) {
    m_window_height = window_height;
    m_window_height_isSet = true;
}

bool OAIFsCommand::is_window_height_Set() const{
    return m_window_height_isSet;
}

bool OAIFsCommand::is_window_height_Valid() const{
    return m_window_height_isValid;
}

qint32 OAIFsCommand::getWindowWidth() const {
    return m_window_width;
}
void OAIFsCommand::setWindowWidth(const qint32 &window_width) {
    m_window_width = window_width;
    m_window_width_isSet = true;
}

bool OAIFsCommand::is_window_width_Set() const{
    return m_window_width_isSet;
}

bool OAIFsCommand::is_window_width_Valid() const{
    return m_window_width_isValid;
}

bool OAIFsCommand::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_left_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_window_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_window_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFsCommand::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
