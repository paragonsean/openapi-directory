/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountActiveAdSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountActiveAdSummary::OAIAccountActiveAdSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountActiveAdSummary::OAIAccountActiveAdSummary() {
    this->initializeModel();
}

OAIAccountActiveAdSummary::~OAIAccountActiveAdSummary() {}

void OAIAccountActiveAdSummary::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_active_ads_isSet = false;
    m_active_ads_isValid = false;

    m_active_ads_limit_tier_isSet = false;
    m_active_ads_limit_tier_isValid = false;

    m_available_ads_isSet = false;
    m_available_ads_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;
}

void OAIAccountActiveAdSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountActiveAdSummary::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_active_ads_isValid = ::OpenAPI::fromJsonValue(m_active_ads, json[QString("activeAds")]);
    m_active_ads_isSet = !json[QString("activeAds")].isNull() && m_active_ads_isValid;

    m_active_ads_limit_tier_isValid = ::OpenAPI::fromJsonValue(m_active_ads_limit_tier, json[QString("activeAdsLimitTier")]);
    m_active_ads_limit_tier_isSet = !json[QString("activeAdsLimitTier")].isNull() && m_active_ads_limit_tier_isValid;

    m_available_ads_isValid = ::OpenAPI::fromJsonValue(m_available_ads, json[QString("availableAds")]);
    m_available_ads_isSet = !json[QString("availableAds")].isNull() && m_available_ads_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;
}

QString OAIAccountActiveAdSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountActiveAdSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_active_ads_isSet) {
        obj.insert(QString("activeAds"), ::OpenAPI::toJsonValue(m_active_ads));
    }
    if (m_active_ads_limit_tier_isSet) {
        obj.insert(QString("activeAdsLimitTier"), ::OpenAPI::toJsonValue(m_active_ads_limit_tier));
    }
    if (m_available_ads_isSet) {
        obj.insert(QString("availableAds"), ::OpenAPI::toJsonValue(m_available_ads));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    return obj;
}

QString OAIAccountActiveAdSummary::getAccountId() const {
    return m_account_id;
}
void OAIAccountActiveAdSummary::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIAccountActiveAdSummary::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIAccountActiveAdSummary::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIAccountActiveAdSummary::getActiveAds() const {
    return m_active_ads;
}
void OAIAccountActiveAdSummary::setActiveAds(const QString &active_ads) {
    m_active_ads = active_ads;
    m_active_ads_isSet = true;
}

bool OAIAccountActiveAdSummary::is_active_ads_Set() const{
    return m_active_ads_isSet;
}

bool OAIAccountActiveAdSummary::is_active_ads_Valid() const{
    return m_active_ads_isValid;
}

QString OAIAccountActiveAdSummary::getActiveAdsLimitTier() const {
    return m_active_ads_limit_tier;
}
void OAIAccountActiveAdSummary::setActiveAdsLimitTier(const QString &active_ads_limit_tier) {
    m_active_ads_limit_tier = active_ads_limit_tier;
    m_active_ads_limit_tier_isSet = true;
}

bool OAIAccountActiveAdSummary::is_active_ads_limit_tier_Set() const{
    return m_active_ads_limit_tier_isSet;
}

bool OAIAccountActiveAdSummary::is_active_ads_limit_tier_Valid() const{
    return m_active_ads_limit_tier_isValid;
}

QString OAIAccountActiveAdSummary::getAvailableAds() const {
    return m_available_ads;
}
void OAIAccountActiveAdSummary::setAvailableAds(const QString &available_ads) {
    m_available_ads = available_ads;
    m_available_ads_isSet = true;
}

bool OAIAccountActiveAdSummary::is_available_ads_Set() const{
    return m_available_ads_isSet;
}

bool OAIAccountActiveAdSummary::is_available_ads_Valid() const{
    return m_available_ads_isValid;
}

QString OAIAccountActiveAdSummary::getKind() const {
    return m_kind;
}
void OAIAccountActiveAdSummary::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIAccountActiveAdSummary::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIAccountActiveAdSummary::is_kind_Valid() const{
    return m_kind_isValid;
}

bool OAIAccountActiveAdSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_ads_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_ads_limit_tier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_ads_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountActiveAdSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
