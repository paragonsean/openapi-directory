/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserProfile::OAIUserProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserProfile::OAIUserProfile() {
    this->initializeModel();
}

OAIUserProfile::~OAIUserProfile() {}

void OAIUserProfile::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_account_name_isSet = false;
    m_account_name_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_profile_id_isSet = false;
    m_profile_id_isValid = false;

    m_sub_account_id_isSet = false;
    m_sub_account_id_isValid = false;

    m_sub_account_name_isSet = false;
    m_sub_account_name_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;
}

void OAIUserProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserProfile::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_account_name_isValid = ::OpenAPI::fromJsonValue(m_account_name, json[QString("accountName")]);
    m_account_name_isSet = !json[QString("accountName")].isNull() && m_account_name_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_profile_id_isValid = ::OpenAPI::fromJsonValue(m_profile_id, json[QString("profileId")]);
    m_profile_id_isSet = !json[QString("profileId")].isNull() && m_profile_id_isValid;

    m_sub_account_id_isValid = ::OpenAPI::fromJsonValue(m_sub_account_id, json[QString("subAccountId")]);
    m_sub_account_id_isSet = !json[QString("subAccountId")].isNull() && m_sub_account_id_isValid;

    m_sub_account_name_isValid = ::OpenAPI::fromJsonValue(m_sub_account_name, json[QString("subAccountName")]);
    m_sub_account_name_isSet = !json[QString("subAccountName")].isNull() && m_sub_account_name_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("userName")]);
    m_user_name_isSet = !json[QString("userName")].isNull() && m_user_name_isValid;
}

QString OAIUserProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_account_name_isSet) {
        obj.insert(QString("accountName"), ::OpenAPI::toJsonValue(m_account_name));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_profile_id_isSet) {
        obj.insert(QString("profileId"), ::OpenAPI::toJsonValue(m_profile_id));
    }
    if (m_sub_account_id_isSet) {
        obj.insert(QString("subAccountId"), ::OpenAPI::toJsonValue(m_sub_account_id));
    }
    if (m_sub_account_name_isSet) {
        obj.insert(QString("subAccountName"), ::OpenAPI::toJsonValue(m_sub_account_name));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("userName"), ::OpenAPI::toJsonValue(m_user_name));
    }
    return obj;
}

QString OAIUserProfile::getAccountId() const {
    return m_account_id;
}
void OAIUserProfile::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIUserProfile::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIUserProfile::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIUserProfile::getAccountName() const {
    return m_account_name;
}
void OAIUserProfile::setAccountName(const QString &account_name) {
    m_account_name = account_name;
    m_account_name_isSet = true;
}

bool OAIUserProfile::is_account_name_Set() const{
    return m_account_name_isSet;
}

bool OAIUserProfile::is_account_name_Valid() const{
    return m_account_name_isValid;
}

QString OAIUserProfile::getEtag() const {
    return m_etag;
}
void OAIUserProfile::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIUserProfile::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIUserProfile::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIUserProfile::getKind() const {
    return m_kind;
}
void OAIUserProfile::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIUserProfile::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIUserProfile::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIUserProfile::getProfileId() const {
    return m_profile_id;
}
void OAIUserProfile::setProfileId(const QString &profile_id) {
    m_profile_id = profile_id;
    m_profile_id_isSet = true;
}

bool OAIUserProfile::is_profile_id_Set() const{
    return m_profile_id_isSet;
}

bool OAIUserProfile::is_profile_id_Valid() const{
    return m_profile_id_isValid;
}

QString OAIUserProfile::getSubAccountId() const {
    return m_sub_account_id;
}
void OAIUserProfile::setSubAccountId(const QString &sub_account_id) {
    m_sub_account_id = sub_account_id;
    m_sub_account_id_isSet = true;
}

bool OAIUserProfile::is_sub_account_id_Set() const{
    return m_sub_account_id_isSet;
}

bool OAIUserProfile::is_sub_account_id_Valid() const{
    return m_sub_account_id_isValid;
}

QString OAIUserProfile::getSubAccountName() const {
    return m_sub_account_name;
}
void OAIUserProfile::setSubAccountName(const QString &sub_account_name) {
    m_sub_account_name = sub_account_name;
    m_sub_account_name_isSet = true;
}

bool OAIUserProfile::is_sub_account_name_Set() const{
    return m_sub_account_name_isSet;
}

bool OAIUserProfile::is_sub_account_name_Valid() const{
    return m_sub_account_name_isValid;
}

QString OAIUserProfile::getUserName() const {
    return m_user_name;
}
void OAIUserProfile::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAIUserProfile::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAIUserProfile::is_user_name_Valid() const{
    return m_user_name_isValid;
}

bool OAIUserProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
