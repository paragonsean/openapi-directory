/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReport_crossDimensionReachCriteria.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReport_crossDimensionReachCriteria::OAIReport_crossDimensionReachCriteria(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReport_crossDimensionReachCriteria::OAIReport_crossDimensionReachCriteria() {
    this->initializeModel();
}

OAIReport_crossDimensionReachCriteria::~OAIReport_crossDimensionReachCriteria() {}

void OAIReport_crossDimensionReachCriteria::initializeModel() {

    m_breakdown_isSet = false;
    m_breakdown_isValid = false;

    m_date_range_isSet = false;
    m_date_range_isValid = false;

    m_dimension_isSet = false;
    m_dimension_isValid = false;

    m_dimension_filters_isSet = false;
    m_dimension_filters_isValid = false;

    m_metric_names_isSet = false;
    m_metric_names_isValid = false;

    m_overlap_metric_names_isSet = false;
    m_overlap_metric_names_isValid = false;

    m_pivoted_isSet = false;
    m_pivoted_isValid = false;
}

void OAIReport_crossDimensionReachCriteria::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReport_crossDimensionReachCriteria::fromJsonObject(QJsonObject json) {

    m_breakdown_isValid = ::OpenAPI::fromJsonValue(m_breakdown, json[QString("breakdown")]);
    m_breakdown_isSet = !json[QString("breakdown")].isNull() && m_breakdown_isValid;

    m_date_range_isValid = ::OpenAPI::fromJsonValue(m_date_range, json[QString("dateRange")]);
    m_date_range_isSet = !json[QString("dateRange")].isNull() && m_date_range_isValid;

    m_dimension_isValid = ::OpenAPI::fromJsonValue(m_dimension, json[QString("dimension")]);
    m_dimension_isSet = !json[QString("dimension")].isNull() && m_dimension_isValid;

    m_dimension_filters_isValid = ::OpenAPI::fromJsonValue(m_dimension_filters, json[QString("dimensionFilters")]);
    m_dimension_filters_isSet = !json[QString("dimensionFilters")].isNull() && m_dimension_filters_isValid;

    m_metric_names_isValid = ::OpenAPI::fromJsonValue(m_metric_names, json[QString("metricNames")]);
    m_metric_names_isSet = !json[QString("metricNames")].isNull() && m_metric_names_isValid;

    m_overlap_metric_names_isValid = ::OpenAPI::fromJsonValue(m_overlap_metric_names, json[QString("overlapMetricNames")]);
    m_overlap_metric_names_isSet = !json[QString("overlapMetricNames")].isNull() && m_overlap_metric_names_isValid;

    m_pivoted_isValid = ::OpenAPI::fromJsonValue(m_pivoted, json[QString("pivoted")]);
    m_pivoted_isSet = !json[QString("pivoted")].isNull() && m_pivoted_isValid;
}

QString OAIReport_crossDimensionReachCriteria::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReport_crossDimensionReachCriteria::asJsonObject() const {
    QJsonObject obj;
    if (m_breakdown.size() > 0) {
        obj.insert(QString("breakdown"), ::OpenAPI::toJsonValue(m_breakdown));
    }
    if (m_date_range.isSet()) {
        obj.insert(QString("dateRange"), ::OpenAPI::toJsonValue(m_date_range));
    }
    if (m_dimension_isSet) {
        obj.insert(QString("dimension"), ::OpenAPI::toJsonValue(m_dimension));
    }
    if (m_dimension_filters.size() > 0) {
        obj.insert(QString("dimensionFilters"), ::OpenAPI::toJsonValue(m_dimension_filters));
    }
    if (m_metric_names.size() > 0) {
        obj.insert(QString("metricNames"), ::OpenAPI::toJsonValue(m_metric_names));
    }
    if (m_overlap_metric_names.size() > 0) {
        obj.insert(QString("overlapMetricNames"), ::OpenAPI::toJsonValue(m_overlap_metric_names));
    }
    if (m_pivoted_isSet) {
        obj.insert(QString("pivoted"), ::OpenAPI::toJsonValue(m_pivoted));
    }
    return obj;
}

QList<OAISortedDimension> OAIReport_crossDimensionReachCriteria::getBreakdown() const {
    return m_breakdown;
}
void OAIReport_crossDimensionReachCriteria::setBreakdown(const QList<OAISortedDimension> &breakdown) {
    m_breakdown = breakdown;
    m_breakdown_isSet = true;
}

bool OAIReport_crossDimensionReachCriteria::is_breakdown_Set() const{
    return m_breakdown_isSet;
}

bool OAIReport_crossDimensionReachCriteria::is_breakdown_Valid() const{
    return m_breakdown_isValid;
}

OAIDateRange OAIReport_crossDimensionReachCriteria::getDateRange() const {
    return m_date_range;
}
void OAIReport_crossDimensionReachCriteria::setDateRange(const OAIDateRange &date_range) {
    m_date_range = date_range;
    m_date_range_isSet = true;
}

bool OAIReport_crossDimensionReachCriteria::is_date_range_Set() const{
    return m_date_range_isSet;
}

bool OAIReport_crossDimensionReachCriteria::is_date_range_Valid() const{
    return m_date_range_isValid;
}

QString OAIReport_crossDimensionReachCriteria::getDimension() const {
    return m_dimension;
}
void OAIReport_crossDimensionReachCriteria::setDimension(const QString &dimension) {
    m_dimension = dimension;
    m_dimension_isSet = true;
}

bool OAIReport_crossDimensionReachCriteria::is_dimension_Set() const{
    return m_dimension_isSet;
}

bool OAIReport_crossDimensionReachCriteria::is_dimension_Valid() const{
    return m_dimension_isValid;
}

QList<OAIDimensionValue> OAIReport_crossDimensionReachCriteria::getDimensionFilters() const {
    return m_dimension_filters;
}
void OAIReport_crossDimensionReachCriteria::setDimensionFilters(const QList<OAIDimensionValue> &dimension_filters) {
    m_dimension_filters = dimension_filters;
    m_dimension_filters_isSet = true;
}

bool OAIReport_crossDimensionReachCriteria::is_dimension_filters_Set() const{
    return m_dimension_filters_isSet;
}

bool OAIReport_crossDimensionReachCriteria::is_dimension_filters_Valid() const{
    return m_dimension_filters_isValid;
}

QList<QString> OAIReport_crossDimensionReachCriteria::getMetricNames() const {
    return m_metric_names;
}
void OAIReport_crossDimensionReachCriteria::setMetricNames(const QList<QString> &metric_names) {
    m_metric_names = metric_names;
    m_metric_names_isSet = true;
}

bool OAIReport_crossDimensionReachCriteria::is_metric_names_Set() const{
    return m_metric_names_isSet;
}

bool OAIReport_crossDimensionReachCriteria::is_metric_names_Valid() const{
    return m_metric_names_isValid;
}

QList<QString> OAIReport_crossDimensionReachCriteria::getOverlapMetricNames() const {
    return m_overlap_metric_names;
}
void OAIReport_crossDimensionReachCriteria::setOverlapMetricNames(const QList<QString> &overlap_metric_names) {
    m_overlap_metric_names = overlap_metric_names;
    m_overlap_metric_names_isSet = true;
}

bool OAIReport_crossDimensionReachCriteria::is_overlap_metric_names_Set() const{
    return m_overlap_metric_names_isSet;
}

bool OAIReport_crossDimensionReachCriteria::is_overlap_metric_names_Valid() const{
    return m_overlap_metric_names_isValid;
}

bool OAIReport_crossDimensionReachCriteria::isPivoted() const {
    return m_pivoted;
}
void OAIReport_crossDimensionReachCriteria::setPivoted(const bool &pivoted) {
    m_pivoted = pivoted;
    m_pivoted_isSet = true;
}

bool OAIReport_crossDimensionReachCriteria::is_pivoted_Set() const{
    return m_pivoted_isSet;
}

bool OAIReport_crossDimensionReachCriteria::is_pivoted_Valid() const{
    return m_pivoted_isValid;
}

bool OAIReport_crossDimensionReachCriteria::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_breakdown.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimension_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_overlap_metric_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pivoted_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReport_crossDimensionReachCriteria::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
