/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIConversion.h
 *
 * A Conversion represents when a user successfully performs a desired action after seeing an ad.
 */

#ifndef OAIConversion_H
#define OAIConversion_H

#include <QJsonObject>

#include "OAICustomFloodlightVariable.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICustomFloodlightVariable;

class OAIConversion : public OAIObject {
public:
    OAIConversion();
    OAIConversion(QString json);
    ~OAIConversion() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isChildDirectedTreatment() const;
    void setChildDirectedTreatment(const bool &child_directed_treatment);
    bool is_child_directed_treatment_Set() const;
    bool is_child_directed_treatment_Valid() const;

    QList<OAICustomFloodlightVariable> getCustomVariables() const;
    void setCustomVariables(const QList<OAICustomFloodlightVariable> &custom_variables);
    bool is_custom_variables_Set() const;
    bool is_custom_variables_Valid() const;

    QString getDclid() const;
    void setDclid(const QString &dclid);
    bool is_dclid_Set() const;
    bool is_dclid_Valid() const;

    QString getEncryptedUserId() const;
    void setEncryptedUserId(const QString &encrypted_user_id);
    bool is_encrypted_user_id_Set() const;
    bool is_encrypted_user_id_Valid() const;

    QList<QString> getEncryptedUserIdCandidates() const;
    void setEncryptedUserIdCandidates(const QList<QString> &encrypted_user_id_candidates);
    bool is_encrypted_user_id_candidates_Set() const;
    bool is_encrypted_user_id_candidates_Valid() const;

    QString getFloodlightActivityId() const;
    void setFloodlightActivityId(const QString &floodlight_activity_id);
    bool is_floodlight_activity_id_Set() const;
    bool is_floodlight_activity_id_Valid() const;

    QString getFloodlightConfigurationId() const;
    void setFloodlightConfigurationId(const QString &floodlight_configuration_id);
    bool is_floodlight_configuration_id_Set() const;
    bool is_floodlight_configuration_id_Valid() const;

    QString getGclid() const;
    void setGclid(const QString &gclid);
    bool is_gclid_Set() const;
    bool is_gclid_Valid() const;

    QString getKind() const;
    void setKind(const QString &kind);
    bool is_kind_Set() const;
    bool is_kind_Valid() const;

    bool isLimitAdTracking() const;
    void setLimitAdTracking(const bool &limit_ad_tracking);
    bool is_limit_ad_tracking_Set() const;
    bool is_limit_ad_tracking_Valid() const;

    QString getMatchId() const;
    void setMatchId(const QString &match_id);
    bool is_match_id_Set() const;
    bool is_match_id_Valid() const;

    QString getMobileDeviceId() const;
    void setMobileDeviceId(const QString &mobile_device_id);
    bool is_mobile_device_id_Set() const;
    bool is_mobile_device_id_Valid() const;

    bool isNonPersonalizedAd() const;
    void setNonPersonalizedAd(const bool &non_personalized_ad);
    bool is_non_personalized_ad_Set() const;
    bool is_non_personalized_ad_Valid() const;

    QString getOrdinal() const;
    void setOrdinal(const QString &ordinal);
    bool is_ordinal_Set() const;
    bool is_ordinal_Valid() const;

    QString getQuantity() const;
    void setQuantity(const QString &quantity);
    bool is_quantity_Set() const;
    bool is_quantity_Valid() const;

    QString getTimestampMicros() const;
    void setTimestampMicros(const QString &timestamp_micros);
    bool is_timestamp_micros_Set() const;
    bool is_timestamp_micros_Valid() const;

    bool isTreatmentForUnderage() const;
    void setTreatmentForUnderage(const bool &treatment_for_underage);
    bool is_treatment_for_underage_Set() const;
    bool is_treatment_for_underage_Valid() const;

    double getValue() const;
    void setValue(const double &value);
    bool is_value_Set() const;
    bool is_value_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_child_directed_treatment;
    bool m_child_directed_treatment_isSet;
    bool m_child_directed_treatment_isValid;

    QList<OAICustomFloodlightVariable> m_custom_variables;
    bool m_custom_variables_isSet;
    bool m_custom_variables_isValid;

    QString m_dclid;
    bool m_dclid_isSet;
    bool m_dclid_isValid;

    QString m_encrypted_user_id;
    bool m_encrypted_user_id_isSet;
    bool m_encrypted_user_id_isValid;

    QList<QString> m_encrypted_user_id_candidates;
    bool m_encrypted_user_id_candidates_isSet;
    bool m_encrypted_user_id_candidates_isValid;

    QString m_floodlight_activity_id;
    bool m_floodlight_activity_id_isSet;
    bool m_floodlight_activity_id_isValid;

    QString m_floodlight_configuration_id;
    bool m_floodlight_configuration_id_isSet;
    bool m_floodlight_configuration_id_isValid;

    QString m_gclid;
    bool m_gclid_isSet;
    bool m_gclid_isValid;

    QString m_kind;
    bool m_kind_isSet;
    bool m_kind_isValid;

    bool m_limit_ad_tracking;
    bool m_limit_ad_tracking_isSet;
    bool m_limit_ad_tracking_isValid;

    QString m_match_id;
    bool m_match_id_isSet;
    bool m_match_id_isValid;

    QString m_mobile_device_id;
    bool m_mobile_device_id_isSet;
    bool m_mobile_device_id_isValid;

    bool m_non_personalized_ad;
    bool m_non_personalized_ad_isSet;
    bool m_non_personalized_ad_isValid;

    QString m_ordinal;
    bool m_ordinal_isSet;
    bool m_ordinal_isValid;

    QString m_quantity;
    bool m_quantity_isSet;
    bool m_quantity_isValid;

    QString m_timestamp_micros;
    bool m_timestamp_micros_isSet;
    bool m_timestamp_micros_isValid;

    bool m_treatment_for_underage;
    bool m_treatment_for_underage_isSet;
    bool m_treatment_for_underage_isValid;

    double m_value;
    bool m_value_isSet;
    bool m_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIConversion)

#endif // OAIConversion_H
