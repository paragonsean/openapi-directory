/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomEventInsert.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomEventInsert::OAICustomEventInsert(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomEventInsert::OAICustomEventInsert() {
    this->initializeModel();
}

OAICustomEventInsert::~OAICustomEventInsert() {}

void OAICustomEventInsert::initializeModel() {

    m_cm_dimensions_isSet = false;
    m_cm_dimensions_isValid = false;

    m_dv3_dimensions_isSet = false;
    m_dv3_dimensions_isValid = false;

    m_insert_event_type_isSet = false;
    m_insert_event_type_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_match_id_isSet = false;
    m_match_id_isValid = false;

    m_mobile_device_id_isSet = false;
    m_mobile_device_id_isValid = false;
}

void OAICustomEventInsert::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomEventInsert::fromJsonObject(QJsonObject json) {

    m_cm_dimensions_isValid = ::OpenAPI::fromJsonValue(m_cm_dimensions, json[QString("cmDimensions")]);
    m_cm_dimensions_isSet = !json[QString("cmDimensions")].isNull() && m_cm_dimensions_isValid;

    m_dv3_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dv3_dimensions, json[QString("dv3Dimensions")]);
    m_dv3_dimensions_isSet = !json[QString("dv3Dimensions")].isNull() && m_dv3_dimensions_isValid;

    m_insert_event_type_isValid = ::OpenAPI::fromJsonValue(m_insert_event_type, json[QString("insertEventType")]);
    m_insert_event_type_isSet = !json[QString("insertEventType")].isNull() && m_insert_event_type_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_match_id_isValid = ::OpenAPI::fromJsonValue(m_match_id, json[QString("matchId")]);
    m_match_id_isSet = !json[QString("matchId")].isNull() && m_match_id_isValid;

    m_mobile_device_id_isValid = ::OpenAPI::fromJsonValue(m_mobile_device_id, json[QString("mobileDeviceId")]);
    m_mobile_device_id_isSet = !json[QString("mobileDeviceId")].isNull() && m_mobile_device_id_isValid;
}

QString OAICustomEventInsert::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomEventInsert::asJsonObject() const {
    QJsonObject obj;
    if (m_cm_dimensions.isSet()) {
        obj.insert(QString("cmDimensions"), ::OpenAPI::toJsonValue(m_cm_dimensions));
    }
    if (m_dv3_dimensions.isSet()) {
        obj.insert(QString("dv3Dimensions"), ::OpenAPI::toJsonValue(m_dv3_dimensions));
    }
    if (m_insert_event_type_isSet) {
        obj.insert(QString("insertEventType"), ::OpenAPI::toJsonValue(m_insert_event_type));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_match_id_isSet) {
        obj.insert(QString("matchId"), ::OpenAPI::toJsonValue(m_match_id));
    }
    if (m_mobile_device_id_isSet) {
        obj.insert(QString("mobileDeviceId"), ::OpenAPI::toJsonValue(m_mobile_device_id));
    }
    return obj;
}

OAICampaignManagerIds OAICustomEventInsert::getCmDimensions() const {
    return m_cm_dimensions;
}
void OAICustomEventInsert::setCmDimensions(const OAICampaignManagerIds &cm_dimensions) {
    m_cm_dimensions = cm_dimensions;
    m_cm_dimensions_isSet = true;
}

bool OAICustomEventInsert::is_cm_dimensions_Set() const{
    return m_cm_dimensions_isSet;
}

bool OAICustomEventInsert::is_cm_dimensions_Valid() const{
    return m_cm_dimensions_isValid;
}

OAIDV3Ids OAICustomEventInsert::getDv3Dimensions() const {
    return m_dv3_dimensions;
}
void OAICustomEventInsert::setDv3Dimensions(const OAIDV3Ids &dv3_dimensions) {
    m_dv3_dimensions = dv3_dimensions;
    m_dv3_dimensions_isSet = true;
}

bool OAICustomEventInsert::is_dv3_dimensions_Set() const{
    return m_dv3_dimensions_isSet;
}

bool OAICustomEventInsert::is_dv3_dimensions_Valid() const{
    return m_dv3_dimensions_isValid;
}

QString OAICustomEventInsert::getInsertEventType() const {
    return m_insert_event_type;
}
void OAICustomEventInsert::setInsertEventType(const QString &insert_event_type) {
    m_insert_event_type = insert_event_type;
    m_insert_event_type_isSet = true;
}

bool OAICustomEventInsert::is_insert_event_type_Set() const{
    return m_insert_event_type_isSet;
}

bool OAICustomEventInsert::is_insert_event_type_Valid() const{
    return m_insert_event_type_isValid;
}

QString OAICustomEventInsert::getKind() const {
    return m_kind;
}
void OAICustomEventInsert::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAICustomEventInsert::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAICustomEventInsert::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAICustomEventInsert::getMatchId() const {
    return m_match_id;
}
void OAICustomEventInsert::setMatchId(const QString &match_id) {
    m_match_id = match_id;
    m_match_id_isSet = true;
}

bool OAICustomEventInsert::is_match_id_Set() const{
    return m_match_id_isSet;
}

bool OAICustomEventInsert::is_match_id_Valid() const{
    return m_match_id_isValid;
}

QString OAICustomEventInsert::getMobileDeviceId() const {
    return m_mobile_device_id;
}
void OAICustomEventInsert::setMobileDeviceId(const QString &mobile_device_id) {
    m_mobile_device_id = mobile_device_id;
    m_mobile_device_id_isSet = true;
}

bool OAICustomEventInsert::is_mobile_device_id_Set() const{
    return m_mobile_device_id_isSet;
}

bool OAICustomEventInsert::is_mobile_device_id_Valid() const{
    return m_mobile_device_id_isValid;
}

bool OAICustomEventInsert::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cm_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dv3_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_insert_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomEventInsert::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
