/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPathReportDimensionValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPathReportDimensionValue::OAIPathReportDimensionValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPathReportDimensionValue::OAIPathReportDimensionValue() {
    this->initializeModel();
}

OAIPathReportDimensionValue::~OAIPathReportDimensionValue() {}

void OAIPathReportDimensionValue::initializeModel() {

    m_dimension_name_isSet = false;
    m_dimension_name_isValid = false;

    m_ids_isSet = false;
    m_ids_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_match_type_isSet = false;
    m_match_type_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIPathReportDimensionValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPathReportDimensionValue::fromJsonObject(QJsonObject json) {

    m_dimension_name_isValid = ::OpenAPI::fromJsonValue(m_dimension_name, json[QString("dimensionName")]);
    m_dimension_name_isSet = !json[QString("dimensionName")].isNull() && m_dimension_name_isValid;

    m_ids_isValid = ::OpenAPI::fromJsonValue(m_ids, json[QString("ids")]);
    m_ids_isSet = !json[QString("ids")].isNull() && m_ids_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_match_type_isValid = ::OpenAPI::fromJsonValue(m_match_type, json[QString("matchType")]);
    m_match_type_isSet = !json[QString("matchType")].isNull() && m_match_type_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAIPathReportDimensionValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPathReportDimensionValue::asJsonObject() const {
    QJsonObject obj;
    if (m_dimension_name_isSet) {
        obj.insert(QString("dimensionName"), ::OpenAPI::toJsonValue(m_dimension_name));
    }
    if (m_ids.size() > 0) {
        obj.insert(QString("ids"), ::OpenAPI::toJsonValue(m_ids));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_match_type_isSet) {
        obj.insert(QString("matchType"), ::OpenAPI::toJsonValue(m_match_type));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QString OAIPathReportDimensionValue::getDimensionName() const {
    return m_dimension_name;
}
void OAIPathReportDimensionValue::setDimensionName(const QString &dimension_name) {
    m_dimension_name = dimension_name;
    m_dimension_name_isSet = true;
}

bool OAIPathReportDimensionValue::is_dimension_name_Set() const{
    return m_dimension_name_isSet;
}

bool OAIPathReportDimensionValue::is_dimension_name_Valid() const{
    return m_dimension_name_isValid;
}

QList<QString> OAIPathReportDimensionValue::getIds() const {
    return m_ids;
}
void OAIPathReportDimensionValue::setIds(const QList<QString> &ids) {
    m_ids = ids;
    m_ids_isSet = true;
}

bool OAIPathReportDimensionValue::is_ids_Set() const{
    return m_ids_isSet;
}

bool OAIPathReportDimensionValue::is_ids_Valid() const{
    return m_ids_isValid;
}

QString OAIPathReportDimensionValue::getKind() const {
    return m_kind;
}
void OAIPathReportDimensionValue::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIPathReportDimensionValue::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIPathReportDimensionValue::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIPathReportDimensionValue::getMatchType() const {
    return m_match_type;
}
void OAIPathReportDimensionValue::setMatchType(const QString &match_type) {
    m_match_type = match_type;
    m_match_type_isSet = true;
}

bool OAIPathReportDimensionValue::is_match_type_Set() const{
    return m_match_type_isSet;
}

bool OAIPathReportDimensionValue::is_match_type_Valid() const{
    return m_match_type_isValid;
}

QList<QString> OAIPathReportDimensionValue::getValues() const {
    return m_values;
}
void OAIPathReportDimensionValue::setValues(const QList<QString> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIPathReportDimensionValue::is_values_Set() const{
    return m_values_isSet;
}

bool OAIPathReportDimensionValue::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIPathReportDimensionValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dimension_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPathReportDimensionValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
