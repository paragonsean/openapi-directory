/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountUserProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountUserProfile::OAIAccountUserProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountUserProfile::OAIAccountUserProfile() {
    this->initializeModel();
}

OAIAccountUserProfile::~OAIAccountUserProfile() {}

void OAIAccountUserProfile::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_active_isSet = false;
    m_active_isValid = false;

    m_advertiser_filter_isSet = false;
    m_advertiser_filter_isValid = false;

    m_campaign_filter_isSet = false;
    m_campaign_filter_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_site_filter_isSet = false;
    m_site_filter_isValid = false;

    m_subaccount_id_isSet = false;
    m_subaccount_id_isValid = false;

    m_trafficker_type_isSet = false;
    m_trafficker_type_isValid = false;

    m_user_access_type_isSet = false;
    m_user_access_type_isValid = false;

    m_user_role_filter_isSet = false;
    m_user_role_filter_isValid = false;

    m_user_role_id_isSet = false;
    m_user_role_id_isValid = false;
}

void OAIAccountUserProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountUserProfile::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_advertiser_filter_isValid = ::OpenAPI::fromJsonValue(m_advertiser_filter, json[QString("advertiserFilter")]);
    m_advertiser_filter_isSet = !json[QString("advertiserFilter")].isNull() && m_advertiser_filter_isValid;

    m_campaign_filter_isValid = ::OpenAPI::fromJsonValue(m_campaign_filter, json[QString("campaignFilter")]);
    m_campaign_filter_isSet = !json[QString("campaignFilter")].isNull() && m_campaign_filter_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_site_filter_isValid = ::OpenAPI::fromJsonValue(m_site_filter, json[QString("siteFilter")]);
    m_site_filter_isSet = !json[QString("siteFilter")].isNull() && m_site_filter_isValid;

    m_subaccount_id_isValid = ::OpenAPI::fromJsonValue(m_subaccount_id, json[QString("subaccountId")]);
    m_subaccount_id_isSet = !json[QString("subaccountId")].isNull() && m_subaccount_id_isValid;

    m_trafficker_type_isValid = ::OpenAPI::fromJsonValue(m_trafficker_type, json[QString("traffickerType")]);
    m_trafficker_type_isSet = !json[QString("traffickerType")].isNull() && m_trafficker_type_isValid;

    m_user_access_type_isValid = ::OpenAPI::fromJsonValue(m_user_access_type, json[QString("userAccessType")]);
    m_user_access_type_isSet = !json[QString("userAccessType")].isNull() && m_user_access_type_isValid;

    m_user_role_filter_isValid = ::OpenAPI::fromJsonValue(m_user_role_filter, json[QString("userRoleFilter")]);
    m_user_role_filter_isSet = !json[QString("userRoleFilter")].isNull() && m_user_role_filter_isValid;

    m_user_role_id_isValid = ::OpenAPI::fromJsonValue(m_user_role_id, json[QString("userRoleId")]);
    m_user_role_id_isSet = !json[QString("userRoleId")].isNull() && m_user_role_id_isValid;
}

QString OAIAccountUserProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountUserProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_advertiser_filter.isSet()) {
        obj.insert(QString("advertiserFilter"), ::OpenAPI::toJsonValue(m_advertiser_filter));
    }
    if (m_campaign_filter.isSet()) {
        obj.insert(QString("campaignFilter"), ::OpenAPI::toJsonValue(m_campaign_filter));
    }
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_site_filter.isSet()) {
        obj.insert(QString("siteFilter"), ::OpenAPI::toJsonValue(m_site_filter));
    }
    if (m_subaccount_id_isSet) {
        obj.insert(QString("subaccountId"), ::OpenAPI::toJsonValue(m_subaccount_id));
    }
    if (m_trafficker_type_isSet) {
        obj.insert(QString("traffickerType"), ::OpenAPI::toJsonValue(m_trafficker_type));
    }
    if (m_user_access_type_isSet) {
        obj.insert(QString("userAccessType"), ::OpenAPI::toJsonValue(m_user_access_type));
    }
    if (m_user_role_filter.isSet()) {
        obj.insert(QString("userRoleFilter"), ::OpenAPI::toJsonValue(m_user_role_filter));
    }
    if (m_user_role_id_isSet) {
        obj.insert(QString("userRoleId"), ::OpenAPI::toJsonValue(m_user_role_id));
    }
    return obj;
}

QString OAIAccountUserProfile::getAccountId() const {
    return m_account_id;
}
void OAIAccountUserProfile::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIAccountUserProfile::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIAccountUserProfile::is_account_id_Valid() const{
    return m_account_id_isValid;
}

bool OAIAccountUserProfile::isActive() const {
    return m_active;
}
void OAIAccountUserProfile::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIAccountUserProfile::is_active_Set() const{
    return m_active_isSet;
}

bool OAIAccountUserProfile::is_active_Valid() const{
    return m_active_isValid;
}

OAIObjectFilter OAIAccountUserProfile::getAdvertiserFilter() const {
    return m_advertiser_filter;
}
void OAIAccountUserProfile::setAdvertiserFilter(const OAIObjectFilter &advertiser_filter) {
    m_advertiser_filter = advertiser_filter;
    m_advertiser_filter_isSet = true;
}

bool OAIAccountUserProfile::is_advertiser_filter_Set() const{
    return m_advertiser_filter_isSet;
}

bool OAIAccountUserProfile::is_advertiser_filter_Valid() const{
    return m_advertiser_filter_isValid;
}

OAIObjectFilter OAIAccountUserProfile::getCampaignFilter() const {
    return m_campaign_filter;
}
void OAIAccountUserProfile::setCampaignFilter(const OAIObjectFilter &campaign_filter) {
    m_campaign_filter = campaign_filter;
    m_campaign_filter_isSet = true;
}

bool OAIAccountUserProfile::is_campaign_filter_Set() const{
    return m_campaign_filter_isSet;
}

bool OAIAccountUserProfile::is_campaign_filter_Valid() const{
    return m_campaign_filter_isValid;
}

QString OAIAccountUserProfile::getComments() const {
    return m_comments;
}
void OAIAccountUserProfile::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIAccountUserProfile::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIAccountUserProfile::is_comments_Valid() const{
    return m_comments_isValid;
}

QString OAIAccountUserProfile::getEmail() const {
    return m_email;
}
void OAIAccountUserProfile::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIAccountUserProfile::is_email_Set() const{
    return m_email_isSet;
}

bool OAIAccountUserProfile::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIAccountUserProfile::getId() const {
    return m_id;
}
void OAIAccountUserProfile::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAccountUserProfile::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAccountUserProfile::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAccountUserProfile::getKind() const {
    return m_kind;
}
void OAIAccountUserProfile::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIAccountUserProfile::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIAccountUserProfile::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIAccountUserProfile::getLocale() const {
    return m_locale;
}
void OAIAccountUserProfile::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIAccountUserProfile::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIAccountUserProfile::is_locale_Valid() const{
    return m_locale_isValid;
}

QString OAIAccountUserProfile::getName() const {
    return m_name;
}
void OAIAccountUserProfile::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAccountUserProfile::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAccountUserProfile::is_name_Valid() const{
    return m_name_isValid;
}

OAIObjectFilter OAIAccountUserProfile::getSiteFilter() const {
    return m_site_filter;
}
void OAIAccountUserProfile::setSiteFilter(const OAIObjectFilter &site_filter) {
    m_site_filter = site_filter;
    m_site_filter_isSet = true;
}

bool OAIAccountUserProfile::is_site_filter_Set() const{
    return m_site_filter_isSet;
}

bool OAIAccountUserProfile::is_site_filter_Valid() const{
    return m_site_filter_isValid;
}

QString OAIAccountUserProfile::getSubaccountId() const {
    return m_subaccount_id;
}
void OAIAccountUserProfile::setSubaccountId(const QString &subaccount_id) {
    m_subaccount_id = subaccount_id;
    m_subaccount_id_isSet = true;
}

bool OAIAccountUserProfile::is_subaccount_id_Set() const{
    return m_subaccount_id_isSet;
}

bool OAIAccountUserProfile::is_subaccount_id_Valid() const{
    return m_subaccount_id_isValid;
}

QString OAIAccountUserProfile::getTraffickerType() const {
    return m_trafficker_type;
}
void OAIAccountUserProfile::setTraffickerType(const QString &trafficker_type) {
    m_trafficker_type = trafficker_type;
    m_trafficker_type_isSet = true;
}

bool OAIAccountUserProfile::is_trafficker_type_Set() const{
    return m_trafficker_type_isSet;
}

bool OAIAccountUserProfile::is_trafficker_type_Valid() const{
    return m_trafficker_type_isValid;
}

QString OAIAccountUserProfile::getUserAccessType() const {
    return m_user_access_type;
}
void OAIAccountUserProfile::setUserAccessType(const QString &user_access_type) {
    m_user_access_type = user_access_type;
    m_user_access_type_isSet = true;
}

bool OAIAccountUserProfile::is_user_access_type_Set() const{
    return m_user_access_type_isSet;
}

bool OAIAccountUserProfile::is_user_access_type_Valid() const{
    return m_user_access_type_isValid;
}

OAIObjectFilter OAIAccountUserProfile::getUserRoleFilter() const {
    return m_user_role_filter;
}
void OAIAccountUserProfile::setUserRoleFilter(const OAIObjectFilter &user_role_filter) {
    m_user_role_filter = user_role_filter;
    m_user_role_filter_isSet = true;
}

bool OAIAccountUserProfile::is_user_role_filter_Set() const{
    return m_user_role_filter_isSet;
}

bool OAIAccountUserProfile::is_user_role_filter_Valid() const{
    return m_user_role_filter_isValid;
}

QString OAIAccountUserProfile::getUserRoleId() const {
    return m_user_role_id;
}
void OAIAccountUserProfile::setUserRoleId(const QString &user_role_id) {
    m_user_role_id = user_role_id;
    m_user_role_id_isSet = true;
}

bool OAIAccountUserProfile::is_user_role_id_Set() const{
    return m_user_role_id_isSet;
}

bool OAIAccountUserProfile::is_user_role_id_Valid() const{
    return m_user_role_id_isValid;
}

bool OAIAccountUserProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_advertiser_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_campaign_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subaccount_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trafficker_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_access_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_role_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_role_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountUserProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
