/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreativeAssignment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreativeAssignment::OAICreativeAssignment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreativeAssignment::OAICreativeAssignment() {
    this->initializeModel();
}

OAICreativeAssignment::~OAICreativeAssignment() {}

void OAICreativeAssignment::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_apply_event_tags_isSet = false;
    m_apply_event_tags_isValid = false;

    m_click_through_url_isSet = false;
    m_click_through_url_isValid = false;

    m_companion_creative_overrides_isSet = false;
    m_companion_creative_overrides_isValid = false;

    m_creative_group_assignments_isSet = false;
    m_creative_group_assignments_isValid = false;

    m_creative_id_isSet = false;
    m_creative_id_isValid = false;

    m_creative_id_dimension_value_isSet = false;
    m_creative_id_dimension_value_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_rich_media_exit_overrides_isSet = false;
    m_rich_media_exit_overrides_isValid = false;

    m_sequence_isSet = false;
    m_sequence_isValid = false;

    m_ssl_compliant_isSet = false;
    m_ssl_compliant_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAICreativeAssignment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreativeAssignment::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_apply_event_tags_isValid = ::OpenAPI::fromJsonValue(m_apply_event_tags, json[QString("applyEventTags")]);
    m_apply_event_tags_isSet = !json[QString("applyEventTags")].isNull() && m_apply_event_tags_isValid;

    m_click_through_url_isValid = ::OpenAPI::fromJsonValue(m_click_through_url, json[QString("clickThroughUrl")]);
    m_click_through_url_isSet = !json[QString("clickThroughUrl")].isNull() && m_click_through_url_isValid;

    m_companion_creative_overrides_isValid = ::OpenAPI::fromJsonValue(m_companion_creative_overrides, json[QString("companionCreativeOverrides")]);
    m_companion_creative_overrides_isSet = !json[QString("companionCreativeOverrides")].isNull() && m_companion_creative_overrides_isValid;

    m_creative_group_assignments_isValid = ::OpenAPI::fromJsonValue(m_creative_group_assignments, json[QString("creativeGroupAssignments")]);
    m_creative_group_assignments_isSet = !json[QString("creativeGroupAssignments")].isNull() && m_creative_group_assignments_isValid;

    m_creative_id_isValid = ::OpenAPI::fromJsonValue(m_creative_id, json[QString("creativeId")]);
    m_creative_id_isSet = !json[QString("creativeId")].isNull() && m_creative_id_isValid;

    m_creative_id_dimension_value_isValid = ::OpenAPI::fromJsonValue(m_creative_id_dimension_value, json[QString("creativeIdDimensionValue")]);
    m_creative_id_dimension_value_isSet = !json[QString("creativeIdDimensionValue")].isNull() && m_creative_id_dimension_value_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_rich_media_exit_overrides_isValid = ::OpenAPI::fromJsonValue(m_rich_media_exit_overrides, json[QString("richMediaExitOverrides")]);
    m_rich_media_exit_overrides_isSet = !json[QString("richMediaExitOverrides")].isNull() && m_rich_media_exit_overrides_isValid;

    m_sequence_isValid = ::OpenAPI::fromJsonValue(m_sequence, json[QString("sequence")]);
    m_sequence_isSet = !json[QString("sequence")].isNull() && m_sequence_isValid;

    m_ssl_compliant_isValid = ::OpenAPI::fromJsonValue(m_ssl_compliant, json[QString("sslCompliant")]);
    m_ssl_compliant_isSet = !json[QString("sslCompliant")].isNull() && m_ssl_compliant_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;
}

QString OAICreativeAssignment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreativeAssignment::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_apply_event_tags_isSet) {
        obj.insert(QString("applyEventTags"), ::OpenAPI::toJsonValue(m_apply_event_tags));
    }
    if (m_click_through_url.isSet()) {
        obj.insert(QString("clickThroughUrl"), ::OpenAPI::toJsonValue(m_click_through_url));
    }
    if (m_companion_creative_overrides.size() > 0) {
        obj.insert(QString("companionCreativeOverrides"), ::OpenAPI::toJsonValue(m_companion_creative_overrides));
    }
    if (m_creative_group_assignments.size() > 0) {
        obj.insert(QString("creativeGroupAssignments"), ::OpenAPI::toJsonValue(m_creative_group_assignments));
    }
    if (m_creative_id_isSet) {
        obj.insert(QString("creativeId"), ::OpenAPI::toJsonValue(m_creative_id));
    }
    if (m_creative_id_dimension_value.isSet()) {
        obj.insert(QString("creativeIdDimensionValue"), ::OpenAPI::toJsonValue(m_creative_id_dimension_value));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_rich_media_exit_overrides.size() > 0) {
        obj.insert(QString("richMediaExitOverrides"), ::OpenAPI::toJsonValue(m_rich_media_exit_overrides));
    }
    if (m_sequence_isSet) {
        obj.insert(QString("sequence"), ::OpenAPI::toJsonValue(m_sequence));
    }
    if (m_ssl_compliant_isSet) {
        obj.insert(QString("sslCompliant"), ::OpenAPI::toJsonValue(m_ssl_compliant));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

bool OAICreativeAssignment::isActive() const {
    return m_active;
}
void OAICreativeAssignment::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAICreativeAssignment::is_active_Set() const{
    return m_active_isSet;
}

bool OAICreativeAssignment::is_active_Valid() const{
    return m_active_isValid;
}

bool OAICreativeAssignment::isApplyEventTags() const {
    return m_apply_event_tags;
}
void OAICreativeAssignment::setApplyEventTags(const bool &apply_event_tags) {
    m_apply_event_tags = apply_event_tags;
    m_apply_event_tags_isSet = true;
}

bool OAICreativeAssignment::is_apply_event_tags_Set() const{
    return m_apply_event_tags_isSet;
}

bool OAICreativeAssignment::is_apply_event_tags_Valid() const{
    return m_apply_event_tags_isValid;
}

OAIClickThroughUrl OAICreativeAssignment::getClickThroughUrl() const {
    return m_click_through_url;
}
void OAICreativeAssignment::setClickThroughUrl(const OAIClickThroughUrl &click_through_url) {
    m_click_through_url = click_through_url;
    m_click_through_url_isSet = true;
}

bool OAICreativeAssignment::is_click_through_url_Set() const{
    return m_click_through_url_isSet;
}

bool OAICreativeAssignment::is_click_through_url_Valid() const{
    return m_click_through_url_isValid;
}

QList<OAICompanionClickThroughOverride> OAICreativeAssignment::getCompanionCreativeOverrides() const {
    return m_companion_creative_overrides;
}
void OAICreativeAssignment::setCompanionCreativeOverrides(const QList<OAICompanionClickThroughOverride> &companion_creative_overrides) {
    m_companion_creative_overrides = companion_creative_overrides;
    m_companion_creative_overrides_isSet = true;
}

bool OAICreativeAssignment::is_companion_creative_overrides_Set() const{
    return m_companion_creative_overrides_isSet;
}

bool OAICreativeAssignment::is_companion_creative_overrides_Valid() const{
    return m_companion_creative_overrides_isValid;
}

QList<OAICreativeGroupAssignment> OAICreativeAssignment::getCreativeGroupAssignments() const {
    return m_creative_group_assignments;
}
void OAICreativeAssignment::setCreativeGroupAssignments(const QList<OAICreativeGroupAssignment> &creative_group_assignments) {
    m_creative_group_assignments = creative_group_assignments;
    m_creative_group_assignments_isSet = true;
}

bool OAICreativeAssignment::is_creative_group_assignments_Set() const{
    return m_creative_group_assignments_isSet;
}

bool OAICreativeAssignment::is_creative_group_assignments_Valid() const{
    return m_creative_group_assignments_isValid;
}

QString OAICreativeAssignment::getCreativeId() const {
    return m_creative_id;
}
void OAICreativeAssignment::setCreativeId(const QString &creative_id) {
    m_creative_id = creative_id;
    m_creative_id_isSet = true;
}

bool OAICreativeAssignment::is_creative_id_Set() const{
    return m_creative_id_isSet;
}

bool OAICreativeAssignment::is_creative_id_Valid() const{
    return m_creative_id_isValid;
}

OAIDimensionValue OAICreativeAssignment::getCreativeIdDimensionValue() const {
    return m_creative_id_dimension_value;
}
void OAICreativeAssignment::setCreativeIdDimensionValue(const OAIDimensionValue &creative_id_dimension_value) {
    m_creative_id_dimension_value = creative_id_dimension_value;
    m_creative_id_dimension_value_isSet = true;
}

bool OAICreativeAssignment::is_creative_id_dimension_value_Set() const{
    return m_creative_id_dimension_value_isSet;
}

bool OAICreativeAssignment::is_creative_id_dimension_value_Valid() const{
    return m_creative_id_dimension_value_isValid;
}

QDateTime OAICreativeAssignment::getEndTime() const {
    return m_end_time;
}
void OAICreativeAssignment::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAICreativeAssignment::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAICreativeAssignment::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QList<OAIRichMediaExitOverride> OAICreativeAssignment::getRichMediaExitOverrides() const {
    return m_rich_media_exit_overrides;
}
void OAICreativeAssignment::setRichMediaExitOverrides(const QList<OAIRichMediaExitOverride> &rich_media_exit_overrides) {
    m_rich_media_exit_overrides = rich_media_exit_overrides;
    m_rich_media_exit_overrides_isSet = true;
}

bool OAICreativeAssignment::is_rich_media_exit_overrides_Set() const{
    return m_rich_media_exit_overrides_isSet;
}

bool OAICreativeAssignment::is_rich_media_exit_overrides_Valid() const{
    return m_rich_media_exit_overrides_isValid;
}

qint32 OAICreativeAssignment::getSequence() const {
    return m_sequence;
}
void OAICreativeAssignment::setSequence(const qint32 &sequence) {
    m_sequence = sequence;
    m_sequence_isSet = true;
}

bool OAICreativeAssignment::is_sequence_Set() const{
    return m_sequence_isSet;
}

bool OAICreativeAssignment::is_sequence_Valid() const{
    return m_sequence_isValid;
}

bool OAICreativeAssignment::isSslCompliant() const {
    return m_ssl_compliant;
}
void OAICreativeAssignment::setSslCompliant(const bool &ssl_compliant) {
    m_ssl_compliant = ssl_compliant;
    m_ssl_compliant_isSet = true;
}

bool OAICreativeAssignment::is_ssl_compliant_Set() const{
    return m_ssl_compliant_isSet;
}

bool OAICreativeAssignment::is_ssl_compliant_Valid() const{
    return m_ssl_compliant_isValid;
}

QDateTime OAICreativeAssignment::getStartTime() const {
    return m_start_time;
}
void OAICreativeAssignment::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAICreativeAssignment::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAICreativeAssignment::is_start_time_Valid() const{
    return m_start_time_isValid;
}

qint32 OAICreativeAssignment::getWeight() const {
    return m_weight;
}
void OAICreativeAssignment::setWeight(const qint32 &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAICreativeAssignment::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAICreativeAssignment::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAICreativeAssignment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_apply_event_tags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_click_through_url.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_companion_creative_overrides.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_creative_group_assignments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_creative_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creative_id_dimension_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rich_media_exit_overrides.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_compliant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreativeAssignment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
