/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompanionSetting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompanionSetting::OAICompanionSetting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompanionSetting::OAICompanionSetting() {
    this->initializeModel();
}

OAICompanionSetting::~OAICompanionSetting() {}

void OAICompanionSetting::initializeModel() {

    m_companions_disabled_isSet = false;
    m_companions_disabled_isValid = false;

    m_enabled_sizes_isSet = false;
    m_enabled_sizes_isValid = false;

    m_image_only_isSet = false;
    m_image_only_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;
}

void OAICompanionSetting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompanionSetting::fromJsonObject(QJsonObject json) {

    m_companions_disabled_isValid = ::OpenAPI::fromJsonValue(m_companions_disabled, json[QString("companionsDisabled")]);
    m_companions_disabled_isSet = !json[QString("companionsDisabled")].isNull() && m_companions_disabled_isValid;

    m_enabled_sizes_isValid = ::OpenAPI::fromJsonValue(m_enabled_sizes, json[QString("enabledSizes")]);
    m_enabled_sizes_isSet = !json[QString("enabledSizes")].isNull() && m_enabled_sizes_isValid;

    m_image_only_isValid = ::OpenAPI::fromJsonValue(m_image_only, json[QString("imageOnly")]);
    m_image_only_isSet = !json[QString("imageOnly")].isNull() && m_image_only_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;
}

QString OAICompanionSetting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompanionSetting::asJsonObject() const {
    QJsonObject obj;
    if (m_companions_disabled_isSet) {
        obj.insert(QString("companionsDisabled"), ::OpenAPI::toJsonValue(m_companions_disabled));
    }
    if (m_enabled_sizes.size() > 0) {
        obj.insert(QString("enabledSizes"), ::OpenAPI::toJsonValue(m_enabled_sizes));
    }
    if (m_image_only_isSet) {
        obj.insert(QString("imageOnly"), ::OpenAPI::toJsonValue(m_image_only));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    return obj;
}

bool OAICompanionSetting::isCompanionsDisabled() const {
    return m_companions_disabled;
}
void OAICompanionSetting::setCompanionsDisabled(const bool &companions_disabled) {
    m_companions_disabled = companions_disabled;
    m_companions_disabled_isSet = true;
}

bool OAICompanionSetting::is_companions_disabled_Set() const{
    return m_companions_disabled_isSet;
}

bool OAICompanionSetting::is_companions_disabled_Valid() const{
    return m_companions_disabled_isValid;
}

QList<OAISize> OAICompanionSetting::getEnabledSizes() const {
    return m_enabled_sizes;
}
void OAICompanionSetting::setEnabledSizes(const QList<OAISize> &enabled_sizes) {
    m_enabled_sizes = enabled_sizes;
    m_enabled_sizes_isSet = true;
}

bool OAICompanionSetting::is_enabled_sizes_Set() const{
    return m_enabled_sizes_isSet;
}

bool OAICompanionSetting::is_enabled_sizes_Valid() const{
    return m_enabled_sizes_isValid;
}

bool OAICompanionSetting::isImageOnly() const {
    return m_image_only;
}
void OAICompanionSetting::setImageOnly(const bool &image_only) {
    m_image_only = image_only;
    m_image_only_isSet = true;
}

bool OAICompanionSetting::is_image_only_Set() const{
    return m_image_only_isSet;
}

bool OAICompanionSetting::is_image_only_Valid() const{
    return m_image_only_isValid;
}

QString OAICompanionSetting::getKind() const {
    return m_kind;
}
void OAICompanionSetting::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAICompanionSetting::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAICompanionSetting::is_kind_Valid() const{
    return m_kind_isValid;
}

bool OAICompanionSetting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_companions_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_sizes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompanionSetting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
