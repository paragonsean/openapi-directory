/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITagData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITagData::OAITagData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITagData::OAITagData() {
    this->initializeModel();
}

OAITagData::~OAITagData() {}

void OAITagData::initializeModel() {

    m_ad_id_isSet = false;
    m_ad_id_isValid = false;

    m_click_tag_isSet = false;
    m_click_tag_isValid = false;

    m_creative_id_isSet = false;
    m_creative_id_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_impression_tag_isSet = false;
    m_impression_tag_isValid = false;
}

void OAITagData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITagData::fromJsonObject(QJsonObject json) {

    m_ad_id_isValid = ::OpenAPI::fromJsonValue(m_ad_id, json[QString("adId")]);
    m_ad_id_isSet = !json[QString("adId")].isNull() && m_ad_id_isValid;

    m_click_tag_isValid = ::OpenAPI::fromJsonValue(m_click_tag, json[QString("clickTag")]);
    m_click_tag_isSet = !json[QString("clickTag")].isNull() && m_click_tag_isValid;

    m_creative_id_isValid = ::OpenAPI::fromJsonValue(m_creative_id, json[QString("creativeId")]);
    m_creative_id_isSet = !json[QString("creativeId")].isNull() && m_creative_id_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_impression_tag_isValid = ::OpenAPI::fromJsonValue(m_impression_tag, json[QString("impressionTag")]);
    m_impression_tag_isSet = !json[QString("impressionTag")].isNull() && m_impression_tag_isValid;
}

QString OAITagData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITagData::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_id_isSet) {
        obj.insert(QString("adId"), ::OpenAPI::toJsonValue(m_ad_id));
    }
    if (m_click_tag_isSet) {
        obj.insert(QString("clickTag"), ::OpenAPI::toJsonValue(m_click_tag));
    }
    if (m_creative_id_isSet) {
        obj.insert(QString("creativeId"), ::OpenAPI::toJsonValue(m_creative_id));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_impression_tag_isSet) {
        obj.insert(QString("impressionTag"), ::OpenAPI::toJsonValue(m_impression_tag));
    }
    return obj;
}

QString OAITagData::getAdId() const {
    return m_ad_id;
}
void OAITagData::setAdId(const QString &ad_id) {
    m_ad_id = ad_id;
    m_ad_id_isSet = true;
}

bool OAITagData::is_ad_id_Set() const{
    return m_ad_id_isSet;
}

bool OAITagData::is_ad_id_Valid() const{
    return m_ad_id_isValid;
}

QString OAITagData::getClickTag() const {
    return m_click_tag;
}
void OAITagData::setClickTag(const QString &click_tag) {
    m_click_tag = click_tag;
    m_click_tag_isSet = true;
}

bool OAITagData::is_click_tag_Set() const{
    return m_click_tag_isSet;
}

bool OAITagData::is_click_tag_Valid() const{
    return m_click_tag_isValid;
}

QString OAITagData::getCreativeId() const {
    return m_creative_id;
}
void OAITagData::setCreativeId(const QString &creative_id) {
    m_creative_id = creative_id;
    m_creative_id_isSet = true;
}

bool OAITagData::is_creative_id_Set() const{
    return m_creative_id_isSet;
}

bool OAITagData::is_creative_id_Valid() const{
    return m_creative_id_isValid;
}

QString OAITagData::getFormat() const {
    return m_format;
}
void OAITagData::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAITagData::is_format_Set() const{
    return m_format_isSet;
}

bool OAITagData::is_format_Valid() const{
    return m_format_isValid;
}

QString OAITagData::getImpressionTag() const {
    return m_impression_tag;
}
void OAITagData::setImpressionTag(const QString &impression_tag) {
    m_impression_tag = impression_tag;
    m_impression_tag_isSet = true;
}

bool OAITagData::is_impression_tag_Set() const{
    return m_impression_tag_isSet;
}

bool OAITagData::is_impression_tag_Valid() const{
    return m_impression_tag_isValid;
}

bool OAITagData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_click_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creative_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_impression_tag_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITagData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
