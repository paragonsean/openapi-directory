/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReport_pathToConversionCriteria_reportProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReport_pathToConversionCriteria_reportProperties::OAIReport_pathToConversionCriteria_reportProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReport_pathToConversionCriteria_reportProperties::OAIReport_pathToConversionCriteria_reportProperties() {
    this->initializeModel();
}

OAIReport_pathToConversionCriteria_reportProperties::~OAIReport_pathToConversionCriteria_reportProperties() {}

void OAIReport_pathToConversionCriteria_reportProperties::initializeModel() {

    m_clicks_lookback_window_isSet = false;
    m_clicks_lookback_window_isValid = false;

    m_impressions_lookback_window_isSet = false;
    m_impressions_lookback_window_isValid = false;

    m_include_attributed_ip_conversions_isSet = false;
    m_include_attributed_ip_conversions_isValid = false;

    m_include_unattributed_cookie_conversions_isSet = false;
    m_include_unattributed_cookie_conversions_isValid = false;

    m_include_unattributed_ip_conversions_isSet = false;
    m_include_unattributed_ip_conversions_isValid = false;

    m_maximum_click_interactions_isSet = false;
    m_maximum_click_interactions_isValid = false;

    m_maximum_impression_interactions_isSet = false;
    m_maximum_impression_interactions_isValid = false;

    m_maximum_interaction_gap_isSet = false;
    m_maximum_interaction_gap_isValid = false;

    m_pivot_on_interaction_path_isSet = false;
    m_pivot_on_interaction_path_isValid = false;
}

void OAIReport_pathToConversionCriteria_reportProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReport_pathToConversionCriteria_reportProperties::fromJsonObject(QJsonObject json) {

    m_clicks_lookback_window_isValid = ::OpenAPI::fromJsonValue(m_clicks_lookback_window, json[QString("clicksLookbackWindow")]);
    m_clicks_lookback_window_isSet = !json[QString("clicksLookbackWindow")].isNull() && m_clicks_lookback_window_isValid;

    m_impressions_lookback_window_isValid = ::OpenAPI::fromJsonValue(m_impressions_lookback_window, json[QString("impressionsLookbackWindow")]);
    m_impressions_lookback_window_isSet = !json[QString("impressionsLookbackWindow")].isNull() && m_impressions_lookback_window_isValid;

    m_include_attributed_ip_conversions_isValid = ::OpenAPI::fromJsonValue(m_include_attributed_ip_conversions, json[QString("includeAttributedIPConversions")]);
    m_include_attributed_ip_conversions_isSet = !json[QString("includeAttributedIPConversions")].isNull() && m_include_attributed_ip_conversions_isValid;

    m_include_unattributed_cookie_conversions_isValid = ::OpenAPI::fromJsonValue(m_include_unattributed_cookie_conversions, json[QString("includeUnattributedCookieConversions")]);
    m_include_unattributed_cookie_conversions_isSet = !json[QString("includeUnattributedCookieConversions")].isNull() && m_include_unattributed_cookie_conversions_isValid;

    m_include_unattributed_ip_conversions_isValid = ::OpenAPI::fromJsonValue(m_include_unattributed_ip_conversions, json[QString("includeUnattributedIPConversions")]);
    m_include_unattributed_ip_conversions_isSet = !json[QString("includeUnattributedIPConversions")].isNull() && m_include_unattributed_ip_conversions_isValid;

    m_maximum_click_interactions_isValid = ::OpenAPI::fromJsonValue(m_maximum_click_interactions, json[QString("maximumClickInteractions")]);
    m_maximum_click_interactions_isSet = !json[QString("maximumClickInteractions")].isNull() && m_maximum_click_interactions_isValid;

    m_maximum_impression_interactions_isValid = ::OpenAPI::fromJsonValue(m_maximum_impression_interactions, json[QString("maximumImpressionInteractions")]);
    m_maximum_impression_interactions_isSet = !json[QString("maximumImpressionInteractions")].isNull() && m_maximum_impression_interactions_isValid;

    m_maximum_interaction_gap_isValid = ::OpenAPI::fromJsonValue(m_maximum_interaction_gap, json[QString("maximumInteractionGap")]);
    m_maximum_interaction_gap_isSet = !json[QString("maximumInteractionGap")].isNull() && m_maximum_interaction_gap_isValid;

    m_pivot_on_interaction_path_isValid = ::OpenAPI::fromJsonValue(m_pivot_on_interaction_path, json[QString("pivotOnInteractionPath")]);
    m_pivot_on_interaction_path_isSet = !json[QString("pivotOnInteractionPath")].isNull() && m_pivot_on_interaction_path_isValid;
}

QString OAIReport_pathToConversionCriteria_reportProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReport_pathToConversionCriteria_reportProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_clicks_lookback_window_isSet) {
        obj.insert(QString("clicksLookbackWindow"), ::OpenAPI::toJsonValue(m_clicks_lookback_window));
    }
    if (m_impressions_lookback_window_isSet) {
        obj.insert(QString("impressionsLookbackWindow"), ::OpenAPI::toJsonValue(m_impressions_lookback_window));
    }
    if (m_include_attributed_ip_conversions_isSet) {
        obj.insert(QString("includeAttributedIPConversions"), ::OpenAPI::toJsonValue(m_include_attributed_ip_conversions));
    }
    if (m_include_unattributed_cookie_conversions_isSet) {
        obj.insert(QString("includeUnattributedCookieConversions"), ::OpenAPI::toJsonValue(m_include_unattributed_cookie_conversions));
    }
    if (m_include_unattributed_ip_conversions_isSet) {
        obj.insert(QString("includeUnattributedIPConversions"), ::OpenAPI::toJsonValue(m_include_unattributed_ip_conversions));
    }
    if (m_maximum_click_interactions_isSet) {
        obj.insert(QString("maximumClickInteractions"), ::OpenAPI::toJsonValue(m_maximum_click_interactions));
    }
    if (m_maximum_impression_interactions_isSet) {
        obj.insert(QString("maximumImpressionInteractions"), ::OpenAPI::toJsonValue(m_maximum_impression_interactions));
    }
    if (m_maximum_interaction_gap_isSet) {
        obj.insert(QString("maximumInteractionGap"), ::OpenAPI::toJsonValue(m_maximum_interaction_gap));
    }
    if (m_pivot_on_interaction_path_isSet) {
        obj.insert(QString("pivotOnInteractionPath"), ::OpenAPI::toJsonValue(m_pivot_on_interaction_path));
    }
    return obj;
}

qint32 OAIReport_pathToConversionCriteria_reportProperties::getClicksLookbackWindow() const {
    return m_clicks_lookback_window;
}
void OAIReport_pathToConversionCriteria_reportProperties::setClicksLookbackWindow(const qint32 &clicks_lookback_window) {
    m_clicks_lookback_window = clicks_lookback_window;
    m_clicks_lookback_window_isSet = true;
}

bool OAIReport_pathToConversionCriteria_reportProperties::is_clicks_lookback_window_Set() const{
    return m_clicks_lookback_window_isSet;
}

bool OAIReport_pathToConversionCriteria_reportProperties::is_clicks_lookback_window_Valid() const{
    return m_clicks_lookback_window_isValid;
}

qint32 OAIReport_pathToConversionCriteria_reportProperties::getImpressionsLookbackWindow() const {
    return m_impressions_lookback_window;
}
void OAIReport_pathToConversionCriteria_reportProperties::setImpressionsLookbackWindow(const qint32 &impressions_lookback_window) {
    m_impressions_lookback_window = impressions_lookback_window;
    m_impressions_lookback_window_isSet = true;
}

bool OAIReport_pathToConversionCriteria_reportProperties::is_impressions_lookback_window_Set() const{
    return m_impressions_lookback_window_isSet;
}

bool OAIReport_pathToConversionCriteria_reportProperties::is_impressions_lookback_window_Valid() const{
    return m_impressions_lookback_window_isValid;
}

bool OAIReport_pathToConversionCriteria_reportProperties::isIncludeAttributedIpConversions() const {
    return m_include_attributed_ip_conversions;
}
void OAIReport_pathToConversionCriteria_reportProperties::setIncludeAttributedIpConversions(const bool &include_attributed_ip_conversions) {
    m_include_attributed_ip_conversions = include_attributed_ip_conversions;
    m_include_attributed_ip_conversions_isSet = true;
}

bool OAIReport_pathToConversionCriteria_reportProperties::is_include_attributed_ip_conversions_Set() const{
    return m_include_attributed_ip_conversions_isSet;
}

bool OAIReport_pathToConversionCriteria_reportProperties::is_include_attributed_ip_conversions_Valid() const{
    return m_include_attributed_ip_conversions_isValid;
}

bool OAIReport_pathToConversionCriteria_reportProperties::isIncludeUnattributedCookieConversions() const {
    return m_include_unattributed_cookie_conversions;
}
void OAIReport_pathToConversionCriteria_reportProperties::setIncludeUnattributedCookieConversions(const bool &include_unattributed_cookie_conversions) {
    m_include_unattributed_cookie_conversions = include_unattributed_cookie_conversions;
    m_include_unattributed_cookie_conversions_isSet = true;
}

bool OAIReport_pathToConversionCriteria_reportProperties::is_include_unattributed_cookie_conversions_Set() const{
    return m_include_unattributed_cookie_conversions_isSet;
}

bool OAIReport_pathToConversionCriteria_reportProperties::is_include_unattributed_cookie_conversions_Valid() const{
    return m_include_unattributed_cookie_conversions_isValid;
}

bool OAIReport_pathToConversionCriteria_reportProperties::isIncludeUnattributedIpConversions() const {
    return m_include_unattributed_ip_conversions;
}
void OAIReport_pathToConversionCriteria_reportProperties::setIncludeUnattributedIpConversions(const bool &include_unattributed_ip_conversions) {
    m_include_unattributed_ip_conversions = include_unattributed_ip_conversions;
    m_include_unattributed_ip_conversions_isSet = true;
}

bool OAIReport_pathToConversionCriteria_reportProperties::is_include_unattributed_ip_conversions_Set() const{
    return m_include_unattributed_ip_conversions_isSet;
}

bool OAIReport_pathToConversionCriteria_reportProperties::is_include_unattributed_ip_conversions_Valid() const{
    return m_include_unattributed_ip_conversions_isValid;
}

qint32 OAIReport_pathToConversionCriteria_reportProperties::getMaximumClickInteractions() const {
    return m_maximum_click_interactions;
}
void OAIReport_pathToConversionCriteria_reportProperties::setMaximumClickInteractions(const qint32 &maximum_click_interactions) {
    m_maximum_click_interactions = maximum_click_interactions;
    m_maximum_click_interactions_isSet = true;
}

bool OAIReport_pathToConversionCriteria_reportProperties::is_maximum_click_interactions_Set() const{
    return m_maximum_click_interactions_isSet;
}

bool OAIReport_pathToConversionCriteria_reportProperties::is_maximum_click_interactions_Valid() const{
    return m_maximum_click_interactions_isValid;
}

qint32 OAIReport_pathToConversionCriteria_reportProperties::getMaximumImpressionInteractions() const {
    return m_maximum_impression_interactions;
}
void OAIReport_pathToConversionCriteria_reportProperties::setMaximumImpressionInteractions(const qint32 &maximum_impression_interactions) {
    m_maximum_impression_interactions = maximum_impression_interactions;
    m_maximum_impression_interactions_isSet = true;
}

bool OAIReport_pathToConversionCriteria_reportProperties::is_maximum_impression_interactions_Set() const{
    return m_maximum_impression_interactions_isSet;
}

bool OAIReport_pathToConversionCriteria_reportProperties::is_maximum_impression_interactions_Valid() const{
    return m_maximum_impression_interactions_isValid;
}

qint32 OAIReport_pathToConversionCriteria_reportProperties::getMaximumInteractionGap() const {
    return m_maximum_interaction_gap;
}
void OAIReport_pathToConversionCriteria_reportProperties::setMaximumInteractionGap(const qint32 &maximum_interaction_gap) {
    m_maximum_interaction_gap = maximum_interaction_gap;
    m_maximum_interaction_gap_isSet = true;
}

bool OAIReport_pathToConversionCriteria_reportProperties::is_maximum_interaction_gap_Set() const{
    return m_maximum_interaction_gap_isSet;
}

bool OAIReport_pathToConversionCriteria_reportProperties::is_maximum_interaction_gap_Valid() const{
    return m_maximum_interaction_gap_isValid;
}

bool OAIReport_pathToConversionCriteria_reportProperties::isPivotOnInteractionPath() const {
    return m_pivot_on_interaction_path;
}
void OAIReport_pathToConversionCriteria_reportProperties::setPivotOnInteractionPath(const bool &pivot_on_interaction_path) {
    m_pivot_on_interaction_path = pivot_on_interaction_path;
    m_pivot_on_interaction_path_isSet = true;
}

bool OAIReport_pathToConversionCriteria_reportProperties::is_pivot_on_interaction_path_Set() const{
    return m_pivot_on_interaction_path_isSet;
}

bool OAIReport_pathToConversionCriteria_reportProperties::is_pivot_on_interaction_path_Valid() const{
    return m_pivot_on_interaction_path_isValid;
}

bool OAIReport_pathToConversionCriteria_reportProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_clicks_lookback_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_impressions_lookback_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_attributed_ip_conversions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_unattributed_cookie_conversions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_unattributed_ip_conversions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_click_interactions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_impression_interactions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_interaction_gap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pivot_on_interaction_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReport_pathToConversionCriteria_reportProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
