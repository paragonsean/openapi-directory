/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDirectorySite.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDirectorySite::OAIDirectorySite(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDirectorySite::OAIDirectorySite() {
    this->initializeModel();
}

OAIDirectorySite::~OAIDirectorySite() {}

void OAIDirectorySite::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_id_dimension_value_isSet = false;
    m_id_dimension_value_isValid = false;

    m_inpage_tag_formats_isSet = false;
    m_inpage_tag_formats_isValid = false;

    m_interstitial_tag_formats_isSet = false;
    m_interstitial_tag_formats_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIDirectorySite::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDirectorySite::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_id_dimension_value_isValid = ::OpenAPI::fromJsonValue(m_id_dimension_value, json[QString("idDimensionValue")]);
    m_id_dimension_value_isSet = !json[QString("idDimensionValue")].isNull() && m_id_dimension_value_isValid;

    m_inpage_tag_formats_isValid = ::OpenAPI::fromJsonValue(m_inpage_tag_formats, json[QString("inpageTagFormats")]);
    m_inpage_tag_formats_isSet = !json[QString("inpageTagFormats")].isNull() && m_inpage_tag_formats_isValid;

    m_interstitial_tag_formats_isValid = ::OpenAPI::fromJsonValue(m_interstitial_tag_formats, json[QString("interstitialTagFormats")]);
    m_interstitial_tag_formats_isSet = !json[QString("interstitialTagFormats")].isNull() && m_interstitial_tag_formats_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("settings")]);
    m_settings_isSet = !json[QString("settings")].isNull() && m_settings_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIDirectorySite::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDirectorySite::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_id_dimension_value.isSet()) {
        obj.insert(QString("idDimensionValue"), ::OpenAPI::toJsonValue(m_id_dimension_value));
    }
    if (m_inpage_tag_formats.size() > 0) {
        obj.insert(QString("inpageTagFormats"), ::OpenAPI::toJsonValue(m_inpage_tag_formats));
    }
    if (m_interstitial_tag_formats.size() > 0) {
        obj.insert(QString("interstitialTagFormats"), ::OpenAPI::toJsonValue(m_interstitial_tag_formats));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_settings.isSet()) {
        obj.insert(QString("settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIDirectorySite::getId() const {
    return m_id;
}
void OAIDirectorySite::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDirectorySite::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDirectorySite::is_id_Valid() const{
    return m_id_isValid;
}

OAIDimensionValue OAIDirectorySite::getIdDimensionValue() const {
    return m_id_dimension_value;
}
void OAIDirectorySite::setIdDimensionValue(const OAIDimensionValue &id_dimension_value) {
    m_id_dimension_value = id_dimension_value;
    m_id_dimension_value_isSet = true;
}

bool OAIDirectorySite::is_id_dimension_value_Set() const{
    return m_id_dimension_value_isSet;
}

bool OAIDirectorySite::is_id_dimension_value_Valid() const{
    return m_id_dimension_value_isValid;
}

QList<QString> OAIDirectorySite::getInpageTagFormats() const {
    return m_inpage_tag_formats;
}
void OAIDirectorySite::setInpageTagFormats(const QList<QString> &inpage_tag_formats) {
    m_inpage_tag_formats = inpage_tag_formats;
    m_inpage_tag_formats_isSet = true;
}

bool OAIDirectorySite::is_inpage_tag_formats_Set() const{
    return m_inpage_tag_formats_isSet;
}

bool OAIDirectorySite::is_inpage_tag_formats_Valid() const{
    return m_inpage_tag_formats_isValid;
}

QList<QString> OAIDirectorySite::getInterstitialTagFormats() const {
    return m_interstitial_tag_formats;
}
void OAIDirectorySite::setInterstitialTagFormats(const QList<QString> &interstitial_tag_formats) {
    m_interstitial_tag_formats = interstitial_tag_formats;
    m_interstitial_tag_formats_isSet = true;
}

bool OAIDirectorySite::is_interstitial_tag_formats_Set() const{
    return m_interstitial_tag_formats_isSet;
}

bool OAIDirectorySite::is_interstitial_tag_formats_Valid() const{
    return m_interstitial_tag_formats_isValid;
}

QString OAIDirectorySite::getKind() const {
    return m_kind;
}
void OAIDirectorySite::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIDirectorySite::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIDirectorySite::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIDirectorySite::getName() const {
    return m_name;
}
void OAIDirectorySite::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDirectorySite::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDirectorySite::is_name_Valid() const{
    return m_name_isValid;
}

OAIDirectorySiteSettings OAIDirectorySite::getSettings() const {
    return m_settings;
}
void OAIDirectorySite::setSettings(const OAIDirectorySiteSettings &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAIDirectorySite::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAIDirectorySite::is_settings_Valid() const{
    return m_settings_isValid;
}

QString OAIDirectorySite::getUrl() const {
    return m_url;
}
void OAIDirectorySite::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIDirectorySite::is_url_Set() const{
    return m_url_isSet;
}

bool OAIDirectorySite::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIDirectorySite::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_dimension_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inpage_tag_formats.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_interstitial_tag_formats.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDirectorySite::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
