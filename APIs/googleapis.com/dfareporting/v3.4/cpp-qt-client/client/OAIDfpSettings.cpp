/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDfpSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDfpSettings::OAIDfpSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDfpSettings::OAIDfpSettings() {
    this->initializeModel();
}

OAIDfpSettings::~OAIDfpSettings() {}

void OAIDfpSettings::initializeModel() {

    m_dfp_network_code_isSet = false;
    m_dfp_network_code_isValid = false;

    m_dfp_network_name_isSet = false;
    m_dfp_network_name_isValid = false;

    m_programmatic_placement_accepted_isSet = false;
    m_programmatic_placement_accepted_isValid = false;

    m_pub_paid_placement_accepted_isSet = false;
    m_pub_paid_placement_accepted_isValid = false;

    m_publisher_portal_only_isSet = false;
    m_publisher_portal_only_isValid = false;
}

void OAIDfpSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDfpSettings::fromJsonObject(QJsonObject json) {

    m_dfp_network_code_isValid = ::OpenAPI::fromJsonValue(m_dfp_network_code, json[QString("dfpNetworkCode")]);
    m_dfp_network_code_isSet = !json[QString("dfpNetworkCode")].isNull() && m_dfp_network_code_isValid;

    m_dfp_network_name_isValid = ::OpenAPI::fromJsonValue(m_dfp_network_name, json[QString("dfpNetworkName")]);
    m_dfp_network_name_isSet = !json[QString("dfpNetworkName")].isNull() && m_dfp_network_name_isValid;

    m_programmatic_placement_accepted_isValid = ::OpenAPI::fromJsonValue(m_programmatic_placement_accepted, json[QString("programmaticPlacementAccepted")]);
    m_programmatic_placement_accepted_isSet = !json[QString("programmaticPlacementAccepted")].isNull() && m_programmatic_placement_accepted_isValid;

    m_pub_paid_placement_accepted_isValid = ::OpenAPI::fromJsonValue(m_pub_paid_placement_accepted, json[QString("pubPaidPlacementAccepted")]);
    m_pub_paid_placement_accepted_isSet = !json[QString("pubPaidPlacementAccepted")].isNull() && m_pub_paid_placement_accepted_isValid;

    m_publisher_portal_only_isValid = ::OpenAPI::fromJsonValue(m_publisher_portal_only, json[QString("publisherPortalOnly")]);
    m_publisher_portal_only_isSet = !json[QString("publisherPortalOnly")].isNull() && m_publisher_portal_only_isValid;
}

QString OAIDfpSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDfpSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_dfp_network_code_isSet) {
        obj.insert(QString("dfpNetworkCode"), ::OpenAPI::toJsonValue(m_dfp_network_code));
    }
    if (m_dfp_network_name_isSet) {
        obj.insert(QString("dfpNetworkName"), ::OpenAPI::toJsonValue(m_dfp_network_name));
    }
    if (m_programmatic_placement_accepted_isSet) {
        obj.insert(QString("programmaticPlacementAccepted"), ::OpenAPI::toJsonValue(m_programmatic_placement_accepted));
    }
    if (m_pub_paid_placement_accepted_isSet) {
        obj.insert(QString("pubPaidPlacementAccepted"), ::OpenAPI::toJsonValue(m_pub_paid_placement_accepted));
    }
    if (m_publisher_portal_only_isSet) {
        obj.insert(QString("publisherPortalOnly"), ::OpenAPI::toJsonValue(m_publisher_portal_only));
    }
    return obj;
}

QString OAIDfpSettings::getDfpNetworkCode() const {
    return m_dfp_network_code;
}
void OAIDfpSettings::setDfpNetworkCode(const QString &dfp_network_code) {
    m_dfp_network_code = dfp_network_code;
    m_dfp_network_code_isSet = true;
}

bool OAIDfpSettings::is_dfp_network_code_Set() const{
    return m_dfp_network_code_isSet;
}

bool OAIDfpSettings::is_dfp_network_code_Valid() const{
    return m_dfp_network_code_isValid;
}

QString OAIDfpSettings::getDfpNetworkName() const {
    return m_dfp_network_name;
}
void OAIDfpSettings::setDfpNetworkName(const QString &dfp_network_name) {
    m_dfp_network_name = dfp_network_name;
    m_dfp_network_name_isSet = true;
}

bool OAIDfpSettings::is_dfp_network_name_Set() const{
    return m_dfp_network_name_isSet;
}

bool OAIDfpSettings::is_dfp_network_name_Valid() const{
    return m_dfp_network_name_isValid;
}

bool OAIDfpSettings::isProgrammaticPlacementAccepted() const {
    return m_programmatic_placement_accepted;
}
void OAIDfpSettings::setProgrammaticPlacementAccepted(const bool &programmatic_placement_accepted) {
    m_programmatic_placement_accepted = programmatic_placement_accepted;
    m_programmatic_placement_accepted_isSet = true;
}

bool OAIDfpSettings::is_programmatic_placement_accepted_Set() const{
    return m_programmatic_placement_accepted_isSet;
}

bool OAIDfpSettings::is_programmatic_placement_accepted_Valid() const{
    return m_programmatic_placement_accepted_isValid;
}

bool OAIDfpSettings::isPubPaidPlacementAccepted() const {
    return m_pub_paid_placement_accepted;
}
void OAIDfpSettings::setPubPaidPlacementAccepted(const bool &pub_paid_placement_accepted) {
    m_pub_paid_placement_accepted = pub_paid_placement_accepted;
    m_pub_paid_placement_accepted_isSet = true;
}

bool OAIDfpSettings::is_pub_paid_placement_accepted_Set() const{
    return m_pub_paid_placement_accepted_isSet;
}

bool OAIDfpSettings::is_pub_paid_placement_accepted_Valid() const{
    return m_pub_paid_placement_accepted_isValid;
}

bool OAIDfpSettings::isPublisherPortalOnly() const {
    return m_publisher_portal_only;
}
void OAIDfpSettings::setPublisherPortalOnly(const bool &publisher_portal_only) {
    m_publisher_portal_only = publisher_portal_only;
    m_publisher_portal_only_isSet = true;
}

bool OAIDfpSettings::is_publisher_portal_only_Set() const{
    return m_publisher_portal_only_isSet;
}

bool OAIDfpSettings::is_publisher_portal_only_Valid() const{
    return m_publisher_portal_only_isValid;
}

bool OAIDfpSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dfp_network_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dfp_network_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_programmatic_placement_accepted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pub_paid_placement_accepted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_portal_only_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDfpSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
