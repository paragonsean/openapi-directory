/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomEvent::OAICustomEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomEvent::OAICustomEvent() {
    this->initializeModel();
}

OAICustomEvent::~OAICustomEvent() {}

void OAICustomEvent::initializeModel() {

    m_annotate_click_event_isSet = false;
    m_annotate_click_event_isValid = false;

    m_annotate_impression_event_isSet = false;
    m_annotate_impression_event_isValid = false;

    m_custom_variables_isSet = false;
    m_custom_variables_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_floodlight_configuration_id_isSet = false;
    m_floodlight_configuration_id_isValid = false;

    m_insert_event_isSet = false;
    m_insert_event_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_ordinal_isSet = false;
    m_ordinal_isValid = false;

    m_timestamp_micros_isSet = false;
    m_timestamp_micros_isValid = false;
}

void OAICustomEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomEvent::fromJsonObject(QJsonObject json) {

    m_annotate_click_event_isValid = ::OpenAPI::fromJsonValue(m_annotate_click_event, json[QString("annotateClickEvent")]);
    m_annotate_click_event_isSet = !json[QString("annotateClickEvent")].isNull() && m_annotate_click_event_isValid;

    m_annotate_impression_event_isValid = ::OpenAPI::fromJsonValue(m_annotate_impression_event, json[QString("annotateImpressionEvent")]);
    m_annotate_impression_event_isSet = !json[QString("annotateImpressionEvent")].isNull() && m_annotate_impression_event_isValid;

    m_custom_variables_isValid = ::OpenAPI::fromJsonValue(m_custom_variables, json[QString("customVariables")]);
    m_custom_variables_isSet = !json[QString("customVariables")].isNull() && m_custom_variables_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("eventType")]);
    m_event_type_isSet = !json[QString("eventType")].isNull() && m_event_type_isValid;

    m_floodlight_configuration_id_isValid = ::OpenAPI::fromJsonValue(m_floodlight_configuration_id, json[QString("floodlightConfigurationId")]);
    m_floodlight_configuration_id_isSet = !json[QString("floodlightConfigurationId")].isNull() && m_floodlight_configuration_id_isValid;

    m_insert_event_isValid = ::OpenAPI::fromJsonValue(m_insert_event, json[QString("insertEvent")]);
    m_insert_event_isSet = !json[QString("insertEvent")].isNull() && m_insert_event_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_ordinal_isValid = ::OpenAPI::fromJsonValue(m_ordinal, json[QString("ordinal")]);
    m_ordinal_isSet = !json[QString("ordinal")].isNull() && m_ordinal_isValid;

    m_timestamp_micros_isValid = ::OpenAPI::fromJsonValue(m_timestamp_micros, json[QString("timestampMicros")]);
    m_timestamp_micros_isSet = !json[QString("timestampMicros")].isNull() && m_timestamp_micros_isValid;
}

QString OAICustomEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_annotate_click_event.isSet()) {
        obj.insert(QString("annotateClickEvent"), ::OpenAPI::toJsonValue(m_annotate_click_event));
    }
    if (m_annotate_impression_event.isSet()) {
        obj.insert(QString("annotateImpressionEvent"), ::OpenAPI::toJsonValue(m_annotate_impression_event));
    }
    if (m_custom_variables.size() > 0) {
        obj.insert(QString("customVariables"), ::OpenAPI::toJsonValue(m_custom_variables));
    }
    if (m_event_type_isSet) {
        obj.insert(QString("eventType"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_floodlight_configuration_id_isSet) {
        obj.insert(QString("floodlightConfigurationId"), ::OpenAPI::toJsonValue(m_floodlight_configuration_id));
    }
    if (m_insert_event.isSet()) {
        obj.insert(QString("insertEvent"), ::OpenAPI::toJsonValue(m_insert_event));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_ordinal_isSet) {
        obj.insert(QString("ordinal"), ::OpenAPI::toJsonValue(m_ordinal));
    }
    if (m_timestamp_micros_isSet) {
        obj.insert(QString("timestampMicros"), ::OpenAPI::toJsonValue(m_timestamp_micros));
    }
    return obj;
}

OAICustomEventClickAnnotation OAICustomEvent::getAnnotateClickEvent() const {
    return m_annotate_click_event;
}
void OAICustomEvent::setAnnotateClickEvent(const OAICustomEventClickAnnotation &annotate_click_event) {
    m_annotate_click_event = annotate_click_event;
    m_annotate_click_event_isSet = true;
}

bool OAICustomEvent::is_annotate_click_event_Set() const{
    return m_annotate_click_event_isSet;
}

bool OAICustomEvent::is_annotate_click_event_Valid() const{
    return m_annotate_click_event_isValid;
}

OAICustomEventImpressionAnnotation OAICustomEvent::getAnnotateImpressionEvent() const {
    return m_annotate_impression_event;
}
void OAICustomEvent::setAnnotateImpressionEvent(const OAICustomEventImpressionAnnotation &annotate_impression_event) {
    m_annotate_impression_event = annotate_impression_event;
    m_annotate_impression_event_isSet = true;
}

bool OAICustomEvent::is_annotate_impression_event_Set() const{
    return m_annotate_impression_event_isSet;
}

bool OAICustomEvent::is_annotate_impression_event_Valid() const{
    return m_annotate_impression_event_isValid;
}

QList<OAICustomVariable> OAICustomEvent::getCustomVariables() const {
    return m_custom_variables;
}
void OAICustomEvent::setCustomVariables(const QList<OAICustomVariable> &custom_variables) {
    m_custom_variables = custom_variables;
    m_custom_variables_isSet = true;
}

bool OAICustomEvent::is_custom_variables_Set() const{
    return m_custom_variables_isSet;
}

bool OAICustomEvent::is_custom_variables_Valid() const{
    return m_custom_variables_isValid;
}

QString OAICustomEvent::getEventType() const {
    return m_event_type;
}
void OAICustomEvent::setEventType(const QString &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAICustomEvent::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAICustomEvent::is_event_type_Valid() const{
    return m_event_type_isValid;
}

QString OAICustomEvent::getFloodlightConfigurationId() const {
    return m_floodlight_configuration_id;
}
void OAICustomEvent::setFloodlightConfigurationId(const QString &floodlight_configuration_id) {
    m_floodlight_configuration_id = floodlight_configuration_id;
    m_floodlight_configuration_id_isSet = true;
}

bool OAICustomEvent::is_floodlight_configuration_id_Set() const{
    return m_floodlight_configuration_id_isSet;
}

bool OAICustomEvent::is_floodlight_configuration_id_Valid() const{
    return m_floodlight_configuration_id_isValid;
}

OAICustomEventInsert OAICustomEvent::getInsertEvent() const {
    return m_insert_event;
}
void OAICustomEvent::setInsertEvent(const OAICustomEventInsert &insert_event) {
    m_insert_event = insert_event;
    m_insert_event_isSet = true;
}

bool OAICustomEvent::is_insert_event_Set() const{
    return m_insert_event_isSet;
}

bool OAICustomEvent::is_insert_event_Valid() const{
    return m_insert_event_isValid;
}

QString OAICustomEvent::getKind() const {
    return m_kind;
}
void OAICustomEvent::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAICustomEvent::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAICustomEvent::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAICustomEvent::getOrdinal() const {
    return m_ordinal;
}
void OAICustomEvent::setOrdinal(const QString &ordinal) {
    m_ordinal = ordinal;
    m_ordinal_isSet = true;
}

bool OAICustomEvent::is_ordinal_Set() const{
    return m_ordinal_isSet;
}

bool OAICustomEvent::is_ordinal_Valid() const{
    return m_ordinal_isValid;
}

QString OAICustomEvent::getTimestampMicros() const {
    return m_timestamp_micros;
}
void OAICustomEvent::setTimestampMicros(const QString &timestamp_micros) {
    m_timestamp_micros = timestamp_micros;
    m_timestamp_micros_isSet = true;
}

bool OAICustomEvent::is_timestamp_micros_Set() const{
    return m_timestamp_micros_isSet;
}

bool OAICustomEvent::is_timestamp_micros_Valid() const{
    return m_timestamp_micros_isValid;
}

bool OAICustomEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotate_click_event.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_annotate_impression_event.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_floodlight_configuration_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insert_event.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ordinal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_micros_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
