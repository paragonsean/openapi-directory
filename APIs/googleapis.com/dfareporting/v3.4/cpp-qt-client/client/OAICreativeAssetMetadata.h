/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreativeAssetMetadata.h
 *
 * CreativeAssets contains properties of a creative asset file which will be uploaded or has already been uploaded. Refer to the creative sample code for how to upload assets and insert a creative.
 */

#ifndef OAICreativeAssetMetadata_H
#define OAICreativeAssetMetadata_H

#include <QJsonObject>

#include "OAIClickTag.h"
#include "OAICreativeAssetId.h"
#include "OAICreativeCustomEvent.h"
#include "OAIDimensionValue.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreativeAssetId;
class OAIClickTag;
class OAICreativeCustomEvent;
class OAIDimensionValue;

class OAICreativeAssetMetadata : public OAIObject {
public:
    OAICreativeAssetMetadata();
    OAICreativeAssetMetadata(QString json);
    ~OAICreativeAssetMetadata() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICreativeAssetId getAssetIdentifier() const;
    void setAssetIdentifier(const OAICreativeAssetId &asset_identifier);
    bool is_asset_identifier_Set() const;
    bool is_asset_identifier_Valid() const;

    QList<OAIClickTag> getClickTags() const;
    void setClickTags(const QList<OAIClickTag> &click_tags);
    bool is_click_tags_Set() const;
    bool is_click_tags_Valid() const;

    QList<OAICreativeCustomEvent> getCounterCustomEvents() const;
    void setCounterCustomEvents(const QList<OAICreativeCustomEvent> &counter_custom_events);
    bool is_counter_custom_events_Set() const;
    bool is_counter_custom_events_Valid() const;

    QList<QString> getDetectedFeatures() const;
    void setDetectedFeatures(const QList<QString> &detected_features);
    bool is_detected_features_Set() const;
    bool is_detected_features_Valid() const;

    QList<OAICreativeCustomEvent> getExitCustomEvents() const;
    void setExitCustomEvents(const QList<OAICreativeCustomEvent> &exit_custom_events);
    bool is_exit_custom_events_Set() const;
    bool is_exit_custom_events_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAIDimensionValue getIdDimensionValue() const;
    void setIdDimensionValue(const OAIDimensionValue &id_dimension_value);
    bool is_id_dimension_value_Set() const;
    bool is_id_dimension_value_Valid() const;

    QString getKind() const;
    void setKind(const QString &kind);
    bool is_kind_Set() const;
    bool is_kind_Valid() const;

    bool isRichMedia() const;
    void setRichMedia(const bool &rich_media);
    bool is_rich_media_Set() const;
    bool is_rich_media_Valid() const;

    QList<OAICreativeCustomEvent> getTimerCustomEvents() const;
    void setTimerCustomEvents(const QList<OAICreativeCustomEvent> &timer_custom_events);
    bool is_timer_custom_events_Set() const;
    bool is_timer_custom_events_Valid() const;

    QList<QString> getWarnedValidationRules() const;
    void setWarnedValidationRules(const QList<QString> &warned_validation_rules);
    bool is_warned_validation_rules_Set() const;
    bool is_warned_validation_rules_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICreativeAssetId m_asset_identifier;
    bool m_asset_identifier_isSet;
    bool m_asset_identifier_isValid;

    QList<OAIClickTag> m_click_tags;
    bool m_click_tags_isSet;
    bool m_click_tags_isValid;

    QList<OAICreativeCustomEvent> m_counter_custom_events;
    bool m_counter_custom_events_isSet;
    bool m_counter_custom_events_isValid;

    QList<QString> m_detected_features;
    bool m_detected_features_isSet;
    bool m_detected_features_isValid;

    QList<OAICreativeCustomEvent> m_exit_custom_events;
    bool m_exit_custom_events_isSet;
    bool m_exit_custom_events_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAIDimensionValue m_id_dimension_value;
    bool m_id_dimension_value_isSet;
    bool m_id_dimension_value_isValid;

    QString m_kind;
    bool m_kind_isSet;
    bool m_kind_isValid;

    bool m_rich_media;
    bool m_rich_media_isSet;
    bool m_rich_media_isValid;

    QList<OAICreativeCustomEvent> m_timer_custom_events;
    bool m_timer_custom_events_isSet;
    bool m_timer_custom_events_isValid;

    QList<QString> m_warned_validation_rules;
    bool m_warned_validation_rules_isSet;
    bool m_warned_validation_rules_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreativeAssetMetadata)

#endif // OAICreativeAssetMetadata_H
