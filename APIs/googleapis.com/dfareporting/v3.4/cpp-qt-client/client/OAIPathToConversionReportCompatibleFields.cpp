/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPathToConversionReportCompatibleFields.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPathToConversionReportCompatibleFields::OAIPathToConversionReportCompatibleFields(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPathToConversionReportCompatibleFields::OAIPathToConversionReportCompatibleFields() {
    this->initializeModel();
}

OAIPathToConversionReportCompatibleFields::~OAIPathToConversionReportCompatibleFields() {}

void OAIPathToConversionReportCompatibleFields::initializeModel() {

    m_conversion_dimensions_isSet = false;
    m_conversion_dimensions_isValid = false;

    m_custom_floodlight_variables_isSet = false;
    m_custom_floodlight_variables_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_per_interaction_dimensions_isSet = false;
    m_per_interaction_dimensions_isValid = false;
}

void OAIPathToConversionReportCompatibleFields::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPathToConversionReportCompatibleFields::fromJsonObject(QJsonObject json) {

    m_conversion_dimensions_isValid = ::OpenAPI::fromJsonValue(m_conversion_dimensions, json[QString("conversionDimensions")]);
    m_conversion_dimensions_isSet = !json[QString("conversionDimensions")].isNull() && m_conversion_dimensions_isValid;

    m_custom_floodlight_variables_isValid = ::OpenAPI::fromJsonValue(m_custom_floodlight_variables, json[QString("customFloodlightVariables")]);
    m_custom_floodlight_variables_isSet = !json[QString("customFloodlightVariables")].isNull() && m_custom_floodlight_variables_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;

    m_per_interaction_dimensions_isValid = ::OpenAPI::fromJsonValue(m_per_interaction_dimensions, json[QString("perInteractionDimensions")]);
    m_per_interaction_dimensions_isSet = !json[QString("perInteractionDimensions")].isNull() && m_per_interaction_dimensions_isValid;
}

QString OAIPathToConversionReportCompatibleFields::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPathToConversionReportCompatibleFields::asJsonObject() const {
    QJsonObject obj;
    if (m_conversion_dimensions.size() > 0) {
        obj.insert(QString("conversionDimensions"), ::OpenAPI::toJsonValue(m_conversion_dimensions));
    }
    if (m_custom_floodlight_variables.size() > 0) {
        obj.insert(QString("customFloodlightVariables"), ::OpenAPI::toJsonValue(m_custom_floodlight_variables));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_metrics.size() > 0) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_per_interaction_dimensions.size() > 0) {
        obj.insert(QString("perInteractionDimensions"), ::OpenAPI::toJsonValue(m_per_interaction_dimensions));
    }
    return obj;
}

QList<OAIDimension> OAIPathToConversionReportCompatibleFields::getConversionDimensions() const {
    return m_conversion_dimensions;
}
void OAIPathToConversionReportCompatibleFields::setConversionDimensions(const QList<OAIDimension> &conversion_dimensions) {
    m_conversion_dimensions = conversion_dimensions;
    m_conversion_dimensions_isSet = true;
}

bool OAIPathToConversionReportCompatibleFields::is_conversion_dimensions_Set() const{
    return m_conversion_dimensions_isSet;
}

bool OAIPathToConversionReportCompatibleFields::is_conversion_dimensions_Valid() const{
    return m_conversion_dimensions_isValid;
}

QList<OAIDimension> OAIPathToConversionReportCompatibleFields::getCustomFloodlightVariables() const {
    return m_custom_floodlight_variables;
}
void OAIPathToConversionReportCompatibleFields::setCustomFloodlightVariables(const QList<OAIDimension> &custom_floodlight_variables) {
    m_custom_floodlight_variables = custom_floodlight_variables;
    m_custom_floodlight_variables_isSet = true;
}

bool OAIPathToConversionReportCompatibleFields::is_custom_floodlight_variables_Set() const{
    return m_custom_floodlight_variables_isSet;
}

bool OAIPathToConversionReportCompatibleFields::is_custom_floodlight_variables_Valid() const{
    return m_custom_floodlight_variables_isValid;
}

QString OAIPathToConversionReportCompatibleFields::getKind() const {
    return m_kind;
}
void OAIPathToConversionReportCompatibleFields::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIPathToConversionReportCompatibleFields::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIPathToConversionReportCompatibleFields::is_kind_Valid() const{
    return m_kind_isValid;
}

QList<OAIMetric> OAIPathToConversionReportCompatibleFields::getMetrics() const {
    return m_metrics;
}
void OAIPathToConversionReportCompatibleFields::setMetrics(const QList<OAIMetric> &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIPathToConversionReportCompatibleFields::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIPathToConversionReportCompatibleFields::is_metrics_Valid() const{
    return m_metrics_isValid;
}

QList<OAIDimension> OAIPathToConversionReportCompatibleFields::getPerInteractionDimensions() const {
    return m_per_interaction_dimensions;
}
void OAIPathToConversionReportCompatibleFields::setPerInteractionDimensions(const QList<OAIDimension> &per_interaction_dimensions) {
    m_per_interaction_dimensions = per_interaction_dimensions;
    m_per_interaction_dimensions_isSet = true;
}

bool OAIPathToConversionReportCompatibleFields::is_per_interaction_dimensions_Set() const{
    return m_per_interaction_dimensions_isSet;
}

bool OAIPathToConversionReportCompatibleFields::is_per_interaction_dimensions_Valid() const{
    return m_per_interaction_dimensions_isValid;
}

bool OAIPathToConversionReportCompatibleFields::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conversion_dimensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_floodlight_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_interaction_dimensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPathToConversionReportCompatibleFields::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
