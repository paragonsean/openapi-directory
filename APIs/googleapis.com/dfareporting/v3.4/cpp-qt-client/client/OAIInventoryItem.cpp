/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInventoryItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInventoryItem::OAIInventoryItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInventoryItem::OAIInventoryItem() {
    this->initializeModel();
}

OAIInventoryItem::~OAIInventoryItem() {}

void OAIInventoryItem::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_ad_slots_isSet = false;
    m_ad_slots_isValid = false;

    m_advertiser_id_isSet = false;
    m_advertiser_id_isValid = false;

    m_content_category_id_isSet = false;
    m_content_category_id_isValid = false;

    m_estimated_click_through_rate_isSet = false;
    m_estimated_click_through_rate_isValid = false;

    m_estimated_conversion_rate_isSet = false;
    m_estimated_conversion_rate_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_in_plan_isSet = false;
    m_in_plan_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_last_modified_info_isSet = false;
    m_last_modified_info_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_negotiation_channel_id_isSet = false;
    m_negotiation_channel_id_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_placement_strategy_id_isSet = false;
    m_placement_strategy_id_isValid = false;

    m_pricing_isSet = false;
    m_pricing_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_rfp_id_isSet = false;
    m_rfp_id_isValid = false;

    m_site_id_isSet = false;
    m_site_id_isValid = false;

    m_subaccount_id_isSet = false;
    m_subaccount_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIInventoryItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInventoryItem::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_ad_slots_isValid = ::OpenAPI::fromJsonValue(m_ad_slots, json[QString("adSlots")]);
    m_ad_slots_isSet = !json[QString("adSlots")].isNull() && m_ad_slots_isValid;

    m_advertiser_id_isValid = ::OpenAPI::fromJsonValue(m_advertiser_id, json[QString("advertiserId")]);
    m_advertiser_id_isSet = !json[QString("advertiserId")].isNull() && m_advertiser_id_isValid;

    m_content_category_id_isValid = ::OpenAPI::fromJsonValue(m_content_category_id, json[QString("contentCategoryId")]);
    m_content_category_id_isSet = !json[QString("contentCategoryId")].isNull() && m_content_category_id_isValid;

    m_estimated_click_through_rate_isValid = ::OpenAPI::fromJsonValue(m_estimated_click_through_rate, json[QString("estimatedClickThroughRate")]);
    m_estimated_click_through_rate_isSet = !json[QString("estimatedClickThroughRate")].isNull() && m_estimated_click_through_rate_isValid;

    m_estimated_conversion_rate_isValid = ::OpenAPI::fromJsonValue(m_estimated_conversion_rate, json[QString("estimatedConversionRate")]);
    m_estimated_conversion_rate_isSet = !json[QString("estimatedConversionRate")].isNull() && m_estimated_conversion_rate_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_in_plan_isValid = ::OpenAPI::fromJsonValue(m_in_plan, json[QString("inPlan")]);
    m_in_plan_isSet = !json[QString("inPlan")].isNull() && m_in_plan_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_last_modified_info_isValid = ::OpenAPI::fromJsonValue(m_last_modified_info, json[QString("lastModifiedInfo")]);
    m_last_modified_info_isSet = !json[QString("lastModifiedInfo")].isNull() && m_last_modified_info_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_negotiation_channel_id_isValid = ::OpenAPI::fromJsonValue(m_negotiation_channel_id, json[QString("negotiationChannelId")]);
    m_negotiation_channel_id_isSet = !json[QString("negotiationChannelId")].isNull() && m_negotiation_channel_id_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("orderId")]);
    m_order_id_isSet = !json[QString("orderId")].isNull() && m_order_id_isValid;

    m_placement_strategy_id_isValid = ::OpenAPI::fromJsonValue(m_placement_strategy_id, json[QString("placementStrategyId")]);
    m_placement_strategy_id_isSet = !json[QString("placementStrategyId")].isNull() && m_placement_strategy_id_isValid;

    m_pricing_isValid = ::OpenAPI::fromJsonValue(m_pricing, json[QString("pricing")]);
    m_pricing_isSet = !json[QString("pricing")].isNull() && m_pricing_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_rfp_id_isValid = ::OpenAPI::fromJsonValue(m_rfp_id, json[QString("rfpId")]);
    m_rfp_id_isSet = !json[QString("rfpId")].isNull() && m_rfp_id_isValid;

    m_site_id_isValid = ::OpenAPI::fromJsonValue(m_site_id, json[QString("siteId")]);
    m_site_id_isSet = !json[QString("siteId")].isNull() && m_site_id_isValid;

    m_subaccount_id_isValid = ::OpenAPI::fromJsonValue(m_subaccount_id, json[QString("subaccountId")]);
    m_subaccount_id_isSet = !json[QString("subaccountId")].isNull() && m_subaccount_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIInventoryItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInventoryItem::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_ad_slots.size() > 0) {
        obj.insert(QString("adSlots"), ::OpenAPI::toJsonValue(m_ad_slots));
    }
    if (m_advertiser_id_isSet) {
        obj.insert(QString("advertiserId"), ::OpenAPI::toJsonValue(m_advertiser_id));
    }
    if (m_content_category_id_isSet) {
        obj.insert(QString("contentCategoryId"), ::OpenAPI::toJsonValue(m_content_category_id));
    }
    if (m_estimated_click_through_rate_isSet) {
        obj.insert(QString("estimatedClickThroughRate"), ::OpenAPI::toJsonValue(m_estimated_click_through_rate));
    }
    if (m_estimated_conversion_rate_isSet) {
        obj.insert(QString("estimatedConversionRate"), ::OpenAPI::toJsonValue(m_estimated_conversion_rate));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_in_plan_isSet) {
        obj.insert(QString("inPlan"), ::OpenAPI::toJsonValue(m_in_plan));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_last_modified_info.isSet()) {
        obj.insert(QString("lastModifiedInfo"), ::OpenAPI::toJsonValue(m_last_modified_info));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_negotiation_channel_id_isSet) {
        obj.insert(QString("negotiationChannelId"), ::OpenAPI::toJsonValue(m_negotiation_channel_id));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("orderId"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_placement_strategy_id_isSet) {
        obj.insert(QString("placementStrategyId"), ::OpenAPI::toJsonValue(m_placement_strategy_id));
    }
    if (m_pricing.isSet()) {
        obj.insert(QString("pricing"), ::OpenAPI::toJsonValue(m_pricing));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_rfp_id_isSet) {
        obj.insert(QString("rfpId"), ::OpenAPI::toJsonValue(m_rfp_id));
    }
    if (m_site_id_isSet) {
        obj.insert(QString("siteId"), ::OpenAPI::toJsonValue(m_site_id));
    }
    if (m_subaccount_id_isSet) {
        obj.insert(QString("subaccountId"), ::OpenAPI::toJsonValue(m_subaccount_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIInventoryItem::getAccountId() const {
    return m_account_id;
}
void OAIInventoryItem::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIInventoryItem::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIInventoryItem::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QList<OAIAdSlot> OAIInventoryItem::getAdSlots() const {
    return m_ad_slots;
}
void OAIInventoryItem::setAdSlots(const QList<OAIAdSlot> &ad_slots) {
    m_ad_slots = ad_slots;
    m_ad_slots_isSet = true;
}

bool OAIInventoryItem::is_ad_slots_Set() const{
    return m_ad_slots_isSet;
}

bool OAIInventoryItem::is_ad_slots_Valid() const{
    return m_ad_slots_isValid;
}

QString OAIInventoryItem::getAdvertiserId() const {
    return m_advertiser_id;
}
void OAIInventoryItem::setAdvertiserId(const QString &advertiser_id) {
    m_advertiser_id = advertiser_id;
    m_advertiser_id_isSet = true;
}

bool OAIInventoryItem::is_advertiser_id_Set() const{
    return m_advertiser_id_isSet;
}

bool OAIInventoryItem::is_advertiser_id_Valid() const{
    return m_advertiser_id_isValid;
}

QString OAIInventoryItem::getContentCategoryId() const {
    return m_content_category_id;
}
void OAIInventoryItem::setContentCategoryId(const QString &content_category_id) {
    m_content_category_id = content_category_id;
    m_content_category_id_isSet = true;
}

bool OAIInventoryItem::is_content_category_id_Set() const{
    return m_content_category_id_isSet;
}

bool OAIInventoryItem::is_content_category_id_Valid() const{
    return m_content_category_id_isValid;
}

QString OAIInventoryItem::getEstimatedClickThroughRate() const {
    return m_estimated_click_through_rate;
}
void OAIInventoryItem::setEstimatedClickThroughRate(const QString &estimated_click_through_rate) {
    m_estimated_click_through_rate = estimated_click_through_rate;
    m_estimated_click_through_rate_isSet = true;
}

bool OAIInventoryItem::is_estimated_click_through_rate_Set() const{
    return m_estimated_click_through_rate_isSet;
}

bool OAIInventoryItem::is_estimated_click_through_rate_Valid() const{
    return m_estimated_click_through_rate_isValid;
}

QString OAIInventoryItem::getEstimatedConversionRate() const {
    return m_estimated_conversion_rate;
}
void OAIInventoryItem::setEstimatedConversionRate(const QString &estimated_conversion_rate) {
    m_estimated_conversion_rate = estimated_conversion_rate;
    m_estimated_conversion_rate_isSet = true;
}

bool OAIInventoryItem::is_estimated_conversion_rate_Set() const{
    return m_estimated_conversion_rate_isSet;
}

bool OAIInventoryItem::is_estimated_conversion_rate_Valid() const{
    return m_estimated_conversion_rate_isValid;
}

QString OAIInventoryItem::getId() const {
    return m_id;
}
void OAIInventoryItem::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIInventoryItem::is_id_Set() const{
    return m_id_isSet;
}

bool OAIInventoryItem::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIInventoryItem::isInPlan() const {
    return m_in_plan;
}
void OAIInventoryItem::setInPlan(const bool &in_plan) {
    m_in_plan = in_plan;
    m_in_plan_isSet = true;
}

bool OAIInventoryItem::is_in_plan_Set() const{
    return m_in_plan_isSet;
}

bool OAIInventoryItem::is_in_plan_Valid() const{
    return m_in_plan_isValid;
}

QString OAIInventoryItem::getKind() const {
    return m_kind;
}
void OAIInventoryItem::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIInventoryItem::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIInventoryItem::is_kind_Valid() const{
    return m_kind_isValid;
}

OAILastModifiedInfo OAIInventoryItem::getLastModifiedInfo() const {
    return m_last_modified_info;
}
void OAIInventoryItem::setLastModifiedInfo(const OAILastModifiedInfo &last_modified_info) {
    m_last_modified_info = last_modified_info;
    m_last_modified_info_isSet = true;
}

bool OAIInventoryItem::is_last_modified_info_Set() const{
    return m_last_modified_info_isSet;
}

bool OAIInventoryItem::is_last_modified_info_Valid() const{
    return m_last_modified_info_isValid;
}

QString OAIInventoryItem::getName() const {
    return m_name;
}
void OAIInventoryItem::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInventoryItem::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInventoryItem::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIInventoryItem::getNegotiationChannelId() const {
    return m_negotiation_channel_id;
}
void OAIInventoryItem::setNegotiationChannelId(const QString &negotiation_channel_id) {
    m_negotiation_channel_id = negotiation_channel_id;
    m_negotiation_channel_id_isSet = true;
}

bool OAIInventoryItem::is_negotiation_channel_id_Set() const{
    return m_negotiation_channel_id_isSet;
}

bool OAIInventoryItem::is_negotiation_channel_id_Valid() const{
    return m_negotiation_channel_id_isValid;
}

QString OAIInventoryItem::getOrderId() const {
    return m_order_id;
}
void OAIInventoryItem::setOrderId(const QString &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAIInventoryItem::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAIInventoryItem::is_order_id_Valid() const{
    return m_order_id_isValid;
}

QString OAIInventoryItem::getPlacementStrategyId() const {
    return m_placement_strategy_id;
}
void OAIInventoryItem::setPlacementStrategyId(const QString &placement_strategy_id) {
    m_placement_strategy_id = placement_strategy_id;
    m_placement_strategy_id_isSet = true;
}

bool OAIInventoryItem::is_placement_strategy_id_Set() const{
    return m_placement_strategy_id_isSet;
}

bool OAIInventoryItem::is_placement_strategy_id_Valid() const{
    return m_placement_strategy_id_isValid;
}

OAIPricing OAIInventoryItem::getPricing() const {
    return m_pricing;
}
void OAIInventoryItem::setPricing(const OAIPricing &pricing) {
    m_pricing = pricing;
    m_pricing_isSet = true;
}

bool OAIInventoryItem::is_pricing_Set() const{
    return m_pricing_isSet;
}

bool OAIInventoryItem::is_pricing_Valid() const{
    return m_pricing_isValid;
}

QString OAIInventoryItem::getProjectId() const {
    return m_project_id;
}
void OAIInventoryItem::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIInventoryItem::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIInventoryItem::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAIInventoryItem::getRfpId() const {
    return m_rfp_id;
}
void OAIInventoryItem::setRfpId(const QString &rfp_id) {
    m_rfp_id = rfp_id;
    m_rfp_id_isSet = true;
}

bool OAIInventoryItem::is_rfp_id_Set() const{
    return m_rfp_id_isSet;
}

bool OAIInventoryItem::is_rfp_id_Valid() const{
    return m_rfp_id_isValid;
}

QString OAIInventoryItem::getSiteId() const {
    return m_site_id;
}
void OAIInventoryItem::setSiteId(const QString &site_id) {
    m_site_id = site_id;
    m_site_id_isSet = true;
}

bool OAIInventoryItem::is_site_id_Set() const{
    return m_site_id_isSet;
}

bool OAIInventoryItem::is_site_id_Valid() const{
    return m_site_id_isValid;
}

QString OAIInventoryItem::getSubaccountId() const {
    return m_subaccount_id;
}
void OAIInventoryItem::setSubaccountId(const QString &subaccount_id) {
    m_subaccount_id = subaccount_id;
    m_subaccount_id_isSet = true;
}

bool OAIInventoryItem::is_subaccount_id_Set() const{
    return m_subaccount_id_isSet;
}

bool OAIInventoryItem::is_subaccount_id_Valid() const{
    return m_subaccount_id_isValid;
}

QString OAIInventoryItem::getType() const {
    return m_type;
}
void OAIInventoryItem::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIInventoryItem::is_type_Set() const{
    return m_type_isSet;
}

bool OAIInventoryItem::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIInventoryItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ad_slots.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_advertiser_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_click_through_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_conversion_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_plan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_negotiation_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement_strategy_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pricing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rfp_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subaccount_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInventoryItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
