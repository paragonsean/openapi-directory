/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReport_schedule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReport_schedule::OAIReport_schedule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReport_schedule::OAIReport_schedule() {
    this->initializeModel();
}

OAIReport_schedule::~OAIReport_schedule() {}

void OAIReport_schedule::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_every_isSet = false;
    m_every_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_repeats_isSet = false;
    m_repeats_isValid = false;

    m_repeats_on_week_days_isSet = false;
    m_repeats_on_week_days_isValid = false;

    m_runs_on_day_of_month_isSet = false;
    m_runs_on_day_of_month_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;
}

void OAIReport_schedule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReport_schedule::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_every_isValid = ::OpenAPI::fromJsonValue(m_every, json[QString("every")]);
    m_every_isSet = !json[QString("every")].isNull() && m_every_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_repeats_isValid = ::OpenAPI::fromJsonValue(m_repeats, json[QString("repeats")]);
    m_repeats_isSet = !json[QString("repeats")].isNull() && m_repeats_isValid;

    m_repeats_on_week_days_isValid = ::OpenAPI::fromJsonValue(m_repeats_on_week_days, json[QString("repeatsOnWeekDays")]);
    m_repeats_on_week_days_isSet = !json[QString("repeatsOnWeekDays")].isNull() && m_repeats_on_week_days_isValid;

    m_runs_on_day_of_month_isValid = ::OpenAPI::fromJsonValue(m_runs_on_day_of_month, json[QString("runsOnDayOfMonth")]);
    m_runs_on_day_of_month_isSet = !json[QString("runsOnDayOfMonth")].isNull() && m_runs_on_day_of_month_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;
}

QString OAIReport_schedule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReport_schedule::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_every_isSet) {
        obj.insert(QString("every"), ::OpenAPI::toJsonValue(m_every));
    }
    if (m_expiration_date_isSet) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_repeats_isSet) {
        obj.insert(QString("repeats"), ::OpenAPI::toJsonValue(m_repeats));
    }
    if (m_repeats_on_week_days.size() > 0) {
        obj.insert(QString("repeatsOnWeekDays"), ::OpenAPI::toJsonValue(m_repeats_on_week_days));
    }
    if (m_runs_on_day_of_month_isSet) {
        obj.insert(QString("runsOnDayOfMonth"), ::OpenAPI::toJsonValue(m_runs_on_day_of_month));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    return obj;
}

bool OAIReport_schedule::isActive() const {
    return m_active;
}
void OAIReport_schedule::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIReport_schedule::is_active_Set() const{
    return m_active_isSet;
}

bool OAIReport_schedule::is_active_Valid() const{
    return m_active_isValid;
}

qint32 OAIReport_schedule::getEvery() const {
    return m_every;
}
void OAIReport_schedule::setEvery(const qint32 &every) {
    m_every = every;
    m_every_isSet = true;
}

bool OAIReport_schedule::is_every_Set() const{
    return m_every_isSet;
}

bool OAIReport_schedule::is_every_Valid() const{
    return m_every_isValid;
}

QDate OAIReport_schedule::getExpirationDate() const {
    return m_expiration_date;
}
void OAIReport_schedule::setExpirationDate(const QDate &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAIReport_schedule::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAIReport_schedule::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

QString OAIReport_schedule::getRepeats() const {
    return m_repeats;
}
void OAIReport_schedule::setRepeats(const QString &repeats) {
    m_repeats = repeats;
    m_repeats_isSet = true;
}

bool OAIReport_schedule::is_repeats_Set() const{
    return m_repeats_isSet;
}

bool OAIReport_schedule::is_repeats_Valid() const{
    return m_repeats_isValid;
}

QList<QString> OAIReport_schedule::getRepeatsOnWeekDays() const {
    return m_repeats_on_week_days;
}
void OAIReport_schedule::setRepeatsOnWeekDays(const QList<QString> &repeats_on_week_days) {
    m_repeats_on_week_days = repeats_on_week_days;
    m_repeats_on_week_days_isSet = true;
}

bool OAIReport_schedule::is_repeats_on_week_days_Set() const{
    return m_repeats_on_week_days_isSet;
}

bool OAIReport_schedule::is_repeats_on_week_days_Valid() const{
    return m_repeats_on_week_days_isValid;
}

QString OAIReport_schedule::getRunsOnDayOfMonth() const {
    return m_runs_on_day_of_month;
}
void OAIReport_schedule::setRunsOnDayOfMonth(const QString &runs_on_day_of_month) {
    m_runs_on_day_of_month = runs_on_day_of_month;
    m_runs_on_day_of_month_isSet = true;
}

bool OAIReport_schedule::is_runs_on_day_of_month_Set() const{
    return m_runs_on_day_of_month_isSet;
}

bool OAIReport_schedule::is_runs_on_day_of_month_Valid() const{
    return m_runs_on_day_of_month_isValid;
}

QDate OAIReport_schedule::getStartDate() const {
    return m_start_date;
}
void OAIReport_schedule::setStartDate(const QDate &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIReport_schedule::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIReport_schedule::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAIReport_schedule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_every_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repeats_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repeats_on_week_days.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_runs_on_day_of_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReport_schedule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
