/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDayPartTargeting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDayPartTargeting::OAIDayPartTargeting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDayPartTargeting::OAIDayPartTargeting() {
    this->initializeModel();
}

OAIDayPartTargeting::~OAIDayPartTargeting() {}

void OAIDayPartTargeting::initializeModel() {

    m_days_of_week_isSet = false;
    m_days_of_week_isValid = false;

    m_hours_of_day_isSet = false;
    m_hours_of_day_isValid = false;

    m_user_local_time_isSet = false;
    m_user_local_time_isValid = false;
}

void OAIDayPartTargeting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDayPartTargeting::fromJsonObject(QJsonObject json) {

    m_days_of_week_isValid = ::OpenAPI::fromJsonValue(m_days_of_week, json[QString("daysOfWeek")]);
    m_days_of_week_isSet = !json[QString("daysOfWeek")].isNull() && m_days_of_week_isValid;

    m_hours_of_day_isValid = ::OpenAPI::fromJsonValue(m_hours_of_day, json[QString("hoursOfDay")]);
    m_hours_of_day_isSet = !json[QString("hoursOfDay")].isNull() && m_hours_of_day_isValid;

    m_user_local_time_isValid = ::OpenAPI::fromJsonValue(m_user_local_time, json[QString("userLocalTime")]);
    m_user_local_time_isSet = !json[QString("userLocalTime")].isNull() && m_user_local_time_isValid;
}

QString OAIDayPartTargeting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDayPartTargeting::asJsonObject() const {
    QJsonObject obj;
    if (m_days_of_week.size() > 0) {
        obj.insert(QString("daysOfWeek"), ::OpenAPI::toJsonValue(m_days_of_week));
    }
    if (m_hours_of_day.size() > 0) {
        obj.insert(QString("hoursOfDay"), ::OpenAPI::toJsonValue(m_hours_of_day));
    }
    if (m_user_local_time_isSet) {
        obj.insert(QString("userLocalTime"), ::OpenAPI::toJsonValue(m_user_local_time));
    }
    return obj;
}

QList<QString> OAIDayPartTargeting::getDaysOfWeek() const {
    return m_days_of_week;
}
void OAIDayPartTargeting::setDaysOfWeek(const QList<QString> &days_of_week) {
    m_days_of_week = days_of_week;
    m_days_of_week_isSet = true;
}

bool OAIDayPartTargeting::is_days_of_week_Set() const{
    return m_days_of_week_isSet;
}

bool OAIDayPartTargeting::is_days_of_week_Valid() const{
    return m_days_of_week_isValid;
}

QList<qint32> OAIDayPartTargeting::getHoursOfDay() const {
    return m_hours_of_day;
}
void OAIDayPartTargeting::setHoursOfDay(const QList<qint32> &hours_of_day) {
    m_hours_of_day = hours_of_day;
    m_hours_of_day_isSet = true;
}

bool OAIDayPartTargeting::is_hours_of_day_Set() const{
    return m_hours_of_day_isSet;
}

bool OAIDayPartTargeting::is_hours_of_day_Valid() const{
    return m_hours_of_day_isValid;
}

bool OAIDayPartTargeting::isUserLocalTime() const {
    return m_user_local_time;
}
void OAIDayPartTargeting::setUserLocalTime(const bool &user_local_time) {
    m_user_local_time = user_local_time;
    m_user_local_time_isSet = true;
}

bool OAIDayPartTargeting::is_user_local_time_Set() const{
    return m_user_local_time_isSet;
}

bool OAIDayPartTargeting::is_user_local_time_Valid() const{
    return m_user_local_time_isValid;
}

bool OAIDayPartTargeting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_days_of_week.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hours_of_day.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_local_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDayPartTargeting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
