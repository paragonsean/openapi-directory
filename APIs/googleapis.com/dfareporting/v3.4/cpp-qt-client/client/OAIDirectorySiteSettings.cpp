/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDirectorySiteSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDirectorySiteSettings::OAIDirectorySiteSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDirectorySiteSettings::OAIDirectorySiteSettings() {
    this->initializeModel();
}

OAIDirectorySiteSettings::~OAIDirectorySiteSettings() {}

void OAIDirectorySiteSettings::initializeModel() {

    m_active_view_opt_out_isSet = false;
    m_active_view_opt_out_isValid = false;

    m_dfp_settings_isSet = false;
    m_dfp_settings_isValid = false;

    m_instream_video_placement_accepted_isSet = false;
    m_instream_video_placement_accepted_isValid = false;

    m_interstitial_placement_accepted_isSet = false;
    m_interstitial_placement_accepted_isValid = false;
}

void OAIDirectorySiteSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDirectorySiteSettings::fromJsonObject(QJsonObject json) {

    m_active_view_opt_out_isValid = ::OpenAPI::fromJsonValue(m_active_view_opt_out, json[QString("activeViewOptOut")]);
    m_active_view_opt_out_isSet = !json[QString("activeViewOptOut")].isNull() && m_active_view_opt_out_isValid;

    m_dfp_settings_isValid = ::OpenAPI::fromJsonValue(m_dfp_settings, json[QString("dfpSettings")]);
    m_dfp_settings_isSet = !json[QString("dfpSettings")].isNull() && m_dfp_settings_isValid;

    m_instream_video_placement_accepted_isValid = ::OpenAPI::fromJsonValue(m_instream_video_placement_accepted, json[QString("instreamVideoPlacementAccepted")]);
    m_instream_video_placement_accepted_isSet = !json[QString("instreamVideoPlacementAccepted")].isNull() && m_instream_video_placement_accepted_isValid;

    m_interstitial_placement_accepted_isValid = ::OpenAPI::fromJsonValue(m_interstitial_placement_accepted, json[QString("interstitialPlacementAccepted")]);
    m_interstitial_placement_accepted_isSet = !json[QString("interstitialPlacementAccepted")].isNull() && m_interstitial_placement_accepted_isValid;
}

QString OAIDirectorySiteSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDirectorySiteSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_active_view_opt_out_isSet) {
        obj.insert(QString("activeViewOptOut"), ::OpenAPI::toJsonValue(m_active_view_opt_out));
    }
    if (m_dfp_settings.isSet()) {
        obj.insert(QString("dfpSettings"), ::OpenAPI::toJsonValue(m_dfp_settings));
    }
    if (m_instream_video_placement_accepted_isSet) {
        obj.insert(QString("instreamVideoPlacementAccepted"), ::OpenAPI::toJsonValue(m_instream_video_placement_accepted));
    }
    if (m_interstitial_placement_accepted_isSet) {
        obj.insert(QString("interstitialPlacementAccepted"), ::OpenAPI::toJsonValue(m_interstitial_placement_accepted));
    }
    return obj;
}

bool OAIDirectorySiteSettings::isActiveViewOptOut() const {
    return m_active_view_opt_out;
}
void OAIDirectorySiteSettings::setActiveViewOptOut(const bool &active_view_opt_out) {
    m_active_view_opt_out = active_view_opt_out;
    m_active_view_opt_out_isSet = true;
}

bool OAIDirectorySiteSettings::is_active_view_opt_out_Set() const{
    return m_active_view_opt_out_isSet;
}

bool OAIDirectorySiteSettings::is_active_view_opt_out_Valid() const{
    return m_active_view_opt_out_isValid;
}

OAIDfpSettings OAIDirectorySiteSettings::getDfpSettings() const {
    return m_dfp_settings;
}
void OAIDirectorySiteSettings::setDfpSettings(const OAIDfpSettings &dfp_settings) {
    m_dfp_settings = dfp_settings;
    m_dfp_settings_isSet = true;
}

bool OAIDirectorySiteSettings::is_dfp_settings_Set() const{
    return m_dfp_settings_isSet;
}

bool OAIDirectorySiteSettings::is_dfp_settings_Valid() const{
    return m_dfp_settings_isValid;
}

bool OAIDirectorySiteSettings::isInstreamVideoPlacementAccepted() const {
    return m_instream_video_placement_accepted;
}
void OAIDirectorySiteSettings::setInstreamVideoPlacementAccepted(const bool &instream_video_placement_accepted) {
    m_instream_video_placement_accepted = instream_video_placement_accepted;
    m_instream_video_placement_accepted_isSet = true;
}

bool OAIDirectorySiteSettings::is_instream_video_placement_accepted_Set() const{
    return m_instream_video_placement_accepted_isSet;
}

bool OAIDirectorySiteSettings::is_instream_video_placement_accepted_Valid() const{
    return m_instream_video_placement_accepted_isValid;
}

bool OAIDirectorySiteSettings::isInterstitialPlacementAccepted() const {
    return m_interstitial_placement_accepted;
}
void OAIDirectorySiteSettings::setInterstitialPlacementAccepted(const bool &interstitial_placement_accepted) {
    m_interstitial_placement_accepted = interstitial_placement_accepted;
    m_interstitial_placement_accepted_isSet = true;
}

bool OAIDirectorySiteSettings::is_interstitial_placement_accepted_Set() const{
    return m_interstitial_placement_accepted_isSet;
}

bool OAIDirectorySiteSettings::is_interstitial_placement_accepted_Valid() const{
    return m_interstitial_placement_accepted_isValid;
}

bool OAIDirectorySiteSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_view_opt_out_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dfp_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instream_video_placement_accepted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interstitial_placement_accepted_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDirectorySiteSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
