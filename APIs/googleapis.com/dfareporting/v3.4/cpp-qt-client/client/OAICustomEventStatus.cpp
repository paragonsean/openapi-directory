/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomEventStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomEventStatus::OAICustomEventStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomEventStatus::OAICustomEventStatus() {
    this->initializeModel();
}

OAICustomEventStatus::~OAICustomEventStatus() {}

void OAICustomEventStatus::initializeModel() {

    m_custom_event_isSet = false;
    m_custom_event_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;
}

void OAICustomEventStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomEventStatus::fromJsonObject(QJsonObject json) {

    m_custom_event_isValid = ::OpenAPI::fromJsonValue(m_custom_event, json[QString("customEvent")]);
    m_custom_event_isSet = !json[QString("customEvent")].isNull() && m_custom_event_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;
}

QString OAICustomEventStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomEventStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_event.isSet()) {
        obj.insert(QString("customEvent"), ::OpenAPI::toJsonValue(m_custom_event));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    return obj;
}

OAICustomEvent OAICustomEventStatus::getCustomEvent() const {
    return m_custom_event;
}
void OAICustomEventStatus::setCustomEvent(const OAICustomEvent &custom_event) {
    m_custom_event = custom_event;
    m_custom_event_isSet = true;
}

bool OAICustomEventStatus::is_custom_event_Set() const{
    return m_custom_event_isSet;
}

bool OAICustomEventStatus::is_custom_event_Valid() const{
    return m_custom_event_isValid;
}

QList<OAICustomEventError> OAICustomEventStatus::getErrors() const {
    return m_errors;
}
void OAICustomEventStatus::setErrors(const QList<OAICustomEventError> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAICustomEventStatus::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAICustomEventStatus::is_errors_Valid() const{
    return m_errors_isValid;
}

QString OAICustomEventStatus::getKind() const {
    return m_kind;
}
void OAICustomEventStatus::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAICustomEventStatus::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAICustomEventStatus::is_kind_Valid() const{
    return m_kind_isValid;
}

bool OAICustomEventStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_event.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomEventStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
