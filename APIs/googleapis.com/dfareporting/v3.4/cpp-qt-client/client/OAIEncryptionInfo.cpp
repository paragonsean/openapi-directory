/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEncryptionInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEncryptionInfo::OAIEncryptionInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEncryptionInfo::OAIEncryptionInfo() {
    this->initializeModel();
}

OAIEncryptionInfo::~OAIEncryptionInfo() {}

void OAIEncryptionInfo::initializeModel() {

    m_encryption_entity_id_isSet = false;
    m_encryption_entity_id_isValid = false;

    m_encryption_entity_type_isSet = false;
    m_encryption_entity_type_isValid = false;

    m_encryption_source_isSet = false;
    m_encryption_source_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;
}

void OAIEncryptionInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEncryptionInfo::fromJsonObject(QJsonObject json) {

    m_encryption_entity_id_isValid = ::OpenAPI::fromJsonValue(m_encryption_entity_id, json[QString("encryptionEntityId")]);
    m_encryption_entity_id_isSet = !json[QString("encryptionEntityId")].isNull() && m_encryption_entity_id_isValid;

    m_encryption_entity_type_isValid = ::OpenAPI::fromJsonValue(m_encryption_entity_type, json[QString("encryptionEntityType")]);
    m_encryption_entity_type_isSet = !json[QString("encryptionEntityType")].isNull() && m_encryption_entity_type_isValid;

    m_encryption_source_isValid = ::OpenAPI::fromJsonValue(m_encryption_source, json[QString("encryptionSource")]);
    m_encryption_source_isSet = !json[QString("encryptionSource")].isNull() && m_encryption_source_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;
}

QString OAIEncryptionInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEncryptionInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_encryption_entity_id_isSet) {
        obj.insert(QString("encryptionEntityId"), ::OpenAPI::toJsonValue(m_encryption_entity_id));
    }
    if (m_encryption_entity_type_isSet) {
        obj.insert(QString("encryptionEntityType"), ::OpenAPI::toJsonValue(m_encryption_entity_type));
    }
    if (m_encryption_source_isSet) {
        obj.insert(QString("encryptionSource"), ::OpenAPI::toJsonValue(m_encryption_source));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    return obj;
}

QString OAIEncryptionInfo::getEncryptionEntityId() const {
    return m_encryption_entity_id;
}
void OAIEncryptionInfo::setEncryptionEntityId(const QString &encryption_entity_id) {
    m_encryption_entity_id = encryption_entity_id;
    m_encryption_entity_id_isSet = true;
}

bool OAIEncryptionInfo::is_encryption_entity_id_Set() const{
    return m_encryption_entity_id_isSet;
}

bool OAIEncryptionInfo::is_encryption_entity_id_Valid() const{
    return m_encryption_entity_id_isValid;
}

QString OAIEncryptionInfo::getEncryptionEntityType() const {
    return m_encryption_entity_type;
}
void OAIEncryptionInfo::setEncryptionEntityType(const QString &encryption_entity_type) {
    m_encryption_entity_type = encryption_entity_type;
    m_encryption_entity_type_isSet = true;
}

bool OAIEncryptionInfo::is_encryption_entity_type_Set() const{
    return m_encryption_entity_type_isSet;
}

bool OAIEncryptionInfo::is_encryption_entity_type_Valid() const{
    return m_encryption_entity_type_isValid;
}

QString OAIEncryptionInfo::getEncryptionSource() const {
    return m_encryption_source;
}
void OAIEncryptionInfo::setEncryptionSource(const QString &encryption_source) {
    m_encryption_source = encryption_source;
    m_encryption_source_isSet = true;
}

bool OAIEncryptionInfo::is_encryption_source_Set() const{
    return m_encryption_source_isSet;
}

bool OAIEncryptionInfo::is_encryption_source_Valid() const{
    return m_encryption_source_isValid;
}

QString OAIEncryptionInfo::getKind() const {
    return m_kind;
}
void OAIEncryptionInfo::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIEncryptionInfo::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIEncryptionInfo::is_kind_Valid() const{
    return m_kind_isValid;
}

bool OAIEncryptionInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encryption_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEncryptionInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
