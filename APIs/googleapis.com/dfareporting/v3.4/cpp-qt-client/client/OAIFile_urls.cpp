/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFile_urls.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFile_urls::OAIFile_urls(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFile_urls::OAIFile_urls() {
    this->initializeModel();
}

OAIFile_urls::~OAIFile_urls() {}

void OAIFile_urls::initializeModel() {

    m_api_url_isSet = false;
    m_api_url_isValid = false;

    m_browser_url_isSet = false;
    m_browser_url_isValid = false;
}

void OAIFile_urls::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFile_urls::fromJsonObject(QJsonObject json) {

    m_api_url_isValid = ::OpenAPI::fromJsonValue(m_api_url, json[QString("apiUrl")]);
    m_api_url_isSet = !json[QString("apiUrl")].isNull() && m_api_url_isValid;

    m_browser_url_isValid = ::OpenAPI::fromJsonValue(m_browser_url, json[QString("browserUrl")]);
    m_browser_url_isSet = !json[QString("browserUrl")].isNull() && m_browser_url_isValid;
}

QString OAIFile_urls::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFile_urls::asJsonObject() const {
    QJsonObject obj;
    if (m_api_url_isSet) {
        obj.insert(QString("apiUrl"), ::OpenAPI::toJsonValue(m_api_url));
    }
    if (m_browser_url_isSet) {
        obj.insert(QString("browserUrl"), ::OpenAPI::toJsonValue(m_browser_url));
    }
    return obj;
}

QString OAIFile_urls::getApiUrl() const {
    return m_api_url;
}
void OAIFile_urls::setApiUrl(const QString &api_url) {
    m_api_url = api_url;
    m_api_url_isSet = true;
}

bool OAIFile_urls::is_api_url_Set() const{
    return m_api_url_isSet;
}

bool OAIFile_urls::is_api_url_Valid() const{
    return m_api_url_isValid;
}

QString OAIFile_urls::getBrowserUrl() const {
    return m_browser_url;
}
void OAIFile_urls::setBrowserUrl(const QString &browser_url) {
    m_browser_url = browser_url;
    m_browser_url_isSet = true;
}

bool OAIFile_urls::is_browser_url_Set() const{
    return m_browser_url_isSet;
}

bool OAIFile_urls::is_browser_url_Valid() const{
    return m_browser_url_isValid;
}

bool OAIFile_urls::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_browser_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFile_urls::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
