/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICampaignManagerIds.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICampaignManagerIds::OAICampaignManagerIds(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICampaignManagerIds::OAICampaignManagerIds() {
    this->initializeModel();
}

OAICampaignManagerIds::~OAICampaignManagerIds() {}

void OAICampaignManagerIds::initializeModel() {

    m_ad_id_isSet = false;
    m_ad_id_isValid = false;

    m_campaign_id_isSet = false;
    m_campaign_id_isValid = false;

    m_creative_id_isSet = false;
    m_creative_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_placement_id_isSet = false;
    m_placement_id_isValid = false;

    m_site_id_isSet = false;
    m_site_id_isValid = false;
}

void OAICampaignManagerIds::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICampaignManagerIds::fromJsonObject(QJsonObject json) {

    m_ad_id_isValid = ::OpenAPI::fromJsonValue(m_ad_id, json[QString("adId")]);
    m_ad_id_isSet = !json[QString("adId")].isNull() && m_ad_id_isValid;

    m_campaign_id_isValid = ::OpenAPI::fromJsonValue(m_campaign_id, json[QString("campaignId")]);
    m_campaign_id_isSet = !json[QString("campaignId")].isNull() && m_campaign_id_isValid;

    m_creative_id_isValid = ::OpenAPI::fromJsonValue(m_creative_id, json[QString("creativeId")]);
    m_creative_id_isSet = !json[QString("creativeId")].isNull() && m_creative_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_placement_id_isValid = ::OpenAPI::fromJsonValue(m_placement_id, json[QString("placementId")]);
    m_placement_id_isSet = !json[QString("placementId")].isNull() && m_placement_id_isValid;

    m_site_id_isValid = ::OpenAPI::fromJsonValue(m_site_id, json[QString("siteId")]);
    m_site_id_isSet = !json[QString("siteId")].isNull() && m_site_id_isValid;
}

QString OAICampaignManagerIds::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICampaignManagerIds::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_id_isSet) {
        obj.insert(QString("adId"), ::OpenAPI::toJsonValue(m_ad_id));
    }
    if (m_campaign_id_isSet) {
        obj.insert(QString("campaignId"), ::OpenAPI::toJsonValue(m_campaign_id));
    }
    if (m_creative_id_isSet) {
        obj.insert(QString("creativeId"), ::OpenAPI::toJsonValue(m_creative_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_placement_id_isSet) {
        obj.insert(QString("placementId"), ::OpenAPI::toJsonValue(m_placement_id));
    }
    if (m_site_id_isSet) {
        obj.insert(QString("siteId"), ::OpenAPI::toJsonValue(m_site_id));
    }
    return obj;
}

QString OAICampaignManagerIds::getAdId() const {
    return m_ad_id;
}
void OAICampaignManagerIds::setAdId(const QString &ad_id) {
    m_ad_id = ad_id;
    m_ad_id_isSet = true;
}

bool OAICampaignManagerIds::is_ad_id_Set() const{
    return m_ad_id_isSet;
}

bool OAICampaignManagerIds::is_ad_id_Valid() const{
    return m_ad_id_isValid;
}

QString OAICampaignManagerIds::getCampaignId() const {
    return m_campaign_id;
}
void OAICampaignManagerIds::setCampaignId(const QString &campaign_id) {
    m_campaign_id = campaign_id;
    m_campaign_id_isSet = true;
}

bool OAICampaignManagerIds::is_campaign_id_Set() const{
    return m_campaign_id_isSet;
}

bool OAICampaignManagerIds::is_campaign_id_Valid() const{
    return m_campaign_id_isValid;
}

QString OAICampaignManagerIds::getCreativeId() const {
    return m_creative_id;
}
void OAICampaignManagerIds::setCreativeId(const QString &creative_id) {
    m_creative_id = creative_id;
    m_creative_id_isSet = true;
}

bool OAICampaignManagerIds::is_creative_id_Set() const{
    return m_creative_id_isSet;
}

bool OAICampaignManagerIds::is_creative_id_Valid() const{
    return m_creative_id_isValid;
}

QString OAICampaignManagerIds::getKind() const {
    return m_kind;
}
void OAICampaignManagerIds::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAICampaignManagerIds::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAICampaignManagerIds::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAICampaignManagerIds::getPlacementId() const {
    return m_placement_id;
}
void OAICampaignManagerIds::setPlacementId(const QString &placement_id) {
    m_placement_id = placement_id;
    m_placement_id_isSet = true;
}

bool OAICampaignManagerIds::is_placement_id_Set() const{
    return m_placement_id_isSet;
}

bool OAICampaignManagerIds::is_placement_id_Valid() const{
    return m_placement_id_isValid;
}

QString OAICampaignManagerIds::getSiteId() const {
    return m_site_id;
}
void OAICampaignManagerIds::setSiteId(const QString &site_id) {
    m_site_id = site_id;
    m_site_id_isSet = true;
}

bool OAICampaignManagerIds::is_site_id_Set() const{
    return m_site_id_isSet;
}

bool OAICampaignManagerIds::is_site_id_Valid() const{
    return m_site_id_isValid;
}

bool OAICampaignManagerIds::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_campaign_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creative_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICampaignManagerIds::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
