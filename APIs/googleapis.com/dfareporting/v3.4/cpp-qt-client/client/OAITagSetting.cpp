/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITagSetting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITagSetting::OAITagSetting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITagSetting::OAITagSetting() {
    this->initializeModel();
}

OAITagSetting::~OAITagSetting() {}

void OAITagSetting::initializeModel() {

    m_additional_key_values_isSet = false;
    m_additional_key_values_isValid = false;

    m_include_click_through_urls_isSet = false;
    m_include_click_through_urls_isValid = false;

    m_include_click_tracking_isSet = false;
    m_include_click_tracking_isValid = false;

    m_keyword_option_isSet = false;
    m_keyword_option_isValid = false;
}

void OAITagSetting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITagSetting::fromJsonObject(QJsonObject json) {

    m_additional_key_values_isValid = ::OpenAPI::fromJsonValue(m_additional_key_values, json[QString("additionalKeyValues")]);
    m_additional_key_values_isSet = !json[QString("additionalKeyValues")].isNull() && m_additional_key_values_isValid;

    m_include_click_through_urls_isValid = ::OpenAPI::fromJsonValue(m_include_click_through_urls, json[QString("includeClickThroughUrls")]);
    m_include_click_through_urls_isSet = !json[QString("includeClickThroughUrls")].isNull() && m_include_click_through_urls_isValid;

    m_include_click_tracking_isValid = ::OpenAPI::fromJsonValue(m_include_click_tracking, json[QString("includeClickTracking")]);
    m_include_click_tracking_isSet = !json[QString("includeClickTracking")].isNull() && m_include_click_tracking_isValid;

    m_keyword_option_isValid = ::OpenAPI::fromJsonValue(m_keyword_option, json[QString("keywordOption")]);
    m_keyword_option_isSet = !json[QString("keywordOption")].isNull() && m_keyword_option_isValid;
}

QString OAITagSetting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITagSetting::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_key_values_isSet) {
        obj.insert(QString("additionalKeyValues"), ::OpenAPI::toJsonValue(m_additional_key_values));
    }
    if (m_include_click_through_urls_isSet) {
        obj.insert(QString("includeClickThroughUrls"), ::OpenAPI::toJsonValue(m_include_click_through_urls));
    }
    if (m_include_click_tracking_isSet) {
        obj.insert(QString("includeClickTracking"), ::OpenAPI::toJsonValue(m_include_click_tracking));
    }
    if (m_keyword_option_isSet) {
        obj.insert(QString("keywordOption"), ::OpenAPI::toJsonValue(m_keyword_option));
    }
    return obj;
}

QString OAITagSetting::getAdditionalKeyValues() const {
    return m_additional_key_values;
}
void OAITagSetting::setAdditionalKeyValues(const QString &additional_key_values) {
    m_additional_key_values = additional_key_values;
    m_additional_key_values_isSet = true;
}

bool OAITagSetting::is_additional_key_values_Set() const{
    return m_additional_key_values_isSet;
}

bool OAITagSetting::is_additional_key_values_Valid() const{
    return m_additional_key_values_isValid;
}

bool OAITagSetting::isIncludeClickThroughUrls() const {
    return m_include_click_through_urls;
}
void OAITagSetting::setIncludeClickThroughUrls(const bool &include_click_through_urls) {
    m_include_click_through_urls = include_click_through_urls;
    m_include_click_through_urls_isSet = true;
}

bool OAITagSetting::is_include_click_through_urls_Set() const{
    return m_include_click_through_urls_isSet;
}

bool OAITagSetting::is_include_click_through_urls_Valid() const{
    return m_include_click_through_urls_isValid;
}

bool OAITagSetting::isIncludeClickTracking() const {
    return m_include_click_tracking;
}
void OAITagSetting::setIncludeClickTracking(const bool &include_click_tracking) {
    m_include_click_tracking = include_click_tracking;
    m_include_click_tracking_isSet = true;
}

bool OAITagSetting::is_include_click_tracking_Set() const{
    return m_include_click_tracking_isSet;
}

bool OAITagSetting::is_include_click_tracking_Valid() const{
    return m_include_click_tracking_isValid;
}

QString OAITagSetting::getKeywordOption() const {
    return m_keyword_option;
}
void OAITagSetting::setKeywordOption(const QString &keyword_option) {
    m_keyword_option = keyword_option;
    m_keyword_option_isSet = true;
}

bool OAITagSetting::is_keyword_option_Set() const{
    return m_keyword_option_isSet;
}

bool OAITagSetting::is_keyword_option_Valid() const{
    return m_keyword_option_isValid;
}

bool OAITagSetting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_key_values_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_click_through_urls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_click_tracking_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keyword_option_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITagSetting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
