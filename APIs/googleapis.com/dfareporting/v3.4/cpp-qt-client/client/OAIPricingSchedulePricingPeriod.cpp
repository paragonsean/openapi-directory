/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPricingSchedulePricingPeriod.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPricingSchedulePricingPeriod::OAIPricingSchedulePricingPeriod(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPricingSchedulePricingPeriod::OAIPricingSchedulePricingPeriod() {
    this->initializeModel();
}

OAIPricingSchedulePricingPeriod::~OAIPricingSchedulePricingPeriod() {}

void OAIPricingSchedulePricingPeriod::initializeModel() {

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_pricing_comment_isSet = false;
    m_pricing_comment_isValid = false;

    m_rate_or_cost_nanos_isSet = false;
    m_rate_or_cost_nanos_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_units_isSet = false;
    m_units_isValid = false;
}

void OAIPricingSchedulePricingPeriod::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPricingSchedulePricingPeriod::fromJsonObject(QJsonObject json) {

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_pricing_comment_isValid = ::OpenAPI::fromJsonValue(m_pricing_comment, json[QString("pricingComment")]);
    m_pricing_comment_isSet = !json[QString("pricingComment")].isNull() && m_pricing_comment_isValid;

    m_rate_or_cost_nanos_isValid = ::OpenAPI::fromJsonValue(m_rate_or_cost_nanos, json[QString("rateOrCostNanos")]);
    m_rate_or_cost_nanos_isSet = !json[QString("rateOrCostNanos")].isNull() && m_rate_or_cost_nanos_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_units_isValid = ::OpenAPI::fromJsonValue(m_units, json[QString("units")]);
    m_units_isSet = !json[QString("units")].isNull() && m_units_isValid;
}

QString OAIPricingSchedulePricingPeriod::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPricingSchedulePricingPeriod::asJsonObject() const {
    QJsonObject obj;
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_pricing_comment_isSet) {
        obj.insert(QString("pricingComment"), ::OpenAPI::toJsonValue(m_pricing_comment));
    }
    if (m_rate_or_cost_nanos_isSet) {
        obj.insert(QString("rateOrCostNanos"), ::OpenAPI::toJsonValue(m_rate_or_cost_nanos));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_units_isSet) {
        obj.insert(QString("units"), ::OpenAPI::toJsonValue(m_units));
    }
    return obj;
}

QDate OAIPricingSchedulePricingPeriod::getEndDate() const {
    return m_end_date;
}
void OAIPricingSchedulePricingPeriod::setEndDate(const QDate &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIPricingSchedulePricingPeriod::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIPricingSchedulePricingPeriod::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAIPricingSchedulePricingPeriod::getPricingComment() const {
    return m_pricing_comment;
}
void OAIPricingSchedulePricingPeriod::setPricingComment(const QString &pricing_comment) {
    m_pricing_comment = pricing_comment;
    m_pricing_comment_isSet = true;
}

bool OAIPricingSchedulePricingPeriod::is_pricing_comment_Set() const{
    return m_pricing_comment_isSet;
}

bool OAIPricingSchedulePricingPeriod::is_pricing_comment_Valid() const{
    return m_pricing_comment_isValid;
}

QString OAIPricingSchedulePricingPeriod::getRateOrCostNanos() const {
    return m_rate_or_cost_nanos;
}
void OAIPricingSchedulePricingPeriod::setRateOrCostNanos(const QString &rate_or_cost_nanos) {
    m_rate_or_cost_nanos = rate_or_cost_nanos;
    m_rate_or_cost_nanos_isSet = true;
}

bool OAIPricingSchedulePricingPeriod::is_rate_or_cost_nanos_Set() const{
    return m_rate_or_cost_nanos_isSet;
}

bool OAIPricingSchedulePricingPeriod::is_rate_or_cost_nanos_Valid() const{
    return m_rate_or_cost_nanos_isValid;
}

QDate OAIPricingSchedulePricingPeriod::getStartDate() const {
    return m_start_date;
}
void OAIPricingSchedulePricingPeriod::setStartDate(const QDate &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIPricingSchedulePricingPeriod::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIPricingSchedulePricingPeriod::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIPricingSchedulePricingPeriod::getUnits() const {
    return m_units;
}
void OAIPricingSchedulePricingPeriod::setUnits(const QString &units) {
    m_units = units;
    m_units_isSet = true;
}

bool OAIPricingSchedulePricingPeriod::is_units_Set() const{
    return m_units_isSet;
}

bool OAIPricingSchedulePricingPeriod::is_units_Valid() const{
    return m_units_isValid;
}

bool OAIPricingSchedulePricingPeriod::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pricing_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_or_cost_nanos_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_units_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPricingSchedulePricingPeriod::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
