/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISiteVideoSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISiteVideoSettings::OAISiteVideoSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISiteVideoSettings::OAISiteVideoSettings() {
    this->initializeModel();
}

OAISiteVideoSettings::~OAISiteVideoSettings() {}

void OAISiteVideoSettings::initializeModel() {

    m_companion_settings_isSet = false;
    m_companion_settings_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_oba_enabled_isSet = false;
    m_oba_enabled_isValid = false;

    m_oba_settings_isSet = false;
    m_oba_settings_isValid = false;

    m_orientation_isSet = false;
    m_orientation_isValid = false;

    m_skippable_settings_isSet = false;
    m_skippable_settings_isValid = false;

    m_transcode_settings_isSet = false;
    m_transcode_settings_isValid = false;
}

void OAISiteVideoSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISiteVideoSettings::fromJsonObject(QJsonObject json) {

    m_companion_settings_isValid = ::OpenAPI::fromJsonValue(m_companion_settings, json[QString("companionSettings")]);
    m_companion_settings_isSet = !json[QString("companionSettings")].isNull() && m_companion_settings_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_oba_enabled_isValid = ::OpenAPI::fromJsonValue(m_oba_enabled, json[QString("obaEnabled")]);
    m_oba_enabled_isSet = !json[QString("obaEnabled")].isNull() && m_oba_enabled_isValid;

    m_oba_settings_isValid = ::OpenAPI::fromJsonValue(m_oba_settings, json[QString("obaSettings")]);
    m_oba_settings_isSet = !json[QString("obaSettings")].isNull() && m_oba_settings_isValid;

    m_orientation_isValid = ::OpenAPI::fromJsonValue(m_orientation, json[QString("orientation")]);
    m_orientation_isSet = !json[QString("orientation")].isNull() && m_orientation_isValid;

    m_skippable_settings_isValid = ::OpenAPI::fromJsonValue(m_skippable_settings, json[QString("skippableSettings")]);
    m_skippable_settings_isSet = !json[QString("skippableSettings")].isNull() && m_skippable_settings_isValid;

    m_transcode_settings_isValid = ::OpenAPI::fromJsonValue(m_transcode_settings, json[QString("transcodeSettings")]);
    m_transcode_settings_isSet = !json[QString("transcodeSettings")].isNull() && m_transcode_settings_isValid;
}

QString OAISiteVideoSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISiteVideoSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_companion_settings.isSet()) {
        obj.insert(QString("companionSettings"), ::OpenAPI::toJsonValue(m_companion_settings));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_oba_enabled_isSet) {
        obj.insert(QString("obaEnabled"), ::OpenAPI::toJsonValue(m_oba_enabled));
    }
    if (m_oba_settings.isSet()) {
        obj.insert(QString("obaSettings"), ::OpenAPI::toJsonValue(m_oba_settings));
    }
    if (m_orientation_isSet) {
        obj.insert(QString("orientation"), ::OpenAPI::toJsonValue(m_orientation));
    }
    if (m_skippable_settings.isSet()) {
        obj.insert(QString("skippableSettings"), ::OpenAPI::toJsonValue(m_skippable_settings));
    }
    if (m_transcode_settings.isSet()) {
        obj.insert(QString("transcodeSettings"), ::OpenAPI::toJsonValue(m_transcode_settings));
    }
    return obj;
}

OAISiteCompanionSetting OAISiteVideoSettings::getCompanionSettings() const {
    return m_companion_settings;
}
void OAISiteVideoSettings::setCompanionSettings(const OAISiteCompanionSetting &companion_settings) {
    m_companion_settings = companion_settings;
    m_companion_settings_isSet = true;
}

bool OAISiteVideoSettings::is_companion_settings_Set() const{
    return m_companion_settings_isSet;
}

bool OAISiteVideoSettings::is_companion_settings_Valid() const{
    return m_companion_settings_isValid;
}

QString OAISiteVideoSettings::getKind() const {
    return m_kind;
}
void OAISiteVideoSettings::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAISiteVideoSettings::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAISiteVideoSettings::is_kind_Valid() const{
    return m_kind_isValid;
}

bool OAISiteVideoSettings::isObaEnabled() const {
    return m_oba_enabled;
}
void OAISiteVideoSettings::setObaEnabled(const bool &oba_enabled) {
    m_oba_enabled = oba_enabled;
    m_oba_enabled_isSet = true;
}

bool OAISiteVideoSettings::is_oba_enabled_Set() const{
    return m_oba_enabled_isSet;
}

bool OAISiteVideoSettings::is_oba_enabled_Valid() const{
    return m_oba_enabled_isValid;
}

OAIObaIcon OAISiteVideoSettings::getObaSettings() const {
    return m_oba_settings;
}
void OAISiteVideoSettings::setObaSettings(const OAIObaIcon &oba_settings) {
    m_oba_settings = oba_settings;
    m_oba_settings_isSet = true;
}

bool OAISiteVideoSettings::is_oba_settings_Set() const{
    return m_oba_settings_isSet;
}

bool OAISiteVideoSettings::is_oba_settings_Valid() const{
    return m_oba_settings_isValid;
}

QString OAISiteVideoSettings::getOrientation() const {
    return m_orientation;
}
void OAISiteVideoSettings::setOrientation(const QString &orientation) {
    m_orientation = orientation;
    m_orientation_isSet = true;
}

bool OAISiteVideoSettings::is_orientation_Set() const{
    return m_orientation_isSet;
}

bool OAISiteVideoSettings::is_orientation_Valid() const{
    return m_orientation_isValid;
}

OAISiteSkippableSetting OAISiteVideoSettings::getSkippableSettings() const {
    return m_skippable_settings;
}
void OAISiteVideoSettings::setSkippableSettings(const OAISiteSkippableSetting &skippable_settings) {
    m_skippable_settings = skippable_settings;
    m_skippable_settings_isSet = true;
}

bool OAISiteVideoSettings::is_skippable_settings_Set() const{
    return m_skippable_settings_isSet;
}

bool OAISiteVideoSettings::is_skippable_settings_Valid() const{
    return m_skippable_settings_isValid;
}

OAISiteTranscodeSetting OAISiteVideoSettings::getTranscodeSettings() const {
    return m_transcode_settings;
}
void OAISiteVideoSettings::setTranscodeSettings(const OAISiteTranscodeSetting &transcode_settings) {
    m_transcode_settings = transcode_settings;
    m_transcode_settings_isSet = true;
}

bool OAISiteVideoSettings::is_transcode_settings_Set() const{
    return m_transcode_settings_isSet;
}

bool OAISiteVideoSettings::is_transcode_settings_Valid() const{
    return m_transcode_settings_isValid;
}

bool OAISiteVideoSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_companion_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oba_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oba_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_orientation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skippable_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transcode_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISiteVideoSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
