/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeoTargeting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeoTargeting::OAIGeoTargeting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeoTargeting::OAIGeoTargeting() {
    this->initializeModel();
}

OAIGeoTargeting::~OAIGeoTargeting() {}

void OAIGeoTargeting::initializeModel() {

    m_cities_isSet = false;
    m_cities_isValid = false;

    m_countries_isSet = false;
    m_countries_isValid = false;

    m_exclude_countries_isSet = false;
    m_exclude_countries_isValid = false;

    m_metros_isSet = false;
    m_metros_isValid = false;

    m_postal_codes_isSet = false;
    m_postal_codes_isValid = false;

    m_regions_isSet = false;
    m_regions_isValid = false;
}

void OAIGeoTargeting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeoTargeting::fromJsonObject(QJsonObject json) {

    m_cities_isValid = ::OpenAPI::fromJsonValue(m_cities, json[QString("cities")]);
    m_cities_isSet = !json[QString("cities")].isNull() && m_cities_isValid;

    m_countries_isValid = ::OpenAPI::fromJsonValue(m_countries, json[QString("countries")]);
    m_countries_isSet = !json[QString("countries")].isNull() && m_countries_isValid;

    m_exclude_countries_isValid = ::OpenAPI::fromJsonValue(m_exclude_countries, json[QString("excludeCountries")]);
    m_exclude_countries_isSet = !json[QString("excludeCountries")].isNull() && m_exclude_countries_isValid;

    m_metros_isValid = ::OpenAPI::fromJsonValue(m_metros, json[QString("metros")]);
    m_metros_isSet = !json[QString("metros")].isNull() && m_metros_isValid;

    m_postal_codes_isValid = ::OpenAPI::fromJsonValue(m_postal_codes, json[QString("postalCodes")]);
    m_postal_codes_isSet = !json[QString("postalCodes")].isNull() && m_postal_codes_isValid;

    m_regions_isValid = ::OpenAPI::fromJsonValue(m_regions, json[QString("regions")]);
    m_regions_isSet = !json[QString("regions")].isNull() && m_regions_isValid;
}

QString OAIGeoTargeting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeoTargeting::asJsonObject() const {
    QJsonObject obj;
    if (m_cities.size() > 0) {
        obj.insert(QString("cities"), ::OpenAPI::toJsonValue(m_cities));
    }
    if (m_countries.size() > 0) {
        obj.insert(QString("countries"), ::OpenAPI::toJsonValue(m_countries));
    }
    if (m_exclude_countries_isSet) {
        obj.insert(QString("excludeCountries"), ::OpenAPI::toJsonValue(m_exclude_countries));
    }
    if (m_metros.size() > 0) {
        obj.insert(QString("metros"), ::OpenAPI::toJsonValue(m_metros));
    }
    if (m_postal_codes.size() > 0) {
        obj.insert(QString("postalCodes"), ::OpenAPI::toJsonValue(m_postal_codes));
    }
    if (m_regions.size() > 0) {
        obj.insert(QString("regions"), ::OpenAPI::toJsonValue(m_regions));
    }
    return obj;
}

QList<OAICity> OAIGeoTargeting::getCities() const {
    return m_cities;
}
void OAIGeoTargeting::setCities(const QList<OAICity> &cities) {
    m_cities = cities;
    m_cities_isSet = true;
}

bool OAIGeoTargeting::is_cities_Set() const{
    return m_cities_isSet;
}

bool OAIGeoTargeting::is_cities_Valid() const{
    return m_cities_isValid;
}

QList<OAICountry> OAIGeoTargeting::getCountries() const {
    return m_countries;
}
void OAIGeoTargeting::setCountries(const QList<OAICountry> &countries) {
    m_countries = countries;
    m_countries_isSet = true;
}

bool OAIGeoTargeting::is_countries_Set() const{
    return m_countries_isSet;
}

bool OAIGeoTargeting::is_countries_Valid() const{
    return m_countries_isValid;
}

bool OAIGeoTargeting::isExcludeCountries() const {
    return m_exclude_countries;
}
void OAIGeoTargeting::setExcludeCountries(const bool &exclude_countries) {
    m_exclude_countries = exclude_countries;
    m_exclude_countries_isSet = true;
}

bool OAIGeoTargeting::is_exclude_countries_Set() const{
    return m_exclude_countries_isSet;
}

bool OAIGeoTargeting::is_exclude_countries_Valid() const{
    return m_exclude_countries_isValid;
}

QList<OAIMetro> OAIGeoTargeting::getMetros() const {
    return m_metros;
}
void OAIGeoTargeting::setMetros(const QList<OAIMetro> &metros) {
    m_metros = metros;
    m_metros_isSet = true;
}

bool OAIGeoTargeting::is_metros_Set() const{
    return m_metros_isSet;
}

bool OAIGeoTargeting::is_metros_Valid() const{
    return m_metros_isValid;
}

QList<OAIPostalCode> OAIGeoTargeting::getPostalCodes() const {
    return m_postal_codes;
}
void OAIGeoTargeting::setPostalCodes(const QList<OAIPostalCode> &postal_codes) {
    m_postal_codes = postal_codes;
    m_postal_codes_isSet = true;
}

bool OAIGeoTargeting::is_postal_codes_Set() const{
    return m_postal_codes_isSet;
}

bool OAIGeoTargeting::is_postal_codes_Valid() const{
    return m_postal_codes_isValid;
}

QList<OAIRegion> OAIGeoTargeting::getRegions() const {
    return m_regions;
}
void OAIGeoTargeting::setRegions(const QList<OAIRegion> &regions) {
    m_regions = regions;
    m_regions_isSet = true;
}

bool OAIGeoTargeting::is_regions_Set() const{
    return m_regions_isSet;
}

bool OAIGeoTargeting::is_regions_Valid() const{
    return m_regions_isValid;
}

bool OAIGeoTargeting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_countries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_countries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metros.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_regions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeoTargeting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
