/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFloodlightActivity.h
 *
 * Contains properties of a Floodlight activity.
 */

#ifndef OAIFloodlightActivity_H
#define OAIFloodlightActivity_H

#include <QJsonObject>

#include "OAIDimensionValue.h"
#include "OAIFloodlightActivityDynamicTag.h"
#include "OAIFloodlightActivityPublisherDynamicTag.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDimensionValue;
class OAIFloodlightActivityDynamicTag;
class OAIFloodlightActivityPublisherDynamicTag;

class OAIFloodlightActivity : public OAIObject {
public:
    OAIFloodlightActivity();
    OAIFloodlightActivity(QString json);
    ~OAIFloodlightActivity() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccountId() const;
    void setAccountId(const QString &account_id);
    bool is_account_id_Set() const;
    bool is_account_id_Valid() const;

    QString getAdvertiserId() const;
    void setAdvertiserId(const QString &advertiser_id);
    bool is_advertiser_id_Set() const;
    bool is_advertiser_id_Valid() const;

    OAIDimensionValue getAdvertiserIdDimensionValue() const;
    void setAdvertiserIdDimensionValue(const OAIDimensionValue &advertiser_id_dimension_value);
    bool is_advertiser_id_dimension_value_Set() const;
    bool is_advertiser_id_dimension_value_Valid() const;

    bool isAttributionEnabled() const;
    void setAttributionEnabled(const bool &attribution_enabled);
    bool is_attribution_enabled_Set() const;
    bool is_attribution_enabled_Valid() const;

    QString getCacheBustingType() const;
    void setCacheBustingType(const QString &cache_busting_type);
    bool is_cache_busting_type_Set() const;
    bool is_cache_busting_type_Valid() const;

    QString getCountingMethod() const;
    void setCountingMethod(const QString &counting_method);
    bool is_counting_method_Set() const;
    bool is_counting_method_Valid() const;

    QList<OAIFloodlightActivityDynamicTag> getDefaultTags() const;
    void setDefaultTags(const QList<OAIFloodlightActivityDynamicTag> &default_tags);
    bool is_default_tags_Set() const;
    bool is_default_tags_Valid() const;

    QString getExpectedUrl() const;
    void setExpectedUrl(const QString &expected_url);
    bool is_expected_url_Set() const;
    bool is_expected_url_Valid() const;

    QString getFloodlightActivityGroupId() const;
    void setFloodlightActivityGroupId(const QString &floodlight_activity_group_id);
    bool is_floodlight_activity_group_id_Set() const;
    bool is_floodlight_activity_group_id_Valid() const;

    QString getFloodlightActivityGroupName() const;
    void setFloodlightActivityGroupName(const QString &floodlight_activity_group_name);
    bool is_floodlight_activity_group_name_Set() const;
    bool is_floodlight_activity_group_name_Valid() const;

    QString getFloodlightActivityGroupTagString() const;
    void setFloodlightActivityGroupTagString(const QString &floodlight_activity_group_tag_string);
    bool is_floodlight_activity_group_tag_string_Set() const;
    bool is_floodlight_activity_group_tag_string_Valid() const;

    QString getFloodlightActivityGroupType() const;
    void setFloodlightActivityGroupType(const QString &floodlight_activity_group_type);
    bool is_floodlight_activity_group_type_Set() const;
    bool is_floodlight_activity_group_type_Valid() const;

    QString getFloodlightConfigurationId() const;
    void setFloodlightConfigurationId(const QString &floodlight_configuration_id);
    bool is_floodlight_configuration_id_Set() const;
    bool is_floodlight_configuration_id_Valid() const;

    OAIDimensionValue getFloodlightConfigurationIdDimensionValue() const;
    void setFloodlightConfigurationIdDimensionValue(const OAIDimensionValue &floodlight_configuration_id_dimension_value);
    bool is_floodlight_configuration_id_dimension_value_Set() const;
    bool is_floodlight_configuration_id_dimension_value_Valid() const;

    QString getFloodlightTagType() const;
    void setFloodlightTagType(const QString &floodlight_tag_type);
    bool is_floodlight_tag_type_Set() const;
    bool is_floodlight_tag_type_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAIDimensionValue getIdDimensionValue() const;
    void setIdDimensionValue(const OAIDimensionValue &id_dimension_value);
    bool is_id_dimension_value_Set() const;
    bool is_id_dimension_value_Valid() const;

    QString getKind() const;
    void setKind(const QString &kind);
    bool is_kind_Set() const;
    bool is_kind_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getNotes() const;
    void setNotes(const QString &notes);
    bool is_notes_Set() const;
    bool is_notes_Valid() const;

    QList<OAIFloodlightActivityPublisherDynamicTag> getPublisherTags() const;
    void setPublisherTags(const QList<OAIFloodlightActivityPublisherDynamicTag> &publisher_tags);
    bool is_publisher_tags_Set() const;
    bool is_publisher_tags_Valid() const;

    bool isSecure() const;
    void setSecure(const bool &secure);
    bool is_secure_Set() const;
    bool is_secure_Valid() const;

    bool isSslCompliant() const;
    void setSslCompliant(const bool &ssl_compliant);
    bool is_ssl_compliant_Set() const;
    bool is_ssl_compliant_Valid() const;

    bool isSslRequired() const;
    void setSslRequired(const bool &ssl_required);
    bool is_ssl_required_Set() const;
    bool is_ssl_required_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getSubaccountId() const;
    void setSubaccountId(const QString &subaccount_id);
    bool is_subaccount_id_Set() const;
    bool is_subaccount_id_Valid() const;

    QString getTagFormat() const;
    void setTagFormat(const QString &tag_format);
    bool is_tag_format_Set() const;
    bool is_tag_format_Valid() const;

    QString getTagString() const;
    void setTagString(const QString &tag_string);
    bool is_tag_string_Set() const;
    bool is_tag_string_Valid() const;

    QList<QString> getUserDefinedVariableTypes() const;
    void setUserDefinedVariableTypes(const QList<QString> &user_defined_variable_types);
    bool is_user_defined_variable_types_Set() const;
    bool is_user_defined_variable_types_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account_id;
    bool m_account_id_isSet;
    bool m_account_id_isValid;

    QString m_advertiser_id;
    bool m_advertiser_id_isSet;
    bool m_advertiser_id_isValid;

    OAIDimensionValue m_advertiser_id_dimension_value;
    bool m_advertiser_id_dimension_value_isSet;
    bool m_advertiser_id_dimension_value_isValid;

    bool m_attribution_enabled;
    bool m_attribution_enabled_isSet;
    bool m_attribution_enabled_isValid;

    QString m_cache_busting_type;
    bool m_cache_busting_type_isSet;
    bool m_cache_busting_type_isValid;

    QString m_counting_method;
    bool m_counting_method_isSet;
    bool m_counting_method_isValid;

    QList<OAIFloodlightActivityDynamicTag> m_default_tags;
    bool m_default_tags_isSet;
    bool m_default_tags_isValid;

    QString m_expected_url;
    bool m_expected_url_isSet;
    bool m_expected_url_isValid;

    QString m_floodlight_activity_group_id;
    bool m_floodlight_activity_group_id_isSet;
    bool m_floodlight_activity_group_id_isValid;

    QString m_floodlight_activity_group_name;
    bool m_floodlight_activity_group_name_isSet;
    bool m_floodlight_activity_group_name_isValid;

    QString m_floodlight_activity_group_tag_string;
    bool m_floodlight_activity_group_tag_string_isSet;
    bool m_floodlight_activity_group_tag_string_isValid;

    QString m_floodlight_activity_group_type;
    bool m_floodlight_activity_group_type_isSet;
    bool m_floodlight_activity_group_type_isValid;

    QString m_floodlight_configuration_id;
    bool m_floodlight_configuration_id_isSet;
    bool m_floodlight_configuration_id_isValid;

    OAIDimensionValue m_floodlight_configuration_id_dimension_value;
    bool m_floodlight_configuration_id_dimension_value_isSet;
    bool m_floodlight_configuration_id_dimension_value_isValid;

    QString m_floodlight_tag_type;
    bool m_floodlight_tag_type_isSet;
    bool m_floodlight_tag_type_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAIDimensionValue m_id_dimension_value;
    bool m_id_dimension_value_isSet;
    bool m_id_dimension_value_isValid;

    QString m_kind;
    bool m_kind_isSet;
    bool m_kind_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_notes;
    bool m_notes_isSet;
    bool m_notes_isValid;

    QList<OAIFloodlightActivityPublisherDynamicTag> m_publisher_tags;
    bool m_publisher_tags_isSet;
    bool m_publisher_tags_isValid;

    bool m_secure;
    bool m_secure_isSet;
    bool m_secure_isValid;

    bool m_ssl_compliant;
    bool m_ssl_compliant_isSet;
    bool m_ssl_compliant_isValid;

    bool m_ssl_required;
    bool m_ssl_required_isSet;
    bool m_ssl_required_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_subaccount_id;
    bool m_subaccount_id_isSet;
    bool m_subaccount_id_isValid;

    QString m_tag_format;
    bool m_tag_format_isSet;
    bool m_tag_format_isValid;

    QString m_tag_string;
    bool m_tag_string_isSet;
    bool m_tag_string_isValid;

    QList<QString> m_user_defined_variable_types;
    bool m_user_defined_variable_types_isSet;
    bool m_user_defined_variable_types_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFloodlightActivity)

#endif // OAIFloodlightActivity_H
