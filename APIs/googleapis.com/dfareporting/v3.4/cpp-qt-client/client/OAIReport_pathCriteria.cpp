/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReport_pathCriteria.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReport_pathCriteria::OAIReport_pathCriteria(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReport_pathCriteria::OAIReport_pathCriteria() {
    this->initializeModel();
}

OAIReport_pathCriteria::~OAIReport_pathCriteria() {}

void OAIReport_pathCriteria::initializeModel() {

    m_activity_filters_isSet = false;
    m_activity_filters_isValid = false;

    m_custom_channel_grouping_isSet = false;
    m_custom_channel_grouping_isValid = false;

    m_date_range_isSet = false;
    m_date_range_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_floodlight_config_id_isSet = false;
    m_floodlight_config_id_isValid = false;

    m_metric_names_isSet = false;
    m_metric_names_isValid = false;

    m_path_filters_isSet = false;
    m_path_filters_isValid = false;
}

void OAIReport_pathCriteria::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReport_pathCriteria::fromJsonObject(QJsonObject json) {

    m_activity_filters_isValid = ::OpenAPI::fromJsonValue(m_activity_filters, json[QString("activityFilters")]);
    m_activity_filters_isSet = !json[QString("activityFilters")].isNull() && m_activity_filters_isValid;

    m_custom_channel_grouping_isValid = ::OpenAPI::fromJsonValue(m_custom_channel_grouping, json[QString("customChannelGrouping")]);
    m_custom_channel_grouping_isSet = !json[QString("customChannelGrouping")].isNull() && m_custom_channel_grouping_isValid;

    m_date_range_isValid = ::OpenAPI::fromJsonValue(m_date_range, json[QString("dateRange")]);
    m_date_range_isSet = !json[QString("dateRange")].isNull() && m_date_range_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_floodlight_config_id_isValid = ::OpenAPI::fromJsonValue(m_floodlight_config_id, json[QString("floodlightConfigId")]);
    m_floodlight_config_id_isSet = !json[QString("floodlightConfigId")].isNull() && m_floodlight_config_id_isValid;

    m_metric_names_isValid = ::OpenAPI::fromJsonValue(m_metric_names, json[QString("metricNames")]);
    m_metric_names_isSet = !json[QString("metricNames")].isNull() && m_metric_names_isValid;

    m_path_filters_isValid = ::OpenAPI::fromJsonValue(m_path_filters, json[QString("pathFilters")]);
    m_path_filters_isSet = !json[QString("pathFilters")].isNull() && m_path_filters_isValid;
}

QString OAIReport_pathCriteria::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReport_pathCriteria::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_filters.size() > 0) {
        obj.insert(QString("activityFilters"), ::OpenAPI::toJsonValue(m_activity_filters));
    }
    if (m_custom_channel_grouping.isSet()) {
        obj.insert(QString("customChannelGrouping"), ::OpenAPI::toJsonValue(m_custom_channel_grouping));
    }
    if (m_date_range.isSet()) {
        obj.insert(QString("dateRange"), ::OpenAPI::toJsonValue(m_date_range));
    }
    if (m_dimensions.size() > 0) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_floodlight_config_id.isSet()) {
        obj.insert(QString("floodlightConfigId"), ::OpenAPI::toJsonValue(m_floodlight_config_id));
    }
    if (m_metric_names.size() > 0) {
        obj.insert(QString("metricNames"), ::OpenAPI::toJsonValue(m_metric_names));
    }
    if (m_path_filters.size() > 0) {
        obj.insert(QString("pathFilters"), ::OpenAPI::toJsonValue(m_path_filters));
    }
    return obj;
}

QList<OAIDimensionValue> OAIReport_pathCriteria::getActivityFilters() const {
    return m_activity_filters;
}
void OAIReport_pathCriteria::setActivityFilters(const QList<OAIDimensionValue> &activity_filters) {
    m_activity_filters = activity_filters;
    m_activity_filters_isSet = true;
}

bool OAIReport_pathCriteria::is_activity_filters_Set() const{
    return m_activity_filters_isSet;
}

bool OAIReport_pathCriteria::is_activity_filters_Valid() const{
    return m_activity_filters_isValid;
}

OAIChannelGrouping OAIReport_pathCriteria::getCustomChannelGrouping() const {
    return m_custom_channel_grouping;
}
void OAIReport_pathCriteria::setCustomChannelGrouping(const OAIChannelGrouping &custom_channel_grouping) {
    m_custom_channel_grouping = custom_channel_grouping;
    m_custom_channel_grouping_isSet = true;
}

bool OAIReport_pathCriteria::is_custom_channel_grouping_Set() const{
    return m_custom_channel_grouping_isSet;
}

bool OAIReport_pathCriteria::is_custom_channel_grouping_Valid() const{
    return m_custom_channel_grouping_isValid;
}

OAIDateRange OAIReport_pathCriteria::getDateRange() const {
    return m_date_range;
}
void OAIReport_pathCriteria::setDateRange(const OAIDateRange &date_range) {
    m_date_range = date_range;
    m_date_range_isSet = true;
}

bool OAIReport_pathCriteria::is_date_range_Set() const{
    return m_date_range_isSet;
}

bool OAIReport_pathCriteria::is_date_range_Valid() const{
    return m_date_range_isValid;
}

QList<OAISortedDimension> OAIReport_pathCriteria::getDimensions() const {
    return m_dimensions;
}
void OAIReport_pathCriteria::setDimensions(const QList<OAISortedDimension> &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIReport_pathCriteria::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIReport_pathCriteria::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

OAIDimensionValue OAIReport_pathCriteria::getFloodlightConfigId() const {
    return m_floodlight_config_id;
}
void OAIReport_pathCriteria::setFloodlightConfigId(const OAIDimensionValue &floodlight_config_id) {
    m_floodlight_config_id = floodlight_config_id;
    m_floodlight_config_id_isSet = true;
}

bool OAIReport_pathCriteria::is_floodlight_config_id_Set() const{
    return m_floodlight_config_id_isSet;
}

bool OAIReport_pathCriteria::is_floodlight_config_id_Valid() const{
    return m_floodlight_config_id_isValid;
}

QList<QString> OAIReport_pathCriteria::getMetricNames() const {
    return m_metric_names;
}
void OAIReport_pathCriteria::setMetricNames(const QList<QString> &metric_names) {
    m_metric_names = metric_names;
    m_metric_names_isSet = true;
}

bool OAIReport_pathCriteria::is_metric_names_Set() const{
    return m_metric_names_isSet;
}

bool OAIReport_pathCriteria::is_metric_names_Valid() const{
    return m_metric_names_isValid;
}

QList<OAIPathFilter> OAIReport_pathCriteria::getPathFilters() const {
    return m_path_filters;
}
void OAIReport_pathCriteria::setPathFilters(const QList<OAIPathFilter> &path_filters) {
    m_path_filters = path_filters;
    m_path_filters_isSet = true;
}

bool OAIReport_pathCriteria::is_path_filters_Set() const{
    return m_path_filters_isSet;
}

bool OAIReport_pathCriteria::is_path_filters_Valid() const{
    return m_path_filters_isValid;
}

bool OAIReport_pathCriteria::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_channel_grouping.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_floodlight_config_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReport_pathCriteria::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
