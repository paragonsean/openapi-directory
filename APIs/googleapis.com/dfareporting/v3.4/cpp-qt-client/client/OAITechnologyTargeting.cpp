/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITechnologyTargeting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITechnologyTargeting::OAITechnologyTargeting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITechnologyTargeting::OAITechnologyTargeting() {
    this->initializeModel();
}

OAITechnologyTargeting::~OAITechnologyTargeting() {}

void OAITechnologyTargeting::initializeModel() {

    m_browsers_isSet = false;
    m_browsers_isValid = false;

    m_connection_types_isSet = false;
    m_connection_types_isValid = false;

    m_mobile_carriers_isSet = false;
    m_mobile_carriers_isValid = false;

    m_operating_system_versions_isSet = false;
    m_operating_system_versions_isValid = false;

    m_operating_systems_isSet = false;
    m_operating_systems_isValid = false;

    m_platform_types_isSet = false;
    m_platform_types_isValid = false;
}

void OAITechnologyTargeting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITechnologyTargeting::fromJsonObject(QJsonObject json) {

    m_browsers_isValid = ::OpenAPI::fromJsonValue(m_browsers, json[QString("browsers")]);
    m_browsers_isSet = !json[QString("browsers")].isNull() && m_browsers_isValid;

    m_connection_types_isValid = ::OpenAPI::fromJsonValue(m_connection_types, json[QString("connectionTypes")]);
    m_connection_types_isSet = !json[QString("connectionTypes")].isNull() && m_connection_types_isValid;

    m_mobile_carriers_isValid = ::OpenAPI::fromJsonValue(m_mobile_carriers, json[QString("mobileCarriers")]);
    m_mobile_carriers_isSet = !json[QString("mobileCarriers")].isNull() && m_mobile_carriers_isValid;

    m_operating_system_versions_isValid = ::OpenAPI::fromJsonValue(m_operating_system_versions, json[QString("operatingSystemVersions")]);
    m_operating_system_versions_isSet = !json[QString("operatingSystemVersions")].isNull() && m_operating_system_versions_isValid;

    m_operating_systems_isValid = ::OpenAPI::fromJsonValue(m_operating_systems, json[QString("operatingSystems")]);
    m_operating_systems_isSet = !json[QString("operatingSystems")].isNull() && m_operating_systems_isValid;

    m_platform_types_isValid = ::OpenAPI::fromJsonValue(m_platform_types, json[QString("platformTypes")]);
    m_platform_types_isSet = !json[QString("platformTypes")].isNull() && m_platform_types_isValid;
}

QString OAITechnologyTargeting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITechnologyTargeting::asJsonObject() const {
    QJsonObject obj;
    if (m_browsers.size() > 0) {
        obj.insert(QString("browsers"), ::OpenAPI::toJsonValue(m_browsers));
    }
    if (m_connection_types.size() > 0) {
        obj.insert(QString("connectionTypes"), ::OpenAPI::toJsonValue(m_connection_types));
    }
    if (m_mobile_carriers.size() > 0) {
        obj.insert(QString("mobileCarriers"), ::OpenAPI::toJsonValue(m_mobile_carriers));
    }
    if (m_operating_system_versions.size() > 0) {
        obj.insert(QString("operatingSystemVersions"), ::OpenAPI::toJsonValue(m_operating_system_versions));
    }
    if (m_operating_systems.size() > 0) {
        obj.insert(QString("operatingSystems"), ::OpenAPI::toJsonValue(m_operating_systems));
    }
    if (m_platform_types.size() > 0) {
        obj.insert(QString("platformTypes"), ::OpenAPI::toJsonValue(m_platform_types));
    }
    return obj;
}

QList<OAIBrowser> OAITechnologyTargeting::getBrowsers() const {
    return m_browsers;
}
void OAITechnologyTargeting::setBrowsers(const QList<OAIBrowser> &browsers) {
    m_browsers = browsers;
    m_browsers_isSet = true;
}

bool OAITechnologyTargeting::is_browsers_Set() const{
    return m_browsers_isSet;
}

bool OAITechnologyTargeting::is_browsers_Valid() const{
    return m_browsers_isValid;
}

QList<OAIConnectionType> OAITechnologyTargeting::getConnectionTypes() const {
    return m_connection_types;
}
void OAITechnologyTargeting::setConnectionTypes(const QList<OAIConnectionType> &connection_types) {
    m_connection_types = connection_types;
    m_connection_types_isSet = true;
}

bool OAITechnologyTargeting::is_connection_types_Set() const{
    return m_connection_types_isSet;
}

bool OAITechnologyTargeting::is_connection_types_Valid() const{
    return m_connection_types_isValid;
}

QList<OAIMobileCarrier> OAITechnologyTargeting::getMobileCarriers() const {
    return m_mobile_carriers;
}
void OAITechnologyTargeting::setMobileCarriers(const QList<OAIMobileCarrier> &mobile_carriers) {
    m_mobile_carriers = mobile_carriers;
    m_mobile_carriers_isSet = true;
}

bool OAITechnologyTargeting::is_mobile_carriers_Set() const{
    return m_mobile_carriers_isSet;
}

bool OAITechnologyTargeting::is_mobile_carriers_Valid() const{
    return m_mobile_carriers_isValid;
}

QList<OAIOperatingSystemVersion> OAITechnologyTargeting::getOperatingSystemVersions() const {
    return m_operating_system_versions;
}
void OAITechnologyTargeting::setOperatingSystemVersions(const QList<OAIOperatingSystemVersion> &operating_system_versions) {
    m_operating_system_versions = operating_system_versions;
    m_operating_system_versions_isSet = true;
}

bool OAITechnologyTargeting::is_operating_system_versions_Set() const{
    return m_operating_system_versions_isSet;
}

bool OAITechnologyTargeting::is_operating_system_versions_Valid() const{
    return m_operating_system_versions_isValid;
}

QList<OAIOperatingSystem> OAITechnologyTargeting::getOperatingSystems() const {
    return m_operating_systems;
}
void OAITechnologyTargeting::setOperatingSystems(const QList<OAIOperatingSystem> &operating_systems) {
    m_operating_systems = operating_systems;
    m_operating_systems_isSet = true;
}

bool OAITechnologyTargeting::is_operating_systems_Set() const{
    return m_operating_systems_isSet;
}

bool OAITechnologyTargeting::is_operating_systems_Valid() const{
    return m_operating_systems_isValid;
}

QList<OAIPlatformType> OAITechnologyTargeting::getPlatformTypes() const {
    return m_platform_types;
}
void OAITechnologyTargeting::setPlatformTypes(const QList<OAIPlatformType> &platform_types) {
    m_platform_types = platform_types;
    m_platform_types_isSet = true;
}

bool OAITechnologyTargeting::is_platform_types_Set() const{
    return m_platform_types_isSet;
}

bool OAITechnologyTargeting::is_platform_types_Valid() const{
    return m_platform_types_isValid;
}

bool OAITechnologyTargeting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_browsers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_carriers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating_system_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating_systems.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITechnologyTargeting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
