/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccount::OAIAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccount::OAIAccount() {
    this->initializeModel();
}

OAIAccount::~OAIAccount() {}

void OAIAccount::initializeModel() {

    m_account_permission_ids_isSet = false;
    m_account_permission_ids_isValid = false;

    m_account_profile_isSet = false;
    m_account_profile_isValid = false;

    m_active_isSet = false;
    m_active_isValid = false;

    m_active_ads_limit_tier_isSet = false;
    m_active_ads_limit_tier_isValid = false;

    m_active_view_opt_out_isSet = false;
    m_active_view_opt_out_isValid = false;

    m_available_permission_ids_isSet = false;
    m_available_permission_ids_isValid = false;

    m_country_id_isSet = false;
    m_country_id_isValid = false;

    m_currency_id_isSet = false;
    m_currency_id_isValid = false;

    m_default_creative_size_id_isSet = false;
    m_default_creative_size_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_maximum_image_size_isSet = false;
    m_maximum_image_size_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_nielsen_ocr_enabled_isSet = false;
    m_nielsen_ocr_enabled_isValid = false;

    m_reports_configuration_isSet = false;
    m_reports_configuration_isValid = false;

    m_share_reports_with_twitter_isSet = false;
    m_share_reports_with_twitter_isValid = false;

    m_teaser_size_limit_isSet = false;
    m_teaser_size_limit_isValid = false;
}

void OAIAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccount::fromJsonObject(QJsonObject json) {

    m_account_permission_ids_isValid = ::OpenAPI::fromJsonValue(m_account_permission_ids, json[QString("accountPermissionIds")]);
    m_account_permission_ids_isSet = !json[QString("accountPermissionIds")].isNull() && m_account_permission_ids_isValid;

    m_account_profile_isValid = ::OpenAPI::fromJsonValue(m_account_profile, json[QString("accountProfile")]);
    m_account_profile_isSet = !json[QString("accountProfile")].isNull() && m_account_profile_isValid;

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_active_ads_limit_tier_isValid = ::OpenAPI::fromJsonValue(m_active_ads_limit_tier, json[QString("activeAdsLimitTier")]);
    m_active_ads_limit_tier_isSet = !json[QString("activeAdsLimitTier")].isNull() && m_active_ads_limit_tier_isValid;

    m_active_view_opt_out_isValid = ::OpenAPI::fromJsonValue(m_active_view_opt_out, json[QString("activeViewOptOut")]);
    m_active_view_opt_out_isSet = !json[QString("activeViewOptOut")].isNull() && m_active_view_opt_out_isValid;

    m_available_permission_ids_isValid = ::OpenAPI::fromJsonValue(m_available_permission_ids, json[QString("availablePermissionIds")]);
    m_available_permission_ids_isSet = !json[QString("availablePermissionIds")].isNull() && m_available_permission_ids_isValid;

    m_country_id_isValid = ::OpenAPI::fromJsonValue(m_country_id, json[QString("countryId")]);
    m_country_id_isSet = !json[QString("countryId")].isNull() && m_country_id_isValid;

    m_currency_id_isValid = ::OpenAPI::fromJsonValue(m_currency_id, json[QString("currencyId")]);
    m_currency_id_isSet = !json[QString("currencyId")].isNull() && m_currency_id_isValid;

    m_default_creative_size_id_isValid = ::OpenAPI::fromJsonValue(m_default_creative_size_id, json[QString("defaultCreativeSizeId")]);
    m_default_creative_size_id_isSet = !json[QString("defaultCreativeSizeId")].isNull() && m_default_creative_size_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_maximum_image_size_isValid = ::OpenAPI::fromJsonValue(m_maximum_image_size, json[QString("maximumImageSize")]);
    m_maximum_image_size_isSet = !json[QString("maximumImageSize")].isNull() && m_maximum_image_size_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_nielsen_ocr_enabled_isValid = ::OpenAPI::fromJsonValue(m_nielsen_ocr_enabled, json[QString("nielsenOcrEnabled")]);
    m_nielsen_ocr_enabled_isSet = !json[QString("nielsenOcrEnabled")].isNull() && m_nielsen_ocr_enabled_isValid;

    m_reports_configuration_isValid = ::OpenAPI::fromJsonValue(m_reports_configuration, json[QString("reportsConfiguration")]);
    m_reports_configuration_isSet = !json[QString("reportsConfiguration")].isNull() && m_reports_configuration_isValid;

    m_share_reports_with_twitter_isValid = ::OpenAPI::fromJsonValue(m_share_reports_with_twitter, json[QString("shareReportsWithTwitter")]);
    m_share_reports_with_twitter_isSet = !json[QString("shareReportsWithTwitter")].isNull() && m_share_reports_with_twitter_isValid;

    m_teaser_size_limit_isValid = ::OpenAPI::fromJsonValue(m_teaser_size_limit, json[QString("teaserSizeLimit")]);
    m_teaser_size_limit_isSet = !json[QString("teaserSizeLimit")].isNull() && m_teaser_size_limit_isValid;
}

QString OAIAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_account_permission_ids.size() > 0) {
        obj.insert(QString("accountPermissionIds"), ::OpenAPI::toJsonValue(m_account_permission_ids));
    }
    if (m_account_profile_isSet) {
        obj.insert(QString("accountProfile"), ::OpenAPI::toJsonValue(m_account_profile));
    }
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_active_ads_limit_tier_isSet) {
        obj.insert(QString("activeAdsLimitTier"), ::OpenAPI::toJsonValue(m_active_ads_limit_tier));
    }
    if (m_active_view_opt_out_isSet) {
        obj.insert(QString("activeViewOptOut"), ::OpenAPI::toJsonValue(m_active_view_opt_out));
    }
    if (m_available_permission_ids.size() > 0) {
        obj.insert(QString("availablePermissionIds"), ::OpenAPI::toJsonValue(m_available_permission_ids));
    }
    if (m_country_id_isSet) {
        obj.insert(QString("countryId"), ::OpenAPI::toJsonValue(m_country_id));
    }
    if (m_currency_id_isSet) {
        obj.insert(QString("currencyId"), ::OpenAPI::toJsonValue(m_currency_id));
    }
    if (m_default_creative_size_id_isSet) {
        obj.insert(QString("defaultCreativeSizeId"), ::OpenAPI::toJsonValue(m_default_creative_size_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_maximum_image_size_isSet) {
        obj.insert(QString("maximumImageSize"), ::OpenAPI::toJsonValue(m_maximum_image_size));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_nielsen_ocr_enabled_isSet) {
        obj.insert(QString("nielsenOcrEnabled"), ::OpenAPI::toJsonValue(m_nielsen_ocr_enabled));
    }
    if (m_reports_configuration.isSet()) {
        obj.insert(QString("reportsConfiguration"), ::OpenAPI::toJsonValue(m_reports_configuration));
    }
    if (m_share_reports_with_twitter_isSet) {
        obj.insert(QString("shareReportsWithTwitter"), ::OpenAPI::toJsonValue(m_share_reports_with_twitter));
    }
    if (m_teaser_size_limit_isSet) {
        obj.insert(QString("teaserSizeLimit"), ::OpenAPI::toJsonValue(m_teaser_size_limit));
    }
    return obj;
}

QList<QString> OAIAccount::getAccountPermissionIds() const {
    return m_account_permission_ids;
}
void OAIAccount::setAccountPermissionIds(const QList<QString> &account_permission_ids) {
    m_account_permission_ids = account_permission_ids;
    m_account_permission_ids_isSet = true;
}

bool OAIAccount::is_account_permission_ids_Set() const{
    return m_account_permission_ids_isSet;
}

bool OAIAccount::is_account_permission_ids_Valid() const{
    return m_account_permission_ids_isValid;
}

QString OAIAccount::getAccountProfile() const {
    return m_account_profile;
}
void OAIAccount::setAccountProfile(const QString &account_profile) {
    m_account_profile = account_profile;
    m_account_profile_isSet = true;
}

bool OAIAccount::is_account_profile_Set() const{
    return m_account_profile_isSet;
}

bool OAIAccount::is_account_profile_Valid() const{
    return m_account_profile_isValid;
}

bool OAIAccount::isActive() const {
    return m_active;
}
void OAIAccount::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIAccount::is_active_Set() const{
    return m_active_isSet;
}

bool OAIAccount::is_active_Valid() const{
    return m_active_isValid;
}

QString OAIAccount::getActiveAdsLimitTier() const {
    return m_active_ads_limit_tier;
}
void OAIAccount::setActiveAdsLimitTier(const QString &active_ads_limit_tier) {
    m_active_ads_limit_tier = active_ads_limit_tier;
    m_active_ads_limit_tier_isSet = true;
}

bool OAIAccount::is_active_ads_limit_tier_Set() const{
    return m_active_ads_limit_tier_isSet;
}

bool OAIAccount::is_active_ads_limit_tier_Valid() const{
    return m_active_ads_limit_tier_isValid;
}

bool OAIAccount::isActiveViewOptOut() const {
    return m_active_view_opt_out;
}
void OAIAccount::setActiveViewOptOut(const bool &active_view_opt_out) {
    m_active_view_opt_out = active_view_opt_out;
    m_active_view_opt_out_isSet = true;
}

bool OAIAccount::is_active_view_opt_out_Set() const{
    return m_active_view_opt_out_isSet;
}

bool OAIAccount::is_active_view_opt_out_Valid() const{
    return m_active_view_opt_out_isValid;
}

QList<QString> OAIAccount::getAvailablePermissionIds() const {
    return m_available_permission_ids;
}
void OAIAccount::setAvailablePermissionIds(const QList<QString> &available_permission_ids) {
    m_available_permission_ids = available_permission_ids;
    m_available_permission_ids_isSet = true;
}

bool OAIAccount::is_available_permission_ids_Set() const{
    return m_available_permission_ids_isSet;
}

bool OAIAccount::is_available_permission_ids_Valid() const{
    return m_available_permission_ids_isValid;
}

QString OAIAccount::getCountryId() const {
    return m_country_id;
}
void OAIAccount::setCountryId(const QString &country_id) {
    m_country_id = country_id;
    m_country_id_isSet = true;
}

bool OAIAccount::is_country_id_Set() const{
    return m_country_id_isSet;
}

bool OAIAccount::is_country_id_Valid() const{
    return m_country_id_isValid;
}

QString OAIAccount::getCurrencyId() const {
    return m_currency_id;
}
void OAIAccount::setCurrencyId(const QString &currency_id) {
    m_currency_id = currency_id;
    m_currency_id_isSet = true;
}

bool OAIAccount::is_currency_id_Set() const{
    return m_currency_id_isSet;
}

bool OAIAccount::is_currency_id_Valid() const{
    return m_currency_id_isValid;
}

QString OAIAccount::getDefaultCreativeSizeId() const {
    return m_default_creative_size_id;
}
void OAIAccount::setDefaultCreativeSizeId(const QString &default_creative_size_id) {
    m_default_creative_size_id = default_creative_size_id;
    m_default_creative_size_id_isSet = true;
}

bool OAIAccount::is_default_creative_size_id_Set() const{
    return m_default_creative_size_id_isSet;
}

bool OAIAccount::is_default_creative_size_id_Valid() const{
    return m_default_creative_size_id_isValid;
}

QString OAIAccount::getDescription() const {
    return m_description;
}
void OAIAccount::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAccount::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAccount::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAccount::getId() const {
    return m_id;
}
void OAIAccount::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAccount::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAccount::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAccount::getKind() const {
    return m_kind;
}
void OAIAccount::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIAccount::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIAccount::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIAccount::getLocale() const {
    return m_locale;
}
void OAIAccount::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIAccount::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIAccount::is_locale_Valid() const{
    return m_locale_isValid;
}

QString OAIAccount::getMaximumImageSize() const {
    return m_maximum_image_size;
}
void OAIAccount::setMaximumImageSize(const QString &maximum_image_size) {
    m_maximum_image_size = maximum_image_size;
    m_maximum_image_size_isSet = true;
}

bool OAIAccount::is_maximum_image_size_Set() const{
    return m_maximum_image_size_isSet;
}

bool OAIAccount::is_maximum_image_size_Valid() const{
    return m_maximum_image_size_isValid;
}

QString OAIAccount::getName() const {
    return m_name;
}
void OAIAccount::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAccount::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAccount::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIAccount::isNielsenOcrEnabled() const {
    return m_nielsen_ocr_enabled;
}
void OAIAccount::setNielsenOcrEnabled(const bool &nielsen_ocr_enabled) {
    m_nielsen_ocr_enabled = nielsen_ocr_enabled;
    m_nielsen_ocr_enabled_isSet = true;
}

bool OAIAccount::is_nielsen_ocr_enabled_Set() const{
    return m_nielsen_ocr_enabled_isSet;
}

bool OAIAccount::is_nielsen_ocr_enabled_Valid() const{
    return m_nielsen_ocr_enabled_isValid;
}

OAIReportsConfiguration OAIAccount::getReportsConfiguration() const {
    return m_reports_configuration;
}
void OAIAccount::setReportsConfiguration(const OAIReportsConfiguration &reports_configuration) {
    m_reports_configuration = reports_configuration;
    m_reports_configuration_isSet = true;
}

bool OAIAccount::is_reports_configuration_Set() const{
    return m_reports_configuration_isSet;
}

bool OAIAccount::is_reports_configuration_Valid() const{
    return m_reports_configuration_isValid;
}

bool OAIAccount::isShareReportsWithTwitter() const {
    return m_share_reports_with_twitter;
}
void OAIAccount::setShareReportsWithTwitter(const bool &share_reports_with_twitter) {
    m_share_reports_with_twitter = share_reports_with_twitter;
    m_share_reports_with_twitter_isSet = true;
}

bool OAIAccount::is_share_reports_with_twitter_Set() const{
    return m_share_reports_with_twitter_isSet;
}

bool OAIAccount::is_share_reports_with_twitter_Valid() const{
    return m_share_reports_with_twitter_isValid;
}

QString OAIAccount::getTeaserSizeLimit() const {
    return m_teaser_size_limit;
}
void OAIAccount::setTeaserSizeLimit(const QString &teaser_size_limit) {
    m_teaser_size_limit = teaser_size_limit;
    m_teaser_size_limit_isSet = true;
}

bool OAIAccount::is_teaser_size_limit_Set() const{
    return m_teaser_size_limit_isSet;
}

bool OAIAccount::is_teaser_size_limit_Valid() const{
    return m_teaser_size_limit_isValid;
}

bool OAIAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_permission_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_profile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_ads_limit_tier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_view_opt_out_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_permission_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_creative_size_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_image_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nielsen_ocr_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reports_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_reports_with_twitter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teaser_size_limit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
