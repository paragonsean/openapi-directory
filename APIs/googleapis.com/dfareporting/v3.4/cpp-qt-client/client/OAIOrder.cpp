/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrder::OAIOrder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrder::OAIOrder() {
    this->initializeModel();
}

OAIOrder::~OAIOrder() {}

void OAIOrder::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_advertiser_id_isSet = false;
    m_advertiser_id_isValid = false;

    m_approver_user_profile_ids_isSet = false;
    m_approver_user_profile_ids_isValid = false;

    m_buyer_invoice_id_isSet = false;
    m_buyer_invoice_id_isValid = false;

    m_buyer_organization_name_isSet = false;
    m_buyer_organization_name_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_contacts_isSet = false;
    m_contacts_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_last_modified_info_isSet = false;
    m_last_modified_info_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_planning_term_id_isSet = false;
    m_planning_term_id_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_seller_order_id_isSet = false;
    m_seller_order_id_isValid = false;

    m_seller_organization_name_isSet = false;
    m_seller_organization_name_isValid = false;

    m_site_id_isSet = false;
    m_site_id_isValid = false;

    m_site_names_isSet = false;
    m_site_names_isValid = false;

    m_subaccount_id_isSet = false;
    m_subaccount_id_isValid = false;

    m_terms_and_conditions_isSet = false;
    m_terms_and_conditions_isValid = false;
}

void OAIOrder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrder::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_advertiser_id_isValid = ::OpenAPI::fromJsonValue(m_advertiser_id, json[QString("advertiserId")]);
    m_advertiser_id_isSet = !json[QString("advertiserId")].isNull() && m_advertiser_id_isValid;

    m_approver_user_profile_ids_isValid = ::OpenAPI::fromJsonValue(m_approver_user_profile_ids, json[QString("approverUserProfileIds")]);
    m_approver_user_profile_ids_isSet = !json[QString("approverUserProfileIds")].isNull() && m_approver_user_profile_ids_isValid;

    m_buyer_invoice_id_isValid = ::OpenAPI::fromJsonValue(m_buyer_invoice_id, json[QString("buyerInvoiceId")]);
    m_buyer_invoice_id_isSet = !json[QString("buyerInvoiceId")].isNull() && m_buyer_invoice_id_isValid;

    m_buyer_organization_name_isValid = ::OpenAPI::fromJsonValue(m_buyer_organization_name, json[QString("buyerOrganizationName")]);
    m_buyer_organization_name_isSet = !json[QString("buyerOrganizationName")].isNull() && m_buyer_organization_name_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_contacts_isValid = ::OpenAPI::fromJsonValue(m_contacts, json[QString("contacts")]);
    m_contacts_isSet = !json[QString("contacts")].isNull() && m_contacts_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_last_modified_info_isValid = ::OpenAPI::fromJsonValue(m_last_modified_info, json[QString("lastModifiedInfo")]);
    m_last_modified_info_isSet = !json[QString("lastModifiedInfo")].isNull() && m_last_modified_info_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_planning_term_id_isValid = ::OpenAPI::fromJsonValue(m_planning_term_id, json[QString("planningTermId")]);
    m_planning_term_id_isSet = !json[QString("planningTermId")].isNull() && m_planning_term_id_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_seller_order_id_isValid = ::OpenAPI::fromJsonValue(m_seller_order_id, json[QString("sellerOrderId")]);
    m_seller_order_id_isSet = !json[QString("sellerOrderId")].isNull() && m_seller_order_id_isValid;

    m_seller_organization_name_isValid = ::OpenAPI::fromJsonValue(m_seller_organization_name, json[QString("sellerOrganizationName")]);
    m_seller_organization_name_isSet = !json[QString("sellerOrganizationName")].isNull() && m_seller_organization_name_isValid;

    m_site_id_isValid = ::OpenAPI::fromJsonValue(m_site_id, json[QString("siteId")]);
    m_site_id_isSet = !json[QString("siteId")].isNull() && m_site_id_isValid;

    m_site_names_isValid = ::OpenAPI::fromJsonValue(m_site_names, json[QString("siteNames")]);
    m_site_names_isSet = !json[QString("siteNames")].isNull() && m_site_names_isValid;

    m_subaccount_id_isValid = ::OpenAPI::fromJsonValue(m_subaccount_id, json[QString("subaccountId")]);
    m_subaccount_id_isSet = !json[QString("subaccountId")].isNull() && m_subaccount_id_isValid;

    m_terms_and_conditions_isValid = ::OpenAPI::fromJsonValue(m_terms_and_conditions, json[QString("termsAndConditions")]);
    m_terms_and_conditions_isSet = !json[QString("termsAndConditions")].isNull() && m_terms_and_conditions_isValid;
}

QString OAIOrder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrder::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_advertiser_id_isSet) {
        obj.insert(QString("advertiserId"), ::OpenAPI::toJsonValue(m_advertiser_id));
    }
    if (m_approver_user_profile_ids.size() > 0) {
        obj.insert(QString("approverUserProfileIds"), ::OpenAPI::toJsonValue(m_approver_user_profile_ids));
    }
    if (m_buyer_invoice_id_isSet) {
        obj.insert(QString("buyerInvoiceId"), ::OpenAPI::toJsonValue(m_buyer_invoice_id));
    }
    if (m_buyer_organization_name_isSet) {
        obj.insert(QString("buyerOrganizationName"), ::OpenAPI::toJsonValue(m_buyer_organization_name));
    }
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_contacts.size() > 0) {
        obj.insert(QString("contacts"), ::OpenAPI::toJsonValue(m_contacts));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_last_modified_info.isSet()) {
        obj.insert(QString("lastModifiedInfo"), ::OpenAPI::toJsonValue(m_last_modified_info));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_planning_term_id_isSet) {
        obj.insert(QString("planningTermId"), ::OpenAPI::toJsonValue(m_planning_term_id));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_seller_order_id_isSet) {
        obj.insert(QString("sellerOrderId"), ::OpenAPI::toJsonValue(m_seller_order_id));
    }
    if (m_seller_organization_name_isSet) {
        obj.insert(QString("sellerOrganizationName"), ::OpenAPI::toJsonValue(m_seller_organization_name));
    }
    if (m_site_id.size() > 0) {
        obj.insert(QString("siteId"), ::OpenAPI::toJsonValue(m_site_id));
    }
    if (m_site_names.size() > 0) {
        obj.insert(QString("siteNames"), ::OpenAPI::toJsonValue(m_site_names));
    }
    if (m_subaccount_id_isSet) {
        obj.insert(QString("subaccountId"), ::OpenAPI::toJsonValue(m_subaccount_id));
    }
    if (m_terms_and_conditions_isSet) {
        obj.insert(QString("termsAndConditions"), ::OpenAPI::toJsonValue(m_terms_and_conditions));
    }
    return obj;
}

QString OAIOrder::getAccountId() const {
    return m_account_id;
}
void OAIOrder::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIOrder::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIOrder::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIOrder::getAdvertiserId() const {
    return m_advertiser_id;
}
void OAIOrder::setAdvertiserId(const QString &advertiser_id) {
    m_advertiser_id = advertiser_id;
    m_advertiser_id_isSet = true;
}

bool OAIOrder::is_advertiser_id_Set() const{
    return m_advertiser_id_isSet;
}

bool OAIOrder::is_advertiser_id_Valid() const{
    return m_advertiser_id_isValid;
}

QList<QString> OAIOrder::getApproverUserProfileIds() const {
    return m_approver_user_profile_ids;
}
void OAIOrder::setApproverUserProfileIds(const QList<QString> &approver_user_profile_ids) {
    m_approver_user_profile_ids = approver_user_profile_ids;
    m_approver_user_profile_ids_isSet = true;
}

bool OAIOrder::is_approver_user_profile_ids_Set() const{
    return m_approver_user_profile_ids_isSet;
}

bool OAIOrder::is_approver_user_profile_ids_Valid() const{
    return m_approver_user_profile_ids_isValid;
}

QString OAIOrder::getBuyerInvoiceId() const {
    return m_buyer_invoice_id;
}
void OAIOrder::setBuyerInvoiceId(const QString &buyer_invoice_id) {
    m_buyer_invoice_id = buyer_invoice_id;
    m_buyer_invoice_id_isSet = true;
}

bool OAIOrder::is_buyer_invoice_id_Set() const{
    return m_buyer_invoice_id_isSet;
}

bool OAIOrder::is_buyer_invoice_id_Valid() const{
    return m_buyer_invoice_id_isValid;
}

QString OAIOrder::getBuyerOrganizationName() const {
    return m_buyer_organization_name;
}
void OAIOrder::setBuyerOrganizationName(const QString &buyer_organization_name) {
    m_buyer_organization_name = buyer_organization_name;
    m_buyer_organization_name_isSet = true;
}

bool OAIOrder::is_buyer_organization_name_Set() const{
    return m_buyer_organization_name_isSet;
}

bool OAIOrder::is_buyer_organization_name_Valid() const{
    return m_buyer_organization_name_isValid;
}

QString OAIOrder::getComments() const {
    return m_comments;
}
void OAIOrder::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIOrder::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIOrder::is_comments_Valid() const{
    return m_comments_isValid;
}

QList<OAIOrderContact> OAIOrder::getContacts() const {
    return m_contacts;
}
void OAIOrder::setContacts(const QList<OAIOrderContact> &contacts) {
    m_contacts = contacts;
    m_contacts_isSet = true;
}

bool OAIOrder::is_contacts_Set() const{
    return m_contacts_isSet;
}

bool OAIOrder::is_contacts_Valid() const{
    return m_contacts_isValid;
}

QString OAIOrder::getId() const {
    return m_id;
}
void OAIOrder::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOrder::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOrder::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIOrder::getKind() const {
    return m_kind;
}
void OAIOrder::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIOrder::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIOrder::is_kind_Valid() const{
    return m_kind_isValid;
}

OAILastModifiedInfo OAIOrder::getLastModifiedInfo() const {
    return m_last_modified_info;
}
void OAIOrder::setLastModifiedInfo(const OAILastModifiedInfo &last_modified_info) {
    m_last_modified_info = last_modified_info;
    m_last_modified_info_isSet = true;
}

bool OAIOrder::is_last_modified_info_Set() const{
    return m_last_modified_info_isSet;
}

bool OAIOrder::is_last_modified_info_Valid() const{
    return m_last_modified_info_isValid;
}

QString OAIOrder::getName() const {
    return m_name;
}
void OAIOrder::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOrder::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOrder::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIOrder::getNotes() const {
    return m_notes;
}
void OAIOrder::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIOrder::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIOrder::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAIOrder::getPlanningTermId() const {
    return m_planning_term_id;
}
void OAIOrder::setPlanningTermId(const QString &planning_term_id) {
    m_planning_term_id = planning_term_id;
    m_planning_term_id_isSet = true;
}

bool OAIOrder::is_planning_term_id_Set() const{
    return m_planning_term_id_isSet;
}

bool OAIOrder::is_planning_term_id_Valid() const{
    return m_planning_term_id_isValid;
}

QString OAIOrder::getProjectId() const {
    return m_project_id;
}
void OAIOrder::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIOrder::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIOrder::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAIOrder::getSellerOrderId() const {
    return m_seller_order_id;
}
void OAIOrder::setSellerOrderId(const QString &seller_order_id) {
    m_seller_order_id = seller_order_id;
    m_seller_order_id_isSet = true;
}

bool OAIOrder::is_seller_order_id_Set() const{
    return m_seller_order_id_isSet;
}

bool OAIOrder::is_seller_order_id_Valid() const{
    return m_seller_order_id_isValid;
}

QString OAIOrder::getSellerOrganizationName() const {
    return m_seller_organization_name;
}
void OAIOrder::setSellerOrganizationName(const QString &seller_organization_name) {
    m_seller_organization_name = seller_organization_name;
    m_seller_organization_name_isSet = true;
}

bool OAIOrder::is_seller_organization_name_Set() const{
    return m_seller_organization_name_isSet;
}

bool OAIOrder::is_seller_organization_name_Valid() const{
    return m_seller_organization_name_isValid;
}

QList<QString> OAIOrder::getSiteId() const {
    return m_site_id;
}
void OAIOrder::setSiteId(const QList<QString> &site_id) {
    m_site_id = site_id;
    m_site_id_isSet = true;
}

bool OAIOrder::is_site_id_Set() const{
    return m_site_id_isSet;
}

bool OAIOrder::is_site_id_Valid() const{
    return m_site_id_isValid;
}

QList<QString> OAIOrder::getSiteNames() const {
    return m_site_names;
}
void OAIOrder::setSiteNames(const QList<QString> &site_names) {
    m_site_names = site_names;
    m_site_names_isSet = true;
}

bool OAIOrder::is_site_names_Set() const{
    return m_site_names_isSet;
}

bool OAIOrder::is_site_names_Valid() const{
    return m_site_names_isValid;
}

QString OAIOrder::getSubaccountId() const {
    return m_subaccount_id;
}
void OAIOrder::setSubaccountId(const QString &subaccount_id) {
    m_subaccount_id = subaccount_id;
    m_subaccount_id_isSet = true;
}

bool OAIOrder::is_subaccount_id_Set() const{
    return m_subaccount_id_isSet;
}

bool OAIOrder::is_subaccount_id_Valid() const{
    return m_subaccount_id_isValid;
}

QString OAIOrder::getTermsAndConditions() const {
    return m_terms_and_conditions;
}
void OAIOrder::setTermsAndConditions(const QString &terms_and_conditions) {
    m_terms_and_conditions = terms_and_conditions;
    m_terms_and_conditions_isSet = true;
}

bool OAIOrder::is_terms_and_conditions_Set() const{
    return m_terms_and_conditions_isSet;
}

bool OAIOrder::is_terms_and_conditions_Valid() const{
    return m_terms_and_conditions_isValid;
}

bool OAIOrder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_advertiser_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_approver_user_profile_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer_invoice_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer_organization_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contacts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_planning_term_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_organization_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subaccount_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terms_and_conditions_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrder::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
