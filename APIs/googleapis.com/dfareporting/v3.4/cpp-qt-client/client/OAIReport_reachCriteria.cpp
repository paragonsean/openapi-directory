/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReport_reachCriteria.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReport_reachCriteria::OAIReport_reachCriteria(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReport_reachCriteria::OAIReport_reachCriteria() {
    this->initializeModel();
}

OAIReport_reachCriteria::~OAIReport_reachCriteria() {}

void OAIReport_reachCriteria::initializeModel() {

    m_activities_isSet = false;
    m_activities_isValid = false;

    m_custom_rich_media_events_isSet = false;
    m_custom_rich_media_events_isValid = false;

    m_date_range_isSet = false;
    m_date_range_isValid = false;

    m_dimension_filters_isSet = false;
    m_dimension_filters_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_enable_all_dimension_combinations_isSet = false;
    m_enable_all_dimension_combinations_isValid = false;

    m_metric_names_isSet = false;
    m_metric_names_isValid = false;

    m_reach_by_frequency_metric_names_isSet = false;
    m_reach_by_frequency_metric_names_isValid = false;
}

void OAIReport_reachCriteria::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReport_reachCriteria::fromJsonObject(QJsonObject json) {

    m_activities_isValid = ::OpenAPI::fromJsonValue(m_activities, json[QString("activities")]);
    m_activities_isSet = !json[QString("activities")].isNull() && m_activities_isValid;

    m_custom_rich_media_events_isValid = ::OpenAPI::fromJsonValue(m_custom_rich_media_events, json[QString("customRichMediaEvents")]);
    m_custom_rich_media_events_isSet = !json[QString("customRichMediaEvents")].isNull() && m_custom_rich_media_events_isValid;

    m_date_range_isValid = ::OpenAPI::fromJsonValue(m_date_range, json[QString("dateRange")]);
    m_date_range_isSet = !json[QString("dateRange")].isNull() && m_date_range_isValid;

    m_dimension_filters_isValid = ::OpenAPI::fromJsonValue(m_dimension_filters, json[QString("dimensionFilters")]);
    m_dimension_filters_isSet = !json[QString("dimensionFilters")].isNull() && m_dimension_filters_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_enable_all_dimension_combinations_isValid = ::OpenAPI::fromJsonValue(m_enable_all_dimension_combinations, json[QString("enableAllDimensionCombinations")]);
    m_enable_all_dimension_combinations_isSet = !json[QString("enableAllDimensionCombinations")].isNull() && m_enable_all_dimension_combinations_isValid;

    m_metric_names_isValid = ::OpenAPI::fromJsonValue(m_metric_names, json[QString("metricNames")]);
    m_metric_names_isSet = !json[QString("metricNames")].isNull() && m_metric_names_isValid;

    m_reach_by_frequency_metric_names_isValid = ::OpenAPI::fromJsonValue(m_reach_by_frequency_metric_names, json[QString("reachByFrequencyMetricNames")]);
    m_reach_by_frequency_metric_names_isSet = !json[QString("reachByFrequencyMetricNames")].isNull() && m_reach_by_frequency_metric_names_isValid;
}

QString OAIReport_reachCriteria::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReport_reachCriteria::asJsonObject() const {
    QJsonObject obj;
    if (m_activities.isSet()) {
        obj.insert(QString("activities"), ::OpenAPI::toJsonValue(m_activities));
    }
    if (m_custom_rich_media_events.isSet()) {
        obj.insert(QString("customRichMediaEvents"), ::OpenAPI::toJsonValue(m_custom_rich_media_events));
    }
    if (m_date_range.isSet()) {
        obj.insert(QString("dateRange"), ::OpenAPI::toJsonValue(m_date_range));
    }
    if (m_dimension_filters.size() > 0) {
        obj.insert(QString("dimensionFilters"), ::OpenAPI::toJsonValue(m_dimension_filters));
    }
    if (m_dimensions.size() > 0) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_enable_all_dimension_combinations_isSet) {
        obj.insert(QString("enableAllDimensionCombinations"), ::OpenAPI::toJsonValue(m_enable_all_dimension_combinations));
    }
    if (m_metric_names.size() > 0) {
        obj.insert(QString("metricNames"), ::OpenAPI::toJsonValue(m_metric_names));
    }
    if (m_reach_by_frequency_metric_names.size() > 0) {
        obj.insert(QString("reachByFrequencyMetricNames"), ::OpenAPI::toJsonValue(m_reach_by_frequency_metric_names));
    }
    return obj;
}

OAIActivities OAIReport_reachCriteria::getActivities() const {
    return m_activities;
}
void OAIReport_reachCriteria::setActivities(const OAIActivities &activities) {
    m_activities = activities;
    m_activities_isSet = true;
}

bool OAIReport_reachCriteria::is_activities_Set() const{
    return m_activities_isSet;
}

bool OAIReport_reachCriteria::is_activities_Valid() const{
    return m_activities_isValid;
}

OAICustomRichMediaEvents OAIReport_reachCriteria::getCustomRichMediaEvents() const {
    return m_custom_rich_media_events;
}
void OAIReport_reachCriteria::setCustomRichMediaEvents(const OAICustomRichMediaEvents &custom_rich_media_events) {
    m_custom_rich_media_events = custom_rich_media_events;
    m_custom_rich_media_events_isSet = true;
}

bool OAIReport_reachCriteria::is_custom_rich_media_events_Set() const{
    return m_custom_rich_media_events_isSet;
}

bool OAIReport_reachCriteria::is_custom_rich_media_events_Valid() const{
    return m_custom_rich_media_events_isValid;
}

OAIDateRange OAIReport_reachCriteria::getDateRange() const {
    return m_date_range;
}
void OAIReport_reachCriteria::setDateRange(const OAIDateRange &date_range) {
    m_date_range = date_range;
    m_date_range_isSet = true;
}

bool OAIReport_reachCriteria::is_date_range_Set() const{
    return m_date_range_isSet;
}

bool OAIReport_reachCriteria::is_date_range_Valid() const{
    return m_date_range_isValid;
}

QList<OAIDimensionValue> OAIReport_reachCriteria::getDimensionFilters() const {
    return m_dimension_filters;
}
void OAIReport_reachCriteria::setDimensionFilters(const QList<OAIDimensionValue> &dimension_filters) {
    m_dimension_filters = dimension_filters;
    m_dimension_filters_isSet = true;
}

bool OAIReport_reachCriteria::is_dimension_filters_Set() const{
    return m_dimension_filters_isSet;
}

bool OAIReport_reachCriteria::is_dimension_filters_Valid() const{
    return m_dimension_filters_isValid;
}

QList<OAISortedDimension> OAIReport_reachCriteria::getDimensions() const {
    return m_dimensions;
}
void OAIReport_reachCriteria::setDimensions(const QList<OAISortedDimension> &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIReport_reachCriteria::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIReport_reachCriteria::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

bool OAIReport_reachCriteria::isEnableAllDimensionCombinations() const {
    return m_enable_all_dimension_combinations;
}
void OAIReport_reachCriteria::setEnableAllDimensionCombinations(const bool &enable_all_dimension_combinations) {
    m_enable_all_dimension_combinations = enable_all_dimension_combinations;
    m_enable_all_dimension_combinations_isSet = true;
}

bool OAIReport_reachCriteria::is_enable_all_dimension_combinations_Set() const{
    return m_enable_all_dimension_combinations_isSet;
}

bool OAIReport_reachCriteria::is_enable_all_dimension_combinations_Valid() const{
    return m_enable_all_dimension_combinations_isValid;
}

QList<QString> OAIReport_reachCriteria::getMetricNames() const {
    return m_metric_names;
}
void OAIReport_reachCriteria::setMetricNames(const QList<QString> &metric_names) {
    m_metric_names = metric_names;
    m_metric_names_isSet = true;
}

bool OAIReport_reachCriteria::is_metric_names_Set() const{
    return m_metric_names_isSet;
}

bool OAIReport_reachCriteria::is_metric_names_Valid() const{
    return m_metric_names_isValid;
}

QList<QString> OAIReport_reachCriteria::getReachByFrequencyMetricNames() const {
    return m_reach_by_frequency_metric_names;
}
void OAIReport_reachCriteria::setReachByFrequencyMetricNames(const QList<QString> &reach_by_frequency_metric_names) {
    m_reach_by_frequency_metric_names = reach_by_frequency_metric_names;
    m_reach_by_frequency_metric_names_isSet = true;
}

bool OAIReport_reachCriteria::is_reach_by_frequency_metric_names_Set() const{
    return m_reach_by_frequency_metric_names_isSet;
}

bool OAIReport_reachCriteria::is_reach_by_frequency_metric_names_Valid() const{
    return m_reach_by_frequency_metric_names_isValid;
}

bool OAIReport_reachCriteria::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_rich_media_events.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimension_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_all_dimension_combinations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reach_by_frequency_metric_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReport_reachCriteria::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
