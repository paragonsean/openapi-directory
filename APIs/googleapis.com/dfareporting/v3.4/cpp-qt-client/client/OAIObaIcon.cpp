/**
 * Campaign Manager 360 API
 * Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.
 *
 * The version of the OpenAPI document: v3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObaIcon.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObaIcon::OAIObaIcon(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObaIcon::OAIObaIcon() {
    this->initializeModel();
}

OAIObaIcon::~OAIObaIcon() {}

void OAIObaIcon::initializeModel() {

    m_icon_click_through_url_isSet = false;
    m_icon_click_through_url_isValid = false;

    m_icon_click_tracking_url_isSet = false;
    m_icon_click_tracking_url_isValid = false;

    m_icon_view_tracking_url_isSet = false;
    m_icon_view_tracking_url_isValid = false;

    m_program_isSet = false;
    m_program_isValid = false;

    m_resource_url_isSet = false;
    m_resource_url_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_x_position_isSet = false;
    m_x_position_isValid = false;

    m_y_position_isSet = false;
    m_y_position_isValid = false;
}

void OAIObaIcon::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObaIcon::fromJsonObject(QJsonObject json) {

    m_icon_click_through_url_isValid = ::OpenAPI::fromJsonValue(m_icon_click_through_url, json[QString("iconClickThroughUrl")]);
    m_icon_click_through_url_isSet = !json[QString("iconClickThroughUrl")].isNull() && m_icon_click_through_url_isValid;

    m_icon_click_tracking_url_isValid = ::OpenAPI::fromJsonValue(m_icon_click_tracking_url, json[QString("iconClickTrackingUrl")]);
    m_icon_click_tracking_url_isSet = !json[QString("iconClickTrackingUrl")].isNull() && m_icon_click_tracking_url_isValid;

    m_icon_view_tracking_url_isValid = ::OpenAPI::fromJsonValue(m_icon_view_tracking_url, json[QString("iconViewTrackingUrl")]);
    m_icon_view_tracking_url_isSet = !json[QString("iconViewTrackingUrl")].isNull() && m_icon_view_tracking_url_isValid;

    m_program_isValid = ::OpenAPI::fromJsonValue(m_program, json[QString("program")]);
    m_program_isSet = !json[QString("program")].isNull() && m_program_isValid;

    m_resource_url_isValid = ::OpenAPI::fromJsonValue(m_resource_url, json[QString("resourceUrl")]);
    m_resource_url_isSet = !json[QString("resourceUrl")].isNull() && m_resource_url_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_x_position_isValid = ::OpenAPI::fromJsonValue(m_x_position, json[QString("xPosition")]);
    m_x_position_isSet = !json[QString("xPosition")].isNull() && m_x_position_isValid;

    m_y_position_isValid = ::OpenAPI::fromJsonValue(m_y_position, json[QString("yPosition")]);
    m_y_position_isSet = !json[QString("yPosition")].isNull() && m_y_position_isValid;
}

QString OAIObaIcon::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObaIcon::asJsonObject() const {
    QJsonObject obj;
    if (m_icon_click_through_url_isSet) {
        obj.insert(QString("iconClickThroughUrl"), ::OpenAPI::toJsonValue(m_icon_click_through_url));
    }
    if (m_icon_click_tracking_url_isSet) {
        obj.insert(QString("iconClickTrackingUrl"), ::OpenAPI::toJsonValue(m_icon_click_tracking_url));
    }
    if (m_icon_view_tracking_url_isSet) {
        obj.insert(QString("iconViewTrackingUrl"), ::OpenAPI::toJsonValue(m_icon_view_tracking_url));
    }
    if (m_program_isSet) {
        obj.insert(QString("program"), ::OpenAPI::toJsonValue(m_program));
    }
    if (m_resource_url_isSet) {
        obj.insert(QString("resourceUrl"), ::OpenAPI::toJsonValue(m_resource_url));
    }
    if (m_size.isSet()) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_x_position_isSet) {
        obj.insert(QString("xPosition"), ::OpenAPI::toJsonValue(m_x_position));
    }
    if (m_y_position_isSet) {
        obj.insert(QString("yPosition"), ::OpenAPI::toJsonValue(m_y_position));
    }
    return obj;
}

QString OAIObaIcon::getIconClickThroughUrl() const {
    return m_icon_click_through_url;
}
void OAIObaIcon::setIconClickThroughUrl(const QString &icon_click_through_url) {
    m_icon_click_through_url = icon_click_through_url;
    m_icon_click_through_url_isSet = true;
}

bool OAIObaIcon::is_icon_click_through_url_Set() const{
    return m_icon_click_through_url_isSet;
}

bool OAIObaIcon::is_icon_click_through_url_Valid() const{
    return m_icon_click_through_url_isValid;
}

QString OAIObaIcon::getIconClickTrackingUrl() const {
    return m_icon_click_tracking_url;
}
void OAIObaIcon::setIconClickTrackingUrl(const QString &icon_click_tracking_url) {
    m_icon_click_tracking_url = icon_click_tracking_url;
    m_icon_click_tracking_url_isSet = true;
}

bool OAIObaIcon::is_icon_click_tracking_url_Set() const{
    return m_icon_click_tracking_url_isSet;
}

bool OAIObaIcon::is_icon_click_tracking_url_Valid() const{
    return m_icon_click_tracking_url_isValid;
}

QString OAIObaIcon::getIconViewTrackingUrl() const {
    return m_icon_view_tracking_url;
}
void OAIObaIcon::setIconViewTrackingUrl(const QString &icon_view_tracking_url) {
    m_icon_view_tracking_url = icon_view_tracking_url;
    m_icon_view_tracking_url_isSet = true;
}

bool OAIObaIcon::is_icon_view_tracking_url_Set() const{
    return m_icon_view_tracking_url_isSet;
}

bool OAIObaIcon::is_icon_view_tracking_url_Valid() const{
    return m_icon_view_tracking_url_isValid;
}

QString OAIObaIcon::getProgram() const {
    return m_program;
}
void OAIObaIcon::setProgram(const QString &program) {
    m_program = program;
    m_program_isSet = true;
}

bool OAIObaIcon::is_program_Set() const{
    return m_program_isSet;
}

bool OAIObaIcon::is_program_Valid() const{
    return m_program_isValid;
}

QString OAIObaIcon::getResourceUrl() const {
    return m_resource_url;
}
void OAIObaIcon::setResourceUrl(const QString &resource_url) {
    m_resource_url = resource_url;
    m_resource_url_isSet = true;
}

bool OAIObaIcon::is_resource_url_Set() const{
    return m_resource_url_isSet;
}

bool OAIObaIcon::is_resource_url_Valid() const{
    return m_resource_url_isValid;
}

OAISize OAIObaIcon::getSize() const {
    return m_size;
}
void OAIObaIcon::setSize(const OAISize &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIObaIcon::is_size_Set() const{
    return m_size_isSet;
}

bool OAIObaIcon::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIObaIcon::getXPosition() const {
    return m_x_position;
}
void OAIObaIcon::setXPosition(const QString &x_position) {
    m_x_position = x_position;
    m_x_position_isSet = true;
}

bool OAIObaIcon::is_x_position_Set() const{
    return m_x_position_isSet;
}

bool OAIObaIcon::is_x_position_Valid() const{
    return m_x_position_isValid;
}

QString OAIObaIcon::getYPosition() const {
    return m_y_position;
}
void OAIObaIcon::setYPosition(const QString &y_position) {
    m_y_position = y_position;
    m_y_position_isSet = true;
}

bool OAIObaIcon::is_y_position_Set() const{
    return m_y_position_isSet;
}

bool OAIObaIcon::is_y_position_Valid() const{
    return m_y_position_isValid;
}

bool OAIObaIcon::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_icon_click_through_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_click_tracking_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_view_tracking_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_program_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_position_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObaIcon::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
