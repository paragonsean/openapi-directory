# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aggregation import Aggregation
from openapi_server.models.trigger import Trigger
from openapi_server import util


class MetricAbsence(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregations: List[Aggregation]=None, duration: str=None, filter: str=None, trigger: Trigger=None):
        """MetricAbsence - a model defined in OpenAPI

        :param aggregations: The aggregations of this MetricAbsence.
        :param duration: The duration of this MetricAbsence.
        :param filter: The filter of this MetricAbsence.
        :param trigger: The trigger of this MetricAbsence.
        """
        self.openapi_types = {
            'aggregations': List[Aggregation],
            'duration': str,
            'filter': str,
            'trigger': Trigger
        }

        self.attribute_map = {
            'aggregations': 'aggregations',
            'duration': 'duration',
            'filter': 'filter',
            'trigger': 'trigger'
        }

        self._aggregations = aggregations
        self._duration = duration
        self._filter = filter
        self._trigger = trigger

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetricAbsence':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetricAbsence of this MetricAbsence.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregations(self):
        """Gets the aggregations of this MetricAbsence.

        Specifies the alignment of data points in individual time series as well as how to combine the retrieved time series together (such as when aggregating multiple streams on each resource to a single stream for each resource or when aggregating streams across all members of a group of resources). Multiple aggregations are applied in the order specified.This field is similar to the one in the ListTimeSeries request (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list). It is advisable to use the ListTimeSeries method when debugging this field.

        :return: The aggregations of this MetricAbsence.
        :rtype: List[Aggregation]
        """
        return self._aggregations

    @aggregations.setter
    def aggregations(self, aggregations):
        """Sets the aggregations of this MetricAbsence.

        Specifies the alignment of data points in individual time series as well as how to combine the retrieved time series together (such as when aggregating multiple streams on each resource to a single stream for each resource or when aggregating streams across all members of a group of resources). Multiple aggregations are applied in the order specified.This field is similar to the one in the ListTimeSeries request (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list). It is advisable to use the ListTimeSeries method when debugging this field.

        :param aggregations: The aggregations of this MetricAbsence.
        :type aggregations: List[Aggregation]
        """

        self._aggregations = aggregations

    @property
    def duration(self):
        """Gets the duration of this MetricAbsence.

        The amount of time that a time series must fail to report new data to be considered failing. The minimum value of this field is 120 seconds. Larger values that are a multiple of a minute--for example, 240 or 300 seconds--are supported. If an invalid value is given, an error will be returned. The Duration.nanos field is ignored.

        :return: The duration of this MetricAbsence.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this MetricAbsence.

        The amount of time that a time series must fail to report new data to be considered failing. The minimum value of this field is 120 seconds. Larger values that are a multiple of a minute--for example, 240 or 300 seconds--are supported. If an invalid value is given, an error will be returned. The Duration.nanos field is ignored.

        :param duration: The duration of this MetricAbsence.
        :type duration: str
        """

        self._duration = duration

    @property
    def filter(self):
        """Gets the filter of this MetricAbsence.

        Required. A filter (https://cloud.google.com/monitoring/api/v3/filters) that identifies which time series should be compared with the threshold.The filter is similar to the one that is specified in the ListTimeSeries request (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list) (that call is useful to verify the time series that will be retrieved / processed). The filter must specify the metric type and the resource type. Optionally, it can specify resource labels and metric labels. This field must not exceed 2048 Unicode characters in length.

        :return: The filter of this MetricAbsence.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this MetricAbsence.

        Required. A filter (https://cloud.google.com/monitoring/api/v3/filters) that identifies which time series should be compared with the threshold.The filter is similar to the one that is specified in the ListTimeSeries request (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list) (that call is useful to verify the time series that will be retrieved / processed). The filter must specify the metric type and the resource type. Optionally, it can specify resource labels and metric labels. This field must not exceed 2048 Unicode characters in length.

        :param filter: The filter of this MetricAbsence.
        :type filter: str
        """

        self._filter = filter

    @property
    def trigger(self):
        """Gets the trigger of this MetricAbsence.


        :return: The trigger of this MetricAbsence.
        :rtype: Trigger
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this MetricAbsence.


        :param trigger: The trigger of this MetricAbsence.
        :type trigger: Trigger
        """

        self._trigger = trigger
