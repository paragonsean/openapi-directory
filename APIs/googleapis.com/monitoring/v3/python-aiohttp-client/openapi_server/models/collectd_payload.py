# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.collectd_value import CollectdValue
from openapi_server.models.typed_value import TypedValue
from openapi_server import util


class CollectdPayload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: str=None, metadata: Dict[str, TypedValue]=None, plugin: str=None, plugin_instance: str=None, start_time: str=None, type: str=None, type_instance: str=None, values: List[CollectdValue]=None):
        """CollectdPayload - a model defined in OpenAPI

        :param end_time: The end_time of this CollectdPayload.
        :param metadata: The metadata of this CollectdPayload.
        :param plugin: The plugin of this CollectdPayload.
        :param plugin_instance: The plugin_instance of this CollectdPayload.
        :param start_time: The start_time of this CollectdPayload.
        :param type: The type of this CollectdPayload.
        :param type_instance: The type_instance of this CollectdPayload.
        :param values: The values of this CollectdPayload.
        """
        self.openapi_types = {
            'end_time': str,
            'metadata': Dict[str, TypedValue],
            'plugin': str,
            'plugin_instance': str,
            'start_time': str,
            'type': str,
            'type_instance': str,
            'values': List[CollectdValue]
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'metadata': 'metadata',
            'plugin': 'plugin',
            'plugin_instance': 'pluginInstance',
            'start_time': 'startTime',
            'type': 'type',
            'type_instance': 'typeInstance',
            'values': 'values'
        }

        self._end_time = end_time
        self._metadata = metadata
        self._plugin = plugin
        self._plugin_instance = plugin_instance
        self._start_time = start_time
        self._type = type
        self._type_instance = type_instance
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CollectdPayload':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CollectdPayload of this CollectdPayload.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this CollectdPayload.

        The end time of the interval.

        :return: The end_time of this CollectdPayload.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this CollectdPayload.

        The end time of the interval.

        :param end_time: The end_time of this CollectdPayload.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def metadata(self):
        """Gets the metadata of this CollectdPayload.

        The measurement metadata. Example: \"process_id\" -> 12345

        :return: The metadata of this CollectdPayload.
        :rtype: Dict[str, TypedValue]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this CollectdPayload.

        The measurement metadata. Example: \"process_id\" -> 12345

        :param metadata: The metadata of this CollectdPayload.
        :type metadata: Dict[str, TypedValue]
        """

        self._metadata = metadata

    @property
    def plugin(self):
        """Gets the plugin of this CollectdPayload.

        The name of the plugin. Example: \"disk\".

        :return: The plugin of this CollectdPayload.
        :rtype: str
        """
        return self._plugin

    @plugin.setter
    def plugin(self, plugin):
        """Sets the plugin of this CollectdPayload.

        The name of the plugin. Example: \"disk\".

        :param plugin: The plugin of this CollectdPayload.
        :type plugin: str
        """

        self._plugin = plugin

    @property
    def plugin_instance(self):
        """Gets the plugin_instance of this CollectdPayload.

        The instance name of the plugin Example: \"hdcl\".

        :return: The plugin_instance of this CollectdPayload.
        :rtype: str
        """
        return self._plugin_instance

    @plugin_instance.setter
    def plugin_instance(self, plugin_instance):
        """Sets the plugin_instance of this CollectdPayload.

        The instance name of the plugin Example: \"hdcl\".

        :param plugin_instance: The plugin_instance of this CollectdPayload.
        :type plugin_instance: str
        """

        self._plugin_instance = plugin_instance

    @property
    def start_time(self):
        """Gets the start_time of this CollectdPayload.

        The start time of the interval.

        :return: The start_time of this CollectdPayload.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this CollectdPayload.

        The start time of the interval.

        :param start_time: The start_time of this CollectdPayload.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def type(self):
        """Gets the type of this CollectdPayload.

        The measurement type. Example: \"memory\".

        :return: The type of this CollectdPayload.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CollectdPayload.

        The measurement type. Example: \"memory\".

        :param type: The type of this CollectdPayload.
        :type type: str
        """

        self._type = type

    @property
    def type_instance(self):
        """Gets the type_instance of this CollectdPayload.

        The measurement type instance. Example: \"used\".

        :return: The type_instance of this CollectdPayload.
        :rtype: str
        """
        return self._type_instance

    @type_instance.setter
    def type_instance(self, type_instance):
        """Sets the type_instance of this CollectdPayload.

        The measurement type instance. Example: \"used\".

        :param type_instance: The type_instance of this CollectdPayload.
        :type type_instance: str
        """

        self._type_instance = type_instance

    @property
    def values(self):
        """Gets the values of this CollectdPayload.

        The measured values during this time interval. Each value must have a different data_source_name.

        :return: The values of this CollectdPayload.
        :rtype: List[CollectdValue]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this CollectdPayload.

        The measured values during this time interval. Each value must have a different data_source_name.

        :param values: The values of this CollectdPayload.
        :type values: List[CollectdValue]
        """

        self._values = values
