# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UptimeCheckIp(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip_address: str=None, location: str=None, region: str=None):
        """UptimeCheckIp - a model defined in OpenAPI

        :param ip_address: The ip_address of this UptimeCheckIp.
        :param location: The location of this UptimeCheckIp.
        :param region: The region of this UptimeCheckIp.
        """
        self.openapi_types = {
            'ip_address': str,
            'location': str,
            'region': str
        }

        self.attribute_map = {
            'ip_address': 'ipAddress',
            'location': 'location',
            'region': 'region'
        }

        self._ip_address = ip_address
        self._location = location
        self._region = region

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UptimeCheckIp':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UptimeCheckIp of this UptimeCheckIp.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip_address(self):
        """Gets the ip_address of this UptimeCheckIp.

        The IP address from which the Uptime check originates. This is a fully specified IP address (not an IP address range). Most IP addresses, as of this publication, are in IPv4 format; however, one should not rely on the IP addresses being in IPv4 format indefinitely, and should support interpreting this field in either IPv4 or IPv6 format.

        :return: The ip_address of this UptimeCheckIp.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this UptimeCheckIp.

        The IP address from which the Uptime check originates. This is a fully specified IP address (not an IP address range). Most IP addresses, as of this publication, are in IPv4 format; however, one should not rely on the IP addresses being in IPv4 format indefinitely, and should support interpreting this field in either IPv4 or IPv6 format.

        :param ip_address: The ip_address of this UptimeCheckIp.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def location(self):
        """Gets the location of this UptimeCheckIp.

        A more specific location within the region that typically encodes a particular city/town/metro (and its containing state/province or country) within the broader umbrella region category.

        :return: The location of this UptimeCheckIp.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this UptimeCheckIp.

        A more specific location within the region that typically encodes a particular city/town/metro (and its containing state/province or country) within the broader umbrella region category.

        :param location: The location of this UptimeCheckIp.
        :type location: str
        """

        self._location = location

    @property
    def region(self):
        """Gets the region of this UptimeCheckIp.

        A broad region category in which the IP address is located.

        :return: The region of this UptimeCheckIp.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this UptimeCheckIp.

        A broad region category in which the IP address is located.

        :param region: The region of this UptimeCheckIp.
        :type region: str
        """
        allowed_values = ["REGION_UNSPECIFIED", "USA", "EUROPE", "SOUTH_AMERICA", "ASIA_PACIFIC", "USA_OREGON", "USA_IOWA", "USA_VIRGINIA"]  # noqa: E501
        if region not in allowed_values:
            raise ValueError(
                "Invalid value for `region` ({0}), must be one of {1}"
                .format(region, allowed_values)
            )

        self._region = region
