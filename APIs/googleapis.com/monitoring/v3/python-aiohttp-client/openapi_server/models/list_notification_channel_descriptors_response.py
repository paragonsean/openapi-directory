# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.notification_channel_descriptor import NotificationChannelDescriptor
from openapi_server import util


class ListNotificationChannelDescriptorsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_descriptors: List[NotificationChannelDescriptor]=None, next_page_token: str=None):
        """ListNotificationChannelDescriptorsResponse - a model defined in OpenAPI

        :param channel_descriptors: The channel_descriptors of this ListNotificationChannelDescriptorsResponse.
        :param next_page_token: The next_page_token of this ListNotificationChannelDescriptorsResponse.
        """
        self.openapi_types = {
            'channel_descriptors': List[NotificationChannelDescriptor],
            'next_page_token': str
        }

        self.attribute_map = {
            'channel_descriptors': 'channelDescriptors',
            'next_page_token': 'nextPageToken'
        }

        self._channel_descriptors = channel_descriptors
        self._next_page_token = next_page_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListNotificationChannelDescriptorsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListNotificationChannelDescriptorsResponse of this ListNotificationChannelDescriptorsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_descriptors(self):
        """Gets the channel_descriptors of this ListNotificationChannelDescriptorsResponse.

        The monitored resource descriptors supported for the specified project, optionally filtered.

        :return: The channel_descriptors of this ListNotificationChannelDescriptorsResponse.
        :rtype: List[NotificationChannelDescriptor]
        """
        return self._channel_descriptors

    @channel_descriptors.setter
    def channel_descriptors(self, channel_descriptors):
        """Sets the channel_descriptors of this ListNotificationChannelDescriptorsResponse.

        The monitored resource descriptors supported for the specified project, optionally filtered.

        :param channel_descriptors: The channel_descriptors of this ListNotificationChannelDescriptorsResponse.
        :type channel_descriptors: List[NotificationChannelDescriptor]
        """

        self._channel_descriptors = channel_descriptors

    @property
    def next_page_token(self):
        """Gets the next_page_token of this ListNotificationChannelDescriptorsResponse.

        If not empty, indicates that there may be more results that match the request. Use the value in the page_token field in a subsequent request to fetch the next set of results. If empty, all results have been returned.

        :return: The next_page_token of this ListNotificationChannelDescriptorsResponse.
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this ListNotificationChannelDescriptorsResponse.

        If not empty, indicates that there may be more results that match the request. Use the value in the page_token field in a subsequent request to fetch the next set of results. If empty, all results have been returned.

        :param next_page_token: The next_page_token of this ListNotificationChannelDescriptorsResponse.
        :type next_page_token: str
        """

        self._next_page_token = next_page_token
