# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.service_level_indicator import ServiceLevelIndicator
from openapi_server import util


class ServiceLevelObjective(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, calendar_period: str=None, display_name: str=None, goal: float=None, name: str=None, rolling_period: str=None, service_level_indicator: ServiceLevelIndicator=None, user_labels: Dict[str, str]=None):
        """ServiceLevelObjective - a model defined in OpenAPI

        :param calendar_period: The calendar_period of this ServiceLevelObjective.
        :param display_name: The display_name of this ServiceLevelObjective.
        :param goal: The goal of this ServiceLevelObjective.
        :param name: The name of this ServiceLevelObjective.
        :param rolling_period: The rolling_period of this ServiceLevelObjective.
        :param service_level_indicator: The service_level_indicator of this ServiceLevelObjective.
        :param user_labels: The user_labels of this ServiceLevelObjective.
        """
        self.openapi_types = {
            'calendar_period': str,
            'display_name': str,
            'goal': float,
            'name': str,
            'rolling_period': str,
            'service_level_indicator': ServiceLevelIndicator,
            'user_labels': Dict[str, str]
        }

        self.attribute_map = {
            'calendar_period': 'calendarPeriod',
            'display_name': 'displayName',
            'goal': 'goal',
            'name': 'name',
            'rolling_period': 'rollingPeriod',
            'service_level_indicator': 'serviceLevelIndicator',
            'user_labels': 'userLabels'
        }

        self._calendar_period = calendar_period
        self._display_name = display_name
        self._goal = goal
        self._name = name
        self._rolling_period = rolling_period
        self._service_level_indicator = service_level_indicator
        self._user_labels = user_labels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceLevelObjective':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceLevelObjective of this ServiceLevelObjective.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def calendar_period(self):
        """Gets the calendar_period of this ServiceLevelObjective.

        A calendar period, semantically \"since the start of the current \". At this time, only DAY, WEEK, FORTNIGHT, and MONTH are supported.

        :return: The calendar_period of this ServiceLevelObjective.
        :rtype: str
        """
        return self._calendar_period

    @calendar_period.setter
    def calendar_period(self, calendar_period):
        """Sets the calendar_period of this ServiceLevelObjective.

        A calendar period, semantically \"since the start of the current \". At this time, only DAY, WEEK, FORTNIGHT, and MONTH are supported.

        :param calendar_period: The calendar_period of this ServiceLevelObjective.
        :type calendar_period: str
        """
        allowed_values = ["CALENDAR_PERIOD_UNSPECIFIED", "DAY", "WEEK", "FORTNIGHT", "MONTH", "QUARTER", "HALF", "YEAR"]  # noqa: E501
        if calendar_period not in allowed_values:
            raise ValueError(
                "Invalid value for `calendar_period` ({0}), must be one of {1}"
                .format(calendar_period, allowed_values)
            )

        self._calendar_period = calendar_period

    @property
    def display_name(self):
        """Gets the display_name of this ServiceLevelObjective.

        Name used for UI elements listing this SLO.

        :return: The display_name of this ServiceLevelObjective.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ServiceLevelObjective.

        Name used for UI elements listing this SLO.

        :param display_name: The display_name of this ServiceLevelObjective.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def goal(self):
        """Gets the goal of this ServiceLevelObjective.

        The fraction of service that must be good in order for this objective to be met. 0 < goal <= 0.999.

        :return: The goal of this ServiceLevelObjective.
        :rtype: float
        """
        return self._goal

    @goal.setter
    def goal(self, goal):
        """Sets the goal of this ServiceLevelObjective.

        The fraction of service that must be good in order for this objective to be met. 0 < goal <= 0.999.

        :param goal: The goal of this ServiceLevelObjective.
        :type goal: float
        """

        self._goal = goal

    @property
    def name(self):
        """Gets the name of this ServiceLevelObjective.

        Resource name for this ServiceLevelObjective. The format is: projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]/serviceLevelObjectives/[SLO_NAME] 

        :return: The name of this ServiceLevelObjective.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServiceLevelObjective.

        Resource name for this ServiceLevelObjective. The format is: projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]/serviceLevelObjectives/[SLO_NAME] 

        :param name: The name of this ServiceLevelObjective.
        :type name: str
        """

        self._name = name

    @property
    def rolling_period(self):
        """Gets the rolling_period of this ServiceLevelObjective.

        A rolling time period, semantically \"in the past \". Must be an integer multiple of 1 day no larger than 30 days.

        :return: The rolling_period of this ServiceLevelObjective.
        :rtype: str
        """
        return self._rolling_period

    @rolling_period.setter
    def rolling_period(self, rolling_period):
        """Sets the rolling_period of this ServiceLevelObjective.

        A rolling time period, semantically \"in the past \". Must be an integer multiple of 1 day no larger than 30 days.

        :param rolling_period: The rolling_period of this ServiceLevelObjective.
        :type rolling_period: str
        """

        self._rolling_period = rolling_period

    @property
    def service_level_indicator(self):
        """Gets the service_level_indicator of this ServiceLevelObjective.


        :return: The service_level_indicator of this ServiceLevelObjective.
        :rtype: ServiceLevelIndicator
        """
        return self._service_level_indicator

    @service_level_indicator.setter
    def service_level_indicator(self, service_level_indicator):
        """Sets the service_level_indicator of this ServiceLevelObjective.


        :param service_level_indicator: The service_level_indicator of this ServiceLevelObjective.
        :type service_level_indicator: ServiceLevelIndicator
        """

        self._service_level_indicator = service_level_indicator

    @property
    def user_labels(self):
        """Gets the user_labels of this ServiceLevelObjective.

        Labels which have been used to annotate the service-level objective. Label keys must start with a letter. Label keys and values may contain lowercase letters, numbers, underscores, and dashes. Label keys and values have a maximum length of 63 characters, and must be less than 128 bytes in size. Up to 64 label entries may be stored. For labels which do not have a semantic value, the empty string may be supplied for the label value.

        :return: The user_labels of this ServiceLevelObjective.
        :rtype: Dict[str, str]
        """
        return self._user_labels

    @user_labels.setter
    def user_labels(self, user_labels):
        """Sets the user_labels of this ServiceLevelObjective.

        Labels which have been used to annotate the service-level objective. Label keys must start with a letter. Label keys and values may contain lowercase letters, numbers, underscores, and dashes. Label keys and values have a maximum length of 63 characters, and must be less than 128 bytes in size. Up to 64 label entries may be stored. For labels which do not have a semantic value, the empty string may be supplied for the label value.

        :param user_labels: The user_labels of this ServiceLevelObjective.
        :type user_labels: Dict[str, str]
        """

        self._user_labels = user_labels
