# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.content_matcher import ContentMatcher
from openapi_server.models.http_check import HttpCheck
from openapi_server.models.internal_checker import InternalChecker
from openapi_server.models.monitored_resource import MonitoredResource
from openapi_server.models.resource_group import ResourceGroup
from openapi_server.models.synthetic_monitor_target import SyntheticMonitorTarget
from openapi_server.models.tcp_check import TcpCheck
from openapi_server import util


class UptimeCheckConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, checker_type: str=None, content_matchers: List[ContentMatcher]=None, display_name: str=None, http_check: HttpCheck=None, internal_checkers: List[InternalChecker]=None, is_internal: bool=None, monitored_resource: MonitoredResource=None, name: str=None, period: str=None, resource_group: ResourceGroup=None, selected_regions: List[str]=None, synthetic_monitor: SyntheticMonitorTarget=None, tcp_check: TcpCheck=None, timeout: str=None, user_labels: Dict[str, str]=None):
        """UptimeCheckConfig - a model defined in OpenAPI

        :param checker_type: The checker_type of this UptimeCheckConfig.
        :param content_matchers: The content_matchers of this UptimeCheckConfig.
        :param display_name: The display_name of this UptimeCheckConfig.
        :param http_check: The http_check of this UptimeCheckConfig.
        :param internal_checkers: The internal_checkers of this UptimeCheckConfig.
        :param is_internal: The is_internal of this UptimeCheckConfig.
        :param monitored_resource: The monitored_resource of this UptimeCheckConfig.
        :param name: The name of this UptimeCheckConfig.
        :param period: The period of this UptimeCheckConfig.
        :param resource_group: The resource_group of this UptimeCheckConfig.
        :param selected_regions: The selected_regions of this UptimeCheckConfig.
        :param synthetic_monitor: The synthetic_monitor of this UptimeCheckConfig.
        :param tcp_check: The tcp_check of this UptimeCheckConfig.
        :param timeout: The timeout of this UptimeCheckConfig.
        :param user_labels: The user_labels of this UptimeCheckConfig.
        """
        self.openapi_types = {
            'checker_type': str,
            'content_matchers': List[ContentMatcher],
            'display_name': str,
            'http_check': HttpCheck,
            'internal_checkers': List[InternalChecker],
            'is_internal': bool,
            'monitored_resource': MonitoredResource,
            'name': str,
            'period': str,
            'resource_group': ResourceGroup,
            'selected_regions': List[str],
            'synthetic_monitor': SyntheticMonitorTarget,
            'tcp_check': TcpCheck,
            'timeout': str,
            'user_labels': Dict[str, str]
        }

        self.attribute_map = {
            'checker_type': 'checkerType',
            'content_matchers': 'contentMatchers',
            'display_name': 'displayName',
            'http_check': 'httpCheck',
            'internal_checkers': 'internalCheckers',
            'is_internal': 'isInternal',
            'monitored_resource': 'monitoredResource',
            'name': 'name',
            'period': 'period',
            'resource_group': 'resourceGroup',
            'selected_regions': 'selectedRegions',
            'synthetic_monitor': 'syntheticMonitor',
            'tcp_check': 'tcpCheck',
            'timeout': 'timeout',
            'user_labels': 'userLabels'
        }

        self._checker_type = checker_type
        self._content_matchers = content_matchers
        self._display_name = display_name
        self._http_check = http_check
        self._internal_checkers = internal_checkers
        self._is_internal = is_internal
        self._monitored_resource = monitored_resource
        self._name = name
        self._period = period
        self._resource_group = resource_group
        self._selected_regions = selected_regions
        self._synthetic_monitor = synthetic_monitor
        self._tcp_check = tcp_check
        self._timeout = timeout
        self._user_labels = user_labels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UptimeCheckConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UptimeCheckConfig of this UptimeCheckConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def checker_type(self):
        """Gets the checker_type of this UptimeCheckConfig.

        The type of checkers to use to execute the Uptime check.

        :return: The checker_type of this UptimeCheckConfig.
        :rtype: str
        """
        return self._checker_type

    @checker_type.setter
    def checker_type(self, checker_type):
        """Sets the checker_type of this UptimeCheckConfig.

        The type of checkers to use to execute the Uptime check.

        :param checker_type: The checker_type of this UptimeCheckConfig.
        :type checker_type: str
        """
        allowed_values = ["CHECKER_TYPE_UNSPECIFIED", "STATIC_IP_CHECKERS", "VPC_CHECKERS"]  # noqa: E501
        if checker_type not in allowed_values:
            raise ValueError(
                "Invalid value for `checker_type` ({0}), must be one of {1}"
                .format(checker_type, allowed_values)
            )

        self._checker_type = checker_type

    @property
    def content_matchers(self):
        """Gets the content_matchers of this UptimeCheckConfig.

        The content that is expected to appear in the data returned by the target server against which the check is run. Currently, only the first entry in the content_matchers list is supported, and additional entries will be ignored. This field is optional and should only be specified if a content match is required as part of the/ Uptime check.

        :return: The content_matchers of this UptimeCheckConfig.
        :rtype: List[ContentMatcher]
        """
        return self._content_matchers

    @content_matchers.setter
    def content_matchers(self, content_matchers):
        """Sets the content_matchers of this UptimeCheckConfig.

        The content that is expected to appear in the data returned by the target server against which the check is run. Currently, only the first entry in the content_matchers list is supported, and additional entries will be ignored. This field is optional and should only be specified if a content match is required as part of the/ Uptime check.

        :param content_matchers: The content_matchers of this UptimeCheckConfig.
        :type content_matchers: List[ContentMatcher]
        """

        self._content_matchers = content_matchers

    @property
    def display_name(self):
        """Gets the display_name of this UptimeCheckConfig.

        A human-friendly name for the Uptime check configuration. The display name should be unique within a Cloud Monitoring Workspace in order to make it easier to identify; however, uniqueness is not enforced. Required.

        :return: The display_name of this UptimeCheckConfig.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this UptimeCheckConfig.

        A human-friendly name for the Uptime check configuration. The display name should be unique within a Cloud Monitoring Workspace in order to make it easier to identify; however, uniqueness is not enforced. Required.

        :param display_name: The display_name of this UptimeCheckConfig.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def http_check(self):
        """Gets the http_check of this UptimeCheckConfig.


        :return: The http_check of this UptimeCheckConfig.
        :rtype: HttpCheck
        """
        return self._http_check

    @http_check.setter
    def http_check(self, http_check):
        """Sets the http_check of this UptimeCheckConfig.


        :param http_check: The http_check of this UptimeCheckConfig.
        :type http_check: HttpCheck
        """

        self._http_check = http_check

    @property
    def internal_checkers(self):
        """Gets the internal_checkers of this UptimeCheckConfig.

        The internal checkers that this check will egress from. If is_internal is true and this list is empty, the check will egress from all the InternalCheckers configured for the project that owns this UptimeCheckConfig.

        :return: The internal_checkers of this UptimeCheckConfig.
        :rtype: List[InternalChecker]
        """
        return self._internal_checkers

    @internal_checkers.setter
    def internal_checkers(self, internal_checkers):
        """Sets the internal_checkers of this UptimeCheckConfig.

        The internal checkers that this check will egress from. If is_internal is true and this list is empty, the check will egress from all the InternalCheckers configured for the project that owns this UptimeCheckConfig.

        :param internal_checkers: The internal_checkers of this UptimeCheckConfig.
        :type internal_checkers: List[InternalChecker]
        """

        self._internal_checkers = internal_checkers

    @property
    def is_internal(self):
        """Gets the is_internal of this UptimeCheckConfig.

        If this is true, then checks are made only from the 'internal_checkers'. If it is false, then checks are made only from the 'selected_regions'. It is an error to provide 'selected_regions' when is_internal is true, or to provide 'internal_checkers' when is_internal is false.

        :return: The is_internal of this UptimeCheckConfig.
        :rtype: bool
        """
        return self._is_internal

    @is_internal.setter
    def is_internal(self, is_internal):
        """Sets the is_internal of this UptimeCheckConfig.

        If this is true, then checks are made only from the 'internal_checkers'. If it is false, then checks are made only from the 'selected_regions'. It is an error to provide 'selected_regions' when is_internal is true, or to provide 'internal_checkers' when is_internal is false.

        :param is_internal: The is_internal of this UptimeCheckConfig.
        :type is_internal: bool
        """

        self._is_internal = is_internal

    @property
    def monitored_resource(self):
        """Gets the monitored_resource of this UptimeCheckConfig.


        :return: The monitored_resource of this UptimeCheckConfig.
        :rtype: MonitoredResource
        """
        return self._monitored_resource

    @monitored_resource.setter
    def monitored_resource(self, monitored_resource):
        """Sets the monitored_resource of this UptimeCheckConfig.


        :param monitored_resource: The monitored_resource of this UptimeCheckConfig.
        :type monitored_resource: MonitoredResource
        """

        self._monitored_resource = monitored_resource

    @property
    def name(self):
        """Gets the name of this UptimeCheckConfig.

        Identifier. A unique resource name for this Uptime check configuration. The format is: projects/[PROJECT_ID_OR_NUMBER]/uptimeCheckConfigs/[UPTIME_CHECK_ID] [PROJECT_ID_OR_NUMBER] is the Workspace host project associated with the Uptime check.This field should be omitted when creating the Uptime check configuration; on create, the resource name is assigned by the server and included in the response.

        :return: The name of this UptimeCheckConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UptimeCheckConfig.

        Identifier. A unique resource name for this Uptime check configuration. The format is: projects/[PROJECT_ID_OR_NUMBER]/uptimeCheckConfigs/[UPTIME_CHECK_ID] [PROJECT_ID_OR_NUMBER] is the Workspace host project associated with the Uptime check.This field should be omitted when creating the Uptime check configuration; on create, the resource name is assigned by the server and included in the response.

        :param name: The name of this UptimeCheckConfig.
        :type name: str
        """

        self._name = name

    @property
    def period(self):
        """Gets the period of this UptimeCheckConfig.

        How often, in seconds, the Uptime check is performed. Currently, the only supported values are 60s (1 minute), 300s (5 minutes), 600s (10 minutes), and 900s (15 minutes). Optional, defaults to 60s.

        :return: The period of this UptimeCheckConfig.
        :rtype: str
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this UptimeCheckConfig.

        How often, in seconds, the Uptime check is performed. Currently, the only supported values are 60s (1 minute), 300s (5 minutes), 600s (10 minutes), and 900s (15 minutes). Optional, defaults to 60s.

        :param period: The period of this UptimeCheckConfig.
        :type period: str
        """

        self._period = period

    @property
    def resource_group(self):
        """Gets the resource_group of this UptimeCheckConfig.


        :return: The resource_group of this UptimeCheckConfig.
        :rtype: ResourceGroup
        """
        return self._resource_group

    @resource_group.setter
    def resource_group(self, resource_group):
        """Sets the resource_group of this UptimeCheckConfig.


        :param resource_group: The resource_group of this UptimeCheckConfig.
        :type resource_group: ResourceGroup
        """

        self._resource_group = resource_group

    @property
    def selected_regions(self):
        """Gets the selected_regions of this UptimeCheckConfig.

        The list of regions from which the check will be run. Some regions contain one location, and others contain more than one. If this field is specified, enough regions must be provided to include a minimum of 3 locations. Not specifying this field will result in Uptime checks running from all available regions.

        :return: The selected_regions of this UptimeCheckConfig.
        :rtype: List[str]
        """
        return self._selected_regions

    @selected_regions.setter
    def selected_regions(self, selected_regions):
        """Sets the selected_regions of this UptimeCheckConfig.

        The list of regions from which the check will be run. Some regions contain one location, and others contain more than one. If this field is specified, enough regions must be provided to include a minimum of 3 locations. Not specifying this field will result in Uptime checks running from all available regions.

        :param selected_regions: The selected_regions of this UptimeCheckConfig.
        :type selected_regions: List[str]
        """
        allowed_values = ["REGION_UNSPECIFIED", "USA", "EUROPE", "SOUTH_AMERICA", "ASIA_PACIFIC", "USA_OREGON", "USA_IOWA", "USA_VIRGINIA"]  # noqa: E501
        if not set(selected_regions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `selected_regions` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(selected_regions) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._selected_regions = selected_regions

    @property
    def synthetic_monitor(self):
        """Gets the synthetic_monitor of this UptimeCheckConfig.


        :return: The synthetic_monitor of this UptimeCheckConfig.
        :rtype: SyntheticMonitorTarget
        """
        return self._synthetic_monitor

    @synthetic_monitor.setter
    def synthetic_monitor(self, synthetic_monitor):
        """Sets the synthetic_monitor of this UptimeCheckConfig.


        :param synthetic_monitor: The synthetic_monitor of this UptimeCheckConfig.
        :type synthetic_monitor: SyntheticMonitorTarget
        """

        self._synthetic_monitor = synthetic_monitor

    @property
    def tcp_check(self):
        """Gets the tcp_check of this UptimeCheckConfig.


        :return: The tcp_check of this UptimeCheckConfig.
        :rtype: TcpCheck
        """
        return self._tcp_check

    @tcp_check.setter
    def tcp_check(self, tcp_check):
        """Sets the tcp_check of this UptimeCheckConfig.


        :param tcp_check: The tcp_check of this UptimeCheckConfig.
        :type tcp_check: TcpCheck
        """

        self._tcp_check = tcp_check

    @property
    def timeout(self):
        """Gets the timeout of this UptimeCheckConfig.

        The maximum amount of time to wait for the request to complete (must be between 1 and 60 seconds). Required.

        :return: The timeout of this UptimeCheckConfig.
        :rtype: str
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this UptimeCheckConfig.

        The maximum amount of time to wait for the request to complete (must be between 1 and 60 seconds). Required.

        :param timeout: The timeout of this UptimeCheckConfig.
        :type timeout: str
        """

        self._timeout = timeout

    @property
    def user_labels(self):
        """Gets the user_labels of this UptimeCheckConfig.

        User-supplied key/value data to be used for organizing and identifying the UptimeCheckConfig objects.The field can contain up to 64 entries. Each key and value is limited to 63 Unicode characters or 128 bytes, whichever is smaller. Labels and values can contain only lowercase letters, numerals, underscores, and dashes. Keys must begin with a letter.

        :return: The user_labels of this UptimeCheckConfig.
        :rtype: Dict[str, str]
        """
        return self._user_labels

    @user_labels.setter
    def user_labels(self, user_labels):
        """Sets the user_labels of this UptimeCheckConfig.

        User-supplied key/value data to be used for organizing and identifying the UptimeCheckConfig objects.The field can contain up to 64 entries. Each key and value is limited to 63 Unicode characters or 128 bytes, whichever is smaller. Labels and values can contain only lowercase letters, numerals, underscores, and dashes. Keys must begin with a letter.

        :param user_labels: The user_labels of this UptimeCheckConfig.
        :type user_labels: Dict[str, str]
        """

        self._user_labels = user_labels
