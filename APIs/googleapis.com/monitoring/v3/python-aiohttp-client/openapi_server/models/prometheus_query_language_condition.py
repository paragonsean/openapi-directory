# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PrometheusQueryLanguageCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alert_rule: str=None, duration: str=None, evaluation_interval: str=None, labels: Dict[str, str]=None, query: str=None, rule_group: str=None):
        """PrometheusQueryLanguageCondition - a model defined in OpenAPI

        :param alert_rule: The alert_rule of this PrometheusQueryLanguageCondition.
        :param duration: The duration of this PrometheusQueryLanguageCondition.
        :param evaluation_interval: The evaluation_interval of this PrometheusQueryLanguageCondition.
        :param labels: The labels of this PrometheusQueryLanguageCondition.
        :param query: The query of this PrometheusQueryLanguageCondition.
        :param rule_group: The rule_group of this PrometheusQueryLanguageCondition.
        """
        self.openapi_types = {
            'alert_rule': str,
            'duration': str,
            'evaluation_interval': str,
            'labels': Dict[str, str],
            'query': str,
            'rule_group': str
        }

        self.attribute_map = {
            'alert_rule': 'alertRule',
            'duration': 'duration',
            'evaluation_interval': 'evaluationInterval',
            'labels': 'labels',
            'query': 'query',
            'rule_group': 'ruleGroup'
        }

        self._alert_rule = alert_rule
        self._duration = duration
        self._evaluation_interval = evaluation_interval
        self._labels = labels
        self._query = query
        self._rule_group = rule_group

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrometheusQueryLanguageCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrometheusQueryLanguageCondition of this PrometheusQueryLanguageCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alert_rule(self):
        """Gets the alert_rule of this PrometheusQueryLanguageCondition.

        Optional. The alerting rule name of this alert in the corresponding Prometheus configuration file.Some external tools may require this field to be populated correctly in order to refer to the original Prometheus configuration file. The rule group name and the alert name are necessary to update the relevant AlertPolicies in case the definition of the rule group changes in the future.This field is optional. If this field is not empty, then it must be a valid Prometheus label name (https://prometheus.io/docs/concepts/data_model/#metric-names-and-labels). This field may not exceed 2048 Unicode characters in length.

        :return: The alert_rule of this PrometheusQueryLanguageCondition.
        :rtype: str
        """
        return self._alert_rule

    @alert_rule.setter
    def alert_rule(self, alert_rule):
        """Sets the alert_rule of this PrometheusQueryLanguageCondition.

        Optional. The alerting rule name of this alert in the corresponding Prometheus configuration file.Some external tools may require this field to be populated correctly in order to refer to the original Prometheus configuration file. The rule group name and the alert name are necessary to update the relevant AlertPolicies in case the definition of the rule group changes in the future.This field is optional. If this field is not empty, then it must be a valid Prometheus label name (https://prometheus.io/docs/concepts/data_model/#metric-names-and-labels). This field may not exceed 2048 Unicode characters in length.

        :param alert_rule: The alert_rule of this PrometheusQueryLanguageCondition.
        :type alert_rule: str
        """

        self._alert_rule = alert_rule

    @property
    def duration(self):
        """Gets the duration of this PrometheusQueryLanguageCondition.

        Optional. Alerts are considered firing once their PromQL expression was evaluated to be \"true\" for this long. Alerts whose PromQL expression was not evaluated to be \"true\" for long enough are considered pending. Must be a non-negative duration or missing. This field is optional. Its default value is zero.

        :return: The duration of this PrometheusQueryLanguageCondition.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this PrometheusQueryLanguageCondition.

        Optional. Alerts are considered firing once their PromQL expression was evaluated to be \"true\" for this long. Alerts whose PromQL expression was not evaluated to be \"true\" for long enough are considered pending. Must be a non-negative duration or missing. This field is optional. Its default value is zero.

        :param duration: The duration of this PrometheusQueryLanguageCondition.
        :type duration: str
        """

        self._duration = duration

    @property
    def evaluation_interval(self):
        """Gets the evaluation_interval of this PrometheusQueryLanguageCondition.

        Optional. How often this rule should be evaluated. Must be a positive multiple of 30 seconds or missing. This field is optional. Its default value is 30 seconds. If this PrometheusQueryLanguageCondition was generated from a Prometheus alerting rule, then this value should be taken from the enclosing rule group.

        :return: The evaluation_interval of this PrometheusQueryLanguageCondition.
        :rtype: str
        """
        return self._evaluation_interval

    @evaluation_interval.setter
    def evaluation_interval(self, evaluation_interval):
        """Sets the evaluation_interval of this PrometheusQueryLanguageCondition.

        Optional. How often this rule should be evaluated. Must be a positive multiple of 30 seconds or missing. This field is optional. Its default value is 30 seconds. If this PrometheusQueryLanguageCondition was generated from a Prometheus alerting rule, then this value should be taken from the enclosing rule group.

        :param evaluation_interval: The evaluation_interval of this PrometheusQueryLanguageCondition.
        :type evaluation_interval: str
        """

        self._evaluation_interval = evaluation_interval

    @property
    def labels(self):
        """Gets the labels of this PrometheusQueryLanguageCondition.

        Optional. Labels to add to or overwrite in the PromQL query result. Label names must be valid (https://prometheus.io/docs/concepts/data_model/#metric-names-and-labels). Label values can be templatized by using variables (https://cloud.google.com/monitoring/alerts/doc-variables). The only available variable names are the names of the labels in the PromQL result, including \"__name__\" and \"value\". \"labels\" may be empty.

        :return: The labels of this PrometheusQueryLanguageCondition.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this PrometheusQueryLanguageCondition.

        Optional. Labels to add to or overwrite in the PromQL query result. Label names must be valid (https://prometheus.io/docs/concepts/data_model/#metric-names-and-labels). Label values can be templatized by using variables (https://cloud.google.com/monitoring/alerts/doc-variables). The only available variable names are the names of the labels in the PromQL result, including \"__name__\" and \"value\". \"labels\" may be empty.

        :param labels: The labels of this PrometheusQueryLanguageCondition.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def query(self):
        """Gets the query of this PrometheusQueryLanguageCondition.

        Required. The PromQL expression to evaluate. Every evaluation cycle this expression is evaluated at the current time, and all resultant time series become pending/firing alerts. This field must not be empty.

        :return: The query of this PrometheusQueryLanguageCondition.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this PrometheusQueryLanguageCondition.

        Required. The PromQL expression to evaluate. Every evaluation cycle this expression is evaluated at the current time, and all resultant time series become pending/firing alerts. This field must not be empty.

        :param query: The query of this PrometheusQueryLanguageCondition.
        :type query: str
        """

        self._query = query

    @property
    def rule_group(self):
        """Gets the rule_group of this PrometheusQueryLanguageCondition.

        Optional. The rule group name of this alert in the corresponding Prometheus configuration file.Some external tools may require this field to be populated correctly in order to refer to the original Prometheus configuration file. The rule group name and the alert name are necessary to update the relevant AlertPolicies in case the definition of the rule group changes in the future.This field is optional. If this field is not empty, then it must contain a valid UTF-8 string. This field may not exceed 2048 Unicode characters in length.

        :return: The rule_group of this PrometheusQueryLanguageCondition.
        :rtype: str
        """
        return self._rule_group

    @rule_group.setter
    def rule_group(self, rule_group):
        """Sets the rule_group of this PrometheusQueryLanguageCondition.

        Optional. The rule group name of this alert in the corresponding Prometheus configuration file.Some external tools may require this field to be populated correctly in order to refer to the original Prometheus configuration file. The rule group name and the alert name are necessary to update the relevant AlertPolicies in case the definition of the rule group changes in the future.This field is optional. If this field is not empty, then it must contain a valid UTF-8 string. This field may not exceed 2048 Unicode characters in length.

        :param rule_group: The rule_group of this PrometheusQueryLanguageCondition.
        :type rule_group: str
        """

        self._rule_group = rule_group
