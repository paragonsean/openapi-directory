# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JsonPathMatcher(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, json_matcher: str=None, json_path: str=None):
        """JsonPathMatcher - a model defined in OpenAPI

        :param json_matcher: The json_matcher of this JsonPathMatcher.
        :param json_path: The json_path of this JsonPathMatcher.
        """
        self.openapi_types = {
            'json_matcher': str,
            'json_path': str
        }

        self.attribute_map = {
            'json_matcher': 'jsonMatcher',
            'json_path': 'jsonPath'
        }

        self._json_matcher = json_matcher
        self._json_path = json_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JsonPathMatcher':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JsonPathMatcher of this JsonPathMatcher.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def json_matcher(self):
        """Gets the json_matcher of this JsonPathMatcher.

        The type of JSONPath match that will be applied to the JSON output (ContentMatcher.content)

        :return: The json_matcher of this JsonPathMatcher.
        :rtype: str
        """
        return self._json_matcher

    @json_matcher.setter
    def json_matcher(self, json_matcher):
        """Sets the json_matcher of this JsonPathMatcher.

        The type of JSONPath match that will be applied to the JSON output (ContentMatcher.content)

        :param json_matcher: The json_matcher of this JsonPathMatcher.
        :type json_matcher: str
        """
        allowed_values = ["JSON_PATH_MATCHER_OPTION_UNSPECIFIED", "EXACT_MATCH", "REGEX_MATCH"]  # noqa: E501
        if json_matcher not in allowed_values:
            raise ValueError(
                "Invalid value for `json_matcher` ({0}), must be one of {1}"
                .format(json_matcher, allowed_values)
            )

        self._json_matcher = json_matcher

    @property
    def json_path(self):
        """Gets the json_path of this JsonPathMatcher.

        JSONPath within the response output pointing to the expected ContentMatcher::content to match against.

        :return: The json_path of this JsonPathMatcher.
        :rtype: str
        """
        return self._json_path

    @json_path.setter
    def json_path(self, json_path):
        """Sets the json_path of this JsonPathMatcher.

        JSONPath within the response output pointing to the expected ContentMatcher::content to match against.

        :param json_path: The json_path of this JsonPathMatcher.
        :type json_path: str
        """

        self._json_path = json_path
