# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mutation_record import MutationRecord
from openapi_server import util


class NotificationChannel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creation_record: MutationRecord=None, description: str=None, display_name: str=None, enabled: bool=None, labels: Dict[str, str]=None, mutation_records: List[MutationRecord]=None, name: str=None, type: str=None, user_labels: Dict[str, str]=None, verification_status: str=None):
        """NotificationChannel - a model defined in OpenAPI

        :param creation_record: The creation_record of this NotificationChannel.
        :param description: The description of this NotificationChannel.
        :param display_name: The display_name of this NotificationChannel.
        :param enabled: The enabled of this NotificationChannel.
        :param labels: The labels of this NotificationChannel.
        :param mutation_records: The mutation_records of this NotificationChannel.
        :param name: The name of this NotificationChannel.
        :param type: The type of this NotificationChannel.
        :param user_labels: The user_labels of this NotificationChannel.
        :param verification_status: The verification_status of this NotificationChannel.
        """
        self.openapi_types = {
            'creation_record': MutationRecord,
            'description': str,
            'display_name': str,
            'enabled': bool,
            'labels': Dict[str, str],
            'mutation_records': List[MutationRecord],
            'name': str,
            'type': str,
            'user_labels': Dict[str, str],
            'verification_status': str
        }

        self.attribute_map = {
            'creation_record': 'creationRecord',
            'description': 'description',
            'display_name': 'displayName',
            'enabled': 'enabled',
            'labels': 'labels',
            'mutation_records': 'mutationRecords',
            'name': 'name',
            'type': 'type',
            'user_labels': 'userLabels',
            'verification_status': 'verificationStatus'
        }

        self._creation_record = creation_record
        self._description = description
        self._display_name = display_name
        self._enabled = enabled
        self._labels = labels
        self._mutation_records = mutation_records
        self._name = name
        self._type = type
        self._user_labels = user_labels
        self._verification_status = verification_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotificationChannel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotificationChannel of this NotificationChannel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_record(self):
        """Gets the creation_record of this NotificationChannel.


        :return: The creation_record of this NotificationChannel.
        :rtype: MutationRecord
        """
        return self._creation_record

    @creation_record.setter
    def creation_record(self, creation_record):
        """Sets the creation_record of this NotificationChannel.


        :param creation_record: The creation_record of this NotificationChannel.
        :type creation_record: MutationRecord
        """

        self._creation_record = creation_record

    @property
    def description(self):
        """Gets the description of this NotificationChannel.

        An optional human-readable description of this notification channel. This description may provide additional details, beyond the display name, for the channel. This may not exceed 1024 Unicode characters.

        :return: The description of this NotificationChannel.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NotificationChannel.

        An optional human-readable description of this notification channel. This description may provide additional details, beyond the display name, for the channel. This may not exceed 1024 Unicode characters.

        :param description: The description of this NotificationChannel.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this NotificationChannel.

        An optional human-readable name for this notification channel. It is recommended that you specify a non-empty and unique name in order to make it easier to identify the channels in your project, though this is not enforced. The display name is limited to 512 Unicode characters.

        :return: The display_name of this NotificationChannel.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this NotificationChannel.

        An optional human-readable name for this notification channel. It is recommended that you specify a non-empty and unique name in order to make it easier to identify the channels in your project, though this is not enforced. The display name is limited to 512 Unicode characters.

        :param display_name: The display_name of this NotificationChannel.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def enabled(self):
        """Gets the enabled of this NotificationChannel.

        Whether notifications are forwarded to the described channel. This makes it possible to disable delivery of notifications to a particular channel without removing the channel from all alerting policies that reference the channel. This is a more convenient approach when the change is temporary and you want to receive notifications from the same set of alerting policies on the channel at some point in the future.

        :return: The enabled of this NotificationChannel.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this NotificationChannel.

        Whether notifications are forwarded to the described channel. This makes it possible to disable delivery of notifications to a particular channel without removing the channel from all alerting policies that reference the channel. This is a more convenient approach when the change is temporary and you want to receive notifications from the same set of alerting policies on the channel at some point in the future.

        :param enabled: The enabled of this NotificationChannel.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def labels(self):
        """Gets the labels of this NotificationChannel.

        Configuration fields that define the channel and its behavior. The permissible and required labels are specified in the NotificationChannelDescriptor.labels of the NotificationChannelDescriptor corresponding to the type field.

        :return: The labels of this NotificationChannel.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this NotificationChannel.

        Configuration fields that define the channel and its behavior. The permissible and required labels are specified in the NotificationChannelDescriptor.labels of the NotificationChannelDescriptor corresponding to the type field.

        :param labels: The labels of this NotificationChannel.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def mutation_records(self):
        """Gets the mutation_records of this NotificationChannel.

        Records of the modification of this channel.

        :return: The mutation_records of this NotificationChannel.
        :rtype: List[MutationRecord]
        """
        return self._mutation_records

    @mutation_records.setter
    def mutation_records(self, mutation_records):
        """Sets the mutation_records of this NotificationChannel.

        Records of the modification of this channel.

        :param mutation_records: The mutation_records of this NotificationChannel.
        :type mutation_records: List[MutationRecord]
        """

        self._mutation_records = mutation_records

    @property
    def name(self):
        """Gets the name of this NotificationChannel.

        The full REST resource name for this channel. The format is: projects/[PROJECT_ID_OR_NUMBER]/notificationChannels/[CHANNEL_ID] The [CHANNEL_ID] is automatically assigned by the server on creation.

        :return: The name of this NotificationChannel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NotificationChannel.

        The full REST resource name for this channel. The format is: projects/[PROJECT_ID_OR_NUMBER]/notificationChannels/[CHANNEL_ID] The [CHANNEL_ID] is automatically assigned by the server on creation.

        :param name: The name of this NotificationChannel.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this NotificationChannel.

        The type of the notification channel. This field matches the value of the NotificationChannelDescriptor.type field.

        :return: The type of this NotificationChannel.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NotificationChannel.

        The type of the notification channel. This field matches the value of the NotificationChannelDescriptor.type field.

        :param type: The type of this NotificationChannel.
        :type type: str
        """

        self._type = type

    @property
    def user_labels(self):
        """Gets the user_labels of this NotificationChannel.

        User-supplied key/value data that does not need to conform to the corresponding NotificationChannelDescriptor's schema, unlike the labels field. This field is intended to be used for organizing and identifying the NotificationChannel objects.The field can contain up to 64 entries. Each key and value is limited to 63 Unicode characters or 128 bytes, whichever is smaller. Labels and values can contain only lowercase letters, numerals, underscores, and dashes. Keys must begin with a letter.

        :return: The user_labels of this NotificationChannel.
        :rtype: Dict[str, str]
        """
        return self._user_labels

    @user_labels.setter
    def user_labels(self, user_labels):
        """Sets the user_labels of this NotificationChannel.

        User-supplied key/value data that does not need to conform to the corresponding NotificationChannelDescriptor's schema, unlike the labels field. This field is intended to be used for organizing and identifying the NotificationChannel objects.The field can contain up to 64 entries. Each key and value is limited to 63 Unicode characters or 128 bytes, whichever is smaller. Labels and values can contain only lowercase letters, numerals, underscores, and dashes. Keys must begin with a letter.

        :param user_labels: The user_labels of this NotificationChannel.
        :type user_labels: Dict[str, str]
        """

        self._user_labels = user_labels

    @property
    def verification_status(self):
        """Gets the verification_status of this NotificationChannel.

        Indicates whether this channel has been verified or not. On a ListNotificationChannels or GetNotificationChannel operation, this field is expected to be populated.If the value is UNVERIFIED, then it indicates that the channel is non-functioning (it both requires verification and lacks verification); otherwise, it is assumed that the channel works.If the channel is neither VERIFIED nor UNVERIFIED, it implies that the channel is of a type that does not require verification or that this specific channel has been exempted from verification because it was created prior to verification being required for channels of this type.This field cannot be modified using a standard UpdateNotificationChannel operation. To change the value of this field, you must call VerifyNotificationChannel.

        :return: The verification_status of this NotificationChannel.
        :rtype: str
        """
        return self._verification_status

    @verification_status.setter
    def verification_status(self, verification_status):
        """Sets the verification_status of this NotificationChannel.

        Indicates whether this channel has been verified or not. On a ListNotificationChannels or GetNotificationChannel operation, this field is expected to be populated.If the value is UNVERIFIED, then it indicates that the channel is non-functioning (it both requires verification and lacks verification); otherwise, it is assumed that the channel works.If the channel is neither VERIFIED nor UNVERIFIED, it implies that the channel is of a type that does not require verification or that this specific channel has been exempted from verification because it was created prior to verification being required for channels of this type.This field cannot be modified using a standard UpdateNotificationChannel operation. To change the value of this field, you must call VerifyNotificationChannel.

        :param verification_status: The verification_status of this NotificationChannel.
        :type verification_status: str
        """
        allowed_values = ["VERIFICATION_STATUS_UNSPECIFIED", "UNVERIFIED", "VERIFIED"]  # noqa: E501
        if verification_status not in allowed_values:
            raise ValueError(
                "Invalid value for `verification_status` ({0}), must be one of {1}"
                .format(verification_status, allowed_values)
            )

        self._verification_status = verification_status
