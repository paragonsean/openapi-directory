# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InternalChecker(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, gcp_zone: str=None, name: str=None, network: str=None, peer_project_id: str=None, state: str=None):
        """InternalChecker - a model defined in OpenAPI

        :param display_name: The display_name of this InternalChecker.
        :param gcp_zone: The gcp_zone of this InternalChecker.
        :param name: The name of this InternalChecker.
        :param network: The network of this InternalChecker.
        :param peer_project_id: The peer_project_id of this InternalChecker.
        :param state: The state of this InternalChecker.
        """
        self.openapi_types = {
            'display_name': str,
            'gcp_zone': str,
            'name': str,
            'network': str,
            'peer_project_id': str,
            'state': str
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'gcp_zone': 'gcpZone',
            'name': 'name',
            'network': 'network',
            'peer_project_id': 'peerProjectId',
            'state': 'state'
        }

        self._display_name = display_name
        self._gcp_zone = gcp_zone
        self._name = name
        self._network = network
        self._peer_project_id = peer_project_id
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InternalChecker':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InternalChecker of this InternalChecker.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this InternalChecker.

        The checker's human-readable name. The display name should be unique within a Cloud Monitoring Metrics Scope in order to make it easier to identify; however, uniqueness is not enforced.

        :return: The display_name of this InternalChecker.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this InternalChecker.

        The checker's human-readable name. The display name should be unique within a Cloud Monitoring Metrics Scope in order to make it easier to identify; however, uniqueness is not enforced.

        :param display_name: The display_name of this InternalChecker.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def gcp_zone(self):
        """Gets the gcp_zone of this InternalChecker.

        The GCP zone the Uptime check should egress from. Only respected for internal Uptime checks, where internal_network is specified.

        :return: The gcp_zone of this InternalChecker.
        :rtype: str
        """
        return self._gcp_zone

    @gcp_zone.setter
    def gcp_zone(self, gcp_zone):
        """Sets the gcp_zone of this InternalChecker.

        The GCP zone the Uptime check should egress from. Only respected for internal Uptime checks, where internal_network is specified.

        :param gcp_zone: The gcp_zone of this InternalChecker.
        :type gcp_zone: str
        """

        self._gcp_zone = gcp_zone

    @property
    def name(self):
        """Gets the name of this InternalChecker.

        A unique resource name for this InternalChecker. The format is: projects/[PROJECT_ID_OR_NUMBER]/internalCheckers/[INTERNAL_CHECKER_ID] [PROJECT_ID_OR_NUMBER] is the Cloud Monitoring Metrics Scope project for the Uptime check config associated with the internal checker.

        :return: The name of this InternalChecker.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InternalChecker.

        A unique resource name for this InternalChecker. The format is: projects/[PROJECT_ID_OR_NUMBER]/internalCheckers/[INTERNAL_CHECKER_ID] [PROJECT_ID_OR_NUMBER] is the Cloud Monitoring Metrics Scope project for the Uptime check config associated with the internal checker.

        :param name: The name of this InternalChecker.
        :type name: str
        """

        self._name = name

    @property
    def network(self):
        """Gets the network of this InternalChecker.

        The GCP VPC network (https://cloud.google.com/vpc/docs/vpc) where the internal resource lives (ex: \"default\").

        :return: The network of this InternalChecker.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this InternalChecker.

        The GCP VPC network (https://cloud.google.com/vpc/docs/vpc) where the internal resource lives (ex: \"default\").

        :param network: The network of this InternalChecker.
        :type network: str
        """

        self._network = network

    @property
    def peer_project_id(self):
        """Gets the peer_project_id of this InternalChecker.

        The GCP project ID where the internal checker lives. Not necessary the same as the Metrics Scope project.

        :return: The peer_project_id of this InternalChecker.
        :rtype: str
        """
        return self._peer_project_id

    @peer_project_id.setter
    def peer_project_id(self, peer_project_id):
        """Sets the peer_project_id of this InternalChecker.

        The GCP project ID where the internal checker lives. Not necessary the same as the Metrics Scope project.

        :param peer_project_id: The peer_project_id of this InternalChecker.
        :type peer_project_id: str
        """

        self._peer_project_id = peer_project_id

    @property
    def state(self):
        """Gets the state of this InternalChecker.

        The current operational state of the internal checker.

        :return: The state of this InternalChecker.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this InternalChecker.

        The current operational state of the internal checker.

        :param state: The state of this InternalChecker.
        :type state: str
        """
        allowed_values = ["UNSPECIFIED", "CREATING", "RUNNING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
