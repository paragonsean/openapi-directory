# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.trigger import Trigger
from openapi_server import util


class MonitoringQueryLanguageCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duration: str=None, evaluation_missing_data: str=None, query: str=None, trigger: Trigger=None):
        """MonitoringQueryLanguageCondition - a model defined in OpenAPI

        :param duration: The duration of this MonitoringQueryLanguageCondition.
        :param evaluation_missing_data: The evaluation_missing_data of this MonitoringQueryLanguageCondition.
        :param query: The query of this MonitoringQueryLanguageCondition.
        :param trigger: The trigger of this MonitoringQueryLanguageCondition.
        """
        self.openapi_types = {
            'duration': str,
            'evaluation_missing_data': str,
            'query': str,
            'trigger': Trigger
        }

        self.attribute_map = {
            'duration': 'duration',
            'evaluation_missing_data': 'evaluationMissingData',
            'query': 'query',
            'trigger': 'trigger'
        }

        self._duration = duration
        self._evaluation_missing_data = evaluation_missing_data
        self._query = query
        self._trigger = trigger

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MonitoringQueryLanguageCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MonitoringQueryLanguageCondition of this MonitoringQueryLanguageCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duration(self):
        """Gets the duration of this MonitoringQueryLanguageCondition.

        The amount of time that a time series must violate the threshold to be considered failing. Currently, only values that are a multiple of a minute--e.g., 0, 60, 120, or 300 seconds--are supported. If an invalid value is given, an error will be returned. When choosing a duration, it is useful to keep in mind the frequency of the underlying time series data (which may also be affected by any alignments specified in the aggregations field); a good duration is long enough so that a single outlier does not generate spurious alerts, but short enough that unhealthy states are detected and alerted on quickly.

        :return: The duration of this MonitoringQueryLanguageCondition.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this MonitoringQueryLanguageCondition.

        The amount of time that a time series must violate the threshold to be considered failing. Currently, only values that are a multiple of a minute--e.g., 0, 60, 120, or 300 seconds--are supported. If an invalid value is given, an error will be returned. When choosing a duration, it is useful to keep in mind the frequency of the underlying time series data (which may also be affected by any alignments specified in the aggregations field); a good duration is long enough so that a single outlier does not generate spurious alerts, but short enough that unhealthy states are detected and alerted on quickly.

        :param duration: The duration of this MonitoringQueryLanguageCondition.
        :type duration: str
        """

        self._duration = duration

    @property
    def evaluation_missing_data(self):
        """Gets the evaluation_missing_data of this MonitoringQueryLanguageCondition.

        A condition control that determines how metric-threshold conditions are evaluated when data stops arriving.

        :return: The evaluation_missing_data of this MonitoringQueryLanguageCondition.
        :rtype: str
        """
        return self._evaluation_missing_data

    @evaluation_missing_data.setter
    def evaluation_missing_data(self, evaluation_missing_data):
        """Sets the evaluation_missing_data of this MonitoringQueryLanguageCondition.

        A condition control that determines how metric-threshold conditions are evaluated when data stops arriving.

        :param evaluation_missing_data: The evaluation_missing_data of this MonitoringQueryLanguageCondition.
        :type evaluation_missing_data: str
        """
        allowed_values = ["EVALUATION_MISSING_DATA_UNSPECIFIED", "EVALUATION_MISSING_DATA_INACTIVE", "EVALUATION_MISSING_DATA_ACTIVE", "EVALUATION_MISSING_DATA_NO_OP"]  # noqa: E501
        if evaluation_missing_data not in allowed_values:
            raise ValueError(
                "Invalid value for `evaluation_missing_data` ({0}), must be one of {1}"
                .format(evaluation_missing_data, allowed_values)
            )

        self._evaluation_missing_data = evaluation_missing_data

    @property
    def query(self):
        """Gets the query of this MonitoringQueryLanguageCondition.

        Monitoring Query Language (https://cloud.google.com/monitoring/mql) query that outputs a boolean stream.

        :return: The query of this MonitoringQueryLanguageCondition.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this MonitoringQueryLanguageCondition.

        Monitoring Query Language (https://cloud.google.com/monitoring/mql) query that outputs a boolean stream.

        :param query: The query of this MonitoringQueryLanguageCondition.
        :type query: str
        """

        self._query = query

    @property
    def trigger(self):
        """Gets the trigger of this MonitoringQueryLanguageCondition.


        :return: The trigger of this MonitoringQueryLanguageCondition.
        :rtype: Trigger
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this MonitoringQueryLanguageCondition.


        :param trigger: The trigger of this MonitoringQueryLanguageCondition.
        :type trigger: Trigger
        """

        self._trigger = trigger
