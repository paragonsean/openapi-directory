# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metric_range import MetricRange
from openapi_server.models.performance_threshold import PerformanceThreshold
from openapi_server import util


class WindowsBasedSli(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, good_bad_metric_filter: str=None, good_total_ratio_threshold: PerformanceThreshold=None, metric_mean_in_range: MetricRange=None, metric_sum_in_range: MetricRange=None, window_period: str=None):
        """WindowsBasedSli - a model defined in OpenAPI

        :param good_bad_metric_filter: The good_bad_metric_filter of this WindowsBasedSli.
        :param good_total_ratio_threshold: The good_total_ratio_threshold of this WindowsBasedSli.
        :param metric_mean_in_range: The metric_mean_in_range of this WindowsBasedSli.
        :param metric_sum_in_range: The metric_sum_in_range of this WindowsBasedSli.
        :param window_period: The window_period of this WindowsBasedSli.
        """
        self.openapi_types = {
            'good_bad_metric_filter': str,
            'good_total_ratio_threshold': PerformanceThreshold,
            'metric_mean_in_range': MetricRange,
            'metric_sum_in_range': MetricRange,
            'window_period': str
        }

        self.attribute_map = {
            'good_bad_metric_filter': 'goodBadMetricFilter',
            'good_total_ratio_threshold': 'goodTotalRatioThreshold',
            'metric_mean_in_range': 'metricMeanInRange',
            'metric_sum_in_range': 'metricSumInRange',
            'window_period': 'windowPeriod'
        }

        self._good_bad_metric_filter = good_bad_metric_filter
        self._good_total_ratio_threshold = good_total_ratio_threshold
        self._metric_mean_in_range = metric_mean_in_range
        self._metric_sum_in_range = metric_sum_in_range
        self._window_period = window_period

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WindowsBasedSli':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WindowsBasedSli of this WindowsBasedSli.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def good_bad_metric_filter(self):
        """Gets the good_bad_metric_filter of this WindowsBasedSli.

        A monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) specifying a TimeSeries with ValueType = BOOL. The window is good if any true values appear in the window.

        :return: The good_bad_metric_filter of this WindowsBasedSli.
        :rtype: str
        """
        return self._good_bad_metric_filter

    @good_bad_metric_filter.setter
    def good_bad_metric_filter(self, good_bad_metric_filter):
        """Sets the good_bad_metric_filter of this WindowsBasedSli.

        A monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) specifying a TimeSeries with ValueType = BOOL. The window is good if any true values appear in the window.

        :param good_bad_metric_filter: The good_bad_metric_filter of this WindowsBasedSli.
        :type good_bad_metric_filter: str
        """

        self._good_bad_metric_filter = good_bad_metric_filter

    @property
    def good_total_ratio_threshold(self):
        """Gets the good_total_ratio_threshold of this WindowsBasedSli.


        :return: The good_total_ratio_threshold of this WindowsBasedSli.
        :rtype: PerformanceThreshold
        """
        return self._good_total_ratio_threshold

    @good_total_ratio_threshold.setter
    def good_total_ratio_threshold(self, good_total_ratio_threshold):
        """Sets the good_total_ratio_threshold of this WindowsBasedSli.


        :param good_total_ratio_threshold: The good_total_ratio_threshold of this WindowsBasedSli.
        :type good_total_ratio_threshold: PerformanceThreshold
        """

        self._good_total_ratio_threshold = good_total_ratio_threshold

    @property
    def metric_mean_in_range(self):
        """Gets the metric_mean_in_range of this WindowsBasedSli.


        :return: The metric_mean_in_range of this WindowsBasedSli.
        :rtype: MetricRange
        """
        return self._metric_mean_in_range

    @metric_mean_in_range.setter
    def metric_mean_in_range(self, metric_mean_in_range):
        """Sets the metric_mean_in_range of this WindowsBasedSli.


        :param metric_mean_in_range: The metric_mean_in_range of this WindowsBasedSli.
        :type metric_mean_in_range: MetricRange
        """

        self._metric_mean_in_range = metric_mean_in_range

    @property
    def metric_sum_in_range(self):
        """Gets the metric_sum_in_range of this WindowsBasedSli.


        :return: The metric_sum_in_range of this WindowsBasedSli.
        :rtype: MetricRange
        """
        return self._metric_sum_in_range

    @metric_sum_in_range.setter
    def metric_sum_in_range(self, metric_sum_in_range):
        """Sets the metric_sum_in_range of this WindowsBasedSli.


        :param metric_sum_in_range: The metric_sum_in_range of this WindowsBasedSli.
        :type metric_sum_in_range: MetricRange
        """

        self._metric_sum_in_range = metric_sum_in_range

    @property
    def window_period(self):
        """Gets the window_period of this WindowsBasedSli.

        Duration over which window quality is evaluated. Must be an integer fraction of a day and at least 60s.

        :return: The window_period of this WindowsBasedSli.
        :rtype: str
        """
        return self._window_period

    @window_period.setter
    def window_period(self, window_period):
        """Sets the window_period of this WindowsBasedSli.

        Duration over which window quality is evaluated. Must be an integer fraction of a day and at least 60s.

        :param window_period: The window_period of this WindowsBasedSli.
        :type window_period: str
        """

        self._window_period = window_period
