# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Exponential(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, growth_factor: float=None, num_finite_buckets: int=None, scale: float=None):
        """Exponential - a model defined in OpenAPI

        :param growth_factor: The growth_factor of this Exponential.
        :param num_finite_buckets: The num_finite_buckets of this Exponential.
        :param scale: The scale of this Exponential.
        """
        self.openapi_types = {
            'growth_factor': float,
            'num_finite_buckets': int,
            'scale': float
        }

        self.attribute_map = {
            'growth_factor': 'growthFactor',
            'num_finite_buckets': 'numFiniteBuckets',
            'scale': 'scale'
        }

        self._growth_factor = growth_factor
        self._num_finite_buckets = num_finite_buckets
        self._scale = scale

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Exponential':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Exponential of this Exponential.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def growth_factor(self):
        """Gets the growth_factor of this Exponential.

        Must be greater than 1.

        :return: The growth_factor of this Exponential.
        :rtype: float
        """
        return self._growth_factor

    @growth_factor.setter
    def growth_factor(self, growth_factor):
        """Sets the growth_factor of this Exponential.

        Must be greater than 1.

        :param growth_factor: The growth_factor of this Exponential.
        :type growth_factor: float
        """

        self._growth_factor = growth_factor

    @property
    def num_finite_buckets(self):
        """Gets the num_finite_buckets of this Exponential.

        Must be greater than 0.

        :return: The num_finite_buckets of this Exponential.
        :rtype: int
        """
        return self._num_finite_buckets

    @num_finite_buckets.setter
    def num_finite_buckets(self, num_finite_buckets):
        """Sets the num_finite_buckets of this Exponential.

        Must be greater than 0.

        :param num_finite_buckets: The num_finite_buckets of this Exponential.
        :type num_finite_buckets: int
        """

        self._num_finite_buckets = num_finite_buckets

    @property
    def scale(self):
        """Gets the scale of this Exponential.

        Must be greater than 0.

        :return: The scale of this Exponential.
        :rtype: float
        """
        return self._scale

    @scale.setter
    def scale(self, scale):
        """Sets the scale of this Exponential.

        Must be greater than 0.

        :param scale: The scale of this Exponential.
        :type scale: float
        """

        self._scale = scale
