# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResourceGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group_id: str=None, resource_type: str=None):
        """ResourceGroup - a model defined in OpenAPI

        :param group_id: The group_id of this ResourceGroup.
        :param resource_type: The resource_type of this ResourceGroup.
        """
        self.openapi_types = {
            'group_id': str,
            'resource_type': str
        }

        self.attribute_map = {
            'group_id': 'groupId',
            'resource_type': 'resourceType'
        }

        self._group_id = group_id
        self._resource_type = resource_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceGroup of this ResourceGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_id(self):
        """Gets the group_id of this ResourceGroup.

        The group of resources being monitored. Should be only the [GROUP_ID], and not the full-path projects/[PROJECT_ID_OR_NUMBER]/groups/[GROUP_ID].

        :return: The group_id of this ResourceGroup.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this ResourceGroup.

        The group of resources being monitored. Should be only the [GROUP_ID], and not the full-path projects/[PROJECT_ID_OR_NUMBER]/groups/[GROUP_ID].

        :param group_id: The group_id of this ResourceGroup.
        :type group_id: str
        """

        self._group_id = group_id

    @property
    def resource_type(self):
        """Gets the resource_type of this ResourceGroup.

        The resource type of the group members.

        :return: The resource_type of this ResourceGroup.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this ResourceGroup.

        The resource type of the group members.

        :param resource_type: The resource_type of this ResourceGroup.
        :type resource_type: str
        """
        allowed_values = ["RESOURCE_TYPE_UNSPECIFIED", "INSTANCE", "AWS_ELB_LOAD_BALANCER"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type
