# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResponseStatusCode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status_class: str=None, status_value: int=None):
        """ResponseStatusCode - a model defined in OpenAPI

        :param status_class: The status_class of this ResponseStatusCode.
        :param status_value: The status_value of this ResponseStatusCode.
        """
        self.openapi_types = {
            'status_class': str,
            'status_value': int
        }

        self.attribute_map = {
            'status_class': 'statusClass',
            'status_value': 'statusValue'
        }

        self._status_class = status_class
        self._status_value = status_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResponseStatusCode':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResponseStatusCode of this ResponseStatusCode.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status_class(self):
        """Gets the status_class of this ResponseStatusCode.

        A class of status codes to accept.

        :return: The status_class of this ResponseStatusCode.
        :rtype: str
        """
        return self._status_class

    @status_class.setter
    def status_class(self, status_class):
        """Sets the status_class of this ResponseStatusCode.

        A class of status codes to accept.

        :param status_class: The status_class of this ResponseStatusCode.
        :type status_class: str
        """
        allowed_values = ["STATUS_CLASS_UNSPECIFIED", "STATUS_CLASS_1XX", "STATUS_CLASS_2XX", "STATUS_CLASS_3XX", "STATUS_CLASS_4XX", "STATUS_CLASS_5XX", "STATUS_CLASS_ANY"]  # noqa: E501
        if status_class not in allowed_values:
            raise ValueError(
                "Invalid value for `status_class` ({0}), must be one of {1}"
                .format(status_class, allowed_values)
            )

        self._status_class = status_class

    @property
    def status_value(self):
        """Gets the status_value of this ResponseStatusCode.

        A status code to accept.

        :return: The status_value of this ResponseStatusCode.
        :rtype: int
        """
        return self._status_value

    @status_value.setter
    def status_value(self, status_value):
        """Sets the status_value of this ResponseStatusCode.

        A status code to accept.

        :param status_value: The status_value of this ResponseStatusCode.
        :type status_value: int
        """

        self._status_value = status_value
