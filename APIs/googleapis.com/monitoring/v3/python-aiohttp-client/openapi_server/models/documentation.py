# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Documentation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None, mime_type: str=None, subject: str=None):
        """Documentation - a model defined in OpenAPI

        :param content: The content of this Documentation.
        :param mime_type: The mime_type of this Documentation.
        :param subject: The subject of this Documentation.
        """
        self.openapi_types = {
            'content': str,
            'mime_type': str,
            'subject': str
        }

        self.attribute_map = {
            'content': 'content',
            'mime_type': 'mimeType',
            'subject': 'subject'
        }

        self._content = content
        self._mime_type = mime_type
        self._subject = subject

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Documentation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Documentation of this Documentation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this Documentation.

        The body of the documentation, interpreted according to mime_type. The content may not exceed 8,192 Unicode characters and may not exceed more than 10,240 bytes when encoded in UTF-8 format, whichever is smaller. This text can be templatized by using variables (https://cloud.google.com/monitoring/alerts/doc-variables).

        :return: The content of this Documentation.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Documentation.

        The body of the documentation, interpreted according to mime_type. The content may not exceed 8,192 Unicode characters and may not exceed more than 10,240 bytes when encoded in UTF-8 format, whichever is smaller. This text can be templatized by using variables (https://cloud.google.com/monitoring/alerts/doc-variables).

        :param content: The content of this Documentation.
        :type content: str
        """

        self._content = content

    @property
    def mime_type(self):
        """Gets the mime_type of this Documentation.

        The format of the content field. Presently, only the value \"text/markdown\" is supported. See Markdown (https://en.wikipedia.org/wiki/Markdown) for more information.

        :return: The mime_type of this Documentation.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this Documentation.

        The format of the content field. Presently, only the value \"text/markdown\" is supported. See Markdown (https://en.wikipedia.org/wiki/Markdown) for more information.

        :param mime_type: The mime_type of this Documentation.
        :type mime_type: str
        """

        self._mime_type = mime_type

    @property
    def subject(self):
        """Gets the subject of this Documentation.

        Optional. The subject line of the notification. The subject line may not exceed 10,240 bytes. In notifications generated by this policy, the contents of the subject line after variable expansion will be truncated to 255 bytes or shorter at the latest UTF-8 character boundary. The 255-byte limit is recommended by this thread (https://stackoverflow.com/questions/1592291/what-is-the-email-subject-length-limit). It is both the limit imposed by some third-party ticketing products and it is common to define textual fields in databases as VARCHAR(255).The contents of the subject line can be templatized by using variables (https://cloud.google.com/monitoring/alerts/doc-variables). If this field is missing or empty, a default subject line will be generated.

        :return: The subject of this Documentation.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this Documentation.

        Optional. The subject line of the notification. The subject line may not exceed 10,240 bytes. In notifications generated by this policy, the contents of the subject line after variable expansion will be truncated to 255 bytes or shorter at the latest UTF-8 character boundary. The 255-byte limit is recommended by this thread (https://stackoverflow.com/questions/1592291/what-is-the-email-subject-length-limit). It is both the limit imposed by some third-party ticketing products and it is common to define textual fields in databases as VARCHAR(255).The contents of the subject line can be templatized by using variables (https://cloud.google.com/monitoring/alerts/doc-variables). If this field is missing or empty, a default subject line will be generated.

        :param subject: The subject of this Documentation.
        :type subject: str
        """

        self._subject = subject
