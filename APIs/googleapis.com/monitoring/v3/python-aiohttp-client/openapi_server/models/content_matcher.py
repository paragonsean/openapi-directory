# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.json_path_matcher import JsonPathMatcher
from openapi_server import util


class ContentMatcher(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None, json_path_matcher: JsonPathMatcher=None, matcher: str=None):
        """ContentMatcher - a model defined in OpenAPI

        :param content: The content of this ContentMatcher.
        :param json_path_matcher: The json_path_matcher of this ContentMatcher.
        :param matcher: The matcher of this ContentMatcher.
        """
        self.openapi_types = {
            'content': str,
            'json_path_matcher': JsonPathMatcher,
            'matcher': str
        }

        self.attribute_map = {
            'content': 'content',
            'json_path_matcher': 'jsonPathMatcher',
            'matcher': 'matcher'
        }

        self._content = content
        self._json_path_matcher = json_path_matcher
        self._matcher = matcher

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContentMatcher':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContentMatcher of this ContentMatcher.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this ContentMatcher.

        String, regex or JSON content to match. Maximum 1024 bytes. An empty content string indicates no content matching is to be performed.

        :return: The content of this ContentMatcher.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this ContentMatcher.

        String, regex or JSON content to match. Maximum 1024 bytes. An empty content string indicates no content matching is to be performed.

        :param content: The content of this ContentMatcher.
        :type content: str
        """

        self._content = content

    @property
    def json_path_matcher(self):
        """Gets the json_path_matcher of this ContentMatcher.


        :return: The json_path_matcher of this ContentMatcher.
        :rtype: JsonPathMatcher
        """
        return self._json_path_matcher

    @json_path_matcher.setter
    def json_path_matcher(self, json_path_matcher):
        """Sets the json_path_matcher of this ContentMatcher.


        :param json_path_matcher: The json_path_matcher of this ContentMatcher.
        :type json_path_matcher: JsonPathMatcher
        """

        self._json_path_matcher = json_path_matcher

    @property
    def matcher(self):
        """Gets the matcher of this ContentMatcher.

        The type of content matcher that will be applied to the server output, compared to the content string when the check is run.

        :return: The matcher of this ContentMatcher.
        :rtype: str
        """
        return self._matcher

    @matcher.setter
    def matcher(self, matcher):
        """Sets the matcher of this ContentMatcher.

        The type of content matcher that will be applied to the server output, compared to the content string when the check is run.

        :param matcher: The matcher of this ContentMatcher.
        :type matcher: str
        """
        allowed_values = ["CONTENT_MATCHER_OPTION_UNSPECIFIED", "CONTAINS_STRING", "NOT_CONTAINS_STRING", "MATCHES_REGEX", "NOT_MATCHES_REGEX", "MATCHES_JSON_PATH", "NOT_MATCHES_JSON_PATH"]  # noqa: E501
        if matcher not in allowed_values:
            raise ValueError(
                "Invalid value for `matcher` ({0}), must be one of {1}"
                .format(matcher, allowed_values)
            )

        self._matcher = matcher
