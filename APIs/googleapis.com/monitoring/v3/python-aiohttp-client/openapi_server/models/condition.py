# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.log_match import LogMatch
from openapi_server.models.metric_absence import MetricAbsence
from openapi_server.models.metric_threshold import MetricThreshold
from openapi_server.models.monitoring_query_language_condition import MonitoringQueryLanguageCondition
from openapi_server.models.prometheus_query_language_condition import PrometheusQueryLanguageCondition
from openapi_server import util


class Condition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, condition_absent: MetricAbsence=None, condition_matched_log: LogMatch=None, condition_monitoring_query_language: MonitoringQueryLanguageCondition=None, condition_prometheus_query_language: PrometheusQueryLanguageCondition=None, condition_threshold: MetricThreshold=None, display_name: str=None, name: str=None):
        """Condition - a model defined in OpenAPI

        :param condition_absent: The condition_absent of this Condition.
        :param condition_matched_log: The condition_matched_log of this Condition.
        :param condition_monitoring_query_language: The condition_monitoring_query_language of this Condition.
        :param condition_prometheus_query_language: The condition_prometheus_query_language of this Condition.
        :param condition_threshold: The condition_threshold of this Condition.
        :param display_name: The display_name of this Condition.
        :param name: The name of this Condition.
        """
        self.openapi_types = {
            'condition_absent': MetricAbsence,
            'condition_matched_log': LogMatch,
            'condition_monitoring_query_language': MonitoringQueryLanguageCondition,
            'condition_prometheus_query_language': PrometheusQueryLanguageCondition,
            'condition_threshold': MetricThreshold,
            'display_name': str,
            'name': str
        }

        self.attribute_map = {
            'condition_absent': 'conditionAbsent',
            'condition_matched_log': 'conditionMatchedLog',
            'condition_monitoring_query_language': 'conditionMonitoringQueryLanguage',
            'condition_prometheus_query_language': 'conditionPrometheusQueryLanguage',
            'condition_threshold': 'conditionThreshold',
            'display_name': 'displayName',
            'name': 'name'
        }

        self._condition_absent = condition_absent
        self._condition_matched_log = condition_matched_log
        self._condition_monitoring_query_language = condition_monitoring_query_language
        self._condition_prometheus_query_language = condition_prometheus_query_language
        self._condition_threshold = condition_threshold
        self._display_name = display_name
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Condition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Condition of this Condition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def condition_absent(self):
        """Gets the condition_absent of this Condition.


        :return: The condition_absent of this Condition.
        :rtype: MetricAbsence
        """
        return self._condition_absent

    @condition_absent.setter
    def condition_absent(self, condition_absent):
        """Sets the condition_absent of this Condition.


        :param condition_absent: The condition_absent of this Condition.
        :type condition_absent: MetricAbsence
        """

        self._condition_absent = condition_absent

    @property
    def condition_matched_log(self):
        """Gets the condition_matched_log of this Condition.


        :return: The condition_matched_log of this Condition.
        :rtype: LogMatch
        """
        return self._condition_matched_log

    @condition_matched_log.setter
    def condition_matched_log(self, condition_matched_log):
        """Sets the condition_matched_log of this Condition.


        :param condition_matched_log: The condition_matched_log of this Condition.
        :type condition_matched_log: LogMatch
        """

        self._condition_matched_log = condition_matched_log

    @property
    def condition_monitoring_query_language(self):
        """Gets the condition_monitoring_query_language of this Condition.


        :return: The condition_monitoring_query_language of this Condition.
        :rtype: MonitoringQueryLanguageCondition
        """
        return self._condition_monitoring_query_language

    @condition_monitoring_query_language.setter
    def condition_monitoring_query_language(self, condition_monitoring_query_language):
        """Sets the condition_monitoring_query_language of this Condition.


        :param condition_monitoring_query_language: The condition_monitoring_query_language of this Condition.
        :type condition_monitoring_query_language: MonitoringQueryLanguageCondition
        """

        self._condition_monitoring_query_language = condition_monitoring_query_language

    @property
    def condition_prometheus_query_language(self):
        """Gets the condition_prometheus_query_language of this Condition.


        :return: The condition_prometheus_query_language of this Condition.
        :rtype: PrometheusQueryLanguageCondition
        """
        return self._condition_prometheus_query_language

    @condition_prometheus_query_language.setter
    def condition_prometheus_query_language(self, condition_prometheus_query_language):
        """Sets the condition_prometheus_query_language of this Condition.


        :param condition_prometheus_query_language: The condition_prometheus_query_language of this Condition.
        :type condition_prometheus_query_language: PrometheusQueryLanguageCondition
        """

        self._condition_prometheus_query_language = condition_prometheus_query_language

    @property
    def condition_threshold(self):
        """Gets the condition_threshold of this Condition.


        :return: The condition_threshold of this Condition.
        :rtype: MetricThreshold
        """
        return self._condition_threshold

    @condition_threshold.setter
    def condition_threshold(self, condition_threshold):
        """Sets the condition_threshold of this Condition.


        :param condition_threshold: The condition_threshold of this Condition.
        :type condition_threshold: MetricThreshold
        """

        self._condition_threshold = condition_threshold

    @property
    def display_name(self):
        """Gets the display_name of this Condition.

        A short name or phrase used to identify the condition in dashboards, notifications, and incidents. To avoid confusion, don't use the same display name for multiple conditions in the same policy.

        :return: The display_name of this Condition.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Condition.

        A short name or phrase used to identify the condition in dashboards, notifications, and incidents. To avoid confusion, don't use the same display name for multiple conditions in the same policy.

        :param display_name: The display_name of this Condition.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def name(self):
        """Gets the name of this Condition.

        Required if the condition exists. The unique resource name for this condition. Its format is: projects/[PROJECT_ID_OR_NUMBER]/alertPolicies/[POLICY_ID]/conditions/[CONDITION_ID] [CONDITION_ID] is assigned by Cloud Monitoring when the condition is created as part of a new or updated alerting policy.When calling the alertPolicies.create method, do not include the name field in the conditions of the requested alerting policy. Cloud Monitoring creates the condition identifiers and includes them in the new policy.When calling the alertPolicies.update method to update a policy, including a condition name causes the existing condition to be updated. Conditions without names are added to the updated policy. Existing conditions are deleted if they are not updated.Best practice is to preserve [CONDITION_ID] if you make only small changes, such as those to condition thresholds, durations, or trigger values. Otherwise, treat the change as a new condition and let the existing condition be deleted.

        :return: The name of this Condition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Condition.

        Required if the condition exists. The unique resource name for this condition. Its format is: projects/[PROJECT_ID_OR_NUMBER]/alertPolicies/[POLICY_ID]/conditions/[CONDITION_ID] [CONDITION_ID] is assigned by Cloud Monitoring when the condition is created as part of a new or updated alerting policy.When calling the alertPolicies.create method, do not include the name field in the conditions of the requested alerting policy. Cloud Monitoring creates the condition identifiers and includes them in the new policy.When calling the alertPolicies.update method to update a policy, including a condition name causes the existing condition to be updated. Conditions without names are added to the updated policy. Existing conditions are deleted if they are not updated.Best practice is to preserve [CONDITION_ID] if you make only small changes, such as those to condition thresholds, durations, or trigger values. Otherwise, treat the change as a new condition and let the existing condition be deleted.

        :param name: The name of this Condition.
        :type name: str
        """

        self._name = name
