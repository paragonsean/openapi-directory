# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bucket_options import BucketOptions
from openapi_server.models.exemplar import Exemplar
from openapi_server.models.range import Range
from openapi_server import util


class Distribution(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket_counts: List[str]=None, bucket_options: BucketOptions=None, count: str=None, exemplars: List[Exemplar]=None, mean: float=None, range: Range=None, sum_of_squared_deviation: float=None):
        """Distribution - a model defined in OpenAPI

        :param bucket_counts: The bucket_counts of this Distribution.
        :param bucket_options: The bucket_options of this Distribution.
        :param count: The count of this Distribution.
        :param exemplars: The exemplars of this Distribution.
        :param mean: The mean of this Distribution.
        :param range: The range of this Distribution.
        :param sum_of_squared_deviation: The sum_of_squared_deviation of this Distribution.
        """
        self.openapi_types = {
            'bucket_counts': List[str],
            'bucket_options': BucketOptions,
            'count': str,
            'exemplars': List[Exemplar],
            'mean': float,
            'range': Range,
            'sum_of_squared_deviation': float
        }

        self.attribute_map = {
            'bucket_counts': 'bucketCounts',
            'bucket_options': 'bucketOptions',
            'count': 'count',
            'exemplars': 'exemplars',
            'mean': 'mean',
            'range': 'range',
            'sum_of_squared_deviation': 'sumOfSquaredDeviation'
        }

        self._bucket_counts = bucket_counts
        self._bucket_options = bucket_options
        self._count = count
        self._exemplars = exemplars
        self._mean = mean
        self._range = range
        self._sum_of_squared_deviation = sum_of_squared_deviation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Distribution':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Distribution of this Distribution.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket_counts(self):
        """Gets the bucket_counts of this Distribution.

        Required in the Cloud Monitoring API v3. The values for each bucket specified in bucket_options. The sum of the values in bucketCounts must equal the value in the count field of the Distribution object. The order of the bucket counts follows the numbering schemes described for the three bucket types. The underflow bucket has number 0; the finite buckets, if any, have numbers 1 through N-2; and the overflow bucket has number N-1. The size of bucket_counts must not be greater than N. If the size is less than N, then the remaining buckets are assigned values of zero.

        :return: The bucket_counts of this Distribution.
        :rtype: List[str]
        """
        return self._bucket_counts

    @bucket_counts.setter
    def bucket_counts(self, bucket_counts):
        """Sets the bucket_counts of this Distribution.

        Required in the Cloud Monitoring API v3. The values for each bucket specified in bucket_options. The sum of the values in bucketCounts must equal the value in the count field of the Distribution object. The order of the bucket counts follows the numbering schemes described for the three bucket types. The underflow bucket has number 0; the finite buckets, if any, have numbers 1 through N-2; and the overflow bucket has number N-1. The size of bucket_counts must not be greater than N. If the size is less than N, then the remaining buckets are assigned values of zero.

        :param bucket_counts: The bucket_counts of this Distribution.
        :type bucket_counts: List[str]
        """

        self._bucket_counts = bucket_counts

    @property
    def bucket_options(self):
        """Gets the bucket_options of this Distribution.


        :return: The bucket_options of this Distribution.
        :rtype: BucketOptions
        """
        return self._bucket_options

    @bucket_options.setter
    def bucket_options(self, bucket_options):
        """Sets the bucket_options of this Distribution.


        :param bucket_options: The bucket_options of this Distribution.
        :type bucket_options: BucketOptions
        """

        self._bucket_options = bucket_options

    @property
    def count(self):
        """Gets the count of this Distribution.

        The number of values in the population. Must be non-negative. This value must equal the sum of the values in bucket_counts if a histogram is provided.

        :return: The count of this Distribution.
        :rtype: str
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Distribution.

        The number of values in the population. Must be non-negative. This value must equal the sum of the values in bucket_counts if a histogram is provided.

        :param count: The count of this Distribution.
        :type count: str
        """

        self._count = count

    @property
    def exemplars(self):
        """Gets the exemplars of this Distribution.

        Must be in increasing order of value field.

        :return: The exemplars of this Distribution.
        :rtype: List[Exemplar]
        """
        return self._exemplars

    @exemplars.setter
    def exemplars(self, exemplars):
        """Sets the exemplars of this Distribution.

        Must be in increasing order of value field.

        :param exemplars: The exemplars of this Distribution.
        :type exemplars: List[Exemplar]
        """

        self._exemplars = exemplars

    @property
    def mean(self):
        """Gets the mean of this Distribution.

        The arithmetic mean of the values in the population. If count is zero then this field must be zero.

        :return: The mean of this Distribution.
        :rtype: float
        """
        return self._mean

    @mean.setter
    def mean(self, mean):
        """Sets the mean of this Distribution.

        The arithmetic mean of the values in the population. If count is zero then this field must be zero.

        :param mean: The mean of this Distribution.
        :type mean: float
        """

        self._mean = mean

    @property
    def range(self):
        """Gets the range of this Distribution.


        :return: The range of this Distribution.
        :rtype: Range
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this Distribution.


        :param range: The range of this Distribution.
        :type range: Range
        """

        self._range = range

    @property
    def sum_of_squared_deviation(self):
        """Gets the sum_of_squared_deviation of this Distribution.

        The sum of squared deviations from the mean of the values in the population. For values x_i this is: Sum[i=1..n]((x_i - mean)^2) Knuth, \"The Art of Computer Programming\", Vol. 2, page 232, 3rd edition describes Welford's method for accumulating this sum in one pass.If count is zero then this field must be zero.

        :return: The sum_of_squared_deviation of this Distribution.
        :rtype: float
        """
        return self._sum_of_squared_deviation

    @sum_of_squared_deviation.setter
    def sum_of_squared_deviation(self, sum_of_squared_deviation):
        """Sets the sum_of_squared_deviation of this Distribution.

        The sum of squared deviations from the mean of the values in the population. For values x_i this is: Sum[i=1..n]((x_i - mean)^2) Knuth, \"The Art of Computer Programming\", Vol. 2, page 232, 3rd edition describes Welford's method for accumulating this sum in one pass.If count is zero then this field must be zero.

        :param sum_of_squared_deviation: The sum_of_squared_deviation of this Distribution.
        :type sum_of_squared_deviation: float
        """

        self._sum_of_squared_deviation = sum_of_squared_deviation
