# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.typed_value import TypedValue
from openapi_server import util


class CollectdValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_source_name: str=None, data_source_type: str=None, value: TypedValue=None):
        """CollectdValue - a model defined in OpenAPI

        :param data_source_name: The data_source_name of this CollectdValue.
        :param data_source_type: The data_source_type of this CollectdValue.
        :param value: The value of this CollectdValue.
        """
        self.openapi_types = {
            'data_source_name': str,
            'data_source_type': str,
            'value': TypedValue
        }

        self.attribute_map = {
            'data_source_name': 'dataSourceName',
            'data_source_type': 'dataSourceType',
            'value': 'value'
        }

        self._data_source_name = data_source_name
        self._data_source_type = data_source_type
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CollectdValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CollectdValue of this CollectdValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_source_name(self):
        """Gets the data_source_name of this CollectdValue.

        The data source for the collectd value. For example, there are two data sources for network measurements: \"rx\" and \"tx\".

        :return: The data_source_name of this CollectdValue.
        :rtype: str
        """
        return self._data_source_name

    @data_source_name.setter
    def data_source_name(self, data_source_name):
        """Sets the data_source_name of this CollectdValue.

        The data source for the collectd value. For example, there are two data sources for network measurements: \"rx\" and \"tx\".

        :param data_source_name: The data_source_name of this CollectdValue.
        :type data_source_name: str
        """

        self._data_source_name = data_source_name

    @property
    def data_source_type(self):
        """Gets the data_source_type of this CollectdValue.

        The type of measurement.

        :return: The data_source_type of this CollectdValue.
        :rtype: str
        """
        return self._data_source_type

    @data_source_type.setter
    def data_source_type(self, data_source_type):
        """Sets the data_source_type of this CollectdValue.

        The type of measurement.

        :param data_source_type: The data_source_type of this CollectdValue.
        :type data_source_type: str
        """
        allowed_values = ["UNSPECIFIED_DATA_SOURCE_TYPE", "GAUGE", "COUNTER", "DERIVE", "ABSOLUTE"]  # noqa: E501
        if data_source_type not in allowed_values:
            raise ValueError(
                "Invalid value for `data_source_type` ({0}), must be one of {1}"
                .format(data_source_type, allowed_values)
            )

        self._data_source_type = data_source_type

    @property
    def value(self):
        """Gets the value of this CollectdValue.


        :return: The value of this CollectdValue.
        :rtype: TypedValue
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CollectdValue.


        :param value: The value of this CollectdValue.
        :type value: TypedValue
        """

        self._value = value
