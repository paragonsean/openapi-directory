# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GkeService(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_name: str=None, location: str=None, namespace_name: str=None, project_id: str=None, service_name: str=None):
        """GkeService - a model defined in OpenAPI

        :param cluster_name: The cluster_name of this GkeService.
        :param location: The location of this GkeService.
        :param namespace_name: The namespace_name of this GkeService.
        :param project_id: The project_id of this GkeService.
        :param service_name: The service_name of this GkeService.
        """
        self.openapi_types = {
            'cluster_name': str,
            'location': str,
            'namespace_name': str,
            'project_id': str,
            'service_name': str
        }

        self.attribute_map = {
            'cluster_name': 'clusterName',
            'location': 'location',
            'namespace_name': 'namespaceName',
            'project_id': 'projectId',
            'service_name': 'serviceName'
        }

        self._cluster_name = cluster_name
        self._location = location
        self._namespace_name = namespace_name
        self._project_id = project_id
        self._service_name = service_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GkeService':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GkeService of this GkeService.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_name(self):
        """Gets the cluster_name of this GkeService.

        The name of the parent cluster.

        :return: The cluster_name of this GkeService.
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this GkeService.

        The name of the parent cluster.

        :param cluster_name: The cluster_name of this GkeService.
        :type cluster_name: str
        """

        self._cluster_name = cluster_name

    @property
    def location(self):
        """Gets the location of this GkeService.

        The location of the parent cluster. This may be a zone or region.

        :return: The location of this GkeService.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this GkeService.

        The location of the parent cluster. This may be a zone or region.

        :param location: The location of this GkeService.
        :type location: str
        """

        self._location = location

    @property
    def namespace_name(self):
        """Gets the namespace_name of this GkeService.

        The name of the parent namespace.

        :return: The namespace_name of this GkeService.
        :rtype: str
        """
        return self._namespace_name

    @namespace_name.setter
    def namespace_name(self, namespace_name):
        """Sets the namespace_name of this GkeService.

        The name of the parent namespace.

        :param namespace_name: The namespace_name of this GkeService.
        :type namespace_name: str
        """

        self._namespace_name = namespace_name

    @property
    def project_id(self):
        """Gets the project_id of this GkeService.

        Output only. The project this resource lives in. For legacy services migrated from the Custom type, this may be a distinct project from the one parenting the service itself.

        :return: The project_id of this GkeService.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this GkeService.

        Output only. The project this resource lives in. For legacy services migrated from the Custom type, this may be a distinct project from the one parenting the service itself.

        :param project_id: The project_id of this GkeService.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def service_name(self):
        """Gets the service_name of this GkeService.

        The name of this service.

        :return: The service_name of this GkeService.
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this GkeService.

        The name of this service.

        :param service_name: The service_name of this GkeService.
        :type service_name: str
        """

        self._service_name = service_name
