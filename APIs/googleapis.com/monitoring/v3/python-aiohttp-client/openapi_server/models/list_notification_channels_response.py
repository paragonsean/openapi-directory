# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.notification_channel import NotificationChannel
from openapi_server import util


class ListNotificationChannelsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, next_page_token: str=None, notification_channels: List[NotificationChannel]=None, total_size: int=None):
        """ListNotificationChannelsResponse - a model defined in OpenAPI

        :param next_page_token: The next_page_token of this ListNotificationChannelsResponse.
        :param notification_channels: The notification_channels of this ListNotificationChannelsResponse.
        :param total_size: The total_size of this ListNotificationChannelsResponse.
        """
        self.openapi_types = {
            'next_page_token': str,
            'notification_channels': List[NotificationChannel],
            'total_size': int
        }

        self.attribute_map = {
            'next_page_token': 'nextPageToken',
            'notification_channels': 'notificationChannels',
            'total_size': 'totalSize'
        }

        self._next_page_token = next_page_token
        self._notification_channels = notification_channels
        self._total_size = total_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListNotificationChannelsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListNotificationChannelsResponse of this ListNotificationChannelsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def next_page_token(self):
        """Gets the next_page_token of this ListNotificationChannelsResponse.

        If not empty, indicates that there may be more results that match the request. Use the value in the page_token field in a subsequent request to fetch the next set of results. If empty, all results have been returned.

        :return: The next_page_token of this ListNotificationChannelsResponse.
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this ListNotificationChannelsResponse.

        If not empty, indicates that there may be more results that match the request. Use the value in the page_token field in a subsequent request to fetch the next set of results. If empty, all results have been returned.

        :param next_page_token: The next_page_token of this ListNotificationChannelsResponse.
        :type next_page_token: str
        """

        self._next_page_token = next_page_token

    @property
    def notification_channels(self):
        """Gets the notification_channels of this ListNotificationChannelsResponse.

        The notification channels defined for the specified project.

        :return: The notification_channels of this ListNotificationChannelsResponse.
        :rtype: List[NotificationChannel]
        """
        return self._notification_channels

    @notification_channels.setter
    def notification_channels(self, notification_channels):
        """Sets the notification_channels of this ListNotificationChannelsResponse.

        The notification channels defined for the specified project.

        :param notification_channels: The notification_channels of this ListNotificationChannelsResponse.
        :type notification_channels: List[NotificationChannel]
        """

        self._notification_channels = notification_channels

    @property
    def total_size(self):
        """Gets the total_size of this ListNotificationChannelsResponse.

        The total number of notification channels in all pages. This number is only an estimate, and may change in subsequent pages. https://aip.dev/158

        :return: The total_size of this ListNotificationChannelsResponse.
        :rtype: int
        """
        return self._total_size

    @total_size.setter
    def total_size(self, total_size):
        """Sets the total_size of this ListNotificationChannelsResponse.

        The total number of notification channels in all pages. This number is only an estimate, and may change in subsequent pages. https://aip.dev/158

        :param total_size: The total_size of this ListNotificationChannelsResponse.
        :type total_size: int
        """

        self._total_size = total_size
