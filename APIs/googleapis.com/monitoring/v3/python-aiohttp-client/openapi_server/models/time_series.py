# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metric import Metric
from openapi_server.models.monitored_resource import MonitoredResource
from openapi_server.models.monitored_resource_metadata import MonitoredResourceMetadata
from openapi_server.models.point import Point
from openapi_server import util


class TimeSeries(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metadata: MonitoredResourceMetadata=None, metric: Metric=None, metric_kind: str=None, points: List[Point]=None, resource: MonitoredResource=None, unit: str=None, value_type: str=None):
        """TimeSeries - a model defined in OpenAPI

        :param metadata: The metadata of this TimeSeries.
        :param metric: The metric of this TimeSeries.
        :param metric_kind: The metric_kind of this TimeSeries.
        :param points: The points of this TimeSeries.
        :param resource: The resource of this TimeSeries.
        :param unit: The unit of this TimeSeries.
        :param value_type: The value_type of this TimeSeries.
        """
        self.openapi_types = {
            'metadata': MonitoredResourceMetadata,
            'metric': Metric,
            'metric_kind': str,
            'points': List[Point],
            'resource': MonitoredResource,
            'unit': str,
            'value_type': str
        }

        self.attribute_map = {
            'metadata': 'metadata',
            'metric': 'metric',
            'metric_kind': 'metricKind',
            'points': 'points',
            'resource': 'resource',
            'unit': 'unit',
            'value_type': 'valueType'
        }

        self._metadata = metadata
        self._metric = metric
        self._metric_kind = metric_kind
        self._points = points
        self._resource = resource
        self._unit = unit
        self._value_type = value_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimeSeries':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimeSeries of this TimeSeries.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metadata(self):
        """Gets the metadata of this TimeSeries.


        :return: The metadata of this TimeSeries.
        :rtype: MonitoredResourceMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this TimeSeries.


        :param metadata: The metadata of this TimeSeries.
        :type metadata: MonitoredResourceMetadata
        """

        self._metadata = metadata

    @property
    def metric(self):
        """Gets the metric of this TimeSeries.


        :return: The metric of this TimeSeries.
        :rtype: Metric
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this TimeSeries.


        :param metric: The metric of this TimeSeries.
        :type metric: Metric
        """

        self._metric = metric

    @property
    def metric_kind(self):
        """Gets the metric_kind of this TimeSeries.

        The metric kind of the time series. When listing time series, this metric kind might be different from the metric kind of the associated metric if this time series is an alignment or reduction of other time series.When creating a time series, this field is optional. If present, it must be the same as the metric kind of the associated metric. If the associated metric's descriptor must be auto-created, then this field specifies the metric kind of the new descriptor and must be either GAUGE (the default) or CUMULATIVE.

        :return: The metric_kind of this TimeSeries.
        :rtype: str
        """
        return self._metric_kind

    @metric_kind.setter
    def metric_kind(self, metric_kind):
        """Sets the metric_kind of this TimeSeries.

        The metric kind of the time series. When listing time series, this metric kind might be different from the metric kind of the associated metric if this time series is an alignment or reduction of other time series.When creating a time series, this field is optional. If present, it must be the same as the metric kind of the associated metric. If the associated metric's descriptor must be auto-created, then this field specifies the metric kind of the new descriptor and must be either GAUGE (the default) or CUMULATIVE.

        :param metric_kind: The metric_kind of this TimeSeries.
        :type metric_kind: str
        """
        allowed_values = ["METRIC_KIND_UNSPECIFIED", "GAUGE", "DELTA", "CUMULATIVE"]  # noqa: E501
        if metric_kind not in allowed_values:
            raise ValueError(
                "Invalid value for `metric_kind` ({0}), must be one of {1}"
                .format(metric_kind, allowed_values)
            )

        self._metric_kind = metric_kind

    @property
    def points(self):
        """Gets the points of this TimeSeries.

        The data points of this time series. When listing time series, points are returned in reverse time order.When creating a time series, this field must contain exactly one point and the point's type must be the same as the value type of the associated metric. If the associated metric's descriptor must be auto-created, then the value type of the descriptor is determined by the point's type, which must be BOOL, INT64, DOUBLE, or DISTRIBUTION.

        :return: The points of this TimeSeries.
        :rtype: List[Point]
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this TimeSeries.

        The data points of this time series. When listing time series, points are returned in reverse time order.When creating a time series, this field must contain exactly one point and the point's type must be the same as the value type of the associated metric. If the associated metric's descriptor must be auto-created, then the value type of the descriptor is determined by the point's type, which must be BOOL, INT64, DOUBLE, or DISTRIBUTION.

        :param points: The points of this TimeSeries.
        :type points: List[Point]
        """

        self._points = points

    @property
    def resource(self):
        """Gets the resource of this TimeSeries.


        :return: The resource of this TimeSeries.
        :rtype: MonitoredResource
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this TimeSeries.


        :param resource: The resource of this TimeSeries.
        :type resource: MonitoredResource
        """

        self._resource = resource

    @property
    def unit(self):
        """Gets the unit of this TimeSeries.

        The units in which the metric value is reported. It is only applicable if the value_type is INT64, DOUBLE, or DISTRIBUTION. The unit defines the representation of the stored metric values.

        :return: The unit of this TimeSeries.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this TimeSeries.

        The units in which the metric value is reported. It is only applicable if the value_type is INT64, DOUBLE, or DISTRIBUTION. The unit defines the representation of the stored metric values.

        :param unit: The unit of this TimeSeries.
        :type unit: str
        """

        self._unit = unit

    @property
    def value_type(self):
        """Gets the value_type of this TimeSeries.

        The value type of the time series. When listing time series, this value type might be different from the value type of the associated metric if this time series is an alignment or reduction of other time series.When creating a time series, this field is optional. If present, it must be the same as the type of the data in the points field.

        :return: The value_type of this TimeSeries.
        :rtype: str
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type):
        """Sets the value_type of this TimeSeries.

        The value type of the time series. When listing time series, this value type might be different from the value type of the associated metric if this time series is an alignment or reduction of other time series.When creating a time series, this field is optional. If present, it must be the same as the type of the data in the points field.

        :param value_type: The value_type of this TimeSeries.
        :type value_type: str
        """
        allowed_values = ["VALUE_TYPE_UNSPECIFIED", "BOOL", "INT64", "DOUBLE", "STRING", "DISTRIBUTION", "MONEY"]  # noqa: E501
        if value_type not in allowed_values:
            raise ValueError(
                "Invalid value for `value_type` ({0}), must be one of {1}"
                .format(value_type, allowed_values)
            )

        self._value_type = value_type
