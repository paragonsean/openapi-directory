# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.status import Status
from openapi_server.models.time_series import TimeSeries
from openapi_server import util


class ListTimeSeriesResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, execution_errors: List[Status]=None, next_page_token: str=None, time_series: List[TimeSeries]=None, unit: str=None):
        """ListTimeSeriesResponse - a model defined in OpenAPI

        :param execution_errors: The execution_errors of this ListTimeSeriesResponse.
        :param next_page_token: The next_page_token of this ListTimeSeriesResponse.
        :param time_series: The time_series of this ListTimeSeriesResponse.
        :param unit: The unit of this ListTimeSeriesResponse.
        """
        self.openapi_types = {
            'execution_errors': List[Status],
            'next_page_token': str,
            'time_series': List[TimeSeries],
            'unit': str
        }

        self.attribute_map = {
            'execution_errors': 'executionErrors',
            'next_page_token': 'nextPageToken',
            'time_series': 'timeSeries',
            'unit': 'unit'
        }

        self._execution_errors = execution_errors
        self._next_page_token = next_page_token
        self._time_series = time_series
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListTimeSeriesResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListTimeSeriesResponse of this ListTimeSeriesResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def execution_errors(self):
        """Gets the execution_errors of this ListTimeSeriesResponse.

        Query execution errors that may have caused the time series data returned to be incomplete.

        :return: The execution_errors of this ListTimeSeriesResponse.
        :rtype: List[Status]
        """
        return self._execution_errors

    @execution_errors.setter
    def execution_errors(self, execution_errors):
        """Sets the execution_errors of this ListTimeSeriesResponse.

        Query execution errors that may have caused the time series data returned to be incomplete.

        :param execution_errors: The execution_errors of this ListTimeSeriesResponse.
        :type execution_errors: List[Status]
        """

        self._execution_errors = execution_errors

    @property
    def next_page_token(self):
        """Gets the next_page_token of this ListTimeSeriesResponse.

        If there are more results than have been returned, then this field is set to a non-empty value. To see the additional results, use that value as page_token in the next call to this method.

        :return: The next_page_token of this ListTimeSeriesResponse.
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this ListTimeSeriesResponse.

        If there are more results than have been returned, then this field is set to a non-empty value. To see the additional results, use that value as page_token in the next call to this method.

        :param next_page_token: The next_page_token of this ListTimeSeriesResponse.
        :type next_page_token: str
        """

        self._next_page_token = next_page_token

    @property
    def time_series(self):
        """Gets the time_series of this ListTimeSeriesResponse.

        One or more time series that match the filter included in the request.

        :return: The time_series of this ListTimeSeriesResponse.
        :rtype: List[TimeSeries]
        """
        return self._time_series

    @time_series.setter
    def time_series(self, time_series):
        """Sets the time_series of this ListTimeSeriesResponse.

        One or more time series that match the filter included in the request.

        :param time_series: The time_series of this ListTimeSeriesResponse.
        :type time_series: List[TimeSeries]
        """

        self._time_series = time_series

    @property
    def unit(self):
        """Gets the unit of this ListTimeSeriesResponse.

        The unit in which all time_series point values are reported. unit follows the UCUM format for units as seen in https://unitsofmeasure.org/ucum.html. If different time_series have different units (for example, because they come from different metric types, or a unit is absent), then unit will be \"{not_a_unit}\".

        :return: The unit of this ListTimeSeriesResponse.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this ListTimeSeriesResponse.

        The unit in which all time_series point values are reported. unit follows the UCUM format for units as seen in https://unitsofmeasure.org/ucum.html. If different time_series have different units (for example, because they come from different metric types, or a unit is absent), then unit will be \"{not_a_unit}\".

        :param unit: The unit of this ListTimeSeriesResponse.
        :type unit: str
        """

        self._unit = unit
