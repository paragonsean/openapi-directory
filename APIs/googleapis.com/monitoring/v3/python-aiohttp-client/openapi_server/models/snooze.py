# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.criteria import Criteria
from openapi_server.models.time_interval import TimeInterval
from openapi_server import util


class Snooze(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, criteria: Criteria=None, display_name: str=None, interval: TimeInterval=None, name: str=None):
        """Snooze - a model defined in OpenAPI

        :param criteria: The criteria of this Snooze.
        :param display_name: The display_name of this Snooze.
        :param interval: The interval of this Snooze.
        :param name: The name of this Snooze.
        """
        self.openapi_types = {
            'criteria': Criteria,
            'display_name': str,
            'interval': TimeInterval,
            'name': str
        }

        self.attribute_map = {
            'criteria': 'criteria',
            'display_name': 'displayName',
            'interval': 'interval',
            'name': 'name'
        }

        self._criteria = criteria
        self._display_name = display_name
        self._interval = interval
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Snooze':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Snooze of this Snooze.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def criteria(self):
        """Gets the criteria of this Snooze.


        :return: The criteria of this Snooze.
        :rtype: Criteria
        """
        return self._criteria

    @criteria.setter
    def criteria(self, criteria):
        """Sets the criteria of this Snooze.


        :param criteria: The criteria of this Snooze.
        :type criteria: Criteria
        """

        self._criteria = criteria

    @property
    def display_name(self):
        """Gets the display_name of this Snooze.

        Required. A display name for the Snooze. This can be, at most, 512 unicode characters.

        :return: The display_name of this Snooze.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Snooze.

        Required. A display name for the Snooze. This can be, at most, 512 unicode characters.

        :param display_name: The display_name of this Snooze.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def interval(self):
        """Gets the interval of this Snooze.


        :return: The interval of this Snooze.
        :rtype: TimeInterval
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this Snooze.


        :param interval: The interval of this Snooze.
        :type interval: TimeInterval
        """

        self._interval = interval

    @property
    def name(self):
        """Gets the name of this Snooze.

        Required. The name of the Snooze. The format is: projects/[PROJECT_ID_OR_NUMBER]/snoozes/[SNOOZE_ID] The ID of the Snooze will be generated by the system.

        :return: The name of this Snooze.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Snooze.

        Required. The name of the Snooze. The format is: projects/[PROJECT_ID_OR_NUMBER]/snoozes/[SNOOZE_ID] The ID of the Snooze will be generated by the system.

        :param name: The name of this Snooze.
        :type name: str
        """

        self._name = name
