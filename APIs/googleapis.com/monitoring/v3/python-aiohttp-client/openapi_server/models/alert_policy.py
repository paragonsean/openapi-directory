# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.alert_strategy import AlertStrategy
from openapi_server.models.condition import Condition
from openapi_server.models.documentation import Documentation
from openapi_server.models.mutation_record import MutationRecord
from openapi_server.models.status import Status
from openapi_server import util


class AlertPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alert_strategy: AlertStrategy=None, combiner: str=None, conditions: List[Condition]=None, creation_record: MutationRecord=None, display_name: str=None, documentation: Documentation=None, enabled: bool=None, mutation_record: MutationRecord=None, name: str=None, notification_channels: List[str]=None, severity: str=None, user_labels: Dict[str, str]=None, validity: Status=None):
        """AlertPolicy - a model defined in OpenAPI

        :param alert_strategy: The alert_strategy of this AlertPolicy.
        :param combiner: The combiner of this AlertPolicy.
        :param conditions: The conditions of this AlertPolicy.
        :param creation_record: The creation_record of this AlertPolicy.
        :param display_name: The display_name of this AlertPolicy.
        :param documentation: The documentation of this AlertPolicy.
        :param enabled: The enabled of this AlertPolicy.
        :param mutation_record: The mutation_record of this AlertPolicy.
        :param name: The name of this AlertPolicy.
        :param notification_channels: The notification_channels of this AlertPolicy.
        :param severity: The severity of this AlertPolicy.
        :param user_labels: The user_labels of this AlertPolicy.
        :param validity: The validity of this AlertPolicy.
        """
        self.openapi_types = {
            'alert_strategy': AlertStrategy,
            'combiner': str,
            'conditions': List[Condition],
            'creation_record': MutationRecord,
            'display_name': str,
            'documentation': Documentation,
            'enabled': bool,
            'mutation_record': MutationRecord,
            'name': str,
            'notification_channels': List[str],
            'severity': str,
            'user_labels': Dict[str, str],
            'validity': Status
        }

        self.attribute_map = {
            'alert_strategy': 'alertStrategy',
            'combiner': 'combiner',
            'conditions': 'conditions',
            'creation_record': 'creationRecord',
            'display_name': 'displayName',
            'documentation': 'documentation',
            'enabled': 'enabled',
            'mutation_record': 'mutationRecord',
            'name': 'name',
            'notification_channels': 'notificationChannels',
            'severity': 'severity',
            'user_labels': 'userLabels',
            'validity': 'validity'
        }

        self._alert_strategy = alert_strategy
        self._combiner = combiner
        self._conditions = conditions
        self._creation_record = creation_record
        self._display_name = display_name
        self._documentation = documentation
        self._enabled = enabled
        self._mutation_record = mutation_record
        self._name = name
        self._notification_channels = notification_channels
        self._severity = severity
        self._user_labels = user_labels
        self._validity = validity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlertPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AlertPolicy of this AlertPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alert_strategy(self):
        """Gets the alert_strategy of this AlertPolicy.


        :return: The alert_strategy of this AlertPolicy.
        :rtype: AlertStrategy
        """
        return self._alert_strategy

    @alert_strategy.setter
    def alert_strategy(self, alert_strategy):
        """Sets the alert_strategy of this AlertPolicy.


        :param alert_strategy: The alert_strategy of this AlertPolicy.
        :type alert_strategy: AlertStrategy
        """

        self._alert_strategy = alert_strategy

    @property
    def combiner(self):
        """Gets the combiner of this AlertPolicy.

        How to combine the results of multiple conditions to determine if an incident should be opened. If condition_time_series_query_language is present, this must be COMBINE_UNSPECIFIED.

        :return: The combiner of this AlertPolicy.
        :rtype: str
        """
        return self._combiner

    @combiner.setter
    def combiner(self, combiner):
        """Sets the combiner of this AlertPolicy.

        How to combine the results of multiple conditions to determine if an incident should be opened. If condition_time_series_query_language is present, this must be COMBINE_UNSPECIFIED.

        :param combiner: The combiner of this AlertPolicy.
        :type combiner: str
        """
        allowed_values = ["COMBINE_UNSPECIFIED", "AND", "OR", "AND_WITH_MATCHING_RESOURCE"]  # noqa: E501
        if combiner not in allowed_values:
            raise ValueError(
                "Invalid value for `combiner` ({0}), must be one of {1}"
                .format(combiner, allowed_values)
            )

        self._combiner = combiner

    @property
    def conditions(self):
        """Gets the conditions of this AlertPolicy.

        A list of conditions for the policy. The conditions are combined by AND or OR according to the combiner field. If the combined conditions evaluate to true, then an incident is created. A policy can have from one to six conditions. If condition_time_series_query_language is present, it must be the only condition. If condition_monitoring_query_language is present, it must be the only condition.

        :return: The conditions of this AlertPolicy.
        :rtype: List[Condition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this AlertPolicy.

        A list of conditions for the policy. The conditions are combined by AND or OR according to the combiner field. If the combined conditions evaluate to true, then an incident is created. A policy can have from one to six conditions. If condition_time_series_query_language is present, it must be the only condition. If condition_monitoring_query_language is present, it must be the only condition.

        :param conditions: The conditions of this AlertPolicy.
        :type conditions: List[Condition]
        """

        self._conditions = conditions

    @property
    def creation_record(self):
        """Gets the creation_record of this AlertPolicy.


        :return: The creation_record of this AlertPolicy.
        :rtype: MutationRecord
        """
        return self._creation_record

    @creation_record.setter
    def creation_record(self, creation_record):
        """Sets the creation_record of this AlertPolicy.


        :param creation_record: The creation_record of this AlertPolicy.
        :type creation_record: MutationRecord
        """

        self._creation_record = creation_record

    @property
    def display_name(self):
        """Gets the display_name of this AlertPolicy.

        A short name or phrase used to identify the policy in dashboards, notifications, and incidents. To avoid confusion, don't use the same display name for multiple policies in the same project. The name is limited to 512 Unicode characters.The convention for the display_name of a PrometheusQueryLanguageCondition is \"{rule group name}/{alert name}\", where the {rule group name} and {alert name} should be taken from the corresponding Prometheus configuration file. This convention is not enforced. In any case the display_name is not a unique key of the AlertPolicy.

        :return: The display_name of this AlertPolicy.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AlertPolicy.

        A short name or phrase used to identify the policy in dashboards, notifications, and incidents. To avoid confusion, don't use the same display name for multiple policies in the same project. The name is limited to 512 Unicode characters.The convention for the display_name of a PrometheusQueryLanguageCondition is \"{rule group name}/{alert name}\", where the {rule group name} and {alert name} should be taken from the corresponding Prometheus configuration file. This convention is not enforced. In any case the display_name is not a unique key of the AlertPolicy.

        :param display_name: The display_name of this AlertPolicy.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def documentation(self):
        """Gets the documentation of this AlertPolicy.


        :return: The documentation of this AlertPolicy.
        :rtype: Documentation
        """
        return self._documentation

    @documentation.setter
    def documentation(self, documentation):
        """Sets the documentation of this AlertPolicy.


        :param documentation: The documentation of this AlertPolicy.
        :type documentation: Documentation
        """

        self._documentation = documentation

    @property
    def enabled(self):
        """Gets the enabled of this AlertPolicy.

        Whether or not the policy is enabled. On write, the default interpretation if unset is that the policy is enabled. On read, clients should not make any assumption about the state if it has not been populated. The field should always be populated on List and Get operations, unless a field projection has been specified that strips it out.

        :return: The enabled of this AlertPolicy.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this AlertPolicy.

        Whether or not the policy is enabled. On write, the default interpretation if unset is that the policy is enabled. On read, clients should not make any assumption about the state if it has not been populated. The field should always be populated on List and Get operations, unless a field projection has been specified that strips it out.

        :param enabled: The enabled of this AlertPolicy.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def mutation_record(self):
        """Gets the mutation_record of this AlertPolicy.


        :return: The mutation_record of this AlertPolicy.
        :rtype: MutationRecord
        """
        return self._mutation_record

    @mutation_record.setter
    def mutation_record(self, mutation_record):
        """Sets the mutation_record of this AlertPolicy.


        :param mutation_record: The mutation_record of this AlertPolicy.
        :type mutation_record: MutationRecord
        """

        self._mutation_record = mutation_record

    @property
    def name(self):
        """Gets the name of this AlertPolicy.

        Required if the policy exists. The resource name for this policy. The format is: projects/[PROJECT_ID_OR_NUMBER]/alertPolicies/[ALERT_POLICY_ID] [ALERT_POLICY_ID] is assigned by Cloud Monitoring when the policy is created. When calling the alertPolicies.create method, do not include the name field in the alerting policy passed as part of the request.

        :return: The name of this AlertPolicy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AlertPolicy.

        Required if the policy exists. The resource name for this policy. The format is: projects/[PROJECT_ID_OR_NUMBER]/alertPolicies/[ALERT_POLICY_ID] [ALERT_POLICY_ID] is assigned by Cloud Monitoring when the policy is created. When calling the alertPolicies.create method, do not include the name field in the alerting policy passed as part of the request.

        :param name: The name of this AlertPolicy.
        :type name: str
        """

        self._name = name

    @property
    def notification_channels(self):
        """Gets the notification_channels of this AlertPolicy.

        Identifies the notification channels to which notifications should be sent when incidents are opened or closed or when new violations occur on an already opened incident. Each element of this array corresponds to the name field in each of the NotificationChannel objects that are returned from the ListNotificationChannels method. The format of the entries in this field is: projects/[PROJECT_ID_OR_NUMBER]/notificationChannels/[CHANNEL_ID] 

        :return: The notification_channels of this AlertPolicy.
        :rtype: List[str]
        """
        return self._notification_channels

    @notification_channels.setter
    def notification_channels(self, notification_channels):
        """Sets the notification_channels of this AlertPolicy.

        Identifies the notification channels to which notifications should be sent when incidents are opened or closed or when new violations occur on an already opened incident. Each element of this array corresponds to the name field in each of the NotificationChannel objects that are returned from the ListNotificationChannels method. The format of the entries in this field is: projects/[PROJECT_ID_OR_NUMBER]/notificationChannels/[CHANNEL_ID] 

        :param notification_channels: The notification_channels of this AlertPolicy.
        :type notification_channels: List[str]
        """

        self._notification_channels = notification_channels

    @property
    def severity(self):
        """Gets the severity of this AlertPolicy.

        Optional. The severity of an alert policy indicates how important incidents generated by that policy are. The severity level will be displayed on the Incident detail page and in notifications.

        :return: The severity of this AlertPolicy.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this AlertPolicy.

        Optional. The severity of an alert policy indicates how important incidents generated by that policy are. The severity level will be displayed on the Incident detail page and in notifications.

        :param severity: The severity of this AlertPolicy.
        :type severity: str
        """
        allowed_values = ["SEVERITY_UNSPECIFIED", "CRITICAL", "ERROR", "WARNING"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def user_labels(self):
        """Gets the user_labels of this AlertPolicy.

        User-supplied key/value data to be used for organizing and identifying the AlertPolicy objects.The field can contain up to 64 entries. Each key and value is limited to 63 Unicode characters or 128 bytes, whichever is smaller. Labels and values can contain only lowercase letters, numerals, underscores, and dashes. Keys must begin with a letter.Note that Prometheus {alert name} is a valid Prometheus label names (https://prometheus.io/docs/concepts/data_model/#metric-names-and-labels), whereas Prometheus {rule group} is an unrestricted UTF-8 string. This means that they cannot be stored as-is in user labels, because they may contain characters that are not allowed in user-label values.

        :return: The user_labels of this AlertPolicy.
        :rtype: Dict[str, str]
        """
        return self._user_labels

    @user_labels.setter
    def user_labels(self, user_labels):
        """Sets the user_labels of this AlertPolicy.

        User-supplied key/value data to be used for organizing and identifying the AlertPolicy objects.The field can contain up to 64 entries. Each key and value is limited to 63 Unicode characters or 128 bytes, whichever is smaller. Labels and values can contain only lowercase letters, numerals, underscores, and dashes. Keys must begin with a letter.Note that Prometheus {alert name} is a valid Prometheus label names (https://prometheus.io/docs/concepts/data_model/#metric-names-and-labels), whereas Prometheus {rule group} is an unrestricted UTF-8 string. This means that they cannot be stored as-is in user labels, because they may contain characters that are not allowed in user-label values.

        :param user_labels: The user_labels of this AlertPolicy.
        :type user_labels: Dict[str, str]
        """

        self._user_labels = user_labels

    @property
    def validity(self):
        """Gets the validity of this AlertPolicy.


        :return: The validity of this AlertPolicy.
        :rtype: Status
        """
        return self._validity

    @validity.setter
    def validity(self, validity):
        """Sets the validity of this AlertPolicy.


        :param validity: The validity of this AlertPolicy.
        :type validity: Status
        """

        self._validity = validity
