# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.distribution_cut import DistributionCut
from openapi_server.models.time_series_ratio import TimeSeriesRatio
from openapi_server import util


class RequestBasedSli(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, distribution_cut: DistributionCut=None, good_total_ratio: TimeSeriesRatio=None):
        """RequestBasedSli - a model defined in OpenAPI

        :param distribution_cut: The distribution_cut of this RequestBasedSli.
        :param good_total_ratio: The good_total_ratio of this RequestBasedSli.
        """
        self.openapi_types = {
            'distribution_cut': DistributionCut,
            'good_total_ratio': TimeSeriesRatio
        }

        self.attribute_map = {
            'distribution_cut': 'distributionCut',
            'good_total_ratio': 'goodTotalRatio'
        }

        self._distribution_cut = distribution_cut
        self._good_total_ratio = good_total_ratio

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RequestBasedSli':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RequestBasedSli of this RequestBasedSli.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def distribution_cut(self):
        """Gets the distribution_cut of this RequestBasedSli.


        :return: The distribution_cut of this RequestBasedSli.
        :rtype: DistributionCut
        """
        return self._distribution_cut

    @distribution_cut.setter
    def distribution_cut(self, distribution_cut):
        """Sets the distribution_cut of this RequestBasedSli.


        :param distribution_cut: The distribution_cut of this RequestBasedSli.
        :type distribution_cut: DistributionCut
        """

        self._distribution_cut = distribution_cut

    @property
    def good_total_ratio(self):
        """Gets the good_total_ratio of this RequestBasedSli.


        :return: The good_total_ratio of this RequestBasedSli.
        :rtype: TimeSeriesRatio
        """
        return self._good_total_ratio

    @good_total_ratio.setter
    def good_total_ratio(self, good_total_ratio):
        """Sets the good_total_ratio of this RequestBasedSli.


        :param good_total_ratio: The good_total_ratio of this RequestBasedSli.
        :type good_total_ratio: TimeSeriesRatio
        """

        self._good_total_ratio = good_total_ratio
