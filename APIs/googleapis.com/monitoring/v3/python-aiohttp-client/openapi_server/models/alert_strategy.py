# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.notification_channel_strategy import NotificationChannelStrategy
from openapi_server.models.notification_rate_limit import NotificationRateLimit
from openapi_server import util


class AlertStrategy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_close: str=None, notification_channel_strategy: List[NotificationChannelStrategy]=None, notification_rate_limit: NotificationRateLimit=None):
        """AlertStrategy - a model defined in OpenAPI

        :param auto_close: The auto_close of this AlertStrategy.
        :param notification_channel_strategy: The notification_channel_strategy of this AlertStrategy.
        :param notification_rate_limit: The notification_rate_limit of this AlertStrategy.
        """
        self.openapi_types = {
            'auto_close': str,
            'notification_channel_strategy': List[NotificationChannelStrategy],
            'notification_rate_limit': NotificationRateLimit
        }

        self.attribute_map = {
            'auto_close': 'autoClose',
            'notification_channel_strategy': 'notificationChannelStrategy',
            'notification_rate_limit': 'notificationRateLimit'
        }

        self._auto_close = auto_close
        self._notification_channel_strategy = notification_channel_strategy
        self._notification_rate_limit = notification_rate_limit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlertStrategy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AlertStrategy of this AlertStrategy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_close(self):
        """Gets the auto_close of this AlertStrategy.

        If an alert policy that was active has no data for this long, any open incidents will close

        :return: The auto_close of this AlertStrategy.
        :rtype: str
        """
        return self._auto_close

    @auto_close.setter
    def auto_close(self, auto_close):
        """Sets the auto_close of this AlertStrategy.

        If an alert policy that was active has no data for this long, any open incidents will close

        :param auto_close: The auto_close of this AlertStrategy.
        :type auto_close: str
        """

        self._auto_close = auto_close

    @property
    def notification_channel_strategy(self):
        """Gets the notification_channel_strategy of this AlertStrategy.

        Control how notifications will be sent out, on a per-channel basis.

        :return: The notification_channel_strategy of this AlertStrategy.
        :rtype: List[NotificationChannelStrategy]
        """
        return self._notification_channel_strategy

    @notification_channel_strategy.setter
    def notification_channel_strategy(self, notification_channel_strategy):
        """Sets the notification_channel_strategy of this AlertStrategy.

        Control how notifications will be sent out, on a per-channel basis.

        :param notification_channel_strategy: The notification_channel_strategy of this AlertStrategy.
        :type notification_channel_strategy: List[NotificationChannelStrategy]
        """

        self._notification_channel_strategy = notification_channel_strategy

    @property
    def notification_rate_limit(self):
        """Gets the notification_rate_limit of this AlertStrategy.


        :return: The notification_rate_limit of this AlertStrategy.
        :rtype: NotificationRateLimit
        """
        return self._notification_rate_limit

    @notification_rate_limit.setter
    def notification_rate_limit(self, notification_rate_limit):
        """Sets the notification_rate_limit of this AlertStrategy.


        :param notification_rate_limit: The notification_rate_limit of this AlertStrategy.
        :type notification_rate_limit: NotificationRateLimit
        """

        self._notification_rate_limit = notification_rate_limit
