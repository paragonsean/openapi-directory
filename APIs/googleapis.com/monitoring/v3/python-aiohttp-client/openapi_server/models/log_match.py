# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LogMatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter: str=None, label_extractors: Dict[str, str]=None):
        """LogMatch - a model defined in OpenAPI

        :param filter: The filter of this LogMatch.
        :param label_extractors: The label_extractors of this LogMatch.
        """
        self.openapi_types = {
            'filter': str,
            'label_extractors': Dict[str, str]
        }

        self.attribute_map = {
            'filter': 'filter',
            'label_extractors': 'labelExtractors'
        }

        self._filter = filter
        self._label_extractors = label_extractors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogMatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LogMatch of this LogMatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter(self):
        """Gets the filter of this LogMatch.

        Required. A logs-based filter. See Advanced Logs Queries (https://cloud.google.com/logging/docs/view/advanced-queries) for how this filter should be constructed.

        :return: The filter of this LogMatch.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this LogMatch.

        Required. A logs-based filter. See Advanced Logs Queries (https://cloud.google.com/logging/docs/view/advanced-queries) for how this filter should be constructed.

        :param filter: The filter of this LogMatch.
        :type filter: str
        """

        self._filter = filter

    @property
    def label_extractors(self):
        """Gets the label_extractors of this LogMatch.

        Optional. A map from a label key to an extractor expression, which is used to extract the value for this label key. Each entry in this map is a specification for how data should be extracted from log entries that match filter. Each combination of extracted values is treated as a separate rule for the purposes of triggering notifications. Label keys and corresponding values can be used in notifications generated by this condition.Please see the documentation on logs-based metric valueExtractors (https://cloud.google.com/logging/docs/reference/v2/rest/v2/projects.metrics#LogMetric.FIELDS.value_extractor) for syntax and examples.

        :return: The label_extractors of this LogMatch.
        :rtype: Dict[str, str]
        """
        return self._label_extractors

    @label_extractors.setter
    def label_extractors(self, label_extractors):
        """Sets the label_extractors of this LogMatch.

        Optional. A map from a label key to an extractor expression, which is used to extract the value for this label key. Each entry in this map is a specification for how data should be extracted from log entries that match filter. Each combination of extracted values is treated as a separate rule for the purposes of triggering notifications. Label keys and corresponding values can be used in notifications generated by this condition.Please see the documentation on logs-based metric valueExtractors (https://cloud.google.com/logging/docs/reference/v2/rest/v2/projects.metrics#LogMetric.FIELDS.value_extractor) for syntax and examples.

        :param label_extractors: The label_extractors of this LogMatch.
        :type label_extractors: Dict[str, str]
        """

        self._label_extractors = label_extractors
