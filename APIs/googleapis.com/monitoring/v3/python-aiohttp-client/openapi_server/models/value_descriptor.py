# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ValueDescriptor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key: str=None, metric_kind: str=None, unit: str=None, value_type: str=None):
        """ValueDescriptor - a model defined in OpenAPI

        :param key: The key of this ValueDescriptor.
        :param metric_kind: The metric_kind of this ValueDescriptor.
        :param unit: The unit of this ValueDescriptor.
        :param value_type: The value_type of this ValueDescriptor.
        """
        self.openapi_types = {
            'key': str,
            'metric_kind': str,
            'unit': str,
            'value_type': str
        }

        self.attribute_map = {
            'key': 'key',
            'metric_kind': 'metricKind',
            'unit': 'unit',
            'value_type': 'valueType'
        }

        self._key = key
        self._metric_kind = metric_kind
        self._unit = unit
        self._value_type = value_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ValueDescriptor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ValueDescriptor of this ValueDescriptor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key(self):
        """Gets the key of this ValueDescriptor.

        The value key.

        :return: The key of this ValueDescriptor.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ValueDescriptor.

        The value key.

        :param key: The key of this ValueDescriptor.
        :type key: str
        """

        self._key = key

    @property
    def metric_kind(self):
        """Gets the metric_kind of this ValueDescriptor.

        The value stream kind.

        :return: The metric_kind of this ValueDescriptor.
        :rtype: str
        """
        return self._metric_kind

    @metric_kind.setter
    def metric_kind(self, metric_kind):
        """Sets the metric_kind of this ValueDescriptor.

        The value stream kind.

        :param metric_kind: The metric_kind of this ValueDescriptor.
        :type metric_kind: str
        """
        allowed_values = ["METRIC_KIND_UNSPECIFIED", "GAUGE", "DELTA", "CUMULATIVE"]  # noqa: E501
        if metric_kind not in allowed_values:
            raise ValueError(
                "Invalid value for `metric_kind` ({0}), must be one of {1}"
                .format(metric_kind, allowed_values)
            )

        self._metric_kind = metric_kind

    @property
    def unit(self):
        """Gets the unit of this ValueDescriptor.

        The unit in which time_series point values are reported. unit follows the UCUM format for units as seen in https://unitsofmeasure.org/ucum.html. unit is only valid if value_type is INTEGER, DOUBLE, DISTRIBUTION.

        :return: The unit of this ValueDescriptor.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this ValueDescriptor.

        The unit in which time_series point values are reported. unit follows the UCUM format for units as seen in https://unitsofmeasure.org/ucum.html. unit is only valid if value_type is INTEGER, DOUBLE, DISTRIBUTION.

        :param unit: The unit of this ValueDescriptor.
        :type unit: str
        """

        self._unit = unit

    @property
    def value_type(self):
        """Gets the value_type of this ValueDescriptor.

        The value type.

        :return: The value_type of this ValueDescriptor.
        :rtype: str
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type):
        """Sets the value_type of this ValueDescriptor.

        The value type.

        :param value_type: The value_type of this ValueDescriptor.
        :type value_type: str
        """
        allowed_values = ["VALUE_TYPE_UNSPECIFIED", "BOOL", "INT64", "DOUBLE", "STRING", "DISTRIBUTION", "MONEY"]  # noqa: E501
        if value_type not in allowed_values:
            raise ValueError(
                "Invalid value for `value_type` ({0}), must be one of {1}"
                .format(value_type, allowed_values)
            )

        self._value_type = value_type
