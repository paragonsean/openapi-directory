# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.latency_criteria import LatencyCriteria
from openapi_server import util


class BasicSli(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, availability: object=None, latency: LatencyCriteria=None, location: List[str]=None, method: List[str]=None, version: List[str]=None):
        """BasicSli - a model defined in OpenAPI

        :param availability: The availability of this BasicSli.
        :param latency: The latency of this BasicSli.
        :param location: The location of this BasicSli.
        :param method: The method of this BasicSli.
        :param version: The version of this BasicSli.
        """
        self.openapi_types = {
            'availability': object,
            'latency': LatencyCriteria,
            'location': List[str],
            'method': List[str],
            'version': List[str]
        }

        self.attribute_map = {
            'availability': 'availability',
            'latency': 'latency',
            'location': 'location',
            'method': 'method',
            'version': 'version'
        }

        self._availability = availability
        self._latency = latency
        self._location = location
        self._method = method
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BasicSli':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BasicSli of this BasicSli.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def availability(self):
        """Gets the availability of this BasicSli.

        Future parameters for the availability SLI.

        :return: The availability of this BasicSli.
        :rtype: object
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this BasicSli.

        Future parameters for the availability SLI.

        :param availability: The availability of this BasicSli.
        :type availability: object
        """

        self._availability = availability

    @property
    def latency(self):
        """Gets the latency of this BasicSli.


        :return: The latency of this BasicSli.
        :rtype: LatencyCriteria
        """
        return self._latency

    @latency.setter
    def latency(self, latency):
        """Sets the latency of this BasicSli.


        :param latency: The latency of this BasicSli.
        :type latency: LatencyCriteria
        """

        self._latency = latency

    @property
    def location(self):
        """Gets the location of this BasicSli.

        OPTIONAL: The set of locations to which this SLI is relevant. Telemetry from other locations will not be used to calculate performance for this SLI. If omitted, this SLI applies to all locations in which the Service has activity. For service types that don't support breaking down by location, setting this field will result in an error.

        :return: The location of this BasicSli.
        :rtype: List[str]
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this BasicSli.

        OPTIONAL: The set of locations to which this SLI is relevant. Telemetry from other locations will not be used to calculate performance for this SLI. If omitted, this SLI applies to all locations in which the Service has activity. For service types that don't support breaking down by location, setting this field will result in an error.

        :param location: The location of this BasicSli.
        :type location: List[str]
        """

        self._location = location

    @property
    def method(self):
        """Gets the method of this BasicSli.

        OPTIONAL: The set of RPCs to which this SLI is relevant. Telemetry from other methods will not be used to calculate performance for this SLI. If omitted, this SLI applies to all the Service's methods. For service types that don't support breaking down by method, setting this field will result in an error.

        :return: The method of this BasicSli.
        :rtype: List[str]
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this BasicSli.

        OPTIONAL: The set of RPCs to which this SLI is relevant. Telemetry from other methods will not be used to calculate performance for this SLI. If omitted, this SLI applies to all the Service's methods. For service types that don't support breaking down by method, setting this field will result in an error.

        :param method: The method of this BasicSli.
        :type method: List[str]
        """

        self._method = method

    @property
    def version(self):
        """Gets the version of this BasicSli.

        OPTIONAL: The set of API versions to which this SLI is relevant. Telemetry from other API versions will not be used to calculate performance for this SLI. If omitted, this SLI applies to all API versions. For service types that don't support breaking down by version, setting this field will result in an error.

        :return: The version of this BasicSli.
        :rtype: List[str]
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this BasicSli.

        OPTIONAL: The set of API versions to which this SLI is relevant. Telemetry from other API versions will not be used to calculate performance for this SLI. If omitted, this SLI applies to all API versions. For service types that don't support breaking down by version, setting this field will result in an error.

        :param version: The version of this BasicSli.
        :type version: List[str]
        """

        self._version = version
