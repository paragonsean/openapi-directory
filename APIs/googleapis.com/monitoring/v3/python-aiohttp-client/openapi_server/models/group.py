# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Group(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, filter: str=None, is_cluster: bool=None, name: str=None, parent_name: str=None):
        """Group - a model defined in OpenAPI

        :param display_name: The display_name of this Group.
        :param filter: The filter of this Group.
        :param is_cluster: The is_cluster of this Group.
        :param name: The name of this Group.
        :param parent_name: The parent_name of this Group.
        """
        self.openapi_types = {
            'display_name': str,
            'filter': str,
            'is_cluster': bool,
            'name': str,
            'parent_name': str
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'filter': 'filter',
            'is_cluster': 'isCluster',
            'name': 'name',
            'parent_name': 'parentName'
        }

        self._display_name = display_name
        self._filter = filter
        self._is_cluster = is_cluster
        self._name = name
        self._parent_name = parent_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Group':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Group of this Group.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this Group.

        A user-assigned name for this group, used only for display purposes.

        :return: The display_name of this Group.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Group.

        A user-assigned name for this group, used only for display purposes.

        :param display_name: The display_name of this Group.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def filter(self):
        """Gets the filter of this Group.

        The filter used to determine which monitored resources belong to this group.

        :return: The filter of this Group.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this Group.

        The filter used to determine which monitored resources belong to this group.

        :param filter: The filter of this Group.
        :type filter: str
        """

        self._filter = filter

    @property
    def is_cluster(self):
        """Gets the is_cluster of this Group.

        If true, the members of this group are considered to be a cluster. The system can perform additional analysis on groups that are clusters.

        :return: The is_cluster of this Group.
        :rtype: bool
        """
        return self._is_cluster

    @is_cluster.setter
    def is_cluster(self, is_cluster):
        """Sets the is_cluster of this Group.

        If true, the members of this group are considered to be a cluster. The system can perform additional analysis on groups that are clusters.

        :param is_cluster: The is_cluster of this Group.
        :type is_cluster: bool
        """

        self._is_cluster = is_cluster

    @property
    def name(self):
        """Gets the name of this Group.

        Output only. The name of this group. The format is: projects/[PROJECT_ID_OR_NUMBER]/groups/[GROUP_ID] When creating a group, this field is ignored and a new name is created consisting of the project specified in the call to CreateGroup and a unique [GROUP_ID] that is generated automatically.

        :return: The name of this Group.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Group.

        Output only. The name of this group. The format is: projects/[PROJECT_ID_OR_NUMBER]/groups/[GROUP_ID] When creating a group, this field is ignored and a new name is created consisting of the project specified in the call to CreateGroup and a unique [GROUP_ID] that is generated automatically.

        :param name: The name of this Group.
        :type name: str
        """

        self._name = name

    @property
    def parent_name(self):
        """Gets the parent_name of this Group.

        The name of the group's parent, if it has one. The format is: projects/[PROJECT_ID_OR_NUMBER]/groups/[GROUP_ID] For groups with no parent, parent_name is the empty string, \"\".

        :return: The parent_name of this Group.
        :rtype: str
        """
        return self._parent_name

    @parent_name.setter
    def parent_name(self, parent_name):
        """Sets the parent_name of this Group.

        The name of the group's parent, if it has one. The format is: projects/[PROJECT_ID_OR_NUMBER]/groups/[GROUP_ID] For groups with no parent, parent_name is the empty string, \"\".

        :param parent_name: The parent_name of this Group.
        :type parent_name: str
        """

        self._parent_name = parent_name
