# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.time_interval import TimeInterval
from openapi_server.models.typed_value import TypedValue
from openapi_server import util


class Point(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, interval: TimeInterval=None, value: TypedValue=None):
        """Point - a model defined in OpenAPI

        :param interval: The interval of this Point.
        :param value: The value of this Point.
        """
        self.openapi_types = {
            'interval': TimeInterval,
            'value': TypedValue
        }

        self.attribute_map = {
            'interval': 'interval',
            'value': 'value'
        }

        self._interval = interval
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Point':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Point of this Point.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def interval(self):
        """Gets the interval of this Point.


        :return: The interval of this Point.
        :rtype: TimeInterval
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this Point.


        :param interval: The interval of this Point.
        :type interval: TimeInterval
        """

        self._interval = interval

    @property
    def value(self):
        """Gets the value of this Point.


        :return: The value of this Point.
        :rtype: TypedValue
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Point.


        :param value: The value of this Point.
        :type value: TypedValue
        """

        self._value = value
