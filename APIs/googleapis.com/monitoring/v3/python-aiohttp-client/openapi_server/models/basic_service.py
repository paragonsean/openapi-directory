# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BasicService(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, service_labels: Dict[str, str]=None, service_type: str=None):
        """BasicService - a model defined in OpenAPI

        :param service_labels: The service_labels of this BasicService.
        :param service_type: The service_type of this BasicService.
        """
        self.openapi_types = {
            'service_labels': Dict[str, str],
            'service_type': str
        }

        self.attribute_map = {
            'service_labels': 'serviceLabels',
            'service_type': 'serviceType'
        }

        self._service_labels = service_labels
        self._service_type = service_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BasicService':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BasicService of this BasicService.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service_labels(self):
        """Gets the service_labels of this BasicService.

        Labels that specify the resource that emits the monitoring data which is used for SLO reporting of this Service. Documentation and valid values for given service types here (https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-w-basic-sli).

        :return: The service_labels of this BasicService.
        :rtype: Dict[str, str]
        """
        return self._service_labels

    @service_labels.setter
    def service_labels(self, service_labels):
        """Sets the service_labels of this BasicService.

        Labels that specify the resource that emits the monitoring data which is used for SLO reporting of this Service. Documentation and valid values for given service types here (https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-w-basic-sli).

        :param service_labels: The service_labels of this BasicService.
        :type service_labels: Dict[str, str]
        """

        self._service_labels = service_labels

    @property
    def service_type(self):
        """Gets the service_type of this BasicService.

        The type of service that this basic service defines, e.g. APP_ENGINE service type. Documentation and valid values here (https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-w-basic-sli).

        :return: The service_type of this BasicService.
        :rtype: str
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type):
        """Sets the service_type of this BasicService.

        The type of service that this basic service defines, e.g. APP_ENGINE service type. Documentation and valid values here (https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-w-basic-sli).

        :param service_type: The service_type of this BasicService.
        :type service_type: str
        """

        self._service_type = service_type
