# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.label_descriptor import LabelDescriptor
from openapi_server import util


class NotificationChannelDescriptor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, display_name: str=None, labels: List[LabelDescriptor]=None, launch_stage: str=None, name: str=None, supported_tiers: List[str]=None, type: str=None):
        """NotificationChannelDescriptor - a model defined in OpenAPI

        :param description: The description of this NotificationChannelDescriptor.
        :param display_name: The display_name of this NotificationChannelDescriptor.
        :param labels: The labels of this NotificationChannelDescriptor.
        :param launch_stage: The launch_stage of this NotificationChannelDescriptor.
        :param name: The name of this NotificationChannelDescriptor.
        :param supported_tiers: The supported_tiers of this NotificationChannelDescriptor.
        :param type: The type of this NotificationChannelDescriptor.
        """
        self.openapi_types = {
            'description': str,
            'display_name': str,
            'labels': List[LabelDescriptor],
            'launch_stage': str,
            'name': str,
            'supported_tiers': List[str],
            'type': str
        }

        self.attribute_map = {
            'description': 'description',
            'display_name': 'displayName',
            'labels': 'labels',
            'launch_stage': 'launchStage',
            'name': 'name',
            'supported_tiers': 'supportedTiers',
            'type': 'type'
        }

        self._description = description
        self._display_name = display_name
        self._labels = labels
        self._launch_stage = launch_stage
        self._name = name
        self._supported_tiers = supported_tiers
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotificationChannelDescriptor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotificationChannelDescriptor of this NotificationChannelDescriptor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this NotificationChannelDescriptor.

        A human-readable description of the notification channel type. The description may include a description of the properties of the channel and pointers to external documentation.

        :return: The description of this NotificationChannelDescriptor.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NotificationChannelDescriptor.

        A human-readable description of the notification channel type. The description may include a description of the properties of the channel and pointers to external documentation.

        :param description: The description of this NotificationChannelDescriptor.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this NotificationChannelDescriptor.

        A human-readable name for the notification channel type. This form of the name is suitable for a user interface.

        :return: The display_name of this NotificationChannelDescriptor.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this NotificationChannelDescriptor.

        A human-readable name for the notification channel type. This form of the name is suitable for a user interface.

        :param display_name: The display_name of this NotificationChannelDescriptor.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def labels(self):
        """Gets the labels of this NotificationChannelDescriptor.

        The set of labels that must be defined to identify a particular channel of the corresponding type. Each label includes a description for how that field should be populated.

        :return: The labels of this NotificationChannelDescriptor.
        :rtype: List[LabelDescriptor]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this NotificationChannelDescriptor.

        The set of labels that must be defined to identify a particular channel of the corresponding type. Each label includes a description for how that field should be populated.

        :param labels: The labels of this NotificationChannelDescriptor.
        :type labels: List[LabelDescriptor]
        """

        self._labels = labels

    @property
    def launch_stage(self):
        """Gets the launch_stage of this NotificationChannelDescriptor.

        The product launch stage for channels of this type.

        :return: The launch_stage of this NotificationChannelDescriptor.
        :rtype: str
        """
        return self._launch_stage

    @launch_stage.setter
    def launch_stage(self, launch_stage):
        """Sets the launch_stage of this NotificationChannelDescriptor.

        The product launch stage for channels of this type.

        :param launch_stage: The launch_stage of this NotificationChannelDescriptor.
        :type launch_stage: str
        """
        allowed_values = ["LAUNCH_STAGE_UNSPECIFIED", "UNIMPLEMENTED", "PRELAUNCH", "EARLY_ACCESS", "ALPHA", "BETA", "GA", "DEPRECATED"]  # noqa: E501
        if launch_stage not in allowed_values:
            raise ValueError(
                "Invalid value for `launch_stage` ({0}), must be one of {1}"
                .format(launch_stage, allowed_values)
            )

        self._launch_stage = launch_stage

    @property
    def name(self):
        """Gets the name of this NotificationChannelDescriptor.

        The full REST resource name for this descriptor. The format is: projects/[PROJECT_ID_OR_NUMBER]/notificationChannelDescriptors/[TYPE] In the above, [TYPE] is the value of the type field.

        :return: The name of this NotificationChannelDescriptor.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NotificationChannelDescriptor.

        The full REST resource name for this descriptor. The format is: projects/[PROJECT_ID_OR_NUMBER]/notificationChannelDescriptors/[TYPE] In the above, [TYPE] is the value of the type field.

        :param name: The name of this NotificationChannelDescriptor.
        :type name: str
        """

        self._name = name

    @property
    def supported_tiers(self):
        """Gets the supported_tiers of this NotificationChannelDescriptor.

        The tiers that support this notification channel; the project service tier must be one of the supported_tiers.

        :return: The supported_tiers of this NotificationChannelDescriptor.
        :rtype: List[str]
        """
        return self._supported_tiers

    @supported_tiers.setter
    def supported_tiers(self, supported_tiers):
        """Sets the supported_tiers of this NotificationChannelDescriptor.

        The tiers that support this notification channel; the project service tier must be one of the supported_tiers.

        :param supported_tiers: The supported_tiers of this NotificationChannelDescriptor.
        :type supported_tiers: List[str]
        """
        allowed_values = ["SERVICE_TIER_UNSPECIFIED", "SERVICE_TIER_BASIC", "SERVICE_TIER_PREMIUM"]  # noqa: E501
        if not set(supported_tiers).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `supported_tiers` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(supported_tiers) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._supported_tiers = supported_tiers

    @property
    def type(self):
        """Gets the type of this NotificationChannelDescriptor.

        The type of notification channel, such as \"email\" and \"sms\". To view the full list of channels, see Channel descriptors (https://cloud.google.com/monitoring/alerts/using-channels-api#ncd). Notification channel types are globally unique.

        :return: The type of this NotificationChannelDescriptor.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NotificationChannelDescriptor.

        The type of notification channel, such as \"email\" and \"sms\". To view the full list of channels, see Channel descriptors (https://cloud.google.com/monitoring/alerts/using-channels-api#ncd). Notification channel types are globally unique.

        :param type: The type of this NotificationChannelDescriptor.
        :type type: str
        """

        self._type = type
