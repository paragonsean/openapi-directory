# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.app_engine import AppEngine
from openapi_server.models.basic_service import BasicService
from openapi_server.models.cloud_endpoints import CloudEndpoints
from openapi_server.models.cloud_run import CloudRun
from openapi_server.models.cluster_istio import ClusterIstio
from openapi_server.models.gke_namespace import GkeNamespace
from openapi_server.models.gke_service import GkeService
from openapi_server.models.gke_workload import GkeWorkload
from openapi_server.models.istio_canonical_service import IstioCanonicalService
from openapi_server.models.mesh_istio import MeshIstio
from openapi_server.models.telemetry import Telemetry
from openapi_server import util


class Service(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_engine: AppEngine=None, basic_service: BasicService=None, cloud_endpoints: CloudEndpoints=None, cloud_run: CloudRun=None, cluster_istio: ClusterIstio=None, custom: object=None, display_name: str=None, gke_namespace: GkeNamespace=None, gke_service: GkeService=None, gke_workload: GkeWorkload=None, istio_canonical_service: IstioCanonicalService=None, mesh_istio: MeshIstio=None, name: str=None, telemetry: Telemetry=None, user_labels: Dict[str, str]=None):
        """Service - a model defined in OpenAPI

        :param app_engine: The app_engine of this Service.
        :param basic_service: The basic_service of this Service.
        :param cloud_endpoints: The cloud_endpoints of this Service.
        :param cloud_run: The cloud_run of this Service.
        :param cluster_istio: The cluster_istio of this Service.
        :param custom: The custom of this Service.
        :param display_name: The display_name of this Service.
        :param gke_namespace: The gke_namespace of this Service.
        :param gke_service: The gke_service of this Service.
        :param gke_workload: The gke_workload of this Service.
        :param istio_canonical_service: The istio_canonical_service of this Service.
        :param mesh_istio: The mesh_istio of this Service.
        :param name: The name of this Service.
        :param telemetry: The telemetry of this Service.
        :param user_labels: The user_labels of this Service.
        """
        self.openapi_types = {
            'app_engine': AppEngine,
            'basic_service': BasicService,
            'cloud_endpoints': CloudEndpoints,
            'cloud_run': CloudRun,
            'cluster_istio': ClusterIstio,
            'custom': object,
            'display_name': str,
            'gke_namespace': GkeNamespace,
            'gke_service': GkeService,
            'gke_workload': GkeWorkload,
            'istio_canonical_service': IstioCanonicalService,
            'mesh_istio': MeshIstio,
            'name': str,
            'telemetry': Telemetry,
            'user_labels': Dict[str, str]
        }

        self.attribute_map = {
            'app_engine': 'appEngine',
            'basic_service': 'basicService',
            'cloud_endpoints': 'cloudEndpoints',
            'cloud_run': 'cloudRun',
            'cluster_istio': 'clusterIstio',
            'custom': 'custom',
            'display_name': 'displayName',
            'gke_namespace': 'gkeNamespace',
            'gke_service': 'gkeService',
            'gke_workload': 'gkeWorkload',
            'istio_canonical_service': 'istioCanonicalService',
            'mesh_istio': 'meshIstio',
            'name': 'name',
            'telemetry': 'telemetry',
            'user_labels': 'userLabels'
        }

        self._app_engine = app_engine
        self._basic_service = basic_service
        self._cloud_endpoints = cloud_endpoints
        self._cloud_run = cloud_run
        self._cluster_istio = cluster_istio
        self._custom = custom
        self._display_name = display_name
        self._gke_namespace = gke_namespace
        self._gke_service = gke_service
        self._gke_workload = gke_workload
        self._istio_canonical_service = istio_canonical_service
        self._mesh_istio = mesh_istio
        self._name = name
        self._telemetry = telemetry
        self._user_labels = user_labels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Service':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Service of this Service.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_engine(self):
        """Gets the app_engine of this Service.


        :return: The app_engine of this Service.
        :rtype: AppEngine
        """
        return self._app_engine

    @app_engine.setter
    def app_engine(self, app_engine):
        """Sets the app_engine of this Service.


        :param app_engine: The app_engine of this Service.
        :type app_engine: AppEngine
        """

        self._app_engine = app_engine

    @property
    def basic_service(self):
        """Gets the basic_service of this Service.


        :return: The basic_service of this Service.
        :rtype: BasicService
        """
        return self._basic_service

    @basic_service.setter
    def basic_service(self, basic_service):
        """Sets the basic_service of this Service.


        :param basic_service: The basic_service of this Service.
        :type basic_service: BasicService
        """

        self._basic_service = basic_service

    @property
    def cloud_endpoints(self):
        """Gets the cloud_endpoints of this Service.


        :return: The cloud_endpoints of this Service.
        :rtype: CloudEndpoints
        """
        return self._cloud_endpoints

    @cloud_endpoints.setter
    def cloud_endpoints(self, cloud_endpoints):
        """Sets the cloud_endpoints of this Service.


        :param cloud_endpoints: The cloud_endpoints of this Service.
        :type cloud_endpoints: CloudEndpoints
        """

        self._cloud_endpoints = cloud_endpoints

    @property
    def cloud_run(self):
        """Gets the cloud_run of this Service.


        :return: The cloud_run of this Service.
        :rtype: CloudRun
        """
        return self._cloud_run

    @cloud_run.setter
    def cloud_run(self, cloud_run):
        """Sets the cloud_run of this Service.


        :param cloud_run: The cloud_run of this Service.
        :type cloud_run: CloudRun
        """

        self._cloud_run = cloud_run

    @property
    def cluster_istio(self):
        """Gets the cluster_istio of this Service.


        :return: The cluster_istio of this Service.
        :rtype: ClusterIstio
        """
        return self._cluster_istio

    @cluster_istio.setter
    def cluster_istio(self, cluster_istio):
        """Sets the cluster_istio of this Service.


        :param cluster_istio: The cluster_istio of this Service.
        :type cluster_istio: ClusterIstio
        """

        self._cluster_istio = cluster_istio

    @property
    def custom(self):
        """Gets the custom of this Service.

        Use a custom service to designate a service that you want to monitor when none of the other service types (like App Engine, Cloud Run, or a GKE type) matches your intended service.

        :return: The custom of this Service.
        :rtype: object
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """Sets the custom of this Service.

        Use a custom service to designate a service that you want to monitor when none of the other service types (like App Engine, Cloud Run, or a GKE type) matches your intended service.

        :param custom: The custom of this Service.
        :type custom: object
        """

        self._custom = custom

    @property
    def display_name(self):
        """Gets the display_name of this Service.

        Name used for UI elements listing this Service.

        :return: The display_name of this Service.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Service.

        Name used for UI elements listing this Service.

        :param display_name: The display_name of this Service.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def gke_namespace(self):
        """Gets the gke_namespace of this Service.


        :return: The gke_namespace of this Service.
        :rtype: GkeNamespace
        """
        return self._gke_namespace

    @gke_namespace.setter
    def gke_namespace(self, gke_namespace):
        """Sets the gke_namespace of this Service.


        :param gke_namespace: The gke_namespace of this Service.
        :type gke_namespace: GkeNamespace
        """

        self._gke_namespace = gke_namespace

    @property
    def gke_service(self):
        """Gets the gke_service of this Service.


        :return: The gke_service of this Service.
        :rtype: GkeService
        """
        return self._gke_service

    @gke_service.setter
    def gke_service(self, gke_service):
        """Sets the gke_service of this Service.


        :param gke_service: The gke_service of this Service.
        :type gke_service: GkeService
        """

        self._gke_service = gke_service

    @property
    def gke_workload(self):
        """Gets the gke_workload of this Service.


        :return: The gke_workload of this Service.
        :rtype: GkeWorkload
        """
        return self._gke_workload

    @gke_workload.setter
    def gke_workload(self, gke_workload):
        """Sets the gke_workload of this Service.


        :param gke_workload: The gke_workload of this Service.
        :type gke_workload: GkeWorkload
        """

        self._gke_workload = gke_workload

    @property
    def istio_canonical_service(self):
        """Gets the istio_canonical_service of this Service.


        :return: The istio_canonical_service of this Service.
        :rtype: IstioCanonicalService
        """
        return self._istio_canonical_service

    @istio_canonical_service.setter
    def istio_canonical_service(self, istio_canonical_service):
        """Sets the istio_canonical_service of this Service.


        :param istio_canonical_service: The istio_canonical_service of this Service.
        :type istio_canonical_service: IstioCanonicalService
        """

        self._istio_canonical_service = istio_canonical_service

    @property
    def mesh_istio(self):
        """Gets the mesh_istio of this Service.


        :return: The mesh_istio of this Service.
        :rtype: MeshIstio
        """
        return self._mesh_istio

    @mesh_istio.setter
    def mesh_istio(self, mesh_istio):
        """Sets the mesh_istio of this Service.


        :param mesh_istio: The mesh_istio of this Service.
        :type mesh_istio: MeshIstio
        """

        self._mesh_istio = mesh_istio

    @property
    def name(self):
        """Gets the name of this Service.

        Resource name for this Service. The format is: projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID] 

        :return: The name of this Service.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Service.

        Resource name for this Service. The format is: projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID] 

        :param name: The name of this Service.
        :type name: str
        """

        self._name = name

    @property
    def telemetry(self):
        """Gets the telemetry of this Service.


        :return: The telemetry of this Service.
        :rtype: Telemetry
        """
        return self._telemetry

    @telemetry.setter
    def telemetry(self, telemetry):
        """Sets the telemetry of this Service.


        :param telemetry: The telemetry of this Service.
        :type telemetry: Telemetry
        """

        self._telemetry = telemetry

    @property
    def user_labels(self):
        """Gets the user_labels of this Service.

        Labels which have been used to annotate the service. Label keys must start with a letter. Label keys and values may contain lowercase letters, numbers, underscores, and dashes. Label keys and values have a maximum length of 63 characters, and must be less than 128 bytes in size. Up to 64 label entries may be stored. For labels which do not have a semantic value, the empty string may be supplied for the label value.

        :return: The user_labels of this Service.
        :rtype: Dict[str, str]
        """
        return self._user_labels

    @user_labels.setter
    def user_labels(self, user_labels):
        """Sets the user_labels of this Service.

        Labels which have been used to annotate the service. Label keys must start with a letter. Label keys and values may contain lowercase letters, numbers, underscores, and dashes. Label keys and values have a maximum length of 63 characters, and must be less than 128 bytes in size. Up to 64 label entries may be stored. For labels which do not have a semantic value, the empty string may be supplied for the label value.

        :param user_labels: The user_labels of this Service.
        :type user_labels: Dict[str, str]
        """

        self._user_labels = user_labels
