# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aggregation import Aggregation
from openapi_server.models.forecast_options import ForecastOptions
from openapi_server.models.trigger import Trigger
from openapi_server import util


class MetricThreshold(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregations: List[Aggregation]=None, comparison: str=None, denominator_aggregations: List[Aggregation]=None, denominator_filter: str=None, duration: str=None, evaluation_missing_data: str=None, filter: str=None, forecast_options: ForecastOptions=None, threshold_value: float=None, trigger: Trigger=None):
        """MetricThreshold - a model defined in OpenAPI

        :param aggregations: The aggregations of this MetricThreshold.
        :param comparison: The comparison of this MetricThreshold.
        :param denominator_aggregations: The denominator_aggregations of this MetricThreshold.
        :param denominator_filter: The denominator_filter of this MetricThreshold.
        :param duration: The duration of this MetricThreshold.
        :param evaluation_missing_data: The evaluation_missing_data of this MetricThreshold.
        :param filter: The filter of this MetricThreshold.
        :param forecast_options: The forecast_options of this MetricThreshold.
        :param threshold_value: The threshold_value of this MetricThreshold.
        :param trigger: The trigger of this MetricThreshold.
        """
        self.openapi_types = {
            'aggregations': List[Aggregation],
            'comparison': str,
            'denominator_aggregations': List[Aggregation],
            'denominator_filter': str,
            'duration': str,
            'evaluation_missing_data': str,
            'filter': str,
            'forecast_options': ForecastOptions,
            'threshold_value': float,
            'trigger': Trigger
        }

        self.attribute_map = {
            'aggregations': 'aggregations',
            'comparison': 'comparison',
            'denominator_aggregations': 'denominatorAggregations',
            'denominator_filter': 'denominatorFilter',
            'duration': 'duration',
            'evaluation_missing_data': 'evaluationMissingData',
            'filter': 'filter',
            'forecast_options': 'forecastOptions',
            'threshold_value': 'thresholdValue',
            'trigger': 'trigger'
        }

        self._aggregations = aggregations
        self._comparison = comparison
        self._denominator_aggregations = denominator_aggregations
        self._denominator_filter = denominator_filter
        self._duration = duration
        self._evaluation_missing_data = evaluation_missing_data
        self._filter = filter
        self._forecast_options = forecast_options
        self._threshold_value = threshold_value
        self._trigger = trigger

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetricThreshold':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetricThreshold of this MetricThreshold.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregations(self):
        """Gets the aggregations of this MetricThreshold.

        Specifies the alignment of data points in individual time series as well as how to combine the retrieved time series together (such as when aggregating multiple streams on each resource to a single stream for each resource or when aggregating streams across all members of a group of resources). Multiple aggregations are applied in the order specified.This field is similar to the one in the ListTimeSeries request (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list). It is advisable to use the ListTimeSeries method when debugging this field.

        :return: The aggregations of this MetricThreshold.
        :rtype: List[Aggregation]
        """
        return self._aggregations

    @aggregations.setter
    def aggregations(self, aggregations):
        """Sets the aggregations of this MetricThreshold.

        Specifies the alignment of data points in individual time series as well as how to combine the retrieved time series together (such as when aggregating multiple streams on each resource to a single stream for each resource or when aggregating streams across all members of a group of resources). Multiple aggregations are applied in the order specified.This field is similar to the one in the ListTimeSeries request (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list). It is advisable to use the ListTimeSeries method when debugging this field.

        :param aggregations: The aggregations of this MetricThreshold.
        :type aggregations: List[Aggregation]
        """

        self._aggregations = aggregations

    @property
    def comparison(self):
        """Gets the comparison of this MetricThreshold.

        The comparison to apply between the time series (indicated by filter and aggregation) and the threshold (indicated by threshold_value). The comparison is applied on each time series, with the time series on the left-hand side and the threshold on the right-hand side.Only COMPARISON_LT and COMPARISON_GT are supported currently.

        :return: The comparison of this MetricThreshold.
        :rtype: str
        """
        return self._comparison

    @comparison.setter
    def comparison(self, comparison):
        """Sets the comparison of this MetricThreshold.

        The comparison to apply between the time series (indicated by filter and aggregation) and the threshold (indicated by threshold_value). The comparison is applied on each time series, with the time series on the left-hand side and the threshold on the right-hand side.Only COMPARISON_LT and COMPARISON_GT are supported currently.

        :param comparison: The comparison of this MetricThreshold.
        :type comparison: str
        """
        allowed_values = ["COMPARISON_UNSPECIFIED", "COMPARISON_GT", "COMPARISON_GE", "COMPARISON_LT", "COMPARISON_LE", "COMPARISON_EQ", "COMPARISON_NE"]  # noqa: E501
        if comparison not in allowed_values:
            raise ValueError(
                "Invalid value for `comparison` ({0}), must be one of {1}"
                .format(comparison, allowed_values)
            )

        self._comparison = comparison

    @property
    def denominator_aggregations(self):
        """Gets the denominator_aggregations of this MetricThreshold.

        Specifies the alignment of data points in individual time series selected by denominatorFilter as well as how to combine the retrieved time series together (such as when aggregating multiple streams on each resource to a single stream for each resource or when aggregating streams across all members of a group of resources).When computing ratios, the aggregations and denominator_aggregations fields must use the same alignment period and produce time series that have the same periodicity and labels.

        :return: The denominator_aggregations of this MetricThreshold.
        :rtype: List[Aggregation]
        """
        return self._denominator_aggregations

    @denominator_aggregations.setter
    def denominator_aggregations(self, denominator_aggregations):
        """Sets the denominator_aggregations of this MetricThreshold.

        Specifies the alignment of data points in individual time series selected by denominatorFilter as well as how to combine the retrieved time series together (such as when aggregating multiple streams on each resource to a single stream for each resource or when aggregating streams across all members of a group of resources).When computing ratios, the aggregations and denominator_aggregations fields must use the same alignment period and produce time series that have the same periodicity and labels.

        :param denominator_aggregations: The denominator_aggregations of this MetricThreshold.
        :type denominator_aggregations: List[Aggregation]
        """

        self._denominator_aggregations = denominator_aggregations

    @property
    def denominator_filter(self):
        """Gets the denominator_filter of this MetricThreshold.

        A filter (https://cloud.google.com/monitoring/api/v3/filters) that identifies a time series that should be used as the denominator of a ratio that will be compared with the threshold. If a denominator_filter is specified, the time series specified by the filter field will be used as the numerator.The filter must specify the metric type and optionally may contain restrictions on resource type, resource labels, and metric labels. This field may not exceed 2048 Unicode characters in length.

        :return: The denominator_filter of this MetricThreshold.
        :rtype: str
        """
        return self._denominator_filter

    @denominator_filter.setter
    def denominator_filter(self, denominator_filter):
        """Sets the denominator_filter of this MetricThreshold.

        A filter (https://cloud.google.com/monitoring/api/v3/filters) that identifies a time series that should be used as the denominator of a ratio that will be compared with the threshold. If a denominator_filter is specified, the time series specified by the filter field will be used as the numerator.The filter must specify the metric type and optionally may contain restrictions on resource type, resource labels, and metric labels. This field may not exceed 2048 Unicode characters in length.

        :param denominator_filter: The denominator_filter of this MetricThreshold.
        :type denominator_filter: str
        """

        self._denominator_filter = denominator_filter

    @property
    def duration(self):
        """Gets the duration of this MetricThreshold.

        The amount of time that a time series must violate the threshold to be considered failing. Currently, only values that are a multiple of a minute--e.g., 0, 60, 120, or 300 seconds--are supported. If an invalid value is given, an error will be returned. When choosing a duration, it is useful to keep in mind the frequency of the underlying time series data (which may also be affected by any alignments specified in the aggregations field); a good duration is long enough so that a single outlier does not generate spurious alerts, but short enough that unhealthy states are detected and alerted on quickly.

        :return: The duration of this MetricThreshold.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this MetricThreshold.

        The amount of time that a time series must violate the threshold to be considered failing. Currently, only values that are a multiple of a minute--e.g., 0, 60, 120, or 300 seconds--are supported. If an invalid value is given, an error will be returned. When choosing a duration, it is useful to keep in mind the frequency of the underlying time series data (which may also be affected by any alignments specified in the aggregations field); a good duration is long enough so that a single outlier does not generate spurious alerts, but short enough that unhealthy states are detected and alerted on quickly.

        :param duration: The duration of this MetricThreshold.
        :type duration: str
        """

        self._duration = duration

    @property
    def evaluation_missing_data(self):
        """Gets the evaluation_missing_data of this MetricThreshold.

        A condition control that determines how metric-threshold conditions are evaluated when data stops arriving. To use this control, the value of the duration field must be greater than or equal to 60 seconds.

        :return: The evaluation_missing_data of this MetricThreshold.
        :rtype: str
        """
        return self._evaluation_missing_data

    @evaluation_missing_data.setter
    def evaluation_missing_data(self, evaluation_missing_data):
        """Sets the evaluation_missing_data of this MetricThreshold.

        A condition control that determines how metric-threshold conditions are evaluated when data stops arriving. To use this control, the value of the duration field must be greater than or equal to 60 seconds.

        :param evaluation_missing_data: The evaluation_missing_data of this MetricThreshold.
        :type evaluation_missing_data: str
        """
        allowed_values = ["EVALUATION_MISSING_DATA_UNSPECIFIED", "EVALUATION_MISSING_DATA_INACTIVE", "EVALUATION_MISSING_DATA_ACTIVE", "EVALUATION_MISSING_DATA_NO_OP"]  # noqa: E501
        if evaluation_missing_data not in allowed_values:
            raise ValueError(
                "Invalid value for `evaluation_missing_data` ({0}), must be one of {1}"
                .format(evaluation_missing_data, allowed_values)
            )

        self._evaluation_missing_data = evaluation_missing_data

    @property
    def filter(self):
        """Gets the filter of this MetricThreshold.

        Required. A filter (https://cloud.google.com/monitoring/api/v3/filters) that identifies which time series should be compared with the threshold.The filter is similar to the one that is specified in the ListTimeSeries request (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list) (that call is useful to verify the time series that will be retrieved / processed). The filter must specify the metric type and the resource type. Optionally, it can specify resource labels and metric labels. This field must not exceed 2048 Unicode characters in length.

        :return: The filter of this MetricThreshold.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this MetricThreshold.

        Required. A filter (https://cloud.google.com/monitoring/api/v3/filters) that identifies which time series should be compared with the threshold.The filter is similar to the one that is specified in the ListTimeSeries request (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list) (that call is useful to verify the time series that will be retrieved / processed). The filter must specify the metric type and the resource type. Optionally, it can specify resource labels and metric labels. This field must not exceed 2048 Unicode characters in length.

        :param filter: The filter of this MetricThreshold.
        :type filter: str
        """

        self._filter = filter

    @property
    def forecast_options(self):
        """Gets the forecast_options of this MetricThreshold.


        :return: The forecast_options of this MetricThreshold.
        :rtype: ForecastOptions
        """
        return self._forecast_options

    @forecast_options.setter
    def forecast_options(self, forecast_options):
        """Sets the forecast_options of this MetricThreshold.


        :param forecast_options: The forecast_options of this MetricThreshold.
        :type forecast_options: ForecastOptions
        """

        self._forecast_options = forecast_options

    @property
    def threshold_value(self):
        """Gets the threshold_value of this MetricThreshold.

        A value against which to compare the time series.

        :return: The threshold_value of this MetricThreshold.
        :rtype: float
        """
        return self._threshold_value

    @threshold_value.setter
    def threshold_value(self, threshold_value):
        """Sets the threshold_value of this MetricThreshold.

        A value against which to compare the time series.

        :param threshold_value: The threshold_value of this MetricThreshold.
        :type threshold_value: float
        """

        self._threshold_value = threshold_value

    @property
    def trigger(self):
        """Gets the trigger of this MetricThreshold.


        :return: The trigger of this MetricThreshold.
        :rtype: Trigger
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this MetricThreshold.


        :param trigger: The trigger of this MetricThreshold.
        :type trigger: Trigger
        """

        self._trigger = trigger
