/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotificationChannel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotificationChannel::OAINotificationChannel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotificationChannel::OAINotificationChannel() {
    this->initializeModel();
}

OAINotificationChannel::~OAINotificationChannel() {}

void OAINotificationChannel::initializeModel() {

    m_creation_record_isSet = false;
    m_creation_record_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_mutation_records_isSet = false;
    m_mutation_records_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_labels_isSet = false;
    m_user_labels_isValid = false;

    m_verification_status_isSet = false;
    m_verification_status_isValid = false;
}

void OAINotificationChannel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotificationChannel::fromJsonObject(QJsonObject json) {

    m_creation_record_isValid = ::OpenAPI::fromJsonValue(m_creation_record, json[QString("creationRecord")]);
    m_creation_record_isSet = !json[QString("creationRecord")].isNull() && m_creation_record_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_mutation_records_isValid = ::OpenAPI::fromJsonValue(m_mutation_records, json[QString("mutationRecords")]);
    m_mutation_records_isSet = !json[QString("mutationRecords")].isNull() && m_mutation_records_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_labels_isValid = ::OpenAPI::fromJsonValue(m_user_labels, json[QString("userLabels")]);
    m_user_labels_isSet = !json[QString("userLabels")].isNull() && m_user_labels_isValid;

    m_verification_status_isValid = ::OpenAPI::fromJsonValue(m_verification_status, json[QString("verificationStatus")]);
    m_verification_status_isSet = !json[QString("verificationStatus")].isNull() && m_verification_status_isValid;
}

QString OAINotificationChannel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotificationChannel::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_record.isSet()) {
        obj.insert(QString("creationRecord"), ::OpenAPI::toJsonValue(m_creation_record));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_mutation_records.size() > 0) {
        obj.insert(QString("mutationRecords"), ::OpenAPI::toJsonValue(m_mutation_records));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user_labels.size() > 0) {
        obj.insert(QString("userLabels"), ::OpenAPI::toJsonValue(m_user_labels));
    }
    if (m_verification_status_isSet) {
        obj.insert(QString("verificationStatus"), ::OpenAPI::toJsonValue(m_verification_status));
    }
    return obj;
}

OAIMutationRecord OAINotificationChannel::getCreationRecord() const {
    return m_creation_record;
}
void OAINotificationChannel::setCreationRecord(const OAIMutationRecord &creation_record) {
    m_creation_record = creation_record;
    m_creation_record_isSet = true;
}

bool OAINotificationChannel::is_creation_record_Set() const{
    return m_creation_record_isSet;
}

bool OAINotificationChannel::is_creation_record_Valid() const{
    return m_creation_record_isValid;
}

QString OAINotificationChannel::getDescription() const {
    return m_description;
}
void OAINotificationChannel::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAINotificationChannel::is_description_Set() const{
    return m_description_isSet;
}

bool OAINotificationChannel::is_description_Valid() const{
    return m_description_isValid;
}

QString OAINotificationChannel::getDisplayName() const {
    return m_display_name;
}
void OAINotificationChannel::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAINotificationChannel::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAINotificationChannel::is_display_name_Valid() const{
    return m_display_name_isValid;
}

bool OAINotificationChannel::isEnabled() const {
    return m_enabled;
}
void OAINotificationChannel::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAINotificationChannel::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAINotificationChannel::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QMap<QString, QString> OAINotificationChannel::getLabels() const {
    return m_labels;
}
void OAINotificationChannel::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAINotificationChannel::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAINotificationChannel::is_labels_Valid() const{
    return m_labels_isValid;
}

QList<OAIMutationRecord> OAINotificationChannel::getMutationRecords() const {
    return m_mutation_records;
}
void OAINotificationChannel::setMutationRecords(const QList<OAIMutationRecord> &mutation_records) {
    m_mutation_records = mutation_records;
    m_mutation_records_isSet = true;
}

bool OAINotificationChannel::is_mutation_records_Set() const{
    return m_mutation_records_isSet;
}

bool OAINotificationChannel::is_mutation_records_Valid() const{
    return m_mutation_records_isValid;
}

QString OAINotificationChannel::getName() const {
    return m_name;
}
void OAINotificationChannel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINotificationChannel::is_name_Set() const{
    return m_name_isSet;
}

bool OAINotificationChannel::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINotificationChannel::getType() const {
    return m_type;
}
void OAINotificationChannel::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAINotificationChannel::is_type_Set() const{
    return m_type_isSet;
}

bool OAINotificationChannel::is_type_Valid() const{
    return m_type_isValid;
}

QMap<QString, QString> OAINotificationChannel::getUserLabels() const {
    return m_user_labels;
}
void OAINotificationChannel::setUserLabels(const QMap<QString, QString> &user_labels) {
    m_user_labels = user_labels;
    m_user_labels_isSet = true;
}

bool OAINotificationChannel::is_user_labels_Set() const{
    return m_user_labels_isSet;
}

bool OAINotificationChannel::is_user_labels_Valid() const{
    return m_user_labels_isValid;
}

QString OAINotificationChannel::getVerificationStatus() const {
    return m_verification_status;
}
void OAINotificationChannel::setVerificationStatus(const QString &verification_status) {
    m_verification_status = verification_status;
    m_verification_status_isSet = true;
}

bool OAINotificationChannel::is_verification_status_Set() const{
    return m_verification_status_isSet;
}

bool OAINotificationChannel::is_verification_status_Valid() const{
    return m_verification_status_isValid;
}

bool OAINotificationChannel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_record.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mutation_records.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotificationChannel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
