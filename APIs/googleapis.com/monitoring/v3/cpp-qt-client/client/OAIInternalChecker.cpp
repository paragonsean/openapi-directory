/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInternalChecker.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInternalChecker::OAIInternalChecker(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInternalChecker::OAIInternalChecker() {
    this->initializeModel();
}

OAIInternalChecker::~OAIInternalChecker() {}

void OAIInternalChecker::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_gcp_zone_isSet = false;
    m_gcp_zone_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_peer_project_id_isSet = false;
    m_peer_project_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIInternalChecker::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInternalChecker::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_gcp_zone_isValid = ::OpenAPI::fromJsonValue(m_gcp_zone, json[QString("gcpZone")]);
    m_gcp_zone_isSet = !json[QString("gcpZone")].isNull() && m_gcp_zone_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_peer_project_id_isValid = ::OpenAPI::fromJsonValue(m_peer_project_id, json[QString("peerProjectId")]);
    m_peer_project_id_isSet = !json[QString("peerProjectId")].isNull() && m_peer_project_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIInternalChecker::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInternalChecker::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_gcp_zone_isSet) {
        obj.insert(QString("gcpZone"), ::OpenAPI::toJsonValue(m_gcp_zone));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_peer_project_id_isSet) {
        obj.insert(QString("peerProjectId"), ::OpenAPI::toJsonValue(m_peer_project_id));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIInternalChecker::getDisplayName() const {
    return m_display_name;
}
void OAIInternalChecker::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIInternalChecker::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIInternalChecker::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIInternalChecker::getGcpZone() const {
    return m_gcp_zone;
}
void OAIInternalChecker::setGcpZone(const QString &gcp_zone) {
    m_gcp_zone = gcp_zone;
    m_gcp_zone_isSet = true;
}

bool OAIInternalChecker::is_gcp_zone_Set() const{
    return m_gcp_zone_isSet;
}

bool OAIInternalChecker::is_gcp_zone_Valid() const{
    return m_gcp_zone_isValid;
}

QString OAIInternalChecker::getName() const {
    return m_name;
}
void OAIInternalChecker::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInternalChecker::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInternalChecker::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIInternalChecker::getNetwork() const {
    return m_network;
}
void OAIInternalChecker::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIInternalChecker::is_network_Set() const{
    return m_network_isSet;
}

bool OAIInternalChecker::is_network_Valid() const{
    return m_network_isValid;
}

QString OAIInternalChecker::getPeerProjectId() const {
    return m_peer_project_id;
}
void OAIInternalChecker::setPeerProjectId(const QString &peer_project_id) {
    m_peer_project_id = peer_project_id;
    m_peer_project_id_isSet = true;
}

bool OAIInternalChecker::is_peer_project_id_Set() const{
    return m_peer_project_id_isSet;
}

bool OAIInternalChecker::is_peer_project_id_Valid() const{
    return m_peer_project_id_isValid;
}

QString OAIInternalChecker::getState() const {
    return m_state;
}
void OAIInternalChecker::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIInternalChecker::is_state_Set() const{
    return m_state_isSet;
}

bool OAIInternalChecker::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIInternalChecker::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcp_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_peer_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInternalChecker::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
