/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAggregation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAggregation::OAIAggregation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAggregation::OAIAggregation() {
    this->initializeModel();
}

OAIAggregation::~OAIAggregation() {}

void OAIAggregation::initializeModel() {

    m_alignment_period_isSet = false;
    m_alignment_period_isValid = false;

    m_cross_series_reducer_isSet = false;
    m_cross_series_reducer_isValid = false;

    m_group_by_fields_isSet = false;
    m_group_by_fields_isValid = false;

    m_per_series_aligner_isSet = false;
    m_per_series_aligner_isValid = false;
}

void OAIAggregation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAggregation::fromJsonObject(QJsonObject json) {

    m_alignment_period_isValid = ::OpenAPI::fromJsonValue(m_alignment_period, json[QString("alignmentPeriod")]);
    m_alignment_period_isSet = !json[QString("alignmentPeriod")].isNull() && m_alignment_period_isValid;

    m_cross_series_reducer_isValid = ::OpenAPI::fromJsonValue(m_cross_series_reducer, json[QString("crossSeriesReducer")]);
    m_cross_series_reducer_isSet = !json[QString("crossSeriesReducer")].isNull() && m_cross_series_reducer_isValid;

    m_group_by_fields_isValid = ::OpenAPI::fromJsonValue(m_group_by_fields, json[QString("groupByFields")]);
    m_group_by_fields_isSet = !json[QString("groupByFields")].isNull() && m_group_by_fields_isValid;

    m_per_series_aligner_isValid = ::OpenAPI::fromJsonValue(m_per_series_aligner, json[QString("perSeriesAligner")]);
    m_per_series_aligner_isSet = !json[QString("perSeriesAligner")].isNull() && m_per_series_aligner_isValid;
}

QString OAIAggregation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAggregation::asJsonObject() const {
    QJsonObject obj;
    if (m_alignment_period_isSet) {
        obj.insert(QString("alignmentPeriod"), ::OpenAPI::toJsonValue(m_alignment_period));
    }
    if (m_cross_series_reducer_isSet) {
        obj.insert(QString("crossSeriesReducer"), ::OpenAPI::toJsonValue(m_cross_series_reducer));
    }
    if (m_group_by_fields.size() > 0) {
        obj.insert(QString("groupByFields"), ::OpenAPI::toJsonValue(m_group_by_fields));
    }
    if (m_per_series_aligner_isSet) {
        obj.insert(QString("perSeriesAligner"), ::OpenAPI::toJsonValue(m_per_series_aligner));
    }
    return obj;
}

QString OAIAggregation::getAlignmentPeriod() const {
    return m_alignment_period;
}
void OAIAggregation::setAlignmentPeriod(const QString &alignment_period) {
    m_alignment_period = alignment_period;
    m_alignment_period_isSet = true;
}

bool OAIAggregation::is_alignment_period_Set() const{
    return m_alignment_period_isSet;
}

bool OAIAggregation::is_alignment_period_Valid() const{
    return m_alignment_period_isValid;
}

QString OAIAggregation::getCrossSeriesReducer() const {
    return m_cross_series_reducer;
}
void OAIAggregation::setCrossSeriesReducer(const QString &cross_series_reducer) {
    m_cross_series_reducer = cross_series_reducer;
    m_cross_series_reducer_isSet = true;
}

bool OAIAggregation::is_cross_series_reducer_Set() const{
    return m_cross_series_reducer_isSet;
}

bool OAIAggregation::is_cross_series_reducer_Valid() const{
    return m_cross_series_reducer_isValid;
}

QList<QString> OAIAggregation::getGroupByFields() const {
    return m_group_by_fields;
}
void OAIAggregation::setGroupByFields(const QList<QString> &group_by_fields) {
    m_group_by_fields = group_by_fields;
    m_group_by_fields_isSet = true;
}

bool OAIAggregation::is_group_by_fields_Set() const{
    return m_group_by_fields_isSet;
}

bool OAIAggregation::is_group_by_fields_Valid() const{
    return m_group_by_fields_isValid;
}

QString OAIAggregation::getPerSeriesAligner() const {
    return m_per_series_aligner;
}
void OAIAggregation::setPerSeriesAligner(const QString &per_series_aligner) {
    m_per_series_aligner = per_series_aligner;
    m_per_series_aligner_isSet = true;
}

bool OAIAggregation::is_per_series_aligner_Set() const{
    return m_per_series_aligner_isSet;
}

bool OAIAggregation::is_per_series_aligner_Valid() const{
    return m_per_series_aligner_isValid;
}

bool OAIAggregation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alignment_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cross_series_reducer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_by_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_series_aligner_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAggregation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
