/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBasicSli.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBasicSli::OAIBasicSli(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBasicSli::OAIBasicSli() {
    this->initializeModel();
}

OAIBasicSli::~OAIBasicSli() {}

void OAIBasicSli::initializeModel() {

    m_availability_isSet = false;
    m_availability_isValid = false;

    m_latency_isSet = false;
    m_latency_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIBasicSli::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBasicSli::fromJsonObject(QJsonObject json) {

    m_availability_isValid = ::OpenAPI::fromJsonValue(m_availability, json[QString("availability")]);
    m_availability_isSet = !json[QString("availability")].isNull() && m_availability_isValid;

    m_latency_isValid = ::OpenAPI::fromJsonValue(m_latency, json[QString("latency")]);
    m_latency_isSet = !json[QString("latency")].isNull() && m_latency_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIBasicSli::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBasicSli::asJsonObject() const {
    QJsonObject obj;
    if (m_availability_isSet) {
        obj.insert(QString("availability"), ::OpenAPI::toJsonValue(m_availability));
    }
    if (m_latency.isSet()) {
        obj.insert(QString("latency"), ::OpenAPI::toJsonValue(m_latency));
    }
    if (m_location.size() > 0) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_method.size() > 0) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_version.size() > 0) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

OAIObject OAIBasicSli::getAvailability() const {
    return m_availability;
}
void OAIBasicSli::setAvailability(const OAIObject &availability) {
    m_availability = availability;
    m_availability_isSet = true;
}

bool OAIBasicSli::is_availability_Set() const{
    return m_availability_isSet;
}

bool OAIBasicSli::is_availability_Valid() const{
    return m_availability_isValid;
}

OAILatencyCriteria OAIBasicSli::getLatency() const {
    return m_latency;
}
void OAIBasicSli::setLatency(const OAILatencyCriteria &latency) {
    m_latency = latency;
    m_latency_isSet = true;
}

bool OAIBasicSli::is_latency_Set() const{
    return m_latency_isSet;
}

bool OAIBasicSli::is_latency_Valid() const{
    return m_latency_isValid;
}

QList<QString> OAIBasicSli::getLocation() const {
    return m_location;
}
void OAIBasicSli::setLocation(const QList<QString> &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIBasicSli::is_location_Set() const{
    return m_location_isSet;
}

bool OAIBasicSli::is_location_Valid() const{
    return m_location_isValid;
}

QList<QString> OAIBasicSli::getMethod() const {
    return m_method;
}
void OAIBasicSli::setMethod(const QList<QString> &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIBasicSli::is_method_Set() const{
    return m_method_isSet;
}

bool OAIBasicSli::is_method_Valid() const{
    return m_method_isValid;
}

QList<QString> OAIBasicSli::getVersion() const {
    return m_version;
}
void OAIBasicSli::setVersion(const QList<QString> &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIBasicSli::is_version_Set() const{
    return m_version_isSet;
}

bool OAIBasicSli::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIBasicSli::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_availability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_method.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBasicSli::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
