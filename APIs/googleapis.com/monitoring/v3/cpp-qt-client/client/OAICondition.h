/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICondition.h
 *
 * A condition is a true/false test that determines when an alerting policy should open an incident. If a condition evaluates to true, it signifies that something is wrong.
 */

#ifndef OAICondition_H
#define OAICondition_H

#include <QJsonObject>

#include "OAILogMatch.h"
#include "OAIMetricAbsence.h"
#include "OAIMetricThreshold.h"
#include "OAIMonitoringQueryLanguageCondition.h"
#include "OAIPrometheusQueryLanguageCondition.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMetricAbsence;
class OAILogMatch;
class OAIMonitoringQueryLanguageCondition;
class OAIPrometheusQueryLanguageCondition;
class OAIMetricThreshold;

class OAICondition : public OAIObject {
public:
    OAICondition();
    OAICondition(QString json);
    ~OAICondition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIMetricAbsence getConditionAbsent() const;
    void setConditionAbsent(const OAIMetricAbsence &condition_absent);
    bool is_condition_absent_Set() const;
    bool is_condition_absent_Valid() const;

    OAILogMatch getConditionMatchedLog() const;
    void setConditionMatchedLog(const OAILogMatch &condition_matched_log);
    bool is_condition_matched_log_Set() const;
    bool is_condition_matched_log_Valid() const;

    OAIMonitoringQueryLanguageCondition getConditionMonitoringQueryLanguage() const;
    void setConditionMonitoringQueryLanguage(const OAIMonitoringQueryLanguageCondition &condition_monitoring_query_language);
    bool is_condition_monitoring_query_language_Set() const;
    bool is_condition_monitoring_query_language_Valid() const;

    OAIPrometheusQueryLanguageCondition getConditionPrometheusQueryLanguage() const;
    void setConditionPrometheusQueryLanguage(const OAIPrometheusQueryLanguageCondition &condition_prometheus_query_language);
    bool is_condition_prometheus_query_language_Set() const;
    bool is_condition_prometheus_query_language_Valid() const;

    OAIMetricThreshold getConditionThreshold() const;
    void setConditionThreshold(const OAIMetricThreshold &condition_threshold);
    bool is_condition_threshold_Set() const;
    bool is_condition_threshold_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIMetricAbsence m_condition_absent;
    bool m_condition_absent_isSet;
    bool m_condition_absent_isValid;

    OAILogMatch m_condition_matched_log;
    bool m_condition_matched_log_isSet;
    bool m_condition_matched_log_isValid;

    OAIMonitoringQueryLanguageCondition m_condition_monitoring_query_language;
    bool m_condition_monitoring_query_language_isSet;
    bool m_condition_monitoring_query_language_isValid;

    OAIPrometheusQueryLanguageCondition m_condition_prometheus_query_language;
    bool m_condition_prometheus_query_language_isSet;
    bool m_condition_prometheus_query_language_isValid;

    OAIMetricThreshold m_condition_threshold;
    bool m_condition_threshold_isSet;
    bool m_condition_threshold_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICondition)

#endif // OAICondition_H
