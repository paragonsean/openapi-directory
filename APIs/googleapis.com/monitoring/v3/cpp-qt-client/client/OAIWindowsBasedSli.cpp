/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWindowsBasedSli.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWindowsBasedSli::OAIWindowsBasedSli(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWindowsBasedSli::OAIWindowsBasedSli() {
    this->initializeModel();
}

OAIWindowsBasedSli::~OAIWindowsBasedSli() {}

void OAIWindowsBasedSli::initializeModel() {

    m_good_bad_metric_filter_isSet = false;
    m_good_bad_metric_filter_isValid = false;

    m_good_total_ratio_threshold_isSet = false;
    m_good_total_ratio_threshold_isValid = false;

    m_metric_mean_in_range_isSet = false;
    m_metric_mean_in_range_isValid = false;

    m_metric_sum_in_range_isSet = false;
    m_metric_sum_in_range_isValid = false;

    m_window_period_isSet = false;
    m_window_period_isValid = false;
}

void OAIWindowsBasedSli::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWindowsBasedSli::fromJsonObject(QJsonObject json) {

    m_good_bad_metric_filter_isValid = ::OpenAPI::fromJsonValue(m_good_bad_metric_filter, json[QString("goodBadMetricFilter")]);
    m_good_bad_metric_filter_isSet = !json[QString("goodBadMetricFilter")].isNull() && m_good_bad_metric_filter_isValid;

    m_good_total_ratio_threshold_isValid = ::OpenAPI::fromJsonValue(m_good_total_ratio_threshold, json[QString("goodTotalRatioThreshold")]);
    m_good_total_ratio_threshold_isSet = !json[QString("goodTotalRatioThreshold")].isNull() && m_good_total_ratio_threshold_isValid;

    m_metric_mean_in_range_isValid = ::OpenAPI::fromJsonValue(m_metric_mean_in_range, json[QString("metricMeanInRange")]);
    m_metric_mean_in_range_isSet = !json[QString("metricMeanInRange")].isNull() && m_metric_mean_in_range_isValid;

    m_metric_sum_in_range_isValid = ::OpenAPI::fromJsonValue(m_metric_sum_in_range, json[QString("metricSumInRange")]);
    m_metric_sum_in_range_isSet = !json[QString("metricSumInRange")].isNull() && m_metric_sum_in_range_isValid;

    m_window_period_isValid = ::OpenAPI::fromJsonValue(m_window_period, json[QString("windowPeriod")]);
    m_window_period_isSet = !json[QString("windowPeriod")].isNull() && m_window_period_isValid;
}

QString OAIWindowsBasedSli::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWindowsBasedSli::asJsonObject() const {
    QJsonObject obj;
    if (m_good_bad_metric_filter_isSet) {
        obj.insert(QString("goodBadMetricFilter"), ::OpenAPI::toJsonValue(m_good_bad_metric_filter));
    }
    if (m_good_total_ratio_threshold.isSet()) {
        obj.insert(QString("goodTotalRatioThreshold"), ::OpenAPI::toJsonValue(m_good_total_ratio_threshold));
    }
    if (m_metric_mean_in_range.isSet()) {
        obj.insert(QString("metricMeanInRange"), ::OpenAPI::toJsonValue(m_metric_mean_in_range));
    }
    if (m_metric_sum_in_range.isSet()) {
        obj.insert(QString("metricSumInRange"), ::OpenAPI::toJsonValue(m_metric_sum_in_range));
    }
    if (m_window_period_isSet) {
        obj.insert(QString("windowPeriod"), ::OpenAPI::toJsonValue(m_window_period));
    }
    return obj;
}

QString OAIWindowsBasedSli::getGoodBadMetricFilter() const {
    return m_good_bad_metric_filter;
}
void OAIWindowsBasedSli::setGoodBadMetricFilter(const QString &good_bad_metric_filter) {
    m_good_bad_metric_filter = good_bad_metric_filter;
    m_good_bad_metric_filter_isSet = true;
}

bool OAIWindowsBasedSli::is_good_bad_metric_filter_Set() const{
    return m_good_bad_metric_filter_isSet;
}

bool OAIWindowsBasedSli::is_good_bad_metric_filter_Valid() const{
    return m_good_bad_metric_filter_isValid;
}

OAIPerformanceThreshold OAIWindowsBasedSli::getGoodTotalRatioThreshold() const {
    return m_good_total_ratio_threshold;
}
void OAIWindowsBasedSli::setGoodTotalRatioThreshold(const OAIPerformanceThreshold &good_total_ratio_threshold) {
    m_good_total_ratio_threshold = good_total_ratio_threshold;
    m_good_total_ratio_threshold_isSet = true;
}

bool OAIWindowsBasedSli::is_good_total_ratio_threshold_Set() const{
    return m_good_total_ratio_threshold_isSet;
}

bool OAIWindowsBasedSli::is_good_total_ratio_threshold_Valid() const{
    return m_good_total_ratio_threshold_isValid;
}

OAIMetricRange OAIWindowsBasedSli::getMetricMeanInRange() const {
    return m_metric_mean_in_range;
}
void OAIWindowsBasedSli::setMetricMeanInRange(const OAIMetricRange &metric_mean_in_range) {
    m_metric_mean_in_range = metric_mean_in_range;
    m_metric_mean_in_range_isSet = true;
}

bool OAIWindowsBasedSli::is_metric_mean_in_range_Set() const{
    return m_metric_mean_in_range_isSet;
}

bool OAIWindowsBasedSli::is_metric_mean_in_range_Valid() const{
    return m_metric_mean_in_range_isValid;
}

OAIMetricRange OAIWindowsBasedSli::getMetricSumInRange() const {
    return m_metric_sum_in_range;
}
void OAIWindowsBasedSli::setMetricSumInRange(const OAIMetricRange &metric_sum_in_range) {
    m_metric_sum_in_range = metric_sum_in_range;
    m_metric_sum_in_range_isSet = true;
}

bool OAIWindowsBasedSli::is_metric_sum_in_range_Set() const{
    return m_metric_sum_in_range_isSet;
}

bool OAIWindowsBasedSli::is_metric_sum_in_range_Valid() const{
    return m_metric_sum_in_range_isValid;
}

QString OAIWindowsBasedSli::getWindowPeriod() const {
    return m_window_period;
}
void OAIWindowsBasedSli::setWindowPeriod(const QString &window_period) {
    m_window_period = window_period;
    m_window_period_isSet = true;
}

bool OAIWindowsBasedSli::is_window_period_Set() const{
    return m_window_period_isSet;
}

bool OAIWindowsBasedSli::is_window_period_Valid() const{
    return m_window_period_isValid;
}

bool OAIWindowsBasedSli::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_good_bad_metric_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_good_total_ratio_threshold.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_mean_in_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_sum_in_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_window_period_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWindowsBasedSli::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
