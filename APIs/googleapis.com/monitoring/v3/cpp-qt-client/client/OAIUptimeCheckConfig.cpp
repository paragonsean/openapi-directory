/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUptimeCheckConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUptimeCheckConfig::OAIUptimeCheckConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUptimeCheckConfig::OAIUptimeCheckConfig() {
    this->initializeModel();
}

OAIUptimeCheckConfig::~OAIUptimeCheckConfig() {}

void OAIUptimeCheckConfig::initializeModel() {

    m_checker_type_isSet = false;
    m_checker_type_isValid = false;

    m_content_matchers_isSet = false;
    m_content_matchers_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_http_check_isSet = false;
    m_http_check_isValid = false;

    m_internal_checkers_isSet = false;
    m_internal_checkers_isValid = false;

    m_is_internal_isSet = false;
    m_is_internal_isValid = false;

    m_monitored_resource_isSet = false;
    m_monitored_resource_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;

    m_resource_group_isSet = false;
    m_resource_group_isValid = false;

    m_selected_regions_isSet = false;
    m_selected_regions_isValid = false;

    m_synthetic_monitor_isSet = false;
    m_synthetic_monitor_isValid = false;

    m_tcp_check_isSet = false;
    m_tcp_check_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;

    m_user_labels_isSet = false;
    m_user_labels_isValid = false;
}

void OAIUptimeCheckConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUptimeCheckConfig::fromJsonObject(QJsonObject json) {

    m_checker_type_isValid = ::OpenAPI::fromJsonValue(m_checker_type, json[QString("checkerType")]);
    m_checker_type_isSet = !json[QString("checkerType")].isNull() && m_checker_type_isValid;

    m_content_matchers_isValid = ::OpenAPI::fromJsonValue(m_content_matchers, json[QString("contentMatchers")]);
    m_content_matchers_isSet = !json[QString("contentMatchers")].isNull() && m_content_matchers_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_http_check_isValid = ::OpenAPI::fromJsonValue(m_http_check, json[QString("httpCheck")]);
    m_http_check_isSet = !json[QString("httpCheck")].isNull() && m_http_check_isValid;

    m_internal_checkers_isValid = ::OpenAPI::fromJsonValue(m_internal_checkers, json[QString("internalCheckers")]);
    m_internal_checkers_isSet = !json[QString("internalCheckers")].isNull() && m_internal_checkers_isValid;

    m_is_internal_isValid = ::OpenAPI::fromJsonValue(m_is_internal, json[QString("isInternal")]);
    m_is_internal_isSet = !json[QString("isInternal")].isNull() && m_is_internal_isValid;

    m_monitored_resource_isValid = ::OpenAPI::fromJsonValue(m_monitored_resource, json[QString("monitoredResource")]);
    m_monitored_resource_isSet = !json[QString("monitoredResource")].isNull() && m_monitored_resource_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("period")]);
    m_period_isSet = !json[QString("period")].isNull() && m_period_isValid;

    m_resource_group_isValid = ::OpenAPI::fromJsonValue(m_resource_group, json[QString("resourceGroup")]);
    m_resource_group_isSet = !json[QString("resourceGroup")].isNull() && m_resource_group_isValid;

    m_selected_regions_isValid = ::OpenAPI::fromJsonValue(m_selected_regions, json[QString("selectedRegions")]);
    m_selected_regions_isSet = !json[QString("selectedRegions")].isNull() && m_selected_regions_isValid;

    m_synthetic_monitor_isValid = ::OpenAPI::fromJsonValue(m_synthetic_monitor, json[QString("syntheticMonitor")]);
    m_synthetic_monitor_isSet = !json[QString("syntheticMonitor")].isNull() && m_synthetic_monitor_isValid;

    m_tcp_check_isValid = ::OpenAPI::fromJsonValue(m_tcp_check, json[QString("tcpCheck")]);
    m_tcp_check_isSet = !json[QString("tcpCheck")].isNull() && m_tcp_check_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;

    m_user_labels_isValid = ::OpenAPI::fromJsonValue(m_user_labels, json[QString("userLabels")]);
    m_user_labels_isSet = !json[QString("userLabels")].isNull() && m_user_labels_isValid;
}

QString OAIUptimeCheckConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUptimeCheckConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_checker_type_isSet) {
        obj.insert(QString("checkerType"), ::OpenAPI::toJsonValue(m_checker_type));
    }
    if (m_content_matchers.size() > 0) {
        obj.insert(QString("contentMatchers"), ::OpenAPI::toJsonValue(m_content_matchers));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_http_check.isSet()) {
        obj.insert(QString("httpCheck"), ::OpenAPI::toJsonValue(m_http_check));
    }
    if (m_internal_checkers.size() > 0) {
        obj.insert(QString("internalCheckers"), ::OpenAPI::toJsonValue(m_internal_checkers));
    }
    if (m_is_internal_isSet) {
        obj.insert(QString("isInternal"), ::OpenAPI::toJsonValue(m_is_internal));
    }
    if (m_monitored_resource.isSet()) {
        obj.insert(QString("monitoredResource"), ::OpenAPI::toJsonValue(m_monitored_resource));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_period_isSet) {
        obj.insert(QString("period"), ::OpenAPI::toJsonValue(m_period));
    }
    if (m_resource_group.isSet()) {
        obj.insert(QString("resourceGroup"), ::OpenAPI::toJsonValue(m_resource_group));
    }
    if (m_selected_regions.size() > 0) {
        obj.insert(QString("selectedRegions"), ::OpenAPI::toJsonValue(m_selected_regions));
    }
    if (m_synthetic_monitor.isSet()) {
        obj.insert(QString("syntheticMonitor"), ::OpenAPI::toJsonValue(m_synthetic_monitor));
    }
    if (m_tcp_check.isSet()) {
        obj.insert(QString("tcpCheck"), ::OpenAPI::toJsonValue(m_tcp_check));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    if (m_user_labels.size() > 0) {
        obj.insert(QString("userLabels"), ::OpenAPI::toJsonValue(m_user_labels));
    }
    return obj;
}

QString OAIUptimeCheckConfig::getCheckerType() const {
    return m_checker_type;
}
void OAIUptimeCheckConfig::setCheckerType(const QString &checker_type) {
    m_checker_type = checker_type;
    m_checker_type_isSet = true;
}

bool OAIUptimeCheckConfig::is_checker_type_Set() const{
    return m_checker_type_isSet;
}

bool OAIUptimeCheckConfig::is_checker_type_Valid() const{
    return m_checker_type_isValid;
}

QList<OAIContentMatcher> OAIUptimeCheckConfig::getContentMatchers() const {
    return m_content_matchers;
}
void OAIUptimeCheckConfig::setContentMatchers(const QList<OAIContentMatcher> &content_matchers) {
    m_content_matchers = content_matchers;
    m_content_matchers_isSet = true;
}

bool OAIUptimeCheckConfig::is_content_matchers_Set() const{
    return m_content_matchers_isSet;
}

bool OAIUptimeCheckConfig::is_content_matchers_Valid() const{
    return m_content_matchers_isValid;
}

QString OAIUptimeCheckConfig::getDisplayName() const {
    return m_display_name;
}
void OAIUptimeCheckConfig::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIUptimeCheckConfig::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIUptimeCheckConfig::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIHttpCheck OAIUptimeCheckConfig::getHttpCheck() const {
    return m_http_check;
}
void OAIUptimeCheckConfig::setHttpCheck(const OAIHttpCheck &http_check) {
    m_http_check = http_check;
    m_http_check_isSet = true;
}

bool OAIUptimeCheckConfig::is_http_check_Set() const{
    return m_http_check_isSet;
}

bool OAIUptimeCheckConfig::is_http_check_Valid() const{
    return m_http_check_isValid;
}

QList<OAIInternalChecker> OAIUptimeCheckConfig::getInternalCheckers() const {
    return m_internal_checkers;
}
void OAIUptimeCheckConfig::setInternalCheckers(const QList<OAIInternalChecker> &internal_checkers) {
    m_internal_checkers = internal_checkers;
    m_internal_checkers_isSet = true;
}

bool OAIUptimeCheckConfig::is_internal_checkers_Set() const{
    return m_internal_checkers_isSet;
}

bool OAIUptimeCheckConfig::is_internal_checkers_Valid() const{
    return m_internal_checkers_isValid;
}

bool OAIUptimeCheckConfig::isIsInternal() const {
    return m_is_internal;
}
void OAIUptimeCheckConfig::setIsInternal(const bool &is_internal) {
    m_is_internal = is_internal;
    m_is_internal_isSet = true;
}

bool OAIUptimeCheckConfig::is_is_internal_Set() const{
    return m_is_internal_isSet;
}

bool OAIUptimeCheckConfig::is_is_internal_Valid() const{
    return m_is_internal_isValid;
}

OAIMonitoredResource OAIUptimeCheckConfig::getMonitoredResource() const {
    return m_monitored_resource;
}
void OAIUptimeCheckConfig::setMonitoredResource(const OAIMonitoredResource &monitored_resource) {
    m_monitored_resource = monitored_resource;
    m_monitored_resource_isSet = true;
}

bool OAIUptimeCheckConfig::is_monitored_resource_Set() const{
    return m_monitored_resource_isSet;
}

bool OAIUptimeCheckConfig::is_monitored_resource_Valid() const{
    return m_monitored_resource_isValid;
}

QString OAIUptimeCheckConfig::getName() const {
    return m_name;
}
void OAIUptimeCheckConfig::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUptimeCheckConfig::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUptimeCheckConfig::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUptimeCheckConfig::getPeriod() const {
    return m_period;
}
void OAIUptimeCheckConfig::setPeriod(const QString &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAIUptimeCheckConfig::is_period_Set() const{
    return m_period_isSet;
}

bool OAIUptimeCheckConfig::is_period_Valid() const{
    return m_period_isValid;
}

OAIResourceGroup OAIUptimeCheckConfig::getResourceGroup() const {
    return m_resource_group;
}
void OAIUptimeCheckConfig::setResourceGroup(const OAIResourceGroup &resource_group) {
    m_resource_group = resource_group;
    m_resource_group_isSet = true;
}

bool OAIUptimeCheckConfig::is_resource_group_Set() const{
    return m_resource_group_isSet;
}

bool OAIUptimeCheckConfig::is_resource_group_Valid() const{
    return m_resource_group_isValid;
}

QList<QString> OAIUptimeCheckConfig::getSelectedRegions() const {
    return m_selected_regions;
}
void OAIUptimeCheckConfig::setSelectedRegions(const QList<QString> &selected_regions) {
    m_selected_regions = selected_regions;
    m_selected_regions_isSet = true;
}

bool OAIUptimeCheckConfig::is_selected_regions_Set() const{
    return m_selected_regions_isSet;
}

bool OAIUptimeCheckConfig::is_selected_regions_Valid() const{
    return m_selected_regions_isValid;
}

OAISyntheticMonitorTarget OAIUptimeCheckConfig::getSyntheticMonitor() const {
    return m_synthetic_monitor;
}
void OAIUptimeCheckConfig::setSyntheticMonitor(const OAISyntheticMonitorTarget &synthetic_monitor) {
    m_synthetic_monitor = synthetic_monitor;
    m_synthetic_monitor_isSet = true;
}

bool OAIUptimeCheckConfig::is_synthetic_monitor_Set() const{
    return m_synthetic_monitor_isSet;
}

bool OAIUptimeCheckConfig::is_synthetic_monitor_Valid() const{
    return m_synthetic_monitor_isValid;
}

OAITcpCheck OAIUptimeCheckConfig::getTcpCheck() const {
    return m_tcp_check;
}
void OAIUptimeCheckConfig::setTcpCheck(const OAITcpCheck &tcp_check) {
    m_tcp_check = tcp_check;
    m_tcp_check_isSet = true;
}

bool OAIUptimeCheckConfig::is_tcp_check_Set() const{
    return m_tcp_check_isSet;
}

bool OAIUptimeCheckConfig::is_tcp_check_Valid() const{
    return m_tcp_check_isValid;
}

QString OAIUptimeCheckConfig::getTimeout() const {
    return m_timeout;
}
void OAIUptimeCheckConfig::setTimeout(const QString &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIUptimeCheckConfig::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIUptimeCheckConfig::is_timeout_Valid() const{
    return m_timeout_isValid;
}

QMap<QString, QString> OAIUptimeCheckConfig::getUserLabels() const {
    return m_user_labels;
}
void OAIUptimeCheckConfig::setUserLabels(const QMap<QString, QString> &user_labels) {
    m_user_labels = user_labels;
    m_user_labels_isSet = true;
}

bool OAIUptimeCheckConfig::is_user_labels_Set() const{
    return m_user_labels_isSet;
}

bool OAIUptimeCheckConfig::is_user_labels_Valid() const{
    return m_user_labels_isValid;
}

bool OAIUptimeCheckConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_checker_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_matchers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_check.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_checkers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_internal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitored_resource.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_regions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_synthetic_monitor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tcp_check.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUptimeCheckConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
