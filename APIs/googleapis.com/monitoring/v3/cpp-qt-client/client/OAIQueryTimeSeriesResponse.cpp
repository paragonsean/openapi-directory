/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryTimeSeriesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryTimeSeriesResponse::OAIQueryTimeSeriesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryTimeSeriesResponse::OAIQueryTimeSeriesResponse() {
    this->initializeModel();
}

OAIQueryTimeSeriesResponse::~OAIQueryTimeSeriesResponse() {}

void OAIQueryTimeSeriesResponse::initializeModel() {

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_partial_errors_isSet = false;
    m_partial_errors_isValid = false;

    m_time_series_data_isSet = false;
    m_time_series_data_isValid = false;

    m_time_series_descriptor_isSet = false;
    m_time_series_descriptor_isValid = false;
}

void OAIQueryTimeSeriesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryTimeSeriesResponse::fromJsonObject(QJsonObject json) {

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_partial_errors_isValid = ::OpenAPI::fromJsonValue(m_partial_errors, json[QString("partialErrors")]);
    m_partial_errors_isSet = !json[QString("partialErrors")].isNull() && m_partial_errors_isValid;

    m_time_series_data_isValid = ::OpenAPI::fromJsonValue(m_time_series_data, json[QString("timeSeriesData")]);
    m_time_series_data_isSet = !json[QString("timeSeriesData")].isNull() && m_time_series_data_isValid;

    m_time_series_descriptor_isValid = ::OpenAPI::fromJsonValue(m_time_series_descriptor, json[QString("timeSeriesDescriptor")]);
    m_time_series_descriptor_isSet = !json[QString("timeSeriesDescriptor")].isNull() && m_time_series_descriptor_isValid;
}

QString OAIQueryTimeSeriesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryTimeSeriesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_partial_errors.size() > 0) {
        obj.insert(QString("partialErrors"), ::OpenAPI::toJsonValue(m_partial_errors));
    }
    if (m_time_series_data.size() > 0) {
        obj.insert(QString("timeSeriesData"), ::OpenAPI::toJsonValue(m_time_series_data));
    }
    if (m_time_series_descriptor.isSet()) {
        obj.insert(QString("timeSeriesDescriptor"), ::OpenAPI::toJsonValue(m_time_series_descriptor));
    }
    return obj;
}

QString OAIQueryTimeSeriesResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIQueryTimeSeriesResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIQueryTimeSeriesResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIQueryTimeSeriesResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

QList<OAIStatus> OAIQueryTimeSeriesResponse::getPartialErrors() const {
    return m_partial_errors;
}
void OAIQueryTimeSeriesResponse::setPartialErrors(const QList<OAIStatus> &partial_errors) {
    m_partial_errors = partial_errors;
    m_partial_errors_isSet = true;
}

bool OAIQueryTimeSeriesResponse::is_partial_errors_Set() const{
    return m_partial_errors_isSet;
}

bool OAIQueryTimeSeriesResponse::is_partial_errors_Valid() const{
    return m_partial_errors_isValid;
}

QList<OAITimeSeriesData> OAIQueryTimeSeriesResponse::getTimeSeriesData() const {
    return m_time_series_data;
}
void OAIQueryTimeSeriesResponse::setTimeSeriesData(const QList<OAITimeSeriesData> &time_series_data) {
    m_time_series_data = time_series_data;
    m_time_series_data_isSet = true;
}

bool OAIQueryTimeSeriesResponse::is_time_series_data_Set() const{
    return m_time_series_data_isSet;
}

bool OAIQueryTimeSeriesResponse::is_time_series_data_Valid() const{
    return m_time_series_data_isValid;
}

OAITimeSeriesDescriptor OAIQueryTimeSeriesResponse::getTimeSeriesDescriptor() const {
    return m_time_series_descriptor;
}
void OAIQueryTimeSeriesResponse::setTimeSeriesDescriptor(const OAITimeSeriesDescriptor &time_series_descriptor) {
    m_time_series_descriptor = time_series_descriptor;
    m_time_series_descriptor_isSet = true;
}

bool OAIQueryTimeSeriesResponse::is_time_series_descriptor_Set() const{
    return m_time_series_descriptor_isSet;
}

bool OAIQueryTimeSeriesResponse::is_time_series_descriptor_Valid() const{
    return m_time_series_descriptor_isValid;
}

bool OAIQueryTimeSeriesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partial_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_series_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_series_descriptor.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryTimeSeriesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
