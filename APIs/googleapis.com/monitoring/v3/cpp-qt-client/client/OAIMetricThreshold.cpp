/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetricThreshold.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetricThreshold::OAIMetricThreshold(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetricThreshold::OAIMetricThreshold() {
    this->initializeModel();
}

OAIMetricThreshold::~OAIMetricThreshold() {}

void OAIMetricThreshold::initializeModel() {

    m_aggregations_isSet = false;
    m_aggregations_isValid = false;

    m_comparison_isSet = false;
    m_comparison_isValid = false;

    m_denominator_aggregations_isSet = false;
    m_denominator_aggregations_isValid = false;

    m_denominator_filter_isSet = false;
    m_denominator_filter_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_evaluation_missing_data_isSet = false;
    m_evaluation_missing_data_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_forecast_options_isSet = false;
    m_forecast_options_isValid = false;

    m_threshold_value_isSet = false;
    m_threshold_value_isValid = false;

    m_trigger_isSet = false;
    m_trigger_isValid = false;
}

void OAIMetricThreshold::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetricThreshold::fromJsonObject(QJsonObject json) {

    m_aggregations_isValid = ::OpenAPI::fromJsonValue(m_aggregations, json[QString("aggregations")]);
    m_aggregations_isSet = !json[QString("aggregations")].isNull() && m_aggregations_isValid;

    m_comparison_isValid = ::OpenAPI::fromJsonValue(m_comparison, json[QString("comparison")]);
    m_comparison_isSet = !json[QString("comparison")].isNull() && m_comparison_isValid;

    m_denominator_aggregations_isValid = ::OpenAPI::fromJsonValue(m_denominator_aggregations, json[QString("denominatorAggregations")]);
    m_denominator_aggregations_isSet = !json[QString("denominatorAggregations")].isNull() && m_denominator_aggregations_isValid;

    m_denominator_filter_isValid = ::OpenAPI::fromJsonValue(m_denominator_filter, json[QString("denominatorFilter")]);
    m_denominator_filter_isSet = !json[QString("denominatorFilter")].isNull() && m_denominator_filter_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_evaluation_missing_data_isValid = ::OpenAPI::fromJsonValue(m_evaluation_missing_data, json[QString("evaluationMissingData")]);
    m_evaluation_missing_data_isSet = !json[QString("evaluationMissingData")].isNull() && m_evaluation_missing_data_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_forecast_options_isValid = ::OpenAPI::fromJsonValue(m_forecast_options, json[QString("forecastOptions")]);
    m_forecast_options_isSet = !json[QString("forecastOptions")].isNull() && m_forecast_options_isValid;

    m_threshold_value_isValid = ::OpenAPI::fromJsonValue(m_threshold_value, json[QString("thresholdValue")]);
    m_threshold_value_isSet = !json[QString("thresholdValue")].isNull() && m_threshold_value_isValid;

    m_trigger_isValid = ::OpenAPI::fromJsonValue(m_trigger, json[QString("trigger")]);
    m_trigger_isSet = !json[QString("trigger")].isNull() && m_trigger_isValid;
}

QString OAIMetricThreshold::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetricThreshold::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregations.size() > 0) {
        obj.insert(QString("aggregations"), ::OpenAPI::toJsonValue(m_aggregations));
    }
    if (m_comparison_isSet) {
        obj.insert(QString("comparison"), ::OpenAPI::toJsonValue(m_comparison));
    }
    if (m_denominator_aggregations.size() > 0) {
        obj.insert(QString("denominatorAggregations"), ::OpenAPI::toJsonValue(m_denominator_aggregations));
    }
    if (m_denominator_filter_isSet) {
        obj.insert(QString("denominatorFilter"), ::OpenAPI::toJsonValue(m_denominator_filter));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_evaluation_missing_data_isSet) {
        obj.insert(QString("evaluationMissingData"), ::OpenAPI::toJsonValue(m_evaluation_missing_data));
    }
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_forecast_options.isSet()) {
        obj.insert(QString("forecastOptions"), ::OpenAPI::toJsonValue(m_forecast_options));
    }
    if (m_threshold_value_isSet) {
        obj.insert(QString("thresholdValue"), ::OpenAPI::toJsonValue(m_threshold_value));
    }
    if (m_trigger.isSet()) {
        obj.insert(QString("trigger"), ::OpenAPI::toJsonValue(m_trigger));
    }
    return obj;
}

QList<OAIAggregation> OAIMetricThreshold::getAggregations() const {
    return m_aggregations;
}
void OAIMetricThreshold::setAggregations(const QList<OAIAggregation> &aggregations) {
    m_aggregations = aggregations;
    m_aggregations_isSet = true;
}

bool OAIMetricThreshold::is_aggregations_Set() const{
    return m_aggregations_isSet;
}

bool OAIMetricThreshold::is_aggregations_Valid() const{
    return m_aggregations_isValid;
}

QString OAIMetricThreshold::getComparison() const {
    return m_comparison;
}
void OAIMetricThreshold::setComparison(const QString &comparison) {
    m_comparison = comparison;
    m_comparison_isSet = true;
}

bool OAIMetricThreshold::is_comparison_Set() const{
    return m_comparison_isSet;
}

bool OAIMetricThreshold::is_comparison_Valid() const{
    return m_comparison_isValid;
}

QList<OAIAggregation> OAIMetricThreshold::getDenominatorAggregations() const {
    return m_denominator_aggregations;
}
void OAIMetricThreshold::setDenominatorAggregations(const QList<OAIAggregation> &denominator_aggregations) {
    m_denominator_aggregations = denominator_aggregations;
    m_denominator_aggregations_isSet = true;
}

bool OAIMetricThreshold::is_denominator_aggregations_Set() const{
    return m_denominator_aggregations_isSet;
}

bool OAIMetricThreshold::is_denominator_aggregations_Valid() const{
    return m_denominator_aggregations_isValid;
}

QString OAIMetricThreshold::getDenominatorFilter() const {
    return m_denominator_filter;
}
void OAIMetricThreshold::setDenominatorFilter(const QString &denominator_filter) {
    m_denominator_filter = denominator_filter;
    m_denominator_filter_isSet = true;
}

bool OAIMetricThreshold::is_denominator_filter_Set() const{
    return m_denominator_filter_isSet;
}

bool OAIMetricThreshold::is_denominator_filter_Valid() const{
    return m_denominator_filter_isValid;
}

QString OAIMetricThreshold::getDuration() const {
    return m_duration;
}
void OAIMetricThreshold::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIMetricThreshold::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIMetricThreshold::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAIMetricThreshold::getEvaluationMissingData() const {
    return m_evaluation_missing_data;
}
void OAIMetricThreshold::setEvaluationMissingData(const QString &evaluation_missing_data) {
    m_evaluation_missing_data = evaluation_missing_data;
    m_evaluation_missing_data_isSet = true;
}

bool OAIMetricThreshold::is_evaluation_missing_data_Set() const{
    return m_evaluation_missing_data_isSet;
}

bool OAIMetricThreshold::is_evaluation_missing_data_Valid() const{
    return m_evaluation_missing_data_isValid;
}

QString OAIMetricThreshold::getFilter() const {
    return m_filter;
}
void OAIMetricThreshold::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIMetricThreshold::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIMetricThreshold::is_filter_Valid() const{
    return m_filter_isValid;
}

OAIForecastOptions OAIMetricThreshold::getForecastOptions() const {
    return m_forecast_options;
}
void OAIMetricThreshold::setForecastOptions(const OAIForecastOptions &forecast_options) {
    m_forecast_options = forecast_options;
    m_forecast_options_isSet = true;
}

bool OAIMetricThreshold::is_forecast_options_Set() const{
    return m_forecast_options_isSet;
}

bool OAIMetricThreshold::is_forecast_options_Valid() const{
    return m_forecast_options_isValid;
}

double OAIMetricThreshold::getThresholdValue() const {
    return m_threshold_value;
}
void OAIMetricThreshold::setThresholdValue(const double &threshold_value) {
    m_threshold_value = threshold_value;
    m_threshold_value_isSet = true;
}

bool OAIMetricThreshold::is_threshold_value_Set() const{
    return m_threshold_value_isSet;
}

bool OAIMetricThreshold::is_threshold_value_Valid() const{
    return m_threshold_value_isValid;
}

OAITrigger OAIMetricThreshold::getTrigger() const {
    return m_trigger;
}
void OAIMetricThreshold::setTrigger(const OAITrigger &trigger) {
    m_trigger = trigger;
    m_trigger_isSet = true;
}

bool OAIMetricThreshold::is_trigger_Set() const{
    return m_trigger_isSet;
}

bool OAIMetricThreshold::is_trigger_Valid() const{
    return m_trigger_isValid;
}

bool OAIMetricThreshold::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_comparison_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_denominator_aggregations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_denominator_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_missing_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_threshold_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetricThreshold::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
