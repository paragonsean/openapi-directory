/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBasicService.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBasicService::OAIBasicService(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBasicService::OAIBasicService() {
    this->initializeModel();
}

OAIBasicService::~OAIBasicService() {}

void OAIBasicService::initializeModel() {

    m_service_labels_isSet = false;
    m_service_labels_isValid = false;

    m_service_type_isSet = false;
    m_service_type_isValid = false;
}

void OAIBasicService::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBasicService::fromJsonObject(QJsonObject json) {

    m_service_labels_isValid = ::OpenAPI::fromJsonValue(m_service_labels, json[QString("serviceLabels")]);
    m_service_labels_isSet = !json[QString("serviceLabels")].isNull() && m_service_labels_isValid;

    m_service_type_isValid = ::OpenAPI::fromJsonValue(m_service_type, json[QString("serviceType")]);
    m_service_type_isSet = !json[QString("serviceType")].isNull() && m_service_type_isValid;
}

QString OAIBasicService::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBasicService::asJsonObject() const {
    QJsonObject obj;
    if (m_service_labels.size() > 0) {
        obj.insert(QString("serviceLabels"), ::OpenAPI::toJsonValue(m_service_labels));
    }
    if (m_service_type_isSet) {
        obj.insert(QString("serviceType"), ::OpenAPI::toJsonValue(m_service_type));
    }
    return obj;
}

QMap<QString, QString> OAIBasicService::getServiceLabels() const {
    return m_service_labels;
}
void OAIBasicService::setServiceLabels(const QMap<QString, QString> &service_labels) {
    m_service_labels = service_labels;
    m_service_labels_isSet = true;
}

bool OAIBasicService::is_service_labels_Set() const{
    return m_service_labels_isSet;
}

bool OAIBasicService::is_service_labels_Valid() const{
    return m_service_labels_isValid;
}

QString OAIBasicService::getServiceType() const {
    return m_service_type;
}
void OAIBasicService::setServiceType(const QString &service_type) {
    m_service_type = service_type;
    m_service_type_isSet = true;
}

bool OAIBasicService::is_service_type_Set() const{
    return m_service_type_isSet;
}

bool OAIBasicService::is_service_type_Valid() const{
    return m_service_type_isValid;
}

bool OAIBasicService::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_service_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBasicService::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
