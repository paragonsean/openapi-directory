/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICollectdPayload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICollectdPayload::OAICollectdPayload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICollectdPayload::OAICollectdPayload() {
    this->initializeModel();
}

OAICollectdPayload::~OAICollectdPayload() {}

void OAICollectdPayload::initializeModel() {

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_plugin_isSet = false;
    m_plugin_isValid = false;

    m_plugin_instance_isSet = false;
    m_plugin_instance_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_type_instance_isSet = false;
    m_type_instance_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAICollectdPayload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICollectdPayload::fromJsonObject(QJsonObject json) {

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_plugin_isValid = ::OpenAPI::fromJsonValue(m_plugin, json[QString("plugin")]);
    m_plugin_isSet = !json[QString("plugin")].isNull() && m_plugin_isValid;

    m_plugin_instance_isValid = ::OpenAPI::fromJsonValue(m_plugin_instance, json[QString("pluginInstance")]);
    m_plugin_instance_isSet = !json[QString("pluginInstance")].isNull() && m_plugin_instance_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_type_instance_isValid = ::OpenAPI::fromJsonValue(m_type_instance, json[QString("typeInstance")]);
    m_type_instance_isSet = !json[QString("typeInstance")].isNull() && m_type_instance_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAICollectdPayload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICollectdPayload::asJsonObject() const {
    QJsonObject obj;
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_plugin_isSet) {
        obj.insert(QString("plugin"), ::OpenAPI::toJsonValue(m_plugin));
    }
    if (m_plugin_instance_isSet) {
        obj.insert(QString("pluginInstance"), ::OpenAPI::toJsonValue(m_plugin_instance));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_type_instance_isSet) {
        obj.insert(QString("typeInstance"), ::OpenAPI::toJsonValue(m_type_instance));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QString OAICollectdPayload::getEndTime() const {
    return m_end_time;
}
void OAICollectdPayload::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAICollectdPayload::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAICollectdPayload::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QMap<QString, OAITypedValue> OAICollectdPayload::getMetadata() const {
    return m_metadata;
}
void OAICollectdPayload::setMetadata(const QMap<QString, OAITypedValue> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAICollectdPayload::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAICollectdPayload::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAICollectdPayload::getPlugin() const {
    return m_plugin;
}
void OAICollectdPayload::setPlugin(const QString &plugin) {
    m_plugin = plugin;
    m_plugin_isSet = true;
}

bool OAICollectdPayload::is_plugin_Set() const{
    return m_plugin_isSet;
}

bool OAICollectdPayload::is_plugin_Valid() const{
    return m_plugin_isValid;
}

QString OAICollectdPayload::getPluginInstance() const {
    return m_plugin_instance;
}
void OAICollectdPayload::setPluginInstance(const QString &plugin_instance) {
    m_plugin_instance = plugin_instance;
    m_plugin_instance_isSet = true;
}

bool OAICollectdPayload::is_plugin_instance_Set() const{
    return m_plugin_instance_isSet;
}

bool OAICollectdPayload::is_plugin_instance_Valid() const{
    return m_plugin_instance_isValid;
}

QString OAICollectdPayload::getStartTime() const {
    return m_start_time;
}
void OAICollectdPayload::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAICollectdPayload::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAICollectdPayload::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAICollectdPayload::getType() const {
    return m_type;
}
void OAICollectdPayload::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICollectdPayload::is_type_Set() const{
    return m_type_isSet;
}

bool OAICollectdPayload::is_type_Valid() const{
    return m_type_isValid;
}

QString OAICollectdPayload::getTypeInstance() const {
    return m_type_instance;
}
void OAICollectdPayload::setTypeInstance(const QString &type_instance) {
    m_type_instance = type_instance;
    m_type_instance_isSet = true;
}

bool OAICollectdPayload::is_type_instance_Set() const{
    return m_type_instance_isSet;
}

bool OAICollectdPayload::is_type_instance_Valid() const{
    return m_type_instance_isValid;
}

QList<OAICollectdValue> OAICollectdPayload::getValues() const {
    return m_values;
}
void OAICollectdPayload::setValues(const QList<OAICollectdValue> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAICollectdPayload::is_values_Set() const{
    return m_values_isSet;
}

bool OAICollectdPayload::is_values_Valid() const{
    return m_values_isValid;
}

bool OAICollectdPayload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_plugin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plugin_instance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_instance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICollectdPayload::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
