/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISnooze.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISnooze::OAISnooze(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISnooze::OAISnooze() {
    this->initializeModel();
}

OAISnooze::~OAISnooze() {}

void OAISnooze::initializeModel() {

    m_criteria_isSet = false;
    m_criteria_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAISnooze::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISnooze::fromJsonObject(QJsonObject json) {

    m_criteria_isValid = ::OpenAPI::fromJsonValue(m_criteria, json[QString("criteria")]);
    m_criteria_isSet = !json[QString("criteria")].isNull() && m_criteria_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAISnooze::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISnooze::asJsonObject() const {
    QJsonObject obj;
    if (m_criteria.isSet()) {
        obj.insert(QString("criteria"), ::OpenAPI::toJsonValue(m_criteria));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_interval.isSet()) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

OAICriteria OAISnooze::getCriteria() const {
    return m_criteria;
}
void OAISnooze::setCriteria(const OAICriteria &criteria) {
    m_criteria = criteria;
    m_criteria_isSet = true;
}

bool OAISnooze::is_criteria_Set() const{
    return m_criteria_isSet;
}

bool OAISnooze::is_criteria_Valid() const{
    return m_criteria_isValid;
}

QString OAISnooze::getDisplayName() const {
    return m_display_name;
}
void OAISnooze::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAISnooze::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAISnooze::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAITimeInterval OAISnooze::getInterval() const {
    return m_interval;
}
void OAISnooze::setInterval(const OAITimeInterval &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAISnooze::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAISnooze::is_interval_Valid() const{
    return m_interval_isValid;
}

QString OAISnooze::getName() const {
    return m_name;
}
void OAISnooze::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISnooze::is_name_Set() const{
    return m_name_isSet;
}

bool OAISnooze::is_name_Valid() const{
    return m_name_isValid;
}

bool OAISnooze::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_criteria.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISnooze::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
