/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotificationChannelStrategy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotificationChannelStrategy::OAINotificationChannelStrategy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotificationChannelStrategy::OAINotificationChannelStrategy() {
    this->initializeModel();
}

OAINotificationChannelStrategy::~OAINotificationChannelStrategy() {}

void OAINotificationChannelStrategy::initializeModel() {

    m_notification_channel_names_isSet = false;
    m_notification_channel_names_isValid = false;

    m_renotify_interval_isSet = false;
    m_renotify_interval_isValid = false;
}

void OAINotificationChannelStrategy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotificationChannelStrategy::fromJsonObject(QJsonObject json) {

    m_notification_channel_names_isValid = ::OpenAPI::fromJsonValue(m_notification_channel_names, json[QString("notificationChannelNames")]);
    m_notification_channel_names_isSet = !json[QString("notificationChannelNames")].isNull() && m_notification_channel_names_isValid;

    m_renotify_interval_isValid = ::OpenAPI::fromJsonValue(m_renotify_interval, json[QString("renotifyInterval")]);
    m_renotify_interval_isSet = !json[QString("renotifyInterval")].isNull() && m_renotify_interval_isValid;
}

QString OAINotificationChannelStrategy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotificationChannelStrategy::asJsonObject() const {
    QJsonObject obj;
    if (m_notification_channel_names.size() > 0) {
        obj.insert(QString("notificationChannelNames"), ::OpenAPI::toJsonValue(m_notification_channel_names));
    }
    if (m_renotify_interval_isSet) {
        obj.insert(QString("renotifyInterval"), ::OpenAPI::toJsonValue(m_renotify_interval));
    }
    return obj;
}

QList<QString> OAINotificationChannelStrategy::getNotificationChannelNames() const {
    return m_notification_channel_names;
}
void OAINotificationChannelStrategy::setNotificationChannelNames(const QList<QString> &notification_channel_names) {
    m_notification_channel_names = notification_channel_names;
    m_notification_channel_names_isSet = true;
}

bool OAINotificationChannelStrategy::is_notification_channel_names_Set() const{
    return m_notification_channel_names_isSet;
}

bool OAINotificationChannelStrategy::is_notification_channel_names_Valid() const{
    return m_notification_channel_names_isValid;
}

QString OAINotificationChannelStrategy::getRenotifyInterval() const {
    return m_renotify_interval;
}
void OAINotificationChannelStrategy::setRenotifyInterval(const QString &renotify_interval) {
    m_renotify_interval = renotify_interval;
    m_renotify_interval_isSet = true;
}

bool OAINotificationChannelStrategy::is_renotify_interval_Set() const{
    return m_renotify_interval_isSet;
}

bool OAINotificationChannelStrategy::is_renotify_interval_Valid() const{
    return m_renotify_interval_isValid;
}

bool OAINotificationChannelStrategy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_notification_channel_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_renotify_interval_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotificationChannelStrategy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
