/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICollectdValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICollectdValue::OAICollectdValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICollectdValue::OAICollectdValue() {
    this->initializeModel();
}

OAICollectdValue::~OAICollectdValue() {}

void OAICollectdValue::initializeModel() {

    m_data_source_name_isSet = false;
    m_data_source_name_isValid = false;

    m_data_source_type_isSet = false;
    m_data_source_type_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAICollectdValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICollectdValue::fromJsonObject(QJsonObject json) {

    m_data_source_name_isValid = ::OpenAPI::fromJsonValue(m_data_source_name, json[QString("dataSourceName")]);
    m_data_source_name_isSet = !json[QString("dataSourceName")].isNull() && m_data_source_name_isValid;

    m_data_source_type_isValid = ::OpenAPI::fromJsonValue(m_data_source_type, json[QString("dataSourceType")]);
    m_data_source_type_isSet = !json[QString("dataSourceType")].isNull() && m_data_source_type_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAICollectdValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICollectdValue::asJsonObject() const {
    QJsonObject obj;
    if (m_data_source_name_isSet) {
        obj.insert(QString("dataSourceName"), ::OpenAPI::toJsonValue(m_data_source_name));
    }
    if (m_data_source_type_isSet) {
        obj.insert(QString("dataSourceType"), ::OpenAPI::toJsonValue(m_data_source_type));
    }
    if (m_value.isSet()) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAICollectdValue::getDataSourceName() const {
    return m_data_source_name;
}
void OAICollectdValue::setDataSourceName(const QString &data_source_name) {
    m_data_source_name = data_source_name;
    m_data_source_name_isSet = true;
}

bool OAICollectdValue::is_data_source_name_Set() const{
    return m_data_source_name_isSet;
}

bool OAICollectdValue::is_data_source_name_Valid() const{
    return m_data_source_name_isValid;
}

QString OAICollectdValue::getDataSourceType() const {
    return m_data_source_type;
}
void OAICollectdValue::setDataSourceType(const QString &data_source_type) {
    m_data_source_type = data_source_type;
    m_data_source_type_isSet = true;
}

bool OAICollectdValue::is_data_source_type_Set() const{
    return m_data_source_type_isSet;
}

bool OAICollectdValue::is_data_source_type_Valid() const{
    return m_data_source_type_isValid;
}

OAITypedValue OAICollectdValue::getValue() const {
    return m_value;
}
void OAICollectdValue::setValue(const OAITypedValue &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAICollectdValue::is_value_Set() const{
    return m_value_isSet;
}

bool OAICollectdValue::is_value_Valid() const{
    return m_value_isValid;
}

bool OAICollectdValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_source_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICollectdValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
