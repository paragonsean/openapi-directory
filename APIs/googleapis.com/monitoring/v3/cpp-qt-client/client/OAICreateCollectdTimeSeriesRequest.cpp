/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateCollectdTimeSeriesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateCollectdTimeSeriesRequest::OAICreateCollectdTimeSeriesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateCollectdTimeSeriesRequest::OAICreateCollectdTimeSeriesRequest() {
    this->initializeModel();
}

OAICreateCollectdTimeSeriesRequest::~OAICreateCollectdTimeSeriesRequest() {}

void OAICreateCollectdTimeSeriesRequest::initializeModel() {

    m_collectd_payloads_isSet = false;
    m_collectd_payloads_isValid = false;

    m_collectd_version_isSet = false;
    m_collectd_version_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;
}

void OAICreateCollectdTimeSeriesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateCollectdTimeSeriesRequest::fromJsonObject(QJsonObject json) {

    m_collectd_payloads_isValid = ::OpenAPI::fromJsonValue(m_collectd_payloads, json[QString("collectdPayloads")]);
    m_collectd_payloads_isSet = !json[QString("collectdPayloads")].isNull() && m_collectd_payloads_isValid;

    m_collectd_version_isValid = ::OpenAPI::fromJsonValue(m_collectd_version, json[QString("collectdVersion")]);
    m_collectd_version_isSet = !json[QString("collectdVersion")].isNull() && m_collectd_version_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;
}

QString OAICreateCollectdTimeSeriesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateCollectdTimeSeriesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_collectd_payloads.size() > 0) {
        obj.insert(QString("collectdPayloads"), ::OpenAPI::toJsonValue(m_collectd_payloads));
    }
    if (m_collectd_version_isSet) {
        obj.insert(QString("collectdVersion"), ::OpenAPI::toJsonValue(m_collectd_version));
    }
    if (m_resource.isSet()) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    return obj;
}

QList<OAICollectdPayload> OAICreateCollectdTimeSeriesRequest::getCollectdPayloads() const {
    return m_collectd_payloads;
}
void OAICreateCollectdTimeSeriesRequest::setCollectdPayloads(const QList<OAICollectdPayload> &collectd_payloads) {
    m_collectd_payloads = collectd_payloads;
    m_collectd_payloads_isSet = true;
}

bool OAICreateCollectdTimeSeriesRequest::is_collectd_payloads_Set() const{
    return m_collectd_payloads_isSet;
}

bool OAICreateCollectdTimeSeriesRequest::is_collectd_payloads_Valid() const{
    return m_collectd_payloads_isValid;
}

QString OAICreateCollectdTimeSeriesRequest::getCollectdVersion() const {
    return m_collectd_version;
}
void OAICreateCollectdTimeSeriesRequest::setCollectdVersion(const QString &collectd_version) {
    m_collectd_version = collectd_version;
    m_collectd_version_isSet = true;
}

bool OAICreateCollectdTimeSeriesRequest::is_collectd_version_Set() const{
    return m_collectd_version_isSet;
}

bool OAICreateCollectdTimeSeriesRequest::is_collectd_version_Valid() const{
    return m_collectd_version_isValid;
}

OAIMonitoredResource OAICreateCollectdTimeSeriesRequest::getResource() const {
    return m_resource;
}
void OAICreateCollectdTimeSeriesRequest::setResource(const OAIMonitoredResource &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAICreateCollectdTimeSeriesRequest::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAICreateCollectdTimeSeriesRequest::is_resource_Valid() const{
    return m_resource_isValid;
}

bool OAICreateCollectdTimeSeriesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_collectd_payloads.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_collectd_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateCollectdTimeSeriesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
