/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListTimeSeriesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListTimeSeriesResponse::OAIListTimeSeriesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListTimeSeriesResponse::OAIListTimeSeriesResponse() {
    this->initializeModel();
}

OAIListTimeSeriesResponse::~OAIListTimeSeriesResponse() {}

void OAIListTimeSeriesResponse::initializeModel() {

    m_execution_errors_isSet = false;
    m_execution_errors_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_time_series_isSet = false;
    m_time_series_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;
}

void OAIListTimeSeriesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListTimeSeriesResponse::fromJsonObject(QJsonObject json) {

    m_execution_errors_isValid = ::OpenAPI::fromJsonValue(m_execution_errors, json[QString("executionErrors")]);
    m_execution_errors_isSet = !json[QString("executionErrors")].isNull() && m_execution_errors_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_time_series_isValid = ::OpenAPI::fromJsonValue(m_time_series, json[QString("timeSeries")]);
    m_time_series_isSet = !json[QString("timeSeries")].isNull() && m_time_series_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;
}

QString OAIListTimeSeriesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListTimeSeriesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_execution_errors.size() > 0) {
        obj.insert(QString("executionErrors"), ::OpenAPI::toJsonValue(m_execution_errors));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_time_series.size() > 0) {
        obj.insert(QString("timeSeries"), ::OpenAPI::toJsonValue(m_time_series));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    return obj;
}

QList<OAIStatus> OAIListTimeSeriesResponse::getExecutionErrors() const {
    return m_execution_errors;
}
void OAIListTimeSeriesResponse::setExecutionErrors(const QList<OAIStatus> &execution_errors) {
    m_execution_errors = execution_errors;
    m_execution_errors_isSet = true;
}

bool OAIListTimeSeriesResponse::is_execution_errors_Set() const{
    return m_execution_errors_isSet;
}

bool OAIListTimeSeriesResponse::is_execution_errors_Valid() const{
    return m_execution_errors_isValid;
}

QString OAIListTimeSeriesResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListTimeSeriesResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListTimeSeriesResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListTimeSeriesResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

QList<OAITimeSeries> OAIListTimeSeriesResponse::getTimeSeries() const {
    return m_time_series;
}
void OAIListTimeSeriesResponse::setTimeSeries(const QList<OAITimeSeries> &time_series) {
    m_time_series = time_series;
    m_time_series_isSet = true;
}

bool OAIListTimeSeriesResponse::is_time_series_Set() const{
    return m_time_series_isSet;
}

bool OAIListTimeSeriesResponse::is_time_series_Valid() const{
    return m_time_series_isValid;
}

QString OAIListTimeSeriesResponse::getUnit() const {
    return m_unit;
}
void OAIListTimeSeriesResponse::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIListTimeSeriesResponse::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIListTimeSeriesResponse::is_unit_Valid() const{
    return m_unit_isValid;
}

bool OAIListTimeSeriesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_execution_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_series.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListTimeSeriesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
