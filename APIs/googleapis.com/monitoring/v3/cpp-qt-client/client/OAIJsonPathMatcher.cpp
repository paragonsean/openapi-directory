/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJsonPathMatcher.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJsonPathMatcher::OAIJsonPathMatcher(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJsonPathMatcher::OAIJsonPathMatcher() {
    this->initializeModel();
}

OAIJsonPathMatcher::~OAIJsonPathMatcher() {}

void OAIJsonPathMatcher::initializeModel() {

    m_json_matcher_isSet = false;
    m_json_matcher_isValid = false;

    m_json_path_isSet = false;
    m_json_path_isValid = false;
}

void OAIJsonPathMatcher::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJsonPathMatcher::fromJsonObject(QJsonObject json) {

    m_json_matcher_isValid = ::OpenAPI::fromJsonValue(m_json_matcher, json[QString("jsonMatcher")]);
    m_json_matcher_isSet = !json[QString("jsonMatcher")].isNull() && m_json_matcher_isValid;

    m_json_path_isValid = ::OpenAPI::fromJsonValue(m_json_path, json[QString("jsonPath")]);
    m_json_path_isSet = !json[QString("jsonPath")].isNull() && m_json_path_isValid;
}

QString OAIJsonPathMatcher::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJsonPathMatcher::asJsonObject() const {
    QJsonObject obj;
    if (m_json_matcher_isSet) {
        obj.insert(QString("jsonMatcher"), ::OpenAPI::toJsonValue(m_json_matcher));
    }
    if (m_json_path_isSet) {
        obj.insert(QString("jsonPath"), ::OpenAPI::toJsonValue(m_json_path));
    }
    return obj;
}

QString OAIJsonPathMatcher::getJsonMatcher() const {
    return m_json_matcher;
}
void OAIJsonPathMatcher::setJsonMatcher(const QString &json_matcher) {
    m_json_matcher = json_matcher;
    m_json_matcher_isSet = true;
}

bool OAIJsonPathMatcher::is_json_matcher_Set() const{
    return m_json_matcher_isSet;
}

bool OAIJsonPathMatcher::is_json_matcher_Valid() const{
    return m_json_matcher_isValid;
}

QString OAIJsonPathMatcher::getJsonPath() const {
    return m_json_path;
}
void OAIJsonPathMatcher::setJsonPath(const QString &json_path) {
    m_json_path = json_path;
    m_json_path_isSet = true;
}

bool OAIJsonPathMatcher::is_json_path_Set() const{
    return m_json_path_isSet;
}

bool OAIJsonPathMatcher::is_json_path_Valid() const{
    return m_json_path_isValid;
}

bool OAIJsonPathMatcher::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_json_matcher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_json_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJsonPathMatcher::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
