/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrometheusQueryLanguageCondition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrometheusQueryLanguageCondition::OAIPrometheusQueryLanguageCondition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrometheusQueryLanguageCondition::OAIPrometheusQueryLanguageCondition() {
    this->initializeModel();
}

OAIPrometheusQueryLanguageCondition::~OAIPrometheusQueryLanguageCondition() {}

void OAIPrometheusQueryLanguageCondition::initializeModel() {

    m_alert_rule_isSet = false;
    m_alert_rule_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_evaluation_interval_isSet = false;
    m_evaluation_interval_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_rule_group_isSet = false;
    m_rule_group_isValid = false;
}

void OAIPrometheusQueryLanguageCondition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrometheusQueryLanguageCondition::fromJsonObject(QJsonObject json) {

    m_alert_rule_isValid = ::OpenAPI::fromJsonValue(m_alert_rule, json[QString("alertRule")]);
    m_alert_rule_isSet = !json[QString("alertRule")].isNull() && m_alert_rule_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_evaluation_interval_isValid = ::OpenAPI::fromJsonValue(m_evaluation_interval, json[QString("evaluationInterval")]);
    m_evaluation_interval_isSet = !json[QString("evaluationInterval")].isNull() && m_evaluation_interval_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_rule_group_isValid = ::OpenAPI::fromJsonValue(m_rule_group, json[QString("ruleGroup")]);
    m_rule_group_isSet = !json[QString("ruleGroup")].isNull() && m_rule_group_isValid;
}

QString OAIPrometheusQueryLanguageCondition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrometheusQueryLanguageCondition::asJsonObject() const {
    QJsonObject obj;
    if (m_alert_rule_isSet) {
        obj.insert(QString("alertRule"), ::OpenAPI::toJsonValue(m_alert_rule));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_evaluation_interval_isSet) {
        obj.insert(QString("evaluationInterval"), ::OpenAPI::toJsonValue(m_evaluation_interval));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_rule_group_isSet) {
        obj.insert(QString("ruleGroup"), ::OpenAPI::toJsonValue(m_rule_group));
    }
    return obj;
}

QString OAIPrometheusQueryLanguageCondition::getAlertRule() const {
    return m_alert_rule;
}
void OAIPrometheusQueryLanguageCondition::setAlertRule(const QString &alert_rule) {
    m_alert_rule = alert_rule;
    m_alert_rule_isSet = true;
}

bool OAIPrometheusQueryLanguageCondition::is_alert_rule_Set() const{
    return m_alert_rule_isSet;
}

bool OAIPrometheusQueryLanguageCondition::is_alert_rule_Valid() const{
    return m_alert_rule_isValid;
}

QString OAIPrometheusQueryLanguageCondition::getDuration() const {
    return m_duration;
}
void OAIPrometheusQueryLanguageCondition::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIPrometheusQueryLanguageCondition::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIPrometheusQueryLanguageCondition::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAIPrometheusQueryLanguageCondition::getEvaluationInterval() const {
    return m_evaluation_interval;
}
void OAIPrometheusQueryLanguageCondition::setEvaluationInterval(const QString &evaluation_interval) {
    m_evaluation_interval = evaluation_interval;
    m_evaluation_interval_isSet = true;
}

bool OAIPrometheusQueryLanguageCondition::is_evaluation_interval_Set() const{
    return m_evaluation_interval_isSet;
}

bool OAIPrometheusQueryLanguageCondition::is_evaluation_interval_Valid() const{
    return m_evaluation_interval_isValid;
}

QMap<QString, QString> OAIPrometheusQueryLanguageCondition::getLabels() const {
    return m_labels;
}
void OAIPrometheusQueryLanguageCondition::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIPrometheusQueryLanguageCondition::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIPrometheusQueryLanguageCondition::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIPrometheusQueryLanguageCondition::getQuery() const {
    return m_query;
}
void OAIPrometheusQueryLanguageCondition::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIPrometheusQueryLanguageCondition::is_query_Set() const{
    return m_query_isSet;
}

bool OAIPrometheusQueryLanguageCondition::is_query_Valid() const{
    return m_query_isValid;
}

QString OAIPrometheusQueryLanguageCondition::getRuleGroup() const {
    return m_rule_group;
}
void OAIPrometheusQueryLanguageCondition::setRuleGroup(const QString &rule_group) {
    m_rule_group = rule_group;
    m_rule_group_isSet = true;
}

bool OAIPrometheusQueryLanguageCondition::is_rule_group_Set() const{
    return m_rule_group_isSet;
}

bool OAIPrometheusQueryLanguageCondition::is_rule_group_Valid() const{
    return m_rule_group_isValid;
}

bool OAIPrometheusQueryLanguageCondition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alert_rule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_group_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrometheusQueryLanguageCondition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
