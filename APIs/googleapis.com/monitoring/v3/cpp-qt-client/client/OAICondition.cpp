/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICondition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICondition::OAICondition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICondition::OAICondition() {
    this->initializeModel();
}

OAICondition::~OAICondition() {}

void OAICondition::initializeModel() {

    m_condition_absent_isSet = false;
    m_condition_absent_isValid = false;

    m_condition_matched_log_isSet = false;
    m_condition_matched_log_isValid = false;

    m_condition_monitoring_query_language_isSet = false;
    m_condition_monitoring_query_language_isValid = false;

    m_condition_prometheus_query_language_isSet = false;
    m_condition_prometheus_query_language_isValid = false;

    m_condition_threshold_isSet = false;
    m_condition_threshold_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAICondition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICondition::fromJsonObject(QJsonObject json) {

    m_condition_absent_isValid = ::OpenAPI::fromJsonValue(m_condition_absent, json[QString("conditionAbsent")]);
    m_condition_absent_isSet = !json[QString("conditionAbsent")].isNull() && m_condition_absent_isValid;

    m_condition_matched_log_isValid = ::OpenAPI::fromJsonValue(m_condition_matched_log, json[QString("conditionMatchedLog")]);
    m_condition_matched_log_isSet = !json[QString("conditionMatchedLog")].isNull() && m_condition_matched_log_isValid;

    m_condition_monitoring_query_language_isValid = ::OpenAPI::fromJsonValue(m_condition_monitoring_query_language, json[QString("conditionMonitoringQueryLanguage")]);
    m_condition_monitoring_query_language_isSet = !json[QString("conditionMonitoringQueryLanguage")].isNull() && m_condition_monitoring_query_language_isValid;

    m_condition_prometheus_query_language_isValid = ::OpenAPI::fromJsonValue(m_condition_prometheus_query_language, json[QString("conditionPrometheusQueryLanguage")]);
    m_condition_prometheus_query_language_isSet = !json[QString("conditionPrometheusQueryLanguage")].isNull() && m_condition_prometheus_query_language_isValid;

    m_condition_threshold_isValid = ::OpenAPI::fromJsonValue(m_condition_threshold, json[QString("conditionThreshold")]);
    m_condition_threshold_isSet = !json[QString("conditionThreshold")].isNull() && m_condition_threshold_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAICondition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICondition::asJsonObject() const {
    QJsonObject obj;
    if (m_condition_absent.isSet()) {
        obj.insert(QString("conditionAbsent"), ::OpenAPI::toJsonValue(m_condition_absent));
    }
    if (m_condition_matched_log.isSet()) {
        obj.insert(QString("conditionMatchedLog"), ::OpenAPI::toJsonValue(m_condition_matched_log));
    }
    if (m_condition_monitoring_query_language.isSet()) {
        obj.insert(QString("conditionMonitoringQueryLanguage"), ::OpenAPI::toJsonValue(m_condition_monitoring_query_language));
    }
    if (m_condition_prometheus_query_language.isSet()) {
        obj.insert(QString("conditionPrometheusQueryLanguage"), ::OpenAPI::toJsonValue(m_condition_prometheus_query_language));
    }
    if (m_condition_threshold.isSet()) {
        obj.insert(QString("conditionThreshold"), ::OpenAPI::toJsonValue(m_condition_threshold));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

OAIMetricAbsence OAICondition::getConditionAbsent() const {
    return m_condition_absent;
}
void OAICondition::setConditionAbsent(const OAIMetricAbsence &condition_absent) {
    m_condition_absent = condition_absent;
    m_condition_absent_isSet = true;
}

bool OAICondition::is_condition_absent_Set() const{
    return m_condition_absent_isSet;
}

bool OAICondition::is_condition_absent_Valid() const{
    return m_condition_absent_isValid;
}

OAILogMatch OAICondition::getConditionMatchedLog() const {
    return m_condition_matched_log;
}
void OAICondition::setConditionMatchedLog(const OAILogMatch &condition_matched_log) {
    m_condition_matched_log = condition_matched_log;
    m_condition_matched_log_isSet = true;
}

bool OAICondition::is_condition_matched_log_Set() const{
    return m_condition_matched_log_isSet;
}

bool OAICondition::is_condition_matched_log_Valid() const{
    return m_condition_matched_log_isValid;
}

OAIMonitoringQueryLanguageCondition OAICondition::getConditionMonitoringQueryLanguage() const {
    return m_condition_monitoring_query_language;
}
void OAICondition::setConditionMonitoringQueryLanguage(const OAIMonitoringQueryLanguageCondition &condition_monitoring_query_language) {
    m_condition_monitoring_query_language = condition_monitoring_query_language;
    m_condition_monitoring_query_language_isSet = true;
}

bool OAICondition::is_condition_monitoring_query_language_Set() const{
    return m_condition_monitoring_query_language_isSet;
}

bool OAICondition::is_condition_monitoring_query_language_Valid() const{
    return m_condition_monitoring_query_language_isValid;
}

OAIPrometheusQueryLanguageCondition OAICondition::getConditionPrometheusQueryLanguage() const {
    return m_condition_prometheus_query_language;
}
void OAICondition::setConditionPrometheusQueryLanguage(const OAIPrometheusQueryLanguageCondition &condition_prometheus_query_language) {
    m_condition_prometheus_query_language = condition_prometheus_query_language;
    m_condition_prometheus_query_language_isSet = true;
}

bool OAICondition::is_condition_prometheus_query_language_Set() const{
    return m_condition_prometheus_query_language_isSet;
}

bool OAICondition::is_condition_prometheus_query_language_Valid() const{
    return m_condition_prometheus_query_language_isValid;
}

OAIMetricThreshold OAICondition::getConditionThreshold() const {
    return m_condition_threshold;
}
void OAICondition::setConditionThreshold(const OAIMetricThreshold &condition_threshold) {
    m_condition_threshold = condition_threshold;
    m_condition_threshold_isSet = true;
}

bool OAICondition::is_condition_threshold_Set() const{
    return m_condition_threshold_isSet;
}

bool OAICondition::is_condition_threshold_Valid() const{
    return m_condition_threshold_isValid;
}

QString OAICondition::getDisplayName() const {
    return m_display_name;
}
void OAICondition::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAICondition::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAICondition::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAICondition::getName() const {
    return m_name;
}
void OAICondition::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICondition::is_name_Set() const{
    return m_name_isSet;
}

bool OAICondition::is_name_Valid() const{
    return m_name_isValid;
}

bool OAICondition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_condition_absent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition_matched_log.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition_monitoring_query_language.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition_prometheus_query_language.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition_threshold.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICondition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
