/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIService.h
 *
 * A Service is a discrete, autonomous, and network-accessible unit, designed to solve an individual concern (Wikipedia (https://en.wikipedia.org/wiki/Service-orientation)). In Cloud Monitoring, a Service acts as the root resource under which operational aspects of the service are accessible.
 */

#ifndef OAIService_H
#define OAIService_H

#include <QJsonObject>

#include "OAIAppEngine.h"
#include "OAIBasicService.h"
#include "OAICloudEndpoints.h"
#include "OAICloudRun.h"
#include "OAIClusterIstio.h"
#include "OAIGkeNamespace.h"
#include "OAIGkeService.h"
#include "OAIGkeWorkload.h"
#include "OAIIstioCanonicalService.h"
#include "OAIMeshIstio.h"
#include "OAIObject.h"
#include "OAITelemetry.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAppEngine;
class OAIBasicService;
class OAICloudEndpoints;
class OAICloudRun;
class OAIClusterIstio;
class OAIGkeNamespace;
class OAIGkeService;
class OAIGkeWorkload;
class OAIIstioCanonicalService;
class OAIMeshIstio;
class OAITelemetry;

class OAIService : public OAIObject {
public:
    OAIService();
    OAIService(QString json);
    ~OAIService() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAppEngine getAppEngine() const;
    void setAppEngine(const OAIAppEngine &app_engine);
    bool is_app_engine_Set() const;
    bool is_app_engine_Valid() const;

    OAIBasicService getBasicService() const;
    void setBasicService(const OAIBasicService &basic_service);
    bool is_basic_service_Set() const;
    bool is_basic_service_Valid() const;

    OAICloudEndpoints getCloudEndpoints() const;
    void setCloudEndpoints(const OAICloudEndpoints &cloud_endpoints);
    bool is_cloud_endpoints_Set() const;
    bool is_cloud_endpoints_Valid() const;

    OAICloudRun getCloudRun() const;
    void setCloudRun(const OAICloudRun &cloud_run);
    bool is_cloud_run_Set() const;
    bool is_cloud_run_Valid() const;

    OAIClusterIstio getClusterIstio() const;
    void setClusterIstio(const OAIClusterIstio &cluster_istio);
    bool is_cluster_istio_Set() const;
    bool is_cluster_istio_Valid() const;

    OAIObject getCustom() const;
    void setCustom(const OAIObject &custom);
    bool is_custom_Set() const;
    bool is_custom_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    OAIGkeNamespace getGkeNamespace() const;
    void setGkeNamespace(const OAIGkeNamespace &gke_namespace);
    bool is_gke_namespace_Set() const;
    bool is_gke_namespace_Valid() const;

    OAIGkeService getGkeService() const;
    void setGkeService(const OAIGkeService &gke_service);
    bool is_gke_service_Set() const;
    bool is_gke_service_Valid() const;

    OAIGkeWorkload getGkeWorkload() const;
    void setGkeWorkload(const OAIGkeWorkload &gke_workload);
    bool is_gke_workload_Set() const;
    bool is_gke_workload_Valid() const;

    OAIIstioCanonicalService getIstioCanonicalService() const;
    void setIstioCanonicalService(const OAIIstioCanonicalService &istio_canonical_service);
    bool is_istio_canonical_service_Set() const;
    bool is_istio_canonical_service_Valid() const;

    OAIMeshIstio getMeshIstio() const;
    void setMeshIstio(const OAIMeshIstio &mesh_istio);
    bool is_mesh_istio_Set() const;
    bool is_mesh_istio_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAITelemetry getTelemetry() const;
    void setTelemetry(const OAITelemetry &telemetry);
    bool is_telemetry_Set() const;
    bool is_telemetry_Valid() const;

    QMap<QString, QString> getUserLabels() const;
    void setUserLabels(const QMap<QString, QString> &user_labels);
    bool is_user_labels_Set() const;
    bool is_user_labels_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAppEngine m_app_engine;
    bool m_app_engine_isSet;
    bool m_app_engine_isValid;

    OAIBasicService m_basic_service;
    bool m_basic_service_isSet;
    bool m_basic_service_isValid;

    OAICloudEndpoints m_cloud_endpoints;
    bool m_cloud_endpoints_isSet;
    bool m_cloud_endpoints_isValid;

    OAICloudRun m_cloud_run;
    bool m_cloud_run_isSet;
    bool m_cloud_run_isValid;

    OAIClusterIstio m_cluster_istio;
    bool m_cluster_istio_isSet;
    bool m_cluster_istio_isValid;

    OAIObject m_custom;
    bool m_custom_isSet;
    bool m_custom_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    OAIGkeNamespace m_gke_namespace;
    bool m_gke_namespace_isSet;
    bool m_gke_namespace_isValid;

    OAIGkeService m_gke_service;
    bool m_gke_service_isSet;
    bool m_gke_service_isValid;

    OAIGkeWorkload m_gke_workload;
    bool m_gke_workload_isSet;
    bool m_gke_workload_isValid;

    OAIIstioCanonicalService m_istio_canonical_service;
    bool m_istio_canonical_service_isSet;
    bool m_istio_canonical_service_isValid;

    OAIMeshIstio m_mesh_istio;
    bool m_mesh_istio_isSet;
    bool m_mesh_istio_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAITelemetry m_telemetry;
    bool m_telemetry_isSet;
    bool m_telemetry_isValid;

    QMap<QString, QString> m_user_labels;
    bool m_user_labels_isSet;
    bool m_user_labels_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIService)

#endif // OAIService_H
