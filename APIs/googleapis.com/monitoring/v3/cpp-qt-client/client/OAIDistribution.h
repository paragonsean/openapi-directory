/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDistribution.h
 *
 * Distribution contains summary statistics for a population of values. It optionally contains a histogram representing the distribution of those values across a set of buckets.The summary statistics are the count, mean, sum of the squared deviation from the mean, the minimum, and the maximum of the set of population of values. The histogram is based on a sequence of buckets and gives a count of values that fall into each bucket. The boundaries of the buckets are given either explicitly or by formulas for buckets of fixed or exponentially increasing widths.Although it is not forbidden, it is generally a bad idea to include non-finite values (infinities or NaNs) in the population of values, as this will render the mean and sum_of_squared_deviation fields meaningless.
 */

#ifndef OAIDistribution_H
#define OAIDistribution_H

#include <QJsonObject>

#include "OAIBucketOptions.h"
#include "OAIExemplar.h"
#include "OAIRange.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBucketOptions;
class OAIExemplar;
class OAIRange;

class OAIDistribution : public OAIObject {
public:
    OAIDistribution();
    OAIDistribution(QString json);
    ~OAIDistribution() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getBucketCounts() const;
    void setBucketCounts(const QList<QString> &bucket_counts);
    bool is_bucket_counts_Set() const;
    bool is_bucket_counts_Valid() const;

    OAIBucketOptions getBucketOptions() const;
    void setBucketOptions(const OAIBucketOptions &bucket_options);
    bool is_bucket_options_Set() const;
    bool is_bucket_options_Valid() const;

    QString getCount() const;
    void setCount(const QString &count);
    bool is_count_Set() const;
    bool is_count_Valid() const;

    QList<OAIExemplar> getExemplars() const;
    void setExemplars(const QList<OAIExemplar> &exemplars);
    bool is_exemplars_Set() const;
    bool is_exemplars_Valid() const;

    double getMean() const;
    void setMean(const double &mean);
    bool is_mean_Set() const;
    bool is_mean_Valid() const;

    OAIRange getRange() const;
    void setRange(const OAIRange &range);
    bool is_range_Set() const;
    bool is_range_Valid() const;

    double getSumOfSquaredDeviation() const;
    void setSumOfSquaredDeviation(const double &sum_of_squared_deviation);
    bool is_sum_of_squared_deviation_Set() const;
    bool is_sum_of_squared_deviation_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_bucket_counts;
    bool m_bucket_counts_isSet;
    bool m_bucket_counts_isValid;

    OAIBucketOptions m_bucket_options;
    bool m_bucket_options_isSet;
    bool m_bucket_options_isValid;

    QString m_count;
    bool m_count_isSet;
    bool m_count_isValid;

    QList<OAIExemplar> m_exemplars;
    bool m_exemplars_isSet;
    bool m_exemplars_isValid;

    double m_mean;
    bool m_mean_isSet;
    bool m_mean_isValid;

    OAIRange m_range;
    bool m_range_isSet;
    bool m_range_isValid;

    double m_sum_of_squared_deviation;
    bool m_sum_of_squared_deviation_isSet;
    bool m_sum_of_squared_deviation_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDistribution)

#endif // OAIDistribution_H
