/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIServiceLevelIndicator.h
 *
 * A Service-Level Indicator (SLI) describes the \&quot;performance\&quot; of a service. For some services, the SLI is well-defined. In such cases, the SLI can be described easily by referencing the well-known SLI and providing the needed parameters. Alternatively, a \&quot;custom\&quot; SLI can be defined with a query to the underlying metric store. An SLI is defined to be good_service / total_service over any queried time interval. The value of performance always falls into the range 0 &lt;&#x3D; performance &lt;&#x3D; 1. A custom SLI describes how to compute this ratio, whether this is by dividing values from a pair of time series, cutting a Distribution into good and bad counts, or counting time windows in which the service complies with a criterion. For separation of concerns, a single Service-Level Indicator measures performance for only one aspect of service quality, such as fraction of successful queries or fast-enough queries.
 */

#ifndef OAIServiceLevelIndicator_H
#define OAIServiceLevelIndicator_H

#include <QJsonObject>

#include "OAIBasicSli.h"
#include "OAIRequestBasedSli.h"
#include "OAIWindowsBasedSli.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBasicSli;
class OAIRequestBasedSli;
class OAIWindowsBasedSli;

class OAIServiceLevelIndicator : public OAIObject {
public:
    OAIServiceLevelIndicator();
    OAIServiceLevelIndicator(QString json);
    ~OAIServiceLevelIndicator() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIBasicSli getBasicSli() const;
    void setBasicSli(const OAIBasicSli &basic_sli);
    bool is_basic_sli_Set() const;
    bool is_basic_sli_Valid() const;

    OAIRequestBasedSli getRequestBased() const;
    void setRequestBased(const OAIRequestBasedSli &request_based);
    bool is_request_based_Set() const;
    bool is_request_based_Valid() const;

    OAIWindowsBasedSli getWindowsBased() const;
    void setWindowsBased(const OAIWindowsBasedSli &windows_based);
    bool is_windows_based_Set() const;
    bool is_windows_based_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIBasicSli m_basic_sli;
    bool m_basic_sli_isSet;
    bool m_basic_sli_isValid;

    OAIRequestBasedSli m_request_based;
    bool m_request_based_isSet;
    bool m_request_based_isValid;

    OAIWindowsBasedSli m_windows_based;
    bool m_windows_based_isSet;
    bool m_windows_based_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIServiceLevelIndicator)

#endif // OAIServiceLevelIndicator_H
