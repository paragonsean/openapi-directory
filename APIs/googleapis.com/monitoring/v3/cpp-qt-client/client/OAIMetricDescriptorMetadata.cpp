/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetricDescriptorMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetricDescriptorMetadata::OAIMetricDescriptorMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetricDescriptorMetadata::OAIMetricDescriptorMetadata() {
    this->initializeModel();
}

OAIMetricDescriptorMetadata::~OAIMetricDescriptorMetadata() {}

void OAIMetricDescriptorMetadata::initializeModel() {

    m_ingest_delay_isSet = false;
    m_ingest_delay_isValid = false;

    m_launch_stage_isSet = false;
    m_launch_stage_isValid = false;

    m_sample_period_isSet = false;
    m_sample_period_isValid = false;
}

void OAIMetricDescriptorMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetricDescriptorMetadata::fromJsonObject(QJsonObject json) {

    m_ingest_delay_isValid = ::OpenAPI::fromJsonValue(m_ingest_delay, json[QString("ingestDelay")]);
    m_ingest_delay_isSet = !json[QString("ingestDelay")].isNull() && m_ingest_delay_isValid;

    m_launch_stage_isValid = ::OpenAPI::fromJsonValue(m_launch_stage, json[QString("launchStage")]);
    m_launch_stage_isSet = !json[QString("launchStage")].isNull() && m_launch_stage_isValid;

    m_sample_period_isValid = ::OpenAPI::fromJsonValue(m_sample_period, json[QString("samplePeriod")]);
    m_sample_period_isSet = !json[QString("samplePeriod")].isNull() && m_sample_period_isValid;
}

QString OAIMetricDescriptorMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetricDescriptorMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_ingest_delay_isSet) {
        obj.insert(QString("ingestDelay"), ::OpenAPI::toJsonValue(m_ingest_delay));
    }
    if (m_launch_stage_isSet) {
        obj.insert(QString("launchStage"), ::OpenAPI::toJsonValue(m_launch_stage));
    }
    if (m_sample_period_isSet) {
        obj.insert(QString("samplePeriod"), ::OpenAPI::toJsonValue(m_sample_period));
    }
    return obj;
}

QString OAIMetricDescriptorMetadata::getIngestDelay() const {
    return m_ingest_delay;
}
void OAIMetricDescriptorMetadata::setIngestDelay(const QString &ingest_delay) {
    m_ingest_delay = ingest_delay;
    m_ingest_delay_isSet = true;
}

bool OAIMetricDescriptorMetadata::is_ingest_delay_Set() const{
    return m_ingest_delay_isSet;
}

bool OAIMetricDescriptorMetadata::is_ingest_delay_Valid() const{
    return m_ingest_delay_isValid;
}

QString OAIMetricDescriptorMetadata::getLaunchStage() const {
    return m_launch_stage;
}
void OAIMetricDescriptorMetadata::setLaunchStage(const QString &launch_stage) {
    m_launch_stage = launch_stage;
    m_launch_stage_isSet = true;
}

bool OAIMetricDescriptorMetadata::is_launch_stage_Set() const{
    return m_launch_stage_isSet;
}

bool OAIMetricDescriptorMetadata::is_launch_stage_Valid() const{
    return m_launch_stage_isValid;
}

QString OAIMetricDescriptorMetadata::getSamplePeriod() const {
    return m_sample_period;
}
void OAIMetricDescriptorMetadata::setSamplePeriod(const QString &sample_period) {
    m_sample_period = sample_period;
    m_sample_period_isSet = true;
}

bool OAIMetricDescriptorMetadata::is_sample_period_Set() const{
    return m_sample_period_isSet;
}

bool OAIMetricDescriptorMetadata::is_sample_period_Valid() const{
    return m_sample_period_isValid;
}

bool OAIMetricDescriptorMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ingest_delay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_stage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_period_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetricDescriptorMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
