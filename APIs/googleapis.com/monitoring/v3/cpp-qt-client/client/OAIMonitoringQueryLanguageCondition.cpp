/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMonitoringQueryLanguageCondition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMonitoringQueryLanguageCondition::OAIMonitoringQueryLanguageCondition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMonitoringQueryLanguageCondition::OAIMonitoringQueryLanguageCondition() {
    this->initializeModel();
}

OAIMonitoringQueryLanguageCondition::~OAIMonitoringQueryLanguageCondition() {}

void OAIMonitoringQueryLanguageCondition::initializeModel() {

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_evaluation_missing_data_isSet = false;
    m_evaluation_missing_data_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_trigger_isSet = false;
    m_trigger_isValid = false;
}

void OAIMonitoringQueryLanguageCondition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMonitoringQueryLanguageCondition::fromJsonObject(QJsonObject json) {

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_evaluation_missing_data_isValid = ::OpenAPI::fromJsonValue(m_evaluation_missing_data, json[QString("evaluationMissingData")]);
    m_evaluation_missing_data_isSet = !json[QString("evaluationMissingData")].isNull() && m_evaluation_missing_data_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_trigger_isValid = ::OpenAPI::fromJsonValue(m_trigger, json[QString("trigger")]);
    m_trigger_isSet = !json[QString("trigger")].isNull() && m_trigger_isValid;
}

QString OAIMonitoringQueryLanguageCondition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMonitoringQueryLanguageCondition::asJsonObject() const {
    QJsonObject obj;
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_evaluation_missing_data_isSet) {
        obj.insert(QString("evaluationMissingData"), ::OpenAPI::toJsonValue(m_evaluation_missing_data));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_trigger.isSet()) {
        obj.insert(QString("trigger"), ::OpenAPI::toJsonValue(m_trigger));
    }
    return obj;
}

QString OAIMonitoringQueryLanguageCondition::getDuration() const {
    return m_duration;
}
void OAIMonitoringQueryLanguageCondition::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIMonitoringQueryLanguageCondition::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIMonitoringQueryLanguageCondition::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAIMonitoringQueryLanguageCondition::getEvaluationMissingData() const {
    return m_evaluation_missing_data;
}
void OAIMonitoringQueryLanguageCondition::setEvaluationMissingData(const QString &evaluation_missing_data) {
    m_evaluation_missing_data = evaluation_missing_data;
    m_evaluation_missing_data_isSet = true;
}

bool OAIMonitoringQueryLanguageCondition::is_evaluation_missing_data_Set() const{
    return m_evaluation_missing_data_isSet;
}

bool OAIMonitoringQueryLanguageCondition::is_evaluation_missing_data_Valid() const{
    return m_evaluation_missing_data_isValid;
}

QString OAIMonitoringQueryLanguageCondition::getQuery() const {
    return m_query;
}
void OAIMonitoringQueryLanguageCondition::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIMonitoringQueryLanguageCondition::is_query_Set() const{
    return m_query_isSet;
}

bool OAIMonitoringQueryLanguageCondition::is_query_Valid() const{
    return m_query_isValid;
}

OAITrigger OAIMonitoringQueryLanguageCondition::getTrigger() const {
    return m_trigger;
}
void OAIMonitoringQueryLanguageCondition::setTrigger(const OAITrigger &trigger) {
    m_trigger = trigger;
    m_trigger_isSet = true;
}

bool OAIMonitoringQueryLanguageCondition::is_trigger_Set() const{
    return m_trigger_isSet;
}

bool OAIMonitoringQueryLanguageCondition::is_trigger_Valid() const{
    return m_trigger_isValid;
}

bool OAIMonitoringQueryLanguageCondition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_missing_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMonitoringQueryLanguageCondition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
