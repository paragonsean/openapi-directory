/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimeSeriesDescriptor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimeSeriesDescriptor::OAITimeSeriesDescriptor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimeSeriesDescriptor::OAITimeSeriesDescriptor() {
    this->initializeModel();
}

OAITimeSeriesDescriptor::~OAITimeSeriesDescriptor() {}

void OAITimeSeriesDescriptor::initializeModel() {

    m_label_descriptors_isSet = false;
    m_label_descriptors_isValid = false;

    m_point_descriptors_isSet = false;
    m_point_descriptors_isValid = false;
}

void OAITimeSeriesDescriptor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimeSeriesDescriptor::fromJsonObject(QJsonObject json) {

    m_label_descriptors_isValid = ::OpenAPI::fromJsonValue(m_label_descriptors, json[QString("labelDescriptors")]);
    m_label_descriptors_isSet = !json[QString("labelDescriptors")].isNull() && m_label_descriptors_isValid;

    m_point_descriptors_isValid = ::OpenAPI::fromJsonValue(m_point_descriptors, json[QString("pointDescriptors")]);
    m_point_descriptors_isSet = !json[QString("pointDescriptors")].isNull() && m_point_descriptors_isValid;
}

QString OAITimeSeriesDescriptor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimeSeriesDescriptor::asJsonObject() const {
    QJsonObject obj;
    if (m_label_descriptors.size() > 0) {
        obj.insert(QString("labelDescriptors"), ::OpenAPI::toJsonValue(m_label_descriptors));
    }
    if (m_point_descriptors.size() > 0) {
        obj.insert(QString("pointDescriptors"), ::OpenAPI::toJsonValue(m_point_descriptors));
    }
    return obj;
}

QList<OAILabelDescriptor> OAITimeSeriesDescriptor::getLabelDescriptors() const {
    return m_label_descriptors;
}
void OAITimeSeriesDescriptor::setLabelDescriptors(const QList<OAILabelDescriptor> &label_descriptors) {
    m_label_descriptors = label_descriptors;
    m_label_descriptors_isSet = true;
}

bool OAITimeSeriesDescriptor::is_label_descriptors_Set() const{
    return m_label_descriptors_isSet;
}

bool OAITimeSeriesDescriptor::is_label_descriptors_Valid() const{
    return m_label_descriptors_isValid;
}

QList<OAIValueDescriptor> OAITimeSeriesDescriptor::getPointDescriptors() const {
    return m_point_descriptors;
}
void OAITimeSeriesDescriptor::setPointDescriptors(const QList<OAIValueDescriptor> &point_descriptors) {
    m_point_descriptors = point_descriptors;
    m_point_descriptors_isSet = true;
}

bool OAITimeSeriesDescriptor::is_point_descriptors_Set() const{
    return m_point_descriptors_isSet;
}

bool OAITimeSeriesDescriptor::is_point_descriptors_Valid() const{
    return m_point_descriptors_isValid;
}

bool OAITimeSeriesDescriptor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_label_descriptors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_point_descriptors.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimeSeriesDescriptor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
