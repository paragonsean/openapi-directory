/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIService.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIService::OAIService(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIService::OAIService() {
    this->initializeModel();
}

OAIService::~OAIService() {}

void OAIService::initializeModel() {

    m_app_engine_isSet = false;
    m_app_engine_isValid = false;

    m_basic_service_isSet = false;
    m_basic_service_isValid = false;

    m_cloud_endpoints_isSet = false;
    m_cloud_endpoints_isValid = false;

    m_cloud_run_isSet = false;
    m_cloud_run_isValid = false;

    m_cluster_istio_isSet = false;
    m_cluster_istio_isValid = false;

    m_custom_isSet = false;
    m_custom_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_gke_namespace_isSet = false;
    m_gke_namespace_isValid = false;

    m_gke_service_isSet = false;
    m_gke_service_isValid = false;

    m_gke_workload_isSet = false;
    m_gke_workload_isValid = false;

    m_istio_canonical_service_isSet = false;
    m_istio_canonical_service_isValid = false;

    m_mesh_istio_isSet = false;
    m_mesh_istio_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_telemetry_isSet = false;
    m_telemetry_isValid = false;

    m_user_labels_isSet = false;
    m_user_labels_isValid = false;
}

void OAIService::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIService::fromJsonObject(QJsonObject json) {

    m_app_engine_isValid = ::OpenAPI::fromJsonValue(m_app_engine, json[QString("appEngine")]);
    m_app_engine_isSet = !json[QString("appEngine")].isNull() && m_app_engine_isValid;

    m_basic_service_isValid = ::OpenAPI::fromJsonValue(m_basic_service, json[QString("basicService")]);
    m_basic_service_isSet = !json[QString("basicService")].isNull() && m_basic_service_isValid;

    m_cloud_endpoints_isValid = ::OpenAPI::fromJsonValue(m_cloud_endpoints, json[QString("cloudEndpoints")]);
    m_cloud_endpoints_isSet = !json[QString("cloudEndpoints")].isNull() && m_cloud_endpoints_isValid;

    m_cloud_run_isValid = ::OpenAPI::fromJsonValue(m_cloud_run, json[QString("cloudRun")]);
    m_cloud_run_isSet = !json[QString("cloudRun")].isNull() && m_cloud_run_isValid;

    m_cluster_istio_isValid = ::OpenAPI::fromJsonValue(m_cluster_istio, json[QString("clusterIstio")]);
    m_cluster_istio_isSet = !json[QString("clusterIstio")].isNull() && m_cluster_istio_isValid;

    m_custom_isValid = ::OpenAPI::fromJsonValue(m_custom, json[QString("custom")]);
    m_custom_isSet = !json[QString("custom")].isNull() && m_custom_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_gke_namespace_isValid = ::OpenAPI::fromJsonValue(m_gke_namespace, json[QString("gkeNamespace")]);
    m_gke_namespace_isSet = !json[QString("gkeNamespace")].isNull() && m_gke_namespace_isValid;

    m_gke_service_isValid = ::OpenAPI::fromJsonValue(m_gke_service, json[QString("gkeService")]);
    m_gke_service_isSet = !json[QString("gkeService")].isNull() && m_gke_service_isValid;

    m_gke_workload_isValid = ::OpenAPI::fromJsonValue(m_gke_workload, json[QString("gkeWorkload")]);
    m_gke_workload_isSet = !json[QString("gkeWorkload")].isNull() && m_gke_workload_isValid;

    m_istio_canonical_service_isValid = ::OpenAPI::fromJsonValue(m_istio_canonical_service, json[QString("istioCanonicalService")]);
    m_istio_canonical_service_isSet = !json[QString("istioCanonicalService")].isNull() && m_istio_canonical_service_isValid;

    m_mesh_istio_isValid = ::OpenAPI::fromJsonValue(m_mesh_istio, json[QString("meshIstio")]);
    m_mesh_istio_isSet = !json[QString("meshIstio")].isNull() && m_mesh_istio_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_telemetry_isValid = ::OpenAPI::fromJsonValue(m_telemetry, json[QString("telemetry")]);
    m_telemetry_isSet = !json[QString("telemetry")].isNull() && m_telemetry_isValid;

    m_user_labels_isValid = ::OpenAPI::fromJsonValue(m_user_labels, json[QString("userLabels")]);
    m_user_labels_isSet = !json[QString("userLabels")].isNull() && m_user_labels_isValid;
}

QString OAIService::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIService::asJsonObject() const {
    QJsonObject obj;
    if (m_app_engine.isSet()) {
        obj.insert(QString("appEngine"), ::OpenAPI::toJsonValue(m_app_engine));
    }
    if (m_basic_service.isSet()) {
        obj.insert(QString("basicService"), ::OpenAPI::toJsonValue(m_basic_service));
    }
    if (m_cloud_endpoints.isSet()) {
        obj.insert(QString("cloudEndpoints"), ::OpenAPI::toJsonValue(m_cloud_endpoints));
    }
    if (m_cloud_run.isSet()) {
        obj.insert(QString("cloudRun"), ::OpenAPI::toJsonValue(m_cloud_run));
    }
    if (m_cluster_istio.isSet()) {
        obj.insert(QString("clusterIstio"), ::OpenAPI::toJsonValue(m_cluster_istio));
    }
    if (m_custom_isSet) {
        obj.insert(QString("custom"), ::OpenAPI::toJsonValue(m_custom));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_gke_namespace.isSet()) {
        obj.insert(QString("gkeNamespace"), ::OpenAPI::toJsonValue(m_gke_namespace));
    }
    if (m_gke_service.isSet()) {
        obj.insert(QString("gkeService"), ::OpenAPI::toJsonValue(m_gke_service));
    }
    if (m_gke_workload.isSet()) {
        obj.insert(QString("gkeWorkload"), ::OpenAPI::toJsonValue(m_gke_workload));
    }
    if (m_istio_canonical_service.isSet()) {
        obj.insert(QString("istioCanonicalService"), ::OpenAPI::toJsonValue(m_istio_canonical_service));
    }
    if (m_mesh_istio.isSet()) {
        obj.insert(QString("meshIstio"), ::OpenAPI::toJsonValue(m_mesh_istio));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_telemetry.isSet()) {
        obj.insert(QString("telemetry"), ::OpenAPI::toJsonValue(m_telemetry));
    }
    if (m_user_labels.size() > 0) {
        obj.insert(QString("userLabels"), ::OpenAPI::toJsonValue(m_user_labels));
    }
    return obj;
}

OAIAppEngine OAIService::getAppEngine() const {
    return m_app_engine;
}
void OAIService::setAppEngine(const OAIAppEngine &app_engine) {
    m_app_engine = app_engine;
    m_app_engine_isSet = true;
}

bool OAIService::is_app_engine_Set() const{
    return m_app_engine_isSet;
}

bool OAIService::is_app_engine_Valid() const{
    return m_app_engine_isValid;
}

OAIBasicService OAIService::getBasicService() const {
    return m_basic_service;
}
void OAIService::setBasicService(const OAIBasicService &basic_service) {
    m_basic_service = basic_service;
    m_basic_service_isSet = true;
}

bool OAIService::is_basic_service_Set() const{
    return m_basic_service_isSet;
}

bool OAIService::is_basic_service_Valid() const{
    return m_basic_service_isValid;
}

OAICloudEndpoints OAIService::getCloudEndpoints() const {
    return m_cloud_endpoints;
}
void OAIService::setCloudEndpoints(const OAICloudEndpoints &cloud_endpoints) {
    m_cloud_endpoints = cloud_endpoints;
    m_cloud_endpoints_isSet = true;
}

bool OAIService::is_cloud_endpoints_Set() const{
    return m_cloud_endpoints_isSet;
}

bool OAIService::is_cloud_endpoints_Valid() const{
    return m_cloud_endpoints_isValid;
}

OAICloudRun OAIService::getCloudRun() const {
    return m_cloud_run;
}
void OAIService::setCloudRun(const OAICloudRun &cloud_run) {
    m_cloud_run = cloud_run;
    m_cloud_run_isSet = true;
}

bool OAIService::is_cloud_run_Set() const{
    return m_cloud_run_isSet;
}

bool OAIService::is_cloud_run_Valid() const{
    return m_cloud_run_isValid;
}

OAIClusterIstio OAIService::getClusterIstio() const {
    return m_cluster_istio;
}
void OAIService::setClusterIstio(const OAIClusterIstio &cluster_istio) {
    m_cluster_istio = cluster_istio;
    m_cluster_istio_isSet = true;
}

bool OAIService::is_cluster_istio_Set() const{
    return m_cluster_istio_isSet;
}

bool OAIService::is_cluster_istio_Valid() const{
    return m_cluster_istio_isValid;
}

OAIObject OAIService::getCustom() const {
    return m_custom;
}
void OAIService::setCustom(const OAIObject &custom) {
    m_custom = custom;
    m_custom_isSet = true;
}

bool OAIService::is_custom_Set() const{
    return m_custom_isSet;
}

bool OAIService::is_custom_Valid() const{
    return m_custom_isValid;
}

QString OAIService::getDisplayName() const {
    return m_display_name;
}
void OAIService::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIService::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIService::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIGkeNamespace OAIService::getGkeNamespace() const {
    return m_gke_namespace;
}
void OAIService::setGkeNamespace(const OAIGkeNamespace &gke_namespace) {
    m_gke_namespace = gke_namespace;
    m_gke_namespace_isSet = true;
}

bool OAIService::is_gke_namespace_Set() const{
    return m_gke_namespace_isSet;
}

bool OAIService::is_gke_namespace_Valid() const{
    return m_gke_namespace_isValid;
}

OAIGkeService OAIService::getGkeService() const {
    return m_gke_service;
}
void OAIService::setGkeService(const OAIGkeService &gke_service) {
    m_gke_service = gke_service;
    m_gke_service_isSet = true;
}

bool OAIService::is_gke_service_Set() const{
    return m_gke_service_isSet;
}

bool OAIService::is_gke_service_Valid() const{
    return m_gke_service_isValid;
}

OAIGkeWorkload OAIService::getGkeWorkload() const {
    return m_gke_workload;
}
void OAIService::setGkeWorkload(const OAIGkeWorkload &gke_workload) {
    m_gke_workload = gke_workload;
    m_gke_workload_isSet = true;
}

bool OAIService::is_gke_workload_Set() const{
    return m_gke_workload_isSet;
}

bool OAIService::is_gke_workload_Valid() const{
    return m_gke_workload_isValid;
}

OAIIstioCanonicalService OAIService::getIstioCanonicalService() const {
    return m_istio_canonical_service;
}
void OAIService::setIstioCanonicalService(const OAIIstioCanonicalService &istio_canonical_service) {
    m_istio_canonical_service = istio_canonical_service;
    m_istio_canonical_service_isSet = true;
}

bool OAIService::is_istio_canonical_service_Set() const{
    return m_istio_canonical_service_isSet;
}

bool OAIService::is_istio_canonical_service_Valid() const{
    return m_istio_canonical_service_isValid;
}

OAIMeshIstio OAIService::getMeshIstio() const {
    return m_mesh_istio;
}
void OAIService::setMeshIstio(const OAIMeshIstio &mesh_istio) {
    m_mesh_istio = mesh_istio;
    m_mesh_istio_isSet = true;
}

bool OAIService::is_mesh_istio_Set() const{
    return m_mesh_istio_isSet;
}

bool OAIService::is_mesh_istio_Valid() const{
    return m_mesh_istio_isValid;
}

QString OAIService::getName() const {
    return m_name;
}
void OAIService::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIService::is_name_Set() const{
    return m_name_isSet;
}

bool OAIService::is_name_Valid() const{
    return m_name_isValid;
}

OAITelemetry OAIService::getTelemetry() const {
    return m_telemetry;
}
void OAIService::setTelemetry(const OAITelemetry &telemetry) {
    m_telemetry = telemetry;
    m_telemetry_isSet = true;
}

bool OAIService::is_telemetry_Set() const{
    return m_telemetry_isSet;
}

bool OAIService::is_telemetry_Valid() const{
    return m_telemetry_isValid;
}

QMap<QString, QString> OAIService::getUserLabels() const {
    return m_user_labels;
}
void OAIService::setUserLabels(const QMap<QString, QString> &user_labels) {
    m_user_labels = user_labels;
    m_user_labels_isSet = true;
}

bool OAIService::is_user_labels_Set() const{
    return m_user_labels_isSet;
}

bool OAIService::is_user_labels_Valid() const{
    return m_user_labels_isValid;
}

bool OAIService::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_engine.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_basic_service.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_endpoints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_run.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_istio.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gke_namespace.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gke_service.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gke_workload.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_istio_canonical_service.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mesh_istio.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_telemetry.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIService::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
