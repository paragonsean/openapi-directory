/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIValueDescriptor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIValueDescriptor::OAIValueDescriptor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIValueDescriptor::OAIValueDescriptor() {
    this->initializeModel();
}

OAIValueDescriptor::~OAIValueDescriptor() {}

void OAIValueDescriptor::initializeModel() {

    m_key_isSet = false;
    m_key_isValid = false;

    m_metric_kind_isSet = false;
    m_metric_kind_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;

    m_value_type_isSet = false;
    m_value_type_isValid = false;
}

void OAIValueDescriptor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIValueDescriptor::fromJsonObject(QJsonObject json) {

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_metric_kind_isValid = ::OpenAPI::fromJsonValue(m_metric_kind, json[QString("metricKind")]);
    m_metric_kind_isSet = !json[QString("metricKind")].isNull() && m_metric_kind_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;

    m_value_type_isValid = ::OpenAPI::fromJsonValue(m_value_type, json[QString("valueType")]);
    m_value_type_isSet = !json[QString("valueType")].isNull() && m_value_type_isValid;
}

QString OAIValueDescriptor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIValueDescriptor::asJsonObject() const {
    QJsonObject obj;
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_metric_kind_isSet) {
        obj.insert(QString("metricKind"), ::OpenAPI::toJsonValue(m_metric_kind));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    if (m_value_type_isSet) {
        obj.insert(QString("valueType"), ::OpenAPI::toJsonValue(m_value_type));
    }
    return obj;
}

QString OAIValueDescriptor::getKey() const {
    return m_key;
}
void OAIValueDescriptor::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIValueDescriptor::is_key_Set() const{
    return m_key_isSet;
}

bool OAIValueDescriptor::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIValueDescriptor::getMetricKind() const {
    return m_metric_kind;
}
void OAIValueDescriptor::setMetricKind(const QString &metric_kind) {
    m_metric_kind = metric_kind;
    m_metric_kind_isSet = true;
}

bool OAIValueDescriptor::is_metric_kind_Set() const{
    return m_metric_kind_isSet;
}

bool OAIValueDescriptor::is_metric_kind_Valid() const{
    return m_metric_kind_isValid;
}

QString OAIValueDescriptor::getUnit() const {
    return m_unit;
}
void OAIValueDescriptor::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIValueDescriptor::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIValueDescriptor::is_unit_Valid() const{
    return m_unit_isValid;
}

QString OAIValueDescriptor::getValueType() const {
    return m_value_type;
}
void OAIValueDescriptor::setValueType(const QString &value_type) {
    m_value_type = value_type;
    m_value_type_isSet = true;
}

bool OAIValueDescriptor::is_value_type_Set() const{
    return m_value_type_isSet;
}

bool OAIValueDescriptor::is_value_type_Valid() const{
    return m_value_type_isValid;
}

bool OAIValueDescriptor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIValueDescriptor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
