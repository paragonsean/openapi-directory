/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlertPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlertPolicy::OAIAlertPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlertPolicy::OAIAlertPolicy() {
    this->initializeModel();
}

OAIAlertPolicy::~OAIAlertPolicy() {}

void OAIAlertPolicy::initializeModel() {

    m_alert_strategy_isSet = false;
    m_alert_strategy_isValid = false;

    m_combiner_isSet = false;
    m_combiner_isValid = false;

    m_conditions_isSet = false;
    m_conditions_isValid = false;

    m_creation_record_isSet = false;
    m_creation_record_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_documentation_isSet = false;
    m_documentation_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_mutation_record_isSet = false;
    m_mutation_record_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notification_channels_isSet = false;
    m_notification_channels_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_user_labels_isSet = false;
    m_user_labels_isValid = false;

    m_validity_isSet = false;
    m_validity_isValid = false;
}

void OAIAlertPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlertPolicy::fromJsonObject(QJsonObject json) {

    m_alert_strategy_isValid = ::OpenAPI::fromJsonValue(m_alert_strategy, json[QString("alertStrategy")]);
    m_alert_strategy_isSet = !json[QString("alertStrategy")].isNull() && m_alert_strategy_isValid;

    m_combiner_isValid = ::OpenAPI::fromJsonValue(m_combiner, json[QString("combiner")]);
    m_combiner_isSet = !json[QString("combiner")].isNull() && m_combiner_isValid;

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("conditions")]);
    m_conditions_isSet = !json[QString("conditions")].isNull() && m_conditions_isValid;

    m_creation_record_isValid = ::OpenAPI::fromJsonValue(m_creation_record, json[QString("creationRecord")]);
    m_creation_record_isSet = !json[QString("creationRecord")].isNull() && m_creation_record_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_documentation_isValid = ::OpenAPI::fromJsonValue(m_documentation, json[QString("documentation")]);
    m_documentation_isSet = !json[QString("documentation")].isNull() && m_documentation_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_mutation_record_isValid = ::OpenAPI::fromJsonValue(m_mutation_record, json[QString("mutationRecord")]);
    m_mutation_record_isSet = !json[QString("mutationRecord")].isNull() && m_mutation_record_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notification_channels_isValid = ::OpenAPI::fromJsonValue(m_notification_channels, json[QString("notificationChannels")]);
    m_notification_channels_isSet = !json[QString("notificationChannels")].isNull() && m_notification_channels_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_user_labels_isValid = ::OpenAPI::fromJsonValue(m_user_labels, json[QString("userLabels")]);
    m_user_labels_isSet = !json[QString("userLabels")].isNull() && m_user_labels_isValid;

    m_validity_isValid = ::OpenAPI::fromJsonValue(m_validity, json[QString("validity")]);
    m_validity_isSet = !json[QString("validity")].isNull() && m_validity_isValid;
}

QString OAIAlertPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlertPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_alert_strategy.isSet()) {
        obj.insert(QString("alertStrategy"), ::OpenAPI::toJsonValue(m_alert_strategy));
    }
    if (m_combiner_isSet) {
        obj.insert(QString("combiner"), ::OpenAPI::toJsonValue(m_combiner));
    }
    if (m_conditions.size() > 0) {
        obj.insert(QString("conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    if (m_creation_record.isSet()) {
        obj.insert(QString("creationRecord"), ::OpenAPI::toJsonValue(m_creation_record));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_documentation.isSet()) {
        obj.insert(QString("documentation"), ::OpenAPI::toJsonValue(m_documentation));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_mutation_record.isSet()) {
        obj.insert(QString("mutationRecord"), ::OpenAPI::toJsonValue(m_mutation_record));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notification_channels.size() > 0) {
        obj.insert(QString("notificationChannels"), ::OpenAPI::toJsonValue(m_notification_channels));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_user_labels.size() > 0) {
        obj.insert(QString("userLabels"), ::OpenAPI::toJsonValue(m_user_labels));
    }
    if (m_validity.isSet()) {
        obj.insert(QString("validity"), ::OpenAPI::toJsonValue(m_validity));
    }
    return obj;
}

OAIAlertStrategy OAIAlertPolicy::getAlertStrategy() const {
    return m_alert_strategy;
}
void OAIAlertPolicy::setAlertStrategy(const OAIAlertStrategy &alert_strategy) {
    m_alert_strategy = alert_strategy;
    m_alert_strategy_isSet = true;
}

bool OAIAlertPolicy::is_alert_strategy_Set() const{
    return m_alert_strategy_isSet;
}

bool OAIAlertPolicy::is_alert_strategy_Valid() const{
    return m_alert_strategy_isValid;
}

QString OAIAlertPolicy::getCombiner() const {
    return m_combiner;
}
void OAIAlertPolicy::setCombiner(const QString &combiner) {
    m_combiner = combiner;
    m_combiner_isSet = true;
}

bool OAIAlertPolicy::is_combiner_Set() const{
    return m_combiner_isSet;
}

bool OAIAlertPolicy::is_combiner_Valid() const{
    return m_combiner_isValid;
}

QList<OAICondition> OAIAlertPolicy::getConditions() const {
    return m_conditions;
}
void OAIAlertPolicy::setConditions(const QList<OAICondition> &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAIAlertPolicy::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAIAlertPolicy::is_conditions_Valid() const{
    return m_conditions_isValid;
}

OAIMutationRecord OAIAlertPolicy::getCreationRecord() const {
    return m_creation_record;
}
void OAIAlertPolicy::setCreationRecord(const OAIMutationRecord &creation_record) {
    m_creation_record = creation_record;
    m_creation_record_isSet = true;
}

bool OAIAlertPolicy::is_creation_record_Set() const{
    return m_creation_record_isSet;
}

bool OAIAlertPolicy::is_creation_record_Valid() const{
    return m_creation_record_isValid;
}

QString OAIAlertPolicy::getDisplayName() const {
    return m_display_name;
}
void OAIAlertPolicy::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIAlertPolicy::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIAlertPolicy::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIDocumentation OAIAlertPolicy::getDocumentation() const {
    return m_documentation;
}
void OAIAlertPolicy::setDocumentation(const OAIDocumentation &documentation) {
    m_documentation = documentation;
    m_documentation_isSet = true;
}

bool OAIAlertPolicy::is_documentation_Set() const{
    return m_documentation_isSet;
}

bool OAIAlertPolicy::is_documentation_Valid() const{
    return m_documentation_isValid;
}

bool OAIAlertPolicy::isEnabled() const {
    return m_enabled;
}
void OAIAlertPolicy::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIAlertPolicy::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIAlertPolicy::is_enabled_Valid() const{
    return m_enabled_isValid;
}

OAIMutationRecord OAIAlertPolicy::getMutationRecord() const {
    return m_mutation_record;
}
void OAIAlertPolicy::setMutationRecord(const OAIMutationRecord &mutation_record) {
    m_mutation_record = mutation_record;
    m_mutation_record_isSet = true;
}

bool OAIAlertPolicy::is_mutation_record_Set() const{
    return m_mutation_record_isSet;
}

bool OAIAlertPolicy::is_mutation_record_Valid() const{
    return m_mutation_record_isValid;
}

QString OAIAlertPolicy::getName() const {
    return m_name;
}
void OAIAlertPolicy::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAlertPolicy::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAlertPolicy::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIAlertPolicy::getNotificationChannels() const {
    return m_notification_channels;
}
void OAIAlertPolicy::setNotificationChannels(const QList<QString> &notification_channels) {
    m_notification_channels = notification_channels;
    m_notification_channels_isSet = true;
}

bool OAIAlertPolicy::is_notification_channels_Set() const{
    return m_notification_channels_isSet;
}

bool OAIAlertPolicy::is_notification_channels_Valid() const{
    return m_notification_channels_isValid;
}

QString OAIAlertPolicy::getSeverity() const {
    return m_severity;
}
void OAIAlertPolicy::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIAlertPolicy::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIAlertPolicy::is_severity_Valid() const{
    return m_severity_isValid;
}

QMap<QString, QString> OAIAlertPolicy::getUserLabels() const {
    return m_user_labels;
}
void OAIAlertPolicy::setUserLabels(const QMap<QString, QString> &user_labels) {
    m_user_labels = user_labels;
    m_user_labels_isSet = true;
}

bool OAIAlertPolicy::is_user_labels_Set() const{
    return m_user_labels_isSet;
}

bool OAIAlertPolicy::is_user_labels_Valid() const{
    return m_user_labels_isValid;
}

OAIStatus OAIAlertPolicy::getValidity() const {
    return m_validity;
}
void OAIAlertPolicy::setValidity(const OAIStatus &validity) {
    m_validity = validity;
    m_validity_isSet = true;
}

bool OAIAlertPolicy::is_validity_Set() const{
    return m_validity_isSet;
}

bool OAIAlertPolicy::is_validity_Valid() const{
    return m_validity_isValid;
}

bool OAIAlertPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alert_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_combiner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_record.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_documentation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mutation_record.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_channels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_validity.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlertPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
