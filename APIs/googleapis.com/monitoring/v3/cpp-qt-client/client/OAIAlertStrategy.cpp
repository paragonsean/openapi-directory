/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlertStrategy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlertStrategy::OAIAlertStrategy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlertStrategy::OAIAlertStrategy() {
    this->initializeModel();
}

OAIAlertStrategy::~OAIAlertStrategy() {}

void OAIAlertStrategy::initializeModel() {

    m_auto_close_isSet = false;
    m_auto_close_isValid = false;

    m_notification_channel_strategy_isSet = false;
    m_notification_channel_strategy_isValid = false;

    m_notification_rate_limit_isSet = false;
    m_notification_rate_limit_isValid = false;
}

void OAIAlertStrategy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlertStrategy::fromJsonObject(QJsonObject json) {

    m_auto_close_isValid = ::OpenAPI::fromJsonValue(m_auto_close, json[QString("autoClose")]);
    m_auto_close_isSet = !json[QString("autoClose")].isNull() && m_auto_close_isValid;

    m_notification_channel_strategy_isValid = ::OpenAPI::fromJsonValue(m_notification_channel_strategy, json[QString("notificationChannelStrategy")]);
    m_notification_channel_strategy_isSet = !json[QString("notificationChannelStrategy")].isNull() && m_notification_channel_strategy_isValid;

    m_notification_rate_limit_isValid = ::OpenAPI::fromJsonValue(m_notification_rate_limit, json[QString("notificationRateLimit")]);
    m_notification_rate_limit_isSet = !json[QString("notificationRateLimit")].isNull() && m_notification_rate_limit_isValid;
}

QString OAIAlertStrategy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlertStrategy::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_close_isSet) {
        obj.insert(QString("autoClose"), ::OpenAPI::toJsonValue(m_auto_close));
    }
    if (m_notification_channel_strategy.size() > 0) {
        obj.insert(QString("notificationChannelStrategy"), ::OpenAPI::toJsonValue(m_notification_channel_strategy));
    }
    if (m_notification_rate_limit.isSet()) {
        obj.insert(QString("notificationRateLimit"), ::OpenAPI::toJsonValue(m_notification_rate_limit));
    }
    return obj;
}

QString OAIAlertStrategy::getAutoClose() const {
    return m_auto_close;
}
void OAIAlertStrategy::setAutoClose(const QString &auto_close) {
    m_auto_close = auto_close;
    m_auto_close_isSet = true;
}

bool OAIAlertStrategy::is_auto_close_Set() const{
    return m_auto_close_isSet;
}

bool OAIAlertStrategy::is_auto_close_Valid() const{
    return m_auto_close_isValid;
}

QList<OAINotificationChannelStrategy> OAIAlertStrategy::getNotificationChannelStrategy() const {
    return m_notification_channel_strategy;
}
void OAIAlertStrategy::setNotificationChannelStrategy(const QList<OAINotificationChannelStrategy> &notification_channel_strategy) {
    m_notification_channel_strategy = notification_channel_strategy;
    m_notification_channel_strategy_isSet = true;
}

bool OAIAlertStrategy::is_notification_channel_strategy_Set() const{
    return m_notification_channel_strategy_isSet;
}

bool OAIAlertStrategy::is_notification_channel_strategy_Valid() const{
    return m_notification_channel_strategy_isValid;
}

OAINotificationRateLimit OAIAlertStrategy::getNotificationRateLimit() const {
    return m_notification_rate_limit;
}
void OAIAlertStrategy::setNotificationRateLimit(const OAINotificationRateLimit &notification_rate_limit) {
    m_notification_rate_limit = notification_rate_limit;
    m_notification_rate_limit_isSet = true;
}

bool OAIAlertStrategy::is_notification_rate_limit_Set() const{
    return m_notification_rate_limit_isSet;
}

bool OAIAlertStrategy::is_notification_rate_limit_Valid() const{
    return m_notification_rate_limit_isValid;
}

bool OAIAlertStrategy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_close_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_channel_strategy.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_rate_limit.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlertStrategy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
