/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDistribution.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDistribution::OAIDistribution(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDistribution::OAIDistribution() {
    this->initializeModel();
}

OAIDistribution::~OAIDistribution() {}

void OAIDistribution::initializeModel() {

    m_bucket_counts_isSet = false;
    m_bucket_counts_isValid = false;

    m_bucket_options_isSet = false;
    m_bucket_options_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_exemplars_isSet = false;
    m_exemplars_isValid = false;

    m_mean_isSet = false;
    m_mean_isValid = false;

    m_range_isSet = false;
    m_range_isValid = false;

    m_sum_of_squared_deviation_isSet = false;
    m_sum_of_squared_deviation_isValid = false;
}

void OAIDistribution::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDistribution::fromJsonObject(QJsonObject json) {

    m_bucket_counts_isValid = ::OpenAPI::fromJsonValue(m_bucket_counts, json[QString("bucketCounts")]);
    m_bucket_counts_isSet = !json[QString("bucketCounts")].isNull() && m_bucket_counts_isValid;

    m_bucket_options_isValid = ::OpenAPI::fromJsonValue(m_bucket_options, json[QString("bucketOptions")]);
    m_bucket_options_isSet = !json[QString("bucketOptions")].isNull() && m_bucket_options_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_exemplars_isValid = ::OpenAPI::fromJsonValue(m_exemplars, json[QString("exemplars")]);
    m_exemplars_isSet = !json[QString("exemplars")].isNull() && m_exemplars_isValid;

    m_mean_isValid = ::OpenAPI::fromJsonValue(m_mean, json[QString("mean")]);
    m_mean_isSet = !json[QString("mean")].isNull() && m_mean_isValid;

    m_range_isValid = ::OpenAPI::fromJsonValue(m_range, json[QString("range")]);
    m_range_isSet = !json[QString("range")].isNull() && m_range_isValid;

    m_sum_of_squared_deviation_isValid = ::OpenAPI::fromJsonValue(m_sum_of_squared_deviation, json[QString("sumOfSquaredDeviation")]);
    m_sum_of_squared_deviation_isSet = !json[QString("sumOfSquaredDeviation")].isNull() && m_sum_of_squared_deviation_isValid;
}

QString OAIDistribution::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDistribution::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_counts.size() > 0) {
        obj.insert(QString("bucketCounts"), ::OpenAPI::toJsonValue(m_bucket_counts));
    }
    if (m_bucket_options.isSet()) {
        obj.insert(QString("bucketOptions"), ::OpenAPI::toJsonValue(m_bucket_options));
    }
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_exemplars.size() > 0) {
        obj.insert(QString("exemplars"), ::OpenAPI::toJsonValue(m_exemplars));
    }
    if (m_mean_isSet) {
        obj.insert(QString("mean"), ::OpenAPI::toJsonValue(m_mean));
    }
    if (m_range.isSet()) {
        obj.insert(QString("range"), ::OpenAPI::toJsonValue(m_range));
    }
    if (m_sum_of_squared_deviation_isSet) {
        obj.insert(QString("sumOfSquaredDeviation"), ::OpenAPI::toJsonValue(m_sum_of_squared_deviation));
    }
    return obj;
}

QList<QString> OAIDistribution::getBucketCounts() const {
    return m_bucket_counts;
}
void OAIDistribution::setBucketCounts(const QList<QString> &bucket_counts) {
    m_bucket_counts = bucket_counts;
    m_bucket_counts_isSet = true;
}

bool OAIDistribution::is_bucket_counts_Set() const{
    return m_bucket_counts_isSet;
}

bool OAIDistribution::is_bucket_counts_Valid() const{
    return m_bucket_counts_isValid;
}

OAIBucketOptions OAIDistribution::getBucketOptions() const {
    return m_bucket_options;
}
void OAIDistribution::setBucketOptions(const OAIBucketOptions &bucket_options) {
    m_bucket_options = bucket_options;
    m_bucket_options_isSet = true;
}

bool OAIDistribution::is_bucket_options_Set() const{
    return m_bucket_options_isSet;
}

bool OAIDistribution::is_bucket_options_Valid() const{
    return m_bucket_options_isValid;
}

QString OAIDistribution::getCount() const {
    return m_count;
}
void OAIDistribution::setCount(const QString &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIDistribution::is_count_Set() const{
    return m_count_isSet;
}

bool OAIDistribution::is_count_Valid() const{
    return m_count_isValid;
}

QList<OAIExemplar> OAIDistribution::getExemplars() const {
    return m_exemplars;
}
void OAIDistribution::setExemplars(const QList<OAIExemplar> &exemplars) {
    m_exemplars = exemplars;
    m_exemplars_isSet = true;
}

bool OAIDistribution::is_exemplars_Set() const{
    return m_exemplars_isSet;
}

bool OAIDistribution::is_exemplars_Valid() const{
    return m_exemplars_isValid;
}

double OAIDistribution::getMean() const {
    return m_mean;
}
void OAIDistribution::setMean(const double &mean) {
    m_mean = mean;
    m_mean_isSet = true;
}

bool OAIDistribution::is_mean_Set() const{
    return m_mean_isSet;
}

bool OAIDistribution::is_mean_Valid() const{
    return m_mean_isValid;
}

OAIRange OAIDistribution::getRange() const {
    return m_range;
}
void OAIDistribution::setRange(const OAIRange &range) {
    m_range = range;
    m_range_isSet = true;
}

bool OAIDistribution::is_range_Set() const{
    return m_range_isSet;
}

bool OAIDistribution::is_range_Valid() const{
    return m_range_isValid;
}

double OAIDistribution::getSumOfSquaredDeviation() const {
    return m_sum_of_squared_deviation;
}
void OAIDistribution::setSumOfSquaredDeviation(const double &sum_of_squared_deviation) {
    m_sum_of_squared_deviation = sum_of_squared_deviation;
    m_sum_of_squared_deviation_isSet = true;
}

bool OAIDistribution::is_sum_of_squared_deviation_Set() const{
    return m_sum_of_squared_deviation_isSet;
}

bool OAIDistribution::is_sum_of_squared_deviation_Valid() const{
    return m_sum_of_squared_deviation_isValid;
}

bool OAIDistribution::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_counts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exemplars.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mean_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sum_of_squared_deviation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDistribution::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
