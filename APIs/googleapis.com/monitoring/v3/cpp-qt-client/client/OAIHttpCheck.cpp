/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHttpCheck.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHttpCheck::OAIHttpCheck(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHttpCheck::OAIHttpCheck() {
    this->initializeModel();
}

OAIHttpCheck::~OAIHttpCheck() {}

void OAIHttpCheck::initializeModel() {

    m_accepted_response_status_codes_isSet = false;
    m_accepted_response_status_codes_isValid = false;

    m_auth_info_isSet = false;
    m_auth_info_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_custom_content_type_isSet = false;
    m_custom_content_type_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_mask_headers_isSet = false;
    m_mask_headers_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_ping_config_isSet = false;
    m_ping_config_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_request_method_isSet = false;
    m_request_method_isValid = false;

    m_use_ssl_isSet = false;
    m_use_ssl_isValid = false;

    m_validate_ssl_isSet = false;
    m_validate_ssl_isValid = false;
}

void OAIHttpCheck::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHttpCheck::fromJsonObject(QJsonObject json) {

    m_accepted_response_status_codes_isValid = ::OpenAPI::fromJsonValue(m_accepted_response_status_codes, json[QString("acceptedResponseStatusCodes")]);
    m_accepted_response_status_codes_isSet = !json[QString("acceptedResponseStatusCodes")].isNull() && m_accepted_response_status_codes_isValid;

    m_auth_info_isValid = ::OpenAPI::fromJsonValue(m_auth_info, json[QString("authInfo")]);
    m_auth_info_isSet = !json[QString("authInfo")].isNull() && m_auth_info_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("contentType")]);
    m_content_type_isSet = !json[QString("contentType")].isNull() && m_content_type_isValid;

    m_custom_content_type_isValid = ::OpenAPI::fromJsonValue(m_custom_content_type, json[QString("customContentType")]);
    m_custom_content_type_isSet = !json[QString("customContentType")].isNull() && m_custom_content_type_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_mask_headers_isValid = ::OpenAPI::fromJsonValue(m_mask_headers, json[QString("maskHeaders")]);
    m_mask_headers_isSet = !json[QString("maskHeaders")].isNull() && m_mask_headers_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_ping_config_isValid = ::OpenAPI::fromJsonValue(m_ping_config, json[QString("pingConfig")]);
    m_ping_config_isSet = !json[QString("pingConfig")].isNull() && m_ping_config_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_request_method_isValid = ::OpenAPI::fromJsonValue(m_request_method, json[QString("requestMethod")]);
    m_request_method_isSet = !json[QString("requestMethod")].isNull() && m_request_method_isValid;

    m_use_ssl_isValid = ::OpenAPI::fromJsonValue(m_use_ssl, json[QString("useSsl")]);
    m_use_ssl_isSet = !json[QString("useSsl")].isNull() && m_use_ssl_isValid;

    m_validate_ssl_isValid = ::OpenAPI::fromJsonValue(m_validate_ssl, json[QString("validateSsl")]);
    m_validate_ssl_isSet = !json[QString("validateSsl")].isNull() && m_validate_ssl_isValid;
}

QString OAIHttpCheck::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHttpCheck::asJsonObject() const {
    QJsonObject obj;
    if (m_accepted_response_status_codes.size() > 0) {
        obj.insert(QString("acceptedResponseStatusCodes"), ::OpenAPI::toJsonValue(m_accepted_response_status_codes));
    }
    if (m_auth_info.isSet()) {
        obj.insert(QString("authInfo"), ::OpenAPI::toJsonValue(m_auth_info));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("contentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_custom_content_type_isSet) {
        obj.insert(QString("customContentType"), ::OpenAPI::toJsonValue(m_custom_content_type));
    }
    if (m_headers.size() > 0) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_mask_headers_isSet) {
        obj.insert(QString("maskHeaders"), ::OpenAPI::toJsonValue(m_mask_headers));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_ping_config.isSet()) {
        obj.insert(QString("pingConfig"), ::OpenAPI::toJsonValue(m_ping_config));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_request_method_isSet) {
        obj.insert(QString("requestMethod"), ::OpenAPI::toJsonValue(m_request_method));
    }
    if (m_use_ssl_isSet) {
        obj.insert(QString("useSsl"), ::OpenAPI::toJsonValue(m_use_ssl));
    }
    if (m_validate_ssl_isSet) {
        obj.insert(QString("validateSsl"), ::OpenAPI::toJsonValue(m_validate_ssl));
    }
    return obj;
}

QList<OAIResponseStatusCode> OAIHttpCheck::getAcceptedResponseStatusCodes() const {
    return m_accepted_response_status_codes;
}
void OAIHttpCheck::setAcceptedResponseStatusCodes(const QList<OAIResponseStatusCode> &accepted_response_status_codes) {
    m_accepted_response_status_codes = accepted_response_status_codes;
    m_accepted_response_status_codes_isSet = true;
}

bool OAIHttpCheck::is_accepted_response_status_codes_Set() const{
    return m_accepted_response_status_codes_isSet;
}

bool OAIHttpCheck::is_accepted_response_status_codes_Valid() const{
    return m_accepted_response_status_codes_isValid;
}

OAIBasicAuthentication OAIHttpCheck::getAuthInfo() const {
    return m_auth_info;
}
void OAIHttpCheck::setAuthInfo(const OAIBasicAuthentication &auth_info) {
    m_auth_info = auth_info;
    m_auth_info_isSet = true;
}

bool OAIHttpCheck::is_auth_info_Set() const{
    return m_auth_info_isSet;
}

bool OAIHttpCheck::is_auth_info_Valid() const{
    return m_auth_info_isValid;
}

QByteArray OAIHttpCheck::getBody() const {
    return m_body;
}
void OAIHttpCheck::setBody(const QByteArray &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIHttpCheck::is_body_Set() const{
    return m_body_isSet;
}

bool OAIHttpCheck::is_body_Valid() const{
    return m_body_isValid;
}

QString OAIHttpCheck::getContentType() const {
    return m_content_type;
}
void OAIHttpCheck::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIHttpCheck::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIHttpCheck::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QString OAIHttpCheck::getCustomContentType() const {
    return m_custom_content_type;
}
void OAIHttpCheck::setCustomContentType(const QString &custom_content_type) {
    m_custom_content_type = custom_content_type;
    m_custom_content_type_isSet = true;
}

bool OAIHttpCheck::is_custom_content_type_Set() const{
    return m_custom_content_type_isSet;
}

bool OAIHttpCheck::is_custom_content_type_Valid() const{
    return m_custom_content_type_isValid;
}

QMap<QString, QString> OAIHttpCheck::getHeaders() const {
    return m_headers;
}
void OAIHttpCheck::setHeaders(const QMap<QString, QString> &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIHttpCheck::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIHttpCheck::is_headers_Valid() const{
    return m_headers_isValid;
}

bool OAIHttpCheck::isMaskHeaders() const {
    return m_mask_headers;
}
void OAIHttpCheck::setMaskHeaders(const bool &mask_headers) {
    m_mask_headers = mask_headers;
    m_mask_headers_isSet = true;
}

bool OAIHttpCheck::is_mask_headers_Set() const{
    return m_mask_headers_isSet;
}

bool OAIHttpCheck::is_mask_headers_Valid() const{
    return m_mask_headers_isValid;
}

QString OAIHttpCheck::getPath() const {
    return m_path;
}
void OAIHttpCheck::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIHttpCheck::is_path_Set() const{
    return m_path_isSet;
}

bool OAIHttpCheck::is_path_Valid() const{
    return m_path_isValid;
}

OAIPingConfig OAIHttpCheck::getPingConfig() const {
    return m_ping_config;
}
void OAIHttpCheck::setPingConfig(const OAIPingConfig &ping_config) {
    m_ping_config = ping_config;
    m_ping_config_isSet = true;
}

bool OAIHttpCheck::is_ping_config_Set() const{
    return m_ping_config_isSet;
}

bool OAIHttpCheck::is_ping_config_Valid() const{
    return m_ping_config_isValid;
}

qint32 OAIHttpCheck::getPort() const {
    return m_port;
}
void OAIHttpCheck::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIHttpCheck::is_port_Set() const{
    return m_port_isSet;
}

bool OAIHttpCheck::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIHttpCheck::getRequestMethod() const {
    return m_request_method;
}
void OAIHttpCheck::setRequestMethod(const QString &request_method) {
    m_request_method = request_method;
    m_request_method_isSet = true;
}

bool OAIHttpCheck::is_request_method_Set() const{
    return m_request_method_isSet;
}

bool OAIHttpCheck::is_request_method_Valid() const{
    return m_request_method_isValid;
}

bool OAIHttpCheck::isUseSsl() const {
    return m_use_ssl;
}
void OAIHttpCheck::setUseSsl(const bool &use_ssl) {
    m_use_ssl = use_ssl;
    m_use_ssl_isSet = true;
}

bool OAIHttpCheck::is_use_ssl_Set() const{
    return m_use_ssl_isSet;
}

bool OAIHttpCheck::is_use_ssl_Valid() const{
    return m_use_ssl_isValid;
}

bool OAIHttpCheck::isValidateSsl() const {
    return m_validate_ssl;
}
void OAIHttpCheck::setValidateSsl(const bool &validate_ssl) {
    m_validate_ssl = validate_ssl;
    m_validate_ssl_isSet = true;
}

bool OAIHttpCheck::is_validate_ssl_Set() const{
    return m_validate_ssl_isSet;
}

bool OAIHttpCheck::is_validate_ssl_Valid() const{
    return m_validate_ssl_isValid;
}

bool OAIHttpCheck::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accepted_response_status_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mask_headers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ping_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_ssl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validate_ssl_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHttpCheck::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
