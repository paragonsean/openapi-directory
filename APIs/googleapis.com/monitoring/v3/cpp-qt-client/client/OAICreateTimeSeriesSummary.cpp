/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateTimeSeriesSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateTimeSeriesSummary::OAICreateTimeSeriesSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateTimeSeriesSummary::OAICreateTimeSeriesSummary() {
    this->initializeModel();
}

OAICreateTimeSeriesSummary::~OAICreateTimeSeriesSummary() {}

void OAICreateTimeSeriesSummary::initializeModel() {

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_success_point_count_isSet = false;
    m_success_point_count_isValid = false;

    m_total_point_count_isSet = false;
    m_total_point_count_isValid = false;
}

void OAICreateTimeSeriesSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateTimeSeriesSummary::fromJsonObject(QJsonObject json) {

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_success_point_count_isValid = ::OpenAPI::fromJsonValue(m_success_point_count, json[QString("successPointCount")]);
    m_success_point_count_isSet = !json[QString("successPointCount")].isNull() && m_success_point_count_isValid;

    m_total_point_count_isValid = ::OpenAPI::fromJsonValue(m_total_point_count, json[QString("totalPointCount")]);
    m_total_point_count_isSet = !json[QString("totalPointCount")].isNull() && m_total_point_count_isValid;
}

QString OAICreateTimeSeriesSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateTimeSeriesSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_success_point_count_isSet) {
        obj.insert(QString("successPointCount"), ::OpenAPI::toJsonValue(m_success_point_count));
    }
    if (m_total_point_count_isSet) {
        obj.insert(QString("totalPointCount"), ::OpenAPI::toJsonValue(m_total_point_count));
    }
    return obj;
}

QList<OAIError> OAICreateTimeSeriesSummary::getErrors() const {
    return m_errors;
}
void OAICreateTimeSeriesSummary::setErrors(const QList<OAIError> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAICreateTimeSeriesSummary::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAICreateTimeSeriesSummary::is_errors_Valid() const{
    return m_errors_isValid;
}

qint32 OAICreateTimeSeriesSummary::getSuccessPointCount() const {
    return m_success_point_count;
}
void OAICreateTimeSeriesSummary::setSuccessPointCount(const qint32 &success_point_count) {
    m_success_point_count = success_point_count;
    m_success_point_count_isSet = true;
}

bool OAICreateTimeSeriesSummary::is_success_point_count_Set() const{
    return m_success_point_count_isSet;
}

bool OAICreateTimeSeriesSummary::is_success_point_count_Valid() const{
    return m_success_point_count_isValid;
}

qint32 OAICreateTimeSeriesSummary::getTotalPointCount() const {
    return m_total_point_count;
}
void OAICreateTimeSeriesSummary::setTotalPointCount(const qint32 &total_point_count) {
    m_total_point_count = total_point_count;
    m_total_point_count_isSet = true;
}

bool OAICreateTimeSeriesSummary::is_total_point_count_Set() const{
    return m_total_point_count_isSet;
}

bool OAICreateTimeSeriesSummary::is_total_point_count_Valid() const{
    return m_total_point_count_isValid;
}

bool OAICreateTimeSeriesSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_point_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_point_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateTimeSeriesSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
