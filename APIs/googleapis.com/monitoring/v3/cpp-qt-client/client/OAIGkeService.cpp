/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGkeService.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGkeService::OAIGkeService(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGkeService::OAIGkeService() {
    this->initializeModel();
}

OAIGkeService::~OAIGkeService() {}

void OAIGkeService::initializeModel() {

    m_cluster_name_isSet = false;
    m_cluster_name_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_namespace_name_isSet = false;
    m_namespace_name_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;
}

void OAIGkeService::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGkeService::fromJsonObject(QJsonObject json) {

    m_cluster_name_isValid = ::OpenAPI::fromJsonValue(m_cluster_name, json[QString("clusterName")]);
    m_cluster_name_isSet = !json[QString("clusterName")].isNull() && m_cluster_name_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_namespace_name_isValid = ::OpenAPI::fromJsonValue(m_namespace_name, json[QString("namespaceName")]);
    m_namespace_name_isSet = !json[QString("namespaceName")].isNull() && m_namespace_name_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("serviceName")]);
    m_service_name_isSet = !json[QString("serviceName")].isNull() && m_service_name_isValid;
}

QString OAIGkeService::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGkeService::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_name_isSet) {
        obj.insert(QString("clusterName"), ::OpenAPI::toJsonValue(m_cluster_name));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_namespace_name_isSet) {
        obj.insert(QString("namespaceName"), ::OpenAPI::toJsonValue(m_namespace_name));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("serviceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    return obj;
}

QString OAIGkeService::getClusterName() const {
    return m_cluster_name;
}
void OAIGkeService::setClusterName(const QString &cluster_name) {
    m_cluster_name = cluster_name;
    m_cluster_name_isSet = true;
}

bool OAIGkeService::is_cluster_name_Set() const{
    return m_cluster_name_isSet;
}

bool OAIGkeService::is_cluster_name_Valid() const{
    return m_cluster_name_isValid;
}

QString OAIGkeService::getLocation() const {
    return m_location;
}
void OAIGkeService::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIGkeService::is_location_Set() const{
    return m_location_isSet;
}

bool OAIGkeService::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIGkeService::getNamespaceName() const {
    return m_namespace_name;
}
void OAIGkeService::setNamespaceName(const QString &namespace_name) {
    m_namespace_name = namespace_name;
    m_namespace_name_isSet = true;
}

bool OAIGkeService::is_namespace_name_Set() const{
    return m_namespace_name_isSet;
}

bool OAIGkeService::is_namespace_name_Valid() const{
    return m_namespace_name_isValid;
}

QString OAIGkeService::getProjectId() const {
    return m_project_id;
}
void OAIGkeService::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIGkeService::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIGkeService::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAIGkeService::getServiceName() const {
    return m_service_name;
}
void OAIGkeService::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIGkeService::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIGkeService::is_service_name_Valid() const{
    return m_service_name_isValid;
}

bool OAIGkeService::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_namespace_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGkeService::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
