/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICollectdPayloadError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICollectdPayloadError::OAICollectdPayloadError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICollectdPayloadError::OAICollectdPayloadError() {
    this->initializeModel();
}

OAICollectdPayloadError::~OAICollectdPayloadError() {}

void OAICollectdPayloadError::initializeModel() {

    m_error_isSet = false;
    m_error_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_value_errors_isSet = false;
    m_value_errors_isValid = false;
}

void OAICollectdPayloadError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICollectdPayloadError::fromJsonObject(QJsonObject json) {

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_value_errors_isValid = ::OpenAPI::fromJsonValue(m_value_errors, json[QString("valueErrors")]);
    m_value_errors_isSet = !json[QString("valueErrors")].isNull() && m_value_errors_isValid;
}

QString OAICollectdPayloadError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICollectdPayloadError::asJsonObject() const {
    QJsonObject obj;
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_value_errors.size() > 0) {
        obj.insert(QString("valueErrors"), ::OpenAPI::toJsonValue(m_value_errors));
    }
    return obj;
}

OAIStatus OAICollectdPayloadError::getError() const {
    return m_error;
}
void OAICollectdPayloadError::setError(const OAIStatus &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAICollectdPayloadError::is_error_Set() const{
    return m_error_isSet;
}

bool OAICollectdPayloadError::is_error_Valid() const{
    return m_error_isValid;
}

qint32 OAICollectdPayloadError::getIndex() const {
    return m_index;
}
void OAICollectdPayloadError::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAICollectdPayloadError::is_index_Set() const{
    return m_index_isSet;
}

bool OAICollectdPayloadError::is_index_Valid() const{
    return m_index_isValid;
}

QList<OAICollectdValueError> OAICollectdPayloadError::getValueErrors() const {
    return m_value_errors;
}
void OAICollectdPayloadError::setValueErrors(const QList<OAICollectdValueError> &value_errors) {
    m_value_errors = value_errors;
    m_value_errors_isSet = true;
}

bool OAICollectdPayloadError::is_value_errors_Set() const{
    return m_value_errors_isSet;
}

bool OAICollectdPayloadError::is_value_errors_Valid() const{
    return m_value_errors_isValid;
}

bool OAICollectdPayloadError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICollectdPayloadError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
