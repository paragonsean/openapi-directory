/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContentMatcher.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContentMatcher::OAIContentMatcher(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContentMatcher::OAIContentMatcher() {
    this->initializeModel();
}

OAIContentMatcher::~OAIContentMatcher() {}

void OAIContentMatcher::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_json_path_matcher_isSet = false;
    m_json_path_matcher_isValid = false;

    m_matcher_isSet = false;
    m_matcher_isValid = false;
}

void OAIContentMatcher::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContentMatcher::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_json_path_matcher_isValid = ::OpenAPI::fromJsonValue(m_json_path_matcher, json[QString("jsonPathMatcher")]);
    m_json_path_matcher_isSet = !json[QString("jsonPathMatcher")].isNull() && m_json_path_matcher_isValid;

    m_matcher_isValid = ::OpenAPI::fromJsonValue(m_matcher, json[QString("matcher")]);
    m_matcher_isSet = !json[QString("matcher")].isNull() && m_matcher_isValid;
}

QString OAIContentMatcher::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContentMatcher::asJsonObject() const {
    QJsonObject obj;
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_json_path_matcher.isSet()) {
        obj.insert(QString("jsonPathMatcher"), ::OpenAPI::toJsonValue(m_json_path_matcher));
    }
    if (m_matcher_isSet) {
        obj.insert(QString("matcher"), ::OpenAPI::toJsonValue(m_matcher));
    }
    return obj;
}

QString OAIContentMatcher::getContent() const {
    return m_content;
}
void OAIContentMatcher::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIContentMatcher::is_content_Set() const{
    return m_content_isSet;
}

bool OAIContentMatcher::is_content_Valid() const{
    return m_content_isValid;
}

OAIJsonPathMatcher OAIContentMatcher::getJsonPathMatcher() const {
    return m_json_path_matcher;
}
void OAIContentMatcher::setJsonPathMatcher(const OAIJsonPathMatcher &json_path_matcher) {
    m_json_path_matcher = json_path_matcher;
    m_json_path_matcher_isSet = true;
}

bool OAIContentMatcher::is_json_path_matcher_Set() const{
    return m_json_path_matcher_isSet;
}

bool OAIContentMatcher::is_json_path_matcher_Valid() const{
    return m_json_path_matcher_isValid;
}

QString OAIContentMatcher::getMatcher() const {
    return m_matcher;
}
void OAIContentMatcher::setMatcher(const QString &matcher) {
    m_matcher = matcher;
    m_matcher_isSet = true;
}

bool OAIContentMatcher::is_matcher_Set() const{
    return m_matcher_isSet;
}

bool OAIContentMatcher::is_matcher_Valid() const{
    return m_matcher_isValid;
}

bool OAIContentMatcher::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_json_path_matcher.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_matcher_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContentMatcher::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
