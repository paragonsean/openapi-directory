/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceLevelObjective.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceLevelObjective::OAIServiceLevelObjective(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceLevelObjective::OAIServiceLevelObjective() {
    this->initializeModel();
}

OAIServiceLevelObjective::~OAIServiceLevelObjective() {}

void OAIServiceLevelObjective::initializeModel() {

    m_calendar_period_isSet = false;
    m_calendar_period_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_goal_isSet = false;
    m_goal_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_rolling_period_isSet = false;
    m_rolling_period_isValid = false;

    m_service_level_indicator_isSet = false;
    m_service_level_indicator_isValid = false;

    m_user_labels_isSet = false;
    m_user_labels_isValid = false;
}

void OAIServiceLevelObjective::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceLevelObjective::fromJsonObject(QJsonObject json) {

    m_calendar_period_isValid = ::OpenAPI::fromJsonValue(m_calendar_period, json[QString("calendarPeriod")]);
    m_calendar_period_isSet = !json[QString("calendarPeriod")].isNull() && m_calendar_period_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_goal_isValid = ::OpenAPI::fromJsonValue(m_goal, json[QString("goal")]);
    m_goal_isSet = !json[QString("goal")].isNull() && m_goal_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_rolling_period_isValid = ::OpenAPI::fromJsonValue(m_rolling_period, json[QString("rollingPeriod")]);
    m_rolling_period_isSet = !json[QString("rollingPeriod")].isNull() && m_rolling_period_isValid;

    m_service_level_indicator_isValid = ::OpenAPI::fromJsonValue(m_service_level_indicator, json[QString("serviceLevelIndicator")]);
    m_service_level_indicator_isSet = !json[QString("serviceLevelIndicator")].isNull() && m_service_level_indicator_isValid;

    m_user_labels_isValid = ::OpenAPI::fromJsonValue(m_user_labels, json[QString("userLabels")]);
    m_user_labels_isSet = !json[QString("userLabels")].isNull() && m_user_labels_isValid;
}

QString OAIServiceLevelObjective::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceLevelObjective::asJsonObject() const {
    QJsonObject obj;
    if (m_calendar_period_isSet) {
        obj.insert(QString("calendarPeriod"), ::OpenAPI::toJsonValue(m_calendar_period));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_goal_isSet) {
        obj.insert(QString("goal"), ::OpenAPI::toJsonValue(m_goal));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_rolling_period_isSet) {
        obj.insert(QString("rollingPeriod"), ::OpenAPI::toJsonValue(m_rolling_period));
    }
    if (m_service_level_indicator.isSet()) {
        obj.insert(QString("serviceLevelIndicator"), ::OpenAPI::toJsonValue(m_service_level_indicator));
    }
    if (m_user_labels.size() > 0) {
        obj.insert(QString("userLabels"), ::OpenAPI::toJsonValue(m_user_labels));
    }
    return obj;
}

QString OAIServiceLevelObjective::getCalendarPeriod() const {
    return m_calendar_period;
}
void OAIServiceLevelObjective::setCalendarPeriod(const QString &calendar_period) {
    m_calendar_period = calendar_period;
    m_calendar_period_isSet = true;
}

bool OAIServiceLevelObjective::is_calendar_period_Set() const{
    return m_calendar_period_isSet;
}

bool OAIServiceLevelObjective::is_calendar_period_Valid() const{
    return m_calendar_period_isValid;
}

QString OAIServiceLevelObjective::getDisplayName() const {
    return m_display_name;
}
void OAIServiceLevelObjective::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIServiceLevelObjective::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIServiceLevelObjective::is_display_name_Valid() const{
    return m_display_name_isValid;
}

double OAIServiceLevelObjective::getGoal() const {
    return m_goal;
}
void OAIServiceLevelObjective::setGoal(const double &goal) {
    m_goal = goal;
    m_goal_isSet = true;
}

bool OAIServiceLevelObjective::is_goal_Set() const{
    return m_goal_isSet;
}

bool OAIServiceLevelObjective::is_goal_Valid() const{
    return m_goal_isValid;
}

QString OAIServiceLevelObjective::getName() const {
    return m_name;
}
void OAIServiceLevelObjective::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIServiceLevelObjective::is_name_Set() const{
    return m_name_isSet;
}

bool OAIServiceLevelObjective::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIServiceLevelObjective::getRollingPeriod() const {
    return m_rolling_period;
}
void OAIServiceLevelObjective::setRollingPeriod(const QString &rolling_period) {
    m_rolling_period = rolling_period;
    m_rolling_period_isSet = true;
}

bool OAIServiceLevelObjective::is_rolling_period_Set() const{
    return m_rolling_period_isSet;
}

bool OAIServiceLevelObjective::is_rolling_period_Valid() const{
    return m_rolling_period_isValid;
}

OAIServiceLevelIndicator OAIServiceLevelObjective::getServiceLevelIndicator() const {
    return m_service_level_indicator;
}
void OAIServiceLevelObjective::setServiceLevelIndicator(const OAIServiceLevelIndicator &service_level_indicator) {
    m_service_level_indicator = service_level_indicator;
    m_service_level_indicator_isSet = true;
}

bool OAIServiceLevelObjective::is_service_level_indicator_Set() const{
    return m_service_level_indicator_isSet;
}

bool OAIServiceLevelObjective::is_service_level_indicator_Valid() const{
    return m_service_level_indicator_isValid;
}

QMap<QString, QString> OAIServiceLevelObjective::getUserLabels() const {
    return m_user_labels;
}
void OAIServiceLevelObjective::setUserLabels(const QMap<QString, QString> &user_labels) {
    m_user_labels = user_labels;
    m_user_labels_isSet = true;
}

bool OAIServiceLevelObjective::is_user_labels_Set() const{
    return m_user_labels_isSet;
}

bool OAIServiceLevelObjective::is_user_labels_Valid() const{
    return m_user_labels_isValid;
}

bool OAIServiceLevelObjective::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_calendar_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rolling_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_level_indicator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceLevelObjective::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
