/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMetricThreshold.h
 *
 * A condition type that compares a collection of time series against a threshold.
 */

#ifndef OAIMetricThreshold_H
#define OAIMetricThreshold_H

#include <QJsonObject>

#include "OAIAggregation.h"
#include "OAIForecastOptions.h"
#include "OAITrigger.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAggregation;
class OAIForecastOptions;
class OAITrigger;

class OAIMetricThreshold : public OAIObject {
public:
    OAIMetricThreshold();
    OAIMetricThreshold(QString json);
    ~OAIMetricThreshold() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIAggregation> getAggregations() const;
    void setAggregations(const QList<OAIAggregation> &aggregations);
    bool is_aggregations_Set() const;
    bool is_aggregations_Valid() const;

    QString getComparison() const;
    void setComparison(const QString &comparison);
    bool is_comparison_Set() const;
    bool is_comparison_Valid() const;

    QList<OAIAggregation> getDenominatorAggregations() const;
    void setDenominatorAggregations(const QList<OAIAggregation> &denominator_aggregations);
    bool is_denominator_aggregations_Set() const;
    bool is_denominator_aggregations_Valid() const;

    QString getDenominatorFilter() const;
    void setDenominatorFilter(const QString &denominator_filter);
    bool is_denominator_filter_Set() const;
    bool is_denominator_filter_Valid() const;

    QString getDuration() const;
    void setDuration(const QString &duration);
    bool is_duration_Set() const;
    bool is_duration_Valid() const;

    QString getEvaluationMissingData() const;
    void setEvaluationMissingData(const QString &evaluation_missing_data);
    bool is_evaluation_missing_data_Set() const;
    bool is_evaluation_missing_data_Valid() const;

    QString getFilter() const;
    void setFilter(const QString &filter);
    bool is_filter_Set() const;
    bool is_filter_Valid() const;

    OAIForecastOptions getForecastOptions() const;
    void setForecastOptions(const OAIForecastOptions &forecast_options);
    bool is_forecast_options_Set() const;
    bool is_forecast_options_Valid() const;

    double getThresholdValue() const;
    void setThresholdValue(const double &threshold_value);
    bool is_threshold_value_Set() const;
    bool is_threshold_value_Valid() const;

    OAITrigger getTrigger() const;
    void setTrigger(const OAITrigger &trigger);
    bool is_trigger_Set() const;
    bool is_trigger_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIAggregation> m_aggregations;
    bool m_aggregations_isSet;
    bool m_aggregations_isValid;

    QString m_comparison;
    bool m_comparison_isSet;
    bool m_comparison_isValid;

    QList<OAIAggregation> m_denominator_aggregations;
    bool m_denominator_aggregations_isSet;
    bool m_denominator_aggregations_isValid;

    QString m_denominator_filter;
    bool m_denominator_filter_isSet;
    bool m_denominator_filter_isValid;

    QString m_duration;
    bool m_duration_isSet;
    bool m_duration_isValid;

    QString m_evaluation_missing_data;
    bool m_evaluation_missing_data_isSet;
    bool m_evaluation_missing_data_isValid;

    QString m_filter;
    bool m_filter_isSet;
    bool m_filter_isValid;

    OAIForecastOptions m_forecast_options;
    bool m_forecast_options_isSet;
    bool m_forecast_options_isValid;

    double m_threshold_value;
    bool m_threshold_value_isSet;
    bool m_threshold_value_isValid;

    OAITrigger m_trigger;
    bool m_trigger_isSet;
    bool m_trigger_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMetricThreshold)

#endif // OAIMetricThreshold_H
