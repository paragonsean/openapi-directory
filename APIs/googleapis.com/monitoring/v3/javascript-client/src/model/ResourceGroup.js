/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ResourceGroup model module.
 * @module model/ResourceGroup
 * @version v3
 */
class ResourceGroup {
    /**
     * Constructs a new <code>ResourceGroup</code>.
     * The resource submessage for group checks. It can be used instead of a monitored resource, when multiple resources are being monitored.
     * @alias module:model/ResourceGroup
     */
    constructor() { 
        
        ResourceGroup.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ResourceGroup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResourceGroup} obj Optional instance to populate.
     * @return {module:model/ResourceGroup} The populated <code>ResourceGroup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResourceGroup();

            if (data.hasOwnProperty('groupId')) {
                obj['groupId'] = ApiClient.convertToType(data['groupId'], 'String');
            }
            if (data.hasOwnProperty('resourceType')) {
                obj['resourceType'] = ApiClient.convertToType(data['resourceType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResourceGroup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResourceGroup</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['groupId'] && !(typeof data['groupId'] === 'string' || data['groupId'] instanceof String)) {
            throw new Error("Expected the field `groupId` to be a primitive type in the JSON string but got " + data['groupId']);
        }
        // ensure the json data is a string
        if (data['resourceType'] && !(typeof data['resourceType'] === 'string' || data['resourceType'] instanceof String)) {
            throw new Error("Expected the field `resourceType` to be a primitive type in the JSON string but got " + data['resourceType']);
        }

        return true;
    }


}



/**
 * The group of resources being monitored. Should be only the [GROUP_ID], and not the full-path projects/[PROJECT_ID_OR_NUMBER]/groups/[GROUP_ID].
 * @member {String} groupId
 */
ResourceGroup.prototype['groupId'] = undefined;

/**
 * The resource type of the group members.
 * @member {module:model/ResourceGroup.ResourceTypeEnum} resourceType
 */
ResourceGroup.prototype['resourceType'] = undefined;





/**
 * Allowed values for the <code>resourceType</code> property.
 * @enum {String}
 * @readonly
 */
ResourceGroup['ResourceTypeEnum'] = {

    /**
     * value: "RESOURCE_TYPE_UNSPECIFIED"
     * @const
     */
    "RESOURCE_TYPE_UNSPECIFIED": "RESOURCE_TYPE_UNSPECIFIED",

    /**
     * value: "INSTANCE"
     * @const
     */
    "INSTANCE": "INSTANCE",

    /**
     * value: "AWS_ELB_LOAD_BALANCER"
     * @const
     */
    "AWS_ELB_LOAD_BALANCER": "AWS_ELB_LOAD_BALANCER"
};



export default ResourceGroup;

