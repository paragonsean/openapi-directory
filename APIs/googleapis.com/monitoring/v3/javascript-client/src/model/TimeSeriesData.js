/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LabelValue from './LabelValue';
import PointData from './PointData';

/**
 * The TimeSeriesData model module.
 * @module model/TimeSeriesData
 * @version v3
 */
class TimeSeriesData {
    /**
     * Constructs a new <code>TimeSeriesData</code>.
     * Represents the values of a time series associated with a TimeSeriesDescriptor.
     * @alias module:model/TimeSeriesData
     */
    constructor() { 
        
        TimeSeriesData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TimeSeriesData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TimeSeriesData} obj Optional instance to populate.
     * @return {module:model/TimeSeriesData} The populated <code>TimeSeriesData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TimeSeriesData();

            if (data.hasOwnProperty('labelValues')) {
                obj['labelValues'] = ApiClient.convertToType(data['labelValues'], [LabelValue]);
            }
            if (data.hasOwnProperty('pointData')) {
                obj['pointData'] = ApiClient.convertToType(data['pointData'], [PointData]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TimeSeriesData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TimeSeriesData</code>.
     */
    static validateJSON(data) {
        if (data['labelValues']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['labelValues'])) {
                throw new Error("Expected the field `labelValues` to be an array in the JSON data but got " + data['labelValues']);
            }
            // validate the optional field `labelValues` (array)
            for (const item of data['labelValues']) {
                LabelValue.validateJSON(item);
            };
        }
        if (data['pointData']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pointData'])) {
                throw new Error("Expected the field `pointData` to be an array in the JSON data but got " + data['pointData']);
            }
            // validate the optional field `pointData` (array)
            for (const item of data['pointData']) {
                PointData.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The values of the labels in the time series identifier, given in the same order as the label_descriptors field of the TimeSeriesDescriptor associated with this object. Each value must have a value of the type given in the corresponding entry of label_descriptors.
 * @member {Array.<module:model/LabelValue>} labelValues
 */
TimeSeriesData.prototype['labelValues'] = undefined;

/**
 * The points in the time series.
 * @member {Array.<module:model/PointData>} pointData
 */
TimeSeriesData.prototype['pointData'] = undefined;






export default TimeSeriesData;

