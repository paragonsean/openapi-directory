/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LatencyCriteria from './LatencyCriteria';

/**
 * The BasicSli model module.
 * @module model/BasicSli
 * @version v3
 */
class BasicSli {
    /**
     * Constructs a new <code>BasicSli</code>.
     * An SLI measuring performance on a well-known service type. Performance will be computed on the basis of pre-defined metrics. The type of the service_resource determines the metrics to use and the service_resource.labels and metric_labels are used to construct a monitoring filter to filter that metric down to just the data relevant to this service.
     * @alias module:model/BasicSli
     */
    constructor() { 
        
        BasicSli.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BasicSli</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BasicSli} obj Optional instance to populate.
     * @return {module:model/BasicSli} The populated <code>BasicSli</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BasicSli();

            if (data.hasOwnProperty('availability')) {
                obj['availability'] = ApiClient.convertToType(data['availability'], Object);
            }
            if (data.hasOwnProperty('latency')) {
                obj['latency'] = LatencyCriteria.constructFromObject(data['latency']);
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], ['String']);
            }
            if (data.hasOwnProperty('method')) {
                obj['method'] = ApiClient.convertToType(data['method'], ['String']);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BasicSli</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BasicSli</code>.
     */
    static validateJSON(data) {
        // validate the optional field `latency`
        if (data['latency']) { // data not null
          LatencyCriteria.validateJSON(data['latency']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['location'])) {
            throw new Error("Expected the field `location` to be an array in the JSON data but got " + data['location']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['method'])) {
            throw new Error("Expected the field `method` to be an array in the JSON data but got " + data['method']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['version'])) {
            throw new Error("Expected the field `version` to be an array in the JSON data but got " + data['version']);
        }

        return true;
    }


}



/**
 * Future parameters for the availability SLI.
 * @member {Object} availability
 */
BasicSli.prototype['availability'] = undefined;

/**
 * @member {module:model/LatencyCriteria} latency
 */
BasicSli.prototype['latency'] = undefined;

/**
 * OPTIONAL: The set of locations to which this SLI is relevant. Telemetry from other locations will not be used to calculate performance for this SLI. If omitted, this SLI applies to all locations in which the Service has activity. For service types that don't support breaking down by location, setting this field will result in an error.
 * @member {Array.<String>} location
 */
BasicSli.prototype['location'] = undefined;

/**
 * OPTIONAL: The set of RPCs to which this SLI is relevant. Telemetry from other methods will not be used to calculate performance for this SLI. If omitted, this SLI applies to all the Service's methods. For service types that don't support breaking down by method, setting this field will result in an error.
 * @member {Array.<String>} method
 */
BasicSli.prototype['method'] = undefined;

/**
 * OPTIONAL: The set of API versions to which this SLI is relevant. Telemetry from other API versions will not be used to calculate performance for this SLI. If omitted, this SLI applies to all API versions. For service types that don't support breaking down by version, setting this field will result in an error.
 * @member {Array.<String>} version
 */
BasicSli.prototype['version'] = undefined;






export default BasicSli;

