/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MonitoredResourceMetadata model module.
 * @module model/MonitoredResourceMetadata
 * @version v3
 */
class MonitoredResourceMetadata {
    /**
     * Constructs a new <code>MonitoredResourceMetadata</code>.
     * Auxiliary metadata for a MonitoredResource object. MonitoredResource objects contain the minimum set of information to uniquely identify a monitored resource instance. There is some other useful auxiliary metadata. Monitoring and Logging use an ingestion pipeline to extract metadata for cloud resources of all types, and store the metadata in this message.
     * @alias module:model/MonitoredResourceMetadata
     */
    constructor() { 
        
        MonitoredResourceMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MonitoredResourceMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MonitoredResourceMetadata} obj Optional instance to populate.
     * @return {module:model/MonitoredResourceMetadata} The populated <code>MonitoredResourceMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MonitoredResourceMetadata();

            if (data.hasOwnProperty('systemLabels')) {
                obj['systemLabels'] = ApiClient.convertToType(data['systemLabels'], {'String': Object});
            }
            if (data.hasOwnProperty('userLabels')) {
                obj['userLabels'] = ApiClient.convertToType(data['userLabels'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MonitoredResourceMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MonitoredResourceMetadata</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Output only. Values for predefined system metadata labels. System labels are a kind of metadata extracted by Google, including \"machine_image\", \"vpc\", \"subnet_id\", \"security_group\", \"name\", etc. System label values can be only strings, Boolean values, or a list of strings. For example: { \"name\": \"my-test-instance\", \"security_group\": [\"a\", \"b\", \"c\"], \"spot_instance\": false } 
 * @member {Object.<String, Object>} systemLabels
 */
MonitoredResourceMetadata.prototype['systemLabels'] = undefined;

/**
 * Output only. A map of user-defined metadata labels.
 * @member {Object.<String, String>} userLabels
 */
MonitoredResourceMetadata.prototype['userLabels'] = undefined;






export default MonitoredResourceMetadata;

