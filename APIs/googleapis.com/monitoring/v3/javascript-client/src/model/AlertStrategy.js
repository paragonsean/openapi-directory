/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NotificationChannelStrategy from './NotificationChannelStrategy';
import NotificationRateLimit from './NotificationRateLimit';

/**
 * The AlertStrategy model module.
 * @module model/AlertStrategy
 * @version v3
 */
class AlertStrategy {
    /**
     * Constructs a new <code>AlertStrategy</code>.
     * Control over how the notification channels in notification_channels are notified when this alert fires.
     * @alias module:model/AlertStrategy
     */
    constructor() { 
        
        AlertStrategy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AlertStrategy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AlertStrategy} obj Optional instance to populate.
     * @return {module:model/AlertStrategy} The populated <code>AlertStrategy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AlertStrategy();

            if (data.hasOwnProperty('autoClose')) {
                obj['autoClose'] = ApiClient.convertToType(data['autoClose'], 'String');
            }
            if (data.hasOwnProperty('notificationChannelStrategy')) {
                obj['notificationChannelStrategy'] = ApiClient.convertToType(data['notificationChannelStrategy'], [NotificationChannelStrategy]);
            }
            if (data.hasOwnProperty('notificationRateLimit')) {
                obj['notificationRateLimit'] = NotificationRateLimit.constructFromObject(data['notificationRateLimit']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AlertStrategy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AlertStrategy</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['autoClose'] && !(typeof data['autoClose'] === 'string' || data['autoClose'] instanceof String)) {
            throw new Error("Expected the field `autoClose` to be a primitive type in the JSON string but got " + data['autoClose']);
        }
        if (data['notificationChannelStrategy']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['notificationChannelStrategy'])) {
                throw new Error("Expected the field `notificationChannelStrategy` to be an array in the JSON data but got " + data['notificationChannelStrategy']);
            }
            // validate the optional field `notificationChannelStrategy` (array)
            for (const item of data['notificationChannelStrategy']) {
                NotificationChannelStrategy.validateJSON(item);
            };
        }
        // validate the optional field `notificationRateLimit`
        if (data['notificationRateLimit']) { // data not null
          NotificationRateLimit.validateJSON(data['notificationRateLimit']);
        }

        return true;
    }


}



/**
 * If an alert policy that was active has no data for this long, any open incidents will close
 * @member {String} autoClose
 */
AlertStrategy.prototype['autoClose'] = undefined;

/**
 * Control how notifications will be sent out, on a per-channel basis.
 * @member {Array.<module:model/NotificationChannelStrategy>} notificationChannelStrategy
 */
AlertStrategy.prototype['notificationChannelStrategy'] = undefined;

/**
 * @member {module:model/NotificationRateLimit} notificationRateLimit
 */
AlertStrategy.prototype['notificationRateLimit'] = undefined;






export default AlertStrategy;

