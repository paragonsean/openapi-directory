/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NotificationChannelStrategy model module.
 * @module model/NotificationChannelStrategy
 * @version v3
 */
class NotificationChannelStrategy {
    /**
     * Constructs a new <code>NotificationChannelStrategy</code>.
     * Control over how the notification channels in notification_channels are notified when this alert fires, on a per-channel basis.
     * @alias module:model/NotificationChannelStrategy
     */
    constructor() { 
        
        NotificationChannelStrategy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NotificationChannelStrategy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NotificationChannelStrategy} obj Optional instance to populate.
     * @return {module:model/NotificationChannelStrategy} The populated <code>NotificationChannelStrategy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NotificationChannelStrategy();

            if (data.hasOwnProperty('notificationChannelNames')) {
                obj['notificationChannelNames'] = ApiClient.convertToType(data['notificationChannelNames'], ['String']);
            }
            if (data.hasOwnProperty('renotifyInterval')) {
                obj['renotifyInterval'] = ApiClient.convertToType(data['renotifyInterval'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NotificationChannelStrategy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NotificationChannelStrategy</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['notificationChannelNames'])) {
            throw new Error("Expected the field `notificationChannelNames` to be an array in the JSON data but got " + data['notificationChannelNames']);
        }
        // ensure the json data is a string
        if (data['renotifyInterval'] && !(typeof data['renotifyInterval'] === 'string' || data['renotifyInterval'] instanceof String)) {
            throw new Error("Expected the field `renotifyInterval` to be a primitive type in the JSON string but got " + data['renotifyInterval']);
        }

        return true;
    }


}



/**
 * The full REST resource name for the notification channels that these settings apply to. Each of these correspond to the name field in one of the NotificationChannel objects referenced in the notification_channels field of this AlertPolicy. The format is: projects/[PROJECT_ID_OR_NUMBER]/notificationChannels/[CHANNEL_ID] 
 * @member {Array.<String>} notificationChannelNames
 */
NotificationChannelStrategy.prototype['notificationChannelNames'] = undefined;

/**
 * The frequency at which to send reminder notifications for open incidents.
 * @member {String} renotifyInterval
 */
NotificationChannelStrategy.prototype['renotifyInterval'] = undefined;






export default NotificationChannelStrategy;

