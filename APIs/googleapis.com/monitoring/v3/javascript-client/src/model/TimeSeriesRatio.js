/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TimeSeriesRatio model module.
 * @module model/TimeSeriesRatio
 * @version v3
 */
class TimeSeriesRatio {
    /**
     * Constructs a new <code>TimeSeriesRatio</code>.
     * A TimeSeriesRatio specifies two TimeSeries to use for computing the good_service / total_service ratio. The specified TimeSeries must have ValueType &#x3D; DOUBLE or ValueType &#x3D; INT64 and must have MetricKind &#x3D; DELTA or MetricKind &#x3D; CUMULATIVE. The TimeSeriesRatio must specify exactly two of good, bad, and total, and the relationship good_service + bad_service &#x3D; total_service will be assumed.
     * @alias module:model/TimeSeriesRatio
     */
    constructor() { 
        
        TimeSeriesRatio.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TimeSeriesRatio</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TimeSeriesRatio} obj Optional instance to populate.
     * @return {module:model/TimeSeriesRatio} The populated <code>TimeSeriesRatio</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TimeSeriesRatio();

            if (data.hasOwnProperty('badServiceFilter')) {
                obj['badServiceFilter'] = ApiClient.convertToType(data['badServiceFilter'], 'String');
            }
            if (data.hasOwnProperty('goodServiceFilter')) {
                obj['goodServiceFilter'] = ApiClient.convertToType(data['goodServiceFilter'], 'String');
            }
            if (data.hasOwnProperty('totalServiceFilter')) {
                obj['totalServiceFilter'] = ApiClient.convertToType(data['totalServiceFilter'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TimeSeriesRatio</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TimeSeriesRatio</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['badServiceFilter'] && !(typeof data['badServiceFilter'] === 'string' || data['badServiceFilter'] instanceof String)) {
            throw new Error("Expected the field `badServiceFilter` to be a primitive type in the JSON string but got " + data['badServiceFilter']);
        }
        // ensure the json data is a string
        if (data['goodServiceFilter'] && !(typeof data['goodServiceFilter'] === 'string' || data['goodServiceFilter'] instanceof String)) {
            throw new Error("Expected the field `goodServiceFilter` to be a primitive type in the JSON string but got " + data['goodServiceFilter']);
        }
        // ensure the json data is a string
        if (data['totalServiceFilter'] && !(typeof data['totalServiceFilter'] === 'string' || data['totalServiceFilter'] instanceof String)) {
            throw new Error("Expected the field `totalServiceFilter` to be a primitive type in the JSON string but got " + data['totalServiceFilter']);
        }

        return true;
    }


}



/**
 * A monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) specifying a TimeSeries quantifying bad service, either demanded service that was not provided or demanded service that was of inadequate quality. Must have ValueType = DOUBLE or ValueType = INT64 and must have MetricKind = DELTA or MetricKind = CUMULATIVE.
 * @member {String} badServiceFilter
 */
TimeSeriesRatio.prototype['badServiceFilter'] = undefined;

/**
 * A monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) specifying a TimeSeries quantifying good service provided. Must have ValueType = DOUBLE or ValueType = INT64 and must have MetricKind = DELTA or MetricKind = CUMULATIVE.
 * @member {String} goodServiceFilter
 */
TimeSeriesRatio.prototype['goodServiceFilter'] = undefined;

/**
 * A monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) specifying a TimeSeries quantifying total demanded service. Must have ValueType = DOUBLE or ValueType = INT64 and must have MetricKind = DELTA or MetricKind = CUMULATIVE.
 * @member {String} totalServiceFilter
 */
TimeSeriesRatio.prototype['totalServiceFilter'] = undefined;






export default TimeSeriesRatio;

