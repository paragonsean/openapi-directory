/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CollectdValue from './CollectdValue';
import TypedValue from './TypedValue';

/**
 * The CollectdPayload model module.
 * @module model/CollectdPayload
 * @version v3
 */
class CollectdPayload {
    /**
     * Constructs a new <code>CollectdPayload</code>.
     * A collection of data points sent from a collectd-based plugin. See the collectd documentation for more information.
     * @alias module:model/CollectdPayload
     */
    constructor() { 
        
        CollectdPayload.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CollectdPayload</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CollectdPayload} obj Optional instance to populate.
     * @return {module:model/CollectdPayload} The populated <code>CollectdPayload</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CollectdPayload();

            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': TypedValue});
            }
            if (data.hasOwnProperty('plugin')) {
                obj['plugin'] = ApiClient.convertToType(data['plugin'], 'String');
            }
            if (data.hasOwnProperty('pluginInstance')) {
                obj['pluginInstance'] = ApiClient.convertToType(data['pluginInstance'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('typeInstance')) {
                obj['typeInstance'] = ApiClient.convertToType(data['typeInstance'], 'String');
            }
            if (data.hasOwnProperty('values')) {
                obj['values'] = ApiClient.convertToType(data['values'], [CollectdValue]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CollectdPayload</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CollectdPayload</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['endTime'] && !(typeof data['endTime'] === 'string' || data['endTime'] instanceof String)) {
            throw new Error("Expected the field `endTime` to be a primitive type in the JSON string but got " + data['endTime']);
        }
        // ensure the json data is a string
        if (data['plugin'] && !(typeof data['plugin'] === 'string' || data['plugin'] instanceof String)) {
            throw new Error("Expected the field `plugin` to be a primitive type in the JSON string but got " + data['plugin']);
        }
        // ensure the json data is a string
        if (data['pluginInstance'] && !(typeof data['pluginInstance'] === 'string' || data['pluginInstance'] instanceof String)) {
            throw new Error("Expected the field `pluginInstance` to be a primitive type in the JSON string but got " + data['pluginInstance']);
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['typeInstance'] && !(typeof data['typeInstance'] === 'string' || data['typeInstance'] instanceof String)) {
            throw new Error("Expected the field `typeInstance` to be a primitive type in the JSON string but got " + data['typeInstance']);
        }
        if (data['values']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['values'])) {
                throw new Error("Expected the field `values` to be an array in the JSON data but got " + data['values']);
            }
            // validate the optional field `values` (array)
            for (const item of data['values']) {
                CollectdValue.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The end time of the interval.
 * @member {String} endTime
 */
CollectdPayload.prototype['endTime'] = undefined;

/**
 * The measurement metadata. Example: \"process_id\" -> 12345
 * @member {Object.<String, module:model/TypedValue>} metadata
 */
CollectdPayload.prototype['metadata'] = undefined;

/**
 * The name of the plugin. Example: \"disk\".
 * @member {String} plugin
 */
CollectdPayload.prototype['plugin'] = undefined;

/**
 * The instance name of the plugin Example: \"hdcl\".
 * @member {String} pluginInstance
 */
CollectdPayload.prototype['pluginInstance'] = undefined;

/**
 * The start time of the interval.
 * @member {String} startTime
 */
CollectdPayload.prototype['startTime'] = undefined;

/**
 * The measurement type. Example: \"memory\".
 * @member {String} type
 */
CollectdPayload.prototype['type'] = undefined;

/**
 * The measurement type instance. Example: \"used\".
 * @member {String} typeInstance
 */
CollectdPayload.prototype['typeInstance'] = undefined;

/**
 * The measured values during this time interval. Each value must have a different data_source_name.
 * @member {Array.<module:model/CollectdValue>} values
 */
CollectdPayload.prototype['values'] = undefined;






export default CollectdPayload;

