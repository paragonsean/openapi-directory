/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LabelDescriptor from './LabelDescriptor';
import ValueDescriptor from './ValueDescriptor';

/**
 * The TimeSeriesDescriptor model module.
 * @module model/TimeSeriesDescriptor
 * @version v3
 */
class TimeSeriesDescriptor {
    /**
     * Constructs a new <code>TimeSeriesDescriptor</code>.
     * A descriptor for the labels and points in a time series.
     * @alias module:model/TimeSeriesDescriptor
     */
    constructor() { 
        
        TimeSeriesDescriptor.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TimeSeriesDescriptor</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TimeSeriesDescriptor} obj Optional instance to populate.
     * @return {module:model/TimeSeriesDescriptor} The populated <code>TimeSeriesDescriptor</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TimeSeriesDescriptor();

            if (data.hasOwnProperty('labelDescriptors')) {
                obj['labelDescriptors'] = ApiClient.convertToType(data['labelDescriptors'], [LabelDescriptor]);
            }
            if (data.hasOwnProperty('pointDescriptors')) {
                obj['pointDescriptors'] = ApiClient.convertToType(data['pointDescriptors'], [ValueDescriptor]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TimeSeriesDescriptor</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TimeSeriesDescriptor</code>.
     */
    static validateJSON(data) {
        if (data['labelDescriptors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['labelDescriptors'])) {
                throw new Error("Expected the field `labelDescriptors` to be an array in the JSON data but got " + data['labelDescriptors']);
            }
            // validate the optional field `labelDescriptors` (array)
            for (const item of data['labelDescriptors']) {
                LabelDescriptor.validateJSON(item);
            };
        }
        if (data['pointDescriptors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pointDescriptors'])) {
                throw new Error("Expected the field `pointDescriptors` to be an array in the JSON data but got " + data['pointDescriptors']);
            }
            // validate the optional field `pointDescriptors` (array)
            for (const item of data['pointDescriptors']) {
                ValueDescriptor.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Descriptors for the labels.
 * @member {Array.<module:model/LabelDescriptor>} labelDescriptors
 */
TimeSeriesDescriptor.prototype['labelDescriptors'] = undefined;

/**
 * Descriptors for the point data value columns.
 * @member {Array.<module:model/ValueDescriptor>} pointDescriptors
 */
TimeSeriesDescriptor.prototype['pointDescriptors'] = undefined;






export default TimeSeriesDescriptor;

