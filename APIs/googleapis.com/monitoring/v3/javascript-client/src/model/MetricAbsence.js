/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Aggregation from './Aggregation';
import Trigger from './Trigger';

/**
 * The MetricAbsence model module.
 * @module model/MetricAbsence
 * @version v3
 */
class MetricAbsence {
    /**
     * Constructs a new <code>MetricAbsence</code>.
     * A condition type that checks that monitored resources are reporting data. The configuration defines a metric and a set of monitored resources. The predicate is considered in violation when a time series for the specified metric of a monitored resource does not include any data in the specified duration.
     * @alias module:model/MetricAbsence
     */
    constructor() { 
        
        MetricAbsence.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MetricAbsence</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MetricAbsence} obj Optional instance to populate.
     * @return {module:model/MetricAbsence} The populated <code>MetricAbsence</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MetricAbsence();

            if (data.hasOwnProperty('aggregations')) {
                obj['aggregations'] = ApiClient.convertToType(data['aggregations'], [Aggregation]);
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'String');
            }
            if (data.hasOwnProperty('filter')) {
                obj['filter'] = ApiClient.convertToType(data['filter'], 'String');
            }
            if (data.hasOwnProperty('trigger')) {
                obj['trigger'] = Trigger.constructFromObject(data['trigger']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MetricAbsence</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MetricAbsence</code>.
     */
    static validateJSON(data) {
        if (data['aggregations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['aggregations'])) {
                throw new Error("Expected the field `aggregations` to be an array in the JSON data but got " + data['aggregations']);
            }
            // validate the optional field `aggregations` (array)
            for (const item of data['aggregations']) {
                Aggregation.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['duration'] && !(typeof data['duration'] === 'string' || data['duration'] instanceof String)) {
            throw new Error("Expected the field `duration` to be a primitive type in the JSON string but got " + data['duration']);
        }
        // ensure the json data is a string
        if (data['filter'] && !(typeof data['filter'] === 'string' || data['filter'] instanceof String)) {
            throw new Error("Expected the field `filter` to be a primitive type in the JSON string but got " + data['filter']);
        }
        // validate the optional field `trigger`
        if (data['trigger']) { // data not null
          Trigger.validateJSON(data['trigger']);
        }

        return true;
    }


}



/**
 * Specifies the alignment of data points in individual time series as well as how to combine the retrieved time series together (such as when aggregating multiple streams on each resource to a single stream for each resource or when aggregating streams across all members of a group of resources). Multiple aggregations are applied in the order specified.This field is similar to the one in the ListTimeSeries request (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list). It is advisable to use the ListTimeSeries method when debugging this field.
 * @member {Array.<module:model/Aggregation>} aggregations
 */
MetricAbsence.prototype['aggregations'] = undefined;

/**
 * The amount of time that a time series must fail to report new data to be considered failing. The minimum value of this field is 120 seconds. Larger values that are a multiple of a minute--for example, 240 or 300 seconds--are supported. If an invalid value is given, an error will be returned. The Duration.nanos field is ignored.
 * @member {String} duration
 */
MetricAbsence.prototype['duration'] = undefined;

/**
 * Required. A filter (https://cloud.google.com/monitoring/api/v3/filters) that identifies which time series should be compared with the threshold.The filter is similar to the one that is specified in the ListTimeSeries request (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list) (that call is useful to verify the time series that will be retrieved / processed). The filter must specify the metric type and the resource type. Optionally, it can specify resource labels and metric labels. This field must not exceed 2048 Unicode characters in length.
 * @member {String} filter
 */
MetricAbsence.prototype['filter'] = undefined;

/**
 * @member {module:model/Trigger} trigger
 */
MetricAbsence.prototype['trigger'] = undefined;






export default MetricAbsence;

