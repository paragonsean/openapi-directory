/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Metric from './Metric';
import MonitoredResource from './MonitoredResource';
import MonitoredResourceMetadata from './MonitoredResourceMetadata';
import Point from './Point';

/**
 * The TimeSeries model module.
 * @module model/TimeSeries
 * @version v3
 */
class TimeSeries {
    /**
     * Constructs a new <code>TimeSeries</code>.
     * A collection of data points that describes the time-varying values of a metric. A time series is identified by a combination of a fully-specified monitored resource and a fully-specified metric. This type is used for both listing and creating time series.
     * @alias module:model/TimeSeries
     */
    constructor() { 
        
        TimeSeries.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TimeSeries</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TimeSeries} obj Optional instance to populate.
     * @return {module:model/TimeSeries} The populated <code>TimeSeries</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TimeSeries();

            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = MonitoredResourceMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('metric')) {
                obj['metric'] = Metric.constructFromObject(data['metric']);
            }
            if (data.hasOwnProperty('metricKind')) {
                obj['metricKind'] = ApiClient.convertToType(data['metricKind'], 'String');
            }
            if (data.hasOwnProperty('points')) {
                obj['points'] = ApiClient.convertToType(data['points'], [Point]);
            }
            if (data.hasOwnProperty('resource')) {
                obj['resource'] = MonitoredResource.constructFromObject(data['resource']);
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
            }
            if (data.hasOwnProperty('valueType')) {
                obj['valueType'] = ApiClient.convertToType(data['valueType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TimeSeries</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TimeSeries</code>.
     */
    static validateJSON(data) {
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          MonitoredResourceMetadata.validateJSON(data['metadata']);
        }
        // validate the optional field `metric`
        if (data['metric']) { // data not null
          Metric.validateJSON(data['metric']);
        }
        // ensure the json data is a string
        if (data['metricKind'] && !(typeof data['metricKind'] === 'string' || data['metricKind'] instanceof String)) {
            throw new Error("Expected the field `metricKind` to be a primitive type in the JSON string but got " + data['metricKind']);
        }
        if (data['points']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['points'])) {
                throw new Error("Expected the field `points` to be an array in the JSON data but got " + data['points']);
            }
            // validate the optional field `points` (array)
            for (const item of data['points']) {
                Point.validateJSON(item);
            };
        }
        // validate the optional field `resource`
        if (data['resource']) { // data not null
          MonitoredResource.validateJSON(data['resource']);
        }
        // ensure the json data is a string
        if (data['unit'] && !(typeof data['unit'] === 'string' || data['unit'] instanceof String)) {
            throw new Error("Expected the field `unit` to be a primitive type in the JSON string but got " + data['unit']);
        }
        // ensure the json data is a string
        if (data['valueType'] && !(typeof data['valueType'] === 'string' || data['valueType'] instanceof String)) {
            throw new Error("Expected the field `valueType` to be a primitive type in the JSON string but got " + data['valueType']);
        }

        return true;
    }


}



/**
 * @member {module:model/MonitoredResourceMetadata} metadata
 */
TimeSeries.prototype['metadata'] = undefined;

/**
 * @member {module:model/Metric} metric
 */
TimeSeries.prototype['metric'] = undefined;

/**
 * The metric kind of the time series. When listing time series, this metric kind might be different from the metric kind of the associated metric if this time series is an alignment or reduction of other time series.When creating a time series, this field is optional. If present, it must be the same as the metric kind of the associated metric. If the associated metric's descriptor must be auto-created, then this field specifies the metric kind of the new descriptor and must be either GAUGE (the default) or CUMULATIVE.
 * @member {module:model/TimeSeries.MetricKindEnum} metricKind
 */
TimeSeries.prototype['metricKind'] = undefined;

/**
 * The data points of this time series. When listing time series, points are returned in reverse time order.When creating a time series, this field must contain exactly one point and the point's type must be the same as the value type of the associated metric. If the associated metric's descriptor must be auto-created, then the value type of the descriptor is determined by the point's type, which must be BOOL, INT64, DOUBLE, or DISTRIBUTION.
 * @member {Array.<module:model/Point>} points
 */
TimeSeries.prototype['points'] = undefined;

/**
 * @member {module:model/MonitoredResource} resource
 */
TimeSeries.prototype['resource'] = undefined;

/**
 * The units in which the metric value is reported. It is only applicable if the value_type is INT64, DOUBLE, or DISTRIBUTION. The unit defines the representation of the stored metric values.
 * @member {String} unit
 */
TimeSeries.prototype['unit'] = undefined;

/**
 * The value type of the time series. When listing time series, this value type might be different from the value type of the associated metric if this time series is an alignment or reduction of other time series.When creating a time series, this field is optional. If present, it must be the same as the type of the data in the points field.
 * @member {module:model/TimeSeries.ValueTypeEnum} valueType
 */
TimeSeries.prototype['valueType'] = undefined;





/**
 * Allowed values for the <code>metricKind</code> property.
 * @enum {String}
 * @readonly
 */
TimeSeries['MetricKindEnum'] = {

    /**
     * value: "METRIC_KIND_UNSPECIFIED"
     * @const
     */
    "METRIC_KIND_UNSPECIFIED": "METRIC_KIND_UNSPECIFIED",

    /**
     * value: "GAUGE"
     * @const
     */
    "GAUGE": "GAUGE",

    /**
     * value: "DELTA"
     * @const
     */
    "DELTA": "DELTA",

    /**
     * value: "CUMULATIVE"
     * @const
     */
    "CUMULATIVE": "CUMULATIVE"
};


/**
 * Allowed values for the <code>valueType</code> property.
 * @enum {String}
 * @readonly
 */
TimeSeries['ValueTypeEnum'] = {

    /**
     * value: "VALUE_TYPE_UNSPECIFIED"
     * @const
     */
    "VALUE_TYPE_UNSPECIFIED": "VALUE_TYPE_UNSPECIFIED",

    /**
     * value: "BOOL"
     * @const
     */
    "BOOL": "BOOL",

    /**
     * value: "INT64"
     * @const
     */
    "INT64": "INT64",

    /**
     * value: "DOUBLE"
     * @const
     */
    "DOUBLE": "DOUBLE",

    /**
     * value: "STRING"
     * @const
     */
    "STRING": "STRING",

    /**
     * value: "DISTRIBUTION"
     * @const
     */
    "DISTRIBUTION": "DISTRIBUTION",

    /**
     * value: "MONEY"
     * @const
     */
    "MONEY": "MONEY"
};



export default TimeSeries;

