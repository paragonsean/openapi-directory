/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AppEngine from './AppEngine';
import BasicService from './BasicService';
import CloudEndpoints from './CloudEndpoints';
import CloudRun from './CloudRun';
import ClusterIstio from './ClusterIstio';
import GkeNamespace from './GkeNamespace';
import GkeService from './GkeService';
import GkeWorkload from './GkeWorkload';
import IstioCanonicalService from './IstioCanonicalService';
import MeshIstio from './MeshIstio';
import Telemetry from './Telemetry';

/**
 * The Service model module.
 * @module model/Service
 * @version v3
 */
class Service {
    /**
     * Constructs a new <code>Service</code>.
     * A Service is a discrete, autonomous, and network-accessible unit, designed to solve an individual concern (Wikipedia (https://en.wikipedia.org/wiki/Service-orientation)). In Cloud Monitoring, a Service acts as the root resource under which operational aspects of the service are accessible.
     * @alias module:model/Service
     */
    constructor() { 
        
        Service.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Service</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Service} obj Optional instance to populate.
     * @return {module:model/Service} The populated <code>Service</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Service();

            if (data.hasOwnProperty('appEngine')) {
                obj['appEngine'] = AppEngine.constructFromObject(data['appEngine']);
            }
            if (data.hasOwnProperty('basicService')) {
                obj['basicService'] = BasicService.constructFromObject(data['basicService']);
            }
            if (data.hasOwnProperty('cloudEndpoints')) {
                obj['cloudEndpoints'] = CloudEndpoints.constructFromObject(data['cloudEndpoints']);
            }
            if (data.hasOwnProperty('cloudRun')) {
                obj['cloudRun'] = CloudRun.constructFromObject(data['cloudRun']);
            }
            if (data.hasOwnProperty('clusterIstio')) {
                obj['clusterIstio'] = ClusterIstio.constructFromObject(data['clusterIstio']);
            }
            if (data.hasOwnProperty('custom')) {
                obj['custom'] = ApiClient.convertToType(data['custom'], Object);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('gkeNamespace')) {
                obj['gkeNamespace'] = GkeNamespace.constructFromObject(data['gkeNamespace']);
            }
            if (data.hasOwnProperty('gkeService')) {
                obj['gkeService'] = GkeService.constructFromObject(data['gkeService']);
            }
            if (data.hasOwnProperty('gkeWorkload')) {
                obj['gkeWorkload'] = GkeWorkload.constructFromObject(data['gkeWorkload']);
            }
            if (data.hasOwnProperty('istioCanonicalService')) {
                obj['istioCanonicalService'] = IstioCanonicalService.constructFromObject(data['istioCanonicalService']);
            }
            if (data.hasOwnProperty('meshIstio')) {
                obj['meshIstio'] = MeshIstio.constructFromObject(data['meshIstio']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('telemetry')) {
                obj['telemetry'] = Telemetry.constructFromObject(data['telemetry']);
            }
            if (data.hasOwnProperty('userLabels')) {
                obj['userLabels'] = ApiClient.convertToType(data['userLabels'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Service</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Service</code>.
     */
    static validateJSON(data) {
        // validate the optional field `appEngine`
        if (data['appEngine']) { // data not null
          AppEngine.validateJSON(data['appEngine']);
        }
        // validate the optional field `basicService`
        if (data['basicService']) { // data not null
          BasicService.validateJSON(data['basicService']);
        }
        // validate the optional field `cloudEndpoints`
        if (data['cloudEndpoints']) { // data not null
          CloudEndpoints.validateJSON(data['cloudEndpoints']);
        }
        // validate the optional field `cloudRun`
        if (data['cloudRun']) { // data not null
          CloudRun.validateJSON(data['cloudRun']);
        }
        // validate the optional field `clusterIstio`
        if (data['clusterIstio']) { // data not null
          ClusterIstio.validateJSON(data['clusterIstio']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // validate the optional field `gkeNamespace`
        if (data['gkeNamespace']) { // data not null
          GkeNamespace.validateJSON(data['gkeNamespace']);
        }
        // validate the optional field `gkeService`
        if (data['gkeService']) { // data not null
          GkeService.validateJSON(data['gkeService']);
        }
        // validate the optional field `gkeWorkload`
        if (data['gkeWorkload']) { // data not null
          GkeWorkload.validateJSON(data['gkeWorkload']);
        }
        // validate the optional field `istioCanonicalService`
        if (data['istioCanonicalService']) { // data not null
          IstioCanonicalService.validateJSON(data['istioCanonicalService']);
        }
        // validate the optional field `meshIstio`
        if (data['meshIstio']) { // data not null
          MeshIstio.validateJSON(data['meshIstio']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `telemetry`
        if (data['telemetry']) { // data not null
          Telemetry.validateJSON(data['telemetry']);
        }

        return true;
    }


}



/**
 * @member {module:model/AppEngine} appEngine
 */
Service.prototype['appEngine'] = undefined;

/**
 * @member {module:model/BasicService} basicService
 */
Service.prototype['basicService'] = undefined;

/**
 * @member {module:model/CloudEndpoints} cloudEndpoints
 */
Service.prototype['cloudEndpoints'] = undefined;

/**
 * @member {module:model/CloudRun} cloudRun
 */
Service.prototype['cloudRun'] = undefined;

/**
 * @member {module:model/ClusterIstio} clusterIstio
 */
Service.prototype['clusterIstio'] = undefined;

/**
 * Use a custom service to designate a service that you want to monitor when none of the other service types (like App Engine, Cloud Run, or a GKE type) matches your intended service.
 * @member {Object} custom
 */
Service.prototype['custom'] = undefined;

/**
 * Name used for UI elements listing this Service.
 * @member {String} displayName
 */
Service.prototype['displayName'] = undefined;

/**
 * @member {module:model/GkeNamespace} gkeNamespace
 */
Service.prototype['gkeNamespace'] = undefined;

/**
 * @member {module:model/GkeService} gkeService
 */
Service.prototype['gkeService'] = undefined;

/**
 * @member {module:model/GkeWorkload} gkeWorkload
 */
Service.prototype['gkeWorkload'] = undefined;

/**
 * @member {module:model/IstioCanonicalService} istioCanonicalService
 */
Service.prototype['istioCanonicalService'] = undefined;

/**
 * @member {module:model/MeshIstio} meshIstio
 */
Service.prototype['meshIstio'] = undefined;

/**
 * Resource name for this Service. The format is: projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID] 
 * @member {String} name
 */
Service.prototype['name'] = undefined;

/**
 * @member {module:model/Telemetry} telemetry
 */
Service.prototype['telemetry'] = undefined;

/**
 * Labels which have been used to annotate the service. Label keys must start with a letter. Label keys and values may contain lowercase letters, numbers, underscores, and dashes. Label keys and values have a maximum length of 63 characters, and must be less than 128 bytes in size. Up to 64 label entries may be stored. For labels which do not have a semantic value, the empty string may be supplied for the label value.
 * @member {Object.<String, String>} userLabels
 */
Service.prototype['userLabels'] = undefined;






export default Service;

