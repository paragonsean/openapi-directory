/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LogMatch from './LogMatch';
import MetricAbsence from './MetricAbsence';
import MetricThreshold from './MetricThreshold';
import MonitoringQueryLanguageCondition from './MonitoringQueryLanguageCondition';
import PrometheusQueryLanguageCondition from './PrometheusQueryLanguageCondition';

/**
 * The Condition model module.
 * @module model/Condition
 * @version v3
 */
class Condition {
    /**
     * Constructs a new <code>Condition</code>.
     * A condition is a true/false test that determines when an alerting policy should open an incident. If a condition evaluates to true, it signifies that something is wrong.
     * @alias module:model/Condition
     */
    constructor() { 
        
        Condition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Condition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Condition} obj Optional instance to populate.
     * @return {module:model/Condition} The populated <code>Condition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Condition();

            if (data.hasOwnProperty('conditionAbsent')) {
                obj['conditionAbsent'] = MetricAbsence.constructFromObject(data['conditionAbsent']);
            }
            if (data.hasOwnProperty('conditionMatchedLog')) {
                obj['conditionMatchedLog'] = LogMatch.constructFromObject(data['conditionMatchedLog']);
            }
            if (data.hasOwnProperty('conditionMonitoringQueryLanguage')) {
                obj['conditionMonitoringQueryLanguage'] = MonitoringQueryLanguageCondition.constructFromObject(data['conditionMonitoringQueryLanguage']);
            }
            if (data.hasOwnProperty('conditionPrometheusQueryLanguage')) {
                obj['conditionPrometheusQueryLanguage'] = PrometheusQueryLanguageCondition.constructFromObject(data['conditionPrometheusQueryLanguage']);
            }
            if (data.hasOwnProperty('conditionThreshold')) {
                obj['conditionThreshold'] = MetricThreshold.constructFromObject(data['conditionThreshold']);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Condition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Condition</code>.
     */
    static validateJSON(data) {
        // validate the optional field `conditionAbsent`
        if (data['conditionAbsent']) { // data not null
          MetricAbsence.validateJSON(data['conditionAbsent']);
        }
        // validate the optional field `conditionMatchedLog`
        if (data['conditionMatchedLog']) { // data not null
          LogMatch.validateJSON(data['conditionMatchedLog']);
        }
        // validate the optional field `conditionMonitoringQueryLanguage`
        if (data['conditionMonitoringQueryLanguage']) { // data not null
          MonitoringQueryLanguageCondition.validateJSON(data['conditionMonitoringQueryLanguage']);
        }
        // validate the optional field `conditionPrometheusQueryLanguage`
        if (data['conditionPrometheusQueryLanguage']) { // data not null
          PrometheusQueryLanguageCondition.validateJSON(data['conditionPrometheusQueryLanguage']);
        }
        // validate the optional field `conditionThreshold`
        if (data['conditionThreshold']) { // data not null
          MetricThreshold.validateJSON(data['conditionThreshold']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * @member {module:model/MetricAbsence} conditionAbsent
 */
Condition.prototype['conditionAbsent'] = undefined;

/**
 * @member {module:model/LogMatch} conditionMatchedLog
 */
Condition.prototype['conditionMatchedLog'] = undefined;

/**
 * @member {module:model/MonitoringQueryLanguageCondition} conditionMonitoringQueryLanguage
 */
Condition.prototype['conditionMonitoringQueryLanguage'] = undefined;

/**
 * @member {module:model/PrometheusQueryLanguageCondition} conditionPrometheusQueryLanguage
 */
Condition.prototype['conditionPrometheusQueryLanguage'] = undefined;

/**
 * @member {module:model/MetricThreshold} conditionThreshold
 */
Condition.prototype['conditionThreshold'] = undefined;

/**
 * A short name or phrase used to identify the condition in dashboards, notifications, and incidents. To avoid confusion, don't use the same display name for multiple conditions in the same policy.
 * @member {String} displayName
 */
Condition.prototype['displayName'] = undefined;

/**
 * Required if the condition exists. The unique resource name for this condition. Its format is: projects/[PROJECT_ID_OR_NUMBER]/alertPolicies/[POLICY_ID]/conditions/[CONDITION_ID] [CONDITION_ID] is assigned by Cloud Monitoring when the condition is created as part of a new or updated alerting policy.When calling the alertPolicies.create method, do not include the name field in the conditions of the requested alerting policy. Cloud Monitoring creates the condition identifiers and includes them in the new policy.When calling the alertPolicies.update method to update a policy, including a condition name causes the existing condition to be updated. Conditions without names are added to the updated policy. Existing conditions are deleted if they are not updated.Best practice is to preserve [CONDITION_ID] if you make only small changes, such as those to condition thresholds, durations, or trigger values. Otherwise, treat the change as a new condition and let the existing condition be deleted.
 * @member {String} name
 */
Condition.prototype['name'] = undefined;






export default Condition;

