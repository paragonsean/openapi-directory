/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TypedValue from './TypedValue';

/**
 * The CollectdValue model module.
 * @module model/CollectdValue
 * @version v3
 */
class CollectdValue {
    /**
     * Constructs a new <code>CollectdValue</code>.
     * A single data point from a collectd-based plugin.
     * @alias module:model/CollectdValue
     */
    constructor() { 
        
        CollectdValue.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CollectdValue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CollectdValue} obj Optional instance to populate.
     * @return {module:model/CollectdValue} The populated <code>CollectdValue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CollectdValue();

            if (data.hasOwnProperty('dataSourceName')) {
                obj['dataSourceName'] = ApiClient.convertToType(data['dataSourceName'], 'String');
            }
            if (data.hasOwnProperty('dataSourceType')) {
                obj['dataSourceType'] = ApiClient.convertToType(data['dataSourceType'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = TypedValue.constructFromObject(data['value']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CollectdValue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CollectdValue</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dataSourceName'] && !(typeof data['dataSourceName'] === 'string' || data['dataSourceName'] instanceof String)) {
            throw new Error("Expected the field `dataSourceName` to be a primitive type in the JSON string but got " + data['dataSourceName']);
        }
        // ensure the json data is a string
        if (data['dataSourceType'] && !(typeof data['dataSourceType'] === 'string' || data['dataSourceType'] instanceof String)) {
            throw new Error("Expected the field `dataSourceType` to be a primitive type in the JSON string but got " + data['dataSourceType']);
        }
        // validate the optional field `value`
        if (data['value']) { // data not null
          TypedValue.validateJSON(data['value']);
        }

        return true;
    }


}



/**
 * The data source for the collectd value. For example, there are two data sources for network measurements: \"rx\" and \"tx\".
 * @member {String} dataSourceName
 */
CollectdValue.prototype['dataSourceName'] = undefined;

/**
 * The type of measurement.
 * @member {module:model/CollectdValue.DataSourceTypeEnum} dataSourceType
 */
CollectdValue.prototype['dataSourceType'] = undefined;

/**
 * @member {module:model/TypedValue} value
 */
CollectdValue.prototype['value'] = undefined;





/**
 * Allowed values for the <code>dataSourceType</code> property.
 * @enum {String}
 * @readonly
 */
CollectdValue['DataSourceTypeEnum'] = {

    /**
     * value: "UNSPECIFIED_DATA_SOURCE_TYPE"
     * @const
     */
    "UNSPECIFIED_DATA_SOURCE_TYPE": "UNSPECIFIED_DATA_SOURCE_TYPE",

    /**
     * value: "GAUGE"
     * @const
     */
    "GAUGE": "GAUGE",

    /**
     * value: "COUNTER"
     * @const
     */
    "COUNTER": "COUNTER",

    /**
     * value: "DERIVE"
     * @const
     */
    "DERIVE": "DERIVE",

    /**
     * value: "ABSOLUTE"
     * @const
     */
    "ABSOLUTE": "ABSOLUTE"
};



export default CollectdValue;

