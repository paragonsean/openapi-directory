/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ForecastOptions model module.
 * @module model/ForecastOptions
 * @version v3
 */
class ForecastOptions {
    /**
     * Constructs a new <code>ForecastOptions</code>.
     * Options used when forecasting the time series and testing the predicted value against the threshold.
     * @alias module:model/ForecastOptions
     */
    constructor() { 
        
        ForecastOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ForecastOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ForecastOptions} obj Optional instance to populate.
     * @return {module:model/ForecastOptions} The populated <code>ForecastOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ForecastOptions();

            if (data.hasOwnProperty('forecastHorizon')) {
                obj['forecastHorizon'] = ApiClient.convertToType(data['forecastHorizon'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ForecastOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ForecastOptions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['forecastHorizon'] && !(typeof data['forecastHorizon'] === 'string' || data['forecastHorizon'] instanceof String)) {
            throw new Error("Expected the field `forecastHorizon` to be a primitive type in the JSON string but got " + data['forecastHorizon']);
        }

        return true;
    }


}



/**
 * Required. The length of time into the future to forecast whether a time series will violate the threshold. If the predicted value is found to violate the threshold, and the violation is observed in all forecasts made for the configured duration, then the time series is considered to be failing. The forecast horizon can range from 1 hour to 60 hours.
 * @member {String} forecastHorizon
 */
ForecastOptions.prototype['forecastHorizon'] = undefined;






export default ForecastOptions;

