/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContentMatcher from './ContentMatcher';
import HttpCheck from './HttpCheck';
import InternalChecker from './InternalChecker';
import MonitoredResource from './MonitoredResource';
import ResourceGroup from './ResourceGroup';
import SyntheticMonitorTarget from './SyntheticMonitorTarget';
import TcpCheck from './TcpCheck';

/**
 * The UptimeCheckConfig model module.
 * @module model/UptimeCheckConfig
 * @version v3
 */
class UptimeCheckConfig {
    /**
     * Constructs a new <code>UptimeCheckConfig</code>.
     * This message configures which resources and services to monitor for availability.
     * @alias module:model/UptimeCheckConfig
     */
    constructor() { 
        
        UptimeCheckConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UptimeCheckConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UptimeCheckConfig} obj Optional instance to populate.
     * @return {module:model/UptimeCheckConfig} The populated <code>UptimeCheckConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UptimeCheckConfig();

            if (data.hasOwnProperty('checkerType')) {
                obj['checkerType'] = ApiClient.convertToType(data['checkerType'], 'String');
            }
            if (data.hasOwnProperty('contentMatchers')) {
                obj['contentMatchers'] = ApiClient.convertToType(data['contentMatchers'], [ContentMatcher]);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('httpCheck')) {
                obj['httpCheck'] = HttpCheck.constructFromObject(data['httpCheck']);
            }
            if (data.hasOwnProperty('internalCheckers')) {
                obj['internalCheckers'] = ApiClient.convertToType(data['internalCheckers'], [InternalChecker]);
            }
            if (data.hasOwnProperty('isInternal')) {
                obj['isInternal'] = ApiClient.convertToType(data['isInternal'], 'Boolean');
            }
            if (data.hasOwnProperty('monitoredResource')) {
                obj['monitoredResource'] = MonitoredResource.constructFromObject(data['monitoredResource']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('period')) {
                obj['period'] = ApiClient.convertToType(data['period'], 'String');
            }
            if (data.hasOwnProperty('resourceGroup')) {
                obj['resourceGroup'] = ResourceGroup.constructFromObject(data['resourceGroup']);
            }
            if (data.hasOwnProperty('selectedRegions')) {
                obj['selectedRegions'] = ApiClient.convertToType(data['selectedRegions'], ['String']);
            }
            if (data.hasOwnProperty('syntheticMonitor')) {
                obj['syntheticMonitor'] = SyntheticMonitorTarget.constructFromObject(data['syntheticMonitor']);
            }
            if (data.hasOwnProperty('tcpCheck')) {
                obj['tcpCheck'] = TcpCheck.constructFromObject(data['tcpCheck']);
            }
            if (data.hasOwnProperty('timeout')) {
                obj['timeout'] = ApiClient.convertToType(data['timeout'], 'String');
            }
            if (data.hasOwnProperty('userLabels')) {
                obj['userLabels'] = ApiClient.convertToType(data['userLabels'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UptimeCheckConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UptimeCheckConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['checkerType'] && !(typeof data['checkerType'] === 'string' || data['checkerType'] instanceof String)) {
            throw new Error("Expected the field `checkerType` to be a primitive type in the JSON string but got " + data['checkerType']);
        }
        if (data['contentMatchers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['contentMatchers'])) {
                throw new Error("Expected the field `contentMatchers` to be an array in the JSON data but got " + data['contentMatchers']);
            }
            // validate the optional field `contentMatchers` (array)
            for (const item of data['contentMatchers']) {
                ContentMatcher.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // validate the optional field `httpCheck`
        if (data['httpCheck']) { // data not null
          HttpCheck.validateJSON(data['httpCheck']);
        }
        if (data['internalCheckers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['internalCheckers'])) {
                throw new Error("Expected the field `internalCheckers` to be an array in the JSON data but got " + data['internalCheckers']);
            }
            // validate the optional field `internalCheckers` (array)
            for (const item of data['internalCheckers']) {
                InternalChecker.validateJSON(item);
            };
        }
        // validate the optional field `monitoredResource`
        if (data['monitoredResource']) { // data not null
          MonitoredResource.validateJSON(data['monitoredResource']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['period'] && !(typeof data['period'] === 'string' || data['period'] instanceof String)) {
            throw new Error("Expected the field `period` to be a primitive type in the JSON string but got " + data['period']);
        }
        // validate the optional field `resourceGroup`
        if (data['resourceGroup']) { // data not null
          ResourceGroup.validateJSON(data['resourceGroup']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['selectedRegions'])) {
            throw new Error("Expected the field `selectedRegions` to be an array in the JSON data but got " + data['selectedRegions']);
        }
        // validate the optional field `syntheticMonitor`
        if (data['syntheticMonitor']) { // data not null
          SyntheticMonitorTarget.validateJSON(data['syntheticMonitor']);
        }
        // validate the optional field `tcpCheck`
        if (data['tcpCheck']) { // data not null
          TcpCheck.validateJSON(data['tcpCheck']);
        }
        // ensure the json data is a string
        if (data['timeout'] && !(typeof data['timeout'] === 'string' || data['timeout'] instanceof String)) {
            throw new Error("Expected the field `timeout` to be a primitive type in the JSON string but got " + data['timeout']);
        }

        return true;
    }


}



/**
 * The type of checkers to use to execute the Uptime check.
 * @member {module:model/UptimeCheckConfig.CheckerTypeEnum} checkerType
 */
UptimeCheckConfig.prototype['checkerType'] = undefined;

/**
 * The content that is expected to appear in the data returned by the target server against which the check is run. Currently, only the first entry in the content_matchers list is supported, and additional entries will be ignored. This field is optional and should only be specified if a content match is required as part of the/ Uptime check.
 * @member {Array.<module:model/ContentMatcher>} contentMatchers
 */
UptimeCheckConfig.prototype['contentMatchers'] = undefined;

/**
 * A human-friendly name for the Uptime check configuration. The display name should be unique within a Cloud Monitoring Workspace in order to make it easier to identify; however, uniqueness is not enforced. Required.
 * @member {String} displayName
 */
UptimeCheckConfig.prototype['displayName'] = undefined;

/**
 * @member {module:model/HttpCheck} httpCheck
 */
UptimeCheckConfig.prototype['httpCheck'] = undefined;

/**
 * The internal checkers that this check will egress from. If is_internal is true and this list is empty, the check will egress from all the InternalCheckers configured for the project that owns this UptimeCheckConfig.
 * @member {Array.<module:model/InternalChecker>} internalCheckers
 */
UptimeCheckConfig.prototype['internalCheckers'] = undefined;

/**
 * If this is true, then checks are made only from the 'internal_checkers'. If it is false, then checks are made only from the 'selected_regions'. It is an error to provide 'selected_regions' when is_internal is true, or to provide 'internal_checkers' when is_internal is false.
 * @member {Boolean} isInternal
 */
UptimeCheckConfig.prototype['isInternal'] = undefined;

/**
 * @member {module:model/MonitoredResource} monitoredResource
 */
UptimeCheckConfig.prototype['monitoredResource'] = undefined;

/**
 * Identifier. A unique resource name for this Uptime check configuration. The format is: projects/[PROJECT_ID_OR_NUMBER]/uptimeCheckConfigs/[UPTIME_CHECK_ID] [PROJECT_ID_OR_NUMBER] is the Workspace host project associated with the Uptime check.This field should be omitted when creating the Uptime check configuration; on create, the resource name is assigned by the server and included in the response.
 * @member {String} name
 */
UptimeCheckConfig.prototype['name'] = undefined;

/**
 * How often, in seconds, the Uptime check is performed. Currently, the only supported values are 60s (1 minute), 300s (5 minutes), 600s (10 minutes), and 900s (15 minutes). Optional, defaults to 60s.
 * @member {String} period
 */
UptimeCheckConfig.prototype['period'] = undefined;

/**
 * @member {module:model/ResourceGroup} resourceGroup
 */
UptimeCheckConfig.prototype['resourceGroup'] = undefined;

/**
 * The list of regions from which the check will be run. Some regions contain one location, and others contain more than one. If this field is specified, enough regions must be provided to include a minimum of 3 locations. Not specifying this field will result in Uptime checks running from all available regions.
 * @member {Array.<module:model/UptimeCheckConfig.SelectedRegionsEnum>} selectedRegions
 */
UptimeCheckConfig.prototype['selectedRegions'] = undefined;

/**
 * @member {module:model/SyntheticMonitorTarget} syntheticMonitor
 */
UptimeCheckConfig.prototype['syntheticMonitor'] = undefined;

/**
 * @member {module:model/TcpCheck} tcpCheck
 */
UptimeCheckConfig.prototype['tcpCheck'] = undefined;

/**
 * The maximum amount of time to wait for the request to complete (must be between 1 and 60 seconds). Required.
 * @member {String} timeout
 */
UptimeCheckConfig.prototype['timeout'] = undefined;

/**
 * User-supplied key/value data to be used for organizing and identifying the UptimeCheckConfig objects.The field can contain up to 64 entries. Each key and value is limited to 63 Unicode characters or 128 bytes, whichever is smaller. Labels and values can contain only lowercase letters, numerals, underscores, and dashes. Keys must begin with a letter.
 * @member {Object.<String, String>} userLabels
 */
UptimeCheckConfig.prototype['userLabels'] = undefined;





/**
 * Allowed values for the <code>checkerType</code> property.
 * @enum {String}
 * @readonly
 */
UptimeCheckConfig['CheckerTypeEnum'] = {

    /**
     * value: "CHECKER_TYPE_UNSPECIFIED"
     * @const
     */
    "CHECKER_TYPE_UNSPECIFIED": "CHECKER_TYPE_UNSPECIFIED",

    /**
     * value: "STATIC_IP_CHECKERS"
     * @const
     */
    "STATIC_IP_CHECKERS": "STATIC_IP_CHECKERS",

    /**
     * value: "VPC_CHECKERS"
     * @const
     */
    "VPC_CHECKERS": "VPC_CHECKERS"
};


/**
 * Allowed values for the <code>selectedRegions</code> property.
 * @enum {String}
 * @readonly
 */
UptimeCheckConfig['SelectedRegionsEnum'] = {

    /**
     * value: "REGION_UNSPECIFIED"
     * @const
     */
    "REGION_UNSPECIFIED": "REGION_UNSPECIFIED",

    /**
     * value: "USA"
     * @const
     */
    "USA": "USA",

    /**
     * value: "EUROPE"
     * @const
     */
    "EUROPE": "EUROPE",

    /**
     * value: "SOUTH_AMERICA"
     * @const
     */
    "SOUTH_AMERICA": "SOUTH_AMERICA",

    /**
     * value: "ASIA_PACIFIC"
     * @const
     */
    "ASIA_PACIFIC": "ASIA_PACIFIC",

    /**
     * value: "USA_OREGON"
     * @const
     */
    "USA_OREGON": "USA_OREGON",

    /**
     * value: "USA_IOWA"
     * @const
     */
    "USA_IOWA": "USA_IOWA",

    /**
     * value: "USA_VIRGINIA"
     * @const
     */
    "USA_VIRGINIA": "USA_VIRGINIA"
};



export default UptimeCheckConfig;

