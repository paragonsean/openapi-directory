/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The JsonPathMatcher model module.
 * @module model/JsonPathMatcher
 * @version v3
 */
class JsonPathMatcher {
    /**
     * Constructs a new <code>JsonPathMatcher</code>.
     * Information needed to perform a JSONPath content match. Used for ContentMatcherOption::MATCHES_JSON_PATH and ContentMatcherOption::NOT_MATCHES_JSON_PATH.
     * @alias module:model/JsonPathMatcher
     */
    constructor() { 
        
        JsonPathMatcher.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JsonPathMatcher</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JsonPathMatcher} obj Optional instance to populate.
     * @return {module:model/JsonPathMatcher} The populated <code>JsonPathMatcher</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JsonPathMatcher();

            if (data.hasOwnProperty('jsonMatcher')) {
                obj['jsonMatcher'] = ApiClient.convertToType(data['jsonMatcher'], 'String');
            }
            if (data.hasOwnProperty('jsonPath')) {
                obj['jsonPath'] = ApiClient.convertToType(data['jsonPath'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JsonPathMatcher</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JsonPathMatcher</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['jsonMatcher'] && !(typeof data['jsonMatcher'] === 'string' || data['jsonMatcher'] instanceof String)) {
            throw new Error("Expected the field `jsonMatcher` to be a primitive type in the JSON string but got " + data['jsonMatcher']);
        }
        // ensure the json data is a string
        if (data['jsonPath'] && !(typeof data['jsonPath'] === 'string' || data['jsonPath'] instanceof String)) {
            throw new Error("Expected the field `jsonPath` to be a primitive type in the JSON string but got " + data['jsonPath']);
        }

        return true;
    }


}



/**
 * The type of JSONPath match that will be applied to the JSON output (ContentMatcher.content)
 * @member {module:model/JsonPathMatcher.JsonMatcherEnum} jsonMatcher
 */
JsonPathMatcher.prototype['jsonMatcher'] = undefined;

/**
 * JSONPath within the response output pointing to the expected ContentMatcher::content to match against.
 * @member {String} jsonPath
 */
JsonPathMatcher.prototype['jsonPath'] = undefined;





/**
 * Allowed values for the <code>jsonMatcher</code> property.
 * @enum {String}
 * @readonly
 */
JsonPathMatcher['JsonMatcherEnum'] = {

    /**
     * value: "JSON_PATH_MATCHER_OPTION_UNSPECIFIED"
     * @const
     */
    "JSON_PATH_MATCHER_OPTION_UNSPECIFIED": "JSON_PATH_MATCHER_OPTION_UNSPECIFIED",

    /**
     * value: "EXACT_MATCH"
     * @const
     */
    "EXACT_MATCH": "EXACT_MATCH",

    /**
     * value: "REGEX_MATCH"
     * @const
     */
    "REGEX_MATCH": "REGEX_MATCH"
};



export default JsonPathMatcher;

