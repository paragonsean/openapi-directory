/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LabelDescriptor from './LabelDescriptor';

/**
 * The NotificationChannelDescriptor model module.
 * @module model/NotificationChannelDescriptor
 * @version v3
 */
class NotificationChannelDescriptor {
    /**
     * Constructs a new <code>NotificationChannelDescriptor</code>.
     * A description of a notification channel. The descriptor includes the properties of the channel and the set of labels or fields that must be specified to configure channels of a given type.
     * @alias module:model/NotificationChannelDescriptor
     */
    constructor() { 
        
        NotificationChannelDescriptor.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NotificationChannelDescriptor</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NotificationChannelDescriptor} obj Optional instance to populate.
     * @return {module:model/NotificationChannelDescriptor} The populated <code>NotificationChannelDescriptor</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NotificationChannelDescriptor();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], [LabelDescriptor]);
            }
            if (data.hasOwnProperty('launchStage')) {
                obj['launchStage'] = ApiClient.convertToType(data['launchStage'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('supportedTiers')) {
                obj['supportedTiers'] = ApiClient.convertToType(data['supportedTiers'], ['String']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NotificationChannelDescriptor</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NotificationChannelDescriptor</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        if (data['labels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['labels'])) {
                throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
            }
            // validate the optional field `labels` (array)
            for (const item of data['labels']) {
                LabelDescriptor.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['launchStage'] && !(typeof data['launchStage'] === 'string' || data['launchStage'] instanceof String)) {
            throw new Error("Expected the field `launchStage` to be a primitive type in the JSON string but got " + data['launchStage']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['supportedTiers'])) {
            throw new Error("Expected the field `supportedTiers` to be an array in the JSON data but got " + data['supportedTiers']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * A human-readable description of the notification channel type. The description may include a description of the properties of the channel and pointers to external documentation.
 * @member {String} description
 */
NotificationChannelDescriptor.prototype['description'] = undefined;

/**
 * A human-readable name for the notification channel type. This form of the name is suitable for a user interface.
 * @member {String} displayName
 */
NotificationChannelDescriptor.prototype['displayName'] = undefined;

/**
 * The set of labels that must be defined to identify a particular channel of the corresponding type. Each label includes a description for how that field should be populated.
 * @member {Array.<module:model/LabelDescriptor>} labels
 */
NotificationChannelDescriptor.prototype['labels'] = undefined;

/**
 * The product launch stage for channels of this type.
 * @member {module:model/NotificationChannelDescriptor.LaunchStageEnum} launchStage
 */
NotificationChannelDescriptor.prototype['launchStage'] = undefined;

/**
 * The full REST resource name for this descriptor. The format is: projects/[PROJECT_ID_OR_NUMBER]/notificationChannelDescriptors/[TYPE] In the above, [TYPE] is the value of the type field.
 * @member {String} name
 */
NotificationChannelDescriptor.prototype['name'] = undefined;

/**
 * The tiers that support this notification channel; the project service tier must be one of the supported_tiers.
 * @member {Array.<module:model/NotificationChannelDescriptor.SupportedTiersEnum>} supportedTiers
 */
NotificationChannelDescriptor.prototype['supportedTiers'] = undefined;

/**
 * The type of notification channel, such as \"email\" and \"sms\". To view the full list of channels, see Channel descriptors (https://cloud.google.com/monitoring/alerts/using-channels-api#ncd). Notification channel types are globally unique.
 * @member {String} type
 */
NotificationChannelDescriptor.prototype['type'] = undefined;





/**
 * Allowed values for the <code>launchStage</code> property.
 * @enum {String}
 * @readonly
 */
NotificationChannelDescriptor['LaunchStageEnum'] = {

    /**
     * value: "LAUNCH_STAGE_UNSPECIFIED"
     * @const
     */
    "LAUNCH_STAGE_UNSPECIFIED": "LAUNCH_STAGE_UNSPECIFIED",

    /**
     * value: "UNIMPLEMENTED"
     * @const
     */
    "UNIMPLEMENTED": "UNIMPLEMENTED",

    /**
     * value: "PRELAUNCH"
     * @const
     */
    "PRELAUNCH": "PRELAUNCH",

    /**
     * value: "EARLY_ACCESS"
     * @const
     */
    "EARLY_ACCESS": "EARLY_ACCESS",

    /**
     * value: "ALPHA"
     * @const
     */
    "ALPHA": "ALPHA",

    /**
     * value: "BETA"
     * @const
     */
    "BETA": "BETA",

    /**
     * value: "GA"
     * @const
     */
    "GA": "GA",

    /**
     * value: "DEPRECATED"
     * @const
     */
    "DEPRECATED": "DEPRECATED"
};


/**
 * Allowed values for the <code>supportedTiers</code> property.
 * @enum {String}
 * @readonly
 */
NotificationChannelDescriptor['SupportedTiersEnum'] = {

    /**
     * value: "SERVICE_TIER_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "SERVICE_TIER_UNSPECIFIED",

    /**
     * value: "SERVICE_TIER_BASIC"
     * @const
     */
    "BASIC": "SERVICE_TIER_BASIC",

    /**
     * value: "SERVICE_TIER_PREMIUM"
     * @const
     */
    "PREMIUM": "SERVICE_TIER_PREMIUM"
};



export default NotificationChannelDescriptor;

