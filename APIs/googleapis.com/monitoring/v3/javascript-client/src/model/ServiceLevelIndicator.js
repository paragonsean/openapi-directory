/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BasicSli from './BasicSli';
import RequestBasedSli from './RequestBasedSli';
import WindowsBasedSli from './WindowsBasedSli';

/**
 * The ServiceLevelIndicator model module.
 * @module model/ServiceLevelIndicator
 * @version v3
 */
class ServiceLevelIndicator {
    /**
     * Constructs a new <code>ServiceLevelIndicator</code>.
     * A Service-Level Indicator (SLI) describes the \&quot;performance\&quot; of a service. For some services, the SLI is well-defined. In such cases, the SLI can be described easily by referencing the well-known SLI and providing the needed parameters. Alternatively, a \&quot;custom\&quot; SLI can be defined with a query to the underlying metric store. An SLI is defined to be good_service / total_service over any queried time interval. The value of performance always falls into the range 0 &lt;&#x3D; performance &lt;&#x3D; 1. A custom SLI describes how to compute this ratio, whether this is by dividing values from a pair of time series, cutting a Distribution into good and bad counts, or counting time windows in which the service complies with a criterion. For separation of concerns, a single Service-Level Indicator measures performance for only one aspect of service quality, such as fraction of successful queries or fast-enough queries.
     * @alias module:model/ServiceLevelIndicator
     */
    constructor() { 
        
        ServiceLevelIndicator.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServiceLevelIndicator</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceLevelIndicator} obj Optional instance to populate.
     * @return {module:model/ServiceLevelIndicator} The populated <code>ServiceLevelIndicator</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceLevelIndicator();

            if (data.hasOwnProperty('basicSli')) {
                obj['basicSli'] = BasicSli.constructFromObject(data['basicSli']);
            }
            if (data.hasOwnProperty('requestBased')) {
                obj['requestBased'] = RequestBasedSli.constructFromObject(data['requestBased']);
            }
            if (data.hasOwnProperty('windowsBased')) {
                obj['windowsBased'] = WindowsBasedSli.constructFromObject(data['windowsBased']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServiceLevelIndicator</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServiceLevelIndicator</code>.
     */
    static validateJSON(data) {
        // validate the optional field `basicSli`
        if (data['basicSli']) { // data not null
          BasicSli.validateJSON(data['basicSli']);
        }
        // validate the optional field `requestBased`
        if (data['requestBased']) { // data not null
          RequestBasedSli.validateJSON(data['requestBased']);
        }
        // validate the optional field `windowsBased`
        if (data['windowsBased']) { // data not null
          WindowsBasedSli.validateJSON(data['windowsBased']);
        }

        return true;
    }


}



/**
 * @member {module:model/BasicSli} basicSli
 */
ServiceLevelIndicator.prototype['basicSli'] = undefined;

/**
 * @member {module:model/RequestBasedSli} requestBased
 */
ServiceLevelIndicator.prototype['requestBased'] = undefined;

/**
 * @member {module:model/WindowsBasedSli} windowsBased
 */
ServiceLevelIndicator.prototype['windowsBased'] = undefined;






export default ServiceLevelIndicator;

