/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Criteria from './Criteria';
import TimeInterval from './TimeInterval';

/**
 * The Snooze model module.
 * @module model/Snooze
 * @version v3
 */
class Snooze {
    /**
     * Constructs a new <code>Snooze</code>.
     * A Snooze will prevent any alerts from being opened, and close any that are already open. The Snooze will work on alerts that match the criteria defined in the Snooze. The Snooze will be active from interval.start_time through interval.end_time.
     * @alias module:model/Snooze
     */
    constructor() { 
        
        Snooze.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Snooze</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Snooze} obj Optional instance to populate.
     * @return {module:model/Snooze} The populated <code>Snooze</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Snooze();

            if (data.hasOwnProperty('criteria')) {
                obj['criteria'] = Criteria.constructFromObject(data['criteria']);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('interval')) {
                obj['interval'] = TimeInterval.constructFromObject(data['interval']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Snooze</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Snooze</code>.
     */
    static validateJSON(data) {
        // validate the optional field `criteria`
        if (data['criteria']) { // data not null
          Criteria.validateJSON(data['criteria']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // validate the optional field `interval`
        if (data['interval']) { // data not null
          TimeInterval.validateJSON(data['interval']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * @member {module:model/Criteria} criteria
 */
Snooze.prototype['criteria'] = undefined;

/**
 * Required. A display name for the Snooze. This can be, at most, 512 unicode characters.
 * @member {String} displayName
 */
Snooze.prototype['displayName'] = undefined;

/**
 * @member {module:model/TimeInterval} interval
 */
Snooze.prototype['interval'] = undefined;

/**
 * Required. The name of the Snooze. The format is: projects/[PROJECT_ID_OR_NUMBER]/snoozes/[SNOOZE_ID] The ID of the Snooze will be generated by the system.
 * @member {String} name
 */
Snooze.prototype['name'] = undefined;






export default Snooze;

