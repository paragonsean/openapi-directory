/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JsonPathMatcher from './JsonPathMatcher';

/**
 * The ContentMatcher model module.
 * @module model/ContentMatcher
 * @version v3
 */
class ContentMatcher {
    /**
     * Constructs a new <code>ContentMatcher</code>.
     * Optional. Used to perform content matching. This allows matching based on substrings and regular expressions, together with their negations. Only the first 4 MB of an HTTP or HTTPS check&#39;s response (and the first 1 MB of a TCP check&#39;s response) are examined for purposes of content matching.
     * @alias module:model/ContentMatcher
     */
    constructor() { 
        
        ContentMatcher.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContentMatcher</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContentMatcher} obj Optional instance to populate.
     * @return {module:model/ContentMatcher} The populated <code>ContentMatcher</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContentMatcher();

            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('jsonPathMatcher')) {
                obj['jsonPathMatcher'] = JsonPathMatcher.constructFromObject(data['jsonPathMatcher']);
            }
            if (data.hasOwnProperty('matcher')) {
                obj['matcher'] = ApiClient.convertToType(data['matcher'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContentMatcher</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContentMatcher</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // validate the optional field `jsonPathMatcher`
        if (data['jsonPathMatcher']) { // data not null
          JsonPathMatcher.validateJSON(data['jsonPathMatcher']);
        }
        // ensure the json data is a string
        if (data['matcher'] && !(typeof data['matcher'] === 'string' || data['matcher'] instanceof String)) {
            throw new Error("Expected the field `matcher` to be a primitive type in the JSON string but got " + data['matcher']);
        }

        return true;
    }


}



/**
 * String, regex or JSON content to match. Maximum 1024 bytes. An empty content string indicates no content matching is to be performed.
 * @member {String} content
 */
ContentMatcher.prototype['content'] = undefined;

/**
 * @member {module:model/JsonPathMatcher} jsonPathMatcher
 */
ContentMatcher.prototype['jsonPathMatcher'] = undefined;

/**
 * The type of content matcher that will be applied to the server output, compared to the content string when the check is run.
 * @member {module:model/ContentMatcher.MatcherEnum} matcher
 */
ContentMatcher.prototype['matcher'] = undefined;





/**
 * Allowed values for the <code>matcher</code> property.
 * @enum {String}
 * @readonly
 */
ContentMatcher['MatcherEnum'] = {

    /**
     * value: "CONTENT_MATCHER_OPTION_UNSPECIFIED"
     * @const
     */
    "CONTENT_MATCHER_OPTION_UNSPECIFIED": "CONTENT_MATCHER_OPTION_UNSPECIFIED",

    /**
     * value: "CONTAINS_STRING"
     * @const
     */
    "CONTAINS_STRING": "CONTAINS_STRING",

    /**
     * value: "NOT_CONTAINS_STRING"
     * @const
     */
    "NOT_CONTAINS_STRING": "NOT_CONTAINS_STRING",

    /**
     * value: "MATCHES_REGEX"
     * @const
     */
    "MATCHES_REGEX": "MATCHES_REGEX",

    /**
     * value: "NOT_MATCHES_REGEX"
     * @const
     */
    "NOT_MATCHES_REGEX": "NOT_MATCHES_REGEX",

    /**
     * value: "MATCHES_JSON_PATH"
     * @const
     */
    "MATCHES_JSON_PATH": "MATCHES_JSON_PATH",

    /**
     * value: "NOT_MATCHES_JSON_PATH"
     * @const
     */
    "NOT_MATCHES_JSON_PATH": "NOT_MATCHES_JSON_PATH"
};



export default ContentMatcher;

