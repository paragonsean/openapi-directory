/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GkeWorkload model module.
 * @module model/GkeWorkload
 * @version v3
 */
class GkeWorkload {
    /**
     * Constructs a new <code>GkeWorkload</code>.
     * A GKE Workload (Deployment, StatefulSet, etc). The field names correspond to the metadata labels on monitored resources that fall under a workload (for example, k8s_container or k8s_pod).
     * @alias module:model/GkeWorkload
     */
    constructor() { 
        
        GkeWorkload.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GkeWorkload</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GkeWorkload} obj Optional instance to populate.
     * @return {module:model/GkeWorkload} The populated <code>GkeWorkload</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GkeWorkload();

            if (data.hasOwnProperty('clusterName')) {
                obj['clusterName'] = ApiClient.convertToType(data['clusterName'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('namespaceName')) {
                obj['namespaceName'] = ApiClient.convertToType(data['namespaceName'], 'String');
            }
            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = ApiClient.convertToType(data['projectId'], 'String');
            }
            if (data.hasOwnProperty('topLevelControllerName')) {
                obj['topLevelControllerName'] = ApiClient.convertToType(data['topLevelControllerName'], 'String');
            }
            if (data.hasOwnProperty('topLevelControllerType')) {
                obj['topLevelControllerType'] = ApiClient.convertToType(data['topLevelControllerType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GkeWorkload</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GkeWorkload</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['clusterName'] && !(typeof data['clusterName'] === 'string' || data['clusterName'] instanceof String)) {
            throw new Error("Expected the field `clusterName` to be a primitive type in the JSON string but got " + data['clusterName']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['namespaceName'] && !(typeof data['namespaceName'] === 'string' || data['namespaceName'] instanceof String)) {
            throw new Error("Expected the field `namespaceName` to be a primitive type in the JSON string but got " + data['namespaceName']);
        }
        // ensure the json data is a string
        if (data['projectId'] && !(typeof data['projectId'] === 'string' || data['projectId'] instanceof String)) {
            throw new Error("Expected the field `projectId` to be a primitive type in the JSON string but got " + data['projectId']);
        }
        // ensure the json data is a string
        if (data['topLevelControllerName'] && !(typeof data['topLevelControllerName'] === 'string' || data['topLevelControllerName'] instanceof String)) {
            throw new Error("Expected the field `topLevelControllerName` to be a primitive type in the JSON string but got " + data['topLevelControllerName']);
        }
        // ensure the json data is a string
        if (data['topLevelControllerType'] && !(typeof data['topLevelControllerType'] === 'string' || data['topLevelControllerType'] instanceof String)) {
            throw new Error("Expected the field `topLevelControllerType` to be a primitive type in the JSON string but got " + data['topLevelControllerType']);
        }

        return true;
    }


}



/**
 * The name of the parent cluster.
 * @member {String} clusterName
 */
GkeWorkload.prototype['clusterName'] = undefined;

/**
 * The location of the parent cluster. This may be a zone or region.
 * @member {String} location
 */
GkeWorkload.prototype['location'] = undefined;

/**
 * The name of the parent namespace.
 * @member {String} namespaceName
 */
GkeWorkload.prototype['namespaceName'] = undefined;

/**
 * Output only. The project this resource lives in. For legacy services migrated from the Custom type, this may be a distinct project from the one parenting the service itself.
 * @member {String} projectId
 */
GkeWorkload.prototype['projectId'] = undefined;

/**
 * The name of this workload.
 * @member {String} topLevelControllerName
 */
GkeWorkload.prototype['topLevelControllerName'] = undefined;

/**
 * The type of this workload (for example, \"Deployment\" or \"DaemonSet\")
 * @member {String} topLevelControllerType
 */
GkeWorkload.prototype['topLevelControllerType'] = undefined;






export default GkeWorkload;

