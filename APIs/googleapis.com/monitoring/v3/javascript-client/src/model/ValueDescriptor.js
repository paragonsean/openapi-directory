/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ValueDescriptor model module.
 * @module model/ValueDescriptor
 * @version v3
 */
class ValueDescriptor {
    /**
     * Constructs a new <code>ValueDescriptor</code>.
     * A descriptor for the value columns in a data point.
     * @alias module:model/ValueDescriptor
     */
    constructor() { 
        
        ValueDescriptor.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ValueDescriptor</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ValueDescriptor} obj Optional instance to populate.
     * @return {module:model/ValueDescriptor} The populated <code>ValueDescriptor</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ValueDescriptor();

            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('metricKind')) {
                obj['metricKind'] = ApiClient.convertToType(data['metricKind'], 'String');
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
            }
            if (data.hasOwnProperty('valueType')) {
                obj['valueType'] = ApiClient.convertToType(data['valueType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ValueDescriptor</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ValueDescriptor</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['metricKind'] && !(typeof data['metricKind'] === 'string' || data['metricKind'] instanceof String)) {
            throw new Error("Expected the field `metricKind` to be a primitive type in the JSON string but got " + data['metricKind']);
        }
        // ensure the json data is a string
        if (data['unit'] && !(typeof data['unit'] === 'string' || data['unit'] instanceof String)) {
            throw new Error("Expected the field `unit` to be a primitive type in the JSON string but got " + data['unit']);
        }
        // ensure the json data is a string
        if (data['valueType'] && !(typeof data['valueType'] === 'string' || data['valueType'] instanceof String)) {
            throw new Error("Expected the field `valueType` to be a primitive type in the JSON string but got " + data['valueType']);
        }

        return true;
    }


}



/**
 * The value key.
 * @member {String} key
 */
ValueDescriptor.prototype['key'] = undefined;

/**
 * The value stream kind.
 * @member {module:model/ValueDescriptor.MetricKindEnum} metricKind
 */
ValueDescriptor.prototype['metricKind'] = undefined;

/**
 * The unit in which time_series point values are reported. unit follows the UCUM format for units as seen in https://unitsofmeasure.org/ucum.html. unit is only valid if value_type is INTEGER, DOUBLE, DISTRIBUTION.
 * @member {String} unit
 */
ValueDescriptor.prototype['unit'] = undefined;

/**
 * The value type.
 * @member {module:model/ValueDescriptor.ValueTypeEnum} valueType
 */
ValueDescriptor.prototype['valueType'] = undefined;





/**
 * Allowed values for the <code>metricKind</code> property.
 * @enum {String}
 * @readonly
 */
ValueDescriptor['MetricKindEnum'] = {

    /**
     * value: "METRIC_KIND_UNSPECIFIED"
     * @const
     */
    "METRIC_KIND_UNSPECIFIED": "METRIC_KIND_UNSPECIFIED",

    /**
     * value: "GAUGE"
     * @const
     */
    "GAUGE": "GAUGE",

    /**
     * value: "DELTA"
     * @const
     */
    "DELTA": "DELTA",

    /**
     * value: "CUMULATIVE"
     * @const
     */
    "CUMULATIVE": "CUMULATIVE"
};


/**
 * Allowed values for the <code>valueType</code> property.
 * @enum {String}
 * @readonly
 */
ValueDescriptor['ValueTypeEnum'] = {

    /**
     * value: "VALUE_TYPE_UNSPECIFIED"
     * @const
     */
    "VALUE_TYPE_UNSPECIFIED": "VALUE_TYPE_UNSPECIFIED",

    /**
     * value: "BOOL"
     * @const
     */
    "BOOL": "BOOL",

    /**
     * value: "INT64"
     * @const
     */
    "INT64": "INT64",

    /**
     * value: "DOUBLE"
     * @const
     */
    "DOUBLE": "DOUBLE",

    /**
     * value: "STRING"
     * @const
     */
    "STRING": "STRING",

    /**
     * value: "DISTRIBUTION"
     * @const
     */
    "DISTRIBUTION": "DISTRIBUTION",

    /**
     * value: "MONEY"
     * @const
     */
    "MONEY": "MONEY"
};



export default ValueDescriptor;

