/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ServiceLevelIndicator from './ServiceLevelIndicator';

/**
 * The ServiceLevelObjective model module.
 * @module model/ServiceLevelObjective
 * @version v3
 */
class ServiceLevelObjective {
    /**
     * Constructs a new <code>ServiceLevelObjective</code>.
     * A Service-Level Objective (SLO) describes a level of desired good service. It consists of a service-level indicator (SLI), a performance goal, and a period over which the objective is to be evaluated against that goal. The SLO can use SLIs defined in a number of different manners. Typical SLOs might include \&quot;99% of requests in each rolling week have latency below 200 milliseconds\&quot; or \&quot;99.5% of requests in each calendar month return successfully.\&quot;
     * @alias module:model/ServiceLevelObjective
     */
    constructor() { 
        
        ServiceLevelObjective.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServiceLevelObjective</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceLevelObjective} obj Optional instance to populate.
     * @return {module:model/ServiceLevelObjective} The populated <code>ServiceLevelObjective</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceLevelObjective();

            if (data.hasOwnProperty('calendarPeriod')) {
                obj['calendarPeriod'] = ApiClient.convertToType(data['calendarPeriod'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('goal')) {
                obj['goal'] = ApiClient.convertToType(data['goal'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('rollingPeriod')) {
                obj['rollingPeriod'] = ApiClient.convertToType(data['rollingPeriod'], 'String');
            }
            if (data.hasOwnProperty('serviceLevelIndicator')) {
                obj['serviceLevelIndicator'] = ServiceLevelIndicator.constructFromObject(data['serviceLevelIndicator']);
            }
            if (data.hasOwnProperty('userLabels')) {
                obj['userLabels'] = ApiClient.convertToType(data['userLabels'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServiceLevelObjective</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServiceLevelObjective</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['calendarPeriod'] && !(typeof data['calendarPeriod'] === 'string' || data['calendarPeriod'] instanceof String)) {
            throw new Error("Expected the field `calendarPeriod` to be a primitive type in the JSON string but got " + data['calendarPeriod']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['rollingPeriod'] && !(typeof data['rollingPeriod'] === 'string' || data['rollingPeriod'] instanceof String)) {
            throw new Error("Expected the field `rollingPeriod` to be a primitive type in the JSON string but got " + data['rollingPeriod']);
        }
        // validate the optional field `serviceLevelIndicator`
        if (data['serviceLevelIndicator']) { // data not null
          ServiceLevelIndicator.validateJSON(data['serviceLevelIndicator']);
        }

        return true;
    }


}



/**
 * A calendar period, semantically \"since the start of the current \". At this time, only DAY, WEEK, FORTNIGHT, and MONTH are supported.
 * @member {module:model/ServiceLevelObjective.CalendarPeriodEnum} calendarPeriod
 */
ServiceLevelObjective.prototype['calendarPeriod'] = undefined;

/**
 * Name used for UI elements listing this SLO.
 * @member {String} displayName
 */
ServiceLevelObjective.prototype['displayName'] = undefined;

/**
 * The fraction of service that must be good in order for this objective to be met. 0 < goal <= 0.999.
 * @member {Number} goal
 */
ServiceLevelObjective.prototype['goal'] = undefined;

/**
 * Resource name for this ServiceLevelObjective. The format is: projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]/serviceLevelObjectives/[SLO_NAME] 
 * @member {String} name
 */
ServiceLevelObjective.prototype['name'] = undefined;

/**
 * A rolling time period, semantically \"in the past \". Must be an integer multiple of 1 day no larger than 30 days.
 * @member {String} rollingPeriod
 */
ServiceLevelObjective.prototype['rollingPeriod'] = undefined;

/**
 * @member {module:model/ServiceLevelIndicator} serviceLevelIndicator
 */
ServiceLevelObjective.prototype['serviceLevelIndicator'] = undefined;

/**
 * Labels which have been used to annotate the service-level objective. Label keys must start with a letter. Label keys and values may contain lowercase letters, numbers, underscores, and dashes. Label keys and values have a maximum length of 63 characters, and must be less than 128 bytes in size. Up to 64 label entries may be stored. For labels which do not have a semantic value, the empty string may be supplied for the label value.
 * @member {Object.<String, String>} userLabels
 */
ServiceLevelObjective.prototype['userLabels'] = undefined;





/**
 * Allowed values for the <code>calendarPeriod</code> property.
 * @enum {String}
 * @readonly
 */
ServiceLevelObjective['CalendarPeriodEnum'] = {

    /**
     * value: "CALENDAR_PERIOD_UNSPECIFIED"
     * @const
     */
    "CALENDAR_PERIOD_UNSPECIFIED": "CALENDAR_PERIOD_UNSPECIFIED",

    /**
     * value: "DAY"
     * @const
     */
    "DAY": "DAY",

    /**
     * value: "WEEK"
     * @const
     */
    "WEEK": "WEEK",

    /**
     * value: "FORTNIGHT"
     * @const
     */
    "FORTNIGHT": "FORTNIGHT",

    /**
     * value: "MONTH"
     * @const
     */
    "MONTH": "MONTH",

    /**
     * value: "QUARTER"
     * @const
     */
    "QUARTER": "QUARTER",

    /**
     * value: "HALF"
     * @const
     */
    "HALF": "HALF",

    /**
     * value: "YEAR"
     * @const
     */
    "YEAR": "YEAR"
};



export default ServiceLevelObjective;

