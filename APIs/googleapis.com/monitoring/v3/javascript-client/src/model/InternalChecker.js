/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InternalChecker model module.
 * @module model/InternalChecker
 * @version v3
 */
class InternalChecker {
    /**
     * Constructs a new <code>InternalChecker</code>.
     * An internal checker allows Uptime checks to run on private/internal GCP resources.
     * @alias module:model/InternalChecker
     */
    constructor() { 
        
        InternalChecker.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InternalChecker</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InternalChecker} obj Optional instance to populate.
     * @return {module:model/InternalChecker} The populated <code>InternalChecker</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InternalChecker();

            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('gcpZone')) {
                obj['gcpZone'] = ApiClient.convertToType(data['gcpZone'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = ApiClient.convertToType(data['network'], 'String');
            }
            if (data.hasOwnProperty('peerProjectId')) {
                obj['peerProjectId'] = ApiClient.convertToType(data['peerProjectId'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InternalChecker</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InternalChecker</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['gcpZone'] && !(typeof data['gcpZone'] === 'string' || data['gcpZone'] instanceof String)) {
            throw new Error("Expected the field `gcpZone` to be a primitive type in the JSON string but got " + data['gcpZone']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['network'] && !(typeof data['network'] === 'string' || data['network'] instanceof String)) {
            throw new Error("Expected the field `network` to be a primitive type in the JSON string but got " + data['network']);
        }
        // ensure the json data is a string
        if (data['peerProjectId'] && !(typeof data['peerProjectId'] === 'string' || data['peerProjectId'] instanceof String)) {
            throw new Error("Expected the field `peerProjectId` to be a primitive type in the JSON string but got " + data['peerProjectId']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * The checker's human-readable name. The display name should be unique within a Cloud Monitoring Metrics Scope in order to make it easier to identify; however, uniqueness is not enforced.
 * @member {String} displayName
 */
InternalChecker.prototype['displayName'] = undefined;

/**
 * The GCP zone the Uptime check should egress from. Only respected for internal Uptime checks, where internal_network is specified.
 * @member {String} gcpZone
 */
InternalChecker.prototype['gcpZone'] = undefined;

/**
 * A unique resource name for this InternalChecker. The format is: projects/[PROJECT_ID_OR_NUMBER]/internalCheckers/[INTERNAL_CHECKER_ID] [PROJECT_ID_OR_NUMBER] is the Cloud Monitoring Metrics Scope project for the Uptime check config associated with the internal checker.
 * @member {String} name
 */
InternalChecker.prototype['name'] = undefined;

/**
 * The GCP VPC network (https://cloud.google.com/vpc/docs/vpc) where the internal resource lives (ex: \"default\").
 * @member {String} network
 */
InternalChecker.prototype['network'] = undefined;

/**
 * The GCP project ID where the internal checker lives. Not necessary the same as the Metrics Scope project.
 * @member {String} peerProjectId
 */
InternalChecker.prototype['peerProjectId'] = undefined;

/**
 * The current operational state of the internal checker.
 * @member {module:model/InternalChecker.StateEnum} state
 */
InternalChecker.prototype['state'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
InternalChecker['StateEnum'] = {

    /**
     * value: "UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "UNSPECIFIED",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING"
};



export default InternalChecker;

