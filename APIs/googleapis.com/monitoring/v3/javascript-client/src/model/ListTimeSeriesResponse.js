/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Status from './Status';
import TimeSeries from './TimeSeries';

/**
 * The ListTimeSeriesResponse model module.
 * @module model/ListTimeSeriesResponse
 * @version v3
 */
class ListTimeSeriesResponse {
    /**
     * Constructs a new <code>ListTimeSeriesResponse</code>.
     * The ListTimeSeries response.
     * @alias module:model/ListTimeSeriesResponse
     */
    constructor() { 
        
        ListTimeSeriesResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ListTimeSeriesResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListTimeSeriesResponse} obj Optional instance to populate.
     * @return {module:model/ListTimeSeriesResponse} The populated <code>ListTimeSeriesResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListTimeSeriesResponse();

            if (data.hasOwnProperty('executionErrors')) {
                obj['executionErrors'] = ApiClient.convertToType(data['executionErrors'], [Status]);
            }
            if (data.hasOwnProperty('nextPageToken')) {
                obj['nextPageToken'] = ApiClient.convertToType(data['nextPageToken'], 'String');
            }
            if (data.hasOwnProperty('timeSeries')) {
                obj['timeSeries'] = ApiClient.convertToType(data['timeSeries'], [TimeSeries]);
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ListTimeSeriesResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ListTimeSeriesResponse</code>.
     */
    static validateJSON(data) {
        if (data['executionErrors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['executionErrors'])) {
                throw new Error("Expected the field `executionErrors` to be an array in the JSON data but got " + data['executionErrors']);
            }
            // validate the optional field `executionErrors` (array)
            for (const item of data['executionErrors']) {
                Status.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['nextPageToken'] && !(typeof data['nextPageToken'] === 'string' || data['nextPageToken'] instanceof String)) {
            throw new Error("Expected the field `nextPageToken` to be a primitive type in the JSON string but got " + data['nextPageToken']);
        }
        if (data['timeSeries']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['timeSeries'])) {
                throw new Error("Expected the field `timeSeries` to be an array in the JSON data but got " + data['timeSeries']);
            }
            // validate the optional field `timeSeries` (array)
            for (const item of data['timeSeries']) {
                TimeSeries.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['unit'] && !(typeof data['unit'] === 'string' || data['unit'] instanceof String)) {
            throw new Error("Expected the field `unit` to be a primitive type in the JSON string but got " + data['unit']);
        }

        return true;
    }


}



/**
 * Query execution errors that may have caused the time series data returned to be incomplete.
 * @member {Array.<module:model/Status>} executionErrors
 */
ListTimeSeriesResponse.prototype['executionErrors'] = undefined;

/**
 * If there are more results than have been returned, then this field is set to a non-empty value. To see the additional results, use that value as page_token in the next call to this method.
 * @member {String} nextPageToken
 */
ListTimeSeriesResponse.prototype['nextPageToken'] = undefined;

/**
 * One or more time series that match the filter included in the request.
 * @member {Array.<module:model/TimeSeries>} timeSeries
 */
ListTimeSeriesResponse.prototype['timeSeries'] = undefined;

/**
 * The unit in which all time_series point values are reported. unit follows the UCUM format for units as seen in https://unitsofmeasure.org/ucum.html. If different time_series have different units (for example, because they come from different metric types, or a unit is absent), then unit will be \"{not_a_unit}\".
 * @member {String} unit
 */
ListTimeSeriesResponse.prototype['unit'] = undefined;






export default ListTimeSeriesResponse;

