/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Trigger from './Trigger';

/**
 * The MonitoringQueryLanguageCondition model module.
 * @module model/MonitoringQueryLanguageCondition
 * @version v3
 */
class MonitoringQueryLanguageCondition {
    /**
     * Constructs a new <code>MonitoringQueryLanguageCondition</code>.
     * A condition type that allows alert policies to be defined using Monitoring Query Language (https://cloud.google.com/monitoring/mql).
     * @alias module:model/MonitoringQueryLanguageCondition
     */
    constructor() { 
        
        MonitoringQueryLanguageCondition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MonitoringQueryLanguageCondition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MonitoringQueryLanguageCondition} obj Optional instance to populate.
     * @return {module:model/MonitoringQueryLanguageCondition} The populated <code>MonitoringQueryLanguageCondition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MonitoringQueryLanguageCondition();

            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'String');
            }
            if (data.hasOwnProperty('evaluationMissingData')) {
                obj['evaluationMissingData'] = ApiClient.convertToType(data['evaluationMissingData'], 'String');
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = ApiClient.convertToType(data['query'], 'String');
            }
            if (data.hasOwnProperty('trigger')) {
                obj['trigger'] = Trigger.constructFromObject(data['trigger']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MonitoringQueryLanguageCondition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MonitoringQueryLanguageCondition</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['duration'] && !(typeof data['duration'] === 'string' || data['duration'] instanceof String)) {
            throw new Error("Expected the field `duration` to be a primitive type in the JSON string but got " + data['duration']);
        }
        // ensure the json data is a string
        if (data['evaluationMissingData'] && !(typeof data['evaluationMissingData'] === 'string' || data['evaluationMissingData'] instanceof String)) {
            throw new Error("Expected the field `evaluationMissingData` to be a primitive type in the JSON string but got " + data['evaluationMissingData']);
        }
        // ensure the json data is a string
        if (data['query'] && !(typeof data['query'] === 'string' || data['query'] instanceof String)) {
            throw new Error("Expected the field `query` to be a primitive type in the JSON string but got " + data['query']);
        }
        // validate the optional field `trigger`
        if (data['trigger']) { // data not null
          Trigger.validateJSON(data['trigger']);
        }

        return true;
    }


}



/**
 * The amount of time that a time series must violate the threshold to be considered failing. Currently, only values that are a multiple of a minute--e.g., 0, 60, 120, or 300 seconds--are supported. If an invalid value is given, an error will be returned. When choosing a duration, it is useful to keep in mind the frequency of the underlying time series data (which may also be affected by any alignments specified in the aggregations field); a good duration is long enough so that a single outlier does not generate spurious alerts, but short enough that unhealthy states are detected and alerted on quickly.
 * @member {String} duration
 */
MonitoringQueryLanguageCondition.prototype['duration'] = undefined;

/**
 * A condition control that determines how metric-threshold conditions are evaluated when data stops arriving.
 * @member {module:model/MonitoringQueryLanguageCondition.EvaluationMissingDataEnum} evaluationMissingData
 */
MonitoringQueryLanguageCondition.prototype['evaluationMissingData'] = undefined;

/**
 * Monitoring Query Language (https://cloud.google.com/monitoring/mql) query that outputs a boolean stream.
 * @member {String} query
 */
MonitoringQueryLanguageCondition.prototype['query'] = undefined;

/**
 * @member {module:model/Trigger} trigger
 */
MonitoringQueryLanguageCondition.prototype['trigger'] = undefined;





/**
 * Allowed values for the <code>evaluationMissingData</code> property.
 * @enum {String}
 * @readonly
 */
MonitoringQueryLanguageCondition['EvaluationMissingDataEnum'] = {

    /**
     * value: "EVALUATION_MISSING_DATA_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "EVALUATION_MISSING_DATA_UNSPECIFIED",

    /**
     * value: "EVALUATION_MISSING_DATA_INACTIVE"
     * @const
     */
    "INACTIVE": "EVALUATION_MISSING_DATA_INACTIVE",

    /**
     * value: "EVALUATION_MISSING_DATA_ACTIVE"
     * @const
     */
    "ACTIVE": "EVALUATION_MISSING_DATA_ACTIVE",

    /**
     * value: "EVALUATION_MISSING_DATA_NO_OP"
     * @const
     */
    "NO_OP": "EVALUATION_MISSING_DATA_NO_OP"
};



export default MonitoringQueryLanguageCondition;

