/*
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NotificationChannelStrategy;
import org.openapitools.client.model.NotificationRateLimit;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Control over how the notification channels in notification_channels are notified when this alert fires.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:42.831469-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AlertStrategy {
  public static final String SERIALIZED_NAME_AUTO_CLOSE = "autoClose";
  @SerializedName(SERIALIZED_NAME_AUTO_CLOSE)
  private String autoClose;

  public static final String SERIALIZED_NAME_NOTIFICATION_CHANNEL_STRATEGY = "notificationChannelStrategy";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_CHANNEL_STRATEGY)
  private List<NotificationChannelStrategy> notificationChannelStrategy = new ArrayList<>();

  public static final String SERIALIZED_NAME_NOTIFICATION_RATE_LIMIT = "notificationRateLimit";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_RATE_LIMIT)
  private NotificationRateLimit notificationRateLimit;

  public AlertStrategy() {
  }

  public AlertStrategy autoClose(String autoClose) {
    this.autoClose = autoClose;
    return this;
  }

  /**
   * If an alert policy that was active has no data for this long, any open incidents will close
   * @return autoClose
   */
  @javax.annotation.Nullable
  public String getAutoClose() {
    return autoClose;
  }

  public void setAutoClose(String autoClose) {
    this.autoClose = autoClose;
  }


  public AlertStrategy notificationChannelStrategy(List<NotificationChannelStrategy> notificationChannelStrategy) {
    this.notificationChannelStrategy = notificationChannelStrategy;
    return this;
  }

  public AlertStrategy addNotificationChannelStrategyItem(NotificationChannelStrategy notificationChannelStrategyItem) {
    if (this.notificationChannelStrategy == null) {
      this.notificationChannelStrategy = new ArrayList<>();
    }
    this.notificationChannelStrategy.add(notificationChannelStrategyItem);
    return this;
  }

  /**
   * Control how notifications will be sent out, on a per-channel basis.
   * @return notificationChannelStrategy
   */
  @javax.annotation.Nullable
  public List<NotificationChannelStrategy> getNotificationChannelStrategy() {
    return notificationChannelStrategy;
  }

  public void setNotificationChannelStrategy(List<NotificationChannelStrategy> notificationChannelStrategy) {
    this.notificationChannelStrategy = notificationChannelStrategy;
  }


  public AlertStrategy notificationRateLimit(NotificationRateLimit notificationRateLimit) {
    this.notificationRateLimit = notificationRateLimit;
    return this;
  }

  /**
   * Get notificationRateLimit
   * @return notificationRateLimit
   */
  @javax.annotation.Nullable
  public NotificationRateLimit getNotificationRateLimit() {
    return notificationRateLimit;
  }

  public void setNotificationRateLimit(NotificationRateLimit notificationRateLimit) {
    this.notificationRateLimit = notificationRateLimit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlertStrategy alertStrategy = (AlertStrategy) o;
    return Objects.equals(this.autoClose, alertStrategy.autoClose) &&
        Objects.equals(this.notificationChannelStrategy, alertStrategy.notificationChannelStrategy) &&
        Objects.equals(this.notificationRateLimit, alertStrategy.notificationRateLimit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoClose, notificationChannelStrategy, notificationRateLimit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlertStrategy {\n");
    sb.append("    autoClose: ").append(toIndentedString(autoClose)).append("\n");
    sb.append("    notificationChannelStrategy: ").append(toIndentedString(notificationChannelStrategy)).append("\n");
    sb.append("    notificationRateLimit: ").append(toIndentedString(notificationRateLimit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoClose");
    openapiFields.add("notificationChannelStrategy");
    openapiFields.add("notificationRateLimit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AlertStrategy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AlertStrategy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlertStrategy is not found in the empty JSON string", AlertStrategy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AlertStrategy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AlertStrategy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("autoClose") != null && !jsonObj.get("autoClose").isJsonNull()) && !jsonObj.get("autoClose").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `autoClose` to be a primitive type in the JSON string but got `%s`", jsonObj.get("autoClose").toString()));
      }
      if (jsonObj.get("notificationChannelStrategy") != null && !jsonObj.get("notificationChannelStrategy").isJsonNull()) {
        JsonArray jsonArraynotificationChannelStrategy = jsonObj.getAsJsonArray("notificationChannelStrategy");
        if (jsonArraynotificationChannelStrategy != null) {
          // ensure the json data is an array
          if (!jsonObj.get("notificationChannelStrategy").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `notificationChannelStrategy` to be an array in the JSON string but got `%s`", jsonObj.get("notificationChannelStrategy").toString()));
          }

          // validate the optional field `notificationChannelStrategy` (array)
          for (int i = 0; i < jsonArraynotificationChannelStrategy.size(); i++) {
            NotificationChannelStrategy.validateJsonElement(jsonArraynotificationChannelStrategy.get(i));
          };
        }
      }
      // validate the optional field `notificationRateLimit`
      if (jsonObj.get("notificationRateLimit") != null && !jsonObj.get("notificationRateLimit").isJsonNull()) {
        NotificationRateLimit.validateJsonElement(jsonObj.get("notificationRateLimit"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlertStrategy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlertStrategy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlertStrategy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlertStrategy.class));

       return (TypeAdapter<T>) new TypeAdapter<AlertStrategy>() {
           @Override
           public void write(JsonWriter out, AlertStrategy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AlertStrategy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AlertStrategy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AlertStrategy
   * @throws IOException if the JSON string is invalid with respect to AlertStrategy
   */
  public static AlertStrategy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlertStrategy.class);
  }

  /**
   * Convert an instance of AlertStrategy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

