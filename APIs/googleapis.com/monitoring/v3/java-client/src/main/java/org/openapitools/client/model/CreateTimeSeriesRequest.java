/*
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TimeSeries;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The CreateTimeSeries request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:42.831469-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateTimeSeriesRequest {
  public static final String SERIALIZED_NAME_TIME_SERIES = "timeSeries";
  @SerializedName(SERIALIZED_NAME_TIME_SERIES)
  private List<TimeSeries> timeSeries = new ArrayList<>();

  public CreateTimeSeriesRequest() {
  }

  public CreateTimeSeriesRequest timeSeries(List<TimeSeries> timeSeries) {
    this.timeSeries = timeSeries;
    return this;
  }

  public CreateTimeSeriesRequest addTimeSeriesItem(TimeSeries timeSeriesItem) {
    if (this.timeSeries == null) {
      this.timeSeries = new ArrayList<>();
    }
    this.timeSeries.add(timeSeriesItem);
    return this;
  }

  /**
   * Required. The new data to be added to a list of time series. Adds at most one data point to each of several time series. The new data point must be more recent than any other point in its time series. Each TimeSeries value must fully specify a unique time series by supplying all label values for the metric and the monitored resource.The maximum number of TimeSeries objects per Create request is 200.
   * @return timeSeries
   */
  @javax.annotation.Nullable
  public List<TimeSeries> getTimeSeries() {
    return timeSeries;
  }

  public void setTimeSeries(List<TimeSeries> timeSeries) {
    this.timeSeries = timeSeries;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateTimeSeriesRequest createTimeSeriesRequest = (CreateTimeSeriesRequest) o;
    return Objects.equals(this.timeSeries, createTimeSeriesRequest.timeSeries);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timeSeries);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateTimeSeriesRequest {\n");
    sb.append("    timeSeries: ").append(toIndentedString(timeSeries)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("timeSeries");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateTimeSeriesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateTimeSeriesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateTimeSeriesRequest is not found in the empty JSON string", CreateTimeSeriesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateTimeSeriesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateTimeSeriesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("timeSeries") != null && !jsonObj.get("timeSeries").isJsonNull()) {
        JsonArray jsonArraytimeSeries = jsonObj.getAsJsonArray("timeSeries");
        if (jsonArraytimeSeries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("timeSeries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `timeSeries` to be an array in the JSON string but got `%s`", jsonObj.get("timeSeries").toString()));
          }

          // validate the optional field `timeSeries` (array)
          for (int i = 0; i < jsonArraytimeSeries.size(); i++) {
            TimeSeries.validateJsonElement(jsonArraytimeSeries.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateTimeSeriesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateTimeSeriesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateTimeSeriesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateTimeSeriesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateTimeSeriesRequest>() {
           @Override
           public void write(JsonWriter out, CreateTimeSeriesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateTimeSeriesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateTimeSeriesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateTimeSeriesRequest
   * @throws IOException if the JSON string is invalid with respect to CreateTimeSeriesRequest
   */
  public static CreateTimeSeriesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateTimeSeriesRequest.class);
  }

  /**
   * Convert an instance of CreateTimeSeriesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

