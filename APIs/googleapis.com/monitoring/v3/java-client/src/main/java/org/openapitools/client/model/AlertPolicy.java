/*
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AlertStrategy;
import org.openapitools.client.model.Condition;
import org.openapitools.client.model.Documentation;
import org.openapitools.client.model.MutationRecord;
import org.openapitools.client.model.Status;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A description of the conditions under which some aspect of your system is considered to be \&quot;unhealthy\&quot; and the ways to notify people or services about this state. For an overview of alert policies, see Introduction to Alerting (https://cloud.google.com/monitoring/alerts/).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:42.831469-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AlertPolicy {
  public static final String SERIALIZED_NAME_ALERT_STRATEGY = "alertStrategy";
  @SerializedName(SERIALIZED_NAME_ALERT_STRATEGY)
  private AlertStrategy alertStrategy;

  /**
   * How to combine the results of multiple conditions to determine if an incident should be opened. If condition_time_series_query_language is present, this must be COMBINE_UNSPECIFIED.
   */
  @JsonAdapter(CombinerEnum.Adapter.class)
  public enum CombinerEnum {
    COMBINE_UNSPECIFIED("COMBINE_UNSPECIFIED"),
    
    AND("AND"),
    
    OR("OR"),
    
    AND_WITH_MATCHING_RESOURCE("AND_WITH_MATCHING_RESOURCE");

    private String value;

    CombinerEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CombinerEnum fromValue(String value) {
      for (CombinerEnum b : CombinerEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CombinerEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CombinerEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CombinerEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CombinerEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CombinerEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMBINER = "combiner";
  @SerializedName(SERIALIZED_NAME_COMBINER)
  private CombinerEnum combiner;

  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private List<Condition> conditions = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATION_RECORD = "creationRecord";
  @SerializedName(SERIALIZED_NAME_CREATION_RECORD)
  private MutationRecord creationRecord;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DOCUMENTATION = "documentation";
  @SerializedName(SERIALIZED_NAME_DOCUMENTATION)
  private Documentation documentation;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_MUTATION_RECORD = "mutationRecord";
  @SerializedName(SERIALIZED_NAME_MUTATION_RECORD)
  private MutationRecord mutationRecord;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTIFICATION_CHANNELS = "notificationChannels";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_CHANNELS)
  private List<String> notificationChannels = new ArrayList<>();

  /**
   * Optional. The severity of an alert policy indicates how important incidents generated by that policy are. The severity level will be displayed on the Incident detail page and in notifications.
   */
  @JsonAdapter(SeverityEnum.Adapter.class)
  public enum SeverityEnum {
    SEVERITY_UNSPECIFIED("SEVERITY_UNSPECIFIED"),
    
    CRITICAL("CRITICAL"),
    
    ERROR("ERROR"),
    
    WARNING("WARNING");

    private String value;

    SeverityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SeverityEnum fromValue(String value) {
      for (SeverityEnum b : SeverityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SeverityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SeverityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SeverityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SeverityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SeverityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private SeverityEnum severity;

  public static final String SERIALIZED_NAME_USER_LABELS = "userLabels";
  @SerializedName(SERIALIZED_NAME_USER_LABELS)
  private Map<String, String> userLabels = new HashMap<>();

  public static final String SERIALIZED_NAME_VALIDITY = "validity";
  @SerializedName(SERIALIZED_NAME_VALIDITY)
  private Status validity;

  public AlertPolicy() {
  }

  public AlertPolicy alertStrategy(AlertStrategy alertStrategy) {
    this.alertStrategy = alertStrategy;
    return this;
  }

  /**
   * Get alertStrategy
   * @return alertStrategy
   */
  @javax.annotation.Nullable
  public AlertStrategy getAlertStrategy() {
    return alertStrategy;
  }

  public void setAlertStrategy(AlertStrategy alertStrategy) {
    this.alertStrategy = alertStrategy;
  }


  public AlertPolicy combiner(CombinerEnum combiner) {
    this.combiner = combiner;
    return this;
  }

  /**
   * How to combine the results of multiple conditions to determine if an incident should be opened. If condition_time_series_query_language is present, this must be COMBINE_UNSPECIFIED.
   * @return combiner
   */
  @javax.annotation.Nullable
  public CombinerEnum getCombiner() {
    return combiner;
  }

  public void setCombiner(CombinerEnum combiner) {
    this.combiner = combiner;
  }


  public AlertPolicy conditions(List<Condition> conditions) {
    this.conditions = conditions;
    return this;
  }

  public AlertPolicy addConditionsItem(Condition conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

  /**
   * A list of conditions for the policy. The conditions are combined by AND or OR according to the combiner field. If the combined conditions evaluate to true, then an incident is created. A policy can have from one to six conditions. If condition_time_series_query_language is present, it must be the only condition. If condition_monitoring_query_language is present, it must be the only condition.
   * @return conditions
   */
  @javax.annotation.Nullable
  public List<Condition> getConditions() {
    return conditions;
  }

  public void setConditions(List<Condition> conditions) {
    this.conditions = conditions;
  }


  public AlertPolicy creationRecord(MutationRecord creationRecord) {
    this.creationRecord = creationRecord;
    return this;
  }

  /**
   * Get creationRecord
   * @return creationRecord
   */
  @javax.annotation.Nullable
  public MutationRecord getCreationRecord() {
    return creationRecord;
  }

  public void setCreationRecord(MutationRecord creationRecord) {
    this.creationRecord = creationRecord;
  }


  public AlertPolicy displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * A short name or phrase used to identify the policy in dashboards, notifications, and incidents. To avoid confusion, don&#39;t use the same display name for multiple policies in the same project. The name is limited to 512 Unicode characters.The convention for the display_name of a PrometheusQueryLanguageCondition is \&quot;{rule group name}/{alert name}\&quot;, where the {rule group name} and {alert name} should be taken from the corresponding Prometheus configuration file. This convention is not enforced. In any case the display_name is not a unique key of the AlertPolicy.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public AlertPolicy documentation(Documentation documentation) {
    this.documentation = documentation;
    return this;
  }

  /**
   * Get documentation
   * @return documentation
   */
  @javax.annotation.Nullable
  public Documentation getDocumentation() {
    return documentation;
  }

  public void setDocumentation(Documentation documentation) {
    this.documentation = documentation;
  }


  public AlertPolicy enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Whether or not the policy is enabled. On write, the default interpretation if unset is that the policy is enabled. On read, clients should not make any assumption about the state if it has not been populated. The field should always be populated on List and Get operations, unless a field projection has been specified that strips it out.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public AlertPolicy mutationRecord(MutationRecord mutationRecord) {
    this.mutationRecord = mutationRecord;
    return this;
  }

  /**
   * Get mutationRecord
   * @return mutationRecord
   */
  @javax.annotation.Nullable
  public MutationRecord getMutationRecord() {
    return mutationRecord;
  }

  public void setMutationRecord(MutationRecord mutationRecord) {
    this.mutationRecord = mutationRecord;
  }


  public AlertPolicy name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required if the policy exists. The resource name for this policy. The format is: projects/[PROJECT_ID_OR_NUMBER]/alertPolicies/[ALERT_POLICY_ID] [ALERT_POLICY_ID] is assigned by Cloud Monitoring when the policy is created. When calling the alertPolicies.create method, do not include the name field in the alerting policy passed as part of the request.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AlertPolicy notificationChannels(List<String> notificationChannels) {
    this.notificationChannels = notificationChannels;
    return this;
  }

  public AlertPolicy addNotificationChannelsItem(String notificationChannelsItem) {
    if (this.notificationChannels == null) {
      this.notificationChannels = new ArrayList<>();
    }
    this.notificationChannels.add(notificationChannelsItem);
    return this;
  }

  /**
   * Identifies the notification channels to which notifications should be sent when incidents are opened or closed or when new violations occur on an already opened incident. Each element of this array corresponds to the name field in each of the NotificationChannel objects that are returned from the ListNotificationChannels method. The format of the entries in this field is: projects/[PROJECT_ID_OR_NUMBER]/notificationChannels/[CHANNEL_ID] 
   * @return notificationChannels
   */
  @javax.annotation.Nullable
  public List<String> getNotificationChannels() {
    return notificationChannels;
  }

  public void setNotificationChannels(List<String> notificationChannels) {
    this.notificationChannels = notificationChannels;
  }


  public AlertPolicy severity(SeverityEnum severity) {
    this.severity = severity;
    return this;
  }

  /**
   * Optional. The severity of an alert policy indicates how important incidents generated by that policy are. The severity level will be displayed on the Incident detail page and in notifications.
   * @return severity
   */
  @javax.annotation.Nullable
  public SeverityEnum getSeverity() {
    return severity;
  }

  public void setSeverity(SeverityEnum severity) {
    this.severity = severity;
  }


  public AlertPolicy userLabels(Map<String, String> userLabels) {
    this.userLabels = userLabels;
    return this;
  }

  public AlertPolicy putUserLabelsItem(String key, String userLabelsItem) {
    if (this.userLabels == null) {
      this.userLabels = new HashMap<>();
    }
    this.userLabels.put(key, userLabelsItem);
    return this;
  }

  /**
   * User-supplied key/value data to be used for organizing and identifying the AlertPolicy objects.The field can contain up to 64 entries. Each key and value is limited to 63 Unicode characters or 128 bytes, whichever is smaller. Labels and values can contain only lowercase letters, numerals, underscores, and dashes. Keys must begin with a letter.Note that Prometheus {alert name} is a valid Prometheus label names (https://prometheus.io/docs/concepts/data_model/#metric-names-and-labels), whereas Prometheus {rule group} is an unrestricted UTF-8 string. This means that they cannot be stored as-is in user labels, because they may contain characters that are not allowed in user-label values.
   * @return userLabels
   */
  @javax.annotation.Nullable
  public Map<String, String> getUserLabels() {
    return userLabels;
  }

  public void setUserLabels(Map<String, String> userLabels) {
    this.userLabels = userLabels;
  }


  public AlertPolicy validity(Status validity) {
    this.validity = validity;
    return this;
  }

  /**
   * Get validity
   * @return validity
   */
  @javax.annotation.Nullable
  public Status getValidity() {
    return validity;
  }

  public void setValidity(Status validity) {
    this.validity = validity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlertPolicy alertPolicy = (AlertPolicy) o;
    return Objects.equals(this.alertStrategy, alertPolicy.alertStrategy) &&
        Objects.equals(this.combiner, alertPolicy.combiner) &&
        Objects.equals(this.conditions, alertPolicy.conditions) &&
        Objects.equals(this.creationRecord, alertPolicy.creationRecord) &&
        Objects.equals(this.displayName, alertPolicy.displayName) &&
        Objects.equals(this.documentation, alertPolicy.documentation) &&
        Objects.equals(this.enabled, alertPolicy.enabled) &&
        Objects.equals(this.mutationRecord, alertPolicy.mutationRecord) &&
        Objects.equals(this.name, alertPolicy.name) &&
        Objects.equals(this.notificationChannels, alertPolicy.notificationChannels) &&
        Objects.equals(this.severity, alertPolicy.severity) &&
        Objects.equals(this.userLabels, alertPolicy.userLabels) &&
        Objects.equals(this.validity, alertPolicy.validity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alertStrategy, combiner, conditions, creationRecord, displayName, documentation, enabled, mutationRecord, name, notificationChannels, severity, userLabels, validity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlertPolicy {\n");
    sb.append("    alertStrategy: ").append(toIndentedString(alertStrategy)).append("\n");
    sb.append("    combiner: ").append(toIndentedString(combiner)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    creationRecord: ").append(toIndentedString(creationRecord)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    documentation: ").append(toIndentedString(documentation)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    mutationRecord: ").append(toIndentedString(mutationRecord)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notificationChannels: ").append(toIndentedString(notificationChannels)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    userLabels: ").append(toIndentedString(userLabels)).append("\n");
    sb.append("    validity: ").append(toIndentedString(validity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alertStrategy");
    openapiFields.add("combiner");
    openapiFields.add("conditions");
    openapiFields.add("creationRecord");
    openapiFields.add("displayName");
    openapiFields.add("documentation");
    openapiFields.add("enabled");
    openapiFields.add("mutationRecord");
    openapiFields.add("name");
    openapiFields.add("notificationChannels");
    openapiFields.add("severity");
    openapiFields.add("userLabels");
    openapiFields.add("validity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AlertPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AlertPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlertPolicy is not found in the empty JSON string", AlertPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AlertPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AlertPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `alertStrategy`
      if (jsonObj.get("alertStrategy") != null && !jsonObj.get("alertStrategy").isJsonNull()) {
        AlertStrategy.validateJsonElement(jsonObj.get("alertStrategy"));
      }
      if ((jsonObj.get("combiner") != null && !jsonObj.get("combiner").isJsonNull()) && !jsonObj.get("combiner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `combiner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("combiner").toString()));
      }
      // validate the optional field `combiner`
      if (jsonObj.get("combiner") != null && !jsonObj.get("combiner").isJsonNull()) {
        CombinerEnum.validateJsonElement(jsonObj.get("combiner"));
      }
      if (jsonObj.get("conditions") != null && !jsonObj.get("conditions").isJsonNull()) {
        JsonArray jsonArrayconditions = jsonObj.getAsJsonArray("conditions");
        if (jsonArrayconditions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conditions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conditions` to be an array in the JSON string but got `%s`", jsonObj.get("conditions").toString()));
          }

          // validate the optional field `conditions` (array)
          for (int i = 0; i < jsonArrayconditions.size(); i++) {
            Condition.validateJsonElement(jsonArrayconditions.get(i));
          };
        }
      }
      // validate the optional field `creationRecord`
      if (jsonObj.get("creationRecord") != null && !jsonObj.get("creationRecord").isJsonNull()) {
        MutationRecord.validateJsonElement(jsonObj.get("creationRecord"));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the optional field `documentation`
      if (jsonObj.get("documentation") != null && !jsonObj.get("documentation").isJsonNull()) {
        Documentation.validateJsonElement(jsonObj.get("documentation"));
      }
      // validate the optional field `mutationRecord`
      if (jsonObj.get("mutationRecord") != null && !jsonObj.get("mutationRecord").isJsonNull()) {
        MutationRecord.validateJsonElement(jsonObj.get("mutationRecord"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("notificationChannels") != null && !jsonObj.get("notificationChannels").isJsonNull() && !jsonObj.get("notificationChannels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `notificationChannels` to be an array in the JSON string but got `%s`", jsonObj.get("notificationChannels").toString()));
      }
      if ((jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) && !jsonObj.get("severity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `severity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("severity").toString()));
      }
      // validate the optional field `severity`
      if (jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) {
        SeverityEnum.validateJsonElement(jsonObj.get("severity"));
      }
      // validate the optional field `validity`
      if (jsonObj.get("validity") != null && !jsonObj.get("validity").isJsonNull()) {
        Status.validateJsonElement(jsonObj.get("validity"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlertPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlertPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlertPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlertPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<AlertPolicy>() {
           @Override
           public void write(JsonWriter out, AlertPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AlertPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AlertPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AlertPolicy
   * @throws IOException if the JSON string is invalid with respect to AlertPolicy
   */
  public static AlertPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlertPolicy.class);
  }

  /**
   * Convert an instance of AlertPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

