/*
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LabelDescriptor;
import org.openapitools.client.model.ValueDescriptor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A descriptor for the labels and points in a time series.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:42.831469-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TimeSeriesDescriptor {
  public static final String SERIALIZED_NAME_LABEL_DESCRIPTORS = "labelDescriptors";
  @SerializedName(SERIALIZED_NAME_LABEL_DESCRIPTORS)
  private List<LabelDescriptor> labelDescriptors = new ArrayList<>();

  public static final String SERIALIZED_NAME_POINT_DESCRIPTORS = "pointDescriptors";
  @SerializedName(SERIALIZED_NAME_POINT_DESCRIPTORS)
  private List<ValueDescriptor> pointDescriptors = new ArrayList<>();

  public TimeSeriesDescriptor() {
  }

  public TimeSeriesDescriptor labelDescriptors(List<LabelDescriptor> labelDescriptors) {
    this.labelDescriptors = labelDescriptors;
    return this;
  }

  public TimeSeriesDescriptor addLabelDescriptorsItem(LabelDescriptor labelDescriptorsItem) {
    if (this.labelDescriptors == null) {
      this.labelDescriptors = new ArrayList<>();
    }
    this.labelDescriptors.add(labelDescriptorsItem);
    return this;
  }

  /**
   * Descriptors for the labels.
   * @return labelDescriptors
   */
  @javax.annotation.Nullable
  public List<LabelDescriptor> getLabelDescriptors() {
    return labelDescriptors;
  }

  public void setLabelDescriptors(List<LabelDescriptor> labelDescriptors) {
    this.labelDescriptors = labelDescriptors;
  }


  public TimeSeriesDescriptor pointDescriptors(List<ValueDescriptor> pointDescriptors) {
    this.pointDescriptors = pointDescriptors;
    return this;
  }

  public TimeSeriesDescriptor addPointDescriptorsItem(ValueDescriptor pointDescriptorsItem) {
    if (this.pointDescriptors == null) {
      this.pointDescriptors = new ArrayList<>();
    }
    this.pointDescriptors.add(pointDescriptorsItem);
    return this;
  }

  /**
   * Descriptors for the point data value columns.
   * @return pointDescriptors
   */
  @javax.annotation.Nullable
  public List<ValueDescriptor> getPointDescriptors() {
    return pointDescriptors;
  }

  public void setPointDescriptors(List<ValueDescriptor> pointDescriptors) {
    this.pointDescriptors = pointDescriptors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeSeriesDescriptor timeSeriesDescriptor = (TimeSeriesDescriptor) o;
    return Objects.equals(this.labelDescriptors, timeSeriesDescriptor.labelDescriptors) &&
        Objects.equals(this.pointDescriptors, timeSeriesDescriptor.pointDescriptors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(labelDescriptors, pointDescriptors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeSeriesDescriptor {\n");
    sb.append("    labelDescriptors: ").append(toIndentedString(labelDescriptors)).append("\n");
    sb.append("    pointDescriptors: ").append(toIndentedString(pointDescriptors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("labelDescriptors");
    openapiFields.add("pointDescriptors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TimeSeriesDescriptor
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TimeSeriesDescriptor.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimeSeriesDescriptor is not found in the empty JSON string", TimeSeriesDescriptor.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TimeSeriesDescriptor.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TimeSeriesDescriptor` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("labelDescriptors") != null && !jsonObj.get("labelDescriptors").isJsonNull()) {
        JsonArray jsonArraylabelDescriptors = jsonObj.getAsJsonArray("labelDescriptors");
        if (jsonArraylabelDescriptors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("labelDescriptors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `labelDescriptors` to be an array in the JSON string but got `%s`", jsonObj.get("labelDescriptors").toString()));
          }

          // validate the optional field `labelDescriptors` (array)
          for (int i = 0; i < jsonArraylabelDescriptors.size(); i++) {
            LabelDescriptor.validateJsonElement(jsonArraylabelDescriptors.get(i));
          };
        }
      }
      if (jsonObj.get("pointDescriptors") != null && !jsonObj.get("pointDescriptors").isJsonNull()) {
        JsonArray jsonArraypointDescriptors = jsonObj.getAsJsonArray("pointDescriptors");
        if (jsonArraypointDescriptors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pointDescriptors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pointDescriptors` to be an array in the JSON string but got `%s`", jsonObj.get("pointDescriptors").toString()));
          }

          // validate the optional field `pointDescriptors` (array)
          for (int i = 0; i < jsonArraypointDescriptors.size(); i++) {
            ValueDescriptor.validateJsonElement(jsonArraypointDescriptors.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimeSeriesDescriptor.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimeSeriesDescriptor' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimeSeriesDescriptor> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimeSeriesDescriptor.class));

       return (TypeAdapter<T>) new TypeAdapter<TimeSeriesDescriptor>() {
           @Override
           public void write(JsonWriter out, TimeSeriesDescriptor value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TimeSeriesDescriptor read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TimeSeriesDescriptor given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TimeSeriesDescriptor
   * @throws IOException if the JSON string is invalid with respect to TimeSeriesDescriptor
   */
  public static TimeSeriesDescriptor fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimeSeriesDescriptor.class);
  }

  /**
   * Convert an instance of TimeSeriesDescriptor to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

