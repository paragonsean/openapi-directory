/*
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Trigger;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A condition type that allows alert policies to be defined using Monitoring Query Language (https://cloud.google.com/monitoring/mql).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:42.831469-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MonitoringQueryLanguageCondition {
  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration;

  /**
   * A condition control that determines how metric-threshold conditions are evaluated when data stops arriving.
   */
  @JsonAdapter(EvaluationMissingDataEnum.Adapter.class)
  public enum EvaluationMissingDataEnum {
    UNSPECIFIED("EVALUATION_MISSING_DATA_UNSPECIFIED"),
    
    INACTIVE("EVALUATION_MISSING_DATA_INACTIVE"),
    
    ACTIVE("EVALUATION_MISSING_DATA_ACTIVE"),
    
    NO_OP("EVALUATION_MISSING_DATA_NO_OP");

    private String value;

    EvaluationMissingDataEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EvaluationMissingDataEnum fromValue(String value) {
      for (EvaluationMissingDataEnum b : EvaluationMissingDataEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EvaluationMissingDataEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EvaluationMissingDataEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EvaluationMissingDataEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EvaluationMissingDataEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EvaluationMissingDataEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EVALUATION_MISSING_DATA = "evaluationMissingData";
  @SerializedName(SERIALIZED_NAME_EVALUATION_MISSING_DATA)
  private EvaluationMissingDataEnum evaluationMissingData;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private String query;

  public static final String SERIALIZED_NAME_TRIGGER = "trigger";
  @SerializedName(SERIALIZED_NAME_TRIGGER)
  private Trigger trigger;

  public MonitoringQueryLanguageCondition() {
  }

  public MonitoringQueryLanguageCondition duration(String duration) {
    this.duration = duration;
    return this;
  }

  /**
   * The amount of time that a time series must violate the threshold to be considered failing. Currently, only values that are a multiple of a minute--e.g., 0, 60, 120, or 300 seconds--are supported. If an invalid value is given, an error will be returned. When choosing a duration, it is useful to keep in mind the frequency of the underlying time series data (which may also be affected by any alignments specified in the aggregations field); a good duration is long enough so that a single outlier does not generate spurious alerts, but short enough that unhealthy states are detected and alerted on quickly.
   * @return duration
   */
  @javax.annotation.Nullable
  public String getDuration() {
    return duration;
  }

  public void setDuration(String duration) {
    this.duration = duration;
  }


  public MonitoringQueryLanguageCondition evaluationMissingData(EvaluationMissingDataEnum evaluationMissingData) {
    this.evaluationMissingData = evaluationMissingData;
    return this;
  }

  /**
   * A condition control that determines how metric-threshold conditions are evaluated when data stops arriving.
   * @return evaluationMissingData
   */
  @javax.annotation.Nullable
  public EvaluationMissingDataEnum getEvaluationMissingData() {
    return evaluationMissingData;
  }

  public void setEvaluationMissingData(EvaluationMissingDataEnum evaluationMissingData) {
    this.evaluationMissingData = evaluationMissingData;
  }


  public MonitoringQueryLanguageCondition query(String query) {
    this.query = query;
    return this;
  }

  /**
   * Monitoring Query Language (https://cloud.google.com/monitoring/mql) query that outputs a boolean stream.
   * @return query
   */
  @javax.annotation.Nullable
  public String getQuery() {
    return query;
  }

  public void setQuery(String query) {
    this.query = query;
  }


  public MonitoringQueryLanguageCondition trigger(Trigger trigger) {
    this.trigger = trigger;
    return this;
  }

  /**
   * Get trigger
   * @return trigger
   */
  @javax.annotation.Nullable
  public Trigger getTrigger() {
    return trigger;
  }

  public void setTrigger(Trigger trigger) {
    this.trigger = trigger;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MonitoringQueryLanguageCondition monitoringQueryLanguageCondition = (MonitoringQueryLanguageCondition) o;
    return Objects.equals(this.duration, monitoringQueryLanguageCondition.duration) &&
        Objects.equals(this.evaluationMissingData, monitoringQueryLanguageCondition.evaluationMissingData) &&
        Objects.equals(this.query, monitoringQueryLanguageCondition.query) &&
        Objects.equals(this.trigger, monitoringQueryLanguageCondition.trigger);
  }

  @Override
  public int hashCode() {
    return Objects.hash(duration, evaluationMissingData, query, trigger);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MonitoringQueryLanguageCondition {\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    evaluationMissingData: ").append(toIndentedString(evaluationMissingData)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    trigger: ").append(toIndentedString(trigger)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("duration");
    openapiFields.add("evaluationMissingData");
    openapiFields.add("query");
    openapiFields.add("trigger");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MonitoringQueryLanguageCondition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MonitoringQueryLanguageCondition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MonitoringQueryLanguageCondition is not found in the empty JSON string", MonitoringQueryLanguageCondition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MonitoringQueryLanguageCondition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MonitoringQueryLanguageCondition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("duration") != null && !jsonObj.get("duration").isJsonNull()) && !jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
      if ((jsonObj.get("evaluationMissingData") != null && !jsonObj.get("evaluationMissingData").isJsonNull()) && !jsonObj.get("evaluationMissingData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluationMissingData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evaluationMissingData").toString()));
      }
      // validate the optional field `evaluationMissingData`
      if (jsonObj.get("evaluationMissingData") != null && !jsonObj.get("evaluationMissingData").isJsonNull()) {
        EvaluationMissingDataEnum.validateJsonElement(jsonObj.get("evaluationMissingData"));
      }
      if ((jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull()) && !jsonObj.get("query").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query").toString()));
      }
      // validate the optional field `trigger`
      if (jsonObj.get("trigger") != null && !jsonObj.get("trigger").isJsonNull()) {
        Trigger.validateJsonElement(jsonObj.get("trigger"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MonitoringQueryLanguageCondition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MonitoringQueryLanguageCondition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MonitoringQueryLanguageCondition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MonitoringQueryLanguageCondition.class));

       return (TypeAdapter<T>) new TypeAdapter<MonitoringQueryLanguageCondition>() {
           @Override
           public void write(JsonWriter out, MonitoringQueryLanguageCondition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MonitoringQueryLanguageCondition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MonitoringQueryLanguageCondition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MonitoringQueryLanguageCondition
   * @throws IOException if the JSON string is invalid with respect to MonitoringQueryLanguageCondition
   */
  public static MonitoringQueryLanguageCondition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MonitoringQueryLanguageCondition.class);
  }

  /**
   * Convert an instance of MonitoringQueryLanguageCondition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

