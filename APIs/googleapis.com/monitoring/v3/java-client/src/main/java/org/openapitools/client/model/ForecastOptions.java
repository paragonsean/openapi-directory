/*
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Options used when forecasting the time series and testing the predicted value against the threshold.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:42.831469-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ForecastOptions {
  public static final String SERIALIZED_NAME_FORECAST_HORIZON = "forecastHorizon";
  @SerializedName(SERIALIZED_NAME_FORECAST_HORIZON)
  private String forecastHorizon;

  public ForecastOptions() {
  }

  public ForecastOptions forecastHorizon(String forecastHorizon) {
    this.forecastHorizon = forecastHorizon;
    return this;
  }

  /**
   * Required. The length of time into the future to forecast whether a time series will violate the threshold. If the predicted value is found to violate the threshold, and the violation is observed in all forecasts made for the configured duration, then the time series is considered to be failing. The forecast horizon can range from 1 hour to 60 hours.
   * @return forecastHorizon
   */
  @javax.annotation.Nullable
  public String getForecastHorizon() {
    return forecastHorizon;
  }

  public void setForecastHorizon(String forecastHorizon) {
    this.forecastHorizon = forecastHorizon;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ForecastOptions forecastOptions = (ForecastOptions) o;
    return Objects.equals(this.forecastHorizon, forecastOptions.forecastHorizon);
  }

  @Override
  public int hashCode() {
    return Objects.hash(forecastHorizon);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ForecastOptions {\n");
    sb.append("    forecastHorizon: ").append(toIndentedString(forecastHorizon)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("forecastHorizon");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ForecastOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ForecastOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ForecastOptions is not found in the empty JSON string", ForecastOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ForecastOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ForecastOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("forecastHorizon") != null && !jsonObj.get("forecastHorizon").isJsonNull()) && !jsonObj.get("forecastHorizon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forecastHorizon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forecastHorizon").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ForecastOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ForecastOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ForecastOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ForecastOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<ForecastOptions>() {
           @Override
           public void write(JsonWriter out, ForecastOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ForecastOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ForecastOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ForecastOptions
   * @throws IOException if the JSON string is invalid with respect to ForecastOptions
   */
  public static ForecastOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ForecastOptions.class);
  }

  /**
   * Convert an instance of ForecastOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

