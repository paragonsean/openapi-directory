/*
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.JsonPathMatcher;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Optional. Used to perform content matching. This allows matching based on substrings and regular expressions, together with their negations. Only the first 4 MB of an HTTP or HTTPS check&#39;s response (and the first 1 MB of a TCP check&#39;s response) are examined for purposes of content matching.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:42.831469-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContentMatcher {
  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public static final String SERIALIZED_NAME_JSON_PATH_MATCHER = "jsonPathMatcher";
  @SerializedName(SERIALIZED_NAME_JSON_PATH_MATCHER)
  private JsonPathMatcher jsonPathMatcher;

  /**
   * The type of content matcher that will be applied to the server output, compared to the content string when the check is run.
   */
  @JsonAdapter(MatcherEnum.Adapter.class)
  public enum MatcherEnum {
    CONTENT_MATCHER_OPTION_UNSPECIFIED("CONTENT_MATCHER_OPTION_UNSPECIFIED"),
    
    CONTAINS_STRING("CONTAINS_STRING"),
    
    NOT_CONTAINS_STRING("NOT_CONTAINS_STRING"),
    
    MATCHES_REGEX("MATCHES_REGEX"),
    
    NOT_MATCHES_REGEX("NOT_MATCHES_REGEX"),
    
    MATCHES_JSON_PATH("MATCHES_JSON_PATH"),
    
    NOT_MATCHES_JSON_PATH("NOT_MATCHES_JSON_PATH");

    private String value;

    MatcherEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MatcherEnum fromValue(String value) {
      for (MatcherEnum b : MatcherEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MatcherEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MatcherEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MatcherEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MatcherEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MatcherEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MATCHER = "matcher";
  @SerializedName(SERIALIZED_NAME_MATCHER)
  private MatcherEnum matcher;

  public ContentMatcher() {
  }

  public ContentMatcher content(String content) {
    this.content = content;
    return this;
  }

  /**
   * String, regex or JSON content to match. Maximum 1024 bytes. An empty content string indicates no content matching is to be performed.
   * @return content
   */
  @javax.annotation.Nullable
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  public ContentMatcher jsonPathMatcher(JsonPathMatcher jsonPathMatcher) {
    this.jsonPathMatcher = jsonPathMatcher;
    return this;
  }

  /**
   * Get jsonPathMatcher
   * @return jsonPathMatcher
   */
  @javax.annotation.Nullable
  public JsonPathMatcher getJsonPathMatcher() {
    return jsonPathMatcher;
  }

  public void setJsonPathMatcher(JsonPathMatcher jsonPathMatcher) {
    this.jsonPathMatcher = jsonPathMatcher;
  }


  public ContentMatcher matcher(MatcherEnum matcher) {
    this.matcher = matcher;
    return this;
  }

  /**
   * The type of content matcher that will be applied to the server output, compared to the content string when the check is run.
   * @return matcher
   */
  @javax.annotation.Nullable
  public MatcherEnum getMatcher() {
    return matcher;
  }

  public void setMatcher(MatcherEnum matcher) {
    this.matcher = matcher;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentMatcher contentMatcher = (ContentMatcher) o;
    return Objects.equals(this.content, contentMatcher.content) &&
        Objects.equals(this.jsonPathMatcher, contentMatcher.jsonPathMatcher) &&
        Objects.equals(this.matcher, contentMatcher.matcher);
  }

  @Override
  public int hashCode() {
    return Objects.hash(content, jsonPathMatcher, matcher);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentMatcher {\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    jsonPathMatcher: ").append(toIndentedString(jsonPathMatcher)).append("\n");
    sb.append("    matcher: ").append(toIndentedString(matcher)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("content");
    openapiFields.add("jsonPathMatcher");
    openapiFields.add("matcher");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContentMatcher
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContentMatcher.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContentMatcher is not found in the empty JSON string", ContentMatcher.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContentMatcher.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContentMatcher` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) && !jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
      // validate the optional field `jsonPathMatcher`
      if (jsonObj.get("jsonPathMatcher") != null && !jsonObj.get("jsonPathMatcher").isJsonNull()) {
        JsonPathMatcher.validateJsonElement(jsonObj.get("jsonPathMatcher"));
      }
      if ((jsonObj.get("matcher") != null && !jsonObj.get("matcher").isJsonNull()) && !jsonObj.get("matcher").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `matcher` to be a primitive type in the JSON string but got `%s`", jsonObj.get("matcher").toString()));
      }
      // validate the optional field `matcher`
      if (jsonObj.get("matcher") != null && !jsonObj.get("matcher").isJsonNull()) {
        MatcherEnum.validateJsonElement(jsonObj.get("matcher"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContentMatcher.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContentMatcher' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContentMatcher> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContentMatcher.class));

       return (TypeAdapter<T>) new TypeAdapter<ContentMatcher>() {
           @Override
           public void write(JsonWriter out, ContentMatcher value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContentMatcher read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContentMatcher given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContentMatcher
   * @throws IOException if the JSON string is invalid with respect to ContentMatcher
   */
  public static ContentMatcher fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContentMatcher.class);
  }

  /**
   * Convert an instance of ContentMatcher to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

