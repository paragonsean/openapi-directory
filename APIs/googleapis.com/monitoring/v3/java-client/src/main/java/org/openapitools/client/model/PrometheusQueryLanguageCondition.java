/*
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A condition type that allows alert policies to be defined using Prometheus Query Language (PromQL) (https://prometheus.io/docs/prometheus/latest/querying/basics/).The PrometheusQueryLanguageCondition message contains information from a Prometheus alerting rule and its associated rule group.A Prometheus alerting rule is described here (https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/). The semantics of a Prometheus alerting rule is described here (https://prometheus.io/docs/prometheus/latest/configuration/recording_rules/#rule).A Prometheus rule group is described here (https://prometheus.io/docs/prometheus/latest/configuration/recording_rules/). The semantics of a Prometheus rule group is described here (https://prometheus.io/docs/prometheus/latest/configuration/recording_rules/#rule_group).Because Cloud Alerting has no representation of a Prometheus rule group resource, we must embed the information of the parent rule group inside each of the conditions that refer to it. We must also update the contents of all Prometheus alerts in case the information of their rule group changes.The PrometheusQueryLanguageCondition protocol buffer combines the information of the corresponding rule group and alerting rule. The structure of the PrometheusQueryLanguageCondition protocol buffer does NOT mimic the structure of the Prometheus rule group and alerting rule YAML declarations. The PrometheusQueryLanguageCondition protocol buffer may change in the future to support future rule group and/or alerting rule features. There are no new such features at the present time (2023-06-26).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:42.831469-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PrometheusQueryLanguageCondition {
  public static final String SERIALIZED_NAME_ALERT_RULE = "alertRule";
  @SerializedName(SERIALIZED_NAME_ALERT_RULE)
  private String alertRule;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration;

  public static final String SERIALIZED_NAME_EVALUATION_INTERVAL = "evaluationInterval";
  @SerializedName(SERIALIZED_NAME_EVALUATION_INTERVAL)
  private String evaluationInterval;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private String query;

  public static final String SERIALIZED_NAME_RULE_GROUP = "ruleGroup";
  @SerializedName(SERIALIZED_NAME_RULE_GROUP)
  private String ruleGroup;

  public PrometheusQueryLanguageCondition() {
  }

  public PrometheusQueryLanguageCondition alertRule(String alertRule) {
    this.alertRule = alertRule;
    return this;
  }

  /**
   * Optional. The alerting rule name of this alert in the corresponding Prometheus configuration file.Some external tools may require this field to be populated correctly in order to refer to the original Prometheus configuration file. The rule group name and the alert name are necessary to update the relevant AlertPolicies in case the definition of the rule group changes in the future.This field is optional. If this field is not empty, then it must be a valid Prometheus label name (https://prometheus.io/docs/concepts/data_model/#metric-names-and-labels). This field may not exceed 2048 Unicode characters in length.
   * @return alertRule
   */
  @javax.annotation.Nullable
  public String getAlertRule() {
    return alertRule;
  }

  public void setAlertRule(String alertRule) {
    this.alertRule = alertRule;
  }


  public PrometheusQueryLanguageCondition duration(String duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Optional. Alerts are considered firing once their PromQL expression was evaluated to be \&quot;true\&quot; for this long. Alerts whose PromQL expression was not evaluated to be \&quot;true\&quot; for long enough are considered pending. Must be a non-negative duration or missing. This field is optional. Its default value is zero.
   * @return duration
   */
  @javax.annotation.Nullable
  public String getDuration() {
    return duration;
  }

  public void setDuration(String duration) {
    this.duration = duration;
  }


  public PrometheusQueryLanguageCondition evaluationInterval(String evaluationInterval) {
    this.evaluationInterval = evaluationInterval;
    return this;
  }

  /**
   * Optional. How often this rule should be evaluated. Must be a positive multiple of 30 seconds or missing. This field is optional. Its default value is 30 seconds. If this PrometheusQueryLanguageCondition was generated from a Prometheus alerting rule, then this value should be taken from the enclosing rule group.
   * @return evaluationInterval
   */
  @javax.annotation.Nullable
  public String getEvaluationInterval() {
    return evaluationInterval;
  }

  public void setEvaluationInterval(String evaluationInterval) {
    this.evaluationInterval = evaluationInterval;
  }


  public PrometheusQueryLanguageCondition labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public PrometheusQueryLanguageCondition putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Optional. Labels to add to or overwrite in the PromQL query result. Label names must be valid (https://prometheus.io/docs/concepts/data_model/#metric-names-and-labels). Label values can be templatized by using variables (https://cloud.google.com/monitoring/alerts/doc-variables). The only available variable names are the names of the labels in the PromQL result, including \&quot;__name__\&quot; and \&quot;value\&quot;. \&quot;labels\&quot; may be empty.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public PrometheusQueryLanguageCondition query(String query) {
    this.query = query;
    return this;
  }

  /**
   * Required. The PromQL expression to evaluate. Every evaluation cycle this expression is evaluated at the current time, and all resultant time series become pending/firing alerts. This field must not be empty.
   * @return query
   */
  @javax.annotation.Nullable
  public String getQuery() {
    return query;
  }

  public void setQuery(String query) {
    this.query = query;
  }


  public PrometheusQueryLanguageCondition ruleGroup(String ruleGroup) {
    this.ruleGroup = ruleGroup;
    return this;
  }

  /**
   * Optional. The rule group name of this alert in the corresponding Prometheus configuration file.Some external tools may require this field to be populated correctly in order to refer to the original Prometheus configuration file. The rule group name and the alert name are necessary to update the relevant AlertPolicies in case the definition of the rule group changes in the future.This field is optional. If this field is not empty, then it must contain a valid UTF-8 string. This field may not exceed 2048 Unicode characters in length.
   * @return ruleGroup
   */
  @javax.annotation.Nullable
  public String getRuleGroup() {
    return ruleGroup;
  }

  public void setRuleGroup(String ruleGroup) {
    this.ruleGroup = ruleGroup;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PrometheusQueryLanguageCondition prometheusQueryLanguageCondition = (PrometheusQueryLanguageCondition) o;
    return Objects.equals(this.alertRule, prometheusQueryLanguageCondition.alertRule) &&
        Objects.equals(this.duration, prometheusQueryLanguageCondition.duration) &&
        Objects.equals(this.evaluationInterval, prometheusQueryLanguageCondition.evaluationInterval) &&
        Objects.equals(this.labels, prometheusQueryLanguageCondition.labels) &&
        Objects.equals(this.query, prometheusQueryLanguageCondition.query) &&
        Objects.equals(this.ruleGroup, prometheusQueryLanguageCondition.ruleGroup);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alertRule, duration, evaluationInterval, labels, query, ruleGroup);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PrometheusQueryLanguageCondition {\n");
    sb.append("    alertRule: ").append(toIndentedString(alertRule)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    evaluationInterval: ").append(toIndentedString(evaluationInterval)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    ruleGroup: ").append(toIndentedString(ruleGroup)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alertRule");
    openapiFields.add("duration");
    openapiFields.add("evaluationInterval");
    openapiFields.add("labels");
    openapiFields.add("query");
    openapiFields.add("ruleGroup");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PrometheusQueryLanguageCondition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PrometheusQueryLanguageCondition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PrometheusQueryLanguageCondition is not found in the empty JSON string", PrometheusQueryLanguageCondition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PrometheusQueryLanguageCondition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PrometheusQueryLanguageCondition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("alertRule") != null && !jsonObj.get("alertRule").isJsonNull()) && !jsonObj.get("alertRule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alertRule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alertRule").toString()));
      }
      if ((jsonObj.get("duration") != null && !jsonObj.get("duration").isJsonNull()) && !jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
      if ((jsonObj.get("evaluationInterval") != null && !jsonObj.get("evaluationInterval").isJsonNull()) && !jsonObj.get("evaluationInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluationInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evaluationInterval").toString()));
      }
      if ((jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull()) && !jsonObj.get("query").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query").toString()));
      }
      if ((jsonObj.get("ruleGroup") != null && !jsonObj.get("ruleGroup").isJsonNull()) && !jsonObj.get("ruleGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleGroup").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PrometheusQueryLanguageCondition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PrometheusQueryLanguageCondition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PrometheusQueryLanguageCondition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PrometheusQueryLanguageCondition.class));

       return (TypeAdapter<T>) new TypeAdapter<PrometheusQueryLanguageCondition>() {
           @Override
           public void write(JsonWriter out, PrometheusQueryLanguageCondition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PrometheusQueryLanguageCondition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PrometheusQueryLanguageCondition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PrometheusQueryLanguageCondition
   * @throws IOException if the JSON string is invalid with respect to PrometheusQueryLanguageCondition
   */
  public static PrometheusQueryLanguageCondition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PrometheusQueryLanguageCondition.class);
  }

  /**
   * Convert an instance of PrometheusQueryLanguageCondition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

