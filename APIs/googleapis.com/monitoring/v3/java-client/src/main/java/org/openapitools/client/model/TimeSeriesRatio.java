/*
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A TimeSeriesRatio specifies two TimeSeries to use for computing the good_service / total_service ratio. The specified TimeSeries must have ValueType &#x3D; DOUBLE or ValueType &#x3D; INT64 and must have MetricKind &#x3D; DELTA or MetricKind &#x3D; CUMULATIVE. The TimeSeriesRatio must specify exactly two of good, bad, and total, and the relationship good_service + bad_service &#x3D; total_service will be assumed.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:42.831469-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TimeSeriesRatio {
  public static final String SERIALIZED_NAME_BAD_SERVICE_FILTER = "badServiceFilter";
  @SerializedName(SERIALIZED_NAME_BAD_SERVICE_FILTER)
  private String badServiceFilter;

  public static final String SERIALIZED_NAME_GOOD_SERVICE_FILTER = "goodServiceFilter";
  @SerializedName(SERIALIZED_NAME_GOOD_SERVICE_FILTER)
  private String goodServiceFilter;

  public static final String SERIALIZED_NAME_TOTAL_SERVICE_FILTER = "totalServiceFilter";
  @SerializedName(SERIALIZED_NAME_TOTAL_SERVICE_FILTER)
  private String totalServiceFilter;

  public TimeSeriesRatio() {
  }

  public TimeSeriesRatio badServiceFilter(String badServiceFilter) {
    this.badServiceFilter = badServiceFilter;
    return this;
  }

  /**
   * A monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) specifying a TimeSeries quantifying bad service, either demanded service that was not provided or demanded service that was of inadequate quality. Must have ValueType &#x3D; DOUBLE or ValueType &#x3D; INT64 and must have MetricKind &#x3D; DELTA or MetricKind &#x3D; CUMULATIVE.
   * @return badServiceFilter
   */
  @javax.annotation.Nullable
  public String getBadServiceFilter() {
    return badServiceFilter;
  }

  public void setBadServiceFilter(String badServiceFilter) {
    this.badServiceFilter = badServiceFilter;
  }


  public TimeSeriesRatio goodServiceFilter(String goodServiceFilter) {
    this.goodServiceFilter = goodServiceFilter;
    return this;
  }

  /**
   * A monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) specifying a TimeSeries quantifying good service provided. Must have ValueType &#x3D; DOUBLE or ValueType &#x3D; INT64 and must have MetricKind &#x3D; DELTA or MetricKind &#x3D; CUMULATIVE.
   * @return goodServiceFilter
   */
  @javax.annotation.Nullable
  public String getGoodServiceFilter() {
    return goodServiceFilter;
  }

  public void setGoodServiceFilter(String goodServiceFilter) {
    this.goodServiceFilter = goodServiceFilter;
  }


  public TimeSeriesRatio totalServiceFilter(String totalServiceFilter) {
    this.totalServiceFilter = totalServiceFilter;
    return this;
  }

  /**
   * A monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) specifying a TimeSeries quantifying total demanded service. Must have ValueType &#x3D; DOUBLE or ValueType &#x3D; INT64 and must have MetricKind &#x3D; DELTA or MetricKind &#x3D; CUMULATIVE.
   * @return totalServiceFilter
   */
  @javax.annotation.Nullable
  public String getTotalServiceFilter() {
    return totalServiceFilter;
  }

  public void setTotalServiceFilter(String totalServiceFilter) {
    this.totalServiceFilter = totalServiceFilter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeSeriesRatio timeSeriesRatio = (TimeSeriesRatio) o;
    return Objects.equals(this.badServiceFilter, timeSeriesRatio.badServiceFilter) &&
        Objects.equals(this.goodServiceFilter, timeSeriesRatio.goodServiceFilter) &&
        Objects.equals(this.totalServiceFilter, timeSeriesRatio.totalServiceFilter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(badServiceFilter, goodServiceFilter, totalServiceFilter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeSeriesRatio {\n");
    sb.append("    badServiceFilter: ").append(toIndentedString(badServiceFilter)).append("\n");
    sb.append("    goodServiceFilter: ").append(toIndentedString(goodServiceFilter)).append("\n");
    sb.append("    totalServiceFilter: ").append(toIndentedString(totalServiceFilter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("badServiceFilter");
    openapiFields.add("goodServiceFilter");
    openapiFields.add("totalServiceFilter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TimeSeriesRatio
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TimeSeriesRatio.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimeSeriesRatio is not found in the empty JSON string", TimeSeriesRatio.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TimeSeriesRatio.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TimeSeriesRatio` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("badServiceFilter") != null && !jsonObj.get("badServiceFilter").isJsonNull()) && !jsonObj.get("badServiceFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `badServiceFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("badServiceFilter").toString()));
      }
      if ((jsonObj.get("goodServiceFilter") != null && !jsonObj.get("goodServiceFilter").isJsonNull()) && !jsonObj.get("goodServiceFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `goodServiceFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("goodServiceFilter").toString()));
      }
      if ((jsonObj.get("totalServiceFilter") != null && !jsonObj.get("totalServiceFilter").isJsonNull()) && !jsonObj.get("totalServiceFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalServiceFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalServiceFilter").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimeSeriesRatio.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimeSeriesRatio' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimeSeriesRatio> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimeSeriesRatio.class));

       return (TypeAdapter<T>) new TypeAdapter<TimeSeriesRatio>() {
           @Override
           public void write(JsonWriter out, TimeSeriesRatio value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TimeSeriesRatio read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TimeSeriesRatio given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TimeSeriesRatio
   * @throws IOException if the JSON string is invalid with respect to TimeSeriesRatio
   */
  public static TimeSeriesRatio fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimeSeriesRatio.class);
  }

  /**
   * Convert an instance of TimeSeriesRatio to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

