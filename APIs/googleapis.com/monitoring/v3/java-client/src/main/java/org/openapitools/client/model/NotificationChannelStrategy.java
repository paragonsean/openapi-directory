/*
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Control over how the notification channels in notification_channels are notified when this alert fires, on a per-channel basis.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:42.831469-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NotificationChannelStrategy {
  public static final String SERIALIZED_NAME_NOTIFICATION_CHANNEL_NAMES = "notificationChannelNames";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_CHANNEL_NAMES)
  private List<String> notificationChannelNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_RENOTIFY_INTERVAL = "renotifyInterval";
  @SerializedName(SERIALIZED_NAME_RENOTIFY_INTERVAL)
  private String renotifyInterval;

  public NotificationChannelStrategy() {
  }

  public NotificationChannelStrategy notificationChannelNames(List<String> notificationChannelNames) {
    this.notificationChannelNames = notificationChannelNames;
    return this;
  }

  public NotificationChannelStrategy addNotificationChannelNamesItem(String notificationChannelNamesItem) {
    if (this.notificationChannelNames == null) {
      this.notificationChannelNames = new ArrayList<>();
    }
    this.notificationChannelNames.add(notificationChannelNamesItem);
    return this;
  }

  /**
   * The full REST resource name for the notification channels that these settings apply to. Each of these correspond to the name field in one of the NotificationChannel objects referenced in the notification_channels field of this AlertPolicy. The format is: projects/[PROJECT_ID_OR_NUMBER]/notificationChannels/[CHANNEL_ID] 
   * @return notificationChannelNames
   */
  @javax.annotation.Nullable
  public List<String> getNotificationChannelNames() {
    return notificationChannelNames;
  }

  public void setNotificationChannelNames(List<String> notificationChannelNames) {
    this.notificationChannelNames = notificationChannelNames;
  }


  public NotificationChannelStrategy renotifyInterval(String renotifyInterval) {
    this.renotifyInterval = renotifyInterval;
    return this;
  }

  /**
   * The frequency at which to send reminder notifications for open incidents.
   * @return renotifyInterval
   */
  @javax.annotation.Nullable
  public String getRenotifyInterval() {
    return renotifyInterval;
  }

  public void setRenotifyInterval(String renotifyInterval) {
    this.renotifyInterval = renotifyInterval;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationChannelStrategy notificationChannelStrategy = (NotificationChannelStrategy) o;
    return Objects.equals(this.notificationChannelNames, notificationChannelStrategy.notificationChannelNames) &&
        Objects.equals(this.renotifyInterval, notificationChannelStrategy.renotifyInterval);
  }

  @Override
  public int hashCode() {
    return Objects.hash(notificationChannelNames, renotifyInterval);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationChannelStrategy {\n");
    sb.append("    notificationChannelNames: ").append(toIndentedString(notificationChannelNames)).append("\n");
    sb.append("    renotifyInterval: ").append(toIndentedString(renotifyInterval)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("notificationChannelNames");
    openapiFields.add("renotifyInterval");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NotificationChannelStrategy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NotificationChannelStrategy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NotificationChannelStrategy is not found in the empty JSON string", NotificationChannelStrategy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NotificationChannelStrategy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NotificationChannelStrategy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("notificationChannelNames") != null && !jsonObj.get("notificationChannelNames").isJsonNull() && !jsonObj.get("notificationChannelNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `notificationChannelNames` to be an array in the JSON string but got `%s`", jsonObj.get("notificationChannelNames").toString()));
      }
      if ((jsonObj.get("renotifyInterval") != null && !jsonObj.get("renotifyInterval").isJsonNull()) && !jsonObj.get("renotifyInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `renotifyInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("renotifyInterval").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NotificationChannelStrategy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NotificationChannelStrategy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NotificationChannelStrategy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NotificationChannelStrategy.class));

       return (TypeAdapter<T>) new TypeAdapter<NotificationChannelStrategy>() {
           @Override
           public void write(JsonWriter out, NotificationChannelStrategy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NotificationChannelStrategy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NotificationChannelStrategy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NotificationChannelStrategy
   * @throws IOException if the JSON string is invalid with respect to NotificationChannelStrategy
   */
  public static NotificationChannelStrategy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NotificationChannelStrategy.class);
  }

  /**
   * Convert an instance of NotificationChannelStrategy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

