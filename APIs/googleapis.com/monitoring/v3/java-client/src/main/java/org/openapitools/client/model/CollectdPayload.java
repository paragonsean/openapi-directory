/*
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.CollectdValue;
import org.openapitools.client.model.TypedValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A collection of data points sent from a collectd-based plugin. See the collectd documentation for more information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:42.831469-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CollectdPayload {
  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, TypedValue> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_PLUGIN = "plugin";
  @SerializedName(SERIALIZED_NAME_PLUGIN)
  private String plugin;

  public static final String SERIALIZED_NAME_PLUGIN_INSTANCE = "pluginInstance";
  @SerializedName(SERIALIZED_NAME_PLUGIN_INSTANCE)
  private String pluginInstance;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_TYPE_INSTANCE = "typeInstance";
  @SerializedName(SERIALIZED_NAME_TYPE_INSTANCE)
  private String typeInstance;

  public static final String SERIALIZED_NAME_VALUES = "values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  private List<CollectdValue> values = new ArrayList<>();

  public CollectdPayload() {
  }

  public CollectdPayload endTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The end time of the interval.
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }

  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }


  public CollectdPayload metadata(Map<String, TypedValue> metadata) {
    this.metadata = metadata;
    return this;
  }

  public CollectdPayload putMetadataItem(String key, TypedValue metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * The measurement metadata. Example: \&quot;process_id\&quot; -&gt; 12345
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, TypedValue> getMetadata() {
    return metadata;
  }

  public void setMetadata(Map<String, TypedValue> metadata) {
    this.metadata = metadata;
  }


  public CollectdPayload plugin(String plugin) {
    this.plugin = plugin;
    return this;
  }

  /**
   * The name of the plugin. Example: \&quot;disk\&quot;.
   * @return plugin
   */
  @javax.annotation.Nullable
  public String getPlugin() {
    return plugin;
  }

  public void setPlugin(String plugin) {
    this.plugin = plugin;
  }


  public CollectdPayload pluginInstance(String pluginInstance) {
    this.pluginInstance = pluginInstance;
    return this;
  }

  /**
   * The instance name of the plugin Example: \&quot;hdcl\&quot;.
   * @return pluginInstance
   */
  @javax.annotation.Nullable
  public String getPluginInstance() {
    return pluginInstance;
  }

  public void setPluginInstance(String pluginInstance) {
    this.pluginInstance = pluginInstance;
  }


  public CollectdPayload startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The start time of the interval.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  public CollectdPayload type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The measurement type. Example: \&quot;memory\&quot;.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public CollectdPayload typeInstance(String typeInstance) {
    this.typeInstance = typeInstance;
    return this;
  }

  /**
   * The measurement type instance. Example: \&quot;used\&quot;.
   * @return typeInstance
   */
  @javax.annotation.Nullable
  public String getTypeInstance() {
    return typeInstance;
  }

  public void setTypeInstance(String typeInstance) {
    this.typeInstance = typeInstance;
  }


  public CollectdPayload values(List<CollectdValue> values) {
    this.values = values;
    return this;
  }

  public CollectdPayload addValuesItem(CollectdValue valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<>();
    }
    this.values.add(valuesItem);
    return this;
  }

  /**
   * The measured values during this time interval. Each value must have a different data_source_name.
   * @return values
   */
  @javax.annotation.Nullable
  public List<CollectdValue> getValues() {
    return values;
  }

  public void setValues(List<CollectdValue> values) {
    this.values = values;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CollectdPayload collectdPayload = (CollectdPayload) o;
    return Objects.equals(this.endTime, collectdPayload.endTime) &&
        Objects.equals(this.metadata, collectdPayload.metadata) &&
        Objects.equals(this.plugin, collectdPayload.plugin) &&
        Objects.equals(this.pluginInstance, collectdPayload.pluginInstance) &&
        Objects.equals(this.startTime, collectdPayload.startTime) &&
        Objects.equals(this.type, collectdPayload.type) &&
        Objects.equals(this.typeInstance, collectdPayload.typeInstance) &&
        Objects.equals(this.values, collectdPayload.values);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endTime, metadata, plugin, pluginInstance, startTime, type, typeInstance, values);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CollectdPayload {\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    plugin: ").append(toIndentedString(plugin)).append("\n");
    sb.append("    pluginInstance: ").append(toIndentedString(pluginInstance)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    typeInstance: ").append(toIndentedString(typeInstance)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endTime");
    openapiFields.add("metadata");
    openapiFields.add("plugin");
    openapiFields.add("pluginInstance");
    openapiFields.add("startTime");
    openapiFields.add("type");
    openapiFields.add("typeInstance");
    openapiFields.add("values");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CollectdPayload
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CollectdPayload.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CollectdPayload is not found in the empty JSON string", CollectdPayload.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CollectdPayload.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CollectdPayload` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      if ((jsonObj.get("plugin") != null && !jsonObj.get("plugin").isJsonNull()) && !jsonObj.get("plugin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plugin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plugin").toString()));
      }
      if ((jsonObj.get("pluginInstance") != null && !jsonObj.get("pluginInstance").isJsonNull()) && !jsonObj.get("pluginInstance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pluginInstance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pluginInstance").toString()));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("typeInstance") != null && !jsonObj.get("typeInstance").isJsonNull()) && !jsonObj.get("typeInstance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeInstance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeInstance").toString()));
      }
      if (jsonObj.get("values") != null && !jsonObj.get("values").isJsonNull()) {
        JsonArray jsonArrayvalues = jsonObj.getAsJsonArray("values");
        if (jsonArrayvalues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("values").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `values` to be an array in the JSON string but got `%s`", jsonObj.get("values").toString()));
          }

          // validate the optional field `values` (array)
          for (int i = 0; i < jsonArrayvalues.size(); i++) {
            CollectdValue.validateJsonElement(jsonArrayvalues.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CollectdPayload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CollectdPayload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CollectdPayload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CollectdPayload.class));

       return (TypeAdapter<T>) new TypeAdapter<CollectdPayload>() {
           @Override
           public void write(JsonWriter out, CollectdPayload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CollectdPayload read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CollectdPayload given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CollectdPayload
   * @throws IOException if the JSON string is invalid with respect to CollectdPayload
   */
  public static CollectdPayload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CollectdPayload.class);
  }

  /**
   * Convert an instance of CollectdPayload to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

