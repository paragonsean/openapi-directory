/*
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Aggregation;
import org.openapitools.client.model.ForecastOptions;
import org.openapitools.client.model.Trigger;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A condition type that compares a collection of time series against a threshold.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:42.831469-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MetricThreshold {
  public static final String SERIALIZED_NAME_AGGREGATIONS = "aggregations";
  @SerializedName(SERIALIZED_NAME_AGGREGATIONS)
  private List<Aggregation> aggregations = new ArrayList<>();

  /**
   * The comparison to apply between the time series (indicated by filter and aggregation) and the threshold (indicated by threshold_value). The comparison is applied on each time series, with the time series on the left-hand side and the threshold on the right-hand side.Only COMPARISON_LT and COMPARISON_GT are supported currently.
   */
  @JsonAdapter(ComparisonEnum.Adapter.class)
  public enum ComparisonEnum {
    UNSPECIFIED("COMPARISON_UNSPECIFIED"),
    
    GT("COMPARISON_GT"),
    
    GE("COMPARISON_GE"),
    
    LT("COMPARISON_LT"),
    
    LE("COMPARISON_LE"),
    
    EQ("COMPARISON_EQ"),
    
    NE("COMPARISON_NE");

    private String value;

    ComparisonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ComparisonEnum fromValue(String value) {
      for (ComparisonEnum b : ComparisonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ComparisonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ComparisonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ComparisonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ComparisonEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ComparisonEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMPARISON = "comparison";
  @SerializedName(SERIALIZED_NAME_COMPARISON)
  private ComparisonEnum comparison;

  public static final String SERIALIZED_NAME_DENOMINATOR_AGGREGATIONS = "denominatorAggregations";
  @SerializedName(SERIALIZED_NAME_DENOMINATOR_AGGREGATIONS)
  private List<Aggregation> denominatorAggregations = new ArrayList<>();

  public static final String SERIALIZED_NAME_DENOMINATOR_FILTER = "denominatorFilter";
  @SerializedName(SERIALIZED_NAME_DENOMINATOR_FILTER)
  private String denominatorFilter;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration;

  /**
   * A condition control that determines how metric-threshold conditions are evaluated when data stops arriving. To use this control, the value of the duration field must be greater than or equal to 60 seconds.
   */
  @JsonAdapter(EvaluationMissingDataEnum.Adapter.class)
  public enum EvaluationMissingDataEnum {
    UNSPECIFIED("EVALUATION_MISSING_DATA_UNSPECIFIED"),
    
    INACTIVE("EVALUATION_MISSING_DATA_INACTIVE"),
    
    ACTIVE("EVALUATION_MISSING_DATA_ACTIVE"),
    
    NO_OP("EVALUATION_MISSING_DATA_NO_OP");

    private String value;

    EvaluationMissingDataEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EvaluationMissingDataEnum fromValue(String value) {
      for (EvaluationMissingDataEnum b : EvaluationMissingDataEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EvaluationMissingDataEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EvaluationMissingDataEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EvaluationMissingDataEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EvaluationMissingDataEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EvaluationMissingDataEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EVALUATION_MISSING_DATA = "evaluationMissingData";
  @SerializedName(SERIALIZED_NAME_EVALUATION_MISSING_DATA)
  private EvaluationMissingDataEnum evaluationMissingData;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private String filter;

  public static final String SERIALIZED_NAME_FORECAST_OPTIONS = "forecastOptions";
  @SerializedName(SERIALIZED_NAME_FORECAST_OPTIONS)
  private ForecastOptions forecastOptions;

  public static final String SERIALIZED_NAME_THRESHOLD_VALUE = "thresholdValue";
  @SerializedName(SERIALIZED_NAME_THRESHOLD_VALUE)
  private Double thresholdValue;

  public static final String SERIALIZED_NAME_TRIGGER = "trigger";
  @SerializedName(SERIALIZED_NAME_TRIGGER)
  private Trigger trigger;

  public MetricThreshold() {
  }

  public MetricThreshold aggregations(List<Aggregation> aggregations) {
    this.aggregations = aggregations;
    return this;
  }

  public MetricThreshold addAggregationsItem(Aggregation aggregationsItem) {
    if (this.aggregations == null) {
      this.aggregations = new ArrayList<>();
    }
    this.aggregations.add(aggregationsItem);
    return this;
  }

  /**
   * Specifies the alignment of data points in individual time series as well as how to combine the retrieved time series together (such as when aggregating multiple streams on each resource to a single stream for each resource or when aggregating streams across all members of a group of resources). Multiple aggregations are applied in the order specified.This field is similar to the one in the ListTimeSeries request (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list). It is advisable to use the ListTimeSeries method when debugging this field.
   * @return aggregations
   */
  @javax.annotation.Nullable
  public List<Aggregation> getAggregations() {
    return aggregations;
  }

  public void setAggregations(List<Aggregation> aggregations) {
    this.aggregations = aggregations;
  }


  public MetricThreshold comparison(ComparisonEnum comparison) {
    this.comparison = comparison;
    return this;
  }

  /**
   * The comparison to apply between the time series (indicated by filter and aggregation) and the threshold (indicated by threshold_value). The comparison is applied on each time series, with the time series on the left-hand side and the threshold on the right-hand side.Only COMPARISON_LT and COMPARISON_GT are supported currently.
   * @return comparison
   */
  @javax.annotation.Nullable
  public ComparisonEnum getComparison() {
    return comparison;
  }

  public void setComparison(ComparisonEnum comparison) {
    this.comparison = comparison;
  }


  public MetricThreshold denominatorAggregations(List<Aggregation> denominatorAggregations) {
    this.denominatorAggregations = denominatorAggregations;
    return this;
  }

  public MetricThreshold addDenominatorAggregationsItem(Aggregation denominatorAggregationsItem) {
    if (this.denominatorAggregations == null) {
      this.denominatorAggregations = new ArrayList<>();
    }
    this.denominatorAggregations.add(denominatorAggregationsItem);
    return this;
  }

  /**
   * Specifies the alignment of data points in individual time series selected by denominatorFilter as well as how to combine the retrieved time series together (such as when aggregating multiple streams on each resource to a single stream for each resource or when aggregating streams across all members of a group of resources).When computing ratios, the aggregations and denominator_aggregations fields must use the same alignment period and produce time series that have the same periodicity and labels.
   * @return denominatorAggregations
   */
  @javax.annotation.Nullable
  public List<Aggregation> getDenominatorAggregations() {
    return denominatorAggregations;
  }

  public void setDenominatorAggregations(List<Aggregation> denominatorAggregations) {
    this.denominatorAggregations = denominatorAggregations;
  }


  public MetricThreshold denominatorFilter(String denominatorFilter) {
    this.denominatorFilter = denominatorFilter;
    return this;
  }

  /**
   * A filter (https://cloud.google.com/monitoring/api/v3/filters) that identifies a time series that should be used as the denominator of a ratio that will be compared with the threshold. If a denominator_filter is specified, the time series specified by the filter field will be used as the numerator.The filter must specify the metric type and optionally may contain restrictions on resource type, resource labels, and metric labels. This field may not exceed 2048 Unicode characters in length.
   * @return denominatorFilter
   */
  @javax.annotation.Nullable
  public String getDenominatorFilter() {
    return denominatorFilter;
  }

  public void setDenominatorFilter(String denominatorFilter) {
    this.denominatorFilter = denominatorFilter;
  }


  public MetricThreshold duration(String duration) {
    this.duration = duration;
    return this;
  }

  /**
   * The amount of time that a time series must violate the threshold to be considered failing. Currently, only values that are a multiple of a minute--e.g., 0, 60, 120, or 300 seconds--are supported. If an invalid value is given, an error will be returned. When choosing a duration, it is useful to keep in mind the frequency of the underlying time series data (which may also be affected by any alignments specified in the aggregations field); a good duration is long enough so that a single outlier does not generate spurious alerts, but short enough that unhealthy states are detected and alerted on quickly.
   * @return duration
   */
  @javax.annotation.Nullable
  public String getDuration() {
    return duration;
  }

  public void setDuration(String duration) {
    this.duration = duration;
  }


  public MetricThreshold evaluationMissingData(EvaluationMissingDataEnum evaluationMissingData) {
    this.evaluationMissingData = evaluationMissingData;
    return this;
  }

  /**
   * A condition control that determines how metric-threshold conditions are evaluated when data stops arriving. To use this control, the value of the duration field must be greater than or equal to 60 seconds.
   * @return evaluationMissingData
   */
  @javax.annotation.Nullable
  public EvaluationMissingDataEnum getEvaluationMissingData() {
    return evaluationMissingData;
  }

  public void setEvaluationMissingData(EvaluationMissingDataEnum evaluationMissingData) {
    this.evaluationMissingData = evaluationMissingData;
  }


  public MetricThreshold filter(String filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Required. A filter (https://cloud.google.com/monitoring/api/v3/filters) that identifies which time series should be compared with the threshold.The filter is similar to the one that is specified in the ListTimeSeries request (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list) (that call is useful to verify the time series that will be retrieved / processed). The filter must specify the metric type and the resource type. Optionally, it can specify resource labels and metric labels. This field must not exceed 2048 Unicode characters in length.
   * @return filter
   */
  @javax.annotation.Nullable
  public String getFilter() {
    return filter;
  }

  public void setFilter(String filter) {
    this.filter = filter;
  }


  public MetricThreshold forecastOptions(ForecastOptions forecastOptions) {
    this.forecastOptions = forecastOptions;
    return this;
  }

  /**
   * Get forecastOptions
   * @return forecastOptions
   */
  @javax.annotation.Nullable
  public ForecastOptions getForecastOptions() {
    return forecastOptions;
  }

  public void setForecastOptions(ForecastOptions forecastOptions) {
    this.forecastOptions = forecastOptions;
  }


  public MetricThreshold thresholdValue(Double thresholdValue) {
    this.thresholdValue = thresholdValue;
    return this;
  }

  /**
   * A value against which to compare the time series.
   * @return thresholdValue
   */
  @javax.annotation.Nullable
  public Double getThresholdValue() {
    return thresholdValue;
  }

  public void setThresholdValue(Double thresholdValue) {
    this.thresholdValue = thresholdValue;
  }


  public MetricThreshold trigger(Trigger trigger) {
    this.trigger = trigger;
    return this;
  }

  /**
   * Get trigger
   * @return trigger
   */
  @javax.annotation.Nullable
  public Trigger getTrigger() {
    return trigger;
  }

  public void setTrigger(Trigger trigger) {
    this.trigger = trigger;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetricThreshold metricThreshold = (MetricThreshold) o;
    return Objects.equals(this.aggregations, metricThreshold.aggregations) &&
        Objects.equals(this.comparison, metricThreshold.comparison) &&
        Objects.equals(this.denominatorAggregations, metricThreshold.denominatorAggregations) &&
        Objects.equals(this.denominatorFilter, metricThreshold.denominatorFilter) &&
        Objects.equals(this.duration, metricThreshold.duration) &&
        Objects.equals(this.evaluationMissingData, metricThreshold.evaluationMissingData) &&
        Objects.equals(this.filter, metricThreshold.filter) &&
        Objects.equals(this.forecastOptions, metricThreshold.forecastOptions) &&
        Objects.equals(this.thresholdValue, metricThreshold.thresholdValue) &&
        Objects.equals(this.trigger, metricThreshold.trigger);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregations, comparison, denominatorAggregations, denominatorFilter, duration, evaluationMissingData, filter, forecastOptions, thresholdValue, trigger);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetricThreshold {\n");
    sb.append("    aggregations: ").append(toIndentedString(aggregations)).append("\n");
    sb.append("    comparison: ").append(toIndentedString(comparison)).append("\n");
    sb.append("    denominatorAggregations: ").append(toIndentedString(denominatorAggregations)).append("\n");
    sb.append("    denominatorFilter: ").append(toIndentedString(denominatorFilter)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    evaluationMissingData: ").append(toIndentedString(evaluationMissingData)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    forecastOptions: ").append(toIndentedString(forecastOptions)).append("\n");
    sb.append("    thresholdValue: ").append(toIndentedString(thresholdValue)).append("\n");
    sb.append("    trigger: ").append(toIndentedString(trigger)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aggregations");
    openapiFields.add("comparison");
    openapiFields.add("denominatorAggregations");
    openapiFields.add("denominatorFilter");
    openapiFields.add("duration");
    openapiFields.add("evaluationMissingData");
    openapiFields.add("filter");
    openapiFields.add("forecastOptions");
    openapiFields.add("thresholdValue");
    openapiFields.add("trigger");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MetricThreshold
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MetricThreshold.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MetricThreshold is not found in the empty JSON string", MetricThreshold.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MetricThreshold.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MetricThreshold` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("aggregations") != null && !jsonObj.get("aggregations").isJsonNull()) {
        JsonArray jsonArrayaggregations = jsonObj.getAsJsonArray("aggregations");
        if (jsonArrayaggregations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("aggregations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `aggregations` to be an array in the JSON string but got `%s`", jsonObj.get("aggregations").toString()));
          }

          // validate the optional field `aggregations` (array)
          for (int i = 0; i < jsonArrayaggregations.size(); i++) {
            Aggregation.validateJsonElement(jsonArrayaggregations.get(i));
          };
        }
      }
      if ((jsonObj.get("comparison") != null && !jsonObj.get("comparison").isJsonNull()) && !jsonObj.get("comparison").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comparison` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comparison").toString()));
      }
      // validate the optional field `comparison`
      if (jsonObj.get("comparison") != null && !jsonObj.get("comparison").isJsonNull()) {
        ComparisonEnum.validateJsonElement(jsonObj.get("comparison"));
      }
      if (jsonObj.get("denominatorAggregations") != null && !jsonObj.get("denominatorAggregations").isJsonNull()) {
        JsonArray jsonArraydenominatorAggregations = jsonObj.getAsJsonArray("denominatorAggregations");
        if (jsonArraydenominatorAggregations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("denominatorAggregations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `denominatorAggregations` to be an array in the JSON string but got `%s`", jsonObj.get("denominatorAggregations").toString()));
          }

          // validate the optional field `denominatorAggregations` (array)
          for (int i = 0; i < jsonArraydenominatorAggregations.size(); i++) {
            Aggregation.validateJsonElement(jsonArraydenominatorAggregations.get(i));
          };
        }
      }
      if ((jsonObj.get("denominatorFilter") != null && !jsonObj.get("denominatorFilter").isJsonNull()) && !jsonObj.get("denominatorFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `denominatorFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("denominatorFilter").toString()));
      }
      if ((jsonObj.get("duration") != null && !jsonObj.get("duration").isJsonNull()) && !jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
      if ((jsonObj.get("evaluationMissingData") != null && !jsonObj.get("evaluationMissingData").isJsonNull()) && !jsonObj.get("evaluationMissingData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluationMissingData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evaluationMissingData").toString()));
      }
      // validate the optional field `evaluationMissingData`
      if (jsonObj.get("evaluationMissingData") != null && !jsonObj.get("evaluationMissingData").isJsonNull()) {
        EvaluationMissingDataEnum.validateJsonElement(jsonObj.get("evaluationMissingData"));
      }
      if ((jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) && !jsonObj.get("filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filter").toString()));
      }
      // validate the optional field `forecastOptions`
      if (jsonObj.get("forecastOptions") != null && !jsonObj.get("forecastOptions").isJsonNull()) {
        ForecastOptions.validateJsonElement(jsonObj.get("forecastOptions"));
      }
      // validate the optional field `trigger`
      if (jsonObj.get("trigger") != null && !jsonObj.get("trigger").isJsonNull()) {
        Trigger.validateJsonElement(jsonObj.get("trigger"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MetricThreshold.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MetricThreshold' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MetricThreshold> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MetricThreshold.class));

       return (TypeAdapter<T>) new TypeAdapter<MetricThreshold>() {
           @Override
           public void write(JsonWriter out, MetricThreshold value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MetricThreshold read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MetricThreshold given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MetricThreshold
   * @throws IOException if the JSON string is invalid with respect to MetricThreshold
   */
  public static MetricThreshold fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetricThreshold.class);
  }

  /**
   * Convert an instance of MetricThreshold to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

