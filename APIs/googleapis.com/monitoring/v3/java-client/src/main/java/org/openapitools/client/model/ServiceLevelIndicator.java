/*
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BasicSli;
import org.openapitools.client.model.RequestBasedSli;
import org.openapitools.client.model.WindowsBasedSli;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Service-Level Indicator (SLI) describes the \&quot;performance\&quot; of a service. For some services, the SLI is well-defined. In such cases, the SLI can be described easily by referencing the well-known SLI and providing the needed parameters. Alternatively, a \&quot;custom\&quot; SLI can be defined with a query to the underlying metric store. An SLI is defined to be good_service / total_service over any queried time interval. The value of performance always falls into the range 0 &lt;&#x3D; performance &lt;&#x3D; 1. A custom SLI describes how to compute this ratio, whether this is by dividing values from a pair of time series, cutting a Distribution into good and bad counts, or counting time windows in which the service complies with a criterion. For separation of concerns, a single Service-Level Indicator measures performance for only one aspect of service quality, such as fraction of successful queries or fast-enough queries.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:42.831469-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceLevelIndicator {
  public static final String SERIALIZED_NAME_BASIC_SLI = "basicSli";
  @SerializedName(SERIALIZED_NAME_BASIC_SLI)
  private BasicSli basicSli;

  public static final String SERIALIZED_NAME_REQUEST_BASED = "requestBased";
  @SerializedName(SERIALIZED_NAME_REQUEST_BASED)
  private RequestBasedSli requestBased;

  public static final String SERIALIZED_NAME_WINDOWS_BASED = "windowsBased";
  @SerializedName(SERIALIZED_NAME_WINDOWS_BASED)
  private WindowsBasedSli windowsBased;

  public ServiceLevelIndicator() {
  }

  public ServiceLevelIndicator basicSli(BasicSli basicSli) {
    this.basicSli = basicSli;
    return this;
  }

  /**
   * Get basicSli
   * @return basicSli
   */
  @javax.annotation.Nullable
  public BasicSli getBasicSli() {
    return basicSli;
  }

  public void setBasicSli(BasicSli basicSli) {
    this.basicSli = basicSli;
  }


  public ServiceLevelIndicator requestBased(RequestBasedSli requestBased) {
    this.requestBased = requestBased;
    return this;
  }

  /**
   * Get requestBased
   * @return requestBased
   */
  @javax.annotation.Nullable
  public RequestBasedSli getRequestBased() {
    return requestBased;
  }

  public void setRequestBased(RequestBasedSli requestBased) {
    this.requestBased = requestBased;
  }


  public ServiceLevelIndicator windowsBased(WindowsBasedSli windowsBased) {
    this.windowsBased = windowsBased;
    return this;
  }

  /**
   * Get windowsBased
   * @return windowsBased
   */
  @javax.annotation.Nullable
  public WindowsBasedSli getWindowsBased() {
    return windowsBased;
  }

  public void setWindowsBased(WindowsBasedSli windowsBased) {
    this.windowsBased = windowsBased;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceLevelIndicator serviceLevelIndicator = (ServiceLevelIndicator) o;
    return Objects.equals(this.basicSli, serviceLevelIndicator.basicSli) &&
        Objects.equals(this.requestBased, serviceLevelIndicator.requestBased) &&
        Objects.equals(this.windowsBased, serviceLevelIndicator.windowsBased);
  }

  @Override
  public int hashCode() {
    return Objects.hash(basicSli, requestBased, windowsBased);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceLevelIndicator {\n");
    sb.append("    basicSli: ").append(toIndentedString(basicSli)).append("\n");
    sb.append("    requestBased: ").append(toIndentedString(requestBased)).append("\n");
    sb.append("    windowsBased: ").append(toIndentedString(windowsBased)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("basicSli");
    openapiFields.add("requestBased");
    openapiFields.add("windowsBased");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceLevelIndicator
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceLevelIndicator.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceLevelIndicator is not found in the empty JSON string", ServiceLevelIndicator.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceLevelIndicator.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceLevelIndicator` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `basicSli`
      if (jsonObj.get("basicSli") != null && !jsonObj.get("basicSli").isJsonNull()) {
        BasicSli.validateJsonElement(jsonObj.get("basicSli"));
      }
      // validate the optional field `requestBased`
      if (jsonObj.get("requestBased") != null && !jsonObj.get("requestBased").isJsonNull()) {
        RequestBasedSli.validateJsonElement(jsonObj.get("requestBased"));
      }
      // validate the optional field `windowsBased`
      if (jsonObj.get("windowsBased") != null && !jsonObj.get("windowsBased").isJsonNull()) {
        WindowsBasedSli.validateJsonElement(jsonObj.get("windowsBased"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceLevelIndicator.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceLevelIndicator' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceLevelIndicator> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceLevelIndicator.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceLevelIndicator>() {
           @Override
           public void write(JsonWriter out, ServiceLevelIndicator value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceLevelIndicator read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceLevelIndicator given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceLevelIndicator
   * @throws IOException if the JSON string is invalid with respect to ServiceLevelIndicator
   */
  public static ServiceLevelIndicator fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceLevelIndicator.class);
  }

  /**
   * Convert an instance of ServiceLevelIndicator to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

