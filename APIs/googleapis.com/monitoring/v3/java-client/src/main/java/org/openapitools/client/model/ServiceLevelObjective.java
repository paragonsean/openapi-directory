/*
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.ServiceLevelIndicator;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Service-Level Objective (SLO) describes a level of desired good service. It consists of a service-level indicator (SLI), a performance goal, and a period over which the objective is to be evaluated against that goal. The SLO can use SLIs defined in a number of different manners. Typical SLOs might include \&quot;99% of requests in each rolling week have latency below 200 milliseconds\&quot; or \&quot;99.5% of requests in each calendar month return successfully.\&quot;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:42.831469-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceLevelObjective {
  /**
   * A calendar period, semantically \&quot;since the start of the current \&quot;. At this time, only DAY, WEEK, FORTNIGHT, and MONTH are supported.
   */
  @JsonAdapter(CalendarPeriodEnum.Adapter.class)
  public enum CalendarPeriodEnum {
    CALENDAR_PERIOD_UNSPECIFIED("CALENDAR_PERIOD_UNSPECIFIED"),
    
    DAY("DAY"),
    
    WEEK("WEEK"),
    
    FORTNIGHT("FORTNIGHT"),
    
    MONTH("MONTH"),
    
    QUARTER("QUARTER"),
    
    HALF("HALF"),
    
    YEAR("YEAR");

    private String value;

    CalendarPeriodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CalendarPeriodEnum fromValue(String value) {
      for (CalendarPeriodEnum b : CalendarPeriodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CalendarPeriodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CalendarPeriodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CalendarPeriodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CalendarPeriodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CalendarPeriodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CALENDAR_PERIOD = "calendarPeriod";
  @SerializedName(SERIALIZED_NAME_CALENDAR_PERIOD)
  private CalendarPeriodEnum calendarPeriod;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_GOAL = "goal";
  @SerializedName(SERIALIZED_NAME_GOAL)
  private Double goal;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ROLLING_PERIOD = "rollingPeriod";
  @SerializedName(SERIALIZED_NAME_ROLLING_PERIOD)
  private String rollingPeriod;

  public static final String SERIALIZED_NAME_SERVICE_LEVEL_INDICATOR = "serviceLevelIndicator";
  @SerializedName(SERIALIZED_NAME_SERVICE_LEVEL_INDICATOR)
  private ServiceLevelIndicator serviceLevelIndicator;

  public static final String SERIALIZED_NAME_USER_LABELS = "userLabels";
  @SerializedName(SERIALIZED_NAME_USER_LABELS)
  private Map<String, String> userLabels = new HashMap<>();

  public ServiceLevelObjective() {
  }

  public ServiceLevelObjective calendarPeriod(CalendarPeriodEnum calendarPeriod) {
    this.calendarPeriod = calendarPeriod;
    return this;
  }

  /**
   * A calendar period, semantically \&quot;since the start of the current \&quot;. At this time, only DAY, WEEK, FORTNIGHT, and MONTH are supported.
   * @return calendarPeriod
   */
  @javax.annotation.Nullable
  public CalendarPeriodEnum getCalendarPeriod() {
    return calendarPeriod;
  }

  public void setCalendarPeriod(CalendarPeriodEnum calendarPeriod) {
    this.calendarPeriod = calendarPeriod;
  }


  public ServiceLevelObjective displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Name used for UI elements listing this SLO.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public ServiceLevelObjective goal(Double goal) {
    this.goal = goal;
    return this;
  }

  /**
   * The fraction of service that must be good in order for this objective to be met. 0 &lt; goal &lt;&#x3D; 0.999.
   * @return goal
   */
  @javax.annotation.Nullable
  public Double getGoal() {
    return goal;
  }

  public void setGoal(Double goal) {
    this.goal = goal;
  }


  public ServiceLevelObjective name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Resource name for this ServiceLevelObjective. The format is: projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]/serviceLevelObjectives/[SLO_NAME] 
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ServiceLevelObjective rollingPeriod(String rollingPeriod) {
    this.rollingPeriod = rollingPeriod;
    return this;
  }

  /**
   * A rolling time period, semantically \&quot;in the past \&quot;. Must be an integer multiple of 1 day no larger than 30 days.
   * @return rollingPeriod
   */
  @javax.annotation.Nullable
  public String getRollingPeriod() {
    return rollingPeriod;
  }

  public void setRollingPeriod(String rollingPeriod) {
    this.rollingPeriod = rollingPeriod;
  }


  public ServiceLevelObjective serviceLevelIndicator(ServiceLevelIndicator serviceLevelIndicator) {
    this.serviceLevelIndicator = serviceLevelIndicator;
    return this;
  }

  /**
   * Get serviceLevelIndicator
   * @return serviceLevelIndicator
   */
  @javax.annotation.Nullable
  public ServiceLevelIndicator getServiceLevelIndicator() {
    return serviceLevelIndicator;
  }

  public void setServiceLevelIndicator(ServiceLevelIndicator serviceLevelIndicator) {
    this.serviceLevelIndicator = serviceLevelIndicator;
  }


  public ServiceLevelObjective userLabels(Map<String, String> userLabels) {
    this.userLabels = userLabels;
    return this;
  }

  public ServiceLevelObjective putUserLabelsItem(String key, String userLabelsItem) {
    if (this.userLabels == null) {
      this.userLabels = new HashMap<>();
    }
    this.userLabels.put(key, userLabelsItem);
    return this;
  }

  /**
   * Labels which have been used to annotate the service-level objective. Label keys must start with a letter. Label keys and values may contain lowercase letters, numbers, underscores, and dashes. Label keys and values have a maximum length of 63 characters, and must be less than 128 bytes in size. Up to 64 label entries may be stored. For labels which do not have a semantic value, the empty string may be supplied for the label value.
   * @return userLabels
   */
  @javax.annotation.Nullable
  public Map<String, String> getUserLabels() {
    return userLabels;
  }

  public void setUserLabels(Map<String, String> userLabels) {
    this.userLabels = userLabels;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceLevelObjective serviceLevelObjective = (ServiceLevelObjective) o;
    return Objects.equals(this.calendarPeriod, serviceLevelObjective.calendarPeriod) &&
        Objects.equals(this.displayName, serviceLevelObjective.displayName) &&
        Objects.equals(this.goal, serviceLevelObjective.goal) &&
        Objects.equals(this.name, serviceLevelObjective.name) &&
        Objects.equals(this.rollingPeriod, serviceLevelObjective.rollingPeriod) &&
        Objects.equals(this.serviceLevelIndicator, serviceLevelObjective.serviceLevelIndicator) &&
        Objects.equals(this.userLabels, serviceLevelObjective.userLabels);
  }

  @Override
  public int hashCode() {
    return Objects.hash(calendarPeriod, displayName, goal, name, rollingPeriod, serviceLevelIndicator, userLabels);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceLevelObjective {\n");
    sb.append("    calendarPeriod: ").append(toIndentedString(calendarPeriod)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    goal: ").append(toIndentedString(goal)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    rollingPeriod: ").append(toIndentedString(rollingPeriod)).append("\n");
    sb.append("    serviceLevelIndicator: ").append(toIndentedString(serviceLevelIndicator)).append("\n");
    sb.append("    userLabels: ").append(toIndentedString(userLabels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("calendarPeriod");
    openapiFields.add("displayName");
    openapiFields.add("goal");
    openapiFields.add("name");
    openapiFields.add("rollingPeriod");
    openapiFields.add("serviceLevelIndicator");
    openapiFields.add("userLabels");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceLevelObjective
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceLevelObjective.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceLevelObjective is not found in the empty JSON string", ServiceLevelObjective.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceLevelObjective.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceLevelObjective` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("calendarPeriod") != null && !jsonObj.get("calendarPeriod").isJsonNull()) && !jsonObj.get("calendarPeriod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `calendarPeriod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("calendarPeriod").toString()));
      }
      // validate the optional field `calendarPeriod`
      if (jsonObj.get("calendarPeriod") != null && !jsonObj.get("calendarPeriod").isJsonNull()) {
        CalendarPeriodEnum.validateJsonElement(jsonObj.get("calendarPeriod"));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("rollingPeriod") != null && !jsonObj.get("rollingPeriod").isJsonNull()) && !jsonObj.get("rollingPeriod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rollingPeriod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rollingPeriod").toString()));
      }
      // validate the optional field `serviceLevelIndicator`
      if (jsonObj.get("serviceLevelIndicator") != null && !jsonObj.get("serviceLevelIndicator").isJsonNull()) {
        ServiceLevelIndicator.validateJsonElement(jsonObj.get("serviceLevelIndicator"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceLevelObjective.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceLevelObjective' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceLevelObjective> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceLevelObjective.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceLevelObjective>() {
           @Override
           public void write(JsonWriter out, ServiceLevelObjective value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceLevelObjective read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceLevelObjective given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceLevelObjective
   * @throws IOException if the JSON string is invalid with respect to ServiceLevelObjective
   */
  public static ServiceLevelObjective fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceLevelObjective.class);
  }

  /**
   * Convert an instance of ServiceLevelObjective to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

