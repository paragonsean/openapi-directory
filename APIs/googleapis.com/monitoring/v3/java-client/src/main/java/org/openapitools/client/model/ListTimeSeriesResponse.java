/*
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Status;
import org.openapitools.client.model.TimeSeries;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The ListTimeSeries response.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:42.831469-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListTimeSeriesResponse {
  public static final String SERIALIZED_NAME_EXECUTION_ERRORS = "executionErrors";
  @SerializedName(SERIALIZED_NAME_EXECUTION_ERRORS)
  private List<Status> executionErrors = new ArrayList<>();

  public static final String SERIALIZED_NAME_NEXT_PAGE_TOKEN = "nextPageToken";
  @SerializedName(SERIALIZED_NAME_NEXT_PAGE_TOKEN)
  private String nextPageToken;

  public static final String SERIALIZED_NAME_TIME_SERIES = "timeSeries";
  @SerializedName(SERIALIZED_NAME_TIME_SERIES)
  private List<TimeSeries> timeSeries = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private String unit;

  public ListTimeSeriesResponse() {
  }

  public ListTimeSeriesResponse executionErrors(List<Status> executionErrors) {
    this.executionErrors = executionErrors;
    return this;
  }

  public ListTimeSeriesResponse addExecutionErrorsItem(Status executionErrorsItem) {
    if (this.executionErrors == null) {
      this.executionErrors = new ArrayList<>();
    }
    this.executionErrors.add(executionErrorsItem);
    return this;
  }

  /**
   * Query execution errors that may have caused the time series data returned to be incomplete.
   * @return executionErrors
   */
  @javax.annotation.Nullable
  public List<Status> getExecutionErrors() {
    return executionErrors;
  }

  public void setExecutionErrors(List<Status> executionErrors) {
    this.executionErrors = executionErrors;
  }


  public ListTimeSeriesResponse nextPageToken(String nextPageToken) {
    this.nextPageToken = nextPageToken;
    return this;
  }

  /**
   * If there are more results than have been returned, then this field is set to a non-empty value. To see the additional results, use that value as page_token in the next call to this method.
   * @return nextPageToken
   */
  @javax.annotation.Nullable
  public String getNextPageToken() {
    return nextPageToken;
  }

  public void setNextPageToken(String nextPageToken) {
    this.nextPageToken = nextPageToken;
  }


  public ListTimeSeriesResponse timeSeries(List<TimeSeries> timeSeries) {
    this.timeSeries = timeSeries;
    return this;
  }

  public ListTimeSeriesResponse addTimeSeriesItem(TimeSeries timeSeriesItem) {
    if (this.timeSeries == null) {
      this.timeSeries = new ArrayList<>();
    }
    this.timeSeries.add(timeSeriesItem);
    return this;
  }

  /**
   * One or more time series that match the filter included in the request.
   * @return timeSeries
   */
  @javax.annotation.Nullable
  public List<TimeSeries> getTimeSeries() {
    return timeSeries;
  }

  public void setTimeSeries(List<TimeSeries> timeSeries) {
    this.timeSeries = timeSeries;
  }


  public ListTimeSeriesResponse unit(String unit) {
    this.unit = unit;
    return this;
  }

  /**
   * The unit in which all time_series point values are reported. unit follows the UCUM format for units as seen in https://unitsofmeasure.org/ucum.html. If different time_series have different units (for example, because they come from different metric types, or a unit is absent), then unit will be \&quot;{not_a_unit}\&quot;.
   * @return unit
   */
  @javax.annotation.Nullable
  public String getUnit() {
    return unit;
  }

  public void setUnit(String unit) {
    this.unit = unit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListTimeSeriesResponse listTimeSeriesResponse = (ListTimeSeriesResponse) o;
    return Objects.equals(this.executionErrors, listTimeSeriesResponse.executionErrors) &&
        Objects.equals(this.nextPageToken, listTimeSeriesResponse.nextPageToken) &&
        Objects.equals(this.timeSeries, listTimeSeriesResponse.timeSeries) &&
        Objects.equals(this.unit, listTimeSeriesResponse.unit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(executionErrors, nextPageToken, timeSeries, unit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListTimeSeriesResponse {\n");
    sb.append("    executionErrors: ").append(toIndentedString(executionErrors)).append("\n");
    sb.append("    nextPageToken: ").append(toIndentedString(nextPageToken)).append("\n");
    sb.append("    timeSeries: ").append(toIndentedString(timeSeries)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("executionErrors");
    openapiFields.add("nextPageToken");
    openapiFields.add("timeSeries");
    openapiFields.add("unit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListTimeSeriesResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListTimeSeriesResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListTimeSeriesResponse is not found in the empty JSON string", ListTimeSeriesResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListTimeSeriesResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListTimeSeriesResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("executionErrors") != null && !jsonObj.get("executionErrors").isJsonNull()) {
        JsonArray jsonArrayexecutionErrors = jsonObj.getAsJsonArray("executionErrors");
        if (jsonArrayexecutionErrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("executionErrors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `executionErrors` to be an array in the JSON string but got `%s`", jsonObj.get("executionErrors").toString()));
          }

          // validate the optional field `executionErrors` (array)
          for (int i = 0; i < jsonArrayexecutionErrors.size(); i++) {
            Status.validateJsonElement(jsonArrayexecutionErrors.get(i));
          };
        }
      }
      if ((jsonObj.get("nextPageToken") != null && !jsonObj.get("nextPageToken").isJsonNull()) && !jsonObj.get("nextPageToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextPageToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextPageToken").toString()));
      }
      if (jsonObj.get("timeSeries") != null && !jsonObj.get("timeSeries").isJsonNull()) {
        JsonArray jsonArraytimeSeries = jsonObj.getAsJsonArray("timeSeries");
        if (jsonArraytimeSeries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("timeSeries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `timeSeries` to be an array in the JSON string but got `%s`", jsonObj.get("timeSeries").toString()));
          }

          // validate the optional field `timeSeries` (array)
          for (int i = 0; i < jsonArraytimeSeries.size(); i++) {
            TimeSeries.validateJsonElement(jsonArraytimeSeries.get(i));
          };
        }
      }
      if ((jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) && !jsonObj.get("unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListTimeSeriesResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListTimeSeriesResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListTimeSeriesResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListTimeSeriesResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ListTimeSeriesResponse>() {
           @Override
           public void write(JsonWriter out, ListTimeSeriesResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListTimeSeriesResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListTimeSeriesResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListTimeSeriesResponse
   * @throws IOException if the JSON string is invalid with respect to ListTimeSeriesResponse
   */
  public static ListTimeSeriesResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListTimeSeriesResponse.class);
  }

  /**
   * Convert an instance of ListTimeSeriesResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

