/*
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Status;
import org.openapitools.client.model.TimeSeriesData;
import org.openapitools.client.model.TimeSeriesDescriptor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The QueryTimeSeries response.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:42.831469-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QueryTimeSeriesResponse {
  public static final String SERIALIZED_NAME_NEXT_PAGE_TOKEN = "nextPageToken";
  @SerializedName(SERIALIZED_NAME_NEXT_PAGE_TOKEN)
  private String nextPageToken;

  public static final String SERIALIZED_NAME_PARTIAL_ERRORS = "partialErrors";
  @SerializedName(SERIALIZED_NAME_PARTIAL_ERRORS)
  private List<Status> partialErrors = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIME_SERIES_DATA = "timeSeriesData";
  @SerializedName(SERIALIZED_NAME_TIME_SERIES_DATA)
  private List<TimeSeriesData> timeSeriesData = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIME_SERIES_DESCRIPTOR = "timeSeriesDescriptor";
  @SerializedName(SERIALIZED_NAME_TIME_SERIES_DESCRIPTOR)
  private TimeSeriesDescriptor timeSeriesDescriptor;

  public QueryTimeSeriesResponse() {
  }

  public QueryTimeSeriesResponse nextPageToken(String nextPageToken) {
    this.nextPageToken = nextPageToken;
    return this;
  }

  /**
   * If there are more results than have been returned, then this field is set to a non-empty value. To see the additional results, use that value as page_token in the next call to this method.
   * @return nextPageToken
   */
  @javax.annotation.Nullable
  public String getNextPageToken() {
    return nextPageToken;
  }

  public void setNextPageToken(String nextPageToken) {
    this.nextPageToken = nextPageToken;
  }


  public QueryTimeSeriesResponse partialErrors(List<Status> partialErrors) {
    this.partialErrors = partialErrors;
    return this;
  }

  public QueryTimeSeriesResponse addPartialErrorsItem(Status partialErrorsItem) {
    if (this.partialErrors == null) {
      this.partialErrors = new ArrayList<>();
    }
    this.partialErrors.add(partialErrorsItem);
    return this;
  }

  /**
   * Query execution errors that may have caused the time series data returned to be incomplete. The available data will be available in the response.
   * @return partialErrors
   */
  @javax.annotation.Nullable
  public List<Status> getPartialErrors() {
    return partialErrors;
  }

  public void setPartialErrors(List<Status> partialErrors) {
    this.partialErrors = partialErrors;
  }


  public QueryTimeSeriesResponse timeSeriesData(List<TimeSeriesData> timeSeriesData) {
    this.timeSeriesData = timeSeriesData;
    return this;
  }

  public QueryTimeSeriesResponse addTimeSeriesDataItem(TimeSeriesData timeSeriesDataItem) {
    if (this.timeSeriesData == null) {
      this.timeSeriesData = new ArrayList<>();
    }
    this.timeSeriesData.add(timeSeriesDataItem);
    return this;
  }

  /**
   * The time series data.
   * @return timeSeriesData
   */
  @javax.annotation.Nullable
  public List<TimeSeriesData> getTimeSeriesData() {
    return timeSeriesData;
  }

  public void setTimeSeriesData(List<TimeSeriesData> timeSeriesData) {
    this.timeSeriesData = timeSeriesData;
  }


  public QueryTimeSeriesResponse timeSeriesDescriptor(TimeSeriesDescriptor timeSeriesDescriptor) {
    this.timeSeriesDescriptor = timeSeriesDescriptor;
    return this;
  }

  /**
   * Get timeSeriesDescriptor
   * @return timeSeriesDescriptor
   */
  @javax.annotation.Nullable
  public TimeSeriesDescriptor getTimeSeriesDescriptor() {
    return timeSeriesDescriptor;
  }

  public void setTimeSeriesDescriptor(TimeSeriesDescriptor timeSeriesDescriptor) {
    this.timeSeriesDescriptor = timeSeriesDescriptor;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryTimeSeriesResponse queryTimeSeriesResponse = (QueryTimeSeriesResponse) o;
    return Objects.equals(this.nextPageToken, queryTimeSeriesResponse.nextPageToken) &&
        Objects.equals(this.partialErrors, queryTimeSeriesResponse.partialErrors) &&
        Objects.equals(this.timeSeriesData, queryTimeSeriesResponse.timeSeriesData) &&
        Objects.equals(this.timeSeriesDescriptor, queryTimeSeriesResponse.timeSeriesDescriptor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nextPageToken, partialErrors, timeSeriesData, timeSeriesDescriptor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryTimeSeriesResponse {\n");
    sb.append("    nextPageToken: ").append(toIndentedString(nextPageToken)).append("\n");
    sb.append("    partialErrors: ").append(toIndentedString(partialErrors)).append("\n");
    sb.append("    timeSeriesData: ").append(toIndentedString(timeSeriesData)).append("\n");
    sb.append("    timeSeriesDescriptor: ").append(toIndentedString(timeSeriesDescriptor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("nextPageToken");
    openapiFields.add("partialErrors");
    openapiFields.add("timeSeriesData");
    openapiFields.add("timeSeriesDescriptor");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueryTimeSeriesResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueryTimeSeriesResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryTimeSeriesResponse is not found in the empty JSON string", QueryTimeSeriesResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueryTimeSeriesResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueryTimeSeriesResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("nextPageToken") != null && !jsonObj.get("nextPageToken").isJsonNull()) && !jsonObj.get("nextPageToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextPageToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextPageToken").toString()));
      }
      if (jsonObj.get("partialErrors") != null && !jsonObj.get("partialErrors").isJsonNull()) {
        JsonArray jsonArraypartialErrors = jsonObj.getAsJsonArray("partialErrors");
        if (jsonArraypartialErrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("partialErrors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `partialErrors` to be an array in the JSON string but got `%s`", jsonObj.get("partialErrors").toString()));
          }

          // validate the optional field `partialErrors` (array)
          for (int i = 0; i < jsonArraypartialErrors.size(); i++) {
            Status.validateJsonElement(jsonArraypartialErrors.get(i));
          };
        }
      }
      if (jsonObj.get("timeSeriesData") != null && !jsonObj.get("timeSeriesData").isJsonNull()) {
        JsonArray jsonArraytimeSeriesData = jsonObj.getAsJsonArray("timeSeriesData");
        if (jsonArraytimeSeriesData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("timeSeriesData").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `timeSeriesData` to be an array in the JSON string but got `%s`", jsonObj.get("timeSeriesData").toString()));
          }

          // validate the optional field `timeSeriesData` (array)
          for (int i = 0; i < jsonArraytimeSeriesData.size(); i++) {
            TimeSeriesData.validateJsonElement(jsonArraytimeSeriesData.get(i));
          };
        }
      }
      // validate the optional field `timeSeriesDescriptor`
      if (jsonObj.get("timeSeriesDescriptor") != null && !jsonObj.get("timeSeriesDescriptor").isJsonNull()) {
        TimeSeriesDescriptor.validateJsonElement(jsonObj.get("timeSeriesDescriptor"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryTimeSeriesResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryTimeSeriesResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryTimeSeriesResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryTimeSeriesResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryTimeSeriesResponse>() {
           @Override
           public void write(JsonWriter out, QueryTimeSeriesResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryTimeSeriesResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueryTimeSeriesResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueryTimeSeriesResponse
   * @throws IOException if the JSON string is invalid with respect to QueryTimeSeriesResponse
   */
  public static QueryTimeSeriesResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryTimeSeriesResponse.class);
  }

  /**
   * Convert an instance of QueryTimeSeriesResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

