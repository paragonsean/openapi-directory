/*
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.AppEngine;
import org.openapitools.client.model.BasicService;
import org.openapitools.client.model.CloudEndpoints;
import org.openapitools.client.model.CloudRun;
import org.openapitools.client.model.ClusterIstio;
import org.openapitools.client.model.GkeNamespace;
import org.openapitools.client.model.GkeService;
import org.openapitools.client.model.GkeWorkload;
import org.openapitools.client.model.IstioCanonicalService;
import org.openapitools.client.model.MeshIstio;
import org.openapitools.client.model.Telemetry;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Service is a discrete, autonomous, and network-accessible unit, designed to solve an individual concern (Wikipedia (https://en.wikipedia.org/wiki/Service-orientation)). In Cloud Monitoring, a Service acts as the root resource under which operational aspects of the service are accessible.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:42.831469-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Service {
  public static final String SERIALIZED_NAME_APP_ENGINE = "appEngine";
  @SerializedName(SERIALIZED_NAME_APP_ENGINE)
  private AppEngine appEngine;

  public static final String SERIALIZED_NAME_BASIC_SERVICE = "basicService";
  @SerializedName(SERIALIZED_NAME_BASIC_SERVICE)
  private BasicService basicService;

  public static final String SERIALIZED_NAME_CLOUD_ENDPOINTS = "cloudEndpoints";
  @SerializedName(SERIALIZED_NAME_CLOUD_ENDPOINTS)
  private CloudEndpoints cloudEndpoints;

  public static final String SERIALIZED_NAME_CLOUD_RUN = "cloudRun";
  @SerializedName(SERIALIZED_NAME_CLOUD_RUN)
  private CloudRun cloudRun;

  public static final String SERIALIZED_NAME_CLUSTER_ISTIO = "clusterIstio";
  @SerializedName(SERIALIZED_NAME_CLUSTER_ISTIO)
  private ClusterIstio clusterIstio;

  public static final String SERIALIZED_NAME_CUSTOM = "custom";
  @SerializedName(SERIALIZED_NAME_CUSTOM)
  private Object custom;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_GKE_NAMESPACE = "gkeNamespace";
  @SerializedName(SERIALIZED_NAME_GKE_NAMESPACE)
  private GkeNamespace gkeNamespace;

  public static final String SERIALIZED_NAME_GKE_SERVICE = "gkeService";
  @SerializedName(SERIALIZED_NAME_GKE_SERVICE)
  private GkeService gkeService;

  public static final String SERIALIZED_NAME_GKE_WORKLOAD = "gkeWorkload";
  @SerializedName(SERIALIZED_NAME_GKE_WORKLOAD)
  private GkeWorkload gkeWorkload;

  public static final String SERIALIZED_NAME_ISTIO_CANONICAL_SERVICE = "istioCanonicalService";
  @SerializedName(SERIALIZED_NAME_ISTIO_CANONICAL_SERVICE)
  private IstioCanonicalService istioCanonicalService;

  public static final String SERIALIZED_NAME_MESH_ISTIO = "meshIstio";
  @SerializedName(SERIALIZED_NAME_MESH_ISTIO)
  private MeshIstio meshIstio;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TELEMETRY = "telemetry";
  @SerializedName(SERIALIZED_NAME_TELEMETRY)
  private Telemetry telemetry;

  public static final String SERIALIZED_NAME_USER_LABELS = "userLabels";
  @SerializedName(SERIALIZED_NAME_USER_LABELS)
  private Map<String, String> userLabels = new HashMap<>();

  public Service() {
  }

  public Service appEngine(AppEngine appEngine) {
    this.appEngine = appEngine;
    return this;
  }

  /**
   * Get appEngine
   * @return appEngine
   */
  @javax.annotation.Nullable
  public AppEngine getAppEngine() {
    return appEngine;
  }

  public void setAppEngine(AppEngine appEngine) {
    this.appEngine = appEngine;
  }


  public Service basicService(BasicService basicService) {
    this.basicService = basicService;
    return this;
  }

  /**
   * Get basicService
   * @return basicService
   */
  @javax.annotation.Nullable
  public BasicService getBasicService() {
    return basicService;
  }

  public void setBasicService(BasicService basicService) {
    this.basicService = basicService;
  }


  public Service cloudEndpoints(CloudEndpoints cloudEndpoints) {
    this.cloudEndpoints = cloudEndpoints;
    return this;
  }

  /**
   * Get cloudEndpoints
   * @return cloudEndpoints
   */
  @javax.annotation.Nullable
  public CloudEndpoints getCloudEndpoints() {
    return cloudEndpoints;
  }

  public void setCloudEndpoints(CloudEndpoints cloudEndpoints) {
    this.cloudEndpoints = cloudEndpoints;
  }


  public Service cloudRun(CloudRun cloudRun) {
    this.cloudRun = cloudRun;
    return this;
  }

  /**
   * Get cloudRun
   * @return cloudRun
   */
  @javax.annotation.Nullable
  public CloudRun getCloudRun() {
    return cloudRun;
  }

  public void setCloudRun(CloudRun cloudRun) {
    this.cloudRun = cloudRun;
  }


  public Service clusterIstio(ClusterIstio clusterIstio) {
    this.clusterIstio = clusterIstio;
    return this;
  }

  /**
   * Get clusterIstio
   * @return clusterIstio
   */
  @javax.annotation.Nullable
  public ClusterIstio getClusterIstio() {
    return clusterIstio;
  }

  public void setClusterIstio(ClusterIstio clusterIstio) {
    this.clusterIstio = clusterIstio;
  }


  public Service custom(Object custom) {
    this.custom = custom;
    return this;
  }

  /**
   * Use a custom service to designate a service that you want to monitor when none of the other service types (like App Engine, Cloud Run, or a GKE type) matches your intended service.
   * @return custom
   */
  @javax.annotation.Nullable
  public Object getCustom() {
    return custom;
  }

  public void setCustom(Object custom) {
    this.custom = custom;
  }


  public Service displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Name used for UI elements listing this Service.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public Service gkeNamespace(GkeNamespace gkeNamespace) {
    this.gkeNamespace = gkeNamespace;
    return this;
  }

  /**
   * Get gkeNamespace
   * @return gkeNamespace
   */
  @javax.annotation.Nullable
  public GkeNamespace getGkeNamespace() {
    return gkeNamespace;
  }

  public void setGkeNamespace(GkeNamespace gkeNamespace) {
    this.gkeNamespace = gkeNamespace;
  }


  public Service gkeService(GkeService gkeService) {
    this.gkeService = gkeService;
    return this;
  }

  /**
   * Get gkeService
   * @return gkeService
   */
  @javax.annotation.Nullable
  public GkeService getGkeService() {
    return gkeService;
  }

  public void setGkeService(GkeService gkeService) {
    this.gkeService = gkeService;
  }


  public Service gkeWorkload(GkeWorkload gkeWorkload) {
    this.gkeWorkload = gkeWorkload;
    return this;
  }

  /**
   * Get gkeWorkload
   * @return gkeWorkload
   */
  @javax.annotation.Nullable
  public GkeWorkload getGkeWorkload() {
    return gkeWorkload;
  }

  public void setGkeWorkload(GkeWorkload gkeWorkload) {
    this.gkeWorkload = gkeWorkload;
  }


  public Service istioCanonicalService(IstioCanonicalService istioCanonicalService) {
    this.istioCanonicalService = istioCanonicalService;
    return this;
  }

  /**
   * Get istioCanonicalService
   * @return istioCanonicalService
   */
  @javax.annotation.Nullable
  public IstioCanonicalService getIstioCanonicalService() {
    return istioCanonicalService;
  }

  public void setIstioCanonicalService(IstioCanonicalService istioCanonicalService) {
    this.istioCanonicalService = istioCanonicalService;
  }


  public Service meshIstio(MeshIstio meshIstio) {
    this.meshIstio = meshIstio;
    return this;
  }

  /**
   * Get meshIstio
   * @return meshIstio
   */
  @javax.annotation.Nullable
  public MeshIstio getMeshIstio() {
    return meshIstio;
  }

  public void setMeshIstio(MeshIstio meshIstio) {
    this.meshIstio = meshIstio;
  }


  public Service name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Resource name for this Service. The format is: projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID] 
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Service telemetry(Telemetry telemetry) {
    this.telemetry = telemetry;
    return this;
  }

  /**
   * Get telemetry
   * @return telemetry
   */
  @javax.annotation.Nullable
  public Telemetry getTelemetry() {
    return telemetry;
  }

  public void setTelemetry(Telemetry telemetry) {
    this.telemetry = telemetry;
  }


  public Service userLabels(Map<String, String> userLabels) {
    this.userLabels = userLabels;
    return this;
  }

  public Service putUserLabelsItem(String key, String userLabelsItem) {
    if (this.userLabels == null) {
      this.userLabels = new HashMap<>();
    }
    this.userLabels.put(key, userLabelsItem);
    return this;
  }

  /**
   * Labels which have been used to annotate the service. Label keys must start with a letter. Label keys and values may contain lowercase letters, numbers, underscores, and dashes. Label keys and values have a maximum length of 63 characters, and must be less than 128 bytes in size. Up to 64 label entries may be stored. For labels which do not have a semantic value, the empty string may be supplied for the label value.
   * @return userLabels
   */
  @javax.annotation.Nullable
  public Map<String, String> getUserLabels() {
    return userLabels;
  }

  public void setUserLabels(Map<String, String> userLabels) {
    this.userLabels = userLabels;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Service service = (Service) o;
    return Objects.equals(this.appEngine, service.appEngine) &&
        Objects.equals(this.basicService, service.basicService) &&
        Objects.equals(this.cloudEndpoints, service.cloudEndpoints) &&
        Objects.equals(this.cloudRun, service.cloudRun) &&
        Objects.equals(this.clusterIstio, service.clusterIstio) &&
        Objects.equals(this.custom, service.custom) &&
        Objects.equals(this.displayName, service.displayName) &&
        Objects.equals(this.gkeNamespace, service.gkeNamespace) &&
        Objects.equals(this.gkeService, service.gkeService) &&
        Objects.equals(this.gkeWorkload, service.gkeWorkload) &&
        Objects.equals(this.istioCanonicalService, service.istioCanonicalService) &&
        Objects.equals(this.meshIstio, service.meshIstio) &&
        Objects.equals(this.name, service.name) &&
        Objects.equals(this.telemetry, service.telemetry) &&
        Objects.equals(this.userLabels, service.userLabels);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appEngine, basicService, cloudEndpoints, cloudRun, clusterIstio, custom, displayName, gkeNamespace, gkeService, gkeWorkload, istioCanonicalService, meshIstio, name, telemetry, userLabels);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Service {\n");
    sb.append("    appEngine: ").append(toIndentedString(appEngine)).append("\n");
    sb.append("    basicService: ").append(toIndentedString(basicService)).append("\n");
    sb.append("    cloudEndpoints: ").append(toIndentedString(cloudEndpoints)).append("\n");
    sb.append("    cloudRun: ").append(toIndentedString(cloudRun)).append("\n");
    sb.append("    clusterIstio: ").append(toIndentedString(clusterIstio)).append("\n");
    sb.append("    custom: ").append(toIndentedString(custom)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    gkeNamespace: ").append(toIndentedString(gkeNamespace)).append("\n");
    sb.append("    gkeService: ").append(toIndentedString(gkeService)).append("\n");
    sb.append("    gkeWorkload: ").append(toIndentedString(gkeWorkload)).append("\n");
    sb.append("    istioCanonicalService: ").append(toIndentedString(istioCanonicalService)).append("\n");
    sb.append("    meshIstio: ").append(toIndentedString(meshIstio)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    telemetry: ").append(toIndentedString(telemetry)).append("\n");
    sb.append("    userLabels: ").append(toIndentedString(userLabels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appEngine");
    openapiFields.add("basicService");
    openapiFields.add("cloudEndpoints");
    openapiFields.add("cloudRun");
    openapiFields.add("clusterIstio");
    openapiFields.add("custom");
    openapiFields.add("displayName");
    openapiFields.add("gkeNamespace");
    openapiFields.add("gkeService");
    openapiFields.add("gkeWorkload");
    openapiFields.add("istioCanonicalService");
    openapiFields.add("meshIstio");
    openapiFields.add("name");
    openapiFields.add("telemetry");
    openapiFields.add("userLabels");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Service
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Service.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Service is not found in the empty JSON string", Service.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Service.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Service` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `appEngine`
      if (jsonObj.get("appEngine") != null && !jsonObj.get("appEngine").isJsonNull()) {
        AppEngine.validateJsonElement(jsonObj.get("appEngine"));
      }
      // validate the optional field `basicService`
      if (jsonObj.get("basicService") != null && !jsonObj.get("basicService").isJsonNull()) {
        BasicService.validateJsonElement(jsonObj.get("basicService"));
      }
      // validate the optional field `cloudEndpoints`
      if (jsonObj.get("cloudEndpoints") != null && !jsonObj.get("cloudEndpoints").isJsonNull()) {
        CloudEndpoints.validateJsonElement(jsonObj.get("cloudEndpoints"));
      }
      // validate the optional field `cloudRun`
      if (jsonObj.get("cloudRun") != null && !jsonObj.get("cloudRun").isJsonNull()) {
        CloudRun.validateJsonElement(jsonObj.get("cloudRun"));
      }
      // validate the optional field `clusterIstio`
      if (jsonObj.get("clusterIstio") != null && !jsonObj.get("clusterIstio").isJsonNull()) {
        ClusterIstio.validateJsonElement(jsonObj.get("clusterIstio"));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the optional field `gkeNamespace`
      if (jsonObj.get("gkeNamespace") != null && !jsonObj.get("gkeNamespace").isJsonNull()) {
        GkeNamespace.validateJsonElement(jsonObj.get("gkeNamespace"));
      }
      // validate the optional field `gkeService`
      if (jsonObj.get("gkeService") != null && !jsonObj.get("gkeService").isJsonNull()) {
        GkeService.validateJsonElement(jsonObj.get("gkeService"));
      }
      // validate the optional field `gkeWorkload`
      if (jsonObj.get("gkeWorkload") != null && !jsonObj.get("gkeWorkload").isJsonNull()) {
        GkeWorkload.validateJsonElement(jsonObj.get("gkeWorkload"));
      }
      // validate the optional field `istioCanonicalService`
      if (jsonObj.get("istioCanonicalService") != null && !jsonObj.get("istioCanonicalService").isJsonNull()) {
        IstioCanonicalService.validateJsonElement(jsonObj.get("istioCanonicalService"));
      }
      // validate the optional field `meshIstio`
      if (jsonObj.get("meshIstio") != null && !jsonObj.get("meshIstio").isJsonNull()) {
        MeshIstio.validateJsonElement(jsonObj.get("meshIstio"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `telemetry`
      if (jsonObj.get("telemetry") != null && !jsonObj.get("telemetry").isJsonNull()) {
        Telemetry.validateJsonElement(jsonObj.get("telemetry"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Service.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Service' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Service> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Service.class));

       return (TypeAdapter<T>) new TypeAdapter<Service>() {
           @Override
           public void write(JsonWriter out, Service value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Service read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Service given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Service
   * @throws IOException if the JSON string is invalid with respect to Service
   */
  public static Service fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Service.class);
  }

  /**
   * Convert an instance of Service to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

