/*
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LabelDescriptor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A description of a notification channel. The descriptor includes the properties of the channel and the set of labels or fields that must be specified to configure channels of a given type.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:42.831469-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NotificationChannelDescriptor {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<LabelDescriptor> labels = new ArrayList<>();

  /**
   * The product launch stage for channels of this type.
   */
  @JsonAdapter(LaunchStageEnum.Adapter.class)
  public enum LaunchStageEnum {
    LAUNCH_STAGE_UNSPECIFIED("LAUNCH_STAGE_UNSPECIFIED"),
    
    UNIMPLEMENTED("UNIMPLEMENTED"),
    
    PRELAUNCH("PRELAUNCH"),
    
    EARLY_ACCESS("EARLY_ACCESS"),
    
    ALPHA("ALPHA"),
    
    BETA("BETA"),
    
    GA("GA"),
    
    DEPRECATED("DEPRECATED");

    private String value;

    LaunchStageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LaunchStageEnum fromValue(String value) {
      for (LaunchStageEnum b : LaunchStageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LaunchStageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LaunchStageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LaunchStageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LaunchStageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LaunchStageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LAUNCH_STAGE = "launchStage";
  @SerializedName(SERIALIZED_NAME_LAUNCH_STAGE)
  private LaunchStageEnum launchStage;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Gets or Sets supportedTiers
   */
  @JsonAdapter(SupportedTiersEnum.Adapter.class)
  public enum SupportedTiersEnum {
    UNSPECIFIED("SERVICE_TIER_UNSPECIFIED"),
    
    BASIC("SERVICE_TIER_BASIC"),
    
    PREMIUM("SERVICE_TIER_PREMIUM");

    private String value;

    SupportedTiersEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SupportedTiersEnum fromValue(String value) {
      for (SupportedTiersEnum b : SupportedTiersEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SupportedTiersEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SupportedTiersEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SupportedTiersEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SupportedTiersEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SupportedTiersEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUPPORTED_TIERS = "supportedTiers";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_SUPPORTED_TIERS)
  private List<SupportedTiersEnum> supportedTiers = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public NotificationChannelDescriptor() {
  }

  public NotificationChannelDescriptor description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A human-readable description of the notification channel type. The description may include a description of the properties of the channel and pointers to external documentation.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public NotificationChannelDescriptor displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * A human-readable name for the notification channel type. This form of the name is suitable for a user interface.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public NotificationChannelDescriptor labels(List<LabelDescriptor> labels) {
    this.labels = labels;
    return this;
  }

  public NotificationChannelDescriptor addLabelsItem(LabelDescriptor labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

  /**
   * The set of labels that must be defined to identify a particular channel of the corresponding type. Each label includes a description for how that field should be populated.
   * @return labels
   */
  @javax.annotation.Nullable
  public List<LabelDescriptor> getLabels() {
    return labels;
  }

  public void setLabels(List<LabelDescriptor> labels) {
    this.labels = labels;
  }


  public NotificationChannelDescriptor launchStage(LaunchStageEnum launchStage) {
    this.launchStage = launchStage;
    return this;
  }

  /**
   * The product launch stage for channels of this type.
   * @return launchStage
   */
  @javax.annotation.Nullable
  public LaunchStageEnum getLaunchStage() {
    return launchStage;
  }

  public void setLaunchStage(LaunchStageEnum launchStage) {
    this.launchStage = launchStage;
  }


  public NotificationChannelDescriptor name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The full REST resource name for this descriptor. The format is: projects/[PROJECT_ID_OR_NUMBER]/notificationChannelDescriptors/[TYPE] In the above, [TYPE] is the value of the type field.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  @Deprecated
  public NotificationChannelDescriptor supportedTiers(List<SupportedTiersEnum> supportedTiers) {
    this.supportedTiers = supportedTiers;
    return this;
  }

  public NotificationChannelDescriptor addSupportedTiersItem(SupportedTiersEnum supportedTiersItem) {
    if (this.supportedTiers == null) {
      this.supportedTiers = new ArrayList<>();
    }
    this.supportedTiers.add(supportedTiersItem);
    return this;
  }

  /**
   * The tiers that support this notification channel; the project service tier must be one of the supported_tiers.
   * @return supportedTiers
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<SupportedTiersEnum> getSupportedTiers() {
    return supportedTiers;
  }

  @Deprecated
  public void setSupportedTiers(List<SupportedTiersEnum> supportedTiers) {
    this.supportedTiers = supportedTiers;
  }


  public NotificationChannelDescriptor type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of notification channel, such as \&quot;email\&quot; and \&quot;sms\&quot;. To view the full list of channels, see Channel descriptors (https://cloud.google.com/monitoring/alerts/using-channels-api#ncd). Notification channel types are globally unique.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationChannelDescriptor notificationChannelDescriptor = (NotificationChannelDescriptor) o;
    return Objects.equals(this.description, notificationChannelDescriptor.description) &&
        Objects.equals(this.displayName, notificationChannelDescriptor.displayName) &&
        Objects.equals(this.labels, notificationChannelDescriptor.labels) &&
        Objects.equals(this.launchStage, notificationChannelDescriptor.launchStage) &&
        Objects.equals(this.name, notificationChannelDescriptor.name) &&
        Objects.equals(this.supportedTiers, notificationChannelDescriptor.supportedTiers) &&
        Objects.equals(this.type, notificationChannelDescriptor.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, displayName, labels, launchStage, name, supportedTiers, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationChannelDescriptor {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    launchStage: ").append(toIndentedString(launchStage)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    supportedTiers: ").append(toIndentedString(supportedTiers)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("labels");
    openapiFields.add("launchStage");
    openapiFields.add("name");
    openapiFields.add("supportedTiers");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NotificationChannelDescriptor
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NotificationChannelDescriptor.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NotificationChannelDescriptor is not found in the empty JSON string", NotificationChannelDescriptor.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NotificationChannelDescriptor.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NotificationChannelDescriptor` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull()) {
        JsonArray jsonArraylabels = jsonObj.getAsJsonArray("labels");
        if (jsonArraylabels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("labels").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
          }

          // validate the optional field `labels` (array)
          for (int i = 0; i < jsonArraylabels.size(); i++) {
            LabelDescriptor.validateJsonElement(jsonArraylabels.get(i));
          };
        }
      }
      if ((jsonObj.get("launchStage") != null && !jsonObj.get("launchStage").isJsonNull()) && !jsonObj.get("launchStage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `launchStage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("launchStage").toString()));
      }
      // validate the optional field `launchStage`
      if (jsonObj.get("launchStage") != null && !jsonObj.get("launchStage").isJsonNull()) {
        LaunchStageEnum.validateJsonElement(jsonObj.get("launchStage"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("supportedTiers") != null && !jsonObj.get("supportedTiers").isJsonNull() && !jsonObj.get("supportedTiers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportedTiers` to be an array in the JSON string but got `%s`", jsonObj.get("supportedTiers").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NotificationChannelDescriptor.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NotificationChannelDescriptor' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NotificationChannelDescriptor> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NotificationChannelDescriptor.class));

       return (TypeAdapter<T>) new TypeAdapter<NotificationChannelDescriptor>() {
           @Override
           public void write(JsonWriter out, NotificationChannelDescriptor value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NotificationChannelDescriptor read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NotificationChannelDescriptor given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NotificationChannelDescriptor
   * @throws IOException if the JSON string is invalid with respect to NotificationChannelDescriptor
   */
  public static NotificationChannelDescriptor fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NotificationChannelDescriptor.class);
  }

  /**
   * Convert an instance of NotificationChannelDescriptor to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

