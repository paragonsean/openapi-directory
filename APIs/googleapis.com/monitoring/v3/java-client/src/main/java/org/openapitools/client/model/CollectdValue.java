/*
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TypedValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single data point from a collectd-based plugin.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:42.831469-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CollectdValue {
  public static final String SERIALIZED_NAME_DATA_SOURCE_NAME = "dataSourceName";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE_NAME)
  private String dataSourceName;

  /**
   * The type of measurement.
   */
  @JsonAdapter(DataSourceTypeEnum.Adapter.class)
  public enum DataSourceTypeEnum {
    UNSPECIFIED_DATA_SOURCE_TYPE("UNSPECIFIED_DATA_SOURCE_TYPE"),
    
    GAUGE("GAUGE"),
    
    COUNTER("COUNTER"),
    
    DERIVE("DERIVE"),
    
    ABSOLUTE("ABSOLUTE");

    private String value;

    DataSourceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataSourceTypeEnum fromValue(String value) {
      for (DataSourceTypeEnum b : DataSourceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataSourceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataSourceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataSourceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataSourceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DataSourceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATA_SOURCE_TYPE = "dataSourceType";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE_TYPE)
  private DataSourceTypeEnum dataSourceType;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private TypedValue value;

  public CollectdValue() {
  }

  public CollectdValue dataSourceName(String dataSourceName) {
    this.dataSourceName = dataSourceName;
    return this;
  }

  /**
   * The data source for the collectd value. For example, there are two data sources for network measurements: \&quot;rx\&quot; and \&quot;tx\&quot;.
   * @return dataSourceName
   */
  @javax.annotation.Nullable
  public String getDataSourceName() {
    return dataSourceName;
  }

  public void setDataSourceName(String dataSourceName) {
    this.dataSourceName = dataSourceName;
  }


  public CollectdValue dataSourceType(DataSourceTypeEnum dataSourceType) {
    this.dataSourceType = dataSourceType;
    return this;
  }

  /**
   * The type of measurement.
   * @return dataSourceType
   */
  @javax.annotation.Nullable
  public DataSourceTypeEnum getDataSourceType() {
    return dataSourceType;
  }

  public void setDataSourceType(DataSourceTypeEnum dataSourceType) {
    this.dataSourceType = dataSourceType;
  }


  public CollectdValue value(TypedValue value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nullable
  public TypedValue getValue() {
    return value;
  }

  public void setValue(TypedValue value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CollectdValue collectdValue = (CollectdValue) o;
    return Objects.equals(this.dataSourceName, collectdValue.dataSourceName) &&
        Objects.equals(this.dataSourceType, collectdValue.dataSourceType) &&
        Objects.equals(this.value, collectdValue.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataSourceName, dataSourceType, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CollectdValue {\n");
    sb.append("    dataSourceName: ").append(toIndentedString(dataSourceName)).append("\n");
    sb.append("    dataSourceType: ").append(toIndentedString(dataSourceType)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataSourceName");
    openapiFields.add("dataSourceType");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CollectdValue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CollectdValue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CollectdValue is not found in the empty JSON string", CollectdValue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CollectdValue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CollectdValue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dataSourceName") != null && !jsonObj.get("dataSourceName").isJsonNull()) && !jsonObj.get("dataSourceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSourceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSourceName").toString()));
      }
      if ((jsonObj.get("dataSourceType") != null && !jsonObj.get("dataSourceType").isJsonNull()) && !jsonObj.get("dataSourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSourceType").toString()));
      }
      // validate the optional field `dataSourceType`
      if (jsonObj.get("dataSourceType") != null && !jsonObj.get("dataSourceType").isJsonNull()) {
        DataSourceTypeEnum.validateJsonElement(jsonObj.get("dataSourceType"));
      }
      // validate the optional field `value`
      if (jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) {
        TypedValue.validateJsonElement(jsonObj.get("value"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CollectdValue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CollectdValue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CollectdValue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CollectdValue.class));

       return (TypeAdapter<T>) new TypeAdapter<CollectdValue>() {
           @Override
           public void write(JsonWriter out, CollectdValue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CollectdValue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CollectdValue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CollectdValue
   * @throws IOException if the JSON string is invalid with respect to CollectdValue
   */
  public static CollectdValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CollectdValue.class);
  }

  /**
   * Convert an instance of CollectdValue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

