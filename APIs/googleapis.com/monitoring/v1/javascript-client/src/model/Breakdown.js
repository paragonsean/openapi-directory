/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AggregationFunction from './AggregationFunction';

/**
 * The Breakdown model module.
 * @module model/Breakdown
 * @version v1
 */
class Breakdown {
    /**
     * Constructs a new <code>Breakdown</code>.
     * Preview: A breakdown is an aggregation applied to the measures over a specified column. A breakdown can result in multiple series across a category for the provided measure. This is a preview feature and may be subject to change before final release.
     * @alias module:model/Breakdown
     */
    constructor() { 
        
        Breakdown.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Breakdown</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Breakdown} obj Optional instance to populate.
     * @return {module:model/Breakdown} The populated <code>Breakdown</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Breakdown();

            if (data.hasOwnProperty('aggregationFunction')) {
                obj['aggregationFunction'] = AggregationFunction.constructFromObject(data['aggregationFunction']);
            }
            if (data.hasOwnProperty('column')) {
                obj['column'] = ApiClient.convertToType(data['column'], 'String');
            }
            if (data.hasOwnProperty('limit')) {
                obj['limit'] = ApiClient.convertToType(data['limit'], 'Number');
            }
            if (data.hasOwnProperty('sortOrder')) {
                obj['sortOrder'] = ApiClient.convertToType(data['sortOrder'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Breakdown</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Breakdown</code>.
     */
    static validateJSON(data) {
        // validate the optional field `aggregationFunction`
        if (data['aggregationFunction']) { // data not null
          AggregationFunction.validateJSON(data['aggregationFunction']);
        }
        // ensure the json data is a string
        if (data['column'] && !(typeof data['column'] === 'string' || data['column'] instanceof String)) {
            throw new Error("Expected the field `column` to be a primitive type in the JSON string but got " + data['column']);
        }
        // ensure the json data is a string
        if (data['sortOrder'] && !(typeof data['sortOrder'] === 'string' || data['sortOrder'] instanceof String)) {
            throw new Error("Expected the field `sortOrder` to be a primitive type in the JSON string but got " + data['sortOrder']);
        }

        return true;
    }


}



/**
 * @member {module:model/AggregationFunction} aggregationFunction
 */
Breakdown.prototype['aggregationFunction'] = undefined;

/**
 * Required. The name of the column in the dataset containing the breakdown values.
 * @member {String} column
 */
Breakdown.prototype['column'] = undefined;

/**
 * Required. A limit to the number of breakdowns. If set to zero then all possible breakdowns are applied. The list of breakdowns is dependent on the value of the sort_order field.
 * @member {Number} limit
 */
Breakdown.prototype['limit'] = undefined;

/**
 * Required. The sort order is applied to the values of the breakdown column.
 * @member {module:model/Breakdown.SortOrderEnum} sortOrder
 */
Breakdown.prototype['sortOrder'] = undefined;





/**
 * Allowed values for the <code>sortOrder</code> property.
 * @enum {String}
 * @readonly
 */
Breakdown['SortOrderEnum'] = {

    /**
     * value: "SORT_ORDER_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "SORT_ORDER_UNSPECIFIED",

    /**
     * value: "SORT_ORDER_NONE"
     * @const
     */
    "NONE": "SORT_ORDER_NONE",

    /**
     * value: "SORT_ORDER_ASCENDING"
     * @const
     */
    "ASCENDING": "SORT_ORDER_ASCENDING",

    /**
     * value: "SORT_ORDER_DESCENDING"
     * @const
     */
    "DESCENDING": "SORT_ORDER_DESCENDING"
};



export default Breakdown;

