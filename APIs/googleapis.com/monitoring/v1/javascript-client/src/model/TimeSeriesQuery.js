/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OpsAnalyticsQuery from './OpsAnalyticsQuery';
import TimeSeriesFilter from './TimeSeriesFilter';
import TimeSeriesFilterRatio from './TimeSeriesFilterRatio';

/**
 * The TimeSeriesQuery model module.
 * @module model/TimeSeriesQuery
 * @version v1
 */
class TimeSeriesQuery {
    /**
     * Constructs a new <code>TimeSeriesQuery</code>.
     * TimeSeriesQuery collects the set of supported methods for querying time series data from the Stackdriver metrics API.
     * @alias module:model/TimeSeriesQuery
     */
    constructor() { 
        
        TimeSeriesQuery.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TimeSeriesQuery</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TimeSeriesQuery} obj Optional instance to populate.
     * @return {module:model/TimeSeriesQuery} The populated <code>TimeSeriesQuery</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TimeSeriesQuery();

            if (data.hasOwnProperty('opsAnalyticsQuery')) {
                obj['opsAnalyticsQuery'] = OpsAnalyticsQuery.constructFromObject(data['opsAnalyticsQuery']);
            }
            if (data.hasOwnProperty('outputFullDuration')) {
                obj['outputFullDuration'] = ApiClient.convertToType(data['outputFullDuration'], 'Boolean');
            }
            if (data.hasOwnProperty('prometheusQuery')) {
                obj['prometheusQuery'] = ApiClient.convertToType(data['prometheusQuery'], 'String');
            }
            if (data.hasOwnProperty('timeSeriesFilter')) {
                obj['timeSeriesFilter'] = TimeSeriesFilter.constructFromObject(data['timeSeriesFilter']);
            }
            if (data.hasOwnProperty('timeSeriesFilterRatio')) {
                obj['timeSeriesFilterRatio'] = TimeSeriesFilterRatio.constructFromObject(data['timeSeriesFilterRatio']);
            }
            if (data.hasOwnProperty('timeSeriesQueryLanguage')) {
                obj['timeSeriesQueryLanguage'] = ApiClient.convertToType(data['timeSeriesQueryLanguage'], 'String');
            }
            if (data.hasOwnProperty('unitOverride')) {
                obj['unitOverride'] = ApiClient.convertToType(data['unitOverride'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TimeSeriesQuery</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TimeSeriesQuery</code>.
     */
    static validateJSON(data) {
        // validate the optional field `opsAnalyticsQuery`
        if (data['opsAnalyticsQuery']) { // data not null
          OpsAnalyticsQuery.validateJSON(data['opsAnalyticsQuery']);
        }
        // ensure the json data is a string
        if (data['prometheusQuery'] && !(typeof data['prometheusQuery'] === 'string' || data['prometheusQuery'] instanceof String)) {
            throw new Error("Expected the field `prometheusQuery` to be a primitive type in the JSON string but got " + data['prometheusQuery']);
        }
        // validate the optional field `timeSeriesFilter`
        if (data['timeSeriesFilter']) { // data not null
          TimeSeriesFilter.validateJSON(data['timeSeriesFilter']);
        }
        // validate the optional field `timeSeriesFilterRatio`
        if (data['timeSeriesFilterRatio']) { // data not null
          TimeSeriesFilterRatio.validateJSON(data['timeSeriesFilterRatio']);
        }
        // ensure the json data is a string
        if (data['timeSeriesQueryLanguage'] && !(typeof data['timeSeriesQueryLanguage'] === 'string' || data['timeSeriesQueryLanguage'] instanceof String)) {
            throw new Error("Expected the field `timeSeriesQueryLanguage` to be a primitive type in the JSON string but got " + data['timeSeriesQueryLanguage']);
        }
        // ensure the json data is a string
        if (data['unitOverride'] && !(typeof data['unitOverride'] === 'string' || data['unitOverride'] instanceof String)) {
            throw new Error("Expected the field `unitOverride` to be a primitive type in the JSON string but got " + data['unitOverride']);
        }

        return true;
    }


}



/**
 * @member {module:model/OpsAnalyticsQuery} opsAnalyticsQuery
 */
TimeSeriesQuery.prototype['opsAnalyticsQuery'] = undefined;

/**
 * Optional. If set, Cloud Monitoring will treat the full query duration as the alignment period so that there will be only 1 output value.*Note: This could override the configured alignment period except for the cases where a series of data points are expected, like - XyChart - Scorecard's spark chart
 * @member {Boolean} outputFullDuration
 */
TimeSeriesQuery.prototype['outputFullDuration'] = undefined;

/**
 * A query used to fetch time series with PromQL.
 * @member {String} prometheusQuery
 */
TimeSeriesQuery.prototype['prometheusQuery'] = undefined;

/**
 * @member {module:model/TimeSeriesFilter} timeSeriesFilter
 */
TimeSeriesQuery.prototype['timeSeriesFilter'] = undefined;

/**
 * @member {module:model/TimeSeriesFilterRatio} timeSeriesFilterRatio
 */
TimeSeriesQuery.prototype['timeSeriesFilterRatio'] = undefined;

/**
 * A query used to fetch time series with MQL.
 * @member {String} timeSeriesQueryLanguage
 */
TimeSeriesQuery.prototype['timeSeriesQueryLanguage'] = undefined;

/**
 * The unit of data contained in fetched time series. If non-empty, this unit will override any unit that accompanies fetched data. The format is the same as the unit (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors) field in MetricDescriptor.
 * @member {String} unitOverride
 */
TimeSeriesQuery.prototype['unitOverride'] = undefined;






export default TimeSeriesQuery;

