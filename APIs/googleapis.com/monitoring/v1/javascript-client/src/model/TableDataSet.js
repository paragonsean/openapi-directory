/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TableDisplayOptions from './TableDisplayOptions';
import TimeSeriesQuery from './TimeSeriesQuery';

/**
 * The TableDataSet model module.
 * @module model/TableDataSet
 * @version v1
 */
class TableDataSet {
    /**
     * Constructs a new <code>TableDataSet</code>.
     * Groups a time series query definition with table options.
     * @alias module:model/TableDataSet
     */
    constructor() { 
        
        TableDataSet.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TableDataSet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TableDataSet} obj Optional instance to populate.
     * @return {module:model/TableDataSet} The populated <code>TableDataSet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TableDataSet();

            if (data.hasOwnProperty('minAlignmentPeriod')) {
                obj['minAlignmentPeriod'] = ApiClient.convertToType(data['minAlignmentPeriod'], 'String');
            }
            if (data.hasOwnProperty('tableDisplayOptions')) {
                obj['tableDisplayOptions'] = TableDisplayOptions.constructFromObject(data['tableDisplayOptions']);
            }
            if (data.hasOwnProperty('tableTemplate')) {
                obj['tableTemplate'] = ApiClient.convertToType(data['tableTemplate'], 'String');
            }
            if (data.hasOwnProperty('timeSeriesQuery')) {
                obj['timeSeriesQuery'] = TimeSeriesQuery.constructFromObject(data['timeSeriesQuery']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TableDataSet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TableDataSet</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['minAlignmentPeriod'] && !(typeof data['minAlignmentPeriod'] === 'string' || data['minAlignmentPeriod'] instanceof String)) {
            throw new Error("Expected the field `minAlignmentPeriod` to be a primitive type in the JSON string but got " + data['minAlignmentPeriod']);
        }
        // validate the optional field `tableDisplayOptions`
        if (data['tableDisplayOptions']) { // data not null
          TableDisplayOptions.validateJSON(data['tableDisplayOptions']);
        }
        // ensure the json data is a string
        if (data['tableTemplate'] && !(typeof data['tableTemplate'] === 'string' || data['tableTemplate'] instanceof String)) {
            throw new Error("Expected the field `tableTemplate` to be a primitive type in the JSON string but got " + data['tableTemplate']);
        }
        // validate the optional field `timeSeriesQuery`
        if (data['timeSeriesQuery']) { // data not null
          TimeSeriesQuery.validateJSON(data['timeSeriesQuery']);
        }

        return true;
    }


}



/**
 * Optional. The lower bound on data point frequency for this data set, implemented by specifying the minimum alignment period to use in a time series query For example, if the data is published once every 10 minutes, the min_alignment_period should be at least 10 minutes. It would not make sense to fetch and align data at one minute intervals.
 * @member {String} minAlignmentPeriod
 */
TableDataSet.prototype['minAlignmentPeriod'] = undefined;

/**
 * @member {module:model/TableDisplayOptions} tableDisplayOptions
 */
TableDataSet.prototype['tableDisplayOptions'] = undefined;

/**
 * Optional. A template string for naming TimeSeries in the resulting data set. This should be a string with interpolations of the form ${label_name}, which will resolve to the label's value i.e. \"${resource.labels.project_id}.\"
 * @member {String} tableTemplate
 */
TableDataSet.prototype['tableTemplate'] = undefined;

/**
 * @member {module:model/TimeSeriesQuery} timeSeriesQuery
 */
TableDataSet.prototype['timeSeriesQuery'] = undefined;






export default TableDataSet;

