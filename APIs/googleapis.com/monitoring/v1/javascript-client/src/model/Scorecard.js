/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GaugeView from './GaugeView';
import SparkChartView from './SparkChartView';
import Threshold from './Threshold';
import TimeSeriesQuery from './TimeSeriesQuery';

/**
 * The Scorecard model module.
 * @module model/Scorecard
 * @version v1
 */
class Scorecard {
    /**
     * Constructs a new <code>Scorecard</code>.
     * A widget showing the latest value of a metric, and how this value relates to one or more thresholds.
     * @alias module:model/Scorecard
     */
    constructor() { 
        
        Scorecard.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Scorecard</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Scorecard} obj Optional instance to populate.
     * @return {module:model/Scorecard} The populated <code>Scorecard</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Scorecard();

            if (data.hasOwnProperty('blankView')) {
                obj['blankView'] = ApiClient.convertToType(data['blankView'], Object);
            }
            if (data.hasOwnProperty('gaugeView')) {
                obj['gaugeView'] = GaugeView.constructFromObject(data['gaugeView']);
            }
            if (data.hasOwnProperty('sparkChartView')) {
                obj['sparkChartView'] = SparkChartView.constructFromObject(data['sparkChartView']);
            }
            if (data.hasOwnProperty('thresholds')) {
                obj['thresholds'] = ApiClient.convertToType(data['thresholds'], [Threshold]);
            }
            if (data.hasOwnProperty('timeSeriesQuery')) {
                obj['timeSeriesQuery'] = TimeSeriesQuery.constructFromObject(data['timeSeriesQuery']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Scorecard</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Scorecard</code>.
     */
    static validateJSON(data) {
        // validate the optional field `gaugeView`
        if (data['gaugeView']) { // data not null
          GaugeView.validateJSON(data['gaugeView']);
        }
        // validate the optional field `sparkChartView`
        if (data['sparkChartView']) { // data not null
          SparkChartView.validateJSON(data['sparkChartView']);
        }
        if (data['thresholds']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['thresholds'])) {
                throw new Error("Expected the field `thresholds` to be an array in the JSON data but got " + data['thresholds']);
            }
            // validate the optional field `thresholds` (array)
            for (const item of data['thresholds']) {
                Threshold.validateJSON(item);
            };
        }
        // validate the optional field `timeSeriesQuery`
        if (data['timeSeriesQuery']) { // data not null
          TimeSeriesQuery.validateJSON(data['timeSeriesQuery']);
        }

        return true;
    }


}



/**
 * A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } 
 * @member {Object} blankView
 */
Scorecard.prototype['blankView'] = undefined;

/**
 * @member {module:model/GaugeView} gaugeView
 */
Scorecard.prototype['gaugeView'] = undefined;

/**
 * @member {module:model/SparkChartView} sparkChartView
 */
Scorecard.prototype['sparkChartView'] = undefined;

/**
 * The thresholds used to determine the state of the scorecard given the time series' current value. For an actual value x, the scorecard is in a danger state if x is less than or equal to a danger threshold that triggers below, or greater than or equal to a danger threshold that triggers above. Similarly, if x is above/below a warning threshold that triggers above/below, then the scorecard is in a warning state - unless x also puts it in a danger state. (Danger trumps warning.)As an example, consider a scorecard with the following four thresholds: { value: 90, category: 'DANGER', trigger: 'ABOVE', }, { value: 70, category: 'WARNING', trigger: 'ABOVE', }, { value: 10, category: 'DANGER', trigger: 'BELOW', }, { value: 20, category: 'WARNING', trigger: 'BELOW', } Then: values less than or equal to 10 would put the scorecard in a DANGER state, values greater than 10 but less than or equal to 20 a WARNING state, values strictly between 20 and 70 an OK state, values greater than or equal to 70 but less than 90 a WARNING state, and values greater than or equal to 90 a DANGER state.
 * @member {Array.<module:model/Threshold>} thresholds
 */
Scorecard.prototype['thresholds'] = undefined;

/**
 * @member {module:model/TimeSeriesQuery} timeSeriesQuery
 */
Scorecard.prototype['timeSeriesQuery'] = undefined;






export default Scorecard;

