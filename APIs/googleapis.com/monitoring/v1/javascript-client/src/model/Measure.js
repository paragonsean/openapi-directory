/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AggregationFunction from './AggregationFunction';

/**
 * The Measure model module.
 * @module model/Measure
 * @version v1
 */
class Measure {
    /**
     * Constructs a new <code>Measure</code>.
     * A chart measure. Measures represent a measured property in your chart data such as rainfall in inches, number of units sold, revenue gained, etc.
     * @alias module:model/Measure
     */
    constructor() { 
        
        Measure.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Measure</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Measure} obj Optional instance to populate.
     * @return {module:model/Measure} The populated <code>Measure</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Measure();

            if (data.hasOwnProperty('aggregationFunction')) {
                obj['aggregationFunction'] = AggregationFunction.constructFromObject(data['aggregationFunction']);
            }
            if (data.hasOwnProperty('column')) {
                obj['column'] = ApiClient.convertToType(data['column'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Measure</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Measure</code>.
     */
    static validateJSON(data) {
        // validate the optional field `aggregationFunction`
        if (data['aggregationFunction']) { // data not null
          AggregationFunction.validateJSON(data['aggregationFunction']);
        }
        // ensure the json data is a string
        if (data['column'] && !(typeof data['column'] === 'string' || data['column'] instanceof String)) {
            throw new Error("Expected the field `column` to be a primitive type in the JSON string but got " + data['column']);
        }

        return true;
    }


}



/**
 * @member {module:model/AggregationFunction} aggregationFunction
 */
Measure.prototype['aggregationFunction'] = undefined;

/**
 * Required. The column name within in the dataset used for the measure.
 * @member {String} column
 */
Measure.prototype['column'] = undefined;






export default Measure;

