/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DashboardFilter model module.
 * @module model/DashboardFilter
 * @version v1
 */
class DashboardFilter {
    /**
     * Constructs a new <code>DashboardFilter</code>.
     * A filter to reduce the amount of data charted in relevant widgets.
     * @alias module:model/DashboardFilter
     */
    constructor() { 
        
        DashboardFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DashboardFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DashboardFilter} obj Optional instance to populate.
     * @return {module:model/DashboardFilter} The populated <code>DashboardFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DashboardFilter();

            if (data.hasOwnProperty('filterType')) {
                obj['filterType'] = ApiClient.convertToType(data['filterType'], 'String');
            }
            if (data.hasOwnProperty('labelKey')) {
                obj['labelKey'] = ApiClient.convertToType(data['labelKey'], 'String');
            }
            if (data.hasOwnProperty('stringValue')) {
                obj['stringValue'] = ApiClient.convertToType(data['stringValue'], 'String');
            }
            if (data.hasOwnProperty('templateVariable')) {
                obj['templateVariable'] = ApiClient.convertToType(data['templateVariable'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DashboardFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DashboardFilter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['filterType'] && !(typeof data['filterType'] === 'string' || data['filterType'] instanceof String)) {
            throw new Error("Expected the field `filterType` to be a primitive type in the JSON string but got " + data['filterType']);
        }
        // ensure the json data is a string
        if (data['labelKey'] && !(typeof data['labelKey'] === 'string' || data['labelKey'] instanceof String)) {
            throw new Error("Expected the field `labelKey` to be a primitive type in the JSON string but got " + data['labelKey']);
        }
        // ensure the json data is a string
        if (data['stringValue'] && !(typeof data['stringValue'] === 'string' || data['stringValue'] instanceof String)) {
            throw new Error("Expected the field `stringValue` to be a primitive type in the JSON string but got " + data['stringValue']);
        }
        // ensure the json data is a string
        if (data['templateVariable'] && !(typeof data['templateVariable'] === 'string' || data['templateVariable'] instanceof String)) {
            throw new Error("Expected the field `templateVariable` to be a primitive type in the JSON string but got " + data['templateVariable']);
        }

        return true;
    }


}



/**
 * The specified filter type
 * @member {module:model/DashboardFilter.FilterTypeEnum} filterType
 */
DashboardFilter.prototype['filterType'] = undefined;

/**
 * Required. The key for the label
 * @member {String} labelKey
 */
DashboardFilter.prototype['labelKey'] = undefined;

/**
 * A variable-length string value.
 * @member {String} stringValue
 */
DashboardFilter.prototype['stringValue'] = undefined;

/**
 * The placeholder text that can be referenced in a filter string or MQL query. If omitted, the dashboard filter will be applied to all relevant widgets in the dashboard.
 * @member {String} templateVariable
 */
DashboardFilter.prototype['templateVariable'] = undefined;





/**
 * Allowed values for the <code>filterType</code> property.
 * @enum {String}
 * @readonly
 */
DashboardFilter['FilterTypeEnum'] = {

    /**
     * value: "FILTER_TYPE_UNSPECIFIED"
     * @const
     */
    "FILTER_TYPE_UNSPECIFIED": "FILTER_TYPE_UNSPECIFIED",

    /**
     * value: "RESOURCE_LABEL"
     * @const
     */
    "RESOURCE_LABEL": "RESOURCE_LABEL",

    /**
     * value: "METRIC_LABEL"
     * @const
     */
    "METRIC_LABEL": "METRIC_LABEL",

    /**
     * value: "USER_METADATA_LABEL"
     * @const
     */
    "USER_METADATA_LABEL": "USER_METADATA_LABEL",

    /**
     * value: "SYSTEM_METADATA_LABEL"
     * @const
     */
    "SYSTEM_METADATA_LABEL": "SYSTEM_METADATA_LABEL",

    /**
     * value: "GROUP"
     * @const
     */
    "GROUP": "GROUP"
};



export default DashboardFilter;

