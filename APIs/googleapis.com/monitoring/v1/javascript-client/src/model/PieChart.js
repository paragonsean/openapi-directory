/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PieChartDataSet from './PieChartDataSet';

/**
 * The PieChart model module.
 * @module model/PieChart
 * @version v1
 */
class PieChart {
    /**
     * Constructs a new <code>PieChart</code>.
     * A widget that displays timeseries data as a pie or a donut.
     * @alias module:model/PieChart
     */
    constructor() { 
        
        PieChart.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PieChart</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PieChart} obj Optional instance to populate.
     * @return {module:model/PieChart} The populated <code>PieChart</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PieChart();

            if (data.hasOwnProperty('chartType')) {
                obj['chartType'] = ApiClient.convertToType(data['chartType'], 'String');
            }
            if (data.hasOwnProperty('dataSets')) {
                obj['dataSets'] = ApiClient.convertToType(data['dataSets'], [PieChartDataSet]);
            }
            if (data.hasOwnProperty('showLabels')) {
                obj['showLabels'] = ApiClient.convertToType(data['showLabels'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PieChart</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PieChart</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['chartType'] && !(typeof data['chartType'] === 'string' || data['chartType'] instanceof String)) {
            throw new Error("Expected the field `chartType` to be a primitive type in the JSON string but got " + data['chartType']);
        }
        if (data['dataSets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dataSets'])) {
                throw new Error("Expected the field `dataSets` to be an array in the JSON data but got " + data['dataSets']);
            }
            // validate the optional field `dataSets` (array)
            for (const item of data['dataSets']) {
                PieChartDataSet.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Required. Indicates the visualization type for the PieChart.
 * @member {module:model/PieChart.ChartTypeEnum} chartType
 */
PieChart.prototype['chartType'] = undefined;

/**
 * Required. The queries for the chart's data.
 * @member {Array.<module:model/PieChartDataSet>} dataSets
 */
PieChart.prototype['dataSets'] = undefined;

/**
 * Optional. Indicates whether or not the pie chart should show slices' labels
 * @member {Boolean} showLabels
 */
PieChart.prototype['showLabels'] = undefined;





/**
 * Allowed values for the <code>chartType</code> property.
 * @enum {String}
 * @readonly
 */
PieChart['ChartTypeEnum'] = {

    /**
     * value: "PIE_CHART_TYPE_UNSPECIFIED"
     * @const
     */
    "PIE_CHART_TYPE_UNSPECIFIED": "PIE_CHART_TYPE_UNSPECIFIED",

    /**
     * value: "PIE"
     * @const
     */
    "PIE": "PIE",

    /**
     * value: "DONUT"
     * @const
     */
    "DONUT": "DONUT"
};



export default PieChart;

