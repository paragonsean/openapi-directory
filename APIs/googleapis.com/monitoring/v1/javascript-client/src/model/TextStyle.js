/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TextStyle model module.
 * @module model/TextStyle
 * @version v1
 */
class TextStyle {
    /**
     * Constructs a new <code>TextStyle</code>.
     * Properties that determine how the title and content are styled
     * @alias module:model/TextStyle
     */
    constructor() { 
        
        TextStyle.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TextStyle</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TextStyle} obj Optional instance to populate.
     * @return {module:model/TextStyle} The populated <code>TextStyle</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TextStyle();

            if (data.hasOwnProperty('backgroundColor')) {
                obj['backgroundColor'] = ApiClient.convertToType(data['backgroundColor'], 'String');
            }
            if (data.hasOwnProperty('fontSize')) {
                obj['fontSize'] = ApiClient.convertToType(data['fontSize'], 'String');
            }
            if (data.hasOwnProperty('horizontalAlignment')) {
                obj['horizontalAlignment'] = ApiClient.convertToType(data['horizontalAlignment'], 'String');
            }
            if (data.hasOwnProperty('padding')) {
                obj['padding'] = ApiClient.convertToType(data['padding'], 'String');
            }
            if (data.hasOwnProperty('pointerLocation')) {
                obj['pointerLocation'] = ApiClient.convertToType(data['pointerLocation'], 'String');
            }
            if (data.hasOwnProperty('textColor')) {
                obj['textColor'] = ApiClient.convertToType(data['textColor'], 'String');
            }
            if (data.hasOwnProperty('verticalAlignment')) {
                obj['verticalAlignment'] = ApiClient.convertToType(data['verticalAlignment'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TextStyle</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TextStyle</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['backgroundColor'] && !(typeof data['backgroundColor'] === 'string' || data['backgroundColor'] instanceof String)) {
            throw new Error("Expected the field `backgroundColor` to be a primitive type in the JSON string but got " + data['backgroundColor']);
        }
        // ensure the json data is a string
        if (data['fontSize'] && !(typeof data['fontSize'] === 'string' || data['fontSize'] instanceof String)) {
            throw new Error("Expected the field `fontSize` to be a primitive type in the JSON string but got " + data['fontSize']);
        }
        // ensure the json data is a string
        if (data['horizontalAlignment'] && !(typeof data['horizontalAlignment'] === 'string' || data['horizontalAlignment'] instanceof String)) {
            throw new Error("Expected the field `horizontalAlignment` to be a primitive type in the JSON string but got " + data['horizontalAlignment']);
        }
        // ensure the json data is a string
        if (data['padding'] && !(typeof data['padding'] === 'string' || data['padding'] instanceof String)) {
            throw new Error("Expected the field `padding` to be a primitive type in the JSON string but got " + data['padding']);
        }
        // ensure the json data is a string
        if (data['pointerLocation'] && !(typeof data['pointerLocation'] === 'string' || data['pointerLocation'] instanceof String)) {
            throw new Error("Expected the field `pointerLocation` to be a primitive type in the JSON string but got " + data['pointerLocation']);
        }
        // ensure the json data is a string
        if (data['textColor'] && !(typeof data['textColor'] === 'string' || data['textColor'] instanceof String)) {
            throw new Error("Expected the field `textColor` to be a primitive type in the JSON string but got " + data['textColor']);
        }
        // ensure the json data is a string
        if (data['verticalAlignment'] && !(typeof data['verticalAlignment'] === 'string' || data['verticalAlignment'] instanceof String)) {
            throw new Error("Expected the field `verticalAlignment` to be a primitive type in the JSON string but got " + data['verticalAlignment']);
        }

        return true;
    }


}



/**
 * The background color as a hex string. \"#RRGGBB\" or \"#RGB\"
 * @member {String} backgroundColor
 */
TextStyle.prototype['backgroundColor'] = undefined;

/**
 * Font sizes for both the title and content. The title will still be larger relative to the content.
 * @member {module:model/TextStyle.FontSizeEnum} fontSize
 */
TextStyle.prototype['fontSize'] = undefined;

/**
 * The horizontal alignment of both the title and content
 * @member {module:model/TextStyle.HorizontalAlignmentEnum} horizontalAlignment
 */
TextStyle.prototype['horizontalAlignment'] = undefined;

/**
 * The amount of padding around the widget
 * @member {module:model/TextStyle.PaddingEnum} padding
 */
TextStyle.prototype['padding'] = undefined;

/**
 * The pointer location for this widget (also sometimes called a \"tail\")
 * @member {module:model/TextStyle.PointerLocationEnum} pointerLocation
 */
TextStyle.prototype['pointerLocation'] = undefined;

/**
 * The text color as a hex string. \"#RRGGBB\" or \"#RGB\"
 * @member {String} textColor
 */
TextStyle.prototype['textColor'] = undefined;

/**
 * The vertical alignment of both the title and content
 * @member {module:model/TextStyle.VerticalAlignmentEnum} verticalAlignment
 */
TextStyle.prototype['verticalAlignment'] = undefined;





/**
 * Allowed values for the <code>fontSize</code> property.
 * @enum {String}
 * @readonly
 */
TextStyle['FontSizeEnum'] = {

    /**
     * value: "FONT_SIZE_UNSPECIFIED"
     * @const
     */
    "FONT_SIZE_UNSPECIFIED": "FONT_SIZE_UNSPECIFIED",

    /**
     * value: "FS_EXTRA_SMALL"
     * @const
     */
    "FS_EXTRA_SMALL": "FS_EXTRA_SMALL",

    /**
     * value: "FS_SMALL"
     * @const
     */
    "FS_SMALL": "FS_SMALL",

    /**
     * value: "FS_MEDIUM"
     * @const
     */
    "FS_MEDIUM": "FS_MEDIUM",

    /**
     * value: "FS_LARGE"
     * @const
     */
    "FS_LARGE": "FS_LARGE",

    /**
     * value: "FS_EXTRA_LARGE"
     * @const
     */
    "FS_EXTRA_LARGE": "FS_EXTRA_LARGE"
};


/**
 * Allowed values for the <code>horizontalAlignment</code> property.
 * @enum {String}
 * @readonly
 */
TextStyle['HorizontalAlignmentEnum'] = {

    /**
     * value: "HORIZONTAL_ALIGNMENT_UNSPECIFIED"
     * @const
     */
    "HORIZONTAL_ALIGNMENT_UNSPECIFIED": "HORIZONTAL_ALIGNMENT_UNSPECIFIED",

    /**
     * value: "H_LEFT"
     * @const
     */
    "H_LEFT": "H_LEFT",

    /**
     * value: "H_CENTER"
     * @const
     */
    "H_CENTER": "H_CENTER",

    /**
     * value: "H_RIGHT"
     * @const
     */
    "H_RIGHT": "H_RIGHT"
};


/**
 * Allowed values for the <code>padding</code> property.
 * @enum {String}
 * @readonly
 */
TextStyle['PaddingEnum'] = {

    /**
     * value: "PADDING_SIZE_UNSPECIFIED"
     * @const
     */
    "PADDING_SIZE_UNSPECIFIED": "PADDING_SIZE_UNSPECIFIED",

    /**
     * value: "P_EXTRA_SMALL"
     * @const
     */
    "P_EXTRA_SMALL": "P_EXTRA_SMALL",

    /**
     * value: "P_SMALL"
     * @const
     */
    "P_SMALL": "P_SMALL",

    /**
     * value: "P_MEDIUM"
     * @const
     */
    "P_MEDIUM": "P_MEDIUM",

    /**
     * value: "P_LARGE"
     * @const
     */
    "P_LARGE": "P_LARGE",

    /**
     * value: "P_EXTRA_LARGE"
     * @const
     */
    "P_EXTRA_LARGE": "P_EXTRA_LARGE"
};


/**
 * Allowed values for the <code>pointerLocation</code> property.
 * @enum {String}
 * @readonly
 */
TextStyle['PointerLocationEnum'] = {

    /**
     * value: "POINTER_LOCATION_UNSPECIFIED"
     * @const
     */
    "POINTER_LOCATION_UNSPECIFIED": "POINTER_LOCATION_UNSPECIFIED",

    /**
     * value: "PL_TOP"
     * @const
     */
    "PL_TOP": "PL_TOP",

    /**
     * value: "PL_RIGHT"
     * @const
     */
    "PL_RIGHT": "PL_RIGHT",

    /**
     * value: "PL_BOTTOM"
     * @const
     */
    "PL_BOTTOM": "PL_BOTTOM",

    /**
     * value: "PL_LEFT"
     * @const
     */
    "PL_LEFT": "PL_LEFT",

    /**
     * value: "PL_TOP_LEFT"
     * @const
     */
    "PL_TOP_LEFT": "PL_TOP_LEFT",

    /**
     * value: "PL_TOP_RIGHT"
     * @const
     */
    "PL_TOP_RIGHT": "PL_TOP_RIGHT",

    /**
     * value: "PL_RIGHT_TOP"
     * @const
     */
    "PL_RIGHT_TOP": "PL_RIGHT_TOP",

    /**
     * value: "PL_RIGHT_BOTTOM"
     * @const
     */
    "PL_RIGHT_BOTTOM": "PL_RIGHT_BOTTOM",

    /**
     * value: "PL_BOTTOM_RIGHT"
     * @const
     */
    "PL_BOTTOM_RIGHT": "PL_BOTTOM_RIGHT",

    /**
     * value: "PL_BOTTOM_LEFT"
     * @const
     */
    "PL_BOTTOM_LEFT": "PL_BOTTOM_LEFT",

    /**
     * value: "PL_LEFT_BOTTOM"
     * @const
     */
    "PL_LEFT_BOTTOM": "PL_LEFT_BOTTOM",

    /**
     * value: "PL_LEFT_TOP"
     * @const
     */
    "PL_LEFT_TOP": "PL_LEFT_TOP"
};


/**
 * Allowed values for the <code>verticalAlignment</code> property.
 * @enum {String}
 * @readonly
 */
TextStyle['VerticalAlignmentEnum'] = {

    /**
     * value: "VERTICAL_ALIGNMENT_UNSPECIFIED"
     * @const
     */
    "VERTICAL_ALIGNMENT_UNSPECIFIED": "VERTICAL_ALIGNMENT_UNSPECIFIED",

    /**
     * value: "V_TOP"
     * @const
     */
    "V_TOP": "V_TOP",

    /**
     * value: "V_CENTER"
     * @const
     */
    "V_CENTER": "V_CENTER",

    /**
     * value: "V_BOTTOM"
     * @const
     */
    "V_BOTTOM": "V_BOTTOM"
};



export default TextStyle;

