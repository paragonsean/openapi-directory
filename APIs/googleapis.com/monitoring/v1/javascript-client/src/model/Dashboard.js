/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ColumnLayout from './ColumnLayout';
import DashboardFilter from './DashboardFilter';
import GridLayout from './GridLayout';
import MosaicLayout from './MosaicLayout';
import RowLayout from './RowLayout';

/**
 * The Dashboard model module.
 * @module model/Dashboard
 * @version v1
 */
class Dashboard {
    /**
     * Constructs a new <code>Dashboard</code>.
     * A Google Stackdriver dashboard. Dashboards define the content and layout of pages in the Stackdriver web application.
     * @alias module:model/Dashboard
     */
    constructor() { 
        
        Dashboard.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Dashboard</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Dashboard} obj Optional instance to populate.
     * @return {module:model/Dashboard} The populated <code>Dashboard</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Dashboard();

            if (data.hasOwnProperty('columnLayout')) {
                obj['columnLayout'] = ColumnLayout.constructFromObject(data['columnLayout']);
            }
            if (data.hasOwnProperty('dashboardFilters')) {
                obj['dashboardFilters'] = ApiClient.convertToType(data['dashboardFilters'], [DashboardFilter]);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('gridLayout')) {
                obj['gridLayout'] = GridLayout.constructFromObject(data['gridLayout']);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('mosaicLayout')) {
                obj['mosaicLayout'] = MosaicLayout.constructFromObject(data['mosaicLayout']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('rowLayout')) {
                obj['rowLayout'] = RowLayout.constructFromObject(data['rowLayout']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Dashboard</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Dashboard</code>.
     */
    static validateJSON(data) {
        // validate the optional field `columnLayout`
        if (data['columnLayout']) { // data not null
          ColumnLayout.validateJSON(data['columnLayout']);
        }
        if (data['dashboardFilters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dashboardFilters'])) {
                throw new Error("Expected the field `dashboardFilters` to be an array in the JSON data but got " + data['dashboardFilters']);
            }
            // validate the optional field `dashboardFilters` (array)
            for (const item of data['dashboardFilters']) {
                DashboardFilter.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // validate the optional field `gridLayout`
        if (data['gridLayout']) { // data not null
          GridLayout.validateJSON(data['gridLayout']);
        }
        // validate the optional field `mosaicLayout`
        if (data['mosaicLayout']) { // data not null
          MosaicLayout.validateJSON(data['mosaicLayout']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `rowLayout`
        if (data['rowLayout']) { // data not null
          RowLayout.validateJSON(data['rowLayout']);
        }

        return true;
    }


}



/**
 * @member {module:model/ColumnLayout} columnLayout
 */
Dashboard.prototype['columnLayout'] = undefined;

/**
 * Filters to reduce the amount of data charted based on the filter criteria.
 * @member {Array.<module:model/DashboardFilter>} dashboardFilters
 */
Dashboard.prototype['dashboardFilters'] = undefined;

/**
 * Required. The mutable, human-readable name.
 * @member {String} displayName
 */
Dashboard.prototype['displayName'] = undefined;

/**
 * etag is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. An etag is returned in the response to GetDashboard, and users are expected to put that etag in the request to UpdateDashboard to ensure that their change will be applied to the same version of the Dashboard configuration. The field should not be passed during dashboard creation.
 * @member {String} etag
 */
Dashboard.prototype['etag'] = undefined;

/**
 * @member {module:model/GridLayout} gridLayout
 */
Dashboard.prototype['gridLayout'] = undefined;

/**
 * Labels applied to the dashboard
 * @member {Object.<String, String>} labels
 */
Dashboard.prototype['labels'] = undefined;

/**
 * @member {module:model/MosaicLayout} mosaicLayout
 */
Dashboard.prototype['mosaicLayout'] = undefined;

/**
 * Identifier. The resource name of the dashboard.
 * @member {String} name
 */
Dashboard.prototype['name'] = undefined;

/**
 * @member {module:model/RowLayout} rowLayout
 */
Dashboard.prototype['rowLayout'] = undefined;






export default Dashboard;

