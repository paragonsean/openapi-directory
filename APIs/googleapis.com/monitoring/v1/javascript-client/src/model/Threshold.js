/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Threshold model module.
 * @module model/Threshold
 * @version v1
 */
class Threshold {
    /**
     * Constructs a new <code>Threshold</code>.
     * Defines a threshold for categorizing time series values.
     * @alias module:model/Threshold
     */
    constructor() { 
        
        Threshold.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Threshold</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Threshold} obj Optional instance to populate.
     * @return {module:model/Threshold} The populated <code>Threshold</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Threshold();

            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('direction')) {
                obj['direction'] = ApiClient.convertToType(data['direction'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('targetAxis')) {
                obj['targetAxis'] = ApiClient.convertToType(data['targetAxis'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Threshold</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Threshold</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['color'] && !(typeof data['color'] === 'string' || data['color'] instanceof String)) {
            throw new Error("Expected the field `color` to be a primitive type in the JSON string but got " + data['color']);
        }
        // ensure the json data is a string
        if (data['direction'] && !(typeof data['direction'] === 'string' || data['direction'] instanceof String)) {
            throw new Error("Expected the field `direction` to be a primitive type in the JSON string but got " + data['direction']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['targetAxis'] && !(typeof data['targetAxis'] === 'string' || data['targetAxis'] instanceof String)) {
            throw new Error("Expected the field `targetAxis` to be a primitive type in the JSON string but got " + data['targetAxis']);
        }

        return true;
    }


}



/**
 * The state color for this threshold. Color is not allowed in a XyChart.
 * @member {module:model/Threshold.ColorEnum} color
 */
Threshold.prototype['color'] = undefined;

/**
 * The direction for the current threshold. Direction is not allowed in a XyChart.
 * @member {module:model/Threshold.DirectionEnum} direction
 */
Threshold.prototype['direction'] = undefined;

/**
 * A label for the threshold.
 * @member {String} label
 */
Threshold.prototype['label'] = undefined;

/**
 * The target axis to use for plotting the threshold. Target axis is not allowed in a Scorecard.
 * @member {module:model/Threshold.TargetAxisEnum} targetAxis
 */
Threshold.prototype['targetAxis'] = undefined;

/**
 * The value of the threshold. The value should be defined in the native scale of the metric.
 * @member {Number} value
 */
Threshold.prototype['value'] = undefined;





/**
 * Allowed values for the <code>color</code> property.
 * @enum {String}
 * @readonly
 */
Threshold['ColorEnum'] = {

    /**
     * value: "COLOR_UNSPECIFIED"
     * @const
     */
    "COLOR_UNSPECIFIED": "COLOR_UNSPECIFIED",

    /**
     * value: "YELLOW"
     * @const
     */
    "YELLOW": "YELLOW",

    /**
     * value: "RED"
     * @const
     */
    "RED": "RED"
};


/**
 * Allowed values for the <code>direction</code> property.
 * @enum {String}
 * @readonly
 */
Threshold['DirectionEnum'] = {

    /**
     * value: "DIRECTION_UNSPECIFIED"
     * @const
     */
    "DIRECTION_UNSPECIFIED": "DIRECTION_UNSPECIFIED",

    /**
     * value: "ABOVE"
     * @const
     */
    "ABOVE": "ABOVE",

    /**
     * value: "BELOW"
     * @const
     */
    "BELOW": "BELOW"
};


/**
 * Allowed values for the <code>targetAxis</code> property.
 * @enum {String}
 * @readonly
 */
Threshold['TargetAxisEnum'] = {

    /**
     * value: "TARGET_AXIS_UNSPECIFIED"
     * @const
     */
    "TARGET_AXIS_UNSPECIFIED": "TARGET_AXIS_UNSPECIFIED",

    /**
     * value: "Y1"
     * @const
     */
    "Y1": "Y1",

    /**
     * value: "Y2"
     * @const
     */
    "Y2": "Y2"
};



export default Threshold;

