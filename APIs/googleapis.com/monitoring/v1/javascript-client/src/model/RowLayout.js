/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Row from './Row';

/**
 * The RowLayout model module.
 * @module model/RowLayout
 * @version v1
 */
class RowLayout {
    /**
     * Constructs a new <code>RowLayout</code>.
     * A simplified layout that divides the available space into rows and arranges a set of widgets horizontally in each row.
     * @alias module:model/RowLayout
     */
    constructor() { 
        
        RowLayout.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RowLayout</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RowLayout} obj Optional instance to populate.
     * @return {module:model/RowLayout} The populated <code>RowLayout</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RowLayout();

            if (data.hasOwnProperty('rows')) {
                obj['rows'] = ApiClient.convertToType(data['rows'], [Row]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RowLayout</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RowLayout</code>.
     */
    static validateJSON(data) {
        if (data['rows']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rows'])) {
                throw new Error("Expected the field `rows` to be an array in the JSON data but got " + data['rows']);
            }
            // validate the optional field `rows` (array)
            for (const item of data['rows']) {
                Row.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The rows of content to display.
 * @member {Array.<module:model/Row>} rows
 */
RowLayout.prototype['rows'] = undefined;






export default RowLayout;

