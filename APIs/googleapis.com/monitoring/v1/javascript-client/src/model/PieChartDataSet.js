/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Dimension from './Dimension';
import Measure from './Measure';
import TimeSeriesQuery from './TimeSeriesQuery';

/**
 * The PieChartDataSet model module.
 * @module model/PieChartDataSet
 * @version v1
 */
class PieChartDataSet {
    /**
     * Constructs a new <code>PieChartDataSet</code>.
     * Groups a time series query definition.
     * @alias module:model/PieChartDataSet
     */
    constructor() { 
        
        PieChartDataSet.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PieChartDataSet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PieChartDataSet} obj Optional instance to populate.
     * @return {module:model/PieChartDataSet} The populated <code>PieChartDataSet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PieChartDataSet();

            if (data.hasOwnProperty('dimensions')) {
                obj['dimensions'] = ApiClient.convertToType(data['dimensions'], [Dimension]);
            }
            if (data.hasOwnProperty('measures')) {
                obj['measures'] = ApiClient.convertToType(data['measures'], [Measure]);
            }
            if (data.hasOwnProperty('minAlignmentPeriod')) {
                obj['minAlignmentPeriod'] = ApiClient.convertToType(data['minAlignmentPeriod'], 'String');
            }
            if (data.hasOwnProperty('sliceNameTemplate')) {
                obj['sliceNameTemplate'] = ApiClient.convertToType(data['sliceNameTemplate'], 'String');
            }
            if (data.hasOwnProperty('timeSeriesQuery')) {
                obj['timeSeriesQuery'] = TimeSeriesQuery.constructFromObject(data['timeSeriesQuery']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PieChartDataSet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PieChartDataSet</code>.
     */
    static validateJSON(data) {
        if (data['dimensions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dimensions'])) {
                throw new Error("Expected the field `dimensions` to be an array in the JSON data but got " + data['dimensions']);
            }
            // validate the optional field `dimensions` (array)
            for (const item of data['dimensions']) {
                Dimension.validateJSON(item);
            };
        }
        if (data['measures']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['measures'])) {
                throw new Error("Expected the field `measures` to be an array in the JSON data but got " + data['measures']);
            }
            // validate the optional field `measures` (array)
            for (const item of data['measures']) {
                Measure.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['minAlignmentPeriod'] && !(typeof data['minAlignmentPeriod'] === 'string' || data['minAlignmentPeriod'] instanceof String)) {
            throw new Error("Expected the field `minAlignmentPeriod` to be a primitive type in the JSON string but got " + data['minAlignmentPeriod']);
        }
        // ensure the json data is a string
        if (data['sliceNameTemplate'] && !(typeof data['sliceNameTemplate'] === 'string' || data['sliceNameTemplate'] instanceof String)) {
            throw new Error("Expected the field `sliceNameTemplate` to be a primitive type in the JSON string but got " + data['sliceNameTemplate']);
        }
        // validate the optional field `timeSeriesQuery`
        if (data['timeSeriesQuery']) { // data not null
          TimeSeriesQuery.validateJSON(data['timeSeriesQuery']);
        }

        return true;
    }


}



/**
 * A dimension is a structured label, class, or category for a set of measurements in your data.
 * @member {Array.<module:model/Dimension>} dimensions
 */
PieChartDataSet.prototype['dimensions'] = undefined;

/**
 * A measure is a measured value of a property in your data. For example, rainfall in inches, number of units sold, revenue gained, etc.
 * @member {Array.<module:model/Measure>} measures
 */
PieChartDataSet.prototype['measures'] = undefined;

/**
 * Optional. The lower bound on data point frequency for this data set, implemented by specifying the minimum alignment period to use in a time series query. For example, if the data is published once every 10 minutes, the min_alignment_period should be at least 10 minutes. It would not make sense to fetch and align data at one minute intervals.
 * @member {String} minAlignmentPeriod
 */
PieChartDataSet.prototype['minAlignmentPeriod'] = undefined;

/**
 * Optional. A template for the name of the slice. This name will be displayed in the legend and the tooltip of the pie chart. It replaces the auto-generated names for the slices. For example, if the template is set to ${resource.labels.zone}, the zone's value will be used for the name instead of the default name.
 * @member {String} sliceNameTemplate
 */
PieChartDataSet.prototype['sliceNameTemplate'] = undefined;

/**
 * @member {module:model/TimeSeriesQuery} timeSeriesQuery
 */
PieChartDataSet.prototype['timeSeriesQuery'] = undefined;






export default PieChartDataSet;

