/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SpanContext model module.
 * @module model/SpanContext
 * @version v1
 */
class SpanContext {
    /**
     * Constructs a new <code>SpanContext</code>.
     * The context of a span. This is attached to an Exemplar in Distribution values during aggregation.It contains the name of a span with format: projects/[PROJECT_ID_OR_NUMBER]/traces/[TRACE_ID]/spans/[SPAN_ID] 
     * @alias module:model/SpanContext
     */
    constructor() { 
        
        SpanContext.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SpanContext</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SpanContext} obj Optional instance to populate.
     * @return {module:model/SpanContext} The populated <code>SpanContext</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SpanContext();

            if (data.hasOwnProperty('spanName')) {
                obj['spanName'] = ApiClient.convertToType(data['spanName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SpanContext</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SpanContext</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['spanName'] && !(typeof data['spanName'] === 'string' || data['spanName'] instanceof String)) {
            throw new Error("Expected the field `spanName` to be a primitive type in the JSON string but got " + data['spanName']);
        }

        return true;
    }


}



/**
 * The resource name of the span. The format is: projects/[PROJECT_ID_OR_NUMBER]/traces/[TRACE_ID]/spans/[SPAN_ID] [TRACE_ID] is a unique identifier for a trace within a project; it is a 32-character hexadecimal encoding of a 16-byte array.[SPAN_ID] is a unique identifier for a span within a trace; it is a 16-character hexadecimal encoding of an 8-byte array.
 * @member {String} spanName
 */
SpanContext.prototype['spanName'] = undefined;






export default SpanContext;

