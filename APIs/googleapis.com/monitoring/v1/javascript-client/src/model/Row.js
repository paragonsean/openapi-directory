/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Widget from './Widget';

/**
 * The Row model module.
 * @module model/Row
 * @version v1
 */
class Row {
    /**
     * Constructs a new <code>Row</code>.
     * Defines the layout properties and content for a row.
     * @alias module:model/Row
     */
    constructor() { 
        
        Row.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Row</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Row} obj Optional instance to populate.
     * @return {module:model/Row} The populated <code>Row</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Row();

            if (data.hasOwnProperty('weight')) {
                obj['weight'] = ApiClient.convertToType(data['weight'], 'String');
            }
            if (data.hasOwnProperty('widgets')) {
                obj['widgets'] = ApiClient.convertToType(data['widgets'], [Widget]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Row</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Row</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['weight'] && !(typeof data['weight'] === 'string' || data['weight'] instanceof String)) {
            throw new Error("Expected the field `weight` to be a primitive type in the JSON string but got " + data['weight']);
        }
        if (data['widgets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['widgets'])) {
                throw new Error("Expected the field `widgets` to be an array in the JSON data but got " + data['widgets']);
            }
            // validate the optional field `widgets` (array)
            for (const item of data['widgets']) {
                Widget.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The relative weight of this row. The row weight is used to adjust the height of rows on the screen (relative to peers). Greater the weight, greater the height of the row on the screen. If omitted, a value of 1 is used while rendering.
 * @member {String} weight
 */
Row.prototype['weight'] = undefined;

/**
 * The display widgets arranged horizontally in this row.
 * @member {Array.<module:model/Widget>} widgets
 */
Row.prototype['widgets'] = undefined;






export default Row;

