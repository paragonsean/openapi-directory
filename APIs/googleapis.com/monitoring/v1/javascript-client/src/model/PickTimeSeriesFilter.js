/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Interval from './Interval';

/**
 * The PickTimeSeriesFilter model module.
 * @module model/PickTimeSeriesFilter
 * @version v1
 */
class PickTimeSeriesFilter {
    /**
     * Constructs a new <code>PickTimeSeriesFilter</code>.
     * Describes a ranking-based time series filter. Each input time series is ranked with an aligner. The filter will allow up to num_time_series time series to pass through it, selecting them based on the relative ranking.For example, if ranking_method is METHOD_MEAN,direction is BOTTOM, and num_time_series is 3, then the 3 times series with the lowest mean values will pass through the filter.
     * @alias module:model/PickTimeSeriesFilter
     */
    constructor() { 
        
        PickTimeSeriesFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PickTimeSeriesFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PickTimeSeriesFilter} obj Optional instance to populate.
     * @return {module:model/PickTimeSeriesFilter} The populated <code>PickTimeSeriesFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PickTimeSeriesFilter();

            if (data.hasOwnProperty('direction')) {
                obj['direction'] = ApiClient.convertToType(data['direction'], 'String');
            }
            if (data.hasOwnProperty('interval')) {
                obj['interval'] = Interval.constructFromObject(data['interval']);
            }
            if (data.hasOwnProperty('numTimeSeries')) {
                obj['numTimeSeries'] = ApiClient.convertToType(data['numTimeSeries'], 'Number');
            }
            if (data.hasOwnProperty('rankingMethod')) {
                obj['rankingMethod'] = ApiClient.convertToType(data['rankingMethod'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PickTimeSeriesFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PickTimeSeriesFilter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['direction'] && !(typeof data['direction'] === 'string' || data['direction'] instanceof String)) {
            throw new Error("Expected the field `direction` to be a primitive type in the JSON string but got " + data['direction']);
        }
        // validate the optional field `interval`
        if (data['interval']) { // data not null
          Interval.validateJSON(data['interval']);
        }
        // ensure the json data is a string
        if (data['rankingMethod'] && !(typeof data['rankingMethod'] === 'string' || data['rankingMethod'] instanceof String)) {
            throw new Error("Expected the field `rankingMethod` to be a primitive type in the JSON string but got " + data['rankingMethod']);
        }

        return true;
    }


}



/**
 * How to use the ranking to select time series that pass through the filter.
 * @member {module:model/PickTimeSeriesFilter.DirectionEnum} direction
 */
PickTimeSeriesFilter.prototype['direction'] = undefined;

/**
 * @member {module:model/Interval} interval
 */
PickTimeSeriesFilter.prototype['interval'] = undefined;

/**
 * How many time series to allow to pass through the filter.
 * @member {Number} numTimeSeries
 */
PickTimeSeriesFilter.prototype['numTimeSeries'] = undefined;

/**
 * ranking_method is applied to each time series independently to produce the value which will be used to compare the time series to other time series.
 * @member {module:model/PickTimeSeriesFilter.RankingMethodEnum} rankingMethod
 */
PickTimeSeriesFilter.prototype['rankingMethod'] = undefined;





/**
 * Allowed values for the <code>direction</code> property.
 * @enum {String}
 * @readonly
 */
PickTimeSeriesFilter['DirectionEnum'] = {

    /**
     * value: "DIRECTION_UNSPECIFIED"
     * @const
     */
    "DIRECTION_UNSPECIFIED": "DIRECTION_UNSPECIFIED",

    /**
     * value: "TOP"
     * @const
     */
    "TOP": "TOP",

    /**
     * value: "BOTTOM"
     * @const
     */
    "BOTTOM": "BOTTOM"
};


/**
 * Allowed values for the <code>rankingMethod</code> property.
 * @enum {String}
 * @readonly
 */
PickTimeSeriesFilter['RankingMethodEnum'] = {

    /**
     * value: "METHOD_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "METHOD_UNSPECIFIED",

    /**
     * value: "METHOD_MEAN"
     * @const
     */
    "MEAN": "METHOD_MEAN",

    /**
     * value: "METHOD_MAX"
     * @const
     */
    "MAX": "METHOD_MAX",

    /**
     * value: "METHOD_MIN"
     * @const
     */
    "MIN": "METHOD_MIN",

    /**
     * value: "METHOD_SUM"
     * @const
     */
    "SUM": "METHOD_SUM",

    /**
     * value: "METHOD_LATEST"
     * @const
     */
    "LATEST": "METHOD_LATEST"
};



export default PickTimeSeriesFilter;

