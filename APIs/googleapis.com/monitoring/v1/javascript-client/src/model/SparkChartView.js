/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SparkChartView model module.
 * @module model/SparkChartView
 * @version v1
 */
class SparkChartView {
    /**
     * Constructs a new <code>SparkChartView</code>.
     * A sparkChart is a small chart suitable for inclusion in a table-cell or inline in text. This message contains the configuration for a sparkChart to show up on a Scorecard, showing recent trends of the scorecard&#39;s timeseries.
     * @alias module:model/SparkChartView
     */
    constructor() { 
        
        SparkChartView.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SparkChartView</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SparkChartView} obj Optional instance to populate.
     * @return {module:model/SparkChartView} The populated <code>SparkChartView</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SparkChartView();

            if (data.hasOwnProperty('minAlignmentPeriod')) {
                obj['minAlignmentPeriod'] = ApiClient.convertToType(data['minAlignmentPeriod'], 'String');
            }
            if (data.hasOwnProperty('sparkChartType')) {
                obj['sparkChartType'] = ApiClient.convertToType(data['sparkChartType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SparkChartView</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SparkChartView</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['minAlignmentPeriod'] && !(typeof data['minAlignmentPeriod'] === 'string' || data['minAlignmentPeriod'] instanceof String)) {
            throw new Error("Expected the field `minAlignmentPeriod` to be a primitive type in the JSON string but got " + data['minAlignmentPeriod']);
        }
        // ensure the json data is a string
        if (data['sparkChartType'] && !(typeof data['sparkChartType'] === 'string' || data['sparkChartType'] instanceof String)) {
            throw new Error("Expected the field `sparkChartType` to be a primitive type in the JSON string but got " + data['sparkChartType']);
        }

        return true;
    }


}



/**
 * The lower bound on data point frequency in the chart implemented by specifying the minimum alignment period to use in a time series query. For example, if the data is published once every 10 minutes it would not make sense to fetch and align data at one minute intervals. This field is optional and exists only as a hint.
 * @member {String} minAlignmentPeriod
 */
SparkChartView.prototype['minAlignmentPeriod'] = undefined;

/**
 * Required. The type of sparkchart to show in this chartView.
 * @member {module:model/SparkChartView.SparkChartTypeEnum} sparkChartType
 */
SparkChartView.prototype['sparkChartType'] = undefined;





/**
 * Allowed values for the <code>sparkChartType</code> property.
 * @enum {String}
 * @readonly
 */
SparkChartView['SparkChartTypeEnum'] = {

    /**
     * value: "SPARK_CHART_TYPE_UNSPECIFIED"
     * @const
     */
    "CHART_TYPE_UNSPECIFIED": "SPARK_CHART_TYPE_UNSPECIFIED",

    /**
     * value: "SPARK_LINE"
     * @const
     */
    "LINE": "SPARK_LINE",

    /**
     * value: "SPARK_BAR"
     * @const
     */
    "BAR": "SPARK_BAR"
};



export default SparkChartView;

