/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Dimension model module.
 * @module model/Dimension
 * @version v1
 */
class Dimension {
    /**
     * Constructs a new <code>Dimension</code>.
     * A chart dimension. Dimensions are a structured label, class, or category for a set of measurements in your data.
     * @alias module:model/Dimension
     */
    constructor() { 
        
        Dimension.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Dimension</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Dimension} obj Optional instance to populate.
     * @return {module:model/Dimension} The populated <code>Dimension</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Dimension();

            if (data.hasOwnProperty('column')) {
                obj['column'] = ApiClient.convertToType(data['column'], 'String');
            }
            if (data.hasOwnProperty('columnType')) {
                obj['columnType'] = ApiClient.convertToType(data['columnType'], 'String');
            }
            if (data.hasOwnProperty('floatBinSize')) {
                obj['floatBinSize'] = ApiClient.convertToType(data['floatBinSize'], 'Number');
            }
            if (data.hasOwnProperty('maxBinCount')) {
                obj['maxBinCount'] = ApiClient.convertToType(data['maxBinCount'], 'Number');
            }
            if (data.hasOwnProperty('numericBinSize')) {
                obj['numericBinSize'] = ApiClient.convertToType(data['numericBinSize'], 'Number');
            }
            if (data.hasOwnProperty('sortColumn')) {
                obj['sortColumn'] = ApiClient.convertToType(data['sortColumn'], 'String');
            }
            if (data.hasOwnProperty('sortOrder')) {
                obj['sortOrder'] = ApiClient.convertToType(data['sortOrder'], 'String');
            }
            if (data.hasOwnProperty('timeBinSize')) {
                obj['timeBinSize'] = ApiClient.convertToType(data['timeBinSize'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Dimension</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Dimension</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['column'] && !(typeof data['column'] === 'string' || data['column'] instanceof String)) {
            throw new Error("Expected the field `column` to be a primitive type in the JSON string but got " + data['column']);
        }
        // ensure the json data is a string
        if (data['columnType'] && !(typeof data['columnType'] === 'string' || data['columnType'] instanceof String)) {
            throw new Error("Expected the field `columnType` to be a primitive type in the JSON string but got " + data['columnType']);
        }
        // ensure the json data is a string
        if (data['sortColumn'] && !(typeof data['sortColumn'] === 'string' || data['sortColumn'] instanceof String)) {
            throw new Error("Expected the field `sortColumn` to be a primitive type in the JSON string but got " + data['sortColumn']);
        }
        // ensure the json data is a string
        if (data['sortOrder'] && !(typeof data['sortOrder'] === 'string' || data['sortOrder'] instanceof String)) {
            throw new Error("Expected the field `sortOrder` to be a primitive type in the JSON string but got " + data['sortOrder']);
        }
        // ensure the json data is a string
        if (data['timeBinSize'] && !(typeof data['timeBinSize'] === 'string' || data['timeBinSize'] instanceof String)) {
            throw new Error("Expected the field `timeBinSize` to be a primitive type in the JSON string but got " + data['timeBinSize']);
        }

        return true;
    }


}



/**
 * Required. The name of the column in the source SQL query that is used to chart the dimension.
 * @member {String} column
 */
Dimension.prototype['column'] = undefined;

/**
 * Optional. The type of the dimension column. This is relevant only if one of the bin_size fields is set. If it is empty, the type TIMESTAMP or INT64 will be assumed based on which bin_size field is set. If populated, this should be set to one of the following types: DATE, TIME, DATETIME, TIMESTAMP, BIGNUMERIC, INT64, NUMERIC, FLOAT64.
 * @member {String} columnType
 */
Dimension.prototype['columnType'] = undefined;

/**
 * Optional. float_bin_size is used when the column type used for a dimension is a floating point numeric column.
 * @member {Number} floatBinSize
 */
Dimension.prototype['floatBinSize'] = undefined;

/**
 * A limit to the number of bins generated. When 0 is specified, the maximum count is not enforced.
 * @member {Number} maxBinCount
 */
Dimension.prototype['maxBinCount'] = undefined;

/**
 * numeric_bin_size is used when the column type used for a dimension is numeric or string.
 * @member {Number} numericBinSize
 */
Dimension.prototype['numericBinSize'] = undefined;

/**
 * The column name to sort on for binning. This column can be the same column as this dimension or any other column used as a measure in the results. If sort_order is set to NONE, then this value is not used.
 * @member {String} sortColumn
 */
Dimension.prototype['sortColumn'] = undefined;

/**
 * The sort order applied to the sort column.
 * @member {module:model/Dimension.SortOrderEnum} sortOrder
 */
Dimension.prototype['sortOrder'] = undefined;

/**
 * time_bin_size is used when the data type specified by column is a time type and the bin size is determined by a time duration. If column_type is DATE, this must be a whole value multiple of 1 day. If column_type is TIME, this must be less than or equal to 24 hours.
 * @member {String} timeBinSize
 */
Dimension.prototype['timeBinSize'] = undefined;





/**
 * Allowed values for the <code>sortOrder</code> property.
 * @enum {String}
 * @readonly
 */
Dimension['SortOrderEnum'] = {

    /**
     * value: "SORT_ORDER_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "SORT_ORDER_UNSPECIFIED",

    /**
     * value: "SORT_ORDER_NONE"
     * @const
     */
    "NONE": "SORT_ORDER_NONE",

    /**
     * value: "SORT_ORDER_ASCENDING"
     * @const
     */
    "ASCENDING": "SORT_ORDER_ASCENDING",

    /**
     * value: "SORT_ORDER_DESCENDING"
     * @const
     */
    "DESCENDING": "SORT_ORDER_DESCENDING"
};



export default Dimension;

