/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Breakdown from './Breakdown';
import Dimension from './Dimension';
import Measure from './Measure';
import TimeSeriesQuery from './TimeSeriesQuery';

/**
 * The DataSet model module.
 * @module model/DataSet
 * @version v1
 */
class DataSet {
    /**
     * Constructs a new <code>DataSet</code>.
     * Groups a time series query definition with charting options.
     * @alias module:model/DataSet
     */
    constructor() { 
        
        DataSet.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataSet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataSet} obj Optional instance to populate.
     * @return {module:model/DataSet} The populated <code>DataSet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataSet();

            if (data.hasOwnProperty('breakdowns')) {
                obj['breakdowns'] = ApiClient.convertToType(data['breakdowns'], [Breakdown]);
            }
            if (data.hasOwnProperty('dimensions')) {
                obj['dimensions'] = ApiClient.convertToType(data['dimensions'], [Dimension]);
            }
            if (data.hasOwnProperty('legendTemplate')) {
                obj['legendTemplate'] = ApiClient.convertToType(data['legendTemplate'], 'String');
            }
            if (data.hasOwnProperty('measures')) {
                obj['measures'] = ApiClient.convertToType(data['measures'], [Measure]);
            }
            if (data.hasOwnProperty('minAlignmentPeriod')) {
                obj['minAlignmentPeriod'] = ApiClient.convertToType(data['minAlignmentPeriod'], 'String');
            }
            if (data.hasOwnProperty('plotType')) {
                obj['plotType'] = ApiClient.convertToType(data['plotType'], 'String');
            }
            if (data.hasOwnProperty('targetAxis')) {
                obj['targetAxis'] = ApiClient.convertToType(data['targetAxis'], 'String');
            }
            if (data.hasOwnProperty('timeSeriesQuery')) {
                obj['timeSeriesQuery'] = TimeSeriesQuery.constructFromObject(data['timeSeriesQuery']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataSet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataSet</code>.
     */
    static validateJSON(data) {
        if (data['breakdowns']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['breakdowns'])) {
                throw new Error("Expected the field `breakdowns` to be an array in the JSON data but got " + data['breakdowns']);
            }
            // validate the optional field `breakdowns` (array)
            for (const item of data['breakdowns']) {
                Breakdown.validateJSON(item);
            };
        }
        if (data['dimensions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dimensions'])) {
                throw new Error("Expected the field `dimensions` to be an array in the JSON data but got " + data['dimensions']);
            }
            // validate the optional field `dimensions` (array)
            for (const item of data['dimensions']) {
                Dimension.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['legendTemplate'] && !(typeof data['legendTemplate'] === 'string' || data['legendTemplate'] instanceof String)) {
            throw new Error("Expected the field `legendTemplate` to be a primitive type in the JSON string but got " + data['legendTemplate']);
        }
        if (data['measures']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['measures'])) {
                throw new Error("Expected the field `measures` to be an array in the JSON data but got " + data['measures']);
            }
            // validate the optional field `measures` (array)
            for (const item of data['measures']) {
                Measure.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['minAlignmentPeriod'] && !(typeof data['minAlignmentPeriod'] === 'string' || data['minAlignmentPeriod'] instanceof String)) {
            throw new Error("Expected the field `minAlignmentPeriod` to be a primitive type in the JSON string but got " + data['minAlignmentPeriod']);
        }
        // ensure the json data is a string
        if (data['plotType'] && !(typeof data['plotType'] === 'string' || data['plotType'] instanceof String)) {
            throw new Error("Expected the field `plotType` to be a primitive type in the JSON string but got " + data['plotType']);
        }
        // ensure the json data is a string
        if (data['targetAxis'] && !(typeof data['targetAxis'] === 'string' || data['targetAxis'] instanceof String)) {
            throw new Error("Expected the field `targetAxis` to be a primitive type in the JSON string but got " + data['targetAxis']);
        }
        // validate the optional field `timeSeriesQuery`
        if (data['timeSeriesQuery']) { // data not null
          TimeSeriesQuery.validateJSON(data['timeSeriesQuery']);
        }

        return true;
    }


}



/**
 * Optional. The collection of breakdowns to be applied to the dataset.
 * @member {Array.<module:model/Breakdown>} breakdowns
 */
DataSet.prototype['breakdowns'] = undefined;

/**
 * Optional. A collection of dimension columns.
 * @member {Array.<module:model/Dimension>} dimensions
 */
DataSet.prototype['dimensions'] = undefined;

/**
 * A template string for naming TimeSeries in the resulting data set. This should be a string with interpolations of the form ${label_name}, which will resolve to the label's value.
 * @member {String} legendTemplate
 */
DataSet.prototype['legendTemplate'] = undefined;

/**
 * Optional. A collection of measures.
 * @member {Array.<module:model/Measure>} measures
 */
DataSet.prototype['measures'] = undefined;

/**
 * Optional. The lower bound on data point frequency for this data set, implemented by specifying the minimum alignment period to use in a time series query For example, if the data is published once every 10 minutes, the min_alignment_period should be at least 10 minutes. It would not make sense to fetch and align data at one minute intervals.
 * @member {String} minAlignmentPeriod
 */
DataSet.prototype['minAlignmentPeriod'] = undefined;

/**
 * How this data should be plotted on the chart.
 * @member {module:model/DataSet.PlotTypeEnum} plotType
 */
DataSet.prototype['plotType'] = undefined;

/**
 * Optional. The target axis to use for plotting the metric.
 * @member {module:model/DataSet.TargetAxisEnum} targetAxis
 */
DataSet.prototype['targetAxis'] = undefined;

/**
 * @member {module:model/TimeSeriesQuery} timeSeriesQuery
 */
DataSet.prototype['timeSeriesQuery'] = undefined;





/**
 * Allowed values for the <code>plotType</code> property.
 * @enum {String}
 * @readonly
 */
DataSet['PlotTypeEnum'] = {

    /**
     * value: "PLOT_TYPE_UNSPECIFIED"
     * @const
     */
    "PLOT_TYPE_UNSPECIFIED": "PLOT_TYPE_UNSPECIFIED",

    /**
     * value: "LINE"
     * @const
     */
    "LINE": "LINE",

    /**
     * value: "STACKED_AREA"
     * @const
     */
    "STACKED_AREA": "STACKED_AREA",

    /**
     * value: "STACKED_BAR"
     * @const
     */
    "STACKED_BAR": "STACKED_BAR",

    /**
     * value: "HEATMAP"
     * @const
     */
    "HEATMAP": "HEATMAP"
};


/**
 * Allowed values for the <code>targetAxis</code> property.
 * @enum {String}
 * @readonly
 */
DataSet['TargetAxisEnum'] = {

    /**
     * value: "TARGET_AXIS_UNSPECIFIED"
     * @const
     */
    "TARGET_AXIS_UNSPECIFIED": "TARGET_AXIS_UNSPECIFIED",

    /**
     * value: "Y1"
     * @const
     */
    "Y1": "Y1",

    /**
     * value: "Y2"
     * @const
     */
    "Y2": "Y2"
};



export default DataSet;

