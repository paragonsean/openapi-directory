/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Widget from './Widget';

/**
 * The Tile model module.
 * @module model/Tile
 * @version v1
 */
class Tile {
    /**
     * Constructs a new <code>Tile</code>.
     * A single tile in the mosaic. The placement and size of the tile are configurable.
     * @alias module:model/Tile
     */
    constructor() { 
        
        Tile.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Tile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Tile} obj Optional instance to populate.
     * @return {module:model/Tile} The populated <code>Tile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Tile();

            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('widget')) {
                obj['widget'] = Widget.constructFromObject(data['widget']);
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
            if (data.hasOwnProperty('xPos')) {
                obj['xPos'] = ApiClient.convertToType(data['xPos'], 'Number');
            }
            if (data.hasOwnProperty('yPos')) {
                obj['yPos'] = ApiClient.convertToType(data['yPos'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Tile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Tile</code>.
     */
    static validateJSON(data) {
        // validate the optional field `widget`
        if (data['widget']) { // data not null
          Widget.validateJSON(data['widget']);
        }

        return true;
    }


}



/**
 * The height of the tile, measured in grid blocks. Tiles must have a minimum height of 1.
 * @member {Number} height
 */
Tile.prototype['height'] = undefined;

/**
 * @member {module:model/Widget} widget
 */
Tile.prototype['widget'] = undefined;

/**
 * The width of the tile, measured in grid blocks. Tiles must have a minimum width of 1.
 * @member {Number} width
 */
Tile.prototype['width'] = undefined;

/**
 * The zero-indexed position of the tile in grid blocks relative to the left edge of the grid. Tiles must be contained within the specified number of columns. x_pos cannot be negative.
 * @member {Number} xPos
 */
Tile.prototype['xPos'] = undefined;

/**
 * The zero-indexed position of the tile in grid blocks relative to the top edge of the grid. y_pos cannot be negative.
 * @member {Number} yPos
 */
Tile.prototype['yPos'] = undefined;






export default Tile;

