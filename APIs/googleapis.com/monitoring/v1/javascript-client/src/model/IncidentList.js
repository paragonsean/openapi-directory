/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MonitoredResource from './MonitoredResource';

/**
 * The IncidentList model module.
 * @module model/IncidentList
 * @version v1
 */
class IncidentList {
    /**
     * Constructs a new <code>IncidentList</code>.
     * A widget that displays a list of incidents
     * @alias module:model/IncidentList
     */
    constructor() { 
        
        IncidentList.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IncidentList</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IncidentList} obj Optional instance to populate.
     * @return {module:model/IncidentList} The populated <code>IncidentList</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IncidentList();

            if (data.hasOwnProperty('monitoredResources')) {
                obj['monitoredResources'] = ApiClient.convertToType(data['monitoredResources'], [MonitoredResource]);
            }
            if (data.hasOwnProperty('policyNames')) {
                obj['policyNames'] = ApiClient.convertToType(data['policyNames'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IncidentList</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IncidentList</code>.
     */
    static validateJSON(data) {
        if (data['monitoredResources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['monitoredResources'])) {
                throw new Error("Expected the field `monitoredResources` to be an array in the JSON data but got " + data['monitoredResources']);
            }
            // validate the optional field `monitoredResources` (array)
            for (const item of data['monitoredResources']) {
                MonitoredResource.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['policyNames'])) {
            throw new Error("Expected the field `policyNames` to be an array in the JSON data but got " + data['policyNames']);
        }

        return true;
    }


}



/**
 * Optional. The monitored resource for which incidents are listed. The resource doesn't need to be fully specified. That is, you can specify the resource type but not the values of the resource labels. The resource type and labels are used for filtering.
 * @member {Array.<module:model/MonitoredResource>} monitoredResources
 */
IncidentList.prototype['monitoredResources'] = undefined;

/**
 * Optional. A list of alert policy names to filter the incident list by. Don't include the project ID prefix in the policy name. For example, use alertPolicies/utilization.
 * @member {Array.<String>} policyNames
 */
IncidentList.prototype['policyNames'] = undefined;






export default IncidentList;

