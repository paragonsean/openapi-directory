/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AlertChart from './AlertChart';
import CollapsibleGroup from './CollapsibleGroup';
import ErrorReportingPanel from './ErrorReportingPanel';
import IncidentList from './IncidentList';
import LogsPanel from './LogsPanel';
import PieChart from './PieChart';
import Scorecard from './Scorecard';
import SectionHeader from './SectionHeader';
import Text from './Text';
import TimeSeriesTable from './TimeSeriesTable';
import XyChart from './XyChart';

/**
 * The Widget model module.
 * @module model/Widget
 * @version v1
 */
class Widget {
    /**
     * Constructs a new <code>Widget</code>.
     * Widget contains a single dashboard component and configuration of how to present the component in the dashboard.
     * @alias module:model/Widget
     */
    constructor() { 
        
        Widget.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Widget</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Widget} obj Optional instance to populate.
     * @return {module:model/Widget} The populated <code>Widget</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Widget();

            if (data.hasOwnProperty('alertChart')) {
                obj['alertChart'] = AlertChart.constructFromObject(data['alertChart']);
            }
            if (data.hasOwnProperty('blank')) {
                obj['blank'] = ApiClient.convertToType(data['blank'], Object);
            }
            if (data.hasOwnProperty('collapsibleGroup')) {
                obj['collapsibleGroup'] = CollapsibleGroup.constructFromObject(data['collapsibleGroup']);
            }
            if (data.hasOwnProperty('errorReportingPanel')) {
                obj['errorReportingPanel'] = ErrorReportingPanel.constructFromObject(data['errorReportingPanel']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('incidentList')) {
                obj['incidentList'] = IncidentList.constructFromObject(data['incidentList']);
            }
            if (data.hasOwnProperty('logsPanel')) {
                obj['logsPanel'] = LogsPanel.constructFromObject(data['logsPanel']);
            }
            if (data.hasOwnProperty('pieChart')) {
                obj['pieChart'] = PieChart.constructFromObject(data['pieChart']);
            }
            if (data.hasOwnProperty('scorecard')) {
                obj['scorecard'] = Scorecard.constructFromObject(data['scorecard']);
            }
            if (data.hasOwnProperty('sectionHeader')) {
                obj['sectionHeader'] = SectionHeader.constructFromObject(data['sectionHeader']);
            }
            if (data.hasOwnProperty('singleViewGroup')) {
                obj['singleViewGroup'] = ApiClient.convertToType(data['singleViewGroup'], Object);
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = Text.constructFromObject(data['text']);
            }
            if (data.hasOwnProperty('timeSeriesTable')) {
                obj['timeSeriesTable'] = TimeSeriesTable.constructFromObject(data['timeSeriesTable']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('xyChart')) {
                obj['xyChart'] = XyChart.constructFromObject(data['xyChart']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Widget</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Widget</code>.
     */
    static validateJSON(data) {
        // validate the optional field `alertChart`
        if (data['alertChart']) { // data not null
          AlertChart.validateJSON(data['alertChart']);
        }
        // validate the optional field `collapsibleGroup`
        if (data['collapsibleGroup']) { // data not null
          CollapsibleGroup.validateJSON(data['collapsibleGroup']);
        }
        // validate the optional field `errorReportingPanel`
        if (data['errorReportingPanel']) { // data not null
          ErrorReportingPanel.validateJSON(data['errorReportingPanel']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `incidentList`
        if (data['incidentList']) { // data not null
          IncidentList.validateJSON(data['incidentList']);
        }
        // validate the optional field `logsPanel`
        if (data['logsPanel']) { // data not null
          LogsPanel.validateJSON(data['logsPanel']);
        }
        // validate the optional field `pieChart`
        if (data['pieChart']) { // data not null
          PieChart.validateJSON(data['pieChart']);
        }
        // validate the optional field `scorecard`
        if (data['scorecard']) { // data not null
          Scorecard.validateJSON(data['scorecard']);
        }
        // validate the optional field `sectionHeader`
        if (data['sectionHeader']) { // data not null
          SectionHeader.validateJSON(data['sectionHeader']);
        }
        // validate the optional field `text`
        if (data['text']) { // data not null
          Text.validateJSON(data['text']);
        }
        // validate the optional field `timeSeriesTable`
        if (data['timeSeriesTable']) { // data not null
          TimeSeriesTable.validateJSON(data['timeSeriesTable']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // validate the optional field `xyChart`
        if (data['xyChart']) { // data not null
          XyChart.validateJSON(data['xyChart']);
        }

        return true;
    }


}



/**
 * @member {module:model/AlertChart} alertChart
 */
Widget.prototype['alertChart'] = undefined;

/**
 * A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } 
 * @member {Object} blank
 */
Widget.prototype['blank'] = undefined;

/**
 * @member {module:model/CollapsibleGroup} collapsibleGroup
 */
Widget.prototype['collapsibleGroup'] = undefined;

/**
 * @member {module:model/ErrorReportingPanel} errorReportingPanel
 */
Widget.prototype['errorReportingPanel'] = undefined;

/**
 * Optional. The widget id. Ids may be made up of alphanumerics, dashes and underscores. Widget ids are optional.
 * @member {String} id
 */
Widget.prototype['id'] = undefined;

/**
 * @member {module:model/IncidentList} incidentList
 */
Widget.prototype['incidentList'] = undefined;

/**
 * @member {module:model/LogsPanel} logsPanel
 */
Widget.prototype['logsPanel'] = undefined;

/**
 * @member {module:model/PieChart} pieChart
 */
Widget.prototype['pieChart'] = undefined;

/**
 * @member {module:model/Scorecard} scorecard
 */
Widget.prototype['scorecard'] = undefined;

/**
 * @member {module:model/SectionHeader} sectionHeader
 */
Widget.prototype['sectionHeader'] = undefined;

/**
 * A widget that groups the other widgets by using a dropdown menu. All widgets that are within the area spanned by the grouping widget are considered member widgets.
 * @member {Object} singleViewGroup
 */
Widget.prototype['singleViewGroup'] = undefined;

/**
 * @member {module:model/Text} text
 */
Widget.prototype['text'] = undefined;

/**
 * @member {module:model/TimeSeriesTable} timeSeriesTable
 */
Widget.prototype['timeSeriesTable'] = undefined;

/**
 * Optional. The title of the widget.
 * @member {String} title
 */
Widget.prototype['title'] = undefined;

/**
 * @member {module:model/XyChart} xyChart
 */
Widget.prototype['xyChart'] = undefined;






export default Widget;

