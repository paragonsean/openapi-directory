/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Axis from './Axis';
import ChartOptions from './ChartOptions';
import DataSet from './DataSet';
import Threshold from './Threshold';

/**
 * The XyChart model module.
 * @module model/XyChart
 * @version v1
 */
class XyChart {
    /**
     * Constructs a new <code>XyChart</code>.
     * A chart that displays data on a 2D (X and Y axes) plane.
     * @alias module:model/XyChart
     */
    constructor() { 
        
        XyChart.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>XyChart</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/XyChart} obj Optional instance to populate.
     * @return {module:model/XyChart} The populated <code>XyChart</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new XyChart();

            if (data.hasOwnProperty('chartOptions')) {
                obj['chartOptions'] = ChartOptions.constructFromObject(data['chartOptions']);
            }
            if (data.hasOwnProperty('dataSets')) {
                obj['dataSets'] = ApiClient.convertToType(data['dataSets'], [DataSet]);
            }
            if (data.hasOwnProperty('thresholds')) {
                obj['thresholds'] = ApiClient.convertToType(data['thresholds'], [Threshold]);
            }
            if (data.hasOwnProperty('timeshiftDuration')) {
                obj['timeshiftDuration'] = ApiClient.convertToType(data['timeshiftDuration'], 'String');
            }
            if (data.hasOwnProperty('xAxis')) {
                obj['xAxis'] = Axis.constructFromObject(data['xAxis']);
            }
            if (data.hasOwnProperty('y2Axis')) {
                obj['y2Axis'] = Axis.constructFromObject(data['y2Axis']);
            }
            if (data.hasOwnProperty('yAxis')) {
                obj['yAxis'] = Axis.constructFromObject(data['yAxis']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>XyChart</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>XyChart</code>.
     */
    static validateJSON(data) {
        // validate the optional field `chartOptions`
        if (data['chartOptions']) { // data not null
          ChartOptions.validateJSON(data['chartOptions']);
        }
        if (data['dataSets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dataSets'])) {
                throw new Error("Expected the field `dataSets` to be an array in the JSON data but got " + data['dataSets']);
            }
            // validate the optional field `dataSets` (array)
            for (const item of data['dataSets']) {
                DataSet.validateJSON(item);
            };
        }
        if (data['thresholds']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['thresholds'])) {
                throw new Error("Expected the field `thresholds` to be an array in the JSON data but got " + data['thresholds']);
            }
            // validate the optional field `thresholds` (array)
            for (const item of data['thresholds']) {
                Threshold.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['timeshiftDuration'] && !(typeof data['timeshiftDuration'] === 'string' || data['timeshiftDuration'] instanceof String)) {
            throw new Error("Expected the field `timeshiftDuration` to be a primitive type in the JSON string but got " + data['timeshiftDuration']);
        }
        // validate the optional field `xAxis`
        if (data['xAxis']) { // data not null
          Axis.validateJSON(data['xAxis']);
        }
        // validate the optional field `y2Axis`
        if (data['y2Axis']) { // data not null
          Axis.validateJSON(data['y2Axis']);
        }
        // validate the optional field `yAxis`
        if (data['yAxis']) { // data not null
          Axis.validateJSON(data['yAxis']);
        }

        return true;
    }


}



/**
 * @member {module:model/ChartOptions} chartOptions
 */
XyChart.prototype['chartOptions'] = undefined;

/**
 * Required. The data displayed in this chart.
 * @member {Array.<module:model/DataSet>} dataSets
 */
XyChart.prototype['dataSets'] = undefined;

/**
 * Threshold lines drawn horizontally across the chart.
 * @member {Array.<module:model/Threshold>} thresholds
 */
XyChart.prototype['thresholds'] = undefined;

/**
 * The duration used to display a comparison chart. A comparison chart simultaneously shows values from two similar-length time periods (e.g., week-over-week metrics). The duration must be positive, and it can only be applied to charts with data sets of LINE plot type.
 * @member {String} timeshiftDuration
 */
XyChart.prototype['timeshiftDuration'] = undefined;

/**
 * @member {module:model/Axis} xAxis
 */
XyChart.prototype['xAxis'] = undefined;

/**
 * @member {module:model/Axis} y2Axis
 */
XyChart.prototype['y2Axis'] = undefined;

/**
 * @member {module:model/Axis} yAxis
 */
XyChart.prototype['yAxis'] = undefined;






export default XyChart;

