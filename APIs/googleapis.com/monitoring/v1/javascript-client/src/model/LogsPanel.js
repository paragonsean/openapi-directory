/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LogsPanel model module.
 * @module model/LogsPanel
 * @version v1
 */
class LogsPanel {
    /**
     * Constructs a new <code>LogsPanel</code>.
     * A widget that displays a stream of log.
     * @alias module:model/LogsPanel
     */
    constructor() { 
        
        LogsPanel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LogsPanel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LogsPanel} obj Optional instance to populate.
     * @return {module:model/LogsPanel} The populated <code>LogsPanel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LogsPanel();

            if (data.hasOwnProperty('filter')) {
                obj['filter'] = ApiClient.convertToType(data['filter'], 'String');
            }
            if (data.hasOwnProperty('resourceNames')) {
                obj['resourceNames'] = ApiClient.convertToType(data['resourceNames'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LogsPanel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LogsPanel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['filter'] && !(typeof data['filter'] === 'string' || data['filter'] instanceof String)) {
            throw new Error("Expected the field `filter` to be a primitive type in the JSON string but got " + data['filter']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['resourceNames'])) {
            throw new Error("Expected the field `resourceNames` to be an array in the JSON data but got " + data['resourceNames']);
        }

        return true;
    }


}



/**
 * A filter that chooses which log entries to return. See Advanced Logs Queries (https://cloud.google.com/logging/docs/view/advanced-queries). Only log entries that match the filter are returned. An empty filter matches all log entries.
 * @member {String} filter
 */
LogsPanel.prototype['filter'] = undefined;

/**
 * The names of logging resources to collect logs for. Currently only projects are supported. If empty, the widget will default to the host project.
 * @member {Array.<String>} resourceNames
 */
LogsPanel.prototype['resourceNames'] = undefined;






export default LogsPanel;

