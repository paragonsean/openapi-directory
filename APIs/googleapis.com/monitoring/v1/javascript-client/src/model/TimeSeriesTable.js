/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ColumnSettings from './ColumnSettings';
import TableDataSet from './TableDataSet';

/**
 * The TimeSeriesTable model module.
 * @module model/TimeSeriesTable
 * @version v1
 */
class TimeSeriesTable {
    /**
     * Constructs a new <code>TimeSeriesTable</code>.
     * A table that displays time series data.
     * @alias module:model/TimeSeriesTable
     */
    constructor() { 
        
        TimeSeriesTable.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TimeSeriesTable</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TimeSeriesTable} obj Optional instance to populate.
     * @return {module:model/TimeSeriesTable} The populated <code>TimeSeriesTable</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TimeSeriesTable();

            if (data.hasOwnProperty('columnSettings')) {
                obj['columnSettings'] = ApiClient.convertToType(data['columnSettings'], [ColumnSettings]);
            }
            if (data.hasOwnProperty('dataSets')) {
                obj['dataSets'] = ApiClient.convertToType(data['dataSets'], [TableDataSet]);
            }
            if (data.hasOwnProperty('metricVisualization')) {
                obj['metricVisualization'] = ApiClient.convertToType(data['metricVisualization'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TimeSeriesTable</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TimeSeriesTable</code>.
     */
    static validateJSON(data) {
        if (data['columnSettings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['columnSettings'])) {
                throw new Error("Expected the field `columnSettings` to be an array in the JSON data but got " + data['columnSettings']);
            }
            // validate the optional field `columnSettings` (array)
            for (const item of data['columnSettings']) {
                ColumnSettings.validateJSON(item);
            };
        }
        if (data['dataSets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dataSets'])) {
                throw new Error("Expected the field `dataSets` to be an array in the JSON data but got " + data['dataSets']);
            }
            // validate the optional field `dataSets` (array)
            for (const item of data['dataSets']) {
                TableDataSet.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['metricVisualization'] && !(typeof data['metricVisualization'] === 'string' || data['metricVisualization'] instanceof String)) {
            throw new Error("Expected the field `metricVisualization` to be a primitive type in the JSON string but got " + data['metricVisualization']);
        }

        return true;
    }


}



/**
 * Optional. The list of the persistent column settings for the table.
 * @member {Array.<module:model/ColumnSettings>} columnSettings
 */
TimeSeriesTable.prototype['columnSettings'] = undefined;

/**
 * Required. The data displayed in this table.
 * @member {Array.<module:model/TableDataSet>} dataSets
 */
TimeSeriesTable.prototype['dataSets'] = undefined;

/**
 * Optional. Store rendering strategy
 * @member {module:model/TimeSeriesTable.MetricVisualizationEnum} metricVisualization
 */
TimeSeriesTable.prototype['metricVisualization'] = undefined;





/**
 * Allowed values for the <code>metricVisualization</code> property.
 * @enum {String}
 * @readonly
 */
TimeSeriesTable['MetricVisualizationEnum'] = {

    /**
     * value: "METRIC_VISUALIZATION_UNSPECIFIED"
     * @const
     */
    "METRIC_VISUALIZATION_UNSPECIFIED": "METRIC_VISUALIZATION_UNSPECIFIED",

    /**
     * value: "NUMBER"
     * @const
     */
    "NUMBER": "NUMBER",

    /**
     * value: "BAR"
     * @const
     */
    "BAR": "BAR"
};



export default TimeSeriesTable;

