/*
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A chart dimension. Dimensions are a structured label, class, or category for a set of measurements in your data.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:39.941966-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Dimension {
  public static final String SERIALIZED_NAME_COLUMN = "column";
  @SerializedName(SERIALIZED_NAME_COLUMN)
  private String column;

  public static final String SERIALIZED_NAME_COLUMN_TYPE = "columnType";
  @SerializedName(SERIALIZED_NAME_COLUMN_TYPE)
  private String columnType;

  public static final String SERIALIZED_NAME_FLOAT_BIN_SIZE = "floatBinSize";
  @SerializedName(SERIALIZED_NAME_FLOAT_BIN_SIZE)
  private Double floatBinSize;

  public static final String SERIALIZED_NAME_MAX_BIN_COUNT = "maxBinCount";
  @SerializedName(SERIALIZED_NAME_MAX_BIN_COUNT)
  private Integer maxBinCount;

  public static final String SERIALIZED_NAME_NUMERIC_BIN_SIZE = "numericBinSize";
  @SerializedName(SERIALIZED_NAME_NUMERIC_BIN_SIZE)
  private Integer numericBinSize;

  public static final String SERIALIZED_NAME_SORT_COLUMN = "sortColumn";
  @SerializedName(SERIALIZED_NAME_SORT_COLUMN)
  private String sortColumn;

  /**
   * The sort order applied to the sort column.
   */
  @JsonAdapter(SortOrderEnum.Adapter.class)
  public enum SortOrderEnum {
    UNSPECIFIED("SORT_ORDER_UNSPECIFIED"),
    
    NONE("SORT_ORDER_NONE"),
    
    ASCENDING("SORT_ORDER_ASCENDING"),
    
    DESCENDING("SORT_ORDER_DESCENDING");

    private String value;

    SortOrderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SortOrderEnum fromValue(String value) {
      for (SortOrderEnum b : SortOrderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SortOrderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SortOrderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SortOrderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SortOrderEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SortOrderEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SORT_ORDER = "sortOrder";
  @SerializedName(SERIALIZED_NAME_SORT_ORDER)
  private SortOrderEnum sortOrder;

  public static final String SERIALIZED_NAME_TIME_BIN_SIZE = "timeBinSize";
  @SerializedName(SERIALIZED_NAME_TIME_BIN_SIZE)
  private String timeBinSize;

  public Dimension() {
  }

  public Dimension column(String column) {
    this.column = column;
    return this;
  }

  /**
   * Required. The name of the column in the source SQL query that is used to chart the dimension.
   * @return column
   */
  @javax.annotation.Nullable
  public String getColumn() {
    return column;
  }

  public void setColumn(String column) {
    this.column = column;
  }


  public Dimension columnType(String columnType) {
    this.columnType = columnType;
    return this;
  }

  /**
   * Optional. The type of the dimension column. This is relevant only if one of the bin_size fields is set. If it is empty, the type TIMESTAMP or INT64 will be assumed based on which bin_size field is set. If populated, this should be set to one of the following types: DATE, TIME, DATETIME, TIMESTAMP, BIGNUMERIC, INT64, NUMERIC, FLOAT64.
   * @return columnType
   */
  @javax.annotation.Nullable
  public String getColumnType() {
    return columnType;
  }

  public void setColumnType(String columnType) {
    this.columnType = columnType;
  }


  public Dimension floatBinSize(Double floatBinSize) {
    this.floatBinSize = floatBinSize;
    return this;
  }

  /**
   * Optional. float_bin_size is used when the column type used for a dimension is a floating point numeric column.
   * @return floatBinSize
   */
  @javax.annotation.Nullable
  public Double getFloatBinSize() {
    return floatBinSize;
  }

  public void setFloatBinSize(Double floatBinSize) {
    this.floatBinSize = floatBinSize;
  }


  public Dimension maxBinCount(Integer maxBinCount) {
    this.maxBinCount = maxBinCount;
    return this;
  }

  /**
   * A limit to the number of bins generated. When 0 is specified, the maximum count is not enforced.
   * @return maxBinCount
   */
  @javax.annotation.Nullable
  public Integer getMaxBinCount() {
    return maxBinCount;
  }

  public void setMaxBinCount(Integer maxBinCount) {
    this.maxBinCount = maxBinCount;
  }


  public Dimension numericBinSize(Integer numericBinSize) {
    this.numericBinSize = numericBinSize;
    return this;
  }

  /**
   * numeric_bin_size is used when the column type used for a dimension is numeric or string.
   * @return numericBinSize
   */
  @javax.annotation.Nullable
  public Integer getNumericBinSize() {
    return numericBinSize;
  }

  public void setNumericBinSize(Integer numericBinSize) {
    this.numericBinSize = numericBinSize;
  }


  public Dimension sortColumn(String sortColumn) {
    this.sortColumn = sortColumn;
    return this;
  }

  /**
   * The column name to sort on for binning. This column can be the same column as this dimension or any other column used as a measure in the results. If sort_order is set to NONE, then this value is not used.
   * @return sortColumn
   */
  @javax.annotation.Nullable
  public String getSortColumn() {
    return sortColumn;
  }

  public void setSortColumn(String sortColumn) {
    this.sortColumn = sortColumn;
  }


  public Dimension sortOrder(SortOrderEnum sortOrder) {
    this.sortOrder = sortOrder;
    return this;
  }

  /**
   * The sort order applied to the sort column.
   * @return sortOrder
   */
  @javax.annotation.Nullable
  public SortOrderEnum getSortOrder() {
    return sortOrder;
  }

  public void setSortOrder(SortOrderEnum sortOrder) {
    this.sortOrder = sortOrder;
  }


  public Dimension timeBinSize(String timeBinSize) {
    this.timeBinSize = timeBinSize;
    return this;
  }

  /**
   * time_bin_size is used when the data type specified by column is a time type and the bin size is determined by a time duration. If column_type is DATE, this must be a whole value multiple of 1 day. If column_type is TIME, this must be less than or equal to 24 hours.
   * @return timeBinSize
   */
  @javax.annotation.Nullable
  public String getTimeBinSize() {
    return timeBinSize;
  }

  public void setTimeBinSize(String timeBinSize) {
    this.timeBinSize = timeBinSize;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dimension dimension = (Dimension) o;
    return Objects.equals(this.column, dimension.column) &&
        Objects.equals(this.columnType, dimension.columnType) &&
        Objects.equals(this.floatBinSize, dimension.floatBinSize) &&
        Objects.equals(this.maxBinCount, dimension.maxBinCount) &&
        Objects.equals(this.numericBinSize, dimension.numericBinSize) &&
        Objects.equals(this.sortColumn, dimension.sortColumn) &&
        Objects.equals(this.sortOrder, dimension.sortOrder) &&
        Objects.equals(this.timeBinSize, dimension.timeBinSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(column, columnType, floatBinSize, maxBinCount, numericBinSize, sortColumn, sortOrder, timeBinSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dimension {\n");
    sb.append("    column: ").append(toIndentedString(column)).append("\n");
    sb.append("    columnType: ").append(toIndentedString(columnType)).append("\n");
    sb.append("    floatBinSize: ").append(toIndentedString(floatBinSize)).append("\n");
    sb.append("    maxBinCount: ").append(toIndentedString(maxBinCount)).append("\n");
    sb.append("    numericBinSize: ").append(toIndentedString(numericBinSize)).append("\n");
    sb.append("    sortColumn: ").append(toIndentedString(sortColumn)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("    timeBinSize: ").append(toIndentedString(timeBinSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("column");
    openapiFields.add("columnType");
    openapiFields.add("floatBinSize");
    openapiFields.add("maxBinCount");
    openapiFields.add("numericBinSize");
    openapiFields.add("sortColumn");
    openapiFields.add("sortOrder");
    openapiFields.add("timeBinSize");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Dimension
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dimension.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dimension is not found in the empty JSON string", Dimension.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dimension.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dimension` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("column") != null && !jsonObj.get("column").isJsonNull()) && !jsonObj.get("column").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `column` to be a primitive type in the JSON string but got `%s`", jsonObj.get("column").toString()));
      }
      if ((jsonObj.get("columnType") != null && !jsonObj.get("columnType").isJsonNull()) && !jsonObj.get("columnType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `columnType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("columnType").toString()));
      }
      if ((jsonObj.get("sortColumn") != null && !jsonObj.get("sortColumn").isJsonNull()) && !jsonObj.get("sortColumn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sortColumn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sortColumn").toString()));
      }
      if ((jsonObj.get("sortOrder") != null && !jsonObj.get("sortOrder").isJsonNull()) && !jsonObj.get("sortOrder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sortOrder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sortOrder").toString()));
      }
      // validate the optional field `sortOrder`
      if (jsonObj.get("sortOrder") != null && !jsonObj.get("sortOrder").isJsonNull()) {
        SortOrderEnum.validateJsonElement(jsonObj.get("sortOrder"));
      }
      if ((jsonObj.get("timeBinSize") != null && !jsonObj.get("timeBinSize").isJsonNull()) && !jsonObj.get("timeBinSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeBinSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeBinSize").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dimension.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dimension' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dimension> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dimension.class));

       return (TypeAdapter<T>) new TypeAdapter<Dimension>() {
           @Override
           public void write(JsonWriter out, Dimension value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dimension read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Dimension given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Dimension
   * @throws IOException if the JSON string is invalid with respect to Dimension
   */
  public static Dimension fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dimension.class);
  }

  /**
   * Convert an instance of Dimension to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

