/*
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.OpsAnalyticsQuery;
import org.openapitools.client.model.TimeSeriesFilter;
import org.openapitools.client.model.TimeSeriesFilterRatio;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TimeSeriesQuery collects the set of supported methods for querying time series data from the Stackdriver metrics API.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:39.941966-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TimeSeriesQuery {
  public static final String SERIALIZED_NAME_OPS_ANALYTICS_QUERY = "opsAnalyticsQuery";
  @SerializedName(SERIALIZED_NAME_OPS_ANALYTICS_QUERY)
  private OpsAnalyticsQuery opsAnalyticsQuery;

  public static final String SERIALIZED_NAME_OUTPUT_FULL_DURATION = "outputFullDuration";
  @SerializedName(SERIALIZED_NAME_OUTPUT_FULL_DURATION)
  private Boolean outputFullDuration;

  public static final String SERIALIZED_NAME_PROMETHEUS_QUERY = "prometheusQuery";
  @SerializedName(SERIALIZED_NAME_PROMETHEUS_QUERY)
  private String prometheusQuery;

  public static final String SERIALIZED_NAME_TIME_SERIES_FILTER = "timeSeriesFilter";
  @SerializedName(SERIALIZED_NAME_TIME_SERIES_FILTER)
  private TimeSeriesFilter timeSeriesFilter;

  public static final String SERIALIZED_NAME_TIME_SERIES_FILTER_RATIO = "timeSeriesFilterRatio";
  @SerializedName(SERIALIZED_NAME_TIME_SERIES_FILTER_RATIO)
  private TimeSeriesFilterRatio timeSeriesFilterRatio;

  public static final String SERIALIZED_NAME_TIME_SERIES_QUERY_LANGUAGE = "timeSeriesQueryLanguage";
  @SerializedName(SERIALIZED_NAME_TIME_SERIES_QUERY_LANGUAGE)
  private String timeSeriesQueryLanguage;

  public static final String SERIALIZED_NAME_UNIT_OVERRIDE = "unitOverride";
  @SerializedName(SERIALIZED_NAME_UNIT_OVERRIDE)
  private String unitOverride;

  public TimeSeriesQuery() {
  }

  public TimeSeriesQuery opsAnalyticsQuery(OpsAnalyticsQuery opsAnalyticsQuery) {
    this.opsAnalyticsQuery = opsAnalyticsQuery;
    return this;
  }

  /**
   * Get opsAnalyticsQuery
   * @return opsAnalyticsQuery
   */
  @javax.annotation.Nullable
  public OpsAnalyticsQuery getOpsAnalyticsQuery() {
    return opsAnalyticsQuery;
  }

  public void setOpsAnalyticsQuery(OpsAnalyticsQuery opsAnalyticsQuery) {
    this.opsAnalyticsQuery = opsAnalyticsQuery;
  }


  public TimeSeriesQuery outputFullDuration(Boolean outputFullDuration) {
    this.outputFullDuration = outputFullDuration;
    return this;
  }

  /**
   * Optional. If set, Cloud Monitoring will treat the full query duration as the alignment period so that there will be only 1 output value.*Note: This could override the configured alignment period except for the cases where a series of data points are expected, like - XyChart - Scorecard&#39;s spark chart
   * @return outputFullDuration
   */
  @javax.annotation.Nullable
  public Boolean getOutputFullDuration() {
    return outputFullDuration;
  }

  public void setOutputFullDuration(Boolean outputFullDuration) {
    this.outputFullDuration = outputFullDuration;
  }


  public TimeSeriesQuery prometheusQuery(String prometheusQuery) {
    this.prometheusQuery = prometheusQuery;
    return this;
  }

  /**
   * A query used to fetch time series with PromQL.
   * @return prometheusQuery
   */
  @javax.annotation.Nullable
  public String getPrometheusQuery() {
    return prometheusQuery;
  }

  public void setPrometheusQuery(String prometheusQuery) {
    this.prometheusQuery = prometheusQuery;
  }


  public TimeSeriesQuery timeSeriesFilter(TimeSeriesFilter timeSeriesFilter) {
    this.timeSeriesFilter = timeSeriesFilter;
    return this;
  }

  /**
   * Get timeSeriesFilter
   * @return timeSeriesFilter
   */
  @javax.annotation.Nullable
  public TimeSeriesFilter getTimeSeriesFilter() {
    return timeSeriesFilter;
  }

  public void setTimeSeriesFilter(TimeSeriesFilter timeSeriesFilter) {
    this.timeSeriesFilter = timeSeriesFilter;
  }


  public TimeSeriesQuery timeSeriesFilterRatio(TimeSeriesFilterRatio timeSeriesFilterRatio) {
    this.timeSeriesFilterRatio = timeSeriesFilterRatio;
    return this;
  }

  /**
   * Get timeSeriesFilterRatio
   * @return timeSeriesFilterRatio
   */
  @javax.annotation.Nullable
  public TimeSeriesFilterRatio getTimeSeriesFilterRatio() {
    return timeSeriesFilterRatio;
  }

  public void setTimeSeriesFilterRatio(TimeSeriesFilterRatio timeSeriesFilterRatio) {
    this.timeSeriesFilterRatio = timeSeriesFilterRatio;
  }


  public TimeSeriesQuery timeSeriesQueryLanguage(String timeSeriesQueryLanguage) {
    this.timeSeriesQueryLanguage = timeSeriesQueryLanguage;
    return this;
  }

  /**
   * A query used to fetch time series with MQL.
   * @return timeSeriesQueryLanguage
   */
  @javax.annotation.Nullable
  public String getTimeSeriesQueryLanguage() {
    return timeSeriesQueryLanguage;
  }

  public void setTimeSeriesQueryLanguage(String timeSeriesQueryLanguage) {
    this.timeSeriesQueryLanguage = timeSeriesQueryLanguage;
  }


  public TimeSeriesQuery unitOverride(String unitOverride) {
    this.unitOverride = unitOverride;
    return this;
  }

  /**
   * The unit of data contained in fetched time series. If non-empty, this unit will override any unit that accompanies fetched data. The format is the same as the unit (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors) field in MetricDescriptor.
   * @return unitOverride
   */
  @javax.annotation.Nullable
  public String getUnitOverride() {
    return unitOverride;
  }

  public void setUnitOverride(String unitOverride) {
    this.unitOverride = unitOverride;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeSeriesQuery timeSeriesQuery = (TimeSeriesQuery) o;
    return Objects.equals(this.opsAnalyticsQuery, timeSeriesQuery.opsAnalyticsQuery) &&
        Objects.equals(this.outputFullDuration, timeSeriesQuery.outputFullDuration) &&
        Objects.equals(this.prometheusQuery, timeSeriesQuery.prometheusQuery) &&
        Objects.equals(this.timeSeriesFilter, timeSeriesQuery.timeSeriesFilter) &&
        Objects.equals(this.timeSeriesFilterRatio, timeSeriesQuery.timeSeriesFilterRatio) &&
        Objects.equals(this.timeSeriesQueryLanguage, timeSeriesQuery.timeSeriesQueryLanguage) &&
        Objects.equals(this.unitOverride, timeSeriesQuery.unitOverride);
  }

  @Override
  public int hashCode() {
    return Objects.hash(opsAnalyticsQuery, outputFullDuration, prometheusQuery, timeSeriesFilter, timeSeriesFilterRatio, timeSeriesQueryLanguage, unitOverride);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeSeriesQuery {\n");
    sb.append("    opsAnalyticsQuery: ").append(toIndentedString(opsAnalyticsQuery)).append("\n");
    sb.append("    outputFullDuration: ").append(toIndentedString(outputFullDuration)).append("\n");
    sb.append("    prometheusQuery: ").append(toIndentedString(prometheusQuery)).append("\n");
    sb.append("    timeSeriesFilter: ").append(toIndentedString(timeSeriesFilter)).append("\n");
    sb.append("    timeSeriesFilterRatio: ").append(toIndentedString(timeSeriesFilterRatio)).append("\n");
    sb.append("    timeSeriesQueryLanguage: ").append(toIndentedString(timeSeriesQueryLanguage)).append("\n");
    sb.append("    unitOverride: ").append(toIndentedString(unitOverride)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("opsAnalyticsQuery");
    openapiFields.add("outputFullDuration");
    openapiFields.add("prometheusQuery");
    openapiFields.add("timeSeriesFilter");
    openapiFields.add("timeSeriesFilterRatio");
    openapiFields.add("timeSeriesQueryLanguage");
    openapiFields.add("unitOverride");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TimeSeriesQuery
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TimeSeriesQuery.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimeSeriesQuery is not found in the empty JSON string", TimeSeriesQuery.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TimeSeriesQuery.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TimeSeriesQuery` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `opsAnalyticsQuery`
      if (jsonObj.get("opsAnalyticsQuery") != null && !jsonObj.get("opsAnalyticsQuery").isJsonNull()) {
        OpsAnalyticsQuery.validateJsonElement(jsonObj.get("opsAnalyticsQuery"));
      }
      if ((jsonObj.get("prometheusQuery") != null && !jsonObj.get("prometheusQuery").isJsonNull()) && !jsonObj.get("prometheusQuery").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prometheusQuery` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prometheusQuery").toString()));
      }
      // validate the optional field `timeSeriesFilter`
      if (jsonObj.get("timeSeriesFilter") != null && !jsonObj.get("timeSeriesFilter").isJsonNull()) {
        TimeSeriesFilter.validateJsonElement(jsonObj.get("timeSeriesFilter"));
      }
      // validate the optional field `timeSeriesFilterRatio`
      if (jsonObj.get("timeSeriesFilterRatio") != null && !jsonObj.get("timeSeriesFilterRatio").isJsonNull()) {
        TimeSeriesFilterRatio.validateJsonElement(jsonObj.get("timeSeriesFilterRatio"));
      }
      if ((jsonObj.get("timeSeriesQueryLanguage") != null && !jsonObj.get("timeSeriesQueryLanguage").isJsonNull()) && !jsonObj.get("timeSeriesQueryLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeSeriesQueryLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeSeriesQueryLanguage").toString()));
      }
      if ((jsonObj.get("unitOverride") != null && !jsonObj.get("unitOverride").isJsonNull()) && !jsonObj.get("unitOverride").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unitOverride` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unitOverride").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimeSeriesQuery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimeSeriesQuery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimeSeriesQuery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimeSeriesQuery.class));

       return (TypeAdapter<T>) new TypeAdapter<TimeSeriesQuery>() {
           @Override
           public void write(JsonWriter out, TimeSeriesQuery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TimeSeriesQuery read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TimeSeriesQuery given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TimeSeriesQuery
   * @throws IOException if the JSON string is invalid with respect to TimeSeriesQuery
   */
  public static TimeSeriesQuery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimeSeriesQuery.class);
  }

  /**
   * Convert an instance of TimeSeriesQuery to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

