/*
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Axis;
import org.openapitools.client.model.ChartOptions;
import org.openapitools.client.model.DataSet;
import org.openapitools.client.model.Threshold;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A chart that displays data on a 2D (X and Y axes) plane.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:39.941966-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class XyChart {
  public static final String SERIALIZED_NAME_CHART_OPTIONS = "chartOptions";
  @SerializedName(SERIALIZED_NAME_CHART_OPTIONS)
  private ChartOptions chartOptions;

  public static final String SERIALIZED_NAME_DATA_SETS = "dataSets";
  @SerializedName(SERIALIZED_NAME_DATA_SETS)
  private List<DataSet> dataSets = new ArrayList<>();

  public static final String SERIALIZED_NAME_THRESHOLDS = "thresholds";
  @SerializedName(SERIALIZED_NAME_THRESHOLDS)
  private List<Threshold> thresholds = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIMESHIFT_DURATION = "timeshiftDuration";
  @SerializedName(SERIALIZED_NAME_TIMESHIFT_DURATION)
  private String timeshiftDuration;

  public static final String SERIALIZED_NAME_X_AXIS = "xAxis";
  @SerializedName(SERIALIZED_NAME_X_AXIS)
  private Axis xAxis;

  public static final String SERIALIZED_NAME_Y2_AXIS = "y2Axis";
  @SerializedName(SERIALIZED_NAME_Y2_AXIS)
  private Axis y2Axis;

  public static final String SERIALIZED_NAME_Y_AXIS = "yAxis";
  @SerializedName(SERIALIZED_NAME_Y_AXIS)
  private Axis yAxis;

  public XyChart() {
  }

  public XyChart chartOptions(ChartOptions chartOptions) {
    this.chartOptions = chartOptions;
    return this;
  }

  /**
   * Get chartOptions
   * @return chartOptions
   */
  @javax.annotation.Nullable
  public ChartOptions getChartOptions() {
    return chartOptions;
  }

  public void setChartOptions(ChartOptions chartOptions) {
    this.chartOptions = chartOptions;
  }


  public XyChart dataSets(List<DataSet> dataSets) {
    this.dataSets = dataSets;
    return this;
  }

  public XyChart addDataSetsItem(DataSet dataSetsItem) {
    if (this.dataSets == null) {
      this.dataSets = new ArrayList<>();
    }
    this.dataSets.add(dataSetsItem);
    return this;
  }

  /**
   * Required. The data displayed in this chart.
   * @return dataSets
   */
  @javax.annotation.Nullable
  public List<DataSet> getDataSets() {
    return dataSets;
  }

  public void setDataSets(List<DataSet> dataSets) {
    this.dataSets = dataSets;
  }


  public XyChart thresholds(List<Threshold> thresholds) {
    this.thresholds = thresholds;
    return this;
  }

  public XyChart addThresholdsItem(Threshold thresholdsItem) {
    if (this.thresholds == null) {
      this.thresholds = new ArrayList<>();
    }
    this.thresholds.add(thresholdsItem);
    return this;
  }

  /**
   * Threshold lines drawn horizontally across the chart.
   * @return thresholds
   */
  @javax.annotation.Nullable
  public List<Threshold> getThresholds() {
    return thresholds;
  }

  public void setThresholds(List<Threshold> thresholds) {
    this.thresholds = thresholds;
  }


  public XyChart timeshiftDuration(String timeshiftDuration) {
    this.timeshiftDuration = timeshiftDuration;
    return this;
  }

  /**
   * The duration used to display a comparison chart. A comparison chart simultaneously shows values from two similar-length time periods (e.g., week-over-week metrics). The duration must be positive, and it can only be applied to charts with data sets of LINE plot type.
   * @return timeshiftDuration
   */
  @javax.annotation.Nullable
  public String getTimeshiftDuration() {
    return timeshiftDuration;
  }

  public void setTimeshiftDuration(String timeshiftDuration) {
    this.timeshiftDuration = timeshiftDuration;
  }


  public XyChart xAxis(Axis xAxis) {
    this.xAxis = xAxis;
    return this;
  }

  /**
   * Get xAxis
   * @return xAxis
   */
  @javax.annotation.Nullable
  public Axis getxAxis() {
    return xAxis;
  }

  public void setxAxis(Axis xAxis) {
    this.xAxis = xAxis;
  }


  public XyChart y2Axis(Axis y2Axis) {
    this.y2Axis = y2Axis;
    return this;
  }

  /**
   * Get y2Axis
   * @return y2Axis
   */
  @javax.annotation.Nullable
  public Axis getY2Axis() {
    return y2Axis;
  }

  public void setY2Axis(Axis y2Axis) {
    this.y2Axis = y2Axis;
  }


  public XyChart yAxis(Axis yAxis) {
    this.yAxis = yAxis;
    return this;
  }

  /**
   * Get yAxis
   * @return yAxis
   */
  @javax.annotation.Nullable
  public Axis getyAxis() {
    return yAxis;
  }

  public void setyAxis(Axis yAxis) {
    this.yAxis = yAxis;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    XyChart xyChart = (XyChart) o;
    return Objects.equals(this.chartOptions, xyChart.chartOptions) &&
        Objects.equals(this.dataSets, xyChart.dataSets) &&
        Objects.equals(this.thresholds, xyChart.thresholds) &&
        Objects.equals(this.timeshiftDuration, xyChart.timeshiftDuration) &&
        Objects.equals(this.xAxis, xyChart.xAxis) &&
        Objects.equals(this.y2Axis, xyChart.y2Axis) &&
        Objects.equals(this.yAxis, xyChart.yAxis);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chartOptions, dataSets, thresholds, timeshiftDuration, xAxis, y2Axis, yAxis);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class XyChart {\n");
    sb.append("    chartOptions: ").append(toIndentedString(chartOptions)).append("\n");
    sb.append("    dataSets: ").append(toIndentedString(dataSets)).append("\n");
    sb.append("    thresholds: ").append(toIndentedString(thresholds)).append("\n");
    sb.append("    timeshiftDuration: ").append(toIndentedString(timeshiftDuration)).append("\n");
    sb.append("    xAxis: ").append(toIndentedString(xAxis)).append("\n");
    sb.append("    y2Axis: ").append(toIndentedString(y2Axis)).append("\n");
    sb.append("    yAxis: ").append(toIndentedString(yAxis)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chartOptions");
    openapiFields.add("dataSets");
    openapiFields.add("thresholds");
    openapiFields.add("timeshiftDuration");
    openapiFields.add("xAxis");
    openapiFields.add("y2Axis");
    openapiFields.add("yAxis");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to XyChart
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!XyChart.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in XyChart is not found in the empty JSON string", XyChart.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!XyChart.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `XyChart` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `chartOptions`
      if (jsonObj.get("chartOptions") != null && !jsonObj.get("chartOptions").isJsonNull()) {
        ChartOptions.validateJsonElement(jsonObj.get("chartOptions"));
      }
      if (jsonObj.get("dataSets") != null && !jsonObj.get("dataSets").isJsonNull()) {
        JsonArray jsonArraydataSets = jsonObj.getAsJsonArray("dataSets");
        if (jsonArraydataSets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dataSets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dataSets` to be an array in the JSON string but got `%s`", jsonObj.get("dataSets").toString()));
          }

          // validate the optional field `dataSets` (array)
          for (int i = 0; i < jsonArraydataSets.size(); i++) {
            DataSet.validateJsonElement(jsonArraydataSets.get(i));
          };
        }
      }
      if (jsonObj.get("thresholds") != null && !jsonObj.get("thresholds").isJsonNull()) {
        JsonArray jsonArraythresholds = jsonObj.getAsJsonArray("thresholds");
        if (jsonArraythresholds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("thresholds").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `thresholds` to be an array in the JSON string but got `%s`", jsonObj.get("thresholds").toString()));
          }

          // validate the optional field `thresholds` (array)
          for (int i = 0; i < jsonArraythresholds.size(); i++) {
            Threshold.validateJsonElement(jsonArraythresholds.get(i));
          };
        }
      }
      if ((jsonObj.get("timeshiftDuration") != null && !jsonObj.get("timeshiftDuration").isJsonNull()) && !jsonObj.get("timeshiftDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeshiftDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeshiftDuration").toString()));
      }
      // validate the optional field `xAxis`
      if (jsonObj.get("xAxis") != null && !jsonObj.get("xAxis").isJsonNull()) {
        Axis.validateJsonElement(jsonObj.get("xAxis"));
      }
      // validate the optional field `y2Axis`
      if (jsonObj.get("y2Axis") != null && !jsonObj.get("y2Axis").isJsonNull()) {
        Axis.validateJsonElement(jsonObj.get("y2Axis"));
      }
      // validate the optional field `yAxis`
      if (jsonObj.get("yAxis") != null && !jsonObj.get("yAxis").isJsonNull()) {
        Axis.validateJsonElement(jsonObj.get("yAxis"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!XyChart.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'XyChart' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<XyChart> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(XyChart.class));

       return (TypeAdapter<T>) new TypeAdapter<XyChart>() {
           @Override
           public void write(JsonWriter out, XyChart value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public XyChart read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of XyChart given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of XyChart
   * @throws IOException if the JSON string is invalid with respect to XyChart
   */
  public static XyChart fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, XyChart.class);
  }

  /**
   * Convert an instance of XyChart to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

