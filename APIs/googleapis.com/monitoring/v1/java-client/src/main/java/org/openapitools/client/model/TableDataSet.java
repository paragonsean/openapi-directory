/*
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TableDisplayOptions;
import org.openapitools.client.model.TimeSeriesQuery;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Groups a time series query definition with table options.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:39.941966-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TableDataSet {
  public static final String SERIALIZED_NAME_MIN_ALIGNMENT_PERIOD = "minAlignmentPeriod";
  @SerializedName(SERIALIZED_NAME_MIN_ALIGNMENT_PERIOD)
  private String minAlignmentPeriod;

  public static final String SERIALIZED_NAME_TABLE_DISPLAY_OPTIONS = "tableDisplayOptions";
  @SerializedName(SERIALIZED_NAME_TABLE_DISPLAY_OPTIONS)
  private TableDisplayOptions tableDisplayOptions;

  public static final String SERIALIZED_NAME_TABLE_TEMPLATE = "tableTemplate";
  @SerializedName(SERIALIZED_NAME_TABLE_TEMPLATE)
  private String tableTemplate;

  public static final String SERIALIZED_NAME_TIME_SERIES_QUERY = "timeSeriesQuery";
  @SerializedName(SERIALIZED_NAME_TIME_SERIES_QUERY)
  private TimeSeriesQuery timeSeriesQuery;

  public TableDataSet() {
  }

  public TableDataSet minAlignmentPeriod(String minAlignmentPeriod) {
    this.minAlignmentPeriod = minAlignmentPeriod;
    return this;
  }

  /**
   * Optional. The lower bound on data point frequency for this data set, implemented by specifying the minimum alignment period to use in a time series query For example, if the data is published once every 10 minutes, the min_alignment_period should be at least 10 minutes. It would not make sense to fetch and align data at one minute intervals.
   * @return minAlignmentPeriod
   */
  @javax.annotation.Nullable
  public String getMinAlignmentPeriod() {
    return minAlignmentPeriod;
  }

  public void setMinAlignmentPeriod(String minAlignmentPeriod) {
    this.minAlignmentPeriod = minAlignmentPeriod;
  }


  public TableDataSet tableDisplayOptions(TableDisplayOptions tableDisplayOptions) {
    this.tableDisplayOptions = tableDisplayOptions;
    return this;
  }

  /**
   * Get tableDisplayOptions
   * @return tableDisplayOptions
   */
  @javax.annotation.Nullable
  public TableDisplayOptions getTableDisplayOptions() {
    return tableDisplayOptions;
  }

  public void setTableDisplayOptions(TableDisplayOptions tableDisplayOptions) {
    this.tableDisplayOptions = tableDisplayOptions;
  }


  public TableDataSet tableTemplate(String tableTemplate) {
    this.tableTemplate = tableTemplate;
    return this;
  }

  /**
   * Optional. A template string for naming TimeSeries in the resulting data set. This should be a string with interpolations of the form ${label_name}, which will resolve to the label&#39;s value i.e. \&quot;${resource.labels.project_id}.\&quot;
   * @return tableTemplate
   */
  @javax.annotation.Nullable
  public String getTableTemplate() {
    return tableTemplate;
  }

  public void setTableTemplate(String tableTemplate) {
    this.tableTemplate = tableTemplate;
  }


  public TableDataSet timeSeriesQuery(TimeSeriesQuery timeSeriesQuery) {
    this.timeSeriesQuery = timeSeriesQuery;
    return this;
  }

  /**
   * Get timeSeriesQuery
   * @return timeSeriesQuery
   */
  @javax.annotation.Nullable
  public TimeSeriesQuery getTimeSeriesQuery() {
    return timeSeriesQuery;
  }

  public void setTimeSeriesQuery(TimeSeriesQuery timeSeriesQuery) {
    this.timeSeriesQuery = timeSeriesQuery;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TableDataSet tableDataSet = (TableDataSet) o;
    return Objects.equals(this.minAlignmentPeriod, tableDataSet.minAlignmentPeriod) &&
        Objects.equals(this.tableDisplayOptions, tableDataSet.tableDisplayOptions) &&
        Objects.equals(this.tableTemplate, tableDataSet.tableTemplate) &&
        Objects.equals(this.timeSeriesQuery, tableDataSet.timeSeriesQuery);
  }

  @Override
  public int hashCode() {
    return Objects.hash(minAlignmentPeriod, tableDisplayOptions, tableTemplate, timeSeriesQuery);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TableDataSet {\n");
    sb.append("    minAlignmentPeriod: ").append(toIndentedString(minAlignmentPeriod)).append("\n");
    sb.append("    tableDisplayOptions: ").append(toIndentedString(tableDisplayOptions)).append("\n");
    sb.append("    tableTemplate: ").append(toIndentedString(tableTemplate)).append("\n");
    sb.append("    timeSeriesQuery: ").append(toIndentedString(timeSeriesQuery)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("minAlignmentPeriod");
    openapiFields.add("tableDisplayOptions");
    openapiFields.add("tableTemplate");
    openapiFields.add("timeSeriesQuery");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TableDataSet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TableDataSet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TableDataSet is not found in the empty JSON string", TableDataSet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TableDataSet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TableDataSet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("minAlignmentPeriod") != null && !jsonObj.get("minAlignmentPeriod").isJsonNull()) && !jsonObj.get("minAlignmentPeriod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minAlignmentPeriod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minAlignmentPeriod").toString()));
      }
      // validate the optional field `tableDisplayOptions`
      if (jsonObj.get("tableDisplayOptions") != null && !jsonObj.get("tableDisplayOptions").isJsonNull()) {
        TableDisplayOptions.validateJsonElement(jsonObj.get("tableDisplayOptions"));
      }
      if ((jsonObj.get("tableTemplate") != null && !jsonObj.get("tableTemplate").isJsonNull()) && !jsonObj.get("tableTemplate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tableTemplate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tableTemplate").toString()));
      }
      // validate the optional field `timeSeriesQuery`
      if (jsonObj.get("timeSeriesQuery") != null && !jsonObj.get("timeSeriesQuery").isJsonNull()) {
        TimeSeriesQuery.validateJsonElement(jsonObj.get("timeSeriesQuery"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TableDataSet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TableDataSet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TableDataSet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TableDataSet.class));

       return (TypeAdapter<T>) new TypeAdapter<TableDataSet>() {
           @Override
           public void write(JsonWriter out, TableDataSet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TableDataSet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TableDataSet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TableDataSet
   * @throws IOException if the JSON string is invalid with respect to TableDataSet
   */
  public static TableDataSet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TableDataSet.class);
  }

  /**
   * Convert an instance of TableDataSet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

