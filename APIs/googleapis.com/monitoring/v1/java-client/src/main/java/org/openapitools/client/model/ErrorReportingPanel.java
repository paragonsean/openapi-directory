/*
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A widget that displays a list of error groups.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:39.941966-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ErrorReportingPanel {
  public static final String SERIALIZED_NAME_PROJECT_NAMES = "projectNames";
  @SerializedName(SERIALIZED_NAME_PROJECT_NAMES)
  private List<String> projectNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICES = "services";
  @SerializedName(SERIALIZED_NAME_SERVICES)
  private List<String> services = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERSIONS = "versions";
  @SerializedName(SERIALIZED_NAME_VERSIONS)
  private List<String> versions = new ArrayList<>();

  public ErrorReportingPanel() {
  }

  public ErrorReportingPanel projectNames(List<String> projectNames) {
    this.projectNames = projectNames;
    return this;
  }

  public ErrorReportingPanel addProjectNamesItem(String projectNamesItem) {
    if (this.projectNames == null) {
      this.projectNames = new ArrayList<>();
    }
    this.projectNames.add(projectNamesItem);
    return this;
  }

  /**
   * The resource name of the Google Cloud Platform project. Written as projects/{projectID} or projects/{projectNumber}, where {projectID} and {projectNumber} can be found in the Google Cloud console (https://support.google.com/cloud/answer/6158840).Examples: projects/my-project-123, projects/5551234.
   * @return projectNames
   */
  @javax.annotation.Nullable
  public List<String> getProjectNames() {
    return projectNames;
  }

  public void setProjectNames(List<String> projectNames) {
    this.projectNames = projectNames;
  }


  public ErrorReportingPanel services(List<String> services) {
    this.services = services;
    return this;
  }

  public ErrorReportingPanel addServicesItem(String servicesItem) {
    if (this.services == null) {
      this.services = new ArrayList<>();
    }
    this.services.add(servicesItem);
    return this;
  }

  /**
   * An identifier of the service, such as the name of the executable, job, or Google App Engine service name. This field is expected to have a low number of values that are relatively stable over time, as opposed to version, which can be changed whenever new code is deployed.Contains the service name for error reports extracted from Google App Engine logs or default if the App Engine default service is used.
   * @return services
   */
  @javax.annotation.Nullable
  public List<String> getServices() {
    return services;
  }

  public void setServices(List<String> services) {
    this.services = services;
  }


  public ErrorReportingPanel versions(List<String> versions) {
    this.versions = versions;
    return this;
  }

  public ErrorReportingPanel addVersionsItem(String versionsItem) {
    if (this.versions == null) {
      this.versions = new ArrayList<>();
    }
    this.versions.add(versionsItem);
    return this;
  }

  /**
   * Represents the source code version that the developer provided, which could represent a version label or a Git SHA-1 hash, for example. For App Engine standard environment, the version is set to the version of the app.
   * @return versions
   */
  @javax.annotation.Nullable
  public List<String> getVersions() {
    return versions;
  }

  public void setVersions(List<String> versions) {
    this.versions = versions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ErrorReportingPanel errorReportingPanel = (ErrorReportingPanel) o;
    return Objects.equals(this.projectNames, errorReportingPanel.projectNames) &&
        Objects.equals(this.services, errorReportingPanel.services) &&
        Objects.equals(this.versions, errorReportingPanel.versions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(projectNames, services, versions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ErrorReportingPanel {\n");
    sb.append("    projectNames: ").append(toIndentedString(projectNames)).append("\n");
    sb.append("    services: ").append(toIndentedString(services)).append("\n");
    sb.append("    versions: ").append(toIndentedString(versions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("projectNames");
    openapiFields.add("services");
    openapiFields.add("versions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ErrorReportingPanel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ErrorReportingPanel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ErrorReportingPanel is not found in the empty JSON string", ErrorReportingPanel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ErrorReportingPanel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ErrorReportingPanel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("projectNames") != null && !jsonObj.get("projectNames").isJsonNull() && !jsonObj.get("projectNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectNames` to be an array in the JSON string but got `%s`", jsonObj.get("projectNames").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("services") != null && !jsonObj.get("services").isJsonNull() && !jsonObj.get("services").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `services` to be an array in the JSON string but got `%s`", jsonObj.get("services").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("versions") != null && !jsonObj.get("versions").isJsonNull() && !jsonObj.get("versions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `versions` to be an array in the JSON string but got `%s`", jsonObj.get("versions").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ErrorReportingPanel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ErrorReportingPanel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ErrorReportingPanel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ErrorReportingPanel.class));

       return (TypeAdapter<T>) new TypeAdapter<ErrorReportingPanel>() {
           @Override
           public void write(JsonWriter out, ErrorReportingPanel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ErrorReportingPanel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ErrorReportingPanel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ErrorReportingPanel
   * @throws IOException if the JSON string is invalid with respect to ErrorReportingPanel
   */
  public static ErrorReportingPanel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ErrorReportingPanel.class);
  }

  /**
   * Convert an instance of ErrorReportingPanel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

