/*
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Dashboard;
import org.openapitools.client.model.HttpBody;
import org.openapitools.client.model.ListDashboardsResponse;
import org.openapitools.client.model.QueryExemplarsRequest;
import org.openapitools.client.model.QueryInstantRequest;
import org.openapitools.client.model.QueryLabelsRequest;
import org.openapitools.client.model.QueryRangeRequest;
import org.openapitools.client.model.QuerySeriesRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Creates a new custom dashboard. For examples on how you can use this API to create dashboards, see Managing dashboards by API (https://cloud.google.com/monitoring/dashboards/api-dashboard). This method requires the monitoring.dashboards.create permission on the specified project. For more information about permissions, see Cloud Identity and Access Management (https://cloud.google.com/iam).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void monitoringProjectsDashboardsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean validateOnly = null;
        Dashboard dashboard = null;
        Dashboard response = api.monitoringProjectsDashboardsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, validateOnly, dashboard);
        // TODO: test validations
    }

    /**
     * Deletes an existing custom dashboard.This method requires the monitoring.dashboards.delete permission on the specified dashboard. For more information, see Cloud Identity and Access Management (https://cloud.google.com/iam).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void monitoringProjectsDashboardsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.monitoringProjectsDashboardsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Fetches a specific dashboard.This method requires the monitoring.dashboards.get permission on the specified dashboard. For more information, see Cloud Identity and Access Management (https://cloud.google.com/iam).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void monitoringProjectsDashboardsGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Dashboard response = api.monitoringProjectsDashboardsGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists the existing dashboards.This method requires the monitoring.dashboards.list permission on the specified project. For more information, see Cloud Identity and Access Management (https://cloud.google.com/iam).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void monitoringProjectsDashboardsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListDashboardsResponse response = api.monitoringProjectsDashboardsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Replaces an existing custom dashboard with a new definition.This method requires the monitoring.dashboards.update permission on the specified dashboard. For more information, see Cloud Identity and Access Management (https://cloud.google.com/iam).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void monitoringProjectsDashboardsPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean validateOnly = null;
        Dashboard dashboard = null;
        Dashboard response = api.monitoringProjectsDashboardsPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, validateOnly, dashboard);
        // TODO: test validations
    }

    /**
     * Lists possible values for a given label name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void monitoringProjectsLocationPrometheusApiV1LabelValuesTest() throws ApiException {
        String name = null;
        String location = null;
        String label = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String end = null;
        String match = null;
        String start = null;
        HttpBody response = api.monitoringProjectsLocationPrometheusApiV1LabelValues(name, location, label, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, end, match, start);
        // TODO: test validations
    }

    /**
     * Lists labels for metrics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void monitoringProjectsLocationPrometheusApiV1LabelsTest() throws ApiException {
        String name = null;
        String location = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        QueryLabelsRequest queryLabelsRequest = null;
        HttpBody response = api.monitoringProjectsLocationPrometheusApiV1Labels(name, location, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, queryLabelsRequest);
        // TODO: test validations
    }

    /**
     * Lists metadata for metrics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void monitoringProjectsLocationPrometheusApiV1MetadataListTest() throws ApiException {
        String name = null;
        String location = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String limit = null;
        String metric = null;
        HttpBody response = api.monitoringProjectsLocationPrometheusApiV1MetadataList(name, location, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, limit, metric);
        // TODO: test validations
    }

    /**
     * Evaluate a PromQL query at a single point in time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void monitoringProjectsLocationPrometheusApiV1QueryTest() throws ApiException {
        String name = null;
        String location = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        QueryInstantRequest queryInstantRequest = null;
        HttpBody response = api.monitoringProjectsLocationPrometheusApiV1Query(name, location, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, queryInstantRequest);
        // TODO: test validations
    }

    /**
     * Lists exemplars relevant to a given PromQL query,
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void monitoringProjectsLocationPrometheusApiV1QueryExemplarsTest() throws ApiException {
        String name = null;
        String location = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        QueryExemplarsRequest queryExemplarsRequest = null;
        HttpBody response = api.monitoringProjectsLocationPrometheusApiV1QueryExemplars(name, location, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, queryExemplarsRequest);
        // TODO: test validations
    }

    /**
     * Evaluate a PromQL query with start, end time range.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void monitoringProjectsLocationPrometheusApiV1QueryRangeTest() throws ApiException {
        String name = null;
        String location = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        QueryRangeRequest queryRangeRequest = null;
        HttpBody response = api.monitoringProjectsLocationPrometheusApiV1QueryRange(name, location, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, queryRangeRequest);
        // TODO: test validations
    }

    /**
     * Lists metadata for metrics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void monitoringProjectsLocationPrometheusApiV1SeriesTest() throws ApiException {
        String name = null;
        String location = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        QuerySeriesRequest querySeriesRequest = null;
        HttpBody response = api.monitoringProjectsLocationPrometheusApiV1Series(name, location, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, querySeriesRequest);
        // TODO: test validations
    }

}
