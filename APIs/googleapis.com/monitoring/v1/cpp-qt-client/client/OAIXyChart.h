/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIXyChart.h
 *
 * A chart that displays data on a 2D (X and Y axes) plane.
 */

#ifndef OAIXyChart_H
#define OAIXyChart_H

#include <QJsonObject>

#include "OAIAxis.h"
#include "OAIChartOptions.h"
#include "OAIDataSet.h"
#include "OAIThreshold.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIChartOptions;
class OAIDataSet;
class OAIThreshold;
class OAIAxis;

class OAIXyChart : public OAIObject {
public:
    OAIXyChart();
    OAIXyChart(QString json);
    ~OAIXyChart() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIChartOptions getChartOptions() const;
    void setChartOptions(const OAIChartOptions &chart_options);
    bool is_chart_options_Set() const;
    bool is_chart_options_Valid() const;

    QList<OAIDataSet> getDataSets() const;
    void setDataSets(const QList<OAIDataSet> &data_sets);
    bool is_data_sets_Set() const;
    bool is_data_sets_Valid() const;

    QList<OAIThreshold> getThresholds() const;
    void setThresholds(const QList<OAIThreshold> &thresholds);
    bool is_thresholds_Set() const;
    bool is_thresholds_Valid() const;

    QString getTimeshiftDuration() const;
    void setTimeshiftDuration(const QString &timeshift_duration);
    bool is_timeshift_duration_Set() const;
    bool is_timeshift_duration_Valid() const;

    OAIAxis getXAxis() const;
    void setXAxis(const OAIAxis &x_axis);
    bool is_x_axis_Set() const;
    bool is_x_axis_Valid() const;

    OAIAxis getY2Axis() const;
    void setY2Axis(const OAIAxis &y2_axis);
    bool is_y2_axis_Set() const;
    bool is_y2_axis_Valid() const;

    OAIAxis getYAxis() const;
    void setYAxis(const OAIAxis &y_axis);
    bool is_y_axis_Set() const;
    bool is_y_axis_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIChartOptions m_chart_options;
    bool m_chart_options_isSet;
    bool m_chart_options_isValid;

    QList<OAIDataSet> m_data_sets;
    bool m_data_sets_isSet;
    bool m_data_sets_isValid;

    QList<OAIThreshold> m_thresholds;
    bool m_thresholds_isSet;
    bool m_thresholds_isValid;

    QString m_timeshift_duration;
    bool m_timeshift_duration_isSet;
    bool m_timeshift_duration_isValid;

    OAIAxis m_x_axis;
    bool m_x_axis_isSet;
    bool m_x_axis_isValid;

    OAIAxis m_y2_axis;
    bool m_y2_axis_isSet;
    bool m_y2_axis_isValid;

    OAIAxis m_y_axis;
    bool m_y_axis_isSet;
    bool m_y_axis_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIXyChart)

#endif // OAIXyChart_H
