/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryRangeRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryRangeRequest::OAIQueryRangeRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryRangeRequest::OAIQueryRangeRequest() {
    this->initializeModel();
}

OAIQueryRangeRequest::~OAIQueryRangeRequest() {}

void OAIQueryRangeRequest::initializeModel() {

    m_end_isSet = false;
    m_end_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_step_isSet = false;
    m_step_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;
}

void OAIQueryRangeRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryRangeRequest::fromJsonObject(QJsonObject json) {

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_step_isValid = ::OpenAPI::fromJsonValue(m_step, json[QString("step")]);
    m_step_isSet = !json[QString("step")].isNull() && m_step_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;
}

QString OAIQueryRangeRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryRangeRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_end_isSet) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_step_isSet) {
        obj.insert(QString("step"), ::OpenAPI::toJsonValue(m_step));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    return obj;
}

QString OAIQueryRangeRequest::getEnd() const {
    return m_end;
}
void OAIQueryRangeRequest::setEnd(const QString &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAIQueryRangeRequest::is_end_Set() const{
    return m_end_isSet;
}

bool OAIQueryRangeRequest::is_end_Valid() const{
    return m_end_isValid;
}

QString OAIQueryRangeRequest::getQuery() const {
    return m_query;
}
void OAIQueryRangeRequest::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIQueryRangeRequest::is_query_Set() const{
    return m_query_isSet;
}

bool OAIQueryRangeRequest::is_query_Valid() const{
    return m_query_isValid;
}

QString OAIQueryRangeRequest::getStart() const {
    return m_start;
}
void OAIQueryRangeRequest::setStart(const QString &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIQueryRangeRequest::is_start_Set() const{
    return m_start_isSet;
}

bool OAIQueryRangeRequest::is_start_Valid() const{
    return m_start_isValid;
}

QString OAIQueryRangeRequest::getStep() const {
    return m_step;
}
void OAIQueryRangeRequest::setStep(const QString &step) {
    m_step = step;
    m_step_isSet = true;
}

bool OAIQueryRangeRequest::is_step_Set() const{
    return m_step_isSet;
}

bool OAIQueryRangeRequest::is_step_Valid() const{
    return m_step_isValid;
}

QString OAIQueryRangeRequest::getTimeout() const {
    return m_timeout;
}
void OAIQueryRangeRequest::setTimeout(const QString &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIQueryRangeRequest::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIQueryRangeRequest::is_timeout_Valid() const{
    return m_timeout_isValid;
}

bool OAIQueryRangeRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryRangeRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
