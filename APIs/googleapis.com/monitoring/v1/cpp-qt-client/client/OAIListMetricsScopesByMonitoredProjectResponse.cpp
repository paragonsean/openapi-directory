/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListMetricsScopesByMonitoredProjectResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListMetricsScopesByMonitoredProjectResponse::OAIListMetricsScopesByMonitoredProjectResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListMetricsScopesByMonitoredProjectResponse::OAIListMetricsScopesByMonitoredProjectResponse() {
    this->initializeModel();
}

OAIListMetricsScopesByMonitoredProjectResponse::~OAIListMetricsScopesByMonitoredProjectResponse() {}

void OAIListMetricsScopesByMonitoredProjectResponse::initializeModel() {

    m_metrics_scopes_isSet = false;
    m_metrics_scopes_isValid = false;
}

void OAIListMetricsScopesByMonitoredProjectResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListMetricsScopesByMonitoredProjectResponse::fromJsonObject(QJsonObject json) {

    m_metrics_scopes_isValid = ::OpenAPI::fromJsonValue(m_metrics_scopes, json[QString("metricsScopes")]);
    m_metrics_scopes_isSet = !json[QString("metricsScopes")].isNull() && m_metrics_scopes_isValid;
}

QString OAIListMetricsScopesByMonitoredProjectResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListMetricsScopesByMonitoredProjectResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_metrics_scopes.size() > 0) {
        obj.insert(QString("metricsScopes"), ::OpenAPI::toJsonValue(m_metrics_scopes));
    }
    return obj;
}

QList<OAIMetricsScope> OAIListMetricsScopesByMonitoredProjectResponse::getMetricsScopes() const {
    return m_metrics_scopes;
}
void OAIListMetricsScopesByMonitoredProjectResponse::setMetricsScopes(const QList<OAIMetricsScope> &metrics_scopes) {
    m_metrics_scopes = metrics_scopes;
    m_metrics_scopes_isSet = true;
}

bool OAIListMetricsScopesByMonitoredProjectResponse::is_metrics_scopes_Set() const{
    return m_metrics_scopes_isSet;
}

bool OAIListMetricsScopesByMonitoredProjectResponse::is_metrics_scopes_Valid() const{
    return m_metrics_scopes_isValid;
}

bool OAIListMetricsScopesByMonitoredProjectResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metrics_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListMetricsScopesByMonitoredProjectResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
