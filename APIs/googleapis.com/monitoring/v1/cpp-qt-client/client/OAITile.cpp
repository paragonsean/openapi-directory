/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITile::OAITile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITile::OAITile() {
    this->initializeModel();
}

OAITile::~OAITile() {}

void OAITile::initializeModel() {

    m_height_isSet = false;
    m_height_isValid = false;

    m_widget_isSet = false;
    m_widget_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;

    m_x_pos_isSet = false;
    m_x_pos_isValid = false;

    m_y_pos_isSet = false;
    m_y_pos_isValid = false;
}

void OAITile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITile::fromJsonObject(QJsonObject json) {

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_widget_isValid = ::OpenAPI::fromJsonValue(m_widget, json[QString("widget")]);
    m_widget_isSet = !json[QString("widget")].isNull() && m_widget_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;

    m_x_pos_isValid = ::OpenAPI::fromJsonValue(m_x_pos, json[QString("xPos")]);
    m_x_pos_isSet = !json[QString("xPos")].isNull() && m_x_pos_isValid;

    m_y_pos_isValid = ::OpenAPI::fromJsonValue(m_y_pos, json[QString("yPos")]);
    m_y_pos_isSet = !json[QString("yPos")].isNull() && m_y_pos_isValid;
}

QString OAITile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITile::asJsonObject() const {
    QJsonObject obj;
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_widget.isSet()) {
        obj.insert(QString("widget"), ::OpenAPI::toJsonValue(m_widget));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    if (m_x_pos_isSet) {
        obj.insert(QString("xPos"), ::OpenAPI::toJsonValue(m_x_pos));
    }
    if (m_y_pos_isSet) {
        obj.insert(QString("yPos"), ::OpenAPI::toJsonValue(m_y_pos));
    }
    return obj;
}

qint32 OAITile::getHeight() const {
    return m_height;
}
void OAITile::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAITile::is_height_Set() const{
    return m_height_isSet;
}

bool OAITile::is_height_Valid() const{
    return m_height_isValid;
}

OAIWidget OAITile::getWidget() const {
    return m_widget;
}
void OAITile::setWidget(const OAIWidget &widget) {
    m_widget = widget;
    m_widget_isSet = true;
}

bool OAITile::is_widget_Set() const{
    return m_widget_isSet;
}

bool OAITile::is_widget_Valid() const{
    return m_widget_isValid;
}

qint32 OAITile::getWidth() const {
    return m_width;
}
void OAITile::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAITile::is_width_Set() const{
    return m_width_isSet;
}

bool OAITile::is_width_Valid() const{
    return m_width_isValid;
}

qint32 OAITile::getXPos() const {
    return m_x_pos;
}
void OAITile::setXPos(const qint32 &x_pos) {
    m_x_pos = x_pos;
    m_x_pos_isSet = true;
}

bool OAITile::is_x_pos_Set() const{
    return m_x_pos_isSet;
}

bool OAITile::is_x_pos_Valid() const{
    return m_x_pos_isValid;
}

qint32 OAITile::getYPos() const {
    return m_y_pos;
}
void OAITile::setYPos(const qint32 &y_pos) {
    m_y_pos = y_pos;
    m_y_pos_isSet = true;
}

bool OAITile::is_y_pos_Set() const{
    return m_y_pos_isSet;
}

bool OAITile::is_y_pos_Valid() const{
    return m_y_pos_isValid;
}

bool OAITile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_widget.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_pos_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_pos_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
