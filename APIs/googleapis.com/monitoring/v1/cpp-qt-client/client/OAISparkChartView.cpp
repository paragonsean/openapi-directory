/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISparkChartView.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISparkChartView::OAISparkChartView(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISparkChartView::OAISparkChartView() {
    this->initializeModel();
}

OAISparkChartView::~OAISparkChartView() {}

void OAISparkChartView::initializeModel() {

    m_min_alignment_period_isSet = false;
    m_min_alignment_period_isValid = false;

    m_spark_chart_type_isSet = false;
    m_spark_chart_type_isValid = false;
}

void OAISparkChartView::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISparkChartView::fromJsonObject(QJsonObject json) {

    m_min_alignment_period_isValid = ::OpenAPI::fromJsonValue(m_min_alignment_period, json[QString("minAlignmentPeriod")]);
    m_min_alignment_period_isSet = !json[QString("minAlignmentPeriod")].isNull() && m_min_alignment_period_isValid;

    m_spark_chart_type_isValid = ::OpenAPI::fromJsonValue(m_spark_chart_type, json[QString("sparkChartType")]);
    m_spark_chart_type_isSet = !json[QString("sparkChartType")].isNull() && m_spark_chart_type_isValid;
}

QString OAISparkChartView::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISparkChartView::asJsonObject() const {
    QJsonObject obj;
    if (m_min_alignment_period_isSet) {
        obj.insert(QString("minAlignmentPeriod"), ::OpenAPI::toJsonValue(m_min_alignment_period));
    }
    if (m_spark_chart_type_isSet) {
        obj.insert(QString("sparkChartType"), ::OpenAPI::toJsonValue(m_spark_chart_type));
    }
    return obj;
}

QString OAISparkChartView::getMinAlignmentPeriod() const {
    return m_min_alignment_period;
}
void OAISparkChartView::setMinAlignmentPeriod(const QString &min_alignment_period) {
    m_min_alignment_period = min_alignment_period;
    m_min_alignment_period_isSet = true;
}

bool OAISparkChartView::is_min_alignment_period_Set() const{
    return m_min_alignment_period_isSet;
}

bool OAISparkChartView::is_min_alignment_period_Valid() const{
    return m_min_alignment_period_isValid;
}

QString OAISparkChartView::getSparkChartType() const {
    return m_spark_chart_type;
}
void OAISparkChartView::setSparkChartType(const QString &spark_chart_type) {
    m_spark_chart_type = spark_chart_type;
    m_spark_chart_type_isSet = true;
}

bool OAISparkChartView::is_spark_chart_type_Set() const{
    return m_spark_chart_type_isSet;
}

bool OAISparkChartView::is_spark_chart_type_Valid() const{
    return m_spark_chart_type_isValid;
}

bool OAISparkChartView::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_min_alignment_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spark_chart_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISparkChartView::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
