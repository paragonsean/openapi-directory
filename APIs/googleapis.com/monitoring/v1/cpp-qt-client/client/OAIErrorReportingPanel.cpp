/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorReportingPanel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorReportingPanel::OAIErrorReportingPanel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorReportingPanel::OAIErrorReportingPanel() {
    this->initializeModel();
}

OAIErrorReportingPanel::~OAIErrorReportingPanel() {}

void OAIErrorReportingPanel::initializeModel() {

    m_project_names_isSet = false;
    m_project_names_isValid = false;

    m_services_isSet = false;
    m_services_isValid = false;

    m_versions_isSet = false;
    m_versions_isValid = false;
}

void OAIErrorReportingPanel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrorReportingPanel::fromJsonObject(QJsonObject json) {

    m_project_names_isValid = ::OpenAPI::fromJsonValue(m_project_names, json[QString("projectNames")]);
    m_project_names_isSet = !json[QString("projectNames")].isNull() && m_project_names_isValid;

    m_services_isValid = ::OpenAPI::fromJsonValue(m_services, json[QString("services")]);
    m_services_isSet = !json[QString("services")].isNull() && m_services_isValid;

    m_versions_isValid = ::OpenAPI::fromJsonValue(m_versions, json[QString("versions")]);
    m_versions_isSet = !json[QString("versions")].isNull() && m_versions_isValid;
}

QString OAIErrorReportingPanel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrorReportingPanel::asJsonObject() const {
    QJsonObject obj;
    if (m_project_names.size() > 0) {
        obj.insert(QString("projectNames"), ::OpenAPI::toJsonValue(m_project_names));
    }
    if (m_services.size() > 0) {
        obj.insert(QString("services"), ::OpenAPI::toJsonValue(m_services));
    }
    if (m_versions.size() > 0) {
        obj.insert(QString("versions"), ::OpenAPI::toJsonValue(m_versions));
    }
    return obj;
}

QList<QString> OAIErrorReportingPanel::getProjectNames() const {
    return m_project_names;
}
void OAIErrorReportingPanel::setProjectNames(const QList<QString> &project_names) {
    m_project_names = project_names;
    m_project_names_isSet = true;
}

bool OAIErrorReportingPanel::is_project_names_Set() const{
    return m_project_names_isSet;
}

bool OAIErrorReportingPanel::is_project_names_Valid() const{
    return m_project_names_isValid;
}

QList<QString> OAIErrorReportingPanel::getServices() const {
    return m_services;
}
void OAIErrorReportingPanel::setServices(const QList<QString> &services) {
    m_services = services;
    m_services_isSet = true;
}

bool OAIErrorReportingPanel::is_services_Set() const{
    return m_services_isSet;
}

bool OAIErrorReportingPanel::is_services_Valid() const{
    return m_services_isValid;
}

QList<QString> OAIErrorReportingPanel::getVersions() const {
    return m_versions;
}
void OAIErrorReportingPanel::setVersions(const QList<QString> &versions) {
    m_versions = versions;
    m_versions_isSet = true;
}

bool OAIErrorReportingPanel::is_versions_Set() const{
    return m_versions_isSet;
}

bool OAIErrorReportingPanel::is_versions_Valid() const{
    return m_versions_isValid;
}

bool OAIErrorReportingPanel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_project_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_services.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrorReportingPanel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
