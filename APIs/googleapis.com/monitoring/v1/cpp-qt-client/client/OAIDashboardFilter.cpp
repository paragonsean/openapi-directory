/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDashboardFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDashboardFilter::OAIDashboardFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDashboardFilter::OAIDashboardFilter() {
    this->initializeModel();
}

OAIDashboardFilter::~OAIDashboardFilter() {}

void OAIDashboardFilter::initializeModel() {

    m_filter_type_isSet = false;
    m_filter_type_isValid = false;

    m_label_key_isSet = false;
    m_label_key_isValid = false;

    m_string_value_isSet = false;
    m_string_value_isValid = false;

    m_template_variable_isSet = false;
    m_template_variable_isValid = false;
}

void OAIDashboardFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDashboardFilter::fromJsonObject(QJsonObject json) {

    m_filter_type_isValid = ::OpenAPI::fromJsonValue(m_filter_type, json[QString("filterType")]);
    m_filter_type_isSet = !json[QString("filterType")].isNull() && m_filter_type_isValid;

    m_label_key_isValid = ::OpenAPI::fromJsonValue(m_label_key, json[QString("labelKey")]);
    m_label_key_isSet = !json[QString("labelKey")].isNull() && m_label_key_isValid;

    m_string_value_isValid = ::OpenAPI::fromJsonValue(m_string_value, json[QString("stringValue")]);
    m_string_value_isSet = !json[QString("stringValue")].isNull() && m_string_value_isValid;

    m_template_variable_isValid = ::OpenAPI::fromJsonValue(m_template_variable, json[QString("templateVariable")]);
    m_template_variable_isSet = !json[QString("templateVariable")].isNull() && m_template_variable_isValid;
}

QString OAIDashboardFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDashboardFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_type_isSet) {
        obj.insert(QString("filterType"), ::OpenAPI::toJsonValue(m_filter_type));
    }
    if (m_label_key_isSet) {
        obj.insert(QString("labelKey"), ::OpenAPI::toJsonValue(m_label_key));
    }
    if (m_string_value_isSet) {
        obj.insert(QString("stringValue"), ::OpenAPI::toJsonValue(m_string_value));
    }
    if (m_template_variable_isSet) {
        obj.insert(QString("templateVariable"), ::OpenAPI::toJsonValue(m_template_variable));
    }
    return obj;
}

QString OAIDashboardFilter::getFilterType() const {
    return m_filter_type;
}
void OAIDashboardFilter::setFilterType(const QString &filter_type) {
    m_filter_type = filter_type;
    m_filter_type_isSet = true;
}

bool OAIDashboardFilter::is_filter_type_Set() const{
    return m_filter_type_isSet;
}

bool OAIDashboardFilter::is_filter_type_Valid() const{
    return m_filter_type_isValid;
}

QString OAIDashboardFilter::getLabelKey() const {
    return m_label_key;
}
void OAIDashboardFilter::setLabelKey(const QString &label_key) {
    m_label_key = label_key;
    m_label_key_isSet = true;
}

bool OAIDashboardFilter::is_label_key_Set() const{
    return m_label_key_isSet;
}

bool OAIDashboardFilter::is_label_key_Valid() const{
    return m_label_key_isValid;
}

QString OAIDashboardFilter::getStringValue() const {
    return m_string_value;
}
void OAIDashboardFilter::setStringValue(const QString &string_value) {
    m_string_value = string_value;
    m_string_value_isSet = true;
}

bool OAIDashboardFilter::is_string_value_Set() const{
    return m_string_value_isSet;
}

bool OAIDashboardFilter::is_string_value_Valid() const{
    return m_string_value_isValid;
}

QString OAIDashboardFilter::getTemplateVariable() const {
    return m_template_variable;
}
void OAIDashboardFilter::setTemplateVariable(const QString &template_variable) {
    m_template_variable = template_variable;
    m_template_variable_isSet = true;
}

bool OAIDashboardFilter::is_template_variable_Set() const{
    return m_template_variable_isSet;
}

bool OAIDashboardFilter::is_template_variable_Valid() const{
    return m_template_variable_isValid;
}

bool OAIDashboardFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_variable_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDashboardFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
