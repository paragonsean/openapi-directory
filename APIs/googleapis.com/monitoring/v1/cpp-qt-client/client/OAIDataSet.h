/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDataSet.h
 *
 * Groups a time series query definition with charting options.
 */

#ifndef OAIDataSet_H
#define OAIDataSet_H

#include <QJsonObject>

#include "OAIBreakdown.h"
#include "OAIDimension.h"
#include "OAIMeasure.h"
#include "OAITimeSeriesQuery.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBreakdown;
class OAIDimension;
class OAIMeasure;
class OAITimeSeriesQuery;

class OAIDataSet : public OAIObject {
public:
    OAIDataSet();
    OAIDataSet(QString json);
    ~OAIDataSet() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIBreakdown> getBreakdowns() const;
    void setBreakdowns(const QList<OAIBreakdown> &breakdowns);
    bool is_breakdowns_Set() const;
    bool is_breakdowns_Valid() const;

    QList<OAIDimension> getDimensions() const;
    void setDimensions(const QList<OAIDimension> &dimensions);
    bool is_dimensions_Set() const;
    bool is_dimensions_Valid() const;

    QString getLegendTemplate() const;
    void setLegendTemplate(const QString &legend_template);
    bool is_legend_template_Set() const;
    bool is_legend_template_Valid() const;

    QList<OAIMeasure> getMeasures() const;
    void setMeasures(const QList<OAIMeasure> &measures);
    bool is_measures_Set() const;
    bool is_measures_Valid() const;

    QString getMinAlignmentPeriod() const;
    void setMinAlignmentPeriod(const QString &min_alignment_period);
    bool is_min_alignment_period_Set() const;
    bool is_min_alignment_period_Valid() const;

    QString getPlotType() const;
    void setPlotType(const QString &plot_type);
    bool is_plot_type_Set() const;
    bool is_plot_type_Valid() const;

    QString getTargetAxis() const;
    void setTargetAxis(const QString &target_axis);
    bool is_target_axis_Set() const;
    bool is_target_axis_Valid() const;

    OAITimeSeriesQuery getTimeSeriesQuery() const;
    void setTimeSeriesQuery(const OAITimeSeriesQuery &time_series_query);
    bool is_time_series_query_Set() const;
    bool is_time_series_query_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIBreakdown> m_breakdowns;
    bool m_breakdowns_isSet;
    bool m_breakdowns_isValid;

    QList<OAIDimension> m_dimensions;
    bool m_dimensions_isSet;
    bool m_dimensions_isValid;

    QString m_legend_template;
    bool m_legend_template_isSet;
    bool m_legend_template_isValid;

    QList<OAIMeasure> m_measures;
    bool m_measures_isSet;
    bool m_measures_isValid;

    QString m_min_alignment_period;
    bool m_min_alignment_period_isSet;
    bool m_min_alignment_period_isValid;

    QString m_plot_type;
    bool m_plot_type_isSet;
    bool m_plot_type_isValid;

    QString m_target_axis;
    bool m_target_axis_isSet;
    bool m_target_axis_isValid;

    OAITimeSeriesQuery m_time_series_query;
    bool m_time_series_query_isSet;
    bool m_time_series_query_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDataSet)

#endif // OAIDataSet_H
