/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSet::OAIDataSet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSet::OAIDataSet() {
    this->initializeModel();
}

OAIDataSet::~OAIDataSet() {}

void OAIDataSet::initializeModel() {

    m_breakdowns_isSet = false;
    m_breakdowns_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_legend_template_isSet = false;
    m_legend_template_isValid = false;

    m_measures_isSet = false;
    m_measures_isValid = false;

    m_min_alignment_period_isSet = false;
    m_min_alignment_period_isValid = false;

    m_plot_type_isSet = false;
    m_plot_type_isValid = false;

    m_target_axis_isSet = false;
    m_target_axis_isValid = false;

    m_time_series_query_isSet = false;
    m_time_series_query_isValid = false;
}

void OAIDataSet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSet::fromJsonObject(QJsonObject json) {

    m_breakdowns_isValid = ::OpenAPI::fromJsonValue(m_breakdowns, json[QString("breakdowns")]);
    m_breakdowns_isSet = !json[QString("breakdowns")].isNull() && m_breakdowns_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_legend_template_isValid = ::OpenAPI::fromJsonValue(m_legend_template, json[QString("legendTemplate")]);
    m_legend_template_isSet = !json[QString("legendTemplate")].isNull() && m_legend_template_isValid;

    m_measures_isValid = ::OpenAPI::fromJsonValue(m_measures, json[QString("measures")]);
    m_measures_isSet = !json[QString("measures")].isNull() && m_measures_isValid;

    m_min_alignment_period_isValid = ::OpenAPI::fromJsonValue(m_min_alignment_period, json[QString("minAlignmentPeriod")]);
    m_min_alignment_period_isSet = !json[QString("minAlignmentPeriod")].isNull() && m_min_alignment_period_isValid;

    m_plot_type_isValid = ::OpenAPI::fromJsonValue(m_plot_type, json[QString("plotType")]);
    m_plot_type_isSet = !json[QString("plotType")].isNull() && m_plot_type_isValid;

    m_target_axis_isValid = ::OpenAPI::fromJsonValue(m_target_axis, json[QString("targetAxis")]);
    m_target_axis_isSet = !json[QString("targetAxis")].isNull() && m_target_axis_isValid;

    m_time_series_query_isValid = ::OpenAPI::fromJsonValue(m_time_series_query, json[QString("timeSeriesQuery")]);
    m_time_series_query_isSet = !json[QString("timeSeriesQuery")].isNull() && m_time_series_query_isValid;
}

QString OAIDataSet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSet::asJsonObject() const {
    QJsonObject obj;
    if (m_breakdowns.size() > 0) {
        obj.insert(QString("breakdowns"), ::OpenAPI::toJsonValue(m_breakdowns));
    }
    if (m_dimensions.size() > 0) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_legend_template_isSet) {
        obj.insert(QString("legendTemplate"), ::OpenAPI::toJsonValue(m_legend_template));
    }
    if (m_measures.size() > 0) {
        obj.insert(QString("measures"), ::OpenAPI::toJsonValue(m_measures));
    }
    if (m_min_alignment_period_isSet) {
        obj.insert(QString("minAlignmentPeriod"), ::OpenAPI::toJsonValue(m_min_alignment_period));
    }
    if (m_plot_type_isSet) {
        obj.insert(QString("plotType"), ::OpenAPI::toJsonValue(m_plot_type));
    }
    if (m_target_axis_isSet) {
        obj.insert(QString("targetAxis"), ::OpenAPI::toJsonValue(m_target_axis));
    }
    if (m_time_series_query.isSet()) {
        obj.insert(QString("timeSeriesQuery"), ::OpenAPI::toJsonValue(m_time_series_query));
    }
    return obj;
}

QList<OAIBreakdown> OAIDataSet::getBreakdowns() const {
    return m_breakdowns;
}
void OAIDataSet::setBreakdowns(const QList<OAIBreakdown> &breakdowns) {
    m_breakdowns = breakdowns;
    m_breakdowns_isSet = true;
}

bool OAIDataSet::is_breakdowns_Set() const{
    return m_breakdowns_isSet;
}

bool OAIDataSet::is_breakdowns_Valid() const{
    return m_breakdowns_isValid;
}

QList<OAIDimension> OAIDataSet::getDimensions() const {
    return m_dimensions;
}
void OAIDataSet::setDimensions(const QList<OAIDimension> &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIDataSet::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIDataSet::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

QString OAIDataSet::getLegendTemplate() const {
    return m_legend_template;
}
void OAIDataSet::setLegendTemplate(const QString &legend_template) {
    m_legend_template = legend_template;
    m_legend_template_isSet = true;
}

bool OAIDataSet::is_legend_template_Set() const{
    return m_legend_template_isSet;
}

bool OAIDataSet::is_legend_template_Valid() const{
    return m_legend_template_isValid;
}

QList<OAIMeasure> OAIDataSet::getMeasures() const {
    return m_measures;
}
void OAIDataSet::setMeasures(const QList<OAIMeasure> &measures) {
    m_measures = measures;
    m_measures_isSet = true;
}

bool OAIDataSet::is_measures_Set() const{
    return m_measures_isSet;
}

bool OAIDataSet::is_measures_Valid() const{
    return m_measures_isValid;
}

QString OAIDataSet::getMinAlignmentPeriod() const {
    return m_min_alignment_period;
}
void OAIDataSet::setMinAlignmentPeriod(const QString &min_alignment_period) {
    m_min_alignment_period = min_alignment_period;
    m_min_alignment_period_isSet = true;
}

bool OAIDataSet::is_min_alignment_period_Set() const{
    return m_min_alignment_period_isSet;
}

bool OAIDataSet::is_min_alignment_period_Valid() const{
    return m_min_alignment_period_isValid;
}

QString OAIDataSet::getPlotType() const {
    return m_plot_type;
}
void OAIDataSet::setPlotType(const QString &plot_type) {
    m_plot_type = plot_type;
    m_plot_type_isSet = true;
}

bool OAIDataSet::is_plot_type_Set() const{
    return m_plot_type_isSet;
}

bool OAIDataSet::is_plot_type_Valid() const{
    return m_plot_type_isValid;
}

QString OAIDataSet::getTargetAxis() const {
    return m_target_axis;
}
void OAIDataSet::setTargetAxis(const QString &target_axis) {
    m_target_axis = target_axis;
    m_target_axis_isSet = true;
}

bool OAIDataSet::is_target_axis_Set() const{
    return m_target_axis_isSet;
}

bool OAIDataSet::is_target_axis_Valid() const{
    return m_target_axis_isValid;
}

OAITimeSeriesQuery OAIDataSet::getTimeSeriesQuery() const {
    return m_time_series_query;
}
void OAIDataSet::setTimeSeriesQuery(const OAITimeSeriesQuery &time_series_query) {
    m_time_series_query = time_series_query;
    m_time_series_query_isSet = true;
}

bool OAIDataSet::is_time_series_query_Set() const{
    return m_time_series_query_isSet;
}

bool OAIDataSet::is_time_series_query_Valid() const{
    return m_time_series_query_isValid;
}

bool OAIDataSet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_breakdowns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_legend_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_measures.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_alignment_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plot_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_axis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_series_query.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
