/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDimension.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDimension::OAIDimension(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDimension::OAIDimension() {
    this->initializeModel();
}

OAIDimension::~OAIDimension() {}

void OAIDimension::initializeModel() {

    m_column_isSet = false;
    m_column_isValid = false;

    m_column_type_isSet = false;
    m_column_type_isValid = false;

    m_float_bin_size_isSet = false;
    m_float_bin_size_isValid = false;

    m_max_bin_count_isSet = false;
    m_max_bin_count_isValid = false;

    m_numeric_bin_size_isSet = false;
    m_numeric_bin_size_isValid = false;

    m_sort_column_isSet = false;
    m_sort_column_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;

    m_time_bin_size_isSet = false;
    m_time_bin_size_isValid = false;
}

void OAIDimension::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDimension::fromJsonObject(QJsonObject json) {

    m_column_isValid = ::OpenAPI::fromJsonValue(m_column, json[QString("column")]);
    m_column_isSet = !json[QString("column")].isNull() && m_column_isValid;

    m_column_type_isValid = ::OpenAPI::fromJsonValue(m_column_type, json[QString("columnType")]);
    m_column_type_isSet = !json[QString("columnType")].isNull() && m_column_type_isValid;

    m_float_bin_size_isValid = ::OpenAPI::fromJsonValue(m_float_bin_size, json[QString("floatBinSize")]);
    m_float_bin_size_isSet = !json[QString("floatBinSize")].isNull() && m_float_bin_size_isValid;

    m_max_bin_count_isValid = ::OpenAPI::fromJsonValue(m_max_bin_count, json[QString("maxBinCount")]);
    m_max_bin_count_isSet = !json[QString("maxBinCount")].isNull() && m_max_bin_count_isValid;

    m_numeric_bin_size_isValid = ::OpenAPI::fromJsonValue(m_numeric_bin_size, json[QString("numericBinSize")]);
    m_numeric_bin_size_isSet = !json[QString("numericBinSize")].isNull() && m_numeric_bin_size_isValid;

    m_sort_column_isValid = ::OpenAPI::fromJsonValue(m_sort_column, json[QString("sortColumn")]);
    m_sort_column_isSet = !json[QString("sortColumn")].isNull() && m_sort_column_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sortOrder")]);
    m_sort_order_isSet = !json[QString("sortOrder")].isNull() && m_sort_order_isValid;

    m_time_bin_size_isValid = ::OpenAPI::fromJsonValue(m_time_bin_size, json[QString("timeBinSize")]);
    m_time_bin_size_isSet = !json[QString("timeBinSize")].isNull() && m_time_bin_size_isValid;
}

QString OAIDimension::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDimension::asJsonObject() const {
    QJsonObject obj;
    if (m_column_isSet) {
        obj.insert(QString("column"), ::OpenAPI::toJsonValue(m_column));
    }
    if (m_column_type_isSet) {
        obj.insert(QString("columnType"), ::OpenAPI::toJsonValue(m_column_type));
    }
    if (m_float_bin_size_isSet) {
        obj.insert(QString("floatBinSize"), ::OpenAPI::toJsonValue(m_float_bin_size));
    }
    if (m_max_bin_count_isSet) {
        obj.insert(QString("maxBinCount"), ::OpenAPI::toJsonValue(m_max_bin_count));
    }
    if (m_numeric_bin_size_isSet) {
        obj.insert(QString("numericBinSize"), ::OpenAPI::toJsonValue(m_numeric_bin_size));
    }
    if (m_sort_column_isSet) {
        obj.insert(QString("sortColumn"), ::OpenAPI::toJsonValue(m_sort_column));
    }
    if (m_sort_order_isSet) {
        obj.insert(QString("sortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    if (m_time_bin_size_isSet) {
        obj.insert(QString("timeBinSize"), ::OpenAPI::toJsonValue(m_time_bin_size));
    }
    return obj;
}

QString OAIDimension::getColumn() const {
    return m_column;
}
void OAIDimension::setColumn(const QString &column) {
    m_column = column;
    m_column_isSet = true;
}

bool OAIDimension::is_column_Set() const{
    return m_column_isSet;
}

bool OAIDimension::is_column_Valid() const{
    return m_column_isValid;
}

QString OAIDimension::getColumnType() const {
    return m_column_type;
}
void OAIDimension::setColumnType(const QString &column_type) {
    m_column_type = column_type;
    m_column_type_isSet = true;
}

bool OAIDimension::is_column_type_Set() const{
    return m_column_type_isSet;
}

bool OAIDimension::is_column_type_Valid() const{
    return m_column_type_isValid;
}

double OAIDimension::getFloatBinSize() const {
    return m_float_bin_size;
}
void OAIDimension::setFloatBinSize(const double &float_bin_size) {
    m_float_bin_size = float_bin_size;
    m_float_bin_size_isSet = true;
}

bool OAIDimension::is_float_bin_size_Set() const{
    return m_float_bin_size_isSet;
}

bool OAIDimension::is_float_bin_size_Valid() const{
    return m_float_bin_size_isValid;
}

qint32 OAIDimension::getMaxBinCount() const {
    return m_max_bin_count;
}
void OAIDimension::setMaxBinCount(const qint32 &max_bin_count) {
    m_max_bin_count = max_bin_count;
    m_max_bin_count_isSet = true;
}

bool OAIDimension::is_max_bin_count_Set() const{
    return m_max_bin_count_isSet;
}

bool OAIDimension::is_max_bin_count_Valid() const{
    return m_max_bin_count_isValid;
}

qint32 OAIDimension::getNumericBinSize() const {
    return m_numeric_bin_size;
}
void OAIDimension::setNumericBinSize(const qint32 &numeric_bin_size) {
    m_numeric_bin_size = numeric_bin_size;
    m_numeric_bin_size_isSet = true;
}

bool OAIDimension::is_numeric_bin_size_Set() const{
    return m_numeric_bin_size_isSet;
}

bool OAIDimension::is_numeric_bin_size_Valid() const{
    return m_numeric_bin_size_isValid;
}

QString OAIDimension::getSortColumn() const {
    return m_sort_column;
}
void OAIDimension::setSortColumn(const QString &sort_column) {
    m_sort_column = sort_column;
    m_sort_column_isSet = true;
}

bool OAIDimension::is_sort_column_Set() const{
    return m_sort_column_isSet;
}

bool OAIDimension::is_sort_column_Valid() const{
    return m_sort_column_isValid;
}

QString OAIDimension::getSortOrder() const {
    return m_sort_order;
}
void OAIDimension::setSortOrder(const QString &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIDimension::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIDimension::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

QString OAIDimension::getTimeBinSize() const {
    return m_time_bin_size;
}
void OAIDimension::setTimeBinSize(const QString &time_bin_size) {
    m_time_bin_size = time_bin_size;
    m_time_bin_size_isSet = true;
}

bool OAIDimension::is_time_bin_size_Set() const{
    return m_time_bin_size_isSet;
}

bool OAIDimension::is_time_bin_size_Valid() const{
    return m_time_bin_size_isValid;
}

bool OAIDimension::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_float_bin_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_bin_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_numeric_bin_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_column_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_bin_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDimension::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
