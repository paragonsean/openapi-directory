/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAggregation.h
 *
 * Describes how to combine multiple time series to provide a different view of the data. Aggregation of time series is done in two steps. First, each time series in the set is aligned to the same time interval boundaries, then the set of time series is optionally reduced in number.Alignment consists of applying the per_series_aligner operation to each time series after its data has been divided into regular alignment_period time intervals. This process takes all of the data points in an alignment period, applies a mathematical transformation such as averaging, minimum, maximum, delta, etc., and converts them into a single data point per period.Reduction is when the aligned and transformed time series can optionally be combined, reducing the number of time series through similar mathematical transformations. Reduction involves applying a cross_series_reducer to all the time series, optionally sorting the time series into subsets with group_by_fields, and applying the reducer to each subset.The raw time series data can contain a huge amount of information from multiple sources. Alignment and reduction transforms this mass of data into a more manageable and representative collection of data, for example \&quot;the 95% latency across the average of all tasks in a cluster\&quot;. This representative data can be more easily graphed and comprehended, and the individual time series data is still available for later drilldown. For more details, see Filtering and aggregation (https://cloud.google.com/monitoring/api/v3/aggregation).
 */

#ifndef OAIAggregation_H
#define OAIAggregation_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAggregation : public OAIObject {
public:
    OAIAggregation();
    OAIAggregation(QString json);
    ~OAIAggregation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAlignmentPeriod() const;
    void setAlignmentPeriod(const QString &alignment_period);
    bool is_alignment_period_Set() const;
    bool is_alignment_period_Valid() const;

    QString getCrossSeriesReducer() const;
    void setCrossSeriesReducer(const QString &cross_series_reducer);
    bool is_cross_series_reducer_Set() const;
    bool is_cross_series_reducer_Valid() const;

    QList<QString> getGroupByFields() const;
    void setGroupByFields(const QList<QString> &group_by_fields);
    bool is_group_by_fields_Set() const;
    bool is_group_by_fields_Valid() const;

    QString getPerSeriesAligner() const;
    void setPerSeriesAligner(const QString &per_series_aligner);
    bool is_per_series_aligner_Set() const;
    bool is_per_series_aligner_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_alignment_period;
    bool m_alignment_period_isSet;
    bool m_alignment_period_isValid;

    QString m_cross_series_reducer;
    bool m_cross_series_reducer_isSet;
    bool m_cross_series_reducer_isValid;

    QList<QString> m_group_by_fields;
    bool m_group_by_fields_isSet;
    bool m_group_by_fields_isValid;

    QString m_per_series_aligner;
    bool m_per_series_aligner_isSet;
    bool m_per_series_aligner_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAggregation)

#endif // OAIAggregation_H
