/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPickTimeSeriesFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPickTimeSeriesFilter::OAIPickTimeSeriesFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPickTimeSeriesFilter::OAIPickTimeSeriesFilter() {
    this->initializeModel();
}

OAIPickTimeSeriesFilter::~OAIPickTimeSeriesFilter() {}

void OAIPickTimeSeriesFilter::initializeModel() {

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_num_time_series_isSet = false;
    m_num_time_series_isValid = false;

    m_ranking_method_isSet = false;
    m_ranking_method_isValid = false;
}

void OAIPickTimeSeriesFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPickTimeSeriesFilter::fromJsonObject(QJsonObject json) {

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;

    m_num_time_series_isValid = ::OpenAPI::fromJsonValue(m_num_time_series, json[QString("numTimeSeries")]);
    m_num_time_series_isSet = !json[QString("numTimeSeries")].isNull() && m_num_time_series_isValid;

    m_ranking_method_isValid = ::OpenAPI::fromJsonValue(m_ranking_method, json[QString("rankingMethod")]);
    m_ranking_method_isSet = !json[QString("rankingMethod")].isNull() && m_ranking_method_isValid;
}

QString OAIPickTimeSeriesFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPickTimeSeriesFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_direction_isSet) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_interval.isSet()) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_num_time_series_isSet) {
        obj.insert(QString("numTimeSeries"), ::OpenAPI::toJsonValue(m_num_time_series));
    }
    if (m_ranking_method_isSet) {
        obj.insert(QString("rankingMethod"), ::OpenAPI::toJsonValue(m_ranking_method));
    }
    return obj;
}

QString OAIPickTimeSeriesFilter::getDirection() const {
    return m_direction;
}
void OAIPickTimeSeriesFilter::setDirection(const QString &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAIPickTimeSeriesFilter::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAIPickTimeSeriesFilter::is_direction_Valid() const{
    return m_direction_isValid;
}

OAIInterval OAIPickTimeSeriesFilter::getInterval() const {
    return m_interval;
}
void OAIPickTimeSeriesFilter::setInterval(const OAIInterval &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAIPickTimeSeriesFilter::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAIPickTimeSeriesFilter::is_interval_Valid() const{
    return m_interval_isValid;
}

qint32 OAIPickTimeSeriesFilter::getNumTimeSeries() const {
    return m_num_time_series;
}
void OAIPickTimeSeriesFilter::setNumTimeSeries(const qint32 &num_time_series) {
    m_num_time_series = num_time_series;
    m_num_time_series_isSet = true;
}

bool OAIPickTimeSeriesFilter::is_num_time_series_Set() const{
    return m_num_time_series_isSet;
}

bool OAIPickTimeSeriesFilter::is_num_time_series_Valid() const{
    return m_num_time_series_isValid;
}

QString OAIPickTimeSeriesFilter::getRankingMethod() const {
    return m_ranking_method;
}
void OAIPickTimeSeriesFilter::setRankingMethod(const QString &ranking_method) {
    m_ranking_method = ranking_method;
    m_ranking_method_isSet = true;
}

bool OAIPickTimeSeriesFilter::is_ranking_method_Set() const{
    return m_ranking_method_isSet;
}

bool OAIPickTimeSeriesFilter::is_ranking_method_Valid() const{
    return m_ranking_method_isValid;
}

bool OAIPickTimeSeriesFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_time_series_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ranking_method_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPickTimeSeriesFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
