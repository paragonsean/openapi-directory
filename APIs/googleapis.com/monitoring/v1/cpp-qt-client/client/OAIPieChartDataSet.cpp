/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPieChartDataSet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPieChartDataSet::OAIPieChartDataSet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPieChartDataSet::OAIPieChartDataSet() {
    this->initializeModel();
}

OAIPieChartDataSet::~OAIPieChartDataSet() {}

void OAIPieChartDataSet::initializeModel() {

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_measures_isSet = false;
    m_measures_isValid = false;

    m_min_alignment_period_isSet = false;
    m_min_alignment_period_isValid = false;

    m_slice_name_template_isSet = false;
    m_slice_name_template_isValid = false;

    m_time_series_query_isSet = false;
    m_time_series_query_isValid = false;
}

void OAIPieChartDataSet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPieChartDataSet::fromJsonObject(QJsonObject json) {

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_measures_isValid = ::OpenAPI::fromJsonValue(m_measures, json[QString("measures")]);
    m_measures_isSet = !json[QString("measures")].isNull() && m_measures_isValid;

    m_min_alignment_period_isValid = ::OpenAPI::fromJsonValue(m_min_alignment_period, json[QString("minAlignmentPeriod")]);
    m_min_alignment_period_isSet = !json[QString("minAlignmentPeriod")].isNull() && m_min_alignment_period_isValid;

    m_slice_name_template_isValid = ::OpenAPI::fromJsonValue(m_slice_name_template, json[QString("sliceNameTemplate")]);
    m_slice_name_template_isSet = !json[QString("sliceNameTemplate")].isNull() && m_slice_name_template_isValid;

    m_time_series_query_isValid = ::OpenAPI::fromJsonValue(m_time_series_query, json[QString("timeSeriesQuery")]);
    m_time_series_query_isSet = !json[QString("timeSeriesQuery")].isNull() && m_time_series_query_isValid;
}

QString OAIPieChartDataSet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPieChartDataSet::asJsonObject() const {
    QJsonObject obj;
    if (m_dimensions.size() > 0) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_measures.size() > 0) {
        obj.insert(QString("measures"), ::OpenAPI::toJsonValue(m_measures));
    }
    if (m_min_alignment_period_isSet) {
        obj.insert(QString("minAlignmentPeriod"), ::OpenAPI::toJsonValue(m_min_alignment_period));
    }
    if (m_slice_name_template_isSet) {
        obj.insert(QString("sliceNameTemplate"), ::OpenAPI::toJsonValue(m_slice_name_template));
    }
    if (m_time_series_query.isSet()) {
        obj.insert(QString("timeSeriesQuery"), ::OpenAPI::toJsonValue(m_time_series_query));
    }
    return obj;
}

QList<OAIDimension> OAIPieChartDataSet::getDimensions() const {
    return m_dimensions;
}
void OAIPieChartDataSet::setDimensions(const QList<OAIDimension> &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIPieChartDataSet::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIPieChartDataSet::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

QList<OAIMeasure> OAIPieChartDataSet::getMeasures() const {
    return m_measures;
}
void OAIPieChartDataSet::setMeasures(const QList<OAIMeasure> &measures) {
    m_measures = measures;
    m_measures_isSet = true;
}

bool OAIPieChartDataSet::is_measures_Set() const{
    return m_measures_isSet;
}

bool OAIPieChartDataSet::is_measures_Valid() const{
    return m_measures_isValid;
}

QString OAIPieChartDataSet::getMinAlignmentPeriod() const {
    return m_min_alignment_period;
}
void OAIPieChartDataSet::setMinAlignmentPeriod(const QString &min_alignment_period) {
    m_min_alignment_period = min_alignment_period;
    m_min_alignment_period_isSet = true;
}

bool OAIPieChartDataSet::is_min_alignment_period_Set() const{
    return m_min_alignment_period_isSet;
}

bool OAIPieChartDataSet::is_min_alignment_period_Valid() const{
    return m_min_alignment_period_isValid;
}

QString OAIPieChartDataSet::getSliceNameTemplate() const {
    return m_slice_name_template;
}
void OAIPieChartDataSet::setSliceNameTemplate(const QString &slice_name_template) {
    m_slice_name_template = slice_name_template;
    m_slice_name_template_isSet = true;
}

bool OAIPieChartDataSet::is_slice_name_template_Set() const{
    return m_slice_name_template_isSet;
}

bool OAIPieChartDataSet::is_slice_name_template_Valid() const{
    return m_slice_name_template_isValid;
}

OAITimeSeriesQuery OAIPieChartDataSet::getTimeSeriesQuery() const {
    return m_time_series_query;
}
void OAIPieChartDataSet::setTimeSeriesQuery(const OAITimeSeriesQuery &time_series_query) {
    m_time_series_query = time_series_query;
    m_time_series_query_isSet = true;
}

bool OAIPieChartDataSet::is_time_series_query_Set() const{
    return m_time_series_query_isSet;
}

bool OAIPieChartDataSet::is_time_series_query_Valid() const{
    return m_time_series_query_isValid;
}

bool OAIPieChartDataSet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dimensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_measures.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_alignment_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slice_name_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_series_query.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPieChartDataSet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
