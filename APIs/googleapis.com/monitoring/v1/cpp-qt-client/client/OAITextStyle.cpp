/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITextStyle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITextStyle::OAITextStyle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITextStyle::OAITextStyle() {
    this->initializeModel();
}

OAITextStyle::~OAITextStyle() {}

void OAITextStyle::initializeModel() {

    m_background_color_isSet = false;
    m_background_color_isValid = false;

    m_font_size_isSet = false;
    m_font_size_isValid = false;

    m_horizontal_alignment_isSet = false;
    m_horizontal_alignment_isValid = false;

    m_padding_isSet = false;
    m_padding_isValid = false;

    m_pointer_location_isSet = false;
    m_pointer_location_isValid = false;

    m_text_color_isSet = false;
    m_text_color_isValid = false;

    m_vertical_alignment_isSet = false;
    m_vertical_alignment_isValid = false;
}

void OAITextStyle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITextStyle::fromJsonObject(QJsonObject json) {

    m_background_color_isValid = ::OpenAPI::fromJsonValue(m_background_color, json[QString("backgroundColor")]);
    m_background_color_isSet = !json[QString("backgroundColor")].isNull() && m_background_color_isValid;

    m_font_size_isValid = ::OpenAPI::fromJsonValue(m_font_size, json[QString("fontSize")]);
    m_font_size_isSet = !json[QString("fontSize")].isNull() && m_font_size_isValid;

    m_horizontal_alignment_isValid = ::OpenAPI::fromJsonValue(m_horizontal_alignment, json[QString("horizontalAlignment")]);
    m_horizontal_alignment_isSet = !json[QString("horizontalAlignment")].isNull() && m_horizontal_alignment_isValid;

    m_padding_isValid = ::OpenAPI::fromJsonValue(m_padding, json[QString("padding")]);
    m_padding_isSet = !json[QString("padding")].isNull() && m_padding_isValid;

    m_pointer_location_isValid = ::OpenAPI::fromJsonValue(m_pointer_location, json[QString("pointerLocation")]);
    m_pointer_location_isSet = !json[QString("pointerLocation")].isNull() && m_pointer_location_isValid;

    m_text_color_isValid = ::OpenAPI::fromJsonValue(m_text_color, json[QString("textColor")]);
    m_text_color_isSet = !json[QString("textColor")].isNull() && m_text_color_isValid;

    m_vertical_alignment_isValid = ::OpenAPI::fromJsonValue(m_vertical_alignment, json[QString("verticalAlignment")]);
    m_vertical_alignment_isSet = !json[QString("verticalAlignment")].isNull() && m_vertical_alignment_isValid;
}

QString OAITextStyle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITextStyle::asJsonObject() const {
    QJsonObject obj;
    if (m_background_color_isSet) {
        obj.insert(QString("backgroundColor"), ::OpenAPI::toJsonValue(m_background_color));
    }
    if (m_font_size_isSet) {
        obj.insert(QString("fontSize"), ::OpenAPI::toJsonValue(m_font_size));
    }
    if (m_horizontal_alignment_isSet) {
        obj.insert(QString("horizontalAlignment"), ::OpenAPI::toJsonValue(m_horizontal_alignment));
    }
    if (m_padding_isSet) {
        obj.insert(QString("padding"), ::OpenAPI::toJsonValue(m_padding));
    }
    if (m_pointer_location_isSet) {
        obj.insert(QString("pointerLocation"), ::OpenAPI::toJsonValue(m_pointer_location));
    }
    if (m_text_color_isSet) {
        obj.insert(QString("textColor"), ::OpenAPI::toJsonValue(m_text_color));
    }
    if (m_vertical_alignment_isSet) {
        obj.insert(QString("verticalAlignment"), ::OpenAPI::toJsonValue(m_vertical_alignment));
    }
    return obj;
}

QString OAITextStyle::getBackgroundColor() const {
    return m_background_color;
}
void OAITextStyle::setBackgroundColor(const QString &background_color) {
    m_background_color = background_color;
    m_background_color_isSet = true;
}

bool OAITextStyle::is_background_color_Set() const{
    return m_background_color_isSet;
}

bool OAITextStyle::is_background_color_Valid() const{
    return m_background_color_isValid;
}

QString OAITextStyle::getFontSize() const {
    return m_font_size;
}
void OAITextStyle::setFontSize(const QString &font_size) {
    m_font_size = font_size;
    m_font_size_isSet = true;
}

bool OAITextStyle::is_font_size_Set() const{
    return m_font_size_isSet;
}

bool OAITextStyle::is_font_size_Valid() const{
    return m_font_size_isValid;
}

QString OAITextStyle::getHorizontalAlignment() const {
    return m_horizontal_alignment;
}
void OAITextStyle::setHorizontalAlignment(const QString &horizontal_alignment) {
    m_horizontal_alignment = horizontal_alignment;
    m_horizontal_alignment_isSet = true;
}

bool OAITextStyle::is_horizontal_alignment_Set() const{
    return m_horizontal_alignment_isSet;
}

bool OAITextStyle::is_horizontal_alignment_Valid() const{
    return m_horizontal_alignment_isValid;
}

QString OAITextStyle::getPadding() const {
    return m_padding;
}
void OAITextStyle::setPadding(const QString &padding) {
    m_padding = padding;
    m_padding_isSet = true;
}

bool OAITextStyle::is_padding_Set() const{
    return m_padding_isSet;
}

bool OAITextStyle::is_padding_Valid() const{
    return m_padding_isValid;
}

QString OAITextStyle::getPointerLocation() const {
    return m_pointer_location;
}
void OAITextStyle::setPointerLocation(const QString &pointer_location) {
    m_pointer_location = pointer_location;
    m_pointer_location_isSet = true;
}

bool OAITextStyle::is_pointer_location_Set() const{
    return m_pointer_location_isSet;
}

bool OAITextStyle::is_pointer_location_Valid() const{
    return m_pointer_location_isValid;
}

QString OAITextStyle::getTextColor() const {
    return m_text_color;
}
void OAITextStyle::setTextColor(const QString &text_color) {
    m_text_color = text_color;
    m_text_color_isSet = true;
}

bool OAITextStyle::is_text_color_Set() const{
    return m_text_color_isSet;
}

bool OAITextStyle::is_text_color_Valid() const{
    return m_text_color_isValid;
}

QString OAITextStyle::getVerticalAlignment() const {
    return m_vertical_alignment;
}
void OAITextStyle::setVerticalAlignment(const QString &vertical_alignment) {
    m_vertical_alignment = vertical_alignment;
    m_vertical_alignment_isSet = true;
}

bool OAITextStyle::is_vertical_alignment_Set() const{
    return m_vertical_alignment_isSet;
}

bool OAITextStyle::is_vertical_alignment_Valid() const{
    return m_vertical_alignment_isValid;
}

bool OAITextStyle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_background_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_horizontal_alignment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_padding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pointer_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vertical_alignment_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITextStyle::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
