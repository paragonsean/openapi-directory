/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIThreshold.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIThreshold::OAIThreshold(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIThreshold::OAIThreshold() {
    this->initializeModel();
}

OAIThreshold::~OAIThreshold() {}

void OAIThreshold::initializeModel() {

    m_color_isSet = false;
    m_color_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_target_axis_isSet = false;
    m_target_axis_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIThreshold::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIThreshold::fromJsonObject(QJsonObject json) {

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_target_axis_isValid = ::OpenAPI::fromJsonValue(m_target_axis, json[QString("targetAxis")]);
    m_target_axis_isSet = !json[QString("targetAxis")].isNull() && m_target_axis_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIThreshold::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIThreshold::asJsonObject() const {
    QJsonObject obj;
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_direction_isSet) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_target_axis_isSet) {
        obj.insert(QString("targetAxis"), ::OpenAPI::toJsonValue(m_target_axis));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIThreshold::getColor() const {
    return m_color;
}
void OAIThreshold::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIThreshold::is_color_Set() const{
    return m_color_isSet;
}

bool OAIThreshold::is_color_Valid() const{
    return m_color_isValid;
}

QString OAIThreshold::getDirection() const {
    return m_direction;
}
void OAIThreshold::setDirection(const QString &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAIThreshold::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAIThreshold::is_direction_Valid() const{
    return m_direction_isValid;
}

QString OAIThreshold::getLabel() const {
    return m_label;
}
void OAIThreshold::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIThreshold::is_label_Set() const{
    return m_label_isSet;
}

bool OAIThreshold::is_label_Valid() const{
    return m_label_isValid;
}

QString OAIThreshold::getTargetAxis() const {
    return m_target_axis;
}
void OAIThreshold::setTargetAxis(const QString &target_axis) {
    m_target_axis = target_axis;
    m_target_axis_isSet = true;
}

bool OAIThreshold::is_target_axis_Set() const{
    return m_target_axis_isSet;
}

bool OAIThreshold::is_target_axis_Valid() const{
    return m_target_axis_isValid;
}

double OAIThreshold::getValue() const {
    return m_value;
}
void OAIThreshold::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIThreshold::is_value_Set() const{
    return m_value_isSet;
}

bool OAIThreshold::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIThreshold::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_axis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIThreshold::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
