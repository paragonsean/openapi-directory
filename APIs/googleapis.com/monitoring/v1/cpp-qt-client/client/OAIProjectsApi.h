/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectsApi_H
#define OAI_OAIProjectsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDashboard.h"
#include "OAIHttpBody.h"
#include "OAIListDashboardsResponse.h"
#include "OAIObject.h"
#include "OAIQueryExemplarsRequest.h"
#include "OAIQueryInstantRequest.h"
#include "OAIQueryLabelsRequest.h"
#include "OAIQueryRangeRequest.h"
#include "OAIQuerySeriesRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectsApi : public QObject {
    Q_OBJECT

public:
    OAIProjectsApi(const int timeOut = 0);
    ~OAIProjectsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  validate_only bool [optional]
    * @param[in]  oai_dashboard OAIDashboard [optional]
    */
    virtual void monitoring_projects_dashboards_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &validate_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIDashboard> &oai_dashboard = ::OpenAPI::OptionalParam<OAIDashboard>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void monitoring_projects_dashboards_delete(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void monitoring_projects_dashboards_get(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void monitoring_projects_dashboards_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  validate_only bool [optional]
    * @param[in]  oai_dashboard OAIDashboard [optional]
    */
    virtual void monitoring_projects_dashboards_patch(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &validate_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIDashboard> &oai_dashboard = ::OpenAPI::OptionalParam<OAIDashboard>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  location QString [required]
    * @param[in]  label QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  end QString [optional]
    * @param[in]  match QString [optional]
    * @param[in]  start QString [optional]
    */
    virtual void monitoring_projects_location_prometheus_api_v1_label_values(const QString &name, const QString &location, const QString &label, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  location QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_query_labels_request OAIQueryLabelsRequest [optional]
    */
    virtual void monitoring_projects_location_prometheus_api_v1_labels(const QString &name, const QString &location, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIQueryLabelsRequest> &oai_query_labels_request = ::OpenAPI::OptionalParam<OAIQueryLabelsRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  location QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  metric QString [optional]
    */
    virtual void monitoring_projects_location_prometheus_api_v1_metadata_list(const QString &name, const QString &location, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &metric = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  location QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_query_instant_request OAIQueryInstantRequest [optional]
    */
    virtual void monitoring_projects_location_prometheus_api_v1_query(const QString &name, const QString &location, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIQueryInstantRequest> &oai_query_instant_request = ::OpenAPI::OptionalParam<OAIQueryInstantRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  location QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_query_exemplars_request OAIQueryExemplarsRequest [optional]
    */
    virtual void monitoring_projects_location_prometheus_api_v1_queryExemplars(const QString &name, const QString &location, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIQueryExemplarsRequest> &oai_query_exemplars_request = ::OpenAPI::OptionalParam<OAIQueryExemplarsRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  location QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_query_range_request OAIQueryRangeRequest [optional]
    */
    virtual void monitoring_projects_location_prometheus_api_v1_queryRange(const QString &name, const QString &location, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIQueryRangeRequest> &oai_query_range_request = ::OpenAPI::OptionalParam<OAIQueryRangeRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  location QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_query_series_request OAIQuerySeriesRequest [optional]
    */
    virtual void monitoring_projects_location_prometheus_api_v1_series(const QString &name, const QString &location, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIQuerySeriesRequest> &oai_query_series_request = ::OpenAPI::OptionalParam<OAIQuerySeriesRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void monitoring_projects_dashboards_createCallback(OAIHttpRequestWorker *worker);
    void monitoring_projects_dashboards_deleteCallback(OAIHttpRequestWorker *worker);
    void monitoring_projects_dashboards_getCallback(OAIHttpRequestWorker *worker);
    void monitoring_projects_dashboards_listCallback(OAIHttpRequestWorker *worker);
    void monitoring_projects_dashboards_patchCallback(OAIHttpRequestWorker *worker);
    void monitoring_projects_location_prometheus_api_v1_label_valuesCallback(OAIHttpRequestWorker *worker);
    void monitoring_projects_location_prometheus_api_v1_labelsCallback(OAIHttpRequestWorker *worker);
    void monitoring_projects_location_prometheus_api_v1_metadata_listCallback(OAIHttpRequestWorker *worker);
    void monitoring_projects_location_prometheus_api_v1_queryCallback(OAIHttpRequestWorker *worker);
    void monitoring_projects_location_prometheus_api_v1_queryExemplarsCallback(OAIHttpRequestWorker *worker);
    void monitoring_projects_location_prometheus_api_v1_queryRangeCallback(OAIHttpRequestWorker *worker);
    void monitoring_projects_location_prometheus_api_v1_seriesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void monitoring_projects_dashboards_createSignal(OAIDashboard summary);
    void monitoring_projects_dashboards_deleteSignal(OAIObject summary);
    void monitoring_projects_dashboards_getSignal(OAIDashboard summary);
    void monitoring_projects_dashboards_listSignal(OAIListDashboardsResponse summary);
    void monitoring_projects_dashboards_patchSignal(OAIDashboard summary);
    void monitoring_projects_location_prometheus_api_v1_label_valuesSignal(OAIHttpBody summary);
    void monitoring_projects_location_prometheus_api_v1_labelsSignal(OAIHttpBody summary);
    void monitoring_projects_location_prometheus_api_v1_metadata_listSignal(OAIHttpBody summary);
    void monitoring_projects_location_prometheus_api_v1_querySignal(OAIHttpBody summary);
    void monitoring_projects_location_prometheus_api_v1_queryExemplarsSignal(OAIHttpBody summary);
    void monitoring_projects_location_prometheus_api_v1_queryRangeSignal(OAIHttpBody summary);
    void monitoring_projects_location_prometheus_api_v1_seriesSignal(OAIHttpBody summary);


    void monitoring_projects_dashboards_createSignalFull(OAIHttpRequestWorker *worker, OAIDashboard summary);
    void monitoring_projects_dashboards_deleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void monitoring_projects_dashboards_getSignalFull(OAIHttpRequestWorker *worker, OAIDashboard summary);
    void monitoring_projects_dashboards_listSignalFull(OAIHttpRequestWorker *worker, OAIListDashboardsResponse summary);
    void monitoring_projects_dashboards_patchSignalFull(OAIHttpRequestWorker *worker, OAIDashboard summary);
    void monitoring_projects_location_prometheus_api_v1_label_valuesSignalFull(OAIHttpRequestWorker *worker, OAIHttpBody summary);
    void monitoring_projects_location_prometheus_api_v1_labelsSignalFull(OAIHttpRequestWorker *worker, OAIHttpBody summary);
    void monitoring_projects_location_prometheus_api_v1_metadata_listSignalFull(OAIHttpRequestWorker *worker, OAIHttpBody summary);
    void monitoring_projects_location_prometheus_api_v1_querySignalFull(OAIHttpRequestWorker *worker, OAIHttpBody summary);
    void monitoring_projects_location_prometheus_api_v1_queryExemplarsSignalFull(OAIHttpRequestWorker *worker, OAIHttpBody summary);
    void monitoring_projects_location_prometheus_api_v1_queryRangeSignalFull(OAIHttpRequestWorker *worker, OAIHttpBody summary);
    void monitoring_projects_location_prometheus_api_v1_seriesSignalFull(OAIHttpRequestWorker *worker, OAIHttpBody summary);

    Q_DECL_DEPRECATED_X("Use monitoring_projects_dashboards_createSignalError() instead")
    void monitoring_projects_dashboards_createSignalE(OAIDashboard summary, QNetworkReply::NetworkError error_type, QString error_str);
    void monitoring_projects_dashboards_createSignalError(OAIDashboard summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use monitoring_projects_dashboards_deleteSignalError() instead")
    void monitoring_projects_dashboards_deleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void monitoring_projects_dashboards_deleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use monitoring_projects_dashboards_getSignalError() instead")
    void monitoring_projects_dashboards_getSignalE(OAIDashboard summary, QNetworkReply::NetworkError error_type, QString error_str);
    void monitoring_projects_dashboards_getSignalError(OAIDashboard summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use monitoring_projects_dashboards_listSignalError() instead")
    void monitoring_projects_dashboards_listSignalE(OAIListDashboardsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void monitoring_projects_dashboards_listSignalError(OAIListDashboardsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use monitoring_projects_dashboards_patchSignalError() instead")
    void monitoring_projects_dashboards_patchSignalE(OAIDashboard summary, QNetworkReply::NetworkError error_type, QString error_str);
    void monitoring_projects_dashboards_patchSignalError(OAIDashboard summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use monitoring_projects_location_prometheus_api_v1_label_valuesSignalError() instead")
    void monitoring_projects_location_prometheus_api_v1_label_valuesSignalE(OAIHttpBody summary, QNetworkReply::NetworkError error_type, QString error_str);
    void monitoring_projects_location_prometheus_api_v1_label_valuesSignalError(OAIHttpBody summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use monitoring_projects_location_prometheus_api_v1_labelsSignalError() instead")
    void monitoring_projects_location_prometheus_api_v1_labelsSignalE(OAIHttpBody summary, QNetworkReply::NetworkError error_type, QString error_str);
    void monitoring_projects_location_prometheus_api_v1_labelsSignalError(OAIHttpBody summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use monitoring_projects_location_prometheus_api_v1_metadata_listSignalError() instead")
    void monitoring_projects_location_prometheus_api_v1_metadata_listSignalE(OAIHttpBody summary, QNetworkReply::NetworkError error_type, QString error_str);
    void monitoring_projects_location_prometheus_api_v1_metadata_listSignalError(OAIHttpBody summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use monitoring_projects_location_prometheus_api_v1_querySignalError() instead")
    void monitoring_projects_location_prometheus_api_v1_querySignalE(OAIHttpBody summary, QNetworkReply::NetworkError error_type, QString error_str);
    void monitoring_projects_location_prometheus_api_v1_querySignalError(OAIHttpBody summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use monitoring_projects_location_prometheus_api_v1_queryExemplarsSignalError() instead")
    void monitoring_projects_location_prometheus_api_v1_queryExemplarsSignalE(OAIHttpBody summary, QNetworkReply::NetworkError error_type, QString error_str);
    void monitoring_projects_location_prometheus_api_v1_queryExemplarsSignalError(OAIHttpBody summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use monitoring_projects_location_prometheus_api_v1_queryRangeSignalError() instead")
    void monitoring_projects_location_prometheus_api_v1_queryRangeSignalE(OAIHttpBody summary, QNetworkReply::NetworkError error_type, QString error_str);
    void monitoring_projects_location_prometheus_api_v1_queryRangeSignalError(OAIHttpBody summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use monitoring_projects_location_prometheus_api_v1_seriesSignalError() instead")
    void monitoring_projects_location_prometheus_api_v1_seriesSignalE(OAIHttpBody summary, QNetworkReply::NetworkError error_type, QString error_str);
    void monitoring_projects_location_prometheus_api_v1_seriesSignalError(OAIHttpBody summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use monitoring_projects_dashboards_createSignalErrorFull() instead")
    void monitoring_projects_dashboards_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void monitoring_projects_dashboards_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use monitoring_projects_dashboards_deleteSignalErrorFull() instead")
    void monitoring_projects_dashboards_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void monitoring_projects_dashboards_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use monitoring_projects_dashboards_getSignalErrorFull() instead")
    void monitoring_projects_dashboards_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void monitoring_projects_dashboards_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use monitoring_projects_dashboards_listSignalErrorFull() instead")
    void monitoring_projects_dashboards_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void monitoring_projects_dashboards_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use monitoring_projects_dashboards_patchSignalErrorFull() instead")
    void monitoring_projects_dashboards_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void monitoring_projects_dashboards_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use monitoring_projects_location_prometheus_api_v1_label_valuesSignalErrorFull() instead")
    void monitoring_projects_location_prometheus_api_v1_label_valuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void monitoring_projects_location_prometheus_api_v1_label_valuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use monitoring_projects_location_prometheus_api_v1_labelsSignalErrorFull() instead")
    void monitoring_projects_location_prometheus_api_v1_labelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void monitoring_projects_location_prometheus_api_v1_labelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use monitoring_projects_location_prometheus_api_v1_metadata_listSignalErrorFull() instead")
    void monitoring_projects_location_prometheus_api_v1_metadata_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void monitoring_projects_location_prometheus_api_v1_metadata_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use monitoring_projects_location_prometheus_api_v1_querySignalErrorFull() instead")
    void monitoring_projects_location_prometheus_api_v1_querySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void monitoring_projects_location_prometheus_api_v1_querySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use monitoring_projects_location_prometheus_api_v1_queryExemplarsSignalErrorFull() instead")
    void monitoring_projects_location_prometheus_api_v1_queryExemplarsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void monitoring_projects_location_prometheus_api_v1_queryExemplarsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use monitoring_projects_location_prometheus_api_v1_queryRangeSignalErrorFull() instead")
    void monitoring_projects_location_prometheus_api_v1_queryRangeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void monitoring_projects_location_prometheus_api_v1_queryRangeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use monitoring_projects_location_prometheus_api_v1_seriesSignalErrorFull() instead")
    void monitoring_projects_location_prometheus_api_v1_seriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void monitoring_projects_location_prometheus_api_v1_seriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
