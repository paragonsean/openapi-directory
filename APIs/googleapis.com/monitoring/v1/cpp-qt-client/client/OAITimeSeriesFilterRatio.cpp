/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimeSeriesFilterRatio.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimeSeriesFilterRatio::OAITimeSeriesFilterRatio(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimeSeriesFilterRatio::OAITimeSeriesFilterRatio() {
    this->initializeModel();
}

OAITimeSeriesFilterRatio::~OAITimeSeriesFilterRatio() {}

void OAITimeSeriesFilterRatio::initializeModel() {

    m_denominator_isSet = false;
    m_denominator_isValid = false;

    m_numerator_isSet = false;
    m_numerator_isValid = false;

    m_pick_time_series_filter_isSet = false;
    m_pick_time_series_filter_isValid = false;

    m_secondary_aggregation_isSet = false;
    m_secondary_aggregation_isValid = false;

    m_statistical_time_series_filter_isSet = false;
    m_statistical_time_series_filter_isValid = false;
}

void OAITimeSeriesFilterRatio::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimeSeriesFilterRatio::fromJsonObject(QJsonObject json) {

    m_denominator_isValid = ::OpenAPI::fromJsonValue(m_denominator, json[QString("denominator")]);
    m_denominator_isSet = !json[QString("denominator")].isNull() && m_denominator_isValid;

    m_numerator_isValid = ::OpenAPI::fromJsonValue(m_numerator, json[QString("numerator")]);
    m_numerator_isSet = !json[QString("numerator")].isNull() && m_numerator_isValid;

    m_pick_time_series_filter_isValid = ::OpenAPI::fromJsonValue(m_pick_time_series_filter, json[QString("pickTimeSeriesFilter")]);
    m_pick_time_series_filter_isSet = !json[QString("pickTimeSeriesFilter")].isNull() && m_pick_time_series_filter_isValid;

    m_secondary_aggregation_isValid = ::OpenAPI::fromJsonValue(m_secondary_aggregation, json[QString("secondaryAggregation")]);
    m_secondary_aggregation_isSet = !json[QString("secondaryAggregation")].isNull() && m_secondary_aggregation_isValid;

    m_statistical_time_series_filter_isValid = ::OpenAPI::fromJsonValue(m_statistical_time_series_filter, json[QString("statisticalTimeSeriesFilter")]);
    m_statistical_time_series_filter_isSet = !json[QString("statisticalTimeSeriesFilter")].isNull() && m_statistical_time_series_filter_isValid;
}

QString OAITimeSeriesFilterRatio::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimeSeriesFilterRatio::asJsonObject() const {
    QJsonObject obj;
    if (m_denominator.isSet()) {
        obj.insert(QString("denominator"), ::OpenAPI::toJsonValue(m_denominator));
    }
    if (m_numerator.isSet()) {
        obj.insert(QString("numerator"), ::OpenAPI::toJsonValue(m_numerator));
    }
    if (m_pick_time_series_filter.isSet()) {
        obj.insert(QString("pickTimeSeriesFilter"), ::OpenAPI::toJsonValue(m_pick_time_series_filter));
    }
    if (m_secondary_aggregation.isSet()) {
        obj.insert(QString("secondaryAggregation"), ::OpenAPI::toJsonValue(m_secondary_aggregation));
    }
    if (m_statistical_time_series_filter.isSet()) {
        obj.insert(QString("statisticalTimeSeriesFilter"), ::OpenAPI::toJsonValue(m_statistical_time_series_filter));
    }
    return obj;
}

OAIRatioPart OAITimeSeriesFilterRatio::getDenominator() const {
    return m_denominator;
}
void OAITimeSeriesFilterRatio::setDenominator(const OAIRatioPart &denominator) {
    m_denominator = denominator;
    m_denominator_isSet = true;
}

bool OAITimeSeriesFilterRatio::is_denominator_Set() const{
    return m_denominator_isSet;
}

bool OAITimeSeriesFilterRatio::is_denominator_Valid() const{
    return m_denominator_isValid;
}

OAIRatioPart OAITimeSeriesFilterRatio::getNumerator() const {
    return m_numerator;
}
void OAITimeSeriesFilterRatio::setNumerator(const OAIRatioPart &numerator) {
    m_numerator = numerator;
    m_numerator_isSet = true;
}

bool OAITimeSeriesFilterRatio::is_numerator_Set() const{
    return m_numerator_isSet;
}

bool OAITimeSeriesFilterRatio::is_numerator_Valid() const{
    return m_numerator_isValid;
}

OAIPickTimeSeriesFilter OAITimeSeriesFilterRatio::getPickTimeSeriesFilter() const {
    return m_pick_time_series_filter;
}
void OAITimeSeriesFilterRatio::setPickTimeSeriesFilter(const OAIPickTimeSeriesFilter &pick_time_series_filter) {
    m_pick_time_series_filter = pick_time_series_filter;
    m_pick_time_series_filter_isSet = true;
}

bool OAITimeSeriesFilterRatio::is_pick_time_series_filter_Set() const{
    return m_pick_time_series_filter_isSet;
}

bool OAITimeSeriesFilterRatio::is_pick_time_series_filter_Valid() const{
    return m_pick_time_series_filter_isValid;
}

OAIAggregation OAITimeSeriesFilterRatio::getSecondaryAggregation() const {
    return m_secondary_aggregation;
}
void OAITimeSeriesFilterRatio::setSecondaryAggregation(const OAIAggregation &secondary_aggregation) {
    m_secondary_aggregation = secondary_aggregation;
    m_secondary_aggregation_isSet = true;
}

bool OAITimeSeriesFilterRatio::is_secondary_aggregation_Set() const{
    return m_secondary_aggregation_isSet;
}

bool OAITimeSeriesFilterRatio::is_secondary_aggregation_Valid() const{
    return m_secondary_aggregation_isValid;
}

OAIStatisticalTimeSeriesFilter OAITimeSeriesFilterRatio::getStatisticalTimeSeriesFilter() const {
    return m_statistical_time_series_filter;
}
void OAITimeSeriesFilterRatio::setStatisticalTimeSeriesFilter(const OAIStatisticalTimeSeriesFilter &statistical_time_series_filter) {
    m_statistical_time_series_filter = statistical_time_series_filter;
    m_statistical_time_series_filter_isSet = true;
}

bool OAITimeSeriesFilterRatio::is_statistical_time_series_filter_Set() const{
    return m_statistical_time_series_filter_isSet;
}

bool OAITimeSeriesFilterRatio::is_statistical_time_series_filter_Valid() const{
    return m_statistical_time_series_filter_isValid;
}

bool OAITimeSeriesFilterRatio::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_denominator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_numerator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pick_time_series_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_aggregation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistical_time_series_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimeSeriesFilterRatio::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
