/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimeSeriesQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimeSeriesQuery::OAITimeSeriesQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimeSeriesQuery::OAITimeSeriesQuery() {
    this->initializeModel();
}

OAITimeSeriesQuery::~OAITimeSeriesQuery() {}

void OAITimeSeriesQuery::initializeModel() {

    m_ops_analytics_query_isSet = false;
    m_ops_analytics_query_isValid = false;

    m_output_full_duration_isSet = false;
    m_output_full_duration_isValid = false;

    m_prometheus_query_isSet = false;
    m_prometheus_query_isValid = false;

    m_time_series_filter_isSet = false;
    m_time_series_filter_isValid = false;

    m_time_series_filter_ratio_isSet = false;
    m_time_series_filter_ratio_isValid = false;

    m_time_series_query_language_isSet = false;
    m_time_series_query_language_isValid = false;

    m_unit_override_isSet = false;
    m_unit_override_isValid = false;
}

void OAITimeSeriesQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimeSeriesQuery::fromJsonObject(QJsonObject json) {

    m_ops_analytics_query_isValid = ::OpenAPI::fromJsonValue(m_ops_analytics_query, json[QString("opsAnalyticsQuery")]);
    m_ops_analytics_query_isSet = !json[QString("opsAnalyticsQuery")].isNull() && m_ops_analytics_query_isValid;

    m_output_full_duration_isValid = ::OpenAPI::fromJsonValue(m_output_full_duration, json[QString("outputFullDuration")]);
    m_output_full_duration_isSet = !json[QString("outputFullDuration")].isNull() && m_output_full_duration_isValid;

    m_prometheus_query_isValid = ::OpenAPI::fromJsonValue(m_prometheus_query, json[QString("prometheusQuery")]);
    m_prometheus_query_isSet = !json[QString("prometheusQuery")].isNull() && m_prometheus_query_isValid;

    m_time_series_filter_isValid = ::OpenAPI::fromJsonValue(m_time_series_filter, json[QString("timeSeriesFilter")]);
    m_time_series_filter_isSet = !json[QString("timeSeriesFilter")].isNull() && m_time_series_filter_isValid;

    m_time_series_filter_ratio_isValid = ::OpenAPI::fromJsonValue(m_time_series_filter_ratio, json[QString("timeSeriesFilterRatio")]);
    m_time_series_filter_ratio_isSet = !json[QString("timeSeriesFilterRatio")].isNull() && m_time_series_filter_ratio_isValid;

    m_time_series_query_language_isValid = ::OpenAPI::fromJsonValue(m_time_series_query_language, json[QString("timeSeriesQueryLanguage")]);
    m_time_series_query_language_isSet = !json[QString("timeSeriesQueryLanguage")].isNull() && m_time_series_query_language_isValid;

    m_unit_override_isValid = ::OpenAPI::fromJsonValue(m_unit_override, json[QString("unitOverride")]);
    m_unit_override_isSet = !json[QString("unitOverride")].isNull() && m_unit_override_isValid;
}

QString OAITimeSeriesQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimeSeriesQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_ops_analytics_query.isSet()) {
        obj.insert(QString("opsAnalyticsQuery"), ::OpenAPI::toJsonValue(m_ops_analytics_query));
    }
    if (m_output_full_duration_isSet) {
        obj.insert(QString("outputFullDuration"), ::OpenAPI::toJsonValue(m_output_full_duration));
    }
    if (m_prometheus_query_isSet) {
        obj.insert(QString("prometheusQuery"), ::OpenAPI::toJsonValue(m_prometheus_query));
    }
    if (m_time_series_filter.isSet()) {
        obj.insert(QString("timeSeriesFilter"), ::OpenAPI::toJsonValue(m_time_series_filter));
    }
    if (m_time_series_filter_ratio.isSet()) {
        obj.insert(QString("timeSeriesFilterRatio"), ::OpenAPI::toJsonValue(m_time_series_filter_ratio));
    }
    if (m_time_series_query_language_isSet) {
        obj.insert(QString("timeSeriesQueryLanguage"), ::OpenAPI::toJsonValue(m_time_series_query_language));
    }
    if (m_unit_override_isSet) {
        obj.insert(QString("unitOverride"), ::OpenAPI::toJsonValue(m_unit_override));
    }
    return obj;
}

OAIOpsAnalyticsQuery OAITimeSeriesQuery::getOpsAnalyticsQuery() const {
    return m_ops_analytics_query;
}
void OAITimeSeriesQuery::setOpsAnalyticsQuery(const OAIOpsAnalyticsQuery &ops_analytics_query) {
    m_ops_analytics_query = ops_analytics_query;
    m_ops_analytics_query_isSet = true;
}

bool OAITimeSeriesQuery::is_ops_analytics_query_Set() const{
    return m_ops_analytics_query_isSet;
}

bool OAITimeSeriesQuery::is_ops_analytics_query_Valid() const{
    return m_ops_analytics_query_isValid;
}

bool OAITimeSeriesQuery::isOutputFullDuration() const {
    return m_output_full_duration;
}
void OAITimeSeriesQuery::setOutputFullDuration(const bool &output_full_duration) {
    m_output_full_duration = output_full_duration;
    m_output_full_duration_isSet = true;
}

bool OAITimeSeriesQuery::is_output_full_duration_Set() const{
    return m_output_full_duration_isSet;
}

bool OAITimeSeriesQuery::is_output_full_duration_Valid() const{
    return m_output_full_duration_isValid;
}

QString OAITimeSeriesQuery::getPrometheusQuery() const {
    return m_prometheus_query;
}
void OAITimeSeriesQuery::setPrometheusQuery(const QString &prometheus_query) {
    m_prometheus_query = prometheus_query;
    m_prometheus_query_isSet = true;
}

bool OAITimeSeriesQuery::is_prometheus_query_Set() const{
    return m_prometheus_query_isSet;
}

bool OAITimeSeriesQuery::is_prometheus_query_Valid() const{
    return m_prometheus_query_isValid;
}

OAITimeSeriesFilter OAITimeSeriesQuery::getTimeSeriesFilter() const {
    return m_time_series_filter;
}
void OAITimeSeriesQuery::setTimeSeriesFilter(const OAITimeSeriesFilter &time_series_filter) {
    m_time_series_filter = time_series_filter;
    m_time_series_filter_isSet = true;
}

bool OAITimeSeriesQuery::is_time_series_filter_Set() const{
    return m_time_series_filter_isSet;
}

bool OAITimeSeriesQuery::is_time_series_filter_Valid() const{
    return m_time_series_filter_isValid;
}

OAITimeSeriesFilterRatio OAITimeSeriesQuery::getTimeSeriesFilterRatio() const {
    return m_time_series_filter_ratio;
}
void OAITimeSeriesQuery::setTimeSeriesFilterRatio(const OAITimeSeriesFilterRatio &time_series_filter_ratio) {
    m_time_series_filter_ratio = time_series_filter_ratio;
    m_time_series_filter_ratio_isSet = true;
}

bool OAITimeSeriesQuery::is_time_series_filter_ratio_Set() const{
    return m_time_series_filter_ratio_isSet;
}

bool OAITimeSeriesQuery::is_time_series_filter_ratio_Valid() const{
    return m_time_series_filter_ratio_isValid;
}

QString OAITimeSeriesQuery::getTimeSeriesQueryLanguage() const {
    return m_time_series_query_language;
}
void OAITimeSeriesQuery::setTimeSeriesQueryLanguage(const QString &time_series_query_language) {
    m_time_series_query_language = time_series_query_language;
    m_time_series_query_language_isSet = true;
}

bool OAITimeSeriesQuery::is_time_series_query_language_Set() const{
    return m_time_series_query_language_isSet;
}

bool OAITimeSeriesQuery::is_time_series_query_language_Valid() const{
    return m_time_series_query_language_isValid;
}

QString OAITimeSeriesQuery::getUnitOverride() const {
    return m_unit_override;
}
void OAITimeSeriesQuery::setUnitOverride(const QString &unit_override) {
    m_unit_override = unit_override;
    m_unit_override_isSet = true;
}

bool OAITimeSeriesQuery::is_unit_override_Set() const{
    return m_unit_override_isSet;
}

bool OAITimeSeriesQuery::is_unit_override_Valid() const{
    return m_unit_override_isValid;
}

bool OAITimeSeriesQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ops_analytics_query.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_full_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prometheus_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_series_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_series_filter_ratio.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_series_query_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_override_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimeSeriesQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
