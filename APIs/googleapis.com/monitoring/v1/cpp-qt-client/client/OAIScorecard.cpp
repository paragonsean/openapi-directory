/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScorecard.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScorecard::OAIScorecard(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScorecard::OAIScorecard() {
    this->initializeModel();
}

OAIScorecard::~OAIScorecard() {}

void OAIScorecard::initializeModel() {

    m_blank_view_isSet = false;
    m_blank_view_isValid = false;

    m_gauge_view_isSet = false;
    m_gauge_view_isValid = false;

    m_spark_chart_view_isSet = false;
    m_spark_chart_view_isValid = false;

    m_thresholds_isSet = false;
    m_thresholds_isValid = false;

    m_time_series_query_isSet = false;
    m_time_series_query_isValid = false;
}

void OAIScorecard::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScorecard::fromJsonObject(QJsonObject json) {

    m_blank_view_isValid = ::OpenAPI::fromJsonValue(m_blank_view, json[QString("blankView")]);
    m_blank_view_isSet = !json[QString("blankView")].isNull() && m_blank_view_isValid;

    m_gauge_view_isValid = ::OpenAPI::fromJsonValue(m_gauge_view, json[QString("gaugeView")]);
    m_gauge_view_isSet = !json[QString("gaugeView")].isNull() && m_gauge_view_isValid;

    m_spark_chart_view_isValid = ::OpenAPI::fromJsonValue(m_spark_chart_view, json[QString("sparkChartView")]);
    m_spark_chart_view_isSet = !json[QString("sparkChartView")].isNull() && m_spark_chart_view_isValid;

    m_thresholds_isValid = ::OpenAPI::fromJsonValue(m_thresholds, json[QString("thresholds")]);
    m_thresholds_isSet = !json[QString("thresholds")].isNull() && m_thresholds_isValid;

    m_time_series_query_isValid = ::OpenAPI::fromJsonValue(m_time_series_query, json[QString("timeSeriesQuery")]);
    m_time_series_query_isSet = !json[QString("timeSeriesQuery")].isNull() && m_time_series_query_isValid;
}

QString OAIScorecard::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScorecard::asJsonObject() const {
    QJsonObject obj;
    if (m_blank_view_isSet) {
        obj.insert(QString("blankView"), ::OpenAPI::toJsonValue(m_blank_view));
    }
    if (m_gauge_view.isSet()) {
        obj.insert(QString("gaugeView"), ::OpenAPI::toJsonValue(m_gauge_view));
    }
    if (m_spark_chart_view.isSet()) {
        obj.insert(QString("sparkChartView"), ::OpenAPI::toJsonValue(m_spark_chart_view));
    }
    if (m_thresholds.size() > 0) {
        obj.insert(QString("thresholds"), ::OpenAPI::toJsonValue(m_thresholds));
    }
    if (m_time_series_query.isSet()) {
        obj.insert(QString("timeSeriesQuery"), ::OpenAPI::toJsonValue(m_time_series_query));
    }
    return obj;
}

OAIObject OAIScorecard::getBlankView() const {
    return m_blank_view;
}
void OAIScorecard::setBlankView(const OAIObject &blank_view) {
    m_blank_view = blank_view;
    m_blank_view_isSet = true;
}

bool OAIScorecard::is_blank_view_Set() const{
    return m_blank_view_isSet;
}

bool OAIScorecard::is_blank_view_Valid() const{
    return m_blank_view_isValid;
}

OAIGaugeView OAIScorecard::getGaugeView() const {
    return m_gauge_view;
}
void OAIScorecard::setGaugeView(const OAIGaugeView &gauge_view) {
    m_gauge_view = gauge_view;
    m_gauge_view_isSet = true;
}

bool OAIScorecard::is_gauge_view_Set() const{
    return m_gauge_view_isSet;
}

bool OAIScorecard::is_gauge_view_Valid() const{
    return m_gauge_view_isValid;
}

OAISparkChartView OAIScorecard::getSparkChartView() const {
    return m_spark_chart_view;
}
void OAIScorecard::setSparkChartView(const OAISparkChartView &spark_chart_view) {
    m_spark_chart_view = spark_chart_view;
    m_spark_chart_view_isSet = true;
}

bool OAIScorecard::is_spark_chart_view_Set() const{
    return m_spark_chart_view_isSet;
}

bool OAIScorecard::is_spark_chart_view_Valid() const{
    return m_spark_chart_view_isValid;
}

QList<OAIThreshold> OAIScorecard::getThresholds() const {
    return m_thresholds;
}
void OAIScorecard::setThresholds(const QList<OAIThreshold> &thresholds) {
    m_thresholds = thresholds;
    m_thresholds_isSet = true;
}

bool OAIScorecard::is_thresholds_Set() const{
    return m_thresholds_isSet;
}

bool OAIScorecard::is_thresholds_Valid() const{
    return m_thresholds_isValid;
}

OAITimeSeriesQuery OAIScorecard::getTimeSeriesQuery() const {
    return m_time_series_query;
}
void OAIScorecard::setTimeSeriesQuery(const OAITimeSeriesQuery &time_series_query) {
    m_time_series_query = time_series_query;
    m_time_series_query_isSet = true;
}

bool OAIScorecard::is_time_series_query_Set() const{
    return m_time_series_query_isSet;
}

bool OAIScorecard::is_time_series_query_Valid() const{
    return m_time_series_query_isValid;
}

bool OAIScorecard::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blank_view_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gauge_view.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spark_chart_view.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_thresholds.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_series_query.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScorecard::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
