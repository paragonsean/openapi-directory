/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPieChart.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPieChart::OAIPieChart(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPieChart::OAIPieChart() {
    this->initializeModel();
}

OAIPieChart::~OAIPieChart() {}

void OAIPieChart::initializeModel() {

    m_chart_type_isSet = false;
    m_chart_type_isValid = false;

    m_data_sets_isSet = false;
    m_data_sets_isValid = false;

    m_show_labels_isSet = false;
    m_show_labels_isValid = false;
}

void OAIPieChart::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPieChart::fromJsonObject(QJsonObject json) {

    m_chart_type_isValid = ::OpenAPI::fromJsonValue(m_chart_type, json[QString("chartType")]);
    m_chart_type_isSet = !json[QString("chartType")].isNull() && m_chart_type_isValid;

    m_data_sets_isValid = ::OpenAPI::fromJsonValue(m_data_sets, json[QString("dataSets")]);
    m_data_sets_isSet = !json[QString("dataSets")].isNull() && m_data_sets_isValid;

    m_show_labels_isValid = ::OpenAPI::fromJsonValue(m_show_labels, json[QString("showLabels")]);
    m_show_labels_isSet = !json[QString("showLabels")].isNull() && m_show_labels_isValid;
}

QString OAIPieChart::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPieChart::asJsonObject() const {
    QJsonObject obj;
    if (m_chart_type_isSet) {
        obj.insert(QString("chartType"), ::OpenAPI::toJsonValue(m_chart_type));
    }
    if (m_data_sets.size() > 0) {
        obj.insert(QString("dataSets"), ::OpenAPI::toJsonValue(m_data_sets));
    }
    if (m_show_labels_isSet) {
        obj.insert(QString("showLabels"), ::OpenAPI::toJsonValue(m_show_labels));
    }
    return obj;
}

QString OAIPieChart::getChartType() const {
    return m_chart_type;
}
void OAIPieChart::setChartType(const QString &chart_type) {
    m_chart_type = chart_type;
    m_chart_type_isSet = true;
}

bool OAIPieChart::is_chart_type_Set() const{
    return m_chart_type_isSet;
}

bool OAIPieChart::is_chart_type_Valid() const{
    return m_chart_type_isValid;
}

QList<OAIPieChartDataSet> OAIPieChart::getDataSets() const {
    return m_data_sets;
}
void OAIPieChart::setDataSets(const QList<OAIPieChartDataSet> &data_sets) {
    m_data_sets = data_sets;
    m_data_sets_isSet = true;
}

bool OAIPieChart::is_data_sets_Set() const{
    return m_data_sets_isSet;
}

bool OAIPieChart::is_data_sets_Valid() const{
    return m_data_sets_isValid;
}

bool OAIPieChart::isShowLabels() const {
    return m_show_labels;
}
void OAIPieChart::setShowLabels(const bool &show_labels) {
    m_show_labels = show_labels;
    m_show_labels_isSet = true;
}

bool OAIPieChart::is_show_labels_Set() const{
    return m_show_labels_isSet;
}

bool OAIPieChart::is_show_labels_Valid() const{
    return m_show_labels_isValid;
}

bool OAIPieChart::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chart_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_sets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_labels_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPieChart::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
