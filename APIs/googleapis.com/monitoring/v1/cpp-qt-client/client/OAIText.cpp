/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIText.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIText::OAIText(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIText::OAIText() {
    this->initializeModel();
}

OAIText::~OAIText() {}

void OAIText::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_style_isSet = false;
    m_style_isValid = false;
}

void OAIText::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIText::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_style_isValid = ::OpenAPI::fromJsonValue(m_style, json[QString("style")]);
    m_style_isSet = !json[QString("style")].isNull() && m_style_isValid;
}

QString OAIText::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIText::asJsonObject() const {
    QJsonObject obj;
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_style.isSet()) {
        obj.insert(QString("style"), ::OpenAPI::toJsonValue(m_style));
    }
    return obj;
}

QString OAIText::getContent() const {
    return m_content;
}
void OAIText::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIText::is_content_Set() const{
    return m_content_isSet;
}

bool OAIText::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIText::getFormat() const {
    return m_format;
}
void OAIText::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIText::is_format_Set() const{
    return m_format_isSet;
}

bool OAIText::is_format_Valid() const{
    return m_format_isValid;
}

OAITextStyle OAIText::getStyle() const {
    return m_style;
}
void OAIText::setStyle(const OAITextStyle &style) {
    m_style = style;
    m_style_isSet = true;
}

bool OAIText::is_style_Set() const{
    return m_style_isSet;
}

bool OAIText::is_style_Valid() const{
    return m_style_isValid;
}

bool OAIText::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_style.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIText::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
