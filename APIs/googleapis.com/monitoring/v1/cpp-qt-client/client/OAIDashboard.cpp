/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDashboard.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDashboard::OAIDashboard(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDashboard::OAIDashboard() {
    this->initializeModel();
}

OAIDashboard::~OAIDashboard() {}

void OAIDashboard::initializeModel() {

    m_column_layout_isSet = false;
    m_column_layout_isValid = false;

    m_dashboard_filters_isSet = false;
    m_dashboard_filters_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_grid_layout_isSet = false;
    m_grid_layout_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_mosaic_layout_isSet = false;
    m_mosaic_layout_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_row_layout_isSet = false;
    m_row_layout_isValid = false;
}

void OAIDashboard::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDashboard::fromJsonObject(QJsonObject json) {

    m_column_layout_isValid = ::OpenAPI::fromJsonValue(m_column_layout, json[QString("columnLayout")]);
    m_column_layout_isSet = !json[QString("columnLayout")].isNull() && m_column_layout_isValid;

    m_dashboard_filters_isValid = ::OpenAPI::fromJsonValue(m_dashboard_filters, json[QString("dashboardFilters")]);
    m_dashboard_filters_isSet = !json[QString("dashboardFilters")].isNull() && m_dashboard_filters_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_grid_layout_isValid = ::OpenAPI::fromJsonValue(m_grid_layout, json[QString("gridLayout")]);
    m_grid_layout_isSet = !json[QString("gridLayout")].isNull() && m_grid_layout_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_mosaic_layout_isValid = ::OpenAPI::fromJsonValue(m_mosaic_layout, json[QString("mosaicLayout")]);
    m_mosaic_layout_isSet = !json[QString("mosaicLayout")].isNull() && m_mosaic_layout_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_row_layout_isValid = ::OpenAPI::fromJsonValue(m_row_layout, json[QString("rowLayout")]);
    m_row_layout_isSet = !json[QString("rowLayout")].isNull() && m_row_layout_isValid;
}

QString OAIDashboard::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDashboard::asJsonObject() const {
    QJsonObject obj;
    if (m_column_layout.isSet()) {
        obj.insert(QString("columnLayout"), ::OpenAPI::toJsonValue(m_column_layout));
    }
    if (m_dashboard_filters.size() > 0) {
        obj.insert(QString("dashboardFilters"), ::OpenAPI::toJsonValue(m_dashboard_filters));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_grid_layout.isSet()) {
        obj.insert(QString("gridLayout"), ::OpenAPI::toJsonValue(m_grid_layout));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_mosaic_layout.isSet()) {
        obj.insert(QString("mosaicLayout"), ::OpenAPI::toJsonValue(m_mosaic_layout));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_row_layout.isSet()) {
        obj.insert(QString("rowLayout"), ::OpenAPI::toJsonValue(m_row_layout));
    }
    return obj;
}

OAIColumnLayout OAIDashboard::getColumnLayout() const {
    return m_column_layout;
}
void OAIDashboard::setColumnLayout(const OAIColumnLayout &column_layout) {
    m_column_layout = column_layout;
    m_column_layout_isSet = true;
}

bool OAIDashboard::is_column_layout_Set() const{
    return m_column_layout_isSet;
}

bool OAIDashboard::is_column_layout_Valid() const{
    return m_column_layout_isValid;
}

QList<OAIDashboardFilter> OAIDashboard::getDashboardFilters() const {
    return m_dashboard_filters;
}
void OAIDashboard::setDashboardFilters(const QList<OAIDashboardFilter> &dashboard_filters) {
    m_dashboard_filters = dashboard_filters;
    m_dashboard_filters_isSet = true;
}

bool OAIDashboard::is_dashboard_filters_Set() const{
    return m_dashboard_filters_isSet;
}

bool OAIDashboard::is_dashboard_filters_Valid() const{
    return m_dashboard_filters_isValid;
}

QString OAIDashboard::getDisplayName() const {
    return m_display_name;
}
void OAIDashboard::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIDashboard::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIDashboard::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIDashboard::getEtag() const {
    return m_etag;
}
void OAIDashboard::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIDashboard::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIDashboard::is_etag_Valid() const{
    return m_etag_isValid;
}

OAIGridLayout OAIDashboard::getGridLayout() const {
    return m_grid_layout;
}
void OAIDashboard::setGridLayout(const OAIGridLayout &grid_layout) {
    m_grid_layout = grid_layout;
    m_grid_layout_isSet = true;
}

bool OAIDashboard::is_grid_layout_Set() const{
    return m_grid_layout_isSet;
}

bool OAIDashboard::is_grid_layout_Valid() const{
    return m_grid_layout_isValid;
}

QMap<QString, QString> OAIDashboard::getLabels() const {
    return m_labels;
}
void OAIDashboard::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIDashboard::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIDashboard::is_labels_Valid() const{
    return m_labels_isValid;
}

OAIMosaicLayout OAIDashboard::getMosaicLayout() const {
    return m_mosaic_layout;
}
void OAIDashboard::setMosaicLayout(const OAIMosaicLayout &mosaic_layout) {
    m_mosaic_layout = mosaic_layout;
    m_mosaic_layout_isSet = true;
}

bool OAIDashboard::is_mosaic_layout_Set() const{
    return m_mosaic_layout_isSet;
}

bool OAIDashboard::is_mosaic_layout_Valid() const{
    return m_mosaic_layout_isValid;
}

QString OAIDashboard::getName() const {
    return m_name;
}
void OAIDashboard::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDashboard::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDashboard::is_name_Valid() const{
    return m_name_isValid;
}

OAIRowLayout OAIDashboard::getRowLayout() const {
    return m_row_layout;
}
void OAIDashboard::setRowLayout(const OAIRowLayout &row_layout) {
    m_row_layout = row_layout;
    m_row_layout_isSet = true;
}

bool OAIDashboard::is_row_layout_Set() const{
    return m_row_layout_isSet;
}

bool OAIDashboard::is_row_layout_Valid() const{
    return m_row_layout_isValid;
}

bool OAIDashboard::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column_layout.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dashboard_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grid_layout.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mosaic_layout.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_layout.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDashboard::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
