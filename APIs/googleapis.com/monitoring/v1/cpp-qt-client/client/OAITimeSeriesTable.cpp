/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimeSeriesTable.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimeSeriesTable::OAITimeSeriesTable(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimeSeriesTable::OAITimeSeriesTable() {
    this->initializeModel();
}

OAITimeSeriesTable::~OAITimeSeriesTable() {}

void OAITimeSeriesTable::initializeModel() {

    m_column_settings_isSet = false;
    m_column_settings_isValid = false;

    m_data_sets_isSet = false;
    m_data_sets_isValid = false;

    m_metric_visualization_isSet = false;
    m_metric_visualization_isValid = false;
}

void OAITimeSeriesTable::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimeSeriesTable::fromJsonObject(QJsonObject json) {

    m_column_settings_isValid = ::OpenAPI::fromJsonValue(m_column_settings, json[QString("columnSettings")]);
    m_column_settings_isSet = !json[QString("columnSettings")].isNull() && m_column_settings_isValid;

    m_data_sets_isValid = ::OpenAPI::fromJsonValue(m_data_sets, json[QString("dataSets")]);
    m_data_sets_isSet = !json[QString("dataSets")].isNull() && m_data_sets_isValid;

    m_metric_visualization_isValid = ::OpenAPI::fromJsonValue(m_metric_visualization, json[QString("metricVisualization")]);
    m_metric_visualization_isSet = !json[QString("metricVisualization")].isNull() && m_metric_visualization_isValid;
}

QString OAITimeSeriesTable::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimeSeriesTable::asJsonObject() const {
    QJsonObject obj;
    if (m_column_settings.size() > 0) {
        obj.insert(QString("columnSettings"), ::OpenAPI::toJsonValue(m_column_settings));
    }
    if (m_data_sets.size() > 0) {
        obj.insert(QString("dataSets"), ::OpenAPI::toJsonValue(m_data_sets));
    }
    if (m_metric_visualization_isSet) {
        obj.insert(QString("metricVisualization"), ::OpenAPI::toJsonValue(m_metric_visualization));
    }
    return obj;
}

QList<OAIColumnSettings> OAITimeSeriesTable::getColumnSettings() const {
    return m_column_settings;
}
void OAITimeSeriesTable::setColumnSettings(const QList<OAIColumnSettings> &column_settings) {
    m_column_settings = column_settings;
    m_column_settings_isSet = true;
}

bool OAITimeSeriesTable::is_column_settings_Set() const{
    return m_column_settings_isSet;
}

bool OAITimeSeriesTable::is_column_settings_Valid() const{
    return m_column_settings_isValid;
}

QList<OAITableDataSet> OAITimeSeriesTable::getDataSets() const {
    return m_data_sets;
}
void OAITimeSeriesTable::setDataSets(const QList<OAITableDataSet> &data_sets) {
    m_data_sets = data_sets;
    m_data_sets_isSet = true;
}

bool OAITimeSeriesTable::is_data_sets_Set() const{
    return m_data_sets_isSet;
}

bool OAITimeSeriesTable::is_data_sets_Valid() const{
    return m_data_sets_isValid;
}

QString OAITimeSeriesTable::getMetricVisualization() const {
    return m_metric_visualization;
}
void OAITimeSeriesTable::setMetricVisualization(const QString &metric_visualization) {
    m_metric_visualization = metric_visualization;
    m_metric_visualization_isSet = true;
}

bool OAITimeSeriesTable::is_metric_visualization_Set() const{
    return m_metric_visualization_isSet;
}

bool OAITimeSeriesTable::is_metric_visualization_Valid() const{
    return m_metric_visualization_isValid;
}

bool OAITimeSeriesTable::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column_settings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_sets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_visualization_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimeSeriesTable::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
