/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWidget.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWidget::OAIWidget(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWidget::OAIWidget() {
    this->initializeModel();
}

OAIWidget::~OAIWidget() {}

void OAIWidget::initializeModel() {

    m_alert_chart_isSet = false;
    m_alert_chart_isValid = false;

    m_blank_isSet = false;
    m_blank_isValid = false;

    m_collapsible_group_isSet = false;
    m_collapsible_group_isValid = false;

    m_error_reporting_panel_isSet = false;
    m_error_reporting_panel_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_incident_list_isSet = false;
    m_incident_list_isValid = false;

    m_logs_panel_isSet = false;
    m_logs_panel_isValid = false;

    m_pie_chart_isSet = false;
    m_pie_chart_isValid = false;

    m_scorecard_isSet = false;
    m_scorecard_isValid = false;

    m_section_header_isSet = false;
    m_section_header_isValid = false;

    m_single_view_group_isSet = false;
    m_single_view_group_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_time_series_table_isSet = false;
    m_time_series_table_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_xy_chart_isSet = false;
    m_xy_chart_isValid = false;
}

void OAIWidget::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWidget::fromJsonObject(QJsonObject json) {

    m_alert_chart_isValid = ::OpenAPI::fromJsonValue(m_alert_chart, json[QString("alertChart")]);
    m_alert_chart_isSet = !json[QString("alertChart")].isNull() && m_alert_chart_isValid;

    m_blank_isValid = ::OpenAPI::fromJsonValue(m_blank, json[QString("blank")]);
    m_blank_isSet = !json[QString("blank")].isNull() && m_blank_isValid;

    m_collapsible_group_isValid = ::OpenAPI::fromJsonValue(m_collapsible_group, json[QString("collapsibleGroup")]);
    m_collapsible_group_isSet = !json[QString("collapsibleGroup")].isNull() && m_collapsible_group_isValid;

    m_error_reporting_panel_isValid = ::OpenAPI::fromJsonValue(m_error_reporting_panel, json[QString("errorReportingPanel")]);
    m_error_reporting_panel_isSet = !json[QString("errorReportingPanel")].isNull() && m_error_reporting_panel_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_incident_list_isValid = ::OpenAPI::fromJsonValue(m_incident_list, json[QString("incidentList")]);
    m_incident_list_isSet = !json[QString("incidentList")].isNull() && m_incident_list_isValid;

    m_logs_panel_isValid = ::OpenAPI::fromJsonValue(m_logs_panel, json[QString("logsPanel")]);
    m_logs_panel_isSet = !json[QString("logsPanel")].isNull() && m_logs_panel_isValid;

    m_pie_chart_isValid = ::OpenAPI::fromJsonValue(m_pie_chart, json[QString("pieChart")]);
    m_pie_chart_isSet = !json[QString("pieChart")].isNull() && m_pie_chart_isValid;

    m_scorecard_isValid = ::OpenAPI::fromJsonValue(m_scorecard, json[QString("scorecard")]);
    m_scorecard_isSet = !json[QString("scorecard")].isNull() && m_scorecard_isValid;

    m_section_header_isValid = ::OpenAPI::fromJsonValue(m_section_header, json[QString("sectionHeader")]);
    m_section_header_isSet = !json[QString("sectionHeader")].isNull() && m_section_header_isValid;

    m_single_view_group_isValid = ::OpenAPI::fromJsonValue(m_single_view_group, json[QString("singleViewGroup")]);
    m_single_view_group_isSet = !json[QString("singleViewGroup")].isNull() && m_single_view_group_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_time_series_table_isValid = ::OpenAPI::fromJsonValue(m_time_series_table, json[QString("timeSeriesTable")]);
    m_time_series_table_isSet = !json[QString("timeSeriesTable")].isNull() && m_time_series_table_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_xy_chart_isValid = ::OpenAPI::fromJsonValue(m_xy_chart, json[QString("xyChart")]);
    m_xy_chart_isSet = !json[QString("xyChart")].isNull() && m_xy_chart_isValid;
}

QString OAIWidget::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWidget::asJsonObject() const {
    QJsonObject obj;
    if (m_alert_chart.isSet()) {
        obj.insert(QString("alertChart"), ::OpenAPI::toJsonValue(m_alert_chart));
    }
    if (m_blank_isSet) {
        obj.insert(QString("blank"), ::OpenAPI::toJsonValue(m_blank));
    }
    if (m_collapsible_group.isSet()) {
        obj.insert(QString("collapsibleGroup"), ::OpenAPI::toJsonValue(m_collapsible_group));
    }
    if (m_error_reporting_panel.isSet()) {
        obj.insert(QString("errorReportingPanel"), ::OpenAPI::toJsonValue(m_error_reporting_panel));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_incident_list.isSet()) {
        obj.insert(QString("incidentList"), ::OpenAPI::toJsonValue(m_incident_list));
    }
    if (m_logs_panel.isSet()) {
        obj.insert(QString("logsPanel"), ::OpenAPI::toJsonValue(m_logs_panel));
    }
    if (m_pie_chart.isSet()) {
        obj.insert(QString("pieChart"), ::OpenAPI::toJsonValue(m_pie_chart));
    }
    if (m_scorecard.isSet()) {
        obj.insert(QString("scorecard"), ::OpenAPI::toJsonValue(m_scorecard));
    }
    if (m_section_header.isSet()) {
        obj.insert(QString("sectionHeader"), ::OpenAPI::toJsonValue(m_section_header));
    }
    if (m_single_view_group_isSet) {
        obj.insert(QString("singleViewGroup"), ::OpenAPI::toJsonValue(m_single_view_group));
    }
    if (m_text.isSet()) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_time_series_table.isSet()) {
        obj.insert(QString("timeSeriesTable"), ::OpenAPI::toJsonValue(m_time_series_table));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_xy_chart.isSet()) {
        obj.insert(QString("xyChart"), ::OpenAPI::toJsonValue(m_xy_chart));
    }
    return obj;
}

OAIAlertChart OAIWidget::getAlertChart() const {
    return m_alert_chart;
}
void OAIWidget::setAlertChart(const OAIAlertChart &alert_chart) {
    m_alert_chart = alert_chart;
    m_alert_chart_isSet = true;
}

bool OAIWidget::is_alert_chart_Set() const{
    return m_alert_chart_isSet;
}

bool OAIWidget::is_alert_chart_Valid() const{
    return m_alert_chart_isValid;
}

OAIObject OAIWidget::getBlank() const {
    return m_blank;
}
void OAIWidget::setBlank(const OAIObject &blank) {
    m_blank = blank;
    m_blank_isSet = true;
}

bool OAIWidget::is_blank_Set() const{
    return m_blank_isSet;
}

bool OAIWidget::is_blank_Valid() const{
    return m_blank_isValid;
}

OAICollapsibleGroup OAIWidget::getCollapsibleGroup() const {
    return m_collapsible_group;
}
void OAIWidget::setCollapsibleGroup(const OAICollapsibleGroup &collapsible_group) {
    m_collapsible_group = collapsible_group;
    m_collapsible_group_isSet = true;
}

bool OAIWidget::is_collapsible_group_Set() const{
    return m_collapsible_group_isSet;
}

bool OAIWidget::is_collapsible_group_Valid() const{
    return m_collapsible_group_isValid;
}

OAIErrorReportingPanel OAIWidget::getErrorReportingPanel() const {
    return m_error_reporting_panel;
}
void OAIWidget::setErrorReportingPanel(const OAIErrorReportingPanel &error_reporting_panel) {
    m_error_reporting_panel = error_reporting_panel;
    m_error_reporting_panel_isSet = true;
}

bool OAIWidget::is_error_reporting_panel_Set() const{
    return m_error_reporting_panel_isSet;
}

bool OAIWidget::is_error_reporting_panel_Valid() const{
    return m_error_reporting_panel_isValid;
}

QString OAIWidget::getId() const {
    return m_id;
}
void OAIWidget::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWidget::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWidget::is_id_Valid() const{
    return m_id_isValid;
}

OAIIncidentList OAIWidget::getIncidentList() const {
    return m_incident_list;
}
void OAIWidget::setIncidentList(const OAIIncidentList &incident_list) {
    m_incident_list = incident_list;
    m_incident_list_isSet = true;
}

bool OAIWidget::is_incident_list_Set() const{
    return m_incident_list_isSet;
}

bool OAIWidget::is_incident_list_Valid() const{
    return m_incident_list_isValid;
}

OAILogsPanel OAIWidget::getLogsPanel() const {
    return m_logs_panel;
}
void OAIWidget::setLogsPanel(const OAILogsPanel &logs_panel) {
    m_logs_panel = logs_panel;
    m_logs_panel_isSet = true;
}

bool OAIWidget::is_logs_panel_Set() const{
    return m_logs_panel_isSet;
}

bool OAIWidget::is_logs_panel_Valid() const{
    return m_logs_panel_isValid;
}

OAIPieChart OAIWidget::getPieChart() const {
    return m_pie_chart;
}
void OAIWidget::setPieChart(const OAIPieChart &pie_chart) {
    m_pie_chart = pie_chart;
    m_pie_chart_isSet = true;
}

bool OAIWidget::is_pie_chart_Set() const{
    return m_pie_chart_isSet;
}

bool OAIWidget::is_pie_chart_Valid() const{
    return m_pie_chart_isValid;
}

OAIScorecard OAIWidget::getScorecard() const {
    return m_scorecard;
}
void OAIWidget::setScorecard(const OAIScorecard &scorecard) {
    m_scorecard = scorecard;
    m_scorecard_isSet = true;
}

bool OAIWidget::is_scorecard_Set() const{
    return m_scorecard_isSet;
}

bool OAIWidget::is_scorecard_Valid() const{
    return m_scorecard_isValid;
}

OAISectionHeader OAIWidget::getSectionHeader() const {
    return m_section_header;
}
void OAIWidget::setSectionHeader(const OAISectionHeader &section_header) {
    m_section_header = section_header;
    m_section_header_isSet = true;
}

bool OAIWidget::is_section_header_Set() const{
    return m_section_header_isSet;
}

bool OAIWidget::is_section_header_Valid() const{
    return m_section_header_isValid;
}

OAIObject OAIWidget::getSingleViewGroup() const {
    return m_single_view_group;
}
void OAIWidget::setSingleViewGroup(const OAIObject &single_view_group) {
    m_single_view_group = single_view_group;
    m_single_view_group_isSet = true;
}

bool OAIWidget::is_single_view_group_Set() const{
    return m_single_view_group_isSet;
}

bool OAIWidget::is_single_view_group_Valid() const{
    return m_single_view_group_isValid;
}

OAIText OAIWidget::getText() const {
    return m_text;
}
void OAIWidget::setText(const OAIText &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIWidget::is_text_Set() const{
    return m_text_isSet;
}

bool OAIWidget::is_text_Valid() const{
    return m_text_isValid;
}

OAITimeSeriesTable OAIWidget::getTimeSeriesTable() const {
    return m_time_series_table;
}
void OAIWidget::setTimeSeriesTable(const OAITimeSeriesTable &time_series_table) {
    m_time_series_table = time_series_table;
    m_time_series_table_isSet = true;
}

bool OAIWidget::is_time_series_table_Set() const{
    return m_time_series_table_isSet;
}

bool OAIWidget::is_time_series_table_Valid() const{
    return m_time_series_table_isValid;
}

QString OAIWidget::getTitle() const {
    return m_title;
}
void OAIWidget::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIWidget::is_title_Set() const{
    return m_title_isSet;
}

bool OAIWidget::is_title_Valid() const{
    return m_title_isValid;
}

OAIXyChart OAIWidget::getXyChart() const {
    return m_xy_chart;
}
void OAIWidget::setXyChart(const OAIXyChart &xy_chart) {
    m_xy_chart = xy_chart;
    m_xy_chart_isSet = true;
}

bool OAIWidget::is_xy_chart_Set() const{
    return m_xy_chart_isSet;
}

bool OAIWidget::is_xy_chart_Valid() const{
    return m_xy_chart_isValid;
}

bool OAIWidget::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alert_chart.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_blank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collapsible_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_reporting_panel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_incident_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logs_panel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pie_chart.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scorecard.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_section_header.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_single_view_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_series_table.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_xy_chart.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWidget::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
