/**
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIXyChart.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIXyChart::OAIXyChart(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIXyChart::OAIXyChart() {
    this->initializeModel();
}

OAIXyChart::~OAIXyChart() {}

void OAIXyChart::initializeModel() {

    m_chart_options_isSet = false;
    m_chart_options_isValid = false;

    m_data_sets_isSet = false;
    m_data_sets_isValid = false;

    m_thresholds_isSet = false;
    m_thresholds_isValid = false;

    m_timeshift_duration_isSet = false;
    m_timeshift_duration_isValid = false;

    m_x_axis_isSet = false;
    m_x_axis_isValid = false;

    m_y2_axis_isSet = false;
    m_y2_axis_isValid = false;

    m_y_axis_isSet = false;
    m_y_axis_isValid = false;
}

void OAIXyChart::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIXyChart::fromJsonObject(QJsonObject json) {

    m_chart_options_isValid = ::OpenAPI::fromJsonValue(m_chart_options, json[QString("chartOptions")]);
    m_chart_options_isSet = !json[QString("chartOptions")].isNull() && m_chart_options_isValid;

    m_data_sets_isValid = ::OpenAPI::fromJsonValue(m_data_sets, json[QString("dataSets")]);
    m_data_sets_isSet = !json[QString("dataSets")].isNull() && m_data_sets_isValid;

    m_thresholds_isValid = ::OpenAPI::fromJsonValue(m_thresholds, json[QString("thresholds")]);
    m_thresholds_isSet = !json[QString("thresholds")].isNull() && m_thresholds_isValid;

    m_timeshift_duration_isValid = ::OpenAPI::fromJsonValue(m_timeshift_duration, json[QString("timeshiftDuration")]);
    m_timeshift_duration_isSet = !json[QString("timeshiftDuration")].isNull() && m_timeshift_duration_isValid;

    m_x_axis_isValid = ::OpenAPI::fromJsonValue(m_x_axis, json[QString("xAxis")]);
    m_x_axis_isSet = !json[QString("xAxis")].isNull() && m_x_axis_isValid;

    m_y2_axis_isValid = ::OpenAPI::fromJsonValue(m_y2_axis, json[QString("y2Axis")]);
    m_y2_axis_isSet = !json[QString("y2Axis")].isNull() && m_y2_axis_isValid;

    m_y_axis_isValid = ::OpenAPI::fromJsonValue(m_y_axis, json[QString("yAxis")]);
    m_y_axis_isSet = !json[QString("yAxis")].isNull() && m_y_axis_isValid;
}

QString OAIXyChart::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIXyChart::asJsonObject() const {
    QJsonObject obj;
    if (m_chart_options.isSet()) {
        obj.insert(QString("chartOptions"), ::OpenAPI::toJsonValue(m_chart_options));
    }
    if (m_data_sets.size() > 0) {
        obj.insert(QString("dataSets"), ::OpenAPI::toJsonValue(m_data_sets));
    }
    if (m_thresholds.size() > 0) {
        obj.insert(QString("thresholds"), ::OpenAPI::toJsonValue(m_thresholds));
    }
    if (m_timeshift_duration_isSet) {
        obj.insert(QString("timeshiftDuration"), ::OpenAPI::toJsonValue(m_timeshift_duration));
    }
    if (m_x_axis.isSet()) {
        obj.insert(QString("xAxis"), ::OpenAPI::toJsonValue(m_x_axis));
    }
    if (m_y2_axis.isSet()) {
        obj.insert(QString("y2Axis"), ::OpenAPI::toJsonValue(m_y2_axis));
    }
    if (m_y_axis.isSet()) {
        obj.insert(QString("yAxis"), ::OpenAPI::toJsonValue(m_y_axis));
    }
    return obj;
}

OAIChartOptions OAIXyChart::getChartOptions() const {
    return m_chart_options;
}
void OAIXyChart::setChartOptions(const OAIChartOptions &chart_options) {
    m_chart_options = chart_options;
    m_chart_options_isSet = true;
}

bool OAIXyChart::is_chart_options_Set() const{
    return m_chart_options_isSet;
}

bool OAIXyChart::is_chart_options_Valid() const{
    return m_chart_options_isValid;
}

QList<OAIDataSet> OAIXyChart::getDataSets() const {
    return m_data_sets;
}
void OAIXyChart::setDataSets(const QList<OAIDataSet> &data_sets) {
    m_data_sets = data_sets;
    m_data_sets_isSet = true;
}

bool OAIXyChart::is_data_sets_Set() const{
    return m_data_sets_isSet;
}

bool OAIXyChart::is_data_sets_Valid() const{
    return m_data_sets_isValid;
}

QList<OAIThreshold> OAIXyChart::getThresholds() const {
    return m_thresholds;
}
void OAIXyChart::setThresholds(const QList<OAIThreshold> &thresholds) {
    m_thresholds = thresholds;
    m_thresholds_isSet = true;
}

bool OAIXyChart::is_thresholds_Set() const{
    return m_thresholds_isSet;
}

bool OAIXyChart::is_thresholds_Valid() const{
    return m_thresholds_isValid;
}

QString OAIXyChart::getTimeshiftDuration() const {
    return m_timeshift_duration;
}
void OAIXyChart::setTimeshiftDuration(const QString &timeshift_duration) {
    m_timeshift_duration = timeshift_duration;
    m_timeshift_duration_isSet = true;
}

bool OAIXyChart::is_timeshift_duration_Set() const{
    return m_timeshift_duration_isSet;
}

bool OAIXyChart::is_timeshift_duration_Valid() const{
    return m_timeshift_duration_isValid;
}

OAIAxis OAIXyChart::getXAxis() const {
    return m_x_axis;
}
void OAIXyChart::setXAxis(const OAIAxis &x_axis) {
    m_x_axis = x_axis;
    m_x_axis_isSet = true;
}

bool OAIXyChart::is_x_axis_Set() const{
    return m_x_axis_isSet;
}

bool OAIXyChart::is_x_axis_Valid() const{
    return m_x_axis_isValid;
}

OAIAxis OAIXyChart::getY2Axis() const {
    return m_y2_axis;
}
void OAIXyChart::setY2Axis(const OAIAxis &y2_axis) {
    m_y2_axis = y2_axis;
    m_y2_axis_isSet = true;
}

bool OAIXyChart::is_y2_axis_Set() const{
    return m_y2_axis_isSet;
}

bool OAIXyChart::is_y2_axis_Valid() const{
    return m_y2_axis_isValid;
}

OAIAxis OAIXyChart::getYAxis() const {
    return m_y_axis;
}
void OAIXyChart::setYAxis(const OAIAxis &y_axis) {
    m_y_axis = y_axis;
    m_y_axis_isSet = true;
}

bool OAIXyChart::is_y_axis_Set() const{
    return m_y_axis_isSet;
}

bool OAIXyChart::is_y_axis_Valid() const{
    return m_y_axis_isValid;
}

bool OAIXyChart::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chart_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_sets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_thresholds.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeshift_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_axis.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_y2_axis.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_axis.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIXyChart::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
