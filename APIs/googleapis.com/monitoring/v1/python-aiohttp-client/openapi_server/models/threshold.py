# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Threshold(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color: str=None, direction: str=None, label: str=None, target_axis: str=None, value: float=None):
        """Threshold - a model defined in OpenAPI

        :param color: The color of this Threshold.
        :param direction: The direction of this Threshold.
        :param label: The label of this Threshold.
        :param target_axis: The target_axis of this Threshold.
        :param value: The value of this Threshold.
        """
        self.openapi_types = {
            'color': str,
            'direction': str,
            'label': str,
            'target_axis': str,
            'value': float
        }

        self.attribute_map = {
            'color': 'color',
            'direction': 'direction',
            'label': 'label',
            'target_axis': 'targetAxis',
            'value': 'value'
        }

        self._color = color
        self._direction = direction
        self._label = label
        self._target_axis = target_axis
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Threshold':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Threshold of this Threshold.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color(self):
        """Gets the color of this Threshold.

        The state color for this threshold. Color is not allowed in a XyChart.

        :return: The color of this Threshold.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Threshold.

        The state color for this threshold. Color is not allowed in a XyChart.

        :param color: The color of this Threshold.
        :type color: str
        """
        allowed_values = ["COLOR_UNSPECIFIED", "YELLOW", "RED"]  # noqa: E501
        if color not in allowed_values:
            raise ValueError(
                "Invalid value for `color` ({0}), must be one of {1}"
                .format(color, allowed_values)
            )

        self._color = color

    @property
    def direction(self):
        """Gets the direction of this Threshold.

        The direction for the current threshold. Direction is not allowed in a XyChart.

        :return: The direction of this Threshold.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this Threshold.

        The direction for the current threshold. Direction is not allowed in a XyChart.

        :param direction: The direction of this Threshold.
        :type direction: str
        """
        allowed_values = ["DIRECTION_UNSPECIFIED", "ABOVE", "BELOW"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def label(self):
        """Gets the label of this Threshold.

        A label for the threshold.

        :return: The label of this Threshold.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Threshold.

        A label for the threshold.

        :param label: The label of this Threshold.
        :type label: str
        """

        self._label = label

    @property
    def target_axis(self):
        """Gets the target_axis of this Threshold.

        The target axis to use for plotting the threshold. Target axis is not allowed in a Scorecard.

        :return: The target_axis of this Threshold.
        :rtype: str
        """
        return self._target_axis

    @target_axis.setter
    def target_axis(self, target_axis):
        """Sets the target_axis of this Threshold.

        The target axis to use for plotting the threshold. Target axis is not allowed in a Scorecard.

        :param target_axis: The target_axis of this Threshold.
        :type target_axis: str
        """
        allowed_values = ["TARGET_AXIS_UNSPECIFIED", "Y1", "Y2"]  # noqa: E501
        if target_axis not in allowed_values:
            raise ValueError(
                "Invalid value for `target_axis` ({0}), must be one of {1}"
                .format(target_axis, allowed_values)
            )

        self._target_axis = target_axis

    @property
    def value(self):
        """Gets the value of this Threshold.

        The value of the threshold. The value should be defined in the native scale of the metric.

        :return: The value of this Threshold.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Threshold.

        The value of the threshold. The value should be defined in the native scale of the metric.

        :param value: The value of this Threshold.
        :type value: float
        """

        self._value = value
