# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.widget import Widget
from openapi_server import util


class GridLayout(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, columns: str=None, widgets: List[Widget]=None):
        """GridLayout - a model defined in OpenAPI

        :param columns: The columns of this GridLayout.
        :param widgets: The widgets of this GridLayout.
        """
        self.openapi_types = {
            'columns': str,
            'widgets': List[Widget]
        }

        self.attribute_map = {
            'columns': 'columns',
            'widgets': 'widgets'
        }

        self._columns = columns
        self._widgets = widgets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GridLayout':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GridLayout of this GridLayout.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def columns(self):
        """Gets the columns of this GridLayout.

        The number of columns into which the view's width is divided. If omitted or set to zero, a system default will be used while rendering.

        :return: The columns of this GridLayout.
        :rtype: str
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this GridLayout.

        The number of columns into which the view's width is divided. If omitted or set to zero, a system default will be used while rendering.

        :param columns: The columns of this GridLayout.
        :type columns: str
        """

        self._columns = columns

    @property
    def widgets(self):
        """Gets the widgets of this GridLayout.

        The informational elements that are arranged into the columns row-first.

        :return: The widgets of this GridLayout.
        :rtype: List[Widget]
        """
        return self._widgets

    @widgets.setter
    def widgets(self, widgets):
        """Sets the widgets of this GridLayout.

        The informational elements that are arranged into the columns row-first.

        :param widgets: The widgets of this GridLayout.
        :type widgets: List[Widget]
        """

        self._widgets = widgets
