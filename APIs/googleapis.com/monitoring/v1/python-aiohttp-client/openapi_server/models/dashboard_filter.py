# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DashboardFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter_type: str=None, label_key: str=None, string_value: str=None, template_variable: str=None):
        """DashboardFilter - a model defined in OpenAPI

        :param filter_type: The filter_type of this DashboardFilter.
        :param label_key: The label_key of this DashboardFilter.
        :param string_value: The string_value of this DashboardFilter.
        :param template_variable: The template_variable of this DashboardFilter.
        """
        self.openapi_types = {
            'filter_type': str,
            'label_key': str,
            'string_value': str,
            'template_variable': str
        }

        self.attribute_map = {
            'filter_type': 'filterType',
            'label_key': 'labelKey',
            'string_value': 'stringValue',
            'template_variable': 'templateVariable'
        }

        self._filter_type = filter_type
        self._label_key = label_key
        self._string_value = string_value
        self._template_variable = template_variable

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DashboardFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DashboardFilter of this DashboardFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter_type(self):
        """Gets the filter_type of this DashboardFilter.

        The specified filter type

        :return: The filter_type of this DashboardFilter.
        :rtype: str
        """
        return self._filter_type

    @filter_type.setter
    def filter_type(self, filter_type):
        """Sets the filter_type of this DashboardFilter.

        The specified filter type

        :param filter_type: The filter_type of this DashboardFilter.
        :type filter_type: str
        """
        allowed_values = ["FILTER_TYPE_UNSPECIFIED", "RESOURCE_LABEL", "METRIC_LABEL", "USER_METADATA_LABEL", "SYSTEM_METADATA_LABEL", "GROUP"]  # noqa: E501
        if filter_type not in allowed_values:
            raise ValueError(
                "Invalid value for `filter_type` ({0}), must be one of {1}"
                .format(filter_type, allowed_values)
            )

        self._filter_type = filter_type

    @property
    def label_key(self):
        """Gets the label_key of this DashboardFilter.

        Required. The key for the label

        :return: The label_key of this DashboardFilter.
        :rtype: str
        """
        return self._label_key

    @label_key.setter
    def label_key(self, label_key):
        """Sets the label_key of this DashboardFilter.

        Required. The key for the label

        :param label_key: The label_key of this DashboardFilter.
        :type label_key: str
        """

        self._label_key = label_key

    @property
    def string_value(self):
        """Gets the string_value of this DashboardFilter.

        A variable-length string value.

        :return: The string_value of this DashboardFilter.
        :rtype: str
        """
        return self._string_value

    @string_value.setter
    def string_value(self, string_value):
        """Sets the string_value of this DashboardFilter.

        A variable-length string value.

        :param string_value: The string_value of this DashboardFilter.
        :type string_value: str
        """

        self._string_value = string_value

    @property
    def template_variable(self):
        """Gets the template_variable of this DashboardFilter.

        The placeholder text that can be referenced in a filter string or MQL query. If omitted, the dashboard filter will be applied to all relevant widgets in the dashboard.

        :return: The template_variable of this DashboardFilter.
        :rtype: str
        """
        return self._template_variable

    @template_variable.setter
    def template_variable(self, template_variable):
        """Sets the template_variable of this DashboardFilter.

        The placeholder text that can be referenced in a filter string or MQL query. If omitted, the dashboard filter will be applied to all relevant widgets in the dashboard.

        :param template_variable: The template_variable of this DashboardFilter.
        :type template_variable: str
        """

        self._template_variable = template_variable
