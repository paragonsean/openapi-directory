# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dimension import Dimension
from openapi_server.models.measure import Measure
from openapi_server.models.time_series_query import TimeSeriesQuery
from openapi_server import util


class PieChartDataSet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dimensions: List[Dimension]=None, measures: List[Measure]=None, min_alignment_period: str=None, slice_name_template: str=None, time_series_query: TimeSeriesQuery=None):
        """PieChartDataSet - a model defined in OpenAPI

        :param dimensions: The dimensions of this PieChartDataSet.
        :param measures: The measures of this PieChartDataSet.
        :param min_alignment_period: The min_alignment_period of this PieChartDataSet.
        :param slice_name_template: The slice_name_template of this PieChartDataSet.
        :param time_series_query: The time_series_query of this PieChartDataSet.
        """
        self.openapi_types = {
            'dimensions': List[Dimension],
            'measures': List[Measure],
            'min_alignment_period': str,
            'slice_name_template': str,
            'time_series_query': TimeSeriesQuery
        }

        self.attribute_map = {
            'dimensions': 'dimensions',
            'measures': 'measures',
            'min_alignment_period': 'minAlignmentPeriod',
            'slice_name_template': 'sliceNameTemplate',
            'time_series_query': 'timeSeriesQuery'
        }

        self._dimensions = dimensions
        self._measures = measures
        self._min_alignment_period = min_alignment_period
        self._slice_name_template = slice_name_template
        self._time_series_query = time_series_query

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PieChartDataSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PieChartDataSet of this PieChartDataSet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dimensions(self):
        """Gets the dimensions of this PieChartDataSet.

        A dimension is a structured label, class, or category for a set of measurements in your data.

        :return: The dimensions of this PieChartDataSet.
        :rtype: List[Dimension]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this PieChartDataSet.

        A dimension is a structured label, class, or category for a set of measurements in your data.

        :param dimensions: The dimensions of this PieChartDataSet.
        :type dimensions: List[Dimension]
        """

        self._dimensions = dimensions

    @property
    def measures(self):
        """Gets the measures of this PieChartDataSet.

        A measure is a measured value of a property in your data. For example, rainfall in inches, number of units sold, revenue gained, etc.

        :return: The measures of this PieChartDataSet.
        :rtype: List[Measure]
        """
        return self._measures

    @measures.setter
    def measures(self, measures):
        """Sets the measures of this PieChartDataSet.

        A measure is a measured value of a property in your data. For example, rainfall in inches, number of units sold, revenue gained, etc.

        :param measures: The measures of this PieChartDataSet.
        :type measures: List[Measure]
        """

        self._measures = measures

    @property
    def min_alignment_period(self):
        """Gets the min_alignment_period of this PieChartDataSet.

        Optional. The lower bound on data point frequency for this data set, implemented by specifying the minimum alignment period to use in a time series query. For example, if the data is published once every 10 minutes, the min_alignment_period should be at least 10 minutes. It would not make sense to fetch and align data at one minute intervals.

        :return: The min_alignment_period of this PieChartDataSet.
        :rtype: str
        """
        return self._min_alignment_period

    @min_alignment_period.setter
    def min_alignment_period(self, min_alignment_period):
        """Sets the min_alignment_period of this PieChartDataSet.

        Optional. The lower bound on data point frequency for this data set, implemented by specifying the minimum alignment period to use in a time series query. For example, if the data is published once every 10 minutes, the min_alignment_period should be at least 10 minutes. It would not make sense to fetch and align data at one minute intervals.

        :param min_alignment_period: The min_alignment_period of this PieChartDataSet.
        :type min_alignment_period: str
        """

        self._min_alignment_period = min_alignment_period

    @property
    def slice_name_template(self):
        """Gets the slice_name_template of this PieChartDataSet.

        Optional. A template for the name of the slice. This name will be displayed in the legend and the tooltip of the pie chart. It replaces the auto-generated names for the slices. For example, if the template is set to ${resource.labels.zone}, the zone's value will be used for the name instead of the default name.

        :return: The slice_name_template of this PieChartDataSet.
        :rtype: str
        """
        return self._slice_name_template

    @slice_name_template.setter
    def slice_name_template(self, slice_name_template):
        """Sets the slice_name_template of this PieChartDataSet.

        Optional. A template for the name of the slice. This name will be displayed in the legend and the tooltip of the pie chart. It replaces the auto-generated names for the slices. For example, if the template is set to ${resource.labels.zone}, the zone's value will be used for the name instead of the default name.

        :param slice_name_template: The slice_name_template of this PieChartDataSet.
        :type slice_name_template: str
        """

        self._slice_name_template = slice_name_template

    @property
    def time_series_query(self):
        """Gets the time_series_query of this PieChartDataSet.


        :return: The time_series_query of this PieChartDataSet.
        :rtype: TimeSeriesQuery
        """
        return self._time_series_query

    @time_series_query.setter
    def time_series_query(self, time_series_query):
        """Sets the time_series_query of this PieChartDataSet.


        :param time_series_query: The time_series_query of this PieChartDataSet.
        :type time_series_query: TimeSeriesQuery
        """

        self._time_series_query = time_series_query
