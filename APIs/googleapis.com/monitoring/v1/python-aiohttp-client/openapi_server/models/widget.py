# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.alert_chart import AlertChart
from openapi_server.models.collapsible_group import CollapsibleGroup
from openapi_server.models.error_reporting_panel import ErrorReportingPanel
from openapi_server.models.incident_list import IncidentList
from openapi_server.models.logs_panel import LogsPanel
from openapi_server.models.pie_chart import PieChart
from openapi_server.models.scorecard import Scorecard
from openapi_server.models.section_header import SectionHeader
from openapi_server.models.text import Text
from openapi_server.models.time_series_table import TimeSeriesTable
from openapi_server.models.xy_chart import XyChart
from openapi_server import util


class Widget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alert_chart: AlertChart=None, blank: object=None, collapsible_group: CollapsibleGroup=None, error_reporting_panel: ErrorReportingPanel=None, id: str=None, incident_list: IncidentList=None, logs_panel: LogsPanel=None, pie_chart: PieChart=None, scorecard: Scorecard=None, section_header: SectionHeader=None, single_view_group: object=None, text: Text=None, time_series_table: TimeSeriesTable=None, title: str=None, xy_chart: XyChart=None):
        """Widget - a model defined in OpenAPI

        :param alert_chart: The alert_chart of this Widget.
        :param blank: The blank of this Widget.
        :param collapsible_group: The collapsible_group of this Widget.
        :param error_reporting_panel: The error_reporting_panel of this Widget.
        :param id: The id of this Widget.
        :param incident_list: The incident_list of this Widget.
        :param logs_panel: The logs_panel of this Widget.
        :param pie_chart: The pie_chart of this Widget.
        :param scorecard: The scorecard of this Widget.
        :param section_header: The section_header of this Widget.
        :param single_view_group: The single_view_group of this Widget.
        :param text: The text of this Widget.
        :param time_series_table: The time_series_table of this Widget.
        :param title: The title of this Widget.
        :param xy_chart: The xy_chart of this Widget.
        """
        self.openapi_types = {
            'alert_chart': AlertChart,
            'blank': object,
            'collapsible_group': CollapsibleGroup,
            'error_reporting_panel': ErrorReportingPanel,
            'id': str,
            'incident_list': IncidentList,
            'logs_panel': LogsPanel,
            'pie_chart': PieChart,
            'scorecard': Scorecard,
            'section_header': SectionHeader,
            'single_view_group': object,
            'text': Text,
            'time_series_table': TimeSeriesTable,
            'title': str,
            'xy_chart': XyChart
        }

        self.attribute_map = {
            'alert_chart': 'alertChart',
            'blank': 'blank',
            'collapsible_group': 'collapsibleGroup',
            'error_reporting_panel': 'errorReportingPanel',
            'id': 'id',
            'incident_list': 'incidentList',
            'logs_panel': 'logsPanel',
            'pie_chart': 'pieChart',
            'scorecard': 'scorecard',
            'section_header': 'sectionHeader',
            'single_view_group': 'singleViewGroup',
            'text': 'text',
            'time_series_table': 'timeSeriesTable',
            'title': 'title',
            'xy_chart': 'xyChart'
        }

        self._alert_chart = alert_chart
        self._blank = blank
        self._collapsible_group = collapsible_group
        self._error_reporting_panel = error_reporting_panel
        self._id = id
        self._incident_list = incident_list
        self._logs_panel = logs_panel
        self._pie_chart = pie_chart
        self._scorecard = scorecard
        self._section_header = section_header
        self._single_view_group = single_view_group
        self._text = text
        self._time_series_table = time_series_table
        self._title = title
        self._xy_chart = xy_chart

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Widget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Widget of this Widget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alert_chart(self):
        """Gets the alert_chart of this Widget.


        :return: The alert_chart of this Widget.
        :rtype: AlertChart
        """
        return self._alert_chart

    @alert_chart.setter
    def alert_chart(self, alert_chart):
        """Sets the alert_chart of this Widget.


        :param alert_chart: The alert_chart of this Widget.
        :type alert_chart: AlertChart
        """

        self._alert_chart = alert_chart

    @property
    def blank(self):
        """Gets the blank of this Widget.

        A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } 

        :return: The blank of this Widget.
        :rtype: object
        """
        return self._blank

    @blank.setter
    def blank(self, blank):
        """Sets the blank of this Widget.

        A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } 

        :param blank: The blank of this Widget.
        :type blank: object
        """

        self._blank = blank

    @property
    def collapsible_group(self):
        """Gets the collapsible_group of this Widget.


        :return: The collapsible_group of this Widget.
        :rtype: CollapsibleGroup
        """
        return self._collapsible_group

    @collapsible_group.setter
    def collapsible_group(self, collapsible_group):
        """Sets the collapsible_group of this Widget.


        :param collapsible_group: The collapsible_group of this Widget.
        :type collapsible_group: CollapsibleGroup
        """

        self._collapsible_group = collapsible_group

    @property
    def error_reporting_panel(self):
        """Gets the error_reporting_panel of this Widget.


        :return: The error_reporting_panel of this Widget.
        :rtype: ErrorReportingPanel
        """
        return self._error_reporting_panel

    @error_reporting_panel.setter
    def error_reporting_panel(self, error_reporting_panel):
        """Sets the error_reporting_panel of this Widget.


        :param error_reporting_panel: The error_reporting_panel of this Widget.
        :type error_reporting_panel: ErrorReportingPanel
        """

        self._error_reporting_panel = error_reporting_panel

    @property
    def id(self):
        """Gets the id of this Widget.

        Optional. The widget id. Ids may be made up of alphanumerics, dashes and underscores. Widget ids are optional.

        :return: The id of this Widget.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Widget.

        Optional. The widget id. Ids may be made up of alphanumerics, dashes and underscores. Widget ids are optional.

        :param id: The id of this Widget.
        :type id: str
        """

        self._id = id

    @property
    def incident_list(self):
        """Gets the incident_list of this Widget.


        :return: The incident_list of this Widget.
        :rtype: IncidentList
        """
        return self._incident_list

    @incident_list.setter
    def incident_list(self, incident_list):
        """Sets the incident_list of this Widget.


        :param incident_list: The incident_list of this Widget.
        :type incident_list: IncidentList
        """

        self._incident_list = incident_list

    @property
    def logs_panel(self):
        """Gets the logs_panel of this Widget.


        :return: The logs_panel of this Widget.
        :rtype: LogsPanel
        """
        return self._logs_panel

    @logs_panel.setter
    def logs_panel(self, logs_panel):
        """Sets the logs_panel of this Widget.


        :param logs_panel: The logs_panel of this Widget.
        :type logs_panel: LogsPanel
        """

        self._logs_panel = logs_panel

    @property
    def pie_chart(self):
        """Gets the pie_chart of this Widget.


        :return: The pie_chart of this Widget.
        :rtype: PieChart
        """
        return self._pie_chart

    @pie_chart.setter
    def pie_chart(self, pie_chart):
        """Sets the pie_chart of this Widget.


        :param pie_chart: The pie_chart of this Widget.
        :type pie_chart: PieChart
        """

        self._pie_chart = pie_chart

    @property
    def scorecard(self):
        """Gets the scorecard of this Widget.


        :return: The scorecard of this Widget.
        :rtype: Scorecard
        """
        return self._scorecard

    @scorecard.setter
    def scorecard(self, scorecard):
        """Sets the scorecard of this Widget.


        :param scorecard: The scorecard of this Widget.
        :type scorecard: Scorecard
        """

        self._scorecard = scorecard

    @property
    def section_header(self):
        """Gets the section_header of this Widget.


        :return: The section_header of this Widget.
        :rtype: SectionHeader
        """
        return self._section_header

    @section_header.setter
    def section_header(self, section_header):
        """Sets the section_header of this Widget.


        :param section_header: The section_header of this Widget.
        :type section_header: SectionHeader
        """

        self._section_header = section_header

    @property
    def single_view_group(self):
        """Gets the single_view_group of this Widget.

        A widget that groups the other widgets by using a dropdown menu. All widgets that are within the area spanned by the grouping widget are considered member widgets.

        :return: The single_view_group of this Widget.
        :rtype: object
        """
        return self._single_view_group

    @single_view_group.setter
    def single_view_group(self, single_view_group):
        """Sets the single_view_group of this Widget.

        A widget that groups the other widgets by using a dropdown menu. All widgets that are within the area spanned by the grouping widget are considered member widgets.

        :param single_view_group: The single_view_group of this Widget.
        :type single_view_group: object
        """

        self._single_view_group = single_view_group

    @property
    def text(self):
        """Gets the text of this Widget.


        :return: The text of this Widget.
        :rtype: Text
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Widget.


        :param text: The text of this Widget.
        :type text: Text
        """

        self._text = text

    @property
    def time_series_table(self):
        """Gets the time_series_table of this Widget.


        :return: The time_series_table of this Widget.
        :rtype: TimeSeriesTable
        """
        return self._time_series_table

    @time_series_table.setter
    def time_series_table(self, time_series_table):
        """Sets the time_series_table of this Widget.


        :param time_series_table: The time_series_table of this Widget.
        :type time_series_table: TimeSeriesTable
        """

        self._time_series_table = time_series_table

    @property
    def title(self):
        """Gets the title of this Widget.

        Optional. The title of the widget.

        :return: The title of this Widget.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Widget.

        Optional. The title of the widget.

        :param title: The title of this Widget.
        :type title: str
        """

        self._title = title

    @property
    def xy_chart(self):
        """Gets the xy_chart of this Widget.


        :return: The xy_chart of this Widget.
        :rtype: XyChart
        """
        return self._xy_chart

    @xy_chart.setter
    def xy_chart(self, xy_chart):
        """Sets the xy_chart of this Widget.


        :param xy_chart: The xy_chart of this Widget.
        :type xy_chart: XyChart
        """

        self._xy_chart = xy_chart
