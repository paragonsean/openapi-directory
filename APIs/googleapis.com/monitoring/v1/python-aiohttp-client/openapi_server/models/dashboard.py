# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.column_layout import ColumnLayout
from openapi_server.models.dashboard_filter import DashboardFilter
from openapi_server.models.grid_layout import GridLayout
from openapi_server.models.mosaic_layout import MosaicLayout
from openapi_server.models.row_layout import RowLayout
from openapi_server import util


class Dashboard(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, column_layout: ColumnLayout=None, dashboard_filters: List[DashboardFilter]=None, display_name: str=None, etag: str=None, grid_layout: GridLayout=None, labels: Dict[str, str]=None, mosaic_layout: MosaicLayout=None, name: str=None, row_layout: RowLayout=None):
        """Dashboard - a model defined in OpenAPI

        :param column_layout: The column_layout of this Dashboard.
        :param dashboard_filters: The dashboard_filters of this Dashboard.
        :param display_name: The display_name of this Dashboard.
        :param etag: The etag of this Dashboard.
        :param grid_layout: The grid_layout of this Dashboard.
        :param labels: The labels of this Dashboard.
        :param mosaic_layout: The mosaic_layout of this Dashboard.
        :param name: The name of this Dashboard.
        :param row_layout: The row_layout of this Dashboard.
        """
        self.openapi_types = {
            'column_layout': ColumnLayout,
            'dashboard_filters': List[DashboardFilter],
            'display_name': str,
            'etag': str,
            'grid_layout': GridLayout,
            'labels': Dict[str, str],
            'mosaic_layout': MosaicLayout,
            'name': str,
            'row_layout': RowLayout
        }

        self.attribute_map = {
            'column_layout': 'columnLayout',
            'dashboard_filters': 'dashboardFilters',
            'display_name': 'displayName',
            'etag': 'etag',
            'grid_layout': 'gridLayout',
            'labels': 'labels',
            'mosaic_layout': 'mosaicLayout',
            'name': 'name',
            'row_layout': 'rowLayout'
        }

        self._column_layout = column_layout
        self._dashboard_filters = dashboard_filters
        self._display_name = display_name
        self._etag = etag
        self._grid_layout = grid_layout
        self._labels = labels
        self._mosaic_layout = mosaic_layout
        self._name = name
        self._row_layout = row_layout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dashboard':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Dashboard of this Dashboard.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def column_layout(self):
        """Gets the column_layout of this Dashboard.


        :return: The column_layout of this Dashboard.
        :rtype: ColumnLayout
        """
        return self._column_layout

    @column_layout.setter
    def column_layout(self, column_layout):
        """Sets the column_layout of this Dashboard.


        :param column_layout: The column_layout of this Dashboard.
        :type column_layout: ColumnLayout
        """

        self._column_layout = column_layout

    @property
    def dashboard_filters(self):
        """Gets the dashboard_filters of this Dashboard.

        Filters to reduce the amount of data charted based on the filter criteria.

        :return: The dashboard_filters of this Dashboard.
        :rtype: List[DashboardFilter]
        """
        return self._dashboard_filters

    @dashboard_filters.setter
    def dashboard_filters(self, dashboard_filters):
        """Sets the dashboard_filters of this Dashboard.

        Filters to reduce the amount of data charted based on the filter criteria.

        :param dashboard_filters: The dashboard_filters of this Dashboard.
        :type dashboard_filters: List[DashboardFilter]
        """

        self._dashboard_filters = dashboard_filters

    @property
    def display_name(self):
        """Gets the display_name of this Dashboard.

        Required. The mutable, human-readable name.

        :return: The display_name of this Dashboard.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Dashboard.

        Required. The mutable, human-readable name.

        :param display_name: The display_name of this Dashboard.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def etag(self):
        """Gets the etag of this Dashboard.

        etag is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. An etag is returned in the response to GetDashboard, and users are expected to put that etag in the request to UpdateDashboard to ensure that their change will be applied to the same version of the Dashboard configuration. The field should not be passed during dashboard creation.

        :return: The etag of this Dashboard.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Dashboard.

        etag is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. An etag is returned in the response to GetDashboard, and users are expected to put that etag in the request to UpdateDashboard to ensure that their change will be applied to the same version of the Dashboard configuration. The field should not be passed during dashboard creation.

        :param etag: The etag of this Dashboard.
        :type etag: str
        """

        self._etag = etag

    @property
    def grid_layout(self):
        """Gets the grid_layout of this Dashboard.


        :return: The grid_layout of this Dashboard.
        :rtype: GridLayout
        """
        return self._grid_layout

    @grid_layout.setter
    def grid_layout(self, grid_layout):
        """Sets the grid_layout of this Dashboard.


        :param grid_layout: The grid_layout of this Dashboard.
        :type grid_layout: GridLayout
        """

        self._grid_layout = grid_layout

    @property
    def labels(self):
        """Gets the labels of this Dashboard.

        Labels applied to the dashboard

        :return: The labels of this Dashboard.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Dashboard.

        Labels applied to the dashboard

        :param labels: The labels of this Dashboard.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def mosaic_layout(self):
        """Gets the mosaic_layout of this Dashboard.


        :return: The mosaic_layout of this Dashboard.
        :rtype: MosaicLayout
        """
        return self._mosaic_layout

    @mosaic_layout.setter
    def mosaic_layout(self, mosaic_layout):
        """Sets the mosaic_layout of this Dashboard.


        :param mosaic_layout: The mosaic_layout of this Dashboard.
        :type mosaic_layout: MosaicLayout
        """

        self._mosaic_layout = mosaic_layout

    @property
    def name(self):
        """Gets the name of this Dashboard.

        Identifier. The resource name of the dashboard.

        :return: The name of this Dashboard.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Dashboard.

        Identifier. The resource name of the dashboard.

        :param name: The name of this Dashboard.
        :type name: str
        """

        self._name = name

    @property
    def row_layout(self):
        """Gets the row_layout of this Dashboard.


        :return: The row_layout of this Dashboard.
        :rtype: RowLayout
        """
        return self._row_layout

    @row_layout.setter
    def row_layout(self, row_layout):
        """Sets the row_layout of this Dashboard.


        :param row_layout: The row_layout of this Dashboard.
        :type row_layout: RowLayout
        """

        self._row_layout = row_layout
