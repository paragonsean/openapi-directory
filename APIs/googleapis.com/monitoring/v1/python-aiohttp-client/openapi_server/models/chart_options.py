# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChartOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_horizontal: bool=None, mode: str=None):
        """ChartOptions - a model defined in OpenAPI

        :param display_horizontal: The display_horizontal of this ChartOptions.
        :param mode: The mode of this ChartOptions.
        """
        self.openapi_types = {
            'display_horizontal': bool,
            'mode': str
        }

        self.attribute_map = {
            'display_horizontal': 'displayHorizontal',
            'mode': 'mode'
        }

        self._display_horizontal = display_horizontal
        self._mode = mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChartOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChartOptions of this ChartOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_horizontal(self):
        """Gets the display_horizontal of this ChartOptions.

        Preview: Configures whether the charted values are shown on the horizontal or vertical axis. By default, values are represented the vertical axis. This is a preview feature and may be subject to change before final release.

        :return: The display_horizontal of this ChartOptions.
        :rtype: bool
        """
        return self._display_horizontal

    @display_horizontal.setter
    def display_horizontal(self, display_horizontal):
        """Sets the display_horizontal of this ChartOptions.

        Preview: Configures whether the charted values are shown on the horizontal or vertical axis. By default, values are represented the vertical axis. This is a preview feature and may be subject to change before final release.

        :param display_horizontal: The display_horizontal of this ChartOptions.
        :type display_horizontal: bool
        """

        self._display_horizontal = display_horizontal

    @property
    def mode(self):
        """Gets the mode of this ChartOptions.

        The chart mode.

        :return: The mode of this ChartOptions.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this ChartOptions.

        The chart mode.

        :param mode: The mode of this ChartOptions.
        :type mode: str
        """
        allowed_values = ["MODE_UNSPECIFIED", "COLOR", "X_RAY", "STATS"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode
