# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Axis(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, label: str=None, scale: str=None):
        """Axis - a model defined in OpenAPI

        :param label: The label of this Axis.
        :param scale: The scale of this Axis.
        """
        self.openapi_types = {
            'label': str,
            'scale': str
        }

        self.attribute_map = {
            'label': 'label',
            'scale': 'scale'
        }

        self._label = label
        self._scale = scale

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Axis':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Axis of this Axis.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def label(self):
        """Gets the label of this Axis.

        The label of the axis.

        :return: The label of this Axis.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Axis.

        The label of the axis.

        :param label: The label of this Axis.
        :type label: str
        """

        self._label = label

    @property
    def scale(self):
        """Gets the scale of this Axis.

        The axis scale. By default, a linear scale is used.

        :return: The scale of this Axis.
        :rtype: str
        """
        return self._scale

    @scale.setter
    def scale(self, scale):
        """Sets the scale of this Axis.

        The axis scale. By default, a linear scale is used.

        :param scale: The scale of this Axis.
        :type scale: str
        """
        allowed_values = ["SCALE_UNSPECIFIED", "LINEAR", "LOG10"]  # noqa: E501
        if scale not in allowed_values:
            raise ValueError(
                "Invalid value for `scale` ({0}), must be one of {1}"
                .format(scale, allowed_values)
            )

        self._scale = scale
