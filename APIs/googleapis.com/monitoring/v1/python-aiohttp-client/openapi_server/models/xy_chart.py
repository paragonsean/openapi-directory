# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.axis import Axis
from openapi_server.models.chart_options import ChartOptions
from openapi_server.models.data_set import DataSet
from openapi_server.models.threshold import Threshold
from openapi_server import util


class XyChart(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chart_options: ChartOptions=None, data_sets: List[DataSet]=None, thresholds: List[Threshold]=None, timeshift_duration: str=None, x_axis: Axis=None, y2_axis: Axis=None, y_axis: Axis=None):
        """XyChart - a model defined in OpenAPI

        :param chart_options: The chart_options of this XyChart.
        :param data_sets: The data_sets of this XyChart.
        :param thresholds: The thresholds of this XyChart.
        :param timeshift_duration: The timeshift_duration of this XyChart.
        :param x_axis: The x_axis of this XyChart.
        :param y2_axis: The y2_axis of this XyChart.
        :param y_axis: The y_axis of this XyChart.
        """
        self.openapi_types = {
            'chart_options': ChartOptions,
            'data_sets': List[DataSet],
            'thresholds': List[Threshold],
            'timeshift_duration': str,
            'x_axis': Axis,
            'y2_axis': Axis,
            'y_axis': Axis
        }

        self.attribute_map = {
            'chart_options': 'chartOptions',
            'data_sets': 'dataSets',
            'thresholds': 'thresholds',
            'timeshift_duration': 'timeshiftDuration',
            'x_axis': 'xAxis',
            'y2_axis': 'y2Axis',
            'y_axis': 'yAxis'
        }

        self._chart_options = chart_options
        self._data_sets = data_sets
        self._thresholds = thresholds
        self._timeshift_duration = timeshift_duration
        self._x_axis = x_axis
        self._y2_axis = y2_axis
        self._y_axis = y_axis

    @classmethod
    def from_dict(cls, dikt: dict) -> 'XyChart':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The XyChart of this XyChart.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chart_options(self):
        """Gets the chart_options of this XyChart.


        :return: The chart_options of this XyChart.
        :rtype: ChartOptions
        """
        return self._chart_options

    @chart_options.setter
    def chart_options(self, chart_options):
        """Sets the chart_options of this XyChart.


        :param chart_options: The chart_options of this XyChart.
        :type chart_options: ChartOptions
        """

        self._chart_options = chart_options

    @property
    def data_sets(self):
        """Gets the data_sets of this XyChart.

        Required. The data displayed in this chart.

        :return: The data_sets of this XyChart.
        :rtype: List[DataSet]
        """
        return self._data_sets

    @data_sets.setter
    def data_sets(self, data_sets):
        """Sets the data_sets of this XyChart.

        Required. The data displayed in this chart.

        :param data_sets: The data_sets of this XyChart.
        :type data_sets: List[DataSet]
        """

        self._data_sets = data_sets

    @property
    def thresholds(self):
        """Gets the thresholds of this XyChart.

        Threshold lines drawn horizontally across the chart.

        :return: The thresholds of this XyChart.
        :rtype: List[Threshold]
        """
        return self._thresholds

    @thresholds.setter
    def thresholds(self, thresholds):
        """Sets the thresholds of this XyChart.

        Threshold lines drawn horizontally across the chart.

        :param thresholds: The thresholds of this XyChart.
        :type thresholds: List[Threshold]
        """

        self._thresholds = thresholds

    @property
    def timeshift_duration(self):
        """Gets the timeshift_duration of this XyChart.

        The duration used to display a comparison chart. A comparison chart simultaneously shows values from two similar-length time periods (e.g., week-over-week metrics). The duration must be positive, and it can only be applied to charts with data sets of LINE plot type.

        :return: The timeshift_duration of this XyChart.
        :rtype: str
        """
        return self._timeshift_duration

    @timeshift_duration.setter
    def timeshift_duration(self, timeshift_duration):
        """Sets the timeshift_duration of this XyChart.

        The duration used to display a comparison chart. A comparison chart simultaneously shows values from two similar-length time periods (e.g., week-over-week metrics). The duration must be positive, and it can only be applied to charts with data sets of LINE plot type.

        :param timeshift_duration: The timeshift_duration of this XyChart.
        :type timeshift_duration: str
        """

        self._timeshift_duration = timeshift_duration

    @property
    def x_axis(self):
        """Gets the x_axis of this XyChart.


        :return: The x_axis of this XyChart.
        :rtype: Axis
        """
        return self._x_axis

    @x_axis.setter
    def x_axis(self, x_axis):
        """Sets the x_axis of this XyChart.


        :param x_axis: The x_axis of this XyChart.
        :type x_axis: Axis
        """

        self._x_axis = x_axis

    @property
    def y2_axis(self):
        """Gets the y2_axis of this XyChart.


        :return: The y2_axis of this XyChart.
        :rtype: Axis
        """
        return self._y2_axis

    @y2_axis.setter
    def y2_axis(self, y2_axis):
        """Sets the y2_axis of this XyChart.


        :param y2_axis: The y2_axis of this XyChart.
        :type y2_axis: Axis
        """

        self._y2_axis = y2_axis

    @property
    def y_axis(self):
        """Gets the y_axis of this XyChart.


        :return: The y_axis of this XyChart.
        :rtype: Axis
        """
        return self._y_axis

    @y_axis.setter
    def y_axis(self, y_axis):
        """Sets the y_axis of this XyChart.


        :param y_axis: The y_axis of this XyChart.
        :type y_axis: Axis
        """

        self._y_axis = y_axis
