# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Dimension(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, column: str=None, column_type: str=None, float_bin_size: float=None, max_bin_count: int=None, numeric_bin_size: int=None, sort_column: str=None, sort_order: str=None, time_bin_size: str=None):
        """Dimension - a model defined in OpenAPI

        :param column: The column of this Dimension.
        :param column_type: The column_type of this Dimension.
        :param float_bin_size: The float_bin_size of this Dimension.
        :param max_bin_count: The max_bin_count of this Dimension.
        :param numeric_bin_size: The numeric_bin_size of this Dimension.
        :param sort_column: The sort_column of this Dimension.
        :param sort_order: The sort_order of this Dimension.
        :param time_bin_size: The time_bin_size of this Dimension.
        """
        self.openapi_types = {
            'column': str,
            'column_type': str,
            'float_bin_size': float,
            'max_bin_count': int,
            'numeric_bin_size': int,
            'sort_column': str,
            'sort_order': str,
            'time_bin_size': str
        }

        self.attribute_map = {
            'column': 'column',
            'column_type': 'columnType',
            'float_bin_size': 'floatBinSize',
            'max_bin_count': 'maxBinCount',
            'numeric_bin_size': 'numericBinSize',
            'sort_column': 'sortColumn',
            'sort_order': 'sortOrder',
            'time_bin_size': 'timeBinSize'
        }

        self._column = column
        self._column_type = column_type
        self._float_bin_size = float_bin_size
        self._max_bin_count = max_bin_count
        self._numeric_bin_size = numeric_bin_size
        self._sort_column = sort_column
        self._sort_order = sort_order
        self._time_bin_size = time_bin_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dimension':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Dimension of this Dimension.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def column(self):
        """Gets the column of this Dimension.

        Required. The name of the column in the source SQL query that is used to chart the dimension.

        :return: The column of this Dimension.
        :rtype: str
        """
        return self._column

    @column.setter
    def column(self, column):
        """Sets the column of this Dimension.

        Required. The name of the column in the source SQL query that is used to chart the dimension.

        :param column: The column of this Dimension.
        :type column: str
        """

        self._column = column

    @property
    def column_type(self):
        """Gets the column_type of this Dimension.

        Optional. The type of the dimension column. This is relevant only if one of the bin_size fields is set. If it is empty, the type TIMESTAMP or INT64 will be assumed based on which bin_size field is set. If populated, this should be set to one of the following types: DATE, TIME, DATETIME, TIMESTAMP, BIGNUMERIC, INT64, NUMERIC, FLOAT64.

        :return: The column_type of this Dimension.
        :rtype: str
        """
        return self._column_type

    @column_type.setter
    def column_type(self, column_type):
        """Sets the column_type of this Dimension.

        Optional. The type of the dimension column. This is relevant only if one of the bin_size fields is set. If it is empty, the type TIMESTAMP or INT64 will be assumed based on which bin_size field is set. If populated, this should be set to one of the following types: DATE, TIME, DATETIME, TIMESTAMP, BIGNUMERIC, INT64, NUMERIC, FLOAT64.

        :param column_type: The column_type of this Dimension.
        :type column_type: str
        """

        self._column_type = column_type

    @property
    def float_bin_size(self):
        """Gets the float_bin_size of this Dimension.

        Optional. float_bin_size is used when the column type used for a dimension is a floating point numeric column.

        :return: The float_bin_size of this Dimension.
        :rtype: float
        """
        return self._float_bin_size

    @float_bin_size.setter
    def float_bin_size(self, float_bin_size):
        """Sets the float_bin_size of this Dimension.

        Optional. float_bin_size is used when the column type used for a dimension is a floating point numeric column.

        :param float_bin_size: The float_bin_size of this Dimension.
        :type float_bin_size: float
        """

        self._float_bin_size = float_bin_size

    @property
    def max_bin_count(self):
        """Gets the max_bin_count of this Dimension.

        A limit to the number of bins generated. When 0 is specified, the maximum count is not enforced.

        :return: The max_bin_count of this Dimension.
        :rtype: int
        """
        return self._max_bin_count

    @max_bin_count.setter
    def max_bin_count(self, max_bin_count):
        """Sets the max_bin_count of this Dimension.

        A limit to the number of bins generated. When 0 is specified, the maximum count is not enforced.

        :param max_bin_count: The max_bin_count of this Dimension.
        :type max_bin_count: int
        """

        self._max_bin_count = max_bin_count

    @property
    def numeric_bin_size(self):
        """Gets the numeric_bin_size of this Dimension.

        numeric_bin_size is used when the column type used for a dimension is numeric or string.

        :return: The numeric_bin_size of this Dimension.
        :rtype: int
        """
        return self._numeric_bin_size

    @numeric_bin_size.setter
    def numeric_bin_size(self, numeric_bin_size):
        """Sets the numeric_bin_size of this Dimension.

        numeric_bin_size is used when the column type used for a dimension is numeric or string.

        :param numeric_bin_size: The numeric_bin_size of this Dimension.
        :type numeric_bin_size: int
        """

        self._numeric_bin_size = numeric_bin_size

    @property
    def sort_column(self):
        """Gets the sort_column of this Dimension.

        The column name to sort on for binning. This column can be the same column as this dimension or any other column used as a measure in the results. If sort_order is set to NONE, then this value is not used.

        :return: The sort_column of this Dimension.
        :rtype: str
        """
        return self._sort_column

    @sort_column.setter
    def sort_column(self, sort_column):
        """Sets the sort_column of this Dimension.

        The column name to sort on for binning. This column can be the same column as this dimension or any other column used as a measure in the results. If sort_order is set to NONE, then this value is not used.

        :param sort_column: The sort_column of this Dimension.
        :type sort_column: str
        """

        self._sort_column = sort_column

    @property
    def sort_order(self):
        """Gets the sort_order of this Dimension.

        The sort order applied to the sort column.

        :return: The sort_order of this Dimension.
        :rtype: str
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this Dimension.

        The sort order applied to the sort column.

        :param sort_order: The sort_order of this Dimension.
        :type sort_order: str
        """
        allowed_values = ["SORT_ORDER_UNSPECIFIED", "SORT_ORDER_NONE", "SORT_ORDER_ASCENDING", "SORT_ORDER_DESCENDING"]  # noqa: E501
        if sort_order not in allowed_values:
            raise ValueError(
                "Invalid value for `sort_order` ({0}), must be one of {1}"
                .format(sort_order, allowed_values)
            )

        self._sort_order = sort_order

    @property
    def time_bin_size(self):
        """Gets the time_bin_size of this Dimension.

        time_bin_size is used when the data type specified by column is a time type and the bin size is determined by a time duration. If column_type is DATE, this must be a whole value multiple of 1 day. If column_type is TIME, this must be less than or equal to 24 hours.

        :return: The time_bin_size of this Dimension.
        :rtype: str
        """
        return self._time_bin_size

    @time_bin_size.setter
    def time_bin_size(self, time_bin_size):
        """Sets the time_bin_size of this Dimension.

        time_bin_size is used when the data type specified by column is a time type and the bin size is determined by a time duration. If column_type is DATE, this must be a whole value multiple of 1 day. If column_type is TIME, this must be less than or equal to 24 hours.

        :param time_bin_size: The time_bin_size of this Dimension.
        :type time_bin_size: str
        """

        self._time_bin_size = time_bin_size
