# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aggregation import Aggregation
from openapi_server.models.pick_time_series_filter import PickTimeSeriesFilter
from openapi_server.models.ratio_part import RatioPart
from openapi_server.models.statistical_time_series_filter import StatisticalTimeSeriesFilter
from openapi_server import util


class TimeSeriesFilterRatio(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, denominator: RatioPart=None, numerator: RatioPart=None, pick_time_series_filter: PickTimeSeriesFilter=None, secondary_aggregation: Aggregation=None, statistical_time_series_filter: StatisticalTimeSeriesFilter=None):
        """TimeSeriesFilterRatio - a model defined in OpenAPI

        :param denominator: The denominator of this TimeSeriesFilterRatio.
        :param numerator: The numerator of this TimeSeriesFilterRatio.
        :param pick_time_series_filter: The pick_time_series_filter of this TimeSeriesFilterRatio.
        :param secondary_aggregation: The secondary_aggregation of this TimeSeriesFilterRatio.
        :param statistical_time_series_filter: The statistical_time_series_filter of this TimeSeriesFilterRatio.
        """
        self.openapi_types = {
            'denominator': RatioPart,
            'numerator': RatioPart,
            'pick_time_series_filter': PickTimeSeriesFilter,
            'secondary_aggregation': Aggregation,
            'statistical_time_series_filter': StatisticalTimeSeriesFilter
        }

        self.attribute_map = {
            'denominator': 'denominator',
            'numerator': 'numerator',
            'pick_time_series_filter': 'pickTimeSeriesFilter',
            'secondary_aggregation': 'secondaryAggregation',
            'statistical_time_series_filter': 'statisticalTimeSeriesFilter'
        }

        self._denominator = denominator
        self._numerator = numerator
        self._pick_time_series_filter = pick_time_series_filter
        self._secondary_aggregation = secondary_aggregation
        self._statistical_time_series_filter = statistical_time_series_filter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimeSeriesFilterRatio':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimeSeriesFilterRatio of this TimeSeriesFilterRatio.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def denominator(self):
        """Gets the denominator of this TimeSeriesFilterRatio.


        :return: The denominator of this TimeSeriesFilterRatio.
        :rtype: RatioPart
        """
        return self._denominator

    @denominator.setter
    def denominator(self, denominator):
        """Sets the denominator of this TimeSeriesFilterRatio.


        :param denominator: The denominator of this TimeSeriesFilterRatio.
        :type denominator: RatioPart
        """

        self._denominator = denominator

    @property
    def numerator(self):
        """Gets the numerator of this TimeSeriesFilterRatio.


        :return: The numerator of this TimeSeriesFilterRatio.
        :rtype: RatioPart
        """
        return self._numerator

    @numerator.setter
    def numerator(self, numerator):
        """Sets the numerator of this TimeSeriesFilterRatio.


        :param numerator: The numerator of this TimeSeriesFilterRatio.
        :type numerator: RatioPart
        """

        self._numerator = numerator

    @property
    def pick_time_series_filter(self):
        """Gets the pick_time_series_filter of this TimeSeriesFilterRatio.


        :return: The pick_time_series_filter of this TimeSeriesFilterRatio.
        :rtype: PickTimeSeriesFilter
        """
        return self._pick_time_series_filter

    @pick_time_series_filter.setter
    def pick_time_series_filter(self, pick_time_series_filter):
        """Sets the pick_time_series_filter of this TimeSeriesFilterRatio.


        :param pick_time_series_filter: The pick_time_series_filter of this TimeSeriesFilterRatio.
        :type pick_time_series_filter: PickTimeSeriesFilter
        """

        self._pick_time_series_filter = pick_time_series_filter

    @property
    def secondary_aggregation(self):
        """Gets the secondary_aggregation of this TimeSeriesFilterRatio.


        :return: The secondary_aggregation of this TimeSeriesFilterRatio.
        :rtype: Aggregation
        """
        return self._secondary_aggregation

    @secondary_aggregation.setter
    def secondary_aggregation(self, secondary_aggregation):
        """Sets the secondary_aggregation of this TimeSeriesFilterRatio.


        :param secondary_aggregation: The secondary_aggregation of this TimeSeriesFilterRatio.
        :type secondary_aggregation: Aggregation
        """

        self._secondary_aggregation = secondary_aggregation

    @property
    def statistical_time_series_filter(self):
        """Gets the statistical_time_series_filter of this TimeSeriesFilterRatio.


        :return: The statistical_time_series_filter of this TimeSeriesFilterRatio.
        :rtype: StatisticalTimeSeriesFilter
        """
        return self._statistical_time_series_filter

    @statistical_time_series_filter.setter
    def statistical_time_series_filter(self, statistical_time_series_filter):
        """Sets the statistical_time_series_filter of this TimeSeriesFilterRatio.


        :param statistical_time_series_filter: The statistical_time_series_filter of this TimeSeriesFilterRatio.
        :type statistical_time_series_filter: StatisticalTimeSeriesFilter
        """

        self._statistical_time_series_filter = statistical_time_series_filter
