# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pie_chart_data_set import PieChartDataSet
from openapi_server import util


class PieChart(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chart_type: str=None, data_sets: List[PieChartDataSet]=None, show_labels: bool=None):
        """PieChart - a model defined in OpenAPI

        :param chart_type: The chart_type of this PieChart.
        :param data_sets: The data_sets of this PieChart.
        :param show_labels: The show_labels of this PieChart.
        """
        self.openapi_types = {
            'chart_type': str,
            'data_sets': List[PieChartDataSet],
            'show_labels': bool
        }

        self.attribute_map = {
            'chart_type': 'chartType',
            'data_sets': 'dataSets',
            'show_labels': 'showLabels'
        }

        self._chart_type = chart_type
        self._data_sets = data_sets
        self._show_labels = show_labels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PieChart':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PieChart of this PieChart.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chart_type(self):
        """Gets the chart_type of this PieChart.

        Required. Indicates the visualization type for the PieChart.

        :return: The chart_type of this PieChart.
        :rtype: str
        """
        return self._chart_type

    @chart_type.setter
    def chart_type(self, chart_type):
        """Sets the chart_type of this PieChart.

        Required. Indicates the visualization type for the PieChart.

        :param chart_type: The chart_type of this PieChart.
        :type chart_type: str
        """
        allowed_values = ["PIE_CHART_TYPE_UNSPECIFIED", "PIE", "DONUT"]  # noqa: E501
        if chart_type not in allowed_values:
            raise ValueError(
                "Invalid value for `chart_type` ({0}), must be one of {1}"
                .format(chart_type, allowed_values)
            )

        self._chart_type = chart_type

    @property
    def data_sets(self):
        """Gets the data_sets of this PieChart.

        Required. The queries for the chart's data.

        :return: The data_sets of this PieChart.
        :rtype: List[PieChartDataSet]
        """
        return self._data_sets

    @data_sets.setter
    def data_sets(self, data_sets):
        """Sets the data_sets of this PieChart.

        Required. The queries for the chart's data.

        :param data_sets: The data_sets of this PieChart.
        :type data_sets: List[PieChartDataSet]
        """

        self._data_sets = data_sets

    @property
    def show_labels(self):
        """Gets the show_labels of this PieChart.

        Optional. Indicates whether or not the pie chart should show slices' labels

        :return: The show_labels of this PieChart.
        :rtype: bool
        """
        return self._show_labels

    @show_labels.setter
    def show_labels(self, show_labels):
        """Sets the show_labels of this PieChart.

        Optional. Indicates whether or not the pie chart should show slices' labels

        :param show_labels: The show_labels of this PieChart.
        :type show_labels: bool
        """

        self._show_labels = show_labels
