# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SparkChartView(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, min_alignment_period: str=None, spark_chart_type: str=None):
        """SparkChartView - a model defined in OpenAPI

        :param min_alignment_period: The min_alignment_period of this SparkChartView.
        :param spark_chart_type: The spark_chart_type of this SparkChartView.
        """
        self.openapi_types = {
            'min_alignment_period': str,
            'spark_chart_type': str
        }

        self.attribute_map = {
            'min_alignment_period': 'minAlignmentPeriod',
            'spark_chart_type': 'sparkChartType'
        }

        self._min_alignment_period = min_alignment_period
        self._spark_chart_type = spark_chart_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SparkChartView':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SparkChartView of this SparkChartView.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def min_alignment_period(self):
        """Gets the min_alignment_period of this SparkChartView.

        The lower bound on data point frequency in the chart implemented by specifying the minimum alignment period to use in a time series query. For example, if the data is published once every 10 minutes it would not make sense to fetch and align data at one minute intervals. This field is optional and exists only as a hint.

        :return: The min_alignment_period of this SparkChartView.
        :rtype: str
        """
        return self._min_alignment_period

    @min_alignment_period.setter
    def min_alignment_period(self, min_alignment_period):
        """Sets the min_alignment_period of this SparkChartView.

        The lower bound on data point frequency in the chart implemented by specifying the minimum alignment period to use in a time series query. For example, if the data is published once every 10 minutes it would not make sense to fetch and align data at one minute intervals. This field is optional and exists only as a hint.

        :param min_alignment_period: The min_alignment_period of this SparkChartView.
        :type min_alignment_period: str
        """

        self._min_alignment_period = min_alignment_period

    @property
    def spark_chart_type(self):
        """Gets the spark_chart_type of this SparkChartView.

        Required. The type of sparkchart to show in this chartView.

        :return: The spark_chart_type of this SparkChartView.
        :rtype: str
        """
        return self._spark_chart_type

    @spark_chart_type.setter
    def spark_chart_type(self, spark_chart_type):
        """Sets the spark_chart_type of this SparkChartView.

        Required. The type of sparkchart to show in this chartView.

        :param spark_chart_type: The spark_chart_type of this SparkChartView.
        :type spark_chart_type: str
        """
        allowed_values = ["SPARK_CHART_TYPE_UNSPECIFIED", "SPARK_LINE", "SPARK_BAR"]  # noqa: E501
        if spark_chart_type not in allowed_values:
            raise ValueError(
                "Invalid value for `spark_chart_type` ({0}), must be one of {1}"
                .format(spark_chart_type, allowed_values)
            )

        self._spark_chart_type = spark_chart_type
