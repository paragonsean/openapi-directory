# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aggregation import Aggregation
from openapi_server.models.pick_time_series_filter import PickTimeSeriesFilter
from openapi_server.models.statistical_time_series_filter import StatisticalTimeSeriesFilter
from openapi_server import util


class TimeSeriesFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregation: Aggregation=None, filter: str=None, pick_time_series_filter: PickTimeSeriesFilter=None, secondary_aggregation: Aggregation=None, statistical_time_series_filter: StatisticalTimeSeriesFilter=None):
        """TimeSeriesFilter - a model defined in OpenAPI

        :param aggregation: The aggregation of this TimeSeriesFilter.
        :param filter: The filter of this TimeSeriesFilter.
        :param pick_time_series_filter: The pick_time_series_filter of this TimeSeriesFilter.
        :param secondary_aggregation: The secondary_aggregation of this TimeSeriesFilter.
        :param statistical_time_series_filter: The statistical_time_series_filter of this TimeSeriesFilter.
        """
        self.openapi_types = {
            'aggregation': Aggregation,
            'filter': str,
            'pick_time_series_filter': PickTimeSeriesFilter,
            'secondary_aggregation': Aggregation,
            'statistical_time_series_filter': StatisticalTimeSeriesFilter
        }

        self.attribute_map = {
            'aggregation': 'aggregation',
            'filter': 'filter',
            'pick_time_series_filter': 'pickTimeSeriesFilter',
            'secondary_aggregation': 'secondaryAggregation',
            'statistical_time_series_filter': 'statisticalTimeSeriesFilter'
        }

        self._aggregation = aggregation
        self._filter = filter
        self._pick_time_series_filter = pick_time_series_filter
        self._secondary_aggregation = secondary_aggregation
        self._statistical_time_series_filter = statistical_time_series_filter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimeSeriesFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimeSeriesFilter of this TimeSeriesFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregation(self):
        """Gets the aggregation of this TimeSeriesFilter.


        :return: The aggregation of this TimeSeriesFilter.
        :rtype: Aggregation
        """
        return self._aggregation

    @aggregation.setter
    def aggregation(self, aggregation):
        """Sets the aggregation of this TimeSeriesFilter.


        :param aggregation: The aggregation of this TimeSeriesFilter.
        :type aggregation: Aggregation
        """

        self._aggregation = aggregation

    @property
    def filter(self):
        """Gets the filter of this TimeSeriesFilter.

        Required. The monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.

        :return: The filter of this TimeSeriesFilter.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this TimeSeriesFilter.

        Required. The monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.

        :param filter: The filter of this TimeSeriesFilter.
        :type filter: str
        """

        self._filter = filter

    @property
    def pick_time_series_filter(self):
        """Gets the pick_time_series_filter of this TimeSeriesFilter.


        :return: The pick_time_series_filter of this TimeSeriesFilter.
        :rtype: PickTimeSeriesFilter
        """
        return self._pick_time_series_filter

    @pick_time_series_filter.setter
    def pick_time_series_filter(self, pick_time_series_filter):
        """Sets the pick_time_series_filter of this TimeSeriesFilter.


        :param pick_time_series_filter: The pick_time_series_filter of this TimeSeriesFilter.
        :type pick_time_series_filter: PickTimeSeriesFilter
        """

        self._pick_time_series_filter = pick_time_series_filter

    @property
    def secondary_aggregation(self):
        """Gets the secondary_aggregation of this TimeSeriesFilter.


        :return: The secondary_aggregation of this TimeSeriesFilter.
        :rtype: Aggregation
        """
        return self._secondary_aggregation

    @secondary_aggregation.setter
    def secondary_aggregation(self, secondary_aggregation):
        """Sets the secondary_aggregation of this TimeSeriesFilter.


        :param secondary_aggregation: The secondary_aggregation of this TimeSeriesFilter.
        :type secondary_aggregation: Aggregation
        """

        self._secondary_aggregation = secondary_aggregation

    @property
    def statistical_time_series_filter(self):
        """Gets the statistical_time_series_filter of this TimeSeriesFilter.


        :return: The statistical_time_series_filter of this TimeSeriesFilter.
        :rtype: StatisticalTimeSeriesFilter
        """
        return self._statistical_time_series_filter

    @statistical_time_series_filter.setter
    def statistical_time_series_filter(self, statistical_time_series_filter):
        """Sets the statistical_time_series_filter of this TimeSeriesFilter.


        :param statistical_time_series_filter: The statistical_time_series_filter of this TimeSeriesFilter.
        :type statistical_time_series_filter: StatisticalTimeSeriesFilter
        """

        self._statistical_time_series_filter = statistical_time_series_filter
