# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.gauge_view import GaugeView
from openapi_server.models.spark_chart_view import SparkChartView
from openapi_server.models.threshold import Threshold
from openapi_server.models.time_series_query import TimeSeriesQuery
from openapi_server import util


class Scorecard(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blank_view: object=None, gauge_view: GaugeView=None, spark_chart_view: SparkChartView=None, thresholds: List[Threshold]=None, time_series_query: TimeSeriesQuery=None):
        """Scorecard - a model defined in OpenAPI

        :param blank_view: The blank_view of this Scorecard.
        :param gauge_view: The gauge_view of this Scorecard.
        :param spark_chart_view: The spark_chart_view of this Scorecard.
        :param thresholds: The thresholds of this Scorecard.
        :param time_series_query: The time_series_query of this Scorecard.
        """
        self.openapi_types = {
            'blank_view': object,
            'gauge_view': GaugeView,
            'spark_chart_view': SparkChartView,
            'thresholds': List[Threshold],
            'time_series_query': TimeSeriesQuery
        }

        self.attribute_map = {
            'blank_view': 'blankView',
            'gauge_view': 'gaugeView',
            'spark_chart_view': 'sparkChartView',
            'thresholds': 'thresholds',
            'time_series_query': 'timeSeriesQuery'
        }

        self._blank_view = blank_view
        self._gauge_view = gauge_view
        self._spark_chart_view = spark_chart_view
        self._thresholds = thresholds
        self._time_series_query = time_series_query

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Scorecard':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Scorecard of this Scorecard.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blank_view(self):
        """Gets the blank_view of this Scorecard.

        A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } 

        :return: The blank_view of this Scorecard.
        :rtype: object
        """
        return self._blank_view

    @blank_view.setter
    def blank_view(self, blank_view):
        """Sets the blank_view of this Scorecard.

        A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } 

        :param blank_view: The blank_view of this Scorecard.
        :type blank_view: object
        """

        self._blank_view = blank_view

    @property
    def gauge_view(self):
        """Gets the gauge_view of this Scorecard.


        :return: The gauge_view of this Scorecard.
        :rtype: GaugeView
        """
        return self._gauge_view

    @gauge_view.setter
    def gauge_view(self, gauge_view):
        """Sets the gauge_view of this Scorecard.


        :param gauge_view: The gauge_view of this Scorecard.
        :type gauge_view: GaugeView
        """

        self._gauge_view = gauge_view

    @property
    def spark_chart_view(self):
        """Gets the spark_chart_view of this Scorecard.


        :return: The spark_chart_view of this Scorecard.
        :rtype: SparkChartView
        """
        return self._spark_chart_view

    @spark_chart_view.setter
    def spark_chart_view(self, spark_chart_view):
        """Sets the spark_chart_view of this Scorecard.


        :param spark_chart_view: The spark_chart_view of this Scorecard.
        :type spark_chart_view: SparkChartView
        """

        self._spark_chart_view = spark_chart_view

    @property
    def thresholds(self):
        """Gets the thresholds of this Scorecard.

        The thresholds used to determine the state of the scorecard given the time series' current value. For an actual value x, the scorecard is in a danger state if x is less than or equal to a danger threshold that triggers below, or greater than or equal to a danger threshold that triggers above. Similarly, if x is above/below a warning threshold that triggers above/below, then the scorecard is in a warning state - unless x also puts it in a danger state. (Danger trumps warning.)As an example, consider a scorecard with the following four thresholds: { value: 90, category: 'DANGER', trigger: 'ABOVE', }, { value: 70, category: 'WARNING', trigger: 'ABOVE', }, { value: 10, category: 'DANGER', trigger: 'BELOW', }, { value: 20, category: 'WARNING', trigger: 'BELOW', } Then: values less than or equal to 10 would put the scorecard in a DANGER state, values greater than 10 but less than or equal to 20 a WARNING state, values strictly between 20 and 70 an OK state, values greater than or equal to 70 but less than 90 a WARNING state, and values greater than or equal to 90 a DANGER state.

        :return: The thresholds of this Scorecard.
        :rtype: List[Threshold]
        """
        return self._thresholds

    @thresholds.setter
    def thresholds(self, thresholds):
        """Sets the thresholds of this Scorecard.

        The thresholds used to determine the state of the scorecard given the time series' current value. For an actual value x, the scorecard is in a danger state if x is less than or equal to a danger threshold that triggers below, or greater than or equal to a danger threshold that triggers above. Similarly, if x is above/below a warning threshold that triggers above/below, then the scorecard is in a warning state - unless x also puts it in a danger state. (Danger trumps warning.)As an example, consider a scorecard with the following four thresholds: { value: 90, category: 'DANGER', trigger: 'ABOVE', }, { value: 70, category: 'WARNING', trigger: 'ABOVE', }, { value: 10, category: 'DANGER', trigger: 'BELOW', }, { value: 20, category: 'WARNING', trigger: 'BELOW', } Then: values less than or equal to 10 would put the scorecard in a DANGER state, values greater than 10 but less than or equal to 20 a WARNING state, values strictly between 20 and 70 an OK state, values greater than or equal to 70 but less than 90 a WARNING state, and values greater than or equal to 90 a DANGER state.

        :param thresholds: The thresholds of this Scorecard.
        :type thresholds: List[Threshold]
        """

        self._thresholds = thresholds

    @property
    def time_series_query(self):
        """Gets the time_series_query of this Scorecard.


        :return: The time_series_query of this Scorecard.
        :rtype: TimeSeriesQuery
        """
        return self._time_series_query

    @time_series_query.setter
    def time_series_query(self, time_series_query):
        """Sets the time_series_query of this Scorecard.


        :param time_series_query: The time_series_query of this Scorecard.
        :type time_series_query: TimeSeriesQuery
        """

        self._time_series_query = time_series_query
