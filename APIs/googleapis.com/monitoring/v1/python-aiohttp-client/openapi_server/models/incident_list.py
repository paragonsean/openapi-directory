# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.monitored_resource import MonitoredResource
from openapi_server import util


class IncidentList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, monitored_resources: List[MonitoredResource]=None, policy_names: List[str]=None):
        """IncidentList - a model defined in OpenAPI

        :param monitored_resources: The monitored_resources of this IncidentList.
        :param policy_names: The policy_names of this IncidentList.
        """
        self.openapi_types = {
            'monitored_resources': List[MonitoredResource],
            'policy_names': List[str]
        }

        self.attribute_map = {
            'monitored_resources': 'monitoredResources',
            'policy_names': 'policyNames'
        }

        self._monitored_resources = monitored_resources
        self._policy_names = policy_names

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IncidentList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IncidentList of this IncidentList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def monitored_resources(self):
        """Gets the monitored_resources of this IncidentList.

        Optional. The monitored resource for which incidents are listed. The resource doesn't need to be fully specified. That is, you can specify the resource type but not the values of the resource labels. The resource type and labels are used for filtering.

        :return: The monitored_resources of this IncidentList.
        :rtype: List[MonitoredResource]
        """
        return self._monitored_resources

    @monitored_resources.setter
    def monitored_resources(self, monitored_resources):
        """Sets the monitored_resources of this IncidentList.

        Optional. The monitored resource for which incidents are listed. The resource doesn't need to be fully specified. That is, you can specify the resource type but not the values of the resource labels. The resource type and labels are used for filtering.

        :param monitored_resources: The monitored_resources of this IncidentList.
        :type monitored_resources: List[MonitoredResource]
        """

        self._monitored_resources = monitored_resources

    @property
    def policy_names(self):
        """Gets the policy_names of this IncidentList.

        Optional. A list of alert policy names to filter the incident list by. Don't include the project ID prefix in the policy name. For example, use alertPolicies/utilization.

        :return: The policy_names of this IncidentList.
        :rtype: List[str]
        """
        return self._policy_names

    @policy_names.setter
    def policy_names(self, policy_names):
        """Sets the policy_names of this IncidentList.

        Optional. A list of alert policy names to filter the incident list by. Don't include the project ID prefix in the policy name. For example, use alertPolicies/utilization.

        :param policy_names: The policy_names of this IncidentList.
        :type policy_names: List[str]
        """

        self._policy_names = policy_names
