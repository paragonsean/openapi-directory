# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StatisticalTimeSeriesFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, num_time_series: int=None, ranking_method: str=None):
        """StatisticalTimeSeriesFilter - a model defined in OpenAPI

        :param num_time_series: The num_time_series of this StatisticalTimeSeriesFilter.
        :param ranking_method: The ranking_method of this StatisticalTimeSeriesFilter.
        """
        self.openapi_types = {
            'num_time_series': int,
            'ranking_method': str
        }

        self.attribute_map = {
            'num_time_series': 'numTimeSeries',
            'ranking_method': 'rankingMethod'
        }

        self._num_time_series = num_time_series
        self._ranking_method = ranking_method

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StatisticalTimeSeriesFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StatisticalTimeSeriesFilter of this StatisticalTimeSeriesFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def num_time_series(self):
        """Gets the num_time_series of this StatisticalTimeSeriesFilter.

        How many time series to output.

        :return: The num_time_series of this StatisticalTimeSeriesFilter.
        :rtype: int
        """
        return self._num_time_series

    @num_time_series.setter
    def num_time_series(self, num_time_series):
        """Sets the num_time_series of this StatisticalTimeSeriesFilter.

        How many time series to output.

        :param num_time_series: The num_time_series of this StatisticalTimeSeriesFilter.
        :type num_time_series: int
        """

        self._num_time_series = num_time_series

    @property
    def ranking_method(self):
        """Gets the ranking_method of this StatisticalTimeSeriesFilter.

        rankingMethod is applied to a set of time series, and then the produced value for each individual time series is used to compare a given time series to others. These are methods that cannot be applied stream-by-stream, but rather require the full context of a request to evaluate time series.

        :return: The ranking_method of this StatisticalTimeSeriesFilter.
        :rtype: str
        """
        return self._ranking_method

    @ranking_method.setter
    def ranking_method(self, ranking_method):
        """Sets the ranking_method of this StatisticalTimeSeriesFilter.

        rankingMethod is applied to a set of time series, and then the produced value for each individual time series is used to compare a given time series to others. These are methods that cannot be applied stream-by-stream, but rather require the full context of a request to evaluate time series.

        :param ranking_method: The ranking_method of this StatisticalTimeSeriesFilter.
        :type ranking_method: str
        """
        allowed_values = ["METHOD_UNSPECIFIED", "METHOD_CLUSTER_OUTLIER"]  # noqa: E501
        if ranking_method not in allowed_values:
            raise ValueError(
                "Invalid value for `ranking_method` ({0}), must be one of {1}"
                .format(ranking_method, allowed_values)
            )

        self._ranking_method = ranking_method
