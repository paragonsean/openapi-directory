# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.widget import Widget
from openapi_server import util


class Row(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, weight: str=None, widgets: List[Widget]=None):
        """Row - a model defined in OpenAPI

        :param weight: The weight of this Row.
        :param widgets: The widgets of this Row.
        """
        self.openapi_types = {
            'weight': str,
            'widgets': List[Widget]
        }

        self.attribute_map = {
            'weight': 'weight',
            'widgets': 'widgets'
        }

        self._weight = weight
        self._widgets = widgets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Row':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Row of this Row.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def weight(self):
        """Gets the weight of this Row.

        The relative weight of this row. The row weight is used to adjust the height of rows on the screen (relative to peers). Greater the weight, greater the height of the row on the screen. If omitted, a value of 1 is used while rendering.

        :return: The weight of this Row.
        :rtype: str
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this Row.

        The relative weight of this row. The row weight is used to adjust the height of rows on the screen (relative to peers). Greater the weight, greater the height of the row on the screen. If omitted, a value of 1 is used while rendering.

        :param weight: The weight of this Row.
        :type weight: str
        """

        self._weight = weight

    @property
    def widgets(self):
        """Gets the widgets of this Row.

        The display widgets arranged horizontally in this row.

        :return: The widgets of this Row.
        :rtype: List[Widget]
        """
        return self._widgets

    @widgets.setter
    def widgets(self, widgets):
        """Sets the widgets of this Row.

        The display widgets arranged horizontally in this row.

        :param widgets: The widgets of this Row.
        :type widgets: List[Widget]
        """

        self._widgets = widgets
