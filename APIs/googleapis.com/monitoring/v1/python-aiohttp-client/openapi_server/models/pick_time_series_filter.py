# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.interval import Interval
from openapi_server import util


class PickTimeSeriesFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, direction: str=None, interval: Interval=None, num_time_series: int=None, ranking_method: str=None):
        """PickTimeSeriesFilter - a model defined in OpenAPI

        :param direction: The direction of this PickTimeSeriesFilter.
        :param interval: The interval of this PickTimeSeriesFilter.
        :param num_time_series: The num_time_series of this PickTimeSeriesFilter.
        :param ranking_method: The ranking_method of this PickTimeSeriesFilter.
        """
        self.openapi_types = {
            'direction': str,
            'interval': Interval,
            'num_time_series': int,
            'ranking_method': str
        }

        self.attribute_map = {
            'direction': 'direction',
            'interval': 'interval',
            'num_time_series': 'numTimeSeries',
            'ranking_method': 'rankingMethod'
        }

        self._direction = direction
        self._interval = interval
        self._num_time_series = num_time_series
        self._ranking_method = ranking_method

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PickTimeSeriesFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PickTimeSeriesFilter of this PickTimeSeriesFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def direction(self):
        """Gets the direction of this PickTimeSeriesFilter.

        How to use the ranking to select time series that pass through the filter.

        :return: The direction of this PickTimeSeriesFilter.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this PickTimeSeriesFilter.

        How to use the ranking to select time series that pass through the filter.

        :param direction: The direction of this PickTimeSeriesFilter.
        :type direction: str
        """
        allowed_values = ["DIRECTION_UNSPECIFIED", "TOP", "BOTTOM"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def interval(self):
        """Gets the interval of this PickTimeSeriesFilter.


        :return: The interval of this PickTimeSeriesFilter.
        :rtype: Interval
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this PickTimeSeriesFilter.


        :param interval: The interval of this PickTimeSeriesFilter.
        :type interval: Interval
        """

        self._interval = interval

    @property
    def num_time_series(self):
        """Gets the num_time_series of this PickTimeSeriesFilter.

        How many time series to allow to pass through the filter.

        :return: The num_time_series of this PickTimeSeriesFilter.
        :rtype: int
        """
        return self._num_time_series

    @num_time_series.setter
    def num_time_series(self, num_time_series):
        """Sets the num_time_series of this PickTimeSeriesFilter.

        How many time series to allow to pass through the filter.

        :param num_time_series: The num_time_series of this PickTimeSeriesFilter.
        :type num_time_series: int
        """

        self._num_time_series = num_time_series

    @property
    def ranking_method(self):
        """Gets the ranking_method of this PickTimeSeriesFilter.

        ranking_method is applied to each time series independently to produce the value which will be used to compare the time series to other time series.

        :return: The ranking_method of this PickTimeSeriesFilter.
        :rtype: str
        """
        return self._ranking_method

    @ranking_method.setter
    def ranking_method(self, ranking_method):
        """Sets the ranking_method of this PickTimeSeriesFilter.

        ranking_method is applied to each time series independently to produce the value which will be used to compare the time series to other time series.

        :param ranking_method: The ranking_method of this PickTimeSeriesFilter.
        :type ranking_method: str
        """
        allowed_values = ["METHOD_UNSPECIFIED", "METHOD_MEAN", "METHOD_MAX", "METHOD_MIN", "METHOD_SUM", "METHOD_LATEST"]  # noqa: E501
        if ranking_method not in allowed_values:
            raise ValueError(
                "Invalid value for `ranking_method` ({0}), must be one of {1}"
                .format(ranking_method, allowed_values)
            )

        self._ranking_method = ranking_method
