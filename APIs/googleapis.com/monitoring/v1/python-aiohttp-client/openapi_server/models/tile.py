# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.widget import Widget
from openapi_server import util


class Tile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, height: int=None, widget: Widget=None, width: int=None, x_pos: int=None, y_pos: int=None):
        """Tile - a model defined in OpenAPI

        :param height: The height of this Tile.
        :param widget: The widget of this Tile.
        :param width: The width of this Tile.
        :param x_pos: The x_pos of this Tile.
        :param y_pos: The y_pos of this Tile.
        """
        self.openapi_types = {
            'height': int,
            'widget': Widget,
            'width': int,
            'x_pos': int,
            'y_pos': int
        }

        self.attribute_map = {
            'height': 'height',
            'widget': 'widget',
            'width': 'width',
            'x_pos': 'xPos',
            'y_pos': 'yPos'
        }

        self._height = height
        self._widget = widget
        self._width = width
        self._x_pos = x_pos
        self._y_pos = y_pos

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Tile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Tile of this Tile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def height(self):
        """Gets the height of this Tile.

        The height of the tile, measured in grid blocks. Tiles must have a minimum height of 1.

        :return: The height of this Tile.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Tile.

        The height of the tile, measured in grid blocks. Tiles must have a minimum height of 1.

        :param height: The height of this Tile.
        :type height: int
        """

        self._height = height

    @property
    def widget(self):
        """Gets the widget of this Tile.


        :return: The widget of this Tile.
        :rtype: Widget
        """
        return self._widget

    @widget.setter
    def widget(self, widget):
        """Sets the widget of this Tile.


        :param widget: The widget of this Tile.
        :type widget: Widget
        """

        self._widget = widget

    @property
    def width(self):
        """Gets the width of this Tile.

        The width of the tile, measured in grid blocks. Tiles must have a minimum width of 1.

        :return: The width of this Tile.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Tile.

        The width of the tile, measured in grid blocks. Tiles must have a minimum width of 1.

        :param width: The width of this Tile.
        :type width: int
        """

        self._width = width

    @property
    def x_pos(self):
        """Gets the x_pos of this Tile.

        The zero-indexed position of the tile in grid blocks relative to the left edge of the grid. Tiles must be contained within the specified number of columns. x_pos cannot be negative.

        :return: The x_pos of this Tile.
        :rtype: int
        """
        return self._x_pos

    @x_pos.setter
    def x_pos(self, x_pos):
        """Sets the x_pos of this Tile.

        The zero-indexed position of the tile in grid blocks relative to the left edge of the grid. Tiles must be contained within the specified number of columns. x_pos cannot be negative.

        :param x_pos: The x_pos of this Tile.
        :type x_pos: int
        """

        self._x_pos = x_pos

    @property
    def y_pos(self):
        """Gets the y_pos of this Tile.

        The zero-indexed position of the tile in grid blocks relative to the top edge of the grid. y_pos cannot be negative.

        :return: The y_pos of this Tile.
        :rtype: int
        """
        return self._y_pos

    @y_pos.setter
    def y_pos(self, y_pos):
        """Sets the y_pos of this Tile.

        The zero-indexed position of the tile in grid blocks relative to the top edge of the grid. y_pos cannot be negative.

        :param y_pos: The y_pos of this Tile.
        :type y_pos: int
        """

        self._y_pos = y_pos
