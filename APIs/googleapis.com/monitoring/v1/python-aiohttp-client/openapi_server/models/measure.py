# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aggregation_function import AggregationFunction
from openapi_server import util


class Measure(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregation_function: AggregationFunction=None, column: str=None):
        """Measure - a model defined in OpenAPI

        :param aggregation_function: The aggregation_function of this Measure.
        :param column: The column of this Measure.
        """
        self.openapi_types = {
            'aggregation_function': AggregationFunction,
            'column': str
        }

        self.attribute_map = {
            'aggregation_function': 'aggregationFunction',
            'column': 'column'
        }

        self._aggregation_function = aggregation_function
        self._column = column

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Measure':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Measure of this Measure.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregation_function(self):
        """Gets the aggregation_function of this Measure.


        :return: The aggregation_function of this Measure.
        :rtype: AggregationFunction
        """
        return self._aggregation_function

    @aggregation_function.setter
    def aggregation_function(self, aggregation_function):
        """Sets the aggregation_function of this Measure.


        :param aggregation_function: The aggregation_function of this Measure.
        :type aggregation_function: AggregationFunction
        """

        self._aggregation_function = aggregation_function

    @property
    def column(self):
        """Gets the column of this Measure.

        Required. The column name within in the dataset used for the measure.

        :return: The column of this Measure.
        :rtype: str
        """
        return self._column

    @column.setter
    def column(self, column):
        """Sets the column of this Measure.

        Required. The column name within in the dataset used for the measure.

        :param column: The column of this Measure.
        :type column: str
        """

        self._column = column
