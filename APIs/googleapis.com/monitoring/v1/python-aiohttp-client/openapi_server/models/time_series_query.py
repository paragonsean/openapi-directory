# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ops_analytics_query import OpsAnalyticsQuery
from openapi_server.models.time_series_filter import TimeSeriesFilter
from openapi_server.models.time_series_filter_ratio import TimeSeriesFilterRatio
from openapi_server import util


class TimeSeriesQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ops_analytics_query: OpsAnalyticsQuery=None, output_full_duration: bool=None, prometheus_query: str=None, time_series_filter: TimeSeriesFilter=None, time_series_filter_ratio: TimeSeriesFilterRatio=None, time_series_query_language: str=None, unit_override: str=None):
        """TimeSeriesQuery - a model defined in OpenAPI

        :param ops_analytics_query: The ops_analytics_query of this TimeSeriesQuery.
        :param output_full_duration: The output_full_duration of this TimeSeriesQuery.
        :param prometheus_query: The prometheus_query of this TimeSeriesQuery.
        :param time_series_filter: The time_series_filter of this TimeSeriesQuery.
        :param time_series_filter_ratio: The time_series_filter_ratio of this TimeSeriesQuery.
        :param time_series_query_language: The time_series_query_language of this TimeSeriesQuery.
        :param unit_override: The unit_override of this TimeSeriesQuery.
        """
        self.openapi_types = {
            'ops_analytics_query': OpsAnalyticsQuery,
            'output_full_duration': bool,
            'prometheus_query': str,
            'time_series_filter': TimeSeriesFilter,
            'time_series_filter_ratio': TimeSeriesFilterRatio,
            'time_series_query_language': str,
            'unit_override': str
        }

        self.attribute_map = {
            'ops_analytics_query': 'opsAnalyticsQuery',
            'output_full_duration': 'outputFullDuration',
            'prometheus_query': 'prometheusQuery',
            'time_series_filter': 'timeSeriesFilter',
            'time_series_filter_ratio': 'timeSeriesFilterRatio',
            'time_series_query_language': 'timeSeriesQueryLanguage',
            'unit_override': 'unitOverride'
        }

        self._ops_analytics_query = ops_analytics_query
        self._output_full_duration = output_full_duration
        self._prometheus_query = prometheus_query
        self._time_series_filter = time_series_filter
        self._time_series_filter_ratio = time_series_filter_ratio
        self._time_series_query_language = time_series_query_language
        self._unit_override = unit_override

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimeSeriesQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimeSeriesQuery of this TimeSeriesQuery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ops_analytics_query(self):
        """Gets the ops_analytics_query of this TimeSeriesQuery.


        :return: The ops_analytics_query of this TimeSeriesQuery.
        :rtype: OpsAnalyticsQuery
        """
        return self._ops_analytics_query

    @ops_analytics_query.setter
    def ops_analytics_query(self, ops_analytics_query):
        """Sets the ops_analytics_query of this TimeSeriesQuery.


        :param ops_analytics_query: The ops_analytics_query of this TimeSeriesQuery.
        :type ops_analytics_query: OpsAnalyticsQuery
        """

        self._ops_analytics_query = ops_analytics_query

    @property
    def output_full_duration(self):
        """Gets the output_full_duration of this TimeSeriesQuery.

        Optional. If set, Cloud Monitoring will treat the full query duration as the alignment period so that there will be only 1 output value.*Note: This could override the configured alignment period except for the cases where a series of data points are expected, like - XyChart - Scorecard's spark chart

        :return: The output_full_duration of this TimeSeriesQuery.
        :rtype: bool
        """
        return self._output_full_duration

    @output_full_duration.setter
    def output_full_duration(self, output_full_duration):
        """Sets the output_full_duration of this TimeSeriesQuery.

        Optional. If set, Cloud Monitoring will treat the full query duration as the alignment period so that there will be only 1 output value.*Note: This could override the configured alignment period except for the cases where a series of data points are expected, like - XyChart - Scorecard's spark chart

        :param output_full_duration: The output_full_duration of this TimeSeriesQuery.
        :type output_full_duration: bool
        """

        self._output_full_duration = output_full_duration

    @property
    def prometheus_query(self):
        """Gets the prometheus_query of this TimeSeriesQuery.

        A query used to fetch time series with PromQL.

        :return: The prometheus_query of this TimeSeriesQuery.
        :rtype: str
        """
        return self._prometheus_query

    @prometheus_query.setter
    def prometheus_query(self, prometheus_query):
        """Sets the prometheus_query of this TimeSeriesQuery.

        A query used to fetch time series with PromQL.

        :param prometheus_query: The prometheus_query of this TimeSeriesQuery.
        :type prometheus_query: str
        """

        self._prometheus_query = prometheus_query

    @property
    def time_series_filter(self):
        """Gets the time_series_filter of this TimeSeriesQuery.


        :return: The time_series_filter of this TimeSeriesQuery.
        :rtype: TimeSeriesFilter
        """
        return self._time_series_filter

    @time_series_filter.setter
    def time_series_filter(self, time_series_filter):
        """Sets the time_series_filter of this TimeSeriesQuery.


        :param time_series_filter: The time_series_filter of this TimeSeriesQuery.
        :type time_series_filter: TimeSeriesFilter
        """

        self._time_series_filter = time_series_filter

    @property
    def time_series_filter_ratio(self):
        """Gets the time_series_filter_ratio of this TimeSeriesQuery.


        :return: The time_series_filter_ratio of this TimeSeriesQuery.
        :rtype: TimeSeriesFilterRatio
        """
        return self._time_series_filter_ratio

    @time_series_filter_ratio.setter
    def time_series_filter_ratio(self, time_series_filter_ratio):
        """Sets the time_series_filter_ratio of this TimeSeriesQuery.


        :param time_series_filter_ratio: The time_series_filter_ratio of this TimeSeriesQuery.
        :type time_series_filter_ratio: TimeSeriesFilterRatio
        """

        self._time_series_filter_ratio = time_series_filter_ratio

    @property
    def time_series_query_language(self):
        """Gets the time_series_query_language of this TimeSeriesQuery.

        A query used to fetch time series with MQL.

        :return: The time_series_query_language of this TimeSeriesQuery.
        :rtype: str
        """
        return self._time_series_query_language

    @time_series_query_language.setter
    def time_series_query_language(self, time_series_query_language):
        """Sets the time_series_query_language of this TimeSeriesQuery.

        A query used to fetch time series with MQL.

        :param time_series_query_language: The time_series_query_language of this TimeSeriesQuery.
        :type time_series_query_language: str
        """

        self._time_series_query_language = time_series_query_language

    @property
    def unit_override(self):
        """Gets the unit_override of this TimeSeriesQuery.

        The unit of data contained in fetched time series. If non-empty, this unit will override any unit that accompanies fetched data. The format is the same as the unit (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors) field in MetricDescriptor.

        :return: The unit_override of this TimeSeriesQuery.
        :rtype: str
        """
        return self._unit_override

    @unit_override.setter
    def unit_override(self, unit_override):
        """Sets the unit_override of this TimeSeriesQuery.

        The unit of data contained in fetched time series. If non-empty, this unit will override any unit that accompanies fetched data. The format is the same as the unit (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors) field in MetricDescriptor.

        :param unit_override: The unit_override of this TimeSeriesQuery.
        :type unit_override: str
        """

        self._unit_override = unit_override
