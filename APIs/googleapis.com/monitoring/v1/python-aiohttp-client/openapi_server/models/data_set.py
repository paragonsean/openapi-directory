# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.breakdown import Breakdown
from openapi_server.models.dimension import Dimension
from openapi_server.models.measure import Measure
from openapi_server.models.time_series_query import TimeSeriesQuery
from openapi_server import util


class DataSet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, breakdowns: List[Breakdown]=None, dimensions: List[Dimension]=None, legend_template: str=None, measures: List[Measure]=None, min_alignment_period: str=None, plot_type: str=None, target_axis: str=None, time_series_query: TimeSeriesQuery=None):
        """DataSet - a model defined in OpenAPI

        :param breakdowns: The breakdowns of this DataSet.
        :param dimensions: The dimensions of this DataSet.
        :param legend_template: The legend_template of this DataSet.
        :param measures: The measures of this DataSet.
        :param min_alignment_period: The min_alignment_period of this DataSet.
        :param plot_type: The plot_type of this DataSet.
        :param target_axis: The target_axis of this DataSet.
        :param time_series_query: The time_series_query of this DataSet.
        """
        self.openapi_types = {
            'breakdowns': List[Breakdown],
            'dimensions': List[Dimension],
            'legend_template': str,
            'measures': List[Measure],
            'min_alignment_period': str,
            'plot_type': str,
            'target_axis': str,
            'time_series_query': TimeSeriesQuery
        }

        self.attribute_map = {
            'breakdowns': 'breakdowns',
            'dimensions': 'dimensions',
            'legend_template': 'legendTemplate',
            'measures': 'measures',
            'min_alignment_period': 'minAlignmentPeriod',
            'plot_type': 'plotType',
            'target_axis': 'targetAxis',
            'time_series_query': 'timeSeriesQuery'
        }

        self._breakdowns = breakdowns
        self._dimensions = dimensions
        self._legend_template = legend_template
        self._measures = measures
        self._min_alignment_period = min_alignment_period
        self._plot_type = plot_type
        self._target_axis = target_axis
        self._time_series_query = time_series_query

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataSet of this DataSet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def breakdowns(self):
        """Gets the breakdowns of this DataSet.

        Optional. The collection of breakdowns to be applied to the dataset.

        :return: The breakdowns of this DataSet.
        :rtype: List[Breakdown]
        """
        return self._breakdowns

    @breakdowns.setter
    def breakdowns(self, breakdowns):
        """Sets the breakdowns of this DataSet.

        Optional. The collection of breakdowns to be applied to the dataset.

        :param breakdowns: The breakdowns of this DataSet.
        :type breakdowns: List[Breakdown]
        """

        self._breakdowns = breakdowns

    @property
    def dimensions(self):
        """Gets the dimensions of this DataSet.

        Optional. A collection of dimension columns.

        :return: The dimensions of this DataSet.
        :rtype: List[Dimension]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this DataSet.

        Optional. A collection of dimension columns.

        :param dimensions: The dimensions of this DataSet.
        :type dimensions: List[Dimension]
        """

        self._dimensions = dimensions

    @property
    def legend_template(self):
        """Gets the legend_template of this DataSet.

        A template string for naming TimeSeries in the resulting data set. This should be a string with interpolations of the form ${label_name}, which will resolve to the label's value.

        :return: The legend_template of this DataSet.
        :rtype: str
        """
        return self._legend_template

    @legend_template.setter
    def legend_template(self, legend_template):
        """Sets the legend_template of this DataSet.

        A template string for naming TimeSeries in the resulting data set. This should be a string with interpolations of the form ${label_name}, which will resolve to the label's value.

        :param legend_template: The legend_template of this DataSet.
        :type legend_template: str
        """

        self._legend_template = legend_template

    @property
    def measures(self):
        """Gets the measures of this DataSet.

        Optional. A collection of measures.

        :return: The measures of this DataSet.
        :rtype: List[Measure]
        """
        return self._measures

    @measures.setter
    def measures(self, measures):
        """Sets the measures of this DataSet.

        Optional. A collection of measures.

        :param measures: The measures of this DataSet.
        :type measures: List[Measure]
        """

        self._measures = measures

    @property
    def min_alignment_period(self):
        """Gets the min_alignment_period of this DataSet.

        Optional. The lower bound on data point frequency for this data set, implemented by specifying the minimum alignment period to use in a time series query For example, if the data is published once every 10 minutes, the min_alignment_period should be at least 10 minutes. It would not make sense to fetch and align data at one minute intervals.

        :return: The min_alignment_period of this DataSet.
        :rtype: str
        """
        return self._min_alignment_period

    @min_alignment_period.setter
    def min_alignment_period(self, min_alignment_period):
        """Sets the min_alignment_period of this DataSet.

        Optional. The lower bound on data point frequency for this data set, implemented by specifying the minimum alignment period to use in a time series query For example, if the data is published once every 10 minutes, the min_alignment_period should be at least 10 minutes. It would not make sense to fetch and align data at one minute intervals.

        :param min_alignment_period: The min_alignment_period of this DataSet.
        :type min_alignment_period: str
        """

        self._min_alignment_period = min_alignment_period

    @property
    def plot_type(self):
        """Gets the plot_type of this DataSet.

        How this data should be plotted on the chart.

        :return: The plot_type of this DataSet.
        :rtype: str
        """
        return self._plot_type

    @plot_type.setter
    def plot_type(self, plot_type):
        """Sets the plot_type of this DataSet.

        How this data should be plotted on the chart.

        :param plot_type: The plot_type of this DataSet.
        :type plot_type: str
        """
        allowed_values = ["PLOT_TYPE_UNSPECIFIED", "LINE", "STACKED_AREA", "STACKED_BAR", "HEATMAP"]  # noqa: E501
        if plot_type not in allowed_values:
            raise ValueError(
                "Invalid value for `plot_type` ({0}), must be one of {1}"
                .format(plot_type, allowed_values)
            )

        self._plot_type = plot_type

    @property
    def target_axis(self):
        """Gets the target_axis of this DataSet.

        Optional. The target axis to use for plotting the metric.

        :return: The target_axis of this DataSet.
        :rtype: str
        """
        return self._target_axis

    @target_axis.setter
    def target_axis(self, target_axis):
        """Sets the target_axis of this DataSet.

        Optional. The target axis to use for plotting the metric.

        :param target_axis: The target_axis of this DataSet.
        :type target_axis: str
        """
        allowed_values = ["TARGET_AXIS_UNSPECIFIED", "Y1", "Y2"]  # noqa: E501
        if target_axis not in allowed_values:
            raise ValueError(
                "Invalid value for `target_axis` ({0}), must be one of {1}"
                .format(target_axis, allowed_values)
            )

        self._target_axis = target_axis

    @property
    def time_series_query(self):
        """Gets the time_series_query of this DataSet.


        :return: The time_series_query of this DataSet.
        :rtype: TimeSeriesQuery
        """
        return self._time_series_query

    @time_series_query.setter
    def time_series_query(self, time_series_query):
        """Sets the time_series_query of this DataSet.


        :param time_series_query: The time_series_query of this DataSet.
        :type time_series_query: TimeSeriesQuery
        """

        self._time_series_query = time_series_query
