# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.table_display_options import TableDisplayOptions
from openapi_server.models.time_series_query import TimeSeriesQuery
from openapi_server import util


class TableDataSet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, min_alignment_period: str=None, table_display_options: TableDisplayOptions=None, table_template: str=None, time_series_query: TimeSeriesQuery=None):
        """TableDataSet - a model defined in OpenAPI

        :param min_alignment_period: The min_alignment_period of this TableDataSet.
        :param table_display_options: The table_display_options of this TableDataSet.
        :param table_template: The table_template of this TableDataSet.
        :param time_series_query: The time_series_query of this TableDataSet.
        """
        self.openapi_types = {
            'min_alignment_period': str,
            'table_display_options': TableDisplayOptions,
            'table_template': str,
            'time_series_query': TimeSeriesQuery
        }

        self.attribute_map = {
            'min_alignment_period': 'minAlignmentPeriod',
            'table_display_options': 'tableDisplayOptions',
            'table_template': 'tableTemplate',
            'time_series_query': 'timeSeriesQuery'
        }

        self._min_alignment_period = min_alignment_period
        self._table_display_options = table_display_options
        self._table_template = table_template
        self._time_series_query = time_series_query

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TableDataSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TableDataSet of this TableDataSet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def min_alignment_period(self):
        """Gets the min_alignment_period of this TableDataSet.

        Optional. The lower bound on data point frequency for this data set, implemented by specifying the minimum alignment period to use in a time series query For example, if the data is published once every 10 minutes, the min_alignment_period should be at least 10 minutes. It would not make sense to fetch and align data at one minute intervals.

        :return: The min_alignment_period of this TableDataSet.
        :rtype: str
        """
        return self._min_alignment_period

    @min_alignment_period.setter
    def min_alignment_period(self, min_alignment_period):
        """Sets the min_alignment_period of this TableDataSet.

        Optional. The lower bound on data point frequency for this data set, implemented by specifying the minimum alignment period to use in a time series query For example, if the data is published once every 10 minutes, the min_alignment_period should be at least 10 minutes. It would not make sense to fetch and align data at one minute intervals.

        :param min_alignment_period: The min_alignment_period of this TableDataSet.
        :type min_alignment_period: str
        """

        self._min_alignment_period = min_alignment_period

    @property
    def table_display_options(self):
        """Gets the table_display_options of this TableDataSet.


        :return: The table_display_options of this TableDataSet.
        :rtype: TableDisplayOptions
        """
        return self._table_display_options

    @table_display_options.setter
    def table_display_options(self, table_display_options):
        """Sets the table_display_options of this TableDataSet.


        :param table_display_options: The table_display_options of this TableDataSet.
        :type table_display_options: TableDisplayOptions
        """

        self._table_display_options = table_display_options

    @property
    def table_template(self):
        """Gets the table_template of this TableDataSet.

        Optional. A template string for naming TimeSeries in the resulting data set. This should be a string with interpolations of the form ${label_name}, which will resolve to the label's value i.e. \"${resource.labels.project_id}.\"

        :return: The table_template of this TableDataSet.
        :rtype: str
        """
        return self._table_template

    @table_template.setter
    def table_template(self, table_template):
        """Sets the table_template of this TableDataSet.

        Optional. A template string for naming TimeSeries in the resulting data set. This should be a string with interpolations of the form ${label_name}, which will resolve to the label's value i.e. \"${resource.labels.project_id}.\"

        :param table_template: The table_template of this TableDataSet.
        :type table_template: str
        """

        self._table_template = table_template

    @property
    def time_series_query(self):
        """Gets the time_series_query of this TableDataSet.


        :return: The time_series_query of this TableDataSet.
        :rtype: TimeSeriesQuery
        """
        return self._time_series_query

    @time_series_query.setter
    def time_series_query(self, time_series_query):
        """Sets the time_series_query of this TableDataSet.


        :param time_series_query: The time_series_query of this TableDataSet.
        :type time_series_query: TimeSeriesQuery
        """

        self._time_series_query = time_series_query
