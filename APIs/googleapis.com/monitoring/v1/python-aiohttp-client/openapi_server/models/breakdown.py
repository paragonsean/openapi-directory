# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aggregation_function import AggregationFunction
from openapi_server import util


class Breakdown(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregation_function: AggregationFunction=None, column: str=None, limit: int=None, sort_order: str=None):
        """Breakdown - a model defined in OpenAPI

        :param aggregation_function: The aggregation_function of this Breakdown.
        :param column: The column of this Breakdown.
        :param limit: The limit of this Breakdown.
        :param sort_order: The sort_order of this Breakdown.
        """
        self.openapi_types = {
            'aggregation_function': AggregationFunction,
            'column': str,
            'limit': int,
            'sort_order': str
        }

        self.attribute_map = {
            'aggregation_function': 'aggregationFunction',
            'column': 'column',
            'limit': 'limit',
            'sort_order': 'sortOrder'
        }

        self._aggregation_function = aggregation_function
        self._column = column
        self._limit = limit
        self._sort_order = sort_order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Breakdown':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Breakdown of this Breakdown.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregation_function(self):
        """Gets the aggregation_function of this Breakdown.


        :return: The aggregation_function of this Breakdown.
        :rtype: AggregationFunction
        """
        return self._aggregation_function

    @aggregation_function.setter
    def aggregation_function(self, aggregation_function):
        """Sets the aggregation_function of this Breakdown.


        :param aggregation_function: The aggregation_function of this Breakdown.
        :type aggregation_function: AggregationFunction
        """

        self._aggregation_function = aggregation_function

    @property
    def column(self):
        """Gets the column of this Breakdown.

        Required. The name of the column in the dataset containing the breakdown values.

        :return: The column of this Breakdown.
        :rtype: str
        """
        return self._column

    @column.setter
    def column(self, column):
        """Sets the column of this Breakdown.

        Required. The name of the column in the dataset containing the breakdown values.

        :param column: The column of this Breakdown.
        :type column: str
        """

        self._column = column

    @property
    def limit(self):
        """Gets the limit of this Breakdown.

        Required. A limit to the number of breakdowns. If set to zero then all possible breakdowns are applied. The list of breakdowns is dependent on the value of the sort_order field.

        :return: The limit of this Breakdown.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this Breakdown.

        Required. A limit to the number of breakdowns. If set to zero then all possible breakdowns are applied. The list of breakdowns is dependent on the value of the sort_order field.

        :param limit: The limit of this Breakdown.
        :type limit: int
        """

        self._limit = limit

    @property
    def sort_order(self):
        """Gets the sort_order of this Breakdown.

        Required. The sort order is applied to the values of the breakdown column.

        :return: The sort_order of this Breakdown.
        :rtype: str
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this Breakdown.

        Required. The sort order is applied to the values of the breakdown column.

        :param sort_order: The sort_order of this Breakdown.
        :type sort_order: str
        """
        allowed_values = ["SORT_ORDER_UNSPECIFIED", "SORT_ORDER_NONE", "SORT_ORDER_ASCENDING", "SORT_ORDER_DESCENDING"]  # noqa: E501
        if sort_order not in allowed_values:
            raise ValueError(
                "Invalid value for `sort_order` ({0}), must be one of {1}"
                .format(sort_order, allowed_values)
            )

        self._sort_order = sort_order
