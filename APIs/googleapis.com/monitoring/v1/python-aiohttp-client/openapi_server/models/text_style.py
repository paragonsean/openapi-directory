# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TextStyle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, background_color: str=None, font_size: str=None, horizontal_alignment: str=None, padding: str=None, pointer_location: str=None, text_color: str=None, vertical_alignment: str=None):
        """TextStyle - a model defined in OpenAPI

        :param background_color: The background_color of this TextStyle.
        :param font_size: The font_size of this TextStyle.
        :param horizontal_alignment: The horizontal_alignment of this TextStyle.
        :param padding: The padding of this TextStyle.
        :param pointer_location: The pointer_location of this TextStyle.
        :param text_color: The text_color of this TextStyle.
        :param vertical_alignment: The vertical_alignment of this TextStyle.
        """
        self.openapi_types = {
            'background_color': str,
            'font_size': str,
            'horizontal_alignment': str,
            'padding': str,
            'pointer_location': str,
            'text_color': str,
            'vertical_alignment': str
        }

        self.attribute_map = {
            'background_color': 'backgroundColor',
            'font_size': 'fontSize',
            'horizontal_alignment': 'horizontalAlignment',
            'padding': 'padding',
            'pointer_location': 'pointerLocation',
            'text_color': 'textColor',
            'vertical_alignment': 'verticalAlignment'
        }

        self._background_color = background_color
        self._font_size = font_size
        self._horizontal_alignment = horizontal_alignment
        self._padding = padding
        self._pointer_location = pointer_location
        self._text_color = text_color
        self._vertical_alignment = vertical_alignment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TextStyle':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TextStyle of this TextStyle.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def background_color(self):
        """Gets the background_color of this TextStyle.

        The background color as a hex string. \"#RRGGBB\" or \"#RGB\"

        :return: The background_color of this TextStyle.
        :rtype: str
        """
        return self._background_color

    @background_color.setter
    def background_color(self, background_color):
        """Sets the background_color of this TextStyle.

        The background color as a hex string. \"#RRGGBB\" or \"#RGB\"

        :param background_color: The background_color of this TextStyle.
        :type background_color: str
        """

        self._background_color = background_color

    @property
    def font_size(self):
        """Gets the font_size of this TextStyle.

        Font sizes for both the title and content. The title will still be larger relative to the content.

        :return: The font_size of this TextStyle.
        :rtype: str
        """
        return self._font_size

    @font_size.setter
    def font_size(self, font_size):
        """Sets the font_size of this TextStyle.

        Font sizes for both the title and content. The title will still be larger relative to the content.

        :param font_size: The font_size of this TextStyle.
        :type font_size: str
        """
        allowed_values = ["FONT_SIZE_UNSPECIFIED", "FS_EXTRA_SMALL", "FS_SMALL", "FS_MEDIUM", "FS_LARGE", "FS_EXTRA_LARGE"]  # noqa: E501
        if font_size not in allowed_values:
            raise ValueError(
                "Invalid value for `font_size` ({0}), must be one of {1}"
                .format(font_size, allowed_values)
            )

        self._font_size = font_size

    @property
    def horizontal_alignment(self):
        """Gets the horizontal_alignment of this TextStyle.

        The horizontal alignment of both the title and content

        :return: The horizontal_alignment of this TextStyle.
        :rtype: str
        """
        return self._horizontal_alignment

    @horizontal_alignment.setter
    def horizontal_alignment(self, horizontal_alignment):
        """Sets the horizontal_alignment of this TextStyle.

        The horizontal alignment of both the title and content

        :param horizontal_alignment: The horizontal_alignment of this TextStyle.
        :type horizontal_alignment: str
        """
        allowed_values = ["HORIZONTAL_ALIGNMENT_UNSPECIFIED", "H_LEFT", "H_CENTER", "H_RIGHT"]  # noqa: E501
        if horizontal_alignment not in allowed_values:
            raise ValueError(
                "Invalid value for `horizontal_alignment` ({0}), must be one of {1}"
                .format(horizontal_alignment, allowed_values)
            )

        self._horizontal_alignment = horizontal_alignment

    @property
    def padding(self):
        """Gets the padding of this TextStyle.

        The amount of padding around the widget

        :return: The padding of this TextStyle.
        :rtype: str
        """
        return self._padding

    @padding.setter
    def padding(self, padding):
        """Sets the padding of this TextStyle.

        The amount of padding around the widget

        :param padding: The padding of this TextStyle.
        :type padding: str
        """
        allowed_values = ["PADDING_SIZE_UNSPECIFIED", "P_EXTRA_SMALL", "P_SMALL", "P_MEDIUM", "P_LARGE", "P_EXTRA_LARGE"]  # noqa: E501
        if padding not in allowed_values:
            raise ValueError(
                "Invalid value for `padding` ({0}), must be one of {1}"
                .format(padding, allowed_values)
            )

        self._padding = padding

    @property
    def pointer_location(self):
        """Gets the pointer_location of this TextStyle.

        The pointer location for this widget (also sometimes called a \"tail\")

        :return: The pointer_location of this TextStyle.
        :rtype: str
        """
        return self._pointer_location

    @pointer_location.setter
    def pointer_location(self, pointer_location):
        """Sets the pointer_location of this TextStyle.

        The pointer location for this widget (also sometimes called a \"tail\")

        :param pointer_location: The pointer_location of this TextStyle.
        :type pointer_location: str
        """
        allowed_values = ["POINTER_LOCATION_UNSPECIFIED", "PL_TOP", "PL_RIGHT", "PL_BOTTOM", "PL_LEFT", "PL_TOP_LEFT", "PL_TOP_RIGHT", "PL_RIGHT_TOP", "PL_RIGHT_BOTTOM", "PL_BOTTOM_RIGHT", "PL_BOTTOM_LEFT", "PL_LEFT_BOTTOM", "PL_LEFT_TOP"]  # noqa: E501
        if pointer_location not in allowed_values:
            raise ValueError(
                "Invalid value for `pointer_location` ({0}), must be one of {1}"
                .format(pointer_location, allowed_values)
            )

        self._pointer_location = pointer_location

    @property
    def text_color(self):
        """Gets the text_color of this TextStyle.

        The text color as a hex string. \"#RRGGBB\" or \"#RGB\"

        :return: The text_color of this TextStyle.
        :rtype: str
        """
        return self._text_color

    @text_color.setter
    def text_color(self, text_color):
        """Sets the text_color of this TextStyle.

        The text color as a hex string. \"#RRGGBB\" or \"#RGB\"

        :param text_color: The text_color of this TextStyle.
        :type text_color: str
        """

        self._text_color = text_color

    @property
    def vertical_alignment(self):
        """Gets the vertical_alignment of this TextStyle.

        The vertical alignment of both the title and content

        :return: The vertical_alignment of this TextStyle.
        :rtype: str
        """
        return self._vertical_alignment

    @vertical_alignment.setter
    def vertical_alignment(self, vertical_alignment):
        """Sets the vertical_alignment of this TextStyle.

        The vertical alignment of both the title and content

        :param vertical_alignment: The vertical_alignment of this TextStyle.
        :type vertical_alignment: str
        """
        allowed_values = ["VERTICAL_ALIGNMENT_UNSPECIFIED", "V_TOP", "V_CENTER", "V_BOTTOM"]  # noqa: E501
        if vertical_alignment not in allowed_values:
            raise ValueError(
                "Invalid value for `vertical_alignment` ({0}), must be one of {1}"
                .format(vertical_alignment, allowed_values)
            )

        self._vertical_alignment = vertical_alignment
