# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.widget import Widget
from openapi_server import util


class Column(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, weight: str=None, widgets: List[Widget]=None):
        """Column - a model defined in OpenAPI

        :param weight: The weight of this Column.
        :param widgets: The widgets of this Column.
        """
        self.openapi_types = {
            'weight': str,
            'widgets': List[Widget]
        }

        self.attribute_map = {
            'weight': 'weight',
            'widgets': 'widgets'
        }

        self._weight = weight
        self._widgets = widgets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Column':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Column of this Column.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def weight(self):
        """Gets the weight of this Column.

        The relative weight of this column. The column weight is used to adjust the width of columns on the screen (relative to peers). Greater the weight, greater the width of the column on the screen. If omitted, a value of 1 is used while rendering.

        :return: The weight of this Column.
        :rtype: str
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this Column.

        The relative weight of this column. The column weight is used to adjust the width of columns on the screen (relative to peers). Greater the weight, greater the width of the column on the screen. If omitted, a value of 1 is used while rendering.

        :param weight: The weight of this Column.
        :type weight: str
        """

        self._weight = weight

    @property
    def widgets(self):
        """Gets the widgets of this Column.

        The display widgets arranged vertically in this column.

        :return: The widgets of this Column.
        :rtype: List[Widget]
        """
        return self._widgets

    @widgets.setter
    def widgets(self, widgets):
        """Sets the widgets of this Column.

        The display widgets arranged vertically in this column.

        :param widgets: The widgets of this Column.
        :type widgets: List[Widget]
        """

        self._widgets = widgets
