# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LogsPanel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter: str=None, resource_names: List[str]=None):
        """LogsPanel - a model defined in OpenAPI

        :param filter: The filter of this LogsPanel.
        :param resource_names: The resource_names of this LogsPanel.
        """
        self.openapi_types = {
            'filter': str,
            'resource_names': List[str]
        }

        self.attribute_map = {
            'filter': 'filter',
            'resource_names': 'resourceNames'
        }

        self._filter = filter
        self._resource_names = resource_names

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogsPanel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LogsPanel of this LogsPanel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter(self):
        """Gets the filter of this LogsPanel.

        A filter that chooses which log entries to return. See Advanced Logs Queries (https://cloud.google.com/logging/docs/view/advanced-queries). Only log entries that match the filter are returned. An empty filter matches all log entries.

        :return: The filter of this LogsPanel.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this LogsPanel.

        A filter that chooses which log entries to return. See Advanced Logs Queries (https://cloud.google.com/logging/docs/view/advanced-queries). Only log entries that match the filter are returned. An empty filter matches all log entries.

        :param filter: The filter of this LogsPanel.
        :type filter: str
        """

        self._filter = filter

    @property
    def resource_names(self):
        """Gets the resource_names of this LogsPanel.

        The names of logging resources to collect logs for. Currently only projects are supported. If empty, the widget will default to the host project.

        :return: The resource_names of this LogsPanel.
        :rtype: List[str]
        """
        return self._resource_names

    @resource_names.setter
    def resource_names(self, resource_names):
        """Sets the resource_names of this LogsPanel.

        The names of logging resources to collect logs for. Currently only projects are supported. If empty, the widget will default to the host project.

        :param resource_names: The resource_names of this LogsPanel.
        :type resource_names: List[str]
        """

        self._resource_names = resource_names
