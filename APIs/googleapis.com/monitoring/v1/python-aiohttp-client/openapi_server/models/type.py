# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_field import ModelField
from openapi_server.models.option import Option
from openapi_server.models.source_context import SourceContext
from openapi_server import util


class Type(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, edition: str=None, fields: List[ModelField]=None, name: str=None, oneofs: List[str]=None, options: List[Option]=None, source_context: SourceContext=None, syntax: str=None):
        """Type - a model defined in OpenAPI

        :param edition: The edition of this Type.
        :param fields: The fields of this Type.
        :param name: The name of this Type.
        :param oneofs: The oneofs of this Type.
        :param options: The options of this Type.
        :param source_context: The source_context of this Type.
        :param syntax: The syntax of this Type.
        """
        self.openapi_types = {
            'edition': str,
            'fields': List[ModelField],
            'name': str,
            'oneofs': List[str],
            'options': List[Option],
            'source_context': SourceContext,
            'syntax': str
        }

        self.attribute_map = {
            'edition': 'edition',
            'fields': 'fields',
            'name': 'name',
            'oneofs': 'oneofs',
            'options': 'options',
            'source_context': 'sourceContext',
            'syntax': 'syntax'
        }

        self._edition = edition
        self._fields = fields
        self._name = name
        self._oneofs = oneofs
        self._options = options
        self._source_context = source_context
        self._syntax = syntax

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Type':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Type of this Type.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def edition(self):
        """Gets the edition of this Type.

        The source edition string, only valid when syntax is SYNTAX_EDITIONS.

        :return: The edition of this Type.
        :rtype: str
        """
        return self._edition

    @edition.setter
    def edition(self, edition):
        """Sets the edition of this Type.

        The source edition string, only valid when syntax is SYNTAX_EDITIONS.

        :param edition: The edition of this Type.
        :type edition: str
        """

        self._edition = edition

    @property
    def fields(self):
        """Gets the fields of this Type.

        The list of fields.

        :return: The fields of this Type.
        :rtype: List[ModelField]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this Type.

        The list of fields.

        :param fields: The fields of this Type.
        :type fields: List[ModelField]
        """

        self._fields = fields

    @property
    def name(self):
        """Gets the name of this Type.

        The fully qualified message name.

        :return: The name of this Type.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Type.

        The fully qualified message name.

        :param name: The name of this Type.
        :type name: str
        """

        self._name = name

    @property
    def oneofs(self):
        """Gets the oneofs of this Type.

        The list of types appearing in oneof definitions in this type.

        :return: The oneofs of this Type.
        :rtype: List[str]
        """
        return self._oneofs

    @oneofs.setter
    def oneofs(self, oneofs):
        """Sets the oneofs of this Type.

        The list of types appearing in oneof definitions in this type.

        :param oneofs: The oneofs of this Type.
        :type oneofs: List[str]
        """

        self._oneofs = oneofs

    @property
    def options(self):
        """Gets the options of this Type.

        The protocol buffer options.

        :return: The options of this Type.
        :rtype: List[Option]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this Type.

        The protocol buffer options.

        :param options: The options of this Type.
        :type options: List[Option]
        """

        self._options = options

    @property
    def source_context(self):
        """Gets the source_context of this Type.


        :return: The source_context of this Type.
        :rtype: SourceContext
        """
        return self._source_context

    @source_context.setter
    def source_context(self, source_context):
        """Sets the source_context of this Type.


        :param source_context: The source_context of this Type.
        :type source_context: SourceContext
        """

        self._source_context = source_context

    @property
    def syntax(self):
        """Gets the syntax of this Type.

        The source syntax.

        :return: The syntax of this Type.
        :rtype: str
        """
        return self._syntax

    @syntax.setter
    def syntax(self, syntax):
        """Sets the syntax of this Type.

        The source syntax.

        :param syntax: The syntax of this Type.
        :type syntax: str
        """
        allowed_values = ["SYNTAX_PROTO2", "SYNTAX_PROTO3", "SYNTAX_EDITIONS"]  # noqa: E501
        if syntax not in allowed_values:
            raise ValueError(
                "Invalid value for `syntax` ({0}), must be one of {1}"
                .format(syntax, allowed_values)
            )

        self._syntax = syntax
