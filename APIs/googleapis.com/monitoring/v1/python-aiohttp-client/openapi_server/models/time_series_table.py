# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.column_settings import ColumnSettings
from openapi_server.models.table_data_set import TableDataSet
from openapi_server import util


class TimeSeriesTable(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, column_settings: List[ColumnSettings]=None, data_sets: List[TableDataSet]=None, metric_visualization: str=None):
        """TimeSeriesTable - a model defined in OpenAPI

        :param column_settings: The column_settings of this TimeSeriesTable.
        :param data_sets: The data_sets of this TimeSeriesTable.
        :param metric_visualization: The metric_visualization of this TimeSeriesTable.
        """
        self.openapi_types = {
            'column_settings': List[ColumnSettings],
            'data_sets': List[TableDataSet],
            'metric_visualization': str
        }

        self.attribute_map = {
            'column_settings': 'columnSettings',
            'data_sets': 'dataSets',
            'metric_visualization': 'metricVisualization'
        }

        self._column_settings = column_settings
        self._data_sets = data_sets
        self._metric_visualization = metric_visualization

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimeSeriesTable':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimeSeriesTable of this TimeSeriesTable.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def column_settings(self):
        """Gets the column_settings of this TimeSeriesTable.

        Optional. The list of the persistent column settings for the table.

        :return: The column_settings of this TimeSeriesTable.
        :rtype: List[ColumnSettings]
        """
        return self._column_settings

    @column_settings.setter
    def column_settings(self, column_settings):
        """Sets the column_settings of this TimeSeriesTable.

        Optional. The list of the persistent column settings for the table.

        :param column_settings: The column_settings of this TimeSeriesTable.
        :type column_settings: List[ColumnSettings]
        """

        self._column_settings = column_settings

    @property
    def data_sets(self):
        """Gets the data_sets of this TimeSeriesTable.

        Required. The data displayed in this table.

        :return: The data_sets of this TimeSeriesTable.
        :rtype: List[TableDataSet]
        """
        return self._data_sets

    @data_sets.setter
    def data_sets(self, data_sets):
        """Sets the data_sets of this TimeSeriesTable.

        Required. The data displayed in this table.

        :param data_sets: The data_sets of this TimeSeriesTable.
        :type data_sets: List[TableDataSet]
        """

        self._data_sets = data_sets

    @property
    def metric_visualization(self):
        """Gets the metric_visualization of this TimeSeriesTable.

        Optional. Store rendering strategy

        :return: The metric_visualization of this TimeSeriesTable.
        :rtype: str
        """
        return self._metric_visualization

    @metric_visualization.setter
    def metric_visualization(self, metric_visualization):
        """Sets the metric_visualization of this TimeSeriesTable.

        Optional. Store rendering strategy

        :param metric_visualization: The metric_visualization of this TimeSeriesTable.
        :type metric_visualization: str
        """
        allowed_values = ["METRIC_VISUALIZATION_UNSPECIFIED", "NUMBER", "BAR"]  # noqa: E501
        if metric_visualization not in allowed_values:
            raise ValueError(
                "Invalid value for `metric_visualization` ({0}), must be one of {1}"
                .format(metric_visualization, allowed_values)
            )

        self._metric_visualization = metric_visualization
