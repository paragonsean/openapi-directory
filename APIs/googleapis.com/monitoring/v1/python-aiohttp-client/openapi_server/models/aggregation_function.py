# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.parameter import Parameter
from openapi_server import util


class AggregationFunction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, parameters: List[Parameter]=None, type: str=None):
        """AggregationFunction - a model defined in OpenAPI

        :param parameters: The parameters of this AggregationFunction.
        :param type: The type of this AggregationFunction.
        """
        self.openapi_types = {
            'parameters': List[Parameter],
            'type': str
        }

        self.attribute_map = {
            'parameters': 'parameters',
            'type': 'type'
        }

        self._parameters = parameters
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AggregationFunction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AggregationFunction of this AggregationFunction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parameters(self):
        """Gets the parameters of this AggregationFunction.

        Optional. Parameters applied to the aggregation function. Only used for functions that require them.

        :return: The parameters of this AggregationFunction.
        :rtype: List[Parameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this AggregationFunction.

        Optional. Parameters applied to the aggregation function. Only used for functions that require them.

        :param parameters: The parameters of this AggregationFunction.
        :type parameters: List[Parameter]
        """

        self._parameters = parameters

    @property
    def type(self):
        """Gets the type of this AggregationFunction.

        Required. The type of aggregation function, must be one of the following: \"none\" - no function. \"percentile\" - APPROX_QUANTILES() - 1 parameter numeric value \"average\" - AVG() \"count\" - COUNT() \"count-distinct\" - COUNT(DISTINCT) \"count-distinct-approx\" - APPROX_COUNT_DISTINCT() \"max\" - MAX() \"min\" - MIN() \"sum\" - SUM()

        :return: The type of this AggregationFunction.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AggregationFunction.

        Required. The type of aggregation function, must be one of the following: \"none\" - no function. \"percentile\" - APPROX_QUANTILES() - 1 parameter numeric value \"average\" - AVG() \"count\" - COUNT() \"count-distinct\" - COUNT(DISTINCT) \"count-distinct-approx\" - APPROX_COUNT_DISTINCT() \"max\" - MAX() \"min\" - MIN() \"sum\" - SUM()

        :param type: The type of this AggregationFunction.
        :type type: str
        """

        self._type = type
