/**
 * Cloud TPU API
 * TPU API provides customers with access to Google TPU technology.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Symptom model module.
 * @module model/Symptom
 * @version v1
 */
class Symptom {
    /**
     * Constructs a new <code>Symptom</code>.
     * A Symptom instance.
     * @alias module:model/Symptom
     */
    constructor() { 
        
        Symptom.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Symptom</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Symptom} obj Optional instance to populate.
     * @return {module:model/Symptom} The populated <code>Symptom</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Symptom();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('details')) {
                obj['details'] = ApiClient.convertToType(data['details'], 'String');
            }
            if (data.hasOwnProperty('symptomType')) {
                obj['symptomType'] = ApiClient.convertToType(data['symptomType'], 'String');
            }
            if (data.hasOwnProperty('workerId')) {
                obj['workerId'] = ApiClient.convertToType(data['workerId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Symptom</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Symptom</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['details'] && !(typeof data['details'] === 'string' || data['details'] instanceof String)) {
            throw new Error("Expected the field `details` to be a primitive type in the JSON string but got " + data['details']);
        }
        // ensure the json data is a string
        if (data['symptomType'] && !(typeof data['symptomType'] === 'string' || data['symptomType'] instanceof String)) {
            throw new Error("Expected the field `symptomType` to be a primitive type in the JSON string but got " + data['symptomType']);
        }
        // ensure the json data is a string
        if (data['workerId'] && !(typeof data['workerId'] === 'string' || data['workerId'] instanceof String)) {
            throw new Error("Expected the field `workerId` to be a primitive type in the JSON string but got " + data['workerId']);
        }

        return true;
    }


}



/**
 * Timestamp when the Symptom is created.
 * @member {String} createTime
 */
Symptom.prototype['createTime'] = undefined;

/**
 * Detailed information of the current Symptom.
 * @member {String} details
 */
Symptom.prototype['details'] = undefined;

/**
 * Type of the Symptom.
 * @member {module:model/Symptom.SymptomTypeEnum} symptomType
 */
Symptom.prototype['symptomType'] = undefined;

/**
 * A string used to uniquely distinguish a worker within a TPU node.
 * @member {String} workerId
 */
Symptom.prototype['workerId'] = undefined;





/**
 * Allowed values for the <code>symptomType</code> property.
 * @enum {String}
 * @readonly
 */
Symptom['SymptomTypeEnum'] = {

    /**
     * value: "SYMPTOM_TYPE_UNSPECIFIED"
     * @const
     */
    "SYMPTOM_TYPE_UNSPECIFIED": "SYMPTOM_TYPE_UNSPECIFIED",

    /**
     * value: "LOW_MEMORY"
     * @const
     */
    "LOW_MEMORY": "LOW_MEMORY",

    /**
     * value: "OUT_OF_MEMORY"
     * @const
     */
    "OUT_OF_MEMORY": "OUT_OF_MEMORY",

    /**
     * value: "EXECUTE_TIMED_OUT"
     * @const
     */
    "EXECUTE_TIMED_OUT": "EXECUTE_TIMED_OUT",

    /**
     * value: "MESH_BUILD_FAIL"
     * @const
     */
    "MESH_BUILD_FAIL": "MESH_BUILD_FAIL",

    /**
     * value: "HBM_OUT_OF_MEMORY"
     * @const
     */
    "HBM_OUT_OF_MEMORY": "HBM_OUT_OF_MEMORY",

    /**
     * value: "PROJECT_ABUSE"
     * @const
     */
    "PROJECT_ABUSE": "PROJECT_ABUSE"
};



export default Symptom;

