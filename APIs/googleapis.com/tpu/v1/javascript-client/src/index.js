/**
 * Cloud TPU API
 * TPU API provides customers with access to Google TPU technology.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import AcceleratorType from './model/AcceleratorType';
import ListAcceleratorTypesResponse from './model/ListAcceleratorTypesResponse';
import ListLocationsResponse from './model/ListLocationsResponse';
import ListNodesResponse from './model/ListNodesResponse';
import ListOperationsResponse from './model/ListOperationsResponse';
import ListTensorFlowVersionsResponse from './model/ListTensorFlowVersionsResponse';
import Location from './model/Location';
import NetworkEndpoint from './model/NetworkEndpoint';
import Node from './model/Node';
import Operation from './model/Operation';
import OperationMetadata from './model/OperationMetadata';
import ReimageNodeRequest from './model/ReimageNodeRequest';
import SchedulingConfig from './model/SchedulingConfig';
import Status from './model/Status';
import Symptom from './model/Symptom';
import TensorFlowVersion from './model/TensorFlowVersion';
import ProjectsApi from './api/ProjectsApi';


/**
* TPU API provides customers with access to Google TPU technology..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var CloudTpuApi = require('index'); // See note below*.
* var xxxSvc = new CloudTpuApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new CloudTpuApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new CloudTpuApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new CloudTpuApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version v1
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AcceleratorType model constructor.
     * @property {module:model/AcceleratorType}
     */
    AcceleratorType,

    /**
     * The ListAcceleratorTypesResponse model constructor.
     * @property {module:model/ListAcceleratorTypesResponse}
     */
    ListAcceleratorTypesResponse,

    /**
     * The ListLocationsResponse model constructor.
     * @property {module:model/ListLocationsResponse}
     */
    ListLocationsResponse,

    /**
     * The ListNodesResponse model constructor.
     * @property {module:model/ListNodesResponse}
     */
    ListNodesResponse,

    /**
     * The ListOperationsResponse model constructor.
     * @property {module:model/ListOperationsResponse}
     */
    ListOperationsResponse,

    /**
     * The ListTensorFlowVersionsResponse model constructor.
     * @property {module:model/ListTensorFlowVersionsResponse}
     */
    ListTensorFlowVersionsResponse,

    /**
     * The Location model constructor.
     * @property {module:model/Location}
     */
    Location,

    /**
     * The NetworkEndpoint model constructor.
     * @property {module:model/NetworkEndpoint}
     */
    NetworkEndpoint,

    /**
     * The Node model constructor.
     * @property {module:model/Node}
     */
    Node,

    /**
     * The Operation model constructor.
     * @property {module:model/Operation}
     */
    Operation,

    /**
     * The OperationMetadata model constructor.
     * @property {module:model/OperationMetadata}
     */
    OperationMetadata,

    /**
     * The ReimageNodeRequest model constructor.
     * @property {module:model/ReimageNodeRequest}
     */
    ReimageNodeRequest,

    /**
     * The SchedulingConfig model constructor.
     * @property {module:model/SchedulingConfig}
     */
    SchedulingConfig,

    /**
     * The Status model constructor.
     * @property {module:model/Status}
     */
    Status,

    /**
     * The Symptom model constructor.
     * @property {module:model/Symptom}
     */
    Symptom,

    /**
     * The TensorFlowVersion model constructor.
     * @property {module:model/TensorFlowVersion}
     */
    TensorFlowVersion,

    /**
    * The ProjectsApi service constructor.
    * @property {module:api/ProjectsApi}
    */
    ProjectsApi
};
