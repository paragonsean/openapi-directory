/**
 * Cloud TPU API
 * TPU API provides customers with access to Google TPU technology.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINode::OAINode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINode::OAINode() {
    this->initializeModel();
}

OAINode::~OAINode() {}

void OAINode::initializeModel() {

    m_accelerator_type_isSet = false;
    m_accelerator_type_isValid = false;

    m_api_version_isSet = false;
    m_api_version_isValid = false;

    m_cidr_block_isSet = false;
    m_cidr_block_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_health_isSet = false;
    m_health_isValid = false;

    m_health_description_isSet = false;
    m_health_description_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_network_endpoints_isSet = false;
    m_network_endpoints_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_scheduling_config_isSet = false;
    m_scheduling_config_isValid = false;

    m_service_account_isSet = false;
    m_service_account_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_symptoms_isSet = false;
    m_symptoms_isValid = false;

    m_tensorflow_version_isSet = false;
    m_tensorflow_version_isValid = false;

    m_use_service_networking_isSet = false;
    m_use_service_networking_isValid = false;
}

void OAINode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINode::fromJsonObject(QJsonObject json) {

    m_accelerator_type_isValid = ::OpenAPI::fromJsonValue(m_accelerator_type, json[QString("acceleratorType")]);
    m_accelerator_type_isSet = !json[QString("acceleratorType")].isNull() && m_accelerator_type_isValid;

    m_api_version_isValid = ::OpenAPI::fromJsonValue(m_api_version, json[QString("apiVersion")]);
    m_api_version_isSet = !json[QString("apiVersion")].isNull() && m_api_version_isValid;

    m_cidr_block_isValid = ::OpenAPI::fromJsonValue(m_cidr_block, json[QString("cidrBlock")]);
    m_cidr_block_isSet = !json[QString("cidrBlock")].isNull() && m_cidr_block_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_health_isValid = ::OpenAPI::fromJsonValue(m_health, json[QString("health")]);
    m_health_isSet = !json[QString("health")].isNull() && m_health_isValid;

    m_health_description_isValid = ::OpenAPI::fromJsonValue(m_health_description, json[QString("healthDescription")]);
    m_health_description_isSet = !json[QString("healthDescription")].isNull() && m_health_description_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_network_endpoints_isValid = ::OpenAPI::fromJsonValue(m_network_endpoints, json[QString("networkEndpoints")]);
    m_network_endpoints_isSet = !json[QString("networkEndpoints")].isNull() && m_network_endpoints_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_scheduling_config_isValid = ::OpenAPI::fromJsonValue(m_scheduling_config, json[QString("schedulingConfig")]);
    m_scheduling_config_isSet = !json[QString("schedulingConfig")].isNull() && m_scheduling_config_isValid;

    m_service_account_isValid = ::OpenAPI::fromJsonValue(m_service_account, json[QString("serviceAccount")]);
    m_service_account_isSet = !json[QString("serviceAccount")].isNull() && m_service_account_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_symptoms_isValid = ::OpenAPI::fromJsonValue(m_symptoms, json[QString("symptoms")]);
    m_symptoms_isSet = !json[QString("symptoms")].isNull() && m_symptoms_isValid;

    m_tensorflow_version_isValid = ::OpenAPI::fromJsonValue(m_tensorflow_version, json[QString("tensorflowVersion")]);
    m_tensorflow_version_isSet = !json[QString("tensorflowVersion")].isNull() && m_tensorflow_version_isValid;

    m_use_service_networking_isValid = ::OpenAPI::fromJsonValue(m_use_service_networking, json[QString("useServiceNetworking")]);
    m_use_service_networking_isSet = !json[QString("useServiceNetworking")].isNull() && m_use_service_networking_isValid;
}

QString OAINode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINode::asJsonObject() const {
    QJsonObject obj;
    if (m_accelerator_type_isSet) {
        obj.insert(QString("acceleratorType"), ::OpenAPI::toJsonValue(m_accelerator_type));
    }
    if (m_api_version_isSet) {
        obj.insert(QString("apiVersion"), ::OpenAPI::toJsonValue(m_api_version));
    }
    if (m_cidr_block_isSet) {
        obj.insert(QString("cidrBlock"), ::OpenAPI::toJsonValue(m_cidr_block));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_health_isSet) {
        obj.insert(QString("health"), ::OpenAPI::toJsonValue(m_health));
    }
    if (m_health_description_isSet) {
        obj.insert(QString("healthDescription"), ::OpenAPI::toJsonValue(m_health_description));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_network_endpoints.size() > 0) {
        obj.insert(QString("networkEndpoints"), ::OpenAPI::toJsonValue(m_network_endpoints));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_scheduling_config.isSet()) {
        obj.insert(QString("schedulingConfig"), ::OpenAPI::toJsonValue(m_scheduling_config));
    }
    if (m_service_account_isSet) {
        obj.insert(QString("serviceAccount"), ::OpenAPI::toJsonValue(m_service_account));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_symptoms.size() > 0) {
        obj.insert(QString("symptoms"), ::OpenAPI::toJsonValue(m_symptoms));
    }
    if (m_tensorflow_version_isSet) {
        obj.insert(QString("tensorflowVersion"), ::OpenAPI::toJsonValue(m_tensorflow_version));
    }
    if (m_use_service_networking_isSet) {
        obj.insert(QString("useServiceNetworking"), ::OpenAPI::toJsonValue(m_use_service_networking));
    }
    return obj;
}

QString OAINode::getAcceleratorType() const {
    return m_accelerator_type;
}
void OAINode::setAcceleratorType(const QString &accelerator_type) {
    m_accelerator_type = accelerator_type;
    m_accelerator_type_isSet = true;
}

bool OAINode::is_accelerator_type_Set() const{
    return m_accelerator_type_isSet;
}

bool OAINode::is_accelerator_type_Valid() const{
    return m_accelerator_type_isValid;
}

QString OAINode::getApiVersion() const {
    return m_api_version;
}
void OAINode::setApiVersion(const QString &api_version) {
    m_api_version = api_version;
    m_api_version_isSet = true;
}

bool OAINode::is_api_version_Set() const{
    return m_api_version_isSet;
}

bool OAINode::is_api_version_Valid() const{
    return m_api_version_isValid;
}

QString OAINode::getCidrBlock() const {
    return m_cidr_block;
}
void OAINode::setCidrBlock(const QString &cidr_block) {
    m_cidr_block = cidr_block;
    m_cidr_block_isSet = true;
}

bool OAINode::is_cidr_block_Set() const{
    return m_cidr_block_isSet;
}

bool OAINode::is_cidr_block_Valid() const{
    return m_cidr_block_isValid;
}

QString OAINode::getCreateTime() const {
    return m_create_time;
}
void OAINode::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAINode::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAINode::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAINode::getDescription() const {
    return m_description;
}
void OAINode::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAINode::is_description_Set() const{
    return m_description_isSet;
}

bool OAINode::is_description_Valid() const{
    return m_description_isValid;
}

QString OAINode::getHealth() const {
    return m_health;
}
void OAINode::setHealth(const QString &health) {
    m_health = health;
    m_health_isSet = true;
}

bool OAINode::is_health_Set() const{
    return m_health_isSet;
}

bool OAINode::is_health_Valid() const{
    return m_health_isValid;
}

QString OAINode::getHealthDescription() const {
    return m_health_description;
}
void OAINode::setHealthDescription(const QString &health_description) {
    m_health_description = health_description;
    m_health_description_isSet = true;
}

bool OAINode::is_health_description_Set() const{
    return m_health_description_isSet;
}

bool OAINode::is_health_description_Valid() const{
    return m_health_description_isValid;
}

QString OAINode::getIpAddress() const {
    return m_ip_address;
}
void OAINode::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAINode::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAINode::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QMap<QString, QString> OAINode::getLabels() const {
    return m_labels;
}
void OAINode::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAINode::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAINode::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAINode::getName() const {
    return m_name;
}
void OAINode::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINode::is_name_Set() const{
    return m_name_isSet;
}

bool OAINode::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINode::getNetwork() const {
    return m_network;
}
void OAINode::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAINode::is_network_Set() const{
    return m_network_isSet;
}

bool OAINode::is_network_Valid() const{
    return m_network_isValid;
}

QList<OAINetworkEndpoint> OAINode::getNetworkEndpoints() const {
    return m_network_endpoints;
}
void OAINode::setNetworkEndpoints(const QList<OAINetworkEndpoint> &network_endpoints) {
    m_network_endpoints = network_endpoints;
    m_network_endpoints_isSet = true;
}

bool OAINode::is_network_endpoints_Set() const{
    return m_network_endpoints_isSet;
}

bool OAINode::is_network_endpoints_Valid() const{
    return m_network_endpoints_isValid;
}

QString OAINode::getPort() const {
    return m_port;
}
void OAINode::setPort(const QString &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAINode::is_port_Set() const{
    return m_port_isSet;
}

bool OAINode::is_port_Valid() const{
    return m_port_isValid;
}

OAISchedulingConfig OAINode::getSchedulingConfig() const {
    return m_scheduling_config;
}
void OAINode::setSchedulingConfig(const OAISchedulingConfig &scheduling_config) {
    m_scheduling_config = scheduling_config;
    m_scheduling_config_isSet = true;
}

bool OAINode::is_scheduling_config_Set() const{
    return m_scheduling_config_isSet;
}

bool OAINode::is_scheduling_config_Valid() const{
    return m_scheduling_config_isValid;
}

QString OAINode::getServiceAccount() const {
    return m_service_account;
}
void OAINode::setServiceAccount(const QString &service_account) {
    m_service_account = service_account;
    m_service_account_isSet = true;
}

bool OAINode::is_service_account_Set() const{
    return m_service_account_isSet;
}

bool OAINode::is_service_account_Valid() const{
    return m_service_account_isValid;
}

QString OAINode::getState() const {
    return m_state;
}
void OAINode::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAINode::is_state_Set() const{
    return m_state_isSet;
}

bool OAINode::is_state_Valid() const{
    return m_state_isValid;
}

QList<OAISymptom> OAINode::getSymptoms() const {
    return m_symptoms;
}
void OAINode::setSymptoms(const QList<OAISymptom> &symptoms) {
    m_symptoms = symptoms;
    m_symptoms_isSet = true;
}

bool OAINode::is_symptoms_Set() const{
    return m_symptoms_isSet;
}

bool OAINode::is_symptoms_Valid() const{
    return m_symptoms_isValid;
}

QString OAINode::getTensorflowVersion() const {
    return m_tensorflow_version;
}
void OAINode::setTensorflowVersion(const QString &tensorflow_version) {
    m_tensorflow_version = tensorflow_version;
    m_tensorflow_version_isSet = true;
}

bool OAINode::is_tensorflow_version_Set() const{
    return m_tensorflow_version_isSet;
}

bool OAINode::is_tensorflow_version_Valid() const{
    return m_tensorflow_version_isValid;
}

bool OAINode::isUseServiceNetworking() const {
    return m_use_service_networking;
}
void OAINode::setUseServiceNetworking(const bool &use_service_networking) {
    m_use_service_networking = use_service_networking;
    m_use_service_networking_isSet = true;
}

bool OAINode::is_use_service_networking_Set() const{
    return m_use_service_networking_isSet;
}

bool OAINode::is_use_service_networking_Valid() const{
    return m_use_service_networking_isValid;
}

bool OAINode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accelerator_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cidr_block_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_endpoints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduling_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symptoms.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tensorflow_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_service_networking_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINode::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
