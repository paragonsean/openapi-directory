/*
 * Cloud TPU API
 * TPU API provides customers with access to Google TPU technology.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Symptom instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:08.793928-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Symptom {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private String details;

  /**
   * Type of the Symptom.
   */
  @JsonAdapter(SymptomTypeEnum.Adapter.class)
  public enum SymptomTypeEnum {
    SYMPTOM_TYPE_UNSPECIFIED("SYMPTOM_TYPE_UNSPECIFIED"),
    
    LOW_MEMORY("LOW_MEMORY"),
    
    OUT_OF_MEMORY("OUT_OF_MEMORY"),
    
    EXECUTE_TIMED_OUT("EXECUTE_TIMED_OUT"),
    
    MESH_BUILD_FAIL("MESH_BUILD_FAIL"),
    
    HBM_OUT_OF_MEMORY("HBM_OUT_OF_MEMORY"),
    
    PROJECT_ABUSE("PROJECT_ABUSE");

    private String value;

    SymptomTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SymptomTypeEnum fromValue(String value) {
      for (SymptomTypeEnum b : SymptomTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SymptomTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SymptomTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SymptomTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SymptomTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SymptomTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SYMPTOM_TYPE = "symptomType";
  @SerializedName(SERIALIZED_NAME_SYMPTOM_TYPE)
  private SymptomTypeEnum symptomType;

  public static final String SERIALIZED_NAME_WORKER_ID = "workerId";
  @SerializedName(SERIALIZED_NAME_WORKER_ID)
  private String workerId;

  public Symptom() {
  }

  public Symptom createTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Timestamp when the Symptom is created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }

  public void setCreateTime(String createTime) {
    this.createTime = createTime;
  }


  public Symptom details(String details) {
    this.details = details;
    return this;
  }

  /**
   * Detailed information of the current Symptom.
   * @return details
   */
  @javax.annotation.Nullable
  public String getDetails() {
    return details;
  }

  public void setDetails(String details) {
    this.details = details;
  }


  public Symptom symptomType(SymptomTypeEnum symptomType) {
    this.symptomType = symptomType;
    return this;
  }

  /**
   * Type of the Symptom.
   * @return symptomType
   */
  @javax.annotation.Nullable
  public SymptomTypeEnum getSymptomType() {
    return symptomType;
  }

  public void setSymptomType(SymptomTypeEnum symptomType) {
    this.symptomType = symptomType;
  }


  public Symptom workerId(String workerId) {
    this.workerId = workerId;
    return this;
  }

  /**
   * A string used to uniquely distinguish a worker within a TPU node.
   * @return workerId
   */
  @javax.annotation.Nullable
  public String getWorkerId() {
    return workerId;
  }

  public void setWorkerId(String workerId) {
    this.workerId = workerId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Symptom symptom = (Symptom) o;
    return Objects.equals(this.createTime, symptom.createTime) &&
        Objects.equals(this.details, symptom.details) &&
        Objects.equals(this.symptomType, symptom.symptomType) &&
        Objects.equals(this.workerId, symptom.workerId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, details, symptomType, workerId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Symptom {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    symptomType: ").append(toIndentedString(symptomType)).append("\n");
    sb.append("    workerId: ").append(toIndentedString(workerId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("details");
    openapiFields.add("symptomType");
    openapiFields.add("workerId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Symptom
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Symptom.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Symptom is not found in the empty JSON string", Symptom.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Symptom.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Symptom` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("details") != null && !jsonObj.get("details").isJsonNull()) && !jsonObj.get("details").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `details` to be a primitive type in the JSON string but got `%s`", jsonObj.get("details").toString()));
      }
      if ((jsonObj.get("symptomType") != null && !jsonObj.get("symptomType").isJsonNull()) && !jsonObj.get("symptomType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symptomType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symptomType").toString()));
      }
      // validate the optional field `symptomType`
      if (jsonObj.get("symptomType") != null && !jsonObj.get("symptomType").isJsonNull()) {
        SymptomTypeEnum.validateJsonElement(jsonObj.get("symptomType"));
      }
      if ((jsonObj.get("workerId") != null && !jsonObj.get("workerId").isJsonNull()) && !jsonObj.get("workerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workerId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Symptom.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Symptom' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Symptom> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Symptom.class));

       return (TypeAdapter<T>) new TypeAdapter<Symptom>() {
           @Override
           public void write(JsonWriter out, Symptom value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Symptom read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Symptom given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Symptom
   * @throws IOException if the JSON string is invalid with respect to Symptom
   */
  public static Symptom fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Symptom.class);
  }

  /**
   * Convert an instance of Symptom to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

