# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Symptom(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, details: str=None, symptom_type: str=None, worker_id: str=None):
        """Symptom - a model defined in OpenAPI

        :param create_time: The create_time of this Symptom.
        :param details: The details of this Symptom.
        :param symptom_type: The symptom_type of this Symptom.
        :param worker_id: The worker_id of this Symptom.
        """
        self.openapi_types = {
            'create_time': str,
            'details': str,
            'symptom_type': str,
            'worker_id': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'details': 'details',
            'symptom_type': 'symptomType',
            'worker_id': 'workerId'
        }

        self._create_time = create_time
        self._details = details
        self._symptom_type = symptom_type
        self._worker_id = worker_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Symptom':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Symptom of this Symptom.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this Symptom.

        Timestamp when the Symptom is created.

        :return: The create_time of this Symptom.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Symptom.

        Timestamp when the Symptom is created.

        :param create_time: The create_time of this Symptom.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def details(self):
        """Gets the details of this Symptom.

        Detailed information of the current Symptom.

        :return: The details of this Symptom.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Symptom.

        Detailed information of the current Symptom.

        :param details: The details of this Symptom.
        :type details: str
        """

        self._details = details

    @property
    def symptom_type(self):
        """Gets the symptom_type of this Symptom.

        Type of the Symptom.

        :return: The symptom_type of this Symptom.
        :rtype: str
        """
        return self._symptom_type

    @symptom_type.setter
    def symptom_type(self, symptom_type):
        """Sets the symptom_type of this Symptom.

        Type of the Symptom.

        :param symptom_type: The symptom_type of this Symptom.
        :type symptom_type: str
        """
        allowed_values = ["SYMPTOM_TYPE_UNSPECIFIED", "LOW_MEMORY", "OUT_OF_MEMORY", "EXECUTE_TIMED_OUT", "MESH_BUILD_FAIL", "HBM_OUT_OF_MEMORY", "PROJECT_ABUSE"]  # noqa: E501
        if symptom_type not in allowed_values:
            raise ValueError(
                "Invalid value for `symptom_type` ({0}), must be one of {1}"
                .format(symptom_type, allowed_values)
            )

        self._symptom_type = symptom_type

    @property
    def worker_id(self):
        """Gets the worker_id of this Symptom.

        A string used to uniquely distinguish a worker within a TPU node.

        :return: The worker_id of this Symptom.
        :rtype: str
        """
        return self._worker_id

    @worker_id.setter
    def worker_id(self, worker_id):
        """Sets the worker_id of this Symptom.

        A string used to uniquely distinguish a worker within a TPU node.

        :param worker_id: The worker_id of this Symptom.
        :type worker_id: str
        """

        self._worker_id = worker_id
