# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.network_endpoint import NetworkEndpoint
from openapi_server.models.scheduling_config import SchedulingConfig
from openapi_server.models.symptom import Symptom
from openapi_server import util


class Node(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accelerator_type: str=None, api_version: str=None, cidr_block: str=None, create_time: str=None, description: str=None, health: str=None, health_description: str=None, ip_address: str=None, labels: Dict[str, str]=None, name: str=None, network: str=None, network_endpoints: List[NetworkEndpoint]=None, port: str=None, scheduling_config: SchedulingConfig=None, service_account: str=None, state: str=None, symptoms: List[Symptom]=None, tensorflow_version: str=None, use_service_networking: bool=None):
        """Node - a model defined in OpenAPI

        :param accelerator_type: The accelerator_type of this Node.
        :param api_version: The api_version of this Node.
        :param cidr_block: The cidr_block of this Node.
        :param create_time: The create_time of this Node.
        :param description: The description of this Node.
        :param health: The health of this Node.
        :param health_description: The health_description of this Node.
        :param ip_address: The ip_address of this Node.
        :param labels: The labels of this Node.
        :param name: The name of this Node.
        :param network: The network of this Node.
        :param network_endpoints: The network_endpoints of this Node.
        :param port: The port of this Node.
        :param scheduling_config: The scheduling_config of this Node.
        :param service_account: The service_account of this Node.
        :param state: The state of this Node.
        :param symptoms: The symptoms of this Node.
        :param tensorflow_version: The tensorflow_version of this Node.
        :param use_service_networking: The use_service_networking of this Node.
        """
        self.openapi_types = {
            'accelerator_type': str,
            'api_version': str,
            'cidr_block': str,
            'create_time': str,
            'description': str,
            'health': str,
            'health_description': str,
            'ip_address': str,
            'labels': Dict[str, str],
            'name': str,
            'network': str,
            'network_endpoints': List[NetworkEndpoint],
            'port': str,
            'scheduling_config': SchedulingConfig,
            'service_account': str,
            'state': str,
            'symptoms': List[Symptom],
            'tensorflow_version': str,
            'use_service_networking': bool
        }

        self.attribute_map = {
            'accelerator_type': 'acceleratorType',
            'api_version': 'apiVersion',
            'cidr_block': 'cidrBlock',
            'create_time': 'createTime',
            'description': 'description',
            'health': 'health',
            'health_description': 'healthDescription',
            'ip_address': 'ipAddress',
            'labels': 'labels',
            'name': 'name',
            'network': 'network',
            'network_endpoints': 'networkEndpoints',
            'port': 'port',
            'scheduling_config': 'schedulingConfig',
            'service_account': 'serviceAccount',
            'state': 'state',
            'symptoms': 'symptoms',
            'tensorflow_version': 'tensorflowVersion',
            'use_service_networking': 'useServiceNetworking'
        }

        self._accelerator_type = accelerator_type
        self._api_version = api_version
        self._cidr_block = cidr_block
        self._create_time = create_time
        self._description = description
        self._health = health
        self._health_description = health_description
        self._ip_address = ip_address
        self._labels = labels
        self._name = name
        self._network = network
        self._network_endpoints = network_endpoints
        self._port = port
        self._scheduling_config = scheduling_config
        self._service_account = service_account
        self._state = state
        self._symptoms = symptoms
        self._tensorflow_version = tensorflow_version
        self._use_service_networking = use_service_networking

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Node':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Node of this Node.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accelerator_type(self):
        """Gets the accelerator_type of this Node.

        Required. The type of hardware accelerators associated with this node.

        :return: The accelerator_type of this Node.
        :rtype: str
        """
        return self._accelerator_type

    @accelerator_type.setter
    def accelerator_type(self, accelerator_type):
        """Sets the accelerator_type of this Node.

        Required. The type of hardware accelerators associated with this node.

        :param accelerator_type: The accelerator_type of this Node.
        :type accelerator_type: str
        """

        self._accelerator_type = accelerator_type

    @property
    def api_version(self):
        """Gets the api_version of this Node.

        Output only. The API version that created this Node.

        :return: The api_version of this Node.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this Node.

        Output only. The API version that created this Node.

        :param api_version: The api_version of this Node.
        :type api_version: str
        """
        allowed_values = ["API_VERSION_UNSPECIFIED", "V1_ALPHA1", "V1", "V2_ALPHA1"]  # noqa: E501
        if api_version not in allowed_values:
            raise ValueError(
                "Invalid value for `api_version` ({0}), must be one of {1}"
                .format(api_version, allowed_values)
            )

        self._api_version = api_version

    @property
    def cidr_block(self):
        """Gets the cidr_block of this Node.

        The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger block would be wasteful (a node can only consume one IP address). Errors will occur if the CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts with any subnetworks in the user's provided network, or the provided network is peered with another network that is using that CIDR block.

        :return: The cidr_block of this Node.
        :rtype: str
        """
        return self._cidr_block

    @cidr_block.setter
    def cidr_block(self, cidr_block):
        """Sets the cidr_block of this Node.

        The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger block would be wasteful (a node can only consume one IP address). Errors will occur if the CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts with any subnetworks in the user's provided network, or the provided network is peered with another network that is using that CIDR block.

        :param cidr_block: The cidr_block of this Node.
        :type cidr_block: str
        """

        self._cidr_block = cidr_block

    @property
    def create_time(self):
        """Gets the create_time of this Node.

        Output only. The time when the node was created.

        :return: The create_time of this Node.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Node.

        Output only. The time when the node was created.

        :param create_time: The create_time of this Node.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this Node.

        The user-supplied description of the TPU. Maximum of 512 characters.

        :return: The description of this Node.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Node.

        The user-supplied description of the TPU. Maximum of 512 characters.

        :param description: The description of this Node.
        :type description: str
        """

        self._description = description

    @property
    def health(self):
        """Gets the health of this Node.

        The health status of the TPU node.

        :return: The health of this Node.
        :rtype: str
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this Node.

        The health status of the TPU node.

        :param health: The health of this Node.
        :type health: str
        """
        allowed_values = ["HEALTH_UNSPECIFIED", "HEALTHY", "DEPRECATED_UNHEALTHY", "TIMEOUT", "UNHEALTHY_TENSORFLOW", "UNHEALTHY_MAINTENANCE"]  # noqa: E501
        if health not in allowed_values:
            raise ValueError(
                "Invalid value for `health` ({0}), must be one of {1}"
                .format(health, allowed_values)
            )

        self._health = health

    @property
    def health_description(self):
        """Gets the health_description of this Node.

        Output only. If this field is populated, it contains a description of why the TPU Node is unhealthy.

        :return: The health_description of this Node.
        :rtype: str
        """
        return self._health_description

    @health_description.setter
    def health_description(self, health_description):
        """Sets the health_description of this Node.

        Output only. If this field is populated, it contains a description of why the TPU Node is unhealthy.

        :param health_description: The health_description of this Node.
        :type health_description: str
        """

        self._health_description = health_description

    @property
    def ip_address(self):
        """Gets the ip_address of this Node.

        Output only. DEPRECATED! Use network_endpoints instead. The network address for the TPU Node as visible to Compute Engine instances.

        :return: The ip_address of this Node.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this Node.

        Output only. DEPRECATED! Use network_endpoints instead. The network address for the TPU Node as visible to Compute Engine instances.

        :param ip_address: The ip_address of this Node.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def labels(self):
        """Gets the labels of this Node.

        Resource labels to represent user-provided metadata.

        :return: The labels of this Node.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Node.

        Resource labels to represent user-provided metadata.

        :param labels: The labels of this Node.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Node.

        Output only. Immutable. The name of the TPU

        :return: The name of this Node.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Node.

        Output only. Immutable. The name of the TPU

        :param name: The name of this Node.
        :type name: str
        """

        self._name = name

    @property
    def network(self):
        """Gets the network of this Node.

        The name of a network they wish to peer the TPU node to. It must be a preexisting Compute Engine network inside of the project on which this API has been activated. If none is provided, \"default\" will be used.

        :return: The network of this Node.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this Node.

        The name of a network they wish to peer the TPU node to. It must be a preexisting Compute Engine network inside of the project on which this API has been activated. If none is provided, \"default\" will be used.

        :param network: The network of this Node.
        :type network: str
        """

        self._network = network

    @property
    def network_endpoints(self):
        """Gets the network_endpoints of this Node.

        Output only. The network endpoints where TPU workers can be accessed and sent work. It is recommended that Tensorflow clients of the node reach out to the 0th entry in this map first.

        :return: The network_endpoints of this Node.
        :rtype: List[NetworkEndpoint]
        """
        return self._network_endpoints

    @network_endpoints.setter
    def network_endpoints(self, network_endpoints):
        """Sets the network_endpoints of this Node.

        Output only. The network endpoints where TPU workers can be accessed and sent work. It is recommended that Tensorflow clients of the node reach out to the 0th entry in this map first.

        :param network_endpoints: The network_endpoints of this Node.
        :type network_endpoints: List[NetworkEndpoint]
        """

        self._network_endpoints = network_endpoints

    @property
    def port(self):
        """Gets the port of this Node.

        Output only. DEPRECATED! Use network_endpoints instead. The network port for the TPU Node as visible to Compute Engine instances.

        :return: The port of this Node.
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this Node.

        Output only. DEPRECATED! Use network_endpoints instead. The network port for the TPU Node as visible to Compute Engine instances.

        :param port: The port of this Node.
        :type port: str
        """

        self._port = port

    @property
    def scheduling_config(self):
        """Gets the scheduling_config of this Node.


        :return: The scheduling_config of this Node.
        :rtype: SchedulingConfig
        """
        return self._scheduling_config

    @scheduling_config.setter
    def scheduling_config(self, scheduling_config):
        """Sets the scheduling_config of this Node.


        :param scheduling_config: The scheduling_config of this Node.
        :type scheduling_config: SchedulingConfig
        """

        self._scheduling_config = scheduling_config

    @property
    def service_account(self):
        """Gets the service_account of this Node.

        Output only. The service account used to run the tensor flow services within the node. To share resources, including Google Cloud Storage data, with the Tensorflow job running in the Node, this account must have permissions to that data.

        :return: The service_account of this Node.
        :rtype: str
        """
        return self._service_account

    @service_account.setter
    def service_account(self, service_account):
        """Sets the service_account of this Node.

        Output only. The service account used to run the tensor flow services within the node. To share resources, including Google Cloud Storage data, with the Tensorflow job running in the Node, this account must have permissions to that data.

        :param service_account: The service_account of this Node.
        :type service_account: str
        """

        self._service_account = service_account

    @property
    def state(self):
        """Gets the state of this Node.

        Output only. The current state for the TPU Node.

        :return: The state of this Node.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Node.

        Output only. The current state for the TPU Node.

        :param state: The state of this Node.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "READY", "RESTARTING", "REIMAGING", "DELETING", "REPAIRING", "STOPPED", "STOPPING", "STARTING", "PREEMPTED", "TERMINATED", "HIDING", "HIDDEN", "UNHIDING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def symptoms(self):
        """Gets the symptoms of this Node.

        Output only. The Symptoms that have occurred to the TPU Node.

        :return: The symptoms of this Node.
        :rtype: List[Symptom]
        """
        return self._symptoms

    @symptoms.setter
    def symptoms(self, symptoms):
        """Sets the symptoms of this Node.

        Output only. The Symptoms that have occurred to the TPU Node.

        :param symptoms: The symptoms of this Node.
        :type symptoms: List[Symptom]
        """

        self._symptoms = symptoms

    @property
    def tensorflow_version(self):
        """Gets the tensorflow_version of this Node.

        Required. The version of Tensorflow running in the Node.

        :return: The tensorflow_version of this Node.
        :rtype: str
        """
        return self._tensorflow_version

    @tensorflow_version.setter
    def tensorflow_version(self, tensorflow_version):
        """Sets the tensorflow_version of this Node.

        Required. The version of Tensorflow running in the Node.

        :param tensorflow_version: The tensorflow_version of this Node.
        :type tensorflow_version: str
        """

        self._tensorflow_version = tensorflow_version

    @property
    def use_service_networking(self):
        """Gets the use_service_networking of this Node.

        Whether the VPC peering for the node is set up through Service Networking API. The VPC Peering should be set up before provisioning the node. If this field is set, cidr_block field should not be specified. If the network, that you want to peer the TPU Node to, is Shared VPC networks, the node must be created with this this field enabled.

        :return: The use_service_networking of this Node.
        :rtype: bool
        """
        return self._use_service_networking

    @use_service_networking.setter
    def use_service_networking(self, use_service_networking):
        """Sets the use_service_networking of this Node.

        Whether the VPC peering for the node is set up through Service Networking API. The VPC Peering should be set up before provisioning the node. If this field is set, cidr_block field should not be specified. If the network, that you want to peer the TPU Node to, is Shared VPC networks, the node must be created with this this field enabled.

        :param use_service_networking: The use_service_networking of this Node.
        :type use_service_networking: bool
        """

        self._use_service_networking = use_service_networking
