/**
 * Cloud TPU API
 * TPU API provides customers with access to Google TPU technology.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISchedulingConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISchedulingConfig::OAISchedulingConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISchedulingConfig::OAISchedulingConfig() {
    this->initializeModel();
}

OAISchedulingConfig::~OAISchedulingConfig() {}

void OAISchedulingConfig::initializeModel() {

    m_preemptible_isSet = false;
    m_preemptible_isValid = false;

    m_reserved_isSet = false;
    m_reserved_isValid = false;
}

void OAISchedulingConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISchedulingConfig::fromJsonObject(QJsonObject json) {

    m_preemptible_isValid = ::OpenAPI::fromJsonValue(m_preemptible, json[QString("preemptible")]);
    m_preemptible_isSet = !json[QString("preemptible")].isNull() && m_preemptible_isValid;

    m_reserved_isValid = ::OpenAPI::fromJsonValue(m_reserved, json[QString("reserved")]);
    m_reserved_isSet = !json[QString("reserved")].isNull() && m_reserved_isValid;
}

QString OAISchedulingConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISchedulingConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_preemptible_isSet) {
        obj.insert(QString("preemptible"), ::OpenAPI::toJsonValue(m_preemptible));
    }
    if (m_reserved_isSet) {
        obj.insert(QString("reserved"), ::OpenAPI::toJsonValue(m_reserved));
    }
    return obj;
}

bool OAISchedulingConfig::isPreemptible() const {
    return m_preemptible;
}
void OAISchedulingConfig::setPreemptible(const bool &preemptible) {
    m_preemptible = preemptible;
    m_preemptible_isSet = true;
}

bool OAISchedulingConfig::is_preemptible_Set() const{
    return m_preemptible_isSet;
}

bool OAISchedulingConfig::is_preemptible_Valid() const{
    return m_preemptible_isValid;
}

bool OAISchedulingConfig::isReserved() const {
    return m_reserved;
}
void OAISchedulingConfig::setReserved(const bool &reserved) {
    m_reserved = reserved;
    m_reserved_isSet = true;
}

bool OAISchedulingConfig::is_reserved_Set() const{
    return m_reserved_isSet;
}

bool OAISchedulingConfig::is_reserved_Valid() const{
    return m_reserved_isValid;
}

bool OAISchedulingConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_preemptible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISchedulingConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
