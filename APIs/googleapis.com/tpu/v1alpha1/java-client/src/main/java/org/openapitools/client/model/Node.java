/*
 * Cloud TPU API
 * TPU API provides customers with access to Google TPU technology.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.NetworkEndpoint;
import org.openapitools.client.model.SchedulingConfig;
import org.openapitools.client.model.Symptom;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A TPU instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:04.064662-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Node {
  public static final String SERIALIZED_NAME_ACCELERATOR_TYPE = "acceleratorType";
  @SerializedName(SERIALIZED_NAME_ACCELERATOR_TYPE)
  private String acceleratorType;

  /**
   * Output only. The API version that created this Node.
   */
  @JsonAdapter(ApiVersionEnum.Adapter.class)
  public enum ApiVersionEnum {
    API_VERSION_UNSPECIFIED("API_VERSION_UNSPECIFIED"),
    
    V1_ALPHA1("V1_ALPHA1"),
    
    V1("V1"),
    
    V2_ALPHA1("V2_ALPHA1");

    private String value;

    ApiVersionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApiVersionEnum fromValue(String value) {
      for (ApiVersionEnum b : ApiVersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApiVersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApiVersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApiVersionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApiVersionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ApiVersionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_API_VERSION = "apiVersion";
  @SerializedName(SERIALIZED_NAME_API_VERSION)
  private ApiVersionEnum apiVersion;

  public static final String SERIALIZED_NAME_CIDR_BLOCK = "cidrBlock";
  @SerializedName(SERIALIZED_NAME_CIDR_BLOCK)
  private String cidrBlock;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * The health status of the TPU node.
   */
  @JsonAdapter(HealthEnum.Adapter.class)
  public enum HealthEnum {
    HEALTH_UNSPECIFIED("HEALTH_UNSPECIFIED"),
    
    HEALTHY("HEALTHY"),
    
    DEPRECATED_UNHEALTHY("DEPRECATED_UNHEALTHY"),
    
    TIMEOUT("TIMEOUT"),
    
    UNHEALTHY_TENSORFLOW("UNHEALTHY_TENSORFLOW"),
    
    UNHEALTHY_MAINTENANCE("UNHEALTHY_MAINTENANCE");

    private String value;

    HealthEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HealthEnum fromValue(String value) {
      for (HealthEnum b : HealthEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HealthEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HealthEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HealthEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HealthEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HealthEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HEALTH = "health";
  @SerializedName(SERIALIZED_NAME_HEALTH)
  private HealthEnum health;

  public static final String SERIALIZED_NAME_HEALTH_DESCRIPTION = "healthDescription";
  @SerializedName(SERIALIZED_NAME_HEALTH_DESCRIPTION)
  private String healthDescription;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ipAddress";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private String network;

  public static final String SERIALIZED_NAME_NETWORK_ENDPOINTS = "networkEndpoints";
  @SerializedName(SERIALIZED_NAME_NETWORK_ENDPOINTS)
  private List<NetworkEndpoint> networkEndpoints = new ArrayList<>();

  public static final String SERIALIZED_NAME_PORT = "port";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_PORT)
  private String port;

  public static final String SERIALIZED_NAME_SCHEDULING_CONFIG = "schedulingConfig";
  @SerializedName(SERIALIZED_NAME_SCHEDULING_CONFIG)
  private SchedulingConfig schedulingConfig;

  public static final String SERIALIZED_NAME_SERVICE_ACCOUNT = "serviceAccount";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNT)
  private String serviceAccount;

  /**
   * Output only. The current state for the TPU Node.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    CREATING("CREATING"),
    
    READY("READY"),
    
    RESTARTING("RESTARTING"),
    
    REIMAGING("REIMAGING"),
    
    DELETING("DELETING"),
    
    REPAIRING("REPAIRING"),
    
    STOPPED("STOPPED"),
    
    STOPPING("STOPPING"),
    
    STARTING("STARTING"),
    
    PREEMPTED("PREEMPTED"),
    
    TERMINATED("TERMINATED"),
    
    HIDING("HIDING"),
    
    HIDDEN("HIDDEN"),
    
    UNHIDING("UNHIDING");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_SYMPTOMS = "symptoms";
  @SerializedName(SERIALIZED_NAME_SYMPTOMS)
  private List<Symptom> symptoms = new ArrayList<>();

  public static final String SERIALIZED_NAME_TENSORFLOW_VERSION = "tensorflowVersion";
  @SerializedName(SERIALIZED_NAME_TENSORFLOW_VERSION)
  private String tensorflowVersion;

  public static final String SERIALIZED_NAME_USE_SERVICE_NETWORKING = "useServiceNetworking";
  @SerializedName(SERIALIZED_NAME_USE_SERVICE_NETWORKING)
  private Boolean useServiceNetworking;

  public Node() {
  }

  public Node(
     ApiVersionEnum apiVersion, 
     String createTime, 
     String healthDescription, 
     String name, 
     List<NetworkEndpoint> networkEndpoints, 
     String serviceAccount, 
     StateEnum state, 
     List<Symptom> symptoms
  ) {
    this();
    this.apiVersion = apiVersion;
    this.createTime = createTime;
    this.healthDescription = healthDescription;
    this.name = name;
    this.networkEndpoints = networkEndpoints;
    this.serviceAccount = serviceAccount;
    this.state = state;
    this.symptoms = symptoms;
  }

  public Node acceleratorType(String acceleratorType) {
    this.acceleratorType = acceleratorType;
    return this;
  }

  /**
   * Required. The type of hardware accelerators associated with this node.
   * @return acceleratorType
   */
  @javax.annotation.Nullable
  public String getAcceleratorType() {
    return acceleratorType;
  }

  public void setAcceleratorType(String acceleratorType) {
    this.acceleratorType = acceleratorType;
  }


  /**
   * Output only. The API version that created this Node.
   * @return apiVersion
   */
  @javax.annotation.Nullable
  public ApiVersionEnum getApiVersion() {
    return apiVersion;
  }



  public Node cidrBlock(String cidrBlock) {
    this.cidrBlock = cidrBlock;
    return this;
  }

  /**
   * The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger block would be wasteful (a node can only consume one IP address). Errors will occur if the CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts with any subnetworks in the user&#39;s provided network, or the provided network is peered with another network that is using that CIDR block.
   * @return cidrBlock
   */
  @javax.annotation.Nullable
  public String getCidrBlock() {
    return cidrBlock;
  }

  public void setCidrBlock(String cidrBlock) {
    this.cidrBlock = cidrBlock;
  }


  /**
   * Output only. The time when the node was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public Node description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The user-supplied description of the TPU. Maximum of 512 characters.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Node health(HealthEnum health) {
    this.health = health;
    return this;
  }

  /**
   * The health status of the TPU node.
   * @return health
   */
  @javax.annotation.Nullable
  public HealthEnum getHealth() {
    return health;
  }

  public void setHealth(HealthEnum health) {
    this.health = health;
  }


  /**
   * Output only. If this field is populated, it contains a description of why the TPU Node is unhealthy.
   * @return healthDescription
   */
  @javax.annotation.Nullable
  public String getHealthDescription() {
    return healthDescription;
  }



  @Deprecated
  public Node ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * Output only. DEPRECATED! Use network_endpoints instead. The network address for the TPU Node as visible to Compute Engine instances.
   * @return ipAddress
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  @Deprecated
  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public Node labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public Node putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Resource labels to represent user-provided metadata.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  /**
   * Output only. Immutable. The name of the TPU
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public Node network(String network) {
    this.network = network;
    return this;
  }

  /**
   * The name of a network they wish to peer the TPU node to. It must be a preexisting Compute Engine network inside of the project on which this API has been activated. If none is provided, \&quot;default\&quot; will be used.
   * @return network
   */
  @javax.annotation.Nullable
  public String getNetwork() {
    return network;
  }

  public void setNetwork(String network) {
    this.network = network;
  }


  /**
   * Output only. The network endpoints where TPU workers can be accessed and sent work. It is recommended that Tensorflow clients of the node reach out to the 0th entry in this map first.
   * @return networkEndpoints
   */
  @javax.annotation.Nullable
  public List<NetworkEndpoint> getNetworkEndpoints() {
    return networkEndpoints;
  }



  @Deprecated
  public Node port(String port) {
    this.port = port;
    return this;
  }

  /**
   * Output only. DEPRECATED! Use network_endpoints instead. The network port for the TPU Node as visible to Compute Engine instances.
   * @return port
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getPort() {
    return port;
  }

  @Deprecated
  public void setPort(String port) {
    this.port = port;
  }


  public Node schedulingConfig(SchedulingConfig schedulingConfig) {
    this.schedulingConfig = schedulingConfig;
    return this;
  }

  /**
   * Get schedulingConfig
   * @return schedulingConfig
   */
  @javax.annotation.Nullable
  public SchedulingConfig getSchedulingConfig() {
    return schedulingConfig;
  }

  public void setSchedulingConfig(SchedulingConfig schedulingConfig) {
    this.schedulingConfig = schedulingConfig;
  }


  /**
   * Output only. The service account used to run the tensor flow services within the node. To share resources, including Google Cloud Storage data, with the Tensorflow job running in the Node, this account must have permissions to that data.
   * @return serviceAccount
   */
  @javax.annotation.Nullable
  public String getServiceAccount() {
    return serviceAccount;
  }



  /**
   * Output only. The current state for the TPU Node.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. The Symptoms that have occurred to the TPU Node.
   * @return symptoms
   */
  @javax.annotation.Nullable
  public List<Symptom> getSymptoms() {
    return symptoms;
  }



  public Node tensorflowVersion(String tensorflowVersion) {
    this.tensorflowVersion = tensorflowVersion;
    return this;
  }

  /**
   * Required. The version of Tensorflow running in the Node.
   * @return tensorflowVersion
   */
  @javax.annotation.Nullable
  public String getTensorflowVersion() {
    return tensorflowVersion;
  }

  public void setTensorflowVersion(String tensorflowVersion) {
    this.tensorflowVersion = tensorflowVersion;
  }


  public Node useServiceNetworking(Boolean useServiceNetworking) {
    this.useServiceNetworking = useServiceNetworking;
    return this;
  }

  /**
   * Whether the VPC peering for the node is set up through Service Networking API. The VPC Peering should be set up before provisioning the node. If this field is set, cidr_block field should not be specified. If the network, that you want to peer the TPU Node to, is Shared VPC networks, the node must be created with this this field enabled.
   * @return useServiceNetworking
   */
  @javax.annotation.Nullable
  public Boolean getUseServiceNetworking() {
    return useServiceNetworking;
  }

  public void setUseServiceNetworking(Boolean useServiceNetworking) {
    this.useServiceNetworking = useServiceNetworking;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Node node = (Node) o;
    return Objects.equals(this.acceleratorType, node.acceleratorType) &&
        Objects.equals(this.apiVersion, node.apiVersion) &&
        Objects.equals(this.cidrBlock, node.cidrBlock) &&
        Objects.equals(this.createTime, node.createTime) &&
        Objects.equals(this.description, node.description) &&
        Objects.equals(this.health, node.health) &&
        Objects.equals(this.healthDescription, node.healthDescription) &&
        Objects.equals(this.ipAddress, node.ipAddress) &&
        Objects.equals(this.labels, node.labels) &&
        Objects.equals(this.name, node.name) &&
        Objects.equals(this.network, node.network) &&
        Objects.equals(this.networkEndpoints, node.networkEndpoints) &&
        Objects.equals(this.port, node.port) &&
        Objects.equals(this.schedulingConfig, node.schedulingConfig) &&
        Objects.equals(this.serviceAccount, node.serviceAccount) &&
        Objects.equals(this.state, node.state) &&
        Objects.equals(this.symptoms, node.symptoms) &&
        Objects.equals(this.tensorflowVersion, node.tensorflowVersion) &&
        Objects.equals(this.useServiceNetworking, node.useServiceNetworking);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceleratorType, apiVersion, cidrBlock, createTime, description, health, healthDescription, ipAddress, labels, name, network, networkEndpoints, port, schedulingConfig, serviceAccount, state, symptoms, tensorflowVersion, useServiceNetworking);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Node {\n");
    sb.append("    acceleratorType: ").append(toIndentedString(acceleratorType)).append("\n");
    sb.append("    apiVersion: ").append(toIndentedString(apiVersion)).append("\n");
    sb.append("    cidrBlock: ").append(toIndentedString(cidrBlock)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    health: ").append(toIndentedString(health)).append("\n");
    sb.append("    healthDescription: ").append(toIndentedString(healthDescription)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    networkEndpoints: ").append(toIndentedString(networkEndpoints)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    schedulingConfig: ").append(toIndentedString(schedulingConfig)).append("\n");
    sb.append("    serviceAccount: ").append(toIndentedString(serviceAccount)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    symptoms: ").append(toIndentedString(symptoms)).append("\n");
    sb.append("    tensorflowVersion: ").append(toIndentedString(tensorflowVersion)).append("\n");
    sb.append("    useServiceNetworking: ").append(toIndentedString(useServiceNetworking)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acceleratorType");
    openapiFields.add("apiVersion");
    openapiFields.add("cidrBlock");
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("health");
    openapiFields.add("healthDescription");
    openapiFields.add("ipAddress");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("network");
    openapiFields.add("networkEndpoints");
    openapiFields.add("port");
    openapiFields.add("schedulingConfig");
    openapiFields.add("serviceAccount");
    openapiFields.add("state");
    openapiFields.add("symptoms");
    openapiFields.add("tensorflowVersion");
    openapiFields.add("useServiceNetworking");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Node
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Node.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Node is not found in the empty JSON string", Node.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Node.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Node` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("acceleratorType") != null && !jsonObj.get("acceleratorType").isJsonNull()) && !jsonObj.get("acceleratorType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acceleratorType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acceleratorType").toString()));
      }
      if ((jsonObj.get("apiVersion") != null && !jsonObj.get("apiVersion").isJsonNull()) && !jsonObj.get("apiVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiVersion").toString()));
      }
      // validate the optional field `apiVersion`
      if (jsonObj.get("apiVersion") != null && !jsonObj.get("apiVersion").isJsonNull()) {
        ApiVersionEnum.validateJsonElement(jsonObj.get("apiVersion"));
      }
      if ((jsonObj.get("cidrBlock") != null && !jsonObj.get("cidrBlock").isJsonNull()) && !jsonObj.get("cidrBlock").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cidrBlock` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cidrBlock").toString()));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("health") != null && !jsonObj.get("health").isJsonNull()) && !jsonObj.get("health").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `health` to be a primitive type in the JSON string but got `%s`", jsonObj.get("health").toString()));
      }
      // validate the optional field `health`
      if (jsonObj.get("health") != null && !jsonObj.get("health").isJsonNull()) {
        HealthEnum.validateJsonElement(jsonObj.get("health"));
      }
      if ((jsonObj.get("healthDescription") != null && !jsonObj.get("healthDescription").isJsonNull()) && !jsonObj.get("healthDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `healthDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("healthDescription").toString()));
      }
      if ((jsonObj.get("ipAddress") != null && !jsonObj.get("ipAddress").isJsonNull()) && !jsonObj.get("ipAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipAddress").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      if (jsonObj.get("networkEndpoints") != null && !jsonObj.get("networkEndpoints").isJsonNull()) {
        JsonArray jsonArraynetworkEndpoints = jsonObj.getAsJsonArray("networkEndpoints");
        if (jsonArraynetworkEndpoints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("networkEndpoints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `networkEndpoints` to be an array in the JSON string but got `%s`", jsonObj.get("networkEndpoints").toString()));
          }

          // validate the optional field `networkEndpoints` (array)
          for (int i = 0; i < jsonArraynetworkEndpoints.size(); i++) {
            NetworkEndpoint.validateJsonElement(jsonArraynetworkEndpoints.get(i));
          };
        }
      }
      if ((jsonObj.get("port") != null && !jsonObj.get("port").isJsonNull()) && !jsonObj.get("port").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `port` to be a primitive type in the JSON string but got `%s`", jsonObj.get("port").toString()));
      }
      // validate the optional field `schedulingConfig`
      if (jsonObj.get("schedulingConfig") != null && !jsonObj.get("schedulingConfig").isJsonNull()) {
        SchedulingConfig.validateJsonElement(jsonObj.get("schedulingConfig"));
      }
      if ((jsonObj.get("serviceAccount") != null && !jsonObj.get("serviceAccount").isJsonNull()) && !jsonObj.get("serviceAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceAccount").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if (jsonObj.get("symptoms") != null && !jsonObj.get("symptoms").isJsonNull()) {
        JsonArray jsonArraysymptoms = jsonObj.getAsJsonArray("symptoms");
        if (jsonArraysymptoms != null) {
          // ensure the json data is an array
          if (!jsonObj.get("symptoms").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `symptoms` to be an array in the JSON string but got `%s`", jsonObj.get("symptoms").toString()));
          }

          // validate the optional field `symptoms` (array)
          for (int i = 0; i < jsonArraysymptoms.size(); i++) {
            Symptom.validateJsonElement(jsonArraysymptoms.get(i));
          };
        }
      }
      if ((jsonObj.get("tensorflowVersion") != null && !jsonObj.get("tensorflowVersion").isJsonNull()) && !jsonObj.get("tensorflowVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tensorflowVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tensorflowVersion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Node.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Node' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Node> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Node.class));

       return (TypeAdapter<T>) new TypeAdapter<Node>() {
           @Override
           public void write(JsonWriter out, Node value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Node read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Node given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Node
   * @throws IOException if the JSON string is invalid with respect to Node
   */
  public static Node fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Node.class);
  }

  /**
   * Convert an instance of Node to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

