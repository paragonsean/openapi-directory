/**
 * Cloud TPU API
 * TPU API provides customers with access to Google TPU technology.
 *
 * The version of the OpenAPI document: v2alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Interval from './Interval';
import Usage from './Usage';

/**
 * The Standard model module.
 * @module model/Standard
 * @version v2alpha1
 */
class Standard {
    /**
     * Constructs a new <code>Standard</code>.
     * @alias module:model/Standard
     */
    constructor() { 
        
        Standard.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Standard</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Standard} obj Optional instance to populate.
     * @return {module:model/Standard} The populated <code>Standard</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Standard();

            if (data.hasOwnProperty('capacityUnits')) {
                obj['capacityUnits'] = ApiClient.convertToType(data['capacityUnits'], 'String');
            }
            if (data.hasOwnProperty('interval')) {
                obj['interval'] = Interval.constructFromObject(data['interval']);
            }
            if (data.hasOwnProperty('resourceType')) {
                obj['resourceType'] = ApiClient.convertToType(data['resourceType'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('usage')) {
                obj['usage'] = Usage.constructFromObject(data['usage']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Standard</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Standard</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['capacityUnits'] && !(typeof data['capacityUnits'] === 'string' || data['capacityUnits'] instanceof String)) {
            throw new Error("Expected the field `capacityUnits` to be a primitive type in the JSON string but got " + data['capacityUnits']);
        }
        // validate the optional field `interval`
        if (data['interval']) { // data not null
          Interval.validateJSON(data['interval']);
        }
        // ensure the json data is a string
        if (data['resourceType'] && !(typeof data['resourceType'] === 'string' || data['resourceType'] instanceof String)) {
            throw new Error("Expected the field `resourceType` to be a primitive type in the JSON string but got " + data['resourceType']);
        }
        // validate the optional field `usage`
        if (data['usage']) { // data not null
          Usage.validateJSON(data['usage']);
        }

        return true;
    }


}



/**
 * @member {module:model/Standard.CapacityUnitsEnum} capacityUnits
 */
Standard.prototype['capacityUnits'] = undefined;

/**
 * @member {module:model/Interval} interval
 */
Standard.prototype['interval'] = undefined;

/**
 * The resource type of the reservation.
 * @member {String} resourceType
 */
Standard.prototype['resourceType'] = undefined;

/**
 * The size of the reservation, in the units specified in the 'capacity_units' field.
 * @member {Number} size
 */
Standard.prototype['size'] = undefined;

/**
 * @member {module:model/Usage} usage
 */
Standard.prototype['usage'] = undefined;





/**
 * Allowed values for the <code>capacityUnits</code> property.
 * @enum {String}
 * @readonly
 */
Standard['CapacityUnitsEnum'] = {

    /**
     * value: "CAPACITY_UNITS_UNSPECIFIED"
     * @const
     */
    "CAPACITY_UNITS_UNSPECIFIED": "CAPACITY_UNITS_UNSPECIFIED",

    /**
     * value: "CORES"
     * @const
     */
    "CORES": "CORES",

    /**
     * value: "CHIPS"
     * @const
     */
    "CHIPS": "CHIPS"
};



export default Standard;

