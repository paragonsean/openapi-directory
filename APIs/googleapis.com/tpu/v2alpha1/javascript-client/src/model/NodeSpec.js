/**
 * Cloud TPU API
 * TPU API provides customers with access to Google TPU technology.
 *
 * The version of the OpenAPI document: v2alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MultiNodeParams from './MultiNodeParams';
import Node from './Node';

/**
 * The NodeSpec model module.
 * @module model/NodeSpec
 * @version v2alpha1
 */
class NodeSpec {
    /**
     * Constructs a new <code>NodeSpec</code>.
     * Details of the TPU node(s) being requested. Users can request either a single node or multiple nodes. NodeSpec provides the specification for node(s) to be created.
     * @alias module:model/NodeSpec
     */
    constructor() { 
        
        NodeSpec.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NodeSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NodeSpec} obj Optional instance to populate.
     * @return {module:model/NodeSpec} The populated <code>NodeSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NodeSpec();

            if (data.hasOwnProperty('multiNodeParams')) {
                obj['multiNodeParams'] = MultiNodeParams.constructFromObject(data['multiNodeParams']);
            }
            if (data.hasOwnProperty('node')) {
                obj['node'] = Node.constructFromObject(data['node']);
            }
            if (data.hasOwnProperty('nodeId')) {
                obj['nodeId'] = ApiClient.convertToType(data['nodeId'], 'String');
            }
            if (data.hasOwnProperty('parent')) {
                obj['parent'] = ApiClient.convertToType(data['parent'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NodeSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NodeSpec</code>.
     */
    static validateJSON(data) {
        // validate the optional field `multiNodeParams`
        if (data['multiNodeParams']) { // data not null
          MultiNodeParams.validateJSON(data['multiNodeParams']);
        }
        // validate the optional field `node`
        if (data['node']) { // data not null
          Node.validateJSON(data['node']);
        }
        // ensure the json data is a string
        if (data['nodeId'] && !(typeof data['nodeId'] === 'string' || data['nodeId'] instanceof String)) {
            throw new Error("Expected the field `nodeId` to be a primitive type in the JSON string but got " + data['nodeId']);
        }
        // ensure the json data is a string
        if (data['parent'] && !(typeof data['parent'] === 'string' || data['parent'] instanceof String)) {
            throw new Error("Expected the field `parent` to be a primitive type in the JSON string but got " + data['parent']);
        }

        return true;
    }


}



/**
 * @member {module:model/MultiNodeParams} multiNodeParams
 */
NodeSpec.prototype['multiNodeParams'] = undefined;

/**
 * @member {module:model/Node} node
 */
NodeSpec.prototype['node'] = undefined;

/**
 * The unqualified resource name. Should follow the `^[A-Za-z0-9_.~+%-]+$` regex format. This is only specified when requesting a single node. In case of multi-node requests, multi_node_params must be populated instead. It's an error to specify both node_id and multi_node_params.
 * @member {String} nodeId
 */
NodeSpec.prototype['nodeId'] = undefined;

/**
 * Required. The parent resource name.
 * @member {String} parent
 */
NodeSpec.prototype['parent'] = undefined;






export default NodeSpec;

