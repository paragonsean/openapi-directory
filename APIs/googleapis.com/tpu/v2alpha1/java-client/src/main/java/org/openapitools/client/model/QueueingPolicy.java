/*
 * Cloud TPU API
 * TPU API provides customers with access to Google TPU technology.
 *
 * The version of the OpenAPI document: v2alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Interval;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines the policy of the QueuedRequest.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:04.218141-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QueueingPolicy {
  public static final String SERIALIZED_NAME_VALID_AFTER_DURATION = "validAfterDuration";
  @SerializedName(SERIALIZED_NAME_VALID_AFTER_DURATION)
  private String validAfterDuration;

  public static final String SERIALIZED_NAME_VALID_AFTER_TIME = "validAfterTime";
  @SerializedName(SERIALIZED_NAME_VALID_AFTER_TIME)
  private String validAfterTime;

  public static final String SERIALIZED_NAME_VALID_INTERVAL = "validInterval";
  @SerializedName(SERIALIZED_NAME_VALID_INTERVAL)
  private Interval validInterval;

  public static final String SERIALIZED_NAME_VALID_UNTIL_DURATION = "validUntilDuration";
  @SerializedName(SERIALIZED_NAME_VALID_UNTIL_DURATION)
  private String validUntilDuration;

  public static final String SERIALIZED_NAME_VALID_UNTIL_TIME = "validUntilTime";
  @SerializedName(SERIALIZED_NAME_VALID_UNTIL_TIME)
  private String validUntilTime;

  public QueueingPolicy() {
  }

  public QueueingPolicy validAfterDuration(String validAfterDuration) {
    this.validAfterDuration = validAfterDuration;
    return this;
  }

  /**
   * A relative time after which resources may be created.
   * @return validAfterDuration
   */
  @javax.annotation.Nullable
  public String getValidAfterDuration() {
    return validAfterDuration;
  }

  public void setValidAfterDuration(String validAfterDuration) {
    this.validAfterDuration = validAfterDuration;
  }


  public QueueingPolicy validAfterTime(String validAfterTime) {
    this.validAfterTime = validAfterTime;
    return this;
  }

  /**
   * An absolute time at which resources may be created.
   * @return validAfterTime
   */
  @javax.annotation.Nullable
  public String getValidAfterTime() {
    return validAfterTime;
  }

  public void setValidAfterTime(String validAfterTime) {
    this.validAfterTime = validAfterTime;
  }


  public QueueingPolicy validInterval(Interval validInterval) {
    this.validInterval = validInterval;
    return this;
  }

  /**
   * Get validInterval
   * @return validInterval
   */
  @javax.annotation.Nullable
  public Interval getValidInterval() {
    return validInterval;
  }

  public void setValidInterval(Interval validInterval) {
    this.validInterval = validInterval;
  }


  public QueueingPolicy validUntilDuration(String validUntilDuration) {
    this.validUntilDuration = validUntilDuration;
    return this;
  }

  /**
   * A relative time after which resources should not be created. If the request cannot be fulfilled by this time the request will be failed.
   * @return validUntilDuration
   */
  @javax.annotation.Nullable
  public String getValidUntilDuration() {
    return validUntilDuration;
  }

  public void setValidUntilDuration(String validUntilDuration) {
    this.validUntilDuration = validUntilDuration;
  }


  public QueueingPolicy validUntilTime(String validUntilTime) {
    this.validUntilTime = validUntilTime;
    return this;
  }

  /**
   * An absolute time after which resources should not be created. If the request cannot be fulfilled by this time the request will be failed.
   * @return validUntilTime
   */
  @javax.annotation.Nullable
  public String getValidUntilTime() {
    return validUntilTime;
  }

  public void setValidUntilTime(String validUntilTime) {
    this.validUntilTime = validUntilTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueueingPolicy queueingPolicy = (QueueingPolicy) o;
    return Objects.equals(this.validAfterDuration, queueingPolicy.validAfterDuration) &&
        Objects.equals(this.validAfterTime, queueingPolicy.validAfterTime) &&
        Objects.equals(this.validInterval, queueingPolicy.validInterval) &&
        Objects.equals(this.validUntilDuration, queueingPolicy.validUntilDuration) &&
        Objects.equals(this.validUntilTime, queueingPolicy.validUntilTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(validAfterDuration, validAfterTime, validInterval, validUntilDuration, validUntilTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueueingPolicy {\n");
    sb.append("    validAfterDuration: ").append(toIndentedString(validAfterDuration)).append("\n");
    sb.append("    validAfterTime: ").append(toIndentedString(validAfterTime)).append("\n");
    sb.append("    validInterval: ").append(toIndentedString(validInterval)).append("\n");
    sb.append("    validUntilDuration: ").append(toIndentedString(validUntilDuration)).append("\n");
    sb.append("    validUntilTime: ").append(toIndentedString(validUntilTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("validAfterDuration");
    openapiFields.add("validAfterTime");
    openapiFields.add("validInterval");
    openapiFields.add("validUntilDuration");
    openapiFields.add("validUntilTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueueingPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueueingPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueueingPolicy is not found in the empty JSON string", QueueingPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueueingPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueueingPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("validAfterDuration") != null && !jsonObj.get("validAfterDuration").isJsonNull()) && !jsonObj.get("validAfterDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validAfterDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validAfterDuration").toString()));
      }
      if ((jsonObj.get("validAfterTime") != null && !jsonObj.get("validAfterTime").isJsonNull()) && !jsonObj.get("validAfterTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validAfterTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validAfterTime").toString()));
      }
      // validate the optional field `validInterval`
      if (jsonObj.get("validInterval") != null && !jsonObj.get("validInterval").isJsonNull()) {
        Interval.validateJsonElement(jsonObj.get("validInterval"));
      }
      if ((jsonObj.get("validUntilDuration") != null && !jsonObj.get("validUntilDuration").isJsonNull()) && !jsonObj.get("validUntilDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validUntilDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validUntilDuration").toString()));
      }
      if ((jsonObj.get("validUntilTime") != null && !jsonObj.get("validUntilTime").isJsonNull()) && !jsonObj.get("validUntilTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validUntilTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validUntilTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueueingPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueueingPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueueingPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueueingPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<QueueingPolicy>() {
           @Override
           public void write(JsonWriter out, QueueingPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueueingPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueueingPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueueingPolicy
   * @throws IOException if the JSON string is invalid with respect to QueueingPolicy
   */
  public static QueueingPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueueingPolicy.class);
  }

  /**
   * Convert an instance of QueueingPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

