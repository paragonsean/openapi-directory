/*
 * Cloud TPU API
 * TPU API provides customers with access to Google TPU technology.
 *
 * The version of the OpenAPI document: v2alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AcceleratorConfig;
import org.openapitools.client.model.AttachedDisk;
import org.openapitools.client.model.BootDiskConfig;
import org.openapitools.client.model.NetworkConfig;
import org.openapitools.client.model.NetworkEndpoint;
import org.openapitools.client.model.SchedulingConfig;
import org.openapitools.client.model.ServiceAccount;
import org.openapitools.client.model.ShieldedInstanceConfig;
import org.openapitools.client.model.Symptom;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A TPU instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:04.218141-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Node {
  public static final String SERIALIZED_NAME_ACCELERATOR_CONFIG = "acceleratorConfig";
  @SerializedName(SERIALIZED_NAME_ACCELERATOR_CONFIG)
  private AcceleratorConfig acceleratorConfig;

  public static final String SERIALIZED_NAME_ACCELERATOR_TYPE = "acceleratorType";
  @SerializedName(SERIALIZED_NAME_ACCELERATOR_TYPE)
  private String acceleratorType;

  /**
   * Output only. The API version that created this Node.
   */
  @JsonAdapter(ApiVersionEnum.Adapter.class)
  public enum ApiVersionEnum {
    API_VERSION_UNSPECIFIED("API_VERSION_UNSPECIFIED"),
    
    V1_ALPHA1("V1_ALPHA1"),
    
    V1("V1"),
    
    V2_ALPHA1("V2_ALPHA1");

    private String value;

    ApiVersionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApiVersionEnum fromValue(String value) {
      for (ApiVersionEnum b : ApiVersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApiVersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApiVersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApiVersionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApiVersionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ApiVersionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_API_VERSION = "apiVersion";
  @SerializedName(SERIALIZED_NAME_API_VERSION)
  private ApiVersionEnum apiVersion;

  public static final String SERIALIZED_NAME_AUTOCHECKPOINT_ENABLED = "autocheckpointEnabled";
  @SerializedName(SERIALIZED_NAME_AUTOCHECKPOINT_ENABLED)
  private Boolean autocheckpointEnabled;

  public static final String SERIALIZED_NAME_BOOT_DISK_CONFIG = "bootDiskConfig";
  @SerializedName(SERIALIZED_NAME_BOOT_DISK_CONFIG)
  private BootDiskConfig bootDiskConfig;

  public static final String SERIALIZED_NAME_CIDR_BLOCK = "cidrBlock";
  @SerializedName(SERIALIZED_NAME_CIDR_BLOCK)
  private String cidrBlock;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DATA_DISKS = "dataDisks";
  @SerializedName(SERIALIZED_NAME_DATA_DISKS)
  private List<AttachedDisk> dataDisks = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * The health status of the TPU node.
   */
  @JsonAdapter(HealthEnum.Adapter.class)
  public enum HealthEnum {
    HEALTH_UNSPECIFIED("HEALTH_UNSPECIFIED"),
    
    HEALTHY("HEALTHY"),
    
    TIMEOUT("TIMEOUT"),
    
    UNHEALTHY_TENSORFLOW("UNHEALTHY_TENSORFLOW"),
    
    UNHEALTHY_MAINTENANCE("UNHEALTHY_MAINTENANCE");

    private String value;

    HealthEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HealthEnum fromValue(String value) {
      for (HealthEnum b : HealthEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HealthEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HealthEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HealthEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HealthEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HealthEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HEALTH = "health";
  @SerializedName(SERIALIZED_NAME_HEALTH)
  private HealthEnum health;

  public static final String SERIALIZED_NAME_HEALTH_DESCRIPTION = "healthDescription";
  @SerializedName(SERIALIZED_NAME_HEALTH_DESCRIPTION)
  private String healthDescription;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, String> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_MULTISLICE_NODE = "multisliceNode";
  @SerializedName(SERIALIZED_NAME_MULTISLICE_NODE)
  private Boolean multisliceNode;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NETWORK_CONFIG = "networkConfig";
  @SerializedName(SERIALIZED_NAME_NETWORK_CONFIG)
  private NetworkConfig networkConfig;

  public static final String SERIALIZED_NAME_NETWORK_ENDPOINTS = "networkEndpoints";
  @SerializedName(SERIALIZED_NAME_NETWORK_ENDPOINTS)
  private List<NetworkEndpoint> networkEndpoints = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUEUED_RESOURCE = "queuedResource";
  @SerializedName(SERIALIZED_NAME_QUEUED_RESOURCE)
  private String queuedResource;

  public static final String SERIALIZED_NAME_RUNTIME_VERSION = "runtimeVersion";
  @SerializedName(SERIALIZED_NAME_RUNTIME_VERSION)
  private String runtimeVersion;

  public static final String SERIALIZED_NAME_SCHEDULING_CONFIG = "schedulingConfig";
  @SerializedName(SERIALIZED_NAME_SCHEDULING_CONFIG)
  private SchedulingConfig schedulingConfig;

  public static final String SERIALIZED_NAME_SERVICE_ACCOUNT = "serviceAccount";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNT)
  private ServiceAccount serviceAccount;

  public static final String SERIALIZED_NAME_SHIELDED_INSTANCE_CONFIG = "shieldedInstanceConfig";
  @SerializedName(SERIALIZED_NAME_SHIELDED_INSTANCE_CONFIG)
  private ShieldedInstanceConfig shieldedInstanceConfig;

  /**
   * Output only. The current state for the TPU Node.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    CREATING("CREATING"),
    
    READY("READY"),
    
    RESTARTING("RESTARTING"),
    
    REIMAGING("REIMAGING"),
    
    DELETING("DELETING"),
    
    REPAIRING("REPAIRING"),
    
    STOPPED("STOPPED"),
    
    STOPPING("STOPPING"),
    
    STARTING("STARTING"),
    
    PREEMPTED("PREEMPTED"),
    
    TERMINATED("TERMINATED"),
    
    HIDING("HIDING"),
    
    HIDDEN("HIDDEN"),
    
    UNHIDING("UNHIDING");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_SYMPTOMS = "symptoms";
  @SerializedName(SERIALIZED_NAME_SYMPTOMS)
  private List<Symptom> symptoms = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public Node() {
  }

  public Node(
     ApiVersionEnum apiVersion, 
     String createTime, 
     String healthDescription, 
     String id, 
     Boolean multisliceNode, 
     String name, 
     List<NetworkEndpoint> networkEndpoints, 
     String queuedResource, 
     StateEnum state, 
     List<Symptom> symptoms
  ) {
    this();
    this.apiVersion = apiVersion;
    this.createTime = createTime;
    this.healthDescription = healthDescription;
    this.id = id;
    this.multisliceNode = multisliceNode;
    this.name = name;
    this.networkEndpoints = networkEndpoints;
    this.queuedResource = queuedResource;
    this.state = state;
    this.symptoms = symptoms;
  }

  public Node acceleratorConfig(AcceleratorConfig acceleratorConfig) {
    this.acceleratorConfig = acceleratorConfig;
    return this;
  }

  /**
   * Get acceleratorConfig
   * @return acceleratorConfig
   */
  @javax.annotation.Nullable
  public AcceleratorConfig getAcceleratorConfig() {
    return acceleratorConfig;
  }

  public void setAcceleratorConfig(AcceleratorConfig acceleratorConfig) {
    this.acceleratorConfig = acceleratorConfig;
  }


  public Node acceleratorType(String acceleratorType) {
    this.acceleratorType = acceleratorType;
    return this;
  }

  /**
   * The type of hardware accelerators associated with this node.
   * @return acceleratorType
   */
  @javax.annotation.Nullable
  public String getAcceleratorType() {
    return acceleratorType;
  }

  public void setAcceleratorType(String acceleratorType) {
    this.acceleratorType = acceleratorType;
  }


  /**
   * Output only. The API version that created this Node.
   * @return apiVersion
   */
  @javax.annotation.Nullable
  public ApiVersionEnum getApiVersion() {
    return apiVersion;
  }



  public Node autocheckpointEnabled(Boolean autocheckpointEnabled) {
    this.autocheckpointEnabled = autocheckpointEnabled;
    return this;
  }

  /**
   * Optional. Whether Autocheckpoint is enabled.
   * @return autocheckpointEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAutocheckpointEnabled() {
    return autocheckpointEnabled;
  }

  public void setAutocheckpointEnabled(Boolean autocheckpointEnabled) {
    this.autocheckpointEnabled = autocheckpointEnabled;
  }


  public Node bootDiskConfig(BootDiskConfig bootDiskConfig) {
    this.bootDiskConfig = bootDiskConfig;
    return this;
  }

  /**
   * Get bootDiskConfig
   * @return bootDiskConfig
   */
  @javax.annotation.Nullable
  public BootDiskConfig getBootDiskConfig() {
    return bootDiskConfig;
  }

  public void setBootDiskConfig(BootDiskConfig bootDiskConfig) {
    this.bootDiskConfig = bootDiskConfig;
  }


  public Node cidrBlock(String cidrBlock) {
    this.cidrBlock = cidrBlock;
    return this;
  }

  /**
   * The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger block would be wasteful (a node can only consume one IP address). Errors will occur if the CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts with any subnetworks in the user&#39;s provided network, or the provided network is peered with another network that is using that CIDR block.
   * @return cidrBlock
   */
  @javax.annotation.Nullable
  public String getCidrBlock() {
    return cidrBlock;
  }

  public void setCidrBlock(String cidrBlock) {
    this.cidrBlock = cidrBlock;
  }


  /**
   * Output only. The time when the node was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public Node dataDisks(List<AttachedDisk> dataDisks) {
    this.dataDisks = dataDisks;
    return this;
  }

  public Node addDataDisksItem(AttachedDisk dataDisksItem) {
    if (this.dataDisks == null) {
      this.dataDisks = new ArrayList<>();
    }
    this.dataDisks.add(dataDisksItem);
    return this;
  }

  /**
   * The additional data disks for the Node.
   * @return dataDisks
   */
  @javax.annotation.Nullable
  public List<AttachedDisk> getDataDisks() {
    return dataDisks;
  }

  public void setDataDisks(List<AttachedDisk> dataDisks) {
    this.dataDisks = dataDisks;
  }


  public Node description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The user-supplied description of the TPU. Maximum of 512 characters.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Node health(HealthEnum health) {
    this.health = health;
    return this;
  }

  /**
   * The health status of the TPU node.
   * @return health
   */
  @javax.annotation.Nullable
  public HealthEnum getHealth() {
    return health;
  }

  public void setHealth(HealthEnum health) {
    this.health = health;
  }


  /**
   * Output only. If this field is populated, it contains a description of why the TPU Node is unhealthy.
   * @return healthDescription
   */
  @javax.annotation.Nullable
  public String getHealthDescription() {
    return healthDescription;
  }



  /**
   * Output only. The unique identifier for the TPU Node.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public Node labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public Node putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Resource labels to represent user-provided metadata.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public Node metadata(Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public Node putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * Custom metadata to apply to the TPU Node. Can set startup-script and shutdown-script
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, String> getMetadata() {
    return metadata;
  }

  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }


  /**
   * Output only. Whether the Node belongs to a Multislice group.
   * @return multisliceNode
   */
  @javax.annotation.Nullable
  public Boolean getMultisliceNode() {
    return multisliceNode;
  }



  /**
   * Output only. Immutable. The name of the TPU.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public Node networkConfig(NetworkConfig networkConfig) {
    this.networkConfig = networkConfig;
    return this;
  }

  /**
   * Get networkConfig
   * @return networkConfig
   */
  @javax.annotation.Nullable
  public NetworkConfig getNetworkConfig() {
    return networkConfig;
  }

  public void setNetworkConfig(NetworkConfig networkConfig) {
    this.networkConfig = networkConfig;
  }


  /**
   * Output only. The network endpoints where TPU workers can be accessed and sent work. It is recommended that runtime clients of the node reach out to the 0th entry in this map first.
   * @return networkEndpoints
   */
  @javax.annotation.Nullable
  public List<NetworkEndpoint> getNetworkEndpoints() {
    return networkEndpoints;
  }



  /**
   * Output only. The qualified name of the QueuedResource that requested this Node.
   * @return queuedResource
   */
  @javax.annotation.Nullable
  public String getQueuedResource() {
    return queuedResource;
  }



  public Node runtimeVersion(String runtimeVersion) {
    this.runtimeVersion = runtimeVersion;
    return this;
  }

  /**
   * Required. The runtime version running in the Node.
   * @return runtimeVersion
   */
  @javax.annotation.Nullable
  public String getRuntimeVersion() {
    return runtimeVersion;
  }

  public void setRuntimeVersion(String runtimeVersion) {
    this.runtimeVersion = runtimeVersion;
  }


  public Node schedulingConfig(SchedulingConfig schedulingConfig) {
    this.schedulingConfig = schedulingConfig;
    return this;
  }

  /**
   * Get schedulingConfig
   * @return schedulingConfig
   */
  @javax.annotation.Nullable
  public SchedulingConfig getSchedulingConfig() {
    return schedulingConfig;
  }

  public void setSchedulingConfig(SchedulingConfig schedulingConfig) {
    this.schedulingConfig = schedulingConfig;
  }


  public Node serviceAccount(ServiceAccount serviceAccount) {
    this.serviceAccount = serviceAccount;
    return this;
  }

  /**
   * Get serviceAccount
   * @return serviceAccount
   */
  @javax.annotation.Nullable
  public ServiceAccount getServiceAccount() {
    return serviceAccount;
  }

  public void setServiceAccount(ServiceAccount serviceAccount) {
    this.serviceAccount = serviceAccount;
  }


  public Node shieldedInstanceConfig(ShieldedInstanceConfig shieldedInstanceConfig) {
    this.shieldedInstanceConfig = shieldedInstanceConfig;
    return this;
  }

  /**
   * Get shieldedInstanceConfig
   * @return shieldedInstanceConfig
   */
  @javax.annotation.Nullable
  public ShieldedInstanceConfig getShieldedInstanceConfig() {
    return shieldedInstanceConfig;
  }

  public void setShieldedInstanceConfig(ShieldedInstanceConfig shieldedInstanceConfig) {
    this.shieldedInstanceConfig = shieldedInstanceConfig;
  }


  /**
   * Output only. The current state for the TPU Node.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. The Symptoms that have occurred to the TPU Node.
   * @return symptoms
   */
  @javax.annotation.Nullable
  public List<Symptom> getSymptoms() {
    return symptoms;
  }



  public Node tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public Node addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Tags to apply to the TPU Node. Tags are used to identify valid sources or targets for network firewalls.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Node node = (Node) o;
    return Objects.equals(this.acceleratorConfig, node.acceleratorConfig) &&
        Objects.equals(this.acceleratorType, node.acceleratorType) &&
        Objects.equals(this.apiVersion, node.apiVersion) &&
        Objects.equals(this.autocheckpointEnabled, node.autocheckpointEnabled) &&
        Objects.equals(this.bootDiskConfig, node.bootDiskConfig) &&
        Objects.equals(this.cidrBlock, node.cidrBlock) &&
        Objects.equals(this.createTime, node.createTime) &&
        Objects.equals(this.dataDisks, node.dataDisks) &&
        Objects.equals(this.description, node.description) &&
        Objects.equals(this.health, node.health) &&
        Objects.equals(this.healthDescription, node.healthDescription) &&
        Objects.equals(this.id, node.id) &&
        Objects.equals(this.labels, node.labels) &&
        Objects.equals(this.metadata, node.metadata) &&
        Objects.equals(this.multisliceNode, node.multisliceNode) &&
        Objects.equals(this.name, node.name) &&
        Objects.equals(this.networkConfig, node.networkConfig) &&
        Objects.equals(this.networkEndpoints, node.networkEndpoints) &&
        Objects.equals(this.queuedResource, node.queuedResource) &&
        Objects.equals(this.runtimeVersion, node.runtimeVersion) &&
        Objects.equals(this.schedulingConfig, node.schedulingConfig) &&
        Objects.equals(this.serviceAccount, node.serviceAccount) &&
        Objects.equals(this.shieldedInstanceConfig, node.shieldedInstanceConfig) &&
        Objects.equals(this.state, node.state) &&
        Objects.equals(this.symptoms, node.symptoms) &&
        Objects.equals(this.tags, node.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceleratorConfig, acceleratorType, apiVersion, autocheckpointEnabled, bootDiskConfig, cidrBlock, createTime, dataDisks, description, health, healthDescription, id, labels, metadata, multisliceNode, name, networkConfig, networkEndpoints, queuedResource, runtimeVersion, schedulingConfig, serviceAccount, shieldedInstanceConfig, state, symptoms, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Node {\n");
    sb.append("    acceleratorConfig: ").append(toIndentedString(acceleratorConfig)).append("\n");
    sb.append("    acceleratorType: ").append(toIndentedString(acceleratorType)).append("\n");
    sb.append("    apiVersion: ").append(toIndentedString(apiVersion)).append("\n");
    sb.append("    autocheckpointEnabled: ").append(toIndentedString(autocheckpointEnabled)).append("\n");
    sb.append("    bootDiskConfig: ").append(toIndentedString(bootDiskConfig)).append("\n");
    sb.append("    cidrBlock: ").append(toIndentedString(cidrBlock)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    dataDisks: ").append(toIndentedString(dataDisks)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    health: ").append(toIndentedString(health)).append("\n");
    sb.append("    healthDescription: ").append(toIndentedString(healthDescription)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    multisliceNode: ").append(toIndentedString(multisliceNode)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    networkConfig: ").append(toIndentedString(networkConfig)).append("\n");
    sb.append("    networkEndpoints: ").append(toIndentedString(networkEndpoints)).append("\n");
    sb.append("    queuedResource: ").append(toIndentedString(queuedResource)).append("\n");
    sb.append("    runtimeVersion: ").append(toIndentedString(runtimeVersion)).append("\n");
    sb.append("    schedulingConfig: ").append(toIndentedString(schedulingConfig)).append("\n");
    sb.append("    serviceAccount: ").append(toIndentedString(serviceAccount)).append("\n");
    sb.append("    shieldedInstanceConfig: ").append(toIndentedString(shieldedInstanceConfig)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    symptoms: ").append(toIndentedString(symptoms)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acceleratorConfig");
    openapiFields.add("acceleratorType");
    openapiFields.add("apiVersion");
    openapiFields.add("autocheckpointEnabled");
    openapiFields.add("bootDiskConfig");
    openapiFields.add("cidrBlock");
    openapiFields.add("createTime");
    openapiFields.add("dataDisks");
    openapiFields.add("description");
    openapiFields.add("health");
    openapiFields.add("healthDescription");
    openapiFields.add("id");
    openapiFields.add("labels");
    openapiFields.add("metadata");
    openapiFields.add("multisliceNode");
    openapiFields.add("name");
    openapiFields.add("networkConfig");
    openapiFields.add("networkEndpoints");
    openapiFields.add("queuedResource");
    openapiFields.add("runtimeVersion");
    openapiFields.add("schedulingConfig");
    openapiFields.add("serviceAccount");
    openapiFields.add("shieldedInstanceConfig");
    openapiFields.add("state");
    openapiFields.add("symptoms");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Node
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Node.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Node is not found in the empty JSON string", Node.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Node.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Node` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `acceleratorConfig`
      if (jsonObj.get("acceleratorConfig") != null && !jsonObj.get("acceleratorConfig").isJsonNull()) {
        AcceleratorConfig.validateJsonElement(jsonObj.get("acceleratorConfig"));
      }
      if ((jsonObj.get("acceleratorType") != null && !jsonObj.get("acceleratorType").isJsonNull()) && !jsonObj.get("acceleratorType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acceleratorType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acceleratorType").toString()));
      }
      if ((jsonObj.get("apiVersion") != null && !jsonObj.get("apiVersion").isJsonNull()) && !jsonObj.get("apiVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiVersion").toString()));
      }
      // validate the optional field `apiVersion`
      if (jsonObj.get("apiVersion") != null && !jsonObj.get("apiVersion").isJsonNull()) {
        ApiVersionEnum.validateJsonElement(jsonObj.get("apiVersion"));
      }
      // validate the optional field `bootDiskConfig`
      if (jsonObj.get("bootDiskConfig") != null && !jsonObj.get("bootDiskConfig").isJsonNull()) {
        BootDiskConfig.validateJsonElement(jsonObj.get("bootDiskConfig"));
      }
      if ((jsonObj.get("cidrBlock") != null && !jsonObj.get("cidrBlock").isJsonNull()) && !jsonObj.get("cidrBlock").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cidrBlock` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cidrBlock").toString()));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if (jsonObj.get("dataDisks") != null && !jsonObj.get("dataDisks").isJsonNull()) {
        JsonArray jsonArraydataDisks = jsonObj.getAsJsonArray("dataDisks");
        if (jsonArraydataDisks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dataDisks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dataDisks` to be an array in the JSON string but got `%s`", jsonObj.get("dataDisks").toString()));
          }

          // validate the optional field `dataDisks` (array)
          for (int i = 0; i < jsonArraydataDisks.size(); i++) {
            AttachedDisk.validateJsonElement(jsonArraydataDisks.get(i));
          };
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("health") != null && !jsonObj.get("health").isJsonNull()) && !jsonObj.get("health").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `health` to be a primitive type in the JSON string but got `%s`", jsonObj.get("health").toString()));
      }
      // validate the optional field `health`
      if (jsonObj.get("health") != null && !jsonObj.get("health").isJsonNull()) {
        HealthEnum.validateJsonElement(jsonObj.get("health"));
      }
      if ((jsonObj.get("healthDescription") != null && !jsonObj.get("healthDescription").isJsonNull()) && !jsonObj.get("healthDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `healthDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("healthDescription").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `networkConfig`
      if (jsonObj.get("networkConfig") != null && !jsonObj.get("networkConfig").isJsonNull()) {
        NetworkConfig.validateJsonElement(jsonObj.get("networkConfig"));
      }
      if (jsonObj.get("networkEndpoints") != null && !jsonObj.get("networkEndpoints").isJsonNull()) {
        JsonArray jsonArraynetworkEndpoints = jsonObj.getAsJsonArray("networkEndpoints");
        if (jsonArraynetworkEndpoints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("networkEndpoints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `networkEndpoints` to be an array in the JSON string but got `%s`", jsonObj.get("networkEndpoints").toString()));
          }

          // validate the optional field `networkEndpoints` (array)
          for (int i = 0; i < jsonArraynetworkEndpoints.size(); i++) {
            NetworkEndpoint.validateJsonElement(jsonArraynetworkEndpoints.get(i));
          };
        }
      }
      if ((jsonObj.get("queuedResource") != null && !jsonObj.get("queuedResource").isJsonNull()) && !jsonObj.get("queuedResource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queuedResource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queuedResource").toString()));
      }
      if ((jsonObj.get("runtimeVersion") != null && !jsonObj.get("runtimeVersion").isJsonNull()) && !jsonObj.get("runtimeVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runtimeVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runtimeVersion").toString()));
      }
      // validate the optional field `schedulingConfig`
      if (jsonObj.get("schedulingConfig") != null && !jsonObj.get("schedulingConfig").isJsonNull()) {
        SchedulingConfig.validateJsonElement(jsonObj.get("schedulingConfig"));
      }
      // validate the optional field `serviceAccount`
      if (jsonObj.get("serviceAccount") != null && !jsonObj.get("serviceAccount").isJsonNull()) {
        ServiceAccount.validateJsonElement(jsonObj.get("serviceAccount"));
      }
      // validate the optional field `shieldedInstanceConfig`
      if (jsonObj.get("shieldedInstanceConfig") != null && !jsonObj.get("shieldedInstanceConfig").isJsonNull()) {
        ShieldedInstanceConfig.validateJsonElement(jsonObj.get("shieldedInstanceConfig"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if (jsonObj.get("symptoms") != null && !jsonObj.get("symptoms").isJsonNull()) {
        JsonArray jsonArraysymptoms = jsonObj.getAsJsonArray("symptoms");
        if (jsonArraysymptoms != null) {
          // ensure the json data is an array
          if (!jsonObj.get("symptoms").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `symptoms` to be an array in the JSON string but got `%s`", jsonObj.get("symptoms").toString()));
          }

          // validate the optional field `symptoms` (array)
          for (int i = 0; i < jsonArraysymptoms.size(); i++) {
            Symptom.validateJsonElement(jsonArraysymptoms.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Node.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Node' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Node> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Node.class));

       return (TypeAdapter<T>) new TypeAdapter<Node>() {
           @Override
           public void write(JsonWriter out, Node value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Node read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Node given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Node
   * @throws IOException if the JSON string is invalid with respect to Node
   */
  public static Node fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Node.class);
  }

  /**
   * Convert an instance of Node to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

