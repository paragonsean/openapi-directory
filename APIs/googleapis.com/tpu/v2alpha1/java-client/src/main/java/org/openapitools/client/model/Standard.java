/*
 * Cloud TPU API
 * TPU API provides customers with access to Google TPU technology.
 *
 * The version of the OpenAPI document: v2alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Interval;
import org.openapitools.client.model.Usage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Standard
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:04.218141-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Standard {
  /**
   * Gets or Sets capacityUnits
   */
  @JsonAdapter(CapacityUnitsEnum.Adapter.class)
  public enum CapacityUnitsEnum {
    CAPACITY_UNITS_UNSPECIFIED("CAPACITY_UNITS_UNSPECIFIED"),
    
    CORES("CORES"),
    
    CHIPS("CHIPS");

    private String value;

    CapacityUnitsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CapacityUnitsEnum fromValue(String value) {
      for (CapacityUnitsEnum b : CapacityUnitsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CapacityUnitsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CapacityUnitsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CapacityUnitsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CapacityUnitsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CapacityUnitsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CAPACITY_UNITS = "capacityUnits";
  @SerializedName(SERIALIZED_NAME_CAPACITY_UNITS)
  private CapacityUnitsEnum capacityUnits;

  public static final String SERIALIZED_NAME_INTERVAL = "interval";
  @SerializedName(SERIALIZED_NAME_INTERVAL)
  private Interval interval;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private String resourceType;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Integer size;

  public static final String SERIALIZED_NAME_USAGE = "usage";
  @SerializedName(SERIALIZED_NAME_USAGE)
  private Usage usage;

  public Standard() {
  }

  public Standard capacityUnits(CapacityUnitsEnum capacityUnits) {
    this.capacityUnits = capacityUnits;
    return this;
  }

  /**
   * Get capacityUnits
   * @return capacityUnits
   */
  @javax.annotation.Nullable
  public CapacityUnitsEnum getCapacityUnits() {
    return capacityUnits;
  }

  public void setCapacityUnits(CapacityUnitsEnum capacityUnits) {
    this.capacityUnits = capacityUnits;
  }


  public Standard interval(Interval interval) {
    this.interval = interval;
    return this;
  }

  /**
   * Get interval
   * @return interval
   */
  @javax.annotation.Nullable
  public Interval getInterval() {
    return interval;
  }

  public void setInterval(Interval interval) {
    this.interval = interval;
  }


  public Standard resourceType(String resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * The resource type of the reservation.
   * @return resourceType
   */
  @javax.annotation.Nullable
  public String getResourceType() {
    return resourceType;
  }

  public void setResourceType(String resourceType) {
    this.resourceType = resourceType;
  }


  public Standard size(Integer size) {
    this.size = size;
    return this;
  }

  /**
   * The size of the reservation, in the units specified in the &#39;capacity_units&#39; field.
   * @return size
   */
  @javax.annotation.Nullable
  public Integer getSize() {
    return size;
  }

  public void setSize(Integer size) {
    this.size = size;
  }


  public Standard usage(Usage usage) {
    this.usage = usage;
    return this;
  }

  /**
   * Get usage
   * @return usage
   */
  @javax.annotation.Nullable
  public Usage getUsage() {
    return usage;
  }

  public void setUsage(Usage usage) {
    this.usage = usage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Standard standard = (Standard) o;
    return Objects.equals(this.capacityUnits, standard.capacityUnits) &&
        Objects.equals(this.interval, standard.interval) &&
        Objects.equals(this.resourceType, standard.resourceType) &&
        Objects.equals(this.size, standard.size) &&
        Objects.equals(this.usage, standard.usage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(capacityUnits, interval, resourceType, size, usage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Standard {\n");
    sb.append("    capacityUnits: ").append(toIndentedString(capacityUnits)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    usage: ").append(toIndentedString(usage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("capacityUnits");
    openapiFields.add("interval");
    openapiFields.add("resourceType");
    openapiFields.add("size");
    openapiFields.add("usage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Standard
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Standard.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Standard is not found in the empty JSON string", Standard.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Standard.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Standard` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("capacityUnits") != null && !jsonObj.get("capacityUnits").isJsonNull()) && !jsonObj.get("capacityUnits").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `capacityUnits` to be a primitive type in the JSON string but got `%s`", jsonObj.get("capacityUnits").toString()));
      }
      // validate the optional field `capacityUnits`
      if (jsonObj.get("capacityUnits") != null && !jsonObj.get("capacityUnits").isJsonNull()) {
        CapacityUnitsEnum.validateJsonElement(jsonObj.get("capacityUnits"));
      }
      // validate the optional field `interval`
      if (jsonObj.get("interval") != null && !jsonObj.get("interval").isJsonNull()) {
        Interval.validateJsonElement(jsonObj.get("interval"));
      }
      if ((jsonObj.get("resourceType") != null && !jsonObj.get("resourceType").isJsonNull()) && !jsonObj.get("resourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceType").toString()));
      }
      // validate the optional field `usage`
      if (jsonObj.get("usage") != null && !jsonObj.get("usage").isJsonNull()) {
        Usage.validateJsonElement(jsonObj.get("usage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Standard.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Standard' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Standard> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Standard.class));

       return (TypeAdapter<T>) new TypeAdapter<Standard>() {
           @Override
           public void write(JsonWriter out, Standard value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Standard read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Standard given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Standard
   * @throws IOException if the JSON string is invalid with respect to Standard
   */
  public static Standard fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Standard.class);
  }

  /**
   * Convert an instance of Standard to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

