/*
 * Cloud TPU API
 * TPU API provides customers with access to Google TPU technology.
 *
 * The version of the OpenAPI document: v2alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Guaranteed;
import org.openapitools.client.model.QueuedResourceState;
import org.openapitools.client.model.QueueingPolicy;
import org.openapitools.client.model.Tpu;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A QueuedResource represents a request for resources that will be placed in a queue and fulfilled when the necessary resources are available.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:04.218141-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QueuedResource {
  public static final String SERIALIZED_NAME_BEST_EFFORT = "bestEffort";
  @SerializedName(SERIALIZED_NAME_BEST_EFFORT)
  private Object bestEffort;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_GUARANTEED = "guaranteed";
  @SerializedName(SERIALIZED_NAME_GUARANTEED)
  private Guaranteed guaranteed;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_QUEUEING_POLICY = "queueingPolicy";
  @SerializedName(SERIALIZED_NAME_QUEUEING_POLICY)
  private QueueingPolicy queueingPolicy;

  public static final String SERIALIZED_NAME_RESERVATION_NAME = "reservationName";
  @SerializedName(SERIALIZED_NAME_RESERVATION_NAME)
  private String reservationName;

  public static final String SERIALIZED_NAME_SPOT = "spot";
  @SerializedName(SERIALIZED_NAME_SPOT)
  private Object spot;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private QueuedResourceState state;

  public static final String SERIALIZED_NAME_TPU = "tpu";
  @SerializedName(SERIALIZED_NAME_TPU)
  private Tpu tpu;

  public QueuedResource() {
  }

  public QueuedResource(
     String createTime, 
     String name
  ) {
    this();
    this.createTime = createTime;
    this.name = name;
  }

  public QueuedResource bestEffort(Object bestEffort) {
    this.bestEffort = bestEffort;
    return this;
  }

  /**
   * BestEffort tier definition.
   * @return bestEffort
   */
  @javax.annotation.Nullable
  public Object getBestEffort() {
    return bestEffort;
  }

  public void setBestEffort(Object bestEffort) {
    this.bestEffort = bestEffort;
  }


  /**
   * Output only. The time when the QueuedResource was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public QueuedResource guaranteed(Guaranteed guaranteed) {
    this.guaranteed = guaranteed;
    return this;
  }

  /**
   * Get guaranteed
   * @return guaranteed
   */
  @javax.annotation.Nullable
  public Guaranteed getGuaranteed() {
    return guaranteed;
  }

  public void setGuaranteed(Guaranteed guaranteed) {
    this.guaranteed = guaranteed;
  }


  /**
   * Output only. Immutable. The name of the QueuedResource.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public QueuedResource queueingPolicy(QueueingPolicy queueingPolicy) {
    this.queueingPolicy = queueingPolicy;
    return this;
  }

  /**
   * Get queueingPolicy
   * @return queueingPolicy
   */
  @javax.annotation.Nullable
  public QueueingPolicy getQueueingPolicy() {
    return queueingPolicy;
  }

  public void setQueueingPolicy(QueueingPolicy queueingPolicy) {
    this.queueingPolicy = queueingPolicy;
  }


  public QueuedResource reservationName(String reservationName) {
    this.reservationName = reservationName;
    return this;
  }

  /**
   * Name of the reservation in which the resource should be provisioned. Format: projects/{project}/locations/{zone}/reservations/{reservation}
   * @return reservationName
   */
  @javax.annotation.Nullable
  public String getReservationName() {
    return reservationName;
  }

  public void setReservationName(String reservationName) {
    this.reservationName = reservationName;
  }


  public QueuedResource spot(Object spot) {
    this.spot = spot;
    return this;
  }

  /**
   * Spot tier definition.
   * @return spot
   */
  @javax.annotation.Nullable
  public Object getSpot() {
    return spot;
  }

  public void setSpot(Object spot) {
    this.spot = spot;
  }


  public QueuedResource state(QueuedResourceState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public QueuedResourceState getState() {
    return state;
  }

  public void setState(QueuedResourceState state) {
    this.state = state;
  }


  public QueuedResource tpu(Tpu tpu) {
    this.tpu = tpu;
    return this;
  }

  /**
   * Get tpu
   * @return tpu
   */
  @javax.annotation.Nullable
  public Tpu getTpu() {
    return tpu;
  }

  public void setTpu(Tpu tpu) {
    this.tpu = tpu;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueuedResource queuedResource = (QueuedResource) o;
    return Objects.equals(this.bestEffort, queuedResource.bestEffort) &&
        Objects.equals(this.createTime, queuedResource.createTime) &&
        Objects.equals(this.guaranteed, queuedResource.guaranteed) &&
        Objects.equals(this.name, queuedResource.name) &&
        Objects.equals(this.queueingPolicy, queuedResource.queueingPolicy) &&
        Objects.equals(this.reservationName, queuedResource.reservationName) &&
        Objects.equals(this.spot, queuedResource.spot) &&
        Objects.equals(this.state, queuedResource.state) &&
        Objects.equals(this.tpu, queuedResource.tpu);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bestEffort, createTime, guaranteed, name, queueingPolicy, reservationName, spot, state, tpu);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueuedResource {\n");
    sb.append("    bestEffort: ").append(toIndentedString(bestEffort)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    guaranteed: ").append(toIndentedString(guaranteed)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    queueingPolicy: ").append(toIndentedString(queueingPolicy)).append("\n");
    sb.append("    reservationName: ").append(toIndentedString(reservationName)).append("\n");
    sb.append("    spot: ").append(toIndentedString(spot)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    tpu: ").append(toIndentedString(tpu)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bestEffort");
    openapiFields.add("createTime");
    openapiFields.add("guaranteed");
    openapiFields.add("name");
    openapiFields.add("queueingPolicy");
    openapiFields.add("reservationName");
    openapiFields.add("spot");
    openapiFields.add("state");
    openapiFields.add("tpu");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueuedResource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueuedResource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueuedResource is not found in the empty JSON string", QueuedResource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueuedResource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueuedResource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      // validate the optional field `guaranteed`
      if (jsonObj.get("guaranteed") != null && !jsonObj.get("guaranteed").isJsonNull()) {
        Guaranteed.validateJsonElement(jsonObj.get("guaranteed"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `queueingPolicy`
      if (jsonObj.get("queueingPolicy") != null && !jsonObj.get("queueingPolicy").isJsonNull()) {
        QueueingPolicy.validateJsonElement(jsonObj.get("queueingPolicy"));
      }
      if ((jsonObj.get("reservationName") != null && !jsonObj.get("reservationName").isJsonNull()) && !jsonObj.get("reservationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reservationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reservationName").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        QueuedResourceState.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `tpu`
      if (jsonObj.get("tpu") != null && !jsonObj.get("tpu").isJsonNull()) {
        Tpu.validateJsonElement(jsonObj.get("tpu"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueuedResource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueuedResource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueuedResource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueuedResource.class));

       return (TypeAdapter<T>) new TypeAdapter<QueuedResource>() {
           @Override
           public void write(JsonWriter out, QueuedResource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueuedResource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueuedResource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueuedResource
   * @throws IOException if the JSON string is invalid with respect to QueuedResource
   */
  public static QueuedResource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueuedResource.class);
  }

  /**
   * Convert an instance of QueuedResource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

