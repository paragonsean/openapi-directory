# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.interval import Interval
from openapi_server import util


class QueueingPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, valid_after_duration: str=None, valid_after_time: str=None, valid_interval: Interval=None, valid_until_duration: str=None, valid_until_time: str=None):
        """QueueingPolicy - a model defined in OpenAPI

        :param valid_after_duration: The valid_after_duration of this QueueingPolicy.
        :param valid_after_time: The valid_after_time of this QueueingPolicy.
        :param valid_interval: The valid_interval of this QueueingPolicy.
        :param valid_until_duration: The valid_until_duration of this QueueingPolicy.
        :param valid_until_time: The valid_until_time of this QueueingPolicy.
        """
        self.openapi_types = {
            'valid_after_duration': str,
            'valid_after_time': str,
            'valid_interval': Interval,
            'valid_until_duration': str,
            'valid_until_time': str
        }

        self.attribute_map = {
            'valid_after_duration': 'validAfterDuration',
            'valid_after_time': 'validAfterTime',
            'valid_interval': 'validInterval',
            'valid_until_duration': 'validUntilDuration',
            'valid_until_time': 'validUntilTime'
        }

        self._valid_after_duration = valid_after_duration
        self._valid_after_time = valid_after_time
        self._valid_interval = valid_interval
        self._valid_until_duration = valid_until_duration
        self._valid_until_time = valid_until_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueueingPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueueingPolicy of this QueueingPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def valid_after_duration(self):
        """Gets the valid_after_duration of this QueueingPolicy.

        A relative time after which resources may be created.

        :return: The valid_after_duration of this QueueingPolicy.
        :rtype: str
        """
        return self._valid_after_duration

    @valid_after_duration.setter
    def valid_after_duration(self, valid_after_duration):
        """Sets the valid_after_duration of this QueueingPolicy.

        A relative time after which resources may be created.

        :param valid_after_duration: The valid_after_duration of this QueueingPolicy.
        :type valid_after_duration: str
        """

        self._valid_after_duration = valid_after_duration

    @property
    def valid_after_time(self):
        """Gets the valid_after_time of this QueueingPolicy.

        An absolute time at which resources may be created.

        :return: The valid_after_time of this QueueingPolicy.
        :rtype: str
        """
        return self._valid_after_time

    @valid_after_time.setter
    def valid_after_time(self, valid_after_time):
        """Sets the valid_after_time of this QueueingPolicy.

        An absolute time at which resources may be created.

        :param valid_after_time: The valid_after_time of this QueueingPolicy.
        :type valid_after_time: str
        """

        self._valid_after_time = valid_after_time

    @property
    def valid_interval(self):
        """Gets the valid_interval of this QueueingPolicy.


        :return: The valid_interval of this QueueingPolicy.
        :rtype: Interval
        """
        return self._valid_interval

    @valid_interval.setter
    def valid_interval(self, valid_interval):
        """Sets the valid_interval of this QueueingPolicy.


        :param valid_interval: The valid_interval of this QueueingPolicy.
        :type valid_interval: Interval
        """

        self._valid_interval = valid_interval

    @property
    def valid_until_duration(self):
        """Gets the valid_until_duration of this QueueingPolicy.

        A relative time after which resources should not be created. If the request cannot be fulfilled by this time the request will be failed.

        :return: The valid_until_duration of this QueueingPolicy.
        :rtype: str
        """
        return self._valid_until_duration

    @valid_until_duration.setter
    def valid_until_duration(self, valid_until_duration):
        """Sets the valid_until_duration of this QueueingPolicy.

        A relative time after which resources should not be created. If the request cannot be fulfilled by this time the request will be failed.

        :param valid_until_duration: The valid_until_duration of this QueueingPolicy.
        :type valid_until_duration: str
        """

        self._valid_until_duration = valid_until_duration

    @property
    def valid_until_time(self):
        """Gets the valid_until_time of this QueueingPolicy.

        An absolute time after which resources should not be created. If the request cannot be fulfilled by this time the request will be failed.

        :return: The valid_until_time of this QueueingPolicy.
        :rtype: str
        """
        return self._valid_until_time

    @valid_until_time.setter
    def valid_until_time(self, valid_until_time):
        """Sets the valid_until_time of this QueueingPolicy.

        An absolute time after which resources should not be created. If the request cannot be fulfilled by this time the request will be failed.

        :param valid_until_time: The valid_until_time of this QueueingPolicy.
        :type valid_until_time: str
        """

        self._valid_until_time = valid_until_time
