# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SchedulingConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, preemptible: bool=None, reserved: bool=None, spot: bool=None):
        """SchedulingConfig - a model defined in OpenAPI

        :param preemptible: The preemptible of this SchedulingConfig.
        :param reserved: The reserved of this SchedulingConfig.
        :param spot: The spot of this SchedulingConfig.
        """
        self.openapi_types = {
            'preemptible': bool,
            'reserved': bool,
            'spot': bool
        }

        self.attribute_map = {
            'preemptible': 'preemptible',
            'reserved': 'reserved',
            'spot': 'spot'
        }

        self._preemptible = preemptible
        self._reserved = reserved
        self._spot = spot

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SchedulingConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SchedulingConfig of this SchedulingConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def preemptible(self):
        """Gets the preemptible of this SchedulingConfig.

        Defines whether the node is preemptible.

        :return: The preemptible of this SchedulingConfig.
        :rtype: bool
        """
        return self._preemptible

    @preemptible.setter
    def preemptible(self, preemptible):
        """Sets the preemptible of this SchedulingConfig.

        Defines whether the node is preemptible.

        :param preemptible: The preemptible of this SchedulingConfig.
        :type preemptible: bool
        """

        self._preemptible = preemptible

    @property
    def reserved(self):
        """Gets the reserved of this SchedulingConfig.

        Whether the node is created under a reservation.

        :return: The reserved of this SchedulingConfig.
        :rtype: bool
        """
        return self._reserved

    @reserved.setter
    def reserved(self, reserved):
        """Sets the reserved of this SchedulingConfig.

        Whether the node is created under a reservation.

        :param reserved: The reserved of this SchedulingConfig.
        :type reserved: bool
        """

        self._reserved = reserved

    @property
    def spot(self):
        """Gets the spot of this SchedulingConfig.

        Optional. Defines whether the node is Spot VM.

        :return: The spot of this SchedulingConfig.
        :rtype: bool
        """
        return self._spot

    @spot.setter
    def spot(self, spot):
        """Sets the spot of this SchedulingConfig.

        Optional. Defines whether the node is Spot VM.

        :param spot: The spot of this SchedulingConfig.
        :type spot: bool
        """

        self._spot = spot
