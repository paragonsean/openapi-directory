# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.interval import Interval
from openapi_server.models.usage import Usage
from openapi_server import util


class Standard(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capacity_units: str=None, interval: Interval=None, resource_type: str=None, size: int=None, usage: Usage=None):
        """Standard - a model defined in OpenAPI

        :param capacity_units: The capacity_units of this Standard.
        :param interval: The interval of this Standard.
        :param resource_type: The resource_type of this Standard.
        :param size: The size of this Standard.
        :param usage: The usage of this Standard.
        """
        self.openapi_types = {
            'capacity_units': str,
            'interval': Interval,
            'resource_type': str,
            'size': int,
            'usage': Usage
        }

        self.attribute_map = {
            'capacity_units': 'capacityUnits',
            'interval': 'interval',
            'resource_type': 'resourceType',
            'size': 'size',
            'usage': 'usage'
        }

        self._capacity_units = capacity_units
        self._interval = interval
        self._resource_type = resource_type
        self._size = size
        self._usage = usage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Standard':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Standard of this Standard.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capacity_units(self):
        """Gets the capacity_units of this Standard.


        :return: The capacity_units of this Standard.
        :rtype: str
        """
        return self._capacity_units

    @capacity_units.setter
    def capacity_units(self, capacity_units):
        """Sets the capacity_units of this Standard.


        :param capacity_units: The capacity_units of this Standard.
        :type capacity_units: str
        """
        allowed_values = ["CAPACITY_UNITS_UNSPECIFIED", "CORES", "CHIPS"]  # noqa: E501
        if capacity_units not in allowed_values:
            raise ValueError(
                "Invalid value for `capacity_units` ({0}), must be one of {1}"
                .format(capacity_units, allowed_values)
            )

        self._capacity_units = capacity_units

    @property
    def interval(self):
        """Gets the interval of this Standard.


        :return: The interval of this Standard.
        :rtype: Interval
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this Standard.


        :param interval: The interval of this Standard.
        :type interval: Interval
        """

        self._interval = interval

    @property
    def resource_type(self):
        """Gets the resource_type of this Standard.

        The resource type of the reservation.

        :return: The resource_type of this Standard.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this Standard.

        The resource type of the reservation.

        :param resource_type: The resource_type of this Standard.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def size(self):
        """Gets the size of this Standard.

        The size of the reservation, in the units specified in the 'capacity_units' field.

        :return: The size of this Standard.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Standard.

        The size of the reservation, in the units specified in the 'capacity_units' field.

        :param size: The size of this Standard.
        :type size: int
        """

        self._size = size

    @property
    def usage(self):
        """Gets the usage of this Standard.


        :return: The usage of this Standard.
        :rtype: Usage
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this Standard.


        :param usage: The usage of this Standard.
        :type usage: Usage
        """

        self._usage = usage
