/**
 * Cloud TPU API
 * TPU API provides customers with access to Google TPU technology.
 *
 * The version of the OpenAPI document: v2alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueueingPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueueingPolicy::OAIQueueingPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueueingPolicy::OAIQueueingPolicy() {
    this->initializeModel();
}

OAIQueueingPolicy::~OAIQueueingPolicy() {}

void OAIQueueingPolicy::initializeModel() {

    m_valid_after_duration_isSet = false;
    m_valid_after_duration_isValid = false;

    m_valid_after_time_isSet = false;
    m_valid_after_time_isValid = false;

    m_valid_interval_isSet = false;
    m_valid_interval_isValid = false;

    m_valid_until_duration_isSet = false;
    m_valid_until_duration_isValid = false;

    m_valid_until_time_isSet = false;
    m_valid_until_time_isValid = false;
}

void OAIQueueingPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueueingPolicy::fromJsonObject(QJsonObject json) {

    m_valid_after_duration_isValid = ::OpenAPI::fromJsonValue(m_valid_after_duration, json[QString("validAfterDuration")]);
    m_valid_after_duration_isSet = !json[QString("validAfterDuration")].isNull() && m_valid_after_duration_isValid;

    m_valid_after_time_isValid = ::OpenAPI::fromJsonValue(m_valid_after_time, json[QString("validAfterTime")]);
    m_valid_after_time_isSet = !json[QString("validAfterTime")].isNull() && m_valid_after_time_isValid;

    m_valid_interval_isValid = ::OpenAPI::fromJsonValue(m_valid_interval, json[QString("validInterval")]);
    m_valid_interval_isSet = !json[QString("validInterval")].isNull() && m_valid_interval_isValid;

    m_valid_until_duration_isValid = ::OpenAPI::fromJsonValue(m_valid_until_duration, json[QString("validUntilDuration")]);
    m_valid_until_duration_isSet = !json[QString("validUntilDuration")].isNull() && m_valid_until_duration_isValid;

    m_valid_until_time_isValid = ::OpenAPI::fromJsonValue(m_valid_until_time, json[QString("validUntilTime")]);
    m_valid_until_time_isSet = !json[QString("validUntilTime")].isNull() && m_valid_until_time_isValid;
}

QString OAIQueueingPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueueingPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_valid_after_duration_isSet) {
        obj.insert(QString("validAfterDuration"), ::OpenAPI::toJsonValue(m_valid_after_duration));
    }
    if (m_valid_after_time_isSet) {
        obj.insert(QString("validAfterTime"), ::OpenAPI::toJsonValue(m_valid_after_time));
    }
    if (m_valid_interval.isSet()) {
        obj.insert(QString("validInterval"), ::OpenAPI::toJsonValue(m_valid_interval));
    }
    if (m_valid_until_duration_isSet) {
        obj.insert(QString("validUntilDuration"), ::OpenAPI::toJsonValue(m_valid_until_duration));
    }
    if (m_valid_until_time_isSet) {
        obj.insert(QString("validUntilTime"), ::OpenAPI::toJsonValue(m_valid_until_time));
    }
    return obj;
}

QString OAIQueueingPolicy::getValidAfterDuration() const {
    return m_valid_after_duration;
}
void OAIQueueingPolicy::setValidAfterDuration(const QString &valid_after_duration) {
    m_valid_after_duration = valid_after_duration;
    m_valid_after_duration_isSet = true;
}

bool OAIQueueingPolicy::is_valid_after_duration_Set() const{
    return m_valid_after_duration_isSet;
}

bool OAIQueueingPolicy::is_valid_after_duration_Valid() const{
    return m_valid_after_duration_isValid;
}

QString OAIQueueingPolicy::getValidAfterTime() const {
    return m_valid_after_time;
}
void OAIQueueingPolicy::setValidAfterTime(const QString &valid_after_time) {
    m_valid_after_time = valid_after_time;
    m_valid_after_time_isSet = true;
}

bool OAIQueueingPolicy::is_valid_after_time_Set() const{
    return m_valid_after_time_isSet;
}

bool OAIQueueingPolicy::is_valid_after_time_Valid() const{
    return m_valid_after_time_isValid;
}

OAIInterval OAIQueueingPolicy::getValidInterval() const {
    return m_valid_interval;
}
void OAIQueueingPolicy::setValidInterval(const OAIInterval &valid_interval) {
    m_valid_interval = valid_interval;
    m_valid_interval_isSet = true;
}

bool OAIQueueingPolicy::is_valid_interval_Set() const{
    return m_valid_interval_isSet;
}

bool OAIQueueingPolicy::is_valid_interval_Valid() const{
    return m_valid_interval_isValid;
}

QString OAIQueueingPolicy::getValidUntilDuration() const {
    return m_valid_until_duration;
}
void OAIQueueingPolicy::setValidUntilDuration(const QString &valid_until_duration) {
    m_valid_until_duration = valid_until_duration;
    m_valid_until_duration_isSet = true;
}

bool OAIQueueingPolicy::is_valid_until_duration_Set() const{
    return m_valid_until_duration_isSet;
}

bool OAIQueueingPolicy::is_valid_until_duration_Valid() const{
    return m_valid_until_duration_isValid;
}

QString OAIQueueingPolicy::getValidUntilTime() const {
    return m_valid_until_time;
}
void OAIQueueingPolicy::setValidUntilTime(const QString &valid_until_time) {
    m_valid_until_time = valid_until_time;
    m_valid_until_time_isSet = true;
}

bool OAIQueueingPolicy::is_valid_until_time_Set() const{
    return m_valid_until_time_isSet;
}

bool OAIQueueingPolicy::is_valid_until_time_Valid() const{
    return m_valid_until_time_isValid;
}

bool OAIQueueingPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_valid_after_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_after_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_interval.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_until_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_until_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueueingPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
