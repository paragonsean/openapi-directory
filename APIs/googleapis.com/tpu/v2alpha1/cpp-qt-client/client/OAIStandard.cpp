/**
 * Cloud TPU API
 * TPU API provides customers with access to Google TPU technology.
 *
 * The version of the OpenAPI document: v2alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStandard.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStandard::OAIStandard(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStandard::OAIStandard() {
    this->initializeModel();
}

OAIStandard::~OAIStandard() {}

void OAIStandard::initializeModel() {

    m_capacity_units_isSet = false;
    m_capacity_units_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_usage_isSet = false;
    m_usage_isValid = false;
}

void OAIStandard::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStandard::fromJsonObject(QJsonObject json) {

    m_capacity_units_isValid = ::OpenAPI::fromJsonValue(m_capacity_units, json[QString("capacityUnits")]);
    m_capacity_units_isSet = !json[QString("capacityUnits")].isNull() && m_capacity_units_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resourceType")]);
    m_resource_type_isSet = !json[QString("resourceType")].isNull() && m_resource_type_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_usage_isValid = ::OpenAPI::fromJsonValue(m_usage, json[QString("usage")]);
    m_usage_isSet = !json[QString("usage")].isNull() && m_usage_isValid;
}

QString OAIStandard::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStandard::asJsonObject() const {
    QJsonObject obj;
    if (m_capacity_units_isSet) {
        obj.insert(QString("capacityUnits"), ::OpenAPI::toJsonValue(m_capacity_units));
    }
    if (m_interval.isSet()) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_usage.isSet()) {
        obj.insert(QString("usage"), ::OpenAPI::toJsonValue(m_usage));
    }
    return obj;
}

QString OAIStandard::getCapacityUnits() const {
    return m_capacity_units;
}
void OAIStandard::setCapacityUnits(const QString &capacity_units) {
    m_capacity_units = capacity_units;
    m_capacity_units_isSet = true;
}

bool OAIStandard::is_capacity_units_Set() const{
    return m_capacity_units_isSet;
}

bool OAIStandard::is_capacity_units_Valid() const{
    return m_capacity_units_isValid;
}

OAIInterval OAIStandard::getInterval() const {
    return m_interval;
}
void OAIStandard::setInterval(const OAIInterval &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAIStandard::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAIStandard::is_interval_Valid() const{
    return m_interval_isValid;
}

QString OAIStandard::getResourceType() const {
    return m_resource_type;
}
void OAIStandard::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIStandard::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIStandard::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

qint32 OAIStandard::getSize() const {
    return m_size;
}
void OAIStandard::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIStandard::is_size_Set() const{
    return m_size_isSet;
}

bool OAIStandard::is_size_Valid() const{
    return m_size_isValid;
}

OAIUsage OAIStandard::getUsage() const {
    return m_usage;
}
void OAIStandard::setUsage(const OAIUsage &usage) {
    m_usage = usage;
    m_usage_isSet = true;
}

bool OAIStandard::is_usage_Set() const{
    return m_usage_isSet;
}

bool OAIStandard::is_usage_Valid() const{
    return m_usage_isValid;
}

bool OAIStandard::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capacity_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStandard::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
