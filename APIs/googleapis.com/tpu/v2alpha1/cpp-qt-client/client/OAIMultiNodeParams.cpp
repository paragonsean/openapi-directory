/**
 * Cloud TPU API
 * TPU API provides customers with access to Google TPU technology.
 *
 * The version of the OpenAPI document: v2alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMultiNodeParams.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMultiNodeParams::OAIMultiNodeParams(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMultiNodeParams::OAIMultiNodeParams() {
    this->initializeModel();
}

OAIMultiNodeParams::~OAIMultiNodeParams() {}

void OAIMultiNodeParams::initializeModel() {

    m_node_count_isSet = false;
    m_node_count_isValid = false;

    m_node_id_prefix_isSet = false;
    m_node_id_prefix_isValid = false;
}

void OAIMultiNodeParams::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMultiNodeParams::fromJsonObject(QJsonObject json) {

    m_node_count_isValid = ::OpenAPI::fromJsonValue(m_node_count, json[QString("nodeCount")]);
    m_node_count_isSet = !json[QString("nodeCount")].isNull() && m_node_count_isValid;

    m_node_id_prefix_isValid = ::OpenAPI::fromJsonValue(m_node_id_prefix, json[QString("nodeIdPrefix")]);
    m_node_id_prefix_isSet = !json[QString("nodeIdPrefix")].isNull() && m_node_id_prefix_isValid;
}

QString OAIMultiNodeParams::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMultiNodeParams::asJsonObject() const {
    QJsonObject obj;
    if (m_node_count_isSet) {
        obj.insert(QString("nodeCount"), ::OpenAPI::toJsonValue(m_node_count));
    }
    if (m_node_id_prefix_isSet) {
        obj.insert(QString("nodeIdPrefix"), ::OpenAPI::toJsonValue(m_node_id_prefix));
    }
    return obj;
}

qint32 OAIMultiNodeParams::getNodeCount() const {
    return m_node_count;
}
void OAIMultiNodeParams::setNodeCount(const qint32 &node_count) {
    m_node_count = node_count;
    m_node_count_isSet = true;
}

bool OAIMultiNodeParams::is_node_count_Set() const{
    return m_node_count_isSet;
}

bool OAIMultiNodeParams::is_node_count_Valid() const{
    return m_node_count_isValid;
}

QString OAIMultiNodeParams::getNodeIdPrefix() const {
    return m_node_id_prefix;
}
void OAIMultiNodeParams::setNodeIdPrefix(const QString &node_id_prefix) {
    m_node_id_prefix = node_id_prefix;
    m_node_id_prefix_isSet = true;
}

bool OAIMultiNodeParams::is_node_id_prefix_Set() const{
    return m_node_id_prefix_isSet;
}

bool OAIMultiNodeParams::is_node_id_prefix_Valid() const{
    return m_node_id_prefix_isValid;
}

bool OAIMultiNodeParams::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_node_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMultiNodeParams::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
