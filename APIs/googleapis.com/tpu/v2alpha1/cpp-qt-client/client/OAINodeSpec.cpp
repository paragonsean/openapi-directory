/**
 * Cloud TPU API
 * TPU API provides customers with access to Google TPU technology.
 *
 * The version of the OpenAPI document: v2alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINodeSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINodeSpec::OAINodeSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINodeSpec::OAINodeSpec() {
    this->initializeModel();
}

OAINodeSpec::~OAINodeSpec() {}

void OAINodeSpec::initializeModel() {

    m_multi_node_params_isSet = false;
    m_multi_node_params_isValid = false;

    m_node_isSet = false;
    m_node_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;
}

void OAINodeSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINodeSpec::fromJsonObject(QJsonObject json) {

    m_multi_node_params_isValid = ::OpenAPI::fromJsonValue(m_multi_node_params, json[QString("multiNodeParams")]);
    m_multi_node_params_isSet = !json[QString("multiNodeParams")].isNull() && m_multi_node_params_isValid;

    m_node_isValid = ::OpenAPI::fromJsonValue(m_node, json[QString("node")]);
    m_node_isSet = !json[QString("node")].isNull() && m_node_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("nodeId")]);
    m_node_id_isSet = !json[QString("nodeId")].isNull() && m_node_id_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;
}

QString OAINodeSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINodeSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_multi_node_params.isSet()) {
        obj.insert(QString("multiNodeParams"), ::OpenAPI::toJsonValue(m_multi_node_params));
    }
    if (m_node.isSet()) {
        obj.insert(QString("node"), ::OpenAPI::toJsonValue(m_node));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("nodeId"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_parent_isSet) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    return obj;
}

OAIMultiNodeParams OAINodeSpec::getMultiNodeParams() const {
    return m_multi_node_params;
}
void OAINodeSpec::setMultiNodeParams(const OAIMultiNodeParams &multi_node_params) {
    m_multi_node_params = multi_node_params;
    m_multi_node_params_isSet = true;
}

bool OAINodeSpec::is_multi_node_params_Set() const{
    return m_multi_node_params_isSet;
}

bool OAINodeSpec::is_multi_node_params_Valid() const{
    return m_multi_node_params_isValid;
}

OAINode OAINodeSpec::getNode() const {
    return m_node;
}
void OAINodeSpec::setNode(const OAINode &node) {
    m_node = node;
    m_node_isSet = true;
}

bool OAINodeSpec::is_node_Set() const{
    return m_node_isSet;
}

bool OAINodeSpec::is_node_Valid() const{
    return m_node_isValid;
}

QString OAINodeSpec::getNodeId() const {
    return m_node_id;
}
void OAINodeSpec::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAINodeSpec::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAINodeSpec::is_node_id_Valid() const{
    return m_node_id_isValid;
}

QString OAINodeSpec::getParent() const {
    return m_parent;
}
void OAINodeSpec::setParent(const QString &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAINodeSpec::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAINodeSpec::is_parent_Valid() const{
    return m_parent_isValid;
}

bool OAINodeSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_multi_node_params.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINodeSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
