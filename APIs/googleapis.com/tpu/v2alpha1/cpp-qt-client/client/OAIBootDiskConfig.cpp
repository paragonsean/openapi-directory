/**
 * Cloud TPU API
 * TPU API provides customers with access to Google TPU technology.
 *
 * The version of the OpenAPI document: v2alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBootDiskConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBootDiskConfig::OAIBootDiskConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBootDiskConfig::OAIBootDiskConfig() {
    this->initializeModel();
}

OAIBootDiskConfig::~OAIBootDiskConfig() {}

void OAIBootDiskConfig::initializeModel() {

    m_customer_encryption_key_isSet = false;
    m_customer_encryption_key_isValid = false;

    m_enable_confidential_compute_isSet = false;
    m_enable_confidential_compute_isValid = false;
}

void OAIBootDiskConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBootDiskConfig::fromJsonObject(QJsonObject json) {

    m_customer_encryption_key_isValid = ::OpenAPI::fromJsonValue(m_customer_encryption_key, json[QString("customerEncryptionKey")]);
    m_customer_encryption_key_isSet = !json[QString("customerEncryptionKey")].isNull() && m_customer_encryption_key_isValid;

    m_enable_confidential_compute_isValid = ::OpenAPI::fromJsonValue(m_enable_confidential_compute, json[QString("enableConfidentialCompute")]);
    m_enable_confidential_compute_isSet = !json[QString("enableConfidentialCompute")].isNull() && m_enable_confidential_compute_isValid;
}

QString OAIBootDiskConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBootDiskConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_customer_encryption_key.isSet()) {
        obj.insert(QString("customerEncryptionKey"), ::OpenAPI::toJsonValue(m_customer_encryption_key));
    }
    if (m_enable_confidential_compute_isSet) {
        obj.insert(QString("enableConfidentialCompute"), ::OpenAPI::toJsonValue(m_enable_confidential_compute));
    }
    return obj;
}

OAICustomerEncryptionKey OAIBootDiskConfig::getCustomerEncryptionKey() const {
    return m_customer_encryption_key;
}
void OAIBootDiskConfig::setCustomerEncryptionKey(const OAICustomerEncryptionKey &customer_encryption_key) {
    m_customer_encryption_key = customer_encryption_key;
    m_customer_encryption_key_isSet = true;
}

bool OAIBootDiskConfig::is_customer_encryption_key_Set() const{
    return m_customer_encryption_key_isSet;
}

bool OAIBootDiskConfig::is_customer_encryption_key_Valid() const{
    return m_customer_encryption_key_isValid;
}

bool OAIBootDiskConfig::isEnableConfidentialCompute() const {
    return m_enable_confidential_compute;
}
void OAIBootDiskConfig::setEnableConfidentialCompute(const bool &enable_confidential_compute) {
    m_enable_confidential_compute = enable_confidential_compute;
    m_enable_confidential_compute_isSet = true;
}

bool OAIBootDiskConfig::is_enable_confidential_compute_Set() const{
    return m_enable_confidential_compute_isSet;
}

bool OAIBootDiskConfig::is_enable_confidential_compute_Valid() const{
    return m_enable_confidential_compute_isValid;
}

bool OAIBootDiskConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_customer_encryption_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_confidential_compute_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBootDiskConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
