# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MultisliceParams(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, node_count: int=None, node_id_prefix: str=None):
        """MultisliceParams - a model defined in OpenAPI

        :param node_count: The node_count of this MultisliceParams.
        :param node_id_prefix: The node_id_prefix of this MultisliceParams.
        """
        self.openapi_types = {
            'node_count': int,
            'node_id_prefix': str
        }

        self.attribute_map = {
            'node_count': 'nodeCount',
            'node_id_prefix': 'nodeIdPrefix'
        }

        self._node_count = node_count
        self._node_id_prefix = node_id_prefix

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MultisliceParams':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MultisliceParams of this MultisliceParams.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def node_count(self):
        """Gets the node_count of this MultisliceParams.

        Required. Number of nodes with this spec. The system will attempt to provison \"node_count\" nodes as part of the request. This needs to be > 1.

        :return: The node_count of this MultisliceParams.
        :rtype: int
        """
        return self._node_count

    @node_count.setter
    def node_count(self, node_count):
        """Sets the node_count of this MultisliceParams.

        Required. Number of nodes with this spec. The system will attempt to provison \"node_count\" nodes as part of the request. This needs to be > 1.

        :param node_count: The node_count of this MultisliceParams.
        :type node_count: int
        """

        self._node_count = node_count

    @property
    def node_id_prefix(self):
        """Gets the node_id_prefix of this MultisliceParams.

        Optional. Prefix of node_ids in case of multislice request. Should follow the `^[A-Za-z0-9_.~+%-]+$` regex format. If node_count = 3 and node_id_prefix = \"np\", node ids of nodes created will be \"np-0\", \"np-1\", \"np-2\". If this field is not provided we use queued_resource_id as the node_id_prefix.

        :return: The node_id_prefix of this MultisliceParams.
        :rtype: str
        """
        return self._node_id_prefix

    @node_id_prefix.setter
    def node_id_prefix(self, node_id_prefix):
        """Sets the node_id_prefix of this MultisliceParams.

        Optional. Prefix of node_ids in case of multislice request. Should follow the `^[A-Za-z0-9_.~+%-]+$` regex format. If node_count = 3 and node_id_prefix = \"np\", node ids of nodes created will be \"np-0\", \"np-1\", \"np-2\". If this field is not provided we use queued_resource_id as the node_id_prefix.

        :param node_id_prefix: The node_id_prefix of this MultisliceParams.
        :type node_id_prefix: str
        """

        self._node_id_prefix = node_id_prefix
