# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NetworkConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, can_ip_forward: bool=None, enable_external_ips: bool=None, network: str=None, queue_count: int=None, subnetwork: str=None):
        """NetworkConfig - a model defined in OpenAPI

        :param can_ip_forward: The can_ip_forward of this NetworkConfig.
        :param enable_external_ips: The enable_external_ips of this NetworkConfig.
        :param network: The network of this NetworkConfig.
        :param queue_count: The queue_count of this NetworkConfig.
        :param subnetwork: The subnetwork of this NetworkConfig.
        """
        self.openapi_types = {
            'can_ip_forward': bool,
            'enable_external_ips': bool,
            'network': str,
            'queue_count': int,
            'subnetwork': str
        }

        self.attribute_map = {
            'can_ip_forward': 'canIpForward',
            'enable_external_ips': 'enableExternalIps',
            'network': 'network',
            'queue_count': 'queueCount',
            'subnetwork': 'subnetwork'
        }

        self._can_ip_forward = can_ip_forward
        self._enable_external_ips = enable_external_ips
        self._network = network
        self._queue_count = queue_count
        self._subnetwork = subnetwork

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkConfig of this NetworkConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def can_ip_forward(self):
        """Gets the can_ip_forward of this NetworkConfig.

        Allows the TPU node to send and receive packets with non-matching destination or source IPs. This is required if you plan to use the TPU workers to forward routes.

        :return: The can_ip_forward of this NetworkConfig.
        :rtype: bool
        """
        return self._can_ip_forward

    @can_ip_forward.setter
    def can_ip_forward(self, can_ip_forward):
        """Sets the can_ip_forward of this NetworkConfig.

        Allows the TPU node to send and receive packets with non-matching destination or source IPs. This is required if you plan to use the TPU workers to forward routes.

        :param can_ip_forward: The can_ip_forward of this NetworkConfig.
        :type can_ip_forward: bool
        """

        self._can_ip_forward = can_ip_forward

    @property
    def enable_external_ips(self):
        """Gets the enable_external_ips of this NetworkConfig.

        Indicates that external IP addresses would be associated with the TPU workers. If set to false, the specified subnetwork or network should have Private Google Access enabled.

        :return: The enable_external_ips of this NetworkConfig.
        :rtype: bool
        """
        return self._enable_external_ips

    @enable_external_ips.setter
    def enable_external_ips(self, enable_external_ips):
        """Sets the enable_external_ips of this NetworkConfig.

        Indicates that external IP addresses would be associated with the TPU workers. If set to false, the specified subnetwork or network should have Private Google Access enabled.

        :param enable_external_ips: The enable_external_ips of this NetworkConfig.
        :type enable_external_ips: bool
        """

        self._enable_external_ips = enable_external_ips

    @property
    def network(self):
        """Gets the network of this NetworkConfig.

        The name of the network for the TPU node. It must be a preexisting Google Compute Engine network. If none is provided, \"default\" will be used.

        :return: The network of this NetworkConfig.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this NetworkConfig.

        The name of the network for the TPU node. It must be a preexisting Google Compute Engine network. If none is provided, \"default\" will be used.

        :param network: The network of this NetworkConfig.
        :type network: str
        """

        self._network = network

    @property
    def queue_count(self):
        """Gets the queue_count of this NetworkConfig.

        Optional. Specifies networking queue count for TPU VM instance's network interface.

        :return: The queue_count of this NetworkConfig.
        :rtype: int
        """
        return self._queue_count

    @queue_count.setter
    def queue_count(self, queue_count):
        """Sets the queue_count of this NetworkConfig.

        Optional. Specifies networking queue count for TPU VM instance's network interface.

        :param queue_count: The queue_count of this NetworkConfig.
        :type queue_count: int
        """

        self._queue_count = queue_count

    @property
    def subnetwork(self):
        """Gets the subnetwork of this NetworkConfig.

        The name of the subnetwork for the TPU node. It must be a preexisting Google Compute Engine subnetwork. If none is provided, \"default\" will be used.

        :return: The subnetwork of this NetworkConfig.
        :rtype: str
        """
        return self._subnetwork

    @subnetwork.setter
    def subnetwork(self, subnetwork):
        """Sets the subnetwork of this NetworkConfig.

        The name of the subnetwork for the TPU node. It must be a preexisting Google Compute Engine subnetwork. If none is provided, \"default\" will be used.

        :param subnetwork: The subnetwork of this NetworkConfig.
        :type subnetwork: str
        """

        self._subnetwork = subnetwork
