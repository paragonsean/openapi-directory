# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.multislice_params import MultisliceParams
from openapi_server.models.node import Node
from openapi_server import util


class NodeSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, multislice_params: MultisliceParams=None, node: Node=None, node_id: str=None, parent: str=None):
        """NodeSpec - a model defined in OpenAPI

        :param multislice_params: The multislice_params of this NodeSpec.
        :param node: The node of this NodeSpec.
        :param node_id: The node_id of this NodeSpec.
        :param parent: The parent of this NodeSpec.
        """
        self.openapi_types = {
            'multislice_params': MultisliceParams,
            'node': Node,
            'node_id': str,
            'parent': str
        }

        self.attribute_map = {
            'multislice_params': 'multisliceParams',
            'node': 'node',
            'node_id': 'nodeId',
            'parent': 'parent'
        }

        self._multislice_params = multislice_params
        self._node = node
        self._node_id = node_id
        self._parent = parent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeSpec of this NodeSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def multislice_params(self):
        """Gets the multislice_params of this NodeSpec.


        :return: The multislice_params of this NodeSpec.
        :rtype: MultisliceParams
        """
        return self._multislice_params

    @multislice_params.setter
    def multislice_params(self, multislice_params):
        """Sets the multislice_params of this NodeSpec.


        :param multislice_params: The multislice_params of this NodeSpec.
        :type multislice_params: MultisliceParams
        """

        self._multislice_params = multislice_params

    @property
    def node(self):
        """Gets the node of this NodeSpec.


        :return: The node of this NodeSpec.
        :rtype: Node
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this NodeSpec.


        :param node: The node of this NodeSpec.
        :type node: Node
        """

        self._node = node

    @property
    def node_id(self):
        """Gets the node_id of this NodeSpec.

        Optional. The unqualified resource name. Should follow the `^[A-Za-z0-9_.~+%-]+$` regex format. This is only specified when requesting a single node. In case of multislice requests, multislice_params must be populated instead.

        :return: The node_id of this NodeSpec.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this NodeSpec.

        Optional. The unqualified resource name. Should follow the `^[A-Za-z0-9_.~+%-]+$` regex format. This is only specified when requesting a single node. In case of multislice requests, multislice_params must be populated instead.

        :param node_id: The node_id of this NodeSpec.
        :type node_id: str
        """

        self._node_id = node_id

    @property
    def parent(self):
        """Gets the parent of this NodeSpec.

        Required. The parent resource name.

        :return: The parent of this NodeSpec.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this NodeSpec.

        Required. The parent resource name.

        :param parent: The parent of this NodeSpec.
        :type parent: str
        """

        self._parent = parent
