# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ServiceAccount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, scope: List[str]=None):
        """ServiceAccount - a model defined in OpenAPI

        :param email: The email of this ServiceAccount.
        :param scope: The scope of this ServiceAccount.
        """
        self.openapi_types = {
            'email': str,
            'scope': List[str]
        }

        self.attribute_map = {
            'email': 'email',
            'scope': 'scope'
        }

        self._email = email
        self._scope = scope

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceAccount of this ServiceAccount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this ServiceAccount.

        Email address of the service account. If empty, default Compute service account will be used.

        :return: The email of this ServiceAccount.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ServiceAccount.

        Email address of the service account. If empty, default Compute service account will be used.

        :param email: The email of this ServiceAccount.
        :type email: str
        """

        self._email = email

    @property
    def scope(self):
        """Gets the scope of this ServiceAccount.

        The list of scopes to be made available for this service account. If empty, access to all Cloud APIs will be allowed.

        :return: The scope of this ServiceAccount.
        :rtype: List[str]
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this ServiceAccount.

        The list of scopes to be made available for this service account. If empty, access to all Cloud APIs will be allowed.

        :param scope: The scope of this ServiceAccount.
        :type scope: List[str]
        """

        self._scope = scope
