# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.accelerator_config import AcceleratorConfig
from openapi_server.models.attached_disk import AttachedDisk
from openapi_server.models.network_config import NetworkConfig
from openapi_server.models.network_endpoint import NetworkEndpoint
from openapi_server.models.scheduling_config import SchedulingConfig
from openapi_server.models.service_account import ServiceAccount
from openapi_server.models.shielded_instance_config import ShieldedInstanceConfig
from openapi_server.models.symptom import Symptom
from openapi_server import util


class Node(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accelerator_config: AcceleratorConfig=None, accelerator_type: str=None, api_version: str=None, cidr_block: str=None, create_time: str=None, data_disks: List[AttachedDisk]=None, description: str=None, health: str=None, health_description: str=None, id: str=None, labels: Dict[str, str]=None, metadata: Dict[str, str]=None, multislice_node: bool=None, name: str=None, network_config: NetworkConfig=None, network_endpoints: List[NetworkEndpoint]=None, queued_resource: str=None, runtime_version: str=None, scheduling_config: SchedulingConfig=None, service_account: ServiceAccount=None, shielded_instance_config: ShieldedInstanceConfig=None, state: str=None, symptoms: List[Symptom]=None, tags: List[str]=None):
        """Node - a model defined in OpenAPI

        :param accelerator_config: The accelerator_config of this Node.
        :param accelerator_type: The accelerator_type of this Node.
        :param api_version: The api_version of this Node.
        :param cidr_block: The cidr_block of this Node.
        :param create_time: The create_time of this Node.
        :param data_disks: The data_disks of this Node.
        :param description: The description of this Node.
        :param health: The health of this Node.
        :param health_description: The health_description of this Node.
        :param id: The id of this Node.
        :param labels: The labels of this Node.
        :param metadata: The metadata of this Node.
        :param multislice_node: The multislice_node of this Node.
        :param name: The name of this Node.
        :param network_config: The network_config of this Node.
        :param network_endpoints: The network_endpoints of this Node.
        :param queued_resource: The queued_resource of this Node.
        :param runtime_version: The runtime_version of this Node.
        :param scheduling_config: The scheduling_config of this Node.
        :param service_account: The service_account of this Node.
        :param shielded_instance_config: The shielded_instance_config of this Node.
        :param state: The state of this Node.
        :param symptoms: The symptoms of this Node.
        :param tags: The tags of this Node.
        """
        self.openapi_types = {
            'accelerator_config': AcceleratorConfig,
            'accelerator_type': str,
            'api_version': str,
            'cidr_block': str,
            'create_time': str,
            'data_disks': List[AttachedDisk],
            'description': str,
            'health': str,
            'health_description': str,
            'id': str,
            'labels': Dict[str, str],
            'metadata': Dict[str, str],
            'multislice_node': bool,
            'name': str,
            'network_config': NetworkConfig,
            'network_endpoints': List[NetworkEndpoint],
            'queued_resource': str,
            'runtime_version': str,
            'scheduling_config': SchedulingConfig,
            'service_account': ServiceAccount,
            'shielded_instance_config': ShieldedInstanceConfig,
            'state': str,
            'symptoms': List[Symptom],
            'tags': List[str]
        }

        self.attribute_map = {
            'accelerator_config': 'acceleratorConfig',
            'accelerator_type': 'acceleratorType',
            'api_version': 'apiVersion',
            'cidr_block': 'cidrBlock',
            'create_time': 'createTime',
            'data_disks': 'dataDisks',
            'description': 'description',
            'health': 'health',
            'health_description': 'healthDescription',
            'id': 'id',
            'labels': 'labels',
            'metadata': 'metadata',
            'multislice_node': 'multisliceNode',
            'name': 'name',
            'network_config': 'networkConfig',
            'network_endpoints': 'networkEndpoints',
            'queued_resource': 'queuedResource',
            'runtime_version': 'runtimeVersion',
            'scheduling_config': 'schedulingConfig',
            'service_account': 'serviceAccount',
            'shielded_instance_config': 'shieldedInstanceConfig',
            'state': 'state',
            'symptoms': 'symptoms',
            'tags': 'tags'
        }

        self._accelerator_config = accelerator_config
        self._accelerator_type = accelerator_type
        self._api_version = api_version
        self._cidr_block = cidr_block
        self._create_time = create_time
        self._data_disks = data_disks
        self._description = description
        self._health = health
        self._health_description = health_description
        self._id = id
        self._labels = labels
        self._metadata = metadata
        self._multislice_node = multislice_node
        self._name = name
        self._network_config = network_config
        self._network_endpoints = network_endpoints
        self._queued_resource = queued_resource
        self._runtime_version = runtime_version
        self._scheduling_config = scheduling_config
        self._service_account = service_account
        self._shielded_instance_config = shielded_instance_config
        self._state = state
        self._symptoms = symptoms
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Node':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Node of this Node.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accelerator_config(self):
        """Gets the accelerator_config of this Node.


        :return: The accelerator_config of this Node.
        :rtype: AcceleratorConfig
        """
        return self._accelerator_config

    @accelerator_config.setter
    def accelerator_config(self, accelerator_config):
        """Sets the accelerator_config of this Node.


        :param accelerator_config: The accelerator_config of this Node.
        :type accelerator_config: AcceleratorConfig
        """

        self._accelerator_config = accelerator_config

    @property
    def accelerator_type(self):
        """Gets the accelerator_type of this Node.

        Optional. The type of hardware accelerators associated with this node.

        :return: The accelerator_type of this Node.
        :rtype: str
        """
        return self._accelerator_type

    @accelerator_type.setter
    def accelerator_type(self, accelerator_type):
        """Sets the accelerator_type of this Node.

        Optional. The type of hardware accelerators associated with this node.

        :param accelerator_type: The accelerator_type of this Node.
        :type accelerator_type: str
        """

        self._accelerator_type = accelerator_type

    @property
    def api_version(self):
        """Gets the api_version of this Node.

        Output only. The API version that created this Node.

        :return: The api_version of this Node.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this Node.

        Output only. The API version that created this Node.

        :param api_version: The api_version of this Node.
        :type api_version: str
        """
        allowed_values = ["API_VERSION_UNSPECIFIED", "V1_ALPHA1", "V1", "V2_ALPHA1", "V2"]  # noqa: E501
        if api_version not in allowed_values:
            raise ValueError(
                "Invalid value for `api_version` ({0}), must be one of {1}"
                .format(api_version, allowed_values)
            )

        self._api_version = api_version

    @property
    def cidr_block(self):
        """Gets the cidr_block of this Node.

        The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger block would be wasteful (a node can only consume one IP address). Errors will occur if the CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts with any subnetworks in the user's provided network, or the provided network is peered with another network that is using that CIDR block.

        :return: The cidr_block of this Node.
        :rtype: str
        """
        return self._cidr_block

    @cidr_block.setter
    def cidr_block(self, cidr_block):
        """Sets the cidr_block of this Node.

        The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger block would be wasteful (a node can only consume one IP address). Errors will occur if the CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts with any subnetworks in the user's provided network, or the provided network is peered with another network that is using that CIDR block.

        :param cidr_block: The cidr_block of this Node.
        :type cidr_block: str
        """

        self._cidr_block = cidr_block

    @property
    def create_time(self):
        """Gets the create_time of this Node.

        Output only. The time when the node was created.

        :return: The create_time of this Node.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Node.

        Output only. The time when the node was created.

        :param create_time: The create_time of this Node.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def data_disks(self):
        """Gets the data_disks of this Node.

        The additional data disks for the Node.

        :return: The data_disks of this Node.
        :rtype: List[AttachedDisk]
        """
        return self._data_disks

    @data_disks.setter
    def data_disks(self, data_disks):
        """Sets the data_disks of this Node.

        The additional data disks for the Node.

        :param data_disks: The data_disks of this Node.
        :type data_disks: List[AttachedDisk]
        """

        self._data_disks = data_disks

    @property
    def description(self):
        """Gets the description of this Node.

        The user-supplied description of the TPU. Maximum of 512 characters.

        :return: The description of this Node.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Node.

        The user-supplied description of the TPU. Maximum of 512 characters.

        :param description: The description of this Node.
        :type description: str
        """

        self._description = description

    @property
    def health(self):
        """Gets the health of this Node.

        The health status of the TPU node.

        :return: The health of this Node.
        :rtype: str
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this Node.

        The health status of the TPU node.

        :param health: The health of this Node.
        :type health: str
        """
        allowed_values = ["HEALTH_UNSPECIFIED", "HEALTHY", "TIMEOUT", "UNHEALTHY_TENSORFLOW", "UNHEALTHY_MAINTENANCE"]  # noqa: E501
        if health not in allowed_values:
            raise ValueError(
                "Invalid value for `health` ({0}), must be one of {1}"
                .format(health, allowed_values)
            )

        self._health = health

    @property
    def health_description(self):
        """Gets the health_description of this Node.

        Output only. If this field is populated, it contains a description of why the TPU Node is unhealthy.

        :return: The health_description of this Node.
        :rtype: str
        """
        return self._health_description

    @health_description.setter
    def health_description(self, health_description):
        """Sets the health_description of this Node.

        Output only. If this field is populated, it contains a description of why the TPU Node is unhealthy.

        :param health_description: The health_description of this Node.
        :type health_description: str
        """

        self._health_description = health_description

    @property
    def id(self):
        """Gets the id of this Node.

        Output only. The unique identifier for the TPU Node.

        :return: The id of this Node.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Node.

        Output only. The unique identifier for the TPU Node.

        :param id: The id of this Node.
        :type id: str
        """

        self._id = id

    @property
    def labels(self):
        """Gets the labels of this Node.

        Resource labels to represent user-provided metadata.

        :return: The labels of this Node.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Node.

        Resource labels to represent user-provided metadata.

        :param labels: The labels of this Node.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def metadata(self):
        """Gets the metadata of this Node.

        Custom metadata to apply to the TPU Node. Can set startup-script and shutdown-script

        :return: The metadata of this Node.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Node.

        Custom metadata to apply to the TPU Node. Can set startup-script and shutdown-script

        :param metadata: The metadata of this Node.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def multislice_node(self):
        """Gets the multislice_node of this Node.

        Output only. Whether the Node belongs to a Multislice group.

        :return: The multislice_node of this Node.
        :rtype: bool
        """
        return self._multislice_node

    @multislice_node.setter
    def multislice_node(self, multislice_node):
        """Sets the multislice_node of this Node.

        Output only. Whether the Node belongs to a Multislice group.

        :param multislice_node: The multislice_node of this Node.
        :type multislice_node: bool
        """

        self._multislice_node = multislice_node

    @property
    def name(self):
        """Gets the name of this Node.

        Output only. Immutable. The name of the TPU.

        :return: The name of this Node.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Node.

        Output only. Immutable. The name of the TPU.

        :param name: The name of this Node.
        :type name: str
        """

        self._name = name

    @property
    def network_config(self):
        """Gets the network_config of this Node.


        :return: The network_config of this Node.
        :rtype: NetworkConfig
        """
        return self._network_config

    @network_config.setter
    def network_config(self, network_config):
        """Sets the network_config of this Node.


        :param network_config: The network_config of this Node.
        :type network_config: NetworkConfig
        """

        self._network_config = network_config

    @property
    def network_endpoints(self):
        """Gets the network_endpoints of this Node.

        Output only. The network endpoints where TPU workers can be accessed and sent work. It is recommended that runtime clients of the node reach out to the 0th entry in this map first.

        :return: The network_endpoints of this Node.
        :rtype: List[NetworkEndpoint]
        """
        return self._network_endpoints

    @network_endpoints.setter
    def network_endpoints(self, network_endpoints):
        """Sets the network_endpoints of this Node.

        Output only. The network endpoints where TPU workers can be accessed and sent work. It is recommended that runtime clients of the node reach out to the 0th entry in this map first.

        :param network_endpoints: The network_endpoints of this Node.
        :type network_endpoints: List[NetworkEndpoint]
        """

        self._network_endpoints = network_endpoints

    @property
    def queued_resource(self):
        """Gets the queued_resource of this Node.

        Output only. The qualified name of the QueuedResource that requested this Node.

        :return: The queued_resource of this Node.
        :rtype: str
        """
        return self._queued_resource

    @queued_resource.setter
    def queued_resource(self, queued_resource):
        """Sets the queued_resource of this Node.

        Output only. The qualified name of the QueuedResource that requested this Node.

        :param queued_resource: The queued_resource of this Node.
        :type queued_resource: str
        """

        self._queued_resource = queued_resource

    @property
    def runtime_version(self):
        """Gets the runtime_version of this Node.

        Required. The runtime version running in the Node.

        :return: The runtime_version of this Node.
        :rtype: str
        """
        return self._runtime_version

    @runtime_version.setter
    def runtime_version(self, runtime_version):
        """Sets the runtime_version of this Node.

        Required. The runtime version running in the Node.

        :param runtime_version: The runtime_version of this Node.
        :type runtime_version: str
        """

        self._runtime_version = runtime_version

    @property
    def scheduling_config(self):
        """Gets the scheduling_config of this Node.


        :return: The scheduling_config of this Node.
        :rtype: SchedulingConfig
        """
        return self._scheduling_config

    @scheduling_config.setter
    def scheduling_config(self, scheduling_config):
        """Sets the scheduling_config of this Node.


        :param scheduling_config: The scheduling_config of this Node.
        :type scheduling_config: SchedulingConfig
        """

        self._scheduling_config = scheduling_config

    @property
    def service_account(self):
        """Gets the service_account of this Node.


        :return: The service_account of this Node.
        :rtype: ServiceAccount
        """
        return self._service_account

    @service_account.setter
    def service_account(self, service_account):
        """Sets the service_account of this Node.


        :param service_account: The service_account of this Node.
        :type service_account: ServiceAccount
        """

        self._service_account = service_account

    @property
    def shielded_instance_config(self):
        """Gets the shielded_instance_config of this Node.


        :return: The shielded_instance_config of this Node.
        :rtype: ShieldedInstanceConfig
        """
        return self._shielded_instance_config

    @shielded_instance_config.setter
    def shielded_instance_config(self, shielded_instance_config):
        """Sets the shielded_instance_config of this Node.


        :param shielded_instance_config: The shielded_instance_config of this Node.
        :type shielded_instance_config: ShieldedInstanceConfig
        """

        self._shielded_instance_config = shielded_instance_config

    @property
    def state(self):
        """Gets the state of this Node.

        Output only. The current state for the TPU Node.

        :return: The state of this Node.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Node.

        Output only. The current state for the TPU Node.

        :param state: The state of this Node.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "READY", "RESTARTING", "REIMAGING", "DELETING", "REPAIRING", "STOPPED", "STOPPING", "STARTING", "PREEMPTED", "TERMINATED", "HIDING", "HIDDEN", "UNHIDING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def symptoms(self):
        """Gets the symptoms of this Node.

        Output only. The Symptoms that have occurred to the TPU Node.

        :return: The symptoms of this Node.
        :rtype: List[Symptom]
        """
        return self._symptoms

    @symptoms.setter
    def symptoms(self, symptoms):
        """Sets the symptoms of this Node.

        Output only. The Symptoms that have occurred to the TPU Node.

        :param symptoms: The symptoms of this Node.
        :type symptoms: List[Symptom]
        """

        self._symptoms = symptoms

    @property
    def tags(self):
        """Gets the tags of this Node.

        Tags to apply to the TPU Node. Tags are used to identify valid sources or targets for network firewalls.

        :return: The tags of this Node.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Node.

        Tags to apply to the TPU Node. Tags are used to identify valid sources or targets for network firewalls.

        :param tags: The tags of this Node.
        :type tags: List[str]
        """

        self._tags = tags
