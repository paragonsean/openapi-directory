# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.failed_data import FailedData
from openapi_server import util


class QueuedResourceState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accepted_data: object=None, active_data: object=None, creating_data: object=None, deleting_data: object=None, failed_data: FailedData=None, provisioning_data: object=None, state: str=None, state_initiator: str=None, suspended_data: object=None, suspending_data: object=None):
        """QueuedResourceState - a model defined in OpenAPI

        :param accepted_data: The accepted_data of this QueuedResourceState.
        :param active_data: The active_data of this QueuedResourceState.
        :param creating_data: The creating_data of this QueuedResourceState.
        :param deleting_data: The deleting_data of this QueuedResourceState.
        :param failed_data: The failed_data of this QueuedResourceState.
        :param provisioning_data: The provisioning_data of this QueuedResourceState.
        :param state: The state of this QueuedResourceState.
        :param state_initiator: The state_initiator of this QueuedResourceState.
        :param suspended_data: The suspended_data of this QueuedResourceState.
        :param suspending_data: The suspending_data of this QueuedResourceState.
        """
        self.openapi_types = {
            'accepted_data': object,
            'active_data': object,
            'creating_data': object,
            'deleting_data': object,
            'failed_data': FailedData,
            'provisioning_data': object,
            'state': str,
            'state_initiator': str,
            'suspended_data': object,
            'suspending_data': object
        }

        self.attribute_map = {
            'accepted_data': 'acceptedData',
            'active_data': 'activeData',
            'creating_data': 'creatingData',
            'deleting_data': 'deletingData',
            'failed_data': 'failedData',
            'provisioning_data': 'provisioningData',
            'state': 'state',
            'state_initiator': 'stateInitiator',
            'suspended_data': 'suspendedData',
            'suspending_data': 'suspendingData'
        }

        self._accepted_data = accepted_data
        self._active_data = active_data
        self._creating_data = creating_data
        self._deleting_data = deleting_data
        self._failed_data = failed_data
        self._provisioning_data = provisioning_data
        self._state = state
        self._state_initiator = state_initiator
        self._suspended_data = suspended_data
        self._suspending_data = suspending_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueuedResourceState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueuedResourceState of this QueuedResourceState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accepted_data(self):
        """Gets the accepted_data of this QueuedResourceState.

        Further data for the accepted state.

        :return: The accepted_data of this QueuedResourceState.
        :rtype: object
        """
        return self._accepted_data

    @accepted_data.setter
    def accepted_data(self, accepted_data):
        """Sets the accepted_data of this QueuedResourceState.

        Further data for the accepted state.

        :param accepted_data: The accepted_data of this QueuedResourceState.
        :type accepted_data: object
        """

        self._accepted_data = accepted_data

    @property
    def active_data(self):
        """Gets the active_data of this QueuedResourceState.

        Further data for the active state.

        :return: The active_data of this QueuedResourceState.
        :rtype: object
        """
        return self._active_data

    @active_data.setter
    def active_data(self, active_data):
        """Sets the active_data of this QueuedResourceState.

        Further data for the active state.

        :param active_data: The active_data of this QueuedResourceState.
        :type active_data: object
        """

        self._active_data = active_data

    @property
    def creating_data(self):
        """Gets the creating_data of this QueuedResourceState.

        Further data for the creating state.

        :return: The creating_data of this QueuedResourceState.
        :rtype: object
        """
        return self._creating_data

    @creating_data.setter
    def creating_data(self, creating_data):
        """Sets the creating_data of this QueuedResourceState.

        Further data for the creating state.

        :param creating_data: The creating_data of this QueuedResourceState.
        :type creating_data: object
        """

        self._creating_data = creating_data

    @property
    def deleting_data(self):
        """Gets the deleting_data of this QueuedResourceState.

        Further data for the deleting state.

        :return: The deleting_data of this QueuedResourceState.
        :rtype: object
        """
        return self._deleting_data

    @deleting_data.setter
    def deleting_data(self, deleting_data):
        """Sets the deleting_data of this QueuedResourceState.

        Further data for the deleting state.

        :param deleting_data: The deleting_data of this QueuedResourceState.
        :type deleting_data: object
        """

        self._deleting_data = deleting_data

    @property
    def failed_data(self):
        """Gets the failed_data of this QueuedResourceState.


        :return: The failed_data of this QueuedResourceState.
        :rtype: FailedData
        """
        return self._failed_data

    @failed_data.setter
    def failed_data(self, failed_data):
        """Sets the failed_data of this QueuedResourceState.


        :param failed_data: The failed_data of this QueuedResourceState.
        :type failed_data: FailedData
        """

        self._failed_data = failed_data

    @property
    def provisioning_data(self):
        """Gets the provisioning_data of this QueuedResourceState.

        Further data for the provisioning state.

        :return: The provisioning_data of this QueuedResourceState.
        :rtype: object
        """
        return self._provisioning_data

    @provisioning_data.setter
    def provisioning_data(self, provisioning_data):
        """Sets the provisioning_data of this QueuedResourceState.

        Further data for the provisioning state.

        :param provisioning_data: The provisioning_data of this QueuedResourceState.
        :type provisioning_data: object
        """

        self._provisioning_data = provisioning_data

    @property
    def state(self):
        """Gets the state of this QueuedResourceState.

        Output only. State of the QueuedResource request.

        :return: The state of this QueuedResourceState.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this QueuedResourceState.

        Output only. State of the QueuedResource request.

        :param state: The state of this QueuedResourceState.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "ACCEPTED", "PROVISIONING", "FAILED", "DELETING", "ACTIVE", "SUSPENDING", "SUSPENDED", "WAITING_FOR_RESOURCES"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_initiator(self):
        """Gets the state_initiator of this QueuedResourceState.

        Output only. The initiator of the QueuedResources's current state. Used to indicate whether the SUSPENDING/SUSPENDED state was initiated by the user or the service.

        :return: The state_initiator of this QueuedResourceState.
        :rtype: str
        """
        return self._state_initiator

    @state_initiator.setter
    def state_initiator(self, state_initiator):
        """Sets the state_initiator of this QueuedResourceState.

        Output only. The initiator of the QueuedResources's current state. Used to indicate whether the SUSPENDING/SUSPENDED state was initiated by the user or the service.

        :param state_initiator: The state_initiator of this QueuedResourceState.
        :type state_initiator: str
        """
        allowed_values = ["STATE_INITIATOR_UNSPECIFIED", "USER", "SERVICE"]  # noqa: E501
        if state_initiator not in allowed_values:
            raise ValueError(
                "Invalid value for `state_initiator` ({0}), must be one of {1}"
                .format(state_initiator, allowed_values)
            )

        self._state_initiator = state_initiator

    @property
    def suspended_data(self):
        """Gets the suspended_data of this QueuedResourceState.

        Further data for the suspended state.

        :return: The suspended_data of this QueuedResourceState.
        :rtype: object
        """
        return self._suspended_data

    @suspended_data.setter
    def suspended_data(self, suspended_data):
        """Sets the suspended_data of this QueuedResourceState.

        Further data for the suspended state.

        :param suspended_data: The suspended_data of this QueuedResourceState.
        :type suspended_data: object
        """

        self._suspended_data = suspended_data

    @property
    def suspending_data(self):
        """Gets the suspending_data of this QueuedResourceState.

        Further data for the suspending state.

        :return: The suspending_data of this QueuedResourceState.
        :rtype: object
        """
        return self._suspending_data

    @suspending_data.setter
    def suspending_data(self, suspending_data):
        """Sets the suspending_data of this QueuedResourceState.

        Further data for the suspending state.

        :param suspending_data: The suspending_data of this QueuedResourceState.
        :type suspending_data: object
        """

        self._suspending_data = suspending_data
