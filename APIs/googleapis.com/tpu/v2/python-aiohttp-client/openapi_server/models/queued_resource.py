# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.guaranteed import Guaranteed
from openapi_server.models.queued_resource_state import QueuedResourceState
from openapi_server.models.queueing_policy import QueueingPolicy
from openapi_server.models.tpu import Tpu
from openapi_server import util


class QueuedResource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, guaranteed: Guaranteed=None, name: str=None, queueing_policy: QueueingPolicy=None, reservation_name: str=None, spot: object=None, state: QueuedResourceState=None, tpu: Tpu=None):
        """QueuedResource - a model defined in OpenAPI

        :param create_time: The create_time of this QueuedResource.
        :param guaranteed: The guaranteed of this QueuedResource.
        :param name: The name of this QueuedResource.
        :param queueing_policy: The queueing_policy of this QueuedResource.
        :param reservation_name: The reservation_name of this QueuedResource.
        :param spot: The spot of this QueuedResource.
        :param state: The state of this QueuedResource.
        :param tpu: The tpu of this QueuedResource.
        """
        self.openapi_types = {
            'create_time': str,
            'guaranteed': Guaranteed,
            'name': str,
            'queueing_policy': QueueingPolicy,
            'reservation_name': str,
            'spot': object,
            'state': QueuedResourceState,
            'tpu': Tpu
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'guaranteed': 'guaranteed',
            'name': 'name',
            'queueing_policy': 'queueingPolicy',
            'reservation_name': 'reservationName',
            'spot': 'spot',
            'state': 'state',
            'tpu': 'tpu'
        }

        self._create_time = create_time
        self._guaranteed = guaranteed
        self._name = name
        self._queueing_policy = queueing_policy
        self._reservation_name = reservation_name
        self._spot = spot
        self._state = state
        self._tpu = tpu

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueuedResource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueuedResource of this QueuedResource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this QueuedResource.

        Output only. The time when the QueuedResource was created.

        :return: The create_time of this QueuedResource.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this QueuedResource.

        Output only. The time when the QueuedResource was created.

        :param create_time: The create_time of this QueuedResource.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def guaranteed(self):
        """Gets the guaranteed of this QueuedResource.


        :return: The guaranteed of this QueuedResource.
        :rtype: Guaranteed
        """
        return self._guaranteed

    @guaranteed.setter
    def guaranteed(self, guaranteed):
        """Sets the guaranteed of this QueuedResource.


        :param guaranteed: The guaranteed of this QueuedResource.
        :type guaranteed: Guaranteed
        """

        self._guaranteed = guaranteed

    @property
    def name(self):
        """Gets the name of this QueuedResource.

        Output only. Immutable. The name of the QueuedResource.

        :return: The name of this QueuedResource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this QueuedResource.

        Output only. Immutable. The name of the QueuedResource.

        :param name: The name of this QueuedResource.
        :type name: str
        """

        self._name = name

    @property
    def queueing_policy(self):
        """Gets the queueing_policy of this QueuedResource.


        :return: The queueing_policy of this QueuedResource.
        :rtype: QueueingPolicy
        """
        return self._queueing_policy

    @queueing_policy.setter
    def queueing_policy(self, queueing_policy):
        """Sets the queueing_policy of this QueuedResource.


        :param queueing_policy: The queueing_policy of this QueuedResource.
        :type queueing_policy: QueueingPolicy
        """

        self._queueing_policy = queueing_policy

    @property
    def reservation_name(self):
        """Gets the reservation_name of this QueuedResource.

        Optional. Name of the reservation in which the resource should be provisioned. Format: projects/{project}/locations/{zone}/reservations/{reservation}

        :return: The reservation_name of this QueuedResource.
        :rtype: str
        """
        return self._reservation_name

    @reservation_name.setter
    def reservation_name(self, reservation_name):
        """Sets the reservation_name of this QueuedResource.

        Optional. Name of the reservation in which the resource should be provisioned. Format: projects/{project}/locations/{zone}/reservations/{reservation}

        :param reservation_name: The reservation_name of this QueuedResource.
        :type reservation_name: str
        """

        self._reservation_name = reservation_name

    @property
    def spot(self):
        """Gets the spot of this QueuedResource.

        Spot tier definition.

        :return: The spot of this QueuedResource.
        :rtype: object
        """
        return self._spot

    @spot.setter
    def spot(self, spot):
        """Sets the spot of this QueuedResource.

        Spot tier definition.

        :param spot: The spot of this QueuedResource.
        :type spot: object
        """

        self._spot = spot

    @property
    def state(self):
        """Gets the state of this QueuedResource.


        :return: The state of this QueuedResource.
        :rtype: QueuedResourceState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this QueuedResource.


        :param state: The state of this QueuedResource.
        :type state: QueuedResourceState
        """

        self._state = state

    @property
    def tpu(self):
        """Gets the tpu of this QueuedResource.


        :return: The tpu of this QueuedResource.
        :rtype: Tpu
        """
        return self._tpu

    @tpu.setter
    def tpu(self, tpu):
        """Sets the tpu of this QueuedResource.


        :param tpu: The tpu of this QueuedResource.
        :type tpu: Tpu
        """

        self._tpu = tpu
