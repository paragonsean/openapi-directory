/**
 * Cloud TPU API
 * TPU API provides customers with access to Google TPU technology.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MultisliceParams model module.
 * @module model/MultisliceParams
 * @version v2
 */
class MultisliceParams {
    /**
     * Constructs a new <code>MultisliceParams</code>.
     * Parameters to specify for multislice QueuedResource requests. This message must be populated in case of multislice requests instead of node_id.
     * @alias module:model/MultisliceParams
     */
    constructor() { 
        
        MultisliceParams.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MultisliceParams</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MultisliceParams} obj Optional instance to populate.
     * @return {module:model/MultisliceParams} The populated <code>MultisliceParams</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MultisliceParams();

            if (data.hasOwnProperty('nodeCount')) {
                obj['nodeCount'] = ApiClient.convertToType(data['nodeCount'], 'Number');
            }
            if (data.hasOwnProperty('nodeIdPrefix')) {
                obj['nodeIdPrefix'] = ApiClient.convertToType(data['nodeIdPrefix'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MultisliceParams</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MultisliceParams</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['nodeIdPrefix'] && !(typeof data['nodeIdPrefix'] === 'string' || data['nodeIdPrefix'] instanceof String)) {
            throw new Error("Expected the field `nodeIdPrefix` to be a primitive type in the JSON string but got " + data['nodeIdPrefix']);
        }

        return true;
    }


}



/**
 * Required. Number of nodes with this spec. The system will attempt to provison \"node_count\" nodes as part of the request. This needs to be > 1.
 * @member {Number} nodeCount
 */
MultisliceParams.prototype['nodeCount'] = undefined;

/**
 * Optional. Prefix of node_ids in case of multislice request. Should follow the `^[A-Za-z0-9_.~+%-]+$` regex format. If node_count = 3 and node_id_prefix = \"np\", node ids of nodes created will be \"np-0\", \"np-1\", \"np-2\". If this field is not provided we use queued_resource_id as the node_id_prefix.
 * @member {String} nodeIdPrefix
 */
MultisliceParams.prototype['nodeIdPrefix'] = undefined;






export default MultisliceParams;

