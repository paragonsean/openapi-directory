/*
 * Cloud TPU API
 * TPU API provides customers with access to Google TPU technology.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FailedData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * QueuedResourceState defines the details of the QueuedResource request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:07.286308-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QueuedResourceState {
  public static final String SERIALIZED_NAME_ACCEPTED_DATA = "acceptedData";
  @SerializedName(SERIALIZED_NAME_ACCEPTED_DATA)
  private Object acceptedData;

  public static final String SERIALIZED_NAME_ACTIVE_DATA = "activeData";
  @SerializedName(SERIALIZED_NAME_ACTIVE_DATA)
  private Object activeData;

  public static final String SERIALIZED_NAME_CREATING_DATA = "creatingData";
  @SerializedName(SERIALIZED_NAME_CREATING_DATA)
  private Object creatingData;

  public static final String SERIALIZED_NAME_DELETING_DATA = "deletingData";
  @SerializedName(SERIALIZED_NAME_DELETING_DATA)
  private Object deletingData;

  public static final String SERIALIZED_NAME_FAILED_DATA = "failedData";
  @SerializedName(SERIALIZED_NAME_FAILED_DATA)
  private FailedData failedData;

  public static final String SERIALIZED_NAME_PROVISIONING_DATA = "provisioningData";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_DATA)
  private Object provisioningData;

  /**
   * Output only. State of the QueuedResource request.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    CREATING("CREATING"),
    
    ACCEPTED("ACCEPTED"),
    
    PROVISIONING("PROVISIONING"),
    
    FAILED("FAILED"),
    
    DELETING("DELETING"),
    
    ACTIVE("ACTIVE"),
    
    SUSPENDING("SUSPENDING"),
    
    SUSPENDED("SUSPENDED"),
    
    WAITING_FOR_RESOURCES("WAITING_FOR_RESOURCES");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  /**
   * Output only. The initiator of the QueuedResources&#39;s current state. Used to indicate whether the SUSPENDING/SUSPENDED state was initiated by the user or the service.
   */
  @JsonAdapter(StateInitiatorEnum.Adapter.class)
  public enum StateInitiatorEnum {
    STATE_INITIATOR_UNSPECIFIED("STATE_INITIATOR_UNSPECIFIED"),
    
    USER("USER"),
    
    SERVICE("SERVICE");

    private String value;

    StateInitiatorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateInitiatorEnum fromValue(String value) {
      for (StateInitiatorEnum b : StateInitiatorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateInitiatorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateInitiatorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateInitiatorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateInitiatorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateInitiatorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE_INITIATOR = "stateInitiator";
  @SerializedName(SERIALIZED_NAME_STATE_INITIATOR)
  private StateInitiatorEnum stateInitiator;

  public static final String SERIALIZED_NAME_SUSPENDED_DATA = "suspendedData";
  @SerializedName(SERIALIZED_NAME_SUSPENDED_DATA)
  private Object suspendedData;

  public static final String SERIALIZED_NAME_SUSPENDING_DATA = "suspendingData";
  @SerializedName(SERIALIZED_NAME_SUSPENDING_DATA)
  private Object suspendingData;

  public QueuedResourceState() {
  }

  public QueuedResourceState(
     StateEnum state, 
     StateInitiatorEnum stateInitiator
  ) {
    this();
    this.state = state;
    this.stateInitiator = stateInitiator;
  }

  public QueuedResourceState acceptedData(Object acceptedData) {
    this.acceptedData = acceptedData;
    return this;
  }

  /**
   * Further data for the accepted state.
   * @return acceptedData
   */
  @javax.annotation.Nullable
  public Object getAcceptedData() {
    return acceptedData;
  }

  public void setAcceptedData(Object acceptedData) {
    this.acceptedData = acceptedData;
  }


  public QueuedResourceState activeData(Object activeData) {
    this.activeData = activeData;
    return this;
  }

  /**
   * Further data for the active state.
   * @return activeData
   */
  @javax.annotation.Nullable
  public Object getActiveData() {
    return activeData;
  }

  public void setActiveData(Object activeData) {
    this.activeData = activeData;
  }


  public QueuedResourceState creatingData(Object creatingData) {
    this.creatingData = creatingData;
    return this;
  }

  /**
   * Further data for the creating state.
   * @return creatingData
   */
  @javax.annotation.Nullable
  public Object getCreatingData() {
    return creatingData;
  }

  public void setCreatingData(Object creatingData) {
    this.creatingData = creatingData;
  }


  public QueuedResourceState deletingData(Object deletingData) {
    this.deletingData = deletingData;
    return this;
  }

  /**
   * Further data for the deleting state.
   * @return deletingData
   */
  @javax.annotation.Nullable
  public Object getDeletingData() {
    return deletingData;
  }

  public void setDeletingData(Object deletingData) {
    this.deletingData = deletingData;
  }


  public QueuedResourceState failedData(FailedData failedData) {
    this.failedData = failedData;
    return this;
  }

  /**
   * Get failedData
   * @return failedData
   */
  @javax.annotation.Nullable
  public FailedData getFailedData() {
    return failedData;
  }

  public void setFailedData(FailedData failedData) {
    this.failedData = failedData;
  }


  public QueuedResourceState provisioningData(Object provisioningData) {
    this.provisioningData = provisioningData;
    return this;
  }

  /**
   * Further data for the provisioning state.
   * @return provisioningData
   */
  @javax.annotation.Nullable
  public Object getProvisioningData() {
    return provisioningData;
  }

  public void setProvisioningData(Object provisioningData) {
    this.provisioningData = provisioningData;
  }


  /**
   * Output only. State of the QueuedResource request.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. The initiator of the QueuedResources&#39;s current state. Used to indicate whether the SUSPENDING/SUSPENDED state was initiated by the user or the service.
   * @return stateInitiator
   */
  @javax.annotation.Nullable
  public StateInitiatorEnum getStateInitiator() {
    return stateInitiator;
  }



  public QueuedResourceState suspendedData(Object suspendedData) {
    this.suspendedData = suspendedData;
    return this;
  }

  /**
   * Further data for the suspended state.
   * @return suspendedData
   */
  @javax.annotation.Nullable
  public Object getSuspendedData() {
    return suspendedData;
  }

  public void setSuspendedData(Object suspendedData) {
    this.suspendedData = suspendedData;
  }


  public QueuedResourceState suspendingData(Object suspendingData) {
    this.suspendingData = suspendingData;
    return this;
  }

  /**
   * Further data for the suspending state.
   * @return suspendingData
   */
  @javax.annotation.Nullable
  public Object getSuspendingData() {
    return suspendingData;
  }

  public void setSuspendingData(Object suspendingData) {
    this.suspendingData = suspendingData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueuedResourceState queuedResourceState = (QueuedResourceState) o;
    return Objects.equals(this.acceptedData, queuedResourceState.acceptedData) &&
        Objects.equals(this.activeData, queuedResourceState.activeData) &&
        Objects.equals(this.creatingData, queuedResourceState.creatingData) &&
        Objects.equals(this.deletingData, queuedResourceState.deletingData) &&
        Objects.equals(this.failedData, queuedResourceState.failedData) &&
        Objects.equals(this.provisioningData, queuedResourceState.provisioningData) &&
        Objects.equals(this.state, queuedResourceState.state) &&
        Objects.equals(this.stateInitiator, queuedResourceState.stateInitiator) &&
        Objects.equals(this.suspendedData, queuedResourceState.suspendedData) &&
        Objects.equals(this.suspendingData, queuedResourceState.suspendingData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceptedData, activeData, creatingData, deletingData, failedData, provisioningData, state, stateInitiator, suspendedData, suspendingData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueuedResourceState {\n");
    sb.append("    acceptedData: ").append(toIndentedString(acceptedData)).append("\n");
    sb.append("    activeData: ").append(toIndentedString(activeData)).append("\n");
    sb.append("    creatingData: ").append(toIndentedString(creatingData)).append("\n");
    sb.append("    deletingData: ").append(toIndentedString(deletingData)).append("\n");
    sb.append("    failedData: ").append(toIndentedString(failedData)).append("\n");
    sb.append("    provisioningData: ").append(toIndentedString(provisioningData)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateInitiator: ").append(toIndentedString(stateInitiator)).append("\n");
    sb.append("    suspendedData: ").append(toIndentedString(suspendedData)).append("\n");
    sb.append("    suspendingData: ").append(toIndentedString(suspendingData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acceptedData");
    openapiFields.add("activeData");
    openapiFields.add("creatingData");
    openapiFields.add("deletingData");
    openapiFields.add("failedData");
    openapiFields.add("provisioningData");
    openapiFields.add("state");
    openapiFields.add("stateInitiator");
    openapiFields.add("suspendedData");
    openapiFields.add("suspendingData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueuedResourceState
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueuedResourceState.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueuedResourceState is not found in the empty JSON string", QueuedResourceState.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueuedResourceState.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueuedResourceState` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `failedData`
      if (jsonObj.get("failedData") != null && !jsonObj.get("failedData").isJsonNull()) {
        FailedData.validateJsonElement(jsonObj.get("failedData"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("stateInitiator") != null && !jsonObj.get("stateInitiator").isJsonNull()) && !jsonObj.get("stateInitiator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateInitiator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateInitiator").toString()));
      }
      // validate the optional field `stateInitiator`
      if (jsonObj.get("stateInitiator") != null && !jsonObj.get("stateInitiator").isJsonNull()) {
        StateInitiatorEnum.validateJsonElement(jsonObj.get("stateInitiator"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueuedResourceState.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueuedResourceState' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueuedResourceState> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueuedResourceState.class));

       return (TypeAdapter<T>) new TypeAdapter<QueuedResourceState>() {
           @Override
           public void write(JsonWriter out, QueuedResourceState value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueuedResourceState read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueuedResourceState given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueuedResourceState
   * @throws IOException if the JSON string is invalid with respect to QueuedResourceState
   */
  public static QueuedResourceState fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueuedResourceState.class);
  }

  /**
   * Convert an instance of QueuedResourceState to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

