/**
 * Cloud TPU API
 * TPU API provides customers with access to Google TPU technology.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueuedResourceState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueuedResourceState::OAIQueuedResourceState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueuedResourceState::OAIQueuedResourceState() {
    this->initializeModel();
}

OAIQueuedResourceState::~OAIQueuedResourceState() {}

void OAIQueuedResourceState::initializeModel() {

    m_accepted_data_isSet = false;
    m_accepted_data_isValid = false;

    m_active_data_isSet = false;
    m_active_data_isValid = false;

    m_creating_data_isSet = false;
    m_creating_data_isValid = false;

    m_deleting_data_isSet = false;
    m_deleting_data_isValid = false;

    m_failed_data_isSet = false;
    m_failed_data_isValid = false;

    m_provisioning_data_isSet = false;
    m_provisioning_data_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_initiator_isSet = false;
    m_state_initiator_isValid = false;

    m_suspended_data_isSet = false;
    m_suspended_data_isValid = false;

    m_suspending_data_isSet = false;
    m_suspending_data_isValid = false;
}

void OAIQueuedResourceState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueuedResourceState::fromJsonObject(QJsonObject json) {

    m_accepted_data_isValid = ::OpenAPI::fromJsonValue(m_accepted_data, json[QString("acceptedData")]);
    m_accepted_data_isSet = !json[QString("acceptedData")].isNull() && m_accepted_data_isValid;

    m_active_data_isValid = ::OpenAPI::fromJsonValue(m_active_data, json[QString("activeData")]);
    m_active_data_isSet = !json[QString("activeData")].isNull() && m_active_data_isValid;

    m_creating_data_isValid = ::OpenAPI::fromJsonValue(m_creating_data, json[QString("creatingData")]);
    m_creating_data_isSet = !json[QString("creatingData")].isNull() && m_creating_data_isValid;

    m_deleting_data_isValid = ::OpenAPI::fromJsonValue(m_deleting_data, json[QString("deletingData")]);
    m_deleting_data_isSet = !json[QString("deletingData")].isNull() && m_deleting_data_isValid;

    m_failed_data_isValid = ::OpenAPI::fromJsonValue(m_failed_data, json[QString("failedData")]);
    m_failed_data_isSet = !json[QString("failedData")].isNull() && m_failed_data_isValid;

    m_provisioning_data_isValid = ::OpenAPI::fromJsonValue(m_provisioning_data, json[QString("provisioningData")]);
    m_provisioning_data_isSet = !json[QString("provisioningData")].isNull() && m_provisioning_data_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_state_initiator_isValid = ::OpenAPI::fromJsonValue(m_state_initiator, json[QString("stateInitiator")]);
    m_state_initiator_isSet = !json[QString("stateInitiator")].isNull() && m_state_initiator_isValid;

    m_suspended_data_isValid = ::OpenAPI::fromJsonValue(m_suspended_data, json[QString("suspendedData")]);
    m_suspended_data_isSet = !json[QString("suspendedData")].isNull() && m_suspended_data_isValid;

    m_suspending_data_isValid = ::OpenAPI::fromJsonValue(m_suspending_data, json[QString("suspendingData")]);
    m_suspending_data_isSet = !json[QString("suspendingData")].isNull() && m_suspending_data_isValid;
}

QString OAIQueuedResourceState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueuedResourceState::asJsonObject() const {
    QJsonObject obj;
    if (m_accepted_data_isSet) {
        obj.insert(QString("acceptedData"), ::OpenAPI::toJsonValue(m_accepted_data));
    }
    if (m_active_data_isSet) {
        obj.insert(QString("activeData"), ::OpenAPI::toJsonValue(m_active_data));
    }
    if (m_creating_data_isSet) {
        obj.insert(QString("creatingData"), ::OpenAPI::toJsonValue(m_creating_data));
    }
    if (m_deleting_data_isSet) {
        obj.insert(QString("deletingData"), ::OpenAPI::toJsonValue(m_deleting_data));
    }
    if (m_failed_data.isSet()) {
        obj.insert(QString("failedData"), ::OpenAPI::toJsonValue(m_failed_data));
    }
    if (m_provisioning_data_isSet) {
        obj.insert(QString("provisioningData"), ::OpenAPI::toJsonValue(m_provisioning_data));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_initiator_isSet) {
        obj.insert(QString("stateInitiator"), ::OpenAPI::toJsonValue(m_state_initiator));
    }
    if (m_suspended_data_isSet) {
        obj.insert(QString("suspendedData"), ::OpenAPI::toJsonValue(m_suspended_data));
    }
    if (m_suspending_data_isSet) {
        obj.insert(QString("suspendingData"), ::OpenAPI::toJsonValue(m_suspending_data));
    }
    return obj;
}

OAIObject OAIQueuedResourceState::getAcceptedData() const {
    return m_accepted_data;
}
void OAIQueuedResourceState::setAcceptedData(const OAIObject &accepted_data) {
    m_accepted_data = accepted_data;
    m_accepted_data_isSet = true;
}

bool OAIQueuedResourceState::is_accepted_data_Set() const{
    return m_accepted_data_isSet;
}

bool OAIQueuedResourceState::is_accepted_data_Valid() const{
    return m_accepted_data_isValid;
}

OAIObject OAIQueuedResourceState::getActiveData() const {
    return m_active_data;
}
void OAIQueuedResourceState::setActiveData(const OAIObject &active_data) {
    m_active_data = active_data;
    m_active_data_isSet = true;
}

bool OAIQueuedResourceState::is_active_data_Set() const{
    return m_active_data_isSet;
}

bool OAIQueuedResourceState::is_active_data_Valid() const{
    return m_active_data_isValid;
}

OAIObject OAIQueuedResourceState::getCreatingData() const {
    return m_creating_data;
}
void OAIQueuedResourceState::setCreatingData(const OAIObject &creating_data) {
    m_creating_data = creating_data;
    m_creating_data_isSet = true;
}

bool OAIQueuedResourceState::is_creating_data_Set() const{
    return m_creating_data_isSet;
}

bool OAIQueuedResourceState::is_creating_data_Valid() const{
    return m_creating_data_isValid;
}

OAIObject OAIQueuedResourceState::getDeletingData() const {
    return m_deleting_data;
}
void OAIQueuedResourceState::setDeletingData(const OAIObject &deleting_data) {
    m_deleting_data = deleting_data;
    m_deleting_data_isSet = true;
}

bool OAIQueuedResourceState::is_deleting_data_Set() const{
    return m_deleting_data_isSet;
}

bool OAIQueuedResourceState::is_deleting_data_Valid() const{
    return m_deleting_data_isValid;
}

OAIFailedData OAIQueuedResourceState::getFailedData() const {
    return m_failed_data;
}
void OAIQueuedResourceState::setFailedData(const OAIFailedData &failed_data) {
    m_failed_data = failed_data;
    m_failed_data_isSet = true;
}

bool OAIQueuedResourceState::is_failed_data_Set() const{
    return m_failed_data_isSet;
}

bool OAIQueuedResourceState::is_failed_data_Valid() const{
    return m_failed_data_isValid;
}

OAIObject OAIQueuedResourceState::getProvisioningData() const {
    return m_provisioning_data;
}
void OAIQueuedResourceState::setProvisioningData(const OAIObject &provisioning_data) {
    m_provisioning_data = provisioning_data;
    m_provisioning_data_isSet = true;
}

bool OAIQueuedResourceState::is_provisioning_data_Set() const{
    return m_provisioning_data_isSet;
}

bool OAIQueuedResourceState::is_provisioning_data_Valid() const{
    return m_provisioning_data_isValid;
}

QString OAIQueuedResourceState::getState() const {
    return m_state;
}
void OAIQueuedResourceState::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIQueuedResourceState::is_state_Set() const{
    return m_state_isSet;
}

bool OAIQueuedResourceState::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIQueuedResourceState::getStateInitiator() const {
    return m_state_initiator;
}
void OAIQueuedResourceState::setStateInitiator(const QString &state_initiator) {
    m_state_initiator = state_initiator;
    m_state_initiator_isSet = true;
}

bool OAIQueuedResourceState::is_state_initiator_Set() const{
    return m_state_initiator_isSet;
}

bool OAIQueuedResourceState::is_state_initiator_Valid() const{
    return m_state_initiator_isValid;
}

OAIObject OAIQueuedResourceState::getSuspendedData() const {
    return m_suspended_data;
}
void OAIQueuedResourceState::setSuspendedData(const OAIObject &suspended_data) {
    m_suspended_data = suspended_data;
    m_suspended_data_isSet = true;
}

bool OAIQueuedResourceState::is_suspended_data_Set() const{
    return m_suspended_data_isSet;
}

bool OAIQueuedResourceState::is_suspended_data_Valid() const{
    return m_suspended_data_isValid;
}

OAIObject OAIQueuedResourceState::getSuspendingData() const {
    return m_suspending_data;
}
void OAIQueuedResourceState::setSuspendingData(const OAIObject &suspending_data) {
    m_suspending_data = suspending_data;
    m_suspending_data_isSet = true;
}

bool OAIQueuedResourceState::is_suspending_data_Set() const{
    return m_suspending_data_isSet;
}

bool OAIQueuedResourceState::is_suspending_data_Valid() const{
    return m_suspending_data_isValid;
}

bool OAIQueuedResourceState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accepted_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creating_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleting_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_initiator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suspended_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suspending_data_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueuedResourceState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
