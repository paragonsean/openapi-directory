/**
 * Cloud TPU API
 * TPU API provides customers with access to Google TPU technology.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINode.h
 *
 * A TPU instance.
 */

#ifndef OAINode_H
#define OAINode_H

#include <QJsonObject>

#include "OAIAcceleratorConfig.h"
#include "OAIAttachedDisk.h"
#include "OAINetworkConfig.h"
#include "OAINetworkEndpoint.h"
#include "OAISchedulingConfig.h"
#include "OAIServiceAccount.h"
#include "OAIShieldedInstanceConfig.h"
#include "OAISymptom.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAcceleratorConfig;
class OAIAttachedDisk;
class OAINetworkConfig;
class OAINetworkEndpoint;
class OAISchedulingConfig;
class OAIServiceAccount;
class OAIShieldedInstanceConfig;
class OAISymptom;

class OAINode : public OAIObject {
public:
    OAINode();
    OAINode(QString json);
    ~OAINode() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAcceleratorConfig getAcceleratorConfig() const;
    void setAcceleratorConfig(const OAIAcceleratorConfig &accelerator_config);
    bool is_accelerator_config_Set() const;
    bool is_accelerator_config_Valid() const;

    QString getAcceleratorType() const;
    void setAcceleratorType(const QString &accelerator_type);
    bool is_accelerator_type_Set() const;
    bool is_accelerator_type_Valid() const;

    QString getApiVersion() const;
    void setApiVersion(const QString &api_version);
    bool is_api_version_Set() const;
    bool is_api_version_Valid() const;

    QString getCidrBlock() const;
    void setCidrBlock(const QString &cidr_block);
    bool is_cidr_block_Set() const;
    bool is_cidr_block_Valid() const;

    QString getCreateTime() const;
    void setCreateTime(const QString &create_time);
    bool is_create_time_Set() const;
    bool is_create_time_Valid() const;

    QList<OAIAttachedDisk> getDataDisks() const;
    void setDataDisks(const QList<OAIAttachedDisk> &data_disks);
    bool is_data_disks_Set() const;
    bool is_data_disks_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getHealth() const;
    void setHealth(const QString &health);
    bool is_health_Set() const;
    bool is_health_Valid() const;

    QString getHealthDescription() const;
    void setHealthDescription(const QString &health_description);
    bool is_health_description_Set() const;
    bool is_health_description_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QMap<QString, QString> getLabels() const;
    void setLabels(const QMap<QString, QString> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    QMap<QString, QString> getMetadata() const;
    void setMetadata(const QMap<QString, QString> &metadata);
    bool is_metadata_Set() const;
    bool is_metadata_Valid() const;

    bool isMultisliceNode() const;
    void setMultisliceNode(const bool &multislice_node);
    bool is_multislice_node_Set() const;
    bool is_multislice_node_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAINetworkConfig getNetworkConfig() const;
    void setNetworkConfig(const OAINetworkConfig &network_config);
    bool is_network_config_Set() const;
    bool is_network_config_Valid() const;

    QList<OAINetworkEndpoint> getNetworkEndpoints() const;
    void setNetworkEndpoints(const QList<OAINetworkEndpoint> &network_endpoints);
    bool is_network_endpoints_Set() const;
    bool is_network_endpoints_Valid() const;

    QString getQueuedResource() const;
    void setQueuedResource(const QString &queued_resource);
    bool is_queued_resource_Set() const;
    bool is_queued_resource_Valid() const;

    QString getRuntimeVersion() const;
    void setRuntimeVersion(const QString &runtime_version);
    bool is_runtime_version_Set() const;
    bool is_runtime_version_Valid() const;

    OAISchedulingConfig getSchedulingConfig() const;
    void setSchedulingConfig(const OAISchedulingConfig &scheduling_config);
    bool is_scheduling_config_Set() const;
    bool is_scheduling_config_Valid() const;

    OAIServiceAccount getServiceAccount() const;
    void setServiceAccount(const OAIServiceAccount &service_account);
    bool is_service_account_Set() const;
    bool is_service_account_Valid() const;

    OAIShieldedInstanceConfig getShieldedInstanceConfig() const;
    void setShieldedInstanceConfig(const OAIShieldedInstanceConfig &shielded_instance_config);
    bool is_shielded_instance_config_Set() const;
    bool is_shielded_instance_config_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QList<OAISymptom> getSymptoms() const;
    void setSymptoms(const QList<OAISymptom> &symptoms);
    bool is_symptoms_Set() const;
    bool is_symptoms_Valid() const;

    QList<QString> getTags() const;
    void setTags(const QList<QString> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAcceleratorConfig m_accelerator_config;
    bool m_accelerator_config_isSet;
    bool m_accelerator_config_isValid;

    QString m_accelerator_type;
    bool m_accelerator_type_isSet;
    bool m_accelerator_type_isValid;

    QString m_api_version;
    bool m_api_version_isSet;
    bool m_api_version_isValid;

    QString m_cidr_block;
    bool m_cidr_block_isSet;
    bool m_cidr_block_isValid;

    QString m_create_time;
    bool m_create_time_isSet;
    bool m_create_time_isValid;

    QList<OAIAttachedDisk> m_data_disks;
    bool m_data_disks_isSet;
    bool m_data_disks_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_health;
    bool m_health_isSet;
    bool m_health_isValid;

    QString m_health_description;
    bool m_health_description_isSet;
    bool m_health_description_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QMap<QString, QString> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    QMap<QString, QString> m_metadata;
    bool m_metadata_isSet;
    bool m_metadata_isValid;

    bool m_multislice_node;
    bool m_multislice_node_isSet;
    bool m_multislice_node_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAINetworkConfig m_network_config;
    bool m_network_config_isSet;
    bool m_network_config_isValid;

    QList<OAINetworkEndpoint> m_network_endpoints;
    bool m_network_endpoints_isSet;
    bool m_network_endpoints_isValid;

    QString m_queued_resource;
    bool m_queued_resource_isSet;
    bool m_queued_resource_isValid;

    QString m_runtime_version;
    bool m_runtime_version_isSet;
    bool m_runtime_version_isValid;

    OAISchedulingConfig m_scheduling_config;
    bool m_scheduling_config_isSet;
    bool m_scheduling_config_isValid;

    OAIServiceAccount m_service_account;
    bool m_service_account_isSet;
    bool m_service_account_isValid;

    OAIShieldedInstanceConfig m_shielded_instance_config;
    bool m_shielded_instance_config_isSet;
    bool m_shielded_instance_config_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QList<OAISymptom> m_symptoms;
    bool m_symptoms_isSet;
    bool m_symptoms_isValid;

    QList<QString> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINode)

#endif // OAINode_H
