/**
 * Cloud TPU API
 * TPU API provides customers with access to Google TPU technology.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueuedResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueuedResource::OAIQueuedResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueuedResource::OAIQueuedResource() {
    this->initializeModel();
}

OAIQueuedResource::~OAIQueuedResource() {}

void OAIQueuedResource::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_guaranteed_isSet = false;
    m_guaranteed_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_queueing_policy_isSet = false;
    m_queueing_policy_isValid = false;

    m_reservation_name_isSet = false;
    m_reservation_name_isValid = false;

    m_spot_isSet = false;
    m_spot_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_tpu_isSet = false;
    m_tpu_isValid = false;
}

void OAIQueuedResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueuedResource::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_guaranteed_isValid = ::OpenAPI::fromJsonValue(m_guaranteed, json[QString("guaranteed")]);
    m_guaranteed_isSet = !json[QString("guaranteed")].isNull() && m_guaranteed_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_queueing_policy_isValid = ::OpenAPI::fromJsonValue(m_queueing_policy, json[QString("queueingPolicy")]);
    m_queueing_policy_isSet = !json[QString("queueingPolicy")].isNull() && m_queueing_policy_isValid;

    m_reservation_name_isValid = ::OpenAPI::fromJsonValue(m_reservation_name, json[QString("reservationName")]);
    m_reservation_name_isSet = !json[QString("reservationName")].isNull() && m_reservation_name_isValid;

    m_spot_isValid = ::OpenAPI::fromJsonValue(m_spot, json[QString("spot")]);
    m_spot_isSet = !json[QString("spot")].isNull() && m_spot_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_tpu_isValid = ::OpenAPI::fromJsonValue(m_tpu, json[QString("tpu")]);
    m_tpu_isSet = !json[QString("tpu")].isNull() && m_tpu_isValid;
}

QString OAIQueuedResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueuedResource::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_guaranteed.isSet()) {
        obj.insert(QString("guaranteed"), ::OpenAPI::toJsonValue(m_guaranteed));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_queueing_policy.isSet()) {
        obj.insert(QString("queueingPolicy"), ::OpenAPI::toJsonValue(m_queueing_policy));
    }
    if (m_reservation_name_isSet) {
        obj.insert(QString("reservationName"), ::OpenAPI::toJsonValue(m_reservation_name));
    }
    if (m_spot_isSet) {
        obj.insert(QString("spot"), ::OpenAPI::toJsonValue(m_spot));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_tpu.isSet()) {
        obj.insert(QString("tpu"), ::OpenAPI::toJsonValue(m_tpu));
    }
    return obj;
}

QString OAIQueuedResource::getCreateTime() const {
    return m_create_time;
}
void OAIQueuedResource::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIQueuedResource::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIQueuedResource::is_create_time_Valid() const{
    return m_create_time_isValid;
}

OAIGuaranteed OAIQueuedResource::getGuaranteed() const {
    return m_guaranteed;
}
void OAIQueuedResource::setGuaranteed(const OAIGuaranteed &guaranteed) {
    m_guaranteed = guaranteed;
    m_guaranteed_isSet = true;
}

bool OAIQueuedResource::is_guaranteed_Set() const{
    return m_guaranteed_isSet;
}

bool OAIQueuedResource::is_guaranteed_Valid() const{
    return m_guaranteed_isValid;
}

QString OAIQueuedResource::getName() const {
    return m_name;
}
void OAIQueuedResource::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIQueuedResource::is_name_Set() const{
    return m_name_isSet;
}

bool OAIQueuedResource::is_name_Valid() const{
    return m_name_isValid;
}

OAIQueueingPolicy OAIQueuedResource::getQueueingPolicy() const {
    return m_queueing_policy;
}
void OAIQueuedResource::setQueueingPolicy(const OAIQueueingPolicy &queueing_policy) {
    m_queueing_policy = queueing_policy;
    m_queueing_policy_isSet = true;
}

bool OAIQueuedResource::is_queueing_policy_Set() const{
    return m_queueing_policy_isSet;
}

bool OAIQueuedResource::is_queueing_policy_Valid() const{
    return m_queueing_policy_isValid;
}

QString OAIQueuedResource::getReservationName() const {
    return m_reservation_name;
}
void OAIQueuedResource::setReservationName(const QString &reservation_name) {
    m_reservation_name = reservation_name;
    m_reservation_name_isSet = true;
}

bool OAIQueuedResource::is_reservation_name_Set() const{
    return m_reservation_name_isSet;
}

bool OAIQueuedResource::is_reservation_name_Valid() const{
    return m_reservation_name_isValid;
}

OAIObject OAIQueuedResource::getSpot() const {
    return m_spot;
}
void OAIQueuedResource::setSpot(const OAIObject &spot) {
    m_spot = spot;
    m_spot_isSet = true;
}

bool OAIQueuedResource::is_spot_Set() const{
    return m_spot_isSet;
}

bool OAIQueuedResource::is_spot_Valid() const{
    return m_spot_isValid;
}

OAIQueuedResourceState OAIQueuedResource::getState() const {
    return m_state;
}
void OAIQueuedResource::setState(const OAIQueuedResourceState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIQueuedResource::is_state_Set() const{
    return m_state_isSet;
}

bool OAIQueuedResource::is_state_Valid() const{
    return m_state_isValid;
}

OAITpu OAIQueuedResource::getTpu() const {
    return m_tpu;
}
void OAIQueuedResource::setTpu(const OAITpu &tpu) {
    m_tpu = tpu;
    m_tpu_isSet = true;
}

bool OAIQueuedResource::is_tpu_Set() const{
    return m_tpu_isSet;
}

bool OAIQueuedResource::is_tpu_Valid() const{
    return m_tpu_isValid;
}

bool OAIQueuedResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guaranteed.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queueing_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservation_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tpu.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueuedResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
