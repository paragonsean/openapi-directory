/**
 * Cloud TPU API
 * TPU API provides customers with access to Google TPU technology.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISymptom.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISymptom::OAISymptom(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISymptom::OAISymptom() {
    this->initializeModel();
}

OAISymptom::~OAISymptom() {}

void OAISymptom::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_symptom_type_isSet = false;
    m_symptom_type_isValid = false;

    m_worker_id_isSet = false;
    m_worker_id_isValid = false;
}

void OAISymptom::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISymptom::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_symptom_type_isValid = ::OpenAPI::fromJsonValue(m_symptom_type, json[QString("symptomType")]);
    m_symptom_type_isSet = !json[QString("symptomType")].isNull() && m_symptom_type_isValid;

    m_worker_id_isValid = ::OpenAPI::fromJsonValue(m_worker_id, json[QString("workerId")]);
    m_worker_id_isSet = !json[QString("workerId")].isNull() && m_worker_id_isValid;
}

QString OAISymptom::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISymptom::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_details_isSet) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_symptom_type_isSet) {
        obj.insert(QString("symptomType"), ::OpenAPI::toJsonValue(m_symptom_type));
    }
    if (m_worker_id_isSet) {
        obj.insert(QString("workerId"), ::OpenAPI::toJsonValue(m_worker_id));
    }
    return obj;
}

QString OAISymptom::getCreateTime() const {
    return m_create_time;
}
void OAISymptom::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAISymptom::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAISymptom::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAISymptom::getDetails() const {
    return m_details;
}
void OAISymptom::setDetails(const QString &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAISymptom::is_details_Set() const{
    return m_details_isSet;
}

bool OAISymptom::is_details_Valid() const{
    return m_details_isValid;
}

QString OAISymptom::getSymptomType() const {
    return m_symptom_type;
}
void OAISymptom::setSymptomType(const QString &symptom_type) {
    m_symptom_type = symptom_type;
    m_symptom_type_isSet = true;
}

bool OAISymptom::is_symptom_type_Set() const{
    return m_symptom_type_isSet;
}

bool OAISymptom::is_symptom_type_Valid() const{
    return m_symptom_type_isValid;
}

QString OAISymptom::getWorkerId() const {
    return m_worker_id;
}
void OAISymptom::setWorkerId(const QString &worker_id) {
    m_worker_id = worker_id;
    m_worker_id_isSet = true;
}

bool OAISymptom::is_worker_id_Set() const{
    return m_worker_id_isSet;
}

bool OAISymptom::is_worker_id_Valid() const{
    return m_worker_id_isValid;
}

bool OAISymptom::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symptom_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISymptom::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
