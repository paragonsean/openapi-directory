/**
 * Cloud TPU API
 * TPU API provides customers with access to Google TPU technology.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkConfig::OAINetworkConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkConfig::OAINetworkConfig() {
    this->initializeModel();
}

OAINetworkConfig::~OAINetworkConfig() {}

void OAINetworkConfig::initializeModel() {

    m_can_ip_forward_isSet = false;
    m_can_ip_forward_isValid = false;

    m_enable_external_ips_isSet = false;
    m_enable_external_ips_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_queue_count_isSet = false;
    m_queue_count_isValid = false;

    m_subnetwork_isSet = false;
    m_subnetwork_isValid = false;
}

void OAINetworkConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkConfig::fromJsonObject(QJsonObject json) {

    m_can_ip_forward_isValid = ::OpenAPI::fromJsonValue(m_can_ip_forward, json[QString("canIpForward")]);
    m_can_ip_forward_isSet = !json[QString("canIpForward")].isNull() && m_can_ip_forward_isValid;

    m_enable_external_ips_isValid = ::OpenAPI::fromJsonValue(m_enable_external_ips, json[QString("enableExternalIps")]);
    m_enable_external_ips_isSet = !json[QString("enableExternalIps")].isNull() && m_enable_external_ips_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_queue_count_isValid = ::OpenAPI::fromJsonValue(m_queue_count, json[QString("queueCount")]);
    m_queue_count_isSet = !json[QString("queueCount")].isNull() && m_queue_count_isValid;

    m_subnetwork_isValid = ::OpenAPI::fromJsonValue(m_subnetwork, json[QString("subnetwork")]);
    m_subnetwork_isSet = !json[QString("subnetwork")].isNull() && m_subnetwork_isValid;
}

QString OAINetworkConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_can_ip_forward_isSet) {
        obj.insert(QString("canIpForward"), ::OpenAPI::toJsonValue(m_can_ip_forward));
    }
    if (m_enable_external_ips_isSet) {
        obj.insert(QString("enableExternalIps"), ::OpenAPI::toJsonValue(m_enable_external_ips));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_queue_count_isSet) {
        obj.insert(QString("queueCount"), ::OpenAPI::toJsonValue(m_queue_count));
    }
    if (m_subnetwork_isSet) {
        obj.insert(QString("subnetwork"), ::OpenAPI::toJsonValue(m_subnetwork));
    }
    return obj;
}

bool OAINetworkConfig::isCanIpForward() const {
    return m_can_ip_forward;
}
void OAINetworkConfig::setCanIpForward(const bool &can_ip_forward) {
    m_can_ip_forward = can_ip_forward;
    m_can_ip_forward_isSet = true;
}

bool OAINetworkConfig::is_can_ip_forward_Set() const{
    return m_can_ip_forward_isSet;
}

bool OAINetworkConfig::is_can_ip_forward_Valid() const{
    return m_can_ip_forward_isValid;
}

bool OAINetworkConfig::isEnableExternalIps() const {
    return m_enable_external_ips;
}
void OAINetworkConfig::setEnableExternalIps(const bool &enable_external_ips) {
    m_enable_external_ips = enable_external_ips;
    m_enable_external_ips_isSet = true;
}

bool OAINetworkConfig::is_enable_external_ips_Set() const{
    return m_enable_external_ips_isSet;
}

bool OAINetworkConfig::is_enable_external_ips_Valid() const{
    return m_enable_external_ips_isValid;
}

QString OAINetworkConfig::getNetwork() const {
    return m_network;
}
void OAINetworkConfig::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAINetworkConfig::is_network_Set() const{
    return m_network_isSet;
}

bool OAINetworkConfig::is_network_Valid() const{
    return m_network_isValid;
}

qint32 OAINetworkConfig::getQueueCount() const {
    return m_queue_count;
}
void OAINetworkConfig::setQueueCount(const qint32 &queue_count) {
    m_queue_count = queue_count;
    m_queue_count_isSet = true;
}

bool OAINetworkConfig::is_queue_count_Set() const{
    return m_queue_count_isSet;
}

bool OAINetworkConfig::is_queue_count_Valid() const{
    return m_queue_count_isValid;
}

QString OAINetworkConfig::getSubnetwork() const {
    return m_subnetwork;
}
void OAINetworkConfig::setSubnetwork(const QString &subnetwork) {
    m_subnetwork = subnetwork;
    m_subnetwork_isSet = true;
}

bool OAINetworkConfig::is_subnetwork_Set() const{
    return m_subnetwork_isSet;
}

bool OAINetworkConfig::is_subnetwork_Valid() const{
    return m_subnetwork_isValid;
}

bool OAINetworkConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_can_ip_forward_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_external_ips_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queue_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnetwork_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
