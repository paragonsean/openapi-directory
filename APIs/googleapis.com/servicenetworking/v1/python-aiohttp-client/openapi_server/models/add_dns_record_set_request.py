# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dns_record_set import DnsRecordSet
from openapi_server import util


class AddDnsRecordSetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consumer_network: str=None, dns_record_set: DnsRecordSet=None, zone: str=None):
        """AddDnsRecordSetRequest - a model defined in OpenAPI

        :param consumer_network: The consumer_network of this AddDnsRecordSetRequest.
        :param dns_record_set: The dns_record_set of this AddDnsRecordSetRequest.
        :param zone: The zone of this AddDnsRecordSetRequest.
        """
        self.openapi_types = {
            'consumer_network': str,
            'dns_record_set': DnsRecordSet,
            'zone': str
        }

        self.attribute_map = {
            'consumer_network': 'consumerNetwork',
            'dns_record_set': 'dnsRecordSet',
            'zone': 'zone'
        }

        self._consumer_network = consumer_network
        self._dns_record_set = dns_record_set
        self._zone = zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddDnsRecordSetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddDnsRecordSetRequest of this AddDnsRecordSetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consumer_network(self):
        """Gets the consumer_network of this AddDnsRecordSetRequest.

        Required. The network that the consumer is using to connect with services. Must be in the form of projects/{project}/global/networks/{network} {project} is the project number, as in '12345' {network} is the network name.

        :return: The consumer_network of this AddDnsRecordSetRequest.
        :rtype: str
        """
        return self._consumer_network

    @consumer_network.setter
    def consumer_network(self, consumer_network):
        """Sets the consumer_network of this AddDnsRecordSetRequest.

        Required. The network that the consumer is using to connect with services. Must be in the form of projects/{project}/global/networks/{network} {project} is the project number, as in '12345' {network} is the network name.

        :param consumer_network: The consumer_network of this AddDnsRecordSetRequest.
        :type consumer_network: str
        """

        self._consumer_network = consumer_network

    @property
    def dns_record_set(self):
        """Gets the dns_record_set of this AddDnsRecordSetRequest.


        :return: The dns_record_set of this AddDnsRecordSetRequest.
        :rtype: DnsRecordSet
        """
        return self._dns_record_set

    @dns_record_set.setter
    def dns_record_set(self, dns_record_set):
        """Sets the dns_record_set of this AddDnsRecordSetRequest.


        :param dns_record_set: The dns_record_set of this AddDnsRecordSetRequest.
        :type dns_record_set: DnsRecordSet
        """

        self._dns_record_set = dns_record_set

    @property
    def zone(self):
        """Gets the zone of this AddDnsRecordSetRequest.

        Required. The name of the private DNS zone in the shared producer host project to which the record set will be added.

        :return: The zone of this AddDnsRecordSetRequest.
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this AddDnsRecordSetRequest.

        Required. The name of the private DNS zone in the shared producer host project to which the record set will be added.

        :param zone: The zone of this AddDnsRecordSetRequest.
        :type zone: str
        """

        self._zone = zone
