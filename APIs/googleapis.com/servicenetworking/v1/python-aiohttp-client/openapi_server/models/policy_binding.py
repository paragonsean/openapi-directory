# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PolicyBinding(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, member: str=None, role: str=None):
        """PolicyBinding - a model defined in OpenAPI

        :param member: The member of this PolicyBinding.
        :param role: The role of this PolicyBinding.
        """
        self.openapi_types = {
            'member': str,
            'role': str
        }

        self.attribute_map = {
            'member': 'member',
            'role': 'role'
        }

        self._member = member
        self._role = role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PolicyBinding':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PolicyBinding of this PolicyBinding.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def member(self):
        """Gets the member of this PolicyBinding.

        Required. Member to bind the role with. See /iam/docs/reference/rest/v1/Policy#Binding for how to format each member. Eg. - user:myuser@mydomain.com - serviceAccount:my-service-account@app.gserviceaccount.com

        :return: The member of this PolicyBinding.
        :rtype: str
        """
        return self._member

    @member.setter
    def member(self, member):
        """Sets the member of this PolicyBinding.

        Required. Member to bind the role with. See /iam/docs/reference/rest/v1/Policy#Binding for how to format each member. Eg. - user:myuser@mydomain.com - serviceAccount:my-service-account@app.gserviceaccount.com

        :param member: The member of this PolicyBinding.
        :type member: str
        """

        self._member = member

    @property
    def role(self):
        """Gets the role of this PolicyBinding.

        Required. Role to apply. Only allowlisted roles can be used at the specified granularity. The role must be one of the following: - 'roles/container.hostServiceAgentUser' applied on the shared VPC host project - 'roles/compute.securityAdmin' applied on the shared VPC host project - 'roles/compute.networkAdmin' applied on the shared VPC host project - 'roles/compute.xpnAdmin' applied on the shared VPC host project - 'roles/dns.admin' applied on the shared VPC host project

        :return: The role of this PolicyBinding.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this PolicyBinding.

        Required. Role to apply. Only allowlisted roles can be used at the specified granularity. The role must be one of the following: - 'roles/container.hostServiceAgentUser' applied on the shared VPC host project - 'roles/compute.securityAdmin' applied on the shared VPC host project - 'roles/compute.networkAdmin' applied on the shared VPC host project - 'roles/compute.xpnAdmin' applied on the shared VPC host project - 'roles/dns.admin' applied on the shared VPC host project

        :param role: The role of this PolicyBinding.
        :type role: str
        """

        self._role = role
