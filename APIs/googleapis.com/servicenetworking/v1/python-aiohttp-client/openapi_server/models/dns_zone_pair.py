# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dns_zone import DnsZone
from openapi_server import util


class DnsZonePair(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consumer_peering_zone: DnsZone=None, producer_private_zone: DnsZone=None):
        """DnsZonePair - a model defined in OpenAPI

        :param consumer_peering_zone: The consumer_peering_zone of this DnsZonePair.
        :param producer_private_zone: The producer_private_zone of this DnsZonePair.
        """
        self.openapi_types = {
            'consumer_peering_zone': DnsZone,
            'producer_private_zone': DnsZone
        }

        self.attribute_map = {
            'consumer_peering_zone': 'consumerPeeringZone',
            'producer_private_zone': 'producerPrivateZone'
        }

        self._consumer_peering_zone = consumer_peering_zone
        self._producer_private_zone = producer_private_zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DnsZonePair':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DnsZonePair of this DnsZonePair.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consumer_peering_zone(self):
        """Gets the consumer_peering_zone of this DnsZonePair.


        :return: The consumer_peering_zone of this DnsZonePair.
        :rtype: DnsZone
        """
        return self._consumer_peering_zone

    @consumer_peering_zone.setter
    def consumer_peering_zone(self, consumer_peering_zone):
        """Sets the consumer_peering_zone of this DnsZonePair.


        :param consumer_peering_zone: The consumer_peering_zone of this DnsZonePair.
        :type consumer_peering_zone: DnsZone
        """

        self._consumer_peering_zone = consumer_peering_zone

    @property
    def producer_private_zone(self):
        """Gets the producer_private_zone of this DnsZonePair.


        :return: The producer_private_zone of this DnsZonePair.
        :rtype: DnsZone
        """
        return self._producer_private_zone

    @producer_private_zone.setter
    def producer_private_zone(self, producer_private_zone):
        """Sets the producer_private_zone of this DnsZonePair.


        :param producer_private_zone: The producer_private_zone of this DnsZonePair.
        :type producer_private_zone: DnsZone
        """

        self._producer_private_zone = producer_private_zone
