# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.subnetwork import Subnetwork
from openapi_server import util


class ValidateConsumerConfigResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, existing_subnetwork_candidates: List[Subnetwork]=None, is_valid: bool=None, validation_error: str=None):
        """ValidateConsumerConfigResponse - a model defined in OpenAPI

        :param existing_subnetwork_candidates: The existing_subnetwork_candidates of this ValidateConsumerConfigResponse.
        :param is_valid: The is_valid of this ValidateConsumerConfigResponse.
        :param validation_error: The validation_error of this ValidateConsumerConfigResponse.
        """
        self.openapi_types = {
            'existing_subnetwork_candidates': List[Subnetwork],
            'is_valid': bool,
            'validation_error': str
        }

        self.attribute_map = {
            'existing_subnetwork_candidates': 'existingSubnetworkCandidates',
            'is_valid': 'isValid',
            'validation_error': 'validationError'
        }

        self._existing_subnetwork_candidates = existing_subnetwork_candidates
        self._is_valid = is_valid
        self._validation_error = validation_error

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ValidateConsumerConfigResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ValidateConsumerConfigResponse of this ValidateConsumerConfigResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def existing_subnetwork_candidates(self):
        """Gets the existing_subnetwork_candidates of this ValidateConsumerConfigResponse.

        List of subnetwork candidates from the request which exist with the `ip_cidr_range`, `secondary_ip_cider_ranges`, and `outside_allocation` fields set.

        :return: The existing_subnetwork_candidates of this ValidateConsumerConfigResponse.
        :rtype: List[Subnetwork]
        """
        return self._existing_subnetwork_candidates

    @existing_subnetwork_candidates.setter
    def existing_subnetwork_candidates(self, existing_subnetwork_candidates):
        """Sets the existing_subnetwork_candidates of this ValidateConsumerConfigResponse.

        List of subnetwork candidates from the request which exist with the `ip_cidr_range`, `secondary_ip_cider_ranges`, and `outside_allocation` fields set.

        :param existing_subnetwork_candidates: The existing_subnetwork_candidates of this ValidateConsumerConfigResponse.
        :type existing_subnetwork_candidates: List[Subnetwork]
        """

        self._existing_subnetwork_candidates = existing_subnetwork_candidates

    @property
    def is_valid(self):
        """Gets the is_valid of this ValidateConsumerConfigResponse.

        Indicates whether all the requested validations passed.

        :return: The is_valid of this ValidateConsumerConfigResponse.
        :rtype: bool
        """
        return self._is_valid

    @is_valid.setter
    def is_valid(self, is_valid):
        """Sets the is_valid of this ValidateConsumerConfigResponse.

        Indicates whether all the requested validations passed.

        :param is_valid: The is_valid of this ValidateConsumerConfigResponse.
        :type is_valid: bool
        """

        self._is_valid = is_valid

    @property
    def validation_error(self):
        """Gets the validation_error of this ValidateConsumerConfigResponse.

        The first validation which failed.

        :return: The validation_error of this ValidateConsumerConfigResponse.
        :rtype: str
        """
        return self._validation_error

    @validation_error.setter
    def validation_error(self, validation_error):
        """Sets the validation_error of this ValidateConsumerConfigResponse.

        The first validation which failed.

        :param validation_error: The validation_error of this ValidateConsumerConfigResponse.
        :type validation_error: str
        """
        allowed_values = ["VALIDATION_ERROR_UNSPECIFIED", "VALIDATION_NOT_REQUESTED", "SERVICE_NETWORKING_NOT_ENABLED", "NETWORK_NOT_FOUND", "NETWORK_NOT_PEERED", "NETWORK_PEERING_DELETED", "NETWORK_NOT_IN_CONSUMERS_PROJECT", "NETWORK_NOT_IN_CONSUMERS_HOST_PROJECT", "HOST_PROJECT_NOT_FOUND", "CONSUMER_PROJECT_NOT_SERVICE_PROJECT", "RANGES_EXHAUSTED", "RANGES_NOT_RESERVED", "RANGES_DELETED_LATER", "COMPUTE_API_NOT_ENABLED", "USE_PERMISSION_NOT_FOUND"]  # noqa: E501
        if validation_error not in allowed_values:
            raise ValueError(
                "Invalid value for `validation_error` ({0}), must be one of {1}"
                .format(validation_error, allowed_values)
            )

        self._validation_error = validation_error
