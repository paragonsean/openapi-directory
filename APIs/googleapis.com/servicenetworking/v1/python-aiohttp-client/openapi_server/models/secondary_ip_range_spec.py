# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SecondaryIpRangeSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip_prefix_length: int=None, outside_allocation_public_ip_range: str=None, range_name: str=None, requested_address: str=None):
        """SecondaryIpRangeSpec - a model defined in OpenAPI

        :param ip_prefix_length: The ip_prefix_length of this SecondaryIpRangeSpec.
        :param outside_allocation_public_ip_range: The outside_allocation_public_ip_range of this SecondaryIpRangeSpec.
        :param range_name: The range_name of this SecondaryIpRangeSpec.
        :param requested_address: The requested_address of this SecondaryIpRangeSpec.
        """
        self.openapi_types = {
            'ip_prefix_length': int,
            'outside_allocation_public_ip_range': str,
            'range_name': str,
            'requested_address': str
        }

        self.attribute_map = {
            'ip_prefix_length': 'ipPrefixLength',
            'outside_allocation_public_ip_range': 'outsideAllocationPublicIpRange',
            'range_name': 'rangeName',
            'requested_address': 'requestedAddress'
        }

        self._ip_prefix_length = ip_prefix_length
        self._outside_allocation_public_ip_range = outside_allocation_public_ip_range
        self._range_name = range_name
        self._requested_address = requested_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SecondaryIpRangeSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SecondaryIpRangeSpec of this SecondaryIpRangeSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip_prefix_length(self):
        """Gets the ip_prefix_length of this SecondaryIpRangeSpec.

        Required. The prefix length of the secondary IP range. Use CIDR range notation, such as `30` to provision a secondary IP range with an `x.x.x.x/30` CIDR range. The IP address range is drawn from a pool of available ranges in the service consumer's allocated range.

        :return: The ip_prefix_length of this SecondaryIpRangeSpec.
        :rtype: int
        """
        return self._ip_prefix_length

    @ip_prefix_length.setter
    def ip_prefix_length(self, ip_prefix_length):
        """Sets the ip_prefix_length of this SecondaryIpRangeSpec.

        Required. The prefix length of the secondary IP range. Use CIDR range notation, such as `30` to provision a secondary IP range with an `x.x.x.x/30` CIDR range. The IP address range is drawn from a pool of available ranges in the service consumer's allocated range.

        :param ip_prefix_length: The ip_prefix_length of this SecondaryIpRangeSpec.
        :type ip_prefix_length: int
        """

        self._ip_prefix_length = ip_prefix_length

    @property
    def outside_allocation_public_ip_range(self):
        """Gets the outside_allocation_public_ip_range of this SecondaryIpRangeSpec.

        Optional. Enable outside allocation using public IP addresses. Any public IP range may be specified. If this field is provided, we will not use customer reserved ranges for this secondary IP range.

        :return: The outside_allocation_public_ip_range of this SecondaryIpRangeSpec.
        :rtype: str
        """
        return self._outside_allocation_public_ip_range

    @outside_allocation_public_ip_range.setter
    def outside_allocation_public_ip_range(self, outside_allocation_public_ip_range):
        """Sets the outside_allocation_public_ip_range of this SecondaryIpRangeSpec.

        Optional. Enable outside allocation using public IP addresses. Any public IP range may be specified. If this field is provided, we will not use customer reserved ranges for this secondary IP range.

        :param outside_allocation_public_ip_range: The outside_allocation_public_ip_range of this SecondaryIpRangeSpec.
        :type outside_allocation_public_ip_range: str
        """

        self._outside_allocation_public_ip_range = outside_allocation_public_ip_range

    @property
    def range_name(self):
        """Gets the range_name of this SecondaryIpRangeSpec.

        Required. A name for the secondary IP range. The name must be 1-63 characters long, and comply with RFC1035. The name must be unique within the subnetwork.

        :return: The range_name of this SecondaryIpRangeSpec.
        :rtype: str
        """
        return self._range_name

    @range_name.setter
    def range_name(self, range_name):
        """Sets the range_name of this SecondaryIpRangeSpec.

        Required. A name for the secondary IP range. The name must be 1-63 characters long, and comply with RFC1035. The name must be unique within the subnetwork.

        :param range_name: The range_name of this SecondaryIpRangeSpec.
        :type range_name: str
        """

        self._range_name = range_name

    @property
    def requested_address(self):
        """Gets the requested_address of this SecondaryIpRangeSpec.

        Optional. The starting address of a range. The address must be a valid IPv4 address in the x.x.x.x format. This value combined with the IP prefix range is the CIDR range for the secondary IP range. The range must be within the allocated range that is assigned to the private connection. If the CIDR range isn't available, the call fails.

        :return: The requested_address of this SecondaryIpRangeSpec.
        :rtype: str
        """
        return self._requested_address

    @requested_address.setter
    def requested_address(self, requested_address):
        """Sets the requested_address of this SecondaryIpRangeSpec.

        Optional. The starting address of a range. The address must be a valid IPv4 address in the x.x.x.x format. This value combined with the IP prefix range is the CIDR range for the secondary IP range. The range must be within the allocated range that is assigned to the private connection. If the CIDR range isn't available, the call fails.

        :param requested_address: The requested_address of this SecondaryIpRangeSpec.
        :type requested_address: str
        """

        self._requested_address = requested_address
