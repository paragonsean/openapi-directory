# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cpp_settings import CppSettings
from openapi_server.models.dotnet_settings import DotnetSettings
from openapi_server.models.go_settings import GoSettings
from openapi_server.models.java_settings import JavaSettings
from openapi_server.models.node_settings import NodeSettings
from openapi_server.models.php_settings import PhpSettings
from openapi_server.models.python_settings import PythonSettings
from openapi_server.models.ruby_settings import RubySettings
from openapi_server import util


class ClientLibrarySettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cpp_settings: CppSettings=None, dotnet_settings: DotnetSettings=None, go_settings: GoSettings=None, java_settings: JavaSettings=None, launch_stage: str=None, node_settings: NodeSettings=None, php_settings: PhpSettings=None, python_settings: PythonSettings=None, rest_numeric_enums: bool=None, ruby_settings: RubySettings=None, version: str=None):
        """ClientLibrarySettings - a model defined in OpenAPI

        :param cpp_settings: The cpp_settings of this ClientLibrarySettings.
        :param dotnet_settings: The dotnet_settings of this ClientLibrarySettings.
        :param go_settings: The go_settings of this ClientLibrarySettings.
        :param java_settings: The java_settings of this ClientLibrarySettings.
        :param launch_stage: The launch_stage of this ClientLibrarySettings.
        :param node_settings: The node_settings of this ClientLibrarySettings.
        :param php_settings: The php_settings of this ClientLibrarySettings.
        :param python_settings: The python_settings of this ClientLibrarySettings.
        :param rest_numeric_enums: The rest_numeric_enums of this ClientLibrarySettings.
        :param ruby_settings: The ruby_settings of this ClientLibrarySettings.
        :param version: The version of this ClientLibrarySettings.
        """
        self.openapi_types = {
            'cpp_settings': CppSettings,
            'dotnet_settings': DotnetSettings,
            'go_settings': GoSettings,
            'java_settings': JavaSettings,
            'launch_stage': str,
            'node_settings': NodeSettings,
            'php_settings': PhpSettings,
            'python_settings': PythonSettings,
            'rest_numeric_enums': bool,
            'ruby_settings': RubySettings,
            'version': str
        }

        self.attribute_map = {
            'cpp_settings': 'cppSettings',
            'dotnet_settings': 'dotnetSettings',
            'go_settings': 'goSettings',
            'java_settings': 'javaSettings',
            'launch_stage': 'launchStage',
            'node_settings': 'nodeSettings',
            'php_settings': 'phpSettings',
            'python_settings': 'pythonSettings',
            'rest_numeric_enums': 'restNumericEnums',
            'ruby_settings': 'rubySettings',
            'version': 'version'
        }

        self._cpp_settings = cpp_settings
        self._dotnet_settings = dotnet_settings
        self._go_settings = go_settings
        self._java_settings = java_settings
        self._launch_stage = launch_stage
        self._node_settings = node_settings
        self._php_settings = php_settings
        self._python_settings = python_settings
        self._rest_numeric_enums = rest_numeric_enums
        self._ruby_settings = ruby_settings
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClientLibrarySettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClientLibrarySettings of this ClientLibrarySettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cpp_settings(self):
        """Gets the cpp_settings of this ClientLibrarySettings.


        :return: The cpp_settings of this ClientLibrarySettings.
        :rtype: CppSettings
        """
        return self._cpp_settings

    @cpp_settings.setter
    def cpp_settings(self, cpp_settings):
        """Sets the cpp_settings of this ClientLibrarySettings.


        :param cpp_settings: The cpp_settings of this ClientLibrarySettings.
        :type cpp_settings: CppSettings
        """

        self._cpp_settings = cpp_settings

    @property
    def dotnet_settings(self):
        """Gets the dotnet_settings of this ClientLibrarySettings.


        :return: The dotnet_settings of this ClientLibrarySettings.
        :rtype: DotnetSettings
        """
        return self._dotnet_settings

    @dotnet_settings.setter
    def dotnet_settings(self, dotnet_settings):
        """Sets the dotnet_settings of this ClientLibrarySettings.


        :param dotnet_settings: The dotnet_settings of this ClientLibrarySettings.
        :type dotnet_settings: DotnetSettings
        """

        self._dotnet_settings = dotnet_settings

    @property
    def go_settings(self):
        """Gets the go_settings of this ClientLibrarySettings.


        :return: The go_settings of this ClientLibrarySettings.
        :rtype: GoSettings
        """
        return self._go_settings

    @go_settings.setter
    def go_settings(self, go_settings):
        """Sets the go_settings of this ClientLibrarySettings.


        :param go_settings: The go_settings of this ClientLibrarySettings.
        :type go_settings: GoSettings
        """

        self._go_settings = go_settings

    @property
    def java_settings(self):
        """Gets the java_settings of this ClientLibrarySettings.


        :return: The java_settings of this ClientLibrarySettings.
        :rtype: JavaSettings
        """
        return self._java_settings

    @java_settings.setter
    def java_settings(self, java_settings):
        """Sets the java_settings of this ClientLibrarySettings.


        :param java_settings: The java_settings of this ClientLibrarySettings.
        :type java_settings: JavaSettings
        """

        self._java_settings = java_settings

    @property
    def launch_stage(self):
        """Gets the launch_stage of this ClientLibrarySettings.

        Launch stage of this version of the API.

        :return: The launch_stage of this ClientLibrarySettings.
        :rtype: str
        """
        return self._launch_stage

    @launch_stage.setter
    def launch_stage(self, launch_stage):
        """Sets the launch_stage of this ClientLibrarySettings.

        Launch stage of this version of the API.

        :param launch_stage: The launch_stage of this ClientLibrarySettings.
        :type launch_stage: str
        """
        allowed_values = ["LAUNCH_STAGE_UNSPECIFIED", "UNIMPLEMENTED", "PRELAUNCH", "EARLY_ACCESS", "ALPHA", "BETA", "GA", "DEPRECATED"]  # noqa: E501
        if launch_stage not in allowed_values:
            raise ValueError(
                "Invalid value for `launch_stage` ({0}), must be one of {1}"
                .format(launch_stage, allowed_values)
            )

        self._launch_stage = launch_stage

    @property
    def node_settings(self):
        """Gets the node_settings of this ClientLibrarySettings.


        :return: The node_settings of this ClientLibrarySettings.
        :rtype: NodeSettings
        """
        return self._node_settings

    @node_settings.setter
    def node_settings(self, node_settings):
        """Sets the node_settings of this ClientLibrarySettings.


        :param node_settings: The node_settings of this ClientLibrarySettings.
        :type node_settings: NodeSettings
        """

        self._node_settings = node_settings

    @property
    def php_settings(self):
        """Gets the php_settings of this ClientLibrarySettings.


        :return: The php_settings of this ClientLibrarySettings.
        :rtype: PhpSettings
        """
        return self._php_settings

    @php_settings.setter
    def php_settings(self, php_settings):
        """Sets the php_settings of this ClientLibrarySettings.


        :param php_settings: The php_settings of this ClientLibrarySettings.
        :type php_settings: PhpSettings
        """

        self._php_settings = php_settings

    @property
    def python_settings(self):
        """Gets the python_settings of this ClientLibrarySettings.


        :return: The python_settings of this ClientLibrarySettings.
        :rtype: PythonSettings
        """
        return self._python_settings

    @python_settings.setter
    def python_settings(self, python_settings):
        """Sets the python_settings of this ClientLibrarySettings.


        :param python_settings: The python_settings of this ClientLibrarySettings.
        :type python_settings: PythonSettings
        """

        self._python_settings = python_settings

    @property
    def rest_numeric_enums(self):
        """Gets the rest_numeric_enums of this ClientLibrarySettings.

        When using transport=rest, the client request will encode enums as numbers rather than strings.

        :return: The rest_numeric_enums of this ClientLibrarySettings.
        :rtype: bool
        """
        return self._rest_numeric_enums

    @rest_numeric_enums.setter
    def rest_numeric_enums(self, rest_numeric_enums):
        """Sets the rest_numeric_enums of this ClientLibrarySettings.

        When using transport=rest, the client request will encode enums as numbers rather than strings.

        :param rest_numeric_enums: The rest_numeric_enums of this ClientLibrarySettings.
        :type rest_numeric_enums: bool
        """

        self._rest_numeric_enums = rest_numeric_enums

    @property
    def ruby_settings(self):
        """Gets the ruby_settings of this ClientLibrarySettings.


        :return: The ruby_settings of this ClientLibrarySettings.
        :rtype: RubySettings
        """
        return self._ruby_settings

    @ruby_settings.setter
    def ruby_settings(self, ruby_settings):
        """Sets the ruby_settings of this ClientLibrarySettings.


        :param ruby_settings: The ruby_settings of this ClientLibrarySettings.
        :type ruby_settings: RubySettings
        """

        self._ruby_settings = ruby_settings

    @property
    def version(self):
        """Gets the version of this ClientLibrarySettings.

        Version of the API to apply these settings to. This is the full protobuf package for the API, ending in the version element. Examples: \"google.cloud.speech.v1\" and \"google.spanner.admin.database.v1\".

        :return: The version of this ClientLibrarySettings.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ClientLibrarySettings.

        Version of the API to apply these settings to. This is the full protobuf package for the API, ending in the version element. Examples: \"google.cloud.speech.v1\" and \"google.spanner.admin.database.v1\".

        :param version: The version of this ClientLibrarySettings.
        :type version: str
        """

        self._version = version
