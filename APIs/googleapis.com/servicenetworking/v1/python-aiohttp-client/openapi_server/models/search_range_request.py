# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SearchRangeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip_prefix_length: int=None, network: str=None):
        """SearchRangeRequest - a model defined in OpenAPI

        :param ip_prefix_length: The ip_prefix_length of this SearchRangeRequest.
        :param network: The network of this SearchRangeRequest.
        """
        self.openapi_types = {
            'ip_prefix_length': int,
            'network': str
        }

        self.attribute_map = {
            'ip_prefix_length': 'ipPrefixLength',
            'network': 'network'
        }

        self._ip_prefix_length = ip_prefix_length
        self._network = network

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchRangeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchRangeRequest of this SearchRangeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip_prefix_length(self):
        """Gets the ip_prefix_length of this SearchRangeRequest.

        Required. The prefix length of the IP range. Use usual CIDR range notation. For example, '30' to find unused x.x.x.x/30 CIDR range. Actual range will be determined using allocated range for the consumer peered network and returned in the result.

        :return: The ip_prefix_length of this SearchRangeRequest.
        :rtype: int
        """
        return self._ip_prefix_length

    @ip_prefix_length.setter
    def ip_prefix_length(self, ip_prefix_length):
        """Sets the ip_prefix_length of this SearchRangeRequest.

        Required. The prefix length of the IP range. Use usual CIDR range notation. For example, '30' to find unused x.x.x.x/30 CIDR range. Actual range will be determined using allocated range for the consumer peered network and returned in the result.

        :param ip_prefix_length: The ip_prefix_length of this SearchRangeRequest.
        :type ip_prefix_length: int
        """

        self._ip_prefix_length = ip_prefix_length

    @property
    def network(self):
        """Gets the network of this SearchRangeRequest.

        Network name in the consumer project. This network must have been already peered with a shared VPC network using CreateConnection method. Must be in a form 'projects/{project}/global/networks/{network}'. {project} is a project number, as in '12345' {network} is network name.

        :return: The network of this SearchRangeRequest.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this SearchRangeRequest.

        Network name in the consumer project. This network must have been already peered with a shared VPC network using CreateConnection method. Must be in a form 'projects/{project}/global/networks/{network}'. {project} is a project number, as in '12345' {network} is network name.

        :param network: The network of this SearchRangeRequest.
        :type network: str
        """

        self._network = network
