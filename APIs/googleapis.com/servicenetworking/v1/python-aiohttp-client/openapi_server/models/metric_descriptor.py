# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.label_descriptor import LabelDescriptor
from openapi_server.models.metric_descriptor_metadata import MetricDescriptorMetadata
from openapi_server import util


class MetricDescriptor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, display_name: str=None, labels: List[LabelDescriptor]=None, launch_stage: str=None, metadata: MetricDescriptorMetadata=None, metric_kind: str=None, monitored_resource_types: List[str]=None, name: str=None, type: str=None, unit: str=None, value_type: str=None):
        """MetricDescriptor - a model defined in OpenAPI

        :param description: The description of this MetricDescriptor.
        :param display_name: The display_name of this MetricDescriptor.
        :param labels: The labels of this MetricDescriptor.
        :param launch_stage: The launch_stage of this MetricDescriptor.
        :param metadata: The metadata of this MetricDescriptor.
        :param metric_kind: The metric_kind of this MetricDescriptor.
        :param monitored_resource_types: The monitored_resource_types of this MetricDescriptor.
        :param name: The name of this MetricDescriptor.
        :param type: The type of this MetricDescriptor.
        :param unit: The unit of this MetricDescriptor.
        :param value_type: The value_type of this MetricDescriptor.
        """
        self.openapi_types = {
            'description': str,
            'display_name': str,
            'labels': List[LabelDescriptor],
            'launch_stage': str,
            'metadata': MetricDescriptorMetadata,
            'metric_kind': str,
            'monitored_resource_types': List[str],
            'name': str,
            'type': str,
            'unit': str,
            'value_type': str
        }

        self.attribute_map = {
            'description': 'description',
            'display_name': 'displayName',
            'labels': 'labels',
            'launch_stage': 'launchStage',
            'metadata': 'metadata',
            'metric_kind': 'metricKind',
            'monitored_resource_types': 'monitoredResourceTypes',
            'name': 'name',
            'type': 'type',
            'unit': 'unit',
            'value_type': 'valueType'
        }

        self._description = description
        self._display_name = display_name
        self._labels = labels
        self._launch_stage = launch_stage
        self._metadata = metadata
        self._metric_kind = metric_kind
        self._monitored_resource_types = monitored_resource_types
        self._name = name
        self._type = type
        self._unit = unit
        self._value_type = value_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetricDescriptor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetricDescriptor of this MetricDescriptor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this MetricDescriptor.

        A detailed description of the metric, which can be used in documentation.

        :return: The description of this MetricDescriptor.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MetricDescriptor.

        A detailed description of the metric, which can be used in documentation.

        :param description: The description of this MetricDescriptor.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this MetricDescriptor.

        A concise name for the metric, which can be displayed in user interfaces. Use sentence case without an ending period, for example \"Request count\". This field is optional but it is recommended to be set for any metrics associated with user-visible concepts, such as Quota.

        :return: The display_name of this MetricDescriptor.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this MetricDescriptor.

        A concise name for the metric, which can be displayed in user interfaces. Use sentence case without an ending period, for example \"Request count\". This field is optional but it is recommended to be set for any metrics associated with user-visible concepts, such as Quota.

        :param display_name: The display_name of this MetricDescriptor.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def labels(self):
        """Gets the labels of this MetricDescriptor.

        The set of labels that can be used to describe a specific instance of this metric type. For example, the `appengine.googleapis.com/http/server/response_latencies` metric type has a label for the HTTP response code, `response_code`, so you can look at latencies for successful responses or just for responses that failed.

        :return: The labels of this MetricDescriptor.
        :rtype: List[LabelDescriptor]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this MetricDescriptor.

        The set of labels that can be used to describe a specific instance of this metric type. For example, the `appengine.googleapis.com/http/server/response_latencies` metric type has a label for the HTTP response code, `response_code`, so you can look at latencies for successful responses or just for responses that failed.

        :param labels: The labels of this MetricDescriptor.
        :type labels: List[LabelDescriptor]
        """

        self._labels = labels

    @property
    def launch_stage(self):
        """Gets the launch_stage of this MetricDescriptor.

        Optional. The launch stage of the metric definition.

        :return: The launch_stage of this MetricDescriptor.
        :rtype: str
        """
        return self._launch_stage

    @launch_stage.setter
    def launch_stage(self, launch_stage):
        """Sets the launch_stage of this MetricDescriptor.

        Optional. The launch stage of the metric definition.

        :param launch_stage: The launch_stage of this MetricDescriptor.
        :type launch_stage: str
        """
        allowed_values = ["LAUNCH_STAGE_UNSPECIFIED", "UNIMPLEMENTED", "PRELAUNCH", "EARLY_ACCESS", "ALPHA", "BETA", "GA", "DEPRECATED"]  # noqa: E501
        if launch_stage not in allowed_values:
            raise ValueError(
                "Invalid value for `launch_stage` ({0}), must be one of {1}"
                .format(launch_stage, allowed_values)
            )

        self._launch_stage = launch_stage

    @property
    def metadata(self):
        """Gets the metadata of this MetricDescriptor.


        :return: The metadata of this MetricDescriptor.
        :rtype: MetricDescriptorMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this MetricDescriptor.


        :param metadata: The metadata of this MetricDescriptor.
        :type metadata: MetricDescriptorMetadata
        """

        self._metadata = metadata

    @property
    def metric_kind(self):
        """Gets the metric_kind of this MetricDescriptor.

        Whether the metric records instantaneous values, changes to a value, etc. Some combinations of `metric_kind` and `value_type` might not be supported.

        :return: The metric_kind of this MetricDescriptor.
        :rtype: str
        """
        return self._metric_kind

    @metric_kind.setter
    def metric_kind(self, metric_kind):
        """Sets the metric_kind of this MetricDescriptor.

        Whether the metric records instantaneous values, changes to a value, etc. Some combinations of `metric_kind` and `value_type` might not be supported.

        :param metric_kind: The metric_kind of this MetricDescriptor.
        :type metric_kind: str
        """
        allowed_values = ["METRIC_KIND_UNSPECIFIED", "GAUGE", "DELTA", "CUMULATIVE"]  # noqa: E501
        if metric_kind not in allowed_values:
            raise ValueError(
                "Invalid value for `metric_kind` ({0}), must be one of {1}"
                .format(metric_kind, allowed_values)
            )

        self._metric_kind = metric_kind

    @property
    def monitored_resource_types(self):
        """Gets the monitored_resource_types of this MetricDescriptor.

        Read-only. If present, then a time series, which is identified partially by a metric type and a MonitoredResourceDescriptor, that is associated with this metric type can only be associated with one of the monitored resource types listed here.

        :return: The monitored_resource_types of this MetricDescriptor.
        :rtype: List[str]
        """
        return self._monitored_resource_types

    @monitored_resource_types.setter
    def monitored_resource_types(self, monitored_resource_types):
        """Sets the monitored_resource_types of this MetricDescriptor.

        Read-only. If present, then a time series, which is identified partially by a metric type and a MonitoredResourceDescriptor, that is associated with this metric type can only be associated with one of the monitored resource types listed here.

        :param monitored_resource_types: The monitored_resource_types of this MetricDescriptor.
        :type monitored_resource_types: List[str]
        """

        self._monitored_resource_types = monitored_resource_types

    @property
    def name(self):
        """Gets the name of this MetricDescriptor.

        The resource name of the metric descriptor.

        :return: The name of this MetricDescriptor.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MetricDescriptor.

        The resource name of the metric descriptor.

        :param name: The name of this MetricDescriptor.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this MetricDescriptor.

        The metric type, including its DNS name prefix. The type is not URL-encoded. All user-defined metric types have the DNS name `custom.googleapis.com` or `external.googleapis.com`. Metric types should use a natural hierarchical grouping. For example: \"custom.googleapis.com/invoice/paid/amount\" \"external.googleapis.com/prometheus/up\" \"appengine.googleapis.com/http/server/response_latencies\"

        :return: The type of this MetricDescriptor.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MetricDescriptor.

        The metric type, including its DNS name prefix. The type is not URL-encoded. All user-defined metric types have the DNS name `custom.googleapis.com` or `external.googleapis.com`. Metric types should use a natural hierarchical grouping. For example: \"custom.googleapis.com/invoice/paid/amount\" \"external.googleapis.com/prometheus/up\" \"appengine.googleapis.com/http/server/response_latencies\"

        :param type: The type of this MetricDescriptor.
        :type type: str
        """

        self._type = type

    @property
    def unit(self):
        """Gets the unit of this MetricDescriptor.

        The units in which the metric value is reported. It is only applicable if the `value_type` is `INT64`, `DOUBLE`, or `DISTRIBUTION`. The `unit` defines the representation of the stored metric values. Different systems might scale the values to be more easily displayed (so a value of `0.02kBy` _might_ be displayed as `20By`, and a value of `3523kBy` _might_ be displayed as `3.5MBy`). However, if the `unit` is `kBy`, then the value of the metric is always in thousands of bytes, no matter how it might be displayed. If you want a custom metric to record the exact number of CPU-seconds used by a job, you can create an `INT64 CUMULATIVE` metric whose `unit` is `s{CPU}` (or equivalently `1s{CPU}` or just `s`). If the job uses 12,005 CPU-seconds, then the value is written as `12005`. Alternatively, if you want a custom metric to record data in a more granular way, you can create a `DOUBLE CUMULATIVE` metric whose `unit` is `ks{CPU}`, and then write the value `12.005` (which is `12005/1000`), or use `Kis{CPU}` and write `11.723` (which is `12005/1024`). The supported units are a subset of [The Unified Code for Units of Measure](https://unitsofmeasure.org/ucum.html) standard: **Basic units (UNIT)** * `bit` bit * `By` byte * `s` second * `min` minute * `h` hour * `d` day * `1` dimensionless **Prefixes (PREFIX)** * `k` kilo (10^3) * `M` mega (10^6) * `G` giga (10^9) * `T` tera (10^12) * `P` peta (10^15) * `E` exa (10^18) * `Z` zetta (10^21) * `Y` yotta (10^24) * `m` milli (10^-3) * `u` micro (10^-6) * `n` nano (10^-9) * `p` pico (10^-12) * `f` femto (10^-15) * `a` atto (10^-18) * `z` zepto (10^-21) * `y` yocto (10^-24) * `Ki` kibi (2^10) * `Mi` mebi (2^20) * `Gi` gibi (2^30) * `Ti` tebi (2^40) * `Pi` pebi (2^50) **Grammar** The grammar also includes these connectors: * `/` division or ratio (as an infix operator). For examples, `kBy/{email}` or `MiBy/10ms` (although you should almost never have `/s` in a metric `unit`; rates should always be computed at query time from the underlying cumulative or delta value). * `.` multiplication or composition (as an infix operator). For examples, `GBy.d` or `k{watt}.h`. The grammar for a unit is as follows: Expression = Component { \".\" Component } { \"/\" Component } ; Component = ( [ PREFIX ] UNIT | \"%\" ) [ Annotation ] | Annotation | \"1\" ; Annotation = \"{\" NAME \"}\" ; Notes: * `Annotation` is just a comment if it follows a `UNIT`. If the annotation is used alone, then the unit is equivalent to `1`. For examples, `{request}/s == 1/s`, `By{transmitted}/s == By/s`. * `NAME` is a sequence of non-blank printable ASCII characters not containing `{` or `}`. * `1` represents a unitary [dimensionless unit](https://en.wikipedia.org/wiki/Dimensionless_quantity) of 1, such as in `1/s`. It is typically used when none of the basic units are appropriate. For example, \"new users per day\" can be represented as `1/d` or `{new-users}/d` (and a metric value `5` would mean \"5 new users). Alternatively, \"thousands of page views per day\" would be represented as `1000/d` or `k1/d` or `k{page_views}/d` (and a metric value of `5.3` would mean \"5300 page views per day\"). * `%` represents dimensionless value of 1/100, and annotates values giving a percentage (so the metric values are typically in the range of 0..100, and a metric value `3` means \"3 percent\"). * `10^2.%` indicates a metric contains a ratio, typically in the range 0..1, that will be multiplied by 100 and displayed as a percentage (so a metric value `0.03` means \"3 percent\").

        :return: The unit of this MetricDescriptor.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this MetricDescriptor.

        The units in which the metric value is reported. It is only applicable if the `value_type` is `INT64`, `DOUBLE`, or `DISTRIBUTION`. The `unit` defines the representation of the stored metric values. Different systems might scale the values to be more easily displayed (so a value of `0.02kBy` _might_ be displayed as `20By`, and a value of `3523kBy` _might_ be displayed as `3.5MBy`). However, if the `unit` is `kBy`, then the value of the metric is always in thousands of bytes, no matter how it might be displayed. If you want a custom metric to record the exact number of CPU-seconds used by a job, you can create an `INT64 CUMULATIVE` metric whose `unit` is `s{CPU}` (or equivalently `1s{CPU}` or just `s`). If the job uses 12,005 CPU-seconds, then the value is written as `12005`. Alternatively, if you want a custom metric to record data in a more granular way, you can create a `DOUBLE CUMULATIVE` metric whose `unit` is `ks{CPU}`, and then write the value `12.005` (which is `12005/1000`), or use `Kis{CPU}` and write `11.723` (which is `12005/1024`). The supported units are a subset of [The Unified Code for Units of Measure](https://unitsofmeasure.org/ucum.html) standard: **Basic units (UNIT)** * `bit` bit * `By` byte * `s` second * `min` minute * `h` hour * `d` day * `1` dimensionless **Prefixes (PREFIX)** * `k` kilo (10^3) * `M` mega (10^6) * `G` giga (10^9) * `T` tera (10^12) * `P` peta (10^15) * `E` exa (10^18) * `Z` zetta (10^21) * `Y` yotta (10^24) * `m` milli (10^-3) * `u` micro (10^-6) * `n` nano (10^-9) * `p` pico (10^-12) * `f` femto (10^-15) * `a` atto (10^-18) * `z` zepto (10^-21) * `y` yocto (10^-24) * `Ki` kibi (2^10) * `Mi` mebi (2^20) * `Gi` gibi (2^30) * `Ti` tebi (2^40) * `Pi` pebi (2^50) **Grammar** The grammar also includes these connectors: * `/` division or ratio (as an infix operator). For examples, `kBy/{email}` or `MiBy/10ms` (although you should almost never have `/s` in a metric `unit`; rates should always be computed at query time from the underlying cumulative or delta value). * `.` multiplication or composition (as an infix operator). For examples, `GBy.d` or `k{watt}.h`. The grammar for a unit is as follows: Expression = Component { \".\" Component } { \"/\" Component } ; Component = ( [ PREFIX ] UNIT | \"%\" ) [ Annotation ] | Annotation | \"1\" ; Annotation = \"{\" NAME \"}\" ; Notes: * `Annotation` is just a comment if it follows a `UNIT`. If the annotation is used alone, then the unit is equivalent to `1`. For examples, `{request}/s == 1/s`, `By{transmitted}/s == By/s`. * `NAME` is a sequence of non-blank printable ASCII characters not containing `{` or `}`. * `1` represents a unitary [dimensionless unit](https://en.wikipedia.org/wiki/Dimensionless_quantity) of 1, such as in `1/s`. It is typically used when none of the basic units are appropriate. For example, \"new users per day\" can be represented as `1/d` or `{new-users}/d` (and a metric value `5` would mean \"5 new users). Alternatively, \"thousands of page views per day\" would be represented as `1000/d` or `k1/d` or `k{page_views}/d` (and a metric value of `5.3` would mean \"5300 page views per day\"). * `%` represents dimensionless value of 1/100, and annotates values giving a percentage (so the metric values are typically in the range of 0..100, and a metric value `3` means \"3 percent\"). * `10^2.%` indicates a metric contains a ratio, typically in the range 0..1, that will be multiplied by 100 and displayed as a percentage (so a metric value `0.03` means \"3 percent\").

        :param unit: The unit of this MetricDescriptor.
        :type unit: str
        """

        self._unit = unit

    @property
    def value_type(self):
        """Gets the value_type of this MetricDescriptor.

        Whether the measurement is an integer, a floating-point number, etc. Some combinations of `metric_kind` and `value_type` might not be supported.

        :return: The value_type of this MetricDescriptor.
        :rtype: str
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type):
        """Sets the value_type of this MetricDescriptor.

        Whether the measurement is an integer, a floating-point number, etc. Some combinations of `metric_kind` and `value_type` might not be supported.

        :param value_type: The value_type of this MetricDescriptor.
        :type value_type: str
        """
        allowed_values = ["VALUE_TYPE_UNSPECIFIED", "BOOL", "INT64", "DOUBLE", "STRING", "DISTRIBUTION", "MONEY"]  # noqa: E501
        if value_type not in allowed_values:
            raise ValueError(
                "Invalid value for `value_type` ({0}), must be one of {1}"
                .format(value_type, allowed_values)
            )

        self._value_type = value_type
