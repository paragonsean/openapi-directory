# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.consumer_project import ConsumerProject
from openapi_server.models.range_reservation import RangeReservation
from openapi_server import util


class ValidateConsumerConfigRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, check_service_networking_use_permission: bool=None, consumer_network: str=None, consumer_project: ConsumerProject=None, range_reservation: RangeReservation=None, validate_network: bool=None):
        """ValidateConsumerConfigRequest - a model defined in OpenAPI

        :param check_service_networking_use_permission: The check_service_networking_use_permission of this ValidateConsumerConfigRequest.
        :param consumer_network: The consumer_network of this ValidateConsumerConfigRequest.
        :param consumer_project: The consumer_project of this ValidateConsumerConfigRequest.
        :param range_reservation: The range_reservation of this ValidateConsumerConfigRequest.
        :param validate_network: The validate_network of this ValidateConsumerConfigRequest.
        """
        self.openapi_types = {
            'check_service_networking_use_permission': bool,
            'consumer_network': str,
            'consumer_project': ConsumerProject,
            'range_reservation': RangeReservation,
            'validate_network': bool
        }

        self.attribute_map = {
            'check_service_networking_use_permission': 'checkServiceNetworkingUsePermission',
            'consumer_network': 'consumerNetwork',
            'consumer_project': 'consumerProject',
            'range_reservation': 'rangeReservation',
            'validate_network': 'validateNetwork'
        }

        self._check_service_networking_use_permission = check_service_networking_use_permission
        self._consumer_network = consumer_network
        self._consumer_project = consumer_project
        self._range_reservation = range_reservation
        self._validate_network = validate_network

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ValidateConsumerConfigRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ValidateConsumerConfigRequest of this ValidateConsumerConfigRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def check_service_networking_use_permission(self):
        """Gets the check_service_networking_use_permission of this ValidateConsumerConfigRequest.

        Optional. The IAM permission check determines whether the consumer project has 'servicenetworking.services.use' permission or not.

        :return: The check_service_networking_use_permission of this ValidateConsumerConfigRequest.
        :rtype: bool
        """
        return self._check_service_networking_use_permission

    @check_service_networking_use_permission.setter
    def check_service_networking_use_permission(self, check_service_networking_use_permission):
        """Sets the check_service_networking_use_permission of this ValidateConsumerConfigRequest.

        Optional. The IAM permission check determines whether the consumer project has 'servicenetworking.services.use' permission or not.

        :param check_service_networking_use_permission: The check_service_networking_use_permission of this ValidateConsumerConfigRequest.
        :type check_service_networking_use_permission: bool
        """

        self._check_service_networking_use_permission = check_service_networking_use_permission

    @property
    def consumer_network(self):
        """Gets the consumer_network of this ValidateConsumerConfigRequest.

        Required. The network that the consumer is using to connect with services. Must be in the form of projects/{project}/global/networks/{network} {project} is a project number, as in '12345' {network} is network name.

        :return: The consumer_network of this ValidateConsumerConfigRequest.
        :rtype: str
        """
        return self._consumer_network

    @consumer_network.setter
    def consumer_network(self, consumer_network):
        """Sets the consumer_network of this ValidateConsumerConfigRequest.

        Required. The network that the consumer is using to connect with services. Must be in the form of projects/{project}/global/networks/{network} {project} is a project number, as in '12345' {network} is network name.

        :param consumer_network: The consumer_network of this ValidateConsumerConfigRequest.
        :type consumer_network: str
        """

        self._consumer_network = consumer_network

    @property
    def consumer_project(self):
        """Gets the consumer_project of this ValidateConsumerConfigRequest.


        :return: The consumer_project of this ValidateConsumerConfigRequest.
        :rtype: ConsumerProject
        """
        return self._consumer_project

    @consumer_project.setter
    def consumer_project(self, consumer_project):
        """Sets the consumer_project of this ValidateConsumerConfigRequest.


        :param consumer_project: The consumer_project of this ValidateConsumerConfigRequest.
        :type consumer_project: ConsumerProject
        """

        self._consumer_project = consumer_project

    @property
    def range_reservation(self):
        """Gets the range_reservation of this ValidateConsumerConfigRequest.


        :return: The range_reservation of this ValidateConsumerConfigRequest.
        :rtype: RangeReservation
        """
        return self._range_reservation

    @range_reservation.setter
    def range_reservation(self, range_reservation):
        """Sets the range_reservation of this ValidateConsumerConfigRequest.


        :param range_reservation: The range_reservation of this ValidateConsumerConfigRequest.
        :type range_reservation: RangeReservation
        """

        self._range_reservation = range_reservation

    @property
    def validate_network(self):
        """Gets the validate_network of this ValidateConsumerConfigRequest.

        The validations will be performed in the order listed in the ValidationError enum. The first failure will return. If a validation is not requested, then the next one will be performed. SERVICE_NETWORKING_NOT_ENABLED and NETWORK_NOT_PEERED checks are performed for all requests where validation is requested. NETWORK_NOT_FOUND and NETWORK_DISCONNECTED checks are done for requests that have validate_network set to true.

        :return: The validate_network of this ValidateConsumerConfigRequest.
        :rtype: bool
        """
        return self._validate_network

    @validate_network.setter
    def validate_network(self, validate_network):
        """Sets the validate_network of this ValidateConsumerConfigRequest.

        The validations will be performed in the order listed in the ValidationError enum. The first failure will return. If a validation is not requested, then the next one will be performed. SERVICE_NETWORKING_NOT_ENABLED and NETWORK_NOT_PEERED checks are performed for all requests where validation is requested. NETWORK_NOT_FOUND and NETWORK_DISCONNECTED checks are done for requests that have validate_network set to true.

        :param validate_network: The validate_network of this ValidateConsumerConfigRequest.
        :type validate_network: bool
        """

        self._validate_network = validate_network
