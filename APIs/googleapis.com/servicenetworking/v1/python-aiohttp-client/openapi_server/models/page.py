# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Page(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None, name: str=None, subpages: List[Page]=None):
        """Page - a model defined in OpenAPI

        :param content: The content of this Page.
        :param name: The name of this Page.
        :param subpages: The subpages of this Page.
        """
        self.openapi_types = {
            'content': str,
            'name': str,
            'subpages': List[Page]
        }

        self.attribute_map = {
            'content': 'content',
            'name': 'name',
            'subpages': 'subpages'
        }

        self._content = content
        self._name = name
        self._subpages = subpages

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Page':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Page of this Page.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this Page.

        The Markdown content of the page. You can use (== include {path} ==) to include content from a Markdown file. The content can be used to produce the documentation page such as HTML format page.

        :return: The content of this Page.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Page.

        The Markdown content of the page. You can use (== include {path} ==) to include content from a Markdown file. The content can be used to produce the documentation page such as HTML format page.

        :param content: The content of this Page.
        :type content: str
        """

        self._content = content

    @property
    def name(self):
        """Gets the name of this Page.

        The name of the page. It will be used as an identity of the page to generate URI of the page, text of the link to this page in navigation, etc. The full page name (start from the root page name to this page concatenated with `.`) can be used as reference to the page in your documentation. For example: pages: - name: Tutorial content: (== include tutorial.md ==) subpages: - name: Java content: (== include tutorial_java.md ==) You can reference `Java` page using Markdown reference link syntax: `Java`.

        :return: The name of this Page.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Page.

        The name of the page. It will be used as an identity of the page to generate URI of the page, text of the link to this page in navigation, etc. The full page name (start from the root page name to this page concatenated with `.`) can be used as reference to the page in your documentation. For example: pages: - name: Tutorial content: (== include tutorial.md ==) subpages: - name: Java content: (== include tutorial_java.md ==) You can reference `Java` page using Markdown reference link syntax: `Java`.

        :param name: The name of this Page.
        :type name: str
        """

        self._name = name

    @property
    def subpages(self):
        """Gets the subpages of this Page.

        Subpages of this page. The order of subpages specified here will be honored in the generated docset.

        :return: The subpages of this Page.
        :rtype: List[Page]
        """
        return self._subpages

    @subpages.setter
    def subpages(self, subpages):
        """Sets the subpages of this Page.

        Subpages of this page. The order of subpages specified here will be honored in the generated docset.

        :param subpages: The subpages of this Page.
        :type subpages: List[Page]
        """

        self._subpages = subpages
