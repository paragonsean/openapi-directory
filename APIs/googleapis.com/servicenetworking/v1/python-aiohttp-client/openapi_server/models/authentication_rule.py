# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auth_requirement import AuthRequirement
from openapi_server.models.o_auth_requirements import OAuthRequirements
from openapi_server import util


class AuthenticationRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_without_credential: bool=None, oauth: OAuthRequirements=None, requirements: List[AuthRequirement]=None, selector: str=None):
        """AuthenticationRule - a model defined in OpenAPI

        :param allow_without_credential: The allow_without_credential of this AuthenticationRule.
        :param oauth: The oauth of this AuthenticationRule.
        :param requirements: The requirements of this AuthenticationRule.
        :param selector: The selector of this AuthenticationRule.
        """
        self.openapi_types = {
            'allow_without_credential': bool,
            'oauth': OAuthRequirements,
            'requirements': List[AuthRequirement],
            'selector': str
        }

        self.attribute_map = {
            'allow_without_credential': 'allowWithoutCredential',
            'oauth': 'oauth',
            'requirements': 'requirements',
            'selector': 'selector'
        }

        self._allow_without_credential = allow_without_credential
        self._oauth = oauth
        self._requirements = requirements
        self._selector = selector

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthenticationRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthenticationRule of this AuthenticationRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_without_credential(self):
        """Gets the allow_without_credential of this AuthenticationRule.

        If true, the service accepts API keys without any other credential. This flag only applies to HTTP and gRPC requests.

        :return: The allow_without_credential of this AuthenticationRule.
        :rtype: bool
        """
        return self._allow_without_credential

    @allow_without_credential.setter
    def allow_without_credential(self, allow_without_credential):
        """Sets the allow_without_credential of this AuthenticationRule.

        If true, the service accepts API keys without any other credential. This flag only applies to HTTP and gRPC requests.

        :param allow_without_credential: The allow_without_credential of this AuthenticationRule.
        :type allow_without_credential: bool
        """

        self._allow_without_credential = allow_without_credential

    @property
    def oauth(self):
        """Gets the oauth of this AuthenticationRule.


        :return: The oauth of this AuthenticationRule.
        :rtype: OAuthRequirements
        """
        return self._oauth

    @oauth.setter
    def oauth(self, oauth):
        """Sets the oauth of this AuthenticationRule.


        :param oauth: The oauth of this AuthenticationRule.
        :type oauth: OAuthRequirements
        """

        self._oauth = oauth

    @property
    def requirements(self):
        """Gets the requirements of this AuthenticationRule.

        Requirements for additional authentication providers.

        :return: The requirements of this AuthenticationRule.
        :rtype: List[AuthRequirement]
        """
        return self._requirements

    @requirements.setter
    def requirements(self, requirements):
        """Sets the requirements of this AuthenticationRule.

        Requirements for additional authentication providers.

        :param requirements: The requirements of this AuthenticationRule.
        :type requirements: List[AuthRequirement]
        """

        self._requirements = requirements

    @property
    def selector(self):
        """Gets the selector of this AuthenticationRule.

        Selects the methods to which this rule applies. Refer to selector for syntax details.

        :return: The selector of this AuthenticationRule.
        :rtype: str
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """Sets the selector of this AuthenticationRule.

        Selects the methods to which this rule applies. Refer to selector for syntax details.

        :param selector: The selector of this AuthenticationRule.
        :type selector: str
        """

        self._selector = selector
