# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class QuotaLimit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_limit: str=None, description: str=None, display_name: str=None, duration: str=None, free_tier: str=None, max_limit: str=None, metric: str=None, name: str=None, unit: str=None, values: Dict[str, str]=None):
        """QuotaLimit - a model defined in OpenAPI

        :param default_limit: The default_limit of this QuotaLimit.
        :param description: The description of this QuotaLimit.
        :param display_name: The display_name of this QuotaLimit.
        :param duration: The duration of this QuotaLimit.
        :param free_tier: The free_tier of this QuotaLimit.
        :param max_limit: The max_limit of this QuotaLimit.
        :param metric: The metric of this QuotaLimit.
        :param name: The name of this QuotaLimit.
        :param unit: The unit of this QuotaLimit.
        :param values: The values of this QuotaLimit.
        """
        self.openapi_types = {
            'default_limit': str,
            'description': str,
            'display_name': str,
            'duration': str,
            'free_tier': str,
            'max_limit': str,
            'metric': str,
            'name': str,
            'unit': str,
            'values': Dict[str, str]
        }

        self.attribute_map = {
            'default_limit': 'defaultLimit',
            'description': 'description',
            'display_name': 'displayName',
            'duration': 'duration',
            'free_tier': 'freeTier',
            'max_limit': 'maxLimit',
            'metric': 'metric',
            'name': 'name',
            'unit': 'unit',
            'values': 'values'
        }

        self._default_limit = default_limit
        self._description = description
        self._display_name = display_name
        self._duration = duration
        self._free_tier = free_tier
        self._max_limit = max_limit
        self._metric = metric
        self._name = name
        self._unit = unit
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QuotaLimit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QuotaLimit of this QuotaLimit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_limit(self):
        """Gets the default_limit of this QuotaLimit.

        Default number of tokens that can be consumed during the specified duration. This is the number of tokens assigned when a client application developer activates the service for his/her project. Specifying a value of 0 will block all requests. This can be used if you are provisioning quota to selected consumers and blocking others. Similarly, a value of -1 will indicate an unlimited quota. No other negative values are allowed. Used by group-based quotas only.

        :return: The default_limit of this QuotaLimit.
        :rtype: str
        """
        return self._default_limit

    @default_limit.setter
    def default_limit(self, default_limit):
        """Sets the default_limit of this QuotaLimit.

        Default number of tokens that can be consumed during the specified duration. This is the number of tokens assigned when a client application developer activates the service for his/her project. Specifying a value of 0 will block all requests. This can be used if you are provisioning quota to selected consumers and blocking others. Similarly, a value of -1 will indicate an unlimited quota. No other negative values are allowed. Used by group-based quotas only.

        :param default_limit: The default_limit of this QuotaLimit.
        :type default_limit: str
        """

        self._default_limit = default_limit

    @property
    def description(self):
        """Gets the description of this QuotaLimit.

        Optional. User-visible, extended description for this quota limit. Should be used only when more context is needed to understand this limit than provided by the limit's display name (see: `display_name`).

        :return: The description of this QuotaLimit.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this QuotaLimit.

        Optional. User-visible, extended description for this quota limit. Should be used only when more context is needed to understand this limit than provided by the limit's display name (see: `display_name`).

        :param description: The description of this QuotaLimit.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this QuotaLimit.

        User-visible display name for this limit. Optional. If not set, the UI will provide a default display name based on the quota configuration. This field can be used to override the default display name generated from the configuration.

        :return: The display_name of this QuotaLimit.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this QuotaLimit.

        User-visible display name for this limit. Optional. If not set, the UI will provide a default display name based on the quota configuration. This field can be used to override the default display name generated from the configuration.

        :param display_name: The display_name of this QuotaLimit.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def duration(self):
        """Gets the duration of this QuotaLimit.

        Duration of this limit in textual notation. Must be \"100s\" or \"1d\". Used by group-based quotas only.

        :return: The duration of this QuotaLimit.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this QuotaLimit.

        Duration of this limit in textual notation. Must be \"100s\" or \"1d\". Used by group-based quotas only.

        :param duration: The duration of this QuotaLimit.
        :type duration: str
        """

        self._duration = duration

    @property
    def free_tier(self):
        """Gets the free_tier of this QuotaLimit.

        Free tier value displayed in the Developers Console for this limit. The free tier is the number of tokens that will be subtracted from the billed amount when billing is enabled. This field can only be set on a limit with duration \"1d\", in a billable group; it is invalid on any other limit. If this field is not set, it defaults to 0, indicating that there is no free tier for this service. Used by group-based quotas only.

        :return: The free_tier of this QuotaLimit.
        :rtype: str
        """
        return self._free_tier

    @free_tier.setter
    def free_tier(self, free_tier):
        """Sets the free_tier of this QuotaLimit.

        Free tier value displayed in the Developers Console for this limit. The free tier is the number of tokens that will be subtracted from the billed amount when billing is enabled. This field can only be set on a limit with duration \"1d\", in a billable group; it is invalid on any other limit. If this field is not set, it defaults to 0, indicating that there is no free tier for this service. Used by group-based quotas only.

        :param free_tier: The free_tier of this QuotaLimit.
        :type free_tier: str
        """

        self._free_tier = free_tier

    @property
    def max_limit(self):
        """Gets the max_limit of this QuotaLimit.

        Maximum number of tokens that can be consumed during the specified duration. Client application developers can override the default limit up to this maximum. If specified, this value cannot be set to a value less than the default limit. If not specified, it is set to the default limit. To allow clients to apply overrides with no upper bound, set this to -1, indicating unlimited maximum quota. Used by group-based quotas only.

        :return: The max_limit of this QuotaLimit.
        :rtype: str
        """
        return self._max_limit

    @max_limit.setter
    def max_limit(self, max_limit):
        """Sets the max_limit of this QuotaLimit.

        Maximum number of tokens that can be consumed during the specified duration. Client application developers can override the default limit up to this maximum. If specified, this value cannot be set to a value less than the default limit. If not specified, it is set to the default limit. To allow clients to apply overrides with no upper bound, set this to -1, indicating unlimited maximum quota. Used by group-based quotas only.

        :param max_limit: The max_limit of this QuotaLimit.
        :type max_limit: str
        """

        self._max_limit = max_limit

    @property
    def metric(self):
        """Gets the metric of this QuotaLimit.

        The name of the metric this quota limit applies to. The quota limits with the same metric will be checked together during runtime. The metric must be defined within the service config.

        :return: The metric of this QuotaLimit.
        :rtype: str
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this QuotaLimit.

        The name of the metric this quota limit applies to. The quota limits with the same metric will be checked together during runtime. The metric must be defined within the service config.

        :param metric: The metric of this QuotaLimit.
        :type metric: str
        """

        self._metric = metric

    @property
    def name(self):
        """Gets the name of this QuotaLimit.

        Name of the quota limit. The name must be provided, and it must be unique within the service. The name can only include alphanumeric characters as well as '-'. The maximum length of the limit name is 64 characters.

        :return: The name of this QuotaLimit.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this QuotaLimit.

        Name of the quota limit. The name must be provided, and it must be unique within the service. The name can only include alphanumeric characters as well as '-'. The maximum length of the limit name is 64 characters.

        :param name: The name of this QuotaLimit.
        :type name: str
        """

        self._name = name

    @property
    def unit(self):
        """Gets the unit of this QuotaLimit.

        Specify the unit of the quota limit. It uses the same syntax as Metric.unit. The supported unit kinds are determined by the quota backend system. Here are some examples: * \"1/min/{project}\" for quota per minute per project. Note: the order of unit components is insignificant. The \"1\" at the beginning is required to follow the metric unit syntax.

        :return: The unit of this QuotaLimit.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this QuotaLimit.

        Specify the unit of the quota limit. It uses the same syntax as Metric.unit. The supported unit kinds are determined by the quota backend system. Here are some examples: * \"1/min/{project}\" for quota per minute per project. Note: the order of unit components is insignificant. The \"1\" at the beginning is required to follow the metric unit syntax.

        :param unit: The unit of this QuotaLimit.
        :type unit: str
        """

        self._unit = unit

    @property
    def values(self):
        """Gets the values of this QuotaLimit.

        Tiered limit values. You must specify this as a key:value pair, with an integer value that is the maximum number of requests allowed for the specified unit. Currently only STANDARD is supported.

        :return: The values of this QuotaLimit.
        :rtype: Dict[str, str]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this QuotaLimit.

        Tiered limit values. You must specify this as a key:value pair, with an integer value that is the maximum number of requests allowed for the specified unit. Currently only STANDARD is supported.

        :param values: The values of this QuotaLimit.
        :type values: Dict[str, str]
        """

        self._values = values
