# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.secondary_ip_range_spec import SecondaryIpRangeSpec
from openapi_server import util


class AddSubnetworkRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_subnet_cidr_routes_overlap: bool=None, check_service_networking_use_permission: bool=None, compute_idempotency_window: str=None, consumer: str=None, consumer_network: str=None, description: str=None, internal_range: str=None, ip_prefix_length: int=None, outside_allocation_public_ip_range: str=None, private_ipv6_google_access: str=None, purpose: str=None, region: str=None, requested_address: str=None, requested_ranges: List[str]=None, role: str=None, secondary_ip_range_specs: List[SecondaryIpRangeSpec]=None, subnetwork: str=None, subnetwork_users: List[str]=None, use_custom_compute_idempotency_window: bool=None):
        """AddSubnetworkRequest - a model defined in OpenAPI

        :param allow_subnet_cidr_routes_overlap: The allow_subnet_cidr_routes_overlap of this AddSubnetworkRequest.
        :param check_service_networking_use_permission: The check_service_networking_use_permission of this AddSubnetworkRequest.
        :param compute_idempotency_window: The compute_idempotency_window of this AddSubnetworkRequest.
        :param consumer: The consumer of this AddSubnetworkRequest.
        :param consumer_network: The consumer_network of this AddSubnetworkRequest.
        :param description: The description of this AddSubnetworkRequest.
        :param internal_range: The internal_range of this AddSubnetworkRequest.
        :param ip_prefix_length: The ip_prefix_length of this AddSubnetworkRequest.
        :param outside_allocation_public_ip_range: The outside_allocation_public_ip_range of this AddSubnetworkRequest.
        :param private_ipv6_google_access: The private_ipv6_google_access of this AddSubnetworkRequest.
        :param purpose: The purpose of this AddSubnetworkRequest.
        :param region: The region of this AddSubnetworkRequest.
        :param requested_address: The requested_address of this AddSubnetworkRequest.
        :param requested_ranges: The requested_ranges of this AddSubnetworkRequest.
        :param role: The role of this AddSubnetworkRequest.
        :param secondary_ip_range_specs: The secondary_ip_range_specs of this AddSubnetworkRequest.
        :param subnetwork: The subnetwork of this AddSubnetworkRequest.
        :param subnetwork_users: The subnetwork_users of this AddSubnetworkRequest.
        :param use_custom_compute_idempotency_window: The use_custom_compute_idempotency_window of this AddSubnetworkRequest.
        """
        self.openapi_types = {
            'allow_subnet_cidr_routes_overlap': bool,
            'check_service_networking_use_permission': bool,
            'compute_idempotency_window': str,
            'consumer': str,
            'consumer_network': str,
            'description': str,
            'internal_range': str,
            'ip_prefix_length': int,
            'outside_allocation_public_ip_range': str,
            'private_ipv6_google_access': str,
            'purpose': str,
            'region': str,
            'requested_address': str,
            'requested_ranges': List[str],
            'role': str,
            'secondary_ip_range_specs': List[SecondaryIpRangeSpec],
            'subnetwork': str,
            'subnetwork_users': List[str],
            'use_custom_compute_idempotency_window': bool
        }

        self.attribute_map = {
            'allow_subnet_cidr_routes_overlap': 'allowSubnetCidrRoutesOverlap',
            'check_service_networking_use_permission': 'checkServiceNetworkingUsePermission',
            'compute_idempotency_window': 'computeIdempotencyWindow',
            'consumer': 'consumer',
            'consumer_network': 'consumerNetwork',
            'description': 'description',
            'internal_range': 'internalRange',
            'ip_prefix_length': 'ipPrefixLength',
            'outside_allocation_public_ip_range': 'outsideAllocationPublicIpRange',
            'private_ipv6_google_access': 'privateIpv6GoogleAccess',
            'purpose': 'purpose',
            'region': 'region',
            'requested_address': 'requestedAddress',
            'requested_ranges': 'requestedRanges',
            'role': 'role',
            'secondary_ip_range_specs': 'secondaryIpRangeSpecs',
            'subnetwork': 'subnetwork',
            'subnetwork_users': 'subnetworkUsers',
            'use_custom_compute_idempotency_window': 'useCustomComputeIdempotencyWindow'
        }

        self._allow_subnet_cidr_routes_overlap = allow_subnet_cidr_routes_overlap
        self._check_service_networking_use_permission = check_service_networking_use_permission
        self._compute_idempotency_window = compute_idempotency_window
        self._consumer = consumer
        self._consumer_network = consumer_network
        self._description = description
        self._internal_range = internal_range
        self._ip_prefix_length = ip_prefix_length
        self._outside_allocation_public_ip_range = outside_allocation_public_ip_range
        self._private_ipv6_google_access = private_ipv6_google_access
        self._purpose = purpose
        self._region = region
        self._requested_address = requested_address
        self._requested_ranges = requested_ranges
        self._role = role
        self._secondary_ip_range_specs = secondary_ip_range_specs
        self._subnetwork = subnetwork
        self._subnetwork_users = subnetwork_users
        self._use_custom_compute_idempotency_window = use_custom_compute_idempotency_window

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddSubnetworkRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddSubnetworkRequest of this AddSubnetworkRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_subnet_cidr_routes_overlap(self):
        """Gets the allow_subnet_cidr_routes_overlap of this AddSubnetworkRequest.

        Optional. Defines the allowSubnetCidrRoutesOverlap field of the subnet, e.g. Available in alpha and beta according to [Compute API documentation](https://cloud.google.com/compute/docs/reference/rest/beta/subnetworks/insert)

        :return: The allow_subnet_cidr_routes_overlap of this AddSubnetworkRequest.
        :rtype: bool
        """
        return self._allow_subnet_cidr_routes_overlap

    @allow_subnet_cidr_routes_overlap.setter
    def allow_subnet_cidr_routes_overlap(self, allow_subnet_cidr_routes_overlap):
        """Sets the allow_subnet_cidr_routes_overlap of this AddSubnetworkRequest.

        Optional. Defines the allowSubnetCidrRoutesOverlap field of the subnet, e.g. Available in alpha and beta according to [Compute API documentation](https://cloud.google.com/compute/docs/reference/rest/beta/subnetworks/insert)

        :param allow_subnet_cidr_routes_overlap: The allow_subnet_cidr_routes_overlap of this AddSubnetworkRequest.
        :type allow_subnet_cidr_routes_overlap: bool
        """

        self._allow_subnet_cidr_routes_overlap = allow_subnet_cidr_routes_overlap

    @property
    def check_service_networking_use_permission(self):
        """Gets the check_service_networking_use_permission of this AddSubnetworkRequest.

        Optional. The IAM permission check determines whether the consumer project has 'servicenetworking.services.use' permission or not.

        :return: The check_service_networking_use_permission of this AddSubnetworkRequest.
        :rtype: bool
        """
        return self._check_service_networking_use_permission

    @check_service_networking_use_permission.setter
    def check_service_networking_use_permission(self, check_service_networking_use_permission):
        """Sets the check_service_networking_use_permission of this AddSubnetworkRequest.

        Optional. The IAM permission check determines whether the consumer project has 'servicenetworking.services.use' permission or not.

        :param check_service_networking_use_permission: The check_service_networking_use_permission of this AddSubnetworkRequest.
        :type check_service_networking_use_permission: bool
        """

        self._check_service_networking_use_permission = check_service_networking_use_permission

    @property
    def compute_idempotency_window(self):
        """Gets the compute_idempotency_window of this AddSubnetworkRequest.

        Optional. Specifies a custom time bucket for Arcus subnetwork request idempotency. If two equivalent concurrent requests are made, Arcus will know to ignore the request if it has already been completed or is in progress. Only requests with matching compute_idempotency_window have guaranteed idempotency. Changing this time window between requests results in undefined behavior. Zero (or empty) value with custom_compute_idempotency_window=true specifies no idempotency (i.e. no request ID is provided to Arcus). Maximum value of 14 days (enforced by Arcus limit). For more information on how to use, see: go/revisit-sn-idempotency-window

        :return: The compute_idempotency_window of this AddSubnetworkRequest.
        :rtype: str
        """
        return self._compute_idempotency_window

    @compute_idempotency_window.setter
    def compute_idempotency_window(self, compute_idempotency_window):
        """Sets the compute_idempotency_window of this AddSubnetworkRequest.

        Optional. Specifies a custom time bucket for Arcus subnetwork request idempotency. If two equivalent concurrent requests are made, Arcus will know to ignore the request if it has already been completed or is in progress. Only requests with matching compute_idempotency_window have guaranteed idempotency. Changing this time window between requests results in undefined behavior. Zero (or empty) value with custom_compute_idempotency_window=true specifies no idempotency (i.e. no request ID is provided to Arcus). Maximum value of 14 days (enforced by Arcus limit). For more information on how to use, see: go/revisit-sn-idempotency-window

        :param compute_idempotency_window: The compute_idempotency_window of this AddSubnetworkRequest.
        :type compute_idempotency_window: str
        """

        self._compute_idempotency_window = compute_idempotency_window

    @property
    def consumer(self):
        """Gets the consumer of this AddSubnetworkRequest.

        Required. A resource that represents the service consumer, such as `projects/123456`. The project number can be different from the value in the consumer network parameter. For example, the network might be part of a Shared VPC network. In those cases, Service Networking validates that this resource belongs to that Shared VPC.

        :return: The consumer of this AddSubnetworkRequest.
        :rtype: str
        """
        return self._consumer

    @consumer.setter
    def consumer(self, consumer):
        """Sets the consumer of this AddSubnetworkRequest.

        Required. A resource that represents the service consumer, such as `projects/123456`. The project number can be different from the value in the consumer network parameter. For example, the network might be part of a Shared VPC network. In those cases, Service Networking validates that this resource belongs to that Shared VPC.

        :param consumer: The consumer of this AddSubnetworkRequest.
        :type consumer: str
        """

        self._consumer = consumer

    @property
    def consumer_network(self):
        """Gets the consumer_network of this AddSubnetworkRequest.

        Required. The name of the service consumer's VPC network. The network must have an existing private connection that was provisioned through the connections.create method. The name must be in the following format: `projects/{project}/global/networks/{network}`, where {project} is a project number, such as `12345`. {network} is the name of a VPC network in the project.

        :return: The consumer_network of this AddSubnetworkRequest.
        :rtype: str
        """
        return self._consumer_network

    @consumer_network.setter
    def consumer_network(self, consumer_network):
        """Sets the consumer_network of this AddSubnetworkRequest.

        Required. The name of the service consumer's VPC network. The network must have an existing private connection that was provisioned through the connections.create method. The name must be in the following format: `projects/{project}/global/networks/{network}`, where {project} is a project number, such as `12345`. {network} is the name of a VPC network in the project.

        :param consumer_network: The consumer_network of this AddSubnetworkRequest.
        :type consumer_network: str
        """

        self._consumer_network = consumer_network

    @property
    def description(self):
        """Gets the description of this AddSubnetworkRequest.

        Optional. Description of the subnet.

        :return: The description of this AddSubnetworkRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AddSubnetworkRequest.

        Optional. Description of the subnet.

        :param description: The description of this AddSubnetworkRequest.
        :type description: str
        """

        self._description = description

    @property
    def internal_range(self):
        """Gets the internal_range of this AddSubnetworkRequest.

        Optional. The url of an Internal Range. Eg: `projects//locations/global/internalRanges/`. If specified, it means that the subnetwork cidr will be created using the combination of requested_address/ip_prefix_length. Note that the subnet cidr has to be within the cidr range of this Internal Range.

        :return: The internal_range of this AddSubnetworkRequest.
        :rtype: str
        """
        return self._internal_range

    @internal_range.setter
    def internal_range(self, internal_range):
        """Sets the internal_range of this AddSubnetworkRequest.

        Optional. The url of an Internal Range. Eg: `projects//locations/global/internalRanges/`. If specified, it means that the subnetwork cidr will be created using the combination of requested_address/ip_prefix_length. Note that the subnet cidr has to be within the cidr range of this Internal Range.

        :param internal_range: The internal_range of this AddSubnetworkRequest.
        :type internal_range: str
        """

        self._internal_range = internal_range

    @property
    def ip_prefix_length(self):
        """Gets the ip_prefix_length of this AddSubnetworkRequest.

        Required. The prefix length of the subnet's IP address range. Use CIDR range notation, such as `29` to provision a subnet with an `x.x.x.x/29` CIDR range. The IP address range is drawn from a pool of available ranges in the service consumer's allocated range. GCE disallows subnets with prefix_length > 29

        :return: The ip_prefix_length of this AddSubnetworkRequest.
        :rtype: int
        """
        return self._ip_prefix_length

    @ip_prefix_length.setter
    def ip_prefix_length(self, ip_prefix_length):
        """Sets the ip_prefix_length of this AddSubnetworkRequest.

        Required. The prefix length of the subnet's IP address range. Use CIDR range notation, such as `29` to provision a subnet with an `x.x.x.x/29` CIDR range. The IP address range is drawn from a pool of available ranges in the service consumer's allocated range. GCE disallows subnets with prefix_length > 29

        :param ip_prefix_length: The ip_prefix_length of this AddSubnetworkRequest.
        :type ip_prefix_length: int
        """

        self._ip_prefix_length = ip_prefix_length

    @property
    def outside_allocation_public_ip_range(self):
        """Gets the outside_allocation_public_ip_range of this AddSubnetworkRequest.

        Optional. Enable outside allocation using public IP addresses. Any public IP range may be specified. If this field is provided, we will not use customer reserved ranges for this primary IP range.

        :return: The outside_allocation_public_ip_range of this AddSubnetworkRequest.
        :rtype: str
        """
        return self._outside_allocation_public_ip_range

    @outside_allocation_public_ip_range.setter
    def outside_allocation_public_ip_range(self, outside_allocation_public_ip_range):
        """Sets the outside_allocation_public_ip_range of this AddSubnetworkRequest.

        Optional. Enable outside allocation using public IP addresses. Any public IP range may be specified. If this field is provided, we will not use customer reserved ranges for this primary IP range.

        :param outside_allocation_public_ip_range: The outside_allocation_public_ip_range of this AddSubnetworkRequest.
        :type outside_allocation_public_ip_range: str
        """

        self._outside_allocation_public_ip_range = outside_allocation_public_ip_range

    @property
    def private_ipv6_google_access(self):
        """Gets the private_ipv6_google_access of this AddSubnetworkRequest.

        Optional. The private IPv6 google access type for the VMs in this subnet. For information about the access types that can be set using this field, see [subnetwork](https://cloud.google.com/compute/docs/reference/rest/v1/subnetworks) in the Compute API documentation.

        :return: The private_ipv6_google_access of this AddSubnetworkRequest.
        :rtype: str
        """
        return self._private_ipv6_google_access

    @private_ipv6_google_access.setter
    def private_ipv6_google_access(self, private_ipv6_google_access):
        """Sets the private_ipv6_google_access of this AddSubnetworkRequest.

        Optional. The private IPv6 google access type for the VMs in this subnet. For information about the access types that can be set using this field, see [subnetwork](https://cloud.google.com/compute/docs/reference/rest/v1/subnetworks) in the Compute API documentation.

        :param private_ipv6_google_access: The private_ipv6_google_access of this AddSubnetworkRequest.
        :type private_ipv6_google_access: str
        """

        self._private_ipv6_google_access = private_ipv6_google_access

    @property
    def purpose(self):
        """Gets the purpose of this AddSubnetworkRequest.

        Optional. Defines the purpose field of the subnet, e.g. 'PRIVATE_SERVICE_CONNECT'. For information about the purposes that can be set using this field, see [subnetwork](https://cloud.google.com/compute/docs/reference/rest/v1/subnetworks) in the Compute API documentation.

        :return: The purpose of this AddSubnetworkRequest.
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this AddSubnetworkRequest.

        Optional. Defines the purpose field of the subnet, e.g. 'PRIVATE_SERVICE_CONNECT'. For information about the purposes that can be set using this field, see [subnetwork](https://cloud.google.com/compute/docs/reference/rest/v1/subnetworks) in the Compute API documentation.

        :param purpose: The purpose of this AddSubnetworkRequest.
        :type purpose: str
        """

        self._purpose = purpose

    @property
    def region(self):
        """Gets the region of this AddSubnetworkRequest.

        Required. The name of a [region](/compute/docs/regions-zones) for the subnet, such `europe-west1`.

        :return: The region of this AddSubnetworkRequest.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this AddSubnetworkRequest.

        Required. The name of a [region](/compute/docs/regions-zones) for the subnet, such `europe-west1`.

        :param region: The region of this AddSubnetworkRequest.
        :type region: str
        """

        self._region = region

    @property
    def requested_address(self):
        """Gets the requested_address of this AddSubnetworkRequest.

        Optional. The starting address of a range. The address must be a valid IPv4 address in the x.x.x.x format. This value combined with the IP prefix range is the CIDR range for the subnet. The range must be within the allocated range that is assigned to the private connection. If the CIDR range isn't available, the call fails.

        :return: The requested_address of this AddSubnetworkRequest.
        :rtype: str
        """
        return self._requested_address

    @requested_address.setter
    def requested_address(self, requested_address):
        """Sets the requested_address of this AddSubnetworkRequest.

        Optional. The starting address of a range. The address must be a valid IPv4 address in the x.x.x.x format. This value combined with the IP prefix range is the CIDR range for the subnet. The range must be within the allocated range that is assigned to the private connection. If the CIDR range isn't available, the call fails.

        :param requested_address: The requested_address of this AddSubnetworkRequest.
        :type requested_address: str
        """

        self._requested_address = requested_address

    @property
    def requested_ranges(self):
        """Gets the requested_ranges of this AddSubnetworkRequest.

        Optional. The name of one or more allocated IP address ranges associated with this private service access connection. If no range names are provided all ranges associated with this connection will be considered. If a CIDR range with the specified IP prefix length is not available within these ranges, the call fails.

        :return: The requested_ranges of this AddSubnetworkRequest.
        :rtype: List[str]
        """
        return self._requested_ranges

    @requested_ranges.setter
    def requested_ranges(self, requested_ranges):
        """Sets the requested_ranges of this AddSubnetworkRequest.

        Optional. The name of one or more allocated IP address ranges associated with this private service access connection. If no range names are provided all ranges associated with this connection will be considered. If a CIDR range with the specified IP prefix length is not available within these ranges, the call fails.

        :param requested_ranges: The requested_ranges of this AddSubnetworkRequest.
        :type requested_ranges: List[str]
        """

        self._requested_ranges = requested_ranges

    @property
    def role(self):
        """Gets the role of this AddSubnetworkRequest.

        Optional. Defines the role field of the subnet, e.g. 'ACTIVE'. For information about the roles that can be set using this field, see [subnetwork](https://cloud.google.com/compute/docs/reference/rest/v1/subnetworks) in the Compute API documentation.

        :return: The role of this AddSubnetworkRequest.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this AddSubnetworkRequest.

        Optional. Defines the role field of the subnet, e.g. 'ACTIVE'. For information about the roles that can be set using this field, see [subnetwork](https://cloud.google.com/compute/docs/reference/rest/v1/subnetworks) in the Compute API documentation.

        :param role: The role of this AddSubnetworkRequest.
        :type role: str
        """

        self._role = role

    @property
    def secondary_ip_range_specs(self):
        """Gets the secondary_ip_range_specs of this AddSubnetworkRequest.

        Optional. A list of secondary IP ranges to be created within the new subnetwork.

        :return: The secondary_ip_range_specs of this AddSubnetworkRequest.
        :rtype: List[SecondaryIpRangeSpec]
        """
        return self._secondary_ip_range_specs

    @secondary_ip_range_specs.setter
    def secondary_ip_range_specs(self, secondary_ip_range_specs):
        """Sets the secondary_ip_range_specs of this AddSubnetworkRequest.

        Optional. A list of secondary IP ranges to be created within the new subnetwork.

        :param secondary_ip_range_specs: The secondary_ip_range_specs of this AddSubnetworkRequest.
        :type secondary_ip_range_specs: List[SecondaryIpRangeSpec]
        """

        self._secondary_ip_range_specs = secondary_ip_range_specs

    @property
    def subnetwork(self):
        """Gets the subnetwork of this AddSubnetworkRequest.

        Required. A name for the new subnet. For information about the naming requirements, see [subnetwork](/compute/docs/reference/rest/v1/subnetworks) in the Compute API documentation.

        :return: The subnetwork of this AddSubnetworkRequest.
        :rtype: str
        """
        return self._subnetwork

    @subnetwork.setter
    def subnetwork(self, subnetwork):
        """Sets the subnetwork of this AddSubnetworkRequest.

        Required. A name for the new subnet. For information about the naming requirements, see [subnetwork](/compute/docs/reference/rest/v1/subnetworks) in the Compute API documentation.

        :param subnetwork: The subnetwork of this AddSubnetworkRequest.
        :type subnetwork: str
        """

        self._subnetwork = subnetwork

    @property
    def subnetwork_users(self):
        """Gets the subnetwork_users of this AddSubnetworkRequest.

        A list of members that are granted the `roles/servicenetworking.subnetworkAdmin` role on the subnet.

        :return: The subnetwork_users of this AddSubnetworkRequest.
        :rtype: List[str]
        """
        return self._subnetwork_users

    @subnetwork_users.setter
    def subnetwork_users(self, subnetwork_users):
        """Sets the subnetwork_users of this AddSubnetworkRequest.

        A list of members that are granted the `roles/servicenetworking.subnetworkAdmin` role on the subnet.

        :param subnetwork_users: The subnetwork_users of this AddSubnetworkRequest.
        :type subnetwork_users: List[str]
        """

        self._subnetwork_users = subnetwork_users

    @property
    def use_custom_compute_idempotency_window(self):
        """Gets the use_custom_compute_idempotency_window of this AddSubnetworkRequest.

        Optional. Specifies if Service Networking should use a custom time bucket for Arcus idempotency. If false, Service Networking uses a 300 second (5 minute) Arcus idempotency window. If true, Service Networking uses a custom idempotency window provided by the user in field compute_idempotency_window. For more information on how to use, see: go/revisit-sn-idempotency-window

        :return: The use_custom_compute_idempotency_window of this AddSubnetworkRequest.
        :rtype: bool
        """
        return self._use_custom_compute_idempotency_window

    @use_custom_compute_idempotency_window.setter
    def use_custom_compute_idempotency_window(self, use_custom_compute_idempotency_window):
        """Sets the use_custom_compute_idempotency_window of this AddSubnetworkRequest.

        Optional. Specifies if Service Networking should use a custom time bucket for Arcus idempotency. If false, Service Networking uses a 300 second (5 minute) Arcus idempotency window. If true, Service Networking uses a custom idempotency window provided by the user in field compute_idempotency_window. For more information on how to use, see: go/revisit-sn-idempotency-window

        :param use_custom_compute_idempotency_window: The use_custom_compute_idempotency_window of this AddSubnetworkRequest.
        :type use_custom_compute_idempotency_window: bool
        """

        self._use_custom_compute_idempotency_window = use_custom_compute_idempotency_window
