/*
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddDnsRecordSetRequest;
import org.openapitools.client.model.AddDnsZoneRequest;
import org.openapitools.client.model.AddRolesRequest;
import org.openapitools.client.model.AddSubnetworkRequest;
import org.openapitools.client.model.Connection;
import org.openapitools.client.model.DeleteConnectionRequest;
import org.openapitools.client.model.DisableVpcServiceControlsRequest;
import org.openapitools.client.model.DnsRecordSet;
import org.openapitools.client.model.EnableVpcServiceControlsRequest;
import org.openapitools.client.model.GetDnsZoneResponse;
import org.openapitools.client.model.ListConnectionsResponse;
import org.openapitools.client.model.ListDnsRecordSetsResponse;
import org.openapitools.client.model.ListDnsZonesResponse;
import org.openapitools.client.model.ListPeeredDnsDomainsResponse;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.PeeredDnsDomain;
import org.openapitools.client.model.RemoveDnsRecordSetRequest;
import org.openapitools.client.model.RemoveDnsZoneRequest;
import org.openapitools.client.model.SearchRangeRequest;
import org.openapitools.client.model.UpdateConsumerConfigRequest;
import org.openapitools.client.model.UpdateDnsRecordSetRequest;
import org.openapitools.client.model.ValidateConsumerConfigRequest;
import org.openapitools.client.model.ValidateConsumerConfigResponse;
import org.openapitools.client.model.VpcServiceControls;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ServicesApi
 */
@Disabled
public class ServicesApiTest {

    private final ServicesApi api = new ServicesApi();

    /**
     * For service producers, provisions a new subnet in a peered service&#39;s shared VPC network in the requested region and with the requested size that&#39;s expressed as a CIDR range (number of leading bits of ipV4 network mask). The method checks against the assigned allocated ranges to find a non-conflicting IP address range. The method will reuse a subnet if subsequent calls contain the same subnet name, region, and prefix length. This method will make producer&#39;s tenant project to be a shared VPC service project as needed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicenetworkingServicesAddSubnetworkTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AddSubnetworkRequest addSubnetworkRequest = null;
        Operation response = api.servicenetworkingServicesAddSubnetwork(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, addSubnetworkRequest);
        // TODO: test validations
    }

    /**
     * Creates a private connection that establishes a VPC Network Peering connection to a VPC network in the service producer&#39;s organization. The administrator of the service consumer&#39;s VPC network invokes this method. The administrator must assign one or more allocated IP ranges for provisioning subnetworks in the service producer&#39;s VPC network. This connection is used for all supported services in the service producer&#39;s organization, so it only needs to be invoked once.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicenetworkingServicesConnectionsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Connection connection = null;
        Operation response = api.servicenetworkingServicesConnectionsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, connection);
        // TODO: test validations
    }

    /**
     * Deletes a private service access connection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicenetworkingServicesConnectionsDeleteConnectionTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        DeleteConnectionRequest deleteConnectionRequest = null;
        Operation response = api.servicenetworkingServicesConnectionsDeleteConnection(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, deleteConnectionRequest);
        // TODO: test validations
    }

    /**
     * List the private connections that are configured in a service consumer&#39;s VPC network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicenetworkingServicesConnectionsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String network = null;
        ListConnectionsResponse response = api.servicenetworkingServicesConnectionsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, network);
        // TODO: test validations
    }

    /**
     * Updates the allocated ranges that are assigned to a connection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicenetworkingServicesConnectionsPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean force = null;
        String updateMask = null;
        Connection connection = null;
        Operation response = api.servicenetworkingServicesConnectionsPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, force, updateMask, connection);
        // TODO: test validations
    }

    /**
     * Disables VPC service controls for a connection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicenetworkingServicesDisableVpcServiceControlsTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        DisableVpcServiceControlsRequest disableVpcServiceControlsRequest = null;
        Operation response = api.servicenetworkingServicesDisableVpcServiceControls(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, disableVpcServiceControlsRequest);
        // TODO: test validations
    }

    /**
     * Service producers can use this method to add DNS record sets to private DNS zones in the shared producer host project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicenetworkingServicesDnsRecordSetsAddTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AddDnsRecordSetRequest addDnsRecordSetRequest = null;
        Operation response = api.servicenetworkingServicesDnsRecordSetsAdd(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, addDnsRecordSetRequest);
        // TODO: test validations
    }

    /**
     * Producers can use this method to retrieve information about the DNS record set added to the private zone inside the shared tenant host project associated with a consumer network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicenetworkingServicesDnsRecordSetsGetTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String consumerNetwork = null;
        String domain = null;
        String type = null;
        String zone = null;
        DnsRecordSet response = api.servicenetworkingServicesDnsRecordSetsGet(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, consumerNetwork, domain, type, zone);
        // TODO: test validations
    }

    /**
     * Producers can use this method to retrieve a list of available DNS RecordSets available inside the private zone on the tenant host project accessible from their network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicenetworkingServicesDnsRecordSetsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String consumerNetwork = null;
        String zone = null;
        ListDnsRecordSetsResponse response = api.servicenetworkingServicesDnsRecordSetsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, consumerNetwork, zone);
        // TODO: test validations
    }

    /**
     * Service producers can use this method to remove DNS record sets from private DNS zones in the shared producer host project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicenetworkingServicesDnsRecordSetsRemoveTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RemoveDnsRecordSetRequest removeDnsRecordSetRequest = null;
        Operation response = api.servicenetworkingServicesDnsRecordSetsRemove(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, removeDnsRecordSetRequest);
        // TODO: test validations
    }

    /**
     * Service producers can use this method to update DNS record sets from private DNS zones in the shared producer host project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicenetworkingServicesDnsRecordSetsUpdateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        UpdateDnsRecordSetRequest updateDnsRecordSetRequest = null;
        Operation response = api.servicenetworkingServicesDnsRecordSetsUpdate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateDnsRecordSetRequest);
        // TODO: test validations
    }

    /**
     * Service producers can use this method to add private DNS zones in the shared producer host project and matching peering zones in the consumer project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicenetworkingServicesDnsZonesAddTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AddDnsZoneRequest addDnsZoneRequest = null;
        Operation response = api.servicenetworkingServicesDnsZonesAdd(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, addDnsZoneRequest);
        // TODO: test validations
    }

    /**
     * Service producers can use this method to remove private DNS zones in the shared producer host project and matching peering zones in the consumer project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicenetworkingServicesDnsZonesRemoveTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RemoveDnsZoneRequest removeDnsZoneRequest = null;
        Operation response = api.servicenetworkingServicesDnsZonesRemove(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, removeDnsZoneRequest);
        // TODO: test validations
    }

    /**
     * Enables VPC service controls for a connection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicenetworkingServicesEnableVpcServiceControlsTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        EnableVpcServiceControlsRequest enableVpcServiceControlsRequest = null;
        Operation response = api.servicenetworkingServicesEnableVpcServiceControls(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, enableVpcServiceControlsRequest);
        // TODO: test validations
    }

    /**
     * Service producers can use this method to retrieve a DNS zone in the shared producer host project and the matching peering zones in consumer project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicenetworkingServicesProjectsGlobalNetworksDnsZonesGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean includeUsedIpRanges = null;
        Integer pageSize = null;
        String pageToken = null;
        GetDnsZoneResponse response = api.servicenetworkingServicesProjectsGlobalNetworksDnsZonesGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, includeUsedIpRanges, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * * Service producers can use this method to retrieve a list of available DNS zones in the shared producer host project and the matching peering zones in the consumer project. *
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicenetworkingServicesProjectsGlobalNetworksDnsZonesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ListDnsZonesResponse response = api.servicenetworkingServicesProjectsGlobalNetworksDnsZonesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Consumers use this method to find out the state of VPC Service Controls. The controls could be enabled or disabled for a connection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicenetworkingServicesProjectsGlobalNetworksGetVpcServiceControlsTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        VpcServiceControls response = api.servicenetworkingServicesProjectsGlobalNetworksGetVpcServiceControls(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Creates a peered DNS domain which sends requests for records in given namespace originating in the service producer VPC network to the consumer VPC network to be resolved.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicenetworkingServicesProjectsGlobalNetworksPeeredDnsDomainsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        PeeredDnsDomain peeredDnsDomain = null;
        Operation response = api.servicenetworkingServicesProjectsGlobalNetworksPeeredDnsDomainsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, peeredDnsDomain);
        // TODO: test validations
    }

    /**
     * Deletes a peered DNS domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicenetworkingServicesProjectsGlobalNetworksPeeredDnsDomainsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Operation response = api.servicenetworkingServicesProjectsGlobalNetworksPeeredDnsDomainsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists peered DNS domains for a connection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicenetworkingServicesProjectsGlobalNetworksPeeredDnsDomainsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ListPeeredDnsDomainsResponse response = api.servicenetworkingServicesProjectsGlobalNetworksPeeredDnsDomainsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Service producers use this method to update the configuration of their connection including the import/export of custom routes and subnetwork routes with public IP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicenetworkingServicesProjectsGlobalNetworksUpdateConsumerConfigTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        UpdateConsumerConfigRequest updateConsumerConfigRequest = null;
        Operation response = api.servicenetworkingServicesProjectsGlobalNetworksUpdateConsumerConfig(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateConsumerConfigRequest);
        // TODO: test validations
    }

    /**
     * Service producers can use this method to add roles in the shared VPC host project. Each role is bound to the provided member. Each role must be selected from within an allowlisted set of roles. Each role is applied at only the granularity specified in the allowlist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicenetworkingServicesRolesAddTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AddRolesRequest addRolesRequest = null;
        Operation response = api.servicenetworkingServicesRolesAdd(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, addRolesRequest);
        // TODO: test validations
    }

    /**
     * Service producers can use this method to find a currently unused range within consumer allocated ranges. This returned range is not reserved, and not guaranteed to remain unused. It will validate previously provided allocated ranges, find non-conflicting sub-range of requested size (expressed in number of leading bits of ipv4 network mask, as in CIDR range notation).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicenetworkingServicesSearchRangeTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SearchRangeRequest searchRangeRequest = null;
        Operation response = api.servicenetworkingServicesSearchRange(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, searchRangeRequest);
        // TODO: test validations
    }

    /**
     * Service producers use this method to validate if the consumer provided network, project and requested range are valid. This allows them to use a fail-fast mechanism for consumer requests, and not have to wait for AddSubnetwork operation completion to determine if user request is invalid.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicenetworkingServicesValidateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ValidateConsumerConfigRequest validateConsumerConfigRequest = null;
        ValidateConsumerConfigResponse response = api.servicenetworkingServicesValidate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, validateConsumerConfigRequest);
        // TODO: test validations
    }

}
