/*
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies a location to extract JWT from an API request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:16.869716-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JwtLocation {
  public static final String SERIALIZED_NAME_COOKIE = "cookie";
  @SerializedName(SERIALIZED_NAME_COOKIE)
  private String cookie;

  public static final String SERIALIZED_NAME_HEADER = "header";
  @SerializedName(SERIALIZED_NAME_HEADER)
  private String header;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private String query;

  public static final String SERIALIZED_NAME_VALUE_PREFIX = "valuePrefix";
  @SerializedName(SERIALIZED_NAME_VALUE_PREFIX)
  private String valuePrefix;

  public JwtLocation() {
  }

  public JwtLocation cookie(String cookie) {
    this.cookie = cookie;
    return this;
  }

  /**
   * Specifies cookie name to extract JWT token.
   * @return cookie
   */
  @javax.annotation.Nullable
  public String getCookie() {
    return cookie;
  }

  public void setCookie(String cookie) {
    this.cookie = cookie;
  }


  public JwtLocation header(String header) {
    this.header = header;
    return this;
  }

  /**
   * Specifies HTTP header name to extract JWT token.
   * @return header
   */
  @javax.annotation.Nullable
  public String getHeader() {
    return header;
  }

  public void setHeader(String header) {
    this.header = header;
  }


  public JwtLocation query(String query) {
    this.query = query;
    return this;
  }

  /**
   * Specifies URL query parameter name to extract JWT token.
   * @return query
   */
  @javax.annotation.Nullable
  public String getQuery() {
    return query;
  }

  public void setQuery(String query) {
    this.query = query;
  }


  public JwtLocation valuePrefix(String valuePrefix) {
    this.valuePrefix = valuePrefix;
    return this;
  }

  /**
   * The value prefix. The value format is \&quot;value_prefix{token}\&quot; Only applies to \&quot;in\&quot; header type. Must be empty for \&quot;in\&quot; query type. If not empty, the header value has to match (case sensitive) this prefix. If not matched, JWT will not be extracted. If matched, JWT will be extracted after the prefix is removed. For example, for \&quot;Authorization: Bearer {JWT}\&quot;, value_prefix&#x3D;\&quot;Bearer \&quot; with a space at the end.
   * @return valuePrefix
   */
  @javax.annotation.Nullable
  public String getValuePrefix() {
    return valuePrefix;
  }

  public void setValuePrefix(String valuePrefix) {
    this.valuePrefix = valuePrefix;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JwtLocation jwtLocation = (JwtLocation) o;
    return Objects.equals(this.cookie, jwtLocation.cookie) &&
        Objects.equals(this.header, jwtLocation.header) &&
        Objects.equals(this.query, jwtLocation.query) &&
        Objects.equals(this.valuePrefix, jwtLocation.valuePrefix);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cookie, header, query, valuePrefix);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JwtLocation {\n");
    sb.append("    cookie: ").append(toIndentedString(cookie)).append("\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    valuePrefix: ").append(toIndentedString(valuePrefix)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cookie");
    openapiFields.add("header");
    openapiFields.add("query");
    openapiFields.add("valuePrefix");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JwtLocation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JwtLocation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JwtLocation is not found in the empty JSON string", JwtLocation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JwtLocation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JwtLocation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cookie") != null && !jsonObj.get("cookie").isJsonNull()) && !jsonObj.get("cookie").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cookie` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cookie").toString()));
      }
      if ((jsonObj.get("header") != null && !jsonObj.get("header").isJsonNull()) && !jsonObj.get("header").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `header` to be a primitive type in the JSON string but got `%s`", jsonObj.get("header").toString()));
      }
      if ((jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull()) && !jsonObj.get("query").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query").toString()));
      }
      if ((jsonObj.get("valuePrefix") != null && !jsonObj.get("valuePrefix").isJsonNull()) && !jsonObj.get("valuePrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `valuePrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("valuePrefix").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JwtLocation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JwtLocation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JwtLocation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JwtLocation.class));

       return (TypeAdapter<T>) new TypeAdapter<JwtLocation>() {
           @Override
           public void write(JsonWriter out, JwtLocation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JwtLocation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JwtLocation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JwtLocation
   * @throws IOException if the JSON string is invalid with respect to JwtLocation
   */
  public static JwtLocation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JwtLocation.class);
  }

  /**
   * Convert an instance of JwtLocation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

