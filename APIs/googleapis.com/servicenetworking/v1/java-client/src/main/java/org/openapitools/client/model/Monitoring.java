/*
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MonitoringDestination;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Monitoring configuration of the service. The example below shows how to configure monitored resources and metrics for monitoring. In the example, a monitored resource and two metrics are defined. The &#x60;library.googleapis.com/book/returned_count&#x60; metric is sent to both producer and consumer projects, whereas the &#x60;library.googleapis.com/book/num_overdue&#x60; metric is only sent to the consumer project. monitored_resources: - type: library.googleapis.com/Branch display_name: \&quot;Library Branch\&quot; description: \&quot;A branch of a library.\&quot; launch_stage: GA labels: - key: resource_container description: \&quot;The Cloud container (ie. project id) for the Branch.\&quot; - key: location description: \&quot;The location of the library branch.\&quot; - key: branch_id description: \&quot;The id of the branch.\&quot; metrics: - name: library.googleapis.com/book/returned_count display_name: \&quot;Books Returned\&quot; description: \&quot;The count of books that have been returned.\&quot; launch_stage: GA metric_kind: DELTA value_type: INT64 unit: \&quot;1\&quot; labels: - key: customer_id description: \&quot;The id of the customer.\&quot; - name: library.googleapis.com/book/num_overdue display_name: \&quot;Books Overdue\&quot; description: \&quot;The current number of overdue books.\&quot; launch_stage: GA metric_kind: GAUGE value_type: INT64 unit: \&quot;1\&quot; labels: - key: customer_id description: \&quot;The id of the customer.\&quot; monitoring: producer_destinations: - monitored_resource: library.googleapis.com/Branch metrics: - library.googleapis.com/book/returned_count consumer_destinations: - monitored_resource: library.googleapis.com/Branch metrics: - library.googleapis.com/book/returned_count - library.googleapis.com/book/num_overdue
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:16.869716-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Monitoring {
  public static final String SERIALIZED_NAME_CONSUMER_DESTINATIONS = "consumerDestinations";
  @SerializedName(SERIALIZED_NAME_CONSUMER_DESTINATIONS)
  private List<MonitoringDestination> consumerDestinations = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRODUCER_DESTINATIONS = "producerDestinations";
  @SerializedName(SERIALIZED_NAME_PRODUCER_DESTINATIONS)
  private List<MonitoringDestination> producerDestinations = new ArrayList<>();

  public Monitoring() {
  }

  public Monitoring consumerDestinations(List<MonitoringDestination> consumerDestinations) {
    this.consumerDestinations = consumerDestinations;
    return this;
  }

  public Monitoring addConsumerDestinationsItem(MonitoringDestination consumerDestinationsItem) {
    if (this.consumerDestinations == null) {
      this.consumerDestinations = new ArrayList<>();
    }
    this.consumerDestinations.add(consumerDestinationsItem);
    return this;
  }

  /**
   * Monitoring configurations for sending metrics to the consumer project. There can be multiple consumer destinations. A monitored resource type may appear in multiple monitoring destinations if different aggregations are needed for different sets of metrics associated with that monitored resource type. A monitored resource and metric pair may only be used once in the Monitoring configuration.
   * @return consumerDestinations
   */
  @javax.annotation.Nullable
  public List<MonitoringDestination> getConsumerDestinations() {
    return consumerDestinations;
  }

  public void setConsumerDestinations(List<MonitoringDestination> consumerDestinations) {
    this.consumerDestinations = consumerDestinations;
  }


  public Monitoring producerDestinations(List<MonitoringDestination> producerDestinations) {
    this.producerDestinations = producerDestinations;
    return this;
  }

  public Monitoring addProducerDestinationsItem(MonitoringDestination producerDestinationsItem) {
    if (this.producerDestinations == null) {
      this.producerDestinations = new ArrayList<>();
    }
    this.producerDestinations.add(producerDestinationsItem);
    return this;
  }

  /**
   * Monitoring configurations for sending metrics to the producer project. There can be multiple producer destinations. A monitored resource type may appear in multiple monitoring destinations if different aggregations are needed for different sets of metrics associated with that monitored resource type. A monitored resource and metric pair may only be used once in the Monitoring configuration.
   * @return producerDestinations
   */
  @javax.annotation.Nullable
  public List<MonitoringDestination> getProducerDestinations() {
    return producerDestinations;
  }

  public void setProducerDestinations(List<MonitoringDestination> producerDestinations) {
    this.producerDestinations = producerDestinations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Monitoring monitoring = (Monitoring) o;
    return Objects.equals(this.consumerDestinations, monitoring.consumerDestinations) &&
        Objects.equals(this.producerDestinations, monitoring.producerDestinations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(consumerDestinations, producerDestinations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Monitoring {\n");
    sb.append("    consumerDestinations: ").append(toIndentedString(consumerDestinations)).append("\n");
    sb.append("    producerDestinations: ").append(toIndentedString(producerDestinations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("consumerDestinations");
    openapiFields.add("producerDestinations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Monitoring
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Monitoring.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Monitoring is not found in the empty JSON string", Monitoring.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Monitoring.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Monitoring` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("consumerDestinations") != null && !jsonObj.get("consumerDestinations").isJsonNull()) {
        JsonArray jsonArrayconsumerDestinations = jsonObj.getAsJsonArray("consumerDestinations");
        if (jsonArrayconsumerDestinations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("consumerDestinations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `consumerDestinations` to be an array in the JSON string but got `%s`", jsonObj.get("consumerDestinations").toString()));
          }

          // validate the optional field `consumerDestinations` (array)
          for (int i = 0; i < jsonArrayconsumerDestinations.size(); i++) {
            MonitoringDestination.validateJsonElement(jsonArrayconsumerDestinations.get(i));
          };
        }
      }
      if (jsonObj.get("producerDestinations") != null && !jsonObj.get("producerDestinations").isJsonNull()) {
        JsonArray jsonArrayproducerDestinations = jsonObj.getAsJsonArray("producerDestinations");
        if (jsonArrayproducerDestinations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("producerDestinations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `producerDestinations` to be an array in the JSON string but got `%s`", jsonObj.get("producerDestinations").toString()));
          }

          // validate the optional field `producerDestinations` (array)
          for (int i = 0; i < jsonArrayproducerDestinations.size(); i++) {
            MonitoringDestination.validateJsonElement(jsonArrayproducerDestinations.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Monitoring.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Monitoring' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Monitoring> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Monitoring.class));

       return (TypeAdapter<T>) new TypeAdapter<Monitoring>() {
           @Override
           public void write(JsonWriter out, Monitoring value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Monitoring read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Monitoring given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Monitoring
   * @throws IOException if the JSON string is invalid with respect to Monitoring
   */
  public static Monitoring fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Monitoring.class);
  }

  /**
   * Convert an instance of Monitoring to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

