/*
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Subnetwork;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a range reservation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:16.869716-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RangeReservation {
  public static final String SERIALIZED_NAME_IP_PREFIX_LENGTH = "ipPrefixLength";
  @SerializedName(SERIALIZED_NAME_IP_PREFIX_LENGTH)
  private Integer ipPrefixLength;

  public static final String SERIALIZED_NAME_REQUESTED_RANGES = "requestedRanges";
  @SerializedName(SERIALIZED_NAME_REQUESTED_RANGES)
  private List<String> requestedRanges = new ArrayList<>();

  public static final String SERIALIZED_NAME_SECONDARY_RANGE_IP_PREFIX_LENGTHS = "secondaryRangeIpPrefixLengths";
  @SerializedName(SERIALIZED_NAME_SECONDARY_RANGE_IP_PREFIX_LENGTHS)
  private List<Integer> secondaryRangeIpPrefixLengths = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBNETWORK_CANDIDATES = "subnetworkCandidates";
  @SerializedName(SERIALIZED_NAME_SUBNETWORK_CANDIDATES)
  private List<Subnetwork> subnetworkCandidates = new ArrayList<>();

  public RangeReservation() {
  }

  public RangeReservation ipPrefixLength(Integer ipPrefixLength) {
    this.ipPrefixLength = ipPrefixLength;
    return this;
  }

  /**
   * Required. The size of the desired subnet. Use usual CIDR range notation. For example, &#39;29&#39; to find unused x.x.x.x/29 CIDR range. The goal is to determine if one of the allocated ranges has enough free space for a subnet of the requested size. GCE disallows subnets with prefix_length &gt; 29
   * @return ipPrefixLength
   */
  @javax.annotation.Nullable
  public Integer getIpPrefixLength() {
    return ipPrefixLength;
  }

  public void setIpPrefixLength(Integer ipPrefixLength) {
    this.ipPrefixLength = ipPrefixLength;
  }


  public RangeReservation requestedRanges(List<String> requestedRanges) {
    this.requestedRanges = requestedRanges;
    return this;
  }

  public RangeReservation addRequestedRangesItem(String requestedRangesItem) {
    if (this.requestedRanges == null) {
      this.requestedRanges = new ArrayList<>();
    }
    this.requestedRanges.add(requestedRangesItem);
    return this;
  }

  /**
   * Optional. The name of one or more allocated IP address ranges associated with this private service access connection. If no range names are provided all ranges associated with this connection will be considered. If a CIDR range with the specified IP prefix length is not available within these ranges the validation fails.
   * @return requestedRanges
   */
  @javax.annotation.Nullable
  public List<String> getRequestedRanges() {
    return requestedRanges;
  }

  public void setRequestedRanges(List<String> requestedRanges) {
    this.requestedRanges = requestedRanges;
  }


  public RangeReservation secondaryRangeIpPrefixLengths(List<Integer> secondaryRangeIpPrefixLengths) {
    this.secondaryRangeIpPrefixLengths = secondaryRangeIpPrefixLengths;
    return this;
  }

  public RangeReservation addSecondaryRangeIpPrefixLengthsItem(Integer secondaryRangeIpPrefixLengthsItem) {
    if (this.secondaryRangeIpPrefixLengths == null) {
      this.secondaryRangeIpPrefixLengths = new ArrayList<>();
    }
    this.secondaryRangeIpPrefixLengths.add(secondaryRangeIpPrefixLengthsItem);
    return this;
  }

  /**
   * Optional. The size of the desired secondary ranges for the subnet. Use usual CIDR range notation. For example, &#39;29&#39; to find unused x.x.x.x/29 CIDR range. The goal is to determine that the allocated ranges have enough free space for all the requested secondary ranges. GCE disallows subnets with prefix_length &gt; 29
   * @return secondaryRangeIpPrefixLengths
   */
  @javax.annotation.Nullable
  public List<Integer> getSecondaryRangeIpPrefixLengths() {
    return secondaryRangeIpPrefixLengths;
  }

  public void setSecondaryRangeIpPrefixLengths(List<Integer> secondaryRangeIpPrefixLengths) {
    this.secondaryRangeIpPrefixLengths = secondaryRangeIpPrefixLengths;
  }


  public RangeReservation subnetworkCandidates(List<Subnetwork> subnetworkCandidates) {
    this.subnetworkCandidates = subnetworkCandidates;
    return this;
  }

  public RangeReservation addSubnetworkCandidatesItem(Subnetwork subnetworkCandidatesItem) {
    if (this.subnetworkCandidates == null) {
      this.subnetworkCandidates = new ArrayList<>();
    }
    this.subnetworkCandidates.add(subnetworkCandidatesItem);
    return this;
  }

  /**
   * Optional. List of subnetwork candidates to validate. The required input fields are &#x60;name&#x60;, &#x60;network&#x60;, and &#x60;region&#x60;. Subnetworks from this list which exist will be returned in the response with the &#x60;ip_cidr_range&#x60;, &#x60;secondary_ip_cider_ranges&#x60;, and &#x60;outside_allocation&#x60; fields set.
   * @return subnetworkCandidates
   */
  @javax.annotation.Nullable
  public List<Subnetwork> getSubnetworkCandidates() {
    return subnetworkCandidates;
  }

  public void setSubnetworkCandidates(List<Subnetwork> subnetworkCandidates) {
    this.subnetworkCandidates = subnetworkCandidates;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RangeReservation rangeReservation = (RangeReservation) o;
    return Objects.equals(this.ipPrefixLength, rangeReservation.ipPrefixLength) &&
        Objects.equals(this.requestedRanges, rangeReservation.requestedRanges) &&
        Objects.equals(this.secondaryRangeIpPrefixLengths, rangeReservation.secondaryRangeIpPrefixLengths) &&
        Objects.equals(this.subnetworkCandidates, rangeReservation.subnetworkCandidates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ipPrefixLength, requestedRanges, secondaryRangeIpPrefixLengths, subnetworkCandidates);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RangeReservation {\n");
    sb.append("    ipPrefixLength: ").append(toIndentedString(ipPrefixLength)).append("\n");
    sb.append("    requestedRanges: ").append(toIndentedString(requestedRanges)).append("\n");
    sb.append("    secondaryRangeIpPrefixLengths: ").append(toIndentedString(secondaryRangeIpPrefixLengths)).append("\n");
    sb.append("    subnetworkCandidates: ").append(toIndentedString(subnetworkCandidates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ipPrefixLength");
    openapiFields.add("requestedRanges");
    openapiFields.add("secondaryRangeIpPrefixLengths");
    openapiFields.add("subnetworkCandidates");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RangeReservation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RangeReservation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RangeReservation is not found in the empty JSON string", RangeReservation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RangeReservation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RangeReservation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("requestedRanges") != null && !jsonObj.get("requestedRanges").isJsonNull() && !jsonObj.get("requestedRanges").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestedRanges` to be an array in the JSON string but got `%s`", jsonObj.get("requestedRanges").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("secondaryRangeIpPrefixLengths") != null && !jsonObj.get("secondaryRangeIpPrefixLengths").isJsonNull() && !jsonObj.get("secondaryRangeIpPrefixLengths").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondaryRangeIpPrefixLengths` to be an array in the JSON string but got `%s`", jsonObj.get("secondaryRangeIpPrefixLengths").toString()));
      }
      if (jsonObj.get("subnetworkCandidates") != null && !jsonObj.get("subnetworkCandidates").isJsonNull()) {
        JsonArray jsonArraysubnetworkCandidates = jsonObj.getAsJsonArray("subnetworkCandidates");
        if (jsonArraysubnetworkCandidates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("subnetworkCandidates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `subnetworkCandidates` to be an array in the JSON string but got `%s`", jsonObj.get("subnetworkCandidates").toString()));
          }

          // validate the optional field `subnetworkCandidates` (array)
          for (int i = 0; i < jsonArraysubnetworkCandidates.size(); i++) {
            Subnetwork.validateJsonElement(jsonArraysubnetworkCandidates.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RangeReservation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RangeReservation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RangeReservation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RangeReservation.class));

       return (TypeAdapter<T>) new TypeAdapter<RangeReservation>() {
           @Override
           public void write(JsonWriter out, RangeReservation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RangeReservation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RangeReservation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RangeReservation
   * @throws IOException if the JSON string is invalid with respect to RangeReservation
   */
  public static RangeReservation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RangeReservation.class);
  }

  /**
   * Convert an instance of RangeReservation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

