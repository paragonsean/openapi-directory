/*
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Subnetwork;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ValidateConsumerConfigResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:16.869716-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ValidateConsumerConfigResponse {
  public static final String SERIALIZED_NAME_EXISTING_SUBNETWORK_CANDIDATES = "existingSubnetworkCandidates";
  @SerializedName(SERIALIZED_NAME_EXISTING_SUBNETWORK_CANDIDATES)
  private List<Subnetwork> existingSubnetworkCandidates = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_VALID = "isValid";
  @SerializedName(SERIALIZED_NAME_IS_VALID)
  private Boolean isValid;

  /**
   * The first validation which failed.
   */
  @JsonAdapter(ValidationErrorEnum.Adapter.class)
  public enum ValidationErrorEnum {
    VALIDATION_ERROR_UNSPECIFIED("VALIDATION_ERROR_UNSPECIFIED"),
    
    VALIDATION_NOT_REQUESTED("VALIDATION_NOT_REQUESTED"),
    
    SERVICE_NETWORKING_NOT_ENABLED("SERVICE_NETWORKING_NOT_ENABLED"),
    
    NETWORK_NOT_FOUND("NETWORK_NOT_FOUND"),
    
    NETWORK_NOT_PEERED("NETWORK_NOT_PEERED"),
    
    NETWORK_PEERING_DELETED("NETWORK_PEERING_DELETED"),
    
    NETWORK_NOT_IN_CONSUMERS_PROJECT("NETWORK_NOT_IN_CONSUMERS_PROJECT"),
    
    NETWORK_NOT_IN_CONSUMERS_HOST_PROJECT("NETWORK_NOT_IN_CONSUMERS_HOST_PROJECT"),
    
    HOST_PROJECT_NOT_FOUND("HOST_PROJECT_NOT_FOUND"),
    
    CONSUMER_PROJECT_NOT_SERVICE_PROJECT("CONSUMER_PROJECT_NOT_SERVICE_PROJECT"),
    
    RANGES_EXHAUSTED("RANGES_EXHAUSTED"),
    
    RANGES_NOT_RESERVED("RANGES_NOT_RESERVED"),
    
    RANGES_DELETED_LATER("RANGES_DELETED_LATER"),
    
    COMPUTE_API_NOT_ENABLED("COMPUTE_API_NOT_ENABLED"),
    
    USE_PERMISSION_NOT_FOUND("USE_PERMISSION_NOT_FOUND");

    private String value;

    ValidationErrorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ValidationErrorEnum fromValue(String value) {
      for (ValidationErrorEnum b : ValidationErrorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ValidationErrorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ValidationErrorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ValidationErrorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ValidationErrorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ValidationErrorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VALIDATION_ERROR = "validationError";
  @SerializedName(SERIALIZED_NAME_VALIDATION_ERROR)
  private ValidationErrorEnum validationError;

  public ValidateConsumerConfigResponse() {
  }

  public ValidateConsumerConfigResponse existingSubnetworkCandidates(List<Subnetwork> existingSubnetworkCandidates) {
    this.existingSubnetworkCandidates = existingSubnetworkCandidates;
    return this;
  }

  public ValidateConsumerConfigResponse addExistingSubnetworkCandidatesItem(Subnetwork existingSubnetworkCandidatesItem) {
    if (this.existingSubnetworkCandidates == null) {
      this.existingSubnetworkCandidates = new ArrayList<>();
    }
    this.existingSubnetworkCandidates.add(existingSubnetworkCandidatesItem);
    return this;
  }

  /**
   * List of subnetwork candidates from the request which exist with the &#x60;ip_cidr_range&#x60;, &#x60;secondary_ip_cider_ranges&#x60;, and &#x60;outside_allocation&#x60; fields set.
   * @return existingSubnetworkCandidates
   */
  @javax.annotation.Nullable
  public List<Subnetwork> getExistingSubnetworkCandidates() {
    return existingSubnetworkCandidates;
  }

  public void setExistingSubnetworkCandidates(List<Subnetwork> existingSubnetworkCandidates) {
    this.existingSubnetworkCandidates = existingSubnetworkCandidates;
  }


  public ValidateConsumerConfigResponse isValid(Boolean isValid) {
    this.isValid = isValid;
    return this;
  }

  /**
   * Indicates whether all the requested validations passed.
   * @return isValid
   */
  @javax.annotation.Nullable
  public Boolean getIsValid() {
    return isValid;
  }

  public void setIsValid(Boolean isValid) {
    this.isValid = isValid;
  }


  public ValidateConsumerConfigResponse validationError(ValidationErrorEnum validationError) {
    this.validationError = validationError;
    return this;
  }

  /**
   * The first validation which failed.
   * @return validationError
   */
  @javax.annotation.Nullable
  public ValidationErrorEnum getValidationError() {
    return validationError;
  }

  public void setValidationError(ValidationErrorEnum validationError) {
    this.validationError = validationError;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ValidateConsumerConfigResponse validateConsumerConfigResponse = (ValidateConsumerConfigResponse) o;
    return Objects.equals(this.existingSubnetworkCandidates, validateConsumerConfigResponse.existingSubnetworkCandidates) &&
        Objects.equals(this.isValid, validateConsumerConfigResponse.isValid) &&
        Objects.equals(this.validationError, validateConsumerConfigResponse.validationError);
  }

  @Override
  public int hashCode() {
    return Objects.hash(existingSubnetworkCandidates, isValid, validationError);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ValidateConsumerConfigResponse {\n");
    sb.append("    existingSubnetworkCandidates: ").append(toIndentedString(existingSubnetworkCandidates)).append("\n");
    sb.append("    isValid: ").append(toIndentedString(isValid)).append("\n");
    sb.append("    validationError: ").append(toIndentedString(validationError)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("existingSubnetworkCandidates");
    openapiFields.add("isValid");
    openapiFields.add("validationError");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ValidateConsumerConfigResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ValidateConsumerConfigResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ValidateConsumerConfigResponse is not found in the empty JSON string", ValidateConsumerConfigResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ValidateConsumerConfigResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ValidateConsumerConfigResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("existingSubnetworkCandidates") != null && !jsonObj.get("existingSubnetworkCandidates").isJsonNull()) {
        JsonArray jsonArrayexistingSubnetworkCandidates = jsonObj.getAsJsonArray("existingSubnetworkCandidates");
        if (jsonArrayexistingSubnetworkCandidates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("existingSubnetworkCandidates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `existingSubnetworkCandidates` to be an array in the JSON string but got `%s`", jsonObj.get("existingSubnetworkCandidates").toString()));
          }

          // validate the optional field `existingSubnetworkCandidates` (array)
          for (int i = 0; i < jsonArrayexistingSubnetworkCandidates.size(); i++) {
            Subnetwork.validateJsonElement(jsonArrayexistingSubnetworkCandidates.get(i));
          };
        }
      }
      if ((jsonObj.get("validationError") != null && !jsonObj.get("validationError").isJsonNull()) && !jsonObj.get("validationError").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validationError` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validationError").toString()));
      }
      // validate the optional field `validationError`
      if (jsonObj.get("validationError") != null && !jsonObj.get("validationError").isJsonNull()) {
        ValidationErrorEnum.validateJsonElement(jsonObj.get("validationError"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ValidateConsumerConfigResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ValidateConsumerConfigResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ValidateConsumerConfigResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ValidateConsumerConfigResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ValidateConsumerConfigResponse>() {
           @Override
           public void write(JsonWriter out, ValidateConsumerConfigResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ValidateConsumerConfigResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ValidateConsumerConfigResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ValidateConsumerConfigResponse
   * @throws IOException if the JSON string is invalid with respect to ValidateConsumerConfigResponse
   */
  public static ValidateConsumerConfigResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ValidateConsumerConfigResponse.class);
  }

  /**
   * Convert an instance of ValidateConsumerConfigResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

