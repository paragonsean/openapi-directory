/*
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request to add a private managed DNS zone in the shared producer host project and a matching DNS peering zone in the consumer project.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:16.869716-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AddDnsZoneRequest {
  public static final String SERIALIZED_NAME_CONSUMER_NETWORK = "consumerNetwork";
  @SerializedName(SERIALIZED_NAME_CONSUMER_NETWORK)
  private String consumerNetwork;

  public static final String SERIALIZED_NAME_DNS_SUFFIX = "dnsSuffix";
  @SerializedName(SERIALIZED_NAME_DNS_SUFFIX)
  private String dnsSuffix;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public AddDnsZoneRequest() {
  }

  public AddDnsZoneRequest consumerNetwork(String consumerNetwork) {
    this.consumerNetwork = consumerNetwork;
    return this;
  }

  /**
   * Required. The network that the consumer is using to connect with services. Must be in the form of projects/{project}/global/networks/{network} {project} is the project number, as in &#39;12345&#39; {network} is the network name.
   * @return consumerNetwork
   */
  @javax.annotation.Nullable
  public String getConsumerNetwork() {
    return consumerNetwork;
  }

  public void setConsumerNetwork(String consumerNetwork) {
    this.consumerNetwork = consumerNetwork;
  }


  public AddDnsZoneRequest dnsSuffix(String dnsSuffix) {
    this.dnsSuffix = dnsSuffix;
    return this;
  }

  /**
   * Required. The DNS name suffix for the zones e.g. &#x60;example.com.&#x60;. Cloud DNS requires that a DNS suffix ends with a trailing dot.
   * @return dnsSuffix
   */
  @javax.annotation.Nullable
  public String getDnsSuffix() {
    return dnsSuffix;
  }

  public void setDnsSuffix(String dnsSuffix) {
    this.dnsSuffix = dnsSuffix;
  }


  public AddDnsZoneRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. The name for both the private zone in the shared producer host project and the peering zone in the consumer project. Must be unique within both projects. The name must be 1-63 characters long, must begin with a letter, end with a letter or digit, and only contain lowercase letters, digits or dashes.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddDnsZoneRequest addDnsZoneRequest = (AddDnsZoneRequest) o;
    return Objects.equals(this.consumerNetwork, addDnsZoneRequest.consumerNetwork) &&
        Objects.equals(this.dnsSuffix, addDnsZoneRequest.dnsSuffix) &&
        Objects.equals(this.name, addDnsZoneRequest.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(consumerNetwork, dnsSuffix, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddDnsZoneRequest {\n");
    sb.append("    consumerNetwork: ").append(toIndentedString(consumerNetwork)).append("\n");
    sb.append("    dnsSuffix: ").append(toIndentedString(dnsSuffix)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("consumerNetwork");
    openapiFields.add("dnsSuffix");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AddDnsZoneRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AddDnsZoneRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddDnsZoneRequest is not found in the empty JSON string", AddDnsZoneRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AddDnsZoneRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddDnsZoneRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("consumerNetwork") != null && !jsonObj.get("consumerNetwork").isJsonNull()) && !jsonObj.get("consumerNetwork").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consumerNetwork` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consumerNetwork").toString()));
      }
      if ((jsonObj.get("dnsSuffix") != null && !jsonObj.get("dnsSuffix").isJsonNull()) && !jsonObj.get("dnsSuffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dnsSuffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dnsSuffix").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddDnsZoneRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddDnsZoneRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddDnsZoneRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddDnsZoneRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AddDnsZoneRequest>() {
           @Override
           public void write(JsonWriter out, AddDnsZoneRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddDnsZoneRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AddDnsZoneRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AddDnsZoneRequest
   * @throws IOException if the JSON string is invalid with respect to AddDnsZoneRequest
   */
  public static AddDnsZoneRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddDnsZoneRequest.class);
  }

  /**
   * Convert an instance of AddDnsZoneRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

