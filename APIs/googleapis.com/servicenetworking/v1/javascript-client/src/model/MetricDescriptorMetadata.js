/**
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MetricDescriptorMetadata model module.
 * @module model/MetricDescriptorMetadata
 * @version v1
 */
class MetricDescriptorMetadata {
    /**
     * Constructs a new <code>MetricDescriptorMetadata</code>.
     * Additional annotations that can be used to guide the usage of a metric.
     * @alias module:model/MetricDescriptorMetadata
     */
    constructor() { 
        
        MetricDescriptorMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MetricDescriptorMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MetricDescriptorMetadata} obj Optional instance to populate.
     * @return {module:model/MetricDescriptorMetadata} The populated <code>MetricDescriptorMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MetricDescriptorMetadata();

            if (data.hasOwnProperty('ingestDelay')) {
                obj['ingestDelay'] = ApiClient.convertToType(data['ingestDelay'], 'String');
            }
            if (data.hasOwnProperty('launchStage')) {
                obj['launchStage'] = ApiClient.convertToType(data['launchStage'], 'String');
            }
            if (data.hasOwnProperty('samplePeriod')) {
                obj['samplePeriod'] = ApiClient.convertToType(data['samplePeriod'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MetricDescriptorMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MetricDescriptorMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ingestDelay'] && !(typeof data['ingestDelay'] === 'string' || data['ingestDelay'] instanceof String)) {
            throw new Error("Expected the field `ingestDelay` to be a primitive type in the JSON string but got " + data['ingestDelay']);
        }
        // ensure the json data is a string
        if (data['launchStage'] && !(typeof data['launchStage'] === 'string' || data['launchStage'] instanceof String)) {
            throw new Error("Expected the field `launchStage` to be a primitive type in the JSON string but got " + data['launchStage']);
        }
        // ensure the json data is a string
        if (data['samplePeriod'] && !(typeof data['samplePeriod'] === 'string' || data['samplePeriod'] instanceof String)) {
            throw new Error("Expected the field `samplePeriod` to be a primitive type in the JSON string but got " + data['samplePeriod']);
        }

        return true;
    }


}



/**
 * The delay of data points caused by ingestion. Data points older than this age are guaranteed to be ingested and available to be read, excluding data loss due to errors.
 * @member {String} ingestDelay
 */
MetricDescriptorMetadata.prototype['ingestDelay'] = undefined;

/**
 * Deprecated. Must use the MetricDescriptor.launch_stage instead.
 * @member {module:model/MetricDescriptorMetadata.LaunchStageEnum} launchStage
 */
MetricDescriptorMetadata.prototype['launchStage'] = undefined;

/**
 * The sampling period of metric data points. For metrics which are written periodically, consecutive data points are stored at this time interval, excluding data loss due to errors. Metrics with a higher granularity have a smaller sampling period.
 * @member {String} samplePeriod
 */
MetricDescriptorMetadata.prototype['samplePeriod'] = undefined;





/**
 * Allowed values for the <code>launchStage</code> property.
 * @enum {String}
 * @readonly
 */
MetricDescriptorMetadata['LaunchStageEnum'] = {

    /**
     * value: "LAUNCH_STAGE_UNSPECIFIED"
     * @const
     */
    "LAUNCH_STAGE_UNSPECIFIED": "LAUNCH_STAGE_UNSPECIFIED",

    /**
     * value: "UNIMPLEMENTED"
     * @const
     */
    "UNIMPLEMENTED": "UNIMPLEMENTED",

    /**
     * value: "PRELAUNCH"
     * @const
     */
    "PRELAUNCH": "PRELAUNCH",

    /**
     * value: "EARLY_ACCESS"
     * @const
     */
    "EARLY_ACCESS": "EARLY_ACCESS",

    /**
     * value: "ALPHA"
     * @const
     */
    "ALPHA": "ALPHA",

    /**
     * value: "BETA"
     * @const
     */
    "BETA": "BETA",

    /**
     * value: "GA"
     * @const
     */
    "GA": "GA",

    /**
     * value: "DEPRECATED"
     * @const
     */
    "DEPRECATED": "DEPRECATED"
};



export default MetricDescriptorMetadata;

