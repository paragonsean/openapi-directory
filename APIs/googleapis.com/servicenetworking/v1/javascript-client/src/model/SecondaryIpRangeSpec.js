/**
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SecondaryIpRangeSpec model module.
 * @module model/SecondaryIpRangeSpec
 * @version v1
 */
class SecondaryIpRangeSpec {
    /**
     * Constructs a new <code>SecondaryIpRangeSpec</code>.
     * @alias module:model/SecondaryIpRangeSpec
     */
    constructor() { 
        
        SecondaryIpRangeSpec.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SecondaryIpRangeSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SecondaryIpRangeSpec} obj Optional instance to populate.
     * @return {module:model/SecondaryIpRangeSpec} The populated <code>SecondaryIpRangeSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SecondaryIpRangeSpec();

            if (data.hasOwnProperty('ipPrefixLength')) {
                obj['ipPrefixLength'] = ApiClient.convertToType(data['ipPrefixLength'], 'Number');
            }
            if (data.hasOwnProperty('outsideAllocationPublicIpRange')) {
                obj['outsideAllocationPublicIpRange'] = ApiClient.convertToType(data['outsideAllocationPublicIpRange'], 'String');
            }
            if (data.hasOwnProperty('rangeName')) {
                obj['rangeName'] = ApiClient.convertToType(data['rangeName'], 'String');
            }
            if (data.hasOwnProperty('requestedAddress')) {
                obj['requestedAddress'] = ApiClient.convertToType(data['requestedAddress'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SecondaryIpRangeSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SecondaryIpRangeSpec</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['outsideAllocationPublicIpRange'] && !(typeof data['outsideAllocationPublicIpRange'] === 'string' || data['outsideAllocationPublicIpRange'] instanceof String)) {
            throw new Error("Expected the field `outsideAllocationPublicIpRange` to be a primitive type in the JSON string but got " + data['outsideAllocationPublicIpRange']);
        }
        // ensure the json data is a string
        if (data['rangeName'] && !(typeof data['rangeName'] === 'string' || data['rangeName'] instanceof String)) {
            throw new Error("Expected the field `rangeName` to be a primitive type in the JSON string but got " + data['rangeName']);
        }
        // ensure the json data is a string
        if (data['requestedAddress'] && !(typeof data['requestedAddress'] === 'string' || data['requestedAddress'] instanceof String)) {
            throw new Error("Expected the field `requestedAddress` to be a primitive type in the JSON string but got " + data['requestedAddress']);
        }

        return true;
    }


}



/**
 * Required. The prefix length of the secondary IP range. Use CIDR range notation, such as `30` to provision a secondary IP range with an `x.x.x.x/30` CIDR range. The IP address range is drawn from a pool of available ranges in the service consumer's allocated range.
 * @member {Number} ipPrefixLength
 */
SecondaryIpRangeSpec.prototype['ipPrefixLength'] = undefined;

/**
 * Optional. Enable outside allocation using public IP addresses. Any public IP range may be specified. If this field is provided, we will not use customer reserved ranges for this secondary IP range.
 * @member {String} outsideAllocationPublicIpRange
 */
SecondaryIpRangeSpec.prototype['outsideAllocationPublicIpRange'] = undefined;

/**
 * Required. A name for the secondary IP range. The name must be 1-63 characters long, and comply with RFC1035. The name must be unique within the subnetwork.
 * @member {String} rangeName
 */
SecondaryIpRangeSpec.prototype['rangeName'] = undefined;

/**
 * Optional. The starting address of a range. The address must be a valid IPv4 address in the x.x.x.x format. This value combined with the IP prefix range is the CIDR range for the secondary IP range. The range must be within the allocated range that is assigned to the private connection. If the CIDR range isn't available, the call fails.
 * @member {String} requestedAddress
 */
SecondaryIpRangeSpec.prototype['requestedAddress'] = undefined;






export default SecondaryIpRangeSpec;

