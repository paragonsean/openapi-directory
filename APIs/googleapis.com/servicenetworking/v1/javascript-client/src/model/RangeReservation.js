/**
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Subnetwork from './Subnetwork';

/**
 * The RangeReservation model module.
 * @module model/RangeReservation
 * @version v1
 */
class RangeReservation {
    /**
     * Constructs a new <code>RangeReservation</code>.
     * Represents a range reservation.
     * @alias module:model/RangeReservation
     */
    constructor() { 
        
        RangeReservation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RangeReservation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RangeReservation} obj Optional instance to populate.
     * @return {module:model/RangeReservation} The populated <code>RangeReservation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RangeReservation();

            if (data.hasOwnProperty('ipPrefixLength')) {
                obj['ipPrefixLength'] = ApiClient.convertToType(data['ipPrefixLength'], 'Number');
            }
            if (data.hasOwnProperty('requestedRanges')) {
                obj['requestedRanges'] = ApiClient.convertToType(data['requestedRanges'], ['String']);
            }
            if (data.hasOwnProperty('secondaryRangeIpPrefixLengths')) {
                obj['secondaryRangeIpPrefixLengths'] = ApiClient.convertToType(data['secondaryRangeIpPrefixLengths'], ['Number']);
            }
            if (data.hasOwnProperty('subnetworkCandidates')) {
                obj['subnetworkCandidates'] = ApiClient.convertToType(data['subnetworkCandidates'], [Subnetwork]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RangeReservation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RangeReservation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['requestedRanges'])) {
            throw new Error("Expected the field `requestedRanges` to be an array in the JSON data but got " + data['requestedRanges']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['secondaryRangeIpPrefixLengths'])) {
            throw new Error("Expected the field `secondaryRangeIpPrefixLengths` to be an array in the JSON data but got " + data['secondaryRangeIpPrefixLengths']);
        }
        if (data['subnetworkCandidates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['subnetworkCandidates'])) {
                throw new Error("Expected the field `subnetworkCandidates` to be an array in the JSON data but got " + data['subnetworkCandidates']);
            }
            // validate the optional field `subnetworkCandidates` (array)
            for (const item of data['subnetworkCandidates']) {
                Subnetwork.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Required. The size of the desired subnet. Use usual CIDR range notation. For example, '29' to find unused x.x.x.x/29 CIDR range. The goal is to determine if one of the allocated ranges has enough free space for a subnet of the requested size. GCE disallows subnets with prefix_length > 29
 * @member {Number} ipPrefixLength
 */
RangeReservation.prototype['ipPrefixLength'] = undefined;

/**
 * Optional. The name of one or more allocated IP address ranges associated with this private service access connection. If no range names are provided all ranges associated with this connection will be considered. If a CIDR range with the specified IP prefix length is not available within these ranges the validation fails.
 * @member {Array.<String>} requestedRanges
 */
RangeReservation.prototype['requestedRanges'] = undefined;

/**
 * Optional. The size of the desired secondary ranges for the subnet. Use usual CIDR range notation. For example, '29' to find unused x.x.x.x/29 CIDR range. The goal is to determine that the allocated ranges have enough free space for all the requested secondary ranges. GCE disallows subnets with prefix_length > 29
 * @member {Array.<Number>} secondaryRangeIpPrefixLengths
 */
RangeReservation.prototype['secondaryRangeIpPrefixLengths'] = undefined;

/**
 * Optional. List of subnetwork candidates to validate. The required input fields are `name`, `network`, and `region`. Subnetworks from this list which exist will be returned in the response with the `ip_cidr_range`, `secondary_ip_cider_ranges`, and `outside_allocation` fields set.
 * @member {Array.<module:model/Subnetwork>} subnetworkCandidates
 */
RangeReservation.prototype['subnetworkCandidates'] = undefined;






export default RangeReservation;

