/**
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DnsRecordSet from './DnsRecordSet';

/**
 * The UpdateDnsRecordSetRequest model module.
 * @module model/UpdateDnsRecordSetRequest
 * @version v1
 */
class UpdateDnsRecordSetRequest {
    /**
     * Constructs a new <code>UpdateDnsRecordSetRequest</code>.
     * Request to update a record set from a private managed DNS zone in the shared producer host project. The name, type, ttl, and data values of the existing record set must all exactly match an existing record set in the specified zone.
     * @alias module:model/UpdateDnsRecordSetRequest
     */
    constructor() { 
        
        UpdateDnsRecordSetRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateDnsRecordSetRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateDnsRecordSetRequest} obj Optional instance to populate.
     * @return {module:model/UpdateDnsRecordSetRequest} The populated <code>UpdateDnsRecordSetRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateDnsRecordSetRequest();

            if (data.hasOwnProperty('consumerNetwork')) {
                obj['consumerNetwork'] = ApiClient.convertToType(data['consumerNetwork'], 'String');
            }
            if (data.hasOwnProperty('existingDnsRecordSet')) {
                obj['existingDnsRecordSet'] = DnsRecordSet.constructFromObject(data['existingDnsRecordSet']);
            }
            if (data.hasOwnProperty('newDnsRecordSet')) {
                obj['newDnsRecordSet'] = DnsRecordSet.constructFromObject(data['newDnsRecordSet']);
            }
            if (data.hasOwnProperty('zone')) {
                obj['zone'] = ApiClient.convertToType(data['zone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateDnsRecordSetRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateDnsRecordSetRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['consumerNetwork'] && !(typeof data['consumerNetwork'] === 'string' || data['consumerNetwork'] instanceof String)) {
            throw new Error("Expected the field `consumerNetwork` to be a primitive type in the JSON string but got " + data['consumerNetwork']);
        }
        // validate the optional field `existingDnsRecordSet`
        if (data['existingDnsRecordSet']) { // data not null
          DnsRecordSet.validateJSON(data['existingDnsRecordSet']);
        }
        // validate the optional field `newDnsRecordSet`
        if (data['newDnsRecordSet']) { // data not null
          DnsRecordSet.validateJSON(data['newDnsRecordSet']);
        }
        // ensure the json data is a string
        if (data['zone'] && !(typeof data['zone'] === 'string' || data['zone'] instanceof String)) {
            throw new Error("Expected the field `zone` to be a primitive type in the JSON string but got " + data['zone']);
        }

        return true;
    }


}



/**
 * Required. The network that the consumer is using to connect with services. Must be in the form of projects/{project}/global/networks/{network} {project} is the project number, as in '12345' {network} is the network name.
 * @member {String} consumerNetwork
 */
UpdateDnsRecordSetRequest.prototype['consumerNetwork'] = undefined;

/**
 * @member {module:model/DnsRecordSet} existingDnsRecordSet
 */
UpdateDnsRecordSetRequest.prototype['existingDnsRecordSet'] = undefined;

/**
 * @member {module:model/DnsRecordSet} newDnsRecordSet
 */
UpdateDnsRecordSetRequest.prototype['newDnsRecordSet'] = undefined;

/**
 * Required. The name of the private DNS zone in the shared producer host project from which the record set will be removed.
 * @member {String} zone
 */
UpdateDnsRecordSetRequest.prototype['zone'] = undefined;






export default UpdateDnsRecordSetRequest;

