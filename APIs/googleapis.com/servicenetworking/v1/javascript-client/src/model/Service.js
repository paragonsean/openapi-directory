/**
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Api from './Api';
import Authentication from './Authentication';
import Backend from './Backend';
import Billing from './Billing';
import Context from './Context';
import Control from './Control';
import CustomError from './CustomError';
import Documentation from './Documentation';
import Endpoint from './Endpoint';
import Enum from './Enum';
import Http from './Http';
import LogDescriptor from './LogDescriptor';
import Logging from './Logging';
import MetricDescriptor from './MetricDescriptor';
import MonitoredResourceDescriptor from './MonitoredResourceDescriptor';
import Monitoring from './Monitoring';
import Publishing from './Publishing';
import Quota from './Quota';
import SourceInfo from './SourceInfo';
import SystemParameters from './SystemParameters';
import Type from './Type';
import Usage from './Usage';

/**
 * The Service model module.
 * @module model/Service
 * @version v1
 */
class Service {
    /**
     * Constructs a new <code>Service</code>.
     * &#x60;Service&#x60; is the root object of Google API service configuration (service config). It describes the basic information about a logical service, such as the service name and the user-facing title, and delegates other aspects to sub-sections. Each sub-section is either a proto message or a repeated proto message that configures a specific aspect, such as auth. For more information, see each proto message definition. Example: type: google.api.Service name: calendar.googleapis.com title: Google Calendar API apis: - name: google.calendar.v3.Calendar visibility: rules: - selector: \&quot;google.calendar.v3.*\&quot; restriction: PREVIEW backend: rules: - selector: \&quot;google.calendar.v3.*\&quot; address: calendar.example.com authentication: providers: - id: google_calendar_auth jwks_uri: https://www.googleapis.com/oauth2/v1/certs issuer: https://securetoken.google.com rules: - selector: \&quot;*\&quot; requirements: provider_id: google_calendar_auth
     * @alias module:model/Service
     */
    constructor() { 
        
        Service.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Service</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Service} obj Optional instance to populate.
     * @return {module:model/Service} The populated <code>Service</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Service();

            if (data.hasOwnProperty('apis')) {
                obj['apis'] = ApiClient.convertToType(data['apis'], [Api]);
            }
            if (data.hasOwnProperty('authentication')) {
                obj['authentication'] = Authentication.constructFromObject(data['authentication']);
            }
            if (data.hasOwnProperty('backend')) {
                obj['backend'] = Backend.constructFromObject(data['backend']);
            }
            if (data.hasOwnProperty('billing')) {
                obj['billing'] = Billing.constructFromObject(data['billing']);
            }
            if (data.hasOwnProperty('configVersion')) {
                obj['configVersion'] = ApiClient.convertToType(data['configVersion'], 'Number');
            }
            if (data.hasOwnProperty('context')) {
                obj['context'] = Context.constructFromObject(data['context']);
            }
            if (data.hasOwnProperty('control')) {
                obj['control'] = Control.constructFromObject(data['control']);
            }
            if (data.hasOwnProperty('customError')) {
                obj['customError'] = CustomError.constructFromObject(data['customError']);
            }
            if (data.hasOwnProperty('documentation')) {
                obj['documentation'] = Documentation.constructFromObject(data['documentation']);
            }
            if (data.hasOwnProperty('endpoints')) {
                obj['endpoints'] = ApiClient.convertToType(data['endpoints'], [Endpoint]);
            }
            if (data.hasOwnProperty('enums')) {
                obj['enums'] = ApiClient.convertToType(data['enums'], [Enum]);
            }
            if (data.hasOwnProperty('http')) {
                obj['http'] = Http.constructFromObject(data['http']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('logging')) {
                obj['logging'] = Logging.constructFromObject(data['logging']);
            }
            if (data.hasOwnProperty('logs')) {
                obj['logs'] = ApiClient.convertToType(data['logs'], [LogDescriptor]);
            }
            if (data.hasOwnProperty('metrics')) {
                obj['metrics'] = ApiClient.convertToType(data['metrics'], [MetricDescriptor]);
            }
            if (data.hasOwnProperty('monitoredResources')) {
                obj['monitoredResources'] = ApiClient.convertToType(data['monitoredResources'], [MonitoredResourceDescriptor]);
            }
            if (data.hasOwnProperty('monitoring')) {
                obj['monitoring'] = Monitoring.constructFromObject(data['monitoring']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('producerProjectId')) {
                obj['producerProjectId'] = ApiClient.convertToType(data['producerProjectId'], 'String');
            }
            if (data.hasOwnProperty('publishing')) {
                obj['publishing'] = Publishing.constructFromObject(data['publishing']);
            }
            if (data.hasOwnProperty('quota')) {
                obj['quota'] = Quota.constructFromObject(data['quota']);
            }
            if (data.hasOwnProperty('sourceInfo')) {
                obj['sourceInfo'] = SourceInfo.constructFromObject(data['sourceInfo']);
            }
            if (data.hasOwnProperty('systemParameters')) {
                obj['systemParameters'] = SystemParameters.constructFromObject(data['systemParameters']);
            }
            if (data.hasOwnProperty('systemTypes')) {
                obj['systemTypes'] = ApiClient.convertToType(data['systemTypes'], [Type]);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('types')) {
                obj['types'] = ApiClient.convertToType(data['types'], [Type]);
            }
            if (data.hasOwnProperty('usage')) {
                obj['usage'] = Usage.constructFromObject(data['usage']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Service</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Service</code>.
     */
    static validateJSON(data) {
        if (data['apis']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['apis'])) {
                throw new Error("Expected the field `apis` to be an array in the JSON data but got " + data['apis']);
            }
            // validate the optional field `apis` (array)
            for (const item of data['apis']) {
                Api.validateJSON(item);
            };
        }
        // validate the optional field `authentication`
        if (data['authentication']) { // data not null
          Authentication.validateJSON(data['authentication']);
        }
        // validate the optional field `backend`
        if (data['backend']) { // data not null
          Backend.validateJSON(data['backend']);
        }
        // validate the optional field `billing`
        if (data['billing']) { // data not null
          Billing.validateJSON(data['billing']);
        }
        // validate the optional field `context`
        if (data['context']) { // data not null
          Context.validateJSON(data['context']);
        }
        // validate the optional field `control`
        if (data['control']) { // data not null
          Control.validateJSON(data['control']);
        }
        // validate the optional field `customError`
        if (data['customError']) { // data not null
          CustomError.validateJSON(data['customError']);
        }
        // validate the optional field `documentation`
        if (data['documentation']) { // data not null
          Documentation.validateJSON(data['documentation']);
        }
        if (data['endpoints']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['endpoints'])) {
                throw new Error("Expected the field `endpoints` to be an array in the JSON data but got " + data['endpoints']);
            }
            // validate the optional field `endpoints` (array)
            for (const item of data['endpoints']) {
                Endpoint.validateJSON(item);
            };
        }
        if (data['enums']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['enums'])) {
                throw new Error("Expected the field `enums` to be an array in the JSON data but got " + data['enums']);
            }
            // validate the optional field `enums` (array)
            for (const item of data['enums']) {
                Enum.validateJSON(item);
            };
        }
        // validate the optional field `http`
        if (data['http']) { // data not null
          Http.validateJSON(data['http']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `logging`
        if (data['logging']) { // data not null
          Logging.validateJSON(data['logging']);
        }
        if (data['logs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['logs'])) {
                throw new Error("Expected the field `logs` to be an array in the JSON data but got " + data['logs']);
            }
            // validate the optional field `logs` (array)
            for (const item of data['logs']) {
                LogDescriptor.validateJSON(item);
            };
        }
        if (data['metrics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metrics'])) {
                throw new Error("Expected the field `metrics` to be an array in the JSON data but got " + data['metrics']);
            }
            // validate the optional field `metrics` (array)
            for (const item of data['metrics']) {
                MetricDescriptor.validateJSON(item);
            };
        }
        if (data['monitoredResources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['monitoredResources'])) {
                throw new Error("Expected the field `monitoredResources` to be an array in the JSON data but got " + data['monitoredResources']);
            }
            // validate the optional field `monitoredResources` (array)
            for (const item of data['monitoredResources']) {
                MonitoredResourceDescriptor.validateJSON(item);
            };
        }
        // validate the optional field `monitoring`
        if (data['monitoring']) { // data not null
          Monitoring.validateJSON(data['monitoring']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['producerProjectId'] && !(typeof data['producerProjectId'] === 'string' || data['producerProjectId'] instanceof String)) {
            throw new Error("Expected the field `producerProjectId` to be a primitive type in the JSON string but got " + data['producerProjectId']);
        }
        // validate the optional field `publishing`
        if (data['publishing']) { // data not null
          Publishing.validateJSON(data['publishing']);
        }
        // validate the optional field `quota`
        if (data['quota']) { // data not null
          Quota.validateJSON(data['quota']);
        }
        // validate the optional field `sourceInfo`
        if (data['sourceInfo']) { // data not null
          SourceInfo.validateJSON(data['sourceInfo']);
        }
        // validate the optional field `systemParameters`
        if (data['systemParameters']) { // data not null
          SystemParameters.validateJSON(data['systemParameters']);
        }
        if (data['systemTypes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['systemTypes'])) {
                throw new Error("Expected the field `systemTypes` to be an array in the JSON data but got " + data['systemTypes']);
            }
            // validate the optional field `systemTypes` (array)
            for (const item of data['systemTypes']) {
                Type.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        if (data['types']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['types'])) {
                throw new Error("Expected the field `types` to be an array in the JSON data but got " + data['types']);
            }
            // validate the optional field `types` (array)
            for (const item of data['types']) {
                Type.validateJSON(item);
            };
        }
        // validate the optional field `usage`
        if (data['usage']) { // data not null
          Usage.validateJSON(data['usage']);
        }

        return true;
    }


}



/**
 * A list of API interfaces exported by this service. Only the `name` field of the google.protobuf.Api needs to be provided by the configuration author, as the remaining fields will be derived from the IDL during the normalization process. It is an error to specify an API interface here which cannot be resolved against the associated IDL files.
 * @member {Array.<module:model/Api>} apis
 */
Service.prototype['apis'] = undefined;

/**
 * @member {module:model/Authentication} authentication
 */
Service.prototype['authentication'] = undefined;

/**
 * @member {module:model/Backend} backend
 */
Service.prototype['backend'] = undefined;

/**
 * @member {module:model/Billing} billing
 */
Service.prototype['billing'] = undefined;

/**
 * Obsolete. Do not use. This field has no semantic meaning. The service config compiler always sets this field to `3`.
 * @member {Number} configVersion
 */
Service.prototype['configVersion'] = undefined;

/**
 * @member {module:model/Context} context
 */
Service.prototype['context'] = undefined;

/**
 * @member {module:model/Control} control
 */
Service.prototype['control'] = undefined;

/**
 * @member {module:model/CustomError} customError
 */
Service.prototype['customError'] = undefined;

/**
 * @member {module:model/Documentation} documentation
 */
Service.prototype['documentation'] = undefined;

/**
 * Configuration for network endpoints. If this is empty, then an endpoint with the same name as the service is automatically generated to service all defined APIs.
 * @member {Array.<module:model/Endpoint>} endpoints
 */
Service.prototype['endpoints'] = undefined;

/**
 * A list of all enum types included in this API service. Enums referenced directly or indirectly by the `apis` are automatically included. Enums which are not referenced but shall be included should be listed here by name by the configuration author. Example: enums: - name: google.someapi.v1.SomeEnum
 * @member {Array.<module:model/Enum>} enums
 */
Service.prototype['enums'] = undefined;

/**
 * @member {module:model/Http} http
 */
Service.prototype['http'] = undefined;

/**
 * A unique ID for a specific instance of this message, typically assigned by the client for tracking purpose. Must be no longer than 63 characters and only lower case letters, digits, '.', '_' and '-' are allowed. If empty, the server may choose to generate one instead.
 * @member {String} id
 */
Service.prototype['id'] = undefined;

/**
 * @member {module:model/Logging} logging
 */
Service.prototype['logging'] = undefined;

/**
 * Defines the logs used by this service.
 * @member {Array.<module:model/LogDescriptor>} logs
 */
Service.prototype['logs'] = undefined;

/**
 * Defines the metrics used by this service.
 * @member {Array.<module:model/MetricDescriptor>} metrics
 */
Service.prototype['metrics'] = undefined;

/**
 * Defines the monitored resources used by this service. This is required by the Service.monitoring and Service.logging configurations.
 * @member {Array.<module:model/MonitoredResourceDescriptor>} monitoredResources
 */
Service.prototype['monitoredResources'] = undefined;

/**
 * @member {module:model/Monitoring} monitoring
 */
Service.prototype['monitoring'] = undefined;

/**
 * The service name, which is a DNS-like logical identifier for the service, such as `calendar.googleapis.com`. The service name typically goes through DNS verification to make sure the owner of the service also owns the DNS name.
 * @member {String} name
 */
Service.prototype['name'] = undefined;

/**
 * The Google project that owns this service.
 * @member {String} producerProjectId
 */
Service.prototype['producerProjectId'] = undefined;

/**
 * @member {module:model/Publishing} publishing
 */
Service.prototype['publishing'] = undefined;

/**
 * @member {module:model/Quota} quota
 */
Service.prototype['quota'] = undefined;

/**
 * @member {module:model/SourceInfo} sourceInfo
 */
Service.prototype['sourceInfo'] = undefined;

/**
 * @member {module:model/SystemParameters} systemParameters
 */
Service.prototype['systemParameters'] = undefined;

/**
 * A list of all proto message types included in this API service. It serves similar purpose as [google.api.Service.types], except that these types are not needed by user-defined APIs. Therefore, they will not show up in the generated discovery doc. This field should only be used to define system APIs in ESF.
 * @member {Array.<module:model/Type>} systemTypes
 */
Service.prototype['systemTypes'] = undefined;

/**
 * The product title for this service, it is the name displayed in Google Cloud Console.
 * @member {String} title
 */
Service.prototype['title'] = undefined;

/**
 * A list of all proto message types included in this API service. Types referenced directly or indirectly by the `apis` are automatically included. Messages which are not referenced but shall be included, such as types used by the `google.protobuf.Any` type, should be listed here by name by the configuration author. Example: types: - name: google.protobuf.Int32
 * @member {Array.<module:model/Type>} types
 */
Service.prototype['types'] = undefined;

/**
 * @member {module:model/Usage} usage
 */
Service.prototype['usage'] = undefined;






export default Service;

