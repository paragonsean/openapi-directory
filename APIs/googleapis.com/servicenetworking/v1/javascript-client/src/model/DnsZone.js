/**
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DnsZone model module.
 * @module model/DnsZone
 * @version v1
 */
class DnsZone {
    /**
     * Constructs a new <code>DnsZone</code>.
     * Represents a DNS zone resource.
     * @alias module:model/DnsZone
     */
    constructor() { 
        
        DnsZone.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DnsZone</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DnsZone} obj Optional instance to populate.
     * @return {module:model/DnsZone} The populated <code>DnsZone</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DnsZone();

            if (data.hasOwnProperty('dnsSuffix')) {
                obj['dnsSuffix'] = ApiClient.convertToType(data['dnsSuffix'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DnsZone</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DnsZone</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dnsSuffix'] && !(typeof data['dnsSuffix'] === 'string' || data['dnsSuffix'] instanceof String)) {
            throw new Error("Expected the field `dnsSuffix` to be a primitive type in the JSON string but got " + data['dnsSuffix']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * The DNS name suffix of this zone e.g. `example.com.`. Cloud DNS requires that a DNS suffix ends with a trailing dot.
 * @member {String} dnsSuffix
 */
DnsZone.prototype['dnsSuffix'] = undefined;

/**
 * User assigned name for this resource. Must be unique within the project. The name must be 1-63 characters long, must begin with a letter, end with a letter or digit, and only contain lowercase letters, digits or dashes.
 * @member {String} name
 */
DnsZone.prototype['name'] = undefined;






export default DnsZone;

