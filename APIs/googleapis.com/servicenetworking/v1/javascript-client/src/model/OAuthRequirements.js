/**
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OAuthRequirements model module.
 * @module model/OAuthRequirements
 * @version v1
 */
class OAuthRequirements {
    /**
     * Constructs a new <code>OAuthRequirements</code>.
     * OAuth scopes are a way to define data and permissions on data. For example, there are scopes defined for \&quot;Read-only access to Google Calendar\&quot; and \&quot;Access to Cloud Platform\&quot;. Users can consent to a scope for an application, giving it permission to access that data on their behalf. OAuth scope specifications should be fairly coarse grained; a user will need to see and understand the text description of what your scope means. In most cases: use one or at most two OAuth scopes for an entire family of products. If your product has multiple APIs, you should probably be sharing the OAuth scope across all of those APIs. When you need finer grained OAuth consent screens: talk with your product management about how developers will use them in practice. Please note that even though each of the canonical scopes is enough for a request to be accepted and passed to the backend, a request can still fail due to the backend requiring additional scopes or permissions.
     * @alias module:model/OAuthRequirements
     */
    constructor() { 
        
        OAuthRequirements.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OAuthRequirements</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OAuthRequirements} obj Optional instance to populate.
     * @return {module:model/OAuthRequirements} The populated <code>OAuthRequirements</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OAuthRequirements();

            if (data.hasOwnProperty('canonicalScopes')) {
                obj['canonicalScopes'] = ApiClient.convertToType(data['canonicalScopes'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OAuthRequirements</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OAuthRequirements</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['canonicalScopes'] && !(typeof data['canonicalScopes'] === 'string' || data['canonicalScopes'] instanceof String)) {
            throw new Error("Expected the field `canonicalScopes` to be a primitive type in the JSON string but got " + data['canonicalScopes']);
        }

        return true;
    }


}



/**
 * The list of publicly documented OAuth scopes that are allowed access. An OAuth token containing any of these scopes will be accepted. Example: canonical_scopes: https://www.googleapis.com/auth/calendar, https://www.googleapis.com/auth/calendar.read
 * @member {String} canonicalScopes
 */
OAuthRequirements.prototype['canonicalScopes'] = undefined;






export default OAuthRequirements;

