/**
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MethodPolicy from './MethodPolicy';

/**
 * The Control model module.
 * @module model/Control
 * @version v1
 */
class Control {
    /**
     * Constructs a new <code>Control</code>.
     * Selects and configures the service controller used by the service. Example: control: environment: servicecontrol.googleapis.com
     * @alias module:model/Control
     */
    constructor() { 
        
        Control.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Control</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Control} obj Optional instance to populate.
     * @return {module:model/Control} The populated <code>Control</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Control();

            if (data.hasOwnProperty('environment')) {
                obj['environment'] = ApiClient.convertToType(data['environment'], 'String');
            }
            if (data.hasOwnProperty('methodPolicies')) {
                obj['methodPolicies'] = ApiClient.convertToType(data['methodPolicies'], [MethodPolicy]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Control</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Control</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['environment'] && !(typeof data['environment'] === 'string' || data['environment'] instanceof String)) {
            throw new Error("Expected the field `environment` to be a primitive type in the JSON string but got " + data['environment']);
        }
        if (data['methodPolicies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['methodPolicies'])) {
                throw new Error("Expected the field `methodPolicies` to be an array in the JSON data but got " + data['methodPolicies']);
            }
            // validate the optional field `methodPolicies` (array)
            for (const item of data['methodPolicies']) {
                MethodPolicy.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The service controller environment to use. If empty, no control plane feature (like quota and billing) will be enabled. The recommended value for most services is servicecontrol.googleapis.com
 * @member {String} environment
 */
Control.prototype['environment'] = undefined;

/**
 * Defines policies applying to the API methods of the service.
 * @member {Array.<module:model/MethodPolicy>} methodPolicies
 */
Control.prototype['methodPolicies'] = undefined;






export default Control;

