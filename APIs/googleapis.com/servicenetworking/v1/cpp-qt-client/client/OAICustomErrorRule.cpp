/**
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomErrorRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomErrorRule::OAICustomErrorRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomErrorRule::OAICustomErrorRule() {
    this->initializeModel();
}

OAICustomErrorRule::~OAICustomErrorRule() {}

void OAICustomErrorRule::initializeModel() {

    m_is_error_type_isSet = false;
    m_is_error_type_isValid = false;

    m_selector_isSet = false;
    m_selector_isValid = false;
}

void OAICustomErrorRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomErrorRule::fromJsonObject(QJsonObject json) {

    m_is_error_type_isValid = ::OpenAPI::fromJsonValue(m_is_error_type, json[QString("isErrorType")]);
    m_is_error_type_isSet = !json[QString("isErrorType")].isNull() && m_is_error_type_isValid;

    m_selector_isValid = ::OpenAPI::fromJsonValue(m_selector, json[QString("selector")]);
    m_selector_isSet = !json[QString("selector")].isNull() && m_selector_isValid;
}

QString OAICustomErrorRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomErrorRule::asJsonObject() const {
    QJsonObject obj;
    if (m_is_error_type_isSet) {
        obj.insert(QString("isErrorType"), ::OpenAPI::toJsonValue(m_is_error_type));
    }
    if (m_selector_isSet) {
        obj.insert(QString("selector"), ::OpenAPI::toJsonValue(m_selector));
    }
    return obj;
}

bool OAICustomErrorRule::isIsErrorType() const {
    return m_is_error_type;
}
void OAICustomErrorRule::setIsErrorType(const bool &is_error_type) {
    m_is_error_type = is_error_type;
    m_is_error_type_isSet = true;
}

bool OAICustomErrorRule::is_is_error_type_Set() const{
    return m_is_error_type_isSet;
}

bool OAICustomErrorRule::is_is_error_type_Valid() const{
    return m_is_error_type_isValid;
}

QString OAICustomErrorRule::getSelector() const {
    return m_selector;
}
void OAICustomErrorRule::setSelector(const QString &selector) {
    m_selector = selector;
    m_selector_isSet = true;
}

bool OAICustomErrorRule::is_selector_Set() const{
    return m_selector_isSet;
}

bool OAICustomErrorRule::is_selector_Valid() const{
    return m_selector_isValid;
}

bool OAICustomErrorRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_error_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selector_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomErrorRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
