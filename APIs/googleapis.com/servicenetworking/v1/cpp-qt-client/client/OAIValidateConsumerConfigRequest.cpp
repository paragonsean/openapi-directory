/**
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIValidateConsumerConfigRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIValidateConsumerConfigRequest::OAIValidateConsumerConfigRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIValidateConsumerConfigRequest::OAIValidateConsumerConfigRequest() {
    this->initializeModel();
}

OAIValidateConsumerConfigRequest::~OAIValidateConsumerConfigRequest() {}

void OAIValidateConsumerConfigRequest::initializeModel() {

    m_check_service_networking_use_permission_isSet = false;
    m_check_service_networking_use_permission_isValid = false;

    m_consumer_network_isSet = false;
    m_consumer_network_isValid = false;

    m_consumer_project_isSet = false;
    m_consumer_project_isValid = false;

    m_range_reservation_isSet = false;
    m_range_reservation_isValid = false;

    m_validate_network_isSet = false;
    m_validate_network_isValid = false;
}

void OAIValidateConsumerConfigRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIValidateConsumerConfigRequest::fromJsonObject(QJsonObject json) {

    m_check_service_networking_use_permission_isValid = ::OpenAPI::fromJsonValue(m_check_service_networking_use_permission, json[QString("checkServiceNetworkingUsePermission")]);
    m_check_service_networking_use_permission_isSet = !json[QString("checkServiceNetworkingUsePermission")].isNull() && m_check_service_networking_use_permission_isValid;

    m_consumer_network_isValid = ::OpenAPI::fromJsonValue(m_consumer_network, json[QString("consumerNetwork")]);
    m_consumer_network_isSet = !json[QString("consumerNetwork")].isNull() && m_consumer_network_isValid;

    m_consumer_project_isValid = ::OpenAPI::fromJsonValue(m_consumer_project, json[QString("consumerProject")]);
    m_consumer_project_isSet = !json[QString("consumerProject")].isNull() && m_consumer_project_isValid;

    m_range_reservation_isValid = ::OpenAPI::fromJsonValue(m_range_reservation, json[QString("rangeReservation")]);
    m_range_reservation_isSet = !json[QString("rangeReservation")].isNull() && m_range_reservation_isValid;

    m_validate_network_isValid = ::OpenAPI::fromJsonValue(m_validate_network, json[QString("validateNetwork")]);
    m_validate_network_isSet = !json[QString("validateNetwork")].isNull() && m_validate_network_isValid;
}

QString OAIValidateConsumerConfigRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIValidateConsumerConfigRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_check_service_networking_use_permission_isSet) {
        obj.insert(QString("checkServiceNetworkingUsePermission"), ::OpenAPI::toJsonValue(m_check_service_networking_use_permission));
    }
    if (m_consumer_network_isSet) {
        obj.insert(QString("consumerNetwork"), ::OpenAPI::toJsonValue(m_consumer_network));
    }
    if (m_consumer_project.isSet()) {
        obj.insert(QString("consumerProject"), ::OpenAPI::toJsonValue(m_consumer_project));
    }
    if (m_range_reservation.isSet()) {
        obj.insert(QString("rangeReservation"), ::OpenAPI::toJsonValue(m_range_reservation));
    }
    if (m_validate_network_isSet) {
        obj.insert(QString("validateNetwork"), ::OpenAPI::toJsonValue(m_validate_network));
    }
    return obj;
}

bool OAIValidateConsumerConfigRequest::isCheckServiceNetworkingUsePermission() const {
    return m_check_service_networking_use_permission;
}
void OAIValidateConsumerConfigRequest::setCheckServiceNetworkingUsePermission(const bool &check_service_networking_use_permission) {
    m_check_service_networking_use_permission = check_service_networking_use_permission;
    m_check_service_networking_use_permission_isSet = true;
}

bool OAIValidateConsumerConfigRequest::is_check_service_networking_use_permission_Set() const{
    return m_check_service_networking_use_permission_isSet;
}

bool OAIValidateConsumerConfigRequest::is_check_service_networking_use_permission_Valid() const{
    return m_check_service_networking_use_permission_isValid;
}

QString OAIValidateConsumerConfigRequest::getConsumerNetwork() const {
    return m_consumer_network;
}
void OAIValidateConsumerConfigRequest::setConsumerNetwork(const QString &consumer_network) {
    m_consumer_network = consumer_network;
    m_consumer_network_isSet = true;
}

bool OAIValidateConsumerConfigRequest::is_consumer_network_Set() const{
    return m_consumer_network_isSet;
}

bool OAIValidateConsumerConfigRequest::is_consumer_network_Valid() const{
    return m_consumer_network_isValid;
}

OAIConsumerProject OAIValidateConsumerConfigRequest::getConsumerProject() const {
    return m_consumer_project;
}
void OAIValidateConsumerConfigRequest::setConsumerProject(const OAIConsumerProject &consumer_project) {
    m_consumer_project = consumer_project;
    m_consumer_project_isSet = true;
}

bool OAIValidateConsumerConfigRequest::is_consumer_project_Set() const{
    return m_consumer_project_isSet;
}

bool OAIValidateConsumerConfigRequest::is_consumer_project_Valid() const{
    return m_consumer_project_isValid;
}

OAIRangeReservation OAIValidateConsumerConfigRequest::getRangeReservation() const {
    return m_range_reservation;
}
void OAIValidateConsumerConfigRequest::setRangeReservation(const OAIRangeReservation &range_reservation) {
    m_range_reservation = range_reservation;
    m_range_reservation_isSet = true;
}

bool OAIValidateConsumerConfigRequest::is_range_reservation_Set() const{
    return m_range_reservation_isSet;
}

bool OAIValidateConsumerConfigRequest::is_range_reservation_Valid() const{
    return m_range_reservation_isValid;
}

bool OAIValidateConsumerConfigRequest::isValidateNetwork() const {
    return m_validate_network;
}
void OAIValidateConsumerConfigRequest::setValidateNetwork(const bool &validate_network) {
    m_validate_network = validate_network;
    m_validate_network_isSet = true;
}

bool OAIValidateConsumerConfigRequest::is_validate_network_Set() const{
    return m_validate_network_isSet;
}

bool OAIValidateConsumerConfigRequest::is_validate_network_Valid() const{
    return m_validate_network_isValid;
}

bool OAIValidateConsumerConfigRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_check_service_networking_use_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumer_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumer_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_range_reservation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_validate_network_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIValidateConsumerConfigRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
