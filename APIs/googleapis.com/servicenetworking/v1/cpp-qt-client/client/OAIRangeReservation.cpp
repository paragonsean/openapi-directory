/**
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRangeReservation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRangeReservation::OAIRangeReservation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRangeReservation::OAIRangeReservation() {
    this->initializeModel();
}

OAIRangeReservation::~OAIRangeReservation() {}

void OAIRangeReservation::initializeModel() {

    m_ip_prefix_length_isSet = false;
    m_ip_prefix_length_isValid = false;

    m_requested_ranges_isSet = false;
    m_requested_ranges_isValid = false;

    m_secondary_range_ip_prefix_lengths_isSet = false;
    m_secondary_range_ip_prefix_lengths_isValid = false;

    m_subnetwork_candidates_isSet = false;
    m_subnetwork_candidates_isValid = false;
}

void OAIRangeReservation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRangeReservation::fromJsonObject(QJsonObject json) {

    m_ip_prefix_length_isValid = ::OpenAPI::fromJsonValue(m_ip_prefix_length, json[QString("ipPrefixLength")]);
    m_ip_prefix_length_isSet = !json[QString("ipPrefixLength")].isNull() && m_ip_prefix_length_isValid;

    m_requested_ranges_isValid = ::OpenAPI::fromJsonValue(m_requested_ranges, json[QString("requestedRanges")]);
    m_requested_ranges_isSet = !json[QString("requestedRanges")].isNull() && m_requested_ranges_isValid;

    m_secondary_range_ip_prefix_lengths_isValid = ::OpenAPI::fromJsonValue(m_secondary_range_ip_prefix_lengths, json[QString("secondaryRangeIpPrefixLengths")]);
    m_secondary_range_ip_prefix_lengths_isSet = !json[QString("secondaryRangeIpPrefixLengths")].isNull() && m_secondary_range_ip_prefix_lengths_isValid;

    m_subnetwork_candidates_isValid = ::OpenAPI::fromJsonValue(m_subnetwork_candidates, json[QString("subnetworkCandidates")]);
    m_subnetwork_candidates_isSet = !json[QString("subnetworkCandidates")].isNull() && m_subnetwork_candidates_isValid;
}

QString OAIRangeReservation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRangeReservation::asJsonObject() const {
    QJsonObject obj;
    if (m_ip_prefix_length_isSet) {
        obj.insert(QString("ipPrefixLength"), ::OpenAPI::toJsonValue(m_ip_prefix_length));
    }
    if (m_requested_ranges.size() > 0) {
        obj.insert(QString("requestedRanges"), ::OpenAPI::toJsonValue(m_requested_ranges));
    }
    if (m_secondary_range_ip_prefix_lengths.size() > 0) {
        obj.insert(QString("secondaryRangeIpPrefixLengths"), ::OpenAPI::toJsonValue(m_secondary_range_ip_prefix_lengths));
    }
    if (m_subnetwork_candidates.size() > 0) {
        obj.insert(QString("subnetworkCandidates"), ::OpenAPI::toJsonValue(m_subnetwork_candidates));
    }
    return obj;
}

qint32 OAIRangeReservation::getIpPrefixLength() const {
    return m_ip_prefix_length;
}
void OAIRangeReservation::setIpPrefixLength(const qint32 &ip_prefix_length) {
    m_ip_prefix_length = ip_prefix_length;
    m_ip_prefix_length_isSet = true;
}

bool OAIRangeReservation::is_ip_prefix_length_Set() const{
    return m_ip_prefix_length_isSet;
}

bool OAIRangeReservation::is_ip_prefix_length_Valid() const{
    return m_ip_prefix_length_isValid;
}

QList<QString> OAIRangeReservation::getRequestedRanges() const {
    return m_requested_ranges;
}
void OAIRangeReservation::setRequestedRanges(const QList<QString> &requested_ranges) {
    m_requested_ranges = requested_ranges;
    m_requested_ranges_isSet = true;
}

bool OAIRangeReservation::is_requested_ranges_Set() const{
    return m_requested_ranges_isSet;
}

bool OAIRangeReservation::is_requested_ranges_Valid() const{
    return m_requested_ranges_isValid;
}

QList<qint32> OAIRangeReservation::getSecondaryRangeIpPrefixLengths() const {
    return m_secondary_range_ip_prefix_lengths;
}
void OAIRangeReservation::setSecondaryRangeIpPrefixLengths(const QList<qint32> &secondary_range_ip_prefix_lengths) {
    m_secondary_range_ip_prefix_lengths = secondary_range_ip_prefix_lengths;
    m_secondary_range_ip_prefix_lengths_isSet = true;
}

bool OAIRangeReservation::is_secondary_range_ip_prefix_lengths_Set() const{
    return m_secondary_range_ip_prefix_lengths_isSet;
}

bool OAIRangeReservation::is_secondary_range_ip_prefix_lengths_Valid() const{
    return m_secondary_range_ip_prefix_lengths_isValid;
}

QList<OAISubnetwork> OAIRangeReservation::getSubnetworkCandidates() const {
    return m_subnetwork_candidates;
}
void OAIRangeReservation::setSubnetworkCandidates(const QList<OAISubnetwork> &subnetwork_candidates) {
    m_subnetwork_candidates = subnetwork_candidates;
    m_subnetwork_candidates_isSet = true;
}

bool OAIRangeReservation::is_subnetwork_candidates_Set() const{
    return m_subnetwork_candidates_isSet;
}

bool OAIRangeReservation::is_subnetwork_candidates_Valid() const{
    return m_subnetwork_candidates_isValid;
}

bool OAIRangeReservation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ip_prefix_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_range_ip_prefix_lengths.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnetwork_candidates.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRangeReservation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
