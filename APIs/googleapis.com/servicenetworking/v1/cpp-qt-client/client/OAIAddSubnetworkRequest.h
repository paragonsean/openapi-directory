/**
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAddSubnetworkRequest.h
 *
 * Request to create a subnetwork in a previously peered service network.
 */

#ifndef OAIAddSubnetworkRequest_H
#define OAIAddSubnetworkRequest_H

#include <QJsonObject>

#include "OAISecondaryIpRangeSpec.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISecondaryIpRangeSpec;

class OAIAddSubnetworkRequest : public OAIObject {
public:
    OAIAddSubnetworkRequest();
    OAIAddSubnetworkRequest(QString json);
    ~OAIAddSubnetworkRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAllowSubnetCidrRoutesOverlap() const;
    void setAllowSubnetCidrRoutesOverlap(const bool &allow_subnet_cidr_routes_overlap);
    bool is_allow_subnet_cidr_routes_overlap_Set() const;
    bool is_allow_subnet_cidr_routes_overlap_Valid() const;

    bool isCheckServiceNetworkingUsePermission() const;
    void setCheckServiceNetworkingUsePermission(const bool &check_service_networking_use_permission);
    bool is_check_service_networking_use_permission_Set() const;
    bool is_check_service_networking_use_permission_Valid() const;

    QString getComputeIdempotencyWindow() const;
    void setComputeIdempotencyWindow(const QString &compute_idempotency_window);
    bool is_compute_idempotency_window_Set() const;
    bool is_compute_idempotency_window_Valid() const;

    QString getConsumer() const;
    void setConsumer(const QString &consumer);
    bool is_consumer_Set() const;
    bool is_consumer_Valid() const;

    QString getConsumerNetwork() const;
    void setConsumerNetwork(const QString &consumer_network);
    bool is_consumer_network_Set() const;
    bool is_consumer_network_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getInternalRange() const;
    void setInternalRange(const QString &internal_range);
    bool is_internal_range_Set() const;
    bool is_internal_range_Valid() const;

    qint32 getIpPrefixLength() const;
    void setIpPrefixLength(const qint32 &ip_prefix_length);
    bool is_ip_prefix_length_Set() const;
    bool is_ip_prefix_length_Valid() const;

    QString getOutsideAllocationPublicIpRange() const;
    void setOutsideAllocationPublicIpRange(const QString &outside_allocation_public_ip_range);
    bool is_outside_allocation_public_ip_range_Set() const;
    bool is_outside_allocation_public_ip_range_Valid() const;

    QString getPrivateIpv6GoogleAccess() const;
    void setPrivateIpv6GoogleAccess(const QString &private_ipv6_google_access);
    bool is_private_ipv6_google_access_Set() const;
    bool is_private_ipv6_google_access_Valid() const;

    QString getPurpose() const;
    void setPurpose(const QString &purpose);
    bool is_purpose_Set() const;
    bool is_purpose_Valid() const;

    QString getRegion() const;
    void setRegion(const QString &region);
    bool is_region_Set() const;
    bool is_region_Valid() const;

    QString getRequestedAddress() const;
    void setRequestedAddress(const QString &requested_address);
    bool is_requested_address_Set() const;
    bool is_requested_address_Valid() const;

    QList<QString> getRequestedRanges() const;
    void setRequestedRanges(const QList<QString> &requested_ranges);
    bool is_requested_ranges_Set() const;
    bool is_requested_ranges_Valid() const;

    QString getRole() const;
    void setRole(const QString &role);
    bool is_role_Set() const;
    bool is_role_Valid() const;

    QList<OAISecondaryIpRangeSpec> getSecondaryIpRangeSpecs() const;
    void setSecondaryIpRangeSpecs(const QList<OAISecondaryIpRangeSpec> &secondary_ip_range_specs);
    bool is_secondary_ip_range_specs_Set() const;
    bool is_secondary_ip_range_specs_Valid() const;

    QString getSubnetwork() const;
    void setSubnetwork(const QString &subnetwork);
    bool is_subnetwork_Set() const;
    bool is_subnetwork_Valid() const;

    QList<QString> getSubnetworkUsers() const;
    void setSubnetworkUsers(const QList<QString> &subnetwork_users);
    bool is_subnetwork_users_Set() const;
    bool is_subnetwork_users_Valid() const;

    bool isUseCustomComputeIdempotencyWindow() const;
    void setUseCustomComputeIdempotencyWindow(const bool &use_custom_compute_idempotency_window);
    bool is_use_custom_compute_idempotency_window_Set() const;
    bool is_use_custom_compute_idempotency_window_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_allow_subnet_cidr_routes_overlap;
    bool m_allow_subnet_cidr_routes_overlap_isSet;
    bool m_allow_subnet_cidr_routes_overlap_isValid;

    bool m_check_service_networking_use_permission;
    bool m_check_service_networking_use_permission_isSet;
    bool m_check_service_networking_use_permission_isValid;

    QString m_compute_idempotency_window;
    bool m_compute_idempotency_window_isSet;
    bool m_compute_idempotency_window_isValid;

    QString m_consumer;
    bool m_consumer_isSet;
    bool m_consumer_isValid;

    QString m_consumer_network;
    bool m_consumer_network_isSet;
    bool m_consumer_network_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_internal_range;
    bool m_internal_range_isSet;
    bool m_internal_range_isValid;

    qint32 m_ip_prefix_length;
    bool m_ip_prefix_length_isSet;
    bool m_ip_prefix_length_isValid;

    QString m_outside_allocation_public_ip_range;
    bool m_outside_allocation_public_ip_range_isSet;
    bool m_outside_allocation_public_ip_range_isValid;

    QString m_private_ipv6_google_access;
    bool m_private_ipv6_google_access_isSet;
    bool m_private_ipv6_google_access_isValid;

    QString m_purpose;
    bool m_purpose_isSet;
    bool m_purpose_isValid;

    QString m_region;
    bool m_region_isSet;
    bool m_region_isValid;

    QString m_requested_address;
    bool m_requested_address_isSet;
    bool m_requested_address_isValid;

    QList<QString> m_requested_ranges;
    bool m_requested_ranges_isSet;
    bool m_requested_ranges_isValid;

    QString m_role;
    bool m_role_isSet;
    bool m_role_isValid;

    QList<OAISecondaryIpRangeSpec> m_secondary_ip_range_specs;
    bool m_secondary_ip_range_specs_isSet;
    bool m_secondary_ip_range_specs_isValid;

    QString m_subnetwork;
    bool m_subnetwork_isSet;
    bool m_subnetwork_isValid;

    QList<QString> m_subnetwork_users;
    bool m_subnetwork_users_isSet;
    bool m_subnetwork_users_isValid;

    bool m_use_custom_compute_idempotency_window;
    bool m_use_custom_compute_idempotency_window_isSet;
    bool m_use_custom_compute_idempotency_window_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAddSubnetworkRequest)

#endif // OAIAddSubnetworkRequest_H
