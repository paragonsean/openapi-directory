/**
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIValidateConsumerConfigResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIValidateConsumerConfigResponse::OAIValidateConsumerConfigResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIValidateConsumerConfigResponse::OAIValidateConsumerConfigResponse() {
    this->initializeModel();
}

OAIValidateConsumerConfigResponse::~OAIValidateConsumerConfigResponse() {}

void OAIValidateConsumerConfigResponse::initializeModel() {

    m_existing_subnetwork_candidates_isSet = false;
    m_existing_subnetwork_candidates_isValid = false;

    m_is_valid_isSet = false;
    m_is_valid_isValid = false;

    m_validation_error_isSet = false;
    m_validation_error_isValid = false;
}

void OAIValidateConsumerConfigResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIValidateConsumerConfigResponse::fromJsonObject(QJsonObject json) {

    m_existing_subnetwork_candidates_isValid = ::OpenAPI::fromJsonValue(m_existing_subnetwork_candidates, json[QString("existingSubnetworkCandidates")]);
    m_existing_subnetwork_candidates_isSet = !json[QString("existingSubnetworkCandidates")].isNull() && m_existing_subnetwork_candidates_isValid;

    m_is_valid_isValid = ::OpenAPI::fromJsonValue(m_is_valid, json[QString("isValid")]);
    m_is_valid_isSet = !json[QString("isValid")].isNull() && m_is_valid_isValid;

    m_validation_error_isValid = ::OpenAPI::fromJsonValue(m_validation_error, json[QString("validationError")]);
    m_validation_error_isSet = !json[QString("validationError")].isNull() && m_validation_error_isValid;
}

QString OAIValidateConsumerConfigResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIValidateConsumerConfigResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_existing_subnetwork_candidates.size() > 0) {
        obj.insert(QString("existingSubnetworkCandidates"), ::OpenAPI::toJsonValue(m_existing_subnetwork_candidates));
    }
    if (m_is_valid_isSet) {
        obj.insert(QString("isValid"), ::OpenAPI::toJsonValue(m_is_valid));
    }
    if (m_validation_error_isSet) {
        obj.insert(QString("validationError"), ::OpenAPI::toJsonValue(m_validation_error));
    }
    return obj;
}

QList<OAISubnetwork> OAIValidateConsumerConfigResponse::getExistingSubnetworkCandidates() const {
    return m_existing_subnetwork_candidates;
}
void OAIValidateConsumerConfigResponse::setExistingSubnetworkCandidates(const QList<OAISubnetwork> &existing_subnetwork_candidates) {
    m_existing_subnetwork_candidates = existing_subnetwork_candidates;
    m_existing_subnetwork_candidates_isSet = true;
}

bool OAIValidateConsumerConfigResponse::is_existing_subnetwork_candidates_Set() const{
    return m_existing_subnetwork_candidates_isSet;
}

bool OAIValidateConsumerConfigResponse::is_existing_subnetwork_candidates_Valid() const{
    return m_existing_subnetwork_candidates_isValid;
}

bool OAIValidateConsumerConfigResponse::isIsValid() const {
    return m_is_valid;
}
void OAIValidateConsumerConfigResponse::setIsValid(const bool &is_valid) {
    m_is_valid = is_valid;
    m_is_valid_isSet = true;
}

bool OAIValidateConsumerConfigResponse::is_is_valid_Set() const{
    return m_is_valid_isSet;
}

bool OAIValidateConsumerConfigResponse::is_is_valid_Valid() const{
    return m_is_valid_isValid;
}

QString OAIValidateConsumerConfigResponse::getValidationError() const {
    return m_validation_error;
}
void OAIValidateConsumerConfigResponse::setValidationError(const QString &validation_error) {
    m_validation_error = validation_error;
    m_validation_error_isSet = true;
}

bool OAIValidateConsumerConfigResponse::is_validation_error_Set() const{
    return m_validation_error_isSet;
}

bool OAIValidateConsumerConfigResponse::is_validation_error_Valid() const{
    return m_validation_error_isValid;
}

bool OAIValidateConsumerConfigResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_existing_subnetwork_candidates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_valid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_error_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIValidateConsumerConfigResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
