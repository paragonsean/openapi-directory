/**
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddDnsRecordSetRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddDnsRecordSetRequest::OAIAddDnsRecordSetRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddDnsRecordSetRequest::OAIAddDnsRecordSetRequest() {
    this->initializeModel();
}

OAIAddDnsRecordSetRequest::~OAIAddDnsRecordSetRequest() {}

void OAIAddDnsRecordSetRequest::initializeModel() {

    m_consumer_network_isSet = false;
    m_consumer_network_isValid = false;

    m_dns_record_set_isSet = false;
    m_dns_record_set_isValid = false;

    m_zone_isSet = false;
    m_zone_isValid = false;
}

void OAIAddDnsRecordSetRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddDnsRecordSetRequest::fromJsonObject(QJsonObject json) {

    m_consumer_network_isValid = ::OpenAPI::fromJsonValue(m_consumer_network, json[QString("consumerNetwork")]);
    m_consumer_network_isSet = !json[QString("consumerNetwork")].isNull() && m_consumer_network_isValid;

    m_dns_record_set_isValid = ::OpenAPI::fromJsonValue(m_dns_record_set, json[QString("dnsRecordSet")]);
    m_dns_record_set_isSet = !json[QString("dnsRecordSet")].isNull() && m_dns_record_set_isValid;

    m_zone_isValid = ::OpenAPI::fromJsonValue(m_zone, json[QString("zone")]);
    m_zone_isSet = !json[QString("zone")].isNull() && m_zone_isValid;
}

QString OAIAddDnsRecordSetRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddDnsRecordSetRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_consumer_network_isSet) {
        obj.insert(QString("consumerNetwork"), ::OpenAPI::toJsonValue(m_consumer_network));
    }
    if (m_dns_record_set.isSet()) {
        obj.insert(QString("dnsRecordSet"), ::OpenAPI::toJsonValue(m_dns_record_set));
    }
    if (m_zone_isSet) {
        obj.insert(QString("zone"), ::OpenAPI::toJsonValue(m_zone));
    }
    return obj;
}

QString OAIAddDnsRecordSetRequest::getConsumerNetwork() const {
    return m_consumer_network;
}
void OAIAddDnsRecordSetRequest::setConsumerNetwork(const QString &consumer_network) {
    m_consumer_network = consumer_network;
    m_consumer_network_isSet = true;
}

bool OAIAddDnsRecordSetRequest::is_consumer_network_Set() const{
    return m_consumer_network_isSet;
}

bool OAIAddDnsRecordSetRequest::is_consumer_network_Valid() const{
    return m_consumer_network_isValid;
}

OAIDnsRecordSet OAIAddDnsRecordSetRequest::getDnsRecordSet() const {
    return m_dns_record_set;
}
void OAIAddDnsRecordSetRequest::setDnsRecordSet(const OAIDnsRecordSet &dns_record_set) {
    m_dns_record_set = dns_record_set;
    m_dns_record_set_isSet = true;
}

bool OAIAddDnsRecordSetRequest::is_dns_record_set_Set() const{
    return m_dns_record_set_isSet;
}

bool OAIAddDnsRecordSetRequest::is_dns_record_set_Valid() const{
    return m_dns_record_set_isValid;
}

QString OAIAddDnsRecordSetRequest::getZone() const {
    return m_zone;
}
void OAIAddDnsRecordSetRequest::setZone(const QString &zone) {
    m_zone = zone;
    m_zone_isSet = true;
}

bool OAIAddDnsRecordSetRequest::is_zone_Set() const{
    return m_zone_isSet;
}

bool OAIAddDnsRecordSetRequest::is_zone_Valid() const{
    return m_zone_isValid;
}

bool OAIAddDnsRecordSetRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consumer_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_record_set.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddDnsRecordSetRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
