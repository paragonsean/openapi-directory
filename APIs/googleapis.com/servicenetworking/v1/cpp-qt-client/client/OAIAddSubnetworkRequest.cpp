/**
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddSubnetworkRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddSubnetworkRequest::OAIAddSubnetworkRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddSubnetworkRequest::OAIAddSubnetworkRequest() {
    this->initializeModel();
}

OAIAddSubnetworkRequest::~OAIAddSubnetworkRequest() {}

void OAIAddSubnetworkRequest::initializeModel() {

    m_allow_subnet_cidr_routes_overlap_isSet = false;
    m_allow_subnet_cidr_routes_overlap_isValid = false;

    m_check_service_networking_use_permission_isSet = false;
    m_check_service_networking_use_permission_isValid = false;

    m_compute_idempotency_window_isSet = false;
    m_compute_idempotency_window_isValid = false;

    m_consumer_isSet = false;
    m_consumer_isValid = false;

    m_consumer_network_isSet = false;
    m_consumer_network_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_internal_range_isSet = false;
    m_internal_range_isValid = false;

    m_ip_prefix_length_isSet = false;
    m_ip_prefix_length_isValid = false;

    m_outside_allocation_public_ip_range_isSet = false;
    m_outside_allocation_public_ip_range_isValid = false;

    m_private_ipv6_google_access_isSet = false;
    m_private_ipv6_google_access_isValid = false;

    m_purpose_isSet = false;
    m_purpose_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_requested_address_isSet = false;
    m_requested_address_isValid = false;

    m_requested_ranges_isSet = false;
    m_requested_ranges_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_secondary_ip_range_specs_isSet = false;
    m_secondary_ip_range_specs_isValid = false;

    m_subnetwork_isSet = false;
    m_subnetwork_isValid = false;

    m_subnetwork_users_isSet = false;
    m_subnetwork_users_isValid = false;

    m_use_custom_compute_idempotency_window_isSet = false;
    m_use_custom_compute_idempotency_window_isValid = false;
}

void OAIAddSubnetworkRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddSubnetworkRequest::fromJsonObject(QJsonObject json) {

    m_allow_subnet_cidr_routes_overlap_isValid = ::OpenAPI::fromJsonValue(m_allow_subnet_cidr_routes_overlap, json[QString("allowSubnetCidrRoutesOverlap")]);
    m_allow_subnet_cidr_routes_overlap_isSet = !json[QString("allowSubnetCidrRoutesOverlap")].isNull() && m_allow_subnet_cidr_routes_overlap_isValid;

    m_check_service_networking_use_permission_isValid = ::OpenAPI::fromJsonValue(m_check_service_networking_use_permission, json[QString("checkServiceNetworkingUsePermission")]);
    m_check_service_networking_use_permission_isSet = !json[QString("checkServiceNetworkingUsePermission")].isNull() && m_check_service_networking_use_permission_isValid;

    m_compute_idempotency_window_isValid = ::OpenAPI::fromJsonValue(m_compute_idempotency_window, json[QString("computeIdempotencyWindow")]);
    m_compute_idempotency_window_isSet = !json[QString("computeIdempotencyWindow")].isNull() && m_compute_idempotency_window_isValid;

    m_consumer_isValid = ::OpenAPI::fromJsonValue(m_consumer, json[QString("consumer")]);
    m_consumer_isSet = !json[QString("consumer")].isNull() && m_consumer_isValid;

    m_consumer_network_isValid = ::OpenAPI::fromJsonValue(m_consumer_network, json[QString("consumerNetwork")]);
    m_consumer_network_isSet = !json[QString("consumerNetwork")].isNull() && m_consumer_network_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_internal_range_isValid = ::OpenAPI::fromJsonValue(m_internal_range, json[QString("internalRange")]);
    m_internal_range_isSet = !json[QString("internalRange")].isNull() && m_internal_range_isValid;

    m_ip_prefix_length_isValid = ::OpenAPI::fromJsonValue(m_ip_prefix_length, json[QString("ipPrefixLength")]);
    m_ip_prefix_length_isSet = !json[QString("ipPrefixLength")].isNull() && m_ip_prefix_length_isValid;

    m_outside_allocation_public_ip_range_isValid = ::OpenAPI::fromJsonValue(m_outside_allocation_public_ip_range, json[QString("outsideAllocationPublicIpRange")]);
    m_outside_allocation_public_ip_range_isSet = !json[QString("outsideAllocationPublicIpRange")].isNull() && m_outside_allocation_public_ip_range_isValid;

    m_private_ipv6_google_access_isValid = ::OpenAPI::fromJsonValue(m_private_ipv6_google_access, json[QString("privateIpv6GoogleAccess")]);
    m_private_ipv6_google_access_isSet = !json[QString("privateIpv6GoogleAccess")].isNull() && m_private_ipv6_google_access_isValid;

    m_purpose_isValid = ::OpenAPI::fromJsonValue(m_purpose, json[QString("purpose")]);
    m_purpose_isSet = !json[QString("purpose")].isNull() && m_purpose_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_requested_address_isValid = ::OpenAPI::fromJsonValue(m_requested_address, json[QString("requestedAddress")]);
    m_requested_address_isSet = !json[QString("requestedAddress")].isNull() && m_requested_address_isValid;

    m_requested_ranges_isValid = ::OpenAPI::fromJsonValue(m_requested_ranges, json[QString("requestedRanges")]);
    m_requested_ranges_isSet = !json[QString("requestedRanges")].isNull() && m_requested_ranges_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_secondary_ip_range_specs_isValid = ::OpenAPI::fromJsonValue(m_secondary_ip_range_specs, json[QString("secondaryIpRangeSpecs")]);
    m_secondary_ip_range_specs_isSet = !json[QString("secondaryIpRangeSpecs")].isNull() && m_secondary_ip_range_specs_isValid;

    m_subnetwork_isValid = ::OpenAPI::fromJsonValue(m_subnetwork, json[QString("subnetwork")]);
    m_subnetwork_isSet = !json[QString("subnetwork")].isNull() && m_subnetwork_isValid;

    m_subnetwork_users_isValid = ::OpenAPI::fromJsonValue(m_subnetwork_users, json[QString("subnetworkUsers")]);
    m_subnetwork_users_isSet = !json[QString("subnetworkUsers")].isNull() && m_subnetwork_users_isValid;

    m_use_custom_compute_idempotency_window_isValid = ::OpenAPI::fromJsonValue(m_use_custom_compute_idempotency_window, json[QString("useCustomComputeIdempotencyWindow")]);
    m_use_custom_compute_idempotency_window_isSet = !json[QString("useCustomComputeIdempotencyWindow")].isNull() && m_use_custom_compute_idempotency_window_isValid;
}

QString OAIAddSubnetworkRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddSubnetworkRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_subnet_cidr_routes_overlap_isSet) {
        obj.insert(QString("allowSubnetCidrRoutesOverlap"), ::OpenAPI::toJsonValue(m_allow_subnet_cidr_routes_overlap));
    }
    if (m_check_service_networking_use_permission_isSet) {
        obj.insert(QString("checkServiceNetworkingUsePermission"), ::OpenAPI::toJsonValue(m_check_service_networking_use_permission));
    }
    if (m_compute_idempotency_window_isSet) {
        obj.insert(QString("computeIdempotencyWindow"), ::OpenAPI::toJsonValue(m_compute_idempotency_window));
    }
    if (m_consumer_isSet) {
        obj.insert(QString("consumer"), ::OpenAPI::toJsonValue(m_consumer));
    }
    if (m_consumer_network_isSet) {
        obj.insert(QString("consumerNetwork"), ::OpenAPI::toJsonValue(m_consumer_network));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_internal_range_isSet) {
        obj.insert(QString("internalRange"), ::OpenAPI::toJsonValue(m_internal_range));
    }
    if (m_ip_prefix_length_isSet) {
        obj.insert(QString("ipPrefixLength"), ::OpenAPI::toJsonValue(m_ip_prefix_length));
    }
    if (m_outside_allocation_public_ip_range_isSet) {
        obj.insert(QString("outsideAllocationPublicIpRange"), ::OpenAPI::toJsonValue(m_outside_allocation_public_ip_range));
    }
    if (m_private_ipv6_google_access_isSet) {
        obj.insert(QString("privateIpv6GoogleAccess"), ::OpenAPI::toJsonValue(m_private_ipv6_google_access));
    }
    if (m_purpose_isSet) {
        obj.insert(QString("purpose"), ::OpenAPI::toJsonValue(m_purpose));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_requested_address_isSet) {
        obj.insert(QString("requestedAddress"), ::OpenAPI::toJsonValue(m_requested_address));
    }
    if (m_requested_ranges.size() > 0) {
        obj.insert(QString("requestedRanges"), ::OpenAPI::toJsonValue(m_requested_ranges));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_secondary_ip_range_specs.size() > 0) {
        obj.insert(QString("secondaryIpRangeSpecs"), ::OpenAPI::toJsonValue(m_secondary_ip_range_specs));
    }
    if (m_subnetwork_isSet) {
        obj.insert(QString("subnetwork"), ::OpenAPI::toJsonValue(m_subnetwork));
    }
    if (m_subnetwork_users.size() > 0) {
        obj.insert(QString("subnetworkUsers"), ::OpenAPI::toJsonValue(m_subnetwork_users));
    }
    if (m_use_custom_compute_idempotency_window_isSet) {
        obj.insert(QString("useCustomComputeIdempotencyWindow"), ::OpenAPI::toJsonValue(m_use_custom_compute_idempotency_window));
    }
    return obj;
}

bool OAIAddSubnetworkRequest::isAllowSubnetCidrRoutesOverlap() const {
    return m_allow_subnet_cidr_routes_overlap;
}
void OAIAddSubnetworkRequest::setAllowSubnetCidrRoutesOverlap(const bool &allow_subnet_cidr_routes_overlap) {
    m_allow_subnet_cidr_routes_overlap = allow_subnet_cidr_routes_overlap;
    m_allow_subnet_cidr_routes_overlap_isSet = true;
}

bool OAIAddSubnetworkRequest::is_allow_subnet_cidr_routes_overlap_Set() const{
    return m_allow_subnet_cidr_routes_overlap_isSet;
}

bool OAIAddSubnetworkRequest::is_allow_subnet_cidr_routes_overlap_Valid() const{
    return m_allow_subnet_cidr_routes_overlap_isValid;
}

bool OAIAddSubnetworkRequest::isCheckServiceNetworkingUsePermission() const {
    return m_check_service_networking_use_permission;
}
void OAIAddSubnetworkRequest::setCheckServiceNetworkingUsePermission(const bool &check_service_networking_use_permission) {
    m_check_service_networking_use_permission = check_service_networking_use_permission;
    m_check_service_networking_use_permission_isSet = true;
}

bool OAIAddSubnetworkRequest::is_check_service_networking_use_permission_Set() const{
    return m_check_service_networking_use_permission_isSet;
}

bool OAIAddSubnetworkRequest::is_check_service_networking_use_permission_Valid() const{
    return m_check_service_networking_use_permission_isValid;
}

QString OAIAddSubnetworkRequest::getComputeIdempotencyWindow() const {
    return m_compute_idempotency_window;
}
void OAIAddSubnetworkRequest::setComputeIdempotencyWindow(const QString &compute_idempotency_window) {
    m_compute_idempotency_window = compute_idempotency_window;
    m_compute_idempotency_window_isSet = true;
}

bool OAIAddSubnetworkRequest::is_compute_idempotency_window_Set() const{
    return m_compute_idempotency_window_isSet;
}

bool OAIAddSubnetworkRequest::is_compute_idempotency_window_Valid() const{
    return m_compute_idempotency_window_isValid;
}

QString OAIAddSubnetworkRequest::getConsumer() const {
    return m_consumer;
}
void OAIAddSubnetworkRequest::setConsumer(const QString &consumer) {
    m_consumer = consumer;
    m_consumer_isSet = true;
}

bool OAIAddSubnetworkRequest::is_consumer_Set() const{
    return m_consumer_isSet;
}

bool OAIAddSubnetworkRequest::is_consumer_Valid() const{
    return m_consumer_isValid;
}

QString OAIAddSubnetworkRequest::getConsumerNetwork() const {
    return m_consumer_network;
}
void OAIAddSubnetworkRequest::setConsumerNetwork(const QString &consumer_network) {
    m_consumer_network = consumer_network;
    m_consumer_network_isSet = true;
}

bool OAIAddSubnetworkRequest::is_consumer_network_Set() const{
    return m_consumer_network_isSet;
}

bool OAIAddSubnetworkRequest::is_consumer_network_Valid() const{
    return m_consumer_network_isValid;
}

QString OAIAddSubnetworkRequest::getDescription() const {
    return m_description;
}
void OAIAddSubnetworkRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAddSubnetworkRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAddSubnetworkRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAddSubnetworkRequest::getInternalRange() const {
    return m_internal_range;
}
void OAIAddSubnetworkRequest::setInternalRange(const QString &internal_range) {
    m_internal_range = internal_range;
    m_internal_range_isSet = true;
}

bool OAIAddSubnetworkRequest::is_internal_range_Set() const{
    return m_internal_range_isSet;
}

bool OAIAddSubnetworkRequest::is_internal_range_Valid() const{
    return m_internal_range_isValid;
}

qint32 OAIAddSubnetworkRequest::getIpPrefixLength() const {
    return m_ip_prefix_length;
}
void OAIAddSubnetworkRequest::setIpPrefixLength(const qint32 &ip_prefix_length) {
    m_ip_prefix_length = ip_prefix_length;
    m_ip_prefix_length_isSet = true;
}

bool OAIAddSubnetworkRequest::is_ip_prefix_length_Set() const{
    return m_ip_prefix_length_isSet;
}

bool OAIAddSubnetworkRequest::is_ip_prefix_length_Valid() const{
    return m_ip_prefix_length_isValid;
}

QString OAIAddSubnetworkRequest::getOutsideAllocationPublicIpRange() const {
    return m_outside_allocation_public_ip_range;
}
void OAIAddSubnetworkRequest::setOutsideAllocationPublicIpRange(const QString &outside_allocation_public_ip_range) {
    m_outside_allocation_public_ip_range = outside_allocation_public_ip_range;
    m_outside_allocation_public_ip_range_isSet = true;
}

bool OAIAddSubnetworkRequest::is_outside_allocation_public_ip_range_Set() const{
    return m_outside_allocation_public_ip_range_isSet;
}

bool OAIAddSubnetworkRequest::is_outside_allocation_public_ip_range_Valid() const{
    return m_outside_allocation_public_ip_range_isValid;
}

QString OAIAddSubnetworkRequest::getPrivateIpv6GoogleAccess() const {
    return m_private_ipv6_google_access;
}
void OAIAddSubnetworkRequest::setPrivateIpv6GoogleAccess(const QString &private_ipv6_google_access) {
    m_private_ipv6_google_access = private_ipv6_google_access;
    m_private_ipv6_google_access_isSet = true;
}

bool OAIAddSubnetworkRequest::is_private_ipv6_google_access_Set() const{
    return m_private_ipv6_google_access_isSet;
}

bool OAIAddSubnetworkRequest::is_private_ipv6_google_access_Valid() const{
    return m_private_ipv6_google_access_isValid;
}

QString OAIAddSubnetworkRequest::getPurpose() const {
    return m_purpose;
}
void OAIAddSubnetworkRequest::setPurpose(const QString &purpose) {
    m_purpose = purpose;
    m_purpose_isSet = true;
}

bool OAIAddSubnetworkRequest::is_purpose_Set() const{
    return m_purpose_isSet;
}

bool OAIAddSubnetworkRequest::is_purpose_Valid() const{
    return m_purpose_isValid;
}

QString OAIAddSubnetworkRequest::getRegion() const {
    return m_region;
}
void OAIAddSubnetworkRequest::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIAddSubnetworkRequest::is_region_Set() const{
    return m_region_isSet;
}

bool OAIAddSubnetworkRequest::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIAddSubnetworkRequest::getRequestedAddress() const {
    return m_requested_address;
}
void OAIAddSubnetworkRequest::setRequestedAddress(const QString &requested_address) {
    m_requested_address = requested_address;
    m_requested_address_isSet = true;
}

bool OAIAddSubnetworkRequest::is_requested_address_Set() const{
    return m_requested_address_isSet;
}

bool OAIAddSubnetworkRequest::is_requested_address_Valid() const{
    return m_requested_address_isValid;
}

QList<QString> OAIAddSubnetworkRequest::getRequestedRanges() const {
    return m_requested_ranges;
}
void OAIAddSubnetworkRequest::setRequestedRanges(const QList<QString> &requested_ranges) {
    m_requested_ranges = requested_ranges;
    m_requested_ranges_isSet = true;
}

bool OAIAddSubnetworkRequest::is_requested_ranges_Set() const{
    return m_requested_ranges_isSet;
}

bool OAIAddSubnetworkRequest::is_requested_ranges_Valid() const{
    return m_requested_ranges_isValid;
}

QString OAIAddSubnetworkRequest::getRole() const {
    return m_role;
}
void OAIAddSubnetworkRequest::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIAddSubnetworkRequest::is_role_Set() const{
    return m_role_isSet;
}

bool OAIAddSubnetworkRequest::is_role_Valid() const{
    return m_role_isValid;
}

QList<OAISecondaryIpRangeSpec> OAIAddSubnetworkRequest::getSecondaryIpRangeSpecs() const {
    return m_secondary_ip_range_specs;
}
void OAIAddSubnetworkRequest::setSecondaryIpRangeSpecs(const QList<OAISecondaryIpRangeSpec> &secondary_ip_range_specs) {
    m_secondary_ip_range_specs = secondary_ip_range_specs;
    m_secondary_ip_range_specs_isSet = true;
}

bool OAIAddSubnetworkRequest::is_secondary_ip_range_specs_Set() const{
    return m_secondary_ip_range_specs_isSet;
}

bool OAIAddSubnetworkRequest::is_secondary_ip_range_specs_Valid() const{
    return m_secondary_ip_range_specs_isValid;
}

QString OAIAddSubnetworkRequest::getSubnetwork() const {
    return m_subnetwork;
}
void OAIAddSubnetworkRequest::setSubnetwork(const QString &subnetwork) {
    m_subnetwork = subnetwork;
    m_subnetwork_isSet = true;
}

bool OAIAddSubnetworkRequest::is_subnetwork_Set() const{
    return m_subnetwork_isSet;
}

bool OAIAddSubnetworkRequest::is_subnetwork_Valid() const{
    return m_subnetwork_isValid;
}

QList<QString> OAIAddSubnetworkRequest::getSubnetworkUsers() const {
    return m_subnetwork_users;
}
void OAIAddSubnetworkRequest::setSubnetworkUsers(const QList<QString> &subnetwork_users) {
    m_subnetwork_users = subnetwork_users;
    m_subnetwork_users_isSet = true;
}

bool OAIAddSubnetworkRequest::is_subnetwork_users_Set() const{
    return m_subnetwork_users_isSet;
}

bool OAIAddSubnetworkRequest::is_subnetwork_users_Valid() const{
    return m_subnetwork_users_isValid;
}

bool OAIAddSubnetworkRequest::isUseCustomComputeIdempotencyWindow() const {
    return m_use_custom_compute_idempotency_window;
}
void OAIAddSubnetworkRequest::setUseCustomComputeIdempotencyWindow(const bool &use_custom_compute_idempotency_window) {
    m_use_custom_compute_idempotency_window = use_custom_compute_idempotency_window;
    m_use_custom_compute_idempotency_window_isSet = true;
}

bool OAIAddSubnetworkRequest::is_use_custom_compute_idempotency_window_Set() const{
    return m_use_custom_compute_idempotency_window_isSet;
}

bool OAIAddSubnetworkRequest::is_use_custom_compute_idempotency_window_Valid() const{
    return m_use_custom_compute_idempotency_window_isValid;
}

bool OAIAddSubnetworkRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_subnet_cidr_routes_overlap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_service_networking_use_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compute_idempotency_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumer_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_prefix_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outside_allocation_public_ip_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_ipv6_google_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purpose_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_ip_range_specs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnetwork_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnetwork_users.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_custom_compute_idempotency_window_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddSubnetworkRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
