/**
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIField::OAIField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIField::OAIField() {
    this->initializeModel();
}

OAIField::~OAIField() {}

void OAIField::initializeModel() {

    m_cardinality_isSet = false;
    m_cardinality_isValid = false;

    m_default_value_isSet = false;
    m_default_value_isValid = false;

    m_json_name_isSet = false;
    m_json_name_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_oneof_index_isSet = false;
    m_oneof_index_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_packed_isSet = false;
    m_packed_isValid = false;

    m_type_url_isSet = false;
    m_type_url_isValid = false;
}

void OAIField::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIField::fromJsonObject(QJsonObject json) {

    m_cardinality_isValid = ::OpenAPI::fromJsonValue(m_cardinality, json[QString("cardinality")]);
    m_cardinality_isSet = !json[QString("cardinality")].isNull() && m_cardinality_isValid;

    m_default_value_isValid = ::OpenAPI::fromJsonValue(m_default_value, json[QString("defaultValue")]);
    m_default_value_isSet = !json[QString("defaultValue")].isNull() && m_default_value_isValid;

    m_json_name_isValid = ::OpenAPI::fromJsonValue(m_json_name, json[QString("jsonName")]);
    m_json_name_isSet = !json[QString("jsonName")].isNull() && m_json_name_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_oneof_index_isValid = ::OpenAPI::fromJsonValue(m_oneof_index, json[QString("oneofIndex")]);
    m_oneof_index_isSet = !json[QString("oneofIndex")].isNull() && m_oneof_index_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_packed_isValid = ::OpenAPI::fromJsonValue(m_packed, json[QString("packed")]);
    m_packed_isSet = !json[QString("packed")].isNull() && m_packed_isValid;

    m_type_url_isValid = ::OpenAPI::fromJsonValue(m_type_url, json[QString("typeUrl")]);
    m_type_url_isSet = !json[QString("typeUrl")].isNull() && m_type_url_isValid;
}

QString OAIField::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIField::asJsonObject() const {
    QJsonObject obj;
    if (m_cardinality_isSet) {
        obj.insert(QString("cardinality"), ::OpenAPI::toJsonValue(m_cardinality));
    }
    if (m_default_value_isSet) {
        obj.insert(QString("defaultValue"), ::OpenAPI::toJsonValue(m_default_value));
    }
    if (m_json_name_isSet) {
        obj.insert(QString("jsonName"), ::OpenAPI::toJsonValue(m_json_name));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_oneof_index_isSet) {
        obj.insert(QString("oneofIndex"), ::OpenAPI::toJsonValue(m_oneof_index));
    }
    if (m_options.size() > 0) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_packed_isSet) {
        obj.insert(QString("packed"), ::OpenAPI::toJsonValue(m_packed));
    }
    if (m_type_url_isSet) {
        obj.insert(QString("typeUrl"), ::OpenAPI::toJsonValue(m_type_url));
    }
    return obj;
}

QString OAIField::getCardinality() const {
    return m_cardinality;
}
void OAIField::setCardinality(const QString &cardinality) {
    m_cardinality = cardinality;
    m_cardinality_isSet = true;
}

bool OAIField::is_cardinality_Set() const{
    return m_cardinality_isSet;
}

bool OAIField::is_cardinality_Valid() const{
    return m_cardinality_isValid;
}

QString OAIField::getDefaultValue() const {
    return m_default_value;
}
void OAIField::setDefaultValue(const QString &default_value) {
    m_default_value = default_value;
    m_default_value_isSet = true;
}

bool OAIField::is_default_value_Set() const{
    return m_default_value_isSet;
}

bool OAIField::is_default_value_Valid() const{
    return m_default_value_isValid;
}

QString OAIField::getJsonName() const {
    return m_json_name;
}
void OAIField::setJsonName(const QString &json_name) {
    m_json_name = json_name;
    m_json_name_isSet = true;
}

bool OAIField::is_json_name_Set() const{
    return m_json_name_isSet;
}

bool OAIField::is_json_name_Valid() const{
    return m_json_name_isValid;
}

QString OAIField::getKind() const {
    return m_kind;
}
void OAIField::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIField::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIField::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIField::getName() const {
    return m_name;
}
void OAIField::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIField::is_name_Set() const{
    return m_name_isSet;
}

bool OAIField::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIField::getNumber() const {
    return m_number;
}
void OAIField::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIField::is_number_Set() const{
    return m_number_isSet;
}

bool OAIField::is_number_Valid() const{
    return m_number_isValid;
}

qint32 OAIField::getOneofIndex() const {
    return m_oneof_index;
}
void OAIField::setOneofIndex(const qint32 &oneof_index) {
    m_oneof_index = oneof_index;
    m_oneof_index_isSet = true;
}

bool OAIField::is_oneof_index_Set() const{
    return m_oneof_index_isSet;
}

bool OAIField::is_oneof_index_Valid() const{
    return m_oneof_index_isValid;
}

QList<OAIOption> OAIField::getOptions() const {
    return m_options;
}
void OAIField::setOptions(const QList<OAIOption> &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIField::is_options_Set() const{
    return m_options_isSet;
}

bool OAIField::is_options_Valid() const{
    return m_options_isValid;
}

bool OAIField::isPacked() const {
    return m_packed;
}
void OAIField::setPacked(const bool &packed) {
    m_packed = packed;
    m_packed_isSet = true;
}

bool OAIField::is_packed_Set() const{
    return m_packed_isSet;
}

bool OAIField::is_packed_Valid() const{
    return m_packed_isValid;
}

QString OAIField::getTypeUrl() const {
    return m_type_url;
}
void OAIField::setTypeUrl(const QString &type_url) {
    m_type_url = type_url;
    m_type_url_isSet = true;
}

bool OAIField::is_type_url_Set() const{
    return m_type_url_isSet;
}

bool OAIField::is_type_url_Valid() const{
    return m_type_url_isValid;
}

bool OAIField::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cardinality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_json_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oneof_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_packed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIField::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
