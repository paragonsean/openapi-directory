/**
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuotaLimit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuotaLimit::OAIQuotaLimit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuotaLimit::OAIQuotaLimit() {
    this->initializeModel();
}

OAIQuotaLimit::~OAIQuotaLimit() {}

void OAIQuotaLimit::initializeModel() {

    m_default_limit_isSet = false;
    m_default_limit_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_free_tier_isSet = false;
    m_free_tier_isValid = false;

    m_max_limit_isSet = false;
    m_max_limit_isValid = false;

    m_metric_isSet = false;
    m_metric_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIQuotaLimit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuotaLimit::fromJsonObject(QJsonObject json) {

    m_default_limit_isValid = ::OpenAPI::fromJsonValue(m_default_limit, json[QString("defaultLimit")]);
    m_default_limit_isSet = !json[QString("defaultLimit")].isNull() && m_default_limit_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_free_tier_isValid = ::OpenAPI::fromJsonValue(m_free_tier, json[QString("freeTier")]);
    m_free_tier_isSet = !json[QString("freeTier")].isNull() && m_free_tier_isValid;

    m_max_limit_isValid = ::OpenAPI::fromJsonValue(m_max_limit, json[QString("maxLimit")]);
    m_max_limit_isSet = !json[QString("maxLimit")].isNull() && m_max_limit_isValid;

    m_metric_isValid = ::OpenAPI::fromJsonValue(m_metric, json[QString("metric")]);
    m_metric_isSet = !json[QString("metric")].isNull() && m_metric_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAIQuotaLimit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuotaLimit::asJsonObject() const {
    QJsonObject obj;
    if (m_default_limit_isSet) {
        obj.insert(QString("defaultLimit"), ::OpenAPI::toJsonValue(m_default_limit));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_free_tier_isSet) {
        obj.insert(QString("freeTier"), ::OpenAPI::toJsonValue(m_free_tier));
    }
    if (m_max_limit_isSet) {
        obj.insert(QString("maxLimit"), ::OpenAPI::toJsonValue(m_max_limit));
    }
    if (m_metric_isSet) {
        obj.insert(QString("metric"), ::OpenAPI::toJsonValue(m_metric));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QString OAIQuotaLimit::getDefaultLimit() const {
    return m_default_limit;
}
void OAIQuotaLimit::setDefaultLimit(const QString &default_limit) {
    m_default_limit = default_limit;
    m_default_limit_isSet = true;
}

bool OAIQuotaLimit::is_default_limit_Set() const{
    return m_default_limit_isSet;
}

bool OAIQuotaLimit::is_default_limit_Valid() const{
    return m_default_limit_isValid;
}

QString OAIQuotaLimit::getDescription() const {
    return m_description;
}
void OAIQuotaLimit::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIQuotaLimit::is_description_Set() const{
    return m_description_isSet;
}

bool OAIQuotaLimit::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIQuotaLimit::getDisplayName() const {
    return m_display_name;
}
void OAIQuotaLimit::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIQuotaLimit::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIQuotaLimit::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIQuotaLimit::getDuration() const {
    return m_duration;
}
void OAIQuotaLimit::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIQuotaLimit::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIQuotaLimit::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAIQuotaLimit::getFreeTier() const {
    return m_free_tier;
}
void OAIQuotaLimit::setFreeTier(const QString &free_tier) {
    m_free_tier = free_tier;
    m_free_tier_isSet = true;
}

bool OAIQuotaLimit::is_free_tier_Set() const{
    return m_free_tier_isSet;
}

bool OAIQuotaLimit::is_free_tier_Valid() const{
    return m_free_tier_isValid;
}

QString OAIQuotaLimit::getMaxLimit() const {
    return m_max_limit;
}
void OAIQuotaLimit::setMaxLimit(const QString &max_limit) {
    m_max_limit = max_limit;
    m_max_limit_isSet = true;
}

bool OAIQuotaLimit::is_max_limit_Set() const{
    return m_max_limit_isSet;
}

bool OAIQuotaLimit::is_max_limit_Valid() const{
    return m_max_limit_isValid;
}

QString OAIQuotaLimit::getMetric() const {
    return m_metric;
}
void OAIQuotaLimit::setMetric(const QString &metric) {
    m_metric = metric;
    m_metric_isSet = true;
}

bool OAIQuotaLimit::is_metric_Set() const{
    return m_metric_isSet;
}

bool OAIQuotaLimit::is_metric_Valid() const{
    return m_metric_isValid;
}

QString OAIQuotaLimit::getName() const {
    return m_name;
}
void OAIQuotaLimit::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIQuotaLimit::is_name_Set() const{
    return m_name_isSet;
}

bool OAIQuotaLimit::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIQuotaLimit::getUnit() const {
    return m_unit;
}
void OAIQuotaLimit::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIQuotaLimit::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIQuotaLimit::is_unit_Valid() const{
    return m_unit_isValid;
}

QMap<QString, QString> OAIQuotaLimit::getValues() const {
    return m_values;
}
void OAIQuotaLimit::setValues(const QMap<QString, QString> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIQuotaLimit::is_values_Set() const{
    return m_values_isSet;
}

bool OAIQuotaLimit::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIQuotaLimit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_tier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuotaLimit::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
