/**
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackendRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackendRule::OAIBackendRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackendRule::OAIBackendRule() {
    this->initializeModel();
}

OAIBackendRule::~OAIBackendRule() {}

void OAIBackendRule::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_deadline_isSet = false;
    m_deadline_isValid = false;

    m_disable_auth_isSet = false;
    m_disable_auth_isValid = false;

    m_jwt_audience_isSet = false;
    m_jwt_audience_isValid = false;

    m_min_deadline_isSet = false;
    m_min_deadline_isValid = false;

    m_operation_deadline_isSet = false;
    m_operation_deadline_isValid = false;

    m_overrides_by_request_protocol_isSet = false;
    m_overrides_by_request_protocol_isValid = false;

    m_path_translation_isSet = false;
    m_path_translation_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_selector_isSet = false;
    m_selector_isValid = false;
}

void OAIBackendRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackendRule::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_deadline_isValid = ::OpenAPI::fromJsonValue(m_deadline, json[QString("deadline")]);
    m_deadline_isSet = !json[QString("deadline")].isNull() && m_deadline_isValid;

    m_disable_auth_isValid = ::OpenAPI::fromJsonValue(m_disable_auth, json[QString("disableAuth")]);
    m_disable_auth_isSet = !json[QString("disableAuth")].isNull() && m_disable_auth_isValid;

    m_jwt_audience_isValid = ::OpenAPI::fromJsonValue(m_jwt_audience, json[QString("jwtAudience")]);
    m_jwt_audience_isSet = !json[QString("jwtAudience")].isNull() && m_jwt_audience_isValid;

    m_min_deadline_isValid = ::OpenAPI::fromJsonValue(m_min_deadline, json[QString("minDeadline")]);
    m_min_deadline_isSet = !json[QString("minDeadline")].isNull() && m_min_deadline_isValid;

    m_operation_deadline_isValid = ::OpenAPI::fromJsonValue(m_operation_deadline, json[QString("operationDeadline")]);
    m_operation_deadline_isSet = !json[QString("operationDeadline")].isNull() && m_operation_deadline_isValid;

    m_overrides_by_request_protocol_isValid = ::OpenAPI::fromJsonValue(m_overrides_by_request_protocol, json[QString("overridesByRequestProtocol")]);
    m_overrides_by_request_protocol_isSet = !json[QString("overridesByRequestProtocol")].isNull() && m_overrides_by_request_protocol_isValid;

    m_path_translation_isValid = ::OpenAPI::fromJsonValue(m_path_translation, json[QString("pathTranslation")]);
    m_path_translation_isSet = !json[QString("pathTranslation")].isNull() && m_path_translation_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_selector_isValid = ::OpenAPI::fromJsonValue(m_selector, json[QString("selector")]);
    m_selector_isSet = !json[QString("selector")].isNull() && m_selector_isValid;
}

QString OAIBackendRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackendRule::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_deadline_isSet) {
        obj.insert(QString("deadline"), ::OpenAPI::toJsonValue(m_deadline));
    }
    if (m_disable_auth_isSet) {
        obj.insert(QString("disableAuth"), ::OpenAPI::toJsonValue(m_disable_auth));
    }
    if (m_jwt_audience_isSet) {
        obj.insert(QString("jwtAudience"), ::OpenAPI::toJsonValue(m_jwt_audience));
    }
    if (m_min_deadline_isSet) {
        obj.insert(QString("minDeadline"), ::OpenAPI::toJsonValue(m_min_deadline));
    }
    if (m_operation_deadline_isSet) {
        obj.insert(QString("operationDeadline"), ::OpenAPI::toJsonValue(m_operation_deadline));
    }
    if (m_overrides_by_request_protocol.size() > 0) {
        obj.insert(QString("overridesByRequestProtocol"), ::OpenAPI::toJsonValue(m_overrides_by_request_protocol));
    }
    if (m_path_translation_isSet) {
        obj.insert(QString("pathTranslation"), ::OpenAPI::toJsonValue(m_path_translation));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_selector_isSet) {
        obj.insert(QString("selector"), ::OpenAPI::toJsonValue(m_selector));
    }
    return obj;
}

QString OAIBackendRule::getAddress() const {
    return m_address;
}
void OAIBackendRule::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIBackendRule::is_address_Set() const{
    return m_address_isSet;
}

bool OAIBackendRule::is_address_Valid() const{
    return m_address_isValid;
}

double OAIBackendRule::getDeadline() const {
    return m_deadline;
}
void OAIBackendRule::setDeadline(const double &deadline) {
    m_deadline = deadline;
    m_deadline_isSet = true;
}

bool OAIBackendRule::is_deadline_Set() const{
    return m_deadline_isSet;
}

bool OAIBackendRule::is_deadline_Valid() const{
    return m_deadline_isValid;
}

bool OAIBackendRule::isDisableAuth() const {
    return m_disable_auth;
}
void OAIBackendRule::setDisableAuth(const bool &disable_auth) {
    m_disable_auth = disable_auth;
    m_disable_auth_isSet = true;
}

bool OAIBackendRule::is_disable_auth_Set() const{
    return m_disable_auth_isSet;
}

bool OAIBackendRule::is_disable_auth_Valid() const{
    return m_disable_auth_isValid;
}

QString OAIBackendRule::getJwtAudience() const {
    return m_jwt_audience;
}
void OAIBackendRule::setJwtAudience(const QString &jwt_audience) {
    m_jwt_audience = jwt_audience;
    m_jwt_audience_isSet = true;
}

bool OAIBackendRule::is_jwt_audience_Set() const{
    return m_jwt_audience_isSet;
}

bool OAIBackendRule::is_jwt_audience_Valid() const{
    return m_jwt_audience_isValid;
}

double OAIBackendRule::getMinDeadline() const {
    return m_min_deadline;
}
void OAIBackendRule::setMinDeadline(const double &min_deadline) {
    m_min_deadline = min_deadline;
    m_min_deadline_isSet = true;
}

bool OAIBackendRule::is_min_deadline_Set() const{
    return m_min_deadline_isSet;
}

bool OAIBackendRule::is_min_deadline_Valid() const{
    return m_min_deadline_isValid;
}

double OAIBackendRule::getOperationDeadline() const {
    return m_operation_deadline;
}
void OAIBackendRule::setOperationDeadline(const double &operation_deadline) {
    m_operation_deadline = operation_deadline;
    m_operation_deadline_isSet = true;
}

bool OAIBackendRule::is_operation_deadline_Set() const{
    return m_operation_deadline_isSet;
}

bool OAIBackendRule::is_operation_deadline_Valid() const{
    return m_operation_deadline_isValid;
}

QMap<QString, OAIBackendRule> OAIBackendRule::getOverridesByRequestProtocol() const {
    return m_overrides_by_request_protocol;
}
void OAIBackendRule::setOverridesByRequestProtocol(const QMap<QString, OAIBackendRule> &overrides_by_request_protocol) {
    m_overrides_by_request_protocol = overrides_by_request_protocol;
    m_overrides_by_request_protocol_isSet = true;
}

bool OAIBackendRule::is_overrides_by_request_protocol_Set() const{
    return m_overrides_by_request_protocol_isSet;
}

bool OAIBackendRule::is_overrides_by_request_protocol_Valid() const{
    return m_overrides_by_request_protocol_isValid;
}

QString OAIBackendRule::getPathTranslation() const {
    return m_path_translation;
}
void OAIBackendRule::setPathTranslation(const QString &path_translation) {
    m_path_translation = path_translation;
    m_path_translation_isSet = true;
}

bool OAIBackendRule::is_path_translation_Set() const{
    return m_path_translation_isSet;
}

bool OAIBackendRule::is_path_translation_Valid() const{
    return m_path_translation_isValid;
}

QString OAIBackendRule::getProtocol() const {
    return m_protocol;
}
void OAIBackendRule::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIBackendRule::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIBackendRule::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QString OAIBackendRule::getSelector() const {
    return m_selector;
}
void OAIBackendRule::setSelector(const QString &selector) {
    m_selector = selector;
    m_selector_isSet = true;
}

bool OAIBackendRule::is_selector_Set() const{
    return m_selector_isSet;
}

bool OAIBackendRule::is_selector_Valid() const{
    return m_selector_isValid;
}

bool OAIBackendRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deadline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_auth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jwt_audience_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_deadline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_deadline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overrides_by_request_protocol.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_translation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selector_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackendRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
