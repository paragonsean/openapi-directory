/**
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISecondaryIpRangeSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISecondaryIpRangeSpec::OAISecondaryIpRangeSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISecondaryIpRangeSpec::OAISecondaryIpRangeSpec() {
    this->initializeModel();
}

OAISecondaryIpRangeSpec::~OAISecondaryIpRangeSpec() {}

void OAISecondaryIpRangeSpec::initializeModel() {

    m_ip_prefix_length_isSet = false;
    m_ip_prefix_length_isValid = false;

    m_outside_allocation_public_ip_range_isSet = false;
    m_outside_allocation_public_ip_range_isValid = false;

    m_range_name_isSet = false;
    m_range_name_isValid = false;

    m_requested_address_isSet = false;
    m_requested_address_isValid = false;
}

void OAISecondaryIpRangeSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISecondaryIpRangeSpec::fromJsonObject(QJsonObject json) {

    m_ip_prefix_length_isValid = ::OpenAPI::fromJsonValue(m_ip_prefix_length, json[QString("ipPrefixLength")]);
    m_ip_prefix_length_isSet = !json[QString("ipPrefixLength")].isNull() && m_ip_prefix_length_isValid;

    m_outside_allocation_public_ip_range_isValid = ::OpenAPI::fromJsonValue(m_outside_allocation_public_ip_range, json[QString("outsideAllocationPublicIpRange")]);
    m_outside_allocation_public_ip_range_isSet = !json[QString("outsideAllocationPublicIpRange")].isNull() && m_outside_allocation_public_ip_range_isValid;

    m_range_name_isValid = ::OpenAPI::fromJsonValue(m_range_name, json[QString("rangeName")]);
    m_range_name_isSet = !json[QString("rangeName")].isNull() && m_range_name_isValid;

    m_requested_address_isValid = ::OpenAPI::fromJsonValue(m_requested_address, json[QString("requestedAddress")]);
    m_requested_address_isSet = !json[QString("requestedAddress")].isNull() && m_requested_address_isValid;
}

QString OAISecondaryIpRangeSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISecondaryIpRangeSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_ip_prefix_length_isSet) {
        obj.insert(QString("ipPrefixLength"), ::OpenAPI::toJsonValue(m_ip_prefix_length));
    }
    if (m_outside_allocation_public_ip_range_isSet) {
        obj.insert(QString("outsideAllocationPublicIpRange"), ::OpenAPI::toJsonValue(m_outside_allocation_public_ip_range));
    }
    if (m_range_name_isSet) {
        obj.insert(QString("rangeName"), ::OpenAPI::toJsonValue(m_range_name));
    }
    if (m_requested_address_isSet) {
        obj.insert(QString("requestedAddress"), ::OpenAPI::toJsonValue(m_requested_address));
    }
    return obj;
}

qint32 OAISecondaryIpRangeSpec::getIpPrefixLength() const {
    return m_ip_prefix_length;
}
void OAISecondaryIpRangeSpec::setIpPrefixLength(const qint32 &ip_prefix_length) {
    m_ip_prefix_length = ip_prefix_length;
    m_ip_prefix_length_isSet = true;
}

bool OAISecondaryIpRangeSpec::is_ip_prefix_length_Set() const{
    return m_ip_prefix_length_isSet;
}

bool OAISecondaryIpRangeSpec::is_ip_prefix_length_Valid() const{
    return m_ip_prefix_length_isValid;
}

QString OAISecondaryIpRangeSpec::getOutsideAllocationPublicIpRange() const {
    return m_outside_allocation_public_ip_range;
}
void OAISecondaryIpRangeSpec::setOutsideAllocationPublicIpRange(const QString &outside_allocation_public_ip_range) {
    m_outside_allocation_public_ip_range = outside_allocation_public_ip_range;
    m_outside_allocation_public_ip_range_isSet = true;
}

bool OAISecondaryIpRangeSpec::is_outside_allocation_public_ip_range_Set() const{
    return m_outside_allocation_public_ip_range_isSet;
}

bool OAISecondaryIpRangeSpec::is_outside_allocation_public_ip_range_Valid() const{
    return m_outside_allocation_public_ip_range_isValid;
}

QString OAISecondaryIpRangeSpec::getRangeName() const {
    return m_range_name;
}
void OAISecondaryIpRangeSpec::setRangeName(const QString &range_name) {
    m_range_name = range_name;
    m_range_name_isSet = true;
}

bool OAISecondaryIpRangeSpec::is_range_name_Set() const{
    return m_range_name_isSet;
}

bool OAISecondaryIpRangeSpec::is_range_name_Valid() const{
    return m_range_name_isValid;
}

QString OAISecondaryIpRangeSpec::getRequestedAddress() const {
    return m_requested_address;
}
void OAISecondaryIpRangeSpec::setRequestedAddress(const QString &requested_address) {
    m_requested_address = requested_address;
    m_requested_address_isSet = true;
}

bool OAISecondaryIpRangeSpec::is_requested_address_Set() const{
    return m_requested_address_isSet;
}

bool OAISecondaryIpRangeSpec::is_requested_address_Valid() const{
    return m_requested_address_isValid;
}

bool OAISecondaryIpRangeSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ip_prefix_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outside_allocation_public_ip_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_range_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_address_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISecondaryIpRangeSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
