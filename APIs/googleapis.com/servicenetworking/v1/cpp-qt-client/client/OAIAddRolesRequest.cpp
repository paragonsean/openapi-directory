/**
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddRolesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddRolesRequest::OAIAddRolesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddRolesRequest::OAIAddRolesRequest() {
    this->initializeModel();
}

OAIAddRolesRequest::~OAIAddRolesRequest() {}

void OAIAddRolesRequest::initializeModel() {

    m_consumer_network_isSet = false;
    m_consumer_network_isValid = false;

    m_policy_binding_isSet = false;
    m_policy_binding_isValid = false;
}

void OAIAddRolesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddRolesRequest::fromJsonObject(QJsonObject json) {

    m_consumer_network_isValid = ::OpenAPI::fromJsonValue(m_consumer_network, json[QString("consumerNetwork")]);
    m_consumer_network_isSet = !json[QString("consumerNetwork")].isNull() && m_consumer_network_isValid;

    m_policy_binding_isValid = ::OpenAPI::fromJsonValue(m_policy_binding, json[QString("policyBinding")]);
    m_policy_binding_isSet = !json[QString("policyBinding")].isNull() && m_policy_binding_isValid;
}

QString OAIAddRolesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddRolesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_consumer_network_isSet) {
        obj.insert(QString("consumerNetwork"), ::OpenAPI::toJsonValue(m_consumer_network));
    }
    if (m_policy_binding.size() > 0) {
        obj.insert(QString("policyBinding"), ::OpenAPI::toJsonValue(m_policy_binding));
    }
    return obj;
}

QString OAIAddRolesRequest::getConsumerNetwork() const {
    return m_consumer_network;
}
void OAIAddRolesRequest::setConsumerNetwork(const QString &consumer_network) {
    m_consumer_network = consumer_network;
    m_consumer_network_isSet = true;
}

bool OAIAddRolesRequest::is_consumer_network_Set() const{
    return m_consumer_network_isSet;
}

bool OAIAddRolesRequest::is_consumer_network_Valid() const{
    return m_consumer_network_isValid;
}

QList<OAIPolicyBinding> OAIAddRolesRequest::getPolicyBinding() const {
    return m_policy_binding;
}
void OAIAddRolesRequest::setPolicyBinding(const QList<OAIPolicyBinding> &policy_binding) {
    m_policy_binding = policy_binding;
    m_policy_binding_isSet = true;
}

bool OAIAddRolesRequest::is_policy_binding_Set() const{
    return m_policy_binding_isSet;
}

bool OAIAddRolesRequest::is_policy_binding_Valid() const{
    return m_policy_binding_isValid;
}

bool OAIAddRolesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consumer_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_binding.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddRolesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
