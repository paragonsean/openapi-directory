/**
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddDnsZoneResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddDnsZoneResponse::OAIAddDnsZoneResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddDnsZoneResponse::OAIAddDnsZoneResponse() {
    this->initializeModel();
}

OAIAddDnsZoneResponse::~OAIAddDnsZoneResponse() {}

void OAIAddDnsZoneResponse::initializeModel() {

    m_consumer_peering_zone_isSet = false;
    m_consumer_peering_zone_isValid = false;

    m_producer_private_zone_isSet = false;
    m_producer_private_zone_isValid = false;
}

void OAIAddDnsZoneResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddDnsZoneResponse::fromJsonObject(QJsonObject json) {

    m_consumer_peering_zone_isValid = ::OpenAPI::fromJsonValue(m_consumer_peering_zone, json[QString("consumerPeeringZone")]);
    m_consumer_peering_zone_isSet = !json[QString("consumerPeeringZone")].isNull() && m_consumer_peering_zone_isValid;

    m_producer_private_zone_isValid = ::OpenAPI::fromJsonValue(m_producer_private_zone, json[QString("producerPrivateZone")]);
    m_producer_private_zone_isSet = !json[QString("producerPrivateZone")].isNull() && m_producer_private_zone_isValid;
}

QString OAIAddDnsZoneResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddDnsZoneResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_consumer_peering_zone.isSet()) {
        obj.insert(QString("consumerPeeringZone"), ::OpenAPI::toJsonValue(m_consumer_peering_zone));
    }
    if (m_producer_private_zone.isSet()) {
        obj.insert(QString("producerPrivateZone"), ::OpenAPI::toJsonValue(m_producer_private_zone));
    }
    return obj;
}

OAIDnsZone OAIAddDnsZoneResponse::getConsumerPeeringZone() const {
    return m_consumer_peering_zone;
}
void OAIAddDnsZoneResponse::setConsumerPeeringZone(const OAIDnsZone &consumer_peering_zone) {
    m_consumer_peering_zone = consumer_peering_zone;
    m_consumer_peering_zone_isSet = true;
}

bool OAIAddDnsZoneResponse::is_consumer_peering_zone_Set() const{
    return m_consumer_peering_zone_isSet;
}

bool OAIAddDnsZoneResponse::is_consumer_peering_zone_Valid() const{
    return m_consumer_peering_zone_isValid;
}

OAIDnsZone OAIAddDnsZoneResponse::getProducerPrivateZone() const {
    return m_producer_private_zone;
}
void OAIAddDnsZoneResponse::setProducerPrivateZone(const OAIDnsZone &producer_private_zone) {
    m_producer_private_zone = producer_private_zone;
    m_producer_private_zone_isSet = true;
}

bool OAIAddDnsZoneResponse::is_producer_private_zone_Set() const{
    return m_producer_private_zone_isSet;
}

bool OAIAddDnsZoneResponse::is_producer_private_zone_Valid() const{
    return m_producer_private_zone_isValid;
}

bool OAIAddDnsZoneResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consumer_peering_zone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_producer_private_zone.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddDnsZoneResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
