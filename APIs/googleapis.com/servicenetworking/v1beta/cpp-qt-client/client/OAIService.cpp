/**
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIService.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIService::OAIService(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIService::OAIService() {
    this->initializeModel();
}

OAIService::~OAIService() {}

void OAIService::initializeModel() {

    m_apis_isSet = false;
    m_apis_isValid = false;

    m_authentication_isSet = false;
    m_authentication_isValid = false;

    m_backend_isSet = false;
    m_backend_isValid = false;

    m_billing_isSet = false;
    m_billing_isValid = false;

    m_config_version_isSet = false;
    m_config_version_isValid = false;

    m_context_isSet = false;
    m_context_isValid = false;

    m_control_isSet = false;
    m_control_isValid = false;

    m_custom_error_isSet = false;
    m_custom_error_isValid = false;

    m_documentation_isSet = false;
    m_documentation_isValid = false;

    m_endpoints_isSet = false;
    m_endpoints_isValid = false;

    m_enums_isSet = false;
    m_enums_isValid = false;

    m_http_isSet = false;
    m_http_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_logging_isSet = false;
    m_logging_isValid = false;

    m_logs_isSet = false;
    m_logs_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_monitored_resources_isSet = false;
    m_monitored_resources_isValid = false;

    m_monitoring_isSet = false;
    m_monitoring_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_producer_project_id_isSet = false;
    m_producer_project_id_isValid = false;

    m_publishing_isSet = false;
    m_publishing_isValid = false;

    m_quota_isSet = false;
    m_quota_isValid = false;

    m_source_info_isSet = false;
    m_source_info_isValid = false;

    m_system_parameters_isSet = false;
    m_system_parameters_isValid = false;

    m_system_types_isSet = false;
    m_system_types_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_types_isSet = false;
    m_types_isValid = false;

    m_usage_isSet = false;
    m_usage_isValid = false;
}

void OAIService::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIService::fromJsonObject(QJsonObject json) {

    m_apis_isValid = ::OpenAPI::fromJsonValue(m_apis, json[QString("apis")]);
    m_apis_isSet = !json[QString("apis")].isNull() && m_apis_isValid;

    m_authentication_isValid = ::OpenAPI::fromJsonValue(m_authentication, json[QString("authentication")]);
    m_authentication_isSet = !json[QString("authentication")].isNull() && m_authentication_isValid;

    m_backend_isValid = ::OpenAPI::fromJsonValue(m_backend, json[QString("backend")]);
    m_backend_isSet = !json[QString("backend")].isNull() && m_backend_isValid;

    m_billing_isValid = ::OpenAPI::fromJsonValue(m_billing, json[QString("billing")]);
    m_billing_isSet = !json[QString("billing")].isNull() && m_billing_isValid;

    m_config_version_isValid = ::OpenAPI::fromJsonValue(m_config_version, json[QString("configVersion")]);
    m_config_version_isSet = !json[QString("configVersion")].isNull() && m_config_version_isValid;

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_control_isValid = ::OpenAPI::fromJsonValue(m_control, json[QString("control")]);
    m_control_isSet = !json[QString("control")].isNull() && m_control_isValid;

    m_custom_error_isValid = ::OpenAPI::fromJsonValue(m_custom_error, json[QString("customError")]);
    m_custom_error_isSet = !json[QString("customError")].isNull() && m_custom_error_isValid;

    m_documentation_isValid = ::OpenAPI::fromJsonValue(m_documentation, json[QString("documentation")]);
    m_documentation_isSet = !json[QString("documentation")].isNull() && m_documentation_isValid;

    m_endpoints_isValid = ::OpenAPI::fromJsonValue(m_endpoints, json[QString("endpoints")]);
    m_endpoints_isSet = !json[QString("endpoints")].isNull() && m_endpoints_isValid;

    m_enums_isValid = ::OpenAPI::fromJsonValue(m_enums, json[QString("enums")]);
    m_enums_isSet = !json[QString("enums")].isNull() && m_enums_isValid;

    m_http_isValid = ::OpenAPI::fromJsonValue(m_http, json[QString("http")]);
    m_http_isSet = !json[QString("http")].isNull() && m_http_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_logging_isValid = ::OpenAPI::fromJsonValue(m_logging, json[QString("logging")]);
    m_logging_isSet = !json[QString("logging")].isNull() && m_logging_isValid;

    m_logs_isValid = ::OpenAPI::fromJsonValue(m_logs, json[QString("logs")]);
    m_logs_isSet = !json[QString("logs")].isNull() && m_logs_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;

    m_monitored_resources_isValid = ::OpenAPI::fromJsonValue(m_monitored_resources, json[QString("monitoredResources")]);
    m_monitored_resources_isSet = !json[QString("monitoredResources")].isNull() && m_monitored_resources_isValid;

    m_monitoring_isValid = ::OpenAPI::fromJsonValue(m_monitoring, json[QString("monitoring")]);
    m_monitoring_isSet = !json[QString("monitoring")].isNull() && m_monitoring_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_producer_project_id_isValid = ::OpenAPI::fromJsonValue(m_producer_project_id, json[QString("producerProjectId")]);
    m_producer_project_id_isSet = !json[QString("producerProjectId")].isNull() && m_producer_project_id_isValid;

    m_publishing_isValid = ::OpenAPI::fromJsonValue(m_publishing, json[QString("publishing")]);
    m_publishing_isSet = !json[QString("publishing")].isNull() && m_publishing_isValid;

    m_quota_isValid = ::OpenAPI::fromJsonValue(m_quota, json[QString("quota")]);
    m_quota_isSet = !json[QString("quota")].isNull() && m_quota_isValid;

    m_source_info_isValid = ::OpenAPI::fromJsonValue(m_source_info, json[QString("sourceInfo")]);
    m_source_info_isSet = !json[QString("sourceInfo")].isNull() && m_source_info_isValid;

    m_system_parameters_isValid = ::OpenAPI::fromJsonValue(m_system_parameters, json[QString("systemParameters")]);
    m_system_parameters_isSet = !json[QString("systemParameters")].isNull() && m_system_parameters_isValid;

    m_system_types_isValid = ::OpenAPI::fromJsonValue(m_system_types, json[QString("systemTypes")]);
    m_system_types_isSet = !json[QString("systemTypes")].isNull() && m_system_types_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_types_isValid = ::OpenAPI::fromJsonValue(m_types, json[QString("types")]);
    m_types_isSet = !json[QString("types")].isNull() && m_types_isValid;

    m_usage_isValid = ::OpenAPI::fromJsonValue(m_usage, json[QString("usage")]);
    m_usage_isSet = !json[QString("usage")].isNull() && m_usage_isValid;
}

QString OAIService::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIService::asJsonObject() const {
    QJsonObject obj;
    if (m_apis.size() > 0) {
        obj.insert(QString("apis"), ::OpenAPI::toJsonValue(m_apis));
    }
    if (m_authentication.isSet()) {
        obj.insert(QString("authentication"), ::OpenAPI::toJsonValue(m_authentication));
    }
    if (m_backend.isSet()) {
        obj.insert(QString("backend"), ::OpenAPI::toJsonValue(m_backend));
    }
    if (m_billing.isSet()) {
        obj.insert(QString("billing"), ::OpenAPI::toJsonValue(m_billing));
    }
    if (m_config_version_isSet) {
        obj.insert(QString("configVersion"), ::OpenAPI::toJsonValue(m_config_version));
    }
    if (m_context.isSet()) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_control.isSet()) {
        obj.insert(QString("control"), ::OpenAPI::toJsonValue(m_control));
    }
    if (m_custom_error.isSet()) {
        obj.insert(QString("customError"), ::OpenAPI::toJsonValue(m_custom_error));
    }
    if (m_documentation.isSet()) {
        obj.insert(QString("documentation"), ::OpenAPI::toJsonValue(m_documentation));
    }
    if (m_endpoints.size() > 0) {
        obj.insert(QString("endpoints"), ::OpenAPI::toJsonValue(m_endpoints));
    }
    if (m_enums.size() > 0) {
        obj.insert(QString("enums"), ::OpenAPI::toJsonValue(m_enums));
    }
    if (m_http.isSet()) {
        obj.insert(QString("http"), ::OpenAPI::toJsonValue(m_http));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_logging.isSet()) {
        obj.insert(QString("logging"), ::OpenAPI::toJsonValue(m_logging));
    }
    if (m_logs.size() > 0) {
        obj.insert(QString("logs"), ::OpenAPI::toJsonValue(m_logs));
    }
    if (m_metrics.size() > 0) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_monitored_resources.size() > 0) {
        obj.insert(QString("monitoredResources"), ::OpenAPI::toJsonValue(m_monitored_resources));
    }
    if (m_monitoring.isSet()) {
        obj.insert(QString("monitoring"), ::OpenAPI::toJsonValue(m_monitoring));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_producer_project_id_isSet) {
        obj.insert(QString("producerProjectId"), ::OpenAPI::toJsonValue(m_producer_project_id));
    }
    if (m_publishing.isSet()) {
        obj.insert(QString("publishing"), ::OpenAPI::toJsonValue(m_publishing));
    }
    if (m_quota.isSet()) {
        obj.insert(QString("quota"), ::OpenAPI::toJsonValue(m_quota));
    }
    if (m_source_info.isSet()) {
        obj.insert(QString("sourceInfo"), ::OpenAPI::toJsonValue(m_source_info));
    }
    if (m_system_parameters.isSet()) {
        obj.insert(QString("systemParameters"), ::OpenAPI::toJsonValue(m_system_parameters));
    }
    if (m_system_types.size() > 0) {
        obj.insert(QString("systemTypes"), ::OpenAPI::toJsonValue(m_system_types));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_types.size() > 0) {
        obj.insert(QString("types"), ::OpenAPI::toJsonValue(m_types));
    }
    if (m_usage.isSet()) {
        obj.insert(QString("usage"), ::OpenAPI::toJsonValue(m_usage));
    }
    return obj;
}

QList<OAIApi> OAIService::getApis() const {
    return m_apis;
}
void OAIService::setApis(const QList<OAIApi> &apis) {
    m_apis = apis;
    m_apis_isSet = true;
}

bool OAIService::is_apis_Set() const{
    return m_apis_isSet;
}

bool OAIService::is_apis_Valid() const{
    return m_apis_isValid;
}

OAIAuthentication OAIService::getAuthentication() const {
    return m_authentication;
}
void OAIService::setAuthentication(const OAIAuthentication &authentication) {
    m_authentication = authentication;
    m_authentication_isSet = true;
}

bool OAIService::is_authentication_Set() const{
    return m_authentication_isSet;
}

bool OAIService::is_authentication_Valid() const{
    return m_authentication_isValid;
}

OAIBackend OAIService::getBackend() const {
    return m_backend;
}
void OAIService::setBackend(const OAIBackend &backend) {
    m_backend = backend;
    m_backend_isSet = true;
}

bool OAIService::is_backend_Set() const{
    return m_backend_isSet;
}

bool OAIService::is_backend_Valid() const{
    return m_backend_isValid;
}

OAIBilling OAIService::getBilling() const {
    return m_billing;
}
void OAIService::setBilling(const OAIBilling &billing) {
    m_billing = billing;
    m_billing_isSet = true;
}

bool OAIService::is_billing_Set() const{
    return m_billing_isSet;
}

bool OAIService::is_billing_Valid() const{
    return m_billing_isValid;
}

qint32 OAIService::getConfigVersion() const {
    return m_config_version;
}
void OAIService::setConfigVersion(const qint32 &config_version) {
    m_config_version = config_version;
    m_config_version_isSet = true;
}

bool OAIService::is_config_version_Set() const{
    return m_config_version_isSet;
}

bool OAIService::is_config_version_Valid() const{
    return m_config_version_isValid;
}

OAIContext OAIService::getContext() const {
    return m_context;
}
void OAIService::setContext(const OAIContext &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIService::is_context_Set() const{
    return m_context_isSet;
}

bool OAIService::is_context_Valid() const{
    return m_context_isValid;
}

OAIControl OAIService::getControl() const {
    return m_control;
}
void OAIService::setControl(const OAIControl &control) {
    m_control = control;
    m_control_isSet = true;
}

bool OAIService::is_control_Set() const{
    return m_control_isSet;
}

bool OAIService::is_control_Valid() const{
    return m_control_isValid;
}

OAICustomError OAIService::getCustomError() const {
    return m_custom_error;
}
void OAIService::setCustomError(const OAICustomError &custom_error) {
    m_custom_error = custom_error;
    m_custom_error_isSet = true;
}

bool OAIService::is_custom_error_Set() const{
    return m_custom_error_isSet;
}

bool OAIService::is_custom_error_Valid() const{
    return m_custom_error_isValid;
}

OAIDocumentation OAIService::getDocumentation() const {
    return m_documentation;
}
void OAIService::setDocumentation(const OAIDocumentation &documentation) {
    m_documentation = documentation;
    m_documentation_isSet = true;
}

bool OAIService::is_documentation_Set() const{
    return m_documentation_isSet;
}

bool OAIService::is_documentation_Valid() const{
    return m_documentation_isValid;
}

QList<OAIEndpoint> OAIService::getEndpoints() const {
    return m_endpoints;
}
void OAIService::setEndpoints(const QList<OAIEndpoint> &endpoints) {
    m_endpoints = endpoints;
    m_endpoints_isSet = true;
}

bool OAIService::is_endpoints_Set() const{
    return m_endpoints_isSet;
}

bool OAIService::is_endpoints_Valid() const{
    return m_endpoints_isValid;
}

QList<OAIEnum> OAIService::getEnums() const {
    return m_enums;
}
void OAIService::setEnums(const QList<OAIEnum> &enums) {
    m_enums = enums;
    m_enums_isSet = true;
}

bool OAIService::is_enums_Set() const{
    return m_enums_isSet;
}

bool OAIService::is_enums_Valid() const{
    return m_enums_isValid;
}

OAIHttp OAIService::getHttp() const {
    return m_http;
}
void OAIService::setHttp(const OAIHttp &http) {
    m_http = http;
    m_http_isSet = true;
}

bool OAIService::is_http_Set() const{
    return m_http_isSet;
}

bool OAIService::is_http_Valid() const{
    return m_http_isValid;
}

QString OAIService::getId() const {
    return m_id;
}
void OAIService::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIService::is_id_Set() const{
    return m_id_isSet;
}

bool OAIService::is_id_Valid() const{
    return m_id_isValid;
}

OAILogging OAIService::getLogging() const {
    return m_logging;
}
void OAIService::setLogging(const OAILogging &logging) {
    m_logging = logging;
    m_logging_isSet = true;
}

bool OAIService::is_logging_Set() const{
    return m_logging_isSet;
}

bool OAIService::is_logging_Valid() const{
    return m_logging_isValid;
}

QList<OAILogDescriptor> OAIService::getLogs() const {
    return m_logs;
}
void OAIService::setLogs(const QList<OAILogDescriptor> &logs) {
    m_logs = logs;
    m_logs_isSet = true;
}

bool OAIService::is_logs_Set() const{
    return m_logs_isSet;
}

bool OAIService::is_logs_Valid() const{
    return m_logs_isValid;
}

QList<OAIMetricDescriptor> OAIService::getMetrics() const {
    return m_metrics;
}
void OAIService::setMetrics(const QList<OAIMetricDescriptor> &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIService::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIService::is_metrics_Valid() const{
    return m_metrics_isValid;
}

QList<OAIMonitoredResourceDescriptor> OAIService::getMonitoredResources() const {
    return m_monitored_resources;
}
void OAIService::setMonitoredResources(const QList<OAIMonitoredResourceDescriptor> &monitored_resources) {
    m_monitored_resources = monitored_resources;
    m_monitored_resources_isSet = true;
}

bool OAIService::is_monitored_resources_Set() const{
    return m_monitored_resources_isSet;
}

bool OAIService::is_monitored_resources_Valid() const{
    return m_monitored_resources_isValid;
}

OAIMonitoring OAIService::getMonitoring() const {
    return m_monitoring;
}
void OAIService::setMonitoring(const OAIMonitoring &monitoring) {
    m_monitoring = monitoring;
    m_monitoring_isSet = true;
}

bool OAIService::is_monitoring_Set() const{
    return m_monitoring_isSet;
}

bool OAIService::is_monitoring_Valid() const{
    return m_monitoring_isValid;
}

QString OAIService::getName() const {
    return m_name;
}
void OAIService::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIService::is_name_Set() const{
    return m_name_isSet;
}

bool OAIService::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIService::getProducerProjectId() const {
    return m_producer_project_id;
}
void OAIService::setProducerProjectId(const QString &producer_project_id) {
    m_producer_project_id = producer_project_id;
    m_producer_project_id_isSet = true;
}

bool OAIService::is_producer_project_id_Set() const{
    return m_producer_project_id_isSet;
}

bool OAIService::is_producer_project_id_Valid() const{
    return m_producer_project_id_isValid;
}

OAIPublishing OAIService::getPublishing() const {
    return m_publishing;
}
void OAIService::setPublishing(const OAIPublishing &publishing) {
    m_publishing = publishing;
    m_publishing_isSet = true;
}

bool OAIService::is_publishing_Set() const{
    return m_publishing_isSet;
}

bool OAIService::is_publishing_Valid() const{
    return m_publishing_isValid;
}

OAIQuota OAIService::getQuota() const {
    return m_quota;
}
void OAIService::setQuota(const OAIQuota &quota) {
    m_quota = quota;
    m_quota_isSet = true;
}

bool OAIService::is_quota_Set() const{
    return m_quota_isSet;
}

bool OAIService::is_quota_Valid() const{
    return m_quota_isValid;
}

OAISourceInfo OAIService::getSourceInfo() const {
    return m_source_info;
}
void OAIService::setSourceInfo(const OAISourceInfo &source_info) {
    m_source_info = source_info;
    m_source_info_isSet = true;
}

bool OAIService::is_source_info_Set() const{
    return m_source_info_isSet;
}

bool OAIService::is_source_info_Valid() const{
    return m_source_info_isValid;
}

OAISystemParameters OAIService::getSystemParameters() const {
    return m_system_parameters;
}
void OAIService::setSystemParameters(const OAISystemParameters &system_parameters) {
    m_system_parameters = system_parameters;
    m_system_parameters_isSet = true;
}

bool OAIService::is_system_parameters_Set() const{
    return m_system_parameters_isSet;
}

bool OAIService::is_system_parameters_Valid() const{
    return m_system_parameters_isValid;
}

QList<OAIType> OAIService::getSystemTypes() const {
    return m_system_types;
}
void OAIService::setSystemTypes(const QList<OAIType> &system_types) {
    m_system_types = system_types;
    m_system_types_isSet = true;
}

bool OAIService::is_system_types_Set() const{
    return m_system_types_isSet;
}

bool OAIService::is_system_types_Valid() const{
    return m_system_types_isValid;
}

QString OAIService::getTitle() const {
    return m_title;
}
void OAIService::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIService::is_title_Set() const{
    return m_title_isSet;
}

bool OAIService::is_title_Valid() const{
    return m_title_isValid;
}

QList<OAIType> OAIService::getTypes() const {
    return m_types;
}
void OAIService::setTypes(const QList<OAIType> &types) {
    m_types = types;
    m_types_isSet = true;
}

bool OAIService::is_types_Set() const{
    return m_types_isSet;
}

bool OAIService::is_types_Valid() const{
    return m_types_isValid;
}

OAIUsage OAIService::getUsage() const {
    return m_usage;
}
void OAIService::setUsage(const OAIUsage &usage) {
    m_usage = usage;
    m_usage_isSet = true;
}

bool OAIService::is_usage_Set() const{
    return m_usage_isSet;
}

bool OAIService::is_usage_Valid() const{
    return m_usage_isValid;
}

bool OAIService::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_apis.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_backend.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_config_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_documentation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_enums.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_http.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logging.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitored_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_producer_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publishing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIService::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
