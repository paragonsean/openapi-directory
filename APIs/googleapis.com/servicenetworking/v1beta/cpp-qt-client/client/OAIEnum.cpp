/**
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnum.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnum::OAIEnum(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnum::OAIEnum() {
    this->initializeModel();
}

OAIEnum::~OAIEnum() {}

void OAIEnum::initializeModel() {

    m_edition_isSet = false;
    m_edition_isValid = false;

    m_enumvalue_isSet = false;
    m_enumvalue_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_source_context_isSet = false;
    m_source_context_isValid = false;

    m_syntax_isSet = false;
    m_syntax_isValid = false;
}

void OAIEnum::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnum::fromJsonObject(QJsonObject json) {

    m_edition_isValid = ::OpenAPI::fromJsonValue(m_edition, json[QString("edition")]);
    m_edition_isSet = !json[QString("edition")].isNull() && m_edition_isValid;

    m_enumvalue_isValid = ::OpenAPI::fromJsonValue(m_enumvalue, json[QString("enumvalue")]);
    m_enumvalue_isSet = !json[QString("enumvalue")].isNull() && m_enumvalue_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_source_context_isValid = ::OpenAPI::fromJsonValue(m_source_context, json[QString("sourceContext")]);
    m_source_context_isSet = !json[QString("sourceContext")].isNull() && m_source_context_isValid;

    m_syntax_isValid = ::OpenAPI::fromJsonValue(m_syntax, json[QString("syntax")]);
    m_syntax_isSet = !json[QString("syntax")].isNull() && m_syntax_isValid;
}

QString OAIEnum::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnum::asJsonObject() const {
    QJsonObject obj;
    if (m_edition_isSet) {
        obj.insert(QString("edition"), ::OpenAPI::toJsonValue(m_edition));
    }
    if (m_enumvalue.size() > 0) {
        obj.insert(QString("enumvalue"), ::OpenAPI::toJsonValue(m_enumvalue));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_options.size() > 0) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_source_context.isSet()) {
        obj.insert(QString("sourceContext"), ::OpenAPI::toJsonValue(m_source_context));
    }
    if (m_syntax_isSet) {
        obj.insert(QString("syntax"), ::OpenAPI::toJsonValue(m_syntax));
    }
    return obj;
}

QString OAIEnum::getEdition() const {
    return m_edition;
}
void OAIEnum::setEdition(const QString &edition) {
    m_edition = edition;
    m_edition_isSet = true;
}

bool OAIEnum::is_edition_Set() const{
    return m_edition_isSet;
}

bool OAIEnum::is_edition_Valid() const{
    return m_edition_isValid;
}

QList<OAIEnumValue> OAIEnum::getEnumvalue() const {
    return m_enumvalue;
}
void OAIEnum::setEnumvalue(const QList<OAIEnumValue> &enumvalue) {
    m_enumvalue = enumvalue;
    m_enumvalue_isSet = true;
}

bool OAIEnum::is_enumvalue_Set() const{
    return m_enumvalue_isSet;
}

bool OAIEnum::is_enumvalue_Valid() const{
    return m_enumvalue_isValid;
}

QString OAIEnum::getName() const {
    return m_name;
}
void OAIEnum::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEnum::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEnum::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIOption> OAIEnum::getOptions() const {
    return m_options;
}
void OAIEnum::setOptions(const QList<OAIOption> &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIEnum::is_options_Set() const{
    return m_options_isSet;
}

bool OAIEnum::is_options_Valid() const{
    return m_options_isValid;
}

OAISourceContext OAIEnum::getSourceContext() const {
    return m_source_context;
}
void OAIEnum::setSourceContext(const OAISourceContext &source_context) {
    m_source_context = source_context;
    m_source_context_isSet = true;
}

bool OAIEnum::is_source_context_Set() const{
    return m_source_context_isSet;
}

bool OAIEnum::is_source_context_Valid() const{
    return m_source_context_isValid;
}

QString OAIEnum::getSyntax() const {
    return m_syntax;
}
void OAIEnum::setSyntax(const QString &syntax) {
    m_syntax = syntax;
    m_syntax_isSet = true;
}

bool OAIEnum::is_syntax_Set() const{
    return m_syntax_isSet;
}

bool OAIEnum::is_syntax_Valid() const{
    return m_syntax_isValid;
}

bool OAIEnum::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_edition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enumvalue.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_syntax_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnum::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
