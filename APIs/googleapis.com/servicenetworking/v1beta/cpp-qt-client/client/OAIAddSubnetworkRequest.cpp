/**
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddSubnetworkRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddSubnetworkRequest::OAIAddSubnetworkRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddSubnetworkRequest::OAIAddSubnetworkRequest() {
    this->initializeModel();
}

OAIAddSubnetworkRequest::~OAIAddSubnetworkRequest() {}

void OAIAddSubnetworkRequest::initializeModel() {

    m_consumer_isSet = false;
    m_consumer_isValid = false;

    m_consumer_network_isSet = false;
    m_consumer_network_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_ip_prefix_length_isSet = false;
    m_ip_prefix_length_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_requested_address_isSet = false;
    m_requested_address_isValid = false;

    m_subnetwork_isSet = false;
    m_subnetwork_isValid = false;

    m_subnetwork_users_isSet = false;
    m_subnetwork_users_isValid = false;
}

void OAIAddSubnetworkRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddSubnetworkRequest::fromJsonObject(QJsonObject json) {

    m_consumer_isValid = ::OpenAPI::fromJsonValue(m_consumer, json[QString("consumer")]);
    m_consumer_isSet = !json[QString("consumer")].isNull() && m_consumer_isValid;

    m_consumer_network_isValid = ::OpenAPI::fromJsonValue(m_consumer_network, json[QString("consumerNetwork")]);
    m_consumer_network_isSet = !json[QString("consumerNetwork")].isNull() && m_consumer_network_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_ip_prefix_length_isValid = ::OpenAPI::fromJsonValue(m_ip_prefix_length, json[QString("ipPrefixLength")]);
    m_ip_prefix_length_isSet = !json[QString("ipPrefixLength")].isNull() && m_ip_prefix_length_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_requested_address_isValid = ::OpenAPI::fromJsonValue(m_requested_address, json[QString("requestedAddress")]);
    m_requested_address_isSet = !json[QString("requestedAddress")].isNull() && m_requested_address_isValid;

    m_subnetwork_isValid = ::OpenAPI::fromJsonValue(m_subnetwork, json[QString("subnetwork")]);
    m_subnetwork_isSet = !json[QString("subnetwork")].isNull() && m_subnetwork_isValid;

    m_subnetwork_users_isValid = ::OpenAPI::fromJsonValue(m_subnetwork_users, json[QString("subnetworkUsers")]);
    m_subnetwork_users_isSet = !json[QString("subnetworkUsers")].isNull() && m_subnetwork_users_isValid;
}

QString OAIAddSubnetworkRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddSubnetworkRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_consumer_isSet) {
        obj.insert(QString("consumer"), ::OpenAPI::toJsonValue(m_consumer));
    }
    if (m_consumer_network_isSet) {
        obj.insert(QString("consumerNetwork"), ::OpenAPI::toJsonValue(m_consumer_network));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_ip_prefix_length_isSet) {
        obj.insert(QString("ipPrefixLength"), ::OpenAPI::toJsonValue(m_ip_prefix_length));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_requested_address_isSet) {
        obj.insert(QString("requestedAddress"), ::OpenAPI::toJsonValue(m_requested_address));
    }
    if (m_subnetwork_isSet) {
        obj.insert(QString("subnetwork"), ::OpenAPI::toJsonValue(m_subnetwork));
    }
    if (m_subnetwork_users.size() > 0) {
        obj.insert(QString("subnetworkUsers"), ::OpenAPI::toJsonValue(m_subnetwork_users));
    }
    return obj;
}

QString OAIAddSubnetworkRequest::getConsumer() const {
    return m_consumer;
}
void OAIAddSubnetworkRequest::setConsumer(const QString &consumer) {
    m_consumer = consumer;
    m_consumer_isSet = true;
}

bool OAIAddSubnetworkRequest::is_consumer_Set() const{
    return m_consumer_isSet;
}

bool OAIAddSubnetworkRequest::is_consumer_Valid() const{
    return m_consumer_isValid;
}

QString OAIAddSubnetworkRequest::getConsumerNetwork() const {
    return m_consumer_network;
}
void OAIAddSubnetworkRequest::setConsumerNetwork(const QString &consumer_network) {
    m_consumer_network = consumer_network;
    m_consumer_network_isSet = true;
}

bool OAIAddSubnetworkRequest::is_consumer_network_Set() const{
    return m_consumer_network_isSet;
}

bool OAIAddSubnetworkRequest::is_consumer_network_Valid() const{
    return m_consumer_network_isValid;
}

QString OAIAddSubnetworkRequest::getDescription() const {
    return m_description;
}
void OAIAddSubnetworkRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAddSubnetworkRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAddSubnetworkRequest::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIAddSubnetworkRequest::getIpPrefixLength() const {
    return m_ip_prefix_length;
}
void OAIAddSubnetworkRequest::setIpPrefixLength(const qint32 &ip_prefix_length) {
    m_ip_prefix_length = ip_prefix_length;
    m_ip_prefix_length_isSet = true;
}

bool OAIAddSubnetworkRequest::is_ip_prefix_length_Set() const{
    return m_ip_prefix_length_isSet;
}

bool OAIAddSubnetworkRequest::is_ip_prefix_length_Valid() const{
    return m_ip_prefix_length_isValid;
}

QString OAIAddSubnetworkRequest::getRegion() const {
    return m_region;
}
void OAIAddSubnetworkRequest::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIAddSubnetworkRequest::is_region_Set() const{
    return m_region_isSet;
}

bool OAIAddSubnetworkRequest::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIAddSubnetworkRequest::getRequestedAddress() const {
    return m_requested_address;
}
void OAIAddSubnetworkRequest::setRequestedAddress(const QString &requested_address) {
    m_requested_address = requested_address;
    m_requested_address_isSet = true;
}

bool OAIAddSubnetworkRequest::is_requested_address_Set() const{
    return m_requested_address_isSet;
}

bool OAIAddSubnetworkRequest::is_requested_address_Valid() const{
    return m_requested_address_isValid;
}

QString OAIAddSubnetworkRequest::getSubnetwork() const {
    return m_subnetwork;
}
void OAIAddSubnetworkRequest::setSubnetwork(const QString &subnetwork) {
    m_subnetwork = subnetwork;
    m_subnetwork_isSet = true;
}

bool OAIAddSubnetworkRequest::is_subnetwork_Set() const{
    return m_subnetwork_isSet;
}

bool OAIAddSubnetworkRequest::is_subnetwork_Valid() const{
    return m_subnetwork_isValid;
}

QList<QString> OAIAddSubnetworkRequest::getSubnetworkUsers() const {
    return m_subnetwork_users;
}
void OAIAddSubnetworkRequest::setSubnetworkUsers(const QList<QString> &subnetwork_users) {
    m_subnetwork_users = subnetwork_users;
    m_subnetwork_users_isSet = true;
}

bool OAIAddSubnetworkRequest::is_subnetwork_users_Set() const{
    return m_subnetwork_users_isSet;
}

bool OAIAddSubnetworkRequest::is_subnetwork_users_Valid() const{
    return m_subnetwork_users_isValid;
}

bool OAIAddSubnetworkRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consumer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumer_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_prefix_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnetwork_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnetwork_users.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddSubnetworkRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
