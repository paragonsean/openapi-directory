/**
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUsageRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUsageRule::OAIUsageRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUsageRule::OAIUsageRule() {
    this->initializeModel();
}

OAIUsageRule::~OAIUsageRule() {}

void OAIUsageRule::initializeModel() {

    m_allow_unregistered_calls_isSet = false;
    m_allow_unregistered_calls_isValid = false;

    m_selector_isSet = false;
    m_selector_isValid = false;

    m_skip_service_control_isSet = false;
    m_skip_service_control_isValid = false;
}

void OAIUsageRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUsageRule::fromJsonObject(QJsonObject json) {

    m_allow_unregistered_calls_isValid = ::OpenAPI::fromJsonValue(m_allow_unregistered_calls, json[QString("allowUnregisteredCalls")]);
    m_allow_unregistered_calls_isSet = !json[QString("allowUnregisteredCalls")].isNull() && m_allow_unregistered_calls_isValid;

    m_selector_isValid = ::OpenAPI::fromJsonValue(m_selector, json[QString("selector")]);
    m_selector_isSet = !json[QString("selector")].isNull() && m_selector_isValid;

    m_skip_service_control_isValid = ::OpenAPI::fromJsonValue(m_skip_service_control, json[QString("skipServiceControl")]);
    m_skip_service_control_isSet = !json[QString("skipServiceControl")].isNull() && m_skip_service_control_isValid;
}

QString OAIUsageRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUsageRule::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_unregistered_calls_isSet) {
        obj.insert(QString("allowUnregisteredCalls"), ::OpenAPI::toJsonValue(m_allow_unregistered_calls));
    }
    if (m_selector_isSet) {
        obj.insert(QString("selector"), ::OpenAPI::toJsonValue(m_selector));
    }
    if (m_skip_service_control_isSet) {
        obj.insert(QString("skipServiceControl"), ::OpenAPI::toJsonValue(m_skip_service_control));
    }
    return obj;
}

bool OAIUsageRule::isAllowUnregisteredCalls() const {
    return m_allow_unregistered_calls;
}
void OAIUsageRule::setAllowUnregisteredCalls(const bool &allow_unregistered_calls) {
    m_allow_unregistered_calls = allow_unregistered_calls;
    m_allow_unregistered_calls_isSet = true;
}

bool OAIUsageRule::is_allow_unregistered_calls_Set() const{
    return m_allow_unregistered_calls_isSet;
}

bool OAIUsageRule::is_allow_unregistered_calls_Valid() const{
    return m_allow_unregistered_calls_isValid;
}

QString OAIUsageRule::getSelector() const {
    return m_selector;
}
void OAIUsageRule::setSelector(const QString &selector) {
    m_selector = selector;
    m_selector_isSet = true;
}

bool OAIUsageRule::is_selector_Set() const{
    return m_selector_isSet;
}

bool OAIUsageRule::is_selector_Valid() const{
    return m_selector_isValid;
}

bool OAIUsageRule::isSkipServiceControl() const {
    return m_skip_service_control;
}
void OAIUsageRule::setSkipServiceControl(const bool &skip_service_control) {
    m_skip_service_control = skip_service_control;
    m_skip_service_control_isSet = true;
}

bool OAIUsageRule::is_skip_service_control_Set() const{
    return m_skip_service_control_isSet;
}

bool OAIUsageRule::is_skip_service_control_Valid() const{
    return m_skip_service_control_isValid;
}

bool OAIUsageRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_unregistered_calls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selector_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_service_control_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUsageRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
