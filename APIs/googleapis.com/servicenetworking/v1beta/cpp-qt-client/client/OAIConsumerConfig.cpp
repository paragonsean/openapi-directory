/**
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConsumerConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConsumerConfig::OAIConsumerConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConsumerConfig::OAIConsumerConfig() {
    this->initializeModel();
}

OAIConsumerConfig::~OAIConsumerConfig() {}

void OAIConsumerConfig::initializeModel() {

    m_cloudsql_configs_isSet = false;
    m_cloudsql_configs_isValid = false;

    m_consumer_export_custom_routes_isSet = false;
    m_consumer_export_custom_routes_isValid = false;

    m_consumer_export_subnet_routes_with_public_ip_isSet = false;
    m_consumer_export_subnet_routes_with_public_ip_isValid = false;

    m_consumer_import_custom_routes_isSet = false;
    m_consumer_import_custom_routes_isValid = false;

    m_consumer_import_subnet_routes_with_public_ip_isSet = false;
    m_consumer_import_subnet_routes_with_public_ip_isValid = false;

    m_producer_export_custom_routes_isSet = false;
    m_producer_export_custom_routes_isValid = false;

    m_producer_export_subnet_routes_with_public_ip_isSet = false;
    m_producer_export_subnet_routes_with_public_ip_isValid = false;

    m_producer_import_custom_routes_isSet = false;
    m_producer_import_custom_routes_isValid = false;

    m_producer_import_subnet_routes_with_public_ip_isSet = false;
    m_producer_import_subnet_routes_with_public_ip_isValid = false;

    m_producer_network_isSet = false;
    m_producer_network_isValid = false;

    m_reserved_ranges_isSet = false;
    m_reserved_ranges_isValid = false;

    m_used_ip_ranges_isSet = false;
    m_used_ip_ranges_isValid = false;

    m_vpc_sc_reference_architecture_enabled_isSet = false;
    m_vpc_sc_reference_architecture_enabled_isValid = false;
}

void OAIConsumerConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConsumerConfig::fromJsonObject(QJsonObject json) {

    m_cloudsql_configs_isValid = ::OpenAPI::fromJsonValue(m_cloudsql_configs, json[QString("cloudsqlConfigs")]);
    m_cloudsql_configs_isSet = !json[QString("cloudsqlConfigs")].isNull() && m_cloudsql_configs_isValid;

    m_consumer_export_custom_routes_isValid = ::OpenAPI::fromJsonValue(m_consumer_export_custom_routes, json[QString("consumerExportCustomRoutes")]);
    m_consumer_export_custom_routes_isSet = !json[QString("consumerExportCustomRoutes")].isNull() && m_consumer_export_custom_routes_isValid;

    m_consumer_export_subnet_routes_with_public_ip_isValid = ::OpenAPI::fromJsonValue(m_consumer_export_subnet_routes_with_public_ip, json[QString("consumerExportSubnetRoutesWithPublicIp")]);
    m_consumer_export_subnet_routes_with_public_ip_isSet = !json[QString("consumerExportSubnetRoutesWithPublicIp")].isNull() && m_consumer_export_subnet_routes_with_public_ip_isValid;

    m_consumer_import_custom_routes_isValid = ::OpenAPI::fromJsonValue(m_consumer_import_custom_routes, json[QString("consumerImportCustomRoutes")]);
    m_consumer_import_custom_routes_isSet = !json[QString("consumerImportCustomRoutes")].isNull() && m_consumer_import_custom_routes_isValid;

    m_consumer_import_subnet_routes_with_public_ip_isValid = ::OpenAPI::fromJsonValue(m_consumer_import_subnet_routes_with_public_ip, json[QString("consumerImportSubnetRoutesWithPublicIp")]);
    m_consumer_import_subnet_routes_with_public_ip_isSet = !json[QString("consumerImportSubnetRoutesWithPublicIp")].isNull() && m_consumer_import_subnet_routes_with_public_ip_isValid;

    m_producer_export_custom_routes_isValid = ::OpenAPI::fromJsonValue(m_producer_export_custom_routes, json[QString("producerExportCustomRoutes")]);
    m_producer_export_custom_routes_isSet = !json[QString("producerExportCustomRoutes")].isNull() && m_producer_export_custom_routes_isValid;

    m_producer_export_subnet_routes_with_public_ip_isValid = ::OpenAPI::fromJsonValue(m_producer_export_subnet_routes_with_public_ip, json[QString("producerExportSubnetRoutesWithPublicIp")]);
    m_producer_export_subnet_routes_with_public_ip_isSet = !json[QString("producerExportSubnetRoutesWithPublicIp")].isNull() && m_producer_export_subnet_routes_with_public_ip_isValid;

    m_producer_import_custom_routes_isValid = ::OpenAPI::fromJsonValue(m_producer_import_custom_routes, json[QString("producerImportCustomRoutes")]);
    m_producer_import_custom_routes_isSet = !json[QString("producerImportCustomRoutes")].isNull() && m_producer_import_custom_routes_isValid;

    m_producer_import_subnet_routes_with_public_ip_isValid = ::OpenAPI::fromJsonValue(m_producer_import_subnet_routes_with_public_ip, json[QString("producerImportSubnetRoutesWithPublicIp")]);
    m_producer_import_subnet_routes_with_public_ip_isSet = !json[QString("producerImportSubnetRoutesWithPublicIp")].isNull() && m_producer_import_subnet_routes_with_public_ip_isValid;

    m_producer_network_isValid = ::OpenAPI::fromJsonValue(m_producer_network, json[QString("producerNetwork")]);
    m_producer_network_isSet = !json[QString("producerNetwork")].isNull() && m_producer_network_isValid;

    m_reserved_ranges_isValid = ::OpenAPI::fromJsonValue(m_reserved_ranges, json[QString("reservedRanges")]);
    m_reserved_ranges_isSet = !json[QString("reservedRanges")].isNull() && m_reserved_ranges_isValid;

    m_used_ip_ranges_isValid = ::OpenAPI::fromJsonValue(m_used_ip_ranges, json[QString("usedIpRanges")]);
    m_used_ip_ranges_isSet = !json[QString("usedIpRanges")].isNull() && m_used_ip_ranges_isValid;

    m_vpc_sc_reference_architecture_enabled_isValid = ::OpenAPI::fromJsonValue(m_vpc_sc_reference_architecture_enabled, json[QString("vpcScReferenceArchitectureEnabled")]);
    m_vpc_sc_reference_architecture_enabled_isSet = !json[QString("vpcScReferenceArchitectureEnabled")].isNull() && m_vpc_sc_reference_architecture_enabled_isValid;
}

QString OAIConsumerConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConsumerConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_cloudsql_configs.size() > 0) {
        obj.insert(QString("cloudsqlConfigs"), ::OpenAPI::toJsonValue(m_cloudsql_configs));
    }
    if (m_consumer_export_custom_routes_isSet) {
        obj.insert(QString("consumerExportCustomRoutes"), ::OpenAPI::toJsonValue(m_consumer_export_custom_routes));
    }
    if (m_consumer_export_subnet_routes_with_public_ip_isSet) {
        obj.insert(QString("consumerExportSubnetRoutesWithPublicIp"), ::OpenAPI::toJsonValue(m_consumer_export_subnet_routes_with_public_ip));
    }
    if (m_consumer_import_custom_routes_isSet) {
        obj.insert(QString("consumerImportCustomRoutes"), ::OpenAPI::toJsonValue(m_consumer_import_custom_routes));
    }
    if (m_consumer_import_subnet_routes_with_public_ip_isSet) {
        obj.insert(QString("consumerImportSubnetRoutesWithPublicIp"), ::OpenAPI::toJsonValue(m_consumer_import_subnet_routes_with_public_ip));
    }
    if (m_producer_export_custom_routes_isSet) {
        obj.insert(QString("producerExportCustomRoutes"), ::OpenAPI::toJsonValue(m_producer_export_custom_routes));
    }
    if (m_producer_export_subnet_routes_with_public_ip_isSet) {
        obj.insert(QString("producerExportSubnetRoutesWithPublicIp"), ::OpenAPI::toJsonValue(m_producer_export_subnet_routes_with_public_ip));
    }
    if (m_producer_import_custom_routes_isSet) {
        obj.insert(QString("producerImportCustomRoutes"), ::OpenAPI::toJsonValue(m_producer_import_custom_routes));
    }
    if (m_producer_import_subnet_routes_with_public_ip_isSet) {
        obj.insert(QString("producerImportSubnetRoutesWithPublicIp"), ::OpenAPI::toJsonValue(m_producer_import_subnet_routes_with_public_ip));
    }
    if (m_producer_network_isSet) {
        obj.insert(QString("producerNetwork"), ::OpenAPI::toJsonValue(m_producer_network));
    }
    if (m_reserved_ranges.size() > 0) {
        obj.insert(QString("reservedRanges"), ::OpenAPI::toJsonValue(m_reserved_ranges));
    }
    if (m_used_ip_ranges.size() > 0) {
        obj.insert(QString("usedIpRanges"), ::OpenAPI::toJsonValue(m_used_ip_ranges));
    }
    if (m_vpc_sc_reference_architecture_enabled_isSet) {
        obj.insert(QString("vpcScReferenceArchitectureEnabled"), ::OpenAPI::toJsonValue(m_vpc_sc_reference_architecture_enabled));
    }
    return obj;
}

QList<OAICloudSQLConfig> OAIConsumerConfig::getCloudsqlConfigs() const {
    return m_cloudsql_configs;
}
void OAIConsumerConfig::setCloudsqlConfigs(const QList<OAICloudSQLConfig> &cloudsql_configs) {
    m_cloudsql_configs = cloudsql_configs;
    m_cloudsql_configs_isSet = true;
}

bool OAIConsumerConfig::is_cloudsql_configs_Set() const{
    return m_cloudsql_configs_isSet;
}

bool OAIConsumerConfig::is_cloudsql_configs_Valid() const{
    return m_cloudsql_configs_isValid;
}

bool OAIConsumerConfig::isConsumerExportCustomRoutes() const {
    return m_consumer_export_custom_routes;
}
void OAIConsumerConfig::setConsumerExportCustomRoutes(const bool &consumer_export_custom_routes) {
    m_consumer_export_custom_routes = consumer_export_custom_routes;
    m_consumer_export_custom_routes_isSet = true;
}

bool OAIConsumerConfig::is_consumer_export_custom_routes_Set() const{
    return m_consumer_export_custom_routes_isSet;
}

bool OAIConsumerConfig::is_consumer_export_custom_routes_Valid() const{
    return m_consumer_export_custom_routes_isValid;
}

bool OAIConsumerConfig::isConsumerExportSubnetRoutesWithPublicIp() const {
    return m_consumer_export_subnet_routes_with_public_ip;
}
void OAIConsumerConfig::setConsumerExportSubnetRoutesWithPublicIp(const bool &consumer_export_subnet_routes_with_public_ip) {
    m_consumer_export_subnet_routes_with_public_ip = consumer_export_subnet_routes_with_public_ip;
    m_consumer_export_subnet_routes_with_public_ip_isSet = true;
}

bool OAIConsumerConfig::is_consumer_export_subnet_routes_with_public_ip_Set() const{
    return m_consumer_export_subnet_routes_with_public_ip_isSet;
}

bool OAIConsumerConfig::is_consumer_export_subnet_routes_with_public_ip_Valid() const{
    return m_consumer_export_subnet_routes_with_public_ip_isValid;
}

bool OAIConsumerConfig::isConsumerImportCustomRoutes() const {
    return m_consumer_import_custom_routes;
}
void OAIConsumerConfig::setConsumerImportCustomRoutes(const bool &consumer_import_custom_routes) {
    m_consumer_import_custom_routes = consumer_import_custom_routes;
    m_consumer_import_custom_routes_isSet = true;
}

bool OAIConsumerConfig::is_consumer_import_custom_routes_Set() const{
    return m_consumer_import_custom_routes_isSet;
}

bool OAIConsumerConfig::is_consumer_import_custom_routes_Valid() const{
    return m_consumer_import_custom_routes_isValid;
}

bool OAIConsumerConfig::isConsumerImportSubnetRoutesWithPublicIp() const {
    return m_consumer_import_subnet_routes_with_public_ip;
}
void OAIConsumerConfig::setConsumerImportSubnetRoutesWithPublicIp(const bool &consumer_import_subnet_routes_with_public_ip) {
    m_consumer_import_subnet_routes_with_public_ip = consumer_import_subnet_routes_with_public_ip;
    m_consumer_import_subnet_routes_with_public_ip_isSet = true;
}

bool OAIConsumerConfig::is_consumer_import_subnet_routes_with_public_ip_Set() const{
    return m_consumer_import_subnet_routes_with_public_ip_isSet;
}

bool OAIConsumerConfig::is_consumer_import_subnet_routes_with_public_ip_Valid() const{
    return m_consumer_import_subnet_routes_with_public_ip_isValid;
}

bool OAIConsumerConfig::isProducerExportCustomRoutes() const {
    return m_producer_export_custom_routes;
}
void OAIConsumerConfig::setProducerExportCustomRoutes(const bool &producer_export_custom_routes) {
    m_producer_export_custom_routes = producer_export_custom_routes;
    m_producer_export_custom_routes_isSet = true;
}

bool OAIConsumerConfig::is_producer_export_custom_routes_Set() const{
    return m_producer_export_custom_routes_isSet;
}

bool OAIConsumerConfig::is_producer_export_custom_routes_Valid() const{
    return m_producer_export_custom_routes_isValid;
}

bool OAIConsumerConfig::isProducerExportSubnetRoutesWithPublicIp() const {
    return m_producer_export_subnet_routes_with_public_ip;
}
void OAIConsumerConfig::setProducerExportSubnetRoutesWithPublicIp(const bool &producer_export_subnet_routes_with_public_ip) {
    m_producer_export_subnet_routes_with_public_ip = producer_export_subnet_routes_with_public_ip;
    m_producer_export_subnet_routes_with_public_ip_isSet = true;
}

bool OAIConsumerConfig::is_producer_export_subnet_routes_with_public_ip_Set() const{
    return m_producer_export_subnet_routes_with_public_ip_isSet;
}

bool OAIConsumerConfig::is_producer_export_subnet_routes_with_public_ip_Valid() const{
    return m_producer_export_subnet_routes_with_public_ip_isValid;
}

bool OAIConsumerConfig::isProducerImportCustomRoutes() const {
    return m_producer_import_custom_routes;
}
void OAIConsumerConfig::setProducerImportCustomRoutes(const bool &producer_import_custom_routes) {
    m_producer_import_custom_routes = producer_import_custom_routes;
    m_producer_import_custom_routes_isSet = true;
}

bool OAIConsumerConfig::is_producer_import_custom_routes_Set() const{
    return m_producer_import_custom_routes_isSet;
}

bool OAIConsumerConfig::is_producer_import_custom_routes_Valid() const{
    return m_producer_import_custom_routes_isValid;
}

bool OAIConsumerConfig::isProducerImportSubnetRoutesWithPublicIp() const {
    return m_producer_import_subnet_routes_with_public_ip;
}
void OAIConsumerConfig::setProducerImportSubnetRoutesWithPublicIp(const bool &producer_import_subnet_routes_with_public_ip) {
    m_producer_import_subnet_routes_with_public_ip = producer_import_subnet_routes_with_public_ip;
    m_producer_import_subnet_routes_with_public_ip_isSet = true;
}

bool OAIConsumerConfig::is_producer_import_subnet_routes_with_public_ip_Set() const{
    return m_producer_import_subnet_routes_with_public_ip_isSet;
}

bool OAIConsumerConfig::is_producer_import_subnet_routes_with_public_ip_Valid() const{
    return m_producer_import_subnet_routes_with_public_ip_isValid;
}

QString OAIConsumerConfig::getProducerNetwork() const {
    return m_producer_network;
}
void OAIConsumerConfig::setProducerNetwork(const QString &producer_network) {
    m_producer_network = producer_network;
    m_producer_network_isSet = true;
}

bool OAIConsumerConfig::is_producer_network_Set() const{
    return m_producer_network_isSet;
}

bool OAIConsumerConfig::is_producer_network_Valid() const{
    return m_producer_network_isValid;
}

QList<OAIGoogleCloudServicenetworkingV1ConsumerConfigReservedRange> OAIConsumerConfig::getReservedRanges() const {
    return m_reserved_ranges;
}
void OAIConsumerConfig::setReservedRanges(const QList<OAIGoogleCloudServicenetworkingV1ConsumerConfigReservedRange> &reserved_ranges) {
    m_reserved_ranges = reserved_ranges;
    m_reserved_ranges_isSet = true;
}

bool OAIConsumerConfig::is_reserved_ranges_Set() const{
    return m_reserved_ranges_isSet;
}

bool OAIConsumerConfig::is_reserved_ranges_Valid() const{
    return m_reserved_ranges_isValid;
}

QList<QString> OAIConsumerConfig::getUsedIpRanges() const {
    return m_used_ip_ranges;
}
void OAIConsumerConfig::setUsedIpRanges(const QList<QString> &used_ip_ranges) {
    m_used_ip_ranges = used_ip_ranges;
    m_used_ip_ranges_isSet = true;
}

bool OAIConsumerConfig::is_used_ip_ranges_Set() const{
    return m_used_ip_ranges_isSet;
}

bool OAIConsumerConfig::is_used_ip_ranges_Valid() const{
    return m_used_ip_ranges_isValid;
}

bool OAIConsumerConfig::isVpcScReferenceArchitectureEnabled() const {
    return m_vpc_sc_reference_architecture_enabled;
}
void OAIConsumerConfig::setVpcScReferenceArchitectureEnabled(const bool &vpc_sc_reference_architecture_enabled) {
    m_vpc_sc_reference_architecture_enabled = vpc_sc_reference_architecture_enabled;
    m_vpc_sc_reference_architecture_enabled_isSet = true;
}

bool OAIConsumerConfig::is_vpc_sc_reference_architecture_enabled_Set() const{
    return m_vpc_sc_reference_architecture_enabled_isSet;
}

bool OAIConsumerConfig::is_vpc_sc_reference_architecture_enabled_Valid() const{
    return m_vpc_sc_reference_architecture_enabled_isValid;
}

bool OAIConsumerConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cloudsql_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumer_export_custom_routes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumer_export_subnet_routes_with_public_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumer_import_custom_routes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumer_import_subnet_routes_with_public_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_producer_export_custom_routes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_producer_export_subnet_routes_with_public_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_producer_import_custom_routes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_producer_import_subnet_routes_with_public_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_producer_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_ip_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_sc_reference_architecture_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConsumerConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
