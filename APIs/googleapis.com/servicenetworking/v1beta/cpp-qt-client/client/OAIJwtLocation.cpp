/**
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJwtLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJwtLocation::OAIJwtLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJwtLocation::OAIJwtLocation() {
    this->initializeModel();
}

OAIJwtLocation::~OAIJwtLocation() {}

void OAIJwtLocation::initializeModel() {

    m_cookie_isSet = false;
    m_cookie_isValid = false;

    m_header_isSet = false;
    m_header_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_value_prefix_isSet = false;
    m_value_prefix_isValid = false;
}

void OAIJwtLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJwtLocation::fromJsonObject(QJsonObject json) {

    m_cookie_isValid = ::OpenAPI::fromJsonValue(m_cookie, json[QString("cookie")]);
    m_cookie_isSet = !json[QString("cookie")].isNull() && m_cookie_isValid;

    m_header_isValid = ::OpenAPI::fromJsonValue(m_header, json[QString("header")]);
    m_header_isSet = !json[QString("header")].isNull() && m_header_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_value_prefix_isValid = ::OpenAPI::fromJsonValue(m_value_prefix, json[QString("valuePrefix")]);
    m_value_prefix_isSet = !json[QString("valuePrefix")].isNull() && m_value_prefix_isValid;
}

QString OAIJwtLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJwtLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_cookie_isSet) {
        obj.insert(QString("cookie"), ::OpenAPI::toJsonValue(m_cookie));
    }
    if (m_header_isSet) {
        obj.insert(QString("header"), ::OpenAPI::toJsonValue(m_header));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_value_prefix_isSet) {
        obj.insert(QString("valuePrefix"), ::OpenAPI::toJsonValue(m_value_prefix));
    }
    return obj;
}

QString OAIJwtLocation::getCookie() const {
    return m_cookie;
}
void OAIJwtLocation::setCookie(const QString &cookie) {
    m_cookie = cookie;
    m_cookie_isSet = true;
}

bool OAIJwtLocation::is_cookie_Set() const{
    return m_cookie_isSet;
}

bool OAIJwtLocation::is_cookie_Valid() const{
    return m_cookie_isValid;
}

QString OAIJwtLocation::getHeader() const {
    return m_header;
}
void OAIJwtLocation::setHeader(const QString &header) {
    m_header = header;
    m_header_isSet = true;
}

bool OAIJwtLocation::is_header_Set() const{
    return m_header_isSet;
}

bool OAIJwtLocation::is_header_Valid() const{
    return m_header_isValid;
}

QString OAIJwtLocation::getQuery() const {
    return m_query;
}
void OAIJwtLocation::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIJwtLocation::is_query_Set() const{
    return m_query_isSet;
}

bool OAIJwtLocation::is_query_Valid() const{
    return m_query_isValid;
}

QString OAIJwtLocation::getValuePrefix() const {
    return m_value_prefix;
}
void OAIJwtLocation::setValuePrefix(const QString &value_prefix) {
    m_value_prefix = value_prefix;
    m_value_prefix_isSet = true;
}

bool OAIJwtLocation::is_value_prefix_Set() const{
    return m_value_prefix_isSet;
}

bool OAIJwtLocation::is_value_prefix_Valid() const{
    return m_value_prefix_isValid;
}

bool OAIJwtLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cookie_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_header_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJwtLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
