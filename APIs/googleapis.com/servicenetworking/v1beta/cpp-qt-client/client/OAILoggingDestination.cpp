/**
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoggingDestination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoggingDestination::OAILoggingDestination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoggingDestination::OAILoggingDestination() {
    this->initializeModel();
}

OAILoggingDestination::~OAILoggingDestination() {}

void OAILoggingDestination::initializeModel() {

    m_logs_isSet = false;
    m_logs_isValid = false;

    m_monitored_resource_isSet = false;
    m_monitored_resource_isValid = false;
}

void OAILoggingDestination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoggingDestination::fromJsonObject(QJsonObject json) {

    m_logs_isValid = ::OpenAPI::fromJsonValue(m_logs, json[QString("logs")]);
    m_logs_isSet = !json[QString("logs")].isNull() && m_logs_isValid;

    m_monitored_resource_isValid = ::OpenAPI::fromJsonValue(m_monitored_resource, json[QString("monitoredResource")]);
    m_monitored_resource_isSet = !json[QString("monitoredResource")].isNull() && m_monitored_resource_isValid;
}

QString OAILoggingDestination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoggingDestination::asJsonObject() const {
    QJsonObject obj;
    if (m_logs.size() > 0) {
        obj.insert(QString("logs"), ::OpenAPI::toJsonValue(m_logs));
    }
    if (m_monitored_resource_isSet) {
        obj.insert(QString("monitoredResource"), ::OpenAPI::toJsonValue(m_monitored_resource));
    }
    return obj;
}

QList<QString> OAILoggingDestination::getLogs() const {
    return m_logs;
}
void OAILoggingDestination::setLogs(const QList<QString> &logs) {
    m_logs = logs;
    m_logs_isSet = true;
}

bool OAILoggingDestination::is_logs_Set() const{
    return m_logs_isSet;
}

bool OAILoggingDestination::is_logs_Valid() const{
    return m_logs_isValid;
}

QString OAILoggingDestination::getMonitoredResource() const {
    return m_monitored_resource;
}
void OAILoggingDestination::setMonitoredResource(const QString &monitored_resource) {
    m_monitored_resource = monitored_resource;
    m_monitored_resource_isSet = true;
}

bool OAILoggingDestination::is_monitored_resource_Set() const{
    return m_monitored_resource_isSet;
}

bool OAILoggingDestination::is_monitored_resource_Valid() const{
    return m_monitored_resource_isValid;
}

bool OAILoggingDestination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_logs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitored_resource_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoggingDestination::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
