/**
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClientLibrarySettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClientLibrarySettings::OAIClientLibrarySettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClientLibrarySettings::OAIClientLibrarySettings() {
    this->initializeModel();
}

OAIClientLibrarySettings::~OAIClientLibrarySettings() {}

void OAIClientLibrarySettings::initializeModel() {

    m_cpp_settings_isSet = false;
    m_cpp_settings_isValid = false;

    m_dotnet_settings_isSet = false;
    m_dotnet_settings_isValid = false;

    m_go_settings_isSet = false;
    m_go_settings_isValid = false;

    m_java_settings_isSet = false;
    m_java_settings_isValid = false;

    m_launch_stage_isSet = false;
    m_launch_stage_isValid = false;

    m_node_settings_isSet = false;
    m_node_settings_isValid = false;

    m_php_settings_isSet = false;
    m_php_settings_isValid = false;

    m_python_settings_isSet = false;
    m_python_settings_isValid = false;

    m_rest_numeric_enums_isSet = false;
    m_rest_numeric_enums_isValid = false;

    m_ruby_settings_isSet = false;
    m_ruby_settings_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIClientLibrarySettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClientLibrarySettings::fromJsonObject(QJsonObject json) {

    m_cpp_settings_isValid = ::OpenAPI::fromJsonValue(m_cpp_settings, json[QString("cppSettings")]);
    m_cpp_settings_isSet = !json[QString("cppSettings")].isNull() && m_cpp_settings_isValid;

    m_dotnet_settings_isValid = ::OpenAPI::fromJsonValue(m_dotnet_settings, json[QString("dotnetSettings")]);
    m_dotnet_settings_isSet = !json[QString("dotnetSettings")].isNull() && m_dotnet_settings_isValid;

    m_go_settings_isValid = ::OpenAPI::fromJsonValue(m_go_settings, json[QString("goSettings")]);
    m_go_settings_isSet = !json[QString("goSettings")].isNull() && m_go_settings_isValid;

    m_java_settings_isValid = ::OpenAPI::fromJsonValue(m_java_settings, json[QString("javaSettings")]);
    m_java_settings_isSet = !json[QString("javaSettings")].isNull() && m_java_settings_isValid;

    m_launch_stage_isValid = ::OpenAPI::fromJsonValue(m_launch_stage, json[QString("launchStage")]);
    m_launch_stage_isSet = !json[QString("launchStage")].isNull() && m_launch_stage_isValid;

    m_node_settings_isValid = ::OpenAPI::fromJsonValue(m_node_settings, json[QString("nodeSettings")]);
    m_node_settings_isSet = !json[QString("nodeSettings")].isNull() && m_node_settings_isValid;

    m_php_settings_isValid = ::OpenAPI::fromJsonValue(m_php_settings, json[QString("phpSettings")]);
    m_php_settings_isSet = !json[QString("phpSettings")].isNull() && m_php_settings_isValid;

    m_python_settings_isValid = ::OpenAPI::fromJsonValue(m_python_settings, json[QString("pythonSettings")]);
    m_python_settings_isSet = !json[QString("pythonSettings")].isNull() && m_python_settings_isValid;

    m_rest_numeric_enums_isValid = ::OpenAPI::fromJsonValue(m_rest_numeric_enums, json[QString("restNumericEnums")]);
    m_rest_numeric_enums_isSet = !json[QString("restNumericEnums")].isNull() && m_rest_numeric_enums_isValid;

    m_ruby_settings_isValid = ::OpenAPI::fromJsonValue(m_ruby_settings, json[QString("rubySettings")]);
    m_ruby_settings_isSet = !json[QString("rubySettings")].isNull() && m_ruby_settings_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIClientLibrarySettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClientLibrarySettings::asJsonObject() const {
    QJsonObject obj;
    if (m_cpp_settings.isSet()) {
        obj.insert(QString("cppSettings"), ::OpenAPI::toJsonValue(m_cpp_settings));
    }
    if (m_dotnet_settings.isSet()) {
        obj.insert(QString("dotnetSettings"), ::OpenAPI::toJsonValue(m_dotnet_settings));
    }
    if (m_go_settings.isSet()) {
        obj.insert(QString("goSettings"), ::OpenAPI::toJsonValue(m_go_settings));
    }
    if (m_java_settings.isSet()) {
        obj.insert(QString("javaSettings"), ::OpenAPI::toJsonValue(m_java_settings));
    }
    if (m_launch_stage_isSet) {
        obj.insert(QString("launchStage"), ::OpenAPI::toJsonValue(m_launch_stage));
    }
    if (m_node_settings.isSet()) {
        obj.insert(QString("nodeSettings"), ::OpenAPI::toJsonValue(m_node_settings));
    }
    if (m_php_settings.isSet()) {
        obj.insert(QString("phpSettings"), ::OpenAPI::toJsonValue(m_php_settings));
    }
    if (m_python_settings.isSet()) {
        obj.insert(QString("pythonSettings"), ::OpenAPI::toJsonValue(m_python_settings));
    }
    if (m_rest_numeric_enums_isSet) {
        obj.insert(QString("restNumericEnums"), ::OpenAPI::toJsonValue(m_rest_numeric_enums));
    }
    if (m_ruby_settings.isSet()) {
        obj.insert(QString("rubySettings"), ::OpenAPI::toJsonValue(m_ruby_settings));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

OAICppSettings OAIClientLibrarySettings::getCppSettings() const {
    return m_cpp_settings;
}
void OAIClientLibrarySettings::setCppSettings(const OAICppSettings &cpp_settings) {
    m_cpp_settings = cpp_settings;
    m_cpp_settings_isSet = true;
}

bool OAIClientLibrarySettings::is_cpp_settings_Set() const{
    return m_cpp_settings_isSet;
}

bool OAIClientLibrarySettings::is_cpp_settings_Valid() const{
    return m_cpp_settings_isValid;
}

OAIDotnetSettings OAIClientLibrarySettings::getDotnetSettings() const {
    return m_dotnet_settings;
}
void OAIClientLibrarySettings::setDotnetSettings(const OAIDotnetSettings &dotnet_settings) {
    m_dotnet_settings = dotnet_settings;
    m_dotnet_settings_isSet = true;
}

bool OAIClientLibrarySettings::is_dotnet_settings_Set() const{
    return m_dotnet_settings_isSet;
}

bool OAIClientLibrarySettings::is_dotnet_settings_Valid() const{
    return m_dotnet_settings_isValid;
}

OAIGoSettings OAIClientLibrarySettings::getGoSettings() const {
    return m_go_settings;
}
void OAIClientLibrarySettings::setGoSettings(const OAIGoSettings &go_settings) {
    m_go_settings = go_settings;
    m_go_settings_isSet = true;
}

bool OAIClientLibrarySettings::is_go_settings_Set() const{
    return m_go_settings_isSet;
}

bool OAIClientLibrarySettings::is_go_settings_Valid() const{
    return m_go_settings_isValid;
}

OAIJavaSettings OAIClientLibrarySettings::getJavaSettings() const {
    return m_java_settings;
}
void OAIClientLibrarySettings::setJavaSettings(const OAIJavaSettings &java_settings) {
    m_java_settings = java_settings;
    m_java_settings_isSet = true;
}

bool OAIClientLibrarySettings::is_java_settings_Set() const{
    return m_java_settings_isSet;
}

bool OAIClientLibrarySettings::is_java_settings_Valid() const{
    return m_java_settings_isValid;
}

QString OAIClientLibrarySettings::getLaunchStage() const {
    return m_launch_stage;
}
void OAIClientLibrarySettings::setLaunchStage(const QString &launch_stage) {
    m_launch_stage = launch_stage;
    m_launch_stage_isSet = true;
}

bool OAIClientLibrarySettings::is_launch_stage_Set() const{
    return m_launch_stage_isSet;
}

bool OAIClientLibrarySettings::is_launch_stage_Valid() const{
    return m_launch_stage_isValid;
}

OAINodeSettings OAIClientLibrarySettings::getNodeSettings() const {
    return m_node_settings;
}
void OAIClientLibrarySettings::setNodeSettings(const OAINodeSettings &node_settings) {
    m_node_settings = node_settings;
    m_node_settings_isSet = true;
}

bool OAIClientLibrarySettings::is_node_settings_Set() const{
    return m_node_settings_isSet;
}

bool OAIClientLibrarySettings::is_node_settings_Valid() const{
    return m_node_settings_isValid;
}

OAIPhpSettings OAIClientLibrarySettings::getPhpSettings() const {
    return m_php_settings;
}
void OAIClientLibrarySettings::setPhpSettings(const OAIPhpSettings &php_settings) {
    m_php_settings = php_settings;
    m_php_settings_isSet = true;
}

bool OAIClientLibrarySettings::is_php_settings_Set() const{
    return m_php_settings_isSet;
}

bool OAIClientLibrarySettings::is_php_settings_Valid() const{
    return m_php_settings_isValid;
}

OAIPythonSettings OAIClientLibrarySettings::getPythonSettings() const {
    return m_python_settings;
}
void OAIClientLibrarySettings::setPythonSettings(const OAIPythonSettings &python_settings) {
    m_python_settings = python_settings;
    m_python_settings_isSet = true;
}

bool OAIClientLibrarySettings::is_python_settings_Set() const{
    return m_python_settings_isSet;
}

bool OAIClientLibrarySettings::is_python_settings_Valid() const{
    return m_python_settings_isValid;
}

bool OAIClientLibrarySettings::isRestNumericEnums() const {
    return m_rest_numeric_enums;
}
void OAIClientLibrarySettings::setRestNumericEnums(const bool &rest_numeric_enums) {
    m_rest_numeric_enums = rest_numeric_enums;
    m_rest_numeric_enums_isSet = true;
}

bool OAIClientLibrarySettings::is_rest_numeric_enums_Set() const{
    return m_rest_numeric_enums_isSet;
}

bool OAIClientLibrarySettings::is_rest_numeric_enums_Valid() const{
    return m_rest_numeric_enums_isValid;
}

OAIRubySettings OAIClientLibrarySettings::getRubySettings() const {
    return m_ruby_settings;
}
void OAIClientLibrarySettings::setRubySettings(const OAIRubySettings &ruby_settings) {
    m_ruby_settings = ruby_settings;
    m_ruby_settings_isSet = true;
}

bool OAIClientLibrarySettings::is_ruby_settings_Set() const{
    return m_ruby_settings_isSet;
}

bool OAIClientLibrarySettings::is_ruby_settings_Valid() const{
    return m_ruby_settings_isValid;
}

QString OAIClientLibrarySettings::getVersion() const {
    return m_version;
}
void OAIClientLibrarySettings::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIClientLibrarySettings::is_version_Set() const{
    return m_version_isSet;
}

bool OAIClientLibrarySettings::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIClientLibrarySettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cpp_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dotnet_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_go_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_java_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_stage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_php_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_python_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rest_numeric_enums_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ruby_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClientLibrarySettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
