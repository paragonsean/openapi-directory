/**
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJavaSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJavaSettings::OAIJavaSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJavaSettings::OAIJavaSettings() {
    this->initializeModel();
}

OAIJavaSettings::~OAIJavaSettings() {}

void OAIJavaSettings::initializeModel() {

    m_common_isSet = false;
    m_common_isValid = false;

    m_library_package_isSet = false;
    m_library_package_isValid = false;

    m_service_class_names_isSet = false;
    m_service_class_names_isValid = false;
}

void OAIJavaSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJavaSettings::fromJsonObject(QJsonObject json) {

    m_common_isValid = ::OpenAPI::fromJsonValue(m_common, json[QString("common")]);
    m_common_isSet = !json[QString("common")].isNull() && m_common_isValid;

    m_library_package_isValid = ::OpenAPI::fromJsonValue(m_library_package, json[QString("libraryPackage")]);
    m_library_package_isSet = !json[QString("libraryPackage")].isNull() && m_library_package_isValid;

    m_service_class_names_isValid = ::OpenAPI::fromJsonValue(m_service_class_names, json[QString("serviceClassNames")]);
    m_service_class_names_isSet = !json[QString("serviceClassNames")].isNull() && m_service_class_names_isValid;
}

QString OAIJavaSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJavaSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_common.isSet()) {
        obj.insert(QString("common"), ::OpenAPI::toJsonValue(m_common));
    }
    if (m_library_package_isSet) {
        obj.insert(QString("libraryPackage"), ::OpenAPI::toJsonValue(m_library_package));
    }
    if (m_service_class_names.size() > 0) {
        obj.insert(QString("serviceClassNames"), ::OpenAPI::toJsonValue(m_service_class_names));
    }
    return obj;
}

OAICommonLanguageSettings OAIJavaSettings::getCommon() const {
    return m_common;
}
void OAIJavaSettings::setCommon(const OAICommonLanguageSettings &common) {
    m_common = common;
    m_common_isSet = true;
}

bool OAIJavaSettings::is_common_Set() const{
    return m_common_isSet;
}

bool OAIJavaSettings::is_common_Valid() const{
    return m_common_isValid;
}

QString OAIJavaSettings::getLibraryPackage() const {
    return m_library_package;
}
void OAIJavaSettings::setLibraryPackage(const QString &library_package) {
    m_library_package = library_package;
    m_library_package_isSet = true;
}

bool OAIJavaSettings::is_library_package_Set() const{
    return m_library_package_isSet;
}

bool OAIJavaSettings::is_library_package_Valid() const{
    return m_library_package_isValid;
}

QMap<QString, QString> OAIJavaSettings::getServiceClassNames() const {
    return m_service_class_names;
}
void OAIJavaSettings::setServiceClassNames(const QMap<QString, QString> &service_class_names) {
    m_service_class_names = service_class_names;
    m_service_class_names_isSet = true;
}

bool OAIJavaSettings::is_service_class_names_Set() const{
    return m_service_class_names_isSet;
}

bool OAIJavaSettings::is_service_class_names_Valid() const{
    return m_service_class_names_isValid;
}

bool OAIJavaSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_common.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_library_package_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_class_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJavaSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
