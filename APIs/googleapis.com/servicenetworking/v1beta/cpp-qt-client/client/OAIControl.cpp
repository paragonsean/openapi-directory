/**
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIControl.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIControl::OAIControl(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIControl::OAIControl() {
    this->initializeModel();
}

OAIControl::~OAIControl() {}

void OAIControl::initializeModel() {

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_method_policies_isSet = false;
    m_method_policies_isValid = false;
}

void OAIControl::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIControl::fromJsonObject(QJsonObject json) {

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_method_policies_isValid = ::OpenAPI::fromJsonValue(m_method_policies, json[QString("methodPolicies")]);
    m_method_policies_isSet = !json[QString("methodPolicies")].isNull() && m_method_policies_isValid;
}

QString OAIControl::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIControl::asJsonObject() const {
    QJsonObject obj;
    if (m_environment_isSet) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_method_policies.size() > 0) {
        obj.insert(QString("methodPolicies"), ::OpenAPI::toJsonValue(m_method_policies));
    }
    return obj;
}

QString OAIControl::getEnvironment() const {
    return m_environment;
}
void OAIControl::setEnvironment(const QString &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIControl::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIControl::is_environment_Valid() const{
    return m_environment_isValid;
}

QList<OAIMethodPolicy> OAIControl::getMethodPolicies() const {
    return m_method_policies;
}
void OAIControl::setMethodPolicies(const QList<OAIMethodPolicy> &method_policies) {
    m_method_policies = method_policies;
    m_method_policies_isSet = true;
}

bool OAIControl::is_method_policies_Set() const{
    return m_method_policies_isSet;
}

bool OAIControl::is_method_policies_Valid() const{
    return m_method_policies_isValid;
}

bool OAIControl::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_environment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIControl::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
