/**
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnection::OAIConnection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnection::OAIConnection() {
    this->initializeModel();
}

OAIConnection::~OAIConnection() {}

void OAIConnection::initializeModel() {

    m_network_isSet = false;
    m_network_isValid = false;

    m_peering_isSet = false;
    m_peering_isValid = false;

    m_reserved_peering_ranges_isSet = false;
    m_reserved_peering_ranges_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;
}

void OAIConnection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnection::fromJsonObject(QJsonObject json) {

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_peering_isValid = ::OpenAPI::fromJsonValue(m_peering, json[QString("peering")]);
    m_peering_isSet = !json[QString("peering")].isNull() && m_peering_isValid;

    m_reserved_peering_ranges_isValid = ::OpenAPI::fromJsonValue(m_reserved_peering_ranges, json[QString("reservedPeeringRanges")]);
    m_reserved_peering_ranges_isSet = !json[QString("reservedPeeringRanges")].isNull() && m_reserved_peering_ranges_isValid;

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("service")]);
    m_service_isSet = !json[QString("service")].isNull() && m_service_isValid;
}

QString OAIConnection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnection::asJsonObject() const {
    QJsonObject obj;
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_peering_isSet) {
        obj.insert(QString("peering"), ::OpenAPI::toJsonValue(m_peering));
    }
    if (m_reserved_peering_ranges.size() > 0) {
        obj.insert(QString("reservedPeeringRanges"), ::OpenAPI::toJsonValue(m_reserved_peering_ranges));
    }
    if (m_service_isSet) {
        obj.insert(QString("service"), ::OpenAPI::toJsonValue(m_service));
    }
    return obj;
}

QString OAIConnection::getNetwork() const {
    return m_network;
}
void OAIConnection::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIConnection::is_network_Set() const{
    return m_network_isSet;
}

bool OAIConnection::is_network_Valid() const{
    return m_network_isValid;
}

QString OAIConnection::getPeering() const {
    return m_peering;
}
void OAIConnection::setPeering(const QString &peering) {
    m_peering = peering;
    m_peering_isSet = true;
}

bool OAIConnection::is_peering_Set() const{
    return m_peering_isSet;
}

bool OAIConnection::is_peering_Valid() const{
    return m_peering_isValid;
}

QList<QString> OAIConnection::getReservedPeeringRanges() const {
    return m_reserved_peering_ranges;
}
void OAIConnection::setReservedPeeringRanges(const QList<QString> &reserved_peering_ranges) {
    m_reserved_peering_ranges = reserved_peering_ranges;
    m_reserved_peering_ranges_isSet = true;
}

bool OAIConnection::is_reserved_peering_ranges_Set() const{
    return m_reserved_peering_ranges_isSet;
}

bool OAIConnection::is_reserved_peering_ranges_Valid() const{
    return m_reserved_peering_ranges_isValid;
}

QString OAIConnection::getService() const {
    return m_service;
}
void OAIConnection::setService(const QString &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIConnection::is_service_Set() const{
    return m_service_isSet;
}

bool OAIConnection::is_service_Valid() const{
    return m_service_isValid;
}

bool OAIConnection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_peering_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_peering_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
