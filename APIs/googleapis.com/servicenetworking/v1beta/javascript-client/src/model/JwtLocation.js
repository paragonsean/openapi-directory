/**
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The JwtLocation model module.
 * @module model/JwtLocation
 * @version v1beta
 */
class JwtLocation {
    /**
     * Constructs a new <code>JwtLocation</code>.
     * Specifies a location to extract JWT from an API request.
     * @alias module:model/JwtLocation
     */
    constructor() { 
        
        JwtLocation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JwtLocation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JwtLocation} obj Optional instance to populate.
     * @return {module:model/JwtLocation} The populated <code>JwtLocation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JwtLocation();

            if (data.hasOwnProperty('cookie')) {
                obj['cookie'] = ApiClient.convertToType(data['cookie'], 'String');
            }
            if (data.hasOwnProperty('header')) {
                obj['header'] = ApiClient.convertToType(data['header'], 'String');
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = ApiClient.convertToType(data['query'], 'String');
            }
            if (data.hasOwnProperty('valuePrefix')) {
                obj['valuePrefix'] = ApiClient.convertToType(data['valuePrefix'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JwtLocation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JwtLocation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cookie'] && !(typeof data['cookie'] === 'string' || data['cookie'] instanceof String)) {
            throw new Error("Expected the field `cookie` to be a primitive type in the JSON string but got " + data['cookie']);
        }
        // ensure the json data is a string
        if (data['header'] && !(typeof data['header'] === 'string' || data['header'] instanceof String)) {
            throw new Error("Expected the field `header` to be a primitive type in the JSON string but got " + data['header']);
        }
        // ensure the json data is a string
        if (data['query'] && !(typeof data['query'] === 'string' || data['query'] instanceof String)) {
            throw new Error("Expected the field `query` to be a primitive type in the JSON string but got " + data['query']);
        }
        // ensure the json data is a string
        if (data['valuePrefix'] && !(typeof data['valuePrefix'] === 'string' || data['valuePrefix'] instanceof String)) {
            throw new Error("Expected the field `valuePrefix` to be a primitive type in the JSON string but got " + data['valuePrefix']);
        }

        return true;
    }


}



/**
 * Specifies cookie name to extract JWT token.
 * @member {String} cookie
 */
JwtLocation.prototype['cookie'] = undefined;

/**
 * Specifies HTTP header name to extract JWT token.
 * @member {String} header
 */
JwtLocation.prototype['header'] = undefined;

/**
 * Specifies URL query parameter name to extract JWT token.
 * @member {String} query
 */
JwtLocation.prototype['query'] = undefined;

/**
 * The value prefix. The value format is \"value_prefix{token}\" Only applies to \"in\" header type. Must be empty for \"in\" query type. If not empty, the header value has to match (case sensitive) this prefix. If not matched, JWT will not be extracted. If matched, JWT will be extracted after the prefix is removed. For example, for \"Authorization: Bearer {JWT}\", value_prefix=\"Bearer \" with a space at the end.
 * @member {String} valuePrefix
 */
JwtLocation.prototype['valuePrefix'] = undefined;






export default JwtLocation;

