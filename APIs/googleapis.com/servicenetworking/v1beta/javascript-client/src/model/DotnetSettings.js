/**
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CommonLanguageSettings from './CommonLanguageSettings';

/**
 * The DotnetSettings model module.
 * @module model/DotnetSettings
 * @version v1beta
 */
class DotnetSettings {
    /**
     * Constructs a new <code>DotnetSettings</code>.
     * Settings for Dotnet client libraries.
     * @alias module:model/DotnetSettings
     */
    constructor() { 
        
        DotnetSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DotnetSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DotnetSettings} obj Optional instance to populate.
     * @return {module:model/DotnetSettings} The populated <code>DotnetSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DotnetSettings();

            if (data.hasOwnProperty('common')) {
                obj['common'] = CommonLanguageSettings.constructFromObject(data['common']);
            }
            if (data.hasOwnProperty('forcedNamespaceAliases')) {
                obj['forcedNamespaceAliases'] = ApiClient.convertToType(data['forcedNamespaceAliases'], ['String']);
            }
            if (data.hasOwnProperty('handwrittenSignatures')) {
                obj['handwrittenSignatures'] = ApiClient.convertToType(data['handwrittenSignatures'], ['String']);
            }
            if (data.hasOwnProperty('ignoredResources')) {
                obj['ignoredResources'] = ApiClient.convertToType(data['ignoredResources'], ['String']);
            }
            if (data.hasOwnProperty('renamedResources')) {
                obj['renamedResources'] = ApiClient.convertToType(data['renamedResources'], {'String': 'String'});
            }
            if (data.hasOwnProperty('renamedServices')) {
                obj['renamedServices'] = ApiClient.convertToType(data['renamedServices'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DotnetSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DotnetSettings</code>.
     */
    static validateJSON(data) {
        // validate the optional field `common`
        if (data['common']) { // data not null
          CommonLanguageSettings.validateJSON(data['common']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['forcedNamespaceAliases'])) {
            throw new Error("Expected the field `forcedNamespaceAliases` to be an array in the JSON data but got " + data['forcedNamespaceAliases']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['handwrittenSignatures'])) {
            throw new Error("Expected the field `handwrittenSignatures` to be an array in the JSON data but got " + data['handwrittenSignatures']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ignoredResources'])) {
            throw new Error("Expected the field `ignoredResources` to be an array in the JSON data but got " + data['ignoredResources']);
        }

        return true;
    }


}



/**
 * @member {module:model/CommonLanguageSettings} common
 */
DotnetSettings.prototype['common'] = undefined;

/**
 * Namespaces which must be aliased in snippets due to a known (but non-generator-predictable) naming collision
 * @member {Array.<String>} forcedNamespaceAliases
 */
DotnetSettings.prototype['forcedNamespaceAliases'] = undefined;

/**
 * Method signatures (in the form \"service.method(signature)\") which are provided separately, so shouldn't be generated. Snippets *calling* these methods are still generated, however.
 * @member {Array.<String>} handwrittenSignatures
 */
DotnetSettings.prototype['handwrittenSignatures'] = undefined;

/**
 * List of full resource types to ignore during generation. This is typically used for API-specific Location resources, which should be handled by the generator as if they were actually the common Location resources. Example entry: \"documentai.googleapis.com/Location\"
 * @member {Array.<String>} ignoredResources
 */
DotnetSettings.prototype['ignoredResources'] = undefined;

/**
 * Map from full resource types to the effective short name for the resource. This is used when otherwise resource named from different services would cause naming collisions. Example entry: \"datalabeling.googleapis.com/Dataset\": \"DataLabelingDataset\"
 * @member {Object.<String, String>} renamedResources
 */
DotnetSettings.prototype['renamedResources'] = undefined;

/**
 * Map from original service names to renamed versions. This is used when the default generated types would cause a naming conflict. (Neither name is fully-qualified.) Example: Subscriber to SubscriberServiceApi.
 * @member {Object.<String, String>} renamedServices
 */
DotnetSettings.prototype['renamedServices'] = undefined;






export default DotnetSettings;

