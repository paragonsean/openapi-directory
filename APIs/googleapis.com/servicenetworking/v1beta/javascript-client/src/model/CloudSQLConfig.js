/**
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CloudSQLConfig model module.
 * @module model/CloudSQLConfig
 * @version v1beta
 */
class CloudSQLConfig {
    /**
     * Constructs a new <code>CloudSQLConfig</code>.
     * Cloud SQL configuration.
     * @alias module:model/CloudSQLConfig
     */
    constructor() { 
        
        CloudSQLConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CloudSQLConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CloudSQLConfig} obj Optional instance to populate.
     * @return {module:model/CloudSQLConfig} The populated <code>CloudSQLConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CloudSQLConfig();

            if (data.hasOwnProperty('service')) {
                obj['service'] = ApiClient.convertToType(data['service'], 'String');
            }
            if (data.hasOwnProperty('umbrellaNetwork')) {
                obj['umbrellaNetwork'] = ApiClient.convertToType(data['umbrellaNetwork'], 'String');
            }
            if (data.hasOwnProperty('umbrellaProject')) {
                obj['umbrellaProject'] = ApiClient.convertToType(data['umbrellaProject'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CloudSQLConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CloudSQLConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['service'] && !(typeof data['service'] === 'string' || data['service'] instanceof String)) {
            throw new Error("Expected the field `service` to be a primitive type in the JSON string but got " + data['service']);
        }
        // ensure the json data is a string
        if (data['umbrellaNetwork'] && !(typeof data['umbrellaNetwork'] === 'string' || data['umbrellaNetwork'] instanceof String)) {
            throw new Error("Expected the field `umbrellaNetwork` to be a primitive type in the JSON string but got " + data['umbrellaNetwork']);
        }
        // ensure the json data is a string
        if (data['umbrellaProject'] && !(typeof data['umbrellaProject'] === 'string' || data['umbrellaProject'] instanceof String)) {
            throw new Error("Expected the field `umbrellaProject` to be a primitive type in the JSON string but got " + data['umbrellaProject']);
        }

        return true;
    }


}



/**
 * Peering service used for peering with the Cloud SQL project.
 * @member {String} service
 */
CloudSQLConfig.prototype['service'] = undefined;

/**
 * The name of the umbrella network in the Cloud SQL umbrella project.
 * @member {String} umbrellaNetwork
 */
CloudSQLConfig.prototype['umbrellaNetwork'] = undefined;

/**
 * The project number of the Cloud SQL umbrella project.
 * @member {String} umbrellaProject
 */
CloudSQLConfig.prototype['umbrellaProject'] = undefined;






export default CloudSQLConfig;

