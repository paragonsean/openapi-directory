/**
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Connection model module.
 * @module model/Connection
 * @version v1beta
 */
class Connection {
    /**
     * Constructs a new <code>Connection</code>.
     * Represents a private connection resource. A private connection is implemented as a VPC Network Peering connection between a service producer&#39;s VPC network and a service consumer&#39;s VPC network.
     * @alias module:model/Connection
     */
    constructor() { 
        
        Connection.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Connection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Connection} obj Optional instance to populate.
     * @return {module:model/Connection} The populated <code>Connection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Connection();

            if (data.hasOwnProperty('network')) {
                obj['network'] = ApiClient.convertToType(data['network'], 'String');
            }
            if (data.hasOwnProperty('peering')) {
                obj['peering'] = ApiClient.convertToType(data['peering'], 'String');
            }
            if (data.hasOwnProperty('reservedPeeringRanges')) {
                obj['reservedPeeringRanges'] = ApiClient.convertToType(data['reservedPeeringRanges'], ['String']);
            }
            if (data.hasOwnProperty('service')) {
                obj['service'] = ApiClient.convertToType(data['service'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Connection</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Connection</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['network'] && !(typeof data['network'] === 'string' || data['network'] instanceof String)) {
            throw new Error("Expected the field `network` to be a primitive type in the JSON string but got " + data['network']);
        }
        // ensure the json data is a string
        if (data['peering'] && !(typeof data['peering'] === 'string' || data['peering'] instanceof String)) {
            throw new Error("Expected the field `peering` to be a primitive type in the JSON string but got " + data['peering']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['reservedPeeringRanges'])) {
            throw new Error("Expected the field `reservedPeeringRanges` to be an array in the JSON data but got " + data['reservedPeeringRanges']);
        }
        // ensure the json data is a string
        if (data['service'] && !(typeof data['service'] === 'string' || data['service'] instanceof String)) {
            throw new Error("Expected the field `service` to be a primitive type in the JSON string but got " + data['service']);
        }

        return true;
    }


}



/**
 * The name of service consumer's VPC network that's connected with service producer network, in the following format: `projects/{project}/global/networks/{network}`. `{project}` is a project number, such as in `12345` that includes the VPC service consumer's VPC network. `{network}` is the name of the service consumer's VPC network.
 * @member {String} network
 */
Connection.prototype['network'] = undefined;

/**
 * Output only. The name of the VPC Network Peering connection that was created by the service producer.
 * @member {String} peering
 */
Connection.prototype['peering'] = undefined;

/**
 * The name of one or more allocated IP address ranges for this service producer of type `PEERING`. Note that invoking CreateConnection method with a different range when connection is already established will not modify already provisioned service producer subnetworks. If CreateConnection method is invoked repeatedly to reconnect when peering connection had been disconnected on the consumer side, leaving this field empty will restore previously allocated IP ranges.
 * @member {Array.<String>} reservedPeeringRanges
 */
Connection.prototype['reservedPeeringRanges'] = undefined;

/**
 * Output only. The name of the peering service that's associated with this connection, in the following format: `services/{service name}`.
 * @member {String} service
 */
Connection.prototype['service'] = undefined;






export default Connection;

