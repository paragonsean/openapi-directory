/**
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UsageRule from './UsageRule';

/**
 * The Usage model module.
 * @module model/Usage
 * @version v1beta
 */
class Usage {
    /**
     * Constructs a new <code>Usage</code>.
     * Configuration controlling usage of a service.
     * @alias module:model/Usage
     */
    constructor() { 
        
        Usage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Usage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Usage} obj Optional instance to populate.
     * @return {module:model/Usage} The populated <code>Usage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Usage();

            if (data.hasOwnProperty('producerNotificationChannel')) {
                obj['producerNotificationChannel'] = ApiClient.convertToType(data['producerNotificationChannel'], 'String');
            }
            if (data.hasOwnProperty('requirements')) {
                obj['requirements'] = ApiClient.convertToType(data['requirements'], ['String']);
            }
            if (data.hasOwnProperty('rules')) {
                obj['rules'] = ApiClient.convertToType(data['rules'], [UsageRule]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Usage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Usage</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['producerNotificationChannel'] && !(typeof data['producerNotificationChannel'] === 'string' || data['producerNotificationChannel'] instanceof String)) {
            throw new Error("Expected the field `producerNotificationChannel` to be a primitive type in the JSON string but got " + data['producerNotificationChannel']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['requirements'])) {
            throw new Error("Expected the field `requirements` to be an array in the JSON data but got " + data['requirements']);
        }
        if (data['rules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rules'])) {
                throw new Error("Expected the field `rules` to be an array in the JSON data but got " + data['rules']);
            }
            // validate the optional field `rules` (array)
            for (const item of data['rules']) {
                UsageRule.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The full resource name of a channel used for sending notifications to the service producer. Google Service Management currently only supports [Google Cloud Pub/Sub](https://cloud.google.com/pubsub) as a notification channel. To use Google Cloud Pub/Sub as the channel, this must be the name of a Cloud Pub/Sub topic that uses the Cloud Pub/Sub topic name format documented in https://cloud.google.com/pubsub/docs/overview.
 * @member {String} producerNotificationChannel
 */
Usage.prototype['producerNotificationChannel'] = undefined;

/**
 * Requirements that must be satisfied before a consumer project can use the service. Each requirement is of the form /; for example 'serviceusage.googleapis.com/billing-enabled'. For Google APIs, a Terms of Service requirement must be included here. Google Cloud APIs must include \"serviceusage.googleapis.com/tos/cloud\". Other Google APIs should include \"serviceusage.googleapis.com/tos/universal\". Additional ToS can be included based on the business needs.
 * @member {Array.<String>} requirements
 */
Usage.prototype['requirements'] = undefined;

/**
 * A list of usage rules that apply to individual API methods. **NOTE:** All service configuration rules follow \"last one wins\" order.
 * @member {Array.<module:model/UsageRule>} rules
 */
Usage.prototype['rules'] = undefined;






export default Usage;

