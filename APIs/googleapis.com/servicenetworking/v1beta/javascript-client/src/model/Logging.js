/**
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LoggingDestination from './LoggingDestination';

/**
 * The Logging model module.
 * @module model/Logging
 * @version v1beta
 */
class Logging {
    /**
     * Constructs a new <code>Logging</code>.
     * Logging configuration of the service. The following example shows how to configure logs to be sent to the producer and consumer projects. In the example, the &#x60;activity_history&#x60; log is sent to both the producer and consumer projects, whereas the &#x60;purchase_history&#x60; log is only sent to the producer project. monitored_resources: - type: library.googleapis.com/branch labels: - key: /city description: The city where the library branch is located in. - key: /name description: The name of the branch. logs: - name: activity_history labels: - key: /customer_id - name: purchase_history logging: producer_destinations: - monitored_resource: library.googleapis.com/branch logs: - activity_history - purchase_history consumer_destinations: - monitored_resource: library.googleapis.com/branch logs: - activity_history
     * @alias module:model/Logging
     */
    constructor() { 
        
        Logging.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Logging</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Logging} obj Optional instance to populate.
     * @return {module:model/Logging} The populated <code>Logging</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Logging();

            if (data.hasOwnProperty('consumerDestinations')) {
                obj['consumerDestinations'] = ApiClient.convertToType(data['consumerDestinations'], [LoggingDestination]);
            }
            if (data.hasOwnProperty('producerDestinations')) {
                obj['producerDestinations'] = ApiClient.convertToType(data['producerDestinations'], [LoggingDestination]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Logging</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Logging</code>.
     */
    static validateJSON(data) {
        if (data['consumerDestinations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['consumerDestinations'])) {
                throw new Error("Expected the field `consumerDestinations` to be an array in the JSON data but got " + data['consumerDestinations']);
            }
            // validate the optional field `consumerDestinations` (array)
            for (const item of data['consumerDestinations']) {
                LoggingDestination.validateJSON(item);
            };
        }
        if (data['producerDestinations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['producerDestinations'])) {
                throw new Error("Expected the field `producerDestinations` to be an array in the JSON data but got " + data['producerDestinations']);
            }
            // validate the optional field `producerDestinations` (array)
            for (const item of data['producerDestinations']) {
                LoggingDestination.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Logging configurations for sending logs to the consumer project. There can be multiple consumer destinations, each one must have a different monitored resource type. A log can be used in at most one consumer destination.
 * @member {Array.<module:model/LoggingDestination>} consumerDestinations
 */
Logging.prototype['consumerDestinations'] = undefined;

/**
 * Logging configurations for sending logs to the producer project. There can be multiple producer destinations, each one must have a different monitored resource type. A log can be used in at most one producer destination.
 * @member {Array.<module:model/LoggingDestination>} producerDestinations
 */
Logging.prototype['producerDestinations'] = undefined;






export default Logging;

