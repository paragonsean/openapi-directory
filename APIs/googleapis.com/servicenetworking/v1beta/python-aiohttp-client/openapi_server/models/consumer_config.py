# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cloud_sql_config import CloudSQLConfig
from openapi_server.models.google_cloud_servicenetworking_v1_consumer_config_reserved_range import GoogleCloudServicenetworkingV1ConsumerConfigReservedRange
from openapi_server import util


class ConsumerConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cloudsql_configs: List[CloudSQLConfig]=None, consumer_export_custom_routes: bool=None, consumer_export_subnet_routes_with_public_ip: bool=None, consumer_import_custom_routes: bool=None, consumer_import_subnet_routes_with_public_ip: bool=None, producer_export_custom_routes: bool=None, producer_export_subnet_routes_with_public_ip: bool=None, producer_import_custom_routes: bool=None, producer_import_subnet_routes_with_public_ip: bool=None, producer_network: str=None, reserved_ranges: List[GoogleCloudServicenetworkingV1ConsumerConfigReservedRange]=None, used_ip_ranges: List[str]=None, vpc_sc_reference_architecture_enabled: bool=None):
        """ConsumerConfig - a model defined in OpenAPI

        :param cloudsql_configs: The cloudsql_configs of this ConsumerConfig.
        :param consumer_export_custom_routes: The consumer_export_custom_routes of this ConsumerConfig.
        :param consumer_export_subnet_routes_with_public_ip: The consumer_export_subnet_routes_with_public_ip of this ConsumerConfig.
        :param consumer_import_custom_routes: The consumer_import_custom_routes of this ConsumerConfig.
        :param consumer_import_subnet_routes_with_public_ip: The consumer_import_subnet_routes_with_public_ip of this ConsumerConfig.
        :param producer_export_custom_routes: The producer_export_custom_routes of this ConsumerConfig.
        :param producer_export_subnet_routes_with_public_ip: The producer_export_subnet_routes_with_public_ip of this ConsumerConfig.
        :param producer_import_custom_routes: The producer_import_custom_routes of this ConsumerConfig.
        :param producer_import_subnet_routes_with_public_ip: The producer_import_subnet_routes_with_public_ip of this ConsumerConfig.
        :param producer_network: The producer_network of this ConsumerConfig.
        :param reserved_ranges: The reserved_ranges of this ConsumerConfig.
        :param used_ip_ranges: The used_ip_ranges of this ConsumerConfig.
        :param vpc_sc_reference_architecture_enabled: The vpc_sc_reference_architecture_enabled of this ConsumerConfig.
        """
        self.openapi_types = {
            'cloudsql_configs': List[CloudSQLConfig],
            'consumer_export_custom_routes': bool,
            'consumer_export_subnet_routes_with_public_ip': bool,
            'consumer_import_custom_routes': bool,
            'consumer_import_subnet_routes_with_public_ip': bool,
            'producer_export_custom_routes': bool,
            'producer_export_subnet_routes_with_public_ip': bool,
            'producer_import_custom_routes': bool,
            'producer_import_subnet_routes_with_public_ip': bool,
            'producer_network': str,
            'reserved_ranges': List[GoogleCloudServicenetworkingV1ConsumerConfigReservedRange],
            'used_ip_ranges': List[str],
            'vpc_sc_reference_architecture_enabled': bool
        }

        self.attribute_map = {
            'cloudsql_configs': 'cloudsqlConfigs',
            'consumer_export_custom_routes': 'consumerExportCustomRoutes',
            'consumer_export_subnet_routes_with_public_ip': 'consumerExportSubnetRoutesWithPublicIp',
            'consumer_import_custom_routes': 'consumerImportCustomRoutes',
            'consumer_import_subnet_routes_with_public_ip': 'consumerImportSubnetRoutesWithPublicIp',
            'producer_export_custom_routes': 'producerExportCustomRoutes',
            'producer_export_subnet_routes_with_public_ip': 'producerExportSubnetRoutesWithPublicIp',
            'producer_import_custom_routes': 'producerImportCustomRoutes',
            'producer_import_subnet_routes_with_public_ip': 'producerImportSubnetRoutesWithPublicIp',
            'producer_network': 'producerNetwork',
            'reserved_ranges': 'reservedRanges',
            'used_ip_ranges': 'usedIpRanges',
            'vpc_sc_reference_architecture_enabled': 'vpcScReferenceArchitectureEnabled'
        }

        self._cloudsql_configs = cloudsql_configs
        self._consumer_export_custom_routes = consumer_export_custom_routes
        self._consumer_export_subnet_routes_with_public_ip = consumer_export_subnet_routes_with_public_ip
        self._consumer_import_custom_routes = consumer_import_custom_routes
        self._consumer_import_subnet_routes_with_public_ip = consumer_import_subnet_routes_with_public_ip
        self._producer_export_custom_routes = producer_export_custom_routes
        self._producer_export_subnet_routes_with_public_ip = producer_export_subnet_routes_with_public_ip
        self._producer_import_custom_routes = producer_import_custom_routes
        self._producer_import_subnet_routes_with_public_ip = producer_import_subnet_routes_with_public_ip
        self._producer_network = producer_network
        self._reserved_ranges = reserved_ranges
        self._used_ip_ranges = used_ip_ranges
        self._vpc_sc_reference_architecture_enabled = vpc_sc_reference_architecture_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConsumerConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConsumerConfig of this ConsumerConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cloudsql_configs(self):
        """Gets the cloudsql_configs of this ConsumerConfig.

        Represents one or multiple Cloud SQL configurations.

        :return: The cloudsql_configs of this ConsumerConfig.
        :rtype: List[CloudSQLConfig]
        """
        return self._cloudsql_configs

    @cloudsql_configs.setter
    def cloudsql_configs(self, cloudsql_configs):
        """Sets the cloudsql_configs of this ConsumerConfig.

        Represents one or multiple Cloud SQL configurations.

        :param cloudsql_configs: The cloudsql_configs of this ConsumerConfig.
        :type cloudsql_configs: List[CloudSQLConfig]
        """

        self._cloudsql_configs = cloudsql_configs

    @property
    def consumer_export_custom_routes(self):
        """Gets the consumer_export_custom_routes of this ConsumerConfig.

        Export custom routes flag value for peering from consumer to producer.

        :return: The consumer_export_custom_routes of this ConsumerConfig.
        :rtype: bool
        """
        return self._consumer_export_custom_routes

    @consumer_export_custom_routes.setter
    def consumer_export_custom_routes(self, consumer_export_custom_routes):
        """Sets the consumer_export_custom_routes of this ConsumerConfig.

        Export custom routes flag value for peering from consumer to producer.

        :param consumer_export_custom_routes: The consumer_export_custom_routes of this ConsumerConfig.
        :type consumer_export_custom_routes: bool
        """

        self._consumer_export_custom_routes = consumer_export_custom_routes

    @property
    def consumer_export_subnet_routes_with_public_ip(self):
        """Gets the consumer_export_subnet_routes_with_public_ip of this ConsumerConfig.

        Export subnet routes with public ip flag value for peering from consumer to producer.

        :return: The consumer_export_subnet_routes_with_public_ip of this ConsumerConfig.
        :rtype: bool
        """
        return self._consumer_export_subnet_routes_with_public_ip

    @consumer_export_subnet_routes_with_public_ip.setter
    def consumer_export_subnet_routes_with_public_ip(self, consumer_export_subnet_routes_with_public_ip):
        """Sets the consumer_export_subnet_routes_with_public_ip of this ConsumerConfig.

        Export subnet routes with public ip flag value for peering from consumer to producer.

        :param consumer_export_subnet_routes_with_public_ip: The consumer_export_subnet_routes_with_public_ip of this ConsumerConfig.
        :type consumer_export_subnet_routes_with_public_ip: bool
        """

        self._consumer_export_subnet_routes_with_public_ip = consumer_export_subnet_routes_with_public_ip

    @property
    def consumer_import_custom_routes(self):
        """Gets the consumer_import_custom_routes of this ConsumerConfig.

        Import custom routes flag value for peering from consumer to producer.

        :return: The consumer_import_custom_routes of this ConsumerConfig.
        :rtype: bool
        """
        return self._consumer_import_custom_routes

    @consumer_import_custom_routes.setter
    def consumer_import_custom_routes(self, consumer_import_custom_routes):
        """Sets the consumer_import_custom_routes of this ConsumerConfig.

        Import custom routes flag value for peering from consumer to producer.

        :param consumer_import_custom_routes: The consumer_import_custom_routes of this ConsumerConfig.
        :type consumer_import_custom_routes: bool
        """

        self._consumer_import_custom_routes = consumer_import_custom_routes

    @property
    def consumer_import_subnet_routes_with_public_ip(self):
        """Gets the consumer_import_subnet_routes_with_public_ip of this ConsumerConfig.

        Import subnet routes with public ip flag value for peering from consumer to producer.

        :return: The consumer_import_subnet_routes_with_public_ip of this ConsumerConfig.
        :rtype: bool
        """
        return self._consumer_import_subnet_routes_with_public_ip

    @consumer_import_subnet_routes_with_public_ip.setter
    def consumer_import_subnet_routes_with_public_ip(self, consumer_import_subnet_routes_with_public_ip):
        """Sets the consumer_import_subnet_routes_with_public_ip of this ConsumerConfig.

        Import subnet routes with public ip flag value for peering from consumer to producer.

        :param consumer_import_subnet_routes_with_public_ip: The consumer_import_subnet_routes_with_public_ip of this ConsumerConfig.
        :type consumer_import_subnet_routes_with_public_ip: bool
        """

        self._consumer_import_subnet_routes_with_public_ip = consumer_import_subnet_routes_with_public_ip

    @property
    def producer_export_custom_routes(self):
        """Gets the producer_export_custom_routes of this ConsumerConfig.

        Export custom routes flag value for peering from producer to consumer.

        :return: The producer_export_custom_routes of this ConsumerConfig.
        :rtype: bool
        """
        return self._producer_export_custom_routes

    @producer_export_custom_routes.setter
    def producer_export_custom_routes(self, producer_export_custom_routes):
        """Sets the producer_export_custom_routes of this ConsumerConfig.

        Export custom routes flag value for peering from producer to consumer.

        :param producer_export_custom_routes: The producer_export_custom_routes of this ConsumerConfig.
        :type producer_export_custom_routes: bool
        """

        self._producer_export_custom_routes = producer_export_custom_routes

    @property
    def producer_export_subnet_routes_with_public_ip(self):
        """Gets the producer_export_subnet_routes_with_public_ip of this ConsumerConfig.

        Export subnet routes with public ip flag value for peering from producer to consumer.

        :return: The producer_export_subnet_routes_with_public_ip of this ConsumerConfig.
        :rtype: bool
        """
        return self._producer_export_subnet_routes_with_public_ip

    @producer_export_subnet_routes_with_public_ip.setter
    def producer_export_subnet_routes_with_public_ip(self, producer_export_subnet_routes_with_public_ip):
        """Sets the producer_export_subnet_routes_with_public_ip of this ConsumerConfig.

        Export subnet routes with public ip flag value for peering from producer to consumer.

        :param producer_export_subnet_routes_with_public_ip: The producer_export_subnet_routes_with_public_ip of this ConsumerConfig.
        :type producer_export_subnet_routes_with_public_ip: bool
        """

        self._producer_export_subnet_routes_with_public_ip = producer_export_subnet_routes_with_public_ip

    @property
    def producer_import_custom_routes(self):
        """Gets the producer_import_custom_routes of this ConsumerConfig.

        Import custom routes flag value for peering from producer to consumer.

        :return: The producer_import_custom_routes of this ConsumerConfig.
        :rtype: bool
        """
        return self._producer_import_custom_routes

    @producer_import_custom_routes.setter
    def producer_import_custom_routes(self, producer_import_custom_routes):
        """Sets the producer_import_custom_routes of this ConsumerConfig.

        Import custom routes flag value for peering from producer to consumer.

        :param producer_import_custom_routes: The producer_import_custom_routes of this ConsumerConfig.
        :type producer_import_custom_routes: bool
        """

        self._producer_import_custom_routes = producer_import_custom_routes

    @property
    def producer_import_subnet_routes_with_public_ip(self):
        """Gets the producer_import_subnet_routes_with_public_ip of this ConsumerConfig.

        Import subnet routes with public ip flag value for peering from producer to consumer.

        :return: The producer_import_subnet_routes_with_public_ip of this ConsumerConfig.
        :rtype: bool
        """
        return self._producer_import_subnet_routes_with_public_ip

    @producer_import_subnet_routes_with_public_ip.setter
    def producer_import_subnet_routes_with_public_ip(self, producer_import_subnet_routes_with_public_ip):
        """Sets the producer_import_subnet_routes_with_public_ip of this ConsumerConfig.

        Import subnet routes with public ip flag value for peering from producer to consumer.

        :param producer_import_subnet_routes_with_public_ip: The producer_import_subnet_routes_with_public_ip of this ConsumerConfig.
        :type producer_import_subnet_routes_with_public_ip: bool
        """

        self._producer_import_subnet_routes_with_public_ip = producer_import_subnet_routes_with_public_ip

    @property
    def producer_network(self):
        """Gets the producer_network of this ConsumerConfig.

        Output only. The VPC host network that is used to host managed service instances. In the format, projects/{project}/global/networks/{network} where {project} is the project number e.g. '12345' and {network} is the network name.

        :return: The producer_network of this ConsumerConfig.
        :rtype: str
        """
        return self._producer_network

    @producer_network.setter
    def producer_network(self, producer_network):
        """Sets the producer_network of this ConsumerConfig.

        Output only. The VPC host network that is used to host managed service instances. In the format, projects/{project}/global/networks/{network} where {project} is the project number e.g. '12345' and {network} is the network name.

        :param producer_network: The producer_network of this ConsumerConfig.
        :type producer_network: str
        """

        self._producer_network = producer_network

    @property
    def reserved_ranges(self):
        """Gets the reserved_ranges of this ConsumerConfig.

        Output only. The reserved ranges associated with this private service access connection.

        :return: The reserved_ranges of this ConsumerConfig.
        :rtype: List[GoogleCloudServicenetworkingV1ConsumerConfigReservedRange]
        """
        return self._reserved_ranges

    @reserved_ranges.setter
    def reserved_ranges(self, reserved_ranges):
        """Sets the reserved_ranges of this ConsumerConfig.

        Output only. The reserved ranges associated with this private service access connection.

        :param reserved_ranges: The reserved_ranges of this ConsumerConfig.
        :type reserved_ranges: List[GoogleCloudServicenetworkingV1ConsumerConfigReservedRange]
        """

        self._reserved_ranges = reserved_ranges

    @property
    def used_ip_ranges(self):
        """Gets the used_ip_ranges of this ConsumerConfig.

        Output only. The IP ranges already in use by consumer or producer

        :return: The used_ip_ranges of this ConsumerConfig.
        :rtype: List[str]
        """
        return self._used_ip_ranges

    @used_ip_ranges.setter
    def used_ip_ranges(self, used_ip_ranges):
        """Sets the used_ip_ranges of this ConsumerConfig.

        Output only. The IP ranges already in use by consumer or producer

        :param used_ip_ranges: The used_ip_ranges of this ConsumerConfig.
        :type used_ip_ranges: List[str]
        """

        self._used_ip_ranges = used_ip_ranges

    @property
    def vpc_sc_reference_architecture_enabled(self):
        """Gets the vpc_sc_reference_architecture_enabled of this ConsumerConfig.

        Output only. Indicates whether the VPC Service Controls reference architecture is configured for the producer VPC host network.

        :return: The vpc_sc_reference_architecture_enabled of this ConsumerConfig.
        :rtype: bool
        """
        return self._vpc_sc_reference_architecture_enabled

    @vpc_sc_reference_architecture_enabled.setter
    def vpc_sc_reference_architecture_enabled(self, vpc_sc_reference_architecture_enabled):
        """Sets the vpc_sc_reference_architecture_enabled of this ConsumerConfig.

        Output only. Indicates whether the VPC Service Controls reference architecture is configured for the producer VPC host network.

        :param vpc_sc_reference_architecture_enabled: The vpc_sc_reference_architecture_enabled of this ConsumerConfig.
        :type vpc_sc_reference_architecture_enabled: bool
        """

        self._vpc_sc_reference_architecture_enabled = vpc_sc_reference_architecture_enabled
