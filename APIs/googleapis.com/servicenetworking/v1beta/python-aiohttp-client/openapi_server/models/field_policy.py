# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FieldPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_permission: str=None, resource_type: str=None, selector: str=None):
        """FieldPolicy - a model defined in OpenAPI

        :param resource_permission: The resource_permission of this FieldPolicy.
        :param resource_type: The resource_type of this FieldPolicy.
        :param selector: The selector of this FieldPolicy.
        """
        self.openapi_types = {
            'resource_permission': str,
            'resource_type': str,
            'selector': str
        }

        self.attribute_map = {
            'resource_permission': 'resourcePermission',
            'resource_type': 'resourceType',
            'selector': 'selector'
        }

        self._resource_permission = resource_permission
        self._resource_type = resource_type
        self._selector = selector

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FieldPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FieldPolicy of this FieldPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_permission(self):
        """Gets the resource_permission of this FieldPolicy.

        Specifies the required permission(s) for the resource referred to by the field. It requires the field contains a valid resource reference, and the request must pass the permission checks to proceed. For example, \"resourcemanager.projects.get\".

        :return: The resource_permission of this FieldPolicy.
        :rtype: str
        """
        return self._resource_permission

    @resource_permission.setter
    def resource_permission(self, resource_permission):
        """Sets the resource_permission of this FieldPolicy.

        Specifies the required permission(s) for the resource referred to by the field. It requires the field contains a valid resource reference, and the request must pass the permission checks to proceed. For example, \"resourcemanager.projects.get\".

        :param resource_permission: The resource_permission of this FieldPolicy.
        :type resource_permission: str
        """

        self._resource_permission = resource_permission

    @property
    def resource_type(self):
        """Gets the resource_type of this FieldPolicy.

        Specifies the resource type for the resource referred to by the field.

        :return: The resource_type of this FieldPolicy.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this FieldPolicy.

        Specifies the resource type for the resource referred to by the field.

        :param resource_type: The resource_type of this FieldPolicy.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def selector(self):
        """Gets the selector of this FieldPolicy.

        Selects one or more request or response message fields to apply this `FieldPolicy`. When a `FieldPolicy` is used in proto annotation, the selector must be left as empty. The service config generator will automatically fill the correct value. When a `FieldPolicy` is used in service config, the selector must be a comma-separated string with valid request or response field paths, such as \"foo.bar\" or \"foo.bar,foo.baz\".

        :return: The selector of this FieldPolicy.
        :rtype: str
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """Sets the selector of this FieldPolicy.

        Selects one or more request or response message fields to apply this `FieldPolicy`. When a `FieldPolicy` is used in proto annotation, the selector must be left as empty. The service config generator will automatically fill the correct value. When a `FieldPolicy` is used in service config, the selector must be a comma-separated string with valid request or response field paths, such as \"foo.bar\" or \"foo.bar,foo.baz\".

        :param selector: The selector of this FieldPolicy.
        :type selector: str
        """

        self._selector = selector
