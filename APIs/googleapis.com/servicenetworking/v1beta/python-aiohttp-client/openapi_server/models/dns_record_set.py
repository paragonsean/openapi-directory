# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DnsRecordSet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: List[str]=None, domain: str=None, ttl: str=None, type: str=None):
        """DnsRecordSet - a model defined in OpenAPI

        :param data: The data of this DnsRecordSet.
        :param domain: The domain of this DnsRecordSet.
        :param ttl: The ttl of this DnsRecordSet.
        :param type: The type of this DnsRecordSet.
        """
        self.openapi_types = {
            'data': List[str],
            'domain': str,
            'ttl': str,
            'type': str
        }

        self.attribute_map = {
            'data': 'data',
            'domain': 'domain',
            'ttl': 'ttl',
            'type': 'type'
        }

        self._data = data
        self._domain = domain
        self._ttl = ttl
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DnsRecordSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DnsRecordSet of this DnsRecordSet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this DnsRecordSet.

        Required. As defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1) for examples see https://cloud.google.com/dns/records/json-record.

        :return: The data of this DnsRecordSet.
        :rtype: List[str]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this DnsRecordSet.

        Required. As defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1) for examples see https://cloud.google.com/dns/records/json-record.

        :param data: The data of this DnsRecordSet.
        :type data: List[str]
        """

        self._data = data

    @property
    def domain(self):
        """Gets the domain of this DnsRecordSet.

        Required. The DNS or domain name of the record set, e.g. `test.example.com`. Cloud DNS requires that a DNS suffix ends with a trailing dot.

        :return: The domain of this DnsRecordSet.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this DnsRecordSet.

        Required. The DNS or domain name of the record set, e.g. `test.example.com`. Cloud DNS requires that a DNS suffix ends with a trailing dot.

        :param domain: The domain of this DnsRecordSet.
        :type domain: str
        """

        self._domain = domain

    @property
    def ttl(self):
        """Gets the ttl of this DnsRecordSet.

        Required. The period of time for which this RecordSet can be cached by resolvers.

        :return: The ttl of this DnsRecordSet.
        :rtype: str
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this DnsRecordSet.

        Required. The period of time for which this RecordSet can be cached by resolvers.

        :param ttl: The ttl of this DnsRecordSet.
        :type ttl: str
        """

        self._ttl = ttl

    @property
    def type(self):
        """Gets the type of this DnsRecordSet.

        Required. The identifier of a supported record type.

        :return: The type of this DnsRecordSet.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DnsRecordSet.

        Required. The identifier of a supported record type.

        :param type: The type of this DnsRecordSet.
        :type type: str
        """

        self._type = type
