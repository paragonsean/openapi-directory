# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AddSubnetworkRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consumer: str=None, consumer_network: str=None, description: str=None, ip_prefix_length: int=None, region: str=None, requested_address: str=None, subnetwork: str=None, subnetwork_users: List[str]=None):
        """AddSubnetworkRequest - a model defined in OpenAPI

        :param consumer: The consumer of this AddSubnetworkRequest.
        :param consumer_network: The consumer_network of this AddSubnetworkRequest.
        :param description: The description of this AddSubnetworkRequest.
        :param ip_prefix_length: The ip_prefix_length of this AddSubnetworkRequest.
        :param region: The region of this AddSubnetworkRequest.
        :param requested_address: The requested_address of this AddSubnetworkRequest.
        :param subnetwork: The subnetwork of this AddSubnetworkRequest.
        :param subnetwork_users: The subnetwork_users of this AddSubnetworkRequest.
        """
        self.openapi_types = {
            'consumer': str,
            'consumer_network': str,
            'description': str,
            'ip_prefix_length': int,
            'region': str,
            'requested_address': str,
            'subnetwork': str,
            'subnetwork_users': List[str]
        }

        self.attribute_map = {
            'consumer': 'consumer',
            'consumer_network': 'consumerNetwork',
            'description': 'description',
            'ip_prefix_length': 'ipPrefixLength',
            'region': 'region',
            'requested_address': 'requestedAddress',
            'subnetwork': 'subnetwork',
            'subnetwork_users': 'subnetworkUsers'
        }

        self._consumer = consumer
        self._consumer_network = consumer_network
        self._description = description
        self._ip_prefix_length = ip_prefix_length
        self._region = region
        self._requested_address = requested_address
        self._subnetwork = subnetwork
        self._subnetwork_users = subnetwork_users

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddSubnetworkRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddSubnetworkRequest of this AddSubnetworkRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consumer(self):
        """Gets the consumer of this AddSubnetworkRequest.

        Required. A resource that represents the service consumer, such as `projects/123456`. The project number can be different from the value in the consumer network parameter. For example, the network might be part of a Shared VPC network. In those cases, Service Networking validates that this resource belongs to that Shared VPC.

        :return: The consumer of this AddSubnetworkRequest.
        :rtype: str
        """
        return self._consumer

    @consumer.setter
    def consumer(self, consumer):
        """Sets the consumer of this AddSubnetworkRequest.

        Required. A resource that represents the service consumer, such as `projects/123456`. The project number can be different from the value in the consumer network parameter. For example, the network might be part of a Shared VPC network. In those cases, Service Networking validates that this resource belongs to that Shared VPC.

        :param consumer: The consumer of this AddSubnetworkRequest.
        :type consumer: str
        """

        self._consumer = consumer

    @property
    def consumer_network(self):
        """Gets the consumer_network of this AddSubnetworkRequest.

        Required. The name of the service consumer's VPC network. The network must have an existing private connection that was provisioned through the connections.create method. The name must be in the following format: `projects/{project}/global/networks/{network}`, where {project} is a project number, such as `12345`. {network} is the name of a VPC network in the project.

        :return: The consumer_network of this AddSubnetworkRequest.
        :rtype: str
        """
        return self._consumer_network

    @consumer_network.setter
    def consumer_network(self, consumer_network):
        """Sets the consumer_network of this AddSubnetworkRequest.

        Required. The name of the service consumer's VPC network. The network must have an existing private connection that was provisioned through the connections.create method. The name must be in the following format: `projects/{project}/global/networks/{network}`, where {project} is a project number, such as `12345`. {network} is the name of a VPC network in the project.

        :param consumer_network: The consumer_network of this AddSubnetworkRequest.
        :type consumer_network: str
        """

        self._consumer_network = consumer_network

    @property
    def description(self):
        """Gets the description of this AddSubnetworkRequest.

        An optional description of the subnet.

        :return: The description of this AddSubnetworkRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AddSubnetworkRequest.

        An optional description of the subnet.

        :param description: The description of this AddSubnetworkRequest.
        :type description: str
        """

        self._description = description

    @property
    def ip_prefix_length(self):
        """Gets the ip_prefix_length of this AddSubnetworkRequest.

        Required. The prefix length of the subnet's IP address range. Use CIDR range notation, such as `30` to provision a subnet with an `x.x.x.x/30` CIDR range. The IP address range is drawn from a pool of available ranges in the service consumer's allocated range.

        :return: The ip_prefix_length of this AddSubnetworkRequest.
        :rtype: int
        """
        return self._ip_prefix_length

    @ip_prefix_length.setter
    def ip_prefix_length(self, ip_prefix_length):
        """Sets the ip_prefix_length of this AddSubnetworkRequest.

        Required. The prefix length of the subnet's IP address range. Use CIDR range notation, such as `30` to provision a subnet with an `x.x.x.x/30` CIDR range. The IP address range is drawn from a pool of available ranges in the service consumer's allocated range.

        :param ip_prefix_length: The ip_prefix_length of this AddSubnetworkRequest.
        :type ip_prefix_length: int
        """

        self._ip_prefix_length = ip_prefix_length

    @property
    def region(self):
        """Gets the region of this AddSubnetworkRequest.

        Required. The name of a [region](/compute/docs/regions-zones) for the subnet, such `europe-west1`.

        :return: The region of this AddSubnetworkRequest.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this AddSubnetworkRequest.

        Required. The name of a [region](/compute/docs/regions-zones) for the subnet, such `europe-west1`.

        :param region: The region of this AddSubnetworkRequest.
        :type region: str
        """

        self._region = region

    @property
    def requested_address(self):
        """Gets the requested_address of this AddSubnetworkRequest.

        Optional. The starting address of a range. The address must be a valid IPv4 address in the x.x.x.x format. This value combined with the IP prefix range is the CIDR range for the subnet. The range must be within the allocated range that is assigned to the private connection. If the CIDR range isn't available, the call fails.

        :return: The requested_address of this AddSubnetworkRequest.
        :rtype: str
        """
        return self._requested_address

    @requested_address.setter
    def requested_address(self, requested_address):
        """Sets the requested_address of this AddSubnetworkRequest.

        Optional. The starting address of a range. The address must be a valid IPv4 address in the x.x.x.x format. This value combined with the IP prefix range is the CIDR range for the subnet. The range must be within the allocated range that is assigned to the private connection. If the CIDR range isn't available, the call fails.

        :param requested_address: The requested_address of this AddSubnetworkRequest.
        :type requested_address: str
        """

        self._requested_address = requested_address

    @property
    def subnetwork(self):
        """Gets the subnetwork of this AddSubnetworkRequest.

        Required. A name for the new subnet. For information about the naming requirements, see [subnetwork](/compute/docs/reference/rest/v1/subnetworks) in the Compute API documentation.

        :return: The subnetwork of this AddSubnetworkRequest.
        :rtype: str
        """
        return self._subnetwork

    @subnetwork.setter
    def subnetwork(self, subnetwork):
        """Sets the subnetwork of this AddSubnetworkRequest.

        Required. A name for the new subnet. For information about the naming requirements, see [subnetwork](/compute/docs/reference/rest/v1/subnetworks) in the Compute API documentation.

        :param subnetwork: The subnetwork of this AddSubnetworkRequest.
        :type subnetwork: str
        """

        self._subnetwork = subnetwork

    @property
    def subnetwork_users(self):
        """Gets the subnetwork_users of this AddSubnetworkRequest.

        A list of members that are granted the `compute.networkUser` role on the subnet.

        :return: The subnetwork_users of this AddSubnetworkRequest.
        :rtype: List[str]
        """
        return self._subnetwork_users

    @subnetwork_users.setter
    def subnetwork_users(self, subnetwork_users):
        """Sets the subnetwork_users of this AddSubnetworkRequest.

        A list of members that are granted the `compute.networkUser` role on the subnet.

        :param subnetwork_users: The subnetwork_users of this AddSubnetworkRequest.
        :type subnetwork_users: List[str]
        """

        self._subnetwork_users = subnetwork_users
