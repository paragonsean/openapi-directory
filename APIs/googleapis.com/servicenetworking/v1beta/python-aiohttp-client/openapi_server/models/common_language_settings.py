# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CommonLanguageSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destinations: List[str]=None, reference_docs_uri: str=None):
        """CommonLanguageSettings - a model defined in OpenAPI

        :param destinations: The destinations of this CommonLanguageSettings.
        :param reference_docs_uri: The reference_docs_uri of this CommonLanguageSettings.
        """
        self.openapi_types = {
            'destinations': List[str],
            'reference_docs_uri': str
        }

        self.attribute_map = {
            'destinations': 'destinations',
            'reference_docs_uri': 'referenceDocsUri'
        }

        self._destinations = destinations
        self._reference_docs_uri = reference_docs_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommonLanguageSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommonLanguageSettings of this CommonLanguageSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destinations(self):
        """Gets the destinations of this CommonLanguageSettings.

        The destination where API teams want this client library to be published.

        :return: The destinations of this CommonLanguageSettings.
        :rtype: List[str]
        """
        return self._destinations

    @destinations.setter
    def destinations(self, destinations):
        """Sets the destinations of this CommonLanguageSettings.

        The destination where API teams want this client library to be published.

        :param destinations: The destinations of this CommonLanguageSettings.
        :type destinations: List[str]
        """
        allowed_values = ["CLIENT_LIBRARY_DESTINATION_UNSPECIFIED", "GITHUB", "PACKAGE_MANAGER"]  # noqa: E501
        if not set(destinations).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `destinations` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(destinations) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._destinations = destinations

    @property
    def reference_docs_uri(self):
        """Gets the reference_docs_uri of this CommonLanguageSettings.

        Link to automatically generated reference documentation. Example: https://cloud.google.com/nodejs/docs/reference/asset/latest

        :return: The reference_docs_uri of this CommonLanguageSettings.
        :rtype: str
        """
        return self._reference_docs_uri

    @reference_docs_uri.setter
    def reference_docs_uri(self, reference_docs_uri):
        """Sets the reference_docs_uri of this CommonLanguageSettings.

        Link to automatically generated reference documentation. Example: https://cloud.google.com/nodejs/docs/reference/asset/latest

        :param reference_docs_uri: The reference_docs_uri of this CommonLanguageSettings.
        :type reference_docs_uri: str
        """

        self._reference_docs_uri = reference_docs_uri
