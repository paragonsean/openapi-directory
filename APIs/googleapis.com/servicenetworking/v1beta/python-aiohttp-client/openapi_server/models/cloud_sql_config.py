# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CloudSQLConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, service: str=None, umbrella_network: str=None, umbrella_project: str=None):
        """CloudSQLConfig - a model defined in OpenAPI

        :param service: The service of this CloudSQLConfig.
        :param umbrella_network: The umbrella_network of this CloudSQLConfig.
        :param umbrella_project: The umbrella_project of this CloudSQLConfig.
        """
        self.openapi_types = {
            'service': str,
            'umbrella_network': str,
            'umbrella_project': str
        }

        self.attribute_map = {
            'service': 'service',
            'umbrella_network': 'umbrellaNetwork',
            'umbrella_project': 'umbrellaProject'
        }

        self._service = service
        self._umbrella_network = umbrella_network
        self._umbrella_project = umbrella_project

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloudSQLConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloudSQLConfig of this CloudSQLConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service(self):
        """Gets the service of this CloudSQLConfig.

        Peering service used for peering with the Cloud SQL project.

        :return: The service of this CloudSQLConfig.
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this CloudSQLConfig.

        Peering service used for peering with the Cloud SQL project.

        :param service: The service of this CloudSQLConfig.
        :type service: str
        """

        self._service = service

    @property
    def umbrella_network(self):
        """Gets the umbrella_network of this CloudSQLConfig.

        The name of the umbrella network in the Cloud SQL umbrella project.

        :return: The umbrella_network of this CloudSQLConfig.
        :rtype: str
        """
        return self._umbrella_network

    @umbrella_network.setter
    def umbrella_network(self, umbrella_network):
        """Sets the umbrella_network of this CloudSQLConfig.

        The name of the umbrella network in the Cloud SQL umbrella project.

        :param umbrella_network: The umbrella_network of this CloudSQLConfig.
        :type umbrella_network: str
        """

        self._umbrella_network = umbrella_network

    @property
    def umbrella_project(self):
        """Gets the umbrella_project of this CloudSQLConfig.

        The project number of the Cloud SQL umbrella project.

        :return: The umbrella_project of this CloudSQLConfig.
        :rtype: str
        """
        return self._umbrella_project

    @umbrella_project.setter
    def umbrella_project(self, umbrella_project):
        """Sets the umbrella_project of this CloudSQLConfig.

        The project number of the Cloud SQL umbrella project.

        :param umbrella_project: The umbrella_project of this CloudSQLConfig.
        :type umbrella_project: str
        """

        self._umbrella_project = umbrella_project
