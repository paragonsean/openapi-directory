# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.secondary_ip_range import SecondaryIpRange
from openapi_server import util


class Subnetwork(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip_cidr_range: str=None, name: str=None, network: str=None, outside_allocation: bool=None, region: str=None, secondary_ip_ranges: List[SecondaryIpRange]=None):
        """Subnetwork - a model defined in OpenAPI

        :param ip_cidr_range: The ip_cidr_range of this Subnetwork.
        :param name: The name of this Subnetwork.
        :param network: The network of this Subnetwork.
        :param outside_allocation: The outside_allocation of this Subnetwork.
        :param region: The region of this Subnetwork.
        :param secondary_ip_ranges: The secondary_ip_ranges of this Subnetwork.
        """
        self.openapi_types = {
            'ip_cidr_range': str,
            'name': str,
            'network': str,
            'outside_allocation': bool,
            'region': str,
            'secondary_ip_ranges': List[SecondaryIpRange]
        }

        self.attribute_map = {
            'ip_cidr_range': 'ipCidrRange',
            'name': 'name',
            'network': 'network',
            'outside_allocation': 'outsideAllocation',
            'region': 'region',
            'secondary_ip_ranges': 'secondaryIpRanges'
        }

        self._ip_cidr_range = ip_cidr_range
        self._name = name
        self._network = network
        self._outside_allocation = outside_allocation
        self._region = region
        self._secondary_ip_ranges = secondary_ip_ranges

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Subnetwork':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Subnetwork of this Subnetwork.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip_cidr_range(self):
        """Gets the ip_cidr_range of this Subnetwork.

        Subnetwork CIDR range in `10.x.x.x/y` format.

        :return: The ip_cidr_range of this Subnetwork.
        :rtype: str
        """
        return self._ip_cidr_range

    @ip_cidr_range.setter
    def ip_cidr_range(self, ip_cidr_range):
        """Sets the ip_cidr_range of this Subnetwork.

        Subnetwork CIDR range in `10.x.x.x/y` format.

        :param ip_cidr_range: The ip_cidr_range of this Subnetwork.
        :type ip_cidr_range: str
        """

        self._ip_cidr_range = ip_cidr_range

    @property
    def name(self):
        """Gets the name of this Subnetwork.

        Subnetwork name. See https://cloud.google.com/compute/docs/vpc/

        :return: The name of this Subnetwork.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Subnetwork.

        Subnetwork name. See https://cloud.google.com/compute/docs/vpc/

        :param name: The name of this Subnetwork.
        :type name: str
        """

        self._name = name

    @property
    def network(self):
        """Gets the network of this Subnetwork.

        In the Shared VPC host project, the VPC network that's peered with the consumer network. For example: `projects/1234321/global/networks/host-network`

        :return: The network of this Subnetwork.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this Subnetwork.

        In the Shared VPC host project, the VPC network that's peered with the consumer network. For example: `projects/1234321/global/networks/host-network`

        :param network: The network of this Subnetwork.
        :type network: str
        """

        self._network = network

    @property
    def outside_allocation(self):
        """Gets the outside_allocation of this Subnetwork.

        This is a discovered subnet that is not within the current consumer allocated ranges.

        :return: The outside_allocation of this Subnetwork.
        :rtype: bool
        """
        return self._outside_allocation

    @outside_allocation.setter
    def outside_allocation(self, outside_allocation):
        """Sets the outside_allocation of this Subnetwork.

        This is a discovered subnet that is not within the current consumer allocated ranges.

        :param outside_allocation: The outside_allocation of this Subnetwork.
        :type outside_allocation: bool
        """

        self._outside_allocation = outside_allocation

    @property
    def region(self):
        """Gets the region of this Subnetwork.

        GCP region where the subnetwork is located.

        :return: The region of this Subnetwork.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Subnetwork.

        GCP region where the subnetwork is located.

        :param region: The region of this Subnetwork.
        :type region: str
        """

        self._region = region

    @property
    def secondary_ip_ranges(self):
        """Gets the secondary_ip_ranges of this Subnetwork.

        List of secondary IP ranges in this subnetwork.

        :return: The secondary_ip_ranges of this Subnetwork.
        :rtype: List[SecondaryIpRange]
        """
        return self._secondary_ip_ranges

    @secondary_ip_ranges.setter
    def secondary_ip_ranges(self, secondary_ip_ranges):
        """Sets the secondary_ip_ranges of this Subnetwork.

        List of secondary IP ranges in this subnetwork.

        :param secondary_ip_ranges: The secondary_ip_ranges of this Subnetwork.
        :type secondary_ip_ranges: List[SecondaryIpRange]
        """

        self._secondary_ip_ranges = secondary_ip_ranges
