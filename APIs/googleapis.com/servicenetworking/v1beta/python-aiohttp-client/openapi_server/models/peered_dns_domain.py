# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PeeredDnsDomain(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dns_suffix: str=None, name: str=None):
        """PeeredDnsDomain - a model defined in OpenAPI

        :param dns_suffix: The dns_suffix of this PeeredDnsDomain.
        :param name: The name of this PeeredDnsDomain.
        """
        self.openapi_types = {
            'dns_suffix': str,
            'name': str
        }

        self.attribute_map = {
            'dns_suffix': 'dnsSuffix',
            'name': 'name'
        }

        self._dns_suffix = dns_suffix
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PeeredDnsDomain':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PeeredDnsDomain of this PeeredDnsDomain.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dns_suffix(self):
        """Gets the dns_suffix of this PeeredDnsDomain.

        The DNS domain name suffix e.g. `example.com.`. Cloud DNS requires that a DNS suffix ends with a trailing dot.

        :return: The dns_suffix of this PeeredDnsDomain.
        :rtype: str
        """
        return self._dns_suffix

    @dns_suffix.setter
    def dns_suffix(self, dns_suffix):
        """Sets the dns_suffix of this PeeredDnsDomain.

        The DNS domain name suffix e.g. `example.com.`. Cloud DNS requires that a DNS suffix ends with a trailing dot.

        :param dns_suffix: The dns_suffix of this PeeredDnsDomain.
        :type dns_suffix: str
        """

        self._dns_suffix = dns_suffix

    @property
    def name(self):
        """Gets the name of this PeeredDnsDomain.

        User assigned name for this resource. Must be unique within the consumer network. The name must be 1-63 characters long, must begin with a letter, end with a letter or digit, and only contain lowercase letters, digits or dashes.

        :return: The name of this PeeredDnsDomain.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PeeredDnsDomain.

        User assigned name for this resource. Must be unique within the consumer network. The name must be 1-63 characters long, must begin with a letter, end with a letter or digit, and only contain lowercase letters, digits or dashes.

        :param name: The name of this PeeredDnsDomain.
        :type name: str
        """

        self._name = name
