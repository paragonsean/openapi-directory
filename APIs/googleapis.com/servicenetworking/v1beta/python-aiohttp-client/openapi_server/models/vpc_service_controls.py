# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VpcServiceControls(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None):
        """VpcServiceControls - a model defined in OpenAPI

        :param enabled: The enabled of this VpcServiceControls.
        """
        self.openapi_types = {
            'enabled': bool
        }

        self.attribute_map = {
            'enabled': 'enabled'
        }

        self._enabled = enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VpcServiceControls':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VpcServiceControls of this VpcServiceControls.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this VpcServiceControls.

        Output only. Indicates whether the VPC Service Controls are enabled or disabled for the connection. If the consumer called the EnableVpcServiceControls method, then this is true. If the consumer called DisableVpcServiceControls, then this is false. The default is false.

        :return: The enabled of this VpcServiceControls.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this VpcServiceControls.

        Output only. Indicates whether the VPC Service Controls are enabled or disabled for the connection. If the consumer called the EnableVpcServiceControls method, then this is true. If the consumer called DisableVpcServiceControls, then this is false. The default is false.

        :param enabled: The enabled of this VpcServiceControls.
        :type enabled: bool
        """

        self._enabled = enabled
