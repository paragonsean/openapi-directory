# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BackendRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, deadline: float=None, disable_auth: bool=None, jwt_audience: str=None, min_deadline: float=None, operation_deadline: float=None, overrides_by_request_protocol: Dict[str, BackendRule]=None, path_translation: str=None, protocol: str=None, selector: str=None):
        """BackendRule - a model defined in OpenAPI

        :param address: The address of this BackendRule.
        :param deadline: The deadline of this BackendRule.
        :param disable_auth: The disable_auth of this BackendRule.
        :param jwt_audience: The jwt_audience of this BackendRule.
        :param min_deadline: The min_deadline of this BackendRule.
        :param operation_deadline: The operation_deadline of this BackendRule.
        :param overrides_by_request_protocol: The overrides_by_request_protocol of this BackendRule.
        :param path_translation: The path_translation of this BackendRule.
        :param protocol: The protocol of this BackendRule.
        :param selector: The selector of this BackendRule.
        """
        self.openapi_types = {
            'address': str,
            'deadline': float,
            'disable_auth': bool,
            'jwt_audience': str,
            'min_deadline': float,
            'operation_deadline': float,
            'overrides_by_request_protocol': Dict[str, BackendRule],
            'path_translation': str,
            'protocol': str,
            'selector': str
        }

        self.attribute_map = {
            'address': 'address',
            'deadline': 'deadline',
            'disable_auth': 'disableAuth',
            'jwt_audience': 'jwtAudience',
            'min_deadline': 'minDeadline',
            'operation_deadline': 'operationDeadline',
            'overrides_by_request_protocol': 'overridesByRequestProtocol',
            'path_translation': 'pathTranslation',
            'protocol': 'protocol',
            'selector': 'selector'
        }

        self._address = address
        self._deadline = deadline
        self._disable_auth = disable_auth
        self._jwt_audience = jwt_audience
        self._min_deadline = min_deadline
        self._operation_deadline = operation_deadline
        self._overrides_by_request_protocol = overrides_by_request_protocol
        self._path_translation = path_translation
        self._protocol = protocol
        self._selector = selector

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BackendRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BackendRule of this BackendRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this BackendRule.

        The address of the API backend. The scheme is used to determine the backend protocol and security. The following schemes are accepted: SCHEME PROTOCOL SECURITY http:// HTTP None https:// HTTP TLS grpc:// gRPC None grpcs:// gRPC TLS It is recommended to explicitly include a scheme. Leaving out the scheme may cause constrasting behaviors across platforms. If the port is unspecified, the default is: - 80 for schemes without TLS - 443 for schemes with TLS For HTTP backends, use protocol to specify the protocol version.

        :return: The address of this BackendRule.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this BackendRule.

        The address of the API backend. The scheme is used to determine the backend protocol and security. The following schemes are accepted: SCHEME PROTOCOL SECURITY http:// HTTP None https:// HTTP TLS grpc:// gRPC None grpcs:// gRPC TLS It is recommended to explicitly include a scheme. Leaving out the scheme may cause constrasting behaviors across platforms. If the port is unspecified, the default is: - 80 for schemes without TLS - 443 for schemes with TLS For HTTP backends, use protocol to specify the protocol version.

        :param address: The address of this BackendRule.
        :type address: str
        """

        self._address = address

    @property
    def deadline(self):
        """Gets the deadline of this BackendRule.

        The number of seconds to wait for a response from a request. The default varies based on the request protocol and deployment environment.

        :return: The deadline of this BackendRule.
        :rtype: float
        """
        return self._deadline

    @deadline.setter
    def deadline(self, deadline):
        """Sets the deadline of this BackendRule.

        The number of seconds to wait for a response from a request. The default varies based on the request protocol and deployment environment.

        :param deadline: The deadline of this BackendRule.
        :type deadline: float
        """

        self._deadline = deadline

    @property
    def disable_auth(self):
        """Gets the disable_auth of this BackendRule.

        When disable_auth is true, a JWT ID token won't be generated and the original \"Authorization\" HTTP header will be preserved. If the header is used to carry the original token and is expected by the backend, this field must be set to true to preserve the header.

        :return: The disable_auth of this BackendRule.
        :rtype: bool
        """
        return self._disable_auth

    @disable_auth.setter
    def disable_auth(self, disable_auth):
        """Sets the disable_auth of this BackendRule.

        When disable_auth is true, a JWT ID token won't be generated and the original \"Authorization\" HTTP header will be preserved. If the header is used to carry the original token and is expected by the backend, this field must be set to true to preserve the header.

        :param disable_auth: The disable_auth of this BackendRule.
        :type disable_auth: bool
        """

        self._disable_auth = disable_auth

    @property
    def jwt_audience(self):
        """Gets the jwt_audience of this BackendRule.

        The JWT audience is used when generating a JWT ID token for the backend. This ID token will be added in the HTTP \"authorization\" header, and sent to the backend.

        :return: The jwt_audience of this BackendRule.
        :rtype: str
        """
        return self._jwt_audience

    @jwt_audience.setter
    def jwt_audience(self, jwt_audience):
        """Sets the jwt_audience of this BackendRule.

        The JWT audience is used when generating a JWT ID token for the backend. This ID token will be added in the HTTP \"authorization\" header, and sent to the backend.

        :param jwt_audience: The jwt_audience of this BackendRule.
        :type jwt_audience: str
        """

        self._jwt_audience = jwt_audience

    @property
    def min_deadline(self):
        """Gets the min_deadline of this BackendRule.

        Deprecated, do not use.

        :return: The min_deadline of this BackendRule.
        :rtype: float
        """
        return self._min_deadline

    @min_deadline.setter
    def min_deadline(self, min_deadline):
        """Sets the min_deadline of this BackendRule.

        Deprecated, do not use.

        :param min_deadline: The min_deadline of this BackendRule.
        :type min_deadline: float
        """

        self._min_deadline = min_deadline

    @property
    def operation_deadline(self):
        """Gets the operation_deadline of this BackendRule.

        The number of seconds to wait for the completion of a long running operation. The default is no deadline.

        :return: The operation_deadline of this BackendRule.
        :rtype: float
        """
        return self._operation_deadline

    @operation_deadline.setter
    def operation_deadline(self, operation_deadline):
        """Sets the operation_deadline of this BackendRule.

        The number of seconds to wait for the completion of a long running operation. The default is no deadline.

        :param operation_deadline: The operation_deadline of this BackendRule.
        :type operation_deadline: float
        """

        self._operation_deadline = operation_deadline

    @property
    def overrides_by_request_protocol(self):
        """Gets the overrides_by_request_protocol of this BackendRule.

        The map between request protocol and the backend address.

        :return: The overrides_by_request_protocol of this BackendRule.
        :rtype: Dict[str, BackendRule]
        """
        return self._overrides_by_request_protocol

    @overrides_by_request_protocol.setter
    def overrides_by_request_protocol(self, overrides_by_request_protocol):
        """Sets the overrides_by_request_protocol of this BackendRule.

        The map between request protocol and the backend address.

        :param overrides_by_request_protocol: The overrides_by_request_protocol of this BackendRule.
        :type overrides_by_request_protocol: Dict[str, BackendRule]
        """

        self._overrides_by_request_protocol = overrides_by_request_protocol

    @property
    def path_translation(self):
        """Gets the path_translation of this BackendRule.


        :return: The path_translation of this BackendRule.
        :rtype: str
        """
        return self._path_translation

    @path_translation.setter
    def path_translation(self, path_translation):
        """Sets the path_translation of this BackendRule.


        :param path_translation: The path_translation of this BackendRule.
        :type path_translation: str
        """
        allowed_values = ["PATH_TRANSLATION_UNSPECIFIED", "CONSTANT_ADDRESS", "APPEND_PATH_TO_ADDRESS"]  # noqa: E501
        if path_translation not in allowed_values:
            raise ValueError(
                "Invalid value for `path_translation` ({0}), must be one of {1}"
                .format(path_translation, allowed_values)
            )

        self._path_translation = path_translation

    @property
    def protocol(self):
        """Gets the protocol of this BackendRule.

        The protocol used for sending a request to the backend. The supported values are \"http/1.1\" and \"h2\". The default value is inferred from the scheme in the address field: SCHEME PROTOCOL http:// http/1.1 https:// http/1.1 grpc:// h2 grpcs:// h2 For secure HTTP backends (https://) that support HTTP/2, set this field to \"h2\" for improved performance. Configuring this field to non-default values is only supported for secure HTTP backends. This field will be ignored for all other backends. See https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids for more details on the supported values.

        :return: The protocol of this BackendRule.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this BackendRule.

        The protocol used for sending a request to the backend. The supported values are \"http/1.1\" and \"h2\". The default value is inferred from the scheme in the address field: SCHEME PROTOCOL http:// http/1.1 https:// http/1.1 grpc:// h2 grpcs:// h2 For secure HTTP backends (https://) that support HTTP/2, set this field to \"h2\" for improved performance. Configuring this field to non-default values is only supported for secure HTTP backends. This field will be ignored for all other backends. See https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids for more details on the supported values.

        :param protocol: The protocol of this BackendRule.
        :type protocol: str
        """

        self._protocol = protocol

    @property
    def selector(self):
        """Gets the selector of this BackendRule.

        Selects the methods to which this rule applies. Refer to selector for syntax details.

        :return: The selector of this BackendRule.
        :rtype: str
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """Sets the selector of this BackendRule.

        Selects the methods to which this rule applies. Refer to selector for syntax details.

        :param selector: The selector of this BackendRule.
        :type selector: str
        """

        self._selector = selector
