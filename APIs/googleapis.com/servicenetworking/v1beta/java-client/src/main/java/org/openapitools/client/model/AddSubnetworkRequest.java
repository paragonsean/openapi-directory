/*
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request to create a subnetwork in a previously peered service network.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:18.071541-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AddSubnetworkRequest {
  public static final String SERIALIZED_NAME_CONSUMER = "consumer";
  @SerializedName(SERIALIZED_NAME_CONSUMER)
  private String consumer;

  public static final String SERIALIZED_NAME_CONSUMER_NETWORK = "consumerNetwork";
  @SerializedName(SERIALIZED_NAME_CONSUMER_NETWORK)
  private String consumerNetwork;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_IP_PREFIX_LENGTH = "ipPrefixLength";
  @SerializedName(SERIALIZED_NAME_IP_PREFIX_LENGTH)
  private Integer ipPrefixLength;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_REQUESTED_ADDRESS = "requestedAddress";
  @SerializedName(SERIALIZED_NAME_REQUESTED_ADDRESS)
  private String requestedAddress;

  public static final String SERIALIZED_NAME_SUBNETWORK = "subnetwork";
  @SerializedName(SERIALIZED_NAME_SUBNETWORK)
  private String subnetwork;

  public static final String SERIALIZED_NAME_SUBNETWORK_USERS = "subnetworkUsers";
  @SerializedName(SERIALIZED_NAME_SUBNETWORK_USERS)
  private List<String> subnetworkUsers = new ArrayList<>();

  public AddSubnetworkRequest() {
  }

  public AddSubnetworkRequest consumer(String consumer) {
    this.consumer = consumer;
    return this;
  }

  /**
   * Required. A resource that represents the service consumer, such as &#x60;projects/123456&#x60;. The project number can be different from the value in the consumer network parameter. For example, the network might be part of a Shared VPC network. In those cases, Service Networking validates that this resource belongs to that Shared VPC.
   * @return consumer
   */
  @javax.annotation.Nullable
  public String getConsumer() {
    return consumer;
  }

  public void setConsumer(String consumer) {
    this.consumer = consumer;
  }


  public AddSubnetworkRequest consumerNetwork(String consumerNetwork) {
    this.consumerNetwork = consumerNetwork;
    return this;
  }

  /**
   * Required. The name of the service consumer&#39;s VPC network. The network must have an existing private connection that was provisioned through the connections.create method. The name must be in the following format: &#x60;projects/{project}/global/networks/{network}&#x60;, where {project} is a project number, such as &#x60;12345&#x60;. {network} is the name of a VPC network in the project.
   * @return consumerNetwork
   */
  @javax.annotation.Nullable
  public String getConsumerNetwork() {
    return consumerNetwork;
  }

  public void setConsumerNetwork(String consumerNetwork) {
    this.consumerNetwork = consumerNetwork;
  }


  public AddSubnetworkRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * An optional description of the subnet.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public AddSubnetworkRequest ipPrefixLength(Integer ipPrefixLength) {
    this.ipPrefixLength = ipPrefixLength;
    return this;
  }

  /**
   * Required. The prefix length of the subnet&#39;s IP address range. Use CIDR range notation, such as &#x60;30&#x60; to provision a subnet with an &#x60;x.x.x.x/30&#x60; CIDR range. The IP address range is drawn from a pool of available ranges in the service consumer&#39;s allocated range.
   * @return ipPrefixLength
   */
  @javax.annotation.Nullable
  public Integer getIpPrefixLength() {
    return ipPrefixLength;
  }

  public void setIpPrefixLength(Integer ipPrefixLength) {
    this.ipPrefixLength = ipPrefixLength;
  }


  public AddSubnetworkRequest region(String region) {
    this.region = region;
    return this;
  }

  /**
   * Required. The name of a [region](/compute/docs/regions-zones) for the subnet, such &#x60;europe-west1&#x60;.
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public AddSubnetworkRequest requestedAddress(String requestedAddress) {
    this.requestedAddress = requestedAddress;
    return this;
  }

  /**
   * Optional. The starting address of a range. The address must be a valid IPv4 address in the x.x.x.x format. This value combined with the IP prefix range is the CIDR range for the subnet. The range must be within the allocated range that is assigned to the private connection. If the CIDR range isn&#39;t available, the call fails.
   * @return requestedAddress
   */
  @javax.annotation.Nullable
  public String getRequestedAddress() {
    return requestedAddress;
  }

  public void setRequestedAddress(String requestedAddress) {
    this.requestedAddress = requestedAddress;
  }


  public AddSubnetworkRequest subnetwork(String subnetwork) {
    this.subnetwork = subnetwork;
    return this;
  }

  /**
   * Required. A name for the new subnet. For information about the naming requirements, see [subnetwork](/compute/docs/reference/rest/v1/subnetworks) in the Compute API documentation.
   * @return subnetwork
   */
  @javax.annotation.Nullable
  public String getSubnetwork() {
    return subnetwork;
  }

  public void setSubnetwork(String subnetwork) {
    this.subnetwork = subnetwork;
  }


  public AddSubnetworkRequest subnetworkUsers(List<String> subnetworkUsers) {
    this.subnetworkUsers = subnetworkUsers;
    return this;
  }

  public AddSubnetworkRequest addSubnetworkUsersItem(String subnetworkUsersItem) {
    if (this.subnetworkUsers == null) {
      this.subnetworkUsers = new ArrayList<>();
    }
    this.subnetworkUsers.add(subnetworkUsersItem);
    return this;
  }

  /**
   * A list of members that are granted the &#x60;compute.networkUser&#x60; role on the subnet.
   * @return subnetworkUsers
   */
  @javax.annotation.Nullable
  public List<String> getSubnetworkUsers() {
    return subnetworkUsers;
  }

  public void setSubnetworkUsers(List<String> subnetworkUsers) {
    this.subnetworkUsers = subnetworkUsers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddSubnetworkRequest addSubnetworkRequest = (AddSubnetworkRequest) o;
    return Objects.equals(this.consumer, addSubnetworkRequest.consumer) &&
        Objects.equals(this.consumerNetwork, addSubnetworkRequest.consumerNetwork) &&
        Objects.equals(this.description, addSubnetworkRequest.description) &&
        Objects.equals(this.ipPrefixLength, addSubnetworkRequest.ipPrefixLength) &&
        Objects.equals(this.region, addSubnetworkRequest.region) &&
        Objects.equals(this.requestedAddress, addSubnetworkRequest.requestedAddress) &&
        Objects.equals(this.subnetwork, addSubnetworkRequest.subnetwork) &&
        Objects.equals(this.subnetworkUsers, addSubnetworkRequest.subnetworkUsers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(consumer, consumerNetwork, description, ipPrefixLength, region, requestedAddress, subnetwork, subnetworkUsers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddSubnetworkRequest {\n");
    sb.append("    consumer: ").append(toIndentedString(consumer)).append("\n");
    sb.append("    consumerNetwork: ").append(toIndentedString(consumerNetwork)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    ipPrefixLength: ").append(toIndentedString(ipPrefixLength)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    requestedAddress: ").append(toIndentedString(requestedAddress)).append("\n");
    sb.append("    subnetwork: ").append(toIndentedString(subnetwork)).append("\n");
    sb.append("    subnetworkUsers: ").append(toIndentedString(subnetworkUsers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("consumer");
    openapiFields.add("consumerNetwork");
    openapiFields.add("description");
    openapiFields.add("ipPrefixLength");
    openapiFields.add("region");
    openapiFields.add("requestedAddress");
    openapiFields.add("subnetwork");
    openapiFields.add("subnetworkUsers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AddSubnetworkRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AddSubnetworkRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddSubnetworkRequest is not found in the empty JSON string", AddSubnetworkRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AddSubnetworkRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddSubnetworkRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("consumer") != null && !jsonObj.get("consumer").isJsonNull()) && !jsonObj.get("consumer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consumer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consumer").toString()));
      }
      if ((jsonObj.get("consumerNetwork") != null && !jsonObj.get("consumerNetwork").isJsonNull()) && !jsonObj.get("consumerNetwork").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consumerNetwork` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consumerNetwork").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      if ((jsonObj.get("requestedAddress") != null && !jsonObj.get("requestedAddress").isJsonNull()) && !jsonObj.get("requestedAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestedAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestedAddress").toString()));
      }
      if ((jsonObj.get("subnetwork") != null && !jsonObj.get("subnetwork").isJsonNull()) && !jsonObj.get("subnetwork").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subnetwork` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subnetwork").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("subnetworkUsers") != null && !jsonObj.get("subnetworkUsers").isJsonNull() && !jsonObj.get("subnetworkUsers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subnetworkUsers` to be an array in the JSON string but got `%s`", jsonObj.get("subnetworkUsers").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddSubnetworkRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddSubnetworkRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddSubnetworkRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddSubnetworkRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AddSubnetworkRequest>() {
           @Override
           public void write(JsonWriter out, AddSubnetworkRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddSubnetworkRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AddSubnetworkRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AddSubnetworkRequest
   * @throws IOException if the JSON string is invalid with respect to AddSubnetworkRequest
   */
  public static AddSubnetworkRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddSubnetworkRequest.class);
  }

  /**
   * Convert an instance of AddSubnetworkRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

