/*
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CloudSQLConfig;
import org.openapitools.client.model.GoogleCloudServicenetworkingV1ConsumerConfigReservedRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration information for a private service access connection.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:18.071541-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConsumerConfig {
  public static final String SERIALIZED_NAME_CLOUDSQL_CONFIGS = "cloudsqlConfigs";
  @SerializedName(SERIALIZED_NAME_CLOUDSQL_CONFIGS)
  private List<CloudSQLConfig> cloudsqlConfigs = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONSUMER_EXPORT_CUSTOM_ROUTES = "consumerExportCustomRoutes";
  @SerializedName(SERIALIZED_NAME_CONSUMER_EXPORT_CUSTOM_ROUTES)
  private Boolean consumerExportCustomRoutes;

  public static final String SERIALIZED_NAME_CONSUMER_EXPORT_SUBNET_ROUTES_WITH_PUBLIC_IP = "consumerExportSubnetRoutesWithPublicIp";
  @SerializedName(SERIALIZED_NAME_CONSUMER_EXPORT_SUBNET_ROUTES_WITH_PUBLIC_IP)
  private Boolean consumerExportSubnetRoutesWithPublicIp;

  public static final String SERIALIZED_NAME_CONSUMER_IMPORT_CUSTOM_ROUTES = "consumerImportCustomRoutes";
  @SerializedName(SERIALIZED_NAME_CONSUMER_IMPORT_CUSTOM_ROUTES)
  private Boolean consumerImportCustomRoutes;

  public static final String SERIALIZED_NAME_CONSUMER_IMPORT_SUBNET_ROUTES_WITH_PUBLIC_IP = "consumerImportSubnetRoutesWithPublicIp";
  @SerializedName(SERIALIZED_NAME_CONSUMER_IMPORT_SUBNET_ROUTES_WITH_PUBLIC_IP)
  private Boolean consumerImportSubnetRoutesWithPublicIp;

  public static final String SERIALIZED_NAME_PRODUCER_EXPORT_CUSTOM_ROUTES = "producerExportCustomRoutes";
  @SerializedName(SERIALIZED_NAME_PRODUCER_EXPORT_CUSTOM_ROUTES)
  private Boolean producerExportCustomRoutes;

  public static final String SERIALIZED_NAME_PRODUCER_EXPORT_SUBNET_ROUTES_WITH_PUBLIC_IP = "producerExportSubnetRoutesWithPublicIp";
  @SerializedName(SERIALIZED_NAME_PRODUCER_EXPORT_SUBNET_ROUTES_WITH_PUBLIC_IP)
  private Boolean producerExportSubnetRoutesWithPublicIp;

  public static final String SERIALIZED_NAME_PRODUCER_IMPORT_CUSTOM_ROUTES = "producerImportCustomRoutes";
  @SerializedName(SERIALIZED_NAME_PRODUCER_IMPORT_CUSTOM_ROUTES)
  private Boolean producerImportCustomRoutes;

  public static final String SERIALIZED_NAME_PRODUCER_IMPORT_SUBNET_ROUTES_WITH_PUBLIC_IP = "producerImportSubnetRoutesWithPublicIp";
  @SerializedName(SERIALIZED_NAME_PRODUCER_IMPORT_SUBNET_ROUTES_WITH_PUBLIC_IP)
  private Boolean producerImportSubnetRoutesWithPublicIp;

  public static final String SERIALIZED_NAME_PRODUCER_NETWORK = "producerNetwork";
  @SerializedName(SERIALIZED_NAME_PRODUCER_NETWORK)
  private String producerNetwork;

  public static final String SERIALIZED_NAME_RESERVED_RANGES = "reservedRanges";
  @SerializedName(SERIALIZED_NAME_RESERVED_RANGES)
  private List<GoogleCloudServicenetworkingV1ConsumerConfigReservedRange> reservedRanges = new ArrayList<>();

  public static final String SERIALIZED_NAME_USED_IP_RANGES = "usedIpRanges";
  @SerializedName(SERIALIZED_NAME_USED_IP_RANGES)
  private List<String> usedIpRanges = new ArrayList<>();

  public static final String SERIALIZED_NAME_VPC_SC_REFERENCE_ARCHITECTURE_ENABLED = "vpcScReferenceArchitectureEnabled";
  @SerializedName(SERIALIZED_NAME_VPC_SC_REFERENCE_ARCHITECTURE_ENABLED)
  private Boolean vpcScReferenceArchitectureEnabled;

  public ConsumerConfig() {
  }

  public ConsumerConfig(
     String producerNetwork, 
     List<GoogleCloudServicenetworkingV1ConsumerConfigReservedRange> reservedRanges, 
     List<String> usedIpRanges, 
     Boolean vpcScReferenceArchitectureEnabled
  ) {
    this();
    this.producerNetwork = producerNetwork;
    this.reservedRanges = reservedRanges;
    this.usedIpRanges = usedIpRanges;
    this.vpcScReferenceArchitectureEnabled = vpcScReferenceArchitectureEnabled;
  }

  public ConsumerConfig cloudsqlConfigs(List<CloudSQLConfig> cloudsqlConfigs) {
    this.cloudsqlConfigs = cloudsqlConfigs;
    return this;
  }

  public ConsumerConfig addCloudsqlConfigsItem(CloudSQLConfig cloudsqlConfigsItem) {
    if (this.cloudsqlConfigs == null) {
      this.cloudsqlConfigs = new ArrayList<>();
    }
    this.cloudsqlConfigs.add(cloudsqlConfigsItem);
    return this;
  }

  /**
   * Represents one or multiple Cloud SQL configurations.
   * @return cloudsqlConfigs
   */
  @javax.annotation.Nullable
  public List<CloudSQLConfig> getCloudsqlConfigs() {
    return cloudsqlConfigs;
  }

  public void setCloudsqlConfigs(List<CloudSQLConfig> cloudsqlConfigs) {
    this.cloudsqlConfigs = cloudsqlConfigs;
  }


  public ConsumerConfig consumerExportCustomRoutes(Boolean consumerExportCustomRoutes) {
    this.consumerExportCustomRoutes = consumerExportCustomRoutes;
    return this;
  }

  /**
   * Export custom routes flag value for peering from consumer to producer.
   * @return consumerExportCustomRoutes
   */
  @javax.annotation.Nullable
  public Boolean getConsumerExportCustomRoutes() {
    return consumerExportCustomRoutes;
  }

  public void setConsumerExportCustomRoutes(Boolean consumerExportCustomRoutes) {
    this.consumerExportCustomRoutes = consumerExportCustomRoutes;
  }


  public ConsumerConfig consumerExportSubnetRoutesWithPublicIp(Boolean consumerExportSubnetRoutesWithPublicIp) {
    this.consumerExportSubnetRoutesWithPublicIp = consumerExportSubnetRoutesWithPublicIp;
    return this;
  }

  /**
   * Export subnet routes with public ip flag value for peering from consumer to producer.
   * @return consumerExportSubnetRoutesWithPublicIp
   */
  @javax.annotation.Nullable
  public Boolean getConsumerExportSubnetRoutesWithPublicIp() {
    return consumerExportSubnetRoutesWithPublicIp;
  }

  public void setConsumerExportSubnetRoutesWithPublicIp(Boolean consumerExportSubnetRoutesWithPublicIp) {
    this.consumerExportSubnetRoutesWithPublicIp = consumerExportSubnetRoutesWithPublicIp;
  }


  public ConsumerConfig consumerImportCustomRoutes(Boolean consumerImportCustomRoutes) {
    this.consumerImportCustomRoutes = consumerImportCustomRoutes;
    return this;
  }

  /**
   * Import custom routes flag value for peering from consumer to producer.
   * @return consumerImportCustomRoutes
   */
  @javax.annotation.Nullable
  public Boolean getConsumerImportCustomRoutes() {
    return consumerImportCustomRoutes;
  }

  public void setConsumerImportCustomRoutes(Boolean consumerImportCustomRoutes) {
    this.consumerImportCustomRoutes = consumerImportCustomRoutes;
  }


  public ConsumerConfig consumerImportSubnetRoutesWithPublicIp(Boolean consumerImportSubnetRoutesWithPublicIp) {
    this.consumerImportSubnetRoutesWithPublicIp = consumerImportSubnetRoutesWithPublicIp;
    return this;
  }

  /**
   * Import subnet routes with public ip flag value for peering from consumer to producer.
   * @return consumerImportSubnetRoutesWithPublicIp
   */
  @javax.annotation.Nullable
  public Boolean getConsumerImportSubnetRoutesWithPublicIp() {
    return consumerImportSubnetRoutesWithPublicIp;
  }

  public void setConsumerImportSubnetRoutesWithPublicIp(Boolean consumerImportSubnetRoutesWithPublicIp) {
    this.consumerImportSubnetRoutesWithPublicIp = consumerImportSubnetRoutesWithPublicIp;
  }


  public ConsumerConfig producerExportCustomRoutes(Boolean producerExportCustomRoutes) {
    this.producerExportCustomRoutes = producerExportCustomRoutes;
    return this;
  }

  /**
   * Export custom routes flag value for peering from producer to consumer.
   * @return producerExportCustomRoutes
   */
  @javax.annotation.Nullable
  public Boolean getProducerExportCustomRoutes() {
    return producerExportCustomRoutes;
  }

  public void setProducerExportCustomRoutes(Boolean producerExportCustomRoutes) {
    this.producerExportCustomRoutes = producerExportCustomRoutes;
  }


  public ConsumerConfig producerExportSubnetRoutesWithPublicIp(Boolean producerExportSubnetRoutesWithPublicIp) {
    this.producerExportSubnetRoutesWithPublicIp = producerExportSubnetRoutesWithPublicIp;
    return this;
  }

  /**
   * Export subnet routes with public ip flag value for peering from producer to consumer.
   * @return producerExportSubnetRoutesWithPublicIp
   */
  @javax.annotation.Nullable
  public Boolean getProducerExportSubnetRoutesWithPublicIp() {
    return producerExportSubnetRoutesWithPublicIp;
  }

  public void setProducerExportSubnetRoutesWithPublicIp(Boolean producerExportSubnetRoutesWithPublicIp) {
    this.producerExportSubnetRoutesWithPublicIp = producerExportSubnetRoutesWithPublicIp;
  }


  public ConsumerConfig producerImportCustomRoutes(Boolean producerImportCustomRoutes) {
    this.producerImportCustomRoutes = producerImportCustomRoutes;
    return this;
  }

  /**
   * Import custom routes flag value for peering from producer to consumer.
   * @return producerImportCustomRoutes
   */
  @javax.annotation.Nullable
  public Boolean getProducerImportCustomRoutes() {
    return producerImportCustomRoutes;
  }

  public void setProducerImportCustomRoutes(Boolean producerImportCustomRoutes) {
    this.producerImportCustomRoutes = producerImportCustomRoutes;
  }


  public ConsumerConfig producerImportSubnetRoutesWithPublicIp(Boolean producerImportSubnetRoutesWithPublicIp) {
    this.producerImportSubnetRoutesWithPublicIp = producerImportSubnetRoutesWithPublicIp;
    return this;
  }

  /**
   * Import subnet routes with public ip flag value for peering from producer to consumer.
   * @return producerImportSubnetRoutesWithPublicIp
   */
  @javax.annotation.Nullable
  public Boolean getProducerImportSubnetRoutesWithPublicIp() {
    return producerImportSubnetRoutesWithPublicIp;
  }

  public void setProducerImportSubnetRoutesWithPublicIp(Boolean producerImportSubnetRoutesWithPublicIp) {
    this.producerImportSubnetRoutesWithPublicIp = producerImportSubnetRoutesWithPublicIp;
  }


  /**
   * Output only. The VPC host network that is used to host managed service instances. In the format, projects/{project}/global/networks/{network} where {project} is the project number e.g. &#39;12345&#39; and {network} is the network name.
   * @return producerNetwork
   */
  @javax.annotation.Nullable
  public String getProducerNetwork() {
    return producerNetwork;
  }



  /**
   * Output only. The reserved ranges associated with this private service access connection.
   * @return reservedRanges
   */
  @javax.annotation.Nullable
  public List<GoogleCloudServicenetworkingV1ConsumerConfigReservedRange> getReservedRanges() {
    return reservedRanges;
  }



  /**
   * Output only. The IP ranges already in use by consumer or producer
   * @return usedIpRanges
   */
  @javax.annotation.Nullable
  public List<String> getUsedIpRanges() {
    return usedIpRanges;
  }



  /**
   * Output only. Indicates whether the VPC Service Controls reference architecture is configured for the producer VPC host network.
   * @return vpcScReferenceArchitectureEnabled
   */
  @javax.annotation.Nullable
  public Boolean getVpcScReferenceArchitectureEnabled() {
    return vpcScReferenceArchitectureEnabled;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConsumerConfig consumerConfig = (ConsumerConfig) o;
    return Objects.equals(this.cloudsqlConfigs, consumerConfig.cloudsqlConfigs) &&
        Objects.equals(this.consumerExportCustomRoutes, consumerConfig.consumerExportCustomRoutes) &&
        Objects.equals(this.consumerExportSubnetRoutesWithPublicIp, consumerConfig.consumerExportSubnetRoutesWithPublicIp) &&
        Objects.equals(this.consumerImportCustomRoutes, consumerConfig.consumerImportCustomRoutes) &&
        Objects.equals(this.consumerImportSubnetRoutesWithPublicIp, consumerConfig.consumerImportSubnetRoutesWithPublicIp) &&
        Objects.equals(this.producerExportCustomRoutes, consumerConfig.producerExportCustomRoutes) &&
        Objects.equals(this.producerExportSubnetRoutesWithPublicIp, consumerConfig.producerExportSubnetRoutesWithPublicIp) &&
        Objects.equals(this.producerImportCustomRoutes, consumerConfig.producerImportCustomRoutes) &&
        Objects.equals(this.producerImportSubnetRoutesWithPublicIp, consumerConfig.producerImportSubnetRoutesWithPublicIp) &&
        Objects.equals(this.producerNetwork, consumerConfig.producerNetwork) &&
        Objects.equals(this.reservedRanges, consumerConfig.reservedRanges) &&
        Objects.equals(this.usedIpRanges, consumerConfig.usedIpRanges) &&
        Objects.equals(this.vpcScReferenceArchitectureEnabled, consumerConfig.vpcScReferenceArchitectureEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cloudsqlConfigs, consumerExportCustomRoutes, consumerExportSubnetRoutesWithPublicIp, consumerImportCustomRoutes, consumerImportSubnetRoutesWithPublicIp, producerExportCustomRoutes, producerExportSubnetRoutesWithPublicIp, producerImportCustomRoutes, producerImportSubnetRoutesWithPublicIp, producerNetwork, reservedRanges, usedIpRanges, vpcScReferenceArchitectureEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConsumerConfig {\n");
    sb.append("    cloudsqlConfigs: ").append(toIndentedString(cloudsqlConfigs)).append("\n");
    sb.append("    consumerExportCustomRoutes: ").append(toIndentedString(consumerExportCustomRoutes)).append("\n");
    sb.append("    consumerExportSubnetRoutesWithPublicIp: ").append(toIndentedString(consumerExportSubnetRoutesWithPublicIp)).append("\n");
    sb.append("    consumerImportCustomRoutes: ").append(toIndentedString(consumerImportCustomRoutes)).append("\n");
    sb.append("    consumerImportSubnetRoutesWithPublicIp: ").append(toIndentedString(consumerImportSubnetRoutesWithPublicIp)).append("\n");
    sb.append("    producerExportCustomRoutes: ").append(toIndentedString(producerExportCustomRoutes)).append("\n");
    sb.append("    producerExportSubnetRoutesWithPublicIp: ").append(toIndentedString(producerExportSubnetRoutesWithPublicIp)).append("\n");
    sb.append("    producerImportCustomRoutes: ").append(toIndentedString(producerImportCustomRoutes)).append("\n");
    sb.append("    producerImportSubnetRoutesWithPublicIp: ").append(toIndentedString(producerImportSubnetRoutesWithPublicIp)).append("\n");
    sb.append("    producerNetwork: ").append(toIndentedString(producerNetwork)).append("\n");
    sb.append("    reservedRanges: ").append(toIndentedString(reservedRanges)).append("\n");
    sb.append("    usedIpRanges: ").append(toIndentedString(usedIpRanges)).append("\n");
    sb.append("    vpcScReferenceArchitectureEnabled: ").append(toIndentedString(vpcScReferenceArchitectureEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cloudsqlConfigs");
    openapiFields.add("consumerExportCustomRoutes");
    openapiFields.add("consumerExportSubnetRoutesWithPublicIp");
    openapiFields.add("consumerImportCustomRoutes");
    openapiFields.add("consumerImportSubnetRoutesWithPublicIp");
    openapiFields.add("producerExportCustomRoutes");
    openapiFields.add("producerExportSubnetRoutesWithPublicIp");
    openapiFields.add("producerImportCustomRoutes");
    openapiFields.add("producerImportSubnetRoutesWithPublicIp");
    openapiFields.add("producerNetwork");
    openapiFields.add("reservedRanges");
    openapiFields.add("usedIpRanges");
    openapiFields.add("vpcScReferenceArchitectureEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConsumerConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConsumerConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConsumerConfig is not found in the empty JSON string", ConsumerConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConsumerConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConsumerConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("cloudsqlConfigs") != null && !jsonObj.get("cloudsqlConfigs").isJsonNull()) {
        JsonArray jsonArraycloudsqlConfigs = jsonObj.getAsJsonArray("cloudsqlConfigs");
        if (jsonArraycloudsqlConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cloudsqlConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cloudsqlConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("cloudsqlConfigs").toString()));
          }

          // validate the optional field `cloudsqlConfigs` (array)
          for (int i = 0; i < jsonArraycloudsqlConfigs.size(); i++) {
            CloudSQLConfig.validateJsonElement(jsonArraycloudsqlConfigs.get(i));
          };
        }
      }
      if ((jsonObj.get("producerNetwork") != null && !jsonObj.get("producerNetwork").isJsonNull()) && !jsonObj.get("producerNetwork").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `producerNetwork` to be a primitive type in the JSON string but got `%s`", jsonObj.get("producerNetwork").toString()));
      }
      if (jsonObj.get("reservedRanges") != null && !jsonObj.get("reservedRanges").isJsonNull()) {
        JsonArray jsonArrayreservedRanges = jsonObj.getAsJsonArray("reservedRanges");
        if (jsonArrayreservedRanges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("reservedRanges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `reservedRanges` to be an array in the JSON string but got `%s`", jsonObj.get("reservedRanges").toString()));
          }

          // validate the optional field `reservedRanges` (array)
          for (int i = 0; i < jsonArrayreservedRanges.size(); i++) {
            GoogleCloudServicenetworkingV1ConsumerConfigReservedRange.validateJsonElement(jsonArrayreservedRanges.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("usedIpRanges") != null && !jsonObj.get("usedIpRanges").isJsonNull() && !jsonObj.get("usedIpRanges").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `usedIpRanges` to be an array in the JSON string but got `%s`", jsonObj.get("usedIpRanges").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConsumerConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConsumerConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConsumerConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConsumerConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<ConsumerConfig>() {
           @Override
           public void write(JsonWriter out, ConsumerConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConsumerConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConsumerConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConsumerConfig
   * @throws IOException if the JSON string is invalid with respect to ConsumerConfig
   */
  public static ConsumerConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConsumerConfig.class);
  }

  /**
   * Convert an instance of ConsumerConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

