/*
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Additional annotations that can be used to guide the usage of a metric.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:18.071541-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MetricDescriptorMetadata {
  public static final String SERIALIZED_NAME_INGEST_DELAY = "ingestDelay";
  @SerializedName(SERIALIZED_NAME_INGEST_DELAY)
  private String ingestDelay;

  /**
   * Deprecated. Must use the MetricDescriptor.launch_stage instead.
   */
  @JsonAdapter(LaunchStageEnum.Adapter.class)
  public enum LaunchStageEnum {
    LAUNCH_STAGE_UNSPECIFIED("LAUNCH_STAGE_UNSPECIFIED"),
    
    UNIMPLEMENTED("UNIMPLEMENTED"),
    
    PRELAUNCH("PRELAUNCH"),
    
    EARLY_ACCESS("EARLY_ACCESS"),
    
    ALPHA("ALPHA"),
    
    BETA("BETA"),
    
    GA("GA"),
    
    DEPRECATED("DEPRECATED");

    private String value;

    LaunchStageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LaunchStageEnum fromValue(String value) {
      for (LaunchStageEnum b : LaunchStageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LaunchStageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LaunchStageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LaunchStageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LaunchStageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LaunchStageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LAUNCH_STAGE = "launchStage";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_LAUNCH_STAGE)
  private LaunchStageEnum launchStage;

  public static final String SERIALIZED_NAME_SAMPLE_PERIOD = "samplePeriod";
  @SerializedName(SERIALIZED_NAME_SAMPLE_PERIOD)
  private String samplePeriod;

  public MetricDescriptorMetadata() {
  }

  public MetricDescriptorMetadata ingestDelay(String ingestDelay) {
    this.ingestDelay = ingestDelay;
    return this;
  }

  /**
   * The delay of data points caused by ingestion. Data points older than this age are guaranteed to be ingested and available to be read, excluding data loss due to errors.
   * @return ingestDelay
   */
  @javax.annotation.Nullable
  public String getIngestDelay() {
    return ingestDelay;
  }

  public void setIngestDelay(String ingestDelay) {
    this.ingestDelay = ingestDelay;
  }


  @Deprecated
  public MetricDescriptorMetadata launchStage(LaunchStageEnum launchStage) {
    this.launchStage = launchStage;
    return this;
  }

  /**
   * Deprecated. Must use the MetricDescriptor.launch_stage instead.
   * @return launchStage
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public LaunchStageEnum getLaunchStage() {
    return launchStage;
  }

  @Deprecated
  public void setLaunchStage(LaunchStageEnum launchStage) {
    this.launchStage = launchStage;
  }


  public MetricDescriptorMetadata samplePeriod(String samplePeriod) {
    this.samplePeriod = samplePeriod;
    return this;
  }

  /**
   * The sampling period of metric data points. For metrics which are written periodically, consecutive data points are stored at this time interval, excluding data loss due to errors. Metrics with a higher granularity have a smaller sampling period.
   * @return samplePeriod
   */
  @javax.annotation.Nullable
  public String getSamplePeriod() {
    return samplePeriod;
  }

  public void setSamplePeriod(String samplePeriod) {
    this.samplePeriod = samplePeriod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetricDescriptorMetadata metricDescriptorMetadata = (MetricDescriptorMetadata) o;
    return Objects.equals(this.ingestDelay, metricDescriptorMetadata.ingestDelay) &&
        Objects.equals(this.launchStage, metricDescriptorMetadata.launchStage) &&
        Objects.equals(this.samplePeriod, metricDescriptorMetadata.samplePeriod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ingestDelay, launchStage, samplePeriod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetricDescriptorMetadata {\n");
    sb.append("    ingestDelay: ").append(toIndentedString(ingestDelay)).append("\n");
    sb.append("    launchStage: ").append(toIndentedString(launchStage)).append("\n");
    sb.append("    samplePeriod: ").append(toIndentedString(samplePeriod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ingestDelay");
    openapiFields.add("launchStage");
    openapiFields.add("samplePeriod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MetricDescriptorMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MetricDescriptorMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MetricDescriptorMetadata is not found in the empty JSON string", MetricDescriptorMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MetricDescriptorMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MetricDescriptorMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ingestDelay") != null && !jsonObj.get("ingestDelay").isJsonNull()) && !jsonObj.get("ingestDelay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ingestDelay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ingestDelay").toString()));
      }
      if ((jsonObj.get("launchStage") != null && !jsonObj.get("launchStage").isJsonNull()) && !jsonObj.get("launchStage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `launchStage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("launchStage").toString()));
      }
      // validate the optional field `launchStage`
      if (jsonObj.get("launchStage") != null && !jsonObj.get("launchStage").isJsonNull()) {
        LaunchStageEnum.validateJsonElement(jsonObj.get("launchStage"));
      }
      if ((jsonObj.get("samplePeriod") != null && !jsonObj.get("samplePeriod").isJsonNull()) && !jsonObj.get("samplePeriod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `samplePeriod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("samplePeriod").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MetricDescriptorMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MetricDescriptorMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MetricDescriptorMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MetricDescriptorMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<MetricDescriptorMetadata>() {
           @Override
           public void write(JsonWriter out, MetricDescriptorMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MetricDescriptorMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MetricDescriptorMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MetricDescriptorMetadata
   * @throws IOException if the JSON string is invalid with respect to MetricDescriptorMetadata
   */
  public static MetricDescriptorMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetricDescriptorMetadata.class);
  }

  /**
   * Convert an instance of MetricDescriptorMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

