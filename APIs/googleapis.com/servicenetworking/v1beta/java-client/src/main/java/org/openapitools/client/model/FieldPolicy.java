/*
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Google API Policy Annotation This message defines a simple API policy annotation that can be used to annotate API request and response message fields with applicable policies. One field may have multiple applicable policies that must all be satisfied before a request can be processed. This policy annotation is used to generate the overall policy that will be used for automatic runtime policy enforcement and documentation generation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:18.071541-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FieldPolicy {
  public static final String SERIALIZED_NAME_RESOURCE_PERMISSION = "resourcePermission";
  @SerializedName(SERIALIZED_NAME_RESOURCE_PERMISSION)
  private String resourcePermission;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private String resourceType;

  public static final String SERIALIZED_NAME_SELECTOR = "selector";
  @SerializedName(SERIALIZED_NAME_SELECTOR)
  private String selector;

  public FieldPolicy() {
  }

  public FieldPolicy resourcePermission(String resourcePermission) {
    this.resourcePermission = resourcePermission;
    return this;
  }

  /**
   * Specifies the required permission(s) for the resource referred to by the field. It requires the field contains a valid resource reference, and the request must pass the permission checks to proceed. For example, \&quot;resourcemanager.projects.get\&quot;.
   * @return resourcePermission
   */
  @javax.annotation.Nullable
  public String getResourcePermission() {
    return resourcePermission;
  }

  public void setResourcePermission(String resourcePermission) {
    this.resourcePermission = resourcePermission;
  }


  public FieldPolicy resourceType(String resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * Specifies the resource type for the resource referred to by the field.
   * @return resourceType
   */
  @javax.annotation.Nullable
  public String getResourceType() {
    return resourceType;
  }

  public void setResourceType(String resourceType) {
    this.resourceType = resourceType;
  }


  public FieldPolicy selector(String selector) {
    this.selector = selector;
    return this;
  }

  /**
   * Selects one or more request or response message fields to apply this &#x60;FieldPolicy&#x60;. When a &#x60;FieldPolicy&#x60; is used in proto annotation, the selector must be left as empty. The service config generator will automatically fill the correct value. When a &#x60;FieldPolicy&#x60; is used in service config, the selector must be a comma-separated string with valid request or response field paths, such as \&quot;foo.bar\&quot; or \&quot;foo.bar,foo.baz\&quot;.
   * @return selector
   */
  @javax.annotation.Nullable
  public String getSelector() {
    return selector;
  }

  public void setSelector(String selector) {
    this.selector = selector;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FieldPolicy fieldPolicy = (FieldPolicy) o;
    return Objects.equals(this.resourcePermission, fieldPolicy.resourcePermission) &&
        Objects.equals(this.resourceType, fieldPolicy.resourceType) &&
        Objects.equals(this.selector, fieldPolicy.selector);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resourcePermission, resourceType, selector);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FieldPolicy {\n");
    sb.append("    resourcePermission: ").append(toIndentedString(resourcePermission)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    selector: ").append(toIndentedString(selector)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("resourcePermission");
    openapiFields.add("resourceType");
    openapiFields.add("selector");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FieldPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FieldPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FieldPolicy is not found in the empty JSON string", FieldPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FieldPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FieldPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("resourcePermission") != null && !jsonObj.get("resourcePermission").isJsonNull()) && !jsonObj.get("resourcePermission").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourcePermission` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourcePermission").toString()));
      }
      if ((jsonObj.get("resourceType") != null && !jsonObj.get("resourceType").isJsonNull()) && !jsonObj.get("resourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceType").toString()));
      }
      if ((jsonObj.get("selector") != null && !jsonObj.get("selector").isJsonNull()) && !jsonObj.get("selector").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selector` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selector").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FieldPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FieldPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FieldPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FieldPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<FieldPolicy>() {
           @Override
           public void write(JsonWriter out, FieldPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FieldPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FieldPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FieldPolicy
   * @throws IOException if the JSON string is invalid with respect to FieldPolicy
   */
  public static FieldPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FieldPolicy.class);
  }

  /**
   * Convert an instance of FieldPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

