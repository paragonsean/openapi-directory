/*
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.CommonLanguageSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings for Dotnet client libraries.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:18.071541-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DotnetSettings {
  public static final String SERIALIZED_NAME_COMMON = "common";
  @SerializedName(SERIALIZED_NAME_COMMON)
  private CommonLanguageSettings common;

  public static final String SERIALIZED_NAME_FORCED_NAMESPACE_ALIASES = "forcedNamespaceAliases";
  @SerializedName(SERIALIZED_NAME_FORCED_NAMESPACE_ALIASES)
  private List<String> forcedNamespaceAliases = new ArrayList<>();

  public static final String SERIALIZED_NAME_HANDWRITTEN_SIGNATURES = "handwrittenSignatures";
  @SerializedName(SERIALIZED_NAME_HANDWRITTEN_SIGNATURES)
  private List<String> handwrittenSignatures = new ArrayList<>();

  public static final String SERIALIZED_NAME_IGNORED_RESOURCES = "ignoredResources";
  @SerializedName(SERIALIZED_NAME_IGNORED_RESOURCES)
  private List<String> ignoredResources = new ArrayList<>();

  public static final String SERIALIZED_NAME_RENAMED_RESOURCES = "renamedResources";
  @SerializedName(SERIALIZED_NAME_RENAMED_RESOURCES)
  private Map<String, String> renamedResources = new HashMap<>();

  public static final String SERIALIZED_NAME_RENAMED_SERVICES = "renamedServices";
  @SerializedName(SERIALIZED_NAME_RENAMED_SERVICES)
  private Map<String, String> renamedServices = new HashMap<>();

  public DotnetSettings() {
  }

  public DotnetSettings common(CommonLanguageSettings common) {
    this.common = common;
    return this;
  }

  /**
   * Get common
   * @return common
   */
  @javax.annotation.Nullable
  public CommonLanguageSettings getCommon() {
    return common;
  }

  public void setCommon(CommonLanguageSettings common) {
    this.common = common;
  }


  public DotnetSettings forcedNamespaceAliases(List<String> forcedNamespaceAliases) {
    this.forcedNamespaceAliases = forcedNamespaceAliases;
    return this;
  }

  public DotnetSettings addForcedNamespaceAliasesItem(String forcedNamespaceAliasesItem) {
    if (this.forcedNamespaceAliases == null) {
      this.forcedNamespaceAliases = new ArrayList<>();
    }
    this.forcedNamespaceAliases.add(forcedNamespaceAliasesItem);
    return this;
  }

  /**
   * Namespaces which must be aliased in snippets due to a known (but non-generator-predictable) naming collision
   * @return forcedNamespaceAliases
   */
  @javax.annotation.Nullable
  public List<String> getForcedNamespaceAliases() {
    return forcedNamespaceAliases;
  }

  public void setForcedNamespaceAliases(List<String> forcedNamespaceAliases) {
    this.forcedNamespaceAliases = forcedNamespaceAliases;
  }


  public DotnetSettings handwrittenSignatures(List<String> handwrittenSignatures) {
    this.handwrittenSignatures = handwrittenSignatures;
    return this;
  }

  public DotnetSettings addHandwrittenSignaturesItem(String handwrittenSignaturesItem) {
    if (this.handwrittenSignatures == null) {
      this.handwrittenSignatures = new ArrayList<>();
    }
    this.handwrittenSignatures.add(handwrittenSignaturesItem);
    return this;
  }

  /**
   * Method signatures (in the form \&quot;service.method(signature)\&quot;) which are provided separately, so shouldn&#39;t be generated. Snippets *calling* these methods are still generated, however.
   * @return handwrittenSignatures
   */
  @javax.annotation.Nullable
  public List<String> getHandwrittenSignatures() {
    return handwrittenSignatures;
  }

  public void setHandwrittenSignatures(List<String> handwrittenSignatures) {
    this.handwrittenSignatures = handwrittenSignatures;
  }


  public DotnetSettings ignoredResources(List<String> ignoredResources) {
    this.ignoredResources = ignoredResources;
    return this;
  }

  public DotnetSettings addIgnoredResourcesItem(String ignoredResourcesItem) {
    if (this.ignoredResources == null) {
      this.ignoredResources = new ArrayList<>();
    }
    this.ignoredResources.add(ignoredResourcesItem);
    return this;
  }

  /**
   * List of full resource types to ignore during generation. This is typically used for API-specific Location resources, which should be handled by the generator as if they were actually the common Location resources. Example entry: \&quot;documentai.googleapis.com/Location\&quot;
   * @return ignoredResources
   */
  @javax.annotation.Nullable
  public List<String> getIgnoredResources() {
    return ignoredResources;
  }

  public void setIgnoredResources(List<String> ignoredResources) {
    this.ignoredResources = ignoredResources;
  }


  public DotnetSettings renamedResources(Map<String, String> renamedResources) {
    this.renamedResources = renamedResources;
    return this;
  }

  public DotnetSettings putRenamedResourcesItem(String key, String renamedResourcesItem) {
    if (this.renamedResources == null) {
      this.renamedResources = new HashMap<>();
    }
    this.renamedResources.put(key, renamedResourcesItem);
    return this;
  }

  /**
   * Map from full resource types to the effective short name for the resource. This is used when otherwise resource named from different services would cause naming collisions. Example entry: \&quot;datalabeling.googleapis.com/Dataset\&quot;: \&quot;DataLabelingDataset\&quot;
   * @return renamedResources
   */
  @javax.annotation.Nullable
  public Map<String, String> getRenamedResources() {
    return renamedResources;
  }

  public void setRenamedResources(Map<String, String> renamedResources) {
    this.renamedResources = renamedResources;
  }


  public DotnetSettings renamedServices(Map<String, String> renamedServices) {
    this.renamedServices = renamedServices;
    return this;
  }

  public DotnetSettings putRenamedServicesItem(String key, String renamedServicesItem) {
    if (this.renamedServices == null) {
      this.renamedServices = new HashMap<>();
    }
    this.renamedServices.put(key, renamedServicesItem);
    return this;
  }

  /**
   * Map from original service names to renamed versions. This is used when the default generated types would cause a naming conflict. (Neither name is fully-qualified.) Example: Subscriber to SubscriberServiceApi.
   * @return renamedServices
   */
  @javax.annotation.Nullable
  public Map<String, String> getRenamedServices() {
    return renamedServices;
  }

  public void setRenamedServices(Map<String, String> renamedServices) {
    this.renamedServices = renamedServices;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DotnetSettings dotnetSettings = (DotnetSettings) o;
    return Objects.equals(this.common, dotnetSettings.common) &&
        Objects.equals(this.forcedNamespaceAliases, dotnetSettings.forcedNamespaceAliases) &&
        Objects.equals(this.handwrittenSignatures, dotnetSettings.handwrittenSignatures) &&
        Objects.equals(this.ignoredResources, dotnetSettings.ignoredResources) &&
        Objects.equals(this.renamedResources, dotnetSettings.renamedResources) &&
        Objects.equals(this.renamedServices, dotnetSettings.renamedServices);
  }

  @Override
  public int hashCode() {
    return Objects.hash(common, forcedNamespaceAliases, handwrittenSignatures, ignoredResources, renamedResources, renamedServices);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DotnetSettings {\n");
    sb.append("    common: ").append(toIndentedString(common)).append("\n");
    sb.append("    forcedNamespaceAliases: ").append(toIndentedString(forcedNamespaceAliases)).append("\n");
    sb.append("    handwrittenSignatures: ").append(toIndentedString(handwrittenSignatures)).append("\n");
    sb.append("    ignoredResources: ").append(toIndentedString(ignoredResources)).append("\n");
    sb.append("    renamedResources: ").append(toIndentedString(renamedResources)).append("\n");
    sb.append("    renamedServices: ").append(toIndentedString(renamedServices)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("common");
    openapiFields.add("forcedNamespaceAliases");
    openapiFields.add("handwrittenSignatures");
    openapiFields.add("ignoredResources");
    openapiFields.add("renamedResources");
    openapiFields.add("renamedServices");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DotnetSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DotnetSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DotnetSettings is not found in the empty JSON string", DotnetSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DotnetSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DotnetSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `common`
      if (jsonObj.get("common") != null && !jsonObj.get("common").isJsonNull()) {
        CommonLanguageSettings.validateJsonElement(jsonObj.get("common"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("forcedNamespaceAliases") != null && !jsonObj.get("forcedNamespaceAliases").isJsonNull() && !jsonObj.get("forcedNamespaceAliases").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `forcedNamespaceAliases` to be an array in the JSON string but got `%s`", jsonObj.get("forcedNamespaceAliases").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("handwrittenSignatures") != null && !jsonObj.get("handwrittenSignatures").isJsonNull() && !jsonObj.get("handwrittenSignatures").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `handwrittenSignatures` to be an array in the JSON string but got `%s`", jsonObj.get("handwrittenSignatures").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ignoredResources") != null && !jsonObj.get("ignoredResources").isJsonNull() && !jsonObj.get("ignoredResources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ignoredResources` to be an array in the JSON string but got `%s`", jsonObj.get("ignoredResources").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DotnetSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DotnetSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DotnetSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DotnetSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<DotnetSettings>() {
           @Override
           public void write(JsonWriter out, DotnetSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DotnetSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DotnetSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DotnetSettings
   * @throws IOException if the JSON string is invalid with respect to DotnetSettings
   */
  public static DotnetSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DotnetSettings.class);
  }

  /**
   * Convert an instance of DotnetSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

