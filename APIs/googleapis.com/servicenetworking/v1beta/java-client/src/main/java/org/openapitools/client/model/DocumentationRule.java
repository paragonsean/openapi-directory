/*
 * Service Networking API
 * Provides automatic management of network configurations necessary for certain services.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A documentation rule provides information about individual API elements.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:18.071541-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DocumentationRule {
  public static final String SERIALIZED_NAME_DEPRECATION_DESCRIPTION = "deprecationDescription";
  @SerializedName(SERIALIZED_NAME_DEPRECATION_DESCRIPTION)
  private String deprecationDescription;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISABLE_REPLACEMENT_WORDS = "disableReplacementWords";
  @SerializedName(SERIALIZED_NAME_DISABLE_REPLACEMENT_WORDS)
  private String disableReplacementWords;

  public static final String SERIALIZED_NAME_SELECTOR = "selector";
  @SerializedName(SERIALIZED_NAME_SELECTOR)
  private String selector;

  public DocumentationRule() {
  }

  public DocumentationRule deprecationDescription(String deprecationDescription) {
    this.deprecationDescription = deprecationDescription;
    return this;
  }

  /**
   * Deprecation description of the selected element(s). It can be provided if an element is marked as &#x60;deprecated&#x60;.
   * @return deprecationDescription
   */
  @javax.annotation.Nullable
  public String getDeprecationDescription() {
    return deprecationDescription;
  }

  public void setDeprecationDescription(String deprecationDescription) {
    this.deprecationDescription = deprecationDescription;
  }


  public DocumentationRule description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the selected proto element (e.g. a message, a method, a &#39;service&#39; definition, or a field). Defaults to leading &amp; trailing comments taken from the proto source definition of the proto element.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DocumentationRule disableReplacementWords(String disableReplacementWords) {
    this.disableReplacementWords = disableReplacementWords;
    return this;
  }

  /**
   * String of comma or space separated case-sensitive words for which method/field name replacement will be disabled by go/api-docgen.
   * @return disableReplacementWords
   */
  @javax.annotation.Nullable
  public String getDisableReplacementWords() {
    return disableReplacementWords;
  }

  public void setDisableReplacementWords(String disableReplacementWords) {
    this.disableReplacementWords = disableReplacementWords;
  }


  public DocumentationRule selector(String selector) {
    this.selector = selector;
    return this;
  }

  /**
   * The selector is a comma-separated list of patterns for any element such as a method, a field, an enum value. Each pattern is a qualified name of the element which may end in \&quot;*\&quot;, indicating a wildcard. Wildcards are only allowed at the end and for a whole component of the qualified name, i.e. \&quot;foo.*\&quot; is ok, but not \&quot;foo.b*\&quot; or \&quot;foo.*.bar\&quot;. A wildcard will match one or more components. To specify a default for all applicable elements, the whole pattern \&quot;*\&quot; is used.
   * @return selector
   */
  @javax.annotation.Nullable
  public String getSelector() {
    return selector;
  }

  public void setSelector(String selector) {
    this.selector = selector;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentationRule documentationRule = (DocumentationRule) o;
    return Objects.equals(this.deprecationDescription, documentationRule.deprecationDescription) &&
        Objects.equals(this.description, documentationRule.description) &&
        Objects.equals(this.disableReplacementWords, documentationRule.disableReplacementWords) &&
        Objects.equals(this.selector, documentationRule.selector);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deprecationDescription, description, disableReplacementWords, selector);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentationRule {\n");
    sb.append("    deprecationDescription: ").append(toIndentedString(deprecationDescription)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    disableReplacementWords: ").append(toIndentedString(disableReplacementWords)).append("\n");
    sb.append("    selector: ").append(toIndentedString(selector)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deprecationDescription");
    openapiFields.add("description");
    openapiFields.add("disableReplacementWords");
    openapiFields.add("selector");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DocumentationRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DocumentationRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocumentationRule is not found in the empty JSON string", DocumentationRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DocumentationRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DocumentationRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("deprecationDescription") != null && !jsonObj.get("deprecationDescription").isJsonNull()) && !jsonObj.get("deprecationDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deprecationDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deprecationDescription").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("disableReplacementWords") != null && !jsonObj.get("disableReplacementWords").isJsonNull()) && !jsonObj.get("disableReplacementWords").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `disableReplacementWords` to be a primitive type in the JSON string but got `%s`", jsonObj.get("disableReplacementWords").toString()));
      }
      if ((jsonObj.get("selector") != null && !jsonObj.get("selector").isJsonNull()) && !jsonObj.get("selector").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selector` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selector").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocumentationRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocumentationRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocumentationRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocumentationRule.class));

       return (TypeAdapter<T>) new TypeAdapter<DocumentationRule>() {
           @Override
           public void write(JsonWriter out, DocumentationRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DocumentationRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DocumentationRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DocumentationRule
   * @throws IOException if the JSON string is invalid with respect to DocumentationRule
   */
  public static DocumentationRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentationRule.class);
  }

  /**
   * Convert an instance of DocumentationRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

