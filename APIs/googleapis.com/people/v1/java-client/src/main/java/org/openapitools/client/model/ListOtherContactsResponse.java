/*
 * People API
 * Provides access to information about profiles and contacts.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Person;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The response to a request for the authenticated user&#39;s \&quot;Other contacts\&quot;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:24.945775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListOtherContactsResponse {
  public static final String SERIALIZED_NAME_NEXT_PAGE_TOKEN = "nextPageToken";
  @SerializedName(SERIALIZED_NAME_NEXT_PAGE_TOKEN)
  private String nextPageToken;

  public static final String SERIALIZED_NAME_NEXT_SYNC_TOKEN = "nextSyncToken";
  @SerializedName(SERIALIZED_NAME_NEXT_SYNC_TOKEN)
  private String nextSyncToken;

  public static final String SERIALIZED_NAME_OTHER_CONTACTS = "otherContacts";
  @SerializedName(SERIALIZED_NAME_OTHER_CONTACTS)
  private List<Person> otherContacts = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL_SIZE = "totalSize";
  @SerializedName(SERIALIZED_NAME_TOTAL_SIZE)
  private Integer totalSize;

  public ListOtherContactsResponse() {
  }

  public ListOtherContactsResponse nextPageToken(String nextPageToken) {
    this.nextPageToken = nextPageToken;
    return this;
  }

  /**
   * A token, which can be sent as &#x60;page_token&#x60; to retrieve the next page. If this field is omitted, there are no subsequent pages.
   * @return nextPageToken
   */
  @javax.annotation.Nullable
  public String getNextPageToken() {
    return nextPageToken;
  }

  public void setNextPageToken(String nextPageToken) {
    this.nextPageToken = nextPageToken;
  }


  public ListOtherContactsResponse nextSyncToken(String nextSyncToken) {
    this.nextSyncToken = nextSyncToken;
    return this;
  }

  /**
   * A token, which can be sent as &#x60;sync_token&#x60; to retrieve changes since the last request. Request must set &#x60;request_sync_token&#x60; to return the sync token.
   * @return nextSyncToken
   */
  @javax.annotation.Nullable
  public String getNextSyncToken() {
    return nextSyncToken;
  }

  public void setNextSyncToken(String nextSyncToken) {
    this.nextSyncToken = nextSyncToken;
  }


  public ListOtherContactsResponse otherContacts(List<Person> otherContacts) {
    this.otherContacts = otherContacts;
    return this;
  }

  public ListOtherContactsResponse addOtherContactsItem(Person otherContactsItem) {
    if (this.otherContacts == null) {
      this.otherContacts = new ArrayList<>();
    }
    this.otherContacts.add(otherContactsItem);
    return this;
  }

  /**
   * The list of \&quot;Other contacts\&quot; returned as Person resources. \&quot;Other contacts\&quot; support a limited subset of fields. See ListOtherContactsRequest.request_mask for more detailed information.
   * @return otherContacts
   */
  @javax.annotation.Nullable
  public List<Person> getOtherContacts() {
    return otherContacts;
  }

  public void setOtherContacts(List<Person> otherContacts) {
    this.otherContacts = otherContacts;
  }


  public ListOtherContactsResponse totalSize(Integer totalSize) {
    this.totalSize = totalSize;
    return this;
  }

  /**
   * The total number of other contacts in the list without pagination.
   * @return totalSize
   */
  @javax.annotation.Nullable
  public Integer getTotalSize() {
    return totalSize;
  }

  public void setTotalSize(Integer totalSize) {
    this.totalSize = totalSize;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListOtherContactsResponse listOtherContactsResponse = (ListOtherContactsResponse) o;
    return Objects.equals(this.nextPageToken, listOtherContactsResponse.nextPageToken) &&
        Objects.equals(this.nextSyncToken, listOtherContactsResponse.nextSyncToken) &&
        Objects.equals(this.otherContacts, listOtherContactsResponse.otherContacts) &&
        Objects.equals(this.totalSize, listOtherContactsResponse.totalSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nextPageToken, nextSyncToken, otherContacts, totalSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListOtherContactsResponse {\n");
    sb.append("    nextPageToken: ").append(toIndentedString(nextPageToken)).append("\n");
    sb.append("    nextSyncToken: ").append(toIndentedString(nextSyncToken)).append("\n");
    sb.append("    otherContacts: ").append(toIndentedString(otherContacts)).append("\n");
    sb.append("    totalSize: ").append(toIndentedString(totalSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("nextPageToken");
    openapiFields.add("nextSyncToken");
    openapiFields.add("otherContacts");
    openapiFields.add("totalSize");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListOtherContactsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListOtherContactsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListOtherContactsResponse is not found in the empty JSON string", ListOtherContactsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListOtherContactsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListOtherContactsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("nextPageToken") != null && !jsonObj.get("nextPageToken").isJsonNull()) && !jsonObj.get("nextPageToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextPageToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextPageToken").toString()));
      }
      if ((jsonObj.get("nextSyncToken") != null && !jsonObj.get("nextSyncToken").isJsonNull()) && !jsonObj.get("nextSyncToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextSyncToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextSyncToken").toString()));
      }
      if (jsonObj.get("otherContacts") != null && !jsonObj.get("otherContacts").isJsonNull()) {
        JsonArray jsonArrayotherContacts = jsonObj.getAsJsonArray("otherContacts");
        if (jsonArrayotherContacts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("otherContacts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `otherContacts` to be an array in the JSON string but got `%s`", jsonObj.get("otherContacts").toString()));
          }

          // validate the optional field `otherContacts` (array)
          for (int i = 0; i < jsonArrayotherContacts.size(); i++) {
            Person.validateJsonElement(jsonArrayotherContacts.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListOtherContactsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListOtherContactsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListOtherContactsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListOtherContactsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ListOtherContactsResponse>() {
           @Override
           public void write(JsonWriter out, ListOtherContactsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListOtherContactsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListOtherContactsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListOtherContactsResponse
   * @throws IOException if the JSON string is invalid with respect to ListOtherContactsResponse
   */
  public static ListOtherContactsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListOtherContactsResponse.class);
  }

  /**
   * Convert an instance of ListOtherContactsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

