/*
 * People API
 * Provides access to information about profiles and contacts.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FieldMetadata;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A person&#39;s name. If the name is a mononym, the family name is empty.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:24.945775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Name {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DISPLAY_NAME_LAST_FIRST = "displayNameLastFirst";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME_LAST_FIRST)
  private String displayNameLastFirst;

  public static final String SERIALIZED_NAME_FAMILY_NAME = "familyName";
  @SerializedName(SERIALIZED_NAME_FAMILY_NAME)
  private String familyName;

  public static final String SERIALIZED_NAME_GIVEN_NAME = "givenName";
  @SerializedName(SERIALIZED_NAME_GIVEN_NAME)
  private String givenName;

  public static final String SERIALIZED_NAME_HONORIFIC_PREFIX = "honorificPrefix";
  @SerializedName(SERIALIZED_NAME_HONORIFIC_PREFIX)
  private String honorificPrefix;

  public static final String SERIALIZED_NAME_HONORIFIC_SUFFIX = "honorificSuffix";
  @SerializedName(SERIALIZED_NAME_HONORIFIC_SUFFIX)
  private String honorificSuffix;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private FieldMetadata metadata;

  public static final String SERIALIZED_NAME_MIDDLE_NAME = "middleName";
  @SerializedName(SERIALIZED_NAME_MIDDLE_NAME)
  private String middleName;

  public static final String SERIALIZED_NAME_PHONETIC_FAMILY_NAME = "phoneticFamilyName";
  @SerializedName(SERIALIZED_NAME_PHONETIC_FAMILY_NAME)
  private String phoneticFamilyName;

  public static final String SERIALIZED_NAME_PHONETIC_FULL_NAME = "phoneticFullName";
  @SerializedName(SERIALIZED_NAME_PHONETIC_FULL_NAME)
  private String phoneticFullName;

  public static final String SERIALIZED_NAME_PHONETIC_GIVEN_NAME = "phoneticGivenName";
  @SerializedName(SERIALIZED_NAME_PHONETIC_GIVEN_NAME)
  private String phoneticGivenName;

  public static final String SERIALIZED_NAME_PHONETIC_HONORIFIC_PREFIX = "phoneticHonorificPrefix";
  @SerializedName(SERIALIZED_NAME_PHONETIC_HONORIFIC_PREFIX)
  private String phoneticHonorificPrefix;

  public static final String SERIALIZED_NAME_PHONETIC_HONORIFIC_SUFFIX = "phoneticHonorificSuffix";
  @SerializedName(SERIALIZED_NAME_PHONETIC_HONORIFIC_SUFFIX)
  private String phoneticHonorificSuffix;

  public static final String SERIALIZED_NAME_PHONETIC_MIDDLE_NAME = "phoneticMiddleName";
  @SerializedName(SERIALIZED_NAME_PHONETIC_MIDDLE_NAME)
  private String phoneticMiddleName;

  public static final String SERIALIZED_NAME_UNSTRUCTURED_NAME = "unstructuredName";
  @SerializedName(SERIALIZED_NAME_UNSTRUCTURED_NAME)
  private String unstructuredName;

  public Name() {
  }

  public Name(
     String displayName, 
     String displayNameLastFirst
  ) {
    this();
    this.displayName = displayName;
    this.displayNameLastFirst = displayNameLastFirst;
  }

  /**
   * Output only. The display name formatted according to the locale specified by the viewer&#39;s account or the &#x60;Accept-Language&#x60; HTTP header.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }



  /**
   * Output only. The display name with the last name first formatted according to the locale specified by the viewer&#39;s account or the &#x60;Accept-Language&#x60; HTTP header.
   * @return displayNameLastFirst
   */
  @javax.annotation.Nullable
  public String getDisplayNameLastFirst() {
    return displayNameLastFirst;
  }



  public Name familyName(String familyName) {
    this.familyName = familyName;
    return this;
  }

  /**
   * The family name.
   * @return familyName
   */
  @javax.annotation.Nullable
  public String getFamilyName() {
    return familyName;
  }

  public void setFamilyName(String familyName) {
    this.familyName = familyName;
  }


  public Name givenName(String givenName) {
    this.givenName = givenName;
    return this;
  }

  /**
   * The given name.
   * @return givenName
   */
  @javax.annotation.Nullable
  public String getGivenName() {
    return givenName;
  }

  public void setGivenName(String givenName) {
    this.givenName = givenName;
  }


  public Name honorificPrefix(String honorificPrefix) {
    this.honorificPrefix = honorificPrefix;
    return this;
  }

  /**
   * The honorific prefixes, such as &#x60;Mrs.&#x60; or &#x60;Dr.&#x60;
   * @return honorificPrefix
   */
  @javax.annotation.Nullable
  public String getHonorificPrefix() {
    return honorificPrefix;
  }

  public void setHonorificPrefix(String honorificPrefix) {
    this.honorificPrefix = honorificPrefix;
  }


  public Name honorificSuffix(String honorificSuffix) {
    this.honorificSuffix = honorificSuffix;
    return this;
  }

  /**
   * The honorific suffixes, such as &#x60;Jr.&#x60;
   * @return honorificSuffix
   */
  @javax.annotation.Nullable
  public String getHonorificSuffix() {
    return honorificSuffix;
  }

  public void setHonorificSuffix(String honorificSuffix) {
    this.honorificSuffix = honorificSuffix;
  }


  public Name metadata(FieldMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public FieldMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(FieldMetadata metadata) {
    this.metadata = metadata;
  }


  public Name middleName(String middleName) {
    this.middleName = middleName;
    return this;
  }

  /**
   * The middle name(s).
   * @return middleName
   */
  @javax.annotation.Nullable
  public String getMiddleName() {
    return middleName;
  }

  public void setMiddleName(String middleName) {
    this.middleName = middleName;
  }


  public Name phoneticFamilyName(String phoneticFamilyName) {
    this.phoneticFamilyName = phoneticFamilyName;
    return this;
  }

  /**
   * The family name spelled as it sounds.
   * @return phoneticFamilyName
   */
  @javax.annotation.Nullable
  public String getPhoneticFamilyName() {
    return phoneticFamilyName;
  }

  public void setPhoneticFamilyName(String phoneticFamilyName) {
    this.phoneticFamilyName = phoneticFamilyName;
  }


  public Name phoneticFullName(String phoneticFullName) {
    this.phoneticFullName = phoneticFullName;
    return this;
  }

  /**
   * The full name spelled as it sounds.
   * @return phoneticFullName
   */
  @javax.annotation.Nullable
  public String getPhoneticFullName() {
    return phoneticFullName;
  }

  public void setPhoneticFullName(String phoneticFullName) {
    this.phoneticFullName = phoneticFullName;
  }


  public Name phoneticGivenName(String phoneticGivenName) {
    this.phoneticGivenName = phoneticGivenName;
    return this;
  }

  /**
   * The given name spelled as it sounds.
   * @return phoneticGivenName
   */
  @javax.annotation.Nullable
  public String getPhoneticGivenName() {
    return phoneticGivenName;
  }

  public void setPhoneticGivenName(String phoneticGivenName) {
    this.phoneticGivenName = phoneticGivenName;
  }


  public Name phoneticHonorificPrefix(String phoneticHonorificPrefix) {
    this.phoneticHonorificPrefix = phoneticHonorificPrefix;
    return this;
  }

  /**
   * The honorific prefixes spelled as they sound.
   * @return phoneticHonorificPrefix
   */
  @javax.annotation.Nullable
  public String getPhoneticHonorificPrefix() {
    return phoneticHonorificPrefix;
  }

  public void setPhoneticHonorificPrefix(String phoneticHonorificPrefix) {
    this.phoneticHonorificPrefix = phoneticHonorificPrefix;
  }


  public Name phoneticHonorificSuffix(String phoneticHonorificSuffix) {
    this.phoneticHonorificSuffix = phoneticHonorificSuffix;
    return this;
  }

  /**
   * The honorific suffixes spelled as they sound.
   * @return phoneticHonorificSuffix
   */
  @javax.annotation.Nullable
  public String getPhoneticHonorificSuffix() {
    return phoneticHonorificSuffix;
  }

  public void setPhoneticHonorificSuffix(String phoneticHonorificSuffix) {
    this.phoneticHonorificSuffix = phoneticHonorificSuffix;
  }


  public Name phoneticMiddleName(String phoneticMiddleName) {
    this.phoneticMiddleName = phoneticMiddleName;
    return this;
  }

  /**
   * The middle name(s) spelled as they sound.
   * @return phoneticMiddleName
   */
  @javax.annotation.Nullable
  public String getPhoneticMiddleName() {
    return phoneticMiddleName;
  }

  public void setPhoneticMiddleName(String phoneticMiddleName) {
    this.phoneticMiddleName = phoneticMiddleName;
  }


  public Name unstructuredName(String unstructuredName) {
    this.unstructuredName = unstructuredName;
    return this;
  }

  /**
   * The free form name value.
   * @return unstructuredName
   */
  @javax.annotation.Nullable
  public String getUnstructuredName() {
    return unstructuredName;
  }

  public void setUnstructuredName(String unstructuredName) {
    this.unstructuredName = unstructuredName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Name name = (Name) o;
    return Objects.equals(this.displayName, name.displayName) &&
        Objects.equals(this.displayNameLastFirst, name.displayNameLastFirst) &&
        Objects.equals(this.familyName, name.familyName) &&
        Objects.equals(this.givenName, name.givenName) &&
        Objects.equals(this.honorificPrefix, name.honorificPrefix) &&
        Objects.equals(this.honorificSuffix, name.honorificSuffix) &&
        Objects.equals(this.metadata, name.metadata) &&
        Objects.equals(this.middleName, name.middleName) &&
        Objects.equals(this.phoneticFamilyName, name.phoneticFamilyName) &&
        Objects.equals(this.phoneticFullName, name.phoneticFullName) &&
        Objects.equals(this.phoneticGivenName, name.phoneticGivenName) &&
        Objects.equals(this.phoneticHonorificPrefix, name.phoneticHonorificPrefix) &&
        Objects.equals(this.phoneticHonorificSuffix, name.phoneticHonorificSuffix) &&
        Objects.equals(this.phoneticMiddleName, name.phoneticMiddleName) &&
        Objects.equals(this.unstructuredName, name.unstructuredName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, displayNameLastFirst, familyName, givenName, honorificPrefix, honorificSuffix, metadata, middleName, phoneticFamilyName, phoneticFullName, phoneticGivenName, phoneticHonorificPrefix, phoneticHonorificSuffix, phoneticMiddleName, unstructuredName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Name {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    displayNameLastFirst: ").append(toIndentedString(displayNameLastFirst)).append("\n");
    sb.append("    familyName: ").append(toIndentedString(familyName)).append("\n");
    sb.append("    givenName: ").append(toIndentedString(givenName)).append("\n");
    sb.append("    honorificPrefix: ").append(toIndentedString(honorificPrefix)).append("\n");
    sb.append("    honorificSuffix: ").append(toIndentedString(honorificSuffix)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    middleName: ").append(toIndentedString(middleName)).append("\n");
    sb.append("    phoneticFamilyName: ").append(toIndentedString(phoneticFamilyName)).append("\n");
    sb.append("    phoneticFullName: ").append(toIndentedString(phoneticFullName)).append("\n");
    sb.append("    phoneticGivenName: ").append(toIndentedString(phoneticGivenName)).append("\n");
    sb.append("    phoneticHonorificPrefix: ").append(toIndentedString(phoneticHonorificPrefix)).append("\n");
    sb.append("    phoneticHonorificSuffix: ").append(toIndentedString(phoneticHonorificSuffix)).append("\n");
    sb.append("    phoneticMiddleName: ").append(toIndentedString(phoneticMiddleName)).append("\n");
    sb.append("    unstructuredName: ").append(toIndentedString(unstructuredName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayName");
    openapiFields.add("displayNameLastFirst");
    openapiFields.add("familyName");
    openapiFields.add("givenName");
    openapiFields.add("honorificPrefix");
    openapiFields.add("honorificSuffix");
    openapiFields.add("metadata");
    openapiFields.add("middleName");
    openapiFields.add("phoneticFamilyName");
    openapiFields.add("phoneticFullName");
    openapiFields.add("phoneticGivenName");
    openapiFields.add("phoneticHonorificPrefix");
    openapiFields.add("phoneticHonorificSuffix");
    openapiFields.add("phoneticMiddleName");
    openapiFields.add("unstructuredName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Name
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Name.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Name is not found in the empty JSON string", Name.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Name.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Name` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("displayNameLastFirst") != null && !jsonObj.get("displayNameLastFirst").isJsonNull()) && !jsonObj.get("displayNameLastFirst").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayNameLastFirst` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayNameLastFirst").toString()));
      }
      if ((jsonObj.get("familyName") != null && !jsonObj.get("familyName").isJsonNull()) && !jsonObj.get("familyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `familyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("familyName").toString()));
      }
      if ((jsonObj.get("givenName") != null && !jsonObj.get("givenName").isJsonNull()) && !jsonObj.get("givenName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `givenName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("givenName").toString()));
      }
      if ((jsonObj.get("honorificPrefix") != null && !jsonObj.get("honorificPrefix").isJsonNull()) && !jsonObj.get("honorificPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `honorificPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("honorificPrefix").toString()));
      }
      if ((jsonObj.get("honorificSuffix") != null && !jsonObj.get("honorificSuffix").isJsonNull()) && !jsonObj.get("honorificSuffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `honorificSuffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("honorificSuffix").toString()));
      }
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        FieldMetadata.validateJsonElement(jsonObj.get("metadata"));
      }
      if ((jsonObj.get("middleName") != null && !jsonObj.get("middleName").isJsonNull()) && !jsonObj.get("middleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `middleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("middleName").toString()));
      }
      if ((jsonObj.get("phoneticFamilyName") != null && !jsonObj.get("phoneticFamilyName").isJsonNull()) && !jsonObj.get("phoneticFamilyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneticFamilyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneticFamilyName").toString()));
      }
      if ((jsonObj.get("phoneticFullName") != null && !jsonObj.get("phoneticFullName").isJsonNull()) && !jsonObj.get("phoneticFullName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneticFullName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneticFullName").toString()));
      }
      if ((jsonObj.get("phoneticGivenName") != null && !jsonObj.get("phoneticGivenName").isJsonNull()) && !jsonObj.get("phoneticGivenName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneticGivenName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneticGivenName").toString()));
      }
      if ((jsonObj.get("phoneticHonorificPrefix") != null && !jsonObj.get("phoneticHonorificPrefix").isJsonNull()) && !jsonObj.get("phoneticHonorificPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneticHonorificPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneticHonorificPrefix").toString()));
      }
      if ((jsonObj.get("phoneticHonorificSuffix") != null && !jsonObj.get("phoneticHonorificSuffix").isJsonNull()) && !jsonObj.get("phoneticHonorificSuffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneticHonorificSuffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneticHonorificSuffix").toString()));
      }
      if ((jsonObj.get("phoneticMiddleName") != null && !jsonObj.get("phoneticMiddleName").isJsonNull()) && !jsonObj.get("phoneticMiddleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneticMiddleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneticMiddleName").toString()));
      }
      if ((jsonObj.get("unstructuredName") != null && !jsonObj.get("unstructuredName").isJsonNull()) && !jsonObj.get("unstructuredName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unstructuredName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unstructuredName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Name.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Name' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Name> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Name.class));

       return (TypeAdapter<T>) new TypeAdapter<Name>() {
           @Override
           public void write(JsonWriter out, Name value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Name read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Name given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Name
   * @throws IOException if the JSON string is invalid with respect to Name
   */
  public static Name fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Name.class);
  }

  /**
   * Convert an instance of Name to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

