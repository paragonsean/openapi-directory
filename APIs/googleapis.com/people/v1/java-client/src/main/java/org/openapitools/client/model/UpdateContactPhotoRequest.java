/*
 * People API
 * Provides access to information about profiles and contacts.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A request to update an existing contact&#39;s photo. All requests must have a valid photo format: JPEG or PNG.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:24.945775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateContactPhotoRequest {
  public static final String SERIALIZED_NAME_PERSON_FIELDS = "personFields";
  @SerializedName(SERIALIZED_NAME_PERSON_FIELDS)
  private String personFields;

  public static final String SERIALIZED_NAME_PHOTO_BYTES = "photoBytes";
  @SerializedName(SERIALIZED_NAME_PHOTO_BYTES)
  private byte[] photoBytes;

  /**
   * Gets or Sets sources
   */
  @JsonAdapter(SourcesEnum.Adapter.class)
  public enum SourcesEnum {
    UNSPECIFIED("READ_SOURCE_TYPE_UNSPECIFIED"),
    
    PROFILE("READ_SOURCE_TYPE_PROFILE"),
    
    CONTACT("READ_SOURCE_TYPE_CONTACT"),
    
    DOMAIN_CONTACT("READ_SOURCE_TYPE_DOMAIN_CONTACT");

    private String value;

    SourcesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourcesEnum fromValue(String value) {
      for (SourcesEnum b : SourcesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SourcesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourcesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourcesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SourcesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SourcesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOURCES = "sources";
  @SerializedName(SERIALIZED_NAME_SOURCES)
  private List<SourcesEnum> sources = new ArrayList<>();

  public UpdateContactPhotoRequest() {
  }

  public UpdateContactPhotoRequest personFields(String personFields) {
    this.personFields = personFields;
    return this;
  }

  /**
   * Optional. A field mask to restrict which fields on the person are returned. Multiple fields can be specified by separating them with commas. Defaults to empty if not set, which will skip the post mutate get. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined
   * @return personFields
   */
  @javax.annotation.Nullable
  public String getPersonFields() {
    return personFields;
  }

  public void setPersonFields(String personFields) {
    this.personFields = personFields;
  }


  public UpdateContactPhotoRequest photoBytes(byte[] photoBytes) {
    this.photoBytes = photoBytes;
    return this;
  }

  /**
   * Required. Raw photo bytes
   * @return photoBytes
   */
  @javax.annotation.Nullable
  public byte[] getPhotoBytes() {
    return photoBytes;
  }

  public void setPhotoBytes(byte[] photoBytes) {
    this.photoBytes = photoBytes;
  }


  public UpdateContactPhotoRequest sources(List<SourcesEnum> sources) {
    this.sources = sources;
    return this;
  }

  public UpdateContactPhotoRequest addSourcesItem(SourcesEnum sourcesItem) {
    if (this.sources == null) {
      this.sources = new ArrayList<>();
    }
    this.sources.add(sourcesItem);
    return this;
  }

  /**
   * Optional. A mask of what source types to return. Defaults to READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.
   * @return sources
   */
  @javax.annotation.Nullable
  public List<SourcesEnum> getSources() {
    return sources;
  }

  public void setSources(List<SourcesEnum> sources) {
    this.sources = sources;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateContactPhotoRequest updateContactPhotoRequest = (UpdateContactPhotoRequest) o;
    return Objects.equals(this.personFields, updateContactPhotoRequest.personFields) &&
        Arrays.equals(this.photoBytes, updateContactPhotoRequest.photoBytes) &&
        Objects.equals(this.sources, updateContactPhotoRequest.sources);
  }

  @Override
  public int hashCode() {
    return Objects.hash(personFields, Arrays.hashCode(photoBytes), sources);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateContactPhotoRequest {\n");
    sb.append("    personFields: ").append(toIndentedString(personFields)).append("\n");
    sb.append("    photoBytes: ").append(toIndentedString(photoBytes)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("personFields");
    openapiFields.add("photoBytes");
    openapiFields.add("sources");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateContactPhotoRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateContactPhotoRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateContactPhotoRequest is not found in the empty JSON string", UpdateContactPhotoRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateContactPhotoRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateContactPhotoRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("personFields") != null && !jsonObj.get("personFields").isJsonNull()) && !jsonObj.get("personFields").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `personFields` to be a primitive type in the JSON string but got `%s`", jsonObj.get("personFields").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sources") != null && !jsonObj.get("sources").isJsonNull() && !jsonObj.get("sources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sources` to be an array in the JSON string but got `%s`", jsonObj.get("sources").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateContactPhotoRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateContactPhotoRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateContactPhotoRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateContactPhotoRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateContactPhotoRequest>() {
           @Override
           public void write(JsonWriter out, UpdateContactPhotoRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateContactPhotoRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateContactPhotoRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateContactPhotoRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateContactPhotoRequest
   */
  public static UpdateContactPhotoRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateContactPhotoRequest.class);
  }

  /**
   * Convert an instance of UpdateContactPhotoRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

