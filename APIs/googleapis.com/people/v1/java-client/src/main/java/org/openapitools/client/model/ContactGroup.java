/*
 * People API
 * Provides access to information about profiles and contacts.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContactGroupMetadata;
import org.openapitools.client.model.GroupClientData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A contact group.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:24.945775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContactGroup {
  public static final String SERIALIZED_NAME_CLIENT_DATA = "clientData";
  @SerializedName(SERIALIZED_NAME_CLIENT_DATA)
  private List<GroupClientData> clientData = new ArrayList<>();

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_FORMATTED_NAME = "formattedName";
  @SerializedName(SERIALIZED_NAME_FORMATTED_NAME)
  private String formattedName;

  /**
   * Output only. The contact group type.
   */
  @JsonAdapter(GroupTypeEnum.Adapter.class)
  public enum GroupTypeEnum {
    GROUP_TYPE_UNSPECIFIED("GROUP_TYPE_UNSPECIFIED"),
    
    USER_CONTACT_GROUP("USER_CONTACT_GROUP"),
    
    SYSTEM_CONTACT_GROUP("SYSTEM_CONTACT_GROUP");

    private String value;

    GroupTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GroupTypeEnum fromValue(String value) {
      for (GroupTypeEnum b : GroupTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GroupTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GroupTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GroupTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GroupTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GroupTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GROUP_TYPE = "groupType";
  @SerializedName(SERIALIZED_NAME_GROUP_TYPE)
  private GroupTypeEnum groupType;

  public static final String SERIALIZED_NAME_MEMBER_COUNT = "memberCount";
  @SerializedName(SERIALIZED_NAME_MEMBER_COUNT)
  private Integer memberCount;

  public static final String SERIALIZED_NAME_MEMBER_RESOURCE_NAMES = "memberResourceNames";
  @SerializedName(SERIALIZED_NAME_MEMBER_RESOURCE_NAMES)
  private List<String> memberResourceNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private ContactGroupMetadata metadata;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RESOURCE_NAME = "resourceName";
  @SerializedName(SERIALIZED_NAME_RESOURCE_NAME)
  private String resourceName;

  public ContactGroup() {
  }

  public ContactGroup(
     String formattedName, 
     GroupTypeEnum groupType, 
     Integer memberCount, 
     List<String> memberResourceNames
  ) {
    this();
    this.formattedName = formattedName;
    this.groupType = groupType;
    this.memberCount = memberCount;
    this.memberResourceNames = memberResourceNames;
  }

  public ContactGroup clientData(List<GroupClientData> clientData) {
    this.clientData = clientData;
    return this;
  }

  public ContactGroup addClientDataItem(GroupClientData clientDataItem) {
    if (this.clientData == null) {
      this.clientData = new ArrayList<>();
    }
    this.clientData.add(clientDataItem);
    return this;
  }

  /**
   * The group&#39;s client data.
   * @return clientData
   */
  @javax.annotation.Nullable
  public List<GroupClientData> getClientData() {
    return clientData;
  }

  public void setClientData(List<GroupClientData> clientData) {
    this.clientData = clientData;
  }


  public ContactGroup etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the resource. Used for web cache validation.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  /**
   * Output only. The name translated and formatted in the viewer&#39;s account locale or the &#x60;Accept-Language&#x60; HTTP header locale for system groups names. Group names set by the owner are the same as name.
   * @return formattedName
   */
  @javax.annotation.Nullable
  public String getFormattedName() {
    return formattedName;
  }



  /**
   * Output only. The contact group type.
   * @return groupType
   */
  @javax.annotation.Nullable
  public GroupTypeEnum getGroupType() {
    return groupType;
  }



  /**
   * Output only. The total number of contacts in the group irrespective of max members in specified in the request.
   * @return memberCount
   */
  @javax.annotation.Nullable
  public Integer getMemberCount() {
    return memberCount;
  }



  /**
   * Output only. The list of contact person resource names that are members of the contact group. The field is only populated for GET requests and will only return as many members as &#x60;maxMembers&#x60; in the get request.
   * @return memberResourceNames
   */
  @javax.annotation.Nullable
  public List<String> getMemberResourceNames() {
    return memberResourceNames;
  }



  public ContactGroup metadata(ContactGroupMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public ContactGroupMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(ContactGroupMetadata metadata) {
    this.metadata = metadata;
  }


  public ContactGroup name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The contact group name set by the group owner or a system provided name for system groups. For [&#x60;contactGroups.create&#x60;](/people/api/rest/v1/contactGroups/create) or [&#x60;contactGroups.update&#x60;](/people/api/rest/v1/contactGroups/update) the name must be unique to the users contact groups. Attempting to create a group with a duplicate name will return a HTTP 409 error.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ContactGroup resourceName(String resourceName) {
    this.resourceName = resourceName;
    return this;
  }

  /**
   * The resource name for the contact group, assigned by the server. An ASCII string, in the form of &#x60;contactGroups/{contact_group_id}&#x60;.
   * @return resourceName
   */
  @javax.annotation.Nullable
  public String getResourceName() {
    return resourceName;
  }

  public void setResourceName(String resourceName) {
    this.resourceName = resourceName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContactGroup contactGroup = (ContactGroup) o;
    return Objects.equals(this.clientData, contactGroup.clientData) &&
        Objects.equals(this.etag, contactGroup.etag) &&
        Objects.equals(this.formattedName, contactGroup.formattedName) &&
        Objects.equals(this.groupType, contactGroup.groupType) &&
        Objects.equals(this.memberCount, contactGroup.memberCount) &&
        Objects.equals(this.memberResourceNames, contactGroup.memberResourceNames) &&
        Objects.equals(this.metadata, contactGroup.metadata) &&
        Objects.equals(this.name, contactGroup.name) &&
        Objects.equals(this.resourceName, contactGroup.resourceName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientData, etag, formattedName, groupType, memberCount, memberResourceNames, metadata, name, resourceName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContactGroup {\n");
    sb.append("    clientData: ").append(toIndentedString(clientData)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    formattedName: ").append(toIndentedString(formattedName)).append("\n");
    sb.append("    groupType: ").append(toIndentedString(groupType)).append("\n");
    sb.append("    memberCount: ").append(toIndentedString(memberCount)).append("\n");
    sb.append("    memberResourceNames: ").append(toIndentedString(memberResourceNames)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    resourceName: ").append(toIndentedString(resourceName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientData");
    openapiFields.add("etag");
    openapiFields.add("formattedName");
    openapiFields.add("groupType");
    openapiFields.add("memberCount");
    openapiFields.add("memberResourceNames");
    openapiFields.add("metadata");
    openapiFields.add("name");
    openapiFields.add("resourceName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContactGroup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContactGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContactGroup is not found in the empty JSON string", ContactGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContactGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContactGroup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("clientData") != null && !jsonObj.get("clientData").isJsonNull()) {
        JsonArray jsonArrayclientData = jsonObj.getAsJsonArray("clientData");
        if (jsonArrayclientData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("clientData").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `clientData` to be an array in the JSON string but got `%s`", jsonObj.get("clientData").toString()));
          }

          // validate the optional field `clientData` (array)
          for (int i = 0; i < jsonArrayclientData.size(); i++) {
            GroupClientData.validateJsonElement(jsonArrayclientData.get(i));
          };
        }
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("formattedName") != null && !jsonObj.get("formattedName").isJsonNull()) && !jsonObj.get("formattedName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formattedName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formattedName").toString()));
      }
      if ((jsonObj.get("groupType") != null && !jsonObj.get("groupType").isJsonNull()) && !jsonObj.get("groupType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupType").toString()));
      }
      // validate the optional field `groupType`
      if (jsonObj.get("groupType") != null && !jsonObj.get("groupType").isJsonNull()) {
        GroupTypeEnum.validateJsonElement(jsonObj.get("groupType"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("memberResourceNames") != null && !jsonObj.get("memberResourceNames").isJsonNull() && !jsonObj.get("memberResourceNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `memberResourceNames` to be an array in the JSON string but got `%s`", jsonObj.get("memberResourceNames").toString()));
      }
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        ContactGroupMetadata.validateJsonElement(jsonObj.get("metadata"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("resourceName") != null && !jsonObj.get("resourceName").isJsonNull()) && !jsonObj.get("resourceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContactGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContactGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContactGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContactGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<ContactGroup>() {
           @Override
           public void write(JsonWriter out, ContactGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContactGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContactGroup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContactGroup
   * @throws IOException if the JSON string is invalid with respect to ContactGroup
   */
  public static ContactGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContactGroup.class);
  }

  /**
   * Convert an instance of ContactGroup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

