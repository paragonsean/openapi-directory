/*
 * People API
 * Provides access to information about profiles and contacts.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Person;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A request to update a batch of contacts.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:24.945775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BatchUpdateContactsRequest {
  public static final String SERIALIZED_NAME_CONTACTS = "contacts";
  @SerializedName(SERIALIZED_NAME_CONTACTS)
  private Map<String, Person> contacts = new HashMap<>();

  public static final String SERIALIZED_NAME_READ_MASK = "readMask";
  @SerializedName(SERIALIZED_NAME_READ_MASK)
  private String readMask;

  /**
   * Gets or Sets sources
   */
  @JsonAdapter(SourcesEnum.Adapter.class)
  public enum SourcesEnum {
    UNSPECIFIED("READ_SOURCE_TYPE_UNSPECIFIED"),
    
    PROFILE("READ_SOURCE_TYPE_PROFILE"),
    
    CONTACT("READ_SOURCE_TYPE_CONTACT"),
    
    DOMAIN_CONTACT("READ_SOURCE_TYPE_DOMAIN_CONTACT");

    private String value;

    SourcesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourcesEnum fromValue(String value) {
      for (SourcesEnum b : SourcesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SourcesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourcesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourcesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SourcesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SourcesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOURCES = "sources";
  @SerializedName(SERIALIZED_NAME_SOURCES)
  private List<SourcesEnum> sources = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPDATE_MASK = "updateMask";
  @SerializedName(SERIALIZED_NAME_UPDATE_MASK)
  private String updateMask;

  public BatchUpdateContactsRequest() {
  }

  public BatchUpdateContactsRequest contacts(Map<String, Person> contacts) {
    this.contacts = contacts;
    return this;
  }

  public BatchUpdateContactsRequest putContactsItem(String key, Person contactsItem) {
    if (this.contacts == null) {
      this.contacts = new HashMap<>();
    }
    this.contacts.put(key, contactsItem);
    return this;
  }

  /**
   * Required. A map of resource names to the person data to be updated. Allows up to 200 contacts in a single request.
   * @return contacts
   */
  @javax.annotation.Nullable
  public Map<String, Person> getContacts() {
    return contacts;
  }

  public void setContacts(Map<String, Person> contacts) {
    this.contacts = contacts;
  }


  public BatchUpdateContactsRequest readMask(String readMask) {
    this.readMask = readMask;
    return this;
  }

  /**
   * Required. A field mask to restrict which fields on each person are returned. Multiple fields can be specified by separating them with commas. If read mask is left empty, the post-mutate-get is skipped and no data will be returned in the response. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined
   * @return readMask
   */
  @javax.annotation.Nullable
  public String getReadMask() {
    return readMask;
  }

  public void setReadMask(String readMask) {
    this.readMask = readMask;
  }


  public BatchUpdateContactsRequest sources(List<SourcesEnum> sources) {
    this.sources = sources;
    return this;
  }

  public BatchUpdateContactsRequest addSourcesItem(SourcesEnum sourcesItem) {
    if (this.sources == null) {
      this.sources = new ArrayList<>();
    }
    this.sources.add(sourcesItem);
    return this;
  }

  /**
   * Optional. A mask of what source types to return. Defaults to READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.
   * @return sources
   */
  @javax.annotation.Nullable
  public List<SourcesEnum> getSources() {
    return sources;
  }

  public void setSources(List<SourcesEnum> sources) {
    this.sources = sources;
  }


  public BatchUpdateContactsRequest updateMask(String updateMask) {
    this.updateMask = updateMask;
    return this;
  }

  /**
   * Required. A field mask to restrict which fields on the person are updated. Multiple fields can be specified by separating them with commas. All specified fields will be replaced, or cleared if left empty for each person. Valid values are: * addresses * biographies * birthdays * calendarUrls * clientData * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * relations * sipAddresses * urls * userDefined
   * @return updateMask
   */
  @javax.annotation.Nullable
  public String getUpdateMask() {
    return updateMask;
  }

  public void setUpdateMask(String updateMask) {
    this.updateMask = updateMask;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchUpdateContactsRequest batchUpdateContactsRequest = (BatchUpdateContactsRequest) o;
    return Objects.equals(this.contacts, batchUpdateContactsRequest.contacts) &&
        Objects.equals(this.readMask, batchUpdateContactsRequest.readMask) &&
        Objects.equals(this.sources, batchUpdateContactsRequest.sources) &&
        Objects.equals(this.updateMask, batchUpdateContactsRequest.updateMask);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contacts, readMask, sources, updateMask);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchUpdateContactsRequest {\n");
    sb.append("    contacts: ").append(toIndentedString(contacts)).append("\n");
    sb.append("    readMask: ").append(toIndentedString(readMask)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    updateMask: ").append(toIndentedString(updateMask)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contacts");
    openapiFields.add("readMask");
    openapiFields.add("sources");
    openapiFields.add("updateMask");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchUpdateContactsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchUpdateContactsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchUpdateContactsRequest is not found in the empty JSON string", BatchUpdateContactsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchUpdateContactsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchUpdateContactsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("readMask") != null && !jsonObj.get("readMask").isJsonNull()) && !jsonObj.get("readMask").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `readMask` to be a primitive type in the JSON string but got `%s`", jsonObj.get("readMask").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sources") != null && !jsonObj.get("sources").isJsonNull() && !jsonObj.get("sources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sources` to be an array in the JSON string but got `%s`", jsonObj.get("sources").toString()));
      }
      if ((jsonObj.get("updateMask") != null && !jsonObj.get("updateMask").isJsonNull()) && !jsonObj.get("updateMask").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateMask` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateMask").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchUpdateContactsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchUpdateContactsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchUpdateContactsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchUpdateContactsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchUpdateContactsRequest>() {
           @Override
           public void write(JsonWriter out, BatchUpdateContactsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchUpdateContactsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchUpdateContactsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchUpdateContactsRequest
   * @throws IOException if the JSON string is invalid with respect to BatchUpdateContactsRequest
   */
  public static BatchUpdateContactsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchUpdateContactsRequest.class);
  }

  /**
   * Convert an instance of BatchUpdateContactsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

