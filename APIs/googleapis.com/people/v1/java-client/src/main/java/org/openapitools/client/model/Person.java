/*
 * People API
 * Provides access to information about profiles and contacts.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.AgeRangeType;
import org.openapitools.client.model.Biography;
import org.openapitools.client.model.Birthday;
import org.openapitools.client.model.BraggingRights;
import org.openapitools.client.model.CalendarUrl;
import org.openapitools.client.model.ClientData;
import org.openapitools.client.model.CoverPhoto;
import org.openapitools.client.model.EmailAddress;
import org.openapitools.client.model.Event;
import org.openapitools.client.model.ExternalId;
import org.openapitools.client.model.FileAs;
import org.openapitools.client.model.Gender;
import org.openapitools.client.model.ImClient;
import org.openapitools.client.model.Interest;
import org.openapitools.client.model.Locale;
import org.openapitools.client.model.Location;
import org.openapitools.client.model.Membership;
import org.openapitools.client.model.MiscKeyword;
import org.openapitools.client.model.Name;
import org.openapitools.client.model.Nickname;
import org.openapitools.client.model.Occupation;
import org.openapitools.client.model.Organization;
import org.openapitools.client.model.PersonMetadata;
import org.openapitools.client.model.PhoneNumber;
import org.openapitools.client.model.Photo;
import org.openapitools.client.model.Relation;
import org.openapitools.client.model.RelationshipInterest;
import org.openapitools.client.model.RelationshipStatus;
import org.openapitools.client.model.Residence;
import org.openapitools.client.model.SipAddress;
import org.openapitools.client.model.Skill;
import org.openapitools.client.model.Tagline;
import org.openapitools.client.model.Url;
import org.openapitools.client.model.UserDefined;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about a person merged from various data sources such as the authenticated user&#39;s contacts and profile data. Most fields can have multiple items. The items in a field have no guaranteed order, but each non-empty field is guaranteed to have exactly one field with &#x60;metadata.primary&#x60; set to true.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:24.945775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Person {
  public static final String SERIALIZED_NAME_ADDRESSES = "addresses";
  @SerializedName(SERIALIZED_NAME_ADDRESSES)
  private List<Address> addresses = new ArrayList<>();

  /**
   * Output only. **DEPRECATED** (Please use &#x60;person.ageRanges&#x60; instead) The person&#39;s age range.
   */
  @JsonAdapter(AgeRangeEnum.Adapter.class)
  public enum AgeRangeEnum {
    AGE_RANGE_UNSPECIFIED("AGE_RANGE_UNSPECIFIED"),
    
    LESS_THAN_EIGHTEEN("LESS_THAN_EIGHTEEN"),
    
    EIGHTEEN_TO_TWENTY("EIGHTEEN_TO_TWENTY"),
    
    TWENTY_ONE_OR_OLDER("TWENTY_ONE_OR_OLDER");

    private String value;

    AgeRangeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AgeRangeEnum fromValue(String value) {
      for (AgeRangeEnum b : AgeRangeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AgeRangeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AgeRangeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AgeRangeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AgeRangeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AgeRangeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AGE_RANGE = "ageRange";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_AGE_RANGE)
  private AgeRangeEnum ageRange;

  public static final String SERIALIZED_NAME_AGE_RANGES = "ageRanges";
  @SerializedName(SERIALIZED_NAME_AGE_RANGES)
  private List<AgeRangeType> ageRanges = new ArrayList<>();

  public static final String SERIALIZED_NAME_BIOGRAPHIES = "biographies";
  @SerializedName(SERIALIZED_NAME_BIOGRAPHIES)
  private List<Biography> biographies = new ArrayList<>();

  public static final String SERIALIZED_NAME_BIRTHDAYS = "birthdays";
  @SerializedName(SERIALIZED_NAME_BIRTHDAYS)
  private List<Birthday> birthdays = new ArrayList<>();

  public static final String SERIALIZED_NAME_BRAGGING_RIGHTS = "braggingRights";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_BRAGGING_RIGHTS)
  private List<BraggingRights> braggingRights = new ArrayList<>();

  public static final String SERIALIZED_NAME_CALENDAR_URLS = "calendarUrls";
  @SerializedName(SERIALIZED_NAME_CALENDAR_URLS)
  private List<CalendarUrl> calendarUrls = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLIENT_DATA = "clientData";
  @SerializedName(SERIALIZED_NAME_CLIENT_DATA)
  private List<ClientData> clientData = new ArrayList<>();

  public static final String SERIALIZED_NAME_COVER_PHOTOS = "coverPhotos";
  @SerializedName(SERIALIZED_NAME_COVER_PHOTOS)
  private List<CoverPhoto> coverPhotos = new ArrayList<>();

  public static final String SERIALIZED_NAME_EMAIL_ADDRESSES = "emailAddresses";
  @SerializedName(SERIALIZED_NAME_EMAIL_ADDRESSES)
  private List<EmailAddress> emailAddresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_EVENTS = "events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  private List<Event> events = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXTERNAL_IDS = "externalIds";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_IDS)
  private List<ExternalId> externalIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILE_ASES = "fileAses";
  @SerializedName(SERIALIZED_NAME_FILE_ASES)
  private List<FileAs> fileAses = new ArrayList<>();

  public static final String SERIALIZED_NAME_GENDERS = "genders";
  @SerializedName(SERIALIZED_NAME_GENDERS)
  private List<Gender> genders = new ArrayList<>();

  public static final String SERIALIZED_NAME_IM_CLIENTS = "imClients";
  @SerializedName(SERIALIZED_NAME_IM_CLIENTS)
  private List<ImClient> imClients = new ArrayList<>();

  public static final String SERIALIZED_NAME_INTERESTS = "interests";
  @SerializedName(SERIALIZED_NAME_INTERESTS)
  private List<Interest> interests = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCALES = "locales";
  @SerializedName(SERIALIZED_NAME_LOCALES)
  private List<Locale> locales = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCATIONS = "locations";
  @SerializedName(SERIALIZED_NAME_LOCATIONS)
  private List<Location> locations = new ArrayList<>();

  public static final String SERIALIZED_NAME_MEMBERSHIPS = "memberships";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIPS)
  private List<Membership> memberships = new ArrayList<>();

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private PersonMetadata metadata;

  public static final String SERIALIZED_NAME_MISC_KEYWORDS = "miscKeywords";
  @SerializedName(SERIALIZED_NAME_MISC_KEYWORDS)
  private List<MiscKeyword> miscKeywords = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAMES = "names";
  @SerializedName(SERIALIZED_NAME_NAMES)
  private List<Name> names = new ArrayList<>();

  public static final String SERIALIZED_NAME_NICKNAMES = "nicknames";
  @SerializedName(SERIALIZED_NAME_NICKNAMES)
  private List<Nickname> nicknames = new ArrayList<>();

  public static final String SERIALIZED_NAME_OCCUPATIONS = "occupations";
  @SerializedName(SERIALIZED_NAME_OCCUPATIONS)
  private List<Occupation> occupations = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORGANIZATIONS = "organizations";
  @SerializedName(SERIALIZED_NAME_ORGANIZATIONS)
  private List<Organization> organizations = new ArrayList<>();

  public static final String SERIALIZED_NAME_PHONE_NUMBERS = "phoneNumbers";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBERS)
  private List<PhoneNumber> phoneNumbers = new ArrayList<>();

  public static final String SERIALIZED_NAME_PHOTOS = "photos";
  @SerializedName(SERIALIZED_NAME_PHOTOS)
  private List<Photo> photos = new ArrayList<>();

  public static final String SERIALIZED_NAME_RELATIONS = "relations";
  @SerializedName(SERIALIZED_NAME_RELATIONS)
  private List<Relation> relations = new ArrayList<>();

  public static final String SERIALIZED_NAME_RELATIONSHIP_INTERESTS = "relationshipInterests";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_RELATIONSHIP_INTERESTS)
  private List<RelationshipInterest> relationshipInterests = new ArrayList<>();

  public static final String SERIALIZED_NAME_RELATIONSHIP_STATUSES = "relationshipStatuses";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_RELATIONSHIP_STATUSES)
  private List<RelationshipStatus> relationshipStatuses = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESIDENCES = "residences";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_RESIDENCES)
  private List<Residence> residences = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESOURCE_NAME = "resourceName";
  @SerializedName(SERIALIZED_NAME_RESOURCE_NAME)
  private String resourceName;

  public static final String SERIALIZED_NAME_SIP_ADDRESSES = "sipAddresses";
  @SerializedName(SERIALIZED_NAME_SIP_ADDRESSES)
  private List<SipAddress> sipAddresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_SKILLS = "skills";
  @SerializedName(SERIALIZED_NAME_SKILLS)
  private List<Skill> skills = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAGLINES = "taglines";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_TAGLINES)
  private List<Tagline> taglines = new ArrayList<>();

  public static final String SERIALIZED_NAME_URLS = "urls";
  @SerializedName(SERIALIZED_NAME_URLS)
  private List<Url> urls = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER_DEFINED = "userDefined";
  @SerializedName(SERIALIZED_NAME_USER_DEFINED)
  private List<UserDefined> userDefined = new ArrayList<>();

  public Person() {
  }

  public Person(
     AgeRangeEnum ageRange, 
     List<AgeRangeType> ageRanges, 
     List<CoverPhoto> coverPhotos, 
     List<Photo> photos, 
     List<RelationshipInterest> relationshipInterests, 
     List<RelationshipStatus> relationshipStatuses, 
     List<Tagline> taglines
  ) {
    this();
    this.ageRange = ageRange;
    this.ageRanges = ageRanges;
    this.coverPhotos = coverPhotos;
    this.photos = photos;
    this.relationshipInterests = relationshipInterests;
    this.relationshipStatuses = relationshipStatuses;
    this.taglines = taglines;
  }

  public Person addresses(List<Address> addresses) {
    this.addresses = addresses;
    return this;
  }

  public Person addAddressesItem(Address addressesItem) {
    if (this.addresses == null) {
      this.addresses = new ArrayList<>();
    }
    this.addresses.add(addressesItem);
    return this;
  }

  /**
   * The person&#39;s street addresses.
   * @return addresses
   */
  @javax.annotation.Nullable
  public List<Address> getAddresses() {
    return addresses;
  }

  public void setAddresses(List<Address> addresses) {
    this.addresses = addresses;
  }


  /**
   * Output only. **DEPRECATED** (Please use &#x60;person.ageRanges&#x60; instead) The person&#39;s age range.
   * @return ageRange
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public AgeRangeEnum getAgeRange() {
    return ageRange;
  }



  /**
   * Output only. The person&#39;s age ranges.
   * @return ageRanges
   */
  @javax.annotation.Nullable
  public List<AgeRangeType> getAgeRanges() {
    return ageRanges;
  }



  public Person biographies(List<Biography> biographies) {
    this.biographies = biographies;
    return this;
  }

  public Person addBiographiesItem(Biography biographiesItem) {
    if (this.biographies == null) {
      this.biographies = new ArrayList<>();
    }
    this.biographies.add(biographiesItem);
    return this;
  }

  /**
   * The person&#39;s biographies. This field is a singleton for contact sources.
   * @return biographies
   */
  @javax.annotation.Nullable
  public List<Biography> getBiographies() {
    return biographies;
  }

  public void setBiographies(List<Biography> biographies) {
    this.biographies = biographies;
  }


  public Person birthdays(List<Birthday> birthdays) {
    this.birthdays = birthdays;
    return this;
  }

  public Person addBirthdaysItem(Birthday birthdaysItem) {
    if (this.birthdays == null) {
      this.birthdays = new ArrayList<>();
    }
    this.birthdays.add(birthdaysItem);
    return this;
  }

  /**
   * The person&#39;s birthdays. This field is a singleton for contact sources.
   * @return birthdays
   */
  @javax.annotation.Nullable
  public List<Birthday> getBirthdays() {
    return birthdays;
  }

  public void setBirthdays(List<Birthday> birthdays) {
    this.birthdays = birthdays;
  }


  @Deprecated
  public Person braggingRights(List<BraggingRights> braggingRights) {
    this.braggingRights = braggingRights;
    return this;
  }

  public Person addBraggingRightsItem(BraggingRights braggingRightsItem) {
    if (this.braggingRights == null) {
      this.braggingRights = new ArrayList<>();
    }
    this.braggingRights.add(braggingRightsItem);
    return this;
  }

  /**
   * **DEPRECATED**: No data will be returned The person&#39;s bragging rights.
   * @return braggingRights
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<BraggingRights> getBraggingRights() {
    return braggingRights;
  }

  @Deprecated
  public void setBraggingRights(List<BraggingRights> braggingRights) {
    this.braggingRights = braggingRights;
  }


  public Person calendarUrls(List<CalendarUrl> calendarUrls) {
    this.calendarUrls = calendarUrls;
    return this;
  }

  public Person addCalendarUrlsItem(CalendarUrl calendarUrlsItem) {
    if (this.calendarUrls == null) {
      this.calendarUrls = new ArrayList<>();
    }
    this.calendarUrls.add(calendarUrlsItem);
    return this;
  }

  /**
   * The person&#39;s calendar URLs.
   * @return calendarUrls
   */
  @javax.annotation.Nullable
  public List<CalendarUrl> getCalendarUrls() {
    return calendarUrls;
  }

  public void setCalendarUrls(List<CalendarUrl> calendarUrls) {
    this.calendarUrls = calendarUrls;
  }


  public Person clientData(List<ClientData> clientData) {
    this.clientData = clientData;
    return this;
  }

  public Person addClientDataItem(ClientData clientDataItem) {
    if (this.clientData == null) {
      this.clientData = new ArrayList<>();
    }
    this.clientData.add(clientDataItem);
    return this;
  }

  /**
   * The person&#39;s client data.
   * @return clientData
   */
  @javax.annotation.Nullable
  public List<ClientData> getClientData() {
    return clientData;
  }

  public void setClientData(List<ClientData> clientData) {
    this.clientData = clientData;
  }


  /**
   * Output only. The person&#39;s cover photos.
   * @return coverPhotos
   */
  @javax.annotation.Nullable
  public List<CoverPhoto> getCoverPhotos() {
    return coverPhotos;
  }



  public Person emailAddresses(List<EmailAddress> emailAddresses) {
    this.emailAddresses = emailAddresses;
    return this;
  }

  public Person addEmailAddressesItem(EmailAddress emailAddressesItem) {
    if (this.emailAddresses == null) {
      this.emailAddresses = new ArrayList<>();
    }
    this.emailAddresses.add(emailAddressesItem);
    return this;
  }

  /**
   * The person&#39;s email addresses. For &#x60;people.connections.list&#x60; and &#x60;otherContacts.list&#x60; the number of email addresses is limited to 100. If a Person has more email addresses the entire set can be obtained by calling GetPeople.
   * @return emailAddresses
   */
  @javax.annotation.Nullable
  public List<EmailAddress> getEmailAddresses() {
    return emailAddresses;
  }

  public void setEmailAddresses(List<EmailAddress> emailAddresses) {
    this.emailAddresses = emailAddresses;
  }


  public Person etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the resource. Used for web cache validation.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public Person events(List<Event> events) {
    this.events = events;
    return this;
  }

  public Person addEventsItem(Event eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<>();
    }
    this.events.add(eventsItem);
    return this;
  }

  /**
   * The person&#39;s events.
   * @return events
   */
  @javax.annotation.Nullable
  public List<Event> getEvents() {
    return events;
  }

  public void setEvents(List<Event> events) {
    this.events = events;
  }


  public Person externalIds(List<ExternalId> externalIds) {
    this.externalIds = externalIds;
    return this;
  }

  public Person addExternalIdsItem(ExternalId externalIdsItem) {
    if (this.externalIds == null) {
      this.externalIds = new ArrayList<>();
    }
    this.externalIds.add(externalIdsItem);
    return this;
  }

  /**
   * The person&#39;s external IDs.
   * @return externalIds
   */
  @javax.annotation.Nullable
  public List<ExternalId> getExternalIds() {
    return externalIds;
  }

  public void setExternalIds(List<ExternalId> externalIds) {
    this.externalIds = externalIds;
  }


  public Person fileAses(List<FileAs> fileAses) {
    this.fileAses = fileAses;
    return this;
  }

  public Person addFileAsesItem(FileAs fileAsesItem) {
    if (this.fileAses == null) {
      this.fileAses = new ArrayList<>();
    }
    this.fileAses.add(fileAsesItem);
    return this;
  }

  /**
   * The person&#39;s file-ases.
   * @return fileAses
   */
  @javax.annotation.Nullable
  public List<FileAs> getFileAses() {
    return fileAses;
  }

  public void setFileAses(List<FileAs> fileAses) {
    this.fileAses = fileAses;
  }


  public Person genders(List<Gender> genders) {
    this.genders = genders;
    return this;
  }

  public Person addGendersItem(Gender gendersItem) {
    if (this.genders == null) {
      this.genders = new ArrayList<>();
    }
    this.genders.add(gendersItem);
    return this;
  }

  /**
   * The person&#39;s genders. This field is a singleton for contact sources.
   * @return genders
   */
  @javax.annotation.Nullable
  public List<Gender> getGenders() {
    return genders;
  }

  public void setGenders(List<Gender> genders) {
    this.genders = genders;
  }


  public Person imClients(List<ImClient> imClients) {
    this.imClients = imClients;
    return this;
  }

  public Person addImClientsItem(ImClient imClientsItem) {
    if (this.imClients == null) {
      this.imClients = new ArrayList<>();
    }
    this.imClients.add(imClientsItem);
    return this;
  }

  /**
   * The person&#39;s instant messaging clients.
   * @return imClients
   */
  @javax.annotation.Nullable
  public List<ImClient> getImClients() {
    return imClients;
  }

  public void setImClients(List<ImClient> imClients) {
    this.imClients = imClients;
  }


  public Person interests(List<Interest> interests) {
    this.interests = interests;
    return this;
  }

  public Person addInterestsItem(Interest interestsItem) {
    if (this.interests == null) {
      this.interests = new ArrayList<>();
    }
    this.interests.add(interestsItem);
    return this;
  }

  /**
   * The person&#39;s interests.
   * @return interests
   */
  @javax.annotation.Nullable
  public List<Interest> getInterests() {
    return interests;
  }

  public void setInterests(List<Interest> interests) {
    this.interests = interests;
  }


  public Person locales(List<Locale> locales) {
    this.locales = locales;
    return this;
  }

  public Person addLocalesItem(Locale localesItem) {
    if (this.locales == null) {
      this.locales = new ArrayList<>();
    }
    this.locales.add(localesItem);
    return this;
  }

  /**
   * The person&#39;s locale preferences.
   * @return locales
   */
  @javax.annotation.Nullable
  public List<Locale> getLocales() {
    return locales;
  }

  public void setLocales(List<Locale> locales) {
    this.locales = locales;
  }


  public Person locations(List<Location> locations) {
    this.locations = locations;
    return this;
  }

  public Person addLocationsItem(Location locationsItem) {
    if (this.locations == null) {
      this.locations = new ArrayList<>();
    }
    this.locations.add(locationsItem);
    return this;
  }

  /**
   * The person&#39;s locations.
   * @return locations
   */
  @javax.annotation.Nullable
  public List<Location> getLocations() {
    return locations;
  }

  public void setLocations(List<Location> locations) {
    this.locations = locations;
  }


  public Person memberships(List<Membership> memberships) {
    this.memberships = memberships;
    return this;
  }

  public Person addMembershipsItem(Membership membershipsItem) {
    if (this.memberships == null) {
      this.memberships = new ArrayList<>();
    }
    this.memberships.add(membershipsItem);
    return this;
  }

  /**
   * The person&#39;s group memberships.
   * @return memberships
   */
  @javax.annotation.Nullable
  public List<Membership> getMemberships() {
    return memberships;
  }

  public void setMemberships(List<Membership> memberships) {
    this.memberships = memberships;
  }


  public Person metadata(PersonMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public PersonMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(PersonMetadata metadata) {
    this.metadata = metadata;
  }


  public Person miscKeywords(List<MiscKeyword> miscKeywords) {
    this.miscKeywords = miscKeywords;
    return this;
  }

  public Person addMiscKeywordsItem(MiscKeyword miscKeywordsItem) {
    if (this.miscKeywords == null) {
      this.miscKeywords = new ArrayList<>();
    }
    this.miscKeywords.add(miscKeywordsItem);
    return this;
  }

  /**
   * The person&#39;s miscellaneous keywords.
   * @return miscKeywords
   */
  @javax.annotation.Nullable
  public List<MiscKeyword> getMiscKeywords() {
    return miscKeywords;
  }

  public void setMiscKeywords(List<MiscKeyword> miscKeywords) {
    this.miscKeywords = miscKeywords;
  }


  public Person names(List<Name> names) {
    this.names = names;
    return this;
  }

  public Person addNamesItem(Name namesItem) {
    if (this.names == null) {
      this.names = new ArrayList<>();
    }
    this.names.add(namesItem);
    return this;
  }

  /**
   * The person&#39;s names. This field is a singleton for contact sources.
   * @return names
   */
  @javax.annotation.Nullable
  public List<Name> getNames() {
    return names;
  }

  public void setNames(List<Name> names) {
    this.names = names;
  }


  public Person nicknames(List<Nickname> nicknames) {
    this.nicknames = nicknames;
    return this;
  }

  public Person addNicknamesItem(Nickname nicknamesItem) {
    if (this.nicknames == null) {
      this.nicknames = new ArrayList<>();
    }
    this.nicknames.add(nicknamesItem);
    return this;
  }

  /**
   * The person&#39;s nicknames.
   * @return nicknames
   */
  @javax.annotation.Nullable
  public List<Nickname> getNicknames() {
    return nicknames;
  }

  public void setNicknames(List<Nickname> nicknames) {
    this.nicknames = nicknames;
  }


  public Person occupations(List<Occupation> occupations) {
    this.occupations = occupations;
    return this;
  }

  public Person addOccupationsItem(Occupation occupationsItem) {
    if (this.occupations == null) {
      this.occupations = new ArrayList<>();
    }
    this.occupations.add(occupationsItem);
    return this;
  }

  /**
   * The person&#39;s occupations.
   * @return occupations
   */
  @javax.annotation.Nullable
  public List<Occupation> getOccupations() {
    return occupations;
  }

  public void setOccupations(List<Occupation> occupations) {
    this.occupations = occupations;
  }


  public Person organizations(List<Organization> organizations) {
    this.organizations = organizations;
    return this;
  }

  public Person addOrganizationsItem(Organization organizationsItem) {
    if (this.organizations == null) {
      this.organizations = new ArrayList<>();
    }
    this.organizations.add(organizationsItem);
    return this;
  }

  /**
   * The person&#39;s past or current organizations.
   * @return organizations
   */
  @javax.annotation.Nullable
  public List<Organization> getOrganizations() {
    return organizations;
  }

  public void setOrganizations(List<Organization> organizations) {
    this.organizations = organizations;
  }


  public Person phoneNumbers(List<PhoneNumber> phoneNumbers) {
    this.phoneNumbers = phoneNumbers;
    return this;
  }

  public Person addPhoneNumbersItem(PhoneNumber phoneNumbersItem) {
    if (this.phoneNumbers == null) {
      this.phoneNumbers = new ArrayList<>();
    }
    this.phoneNumbers.add(phoneNumbersItem);
    return this;
  }

  /**
   * The person&#39;s phone numbers. For &#x60;people.connections.list&#x60; and &#x60;otherContacts.list&#x60; the number of phone numbers is limited to 100. If a Person has more phone numbers the entire set can be obtained by calling GetPeople.
   * @return phoneNumbers
   */
  @javax.annotation.Nullable
  public List<PhoneNumber> getPhoneNumbers() {
    return phoneNumbers;
  }

  public void setPhoneNumbers(List<PhoneNumber> phoneNumbers) {
    this.phoneNumbers = phoneNumbers;
  }


  /**
   * Output only. The person&#39;s photos.
   * @return photos
   */
  @javax.annotation.Nullable
  public List<Photo> getPhotos() {
    return photos;
  }



  public Person relations(List<Relation> relations) {
    this.relations = relations;
    return this;
  }

  public Person addRelationsItem(Relation relationsItem) {
    if (this.relations == null) {
      this.relations = new ArrayList<>();
    }
    this.relations.add(relationsItem);
    return this;
  }

  /**
   * The person&#39;s relations.
   * @return relations
   */
  @javax.annotation.Nullable
  public List<Relation> getRelations() {
    return relations;
  }

  public void setRelations(List<Relation> relations) {
    this.relations = relations;
  }


  /**
   * Output only. **DEPRECATED**: No data will be returned The person&#39;s relationship interests.
   * @return relationshipInterests
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<RelationshipInterest> getRelationshipInterests() {
    return relationshipInterests;
  }



  /**
   * Output only. **DEPRECATED**: No data will be returned The person&#39;s relationship statuses.
   * @return relationshipStatuses
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<RelationshipStatus> getRelationshipStatuses() {
    return relationshipStatuses;
  }



  @Deprecated
  public Person residences(List<Residence> residences) {
    this.residences = residences;
    return this;
  }

  public Person addResidencesItem(Residence residencesItem) {
    if (this.residences == null) {
      this.residences = new ArrayList<>();
    }
    this.residences.add(residencesItem);
    return this;
  }

  /**
   * **DEPRECATED**: (Please use &#x60;person.locations&#x60; instead) The person&#39;s residences.
   * @return residences
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<Residence> getResidences() {
    return residences;
  }

  @Deprecated
  public void setResidences(List<Residence> residences) {
    this.residences = residences;
  }


  public Person resourceName(String resourceName) {
    this.resourceName = resourceName;
    return this;
  }

  /**
   * The resource name for the person, assigned by the server. An ASCII string in the form of &#x60;people/{person_id}&#x60;.
   * @return resourceName
   */
  @javax.annotation.Nullable
  public String getResourceName() {
    return resourceName;
  }

  public void setResourceName(String resourceName) {
    this.resourceName = resourceName;
  }


  public Person sipAddresses(List<SipAddress> sipAddresses) {
    this.sipAddresses = sipAddresses;
    return this;
  }

  public Person addSipAddressesItem(SipAddress sipAddressesItem) {
    if (this.sipAddresses == null) {
      this.sipAddresses = new ArrayList<>();
    }
    this.sipAddresses.add(sipAddressesItem);
    return this;
  }

  /**
   * The person&#39;s SIP addresses.
   * @return sipAddresses
   */
  @javax.annotation.Nullable
  public List<SipAddress> getSipAddresses() {
    return sipAddresses;
  }

  public void setSipAddresses(List<SipAddress> sipAddresses) {
    this.sipAddresses = sipAddresses;
  }


  public Person skills(List<Skill> skills) {
    this.skills = skills;
    return this;
  }

  public Person addSkillsItem(Skill skillsItem) {
    if (this.skills == null) {
      this.skills = new ArrayList<>();
    }
    this.skills.add(skillsItem);
    return this;
  }

  /**
   * The person&#39;s skills.
   * @return skills
   */
  @javax.annotation.Nullable
  public List<Skill> getSkills() {
    return skills;
  }

  public void setSkills(List<Skill> skills) {
    this.skills = skills;
  }


  /**
   * Output only. **DEPRECATED**: No data will be returned The person&#39;s taglines.
   * @return taglines
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<Tagline> getTaglines() {
    return taglines;
  }



  public Person urls(List<Url> urls) {
    this.urls = urls;
    return this;
  }

  public Person addUrlsItem(Url urlsItem) {
    if (this.urls == null) {
      this.urls = new ArrayList<>();
    }
    this.urls.add(urlsItem);
    return this;
  }

  /**
   * The person&#39;s associated URLs.
   * @return urls
   */
  @javax.annotation.Nullable
  public List<Url> getUrls() {
    return urls;
  }

  public void setUrls(List<Url> urls) {
    this.urls = urls;
  }


  public Person userDefined(List<UserDefined> userDefined) {
    this.userDefined = userDefined;
    return this;
  }

  public Person addUserDefinedItem(UserDefined userDefinedItem) {
    if (this.userDefined == null) {
      this.userDefined = new ArrayList<>();
    }
    this.userDefined.add(userDefinedItem);
    return this;
  }

  /**
   * The person&#39;s user defined data.
   * @return userDefined
   */
  @javax.annotation.Nullable
  public List<UserDefined> getUserDefined() {
    return userDefined;
  }

  public void setUserDefined(List<UserDefined> userDefined) {
    this.userDefined = userDefined;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Person person = (Person) o;
    return Objects.equals(this.addresses, person.addresses) &&
        Objects.equals(this.ageRange, person.ageRange) &&
        Objects.equals(this.ageRanges, person.ageRanges) &&
        Objects.equals(this.biographies, person.biographies) &&
        Objects.equals(this.birthdays, person.birthdays) &&
        Objects.equals(this.braggingRights, person.braggingRights) &&
        Objects.equals(this.calendarUrls, person.calendarUrls) &&
        Objects.equals(this.clientData, person.clientData) &&
        Objects.equals(this.coverPhotos, person.coverPhotos) &&
        Objects.equals(this.emailAddresses, person.emailAddresses) &&
        Objects.equals(this.etag, person.etag) &&
        Objects.equals(this.events, person.events) &&
        Objects.equals(this.externalIds, person.externalIds) &&
        Objects.equals(this.fileAses, person.fileAses) &&
        Objects.equals(this.genders, person.genders) &&
        Objects.equals(this.imClients, person.imClients) &&
        Objects.equals(this.interests, person.interests) &&
        Objects.equals(this.locales, person.locales) &&
        Objects.equals(this.locations, person.locations) &&
        Objects.equals(this.memberships, person.memberships) &&
        Objects.equals(this.metadata, person.metadata) &&
        Objects.equals(this.miscKeywords, person.miscKeywords) &&
        Objects.equals(this.names, person.names) &&
        Objects.equals(this.nicknames, person.nicknames) &&
        Objects.equals(this.occupations, person.occupations) &&
        Objects.equals(this.organizations, person.organizations) &&
        Objects.equals(this.phoneNumbers, person.phoneNumbers) &&
        Objects.equals(this.photos, person.photos) &&
        Objects.equals(this.relations, person.relations) &&
        Objects.equals(this.relationshipInterests, person.relationshipInterests) &&
        Objects.equals(this.relationshipStatuses, person.relationshipStatuses) &&
        Objects.equals(this.residences, person.residences) &&
        Objects.equals(this.resourceName, person.resourceName) &&
        Objects.equals(this.sipAddresses, person.sipAddresses) &&
        Objects.equals(this.skills, person.skills) &&
        Objects.equals(this.taglines, person.taglines) &&
        Objects.equals(this.urls, person.urls) &&
        Objects.equals(this.userDefined, person.userDefined);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addresses, ageRange, ageRanges, biographies, birthdays, braggingRights, calendarUrls, clientData, coverPhotos, emailAddresses, etag, events, externalIds, fileAses, genders, imClients, interests, locales, locations, memberships, metadata, miscKeywords, names, nicknames, occupations, organizations, phoneNumbers, photos, relations, relationshipInterests, relationshipStatuses, residences, resourceName, sipAddresses, skills, taglines, urls, userDefined);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Person {\n");
    sb.append("    addresses: ").append(toIndentedString(addresses)).append("\n");
    sb.append("    ageRange: ").append(toIndentedString(ageRange)).append("\n");
    sb.append("    ageRanges: ").append(toIndentedString(ageRanges)).append("\n");
    sb.append("    biographies: ").append(toIndentedString(biographies)).append("\n");
    sb.append("    birthdays: ").append(toIndentedString(birthdays)).append("\n");
    sb.append("    braggingRights: ").append(toIndentedString(braggingRights)).append("\n");
    sb.append("    calendarUrls: ").append(toIndentedString(calendarUrls)).append("\n");
    sb.append("    clientData: ").append(toIndentedString(clientData)).append("\n");
    sb.append("    coverPhotos: ").append(toIndentedString(coverPhotos)).append("\n");
    sb.append("    emailAddresses: ").append(toIndentedString(emailAddresses)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    externalIds: ").append(toIndentedString(externalIds)).append("\n");
    sb.append("    fileAses: ").append(toIndentedString(fileAses)).append("\n");
    sb.append("    genders: ").append(toIndentedString(genders)).append("\n");
    sb.append("    imClients: ").append(toIndentedString(imClients)).append("\n");
    sb.append("    interests: ").append(toIndentedString(interests)).append("\n");
    sb.append("    locales: ").append(toIndentedString(locales)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    memberships: ").append(toIndentedString(memberships)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    miscKeywords: ").append(toIndentedString(miscKeywords)).append("\n");
    sb.append("    names: ").append(toIndentedString(names)).append("\n");
    sb.append("    nicknames: ").append(toIndentedString(nicknames)).append("\n");
    sb.append("    occupations: ").append(toIndentedString(occupations)).append("\n");
    sb.append("    organizations: ").append(toIndentedString(organizations)).append("\n");
    sb.append("    phoneNumbers: ").append(toIndentedString(phoneNumbers)).append("\n");
    sb.append("    photos: ").append(toIndentedString(photos)).append("\n");
    sb.append("    relations: ").append(toIndentedString(relations)).append("\n");
    sb.append("    relationshipInterests: ").append(toIndentedString(relationshipInterests)).append("\n");
    sb.append("    relationshipStatuses: ").append(toIndentedString(relationshipStatuses)).append("\n");
    sb.append("    residences: ").append(toIndentedString(residences)).append("\n");
    sb.append("    resourceName: ").append(toIndentedString(resourceName)).append("\n");
    sb.append("    sipAddresses: ").append(toIndentedString(sipAddresses)).append("\n");
    sb.append("    skills: ").append(toIndentedString(skills)).append("\n");
    sb.append("    taglines: ").append(toIndentedString(taglines)).append("\n");
    sb.append("    urls: ").append(toIndentedString(urls)).append("\n");
    sb.append("    userDefined: ").append(toIndentedString(userDefined)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addresses");
    openapiFields.add("ageRange");
    openapiFields.add("ageRanges");
    openapiFields.add("biographies");
    openapiFields.add("birthdays");
    openapiFields.add("braggingRights");
    openapiFields.add("calendarUrls");
    openapiFields.add("clientData");
    openapiFields.add("coverPhotos");
    openapiFields.add("emailAddresses");
    openapiFields.add("etag");
    openapiFields.add("events");
    openapiFields.add("externalIds");
    openapiFields.add("fileAses");
    openapiFields.add("genders");
    openapiFields.add("imClients");
    openapiFields.add("interests");
    openapiFields.add("locales");
    openapiFields.add("locations");
    openapiFields.add("memberships");
    openapiFields.add("metadata");
    openapiFields.add("miscKeywords");
    openapiFields.add("names");
    openapiFields.add("nicknames");
    openapiFields.add("occupations");
    openapiFields.add("organizations");
    openapiFields.add("phoneNumbers");
    openapiFields.add("photos");
    openapiFields.add("relations");
    openapiFields.add("relationshipInterests");
    openapiFields.add("relationshipStatuses");
    openapiFields.add("residences");
    openapiFields.add("resourceName");
    openapiFields.add("sipAddresses");
    openapiFields.add("skills");
    openapiFields.add("taglines");
    openapiFields.add("urls");
    openapiFields.add("userDefined");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Person
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Person.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Person is not found in the empty JSON string", Person.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Person.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Person` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("addresses") != null && !jsonObj.get("addresses").isJsonNull()) {
        JsonArray jsonArrayaddresses = jsonObj.getAsJsonArray("addresses");
        if (jsonArrayaddresses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("addresses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `addresses` to be an array in the JSON string but got `%s`", jsonObj.get("addresses").toString()));
          }

          // validate the optional field `addresses` (array)
          for (int i = 0; i < jsonArrayaddresses.size(); i++) {
            Address.validateJsonElement(jsonArrayaddresses.get(i));
          };
        }
      }
      if ((jsonObj.get("ageRange") != null && !jsonObj.get("ageRange").isJsonNull()) && !jsonObj.get("ageRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ageRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ageRange").toString()));
      }
      // validate the optional field `ageRange`
      if (jsonObj.get("ageRange") != null && !jsonObj.get("ageRange").isJsonNull()) {
        AgeRangeEnum.validateJsonElement(jsonObj.get("ageRange"));
      }
      if (jsonObj.get("ageRanges") != null && !jsonObj.get("ageRanges").isJsonNull()) {
        JsonArray jsonArrayageRanges = jsonObj.getAsJsonArray("ageRanges");
        if (jsonArrayageRanges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ageRanges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ageRanges` to be an array in the JSON string but got `%s`", jsonObj.get("ageRanges").toString()));
          }

          // validate the optional field `ageRanges` (array)
          for (int i = 0; i < jsonArrayageRanges.size(); i++) {
            AgeRangeType.validateJsonElement(jsonArrayageRanges.get(i));
          };
        }
      }
      if (jsonObj.get("biographies") != null && !jsonObj.get("biographies").isJsonNull()) {
        JsonArray jsonArraybiographies = jsonObj.getAsJsonArray("biographies");
        if (jsonArraybiographies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("biographies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `biographies` to be an array in the JSON string but got `%s`", jsonObj.get("biographies").toString()));
          }

          // validate the optional field `biographies` (array)
          for (int i = 0; i < jsonArraybiographies.size(); i++) {
            Biography.validateJsonElement(jsonArraybiographies.get(i));
          };
        }
      }
      if (jsonObj.get("birthdays") != null && !jsonObj.get("birthdays").isJsonNull()) {
        JsonArray jsonArraybirthdays = jsonObj.getAsJsonArray("birthdays");
        if (jsonArraybirthdays != null) {
          // ensure the json data is an array
          if (!jsonObj.get("birthdays").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `birthdays` to be an array in the JSON string but got `%s`", jsonObj.get("birthdays").toString()));
          }

          // validate the optional field `birthdays` (array)
          for (int i = 0; i < jsonArraybirthdays.size(); i++) {
            Birthday.validateJsonElement(jsonArraybirthdays.get(i));
          };
        }
      }
      if (jsonObj.get("braggingRights") != null && !jsonObj.get("braggingRights").isJsonNull()) {
        JsonArray jsonArraybraggingRights = jsonObj.getAsJsonArray("braggingRights");
        if (jsonArraybraggingRights != null) {
          // ensure the json data is an array
          if (!jsonObj.get("braggingRights").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `braggingRights` to be an array in the JSON string but got `%s`", jsonObj.get("braggingRights").toString()));
          }

          // validate the optional field `braggingRights` (array)
          for (int i = 0; i < jsonArraybraggingRights.size(); i++) {
            BraggingRights.validateJsonElement(jsonArraybraggingRights.get(i));
          };
        }
      }
      if (jsonObj.get("calendarUrls") != null && !jsonObj.get("calendarUrls").isJsonNull()) {
        JsonArray jsonArraycalendarUrls = jsonObj.getAsJsonArray("calendarUrls");
        if (jsonArraycalendarUrls != null) {
          // ensure the json data is an array
          if (!jsonObj.get("calendarUrls").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `calendarUrls` to be an array in the JSON string but got `%s`", jsonObj.get("calendarUrls").toString()));
          }

          // validate the optional field `calendarUrls` (array)
          for (int i = 0; i < jsonArraycalendarUrls.size(); i++) {
            CalendarUrl.validateJsonElement(jsonArraycalendarUrls.get(i));
          };
        }
      }
      if (jsonObj.get("clientData") != null && !jsonObj.get("clientData").isJsonNull()) {
        JsonArray jsonArrayclientData = jsonObj.getAsJsonArray("clientData");
        if (jsonArrayclientData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("clientData").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `clientData` to be an array in the JSON string but got `%s`", jsonObj.get("clientData").toString()));
          }

          // validate the optional field `clientData` (array)
          for (int i = 0; i < jsonArrayclientData.size(); i++) {
            ClientData.validateJsonElement(jsonArrayclientData.get(i));
          };
        }
      }
      if (jsonObj.get("coverPhotos") != null && !jsonObj.get("coverPhotos").isJsonNull()) {
        JsonArray jsonArraycoverPhotos = jsonObj.getAsJsonArray("coverPhotos");
        if (jsonArraycoverPhotos != null) {
          // ensure the json data is an array
          if (!jsonObj.get("coverPhotos").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `coverPhotos` to be an array in the JSON string but got `%s`", jsonObj.get("coverPhotos").toString()));
          }

          // validate the optional field `coverPhotos` (array)
          for (int i = 0; i < jsonArraycoverPhotos.size(); i++) {
            CoverPhoto.validateJsonElement(jsonArraycoverPhotos.get(i));
          };
        }
      }
      if (jsonObj.get("emailAddresses") != null && !jsonObj.get("emailAddresses").isJsonNull()) {
        JsonArray jsonArrayemailAddresses = jsonObj.getAsJsonArray("emailAddresses");
        if (jsonArrayemailAddresses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("emailAddresses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `emailAddresses` to be an array in the JSON string but got `%s`", jsonObj.get("emailAddresses").toString()));
          }

          // validate the optional field `emailAddresses` (array)
          for (int i = 0; i < jsonArrayemailAddresses.size(); i++) {
            EmailAddress.validateJsonElement(jsonArrayemailAddresses.get(i));
          };
        }
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if (jsonObj.get("events") != null && !jsonObj.get("events").isJsonNull()) {
        JsonArray jsonArrayevents = jsonObj.getAsJsonArray("events");
        if (jsonArrayevents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("events").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `events` to be an array in the JSON string but got `%s`", jsonObj.get("events").toString()));
          }

          // validate the optional field `events` (array)
          for (int i = 0; i < jsonArrayevents.size(); i++) {
            Event.validateJsonElement(jsonArrayevents.get(i));
          };
        }
      }
      if (jsonObj.get("externalIds") != null && !jsonObj.get("externalIds").isJsonNull()) {
        JsonArray jsonArrayexternalIds = jsonObj.getAsJsonArray("externalIds");
        if (jsonArrayexternalIds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("externalIds").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `externalIds` to be an array in the JSON string but got `%s`", jsonObj.get("externalIds").toString()));
          }

          // validate the optional field `externalIds` (array)
          for (int i = 0; i < jsonArrayexternalIds.size(); i++) {
            ExternalId.validateJsonElement(jsonArrayexternalIds.get(i));
          };
        }
      }
      if (jsonObj.get("fileAses") != null && !jsonObj.get("fileAses").isJsonNull()) {
        JsonArray jsonArrayfileAses = jsonObj.getAsJsonArray("fileAses");
        if (jsonArrayfileAses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fileAses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fileAses` to be an array in the JSON string but got `%s`", jsonObj.get("fileAses").toString()));
          }

          // validate the optional field `fileAses` (array)
          for (int i = 0; i < jsonArrayfileAses.size(); i++) {
            FileAs.validateJsonElement(jsonArrayfileAses.get(i));
          };
        }
      }
      if (jsonObj.get("genders") != null && !jsonObj.get("genders").isJsonNull()) {
        JsonArray jsonArraygenders = jsonObj.getAsJsonArray("genders");
        if (jsonArraygenders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("genders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `genders` to be an array in the JSON string but got `%s`", jsonObj.get("genders").toString()));
          }

          // validate the optional field `genders` (array)
          for (int i = 0; i < jsonArraygenders.size(); i++) {
            Gender.validateJsonElement(jsonArraygenders.get(i));
          };
        }
      }
      if (jsonObj.get("imClients") != null && !jsonObj.get("imClients").isJsonNull()) {
        JsonArray jsonArrayimClients = jsonObj.getAsJsonArray("imClients");
        if (jsonArrayimClients != null) {
          // ensure the json data is an array
          if (!jsonObj.get("imClients").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `imClients` to be an array in the JSON string but got `%s`", jsonObj.get("imClients").toString()));
          }

          // validate the optional field `imClients` (array)
          for (int i = 0; i < jsonArrayimClients.size(); i++) {
            ImClient.validateJsonElement(jsonArrayimClients.get(i));
          };
        }
      }
      if (jsonObj.get("interests") != null && !jsonObj.get("interests").isJsonNull()) {
        JsonArray jsonArrayinterests = jsonObj.getAsJsonArray("interests");
        if (jsonArrayinterests != null) {
          // ensure the json data is an array
          if (!jsonObj.get("interests").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `interests` to be an array in the JSON string but got `%s`", jsonObj.get("interests").toString()));
          }

          // validate the optional field `interests` (array)
          for (int i = 0; i < jsonArrayinterests.size(); i++) {
            Interest.validateJsonElement(jsonArrayinterests.get(i));
          };
        }
      }
      if (jsonObj.get("locales") != null && !jsonObj.get("locales").isJsonNull()) {
        JsonArray jsonArraylocales = jsonObj.getAsJsonArray("locales");
        if (jsonArraylocales != null) {
          // ensure the json data is an array
          if (!jsonObj.get("locales").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `locales` to be an array in the JSON string but got `%s`", jsonObj.get("locales").toString()));
          }

          // validate the optional field `locales` (array)
          for (int i = 0; i < jsonArraylocales.size(); i++) {
            Locale.validateJsonElement(jsonArraylocales.get(i));
          };
        }
      }
      if (jsonObj.get("locations") != null && !jsonObj.get("locations").isJsonNull()) {
        JsonArray jsonArraylocations = jsonObj.getAsJsonArray("locations");
        if (jsonArraylocations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("locations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `locations` to be an array in the JSON string but got `%s`", jsonObj.get("locations").toString()));
          }

          // validate the optional field `locations` (array)
          for (int i = 0; i < jsonArraylocations.size(); i++) {
            Location.validateJsonElement(jsonArraylocations.get(i));
          };
        }
      }
      if (jsonObj.get("memberships") != null && !jsonObj.get("memberships").isJsonNull()) {
        JsonArray jsonArraymemberships = jsonObj.getAsJsonArray("memberships");
        if (jsonArraymemberships != null) {
          // ensure the json data is an array
          if (!jsonObj.get("memberships").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `memberships` to be an array in the JSON string but got `%s`", jsonObj.get("memberships").toString()));
          }

          // validate the optional field `memberships` (array)
          for (int i = 0; i < jsonArraymemberships.size(); i++) {
            Membership.validateJsonElement(jsonArraymemberships.get(i));
          };
        }
      }
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        PersonMetadata.validateJsonElement(jsonObj.get("metadata"));
      }
      if (jsonObj.get("miscKeywords") != null && !jsonObj.get("miscKeywords").isJsonNull()) {
        JsonArray jsonArraymiscKeywords = jsonObj.getAsJsonArray("miscKeywords");
        if (jsonArraymiscKeywords != null) {
          // ensure the json data is an array
          if (!jsonObj.get("miscKeywords").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `miscKeywords` to be an array in the JSON string but got `%s`", jsonObj.get("miscKeywords").toString()));
          }

          // validate the optional field `miscKeywords` (array)
          for (int i = 0; i < jsonArraymiscKeywords.size(); i++) {
            MiscKeyword.validateJsonElement(jsonArraymiscKeywords.get(i));
          };
        }
      }
      if (jsonObj.get("names") != null && !jsonObj.get("names").isJsonNull()) {
        JsonArray jsonArraynames = jsonObj.getAsJsonArray("names");
        if (jsonArraynames != null) {
          // ensure the json data is an array
          if (!jsonObj.get("names").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `names` to be an array in the JSON string but got `%s`", jsonObj.get("names").toString()));
          }

          // validate the optional field `names` (array)
          for (int i = 0; i < jsonArraynames.size(); i++) {
            Name.validateJsonElement(jsonArraynames.get(i));
          };
        }
      }
      if (jsonObj.get("nicknames") != null && !jsonObj.get("nicknames").isJsonNull()) {
        JsonArray jsonArraynicknames = jsonObj.getAsJsonArray("nicknames");
        if (jsonArraynicknames != null) {
          // ensure the json data is an array
          if (!jsonObj.get("nicknames").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `nicknames` to be an array in the JSON string but got `%s`", jsonObj.get("nicknames").toString()));
          }

          // validate the optional field `nicknames` (array)
          for (int i = 0; i < jsonArraynicknames.size(); i++) {
            Nickname.validateJsonElement(jsonArraynicknames.get(i));
          };
        }
      }
      if (jsonObj.get("occupations") != null && !jsonObj.get("occupations").isJsonNull()) {
        JsonArray jsonArrayoccupations = jsonObj.getAsJsonArray("occupations");
        if (jsonArrayoccupations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("occupations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `occupations` to be an array in the JSON string but got `%s`", jsonObj.get("occupations").toString()));
          }

          // validate the optional field `occupations` (array)
          for (int i = 0; i < jsonArrayoccupations.size(); i++) {
            Occupation.validateJsonElement(jsonArrayoccupations.get(i));
          };
        }
      }
      if (jsonObj.get("organizations") != null && !jsonObj.get("organizations").isJsonNull()) {
        JsonArray jsonArrayorganizations = jsonObj.getAsJsonArray("organizations");
        if (jsonArrayorganizations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("organizations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `organizations` to be an array in the JSON string but got `%s`", jsonObj.get("organizations").toString()));
          }

          // validate the optional field `organizations` (array)
          for (int i = 0; i < jsonArrayorganizations.size(); i++) {
            Organization.validateJsonElement(jsonArrayorganizations.get(i));
          };
        }
      }
      if (jsonObj.get("phoneNumbers") != null && !jsonObj.get("phoneNumbers").isJsonNull()) {
        JsonArray jsonArrayphoneNumbers = jsonObj.getAsJsonArray("phoneNumbers");
        if (jsonArrayphoneNumbers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("phoneNumbers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `phoneNumbers` to be an array in the JSON string but got `%s`", jsonObj.get("phoneNumbers").toString()));
          }

          // validate the optional field `phoneNumbers` (array)
          for (int i = 0; i < jsonArrayphoneNumbers.size(); i++) {
            PhoneNumber.validateJsonElement(jsonArrayphoneNumbers.get(i));
          };
        }
      }
      if (jsonObj.get("photos") != null && !jsonObj.get("photos").isJsonNull()) {
        JsonArray jsonArrayphotos = jsonObj.getAsJsonArray("photos");
        if (jsonArrayphotos != null) {
          // ensure the json data is an array
          if (!jsonObj.get("photos").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `photos` to be an array in the JSON string but got `%s`", jsonObj.get("photos").toString()));
          }

          // validate the optional field `photos` (array)
          for (int i = 0; i < jsonArrayphotos.size(); i++) {
            Photo.validateJsonElement(jsonArrayphotos.get(i));
          };
        }
      }
      if (jsonObj.get("relations") != null && !jsonObj.get("relations").isJsonNull()) {
        JsonArray jsonArrayrelations = jsonObj.getAsJsonArray("relations");
        if (jsonArrayrelations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("relations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `relations` to be an array in the JSON string but got `%s`", jsonObj.get("relations").toString()));
          }

          // validate the optional field `relations` (array)
          for (int i = 0; i < jsonArrayrelations.size(); i++) {
            Relation.validateJsonElement(jsonArrayrelations.get(i));
          };
        }
      }
      if (jsonObj.get("relationshipInterests") != null && !jsonObj.get("relationshipInterests").isJsonNull()) {
        JsonArray jsonArrayrelationshipInterests = jsonObj.getAsJsonArray("relationshipInterests");
        if (jsonArrayrelationshipInterests != null) {
          // ensure the json data is an array
          if (!jsonObj.get("relationshipInterests").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `relationshipInterests` to be an array in the JSON string but got `%s`", jsonObj.get("relationshipInterests").toString()));
          }

          // validate the optional field `relationshipInterests` (array)
          for (int i = 0; i < jsonArrayrelationshipInterests.size(); i++) {
            RelationshipInterest.validateJsonElement(jsonArrayrelationshipInterests.get(i));
          };
        }
      }
      if (jsonObj.get("relationshipStatuses") != null && !jsonObj.get("relationshipStatuses").isJsonNull()) {
        JsonArray jsonArrayrelationshipStatuses = jsonObj.getAsJsonArray("relationshipStatuses");
        if (jsonArrayrelationshipStatuses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("relationshipStatuses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `relationshipStatuses` to be an array in the JSON string but got `%s`", jsonObj.get("relationshipStatuses").toString()));
          }

          // validate the optional field `relationshipStatuses` (array)
          for (int i = 0; i < jsonArrayrelationshipStatuses.size(); i++) {
            RelationshipStatus.validateJsonElement(jsonArrayrelationshipStatuses.get(i));
          };
        }
      }
      if (jsonObj.get("residences") != null && !jsonObj.get("residences").isJsonNull()) {
        JsonArray jsonArrayresidences = jsonObj.getAsJsonArray("residences");
        if (jsonArrayresidences != null) {
          // ensure the json data is an array
          if (!jsonObj.get("residences").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `residences` to be an array in the JSON string but got `%s`", jsonObj.get("residences").toString()));
          }

          // validate the optional field `residences` (array)
          for (int i = 0; i < jsonArrayresidences.size(); i++) {
            Residence.validateJsonElement(jsonArrayresidences.get(i));
          };
        }
      }
      if ((jsonObj.get("resourceName") != null && !jsonObj.get("resourceName").isJsonNull()) && !jsonObj.get("resourceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceName").toString()));
      }
      if (jsonObj.get("sipAddresses") != null && !jsonObj.get("sipAddresses").isJsonNull()) {
        JsonArray jsonArraysipAddresses = jsonObj.getAsJsonArray("sipAddresses");
        if (jsonArraysipAddresses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sipAddresses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sipAddresses` to be an array in the JSON string but got `%s`", jsonObj.get("sipAddresses").toString()));
          }

          // validate the optional field `sipAddresses` (array)
          for (int i = 0; i < jsonArraysipAddresses.size(); i++) {
            SipAddress.validateJsonElement(jsonArraysipAddresses.get(i));
          };
        }
      }
      if (jsonObj.get("skills") != null && !jsonObj.get("skills").isJsonNull()) {
        JsonArray jsonArrayskills = jsonObj.getAsJsonArray("skills");
        if (jsonArrayskills != null) {
          // ensure the json data is an array
          if (!jsonObj.get("skills").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `skills` to be an array in the JSON string but got `%s`", jsonObj.get("skills").toString()));
          }

          // validate the optional field `skills` (array)
          for (int i = 0; i < jsonArrayskills.size(); i++) {
            Skill.validateJsonElement(jsonArrayskills.get(i));
          };
        }
      }
      if (jsonObj.get("taglines") != null && !jsonObj.get("taglines").isJsonNull()) {
        JsonArray jsonArraytaglines = jsonObj.getAsJsonArray("taglines");
        if (jsonArraytaglines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("taglines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `taglines` to be an array in the JSON string but got `%s`", jsonObj.get("taglines").toString()));
          }

          // validate the optional field `taglines` (array)
          for (int i = 0; i < jsonArraytaglines.size(); i++) {
            Tagline.validateJsonElement(jsonArraytaglines.get(i));
          };
        }
      }
      if (jsonObj.get("urls") != null && !jsonObj.get("urls").isJsonNull()) {
        JsonArray jsonArrayurls = jsonObj.getAsJsonArray("urls");
        if (jsonArrayurls != null) {
          // ensure the json data is an array
          if (!jsonObj.get("urls").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `urls` to be an array in the JSON string but got `%s`", jsonObj.get("urls").toString()));
          }

          // validate the optional field `urls` (array)
          for (int i = 0; i < jsonArrayurls.size(); i++) {
            Url.validateJsonElement(jsonArrayurls.get(i));
          };
        }
      }
      if (jsonObj.get("userDefined") != null && !jsonObj.get("userDefined").isJsonNull()) {
        JsonArray jsonArrayuserDefined = jsonObj.getAsJsonArray("userDefined");
        if (jsonArrayuserDefined != null) {
          // ensure the json data is an array
          if (!jsonObj.get("userDefined").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `userDefined` to be an array in the JSON string but got `%s`", jsonObj.get("userDefined").toString()));
          }

          // validate the optional field `userDefined` (array)
          for (int i = 0; i < jsonArrayuserDefined.size(); i++) {
            UserDefined.validateJsonElement(jsonArrayuserDefined.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Person.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Person' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Person> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Person.class));

       return (TypeAdapter<T>) new TypeAdapter<Person>() {
           @Override
           public void write(JsonWriter out, Person value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Person read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Person given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Person
   * @throws IOException if the JSON string is invalid with respect to Person
   */
  public static Person fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Person.class);
  }

  /**
   * Convert an instance of Person to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

