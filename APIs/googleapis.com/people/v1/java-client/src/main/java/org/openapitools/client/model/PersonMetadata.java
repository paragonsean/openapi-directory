/*
 * People API
 * Provides access to information about profiles and contacts.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Source;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The metadata about a person.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:24.945775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PersonMetadata {
  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  public static final String SERIALIZED_NAME_LINKED_PEOPLE_RESOURCE_NAMES = "linkedPeopleResourceNames";
  @SerializedName(SERIALIZED_NAME_LINKED_PEOPLE_RESOURCE_NAMES)
  private List<String> linkedPeopleResourceNames = new ArrayList<>();

  /**
   * Output only. **DEPRECATED** (Please use &#x60;person.metadata.sources.profileMetadata.objectType&#x60; instead) The type of the person object.
   */
  @JsonAdapter(ObjectTypeEnum.Adapter.class)
  public enum ObjectTypeEnum {
    OBJECT_TYPE_UNSPECIFIED("OBJECT_TYPE_UNSPECIFIED"),
    
    PERSON("PERSON"),
    
    PAGE("PAGE");

    private String value;

    ObjectTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ObjectTypeEnum fromValue(String value) {
      for (ObjectTypeEnum b : ObjectTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ObjectTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ObjectTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ObjectTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ObjectTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ObjectTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OBJECT_TYPE = "objectType";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_OBJECT_TYPE)
  private ObjectTypeEnum objectType;

  public static final String SERIALIZED_NAME_PREVIOUS_RESOURCE_NAMES = "previousResourceNames";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_RESOURCE_NAMES)
  private List<String> previousResourceNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCES = "sources";
  @SerializedName(SERIALIZED_NAME_SOURCES)
  private List<Source> sources = new ArrayList<>();

  public PersonMetadata() {
  }

  public PersonMetadata(
     Boolean deleted, 
     List<String> linkedPeopleResourceNames, 
     ObjectTypeEnum objectType, 
     List<String> previousResourceNames
  ) {
    this();
    this.deleted = deleted;
    this.linkedPeopleResourceNames = linkedPeopleResourceNames;
    this.objectType = objectType;
    this.previousResourceNames = previousResourceNames;
  }

  /**
   * Output only. True if the person resource has been deleted. Populated only for &#x60;people.connections.list&#x60; and &#x60;otherContacts.list&#x60; sync requests.
   * @return deleted
   */
  @javax.annotation.Nullable
  public Boolean getDeleted() {
    return deleted;
  }



  /**
   * Output only. Resource names of people linked to this resource.
   * @return linkedPeopleResourceNames
   */
  @javax.annotation.Nullable
  public List<String> getLinkedPeopleResourceNames() {
    return linkedPeopleResourceNames;
  }



  /**
   * Output only. **DEPRECATED** (Please use &#x60;person.metadata.sources.profileMetadata.objectType&#x60; instead) The type of the person object.
   * @return objectType
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public ObjectTypeEnum getObjectType() {
    return objectType;
  }



  /**
   * Output only. Any former resource names this person has had. Populated only for &#x60;people.connections.list&#x60; requests that include a sync token. The resource name may change when adding or removing fields that link a contact and profile such as a verified email, verified phone number, or profile URL.
   * @return previousResourceNames
   */
  @javax.annotation.Nullable
  public List<String> getPreviousResourceNames() {
    return previousResourceNames;
  }



  public PersonMetadata sources(List<Source> sources) {
    this.sources = sources;
    return this;
  }

  public PersonMetadata addSourcesItem(Source sourcesItem) {
    if (this.sources == null) {
      this.sources = new ArrayList<>();
    }
    this.sources.add(sourcesItem);
    return this;
  }

  /**
   * The sources of data for the person.
   * @return sources
   */
  @javax.annotation.Nullable
  public List<Source> getSources() {
    return sources;
  }

  public void setSources(List<Source> sources) {
    this.sources = sources;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PersonMetadata personMetadata = (PersonMetadata) o;
    return Objects.equals(this.deleted, personMetadata.deleted) &&
        Objects.equals(this.linkedPeopleResourceNames, personMetadata.linkedPeopleResourceNames) &&
        Objects.equals(this.objectType, personMetadata.objectType) &&
        Objects.equals(this.previousResourceNames, personMetadata.previousResourceNames) &&
        Objects.equals(this.sources, personMetadata.sources);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deleted, linkedPeopleResourceNames, objectType, previousResourceNames, sources);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PersonMetadata {\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    linkedPeopleResourceNames: ").append(toIndentedString(linkedPeopleResourceNames)).append("\n");
    sb.append("    objectType: ").append(toIndentedString(objectType)).append("\n");
    sb.append("    previousResourceNames: ").append(toIndentedString(previousResourceNames)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deleted");
    openapiFields.add("linkedPeopleResourceNames");
    openapiFields.add("objectType");
    openapiFields.add("previousResourceNames");
    openapiFields.add("sources");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PersonMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PersonMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PersonMetadata is not found in the empty JSON string", PersonMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PersonMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PersonMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("linkedPeopleResourceNames") != null && !jsonObj.get("linkedPeopleResourceNames").isJsonNull() && !jsonObj.get("linkedPeopleResourceNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkedPeopleResourceNames` to be an array in the JSON string but got `%s`", jsonObj.get("linkedPeopleResourceNames").toString()));
      }
      if ((jsonObj.get("objectType") != null && !jsonObj.get("objectType").isJsonNull()) && !jsonObj.get("objectType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `objectType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("objectType").toString()));
      }
      // validate the optional field `objectType`
      if (jsonObj.get("objectType") != null && !jsonObj.get("objectType").isJsonNull()) {
        ObjectTypeEnum.validateJsonElement(jsonObj.get("objectType"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("previousResourceNames") != null && !jsonObj.get("previousResourceNames").isJsonNull() && !jsonObj.get("previousResourceNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `previousResourceNames` to be an array in the JSON string but got `%s`", jsonObj.get("previousResourceNames").toString()));
      }
      if (jsonObj.get("sources") != null && !jsonObj.get("sources").isJsonNull()) {
        JsonArray jsonArraysources = jsonObj.getAsJsonArray("sources");
        if (jsonArraysources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sources` to be an array in the JSON string but got `%s`", jsonObj.get("sources").toString()));
          }

          // validate the optional field `sources` (array)
          for (int i = 0; i < jsonArraysources.size(); i++) {
            Source.validateJsonElement(jsonArraysources.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PersonMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PersonMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PersonMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PersonMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<PersonMetadata>() {
           @Override
           public void write(JsonWriter out, PersonMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PersonMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PersonMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PersonMetadata
   * @throws IOException if the JSON string is invalid with respect to PersonMetadata
   */
  public static PersonMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PersonMetadata.class);
  }

  /**
   * Convert an instance of PersonMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

