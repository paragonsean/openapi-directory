# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.field_metadata import FieldMetadata
from openapi_server import util


class Nickname(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metadata: FieldMetadata=None, type: str=None, value: str=None):
        """Nickname - a model defined in OpenAPI

        :param metadata: The metadata of this Nickname.
        :param type: The type of this Nickname.
        :param value: The value of this Nickname.
        """
        self.openapi_types = {
            'metadata': FieldMetadata,
            'type': str,
            'value': str
        }

        self.attribute_map = {
            'metadata': 'metadata',
            'type': 'type',
            'value': 'value'
        }

        self._metadata = metadata
        self._type = type
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Nickname':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Nickname of this Nickname.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metadata(self):
        """Gets the metadata of this Nickname.


        :return: The metadata of this Nickname.
        :rtype: FieldMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Nickname.


        :param metadata: The metadata of this Nickname.
        :type metadata: FieldMetadata
        """

        self._metadata = metadata

    @property
    def type(self):
        """Gets the type of this Nickname.

        The type of the nickname.

        :return: The type of this Nickname.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Nickname.

        The type of the nickname.

        :param type: The type of this Nickname.
        :type type: str
        """
        allowed_values = ["DEFAULT", "MAIDEN_NAME", "INITIALS", "GPLUS", "OTHER_NAME", "ALTERNATE_NAME", "SHORT_NAME"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def value(self):
        """Gets the value of this Nickname.

        The nickname.

        :return: The value of this Nickname.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Nickname.

        The nickname.

        :param value: The value of this Nickname.
        :type value: str
        """

        self._value = value
