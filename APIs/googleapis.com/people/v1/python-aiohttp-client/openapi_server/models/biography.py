# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.field_metadata import FieldMetadata
from openapi_server import util


class Biography(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_type: str=None, metadata: FieldMetadata=None, value: str=None):
        """Biography - a model defined in OpenAPI

        :param content_type: The content_type of this Biography.
        :param metadata: The metadata of this Biography.
        :param value: The value of this Biography.
        """
        self.openapi_types = {
            'content_type': str,
            'metadata': FieldMetadata,
            'value': str
        }

        self.attribute_map = {
            'content_type': 'contentType',
            'metadata': 'metadata',
            'value': 'value'
        }

        self._content_type = content_type
        self._metadata = metadata
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Biography':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Biography of this Biography.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_type(self):
        """Gets the content_type of this Biography.

        The content type of the biography.

        :return: The content_type of this Biography.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this Biography.

        The content type of the biography.

        :param content_type: The content_type of this Biography.
        :type content_type: str
        """
        allowed_values = ["CONTENT_TYPE_UNSPECIFIED", "TEXT_PLAIN", "TEXT_HTML"]  # noqa: E501
        if content_type not in allowed_values:
            raise ValueError(
                "Invalid value for `content_type` ({0}), must be one of {1}"
                .format(content_type, allowed_values)
            )

        self._content_type = content_type

    @property
    def metadata(self):
        """Gets the metadata of this Biography.


        :return: The metadata of this Biography.
        :rtype: FieldMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Biography.


        :param metadata: The metadata of this Biography.
        :type metadata: FieldMetadata
        """

        self._metadata = metadata

    @property
    def value(self):
        """Gets the value of this Biography.

        The short biography.

        :return: The value of this Biography.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Biography.

        The short biography.

        :param value: The value of this Biography.
        :type value: str
        """

        self._value = value
