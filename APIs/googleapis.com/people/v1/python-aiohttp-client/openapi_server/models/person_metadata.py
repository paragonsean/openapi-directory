# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.source import Source
from openapi_server import util


class PersonMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deleted: bool=None, linked_people_resource_names: List[str]=None, object_type: str=None, previous_resource_names: List[str]=None, sources: List[Source]=None):
        """PersonMetadata - a model defined in OpenAPI

        :param deleted: The deleted of this PersonMetadata.
        :param linked_people_resource_names: The linked_people_resource_names of this PersonMetadata.
        :param object_type: The object_type of this PersonMetadata.
        :param previous_resource_names: The previous_resource_names of this PersonMetadata.
        :param sources: The sources of this PersonMetadata.
        """
        self.openapi_types = {
            'deleted': bool,
            'linked_people_resource_names': List[str],
            'object_type': str,
            'previous_resource_names': List[str],
            'sources': List[Source]
        }

        self.attribute_map = {
            'deleted': 'deleted',
            'linked_people_resource_names': 'linkedPeopleResourceNames',
            'object_type': 'objectType',
            'previous_resource_names': 'previousResourceNames',
            'sources': 'sources'
        }

        self._deleted = deleted
        self._linked_people_resource_names = linked_people_resource_names
        self._object_type = object_type
        self._previous_resource_names = previous_resource_names
        self._sources = sources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PersonMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PersonMetadata of this PersonMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deleted(self):
        """Gets the deleted of this PersonMetadata.

        Output only. True if the person resource has been deleted. Populated only for `people.connections.list` and `otherContacts.list` sync requests.

        :return: The deleted of this PersonMetadata.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this PersonMetadata.

        Output only. True if the person resource has been deleted. Populated only for `people.connections.list` and `otherContacts.list` sync requests.

        :param deleted: The deleted of this PersonMetadata.
        :type deleted: bool
        """

        self._deleted = deleted

    @property
    def linked_people_resource_names(self):
        """Gets the linked_people_resource_names of this PersonMetadata.

        Output only. Resource names of people linked to this resource.

        :return: The linked_people_resource_names of this PersonMetadata.
        :rtype: List[str]
        """
        return self._linked_people_resource_names

    @linked_people_resource_names.setter
    def linked_people_resource_names(self, linked_people_resource_names):
        """Sets the linked_people_resource_names of this PersonMetadata.

        Output only. Resource names of people linked to this resource.

        :param linked_people_resource_names: The linked_people_resource_names of this PersonMetadata.
        :type linked_people_resource_names: List[str]
        """

        self._linked_people_resource_names = linked_people_resource_names

    @property
    def object_type(self):
        """Gets the object_type of this PersonMetadata.

        Output only. **DEPRECATED** (Please use `person.metadata.sources.profileMetadata.objectType` instead) The type of the person object.

        :return: The object_type of this PersonMetadata.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this PersonMetadata.

        Output only. **DEPRECATED** (Please use `person.metadata.sources.profileMetadata.objectType` instead) The type of the person object.

        :param object_type: The object_type of this PersonMetadata.
        :type object_type: str
        """
        allowed_values = ["OBJECT_TYPE_UNSPECIFIED", "PERSON", "PAGE"]  # noqa: E501
        if object_type not in allowed_values:
            raise ValueError(
                "Invalid value for `object_type` ({0}), must be one of {1}"
                .format(object_type, allowed_values)
            )

        self._object_type = object_type

    @property
    def previous_resource_names(self):
        """Gets the previous_resource_names of this PersonMetadata.

        Output only. Any former resource names this person has had. Populated only for `people.connections.list` requests that include a sync token. The resource name may change when adding or removing fields that link a contact and profile such as a verified email, verified phone number, or profile URL.

        :return: The previous_resource_names of this PersonMetadata.
        :rtype: List[str]
        """
        return self._previous_resource_names

    @previous_resource_names.setter
    def previous_resource_names(self, previous_resource_names):
        """Sets the previous_resource_names of this PersonMetadata.

        Output only. Any former resource names this person has had. Populated only for `people.connections.list` requests that include a sync token. The resource name may change when adding or removing fields that link a contact and profile such as a verified email, verified phone number, or profile URL.

        :param previous_resource_names: The previous_resource_names of this PersonMetadata.
        :type previous_resource_names: List[str]
        """

        self._previous_resource_names = previous_resource_names

    @property
    def sources(self):
        """Gets the sources of this PersonMetadata.

        The sources of data for the person.

        :return: The sources of this PersonMetadata.
        :rtype: List[Source]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this PersonMetadata.

        The sources of data for the person.

        :param sources: The sources of this PersonMetadata.
        :type sources: List[Source]
        """

        self._sources = sources
