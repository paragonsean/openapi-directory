# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContactGroupMembership(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact_group_id: str=None, contact_group_resource_name: str=None):
        """ContactGroupMembership - a model defined in OpenAPI

        :param contact_group_id: The contact_group_id of this ContactGroupMembership.
        :param contact_group_resource_name: The contact_group_resource_name of this ContactGroupMembership.
        """
        self.openapi_types = {
            'contact_group_id': str,
            'contact_group_resource_name': str
        }

        self.attribute_map = {
            'contact_group_id': 'contactGroupId',
            'contact_group_resource_name': 'contactGroupResourceName'
        }

        self._contact_group_id = contact_group_id
        self._contact_group_resource_name = contact_group_resource_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContactGroupMembership':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContactGroupMembership of this ContactGroupMembership.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_group_id(self):
        """Gets the contact_group_id of this ContactGroupMembership.

        Output only. The contact group ID for the contact group membership.

        :return: The contact_group_id of this ContactGroupMembership.
        :rtype: str
        """
        return self._contact_group_id

    @contact_group_id.setter
    def contact_group_id(self, contact_group_id):
        """Sets the contact_group_id of this ContactGroupMembership.

        Output only. The contact group ID for the contact group membership.

        :param contact_group_id: The contact_group_id of this ContactGroupMembership.
        :type contact_group_id: str
        """

        self._contact_group_id = contact_group_id

    @property
    def contact_group_resource_name(self):
        """Gets the contact_group_resource_name of this ContactGroupMembership.

        The resource name for the contact group, assigned by the server. An ASCII string, in the form of `contactGroups/{contact_group_id}`. Only contact_group_resource_name can be used for modifying memberships. Any contact group membership can be removed, but only user group or \"myContacts\" or \"starred\" system groups memberships can be added. A contact must always have at least one contact group membership.

        :return: The contact_group_resource_name of this ContactGroupMembership.
        :rtype: str
        """
        return self._contact_group_resource_name

    @contact_group_resource_name.setter
    def contact_group_resource_name(self, contact_group_resource_name):
        """Sets the contact_group_resource_name of this ContactGroupMembership.

        The resource name for the contact group, assigned by the server. An ASCII string, in the form of `contactGroups/{contact_group_id}`. Only contact_group_resource_name can be used for modifying memberships. Any contact group membership can be removed, but only user group or \"myContacts\" or \"starred\" system groups memberships can be added. A contact must always have at least one contact group membership.

        :param contact_group_resource_name: The contact_group_resource_name of this ContactGroupMembership.
        :type contact_group_resource_name: str
        """

        self._contact_group_resource_name = contact_group_resource_name
