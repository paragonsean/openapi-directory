# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.field_metadata import FieldMetadata
from openapi_server import util


class Residence(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current: bool=None, metadata: FieldMetadata=None, value: str=None):
        """Residence - a model defined in OpenAPI

        :param current: The current of this Residence.
        :param metadata: The metadata of this Residence.
        :param value: The value of this Residence.
        """
        self.openapi_types = {
            'current': bool,
            'metadata': FieldMetadata,
            'value': str
        }

        self.attribute_map = {
            'current': 'current',
            'metadata': 'metadata',
            'value': 'value'
        }

        self._current = current
        self._metadata = metadata
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Residence':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Residence of this Residence.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current(self):
        """Gets the current of this Residence.

        True if the residence is the person's current residence; false if the residence is a past residence.

        :return: The current of this Residence.
        :rtype: bool
        """
        return self._current

    @current.setter
    def current(self, current):
        """Sets the current of this Residence.

        True if the residence is the person's current residence; false if the residence is a past residence.

        :param current: The current of this Residence.
        :type current: bool
        """

        self._current = current

    @property
    def metadata(self):
        """Gets the metadata of this Residence.


        :return: The metadata of this Residence.
        :rtype: FieldMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Residence.


        :param metadata: The metadata of this Residence.
        :type metadata: FieldMetadata
        """

        self._metadata = metadata

    @property
    def value(self):
        """Gets the value of this Residence.

        The address of the residence.

        :return: The value of this Residence.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Residence.

        The address of the residence.

        :param value: The value of this Residence.
        :type value: str
        """

        self._value = value
