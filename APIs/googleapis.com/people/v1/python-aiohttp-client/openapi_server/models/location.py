# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.field_metadata import FieldMetadata
from openapi_server import util


class Location(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, building_id: str=None, current: bool=None, desk_code: str=None, floor: str=None, floor_section: str=None, metadata: FieldMetadata=None, type: str=None, value: str=None):
        """Location - a model defined in OpenAPI

        :param building_id: The building_id of this Location.
        :param current: The current of this Location.
        :param desk_code: The desk_code of this Location.
        :param floor: The floor of this Location.
        :param floor_section: The floor_section of this Location.
        :param metadata: The metadata of this Location.
        :param type: The type of this Location.
        :param value: The value of this Location.
        """
        self.openapi_types = {
            'building_id': str,
            'current': bool,
            'desk_code': str,
            'floor': str,
            'floor_section': str,
            'metadata': FieldMetadata,
            'type': str,
            'value': str
        }

        self.attribute_map = {
            'building_id': 'buildingId',
            'current': 'current',
            'desk_code': 'deskCode',
            'floor': 'floor',
            'floor_section': 'floorSection',
            'metadata': 'metadata',
            'type': 'type',
            'value': 'value'
        }

        self._building_id = building_id
        self._current = current
        self._desk_code = desk_code
        self._floor = floor
        self._floor_section = floor_section
        self._metadata = metadata
        self._type = type
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Location':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Location of this Location.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def building_id(self):
        """Gets the building_id of this Location.

        The building identifier.

        :return: The building_id of this Location.
        :rtype: str
        """
        return self._building_id

    @building_id.setter
    def building_id(self, building_id):
        """Sets the building_id of this Location.

        The building identifier.

        :param building_id: The building_id of this Location.
        :type building_id: str
        """

        self._building_id = building_id

    @property
    def current(self):
        """Gets the current of this Location.

        Whether the location is the current location.

        :return: The current of this Location.
        :rtype: bool
        """
        return self._current

    @current.setter
    def current(self, current):
        """Sets the current of this Location.

        Whether the location is the current location.

        :param current: The current of this Location.
        :type current: bool
        """

        self._current = current

    @property
    def desk_code(self):
        """Gets the desk_code of this Location.

        The individual desk location.

        :return: The desk_code of this Location.
        :rtype: str
        """
        return self._desk_code

    @desk_code.setter
    def desk_code(self, desk_code):
        """Sets the desk_code of this Location.

        The individual desk location.

        :param desk_code: The desk_code of this Location.
        :type desk_code: str
        """

        self._desk_code = desk_code

    @property
    def floor(self):
        """Gets the floor of this Location.

        The floor name or number.

        :return: The floor of this Location.
        :rtype: str
        """
        return self._floor

    @floor.setter
    def floor(self, floor):
        """Sets the floor of this Location.

        The floor name or number.

        :param floor: The floor of this Location.
        :type floor: str
        """

        self._floor = floor

    @property
    def floor_section(self):
        """Gets the floor_section of this Location.

        The floor section in `floor_name`.

        :return: The floor_section of this Location.
        :rtype: str
        """
        return self._floor_section

    @floor_section.setter
    def floor_section(self, floor_section):
        """Sets the floor_section of this Location.

        The floor section in `floor_name`.

        :param floor_section: The floor_section of this Location.
        :type floor_section: str
        """

        self._floor_section = floor_section

    @property
    def metadata(self):
        """Gets the metadata of this Location.


        :return: The metadata of this Location.
        :rtype: FieldMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Location.


        :param metadata: The metadata of this Location.
        :type metadata: FieldMetadata
        """

        self._metadata = metadata

    @property
    def type(self):
        """Gets the type of this Location.

        The type of the location. The type can be custom or one of these predefined values: * `desk` * `grewUp`

        :return: The type of this Location.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Location.

        The type of the location. The type can be custom or one of these predefined values: * `desk` * `grewUp`

        :param type: The type of this Location.
        :type type: str
        """

        self._type = type

    @property
    def value(self):
        """Gets the value of this Location.

        The free-form value of the location.

        :return: The value of this Location.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Location.

        The free-form value of the location.

        :param value: The value of this Location.
        :type value: str
        """

        self._value = value
