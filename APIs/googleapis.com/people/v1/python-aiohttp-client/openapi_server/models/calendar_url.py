# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.field_metadata import FieldMetadata
from openapi_server import util


class CalendarUrl(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, formatted_type: str=None, metadata: FieldMetadata=None, type: str=None, url: str=None):
        """CalendarUrl - a model defined in OpenAPI

        :param formatted_type: The formatted_type of this CalendarUrl.
        :param metadata: The metadata of this CalendarUrl.
        :param type: The type of this CalendarUrl.
        :param url: The url of this CalendarUrl.
        """
        self.openapi_types = {
            'formatted_type': str,
            'metadata': FieldMetadata,
            'type': str,
            'url': str
        }

        self.attribute_map = {
            'formatted_type': 'formattedType',
            'metadata': 'metadata',
            'type': 'type',
            'url': 'url'
        }

        self._formatted_type = formatted_type
        self._metadata = metadata
        self._type = type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CalendarUrl':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CalendarUrl of this CalendarUrl.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def formatted_type(self):
        """Gets the formatted_type of this CalendarUrl.

        Output only. The type of the calendar URL translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.

        :return: The formatted_type of this CalendarUrl.
        :rtype: str
        """
        return self._formatted_type

    @formatted_type.setter
    def formatted_type(self, formatted_type):
        """Sets the formatted_type of this CalendarUrl.

        Output only. The type of the calendar URL translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.

        :param formatted_type: The formatted_type of this CalendarUrl.
        :type formatted_type: str
        """

        self._formatted_type = formatted_type

    @property
    def metadata(self):
        """Gets the metadata of this CalendarUrl.


        :return: The metadata of this CalendarUrl.
        :rtype: FieldMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this CalendarUrl.


        :param metadata: The metadata of this CalendarUrl.
        :type metadata: FieldMetadata
        """

        self._metadata = metadata

    @property
    def type(self):
        """Gets the type of this CalendarUrl.

        The type of the calendar URL. The type can be custom or one of these predefined values: * `home` * `freeBusy` * `work`

        :return: The type of this CalendarUrl.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CalendarUrl.

        The type of the calendar URL. The type can be custom or one of these predefined values: * `home` * `freeBusy` * `work`

        :param type: The type of this CalendarUrl.
        :type type: str
        """

        self._type = type

    @property
    def url(self):
        """Gets the url of this CalendarUrl.

        The calendar URL.

        :return: The url of this CalendarUrl.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CalendarUrl.

        The calendar URL.

        :param url: The url of this CalendarUrl.
        :type url: str
        """

        self._url = url
