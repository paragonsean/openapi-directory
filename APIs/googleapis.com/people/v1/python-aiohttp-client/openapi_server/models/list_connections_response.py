# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.person import Person
from openapi_server import util


class ListConnectionsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connections: List[Person]=None, next_page_token: str=None, next_sync_token: str=None, total_items: int=None, total_people: int=None):
        """ListConnectionsResponse - a model defined in OpenAPI

        :param connections: The connections of this ListConnectionsResponse.
        :param next_page_token: The next_page_token of this ListConnectionsResponse.
        :param next_sync_token: The next_sync_token of this ListConnectionsResponse.
        :param total_items: The total_items of this ListConnectionsResponse.
        :param total_people: The total_people of this ListConnectionsResponse.
        """
        self.openapi_types = {
            'connections': List[Person],
            'next_page_token': str,
            'next_sync_token': str,
            'total_items': int,
            'total_people': int
        }

        self.attribute_map = {
            'connections': 'connections',
            'next_page_token': 'nextPageToken',
            'next_sync_token': 'nextSyncToken',
            'total_items': 'totalItems',
            'total_people': 'totalPeople'
        }

        self._connections = connections
        self._next_page_token = next_page_token
        self._next_sync_token = next_sync_token
        self._total_items = total_items
        self._total_people = total_people

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListConnectionsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListConnectionsResponse of this ListConnectionsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connections(self):
        """Gets the connections of this ListConnectionsResponse.

        The list of people that the requestor is connected to.

        :return: The connections of this ListConnectionsResponse.
        :rtype: List[Person]
        """
        return self._connections

    @connections.setter
    def connections(self, connections):
        """Sets the connections of this ListConnectionsResponse.

        The list of people that the requestor is connected to.

        :param connections: The connections of this ListConnectionsResponse.
        :type connections: List[Person]
        """

        self._connections = connections

    @property
    def next_page_token(self):
        """Gets the next_page_token of this ListConnectionsResponse.

        A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.

        :return: The next_page_token of this ListConnectionsResponse.
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this ListConnectionsResponse.

        A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.

        :param next_page_token: The next_page_token of this ListConnectionsResponse.
        :type next_page_token: str
        """

        self._next_page_token = next_page_token

    @property
    def next_sync_token(self):
        """Gets the next_sync_token of this ListConnectionsResponse.

        A token, which can be sent as `sync_token` to retrieve changes since the last request. Request must set `request_sync_token` to return the sync token. When the response is paginated, only the last page will contain `nextSyncToken`.

        :return: The next_sync_token of this ListConnectionsResponse.
        :rtype: str
        """
        return self._next_sync_token

    @next_sync_token.setter
    def next_sync_token(self, next_sync_token):
        """Sets the next_sync_token of this ListConnectionsResponse.

        A token, which can be sent as `sync_token` to retrieve changes since the last request. Request must set `request_sync_token` to return the sync token. When the response is paginated, only the last page will contain `nextSyncToken`.

        :param next_sync_token: The next_sync_token of this ListConnectionsResponse.
        :type next_sync_token: str
        """

        self._next_sync_token = next_sync_token

    @property
    def total_items(self):
        """Gets the total_items of this ListConnectionsResponse.

        The total number of items in the list without pagination.

        :return: The total_items of this ListConnectionsResponse.
        :rtype: int
        """
        return self._total_items

    @total_items.setter
    def total_items(self, total_items):
        """Sets the total_items of this ListConnectionsResponse.

        The total number of items in the list without pagination.

        :param total_items: The total_items of this ListConnectionsResponse.
        :type total_items: int
        """

        self._total_items = total_items

    @property
    def total_people(self):
        """Gets the total_people of this ListConnectionsResponse.

        **DEPRECATED** (Please use totalItems) The total number of people in the list without pagination.

        :return: The total_people of this ListConnectionsResponse.
        :rtype: int
        """
        return self._total_people

    @total_people.setter
    def total_people(self, total_people):
        """Sets the total_people of this ListConnectionsResponse.

        **DEPRECATED** (Please use totalItems) The total number of people in the list without pagination.

        :param total_people: The total_people of this ListConnectionsResponse.
        :type total_people: int
        """

        self._total_people = total_people
