# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.profile_metadata import ProfileMetadata
from openapi_server import util


class Source(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, etag: str=None, id: str=None, profile_metadata: ProfileMetadata=None, type: str=None, update_time: str=None):
        """Source - a model defined in OpenAPI

        :param etag: The etag of this Source.
        :param id: The id of this Source.
        :param profile_metadata: The profile_metadata of this Source.
        :param type: The type of this Source.
        :param update_time: The update_time of this Source.
        """
        self.openapi_types = {
            'etag': str,
            'id': str,
            'profile_metadata': ProfileMetadata,
            'type': str,
            'update_time': str
        }

        self.attribute_map = {
            'etag': 'etag',
            'id': 'id',
            'profile_metadata': 'profileMetadata',
            'type': 'type',
            'update_time': 'updateTime'
        }

        self._etag = etag
        self._id = id
        self._profile_metadata = profile_metadata
        self._type = type
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Source':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Source of this Source.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def etag(self):
        """Gets the etag of this Source.

        **Only populated in `person.metadata.sources`.** The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the source. Used for web cache validation.

        :return: The etag of this Source.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Source.

        **Only populated in `person.metadata.sources`.** The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the source. Used for web cache validation.

        :param etag: The etag of this Source.
        :type etag: str
        """

        self._etag = etag

    @property
    def id(self):
        """Gets the id of this Source.

        The unique identifier within the source type generated by the server.

        :return: The id of this Source.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Source.

        The unique identifier within the source type generated by the server.

        :param id: The id of this Source.
        :type id: str
        """

        self._id = id

    @property
    def profile_metadata(self):
        """Gets the profile_metadata of this Source.


        :return: The profile_metadata of this Source.
        :rtype: ProfileMetadata
        """
        return self._profile_metadata

    @profile_metadata.setter
    def profile_metadata(self, profile_metadata):
        """Sets the profile_metadata of this Source.


        :param profile_metadata: The profile_metadata of this Source.
        :type profile_metadata: ProfileMetadata
        """

        self._profile_metadata = profile_metadata

    @property
    def type(self):
        """Gets the type of this Source.

        The source type.

        :return: The type of this Source.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Source.

        The source type.

        :param type: The type of this Source.
        :type type: str
        """
        allowed_values = ["SOURCE_TYPE_UNSPECIFIED", "ACCOUNT", "PROFILE", "DOMAIN_PROFILE", "CONTACT", "OTHER_CONTACT", "DOMAIN_CONTACT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def update_time(self):
        """Gets the update_time of this Source.

        Output only. **Only populated in `person.metadata.sources`.** Last update timestamp of this source.

        :return: The update_time of this Source.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Source.

        Output only. **Only populated in `person.metadata.sources`.** Last update timestamp of this source.

        :param update_time: The update_time of this Source.
        :type update_time: str
        """

        self._update_time = update_time
