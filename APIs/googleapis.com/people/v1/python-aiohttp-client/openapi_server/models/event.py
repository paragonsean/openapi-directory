# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.field_metadata import FieldMetadata
from openapi_server.models.model_date import ModelDate
from openapi_server import util


class Event(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _date: ModelDate=None, formatted_type: str=None, metadata: FieldMetadata=None, type: str=None):
        """Event - a model defined in OpenAPI

        :param _date: The _date of this Event.
        :param formatted_type: The formatted_type of this Event.
        :param metadata: The metadata of this Event.
        :param type: The type of this Event.
        """
        self.openapi_types = {
            '_date': ModelDate,
            'formatted_type': str,
            'metadata': FieldMetadata,
            'type': str
        }

        self.attribute_map = {
            '_date': 'date',
            'formatted_type': 'formattedType',
            'metadata': 'metadata',
            'type': 'type'
        }

        self.__date = _date
        self._formatted_type = formatted_type
        self._metadata = metadata
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Event of this Event.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self):
        """Gets the _date of this Event.


        :return: The _date of this Event.
        :rtype: ModelDate
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Event.


        :param _date: The _date of this Event.
        :type _date: ModelDate
        """

        self.__date = _date

    @property
    def formatted_type(self):
        """Gets the formatted_type of this Event.

        Output only. The type of the event translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.

        :return: The formatted_type of this Event.
        :rtype: str
        """
        return self._formatted_type

    @formatted_type.setter
    def formatted_type(self, formatted_type):
        """Sets the formatted_type of this Event.

        Output only. The type of the event translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.

        :param formatted_type: The formatted_type of this Event.
        :type formatted_type: str
        """

        self._formatted_type = formatted_type

    @property
    def metadata(self):
        """Gets the metadata of this Event.


        :return: The metadata of this Event.
        :rtype: FieldMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Event.


        :param metadata: The metadata of this Event.
        :type metadata: FieldMetadata
        """

        self._metadata = metadata

    @property
    def type(self):
        """Gets the type of this Event.

        The type of the event. The type can be custom or one of these predefined values: * `anniversary` * `other`

        :return: The type of this Event.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Event.

        The type of the event. The type can be custom or one of these predefined values: * `anniversary` * `other`

        :param type: The type of this Event.
        :type type: str
        """

        self._type = type
