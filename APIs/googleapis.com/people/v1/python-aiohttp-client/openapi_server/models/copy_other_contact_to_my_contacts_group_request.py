# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CopyOtherContactToMyContactsGroupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, copy_mask: str=None, read_mask: str=None, sources: List[str]=None):
        """CopyOtherContactToMyContactsGroupRequest - a model defined in OpenAPI

        :param copy_mask: The copy_mask of this CopyOtherContactToMyContactsGroupRequest.
        :param read_mask: The read_mask of this CopyOtherContactToMyContactsGroupRequest.
        :param sources: The sources of this CopyOtherContactToMyContactsGroupRequest.
        """
        self.openapi_types = {
            'copy_mask': str,
            'read_mask': str,
            'sources': List[str]
        }

        self.attribute_map = {
            'copy_mask': 'copyMask',
            'read_mask': 'readMask',
            'sources': 'sources'
        }

        self._copy_mask = copy_mask
        self._read_mask = read_mask
        self._sources = sources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CopyOtherContactToMyContactsGroupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CopyOtherContactToMyContactsGroupRequest of this CopyOtherContactToMyContactsGroupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def copy_mask(self):
        """Gets the copy_mask of this CopyOtherContactToMyContactsGroupRequest.

        Required. A field mask to restrict which fields are copied into the new contact. Valid values are: * emailAddresses * names * phoneNumbers

        :return: The copy_mask of this CopyOtherContactToMyContactsGroupRequest.
        :rtype: str
        """
        return self._copy_mask

    @copy_mask.setter
    def copy_mask(self, copy_mask):
        """Sets the copy_mask of this CopyOtherContactToMyContactsGroupRequest.

        Required. A field mask to restrict which fields are copied into the new contact. Valid values are: * emailAddresses * names * phoneNumbers

        :param copy_mask: The copy_mask of this CopyOtherContactToMyContactsGroupRequest.
        :type copy_mask: str
        """

        self._copy_mask = copy_mask

    @property
    def read_mask(self):
        """Gets the read_mask of this CopyOtherContactToMyContactsGroupRequest.

        Optional. A field mask to restrict which fields on the person are returned. Multiple fields can be specified by separating them with commas. Defaults to the copy mask with metadata and membership fields if not set. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined

        :return: The read_mask of this CopyOtherContactToMyContactsGroupRequest.
        :rtype: str
        """
        return self._read_mask

    @read_mask.setter
    def read_mask(self, read_mask):
        """Sets the read_mask of this CopyOtherContactToMyContactsGroupRequest.

        Optional. A field mask to restrict which fields on the person are returned. Multiple fields can be specified by separating them with commas. Defaults to the copy mask with metadata and membership fields if not set. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined

        :param read_mask: The read_mask of this CopyOtherContactToMyContactsGroupRequest.
        :type read_mask: str
        """

        self._read_mask = read_mask

    @property
    def sources(self):
        """Gets the sources of this CopyOtherContactToMyContactsGroupRequest.

        Optional. A mask of what source types to return. Defaults to READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.

        :return: The sources of this CopyOtherContactToMyContactsGroupRequest.
        :rtype: List[str]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this CopyOtherContactToMyContactsGroupRequest.

        Optional. A mask of what source types to return. Defaults to READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.

        :param sources: The sources of this CopyOtherContactToMyContactsGroupRequest.
        :type sources: List[str]
        """
        allowed_values = ["READ_SOURCE_TYPE_UNSPECIFIED", "READ_SOURCE_TYPE_PROFILE", "READ_SOURCE_TYPE_CONTACT", "READ_SOURCE_TYPE_DOMAIN_CONTACT"]  # noqa: E501
        if not set(sources).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `sources` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(sources) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._sources = sources
