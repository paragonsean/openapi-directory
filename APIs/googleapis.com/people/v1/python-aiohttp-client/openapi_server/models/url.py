# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.field_metadata import FieldMetadata
from openapi_server import util


class Url(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, formatted_type: str=None, metadata: FieldMetadata=None, type: str=None, value: str=None):
        """Url - a model defined in OpenAPI

        :param formatted_type: The formatted_type of this Url.
        :param metadata: The metadata of this Url.
        :param type: The type of this Url.
        :param value: The value of this Url.
        """
        self.openapi_types = {
            'formatted_type': str,
            'metadata': FieldMetadata,
            'type': str,
            'value': str
        }

        self.attribute_map = {
            'formatted_type': 'formattedType',
            'metadata': 'metadata',
            'type': 'type',
            'value': 'value'
        }

        self._formatted_type = formatted_type
        self._metadata = metadata
        self._type = type
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Url':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Url of this Url.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def formatted_type(self):
        """Gets the formatted_type of this Url.

        Output only. The type of the URL translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.

        :return: The formatted_type of this Url.
        :rtype: str
        """
        return self._formatted_type

    @formatted_type.setter
    def formatted_type(self, formatted_type):
        """Sets the formatted_type of this Url.

        Output only. The type of the URL translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.

        :param formatted_type: The formatted_type of this Url.
        :type formatted_type: str
        """

        self._formatted_type = formatted_type

    @property
    def metadata(self):
        """Gets the metadata of this Url.


        :return: The metadata of this Url.
        :rtype: FieldMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Url.


        :param metadata: The metadata of this Url.
        :type metadata: FieldMetadata
        """

        self._metadata = metadata

    @property
    def type(self):
        """Gets the type of this Url.

        The type of the URL. The type can be custom or one of these predefined values: * `home` * `work` * `blog` * `profile` * `homePage` * `ftp` * `reservations` * `appInstallPage`: website for a Currents application. * `other`

        :return: The type of this Url.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Url.

        The type of the URL. The type can be custom or one of these predefined values: * `home` * `work` * `blog` * `profile` * `homePage` * `ftp` * `reservations` * `appInstallPage`: website for a Currents application. * `other`

        :param type: The type of this Url.
        :type type: str
        """

        self._type = type

    @property
    def value(self):
        """Gets the value of this Url.

        The URL.

        :return: The value of this Url.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Url.

        The URL.

        :param value: The value of this Url.
        :type value: str
        """

        self._value = value
