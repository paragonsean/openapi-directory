# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.field_metadata import FieldMetadata
from openapi_server import util


class Address(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, country: str=None, country_code: str=None, extended_address: str=None, formatted_type: str=None, formatted_value: str=None, metadata: FieldMetadata=None, po_box: str=None, postal_code: str=None, region: str=None, street_address: str=None, type: str=None):
        """Address - a model defined in OpenAPI

        :param city: The city of this Address.
        :param country: The country of this Address.
        :param country_code: The country_code of this Address.
        :param extended_address: The extended_address of this Address.
        :param formatted_type: The formatted_type of this Address.
        :param formatted_value: The formatted_value of this Address.
        :param metadata: The metadata of this Address.
        :param po_box: The po_box of this Address.
        :param postal_code: The postal_code of this Address.
        :param region: The region of this Address.
        :param street_address: The street_address of this Address.
        :param type: The type of this Address.
        """
        self.openapi_types = {
            'city': str,
            'country': str,
            'country_code': str,
            'extended_address': str,
            'formatted_type': str,
            'formatted_value': str,
            'metadata': FieldMetadata,
            'po_box': str,
            'postal_code': str,
            'region': str,
            'street_address': str,
            'type': str
        }

        self.attribute_map = {
            'city': 'city',
            'country': 'country',
            'country_code': 'countryCode',
            'extended_address': 'extendedAddress',
            'formatted_type': 'formattedType',
            'formatted_value': 'formattedValue',
            'metadata': 'metadata',
            'po_box': 'poBox',
            'postal_code': 'postalCode',
            'region': 'region',
            'street_address': 'streetAddress',
            'type': 'type'
        }

        self._city = city
        self._country = country
        self._country_code = country_code
        self._extended_address = extended_address
        self._formatted_type = formatted_type
        self._formatted_value = formatted_value
        self._metadata = metadata
        self._po_box = po_box
        self._postal_code = postal_code
        self._region = region
        self._street_address = street_address
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Address':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Address of this Address.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this Address.

        The city of the address.

        :return: The city of this Address.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Address.

        The city of the address.

        :param city: The city of this Address.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this Address.

        The country of the address.

        :return: The country of this Address.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Address.

        The country of the address.

        :param country: The country of this Address.
        :type country: str
        """

        self._country = country

    @property
    def country_code(self):
        """Gets the country_code of this Address.

        The [ISO 3166-1 alpha-2](http://www.iso.org/iso/country_codes.htm) country code of the address.

        :return: The country_code of this Address.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Address.

        The [ISO 3166-1 alpha-2](http://www.iso.org/iso/country_codes.htm) country code of the address.

        :param country_code: The country_code of this Address.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def extended_address(self):
        """Gets the extended_address of this Address.

        The extended address of the address; for example, the apartment number.

        :return: The extended_address of this Address.
        :rtype: str
        """
        return self._extended_address

    @extended_address.setter
    def extended_address(self, extended_address):
        """Sets the extended_address of this Address.

        The extended address of the address; for example, the apartment number.

        :param extended_address: The extended_address of this Address.
        :type extended_address: str
        """

        self._extended_address = extended_address

    @property
    def formatted_type(self):
        """Gets the formatted_type of this Address.

        Output only. The type of the address translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.

        :return: The formatted_type of this Address.
        :rtype: str
        """
        return self._formatted_type

    @formatted_type.setter
    def formatted_type(self, formatted_type):
        """Sets the formatted_type of this Address.

        Output only. The type of the address translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.

        :param formatted_type: The formatted_type of this Address.
        :type formatted_type: str
        """

        self._formatted_type = formatted_type

    @property
    def formatted_value(self):
        """Gets the formatted_value of this Address.

        The unstructured value of the address. If this is not set by the user it will be automatically constructed from structured values.

        :return: The formatted_value of this Address.
        :rtype: str
        """
        return self._formatted_value

    @formatted_value.setter
    def formatted_value(self, formatted_value):
        """Sets the formatted_value of this Address.

        The unstructured value of the address. If this is not set by the user it will be automatically constructed from structured values.

        :param formatted_value: The formatted_value of this Address.
        :type formatted_value: str
        """

        self._formatted_value = formatted_value

    @property
    def metadata(self):
        """Gets the metadata of this Address.


        :return: The metadata of this Address.
        :rtype: FieldMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Address.


        :param metadata: The metadata of this Address.
        :type metadata: FieldMetadata
        """

        self._metadata = metadata

    @property
    def po_box(self):
        """Gets the po_box of this Address.

        The P.O. box of the address.

        :return: The po_box of this Address.
        :rtype: str
        """
        return self._po_box

    @po_box.setter
    def po_box(self, po_box):
        """Sets the po_box of this Address.

        The P.O. box of the address.

        :param po_box: The po_box of this Address.
        :type po_box: str
        """

        self._po_box = po_box

    @property
    def postal_code(self):
        """Gets the postal_code of this Address.

        The postal code of the address.

        :return: The postal_code of this Address.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Address.

        The postal code of the address.

        :param postal_code: The postal_code of this Address.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def region(self):
        """Gets the region of this Address.

        The region of the address; for example, the state or province.

        :return: The region of this Address.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Address.

        The region of the address; for example, the state or province.

        :param region: The region of this Address.
        :type region: str
        """

        self._region = region

    @property
    def street_address(self):
        """Gets the street_address of this Address.

        The street address.

        :return: The street_address of this Address.
        :rtype: str
        """
        return self._street_address

    @street_address.setter
    def street_address(self, street_address):
        """Sets the street_address of this Address.

        The street address.

        :param street_address: The street_address of this Address.
        :type street_address: str
        """

        self._street_address = street_address

    @property
    def type(self):
        """Gets the type of this Address.

        The type of the address. The type can be custom or one of these predefined values: * `home` * `work` * `other`

        :return: The type of this Address.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Address.

        The type of the address. The type can be custom or one of these predefined values: * `home` * `work` * `other`

        :param type: The type of this Address.
        :type type: str
        """

        self._type = type
