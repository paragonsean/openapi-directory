# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.person import Person
from openapi_server import util


class BatchUpdateContactsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contacts: Dict[str, Person]=None, read_mask: str=None, sources: List[str]=None, update_mask: str=None):
        """BatchUpdateContactsRequest - a model defined in OpenAPI

        :param contacts: The contacts of this BatchUpdateContactsRequest.
        :param read_mask: The read_mask of this BatchUpdateContactsRequest.
        :param sources: The sources of this BatchUpdateContactsRequest.
        :param update_mask: The update_mask of this BatchUpdateContactsRequest.
        """
        self.openapi_types = {
            'contacts': Dict[str, Person],
            'read_mask': str,
            'sources': List[str],
            'update_mask': str
        }

        self.attribute_map = {
            'contacts': 'contacts',
            'read_mask': 'readMask',
            'sources': 'sources',
            'update_mask': 'updateMask'
        }

        self._contacts = contacts
        self._read_mask = read_mask
        self._sources = sources
        self._update_mask = update_mask

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchUpdateContactsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchUpdateContactsRequest of this BatchUpdateContactsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contacts(self):
        """Gets the contacts of this BatchUpdateContactsRequest.

        Required. A map of resource names to the person data to be updated. Allows up to 200 contacts in a single request.

        :return: The contacts of this BatchUpdateContactsRequest.
        :rtype: Dict[str, Person]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this BatchUpdateContactsRequest.

        Required. A map of resource names to the person data to be updated. Allows up to 200 contacts in a single request.

        :param contacts: The contacts of this BatchUpdateContactsRequest.
        :type contacts: Dict[str, Person]
        """

        self._contacts = contacts

    @property
    def read_mask(self):
        """Gets the read_mask of this BatchUpdateContactsRequest.

        Required. A field mask to restrict which fields on each person are returned. Multiple fields can be specified by separating them with commas. If read mask is left empty, the post-mutate-get is skipped and no data will be returned in the response. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined

        :return: The read_mask of this BatchUpdateContactsRequest.
        :rtype: str
        """
        return self._read_mask

    @read_mask.setter
    def read_mask(self, read_mask):
        """Sets the read_mask of this BatchUpdateContactsRequest.

        Required. A field mask to restrict which fields on each person are returned. Multiple fields can be specified by separating them with commas. If read mask is left empty, the post-mutate-get is skipped and no data will be returned in the response. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined

        :param read_mask: The read_mask of this BatchUpdateContactsRequest.
        :type read_mask: str
        """

        self._read_mask = read_mask

    @property
    def sources(self):
        """Gets the sources of this BatchUpdateContactsRequest.

        Optional. A mask of what source types to return. Defaults to READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.

        :return: The sources of this BatchUpdateContactsRequest.
        :rtype: List[str]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this BatchUpdateContactsRequest.

        Optional. A mask of what source types to return. Defaults to READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.

        :param sources: The sources of this BatchUpdateContactsRequest.
        :type sources: List[str]
        """
        allowed_values = ["READ_SOURCE_TYPE_UNSPECIFIED", "READ_SOURCE_TYPE_PROFILE", "READ_SOURCE_TYPE_CONTACT", "READ_SOURCE_TYPE_DOMAIN_CONTACT"]  # noqa: E501
        if not set(sources).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `sources` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(sources) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._sources = sources

    @property
    def update_mask(self):
        """Gets the update_mask of this BatchUpdateContactsRequest.

        Required. A field mask to restrict which fields on the person are updated. Multiple fields can be specified by separating them with commas. All specified fields will be replaced, or cleared if left empty for each person. Valid values are: * addresses * biographies * birthdays * calendarUrls * clientData * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * relations * sipAddresses * urls * userDefined

        :return: The update_mask of this BatchUpdateContactsRequest.
        :rtype: str
        """
        return self._update_mask

    @update_mask.setter
    def update_mask(self, update_mask):
        """Sets the update_mask of this BatchUpdateContactsRequest.

        Required. A field mask to restrict which fields on the person are updated. Multiple fields can be specified by separating them with commas. All specified fields will be replaced, or cleared if left empty for each person. Valid values are: * addresses * biographies * birthdays * calendarUrls * clientData * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * relations * sipAddresses * urls * userDefined

        :param update_mask: The update_mask of this BatchUpdateContactsRequest.
        :type update_mask: str
        """

        self._update_mask = update_mask
