# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact_group_metadata import ContactGroupMetadata
from openapi_server.models.group_client_data import GroupClientData
from openapi_server import util


class ContactGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_data: List[GroupClientData]=None, etag: str=None, formatted_name: str=None, group_type: str=None, member_count: int=None, member_resource_names: List[str]=None, metadata: ContactGroupMetadata=None, name: str=None, resource_name: str=None):
        """ContactGroup - a model defined in OpenAPI

        :param client_data: The client_data of this ContactGroup.
        :param etag: The etag of this ContactGroup.
        :param formatted_name: The formatted_name of this ContactGroup.
        :param group_type: The group_type of this ContactGroup.
        :param member_count: The member_count of this ContactGroup.
        :param member_resource_names: The member_resource_names of this ContactGroup.
        :param metadata: The metadata of this ContactGroup.
        :param name: The name of this ContactGroup.
        :param resource_name: The resource_name of this ContactGroup.
        """
        self.openapi_types = {
            'client_data': List[GroupClientData],
            'etag': str,
            'formatted_name': str,
            'group_type': str,
            'member_count': int,
            'member_resource_names': List[str],
            'metadata': ContactGroupMetadata,
            'name': str,
            'resource_name': str
        }

        self.attribute_map = {
            'client_data': 'clientData',
            'etag': 'etag',
            'formatted_name': 'formattedName',
            'group_type': 'groupType',
            'member_count': 'memberCount',
            'member_resource_names': 'memberResourceNames',
            'metadata': 'metadata',
            'name': 'name',
            'resource_name': 'resourceName'
        }

        self._client_data = client_data
        self._etag = etag
        self._formatted_name = formatted_name
        self._group_type = group_type
        self._member_count = member_count
        self._member_resource_names = member_resource_names
        self._metadata = metadata
        self._name = name
        self._resource_name = resource_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContactGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContactGroup of this ContactGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_data(self):
        """Gets the client_data of this ContactGroup.

        The group's client data.

        :return: The client_data of this ContactGroup.
        :rtype: List[GroupClientData]
        """
        return self._client_data

    @client_data.setter
    def client_data(self, client_data):
        """Sets the client_data of this ContactGroup.

        The group's client data.

        :param client_data: The client_data of this ContactGroup.
        :type client_data: List[GroupClientData]
        """

        self._client_data = client_data

    @property
    def etag(self):
        """Gets the etag of this ContactGroup.

        The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the resource. Used for web cache validation.

        :return: The etag of this ContactGroup.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this ContactGroup.

        The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the resource. Used for web cache validation.

        :param etag: The etag of this ContactGroup.
        :type etag: str
        """

        self._etag = etag

    @property
    def formatted_name(self):
        """Gets the formatted_name of this ContactGroup.

        Output only. The name translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale for system groups names. Group names set by the owner are the same as name.

        :return: The formatted_name of this ContactGroup.
        :rtype: str
        """
        return self._formatted_name

    @formatted_name.setter
    def formatted_name(self, formatted_name):
        """Sets the formatted_name of this ContactGroup.

        Output only. The name translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale for system groups names. Group names set by the owner are the same as name.

        :param formatted_name: The formatted_name of this ContactGroup.
        :type formatted_name: str
        """

        self._formatted_name = formatted_name

    @property
    def group_type(self):
        """Gets the group_type of this ContactGroup.

        Output only. The contact group type.

        :return: The group_type of this ContactGroup.
        :rtype: str
        """
        return self._group_type

    @group_type.setter
    def group_type(self, group_type):
        """Sets the group_type of this ContactGroup.

        Output only. The contact group type.

        :param group_type: The group_type of this ContactGroup.
        :type group_type: str
        """
        allowed_values = ["GROUP_TYPE_UNSPECIFIED", "USER_CONTACT_GROUP", "SYSTEM_CONTACT_GROUP"]  # noqa: E501
        if group_type not in allowed_values:
            raise ValueError(
                "Invalid value for `group_type` ({0}), must be one of {1}"
                .format(group_type, allowed_values)
            )

        self._group_type = group_type

    @property
    def member_count(self):
        """Gets the member_count of this ContactGroup.

        Output only. The total number of contacts in the group irrespective of max members in specified in the request.

        :return: The member_count of this ContactGroup.
        :rtype: int
        """
        return self._member_count

    @member_count.setter
    def member_count(self, member_count):
        """Sets the member_count of this ContactGroup.

        Output only. The total number of contacts in the group irrespective of max members in specified in the request.

        :param member_count: The member_count of this ContactGroup.
        :type member_count: int
        """

        self._member_count = member_count

    @property
    def member_resource_names(self):
        """Gets the member_resource_names of this ContactGroup.

        Output only. The list of contact person resource names that are members of the contact group. The field is only populated for GET requests and will only return as many members as `maxMembers` in the get request.

        :return: The member_resource_names of this ContactGroup.
        :rtype: List[str]
        """
        return self._member_resource_names

    @member_resource_names.setter
    def member_resource_names(self, member_resource_names):
        """Sets the member_resource_names of this ContactGroup.

        Output only. The list of contact person resource names that are members of the contact group. The field is only populated for GET requests and will only return as many members as `maxMembers` in the get request.

        :param member_resource_names: The member_resource_names of this ContactGroup.
        :type member_resource_names: List[str]
        """

        self._member_resource_names = member_resource_names

    @property
    def metadata(self):
        """Gets the metadata of this ContactGroup.


        :return: The metadata of this ContactGroup.
        :rtype: ContactGroupMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ContactGroup.


        :param metadata: The metadata of this ContactGroup.
        :type metadata: ContactGroupMetadata
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this ContactGroup.

        The contact group name set by the group owner or a system provided name for system groups. For [`contactGroups.create`](/people/api/rest/v1/contactGroups/create) or [`contactGroups.update`](/people/api/rest/v1/contactGroups/update) the name must be unique to the users contact groups. Attempting to create a group with a duplicate name will return a HTTP 409 error.

        :return: The name of this ContactGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContactGroup.

        The contact group name set by the group owner or a system provided name for system groups. For [`contactGroups.create`](/people/api/rest/v1/contactGroups/create) or [`contactGroups.update`](/people/api/rest/v1/contactGroups/update) the name must be unique to the users contact groups. Attempting to create a group with a duplicate name will return a HTTP 409 error.

        :param name: The name of this ContactGroup.
        :type name: str
        """

        self._name = name

    @property
    def resource_name(self):
        """Gets the resource_name of this ContactGroup.

        The resource name for the contact group, assigned by the server. An ASCII string, in the form of `contactGroups/{contact_group_id}`.

        :return: The resource_name of this ContactGroup.
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this ContactGroup.

        The resource name for the contact group, assigned by the server. An ASCII string, in the form of `contactGroups/{contact_group_id}`.

        :param resource_name: The resource_name of this ContactGroup.
        :type resource_name: str
        """

        self._resource_name = resource_name
