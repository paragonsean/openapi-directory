# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateContactPhotoRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, person_fields: str=None, photo_bytes: str=None, sources: List[str]=None):
        """UpdateContactPhotoRequest - a model defined in OpenAPI

        :param person_fields: The person_fields of this UpdateContactPhotoRequest.
        :param photo_bytes: The photo_bytes of this UpdateContactPhotoRequest.
        :param sources: The sources of this UpdateContactPhotoRequest.
        """
        self.openapi_types = {
            'person_fields': str,
            'photo_bytes': str,
            'sources': List[str]
        }

        self.attribute_map = {
            'person_fields': 'personFields',
            'photo_bytes': 'photoBytes',
            'sources': 'sources'
        }

        self._person_fields = person_fields
        self._photo_bytes = photo_bytes
        self._sources = sources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateContactPhotoRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateContactPhotoRequest of this UpdateContactPhotoRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def person_fields(self):
        """Gets the person_fields of this UpdateContactPhotoRequest.

        Optional. A field mask to restrict which fields on the person are returned. Multiple fields can be specified by separating them with commas. Defaults to empty if not set, which will skip the post mutate get. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined

        :return: The person_fields of this UpdateContactPhotoRequest.
        :rtype: str
        """
        return self._person_fields

    @person_fields.setter
    def person_fields(self, person_fields):
        """Sets the person_fields of this UpdateContactPhotoRequest.

        Optional. A field mask to restrict which fields on the person are returned. Multiple fields can be specified by separating them with commas. Defaults to empty if not set, which will skip the post mutate get. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined

        :param person_fields: The person_fields of this UpdateContactPhotoRequest.
        :type person_fields: str
        """

        self._person_fields = person_fields

    @property
    def photo_bytes(self):
        """Gets the photo_bytes of this UpdateContactPhotoRequest.

        Required. Raw photo bytes

        :return: The photo_bytes of this UpdateContactPhotoRequest.
        :rtype: str
        """
        return self._photo_bytes

    @photo_bytes.setter
    def photo_bytes(self, photo_bytes):
        """Sets the photo_bytes of this UpdateContactPhotoRequest.

        Required. Raw photo bytes

        :param photo_bytes: The photo_bytes of this UpdateContactPhotoRequest.
        :type photo_bytes: str
        """

        self._photo_bytes = photo_bytes

    @property
    def sources(self):
        """Gets the sources of this UpdateContactPhotoRequest.

        Optional. A mask of what source types to return. Defaults to READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.

        :return: The sources of this UpdateContactPhotoRequest.
        :rtype: List[str]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this UpdateContactPhotoRequest.

        Optional. A mask of what source types to return. Defaults to READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.

        :param sources: The sources of this UpdateContactPhotoRequest.
        :type sources: List[str]
        """
        allowed_values = ["READ_SOURCE_TYPE_UNSPECIFIED", "READ_SOURCE_TYPE_PROFILE", "READ_SOURCE_TYPE_CONTACT", "READ_SOURCE_TYPE_DOMAIN_CONTACT"]  # noqa: E501
        if not set(sources).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `sources` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(sources) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._sources = sources
