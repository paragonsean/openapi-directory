# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.field_metadata import FieldMetadata
from openapi_server import util


class MiscKeyword(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, formatted_type: str=None, metadata: FieldMetadata=None, type: str=None, value: str=None):
        """MiscKeyword - a model defined in OpenAPI

        :param formatted_type: The formatted_type of this MiscKeyword.
        :param metadata: The metadata of this MiscKeyword.
        :param type: The type of this MiscKeyword.
        :param value: The value of this MiscKeyword.
        """
        self.openapi_types = {
            'formatted_type': str,
            'metadata': FieldMetadata,
            'type': str,
            'value': str
        }

        self.attribute_map = {
            'formatted_type': 'formattedType',
            'metadata': 'metadata',
            'type': 'type',
            'value': 'value'
        }

        self._formatted_type = formatted_type
        self._metadata = metadata
        self._type = type
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MiscKeyword':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MiscKeyword of this MiscKeyword.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def formatted_type(self):
        """Gets the formatted_type of this MiscKeyword.

        Output only. The type of the miscellaneous keyword translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.

        :return: The formatted_type of this MiscKeyword.
        :rtype: str
        """
        return self._formatted_type

    @formatted_type.setter
    def formatted_type(self, formatted_type):
        """Sets the formatted_type of this MiscKeyword.

        Output only. The type of the miscellaneous keyword translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.

        :param formatted_type: The formatted_type of this MiscKeyword.
        :type formatted_type: str
        """

        self._formatted_type = formatted_type

    @property
    def metadata(self):
        """Gets the metadata of this MiscKeyword.


        :return: The metadata of this MiscKeyword.
        :rtype: FieldMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this MiscKeyword.


        :param metadata: The metadata of this MiscKeyword.
        :type metadata: FieldMetadata
        """

        self._metadata = metadata

    @property
    def type(self):
        """Gets the type of this MiscKeyword.

        The miscellaneous keyword type.

        :return: The type of this MiscKeyword.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MiscKeyword.

        The miscellaneous keyword type.

        :param type: The type of this MiscKeyword.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "OUTLOOK_BILLING_INFORMATION", "OUTLOOK_DIRECTORY_SERVER", "OUTLOOK_KEYWORD", "OUTLOOK_MILEAGE", "OUTLOOK_PRIORITY", "OUTLOOK_SENSITIVITY", "OUTLOOK_SUBJECT", "OUTLOOK_USER", "HOME", "WORK", "OTHER"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def value(self):
        """Gets the value of this MiscKeyword.

        The value of the miscellaneous keyword.

        :return: The value of this MiscKeyword.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this MiscKeyword.

        The value of the miscellaneous keyword.

        :param value: The value of this MiscKeyword.
        :type value: str
        """

        self._value = value
