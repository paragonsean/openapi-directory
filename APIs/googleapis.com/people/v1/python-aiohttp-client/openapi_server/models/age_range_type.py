# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.field_metadata import FieldMetadata
from openapi_server import util


class AgeRangeType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, age_range: str=None, metadata: FieldMetadata=None):
        """AgeRangeType - a model defined in OpenAPI

        :param age_range: The age_range of this AgeRangeType.
        :param metadata: The metadata of this AgeRangeType.
        """
        self.openapi_types = {
            'age_range': str,
            'metadata': FieldMetadata
        }

        self.attribute_map = {
            'age_range': 'ageRange',
            'metadata': 'metadata'
        }

        self._age_range = age_range
        self._metadata = metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AgeRangeType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AgeRangeType of this AgeRangeType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def age_range(self):
        """Gets the age_range of this AgeRangeType.

        The age range.

        :return: The age_range of this AgeRangeType.
        :rtype: str
        """
        return self._age_range

    @age_range.setter
    def age_range(self, age_range):
        """Sets the age_range of this AgeRangeType.

        The age range.

        :param age_range: The age_range of this AgeRangeType.
        :type age_range: str
        """
        allowed_values = ["AGE_RANGE_UNSPECIFIED", "LESS_THAN_EIGHTEEN", "EIGHTEEN_TO_TWENTY", "TWENTY_ONE_OR_OLDER"]  # noqa: E501
        if age_range not in allowed_values:
            raise ValueError(
                "Invalid value for `age_range` ({0}), must be one of {1}"
                .format(age_range, allowed_values)
            )

        self._age_range = age_range

    @property
    def metadata(self):
        """Gets the metadata of this AgeRangeType.


        :return: The metadata of this AgeRangeType.
        :rtype: FieldMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this AgeRangeType.


        :param metadata: The metadata of this AgeRangeType.
        :type metadata: FieldMetadata
        """

        self._metadata = metadata
