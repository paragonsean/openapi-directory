# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.field_metadata import FieldMetadata
from openapi_server.models.model_date import ModelDate
from openapi_server import util


class Organization(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost_center: str=None, current: bool=None, department: str=None, domain: str=None, end_date: ModelDate=None, formatted_type: str=None, full_time_equivalent_millipercent: int=None, job_description: str=None, location: str=None, metadata: FieldMetadata=None, name: str=None, phonetic_name: str=None, start_date: ModelDate=None, symbol: str=None, title: str=None, type: str=None):
        """Organization - a model defined in OpenAPI

        :param cost_center: The cost_center of this Organization.
        :param current: The current of this Organization.
        :param department: The department of this Organization.
        :param domain: The domain of this Organization.
        :param end_date: The end_date of this Organization.
        :param formatted_type: The formatted_type of this Organization.
        :param full_time_equivalent_millipercent: The full_time_equivalent_millipercent of this Organization.
        :param job_description: The job_description of this Organization.
        :param location: The location of this Organization.
        :param metadata: The metadata of this Organization.
        :param name: The name of this Organization.
        :param phonetic_name: The phonetic_name of this Organization.
        :param start_date: The start_date of this Organization.
        :param symbol: The symbol of this Organization.
        :param title: The title of this Organization.
        :param type: The type of this Organization.
        """
        self.openapi_types = {
            'cost_center': str,
            'current': bool,
            'department': str,
            'domain': str,
            'end_date': ModelDate,
            'formatted_type': str,
            'full_time_equivalent_millipercent': int,
            'job_description': str,
            'location': str,
            'metadata': FieldMetadata,
            'name': str,
            'phonetic_name': str,
            'start_date': ModelDate,
            'symbol': str,
            'title': str,
            'type': str
        }

        self.attribute_map = {
            'cost_center': 'costCenter',
            'current': 'current',
            'department': 'department',
            'domain': 'domain',
            'end_date': 'endDate',
            'formatted_type': 'formattedType',
            'full_time_equivalent_millipercent': 'fullTimeEquivalentMillipercent',
            'job_description': 'jobDescription',
            'location': 'location',
            'metadata': 'metadata',
            'name': 'name',
            'phonetic_name': 'phoneticName',
            'start_date': 'startDate',
            'symbol': 'symbol',
            'title': 'title',
            'type': 'type'
        }

        self._cost_center = cost_center
        self._current = current
        self._department = department
        self._domain = domain
        self._end_date = end_date
        self._formatted_type = formatted_type
        self._full_time_equivalent_millipercent = full_time_equivalent_millipercent
        self._job_description = job_description
        self._location = location
        self._metadata = metadata
        self._name = name
        self._phonetic_name = phonetic_name
        self._start_date = start_date
        self._symbol = symbol
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Organization':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Organization of this Organization.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost_center(self):
        """Gets the cost_center of this Organization.

        The person's cost center at the organization.

        :return: The cost_center of this Organization.
        :rtype: str
        """
        return self._cost_center

    @cost_center.setter
    def cost_center(self, cost_center):
        """Sets the cost_center of this Organization.

        The person's cost center at the organization.

        :param cost_center: The cost_center of this Organization.
        :type cost_center: str
        """

        self._cost_center = cost_center

    @property
    def current(self):
        """Gets the current of this Organization.

        True if the organization is the person's current organization; false if the organization is a past organization.

        :return: The current of this Organization.
        :rtype: bool
        """
        return self._current

    @current.setter
    def current(self, current):
        """Sets the current of this Organization.

        True if the organization is the person's current organization; false if the organization is a past organization.

        :param current: The current of this Organization.
        :type current: bool
        """

        self._current = current

    @property
    def department(self):
        """Gets the department of this Organization.

        The person's department at the organization.

        :return: The department of this Organization.
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this Organization.

        The person's department at the organization.

        :param department: The department of this Organization.
        :type department: str
        """

        self._department = department

    @property
    def domain(self):
        """Gets the domain of this Organization.

        The domain name associated with the organization; for example, `google.com`.

        :return: The domain of this Organization.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this Organization.

        The domain name associated with the organization; for example, `google.com`.

        :param domain: The domain of this Organization.
        :type domain: str
        """

        self._domain = domain

    @property
    def end_date(self):
        """Gets the end_date of this Organization.


        :return: The end_date of this Organization.
        :rtype: ModelDate
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Organization.


        :param end_date: The end_date of this Organization.
        :type end_date: ModelDate
        """

        self._end_date = end_date

    @property
    def formatted_type(self):
        """Gets the formatted_type of this Organization.

        Output only. The type of the organization translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.

        :return: The formatted_type of this Organization.
        :rtype: str
        """
        return self._formatted_type

    @formatted_type.setter
    def formatted_type(self, formatted_type):
        """Sets the formatted_type of this Organization.

        Output only. The type of the organization translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.

        :param formatted_type: The formatted_type of this Organization.
        :type formatted_type: str
        """

        self._formatted_type = formatted_type

    @property
    def full_time_equivalent_millipercent(self):
        """Gets the full_time_equivalent_millipercent of this Organization.

        The person's full-time equivalent millipercent within the organization (100000 = 100%).

        :return: The full_time_equivalent_millipercent of this Organization.
        :rtype: int
        """
        return self._full_time_equivalent_millipercent

    @full_time_equivalent_millipercent.setter
    def full_time_equivalent_millipercent(self, full_time_equivalent_millipercent):
        """Sets the full_time_equivalent_millipercent of this Organization.

        The person's full-time equivalent millipercent within the organization (100000 = 100%).

        :param full_time_equivalent_millipercent: The full_time_equivalent_millipercent of this Organization.
        :type full_time_equivalent_millipercent: int
        """

        self._full_time_equivalent_millipercent = full_time_equivalent_millipercent

    @property
    def job_description(self):
        """Gets the job_description of this Organization.

        The person's job description at the organization.

        :return: The job_description of this Organization.
        :rtype: str
        """
        return self._job_description

    @job_description.setter
    def job_description(self, job_description):
        """Sets the job_description of this Organization.

        The person's job description at the organization.

        :param job_description: The job_description of this Organization.
        :type job_description: str
        """

        self._job_description = job_description

    @property
    def location(self):
        """Gets the location of this Organization.

        The location of the organization office the person works at.

        :return: The location of this Organization.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Organization.

        The location of the organization office the person works at.

        :param location: The location of this Organization.
        :type location: str
        """

        self._location = location

    @property
    def metadata(self):
        """Gets the metadata of this Organization.


        :return: The metadata of this Organization.
        :rtype: FieldMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Organization.


        :param metadata: The metadata of this Organization.
        :type metadata: FieldMetadata
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this Organization.

        The name of the organization.

        :return: The name of this Organization.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Organization.

        The name of the organization.

        :param name: The name of this Organization.
        :type name: str
        """

        self._name = name

    @property
    def phonetic_name(self):
        """Gets the phonetic_name of this Organization.

        The phonetic name of the organization.

        :return: The phonetic_name of this Organization.
        :rtype: str
        """
        return self._phonetic_name

    @phonetic_name.setter
    def phonetic_name(self, phonetic_name):
        """Sets the phonetic_name of this Organization.

        The phonetic name of the organization.

        :param phonetic_name: The phonetic_name of this Organization.
        :type phonetic_name: str
        """

        self._phonetic_name = phonetic_name

    @property
    def start_date(self):
        """Gets the start_date of this Organization.


        :return: The start_date of this Organization.
        :rtype: ModelDate
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Organization.


        :param start_date: The start_date of this Organization.
        :type start_date: ModelDate
        """

        self._start_date = start_date

    @property
    def symbol(self):
        """Gets the symbol of this Organization.

        The symbol associated with the organization; for example, a stock ticker symbol, abbreviation, or acronym.

        :return: The symbol of this Organization.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this Organization.

        The symbol associated with the organization; for example, a stock ticker symbol, abbreviation, or acronym.

        :param symbol: The symbol of this Organization.
        :type symbol: str
        """

        self._symbol = symbol

    @property
    def title(self):
        """Gets the title of this Organization.

        The person's job title at the organization.

        :return: The title of this Organization.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Organization.

        The person's job title at the organization.

        :param title: The title of this Organization.
        :type title: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this Organization.

        The type of the organization. The type can be custom or one of these predefined values: * `work` * `school`

        :return: The type of this Organization.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Organization.

        The type of the organization. The type can be custom or one of these predefined values: * `work` * `school`

        :param type: The type of this Organization.
        :type type: str
        """

        self._type = type
