# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact_to_create import ContactToCreate
from openapi_server import util


class BatchCreateContactsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contacts: List[ContactToCreate]=None, read_mask: str=None, sources: List[str]=None):
        """BatchCreateContactsRequest - a model defined in OpenAPI

        :param contacts: The contacts of this BatchCreateContactsRequest.
        :param read_mask: The read_mask of this BatchCreateContactsRequest.
        :param sources: The sources of this BatchCreateContactsRequest.
        """
        self.openapi_types = {
            'contacts': List[ContactToCreate],
            'read_mask': str,
            'sources': List[str]
        }

        self.attribute_map = {
            'contacts': 'contacts',
            'read_mask': 'readMask',
            'sources': 'sources'
        }

        self._contacts = contacts
        self._read_mask = read_mask
        self._sources = sources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchCreateContactsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchCreateContactsRequest of this BatchCreateContactsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contacts(self):
        """Gets the contacts of this BatchCreateContactsRequest.

        Required. The contact to create. Allows up to 200 contacts in a single request.

        :return: The contacts of this BatchCreateContactsRequest.
        :rtype: List[ContactToCreate]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this BatchCreateContactsRequest.

        Required. The contact to create. Allows up to 200 contacts in a single request.

        :param contacts: The contacts of this BatchCreateContactsRequest.
        :type contacts: List[ContactToCreate]
        """

        self._contacts = contacts

    @property
    def read_mask(self):
        """Gets the read_mask of this BatchCreateContactsRequest.

        Required. A field mask to restrict which fields on each person are returned in the response. Multiple fields can be specified by separating them with commas. If read mask is left empty, the post-mutate-get is skipped and no data will be returned in the response. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined

        :return: The read_mask of this BatchCreateContactsRequest.
        :rtype: str
        """
        return self._read_mask

    @read_mask.setter
    def read_mask(self, read_mask):
        """Sets the read_mask of this BatchCreateContactsRequest.

        Required. A field mask to restrict which fields on each person are returned in the response. Multiple fields can be specified by separating them with commas. If read mask is left empty, the post-mutate-get is skipped and no data will be returned in the response. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined

        :param read_mask: The read_mask of this BatchCreateContactsRequest.
        :type read_mask: str
        """

        self._read_mask = read_mask

    @property
    def sources(self):
        """Gets the sources of this BatchCreateContactsRequest.

        Optional. A mask of what source types to return in the post mutate read. Defaults to READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.

        :return: The sources of this BatchCreateContactsRequest.
        :rtype: List[str]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this BatchCreateContactsRequest.

        Optional. A mask of what source types to return in the post mutate read. Defaults to READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.

        :param sources: The sources of this BatchCreateContactsRequest.
        :type sources: List[str]
        """
        allowed_values = ["READ_SOURCE_TYPE_UNSPECIFIED", "READ_SOURCE_TYPE_PROFILE", "READ_SOURCE_TYPE_CONTACT", "READ_SOURCE_TYPE_DOMAIN_CONTACT"]  # noqa: E501
        if not set(sources).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `sources` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(sources) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._sources = sources
