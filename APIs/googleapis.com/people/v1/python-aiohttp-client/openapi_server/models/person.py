# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.age_range_type import AgeRangeType
from openapi_server.models.biography import Biography
from openapi_server.models.birthday import Birthday
from openapi_server.models.bragging_rights import BraggingRights
from openapi_server.models.calendar_url import CalendarUrl
from openapi_server.models.client_data import ClientData
from openapi_server.models.cover_photo import CoverPhoto
from openapi_server.models.email_address import EmailAddress
from openapi_server.models.event import Event
from openapi_server.models.external_id import ExternalId
from openapi_server.models.file_as import FileAs
from openapi_server.models.gender import Gender
from openapi_server.models.im_client import ImClient
from openapi_server.models.interest import Interest
from openapi_server.models.locale import Locale
from openapi_server.models.location import Location
from openapi_server.models.membership import Membership
from openapi_server.models.misc_keyword import MiscKeyword
from openapi_server.models.name import Name
from openapi_server.models.nickname import Nickname
from openapi_server.models.occupation import Occupation
from openapi_server.models.organization import Organization
from openapi_server.models.person_metadata import PersonMetadata
from openapi_server.models.phone_number import PhoneNumber
from openapi_server.models.photo import Photo
from openapi_server.models.relation import Relation
from openapi_server.models.relationship_interest import RelationshipInterest
from openapi_server.models.relationship_status import RelationshipStatus
from openapi_server.models.residence import Residence
from openapi_server.models.sip_address import SipAddress
from openapi_server.models.skill import Skill
from openapi_server.models.tagline import Tagline
from openapi_server.models.url import Url
from openapi_server.models.user_defined import UserDefined
from openapi_server import util


class Person(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, addresses: List[Address]=None, age_range: str=None, age_ranges: List[AgeRangeType]=None, biographies: List[Biography]=None, birthdays: List[Birthday]=None, bragging_rights: List[BraggingRights]=None, calendar_urls: List[CalendarUrl]=None, client_data: List[ClientData]=None, cover_photos: List[CoverPhoto]=None, email_addresses: List[EmailAddress]=None, etag: str=None, events: List[Event]=None, external_ids: List[ExternalId]=None, file_ases: List[FileAs]=None, genders: List[Gender]=None, im_clients: List[ImClient]=None, interests: List[Interest]=None, locales: List[Locale]=None, locations: List[Location]=None, memberships: List[Membership]=None, metadata: PersonMetadata=None, misc_keywords: List[MiscKeyword]=None, names: List[Name]=None, nicknames: List[Nickname]=None, occupations: List[Occupation]=None, organizations: List[Organization]=None, phone_numbers: List[PhoneNumber]=None, photos: List[Photo]=None, relations: List[Relation]=None, relationship_interests: List[RelationshipInterest]=None, relationship_statuses: List[RelationshipStatus]=None, residences: List[Residence]=None, resource_name: str=None, sip_addresses: List[SipAddress]=None, skills: List[Skill]=None, taglines: List[Tagline]=None, urls: List[Url]=None, user_defined: List[UserDefined]=None):
        """Person - a model defined in OpenAPI

        :param addresses: The addresses of this Person.
        :param age_range: The age_range of this Person.
        :param age_ranges: The age_ranges of this Person.
        :param biographies: The biographies of this Person.
        :param birthdays: The birthdays of this Person.
        :param bragging_rights: The bragging_rights of this Person.
        :param calendar_urls: The calendar_urls of this Person.
        :param client_data: The client_data of this Person.
        :param cover_photos: The cover_photos of this Person.
        :param email_addresses: The email_addresses of this Person.
        :param etag: The etag of this Person.
        :param events: The events of this Person.
        :param external_ids: The external_ids of this Person.
        :param file_ases: The file_ases of this Person.
        :param genders: The genders of this Person.
        :param im_clients: The im_clients of this Person.
        :param interests: The interests of this Person.
        :param locales: The locales of this Person.
        :param locations: The locations of this Person.
        :param memberships: The memberships of this Person.
        :param metadata: The metadata of this Person.
        :param misc_keywords: The misc_keywords of this Person.
        :param names: The names of this Person.
        :param nicknames: The nicknames of this Person.
        :param occupations: The occupations of this Person.
        :param organizations: The organizations of this Person.
        :param phone_numbers: The phone_numbers of this Person.
        :param photos: The photos of this Person.
        :param relations: The relations of this Person.
        :param relationship_interests: The relationship_interests of this Person.
        :param relationship_statuses: The relationship_statuses of this Person.
        :param residences: The residences of this Person.
        :param resource_name: The resource_name of this Person.
        :param sip_addresses: The sip_addresses of this Person.
        :param skills: The skills of this Person.
        :param taglines: The taglines of this Person.
        :param urls: The urls of this Person.
        :param user_defined: The user_defined of this Person.
        """
        self.openapi_types = {
            'addresses': List[Address],
            'age_range': str,
            'age_ranges': List[AgeRangeType],
            'biographies': List[Biography],
            'birthdays': List[Birthday],
            'bragging_rights': List[BraggingRights],
            'calendar_urls': List[CalendarUrl],
            'client_data': List[ClientData],
            'cover_photos': List[CoverPhoto],
            'email_addresses': List[EmailAddress],
            'etag': str,
            'events': List[Event],
            'external_ids': List[ExternalId],
            'file_ases': List[FileAs],
            'genders': List[Gender],
            'im_clients': List[ImClient],
            'interests': List[Interest],
            'locales': List[Locale],
            'locations': List[Location],
            'memberships': List[Membership],
            'metadata': PersonMetadata,
            'misc_keywords': List[MiscKeyword],
            'names': List[Name],
            'nicknames': List[Nickname],
            'occupations': List[Occupation],
            'organizations': List[Organization],
            'phone_numbers': List[PhoneNumber],
            'photos': List[Photo],
            'relations': List[Relation],
            'relationship_interests': List[RelationshipInterest],
            'relationship_statuses': List[RelationshipStatus],
            'residences': List[Residence],
            'resource_name': str,
            'sip_addresses': List[SipAddress],
            'skills': List[Skill],
            'taglines': List[Tagline],
            'urls': List[Url],
            'user_defined': List[UserDefined]
        }

        self.attribute_map = {
            'addresses': 'addresses',
            'age_range': 'ageRange',
            'age_ranges': 'ageRanges',
            'biographies': 'biographies',
            'birthdays': 'birthdays',
            'bragging_rights': 'braggingRights',
            'calendar_urls': 'calendarUrls',
            'client_data': 'clientData',
            'cover_photos': 'coverPhotos',
            'email_addresses': 'emailAddresses',
            'etag': 'etag',
            'events': 'events',
            'external_ids': 'externalIds',
            'file_ases': 'fileAses',
            'genders': 'genders',
            'im_clients': 'imClients',
            'interests': 'interests',
            'locales': 'locales',
            'locations': 'locations',
            'memberships': 'memberships',
            'metadata': 'metadata',
            'misc_keywords': 'miscKeywords',
            'names': 'names',
            'nicknames': 'nicknames',
            'occupations': 'occupations',
            'organizations': 'organizations',
            'phone_numbers': 'phoneNumbers',
            'photos': 'photos',
            'relations': 'relations',
            'relationship_interests': 'relationshipInterests',
            'relationship_statuses': 'relationshipStatuses',
            'residences': 'residences',
            'resource_name': 'resourceName',
            'sip_addresses': 'sipAddresses',
            'skills': 'skills',
            'taglines': 'taglines',
            'urls': 'urls',
            'user_defined': 'userDefined'
        }

        self._addresses = addresses
        self._age_range = age_range
        self._age_ranges = age_ranges
        self._biographies = biographies
        self._birthdays = birthdays
        self._bragging_rights = bragging_rights
        self._calendar_urls = calendar_urls
        self._client_data = client_data
        self._cover_photos = cover_photos
        self._email_addresses = email_addresses
        self._etag = etag
        self._events = events
        self._external_ids = external_ids
        self._file_ases = file_ases
        self._genders = genders
        self._im_clients = im_clients
        self._interests = interests
        self._locales = locales
        self._locations = locations
        self._memberships = memberships
        self._metadata = metadata
        self._misc_keywords = misc_keywords
        self._names = names
        self._nicknames = nicknames
        self._occupations = occupations
        self._organizations = organizations
        self._phone_numbers = phone_numbers
        self._photos = photos
        self._relations = relations
        self._relationship_interests = relationship_interests
        self._relationship_statuses = relationship_statuses
        self._residences = residences
        self._resource_name = resource_name
        self._sip_addresses = sip_addresses
        self._skills = skills
        self._taglines = taglines
        self._urls = urls
        self._user_defined = user_defined

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Person':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Person of this Person.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def addresses(self):
        """Gets the addresses of this Person.

        The person's street addresses.

        :return: The addresses of this Person.
        :rtype: List[Address]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this Person.

        The person's street addresses.

        :param addresses: The addresses of this Person.
        :type addresses: List[Address]
        """

        self._addresses = addresses

    @property
    def age_range(self):
        """Gets the age_range of this Person.

        Output only. **DEPRECATED** (Please use `person.ageRanges` instead) The person's age range.

        :return: The age_range of this Person.
        :rtype: str
        """
        return self._age_range

    @age_range.setter
    def age_range(self, age_range):
        """Sets the age_range of this Person.

        Output only. **DEPRECATED** (Please use `person.ageRanges` instead) The person's age range.

        :param age_range: The age_range of this Person.
        :type age_range: str
        """
        allowed_values = ["AGE_RANGE_UNSPECIFIED", "LESS_THAN_EIGHTEEN", "EIGHTEEN_TO_TWENTY", "TWENTY_ONE_OR_OLDER"]  # noqa: E501
        if age_range not in allowed_values:
            raise ValueError(
                "Invalid value for `age_range` ({0}), must be one of {1}"
                .format(age_range, allowed_values)
            )

        self._age_range = age_range

    @property
    def age_ranges(self):
        """Gets the age_ranges of this Person.

        Output only. The person's age ranges.

        :return: The age_ranges of this Person.
        :rtype: List[AgeRangeType]
        """
        return self._age_ranges

    @age_ranges.setter
    def age_ranges(self, age_ranges):
        """Sets the age_ranges of this Person.

        Output only. The person's age ranges.

        :param age_ranges: The age_ranges of this Person.
        :type age_ranges: List[AgeRangeType]
        """

        self._age_ranges = age_ranges

    @property
    def biographies(self):
        """Gets the biographies of this Person.

        The person's biographies. This field is a singleton for contact sources.

        :return: The biographies of this Person.
        :rtype: List[Biography]
        """
        return self._biographies

    @biographies.setter
    def biographies(self, biographies):
        """Sets the biographies of this Person.

        The person's biographies. This field is a singleton for contact sources.

        :param biographies: The biographies of this Person.
        :type biographies: List[Biography]
        """

        self._biographies = biographies

    @property
    def birthdays(self):
        """Gets the birthdays of this Person.

        The person's birthdays. This field is a singleton for contact sources.

        :return: The birthdays of this Person.
        :rtype: List[Birthday]
        """
        return self._birthdays

    @birthdays.setter
    def birthdays(self, birthdays):
        """Sets the birthdays of this Person.

        The person's birthdays. This field is a singleton for contact sources.

        :param birthdays: The birthdays of this Person.
        :type birthdays: List[Birthday]
        """

        self._birthdays = birthdays

    @property
    def bragging_rights(self):
        """Gets the bragging_rights of this Person.

        **DEPRECATED**: No data will be returned The person's bragging rights.

        :return: The bragging_rights of this Person.
        :rtype: List[BraggingRights]
        """
        return self._bragging_rights

    @bragging_rights.setter
    def bragging_rights(self, bragging_rights):
        """Sets the bragging_rights of this Person.

        **DEPRECATED**: No data will be returned The person's bragging rights.

        :param bragging_rights: The bragging_rights of this Person.
        :type bragging_rights: List[BraggingRights]
        """

        self._bragging_rights = bragging_rights

    @property
    def calendar_urls(self):
        """Gets the calendar_urls of this Person.

        The person's calendar URLs.

        :return: The calendar_urls of this Person.
        :rtype: List[CalendarUrl]
        """
        return self._calendar_urls

    @calendar_urls.setter
    def calendar_urls(self, calendar_urls):
        """Sets the calendar_urls of this Person.

        The person's calendar URLs.

        :param calendar_urls: The calendar_urls of this Person.
        :type calendar_urls: List[CalendarUrl]
        """

        self._calendar_urls = calendar_urls

    @property
    def client_data(self):
        """Gets the client_data of this Person.

        The person's client data.

        :return: The client_data of this Person.
        :rtype: List[ClientData]
        """
        return self._client_data

    @client_data.setter
    def client_data(self, client_data):
        """Sets the client_data of this Person.

        The person's client data.

        :param client_data: The client_data of this Person.
        :type client_data: List[ClientData]
        """

        self._client_data = client_data

    @property
    def cover_photos(self):
        """Gets the cover_photos of this Person.

        Output only. The person's cover photos.

        :return: The cover_photos of this Person.
        :rtype: List[CoverPhoto]
        """
        return self._cover_photos

    @cover_photos.setter
    def cover_photos(self, cover_photos):
        """Sets the cover_photos of this Person.

        Output only. The person's cover photos.

        :param cover_photos: The cover_photos of this Person.
        :type cover_photos: List[CoverPhoto]
        """

        self._cover_photos = cover_photos

    @property
    def email_addresses(self):
        """Gets the email_addresses of this Person.

        The person's email addresses. For `people.connections.list` and `otherContacts.list` the number of email addresses is limited to 100. If a Person has more email addresses the entire set can be obtained by calling GetPeople.

        :return: The email_addresses of this Person.
        :rtype: List[EmailAddress]
        """
        return self._email_addresses

    @email_addresses.setter
    def email_addresses(self, email_addresses):
        """Sets the email_addresses of this Person.

        The person's email addresses. For `people.connections.list` and `otherContacts.list` the number of email addresses is limited to 100. If a Person has more email addresses the entire set can be obtained by calling GetPeople.

        :param email_addresses: The email_addresses of this Person.
        :type email_addresses: List[EmailAddress]
        """

        self._email_addresses = email_addresses

    @property
    def etag(self):
        """Gets the etag of this Person.

        The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the resource. Used for web cache validation.

        :return: The etag of this Person.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Person.

        The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the resource. Used for web cache validation.

        :param etag: The etag of this Person.
        :type etag: str
        """

        self._etag = etag

    @property
    def events(self):
        """Gets the events of this Person.

        The person's events.

        :return: The events of this Person.
        :rtype: List[Event]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this Person.

        The person's events.

        :param events: The events of this Person.
        :type events: List[Event]
        """

        self._events = events

    @property
    def external_ids(self):
        """Gets the external_ids of this Person.

        The person's external IDs.

        :return: The external_ids of this Person.
        :rtype: List[ExternalId]
        """
        return self._external_ids

    @external_ids.setter
    def external_ids(self, external_ids):
        """Sets the external_ids of this Person.

        The person's external IDs.

        :param external_ids: The external_ids of this Person.
        :type external_ids: List[ExternalId]
        """

        self._external_ids = external_ids

    @property
    def file_ases(self):
        """Gets the file_ases of this Person.

        The person's file-ases.

        :return: The file_ases of this Person.
        :rtype: List[FileAs]
        """
        return self._file_ases

    @file_ases.setter
    def file_ases(self, file_ases):
        """Sets the file_ases of this Person.

        The person's file-ases.

        :param file_ases: The file_ases of this Person.
        :type file_ases: List[FileAs]
        """

        self._file_ases = file_ases

    @property
    def genders(self):
        """Gets the genders of this Person.

        The person's genders. This field is a singleton for contact sources.

        :return: The genders of this Person.
        :rtype: List[Gender]
        """
        return self._genders

    @genders.setter
    def genders(self, genders):
        """Sets the genders of this Person.

        The person's genders. This field is a singleton for contact sources.

        :param genders: The genders of this Person.
        :type genders: List[Gender]
        """

        self._genders = genders

    @property
    def im_clients(self):
        """Gets the im_clients of this Person.

        The person's instant messaging clients.

        :return: The im_clients of this Person.
        :rtype: List[ImClient]
        """
        return self._im_clients

    @im_clients.setter
    def im_clients(self, im_clients):
        """Sets the im_clients of this Person.

        The person's instant messaging clients.

        :param im_clients: The im_clients of this Person.
        :type im_clients: List[ImClient]
        """

        self._im_clients = im_clients

    @property
    def interests(self):
        """Gets the interests of this Person.

        The person's interests.

        :return: The interests of this Person.
        :rtype: List[Interest]
        """
        return self._interests

    @interests.setter
    def interests(self, interests):
        """Sets the interests of this Person.

        The person's interests.

        :param interests: The interests of this Person.
        :type interests: List[Interest]
        """

        self._interests = interests

    @property
    def locales(self):
        """Gets the locales of this Person.

        The person's locale preferences.

        :return: The locales of this Person.
        :rtype: List[Locale]
        """
        return self._locales

    @locales.setter
    def locales(self, locales):
        """Sets the locales of this Person.

        The person's locale preferences.

        :param locales: The locales of this Person.
        :type locales: List[Locale]
        """

        self._locales = locales

    @property
    def locations(self):
        """Gets the locations of this Person.

        The person's locations.

        :return: The locations of this Person.
        :rtype: List[Location]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this Person.

        The person's locations.

        :param locations: The locations of this Person.
        :type locations: List[Location]
        """

        self._locations = locations

    @property
    def memberships(self):
        """Gets the memberships of this Person.

        The person's group memberships.

        :return: The memberships of this Person.
        :rtype: List[Membership]
        """
        return self._memberships

    @memberships.setter
    def memberships(self, memberships):
        """Sets the memberships of this Person.

        The person's group memberships.

        :param memberships: The memberships of this Person.
        :type memberships: List[Membership]
        """

        self._memberships = memberships

    @property
    def metadata(self):
        """Gets the metadata of this Person.


        :return: The metadata of this Person.
        :rtype: PersonMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Person.


        :param metadata: The metadata of this Person.
        :type metadata: PersonMetadata
        """

        self._metadata = metadata

    @property
    def misc_keywords(self):
        """Gets the misc_keywords of this Person.

        The person's miscellaneous keywords.

        :return: The misc_keywords of this Person.
        :rtype: List[MiscKeyword]
        """
        return self._misc_keywords

    @misc_keywords.setter
    def misc_keywords(self, misc_keywords):
        """Sets the misc_keywords of this Person.

        The person's miscellaneous keywords.

        :param misc_keywords: The misc_keywords of this Person.
        :type misc_keywords: List[MiscKeyword]
        """

        self._misc_keywords = misc_keywords

    @property
    def names(self):
        """Gets the names of this Person.

        The person's names. This field is a singleton for contact sources.

        :return: The names of this Person.
        :rtype: List[Name]
        """
        return self._names

    @names.setter
    def names(self, names):
        """Sets the names of this Person.

        The person's names. This field is a singleton for contact sources.

        :param names: The names of this Person.
        :type names: List[Name]
        """

        self._names = names

    @property
    def nicknames(self):
        """Gets the nicknames of this Person.

        The person's nicknames.

        :return: The nicknames of this Person.
        :rtype: List[Nickname]
        """
        return self._nicknames

    @nicknames.setter
    def nicknames(self, nicknames):
        """Sets the nicknames of this Person.

        The person's nicknames.

        :param nicknames: The nicknames of this Person.
        :type nicknames: List[Nickname]
        """

        self._nicknames = nicknames

    @property
    def occupations(self):
        """Gets the occupations of this Person.

        The person's occupations.

        :return: The occupations of this Person.
        :rtype: List[Occupation]
        """
        return self._occupations

    @occupations.setter
    def occupations(self, occupations):
        """Sets the occupations of this Person.

        The person's occupations.

        :param occupations: The occupations of this Person.
        :type occupations: List[Occupation]
        """

        self._occupations = occupations

    @property
    def organizations(self):
        """Gets the organizations of this Person.

        The person's past or current organizations.

        :return: The organizations of this Person.
        :rtype: List[Organization]
        """
        return self._organizations

    @organizations.setter
    def organizations(self, organizations):
        """Sets the organizations of this Person.

        The person's past or current organizations.

        :param organizations: The organizations of this Person.
        :type organizations: List[Organization]
        """

        self._organizations = organizations

    @property
    def phone_numbers(self):
        """Gets the phone_numbers of this Person.

        The person's phone numbers. For `people.connections.list` and `otherContacts.list` the number of phone numbers is limited to 100. If a Person has more phone numbers the entire set can be obtained by calling GetPeople.

        :return: The phone_numbers of this Person.
        :rtype: List[PhoneNumber]
        """
        return self._phone_numbers

    @phone_numbers.setter
    def phone_numbers(self, phone_numbers):
        """Sets the phone_numbers of this Person.

        The person's phone numbers. For `people.connections.list` and `otherContacts.list` the number of phone numbers is limited to 100. If a Person has more phone numbers the entire set can be obtained by calling GetPeople.

        :param phone_numbers: The phone_numbers of this Person.
        :type phone_numbers: List[PhoneNumber]
        """

        self._phone_numbers = phone_numbers

    @property
    def photos(self):
        """Gets the photos of this Person.

        Output only. The person's photos.

        :return: The photos of this Person.
        :rtype: List[Photo]
        """
        return self._photos

    @photos.setter
    def photos(self, photos):
        """Sets the photos of this Person.

        Output only. The person's photos.

        :param photos: The photos of this Person.
        :type photos: List[Photo]
        """

        self._photos = photos

    @property
    def relations(self):
        """Gets the relations of this Person.

        The person's relations.

        :return: The relations of this Person.
        :rtype: List[Relation]
        """
        return self._relations

    @relations.setter
    def relations(self, relations):
        """Sets the relations of this Person.

        The person's relations.

        :param relations: The relations of this Person.
        :type relations: List[Relation]
        """

        self._relations = relations

    @property
    def relationship_interests(self):
        """Gets the relationship_interests of this Person.

        Output only. **DEPRECATED**: No data will be returned The person's relationship interests.

        :return: The relationship_interests of this Person.
        :rtype: List[RelationshipInterest]
        """
        return self._relationship_interests

    @relationship_interests.setter
    def relationship_interests(self, relationship_interests):
        """Sets the relationship_interests of this Person.

        Output only. **DEPRECATED**: No data will be returned The person's relationship interests.

        :param relationship_interests: The relationship_interests of this Person.
        :type relationship_interests: List[RelationshipInterest]
        """

        self._relationship_interests = relationship_interests

    @property
    def relationship_statuses(self):
        """Gets the relationship_statuses of this Person.

        Output only. **DEPRECATED**: No data will be returned The person's relationship statuses.

        :return: The relationship_statuses of this Person.
        :rtype: List[RelationshipStatus]
        """
        return self._relationship_statuses

    @relationship_statuses.setter
    def relationship_statuses(self, relationship_statuses):
        """Sets the relationship_statuses of this Person.

        Output only. **DEPRECATED**: No data will be returned The person's relationship statuses.

        :param relationship_statuses: The relationship_statuses of this Person.
        :type relationship_statuses: List[RelationshipStatus]
        """

        self._relationship_statuses = relationship_statuses

    @property
    def residences(self):
        """Gets the residences of this Person.

        **DEPRECATED**: (Please use `person.locations` instead) The person's residences.

        :return: The residences of this Person.
        :rtype: List[Residence]
        """
        return self._residences

    @residences.setter
    def residences(self, residences):
        """Sets the residences of this Person.

        **DEPRECATED**: (Please use `person.locations` instead) The person's residences.

        :param residences: The residences of this Person.
        :type residences: List[Residence]
        """

        self._residences = residences

    @property
    def resource_name(self):
        """Gets the resource_name of this Person.

        The resource name for the person, assigned by the server. An ASCII string in the form of `people/{person_id}`.

        :return: The resource_name of this Person.
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this Person.

        The resource name for the person, assigned by the server. An ASCII string in the form of `people/{person_id}`.

        :param resource_name: The resource_name of this Person.
        :type resource_name: str
        """

        self._resource_name = resource_name

    @property
    def sip_addresses(self):
        """Gets the sip_addresses of this Person.

        The person's SIP addresses.

        :return: The sip_addresses of this Person.
        :rtype: List[SipAddress]
        """
        return self._sip_addresses

    @sip_addresses.setter
    def sip_addresses(self, sip_addresses):
        """Sets the sip_addresses of this Person.

        The person's SIP addresses.

        :param sip_addresses: The sip_addresses of this Person.
        :type sip_addresses: List[SipAddress]
        """

        self._sip_addresses = sip_addresses

    @property
    def skills(self):
        """Gets the skills of this Person.

        The person's skills.

        :return: The skills of this Person.
        :rtype: List[Skill]
        """
        return self._skills

    @skills.setter
    def skills(self, skills):
        """Sets the skills of this Person.

        The person's skills.

        :param skills: The skills of this Person.
        :type skills: List[Skill]
        """

        self._skills = skills

    @property
    def taglines(self):
        """Gets the taglines of this Person.

        Output only. **DEPRECATED**: No data will be returned The person's taglines.

        :return: The taglines of this Person.
        :rtype: List[Tagline]
        """
        return self._taglines

    @taglines.setter
    def taglines(self, taglines):
        """Sets the taglines of this Person.

        Output only. **DEPRECATED**: No data will be returned The person's taglines.

        :param taglines: The taglines of this Person.
        :type taglines: List[Tagline]
        """

        self._taglines = taglines

    @property
    def urls(self):
        """Gets the urls of this Person.

        The person's associated URLs.

        :return: The urls of this Person.
        :rtype: List[Url]
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this Person.

        The person's associated URLs.

        :param urls: The urls of this Person.
        :type urls: List[Url]
        """

        self._urls = urls

    @property
    def user_defined(self):
        """Gets the user_defined of this Person.

        The person's user defined data.

        :return: The user_defined of this Person.
        :rtype: List[UserDefined]
        """
        return self._user_defined

    @user_defined.setter
    def user_defined(self, user_defined):
        """Sets the user_defined of this Person.

        The person's user defined data.

        :param user_defined: The user_defined of this Person.
        :type user_defined: List[UserDefined]
        """

        self._user_defined = user_defined
