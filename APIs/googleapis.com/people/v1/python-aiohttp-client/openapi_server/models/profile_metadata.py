# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProfileMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, object_type: str=None, user_types: List[str]=None):
        """ProfileMetadata - a model defined in OpenAPI

        :param object_type: The object_type of this ProfileMetadata.
        :param user_types: The user_types of this ProfileMetadata.
        """
        self.openapi_types = {
            'object_type': str,
            'user_types': List[str]
        }

        self.attribute_map = {
            'object_type': 'objectType',
            'user_types': 'userTypes'
        }

        self._object_type = object_type
        self._user_types = user_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProfileMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProfileMetadata of this ProfileMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def object_type(self):
        """Gets the object_type of this ProfileMetadata.

        Output only. The profile object type.

        :return: The object_type of this ProfileMetadata.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this ProfileMetadata.

        Output only. The profile object type.

        :param object_type: The object_type of this ProfileMetadata.
        :type object_type: str
        """
        allowed_values = ["OBJECT_TYPE_UNSPECIFIED", "PERSON", "PAGE"]  # noqa: E501
        if object_type not in allowed_values:
            raise ValueError(
                "Invalid value for `object_type` ({0}), must be one of {1}"
                .format(object_type, allowed_values)
            )

        self._object_type = object_type

    @property
    def user_types(self):
        """Gets the user_types of this ProfileMetadata.

        Output only. The user types.

        :return: The user_types of this ProfileMetadata.
        :rtype: List[str]
        """
        return self._user_types

    @user_types.setter
    def user_types(self, user_types):
        """Sets the user_types of this ProfileMetadata.

        Output only. The user types.

        :param user_types: The user_types of this ProfileMetadata.
        :type user_types: List[str]
        """
        allowed_values = ["USER_TYPE_UNKNOWN", "GOOGLE_USER", "GPLUS_USER", "GOOGLE_APPS_USER"]  # noqa: E501
        if not set(user_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `user_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(user_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._user_types = user_types
