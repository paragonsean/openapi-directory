/**
 * People API
 * Provides access to information about profiles and contacts.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PeopleApi);
  }
}(this, function(expect, PeopleApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PeopleApi.Person();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Person', function() {
    it('should create an instance of Person', function() {
      // uncomment below and update the code to test Person
      //var instance = new PeopleApi.Person();
      //expect(instance).to.be.a(PeopleApi.Person);
    });

    it('should have the property addresses (base name: "addresses")', function() {
      // uncomment below and update the code to test the property addresses
      //var instance = new PeopleApi.Person();
      //expect(instance).to.be();
    });

    it('should have the property ageRange (base name: "ageRange")', function() {
      // uncomment below and update the code to test the property ageRange
      //var instance = new PeopleApi.Person();
      //expect(instance).to.be();
    });

    it('should have the property ageRanges (base name: "ageRanges")', function() {
      // uncomment below and update the code to test the property ageRanges
      //var instance = new PeopleApi.Person();
      //expect(instance).to.be();
    });

    it('should have the property biographies (base name: "biographies")', function() {
      // uncomment below and update the code to test the property biographies
      //var instance = new PeopleApi.Person();
      //expect(instance).to.be();
    });

    it('should have the property birthdays (base name: "birthdays")', function() {
      // uncomment below and update the code to test the property birthdays
      //var instance = new PeopleApi.Person();
      //expect(instance).to.be();
    });

    it('should have the property braggingRights (base name: "braggingRights")', function() {
      // uncomment below and update the code to test the property braggingRights
      //var instance = new PeopleApi.Person();
      //expect(instance).to.be();
    });

    it('should have the property calendarUrls (base name: "calendarUrls")', function() {
      // uncomment below and update the code to test the property calendarUrls
      //var instance = new PeopleApi.Person();
      //expect(instance).to.be();
    });

    it('should have the property clientData (base name: "clientData")', function() {
      // uncomment below and update the code to test the property clientData
      //var instance = new PeopleApi.Person();
      //expect(instance).to.be();
    });

    it('should have the property coverPhotos (base name: "coverPhotos")', function() {
      // uncomment below and update the code to test the property coverPhotos
      //var instance = new PeopleApi.Person();
      //expect(instance).to.be();
    });

    it('should have the property emailAddresses (base name: "emailAddresses")', function() {
      // uncomment below and update the code to test the property emailAddresses
      //var instance = new PeopleApi.Person();
      //expect(instance).to.be();
    });

    it('should have the property etag (base name: "etag")', function() {
      // uncomment below and update the code to test the property etag
      //var instance = new PeopleApi.Person();
      //expect(instance).to.be();
    });

    it('should have the property events (base name: "events")', function() {
      // uncomment below and update the code to test the property events
      //var instance = new PeopleApi.Person();
      //expect(instance).to.be();
    });

    it('should have the property externalIds (base name: "externalIds")', function() {
      // uncomment below and update the code to test the property externalIds
      //var instance = new PeopleApi.Person();
      //expect(instance).to.be();
    });

    it('should have the property fileAses (base name: "fileAses")', function() {
      // uncomment below and update the code to test the property fileAses
      //var instance = new PeopleApi.Person();
      //expect(instance).to.be();
    });

    it('should have the property genders (base name: "genders")', function() {
      // uncomment below and update the code to test the property genders
      //var instance = new PeopleApi.Person();
      //expect(instance).to.be();
    });

    it('should have the property imClients (base name: "imClients")', function() {
      // uncomment below and update the code to test the property imClients
      //var instance = new PeopleApi.Person();
      //expect(instance).to.be();
    });

    it('should have the property interests (base name: "interests")', function() {
      // uncomment below and update the code to test the property interests
      //var instance = new PeopleApi.Person();
      //expect(instance).to.be();
    });

    it('should have the property locales (base name: "locales")', function() {
      // uncomment below and update the code to test the property locales
      //var instance = new PeopleApi.Person();
      //expect(instance).to.be();
    });

    it('should have the property locations (base name: "locations")', function() {
      // uncomment below and update the code to test the property locations
      //var instance = new PeopleApi.Person();
      //expect(instance).to.be();
    });

    it('should have the property memberships (base name: "memberships")', function() {
      // uncomment below and update the code to test the property memberships
      //var instance = new PeopleApi.Person();
      //expect(instance).to.be();
    });

    it('should have the property metadata (base name: "metadata")', function() {
      // uncomment below and update the code to test the property metadata
      //var instance = new PeopleApi.Person();
      //expect(instance).to.be();
    });

    it('should have the property miscKeywords (base name: "miscKeywords")', function() {
      // uncomment below and update the code to test the property miscKeywords
      //var instance = new PeopleApi.Person();
      //expect(instance).to.be();
    });

    it('should have the property names (base name: "names")', function() {
      // uncomment below and update the code to test the property names
      //var instance = new PeopleApi.Person();
      //expect(instance).to.be();
    });

    it('should have the property nicknames (base name: "nicknames")', function() {
      // uncomment below and update the code to test the property nicknames
      //var instance = new PeopleApi.Person();
      //expect(instance).to.be();
    });

    it('should have the property occupations (base name: "occupations")', function() {
      // uncomment below and update the code to test the property occupations
      //var instance = new PeopleApi.Person();
      //expect(instance).to.be();
    });

    it('should have the property organizations (base name: "organizations")', function() {
      // uncomment below and update the code to test the property organizations
      //var instance = new PeopleApi.Person();
      //expect(instance).to.be();
    });

    it('should have the property phoneNumbers (base name: "phoneNumbers")', function() {
      // uncomment below and update the code to test the property phoneNumbers
      //var instance = new PeopleApi.Person();
      //expect(instance).to.be();
    });

    it('should have the property photos (base name: "photos")', function() {
      // uncomment below and update the code to test the property photos
      //var instance = new PeopleApi.Person();
      //expect(instance).to.be();
    });

    it('should have the property relations (base name: "relations")', function() {
      // uncomment below and update the code to test the property relations
      //var instance = new PeopleApi.Person();
      //expect(instance).to.be();
    });

    it('should have the property relationshipInterests (base name: "relationshipInterests")', function() {
      // uncomment below and update the code to test the property relationshipInterests
      //var instance = new PeopleApi.Person();
      //expect(instance).to.be();
    });

    it('should have the property relationshipStatuses (base name: "relationshipStatuses")', function() {
      // uncomment below and update the code to test the property relationshipStatuses
      //var instance = new PeopleApi.Person();
      //expect(instance).to.be();
    });

    it('should have the property residences (base name: "residences")', function() {
      // uncomment below and update the code to test the property residences
      //var instance = new PeopleApi.Person();
      //expect(instance).to.be();
    });

    it('should have the property resourceName (base name: "resourceName")', function() {
      // uncomment below and update the code to test the property resourceName
      //var instance = new PeopleApi.Person();
      //expect(instance).to.be();
    });

    it('should have the property sipAddresses (base name: "sipAddresses")', function() {
      // uncomment below and update the code to test the property sipAddresses
      //var instance = new PeopleApi.Person();
      //expect(instance).to.be();
    });

    it('should have the property skills (base name: "skills")', function() {
      // uncomment below and update the code to test the property skills
      //var instance = new PeopleApi.Person();
      //expect(instance).to.be();
    });

    it('should have the property taglines (base name: "taglines")', function() {
      // uncomment below and update the code to test the property taglines
      //var instance = new PeopleApi.Person();
      //expect(instance).to.be();
    });

    it('should have the property urls (base name: "urls")', function() {
      // uncomment below and update the code to test the property urls
      //var instance = new PeopleApi.Person();
      //expect(instance).to.be();
    });

    it('should have the property userDefined (base name: "userDefined")', function() {
      // uncomment below and update the code to test the property userDefined
      //var instance = new PeopleApi.Person();
      //expect(instance).to.be();
    });

  });

}));
