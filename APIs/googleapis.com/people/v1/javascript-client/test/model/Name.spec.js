/**
 * People API
 * Provides access to information about profiles and contacts.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PeopleApi);
  }
}(this, function(expect, PeopleApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PeopleApi.Name();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Name', function() {
    it('should create an instance of Name', function() {
      // uncomment below and update the code to test Name
      //var instance = new PeopleApi.Name();
      //expect(instance).to.be.a(PeopleApi.Name);
    });

    it('should have the property displayName (base name: "displayName")', function() {
      // uncomment below and update the code to test the property displayName
      //var instance = new PeopleApi.Name();
      //expect(instance).to.be();
    });

    it('should have the property displayNameLastFirst (base name: "displayNameLastFirst")', function() {
      // uncomment below and update the code to test the property displayNameLastFirst
      //var instance = new PeopleApi.Name();
      //expect(instance).to.be();
    });

    it('should have the property familyName (base name: "familyName")', function() {
      // uncomment below and update the code to test the property familyName
      //var instance = new PeopleApi.Name();
      //expect(instance).to.be();
    });

    it('should have the property givenName (base name: "givenName")', function() {
      // uncomment below and update the code to test the property givenName
      //var instance = new PeopleApi.Name();
      //expect(instance).to.be();
    });

    it('should have the property honorificPrefix (base name: "honorificPrefix")', function() {
      // uncomment below and update the code to test the property honorificPrefix
      //var instance = new PeopleApi.Name();
      //expect(instance).to.be();
    });

    it('should have the property honorificSuffix (base name: "honorificSuffix")', function() {
      // uncomment below and update the code to test the property honorificSuffix
      //var instance = new PeopleApi.Name();
      //expect(instance).to.be();
    });

    it('should have the property metadata (base name: "metadata")', function() {
      // uncomment below and update the code to test the property metadata
      //var instance = new PeopleApi.Name();
      //expect(instance).to.be();
    });

    it('should have the property middleName (base name: "middleName")', function() {
      // uncomment below and update the code to test the property middleName
      //var instance = new PeopleApi.Name();
      //expect(instance).to.be();
    });

    it('should have the property phoneticFamilyName (base name: "phoneticFamilyName")', function() {
      // uncomment below and update the code to test the property phoneticFamilyName
      //var instance = new PeopleApi.Name();
      //expect(instance).to.be();
    });

    it('should have the property phoneticFullName (base name: "phoneticFullName")', function() {
      // uncomment below and update the code to test the property phoneticFullName
      //var instance = new PeopleApi.Name();
      //expect(instance).to.be();
    });

    it('should have the property phoneticGivenName (base name: "phoneticGivenName")', function() {
      // uncomment below and update the code to test the property phoneticGivenName
      //var instance = new PeopleApi.Name();
      //expect(instance).to.be();
    });

    it('should have the property phoneticHonorificPrefix (base name: "phoneticHonorificPrefix")', function() {
      // uncomment below and update the code to test the property phoneticHonorificPrefix
      //var instance = new PeopleApi.Name();
      //expect(instance).to.be();
    });

    it('should have the property phoneticHonorificSuffix (base name: "phoneticHonorificSuffix")', function() {
      // uncomment below and update the code to test the property phoneticHonorificSuffix
      //var instance = new PeopleApi.Name();
      //expect(instance).to.be();
    });

    it('should have the property phoneticMiddleName (base name: "phoneticMiddleName")', function() {
      // uncomment below and update the code to test the property phoneticMiddleName
      //var instance = new PeopleApi.Name();
      //expect(instance).to.be();
    });

    it('should have the property unstructuredName (base name: "unstructuredName")', function() {
      // uncomment below and update the code to test the property unstructuredName
      //var instance = new PeopleApi.Name();
      //expect(instance).to.be();
    });

  });

}));
