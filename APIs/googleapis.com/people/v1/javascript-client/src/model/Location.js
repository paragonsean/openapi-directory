/**
 * People API
 * Provides access to information about profiles and contacts.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FieldMetadata from './FieldMetadata';

/**
 * The Location model module.
 * @module model/Location
 * @version v1
 */
class Location {
    /**
     * Constructs a new <code>Location</code>.
     * A person&#39;s location.
     * @alias module:model/Location
     */
    constructor() { 
        
        Location.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Location</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Location} obj Optional instance to populate.
     * @return {module:model/Location} The populated <code>Location</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Location();

            if (data.hasOwnProperty('buildingId')) {
                obj['buildingId'] = ApiClient.convertToType(data['buildingId'], 'String');
            }
            if (data.hasOwnProperty('current')) {
                obj['current'] = ApiClient.convertToType(data['current'], 'Boolean');
            }
            if (data.hasOwnProperty('deskCode')) {
                obj['deskCode'] = ApiClient.convertToType(data['deskCode'], 'String');
            }
            if (data.hasOwnProperty('floor')) {
                obj['floor'] = ApiClient.convertToType(data['floor'], 'String');
            }
            if (data.hasOwnProperty('floorSection')) {
                obj['floorSection'] = ApiClient.convertToType(data['floorSection'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = FieldMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Location</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Location</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['buildingId'] && !(typeof data['buildingId'] === 'string' || data['buildingId'] instanceof String)) {
            throw new Error("Expected the field `buildingId` to be a primitive type in the JSON string but got " + data['buildingId']);
        }
        // ensure the json data is a string
        if (data['deskCode'] && !(typeof data['deskCode'] === 'string' || data['deskCode'] instanceof String)) {
            throw new Error("Expected the field `deskCode` to be a primitive type in the JSON string but got " + data['deskCode']);
        }
        // ensure the json data is a string
        if (data['floor'] && !(typeof data['floor'] === 'string' || data['floor'] instanceof String)) {
            throw new Error("Expected the field `floor` to be a primitive type in the JSON string but got " + data['floor']);
        }
        // ensure the json data is a string
        if (data['floorSection'] && !(typeof data['floorSection'] === 'string' || data['floorSection'] instanceof String)) {
            throw new Error("Expected the field `floorSection` to be a primitive type in the JSON string but got " + data['floorSection']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          FieldMetadata.validateJSON(data['metadata']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}



/**
 * The building identifier.
 * @member {String} buildingId
 */
Location.prototype['buildingId'] = undefined;

/**
 * Whether the location is the current location.
 * @member {Boolean} current
 */
Location.prototype['current'] = undefined;

/**
 * The individual desk location.
 * @member {String} deskCode
 */
Location.prototype['deskCode'] = undefined;

/**
 * The floor name or number.
 * @member {String} floor
 */
Location.prototype['floor'] = undefined;

/**
 * The floor section in `floor_name`.
 * @member {String} floorSection
 */
Location.prototype['floorSection'] = undefined;

/**
 * @member {module:model/FieldMetadata} metadata
 */
Location.prototype['metadata'] = undefined;

/**
 * The type of the location. The type can be custom or one of these predefined values: * `desk` * `grewUp`
 * @member {String} type
 */
Location.prototype['type'] = undefined;

/**
 * The free-form value of the location.
 * @member {String} value
 */
Location.prototype['value'] = undefined;






export default Location;

