/**
 * People API
 * Provides access to information about profiles and contacts.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FieldMetadata from './FieldMetadata';

/**
 * The Name model module.
 * @module model/Name
 * @version v1
 */
class Name {
    /**
     * Constructs a new <code>Name</code>.
     * A person&#39;s name. If the name is a mononym, the family name is empty.
     * @alias module:model/Name
     */
    constructor() { 
        
        Name.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Name</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Name} obj Optional instance to populate.
     * @return {module:model/Name} The populated <code>Name</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Name();

            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('displayNameLastFirst')) {
                obj['displayNameLastFirst'] = ApiClient.convertToType(data['displayNameLastFirst'], 'String');
            }
            if (data.hasOwnProperty('familyName')) {
                obj['familyName'] = ApiClient.convertToType(data['familyName'], 'String');
            }
            if (data.hasOwnProperty('givenName')) {
                obj['givenName'] = ApiClient.convertToType(data['givenName'], 'String');
            }
            if (data.hasOwnProperty('honorificPrefix')) {
                obj['honorificPrefix'] = ApiClient.convertToType(data['honorificPrefix'], 'String');
            }
            if (data.hasOwnProperty('honorificSuffix')) {
                obj['honorificSuffix'] = ApiClient.convertToType(data['honorificSuffix'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = FieldMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('middleName')) {
                obj['middleName'] = ApiClient.convertToType(data['middleName'], 'String');
            }
            if (data.hasOwnProperty('phoneticFamilyName')) {
                obj['phoneticFamilyName'] = ApiClient.convertToType(data['phoneticFamilyName'], 'String');
            }
            if (data.hasOwnProperty('phoneticFullName')) {
                obj['phoneticFullName'] = ApiClient.convertToType(data['phoneticFullName'], 'String');
            }
            if (data.hasOwnProperty('phoneticGivenName')) {
                obj['phoneticGivenName'] = ApiClient.convertToType(data['phoneticGivenName'], 'String');
            }
            if (data.hasOwnProperty('phoneticHonorificPrefix')) {
                obj['phoneticHonorificPrefix'] = ApiClient.convertToType(data['phoneticHonorificPrefix'], 'String');
            }
            if (data.hasOwnProperty('phoneticHonorificSuffix')) {
                obj['phoneticHonorificSuffix'] = ApiClient.convertToType(data['phoneticHonorificSuffix'], 'String');
            }
            if (data.hasOwnProperty('phoneticMiddleName')) {
                obj['phoneticMiddleName'] = ApiClient.convertToType(data['phoneticMiddleName'], 'String');
            }
            if (data.hasOwnProperty('unstructuredName')) {
                obj['unstructuredName'] = ApiClient.convertToType(data['unstructuredName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Name</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Name</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['displayNameLastFirst'] && !(typeof data['displayNameLastFirst'] === 'string' || data['displayNameLastFirst'] instanceof String)) {
            throw new Error("Expected the field `displayNameLastFirst` to be a primitive type in the JSON string but got " + data['displayNameLastFirst']);
        }
        // ensure the json data is a string
        if (data['familyName'] && !(typeof data['familyName'] === 'string' || data['familyName'] instanceof String)) {
            throw new Error("Expected the field `familyName` to be a primitive type in the JSON string but got " + data['familyName']);
        }
        // ensure the json data is a string
        if (data['givenName'] && !(typeof data['givenName'] === 'string' || data['givenName'] instanceof String)) {
            throw new Error("Expected the field `givenName` to be a primitive type in the JSON string but got " + data['givenName']);
        }
        // ensure the json data is a string
        if (data['honorificPrefix'] && !(typeof data['honorificPrefix'] === 'string' || data['honorificPrefix'] instanceof String)) {
            throw new Error("Expected the field `honorificPrefix` to be a primitive type in the JSON string but got " + data['honorificPrefix']);
        }
        // ensure the json data is a string
        if (data['honorificSuffix'] && !(typeof data['honorificSuffix'] === 'string' || data['honorificSuffix'] instanceof String)) {
            throw new Error("Expected the field `honorificSuffix` to be a primitive type in the JSON string but got " + data['honorificSuffix']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          FieldMetadata.validateJSON(data['metadata']);
        }
        // ensure the json data is a string
        if (data['middleName'] && !(typeof data['middleName'] === 'string' || data['middleName'] instanceof String)) {
            throw new Error("Expected the field `middleName` to be a primitive type in the JSON string but got " + data['middleName']);
        }
        // ensure the json data is a string
        if (data['phoneticFamilyName'] && !(typeof data['phoneticFamilyName'] === 'string' || data['phoneticFamilyName'] instanceof String)) {
            throw new Error("Expected the field `phoneticFamilyName` to be a primitive type in the JSON string but got " + data['phoneticFamilyName']);
        }
        // ensure the json data is a string
        if (data['phoneticFullName'] && !(typeof data['phoneticFullName'] === 'string' || data['phoneticFullName'] instanceof String)) {
            throw new Error("Expected the field `phoneticFullName` to be a primitive type in the JSON string but got " + data['phoneticFullName']);
        }
        // ensure the json data is a string
        if (data['phoneticGivenName'] && !(typeof data['phoneticGivenName'] === 'string' || data['phoneticGivenName'] instanceof String)) {
            throw new Error("Expected the field `phoneticGivenName` to be a primitive type in the JSON string but got " + data['phoneticGivenName']);
        }
        // ensure the json data is a string
        if (data['phoneticHonorificPrefix'] && !(typeof data['phoneticHonorificPrefix'] === 'string' || data['phoneticHonorificPrefix'] instanceof String)) {
            throw new Error("Expected the field `phoneticHonorificPrefix` to be a primitive type in the JSON string but got " + data['phoneticHonorificPrefix']);
        }
        // ensure the json data is a string
        if (data['phoneticHonorificSuffix'] && !(typeof data['phoneticHonorificSuffix'] === 'string' || data['phoneticHonorificSuffix'] instanceof String)) {
            throw new Error("Expected the field `phoneticHonorificSuffix` to be a primitive type in the JSON string but got " + data['phoneticHonorificSuffix']);
        }
        // ensure the json data is a string
        if (data['phoneticMiddleName'] && !(typeof data['phoneticMiddleName'] === 'string' || data['phoneticMiddleName'] instanceof String)) {
            throw new Error("Expected the field `phoneticMiddleName` to be a primitive type in the JSON string but got " + data['phoneticMiddleName']);
        }
        // ensure the json data is a string
        if (data['unstructuredName'] && !(typeof data['unstructuredName'] === 'string' || data['unstructuredName'] instanceof String)) {
            throw new Error("Expected the field `unstructuredName` to be a primitive type in the JSON string but got " + data['unstructuredName']);
        }

        return true;
    }


}



/**
 * Output only. The display name formatted according to the locale specified by the viewer's account or the `Accept-Language` HTTP header.
 * @member {String} displayName
 */
Name.prototype['displayName'] = undefined;

/**
 * Output only. The display name with the last name first formatted according to the locale specified by the viewer's account or the `Accept-Language` HTTP header.
 * @member {String} displayNameLastFirst
 */
Name.prototype['displayNameLastFirst'] = undefined;

/**
 * The family name.
 * @member {String} familyName
 */
Name.prototype['familyName'] = undefined;

/**
 * The given name.
 * @member {String} givenName
 */
Name.prototype['givenName'] = undefined;

/**
 * The honorific prefixes, such as `Mrs.` or `Dr.`
 * @member {String} honorificPrefix
 */
Name.prototype['honorificPrefix'] = undefined;

/**
 * The honorific suffixes, such as `Jr.`
 * @member {String} honorificSuffix
 */
Name.prototype['honorificSuffix'] = undefined;

/**
 * @member {module:model/FieldMetadata} metadata
 */
Name.prototype['metadata'] = undefined;

/**
 * The middle name(s).
 * @member {String} middleName
 */
Name.prototype['middleName'] = undefined;

/**
 * The family name spelled as it sounds.
 * @member {String} phoneticFamilyName
 */
Name.prototype['phoneticFamilyName'] = undefined;

/**
 * The full name spelled as it sounds.
 * @member {String} phoneticFullName
 */
Name.prototype['phoneticFullName'] = undefined;

/**
 * The given name spelled as it sounds.
 * @member {String} phoneticGivenName
 */
Name.prototype['phoneticGivenName'] = undefined;

/**
 * The honorific prefixes spelled as they sound.
 * @member {String} phoneticHonorificPrefix
 */
Name.prototype['phoneticHonorificPrefix'] = undefined;

/**
 * The honorific suffixes spelled as they sound.
 * @member {String} phoneticHonorificSuffix
 */
Name.prototype['phoneticHonorificSuffix'] = undefined;

/**
 * The middle name(s) spelled as they sound.
 * @member {String} phoneticMiddleName
 */
Name.prototype['phoneticMiddleName'] = undefined;

/**
 * The free form name value.
 * @member {String} unstructuredName
 */
Name.prototype['unstructuredName'] = undefined;






export default Name;

