/**
 * People API
 * Provides access to information about profiles and contacts.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FieldMetadata from './FieldMetadata';

/**
 * The Gender model module.
 * @module model/Gender
 * @version v1
 */
class Gender {
    /**
     * Constructs a new <code>Gender</code>.
     * A person&#39;s gender.
     * @alias module:model/Gender
     */
    constructor() { 
        
        Gender.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Gender</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Gender} obj Optional instance to populate.
     * @return {module:model/Gender} The populated <code>Gender</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Gender();

            if (data.hasOwnProperty('addressMeAs')) {
                obj['addressMeAs'] = ApiClient.convertToType(data['addressMeAs'], 'String');
            }
            if (data.hasOwnProperty('formattedValue')) {
                obj['formattedValue'] = ApiClient.convertToType(data['formattedValue'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = FieldMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Gender</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Gender</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['addressMeAs'] && !(typeof data['addressMeAs'] === 'string' || data['addressMeAs'] instanceof String)) {
            throw new Error("Expected the field `addressMeAs` to be a primitive type in the JSON string but got " + data['addressMeAs']);
        }
        // ensure the json data is a string
        if (data['formattedValue'] && !(typeof data['formattedValue'] === 'string' || data['formattedValue'] instanceof String)) {
            throw new Error("Expected the field `formattedValue` to be a primitive type in the JSON string but got " + data['formattedValue']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          FieldMetadata.validateJSON(data['metadata']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}



/**
 * Free form text field for pronouns that should be used to address the person. Common values are: * `he`/`him` * `she`/`her` * `they`/`them`
 * @member {String} addressMeAs
 */
Gender.prototype['addressMeAs'] = undefined;

/**
 * Output only. The value of the gender translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale. Unspecified or custom value are not localized.
 * @member {String} formattedValue
 */
Gender.prototype['formattedValue'] = undefined;

/**
 * @member {module:model/FieldMetadata} metadata
 */
Gender.prototype['metadata'] = undefined;

/**
 * The gender for the person. The gender can be custom or one of these predefined values: * `male` * `female` * `unspecified`
 * @member {String} value
 */
Gender.prototype['value'] = undefined;






export default Gender;

