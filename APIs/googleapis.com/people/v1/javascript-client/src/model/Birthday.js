/**
 * People API
 * Provides access to information about profiles and contacts.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FieldMetadata from './FieldMetadata';
import ModelDate from './ModelDate';

/**
 * The Birthday model module.
 * @module model/Birthday
 * @version v1
 */
class Birthday {
    /**
     * Constructs a new <code>Birthday</code>.
     * A person&#39;s birthday. At least one of the &#x60;date&#x60; and &#x60;text&#x60; fields are specified. The &#x60;date&#x60; and &#x60;text&#x60; fields typically represent the same date, but are not guaranteed to. Clients should always set the &#x60;date&#x60; field when mutating birthdays.
     * @alias module:model/Birthday
     */
    constructor() { 
        
        Birthday.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Birthday</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Birthday} obj Optional instance to populate.
     * @return {module:model/Birthday} The populated <code>Birthday</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Birthday();

            if (data.hasOwnProperty('date')) {
                obj['date'] = ModelDate.constructFromObject(data['date']);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = FieldMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Birthday</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Birthday</code>.
     */
    static validateJSON(data) {
        // validate the optional field `date`
        if (data['date']) { // data not null
          ModelDate.validateJSON(data['date']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          FieldMetadata.validateJSON(data['metadata']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }

        return true;
    }


}



/**
 * @member {module:model/ModelDate} date
 */
Birthday.prototype['date'] = undefined;

/**
 * @member {module:model/FieldMetadata} metadata
 */
Birthday.prototype['metadata'] = undefined;

/**
 * Prefer to use the `date` field if set. A free-form string representing the user's birthday. This value is not validated.
 * @member {String} text
 */
Birthday.prototype['text'] = undefined;






export default Birthday;

