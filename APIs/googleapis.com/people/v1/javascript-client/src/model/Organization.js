/**
 * People API
 * Provides access to information about profiles and contacts.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FieldMetadata from './FieldMetadata';
import ModelDate from './ModelDate';

/**
 * The Organization model module.
 * @module model/Organization
 * @version v1
 */
class Organization {
    /**
     * Constructs a new <code>Organization</code>.
     * A person&#39;s past or current organization. Overlapping date ranges are permitted.
     * @alias module:model/Organization
     */
    constructor() { 
        
        Organization.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Organization</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Organization} obj Optional instance to populate.
     * @return {module:model/Organization} The populated <code>Organization</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Organization();

            if (data.hasOwnProperty('costCenter')) {
                obj['costCenter'] = ApiClient.convertToType(data['costCenter'], 'String');
            }
            if (data.hasOwnProperty('current')) {
                obj['current'] = ApiClient.convertToType(data['current'], 'Boolean');
            }
            if (data.hasOwnProperty('department')) {
                obj['department'] = ApiClient.convertToType(data['department'], 'String');
            }
            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ModelDate.constructFromObject(data['endDate']);
            }
            if (data.hasOwnProperty('formattedType')) {
                obj['formattedType'] = ApiClient.convertToType(data['formattedType'], 'String');
            }
            if (data.hasOwnProperty('fullTimeEquivalentMillipercent')) {
                obj['fullTimeEquivalentMillipercent'] = ApiClient.convertToType(data['fullTimeEquivalentMillipercent'], 'Number');
            }
            if (data.hasOwnProperty('jobDescription')) {
                obj['jobDescription'] = ApiClient.convertToType(data['jobDescription'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = FieldMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('phoneticName')) {
                obj['phoneticName'] = ApiClient.convertToType(data['phoneticName'], 'String');
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ModelDate.constructFromObject(data['startDate']);
            }
            if (data.hasOwnProperty('symbol')) {
                obj['symbol'] = ApiClient.convertToType(data['symbol'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Organization</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Organization</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['costCenter'] && !(typeof data['costCenter'] === 'string' || data['costCenter'] instanceof String)) {
            throw new Error("Expected the field `costCenter` to be a primitive type in the JSON string but got " + data['costCenter']);
        }
        // ensure the json data is a string
        if (data['department'] && !(typeof data['department'] === 'string' || data['department'] instanceof String)) {
            throw new Error("Expected the field `department` to be a primitive type in the JSON string but got " + data['department']);
        }
        // ensure the json data is a string
        if (data['domain'] && !(typeof data['domain'] === 'string' || data['domain'] instanceof String)) {
            throw new Error("Expected the field `domain` to be a primitive type in the JSON string but got " + data['domain']);
        }
        // validate the optional field `endDate`
        if (data['endDate']) { // data not null
          ModelDate.validateJSON(data['endDate']);
        }
        // ensure the json data is a string
        if (data['formattedType'] && !(typeof data['formattedType'] === 'string' || data['formattedType'] instanceof String)) {
            throw new Error("Expected the field `formattedType` to be a primitive type in the JSON string but got " + data['formattedType']);
        }
        // ensure the json data is a string
        if (data['jobDescription'] && !(typeof data['jobDescription'] === 'string' || data['jobDescription'] instanceof String)) {
            throw new Error("Expected the field `jobDescription` to be a primitive type in the JSON string but got " + data['jobDescription']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          FieldMetadata.validateJSON(data['metadata']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['phoneticName'] && !(typeof data['phoneticName'] === 'string' || data['phoneticName'] instanceof String)) {
            throw new Error("Expected the field `phoneticName` to be a primitive type in the JSON string but got " + data['phoneticName']);
        }
        // validate the optional field `startDate`
        if (data['startDate']) { // data not null
          ModelDate.validateJSON(data['startDate']);
        }
        // ensure the json data is a string
        if (data['symbol'] && !(typeof data['symbol'] === 'string' || data['symbol'] instanceof String)) {
            throw new Error("Expected the field `symbol` to be a primitive type in the JSON string but got " + data['symbol']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The person's cost center at the organization.
 * @member {String} costCenter
 */
Organization.prototype['costCenter'] = undefined;

/**
 * True if the organization is the person's current organization; false if the organization is a past organization.
 * @member {Boolean} current
 */
Organization.prototype['current'] = undefined;

/**
 * The person's department at the organization.
 * @member {String} department
 */
Organization.prototype['department'] = undefined;

/**
 * The domain name associated with the organization; for example, `google.com`.
 * @member {String} domain
 */
Organization.prototype['domain'] = undefined;

/**
 * @member {module:model/ModelDate} endDate
 */
Organization.prototype['endDate'] = undefined;

/**
 * Output only. The type of the organization translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.
 * @member {String} formattedType
 */
Organization.prototype['formattedType'] = undefined;

/**
 * The person's full-time equivalent millipercent within the organization (100000 = 100%).
 * @member {Number} fullTimeEquivalentMillipercent
 */
Organization.prototype['fullTimeEquivalentMillipercent'] = undefined;

/**
 * The person's job description at the organization.
 * @member {String} jobDescription
 */
Organization.prototype['jobDescription'] = undefined;

/**
 * The location of the organization office the person works at.
 * @member {String} location
 */
Organization.prototype['location'] = undefined;

/**
 * @member {module:model/FieldMetadata} metadata
 */
Organization.prototype['metadata'] = undefined;

/**
 * The name of the organization.
 * @member {String} name
 */
Organization.prototype['name'] = undefined;

/**
 * The phonetic name of the organization.
 * @member {String} phoneticName
 */
Organization.prototype['phoneticName'] = undefined;

/**
 * @member {module:model/ModelDate} startDate
 */
Organization.prototype['startDate'] = undefined;

/**
 * The symbol associated with the organization; for example, a stock ticker symbol, abbreviation, or acronym.
 * @member {String} symbol
 */
Organization.prototype['symbol'] = undefined;

/**
 * The person's job title at the organization.
 * @member {String} title
 */
Organization.prototype['title'] = undefined;

/**
 * The type of the organization. The type can be custom or one of these predefined values: * `work` * `school`
 * @member {String} type
 */
Organization.prototype['type'] = undefined;






export default Organization;

