/**
 * People API
 * Provides access to information about profiles and contacts.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProfileMetadata from './ProfileMetadata';

/**
 * The Source model module.
 * @module model/Source
 * @version v1
 */
class Source {
    /**
     * Constructs a new <code>Source</code>.
     * The source of a field.
     * @alias module:model/Source
     */
    constructor() { 
        
        Source.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Source</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Source} obj Optional instance to populate.
     * @return {module:model/Source} The populated <code>Source</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Source();

            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('profileMetadata')) {
                obj['profileMetadata'] = ProfileMetadata.constructFromObject(data['profileMetadata']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Source</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Source</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `profileMetadata`
        if (data['profileMetadata']) { // data not null
          ProfileMetadata.validateJSON(data['profileMetadata']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * **Only populated in `person.metadata.sources`.** The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the source. Used for web cache validation.
 * @member {String} etag
 */
Source.prototype['etag'] = undefined;

/**
 * The unique identifier within the source type generated by the server.
 * @member {String} id
 */
Source.prototype['id'] = undefined;

/**
 * @member {module:model/ProfileMetadata} profileMetadata
 */
Source.prototype['profileMetadata'] = undefined;

/**
 * The source type.
 * @member {module:model/Source.TypeEnum} type
 */
Source.prototype['type'] = undefined;

/**
 * Output only. **Only populated in `person.metadata.sources`.** Last update timestamp of this source.
 * @member {String} updateTime
 */
Source.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Source['TypeEnum'] = {

    /**
     * value: "SOURCE_TYPE_UNSPECIFIED"
     * @const
     */
    "SOURCE_TYPE_UNSPECIFIED": "SOURCE_TYPE_UNSPECIFIED",

    /**
     * value: "ACCOUNT"
     * @const
     */
    "ACCOUNT": "ACCOUNT",

    /**
     * value: "PROFILE"
     * @const
     */
    "PROFILE": "PROFILE",

    /**
     * value: "DOMAIN_PROFILE"
     * @const
     */
    "DOMAIN_PROFILE": "DOMAIN_PROFILE",

    /**
     * value: "CONTACT"
     * @const
     */
    "CONTACT": "CONTACT",

    /**
     * value: "OTHER_CONTACT"
     * @const
     */
    "OTHER_CONTACT": "OTHER_CONTACT",

    /**
     * value: "DOMAIN_CONTACT"
     * @const
     */
    "DOMAIN_CONTACT": "DOMAIN_CONTACT"
};



export default Source;

