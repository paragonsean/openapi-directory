/**
 * People API
 * Provides access to information about profiles and contacts.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContactGroupMetadata from './ContactGroupMetadata';
import GroupClientData from './GroupClientData';

/**
 * The ContactGroup model module.
 * @module model/ContactGroup
 * @version v1
 */
class ContactGroup {
    /**
     * Constructs a new <code>ContactGroup</code>.
     * A contact group.
     * @alias module:model/ContactGroup
     */
    constructor() { 
        
        ContactGroup.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContactGroup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContactGroup} obj Optional instance to populate.
     * @return {module:model/ContactGroup} The populated <code>ContactGroup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContactGroup();

            if (data.hasOwnProperty('clientData')) {
                obj['clientData'] = ApiClient.convertToType(data['clientData'], [GroupClientData]);
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('formattedName')) {
                obj['formattedName'] = ApiClient.convertToType(data['formattedName'], 'String');
            }
            if (data.hasOwnProperty('groupType')) {
                obj['groupType'] = ApiClient.convertToType(data['groupType'], 'String');
            }
            if (data.hasOwnProperty('memberCount')) {
                obj['memberCount'] = ApiClient.convertToType(data['memberCount'], 'Number');
            }
            if (data.hasOwnProperty('memberResourceNames')) {
                obj['memberResourceNames'] = ApiClient.convertToType(data['memberResourceNames'], ['String']);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ContactGroupMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('resourceName')) {
                obj['resourceName'] = ApiClient.convertToType(data['resourceName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContactGroup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContactGroup</code>.
     */
    static validateJSON(data) {
        if (data['clientData']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['clientData'])) {
                throw new Error("Expected the field `clientData` to be an array in the JSON data but got " + data['clientData']);
            }
            // validate the optional field `clientData` (array)
            for (const item of data['clientData']) {
                GroupClientData.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['formattedName'] && !(typeof data['formattedName'] === 'string' || data['formattedName'] instanceof String)) {
            throw new Error("Expected the field `formattedName` to be a primitive type in the JSON string but got " + data['formattedName']);
        }
        // ensure the json data is a string
        if (data['groupType'] && !(typeof data['groupType'] === 'string' || data['groupType'] instanceof String)) {
            throw new Error("Expected the field `groupType` to be a primitive type in the JSON string but got " + data['groupType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['memberResourceNames'])) {
            throw new Error("Expected the field `memberResourceNames` to be an array in the JSON data but got " + data['memberResourceNames']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          ContactGroupMetadata.validateJSON(data['metadata']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['resourceName'] && !(typeof data['resourceName'] === 'string' || data['resourceName'] instanceof String)) {
            throw new Error("Expected the field `resourceName` to be a primitive type in the JSON string but got " + data['resourceName']);
        }

        return true;
    }


}



/**
 * The group's client data.
 * @member {Array.<module:model/GroupClientData>} clientData
 */
ContactGroup.prototype['clientData'] = undefined;

/**
 * The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the resource. Used for web cache validation.
 * @member {String} etag
 */
ContactGroup.prototype['etag'] = undefined;

/**
 * Output only. The name translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale for system groups names. Group names set by the owner are the same as name.
 * @member {String} formattedName
 */
ContactGroup.prototype['formattedName'] = undefined;

/**
 * Output only. The contact group type.
 * @member {module:model/ContactGroup.GroupTypeEnum} groupType
 */
ContactGroup.prototype['groupType'] = undefined;

/**
 * Output only. The total number of contacts in the group irrespective of max members in specified in the request.
 * @member {Number} memberCount
 */
ContactGroup.prototype['memberCount'] = undefined;

/**
 * Output only. The list of contact person resource names that are members of the contact group. The field is only populated for GET requests and will only return as many members as `maxMembers` in the get request.
 * @member {Array.<String>} memberResourceNames
 */
ContactGroup.prototype['memberResourceNames'] = undefined;

/**
 * @member {module:model/ContactGroupMetadata} metadata
 */
ContactGroup.prototype['metadata'] = undefined;

/**
 * The contact group name set by the group owner or a system provided name for system groups. For [`contactGroups.create`](/people/api/rest/v1/contactGroups/create) or [`contactGroups.update`](/people/api/rest/v1/contactGroups/update) the name must be unique to the users contact groups. Attempting to create a group with a duplicate name will return a HTTP 409 error.
 * @member {String} name
 */
ContactGroup.prototype['name'] = undefined;

/**
 * The resource name for the contact group, assigned by the server. An ASCII string, in the form of `contactGroups/{contact_group_id}`.
 * @member {String} resourceName
 */
ContactGroup.prototype['resourceName'] = undefined;





/**
 * Allowed values for the <code>groupType</code> property.
 * @enum {String}
 * @readonly
 */
ContactGroup['GroupTypeEnum'] = {

    /**
     * value: "GROUP_TYPE_UNSPECIFIED"
     * @const
     */
    "GROUP_TYPE_UNSPECIFIED": "GROUP_TYPE_UNSPECIFIED",

    /**
     * value: "USER_CONTACT_GROUP"
     * @const
     */
    "USER_CONTACT_GROUP": "USER_CONTACT_GROUP",

    /**
     * value: "SYSTEM_CONTACT_GROUP"
     * @const
     */
    "SYSTEM_CONTACT_GROUP": "SYSTEM_CONTACT_GROUP"
};



export default ContactGroup;

