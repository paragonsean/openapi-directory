/**
 * People API
 * Provides access to information about profiles and contacts.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateContactPhotoRequest model module.
 * @module model/UpdateContactPhotoRequest
 * @version v1
 */
class UpdateContactPhotoRequest {
    /**
     * Constructs a new <code>UpdateContactPhotoRequest</code>.
     * A request to update an existing contact&#39;s photo. All requests must have a valid photo format: JPEG or PNG.
     * @alias module:model/UpdateContactPhotoRequest
     */
    constructor() { 
        
        UpdateContactPhotoRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateContactPhotoRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateContactPhotoRequest} obj Optional instance to populate.
     * @return {module:model/UpdateContactPhotoRequest} The populated <code>UpdateContactPhotoRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateContactPhotoRequest();

            if (data.hasOwnProperty('personFields')) {
                obj['personFields'] = ApiClient.convertToType(data['personFields'], 'String');
            }
            if (data.hasOwnProperty('photoBytes')) {
                obj['photoBytes'] = ApiClient.convertToType(data['photoBytes'], 'Blob');
            }
            if (data.hasOwnProperty('sources')) {
                obj['sources'] = ApiClient.convertToType(data['sources'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateContactPhotoRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateContactPhotoRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['personFields'] && !(typeof data['personFields'] === 'string' || data['personFields'] instanceof String)) {
            throw new Error("Expected the field `personFields` to be a primitive type in the JSON string but got " + data['personFields']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['sources'])) {
            throw new Error("Expected the field `sources` to be an array in the JSON data but got " + data['sources']);
        }

        return true;
    }


}



/**
 * Optional. A field mask to restrict which fields on the person are returned. Multiple fields can be specified by separating them with commas. Defaults to empty if not set, which will skip the post mutate get. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined
 * @member {String} personFields
 */
UpdateContactPhotoRequest.prototype['personFields'] = undefined;

/**
 * Required. Raw photo bytes
 * @member {Blob} photoBytes
 */
UpdateContactPhotoRequest.prototype['photoBytes'] = undefined;

/**
 * Optional. A mask of what source types to return. Defaults to READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.
 * @member {Array.<module:model/UpdateContactPhotoRequest.SourcesEnum>} sources
 */
UpdateContactPhotoRequest.prototype['sources'] = undefined;





/**
 * Allowed values for the <code>sources</code> property.
 * @enum {String}
 * @readonly
 */
UpdateContactPhotoRequest['SourcesEnum'] = {

    /**
     * value: "READ_SOURCE_TYPE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "READ_SOURCE_TYPE_UNSPECIFIED",

    /**
     * value: "READ_SOURCE_TYPE_PROFILE"
     * @const
     */
    "PROFILE": "READ_SOURCE_TYPE_PROFILE",

    /**
     * value: "READ_SOURCE_TYPE_CONTACT"
     * @const
     */
    "CONTACT": "READ_SOURCE_TYPE_CONTACT",

    /**
     * value: "READ_SOURCE_TYPE_DOMAIN_CONTACT"
     * @const
     */
    "DOMAIN_CONTACT": "READ_SOURCE_TYPE_DOMAIN_CONTACT"
};



export default UpdateContactPhotoRequest;

