/**
 * People API
 * Provides access to information about profiles and contacts.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import AgeRangeType from './AgeRangeType';
import Biography from './Biography';
import Birthday from './Birthday';
import BraggingRights from './BraggingRights';
import CalendarUrl from './CalendarUrl';
import ClientData from './ClientData';
import CoverPhoto from './CoverPhoto';
import EmailAddress from './EmailAddress';
import Event from './Event';
import ExternalId from './ExternalId';
import FileAs from './FileAs';
import Gender from './Gender';
import ImClient from './ImClient';
import Interest from './Interest';
import Locale from './Locale';
import Location from './Location';
import Membership from './Membership';
import MiscKeyword from './MiscKeyword';
import Name from './Name';
import Nickname from './Nickname';
import Occupation from './Occupation';
import Organization from './Organization';
import PersonMetadata from './PersonMetadata';
import PhoneNumber from './PhoneNumber';
import Photo from './Photo';
import Relation from './Relation';
import RelationshipInterest from './RelationshipInterest';
import RelationshipStatus from './RelationshipStatus';
import Residence from './Residence';
import SipAddress from './SipAddress';
import Skill from './Skill';
import Tagline from './Tagline';
import Url from './Url';
import UserDefined from './UserDefined';

/**
 * The Person model module.
 * @module model/Person
 * @version v1
 */
class Person {
    /**
     * Constructs a new <code>Person</code>.
     * Information about a person merged from various data sources such as the authenticated user&#39;s contacts and profile data. Most fields can have multiple items. The items in a field have no guaranteed order, but each non-empty field is guaranteed to have exactly one field with &#x60;metadata.primary&#x60; set to true.
     * @alias module:model/Person
     */
    constructor() { 
        
        Person.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Person</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Person} obj Optional instance to populate.
     * @return {module:model/Person} The populated <code>Person</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Person();

            if (data.hasOwnProperty('addresses')) {
                obj['addresses'] = ApiClient.convertToType(data['addresses'], [Address]);
            }
            if (data.hasOwnProperty('ageRange')) {
                obj['ageRange'] = ApiClient.convertToType(data['ageRange'], 'String');
            }
            if (data.hasOwnProperty('ageRanges')) {
                obj['ageRanges'] = ApiClient.convertToType(data['ageRanges'], [AgeRangeType]);
            }
            if (data.hasOwnProperty('biographies')) {
                obj['biographies'] = ApiClient.convertToType(data['biographies'], [Biography]);
            }
            if (data.hasOwnProperty('birthdays')) {
                obj['birthdays'] = ApiClient.convertToType(data['birthdays'], [Birthday]);
            }
            if (data.hasOwnProperty('braggingRights')) {
                obj['braggingRights'] = ApiClient.convertToType(data['braggingRights'], [BraggingRights]);
            }
            if (data.hasOwnProperty('calendarUrls')) {
                obj['calendarUrls'] = ApiClient.convertToType(data['calendarUrls'], [CalendarUrl]);
            }
            if (data.hasOwnProperty('clientData')) {
                obj['clientData'] = ApiClient.convertToType(data['clientData'], [ClientData]);
            }
            if (data.hasOwnProperty('coverPhotos')) {
                obj['coverPhotos'] = ApiClient.convertToType(data['coverPhotos'], [CoverPhoto]);
            }
            if (data.hasOwnProperty('emailAddresses')) {
                obj['emailAddresses'] = ApiClient.convertToType(data['emailAddresses'], [EmailAddress]);
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('events')) {
                obj['events'] = ApiClient.convertToType(data['events'], [Event]);
            }
            if (data.hasOwnProperty('externalIds')) {
                obj['externalIds'] = ApiClient.convertToType(data['externalIds'], [ExternalId]);
            }
            if (data.hasOwnProperty('fileAses')) {
                obj['fileAses'] = ApiClient.convertToType(data['fileAses'], [FileAs]);
            }
            if (data.hasOwnProperty('genders')) {
                obj['genders'] = ApiClient.convertToType(data['genders'], [Gender]);
            }
            if (data.hasOwnProperty('imClients')) {
                obj['imClients'] = ApiClient.convertToType(data['imClients'], [ImClient]);
            }
            if (data.hasOwnProperty('interests')) {
                obj['interests'] = ApiClient.convertToType(data['interests'], [Interest]);
            }
            if (data.hasOwnProperty('locales')) {
                obj['locales'] = ApiClient.convertToType(data['locales'], [Locale]);
            }
            if (data.hasOwnProperty('locations')) {
                obj['locations'] = ApiClient.convertToType(data['locations'], [Location]);
            }
            if (data.hasOwnProperty('memberships')) {
                obj['memberships'] = ApiClient.convertToType(data['memberships'], [Membership]);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = PersonMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('miscKeywords')) {
                obj['miscKeywords'] = ApiClient.convertToType(data['miscKeywords'], [MiscKeyword]);
            }
            if (data.hasOwnProperty('names')) {
                obj['names'] = ApiClient.convertToType(data['names'], [Name]);
            }
            if (data.hasOwnProperty('nicknames')) {
                obj['nicknames'] = ApiClient.convertToType(data['nicknames'], [Nickname]);
            }
            if (data.hasOwnProperty('occupations')) {
                obj['occupations'] = ApiClient.convertToType(data['occupations'], [Occupation]);
            }
            if (data.hasOwnProperty('organizations')) {
                obj['organizations'] = ApiClient.convertToType(data['organizations'], [Organization]);
            }
            if (data.hasOwnProperty('phoneNumbers')) {
                obj['phoneNumbers'] = ApiClient.convertToType(data['phoneNumbers'], [PhoneNumber]);
            }
            if (data.hasOwnProperty('photos')) {
                obj['photos'] = ApiClient.convertToType(data['photos'], [Photo]);
            }
            if (data.hasOwnProperty('relations')) {
                obj['relations'] = ApiClient.convertToType(data['relations'], [Relation]);
            }
            if (data.hasOwnProperty('relationshipInterests')) {
                obj['relationshipInterests'] = ApiClient.convertToType(data['relationshipInterests'], [RelationshipInterest]);
            }
            if (data.hasOwnProperty('relationshipStatuses')) {
                obj['relationshipStatuses'] = ApiClient.convertToType(data['relationshipStatuses'], [RelationshipStatus]);
            }
            if (data.hasOwnProperty('residences')) {
                obj['residences'] = ApiClient.convertToType(data['residences'], [Residence]);
            }
            if (data.hasOwnProperty('resourceName')) {
                obj['resourceName'] = ApiClient.convertToType(data['resourceName'], 'String');
            }
            if (data.hasOwnProperty('sipAddresses')) {
                obj['sipAddresses'] = ApiClient.convertToType(data['sipAddresses'], [SipAddress]);
            }
            if (data.hasOwnProperty('skills')) {
                obj['skills'] = ApiClient.convertToType(data['skills'], [Skill]);
            }
            if (data.hasOwnProperty('taglines')) {
                obj['taglines'] = ApiClient.convertToType(data['taglines'], [Tagline]);
            }
            if (data.hasOwnProperty('urls')) {
                obj['urls'] = ApiClient.convertToType(data['urls'], [Url]);
            }
            if (data.hasOwnProperty('userDefined')) {
                obj['userDefined'] = ApiClient.convertToType(data['userDefined'], [UserDefined]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Person</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Person</code>.
     */
    static validateJSON(data) {
        if (data['addresses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['addresses'])) {
                throw new Error("Expected the field `addresses` to be an array in the JSON data but got " + data['addresses']);
            }
            // validate the optional field `addresses` (array)
            for (const item of data['addresses']) {
                Address.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['ageRange'] && !(typeof data['ageRange'] === 'string' || data['ageRange'] instanceof String)) {
            throw new Error("Expected the field `ageRange` to be a primitive type in the JSON string but got " + data['ageRange']);
        }
        if (data['ageRanges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ageRanges'])) {
                throw new Error("Expected the field `ageRanges` to be an array in the JSON data but got " + data['ageRanges']);
            }
            // validate the optional field `ageRanges` (array)
            for (const item of data['ageRanges']) {
                AgeRangeType.validateJSON(item);
            };
        }
        if (data['biographies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['biographies'])) {
                throw new Error("Expected the field `biographies` to be an array in the JSON data but got " + data['biographies']);
            }
            // validate the optional field `biographies` (array)
            for (const item of data['biographies']) {
                Biography.validateJSON(item);
            };
        }
        if (data['birthdays']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['birthdays'])) {
                throw new Error("Expected the field `birthdays` to be an array in the JSON data but got " + data['birthdays']);
            }
            // validate the optional field `birthdays` (array)
            for (const item of data['birthdays']) {
                Birthday.validateJSON(item);
            };
        }
        if (data['braggingRights']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['braggingRights'])) {
                throw new Error("Expected the field `braggingRights` to be an array in the JSON data but got " + data['braggingRights']);
            }
            // validate the optional field `braggingRights` (array)
            for (const item of data['braggingRights']) {
                BraggingRights.validateJSON(item);
            };
        }
        if (data['calendarUrls']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['calendarUrls'])) {
                throw new Error("Expected the field `calendarUrls` to be an array in the JSON data but got " + data['calendarUrls']);
            }
            // validate the optional field `calendarUrls` (array)
            for (const item of data['calendarUrls']) {
                CalendarUrl.validateJSON(item);
            };
        }
        if (data['clientData']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['clientData'])) {
                throw new Error("Expected the field `clientData` to be an array in the JSON data but got " + data['clientData']);
            }
            // validate the optional field `clientData` (array)
            for (const item of data['clientData']) {
                ClientData.validateJSON(item);
            };
        }
        if (data['coverPhotos']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['coverPhotos'])) {
                throw new Error("Expected the field `coverPhotos` to be an array in the JSON data but got " + data['coverPhotos']);
            }
            // validate the optional field `coverPhotos` (array)
            for (const item of data['coverPhotos']) {
                CoverPhoto.validateJSON(item);
            };
        }
        if (data['emailAddresses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['emailAddresses'])) {
                throw new Error("Expected the field `emailAddresses` to be an array in the JSON data but got " + data['emailAddresses']);
            }
            // validate the optional field `emailAddresses` (array)
            for (const item of data['emailAddresses']) {
                EmailAddress.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        if (data['events']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['events'])) {
                throw new Error("Expected the field `events` to be an array in the JSON data but got " + data['events']);
            }
            // validate the optional field `events` (array)
            for (const item of data['events']) {
                Event.validateJSON(item);
            };
        }
        if (data['externalIds']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['externalIds'])) {
                throw new Error("Expected the field `externalIds` to be an array in the JSON data but got " + data['externalIds']);
            }
            // validate the optional field `externalIds` (array)
            for (const item of data['externalIds']) {
                ExternalId.validateJSON(item);
            };
        }
        if (data['fileAses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fileAses'])) {
                throw new Error("Expected the field `fileAses` to be an array in the JSON data but got " + data['fileAses']);
            }
            // validate the optional field `fileAses` (array)
            for (const item of data['fileAses']) {
                FileAs.validateJSON(item);
            };
        }
        if (data['genders']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['genders'])) {
                throw new Error("Expected the field `genders` to be an array in the JSON data but got " + data['genders']);
            }
            // validate the optional field `genders` (array)
            for (const item of data['genders']) {
                Gender.validateJSON(item);
            };
        }
        if (data['imClients']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['imClients'])) {
                throw new Error("Expected the field `imClients` to be an array in the JSON data but got " + data['imClients']);
            }
            // validate the optional field `imClients` (array)
            for (const item of data['imClients']) {
                ImClient.validateJSON(item);
            };
        }
        if (data['interests']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['interests'])) {
                throw new Error("Expected the field `interests` to be an array in the JSON data but got " + data['interests']);
            }
            // validate the optional field `interests` (array)
            for (const item of data['interests']) {
                Interest.validateJSON(item);
            };
        }
        if (data['locales']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['locales'])) {
                throw new Error("Expected the field `locales` to be an array in the JSON data but got " + data['locales']);
            }
            // validate the optional field `locales` (array)
            for (const item of data['locales']) {
                Locale.validateJSON(item);
            };
        }
        if (data['locations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['locations'])) {
                throw new Error("Expected the field `locations` to be an array in the JSON data but got " + data['locations']);
            }
            // validate the optional field `locations` (array)
            for (const item of data['locations']) {
                Location.validateJSON(item);
            };
        }
        if (data['memberships']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['memberships'])) {
                throw new Error("Expected the field `memberships` to be an array in the JSON data but got " + data['memberships']);
            }
            // validate the optional field `memberships` (array)
            for (const item of data['memberships']) {
                Membership.validateJSON(item);
            };
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          PersonMetadata.validateJSON(data['metadata']);
        }
        if (data['miscKeywords']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['miscKeywords'])) {
                throw new Error("Expected the field `miscKeywords` to be an array in the JSON data but got " + data['miscKeywords']);
            }
            // validate the optional field `miscKeywords` (array)
            for (const item of data['miscKeywords']) {
                MiscKeyword.validateJSON(item);
            };
        }
        if (data['names']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['names'])) {
                throw new Error("Expected the field `names` to be an array in the JSON data but got " + data['names']);
            }
            // validate the optional field `names` (array)
            for (const item of data['names']) {
                Name.validateJSON(item);
            };
        }
        if (data['nicknames']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['nicknames'])) {
                throw new Error("Expected the field `nicknames` to be an array in the JSON data but got " + data['nicknames']);
            }
            // validate the optional field `nicknames` (array)
            for (const item of data['nicknames']) {
                Nickname.validateJSON(item);
            };
        }
        if (data['occupations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['occupations'])) {
                throw new Error("Expected the field `occupations` to be an array in the JSON data but got " + data['occupations']);
            }
            // validate the optional field `occupations` (array)
            for (const item of data['occupations']) {
                Occupation.validateJSON(item);
            };
        }
        if (data['organizations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['organizations'])) {
                throw new Error("Expected the field `organizations` to be an array in the JSON data but got " + data['organizations']);
            }
            // validate the optional field `organizations` (array)
            for (const item of data['organizations']) {
                Organization.validateJSON(item);
            };
        }
        if (data['phoneNumbers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['phoneNumbers'])) {
                throw new Error("Expected the field `phoneNumbers` to be an array in the JSON data but got " + data['phoneNumbers']);
            }
            // validate the optional field `phoneNumbers` (array)
            for (const item of data['phoneNumbers']) {
                PhoneNumber.validateJSON(item);
            };
        }
        if (data['photos']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['photos'])) {
                throw new Error("Expected the field `photos` to be an array in the JSON data but got " + data['photos']);
            }
            // validate the optional field `photos` (array)
            for (const item of data['photos']) {
                Photo.validateJSON(item);
            };
        }
        if (data['relations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['relations'])) {
                throw new Error("Expected the field `relations` to be an array in the JSON data but got " + data['relations']);
            }
            // validate the optional field `relations` (array)
            for (const item of data['relations']) {
                Relation.validateJSON(item);
            };
        }
        if (data['relationshipInterests']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['relationshipInterests'])) {
                throw new Error("Expected the field `relationshipInterests` to be an array in the JSON data but got " + data['relationshipInterests']);
            }
            // validate the optional field `relationshipInterests` (array)
            for (const item of data['relationshipInterests']) {
                RelationshipInterest.validateJSON(item);
            };
        }
        if (data['relationshipStatuses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['relationshipStatuses'])) {
                throw new Error("Expected the field `relationshipStatuses` to be an array in the JSON data but got " + data['relationshipStatuses']);
            }
            // validate the optional field `relationshipStatuses` (array)
            for (const item of data['relationshipStatuses']) {
                RelationshipStatus.validateJSON(item);
            };
        }
        if (data['residences']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['residences'])) {
                throw new Error("Expected the field `residences` to be an array in the JSON data but got " + data['residences']);
            }
            // validate the optional field `residences` (array)
            for (const item of data['residences']) {
                Residence.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['resourceName'] && !(typeof data['resourceName'] === 'string' || data['resourceName'] instanceof String)) {
            throw new Error("Expected the field `resourceName` to be a primitive type in the JSON string but got " + data['resourceName']);
        }
        if (data['sipAddresses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sipAddresses'])) {
                throw new Error("Expected the field `sipAddresses` to be an array in the JSON data but got " + data['sipAddresses']);
            }
            // validate the optional field `sipAddresses` (array)
            for (const item of data['sipAddresses']) {
                SipAddress.validateJSON(item);
            };
        }
        if (data['skills']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['skills'])) {
                throw new Error("Expected the field `skills` to be an array in the JSON data but got " + data['skills']);
            }
            // validate the optional field `skills` (array)
            for (const item of data['skills']) {
                Skill.validateJSON(item);
            };
        }
        if (data['taglines']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['taglines'])) {
                throw new Error("Expected the field `taglines` to be an array in the JSON data but got " + data['taglines']);
            }
            // validate the optional field `taglines` (array)
            for (const item of data['taglines']) {
                Tagline.validateJSON(item);
            };
        }
        if (data['urls']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['urls'])) {
                throw new Error("Expected the field `urls` to be an array in the JSON data but got " + data['urls']);
            }
            // validate the optional field `urls` (array)
            for (const item of data['urls']) {
                Url.validateJSON(item);
            };
        }
        if (data['userDefined']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['userDefined'])) {
                throw new Error("Expected the field `userDefined` to be an array in the JSON data but got " + data['userDefined']);
            }
            // validate the optional field `userDefined` (array)
            for (const item of data['userDefined']) {
                UserDefined.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The person's street addresses.
 * @member {Array.<module:model/Address>} addresses
 */
Person.prototype['addresses'] = undefined;

/**
 * Output only. **DEPRECATED** (Please use `person.ageRanges` instead) The person's age range.
 * @member {module:model/Person.AgeRangeEnum} ageRange
 */
Person.prototype['ageRange'] = undefined;

/**
 * Output only. The person's age ranges.
 * @member {Array.<module:model/AgeRangeType>} ageRanges
 */
Person.prototype['ageRanges'] = undefined;

/**
 * The person's biographies. This field is a singleton for contact sources.
 * @member {Array.<module:model/Biography>} biographies
 */
Person.prototype['biographies'] = undefined;

/**
 * The person's birthdays. This field is a singleton for contact sources.
 * @member {Array.<module:model/Birthday>} birthdays
 */
Person.prototype['birthdays'] = undefined;

/**
 * **DEPRECATED**: No data will be returned The person's bragging rights.
 * @member {Array.<module:model/BraggingRights>} braggingRights
 */
Person.prototype['braggingRights'] = undefined;

/**
 * The person's calendar URLs.
 * @member {Array.<module:model/CalendarUrl>} calendarUrls
 */
Person.prototype['calendarUrls'] = undefined;

/**
 * The person's client data.
 * @member {Array.<module:model/ClientData>} clientData
 */
Person.prototype['clientData'] = undefined;

/**
 * Output only. The person's cover photos.
 * @member {Array.<module:model/CoverPhoto>} coverPhotos
 */
Person.prototype['coverPhotos'] = undefined;

/**
 * The person's email addresses. For `people.connections.list` and `otherContacts.list` the number of email addresses is limited to 100. If a Person has more email addresses the entire set can be obtained by calling GetPeople.
 * @member {Array.<module:model/EmailAddress>} emailAddresses
 */
Person.prototype['emailAddresses'] = undefined;

/**
 * The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the resource. Used for web cache validation.
 * @member {String} etag
 */
Person.prototype['etag'] = undefined;

/**
 * The person's events.
 * @member {Array.<module:model/Event>} events
 */
Person.prototype['events'] = undefined;

/**
 * The person's external IDs.
 * @member {Array.<module:model/ExternalId>} externalIds
 */
Person.prototype['externalIds'] = undefined;

/**
 * The person's file-ases.
 * @member {Array.<module:model/FileAs>} fileAses
 */
Person.prototype['fileAses'] = undefined;

/**
 * The person's genders. This field is a singleton for contact sources.
 * @member {Array.<module:model/Gender>} genders
 */
Person.prototype['genders'] = undefined;

/**
 * The person's instant messaging clients.
 * @member {Array.<module:model/ImClient>} imClients
 */
Person.prototype['imClients'] = undefined;

/**
 * The person's interests.
 * @member {Array.<module:model/Interest>} interests
 */
Person.prototype['interests'] = undefined;

/**
 * The person's locale preferences.
 * @member {Array.<module:model/Locale>} locales
 */
Person.prototype['locales'] = undefined;

/**
 * The person's locations.
 * @member {Array.<module:model/Location>} locations
 */
Person.prototype['locations'] = undefined;

/**
 * The person's group memberships.
 * @member {Array.<module:model/Membership>} memberships
 */
Person.prototype['memberships'] = undefined;

/**
 * @member {module:model/PersonMetadata} metadata
 */
Person.prototype['metadata'] = undefined;

/**
 * The person's miscellaneous keywords.
 * @member {Array.<module:model/MiscKeyword>} miscKeywords
 */
Person.prototype['miscKeywords'] = undefined;

/**
 * The person's names. This field is a singleton for contact sources.
 * @member {Array.<module:model/Name>} names
 */
Person.prototype['names'] = undefined;

/**
 * The person's nicknames.
 * @member {Array.<module:model/Nickname>} nicknames
 */
Person.prototype['nicknames'] = undefined;

/**
 * The person's occupations.
 * @member {Array.<module:model/Occupation>} occupations
 */
Person.prototype['occupations'] = undefined;

/**
 * The person's past or current organizations.
 * @member {Array.<module:model/Organization>} organizations
 */
Person.prototype['organizations'] = undefined;

/**
 * The person's phone numbers. For `people.connections.list` and `otherContacts.list` the number of phone numbers is limited to 100. If a Person has more phone numbers the entire set can be obtained by calling GetPeople.
 * @member {Array.<module:model/PhoneNumber>} phoneNumbers
 */
Person.prototype['phoneNumbers'] = undefined;

/**
 * Output only. The person's photos.
 * @member {Array.<module:model/Photo>} photos
 */
Person.prototype['photos'] = undefined;

/**
 * The person's relations.
 * @member {Array.<module:model/Relation>} relations
 */
Person.prototype['relations'] = undefined;

/**
 * Output only. **DEPRECATED**: No data will be returned The person's relationship interests.
 * @member {Array.<module:model/RelationshipInterest>} relationshipInterests
 */
Person.prototype['relationshipInterests'] = undefined;

/**
 * Output only. **DEPRECATED**: No data will be returned The person's relationship statuses.
 * @member {Array.<module:model/RelationshipStatus>} relationshipStatuses
 */
Person.prototype['relationshipStatuses'] = undefined;

/**
 * **DEPRECATED**: (Please use `person.locations` instead) The person's residences.
 * @member {Array.<module:model/Residence>} residences
 */
Person.prototype['residences'] = undefined;

/**
 * The resource name for the person, assigned by the server. An ASCII string in the form of `people/{person_id}`.
 * @member {String} resourceName
 */
Person.prototype['resourceName'] = undefined;

/**
 * The person's SIP addresses.
 * @member {Array.<module:model/SipAddress>} sipAddresses
 */
Person.prototype['sipAddresses'] = undefined;

/**
 * The person's skills.
 * @member {Array.<module:model/Skill>} skills
 */
Person.prototype['skills'] = undefined;

/**
 * Output only. **DEPRECATED**: No data will be returned The person's taglines.
 * @member {Array.<module:model/Tagline>} taglines
 */
Person.prototype['taglines'] = undefined;

/**
 * The person's associated URLs.
 * @member {Array.<module:model/Url>} urls
 */
Person.prototype['urls'] = undefined;

/**
 * The person's user defined data.
 * @member {Array.<module:model/UserDefined>} userDefined
 */
Person.prototype['userDefined'] = undefined;





/**
 * Allowed values for the <code>ageRange</code> property.
 * @enum {String}
 * @readonly
 */
Person['AgeRangeEnum'] = {

    /**
     * value: "AGE_RANGE_UNSPECIFIED"
     * @const
     */
    "AGE_RANGE_UNSPECIFIED": "AGE_RANGE_UNSPECIFIED",

    /**
     * value: "LESS_THAN_EIGHTEEN"
     * @const
     */
    "LESS_THAN_EIGHTEEN": "LESS_THAN_EIGHTEEN",

    /**
     * value: "EIGHTEEN_TO_TWENTY"
     * @const
     */
    "EIGHTEEN_TO_TWENTY": "EIGHTEEN_TO_TWENTY",

    /**
     * value: "TWENTY_ONE_OR_OLDER"
     * @const
     */
    "TWENTY_ONE_OR_OLDER": "TWENTY_ONE_OR_OLDER"
};



export default Person;

