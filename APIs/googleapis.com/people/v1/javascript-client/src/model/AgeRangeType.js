/**
 * People API
 * Provides access to information about profiles and contacts.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FieldMetadata from './FieldMetadata';

/**
 * The AgeRangeType model module.
 * @module model/AgeRangeType
 * @version v1
 */
class AgeRangeType {
    /**
     * Constructs a new <code>AgeRangeType</code>.
     * A person&#39;s age range.
     * @alias module:model/AgeRangeType
     */
    constructor() { 
        
        AgeRangeType.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AgeRangeType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AgeRangeType} obj Optional instance to populate.
     * @return {module:model/AgeRangeType} The populated <code>AgeRangeType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AgeRangeType();

            if (data.hasOwnProperty('ageRange')) {
                obj['ageRange'] = ApiClient.convertToType(data['ageRange'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = FieldMetadata.constructFromObject(data['metadata']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AgeRangeType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AgeRangeType</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ageRange'] && !(typeof data['ageRange'] === 'string' || data['ageRange'] instanceof String)) {
            throw new Error("Expected the field `ageRange` to be a primitive type in the JSON string but got " + data['ageRange']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          FieldMetadata.validateJSON(data['metadata']);
        }

        return true;
    }


}



/**
 * The age range.
 * @member {module:model/AgeRangeType.AgeRangeEnum} ageRange
 */
AgeRangeType.prototype['ageRange'] = undefined;

/**
 * @member {module:model/FieldMetadata} metadata
 */
AgeRangeType.prototype['metadata'] = undefined;





/**
 * Allowed values for the <code>ageRange</code> property.
 * @enum {String}
 * @readonly
 */
AgeRangeType['AgeRangeEnum'] = {

    /**
     * value: "AGE_RANGE_UNSPECIFIED"
     * @const
     */
    "AGE_RANGE_UNSPECIFIED": "AGE_RANGE_UNSPECIFIED",

    /**
     * value: "LESS_THAN_EIGHTEEN"
     * @const
     */
    "LESS_THAN_EIGHTEEN": "LESS_THAN_EIGHTEEN",

    /**
     * value: "EIGHTEEN_TO_TWENTY"
     * @const
     */
    "EIGHTEEN_TO_TWENTY": "EIGHTEEN_TO_TWENTY",

    /**
     * value: "TWENTY_ONE_OR_OLDER"
     * @const
     */
    "TWENTY_ONE_OR_OLDER": "TWENTY_ONE_OR_OLDER"
};



export default AgeRangeType;

