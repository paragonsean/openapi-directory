/**
 * People API
 * Provides access to information about profiles and contacts.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FieldMetadata from './FieldMetadata';

/**
 * The Address model module.
 * @module model/Address
 * @version v1
 */
class Address {
    /**
     * Constructs a new <code>Address</code>.
     * A person&#39;s physical address. May be a P.O. box or street address. All fields are optional.
     * @alias module:model/Address
     */
    constructor() { 
        
        Address.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Address</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Address} obj Optional instance to populate.
     * @return {module:model/Address} The populated <code>Address</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Address();

            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('countryCode')) {
                obj['countryCode'] = ApiClient.convertToType(data['countryCode'], 'String');
            }
            if (data.hasOwnProperty('extendedAddress')) {
                obj['extendedAddress'] = ApiClient.convertToType(data['extendedAddress'], 'String');
            }
            if (data.hasOwnProperty('formattedType')) {
                obj['formattedType'] = ApiClient.convertToType(data['formattedType'], 'String');
            }
            if (data.hasOwnProperty('formattedValue')) {
                obj['formattedValue'] = ApiClient.convertToType(data['formattedValue'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = FieldMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('poBox')) {
                obj['poBox'] = ApiClient.convertToType(data['poBox'], 'String');
            }
            if (data.hasOwnProperty('postalCode')) {
                obj['postalCode'] = ApiClient.convertToType(data['postalCode'], 'String');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('streetAddress')) {
                obj['streetAddress'] = ApiClient.convertToType(data['streetAddress'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Address</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Address</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['countryCode'] && !(typeof data['countryCode'] === 'string' || data['countryCode'] instanceof String)) {
            throw new Error("Expected the field `countryCode` to be a primitive type in the JSON string but got " + data['countryCode']);
        }
        // ensure the json data is a string
        if (data['extendedAddress'] && !(typeof data['extendedAddress'] === 'string' || data['extendedAddress'] instanceof String)) {
            throw new Error("Expected the field `extendedAddress` to be a primitive type in the JSON string but got " + data['extendedAddress']);
        }
        // ensure the json data is a string
        if (data['formattedType'] && !(typeof data['formattedType'] === 'string' || data['formattedType'] instanceof String)) {
            throw new Error("Expected the field `formattedType` to be a primitive type in the JSON string but got " + data['formattedType']);
        }
        // ensure the json data is a string
        if (data['formattedValue'] && !(typeof data['formattedValue'] === 'string' || data['formattedValue'] instanceof String)) {
            throw new Error("Expected the field `formattedValue` to be a primitive type in the JSON string but got " + data['formattedValue']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          FieldMetadata.validateJSON(data['metadata']);
        }
        // ensure the json data is a string
        if (data['poBox'] && !(typeof data['poBox'] === 'string' || data['poBox'] instanceof String)) {
            throw new Error("Expected the field `poBox` to be a primitive type in the JSON string but got " + data['poBox']);
        }
        // ensure the json data is a string
        if (data['postalCode'] && !(typeof data['postalCode'] === 'string' || data['postalCode'] instanceof String)) {
            throw new Error("Expected the field `postalCode` to be a primitive type in the JSON string but got " + data['postalCode']);
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }
        // ensure the json data is a string
        if (data['streetAddress'] && !(typeof data['streetAddress'] === 'string' || data['streetAddress'] instanceof String)) {
            throw new Error("Expected the field `streetAddress` to be a primitive type in the JSON string but got " + data['streetAddress']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The city of the address.
 * @member {String} city
 */
Address.prototype['city'] = undefined;

/**
 * The country of the address.
 * @member {String} country
 */
Address.prototype['country'] = undefined;

/**
 * The [ISO 3166-1 alpha-2](http://www.iso.org/iso/country_codes.htm) country code of the address.
 * @member {String} countryCode
 */
Address.prototype['countryCode'] = undefined;

/**
 * The extended address of the address; for example, the apartment number.
 * @member {String} extendedAddress
 */
Address.prototype['extendedAddress'] = undefined;

/**
 * Output only. The type of the address translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.
 * @member {String} formattedType
 */
Address.prototype['formattedType'] = undefined;

/**
 * The unstructured value of the address. If this is not set by the user it will be automatically constructed from structured values.
 * @member {String} formattedValue
 */
Address.prototype['formattedValue'] = undefined;

/**
 * @member {module:model/FieldMetadata} metadata
 */
Address.prototype['metadata'] = undefined;

/**
 * The P.O. box of the address.
 * @member {String} poBox
 */
Address.prototype['poBox'] = undefined;

/**
 * The postal code of the address.
 * @member {String} postalCode
 */
Address.prototype['postalCode'] = undefined;

/**
 * The region of the address; for example, the state or province.
 * @member {String} region
 */
Address.prototype['region'] = undefined;

/**
 * The street address.
 * @member {String} streetAddress
 */
Address.prototype['streetAddress'] = undefined;

/**
 * The type of the address. The type can be custom or one of these predefined values: * `home` * `work` * `other`
 * @member {String} type
 */
Address.prototype['type'] = undefined;






export default Address;

