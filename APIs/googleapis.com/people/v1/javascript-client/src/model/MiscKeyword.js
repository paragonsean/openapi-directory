/**
 * People API
 * Provides access to information about profiles and contacts.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FieldMetadata from './FieldMetadata';

/**
 * The MiscKeyword model module.
 * @module model/MiscKeyword
 * @version v1
 */
class MiscKeyword {
    /**
     * Constructs a new <code>MiscKeyword</code>.
     * A person&#39;s miscellaneous keyword.
     * @alias module:model/MiscKeyword
     */
    constructor() { 
        
        MiscKeyword.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MiscKeyword</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MiscKeyword} obj Optional instance to populate.
     * @return {module:model/MiscKeyword} The populated <code>MiscKeyword</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MiscKeyword();

            if (data.hasOwnProperty('formattedType')) {
                obj['formattedType'] = ApiClient.convertToType(data['formattedType'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = FieldMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MiscKeyword</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MiscKeyword</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['formattedType'] && !(typeof data['formattedType'] === 'string' || data['formattedType'] instanceof String)) {
            throw new Error("Expected the field `formattedType` to be a primitive type in the JSON string but got " + data['formattedType']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          FieldMetadata.validateJSON(data['metadata']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}



/**
 * Output only. The type of the miscellaneous keyword translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.
 * @member {String} formattedType
 */
MiscKeyword.prototype['formattedType'] = undefined;

/**
 * @member {module:model/FieldMetadata} metadata
 */
MiscKeyword.prototype['metadata'] = undefined;

/**
 * The miscellaneous keyword type.
 * @member {module:model/MiscKeyword.TypeEnum} type
 */
MiscKeyword.prototype['type'] = undefined;

/**
 * The value of the miscellaneous keyword.
 * @member {String} value
 */
MiscKeyword.prototype['value'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
MiscKeyword['TypeEnum'] = {

    /**
     * value: "TYPE_UNSPECIFIED"
     * @const
     */
    "TYPE_UNSPECIFIED": "TYPE_UNSPECIFIED",

    /**
     * value: "OUTLOOK_BILLING_INFORMATION"
     * @const
     */
    "OUTLOOK_BILLING_INFORMATION": "OUTLOOK_BILLING_INFORMATION",

    /**
     * value: "OUTLOOK_DIRECTORY_SERVER"
     * @const
     */
    "OUTLOOK_DIRECTORY_SERVER": "OUTLOOK_DIRECTORY_SERVER",

    /**
     * value: "OUTLOOK_KEYWORD"
     * @const
     */
    "OUTLOOK_KEYWORD": "OUTLOOK_KEYWORD",

    /**
     * value: "OUTLOOK_MILEAGE"
     * @const
     */
    "OUTLOOK_MILEAGE": "OUTLOOK_MILEAGE",

    /**
     * value: "OUTLOOK_PRIORITY"
     * @const
     */
    "OUTLOOK_PRIORITY": "OUTLOOK_PRIORITY",

    /**
     * value: "OUTLOOK_SENSITIVITY"
     * @const
     */
    "OUTLOOK_SENSITIVITY": "OUTLOOK_SENSITIVITY",

    /**
     * value: "OUTLOOK_SUBJECT"
     * @const
     */
    "OUTLOOK_SUBJECT": "OUTLOOK_SUBJECT",

    /**
     * value: "OUTLOOK_USER"
     * @const
     */
    "OUTLOOK_USER": "OUTLOOK_USER",

    /**
     * value: "HOME"
     * @const
     */
    "HOME": "HOME",

    /**
     * value: "WORK"
     * @const
     */
    "WORK": "WORK",

    /**
     * value: "OTHER"
     * @const
     */
    "OTHER": "OTHER"
};



export default MiscKeyword;

