/**
 * People API
 * Provides access to information about profiles and contacts.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Source from './Source';

/**
 * The PersonMetadata model module.
 * @module model/PersonMetadata
 * @version v1
 */
class PersonMetadata {
    /**
     * Constructs a new <code>PersonMetadata</code>.
     * The metadata about a person.
     * @alias module:model/PersonMetadata
     */
    constructor() { 
        
        PersonMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PersonMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PersonMetadata} obj Optional instance to populate.
     * @return {module:model/PersonMetadata} The populated <code>PersonMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PersonMetadata();

            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('linkedPeopleResourceNames')) {
                obj['linkedPeopleResourceNames'] = ApiClient.convertToType(data['linkedPeopleResourceNames'], ['String']);
            }
            if (data.hasOwnProperty('objectType')) {
                obj['objectType'] = ApiClient.convertToType(data['objectType'], 'String');
            }
            if (data.hasOwnProperty('previousResourceNames')) {
                obj['previousResourceNames'] = ApiClient.convertToType(data['previousResourceNames'], ['String']);
            }
            if (data.hasOwnProperty('sources')) {
                obj['sources'] = ApiClient.convertToType(data['sources'], [Source]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PersonMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PersonMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['linkedPeopleResourceNames'])) {
            throw new Error("Expected the field `linkedPeopleResourceNames` to be an array in the JSON data but got " + data['linkedPeopleResourceNames']);
        }
        // ensure the json data is a string
        if (data['objectType'] && !(typeof data['objectType'] === 'string' || data['objectType'] instanceof String)) {
            throw new Error("Expected the field `objectType` to be a primitive type in the JSON string but got " + data['objectType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['previousResourceNames'])) {
            throw new Error("Expected the field `previousResourceNames` to be an array in the JSON data but got " + data['previousResourceNames']);
        }
        if (data['sources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sources'])) {
                throw new Error("Expected the field `sources` to be an array in the JSON data but got " + data['sources']);
            }
            // validate the optional field `sources` (array)
            for (const item of data['sources']) {
                Source.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Output only. True if the person resource has been deleted. Populated only for `people.connections.list` and `otherContacts.list` sync requests.
 * @member {Boolean} deleted
 */
PersonMetadata.prototype['deleted'] = undefined;

/**
 * Output only. Resource names of people linked to this resource.
 * @member {Array.<String>} linkedPeopleResourceNames
 */
PersonMetadata.prototype['linkedPeopleResourceNames'] = undefined;

/**
 * Output only. **DEPRECATED** (Please use `person.metadata.sources.profileMetadata.objectType` instead) The type of the person object.
 * @member {module:model/PersonMetadata.ObjectTypeEnum} objectType
 */
PersonMetadata.prototype['objectType'] = undefined;

/**
 * Output only. Any former resource names this person has had. Populated only for `people.connections.list` requests that include a sync token. The resource name may change when adding or removing fields that link a contact and profile such as a verified email, verified phone number, or profile URL.
 * @member {Array.<String>} previousResourceNames
 */
PersonMetadata.prototype['previousResourceNames'] = undefined;

/**
 * The sources of data for the person.
 * @member {Array.<module:model/Source>} sources
 */
PersonMetadata.prototype['sources'] = undefined;





/**
 * Allowed values for the <code>objectType</code> property.
 * @enum {String}
 * @readonly
 */
PersonMetadata['ObjectTypeEnum'] = {

    /**
     * value: "OBJECT_TYPE_UNSPECIFIED"
     * @const
     */
    "OBJECT_TYPE_UNSPECIFIED": "OBJECT_TYPE_UNSPECIFIED",

    /**
     * value: "PERSON"
     * @const
     */
    "PERSON": "PERSON",

    /**
     * value: "PAGE"
     * @const
     */
    "PAGE": "PAGE"
};



export default PersonMetadata;

