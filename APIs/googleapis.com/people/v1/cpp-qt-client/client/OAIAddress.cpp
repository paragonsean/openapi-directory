/**
 * People API
 * Provides access to information about profiles and contacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddress::OAIAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddress::OAIAddress() {
    this->initializeModel();
}

OAIAddress::~OAIAddress() {}

void OAIAddress::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_extended_address_isSet = false;
    m_extended_address_isValid = false;

    m_formatted_type_isSet = false;
    m_formatted_type_isValid = false;

    m_formatted_value_isSet = false;
    m_formatted_value_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_po_box_isSet = false;
    m_po_box_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_street_address_isSet = false;
    m_street_address_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddress::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_extended_address_isValid = ::OpenAPI::fromJsonValue(m_extended_address, json[QString("extendedAddress")]);
    m_extended_address_isSet = !json[QString("extendedAddress")].isNull() && m_extended_address_isValid;

    m_formatted_type_isValid = ::OpenAPI::fromJsonValue(m_formatted_type, json[QString("formattedType")]);
    m_formatted_type_isSet = !json[QString("formattedType")].isNull() && m_formatted_type_isValid;

    m_formatted_value_isValid = ::OpenAPI::fromJsonValue(m_formatted_value, json[QString("formattedValue")]);
    m_formatted_value_isSet = !json[QString("formattedValue")].isNull() && m_formatted_value_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_po_box_isValid = ::OpenAPI::fromJsonValue(m_po_box, json[QString("poBox")]);
    m_po_box_isSet = !json[QString("poBox")].isNull() && m_po_box_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postalCode")]);
    m_postal_code_isSet = !json[QString("postalCode")].isNull() && m_postal_code_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_street_address_isValid = ::OpenAPI::fromJsonValue(m_street_address, json[QString("streetAddress")]);
    m_street_address_isSet = !json[QString("streetAddress")].isNull() && m_street_address_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_extended_address_isSet) {
        obj.insert(QString("extendedAddress"), ::OpenAPI::toJsonValue(m_extended_address));
    }
    if (m_formatted_type_isSet) {
        obj.insert(QString("formattedType"), ::OpenAPI::toJsonValue(m_formatted_type));
    }
    if (m_formatted_value_isSet) {
        obj.insert(QString("formattedValue"), ::OpenAPI::toJsonValue(m_formatted_value));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_po_box_isSet) {
        obj.insert(QString("poBox"), ::OpenAPI::toJsonValue(m_po_box));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_street_address_isSet) {
        obj.insert(QString("streetAddress"), ::OpenAPI::toJsonValue(m_street_address));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIAddress::getCity() const {
    return m_city;
}
void OAIAddress::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIAddress::is_city_Set() const{
    return m_city_isSet;
}

bool OAIAddress::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIAddress::getCountry() const {
    return m_country;
}
void OAIAddress::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIAddress::is_country_Set() const{
    return m_country_isSet;
}

bool OAIAddress::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIAddress::getCountryCode() const {
    return m_country_code;
}
void OAIAddress::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIAddress::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIAddress::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIAddress::getExtendedAddress() const {
    return m_extended_address;
}
void OAIAddress::setExtendedAddress(const QString &extended_address) {
    m_extended_address = extended_address;
    m_extended_address_isSet = true;
}

bool OAIAddress::is_extended_address_Set() const{
    return m_extended_address_isSet;
}

bool OAIAddress::is_extended_address_Valid() const{
    return m_extended_address_isValid;
}

QString OAIAddress::getFormattedType() const {
    return m_formatted_type;
}
void OAIAddress::setFormattedType(const QString &formatted_type) {
    m_formatted_type = formatted_type;
    m_formatted_type_isSet = true;
}

bool OAIAddress::is_formatted_type_Set() const{
    return m_formatted_type_isSet;
}

bool OAIAddress::is_formatted_type_Valid() const{
    return m_formatted_type_isValid;
}

QString OAIAddress::getFormattedValue() const {
    return m_formatted_value;
}
void OAIAddress::setFormattedValue(const QString &formatted_value) {
    m_formatted_value = formatted_value;
    m_formatted_value_isSet = true;
}

bool OAIAddress::is_formatted_value_Set() const{
    return m_formatted_value_isSet;
}

bool OAIAddress::is_formatted_value_Valid() const{
    return m_formatted_value_isValid;
}

OAIFieldMetadata OAIAddress::getMetadata() const {
    return m_metadata;
}
void OAIAddress::setMetadata(const OAIFieldMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIAddress::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIAddress::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIAddress::getPoBox() const {
    return m_po_box;
}
void OAIAddress::setPoBox(const QString &po_box) {
    m_po_box = po_box;
    m_po_box_isSet = true;
}

bool OAIAddress::is_po_box_Set() const{
    return m_po_box_isSet;
}

bool OAIAddress::is_po_box_Valid() const{
    return m_po_box_isValid;
}

QString OAIAddress::getPostalCode() const {
    return m_postal_code;
}
void OAIAddress::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIAddress::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIAddress::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAIAddress::getRegion() const {
    return m_region;
}
void OAIAddress::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIAddress::is_region_Set() const{
    return m_region_isSet;
}

bool OAIAddress::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIAddress::getStreetAddress() const {
    return m_street_address;
}
void OAIAddress::setStreetAddress(const QString &street_address) {
    m_street_address = street_address;
    m_street_address_isSet = true;
}

bool OAIAddress::is_street_address_Set() const{
    return m_street_address_isSet;
}

bool OAIAddress::is_street_address_Valid() const{
    return m_street_address_isValid;
}

QString OAIAddress::getType() const {
    return m_type;
}
void OAIAddress::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAddress::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAddress::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extended_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_po_box_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
