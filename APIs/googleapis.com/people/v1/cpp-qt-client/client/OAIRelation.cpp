/**
 * People API
 * Provides access to information about profiles and contacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelation::OAIRelation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelation::OAIRelation() {
    this->initializeModel();
}

OAIRelation::~OAIRelation() {}

void OAIRelation::initializeModel() {

    m_formatted_type_isSet = false;
    m_formatted_type_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_person_isSet = false;
    m_person_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIRelation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRelation::fromJsonObject(QJsonObject json) {

    m_formatted_type_isValid = ::OpenAPI::fromJsonValue(m_formatted_type, json[QString("formattedType")]);
    m_formatted_type_isSet = !json[QString("formattedType")].isNull() && m_formatted_type_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_person_isValid = ::OpenAPI::fromJsonValue(m_person, json[QString("person")]);
    m_person_isSet = !json[QString("person")].isNull() && m_person_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIRelation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRelation::asJsonObject() const {
    QJsonObject obj;
    if (m_formatted_type_isSet) {
        obj.insert(QString("formattedType"), ::OpenAPI::toJsonValue(m_formatted_type));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_person_isSet) {
        obj.insert(QString("person"), ::OpenAPI::toJsonValue(m_person));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIRelation::getFormattedType() const {
    return m_formatted_type;
}
void OAIRelation::setFormattedType(const QString &formatted_type) {
    m_formatted_type = formatted_type;
    m_formatted_type_isSet = true;
}

bool OAIRelation::is_formatted_type_Set() const{
    return m_formatted_type_isSet;
}

bool OAIRelation::is_formatted_type_Valid() const{
    return m_formatted_type_isValid;
}

OAIFieldMetadata OAIRelation::getMetadata() const {
    return m_metadata;
}
void OAIRelation::setMetadata(const OAIFieldMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIRelation::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIRelation::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIRelation::getPerson() const {
    return m_person;
}
void OAIRelation::setPerson(const QString &person) {
    m_person = person;
    m_person_isSet = true;
}

bool OAIRelation::is_person_Set() const{
    return m_person_isSet;
}

bool OAIRelation::is_person_Valid() const{
    return m_person_isValid;
}

QString OAIRelation::getType() const {
    return m_type;
}
void OAIRelation::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRelation::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRelation::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIRelation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_formatted_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_person_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRelation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
