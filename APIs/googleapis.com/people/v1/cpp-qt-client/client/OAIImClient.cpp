/**
 * People API
 * Provides access to information about profiles and contacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImClient.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImClient::OAIImClient(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImClient::OAIImClient() {
    this->initializeModel();
}

OAIImClient::~OAIImClient() {}

void OAIImClient::initializeModel() {

    m_formatted_protocol_isSet = false;
    m_formatted_protocol_isValid = false;

    m_formatted_type_isSet = false;
    m_formatted_type_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIImClient::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImClient::fromJsonObject(QJsonObject json) {

    m_formatted_protocol_isValid = ::OpenAPI::fromJsonValue(m_formatted_protocol, json[QString("formattedProtocol")]);
    m_formatted_protocol_isSet = !json[QString("formattedProtocol")].isNull() && m_formatted_protocol_isValid;

    m_formatted_type_isValid = ::OpenAPI::fromJsonValue(m_formatted_type, json[QString("formattedType")]);
    m_formatted_type_isSet = !json[QString("formattedType")].isNull() && m_formatted_type_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIImClient::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImClient::asJsonObject() const {
    QJsonObject obj;
    if (m_formatted_protocol_isSet) {
        obj.insert(QString("formattedProtocol"), ::OpenAPI::toJsonValue(m_formatted_protocol));
    }
    if (m_formatted_type_isSet) {
        obj.insert(QString("formattedType"), ::OpenAPI::toJsonValue(m_formatted_type));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAIImClient::getFormattedProtocol() const {
    return m_formatted_protocol;
}
void OAIImClient::setFormattedProtocol(const QString &formatted_protocol) {
    m_formatted_protocol = formatted_protocol;
    m_formatted_protocol_isSet = true;
}

bool OAIImClient::is_formatted_protocol_Set() const{
    return m_formatted_protocol_isSet;
}

bool OAIImClient::is_formatted_protocol_Valid() const{
    return m_formatted_protocol_isValid;
}

QString OAIImClient::getFormattedType() const {
    return m_formatted_type;
}
void OAIImClient::setFormattedType(const QString &formatted_type) {
    m_formatted_type = formatted_type;
    m_formatted_type_isSet = true;
}

bool OAIImClient::is_formatted_type_Set() const{
    return m_formatted_type_isSet;
}

bool OAIImClient::is_formatted_type_Valid() const{
    return m_formatted_type_isValid;
}

OAIFieldMetadata OAIImClient::getMetadata() const {
    return m_metadata;
}
void OAIImClient::setMetadata(const OAIFieldMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIImClient::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIImClient::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIImClient::getProtocol() const {
    return m_protocol;
}
void OAIImClient::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIImClient::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIImClient::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QString OAIImClient::getType() const {
    return m_type;
}
void OAIImClient::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIImClient::is_type_Set() const{
    return m_type_isSet;
}

bool OAIImClient::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIImClient::getUsername() const {
    return m_username;
}
void OAIImClient::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIImClient::is_username_Set() const{
    return m_username_isSet;
}

bool OAIImClient::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIImClient::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_formatted_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImClient::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
