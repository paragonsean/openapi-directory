/**
 * People API
 * Provides access to information about profiles and contacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProfileMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProfileMetadata::OAIProfileMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProfileMetadata::OAIProfileMetadata() {
    this->initializeModel();
}

OAIProfileMetadata::~OAIProfileMetadata() {}

void OAIProfileMetadata::initializeModel() {

    m_object_type_isSet = false;
    m_object_type_isValid = false;

    m_user_types_isSet = false;
    m_user_types_isValid = false;
}

void OAIProfileMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProfileMetadata::fromJsonObject(QJsonObject json) {

    m_object_type_isValid = ::OpenAPI::fromJsonValue(m_object_type, json[QString("objectType")]);
    m_object_type_isSet = !json[QString("objectType")].isNull() && m_object_type_isValid;

    m_user_types_isValid = ::OpenAPI::fromJsonValue(m_user_types, json[QString("userTypes")]);
    m_user_types_isSet = !json[QString("userTypes")].isNull() && m_user_types_isValid;
}

QString OAIProfileMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProfileMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_object_type_isSet) {
        obj.insert(QString("objectType"), ::OpenAPI::toJsonValue(m_object_type));
    }
    if (m_user_types.size() > 0) {
        obj.insert(QString("userTypes"), ::OpenAPI::toJsonValue(m_user_types));
    }
    return obj;
}

QString OAIProfileMetadata::getObjectType() const {
    return m_object_type;
}
void OAIProfileMetadata::setObjectType(const QString &object_type) {
    m_object_type = object_type;
    m_object_type_isSet = true;
}

bool OAIProfileMetadata::is_object_type_Set() const{
    return m_object_type_isSet;
}

bool OAIProfileMetadata::is_object_type_Valid() const{
    return m_object_type_isValid;
}

QList<QString> OAIProfileMetadata::getUserTypes() const {
    return m_user_types;
}
void OAIProfileMetadata::setUserTypes(const QList<QString> &user_types) {
    m_user_types = user_types;
    m_user_types_isSet = true;
}

bool OAIProfileMetadata::is_user_types_Set() const{
    return m_user_types_isSet;
}

bool OAIProfileMetadata::is_user_types_Valid() const{
    return m_user_types_isValid;
}

bool OAIProfileMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_object_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProfileMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
