/**
 * People API
 * Provides access to information about profiles and contacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrganization.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrganization::OAIOrganization(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrganization::OAIOrganization() {
    this->initializeModel();
}

OAIOrganization::~OAIOrganization() {}

void OAIOrganization::initializeModel() {

    m_cost_center_isSet = false;
    m_cost_center_isValid = false;

    m_current_isSet = false;
    m_current_isValid = false;

    m_department_isSet = false;
    m_department_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_formatted_type_isSet = false;
    m_formatted_type_isValid = false;

    m_full_time_equivalent_millipercent_isSet = false;
    m_full_time_equivalent_millipercent_isValid = false;

    m_job_description_isSet = false;
    m_job_description_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_phonetic_name_isSet = false;
    m_phonetic_name_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_symbol_isSet = false;
    m_symbol_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIOrganization::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrganization::fromJsonObject(QJsonObject json) {

    m_cost_center_isValid = ::OpenAPI::fromJsonValue(m_cost_center, json[QString("costCenter")]);
    m_cost_center_isSet = !json[QString("costCenter")].isNull() && m_cost_center_isValid;

    m_current_isValid = ::OpenAPI::fromJsonValue(m_current, json[QString("current")]);
    m_current_isSet = !json[QString("current")].isNull() && m_current_isValid;

    m_department_isValid = ::OpenAPI::fromJsonValue(m_department, json[QString("department")]);
    m_department_isSet = !json[QString("department")].isNull() && m_department_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_formatted_type_isValid = ::OpenAPI::fromJsonValue(m_formatted_type, json[QString("formattedType")]);
    m_formatted_type_isSet = !json[QString("formattedType")].isNull() && m_formatted_type_isValid;

    m_full_time_equivalent_millipercent_isValid = ::OpenAPI::fromJsonValue(m_full_time_equivalent_millipercent, json[QString("fullTimeEquivalentMillipercent")]);
    m_full_time_equivalent_millipercent_isSet = !json[QString("fullTimeEquivalentMillipercent")].isNull() && m_full_time_equivalent_millipercent_isValid;

    m_job_description_isValid = ::OpenAPI::fromJsonValue(m_job_description, json[QString("jobDescription")]);
    m_job_description_isSet = !json[QString("jobDescription")].isNull() && m_job_description_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_phonetic_name_isValid = ::OpenAPI::fromJsonValue(m_phonetic_name, json[QString("phoneticName")]);
    m_phonetic_name_isSet = !json[QString("phoneticName")].isNull() && m_phonetic_name_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_symbol_isValid = ::OpenAPI::fromJsonValue(m_symbol, json[QString("symbol")]);
    m_symbol_isSet = !json[QString("symbol")].isNull() && m_symbol_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIOrganization::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrganization::asJsonObject() const {
    QJsonObject obj;
    if (m_cost_center_isSet) {
        obj.insert(QString("costCenter"), ::OpenAPI::toJsonValue(m_cost_center));
    }
    if (m_current_isSet) {
        obj.insert(QString("current"), ::OpenAPI::toJsonValue(m_current));
    }
    if (m_department_isSet) {
        obj.insert(QString("department"), ::OpenAPI::toJsonValue(m_department));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_end_date.isSet()) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_formatted_type_isSet) {
        obj.insert(QString("formattedType"), ::OpenAPI::toJsonValue(m_formatted_type));
    }
    if (m_full_time_equivalent_millipercent_isSet) {
        obj.insert(QString("fullTimeEquivalentMillipercent"), ::OpenAPI::toJsonValue(m_full_time_equivalent_millipercent));
    }
    if (m_job_description_isSet) {
        obj.insert(QString("jobDescription"), ::OpenAPI::toJsonValue(m_job_description));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_phonetic_name_isSet) {
        obj.insert(QString("phoneticName"), ::OpenAPI::toJsonValue(m_phonetic_name));
    }
    if (m_start_date.isSet()) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_symbol_isSet) {
        obj.insert(QString("symbol"), ::OpenAPI::toJsonValue(m_symbol));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIOrganization::getCostCenter() const {
    return m_cost_center;
}
void OAIOrganization::setCostCenter(const QString &cost_center) {
    m_cost_center = cost_center;
    m_cost_center_isSet = true;
}

bool OAIOrganization::is_cost_center_Set() const{
    return m_cost_center_isSet;
}

bool OAIOrganization::is_cost_center_Valid() const{
    return m_cost_center_isValid;
}

bool OAIOrganization::isCurrent() const {
    return m_current;
}
void OAIOrganization::setCurrent(const bool &current) {
    m_current = current;
    m_current_isSet = true;
}

bool OAIOrganization::is_current_Set() const{
    return m_current_isSet;
}

bool OAIOrganization::is_current_Valid() const{
    return m_current_isValid;
}

QString OAIOrganization::getDepartment() const {
    return m_department;
}
void OAIOrganization::setDepartment(const QString &department) {
    m_department = department;
    m_department_isSet = true;
}

bool OAIOrganization::is_department_Set() const{
    return m_department_isSet;
}

bool OAIOrganization::is_department_Valid() const{
    return m_department_isValid;
}

QString OAIOrganization::getDomain() const {
    return m_domain;
}
void OAIOrganization::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIOrganization::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIOrganization::is_domain_Valid() const{
    return m_domain_isValid;
}

OAIDate OAIOrganization::getEndDate() const {
    return m_end_date;
}
void OAIOrganization::setEndDate(const OAIDate &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIOrganization::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIOrganization::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAIOrganization::getFormattedType() const {
    return m_formatted_type;
}
void OAIOrganization::setFormattedType(const QString &formatted_type) {
    m_formatted_type = formatted_type;
    m_formatted_type_isSet = true;
}

bool OAIOrganization::is_formatted_type_Set() const{
    return m_formatted_type_isSet;
}

bool OAIOrganization::is_formatted_type_Valid() const{
    return m_formatted_type_isValid;
}

qint32 OAIOrganization::getFullTimeEquivalentMillipercent() const {
    return m_full_time_equivalent_millipercent;
}
void OAIOrganization::setFullTimeEquivalentMillipercent(const qint32 &full_time_equivalent_millipercent) {
    m_full_time_equivalent_millipercent = full_time_equivalent_millipercent;
    m_full_time_equivalent_millipercent_isSet = true;
}

bool OAIOrganization::is_full_time_equivalent_millipercent_Set() const{
    return m_full_time_equivalent_millipercent_isSet;
}

bool OAIOrganization::is_full_time_equivalent_millipercent_Valid() const{
    return m_full_time_equivalent_millipercent_isValid;
}

QString OAIOrganization::getJobDescription() const {
    return m_job_description;
}
void OAIOrganization::setJobDescription(const QString &job_description) {
    m_job_description = job_description;
    m_job_description_isSet = true;
}

bool OAIOrganization::is_job_description_Set() const{
    return m_job_description_isSet;
}

bool OAIOrganization::is_job_description_Valid() const{
    return m_job_description_isValid;
}

QString OAIOrganization::getLocation() const {
    return m_location;
}
void OAIOrganization::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIOrganization::is_location_Set() const{
    return m_location_isSet;
}

bool OAIOrganization::is_location_Valid() const{
    return m_location_isValid;
}

OAIFieldMetadata OAIOrganization::getMetadata() const {
    return m_metadata;
}
void OAIOrganization::setMetadata(const OAIFieldMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIOrganization::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIOrganization::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIOrganization::getName() const {
    return m_name;
}
void OAIOrganization::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOrganization::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOrganization::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIOrganization::getPhoneticName() const {
    return m_phonetic_name;
}
void OAIOrganization::setPhoneticName(const QString &phonetic_name) {
    m_phonetic_name = phonetic_name;
    m_phonetic_name_isSet = true;
}

bool OAIOrganization::is_phonetic_name_Set() const{
    return m_phonetic_name_isSet;
}

bool OAIOrganization::is_phonetic_name_Valid() const{
    return m_phonetic_name_isValid;
}

OAIDate OAIOrganization::getStartDate() const {
    return m_start_date;
}
void OAIOrganization::setStartDate(const OAIDate &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIOrganization::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIOrganization::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIOrganization::getSymbol() const {
    return m_symbol;
}
void OAIOrganization::setSymbol(const QString &symbol) {
    m_symbol = symbol;
    m_symbol_isSet = true;
}

bool OAIOrganization::is_symbol_Set() const{
    return m_symbol_isSet;
}

bool OAIOrganization::is_symbol_Valid() const{
    return m_symbol_isValid;
}

QString OAIOrganization::getTitle() const {
    return m_title;
}
void OAIOrganization::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIOrganization::is_title_Set() const{
    return m_title_isSet;
}

bool OAIOrganization::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIOrganization::getType() const {
    return m_type;
}
void OAIOrganization::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIOrganization::is_type_Set() const{
    return m_type_isSet;
}

bool OAIOrganization::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIOrganization::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cost_center_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_department_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_time_equivalent_millipercent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phonetic_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrganization::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
