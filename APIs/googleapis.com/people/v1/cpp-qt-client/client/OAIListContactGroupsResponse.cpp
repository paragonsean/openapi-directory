/**
 * People API
 * Provides access to information about profiles and contacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListContactGroupsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListContactGroupsResponse::OAIListContactGroupsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListContactGroupsResponse::OAIListContactGroupsResponse() {
    this->initializeModel();
}

OAIListContactGroupsResponse::~OAIListContactGroupsResponse() {}

void OAIListContactGroupsResponse::initializeModel() {

    m_contact_groups_isSet = false;
    m_contact_groups_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_next_sync_token_isSet = false;
    m_next_sync_token_isValid = false;

    m_total_items_isSet = false;
    m_total_items_isValid = false;
}

void OAIListContactGroupsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListContactGroupsResponse::fromJsonObject(QJsonObject json) {

    m_contact_groups_isValid = ::OpenAPI::fromJsonValue(m_contact_groups, json[QString("contactGroups")]);
    m_contact_groups_isSet = !json[QString("contactGroups")].isNull() && m_contact_groups_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_next_sync_token_isValid = ::OpenAPI::fromJsonValue(m_next_sync_token, json[QString("nextSyncToken")]);
    m_next_sync_token_isSet = !json[QString("nextSyncToken")].isNull() && m_next_sync_token_isValid;

    m_total_items_isValid = ::OpenAPI::fromJsonValue(m_total_items, json[QString("totalItems")]);
    m_total_items_isSet = !json[QString("totalItems")].isNull() && m_total_items_isValid;
}

QString OAIListContactGroupsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListContactGroupsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_contact_groups.size() > 0) {
        obj.insert(QString("contactGroups"), ::OpenAPI::toJsonValue(m_contact_groups));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_next_sync_token_isSet) {
        obj.insert(QString("nextSyncToken"), ::OpenAPI::toJsonValue(m_next_sync_token));
    }
    if (m_total_items_isSet) {
        obj.insert(QString("totalItems"), ::OpenAPI::toJsonValue(m_total_items));
    }
    return obj;
}

QList<OAIContactGroup> OAIListContactGroupsResponse::getContactGroups() const {
    return m_contact_groups;
}
void OAIListContactGroupsResponse::setContactGroups(const QList<OAIContactGroup> &contact_groups) {
    m_contact_groups = contact_groups;
    m_contact_groups_isSet = true;
}

bool OAIListContactGroupsResponse::is_contact_groups_Set() const{
    return m_contact_groups_isSet;
}

bool OAIListContactGroupsResponse::is_contact_groups_Valid() const{
    return m_contact_groups_isValid;
}

QString OAIListContactGroupsResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListContactGroupsResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListContactGroupsResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListContactGroupsResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

QString OAIListContactGroupsResponse::getNextSyncToken() const {
    return m_next_sync_token;
}
void OAIListContactGroupsResponse::setNextSyncToken(const QString &next_sync_token) {
    m_next_sync_token = next_sync_token;
    m_next_sync_token_isSet = true;
}

bool OAIListContactGroupsResponse::is_next_sync_token_Set() const{
    return m_next_sync_token_isSet;
}

bool OAIListContactGroupsResponse::is_next_sync_token_Valid() const{
    return m_next_sync_token_isValid;
}

qint32 OAIListContactGroupsResponse::getTotalItems() const {
    return m_total_items;
}
void OAIListContactGroupsResponse::setTotalItems(const qint32 &total_items) {
    m_total_items = total_items;
    m_total_items_isSet = true;
}

bool OAIListContactGroupsResponse::is_total_items_Set() const{
    return m_total_items_isSet;
}

bool OAIListContactGroupsResponse::is_total_items_Valid() const{
    return m_total_items_isValid;
}

bool OAIListContactGroupsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contact_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_sync_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_items_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListContactGroupsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
