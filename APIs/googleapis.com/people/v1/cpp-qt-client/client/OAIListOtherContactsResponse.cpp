/**
 * People API
 * Provides access to information about profiles and contacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListOtherContactsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListOtherContactsResponse::OAIListOtherContactsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListOtherContactsResponse::OAIListOtherContactsResponse() {
    this->initializeModel();
}

OAIListOtherContactsResponse::~OAIListOtherContactsResponse() {}

void OAIListOtherContactsResponse::initializeModel() {

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_next_sync_token_isSet = false;
    m_next_sync_token_isValid = false;

    m_other_contacts_isSet = false;
    m_other_contacts_isValid = false;

    m_total_size_isSet = false;
    m_total_size_isValid = false;
}

void OAIListOtherContactsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListOtherContactsResponse::fromJsonObject(QJsonObject json) {

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_next_sync_token_isValid = ::OpenAPI::fromJsonValue(m_next_sync_token, json[QString("nextSyncToken")]);
    m_next_sync_token_isSet = !json[QString("nextSyncToken")].isNull() && m_next_sync_token_isValid;

    m_other_contacts_isValid = ::OpenAPI::fromJsonValue(m_other_contacts, json[QString("otherContacts")]);
    m_other_contacts_isSet = !json[QString("otherContacts")].isNull() && m_other_contacts_isValid;

    m_total_size_isValid = ::OpenAPI::fromJsonValue(m_total_size, json[QString("totalSize")]);
    m_total_size_isSet = !json[QString("totalSize")].isNull() && m_total_size_isValid;
}

QString OAIListOtherContactsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListOtherContactsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_next_sync_token_isSet) {
        obj.insert(QString("nextSyncToken"), ::OpenAPI::toJsonValue(m_next_sync_token));
    }
    if (m_other_contacts.size() > 0) {
        obj.insert(QString("otherContacts"), ::OpenAPI::toJsonValue(m_other_contacts));
    }
    if (m_total_size_isSet) {
        obj.insert(QString("totalSize"), ::OpenAPI::toJsonValue(m_total_size));
    }
    return obj;
}

QString OAIListOtherContactsResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListOtherContactsResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListOtherContactsResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListOtherContactsResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

QString OAIListOtherContactsResponse::getNextSyncToken() const {
    return m_next_sync_token;
}
void OAIListOtherContactsResponse::setNextSyncToken(const QString &next_sync_token) {
    m_next_sync_token = next_sync_token;
    m_next_sync_token_isSet = true;
}

bool OAIListOtherContactsResponse::is_next_sync_token_Set() const{
    return m_next_sync_token_isSet;
}

bool OAIListOtherContactsResponse::is_next_sync_token_Valid() const{
    return m_next_sync_token_isValid;
}

QList<OAIPerson> OAIListOtherContactsResponse::getOtherContacts() const {
    return m_other_contacts;
}
void OAIListOtherContactsResponse::setOtherContacts(const QList<OAIPerson> &other_contacts) {
    m_other_contacts = other_contacts;
    m_other_contacts_isSet = true;
}

bool OAIListOtherContactsResponse::is_other_contacts_Set() const{
    return m_other_contacts_isSet;
}

bool OAIListOtherContactsResponse::is_other_contacts_Valid() const{
    return m_other_contacts_isValid;
}

qint32 OAIListOtherContactsResponse::getTotalSize() const {
    return m_total_size;
}
void OAIListOtherContactsResponse::setTotalSize(const qint32 &total_size) {
    m_total_size = total_size;
    m_total_size_isSet = true;
}

bool OAIListOtherContactsResponse::is_total_size_Set() const{
    return m_total_size_isSet;
}

bool OAIListOtherContactsResponse::is_total_size_Valid() const{
    return m_total_size_isValid;
}

bool OAIListOtherContactsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_sync_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_contacts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListOtherContactsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
