/**
 * People API
 * Provides access to information about profiles and contacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPersonMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPersonMetadata::OAIPersonMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPersonMetadata::OAIPersonMetadata() {
    this->initializeModel();
}

OAIPersonMetadata::~OAIPersonMetadata() {}

void OAIPersonMetadata::initializeModel() {

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_linked_people_resource_names_isSet = false;
    m_linked_people_resource_names_isValid = false;

    m_object_type_isSet = false;
    m_object_type_isValid = false;

    m_previous_resource_names_isSet = false;
    m_previous_resource_names_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;
}

void OAIPersonMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPersonMetadata::fromJsonObject(QJsonObject json) {

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_linked_people_resource_names_isValid = ::OpenAPI::fromJsonValue(m_linked_people_resource_names, json[QString("linkedPeopleResourceNames")]);
    m_linked_people_resource_names_isSet = !json[QString("linkedPeopleResourceNames")].isNull() && m_linked_people_resource_names_isValid;

    m_object_type_isValid = ::OpenAPI::fromJsonValue(m_object_type, json[QString("objectType")]);
    m_object_type_isSet = !json[QString("objectType")].isNull() && m_object_type_isValid;

    m_previous_resource_names_isValid = ::OpenAPI::fromJsonValue(m_previous_resource_names, json[QString("previousResourceNames")]);
    m_previous_resource_names_isSet = !json[QString("previousResourceNames")].isNull() && m_previous_resource_names_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;
}

QString OAIPersonMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPersonMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_linked_people_resource_names.size() > 0) {
        obj.insert(QString("linkedPeopleResourceNames"), ::OpenAPI::toJsonValue(m_linked_people_resource_names));
    }
    if (m_object_type_isSet) {
        obj.insert(QString("objectType"), ::OpenAPI::toJsonValue(m_object_type));
    }
    if (m_previous_resource_names.size() > 0) {
        obj.insert(QString("previousResourceNames"), ::OpenAPI::toJsonValue(m_previous_resource_names));
    }
    if (m_sources.size() > 0) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    return obj;
}

bool OAIPersonMetadata::isDeleted() const {
    return m_deleted;
}
void OAIPersonMetadata::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIPersonMetadata::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIPersonMetadata::is_deleted_Valid() const{
    return m_deleted_isValid;
}

QList<QString> OAIPersonMetadata::getLinkedPeopleResourceNames() const {
    return m_linked_people_resource_names;
}
void OAIPersonMetadata::setLinkedPeopleResourceNames(const QList<QString> &linked_people_resource_names) {
    m_linked_people_resource_names = linked_people_resource_names;
    m_linked_people_resource_names_isSet = true;
}

bool OAIPersonMetadata::is_linked_people_resource_names_Set() const{
    return m_linked_people_resource_names_isSet;
}

bool OAIPersonMetadata::is_linked_people_resource_names_Valid() const{
    return m_linked_people_resource_names_isValid;
}

QString OAIPersonMetadata::getObjectType() const {
    return m_object_type;
}
void OAIPersonMetadata::setObjectType(const QString &object_type) {
    m_object_type = object_type;
    m_object_type_isSet = true;
}

bool OAIPersonMetadata::is_object_type_Set() const{
    return m_object_type_isSet;
}

bool OAIPersonMetadata::is_object_type_Valid() const{
    return m_object_type_isValid;
}

QList<QString> OAIPersonMetadata::getPreviousResourceNames() const {
    return m_previous_resource_names;
}
void OAIPersonMetadata::setPreviousResourceNames(const QList<QString> &previous_resource_names) {
    m_previous_resource_names = previous_resource_names;
    m_previous_resource_names_isSet = true;
}

bool OAIPersonMetadata::is_previous_resource_names_Set() const{
    return m_previous_resource_names_isSet;
}

bool OAIPersonMetadata::is_previous_resource_names_Valid() const{
    return m_previous_resource_names_isValid;
}

QList<OAISource> OAIPersonMetadata::getSources() const {
    return m_sources;
}
void OAIPersonMetadata::setSources(const QList<OAISource> &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAIPersonMetadata::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAIPersonMetadata::is_sources_Valid() const{
    return m_sources_isValid;
}

bool OAIPersonMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_people_resource_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_resource_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPersonMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
