/**
 * People API
 * Provides access to information about profiles and contacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocation::OAILocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocation::OAILocation() {
    this->initializeModel();
}

OAILocation::~OAILocation() {}

void OAILocation::initializeModel() {

    m_building_id_isSet = false;
    m_building_id_isValid = false;

    m_current_isSet = false;
    m_current_isValid = false;

    m_desk_code_isSet = false;
    m_desk_code_isValid = false;

    m_floor_isSet = false;
    m_floor_isValid = false;

    m_floor_section_isSet = false;
    m_floor_section_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAILocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocation::fromJsonObject(QJsonObject json) {

    m_building_id_isValid = ::OpenAPI::fromJsonValue(m_building_id, json[QString("buildingId")]);
    m_building_id_isSet = !json[QString("buildingId")].isNull() && m_building_id_isValid;

    m_current_isValid = ::OpenAPI::fromJsonValue(m_current, json[QString("current")]);
    m_current_isSet = !json[QString("current")].isNull() && m_current_isValid;

    m_desk_code_isValid = ::OpenAPI::fromJsonValue(m_desk_code, json[QString("deskCode")]);
    m_desk_code_isSet = !json[QString("deskCode")].isNull() && m_desk_code_isValid;

    m_floor_isValid = ::OpenAPI::fromJsonValue(m_floor, json[QString("floor")]);
    m_floor_isSet = !json[QString("floor")].isNull() && m_floor_isValid;

    m_floor_section_isValid = ::OpenAPI::fromJsonValue(m_floor_section, json[QString("floorSection")]);
    m_floor_section_isSet = !json[QString("floorSection")].isNull() && m_floor_section_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAILocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocation::asJsonObject() const {
    QJsonObject obj;
    if (m_building_id_isSet) {
        obj.insert(QString("buildingId"), ::OpenAPI::toJsonValue(m_building_id));
    }
    if (m_current_isSet) {
        obj.insert(QString("current"), ::OpenAPI::toJsonValue(m_current));
    }
    if (m_desk_code_isSet) {
        obj.insert(QString("deskCode"), ::OpenAPI::toJsonValue(m_desk_code));
    }
    if (m_floor_isSet) {
        obj.insert(QString("floor"), ::OpenAPI::toJsonValue(m_floor));
    }
    if (m_floor_section_isSet) {
        obj.insert(QString("floorSection"), ::OpenAPI::toJsonValue(m_floor_section));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAILocation::getBuildingId() const {
    return m_building_id;
}
void OAILocation::setBuildingId(const QString &building_id) {
    m_building_id = building_id;
    m_building_id_isSet = true;
}

bool OAILocation::is_building_id_Set() const{
    return m_building_id_isSet;
}

bool OAILocation::is_building_id_Valid() const{
    return m_building_id_isValid;
}

bool OAILocation::isCurrent() const {
    return m_current;
}
void OAILocation::setCurrent(const bool &current) {
    m_current = current;
    m_current_isSet = true;
}

bool OAILocation::is_current_Set() const{
    return m_current_isSet;
}

bool OAILocation::is_current_Valid() const{
    return m_current_isValid;
}

QString OAILocation::getDeskCode() const {
    return m_desk_code;
}
void OAILocation::setDeskCode(const QString &desk_code) {
    m_desk_code = desk_code;
    m_desk_code_isSet = true;
}

bool OAILocation::is_desk_code_Set() const{
    return m_desk_code_isSet;
}

bool OAILocation::is_desk_code_Valid() const{
    return m_desk_code_isValid;
}

QString OAILocation::getFloor() const {
    return m_floor;
}
void OAILocation::setFloor(const QString &floor) {
    m_floor = floor;
    m_floor_isSet = true;
}

bool OAILocation::is_floor_Set() const{
    return m_floor_isSet;
}

bool OAILocation::is_floor_Valid() const{
    return m_floor_isValid;
}

QString OAILocation::getFloorSection() const {
    return m_floor_section;
}
void OAILocation::setFloorSection(const QString &floor_section) {
    m_floor_section = floor_section;
    m_floor_section_isSet = true;
}

bool OAILocation::is_floor_section_Set() const{
    return m_floor_section_isSet;
}

bool OAILocation::is_floor_section_Valid() const{
    return m_floor_section_isValid;
}

OAIFieldMetadata OAILocation::getMetadata() const {
    return m_metadata;
}
void OAILocation::setMetadata(const OAIFieldMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAILocation::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAILocation::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAILocation::getType() const {
    return m_type;
}
void OAILocation::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAILocation::is_type_Set() const{
    return m_type_isSet;
}

bool OAILocation::is_type_Valid() const{
    return m_type_isValid;
}

QString OAILocation::getValue() const {
    return m_value;
}
void OAILocation::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAILocation::is_value_Set() const{
    return m_value_isSet;
}

bool OAILocation::is_value_Valid() const{
    return m_value_isValid;
}

bool OAILocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_building_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desk_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_floor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_floor_section_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
