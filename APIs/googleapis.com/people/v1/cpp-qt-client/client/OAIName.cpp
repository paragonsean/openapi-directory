/**
 * People API
 * Provides access to information about profiles and contacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIName.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIName::OAIName(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIName::OAIName() {
    this->initializeModel();
}

OAIName::~OAIName() {}

void OAIName::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_display_name_last_first_isSet = false;
    m_display_name_last_first_isValid = false;

    m_family_name_isSet = false;
    m_family_name_isValid = false;

    m_given_name_isSet = false;
    m_given_name_isValid = false;

    m_honorific_prefix_isSet = false;
    m_honorific_prefix_isValid = false;

    m_honorific_suffix_isSet = false;
    m_honorific_suffix_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_middle_name_isSet = false;
    m_middle_name_isValid = false;

    m_phonetic_family_name_isSet = false;
    m_phonetic_family_name_isValid = false;

    m_phonetic_full_name_isSet = false;
    m_phonetic_full_name_isValid = false;

    m_phonetic_given_name_isSet = false;
    m_phonetic_given_name_isValid = false;

    m_phonetic_honorific_prefix_isSet = false;
    m_phonetic_honorific_prefix_isValid = false;

    m_phonetic_honorific_suffix_isSet = false;
    m_phonetic_honorific_suffix_isValid = false;

    m_phonetic_middle_name_isSet = false;
    m_phonetic_middle_name_isValid = false;

    m_unstructured_name_isSet = false;
    m_unstructured_name_isValid = false;
}

void OAIName::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIName::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_display_name_last_first_isValid = ::OpenAPI::fromJsonValue(m_display_name_last_first, json[QString("displayNameLastFirst")]);
    m_display_name_last_first_isSet = !json[QString("displayNameLastFirst")].isNull() && m_display_name_last_first_isValid;

    m_family_name_isValid = ::OpenAPI::fromJsonValue(m_family_name, json[QString("familyName")]);
    m_family_name_isSet = !json[QString("familyName")].isNull() && m_family_name_isValid;

    m_given_name_isValid = ::OpenAPI::fromJsonValue(m_given_name, json[QString("givenName")]);
    m_given_name_isSet = !json[QString("givenName")].isNull() && m_given_name_isValid;

    m_honorific_prefix_isValid = ::OpenAPI::fromJsonValue(m_honorific_prefix, json[QString("honorificPrefix")]);
    m_honorific_prefix_isSet = !json[QString("honorificPrefix")].isNull() && m_honorific_prefix_isValid;

    m_honorific_suffix_isValid = ::OpenAPI::fromJsonValue(m_honorific_suffix, json[QString("honorificSuffix")]);
    m_honorific_suffix_isSet = !json[QString("honorificSuffix")].isNull() && m_honorific_suffix_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_middle_name_isValid = ::OpenAPI::fromJsonValue(m_middle_name, json[QString("middleName")]);
    m_middle_name_isSet = !json[QString("middleName")].isNull() && m_middle_name_isValid;

    m_phonetic_family_name_isValid = ::OpenAPI::fromJsonValue(m_phonetic_family_name, json[QString("phoneticFamilyName")]);
    m_phonetic_family_name_isSet = !json[QString("phoneticFamilyName")].isNull() && m_phonetic_family_name_isValid;

    m_phonetic_full_name_isValid = ::OpenAPI::fromJsonValue(m_phonetic_full_name, json[QString("phoneticFullName")]);
    m_phonetic_full_name_isSet = !json[QString("phoneticFullName")].isNull() && m_phonetic_full_name_isValid;

    m_phonetic_given_name_isValid = ::OpenAPI::fromJsonValue(m_phonetic_given_name, json[QString("phoneticGivenName")]);
    m_phonetic_given_name_isSet = !json[QString("phoneticGivenName")].isNull() && m_phonetic_given_name_isValid;

    m_phonetic_honorific_prefix_isValid = ::OpenAPI::fromJsonValue(m_phonetic_honorific_prefix, json[QString("phoneticHonorificPrefix")]);
    m_phonetic_honorific_prefix_isSet = !json[QString("phoneticHonorificPrefix")].isNull() && m_phonetic_honorific_prefix_isValid;

    m_phonetic_honorific_suffix_isValid = ::OpenAPI::fromJsonValue(m_phonetic_honorific_suffix, json[QString("phoneticHonorificSuffix")]);
    m_phonetic_honorific_suffix_isSet = !json[QString("phoneticHonorificSuffix")].isNull() && m_phonetic_honorific_suffix_isValid;

    m_phonetic_middle_name_isValid = ::OpenAPI::fromJsonValue(m_phonetic_middle_name, json[QString("phoneticMiddleName")]);
    m_phonetic_middle_name_isSet = !json[QString("phoneticMiddleName")].isNull() && m_phonetic_middle_name_isValid;

    m_unstructured_name_isValid = ::OpenAPI::fromJsonValue(m_unstructured_name, json[QString("unstructuredName")]);
    m_unstructured_name_isSet = !json[QString("unstructuredName")].isNull() && m_unstructured_name_isValid;
}

QString OAIName::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIName::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_display_name_last_first_isSet) {
        obj.insert(QString("displayNameLastFirst"), ::OpenAPI::toJsonValue(m_display_name_last_first));
    }
    if (m_family_name_isSet) {
        obj.insert(QString("familyName"), ::OpenAPI::toJsonValue(m_family_name));
    }
    if (m_given_name_isSet) {
        obj.insert(QString("givenName"), ::OpenAPI::toJsonValue(m_given_name));
    }
    if (m_honorific_prefix_isSet) {
        obj.insert(QString("honorificPrefix"), ::OpenAPI::toJsonValue(m_honorific_prefix));
    }
    if (m_honorific_suffix_isSet) {
        obj.insert(QString("honorificSuffix"), ::OpenAPI::toJsonValue(m_honorific_suffix));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_middle_name_isSet) {
        obj.insert(QString("middleName"), ::OpenAPI::toJsonValue(m_middle_name));
    }
    if (m_phonetic_family_name_isSet) {
        obj.insert(QString("phoneticFamilyName"), ::OpenAPI::toJsonValue(m_phonetic_family_name));
    }
    if (m_phonetic_full_name_isSet) {
        obj.insert(QString("phoneticFullName"), ::OpenAPI::toJsonValue(m_phonetic_full_name));
    }
    if (m_phonetic_given_name_isSet) {
        obj.insert(QString("phoneticGivenName"), ::OpenAPI::toJsonValue(m_phonetic_given_name));
    }
    if (m_phonetic_honorific_prefix_isSet) {
        obj.insert(QString("phoneticHonorificPrefix"), ::OpenAPI::toJsonValue(m_phonetic_honorific_prefix));
    }
    if (m_phonetic_honorific_suffix_isSet) {
        obj.insert(QString("phoneticHonorificSuffix"), ::OpenAPI::toJsonValue(m_phonetic_honorific_suffix));
    }
    if (m_phonetic_middle_name_isSet) {
        obj.insert(QString("phoneticMiddleName"), ::OpenAPI::toJsonValue(m_phonetic_middle_name));
    }
    if (m_unstructured_name_isSet) {
        obj.insert(QString("unstructuredName"), ::OpenAPI::toJsonValue(m_unstructured_name));
    }
    return obj;
}

QString OAIName::getDisplayName() const {
    return m_display_name;
}
void OAIName::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIName::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIName::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIName::getDisplayNameLastFirst() const {
    return m_display_name_last_first;
}
void OAIName::setDisplayNameLastFirst(const QString &display_name_last_first) {
    m_display_name_last_first = display_name_last_first;
    m_display_name_last_first_isSet = true;
}

bool OAIName::is_display_name_last_first_Set() const{
    return m_display_name_last_first_isSet;
}

bool OAIName::is_display_name_last_first_Valid() const{
    return m_display_name_last_first_isValid;
}

QString OAIName::getFamilyName() const {
    return m_family_name;
}
void OAIName::setFamilyName(const QString &family_name) {
    m_family_name = family_name;
    m_family_name_isSet = true;
}

bool OAIName::is_family_name_Set() const{
    return m_family_name_isSet;
}

bool OAIName::is_family_name_Valid() const{
    return m_family_name_isValid;
}

QString OAIName::getGivenName() const {
    return m_given_name;
}
void OAIName::setGivenName(const QString &given_name) {
    m_given_name = given_name;
    m_given_name_isSet = true;
}

bool OAIName::is_given_name_Set() const{
    return m_given_name_isSet;
}

bool OAIName::is_given_name_Valid() const{
    return m_given_name_isValid;
}

QString OAIName::getHonorificPrefix() const {
    return m_honorific_prefix;
}
void OAIName::setHonorificPrefix(const QString &honorific_prefix) {
    m_honorific_prefix = honorific_prefix;
    m_honorific_prefix_isSet = true;
}

bool OAIName::is_honorific_prefix_Set() const{
    return m_honorific_prefix_isSet;
}

bool OAIName::is_honorific_prefix_Valid() const{
    return m_honorific_prefix_isValid;
}

QString OAIName::getHonorificSuffix() const {
    return m_honorific_suffix;
}
void OAIName::setHonorificSuffix(const QString &honorific_suffix) {
    m_honorific_suffix = honorific_suffix;
    m_honorific_suffix_isSet = true;
}

bool OAIName::is_honorific_suffix_Set() const{
    return m_honorific_suffix_isSet;
}

bool OAIName::is_honorific_suffix_Valid() const{
    return m_honorific_suffix_isValid;
}

OAIFieldMetadata OAIName::getMetadata() const {
    return m_metadata;
}
void OAIName::setMetadata(const OAIFieldMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIName::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIName::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIName::getMiddleName() const {
    return m_middle_name;
}
void OAIName::setMiddleName(const QString &middle_name) {
    m_middle_name = middle_name;
    m_middle_name_isSet = true;
}

bool OAIName::is_middle_name_Set() const{
    return m_middle_name_isSet;
}

bool OAIName::is_middle_name_Valid() const{
    return m_middle_name_isValid;
}

QString OAIName::getPhoneticFamilyName() const {
    return m_phonetic_family_name;
}
void OAIName::setPhoneticFamilyName(const QString &phonetic_family_name) {
    m_phonetic_family_name = phonetic_family_name;
    m_phonetic_family_name_isSet = true;
}

bool OAIName::is_phonetic_family_name_Set() const{
    return m_phonetic_family_name_isSet;
}

bool OAIName::is_phonetic_family_name_Valid() const{
    return m_phonetic_family_name_isValid;
}

QString OAIName::getPhoneticFullName() const {
    return m_phonetic_full_name;
}
void OAIName::setPhoneticFullName(const QString &phonetic_full_name) {
    m_phonetic_full_name = phonetic_full_name;
    m_phonetic_full_name_isSet = true;
}

bool OAIName::is_phonetic_full_name_Set() const{
    return m_phonetic_full_name_isSet;
}

bool OAIName::is_phonetic_full_name_Valid() const{
    return m_phonetic_full_name_isValid;
}

QString OAIName::getPhoneticGivenName() const {
    return m_phonetic_given_name;
}
void OAIName::setPhoneticGivenName(const QString &phonetic_given_name) {
    m_phonetic_given_name = phonetic_given_name;
    m_phonetic_given_name_isSet = true;
}

bool OAIName::is_phonetic_given_name_Set() const{
    return m_phonetic_given_name_isSet;
}

bool OAIName::is_phonetic_given_name_Valid() const{
    return m_phonetic_given_name_isValid;
}

QString OAIName::getPhoneticHonorificPrefix() const {
    return m_phonetic_honorific_prefix;
}
void OAIName::setPhoneticHonorificPrefix(const QString &phonetic_honorific_prefix) {
    m_phonetic_honorific_prefix = phonetic_honorific_prefix;
    m_phonetic_honorific_prefix_isSet = true;
}

bool OAIName::is_phonetic_honorific_prefix_Set() const{
    return m_phonetic_honorific_prefix_isSet;
}

bool OAIName::is_phonetic_honorific_prefix_Valid() const{
    return m_phonetic_honorific_prefix_isValid;
}

QString OAIName::getPhoneticHonorificSuffix() const {
    return m_phonetic_honorific_suffix;
}
void OAIName::setPhoneticHonorificSuffix(const QString &phonetic_honorific_suffix) {
    m_phonetic_honorific_suffix = phonetic_honorific_suffix;
    m_phonetic_honorific_suffix_isSet = true;
}

bool OAIName::is_phonetic_honorific_suffix_Set() const{
    return m_phonetic_honorific_suffix_isSet;
}

bool OAIName::is_phonetic_honorific_suffix_Valid() const{
    return m_phonetic_honorific_suffix_isValid;
}

QString OAIName::getPhoneticMiddleName() const {
    return m_phonetic_middle_name;
}
void OAIName::setPhoneticMiddleName(const QString &phonetic_middle_name) {
    m_phonetic_middle_name = phonetic_middle_name;
    m_phonetic_middle_name_isSet = true;
}

bool OAIName::is_phonetic_middle_name_Set() const{
    return m_phonetic_middle_name_isSet;
}

bool OAIName::is_phonetic_middle_name_Valid() const{
    return m_phonetic_middle_name_isValid;
}

QString OAIName::getUnstructuredName() const {
    return m_unstructured_name;
}
void OAIName::setUnstructuredName(const QString &unstructured_name) {
    m_unstructured_name = unstructured_name;
    m_unstructured_name_isSet = true;
}

bool OAIName::is_unstructured_name_Set() const{
    return m_unstructured_name_isSet;
}

bool OAIName::is_unstructured_name_Valid() const{
    return m_unstructured_name_isValid;
}

bool OAIName::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_last_first_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_family_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_given_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_honorific_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_honorific_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_middle_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phonetic_family_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phonetic_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phonetic_given_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phonetic_honorific_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phonetic_honorific_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phonetic_middle_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unstructured_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIName::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
