/**
 * People API
 * Provides access to information about profiles and contacts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPerson.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPerson::OAIPerson(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPerson::OAIPerson() {
    this->initializeModel();
}

OAIPerson::~OAIPerson() {}

void OAIPerson::initializeModel() {

    m_addresses_isSet = false;
    m_addresses_isValid = false;

    m_age_range_isSet = false;
    m_age_range_isValid = false;

    m_age_ranges_isSet = false;
    m_age_ranges_isValid = false;

    m_biographies_isSet = false;
    m_biographies_isValid = false;

    m_birthdays_isSet = false;
    m_birthdays_isValid = false;

    m_bragging_rights_isSet = false;
    m_bragging_rights_isValid = false;

    m_calendar_urls_isSet = false;
    m_calendar_urls_isValid = false;

    m_client_data_isSet = false;
    m_client_data_isValid = false;

    m_cover_photos_isSet = false;
    m_cover_photos_isValid = false;

    m_email_addresses_isSet = false;
    m_email_addresses_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_events_isSet = false;
    m_events_isValid = false;

    m_external_ids_isSet = false;
    m_external_ids_isValid = false;

    m_file_ases_isSet = false;
    m_file_ases_isValid = false;

    m_genders_isSet = false;
    m_genders_isValid = false;

    m_im_clients_isSet = false;
    m_im_clients_isValid = false;

    m_interests_isSet = false;
    m_interests_isValid = false;

    m_locales_isSet = false;
    m_locales_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_memberships_isSet = false;
    m_memberships_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_misc_keywords_isSet = false;
    m_misc_keywords_isValid = false;

    m_names_isSet = false;
    m_names_isValid = false;

    m_nicknames_isSet = false;
    m_nicknames_isValid = false;

    m_occupations_isSet = false;
    m_occupations_isValid = false;

    m_organizations_isSet = false;
    m_organizations_isValid = false;

    m_phone_numbers_isSet = false;
    m_phone_numbers_isValid = false;

    m_photos_isSet = false;
    m_photos_isValid = false;

    m_relations_isSet = false;
    m_relations_isValid = false;

    m_relationship_interests_isSet = false;
    m_relationship_interests_isValid = false;

    m_relationship_statuses_isSet = false;
    m_relationship_statuses_isValid = false;

    m_residences_isSet = false;
    m_residences_isValid = false;

    m_resource_name_isSet = false;
    m_resource_name_isValid = false;

    m_sip_addresses_isSet = false;
    m_sip_addresses_isValid = false;

    m_skills_isSet = false;
    m_skills_isValid = false;

    m_taglines_isSet = false;
    m_taglines_isValid = false;

    m_urls_isSet = false;
    m_urls_isValid = false;

    m_user_defined_isSet = false;
    m_user_defined_isValid = false;
}

void OAIPerson::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPerson::fromJsonObject(QJsonObject json) {

    m_addresses_isValid = ::OpenAPI::fromJsonValue(m_addresses, json[QString("addresses")]);
    m_addresses_isSet = !json[QString("addresses")].isNull() && m_addresses_isValid;

    m_age_range_isValid = ::OpenAPI::fromJsonValue(m_age_range, json[QString("ageRange")]);
    m_age_range_isSet = !json[QString("ageRange")].isNull() && m_age_range_isValid;

    m_age_ranges_isValid = ::OpenAPI::fromJsonValue(m_age_ranges, json[QString("ageRanges")]);
    m_age_ranges_isSet = !json[QString("ageRanges")].isNull() && m_age_ranges_isValid;

    m_biographies_isValid = ::OpenAPI::fromJsonValue(m_biographies, json[QString("biographies")]);
    m_biographies_isSet = !json[QString("biographies")].isNull() && m_biographies_isValid;

    m_birthdays_isValid = ::OpenAPI::fromJsonValue(m_birthdays, json[QString("birthdays")]);
    m_birthdays_isSet = !json[QString("birthdays")].isNull() && m_birthdays_isValid;

    m_bragging_rights_isValid = ::OpenAPI::fromJsonValue(m_bragging_rights, json[QString("braggingRights")]);
    m_bragging_rights_isSet = !json[QString("braggingRights")].isNull() && m_bragging_rights_isValid;

    m_calendar_urls_isValid = ::OpenAPI::fromJsonValue(m_calendar_urls, json[QString("calendarUrls")]);
    m_calendar_urls_isSet = !json[QString("calendarUrls")].isNull() && m_calendar_urls_isValid;

    m_client_data_isValid = ::OpenAPI::fromJsonValue(m_client_data, json[QString("clientData")]);
    m_client_data_isSet = !json[QString("clientData")].isNull() && m_client_data_isValid;

    m_cover_photos_isValid = ::OpenAPI::fromJsonValue(m_cover_photos, json[QString("coverPhotos")]);
    m_cover_photos_isSet = !json[QString("coverPhotos")].isNull() && m_cover_photos_isValid;

    m_email_addresses_isValid = ::OpenAPI::fromJsonValue(m_email_addresses, json[QString("emailAddresses")]);
    m_email_addresses_isSet = !json[QString("emailAddresses")].isNull() && m_email_addresses_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_external_ids_isValid = ::OpenAPI::fromJsonValue(m_external_ids, json[QString("externalIds")]);
    m_external_ids_isSet = !json[QString("externalIds")].isNull() && m_external_ids_isValid;

    m_file_ases_isValid = ::OpenAPI::fromJsonValue(m_file_ases, json[QString("fileAses")]);
    m_file_ases_isSet = !json[QString("fileAses")].isNull() && m_file_ases_isValid;

    m_genders_isValid = ::OpenAPI::fromJsonValue(m_genders, json[QString("genders")]);
    m_genders_isSet = !json[QString("genders")].isNull() && m_genders_isValid;

    m_im_clients_isValid = ::OpenAPI::fromJsonValue(m_im_clients, json[QString("imClients")]);
    m_im_clients_isSet = !json[QString("imClients")].isNull() && m_im_clients_isValid;

    m_interests_isValid = ::OpenAPI::fromJsonValue(m_interests, json[QString("interests")]);
    m_interests_isSet = !json[QString("interests")].isNull() && m_interests_isValid;

    m_locales_isValid = ::OpenAPI::fromJsonValue(m_locales, json[QString("locales")]);
    m_locales_isSet = !json[QString("locales")].isNull() && m_locales_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;

    m_memberships_isValid = ::OpenAPI::fromJsonValue(m_memberships, json[QString("memberships")]);
    m_memberships_isSet = !json[QString("memberships")].isNull() && m_memberships_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_misc_keywords_isValid = ::OpenAPI::fromJsonValue(m_misc_keywords, json[QString("miscKeywords")]);
    m_misc_keywords_isSet = !json[QString("miscKeywords")].isNull() && m_misc_keywords_isValid;

    m_names_isValid = ::OpenAPI::fromJsonValue(m_names, json[QString("names")]);
    m_names_isSet = !json[QString("names")].isNull() && m_names_isValid;

    m_nicknames_isValid = ::OpenAPI::fromJsonValue(m_nicknames, json[QString("nicknames")]);
    m_nicknames_isSet = !json[QString("nicknames")].isNull() && m_nicknames_isValid;

    m_occupations_isValid = ::OpenAPI::fromJsonValue(m_occupations, json[QString("occupations")]);
    m_occupations_isSet = !json[QString("occupations")].isNull() && m_occupations_isValid;

    m_organizations_isValid = ::OpenAPI::fromJsonValue(m_organizations, json[QString("organizations")]);
    m_organizations_isSet = !json[QString("organizations")].isNull() && m_organizations_isValid;

    m_phone_numbers_isValid = ::OpenAPI::fromJsonValue(m_phone_numbers, json[QString("phoneNumbers")]);
    m_phone_numbers_isSet = !json[QString("phoneNumbers")].isNull() && m_phone_numbers_isValid;

    m_photos_isValid = ::OpenAPI::fromJsonValue(m_photos, json[QString("photos")]);
    m_photos_isSet = !json[QString("photos")].isNull() && m_photos_isValid;

    m_relations_isValid = ::OpenAPI::fromJsonValue(m_relations, json[QString("relations")]);
    m_relations_isSet = !json[QString("relations")].isNull() && m_relations_isValid;

    m_relationship_interests_isValid = ::OpenAPI::fromJsonValue(m_relationship_interests, json[QString("relationshipInterests")]);
    m_relationship_interests_isSet = !json[QString("relationshipInterests")].isNull() && m_relationship_interests_isValid;

    m_relationship_statuses_isValid = ::OpenAPI::fromJsonValue(m_relationship_statuses, json[QString("relationshipStatuses")]);
    m_relationship_statuses_isSet = !json[QString("relationshipStatuses")].isNull() && m_relationship_statuses_isValid;

    m_residences_isValid = ::OpenAPI::fromJsonValue(m_residences, json[QString("residences")]);
    m_residences_isSet = !json[QString("residences")].isNull() && m_residences_isValid;

    m_resource_name_isValid = ::OpenAPI::fromJsonValue(m_resource_name, json[QString("resourceName")]);
    m_resource_name_isSet = !json[QString("resourceName")].isNull() && m_resource_name_isValid;

    m_sip_addresses_isValid = ::OpenAPI::fromJsonValue(m_sip_addresses, json[QString("sipAddresses")]);
    m_sip_addresses_isSet = !json[QString("sipAddresses")].isNull() && m_sip_addresses_isValid;

    m_skills_isValid = ::OpenAPI::fromJsonValue(m_skills, json[QString("skills")]);
    m_skills_isSet = !json[QString("skills")].isNull() && m_skills_isValid;

    m_taglines_isValid = ::OpenAPI::fromJsonValue(m_taglines, json[QString("taglines")]);
    m_taglines_isSet = !json[QString("taglines")].isNull() && m_taglines_isValid;

    m_urls_isValid = ::OpenAPI::fromJsonValue(m_urls, json[QString("urls")]);
    m_urls_isSet = !json[QString("urls")].isNull() && m_urls_isValid;

    m_user_defined_isValid = ::OpenAPI::fromJsonValue(m_user_defined, json[QString("userDefined")]);
    m_user_defined_isSet = !json[QString("userDefined")].isNull() && m_user_defined_isValid;
}

QString OAIPerson::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPerson::asJsonObject() const {
    QJsonObject obj;
    if (m_addresses.size() > 0) {
        obj.insert(QString("addresses"), ::OpenAPI::toJsonValue(m_addresses));
    }
    if (m_age_range_isSet) {
        obj.insert(QString("ageRange"), ::OpenAPI::toJsonValue(m_age_range));
    }
    if (m_age_ranges.size() > 0) {
        obj.insert(QString("ageRanges"), ::OpenAPI::toJsonValue(m_age_ranges));
    }
    if (m_biographies.size() > 0) {
        obj.insert(QString("biographies"), ::OpenAPI::toJsonValue(m_biographies));
    }
    if (m_birthdays.size() > 0) {
        obj.insert(QString("birthdays"), ::OpenAPI::toJsonValue(m_birthdays));
    }
    if (m_bragging_rights.size() > 0) {
        obj.insert(QString("braggingRights"), ::OpenAPI::toJsonValue(m_bragging_rights));
    }
    if (m_calendar_urls.size() > 0) {
        obj.insert(QString("calendarUrls"), ::OpenAPI::toJsonValue(m_calendar_urls));
    }
    if (m_client_data.size() > 0) {
        obj.insert(QString("clientData"), ::OpenAPI::toJsonValue(m_client_data));
    }
    if (m_cover_photos.size() > 0) {
        obj.insert(QString("coverPhotos"), ::OpenAPI::toJsonValue(m_cover_photos));
    }
    if (m_email_addresses.size() > 0) {
        obj.insert(QString("emailAddresses"), ::OpenAPI::toJsonValue(m_email_addresses));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_events.size() > 0) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_external_ids.size() > 0) {
        obj.insert(QString("externalIds"), ::OpenAPI::toJsonValue(m_external_ids));
    }
    if (m_file_ases.size() > 0) {
        obj.insert(QString("fileAses"), ::OpenAPI::toJsonValue(m_file_ases));
    }
    if (m_genders.size() > 0) {
        obj.insert(QString("genders"), ::OpenAPI::toJsonValue(m_genders));
    }
    if (m_im_clients.size() > 0) {
        obj.insert(QString("imClients"), ::OpenAPI::toJsonValue(m_im_clients));
    }
    if (m_interests.size() > 0) {
        obj.insert(QString("interests"), ::OpenAPI::toJsonValue(m_interests));
    }
    if (m_locales.size() > 0) {
        obj.insert(QString("locales"), ::OpenAPI::toJsonValue(m_locales));
    }
    if (m_locations.size() > 0) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_memberships.size() > 0) {
        obj.insert(QString("memberships"), ::OpenAPI::toJsonValue(m_memberships));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_misc_keywords.size() > 0) {
        obj.insert(QString("miscKeywords"), ::OpenAPI::toJsonValue(m_misc_keywords));
    }
    if (m_names.size() > 0) {
        obj.insert(QString("names"), ::OpenAPI::toJsonValue(m_names));
    }
    if (m_nicknames.size() > 0) {
        obj.insert(QString("nicknames"), ::OpenAPI::toJsonValue(m_nicknames));
    }
    if (m_occupations.size() > 0) {
        obj.insert(QString("occupations"), ::OpenAPI::toJsonValue(m_occupations));
    }
    if (m_organizations.size() > 0) {
        obj.insert(QString("organizations"), ::OpenAPI::toJsonValue(m_organizations));
    }
    if (m_phone_numbers.size() > 0) {
        obj.insert(QString("phoneNumbers"), ::OpenAPI::toJsonValue(m_phone_numbers));
    }
    if (m_photos.size() > 0) {
        obj.insert(QString("photos"), ::OpenAPI::toJsonValue(m_photos));
    }
    if (m_relations.size() > 0) {
        obj.insert(QString("relations"), ::OpenAPI::toJsonValue(m_relations));
    }
    if (m_relationship_interests.size() > 0) {
        obj.insert(QString("relationshipInterests"), ::OpenAPI::toJsonValue(m_relationship_interests));
    }
    if (m_relationship_statuses.size() > 0) {
        obj.insert(QString("relationshipStatuses"), ::OpenAPI::toJsonValue(m_relationship_statuses));
    }
    if (m_residences.size() > 0) {
        obj.insert(QString("residences"), ::OpenAPI::toJsonValue(m_residences));
    }
    if (m_resource_name_isSet) {
        obj.insert(QString("resourceName"), ::OpenAPI::toJsonValue(m_resource_name));
    }
    if (m_sip_addresses.size() > 0) {
        obj.insert(QString("sipAddresses"), ::OpenAPI::toJsonValue(m_sip_addresses));
    }
    if (m_skills.size() > 0) {
        obj.insert(QString("skills"), ::OpenAPI::toJsonValue(m_skills));
    }
    if (m_taglines.size() > 0) {
        obj.insert(QString("taglines"), ::OpenAPI::toJsonValue(m_taglines));
    }
    if (m_urls.size() > 0) {
        obj.insert(QString("urls"), ::OpenAPI::toJsonValue(m_urls));
    }
    if (m_user_defined.size() > 0) {
        obj.insert(QString("userDefined"), ::OpenAPI::toJsonValue(m_user_defined));
    }
    return obj;
}

QList<OAIAddress> OAIPerson::getAddresses() const {
    return m_addresses;
}
void OAIPerson::setAddresses(const QList<OAIAddress> &addresses) {
    m_addresses = addresses;
    m_addresses_isSet = true;
}

bool OAIPerson::is_addresses_Set() const{
    return m_addresses_isSet;
}

bool OAIPerson::is_addresses_Valid() const{
    return m_addresses_isValid;
}

QString OAIPerson::getAgeRange() const {
    return m_age_range;
}
void OAIPerson::setAgeRange(const QString &age_range) {
    m_age_range = age_range;
    m_age_range_isSet = true;
}

bool OAIPerson::is_age_range_Set() const{
    return m_age_range_isSet;
}

bool OAIPerson::is_age_range_Valid() const{
    return m_age_range_isValid;
}

QList<OAIAgeRangeType> OAIPerson::getAgeRanges() const {
    return m_age_ranges;
}
void OAIPerson::setAgeRanges(const QList<OAIAgeRangeType> &age_ranges) {
    m_age_ranges = age_ranges;
    m_age_ranges_isSet = true;
}

bool OAIPerson::is_age_ranges_Set() const{
    return m_age_ranges_isSet;
}

bool OAIPerson::is_age_ranges_Valid() const{
    return m_age_ranges_isValid;
}

QList<OAIBiography> OAIPerson::getBiographies() const {
    return m_biographies;
}
void OAIPerson::setBiographies(const QList<OAIBiography> &biographies) {
    m_biographies = biographies;
    m_biographies_isSet = true;
}

bool OAIPerson::is_biographies_Set() const{
    return m_biographies_isSet;
}

bool OAIPerson::is_biographies_Valid() const{
    return m_biographies_isValid;
}

QList<OAIBirthday> OAIPerson::getBirthdays() const {
    return m_birthdays;
}
void OAIPerson::setBirthdays(const QList<OAIBirthday> &birthdays) {
    m_birthdays = birthdays;
    m_birthdays_isSet = true;
}

bool OAIPerson::is_birthdays_Set() const{
    return m_birthdays_isSet;
}

bool OAIPerson::is_birthdays_Valid() const{
    return m_birthdays_isValid;
}

QList<OAIBraggingRights> OAIPerson::getBraggingRights() const {
    return m_bragging_rights;
}
void OAIPerson::setBraggingRights(const QList<OAIBraggingRights> &bragging_rights) {
    m_bragging_rights = bragging_rights;
    m_bragging_rights_isSet = true;
}

bool OAIPerson::is_bragging_rights_Set() const{
    return m_bragging_rights_isSet;
}

bool OAIPerson::is_bragging_rights_Valid() const{
    return m_bragging_rights_isValid;
}

QList<OAICalendarUrl> OAIPerson::getCalendarUrls() const {
    return m_calendar_urls;
}
void OAIPerson::setCalendarUrls(const QList<OAICalendarUrl> &calendar_urls) {
    m_calendar_urls = calendar_urls;
    m_calendar_urls_isSet = true;
}

bool OAIPerson::is_calendar_urls_Set() const{
    return m_calendar_urls_isSet;
}

bool OAIPerson::is_calendar_urls_Valid() const{
    return m_calendar_urls_isValid;
}

QList<OAIClientData> OAIPerson::getClientData() const {
    return m_client_data;
}
void OAIPerson::setClientData(const QList<OAIClientData> &client_data) {
    m_client_data = client_data;
    m_client_data_isSet = true;
}

bool OAIPerson::is_client_data_Set() const{
    return m_client_data_isSet;
}

bool OAIPerson::is_client_data_Valid() const{
    return m_client_data_isValid;
}

QList<OAICoverPhoto> OAIPerson::getCoverPhotos() const {
    return m_cover_photos;
}
void OAIPerson::setCoverPhotos(const QList<OAICoverPhoto> &cover_photos) {
    m_cover_photos = cover_photos;
    m_cover_photos_isSet = true;
}

bool OAIPerson::is_cover_photos_Set() const{
    return m_cover_photos_isSet;
}

bool OAIPerson::is_cover_photos_Valid() const{
    return m_cover_photos_isValid;
}

QList<OAIEmailAddress> OAIPerson::getEmailAddresses() const {
    return m_email_addresses;
}
void OAIPerson::setEmailAddresses(const QList<OAIEmailAddress> &email_addresses) {
    m_email_addresses = email_addresses;
    m_email_addresses_isSet = true;
}

bool OAIPerson::is_email_addresses_Set() const{
    return m_email_addresses_isSet;
}

bool OAIPerson::is_email_addresses_Valid() const{
    return m_email_addresses_isValid;
}

QString OAIPerson::getEtag() const {
    return m_etag;
}
void OAIPerson::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIPerson::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIPerson::is_etag_Valid() const{
    return m_etag_isValid;
}

QList<OAIEvent> OAIPerson::getEvents() const {
    return m_events;
}
void OAIPerson::setEvents(const QList<OAIEvent> &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIPerson::is_events_Set() const{
    return m_events_isSet;
}

bool OAIPerson::is_events_Valid() const{
    return m_events_isValid;
}

QList<OAIExternalId> OAIPerson::getExternalIds() const {
    return m_external_ids;
}
void OAIPerson::setExternalIds(const QList<OAIExternalId> &external_ids) {
    m_external_ids = external_ids;
    m_external_ids_isSet = true;
}

bool OAIPerson::is_external_ids_Set() const{
    return m_external_ids_isSet;
}

bool OAIPerson::is_external_ids_Valid() const{
    return m_external_ids_isValid;
}

QList<OAIFileAs> OAIPerson::getFileAses() const {
    return m_file_ases;
}
void OAIPerson::setFileAses(const QList<OAIFileAs> &file_ases) {
    m_file_ases = file_ases;
    m_file_ases_isSet = true;
}

bool OAIPerson::is_file_ases_Set() const{
    return m_file_ases_isSet;
}

bool OAIPerson::is_file_ases_Valid() const{
    return m_file_ases_isValid;
}

QList<OAIGender> OAIPerson::getGenders() const {
    return m_genders;
}
void OAIPerson::setGenders(const QList<OAIGender> &genders) {
    m_genders = genders;
    m_genders_isSet = true;
}

bool OAIPerson::is_genders_Set() const{
    return m_genders_isSet;
}

bool OAIPerson::is_genders_Valid() const{
    return m_genders_isValid;
}

QList<OAIImClient> OAIPerson::getImClients() const {
    return m_im_clients;
}
void OAIPerson::setImClients(const QList<OAIImClient> &im_clients) {
    m_im_clients = im_clients;
    m_im_clients_isSet = true;
}

bool OAIPerson::is_im_clients_Set() const{
    return m_im_clients_isSet;
}

bool OAIPerson::is_im_clients_Valid() const{
    return m_im_clients_isValid;
}

QList<OAIInterest> OAIPerson::getInterests() const {
    return m_interests;
}
void OAIPerson::setInterests(const QList<OAIInterest> &interests) {
    m_interests = interests;
    m_interests_isSet = true;
}

bool OAIPerson::is_interests_Set() const{
    return m_interests_isSet;
}

bool OAIPerson::is_interests_Valid() const{
    return m_interests_isValid;
}

QList<OAILocale> OAIPerson::getLocales() const {
    return m_locales;
}
void OAIPerson::setLocales(const QList<OAILocale> &locales) {
    m_locales = locales;
    m_locales_isSet = true;
}

bool OAIPerson::is_locales_Set() const{
    return m_locales_isSet;
}

bool OAIPerson::is_locales_Valid() const{
    return m_locales_isValid;
}

QList<OAILocation> OAIPerson::getLocations() const {
    return m_locations;
}
void OAIPerson::setLocations(const QList<OAILocation> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAIPerson::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAIPerson::is_locations_Valid() const{
    return m_locations_isValid;
}

QList<OAIMembership> OAIPerson::getMemberships() const {
    return m_memberships;
}
void OAIPerson::setMemberships(const QList<OAIMembership> &memberships) {
    m_memberships = memberships;
    m_memberships_isSet = true;
}

bool OAIPerson::is_memberships_Set() const{
    return m_memberships_isSet;
}

bool OAIPerson::is_memberships_Valid() const{
    return m_memberships_isValid;
}

OAIPersonMetadata OAIPerson::getMetadata() const {
    return m_metadata;
}
void OAIPerson::setMetadata(const OAIPersonMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIPerson::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIPerson::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QList<OAIMiscKeyword> OAIPerson::getMiscKeywords() const {
    return m_misc_keywords;
}
void OAIPerson::setMiscKeywords(const QList<OAIMiscKeyword> &misc_keywords) {
    m_misc_keywords = misc_keywords;
    m_misc_keywords_isSet = true;
}

bool OAIPerson::is_misc_keywords_Set() const{
    return m_misc_keywords_isSet;
}

bool OAIPerson::is_misc_keywords_Valid() const{
    return m_misc_keywords_isValid;
}

QList<OAIName> OAIPerson::getNames() const {
    return m_names;
}
void OAIPerson::setNames(const QList<OAIName> &names) {
    m_names = names;
    m_names_isSet = true;
}

bool OAIPerson::is_names_Set() const{
    return m_names_isSet;
}

bool OAIPerson::is_names_Valid() const{
    return m_names_isValid;
}

QList<OAINickname> OAIPerson::getNicknames() const {
    return m_nicknames;
}
void OAIPerson::setNicknames(const QList<OAINickname> &nicknames) {
    m_nicknames = nicknames;
    m_nicknames_isSet = true;
}

bool OAIPerson::is_nicknames_Set() const{
    return m_nicknames_isSet;
}

bool OAIPerson::is_nicknames_Valid() const{
    return m_nicknames_isValid;
}

QList<OAIOccupation> OAIPerson::getOccupations() const {
    return m_occupations;
}
void OAIPerson::setOccupations(const QList<OAIOccupation> &occupations) {
    m_occupations = occupations;
    m_occupations_isSet = true;
}

bool OAIPerson::is_occupations_Set() const{
    return m_occupations_isSet;
}

bool OAIPerson::is_occupations_Valid() const{
    return m_occupations_isValid;
}

QList<OAIOrganization> OAIPerson::getOrganizations() const {
    return m_organizations;
}
void OAIPerson::setOrganizations(const QList<OAIOrganization> &organizations) {
    m_organizations = organizations;
    m_organizations_isSet = true;
}

bool OAIPerson::is_organizations_Set() const{
    return m_organizations_isSet;
}

bool OAIPerson::is_organizations_Valid() const{
    return m_organizations_isValid;
}

QList<OAIPhoneNumber> OAIPerson::getPhoneNumbers() const {
    return m_phone_numbers;
}
void OAIPerson::setPhoneNumbers(const QList<OAIPhoneNumber> &phone_numbers) {
    m_phone_numbers = phone_numbers;
    m_phone_numbers_isSet = true;
}

bool OAIPerson::is_phone_numbers_Set() const{
    return m_phone_numbers_isSet;
}

bool OAIPerson::is_phone_numbers_Valid() const{
    return m_phone_numbers_isValid;
}

QList<OAIPhoto> OAIPerson::getPhotos() const {
    return m_photos;
}
void OAIPerson::setPhotos(const QList<OAIPhoto> &photos) {
    m_photos = photos;
    m_photos_isSet = true;
}

bool OAIPerson::is_photos_Set() const{
    return m_photos_isSet;
}

bool OAIPerson::is_photos_Valid() const{
    return m_photos_isValid;
}

QList<OAIRelation> OAIPerson::getRelations() const {
    return m_relations;
}
void OAIPerson::setRelations(const QList<OAIRelation> &relations) {
    m_relations = relations;
    m_relations_isSet = true;
}

bool OAIPerson::is_relations_Set() const{
    return m_relations_isSet;
}

bool OAIPerson::is_relations_Valid() const{
    return m_relations_isValid;
}

QList<OAIRelationshipInterest> OAIPerson::getRelationshipInterests() const {
    return m_relationship_interests;
}
void OAIPerson::setRelationshipInterests(const QList<OAIRelationshipInterest> &relationship_interests) {
    m_relationship_interests = relationship_interests;
    m_relationship_interests_isSet = true;
}

bool OAIPerson::is_relationship_interests_Set() const{
    return m_relationship_interests_isSet;
}

bool OAIPerson::is_relationship_interests_Valid() const{
    return m_relationship_interests_isValid;
}

QList<OAIRelationshipStatus> OAIPerson::getRelationshipStatuses() const {
    return m_relationship_statuses;
}
void OAIPerson::setRelationshipStatuses(const QList<OAIRelationshipStatus> &relationship_statuses) {
    m_relationship_statuses = relationship_statuses;
    m_relationship_statuses_isSet = true;
}

bool OAIPerson::is_relationship_statuses_Set() const{
    return m_relationship_statuses_isSet;
}

bool OAIPerson::is_relationship_statuses_Valid() const{
    return m_relationship_statuses_isValid;
}

QList<OAIResidence> OAIPerson::getResidences() const {
    return m_residences;
}
void OAIPerson::setResidences(const QList<OAIResidence> &residences) {
    m_residences = residences;
    m_residences_isSet = true;
}

bool OAIPerson::is_residences_Set() const{
    return m_residences_isSet;
}

bool OAIPerson::is_residences_Valid() const{
    return m_residences_isValid;
}

QString OAIPerson::getResourceName() const {
    return m_resource_name;
}
void OAIPerson::setResourceName(const QString &resource_name) {
    m_resource_name = resource_name;
    m_resource_name_isSet = true;
}

bool OAIPerson::is_resource_name_Set() const{
    return m_resource_name_isSet;
}

bool OAIPerson::is_resource_name_Valid() const{
    return m_resource_name_isValid;
}

QList<OAISipAddress> OAIPerson::getSipAddresses() const {
    return m_sip_addresses;
}
void OAIPerson::setSipAddresses(const QList<OAISipAddress> &sip_addresses) {
    m_sip_addresses = sip_addresses;
    m_sip_addresses_isSet = true;
}

bool OAIPerson::is_sip_addresses_Set() const{
    return m_sip_addresses_isSet;
}

bool OAIPerson::is_sip_addresses_Valid() const{
    return m_sip_addresses_isValid;
}

QList<OAISkill> OAIPerson::getSkills() const {
    return m_skills;
}
void OAIPerson::setSkills(const QList<OAISkill> &skills) {
    m_skills = skills;
    m_skills_isSet = true;
}

bool OAIPerson::is_skills_Set() const{
    return m_skills_isSet;
}

bool OAIPerson::is_skills_Valid() const{
    return m_skills_isValid;
}

QList<OAITagline> OAIPerson::getTaglines() const {
    return m_taglines;
}
void OAIPerson::setTaglines(const QList<OAITagline> &taglines) {
    m_taglines = taglines;
    m_taglines_isSet = true;
}

bool OAIPerson::is_taglines_Set() const{
    return m_taglines_isSet;
}

bool OAIPerson::is_taglines_Valid() const{
    return m_taglines_isValid;
}

QList<OAIUrl> OAIPerson::getUrls() const {
    return m_urls;
}
void OAIPerson::setUrls(const QList<OAIUrl> &urls) {
    m_urls = urls;
    m_urls_isSet = true;
}

bool OAIPerson::is_urls_Set() const{
    return m_urls_isSet;
}

bool OAIPerson::is_urls_Valid() const{
    return m_urls_isValid;
}

QList<OAIUserDefined> OAIPerson::getUserDefined() const {
    return m_user_defined;
}
void OAIPerson::setUserDefined(const QList<OAIUserDefined> &user_defined) {
    m_user_defined = user_defined;
    m_user_defined_isSet = true;
}

bool OAIPerson::is_user_defined_Set() const{
    return m_user_defined_isSet;
}

bool OAIPerson::is_user_defined_Valid() const{
    return m_user_defined_isValid;
}

bool OAIPerson::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_age_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_age_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_biographies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_birthdays.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_bragging_rights.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_calendar_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cover_photos.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_ases.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_genders.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_im_clients.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_interests.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_locales.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_memberships.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_misc_keywords.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_nicknames.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_occupations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_organizations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_numbers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_photos.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_relations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_relationship_interests.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_relationship_statuses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_residences.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sip_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_skills.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_taglines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_defined.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPerson::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
