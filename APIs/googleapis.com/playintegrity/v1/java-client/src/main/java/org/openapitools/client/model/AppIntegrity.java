/*
 * Google Play Integrity API
 * The Play Integrity API helps you check that you're interacting with your genuine app on a genuine Android device powered by Google Play services. The Play Integrity API has replaced SafetyNet Attestation and Android Device Verification.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains the application integrity information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:51.784546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppIntegrity {
  /**
   * Required. Details about the app recognition verdict
   */
  @JsonAdapter(AppRecognitionVerdictEnum.Adapter.class)
  public enum AppRecognitionVerdictEnum {
    UNKNOWN("UNKNOWN"),
    
    PLAY_RECOGNIZED("PLAY_RECOGNIZED"),
    
    UNRECOGNIZED_VERSION("UNRECOGNIZED_VERSION"),
    
    UNEVALUATED("UNEVALUATED");

    private String value;

    AppRecognitionVerdictEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AppRecognitionVerdictEnum fromValue(String value) {
      for (AppRecognitionVerdictEnum b : AppRecognitionVerdictEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AppRecognitionVerdictEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AppRecognitionVerdictEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AppRecognitionVerdictEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AppRecognitionVerdictEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AppRecognitionVerdictEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_APP_RECOGNITION_VERDICT = "appRecognitionVerdict";
  @SerializedName(SERIALIZED_NAME_APP_RECOGNITION_VERDICT)
  private AppRecognitionVerdictEnum appRecognitionVerdict;

  public static final String SERIALIZED_NAME_CERTIFICATE_SHA256_DIGEST = "certificateSha256Digest";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_SHA256_DIGEST)
  private List<String> certificateSha256Digest = new ArrayList<>();

  public static final String SERIALIZED_NAME_PACKAGE_NAME = "packageName";
  @SerializedName(SERIALIZED_NAME_PACKAGE_NAME)
  private String packageName;

  public static final String SERIALIZED_NAME_VERSION_CODE = "versionCode";
  @SerializedName(SERIALIZED_NAME_VERSION_CODE)
  private String versionCode;

  public AppIntegrity() {
  }

  public AppIntegrity appRecognitionVerdict(AppRecognitionVerdictEnum appRecognitionVerdict) {
    this.appRecognitionVerdict = appRecognitionVerdict;
    return this;
  }

  /**
   * Required. Details about the app recognition verdict
   * @return appRecognitionVerdict
   */
  @javax.annotation.Nullable
  public AppRecognitionVerdictEnum getAppRecognitionVerdict() {
    return appRecognitionVerdict;
  }

  public void setAppRecognitionVerdict(AppRecognitionVerdictEnum appRecognitionVerdict) {
    this.appRecognitionVerdict = appRecognitionVerdict;
  }


  public AppIntegrity certificateSha256Digest(List<String> certificateSha256Digest) {
    this.certificateSha256Digest = certificateSha256Digest;
    return this;
  }

  public AppIntegrity addCertificateSha256DigestItem(String certificateSha256DigestItem) {
    if (this.certificateSha256Digest == null) {
      this.certificateSha256Digest = new ArrayList<>();
    }
    this.certificateSha256Digest.add(certificateSha256DigestItem);
    return this;
  }

  /**
   * The SHA256 hash of the requesting app&#39;s signing certificates (base64 web-safe encoded). Set iff app_recognition_verdict !&#x3D; UNEVALUATED.
   * @return certificateSha256Digest
   */
  @javax.annotation.Nullable
  public List<String> getCertificateSha256Digest() {
    return certificateSha256Digest;
  }

  public void setCertificateSha256Digest(List<String> certificateSha256Digest) {
    this.certificateSha256Digest = certificateSha256Digest;
  }


  public AppIntegrity packageName(String packageName) {
    this.packageName = packageName;
    return this;
  }

  /**
   * Package name of the application under attestation. Set iff app_recognition_verdict !&#x3D; UNEVALUATED.
   * @return packageName
   */
  @javax.annotation.Nullable
  public String getPackageName() {
    return packageName;
  }

  public void setPackageName(String packageName) {
    this.packageName = packageName;
  }


  public AppIntegrity versionCode(String versionCode) {
    this.versionCode = versionCode;
    return this;
  }

  /**
   * Version code of the application. Set iff app_recognition_verdict !&#x3D; UNEVALUATED.
   * @return versionCode
   */
  @javax.annotation.Nullable
  public String getVersionCode() {
    return versionCode;
  }

  public void setVersionCode(String versionCode) {
    this.versionCode = versionCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppIntegrity appIntegrity = (AppIntegrity) o;
    return Objects.equals(this.appRecognitionVerdict, appIntegrity.appRecognitionVerdict) &&
        Objects.equals(this.certificateSha256Digest, appIntegrity.certificateSha256Digest) &&
        Objects.equals(this.packageName, appIntegrity.packageName) &&
        Objects.equals(this.versionCode, appIntegrity.versionCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appRecognitionVerdict, certificateSha256Digest, packageName, versionCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppIntegrity {\n");
    sb.append("    appRecognitionVerdict: ").append(toIndentedString(appRecognitionVerdict)).append("\n");
    sb.append("    certificateSha256Digest: ").append(toIndentedString(certificateSha256Digest)).append("\n");
    sb.append("    packageName: ").append(toIndentedString(packageName)).append("\n");
    sb.append("    versionCode: ").append(toIndentedString(versionCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appRecognitionVerdict");
    openapiFields.add("certificateSha256Digest");
    openapiFields.add("packageName");
    openapiFields.add("versionCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppIntegrity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppIntegrity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppIntegrity is not found in the empty JSON string", AppIntegrity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppIntegrity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppIntegrity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("appRecognitionVerdict") != null && !jsonObj.get("appRecognitionVerdict").isJsonNull()) && !jsonObj.get("appRecognitionVerdict").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appRecognitionVerdict` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appRecognitionVerdict").toString()));
      }
      // validate the optional field `appRecognitionVerdict`
      if (jsonObj.get("appRecognitionVerdict") != null && !jsonObj.get("appRecognitionVerdict").isJsonNull()) {
        AppRecognitionVerdictEnum.validateJsonElement(jsonObj.get("appRecognitionVerdict"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("certificateSha256Digest") != null && !jsonObj.get("certificateSha256Digest").isJsonNull() && !jsonObj.get("certificateSha256Digest").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificateSha256Digest` to be an array in the JSON string but got `%s`", jsonObj.get("certificateSha256Digest").toString()));
      }
      if ((jsonObj.get("packageName") != null && !jsonObj.get("packageName").isJsonNull()) && !jsonObj.get("packageName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `packageName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("packageName").toString()));
      }
      if ((jsonObj.get("versionCode") != null && !jsonObj.get("versionCode").isJsonNull()) && !jsonObj.get("versionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `versionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("versionCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppIntegrity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppIntegrity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppIntegrity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppIntegrity.class));

       return (TypeAdapter<T>) new TypeAdapter<AppIntegrity>() {
           @Override
           public void write(JsonWriter out, AppIntegrity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppIntegrity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppIntegrity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppIntegrity
   * @throws IOException if the JSON string is invalid with respect to AppIntegrity
   */
  public static AppIntegrity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppIntegrity.class);
  }

  /**
   * Convert an instance of AppIntegrity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

