/*
 * Google Play Integrity API
 * The Play Integrity API helps you check that you're interacting with your genuine app on a genuine Android device powered by Google Play services. The Play Integrity API has replaced SafetyNet Attestation and Android Device Verification.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains the integrity request information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:51.784546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RequestDetails {
  public static final String SERIALIZED_NAME_NONCE = "nonce";
  @SerializedName(SERIALIZED_NAME_NONCE)
  private String nonce;

  public static final String SERIALIZED_NAME_REQUEST_HASH = "requestHash";
  @SerializedName(SERIALIZED_NAME_REQUEST_HASH)
  private String requestHash;

  public static final String SERIALIZED_NAME_REQUEST_PACKAGE_NAME = "requestPackageName";
  @SerializedName(SERIALIZED_NAME_REQUEST_PACKAGE_NAME)
  private String requestPackageName;

  public static final String SERIALIZED_NAME_TIMESTAMP_MILLIS = "timestampMillis";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP_MILLIS)
  private String timestampMillis;

  public RequestDetails() {
  }

  public RequestDetails nonce(String nonce) {
    this.nonce = nonce;
    return this;
  }

  /**
   * Nonce that was provided in the request (which is base64 web-safe no-wrap).
   * @return nonce
   */
  @javax.annotation.Nullable
  public String getNonce() {
    return nonce;
  }

  public void setNonce(String nonce) {
    this.nonce = nonce;
  }


  public RequestDetails requestHash(String requestHash) {
    this.requestHash = requestHash;
    return this;
  }

  /**
   * Request hash that was provided in the request.
   * @return requestHash
   */
  @javax.annotation.Nullable
  public String getRequestHash() {
    return requestHash;
  }

  public void setRequestHash(String requestHash) {
    this.requestHash = requestHash;
  }


  public RequestDetails requestPackageName(String requestPackageName) {
    this.requestPackageName = requestPackageName;
    return this;
  }

  /**
   * Required. Application package name this attestation was requested for. Note: This field makes no guarantees or promises on the caller integrity. For details on application integrity, check application_integrity.
   * @return requestPackageName
   */
  @javax.annotation.Nullable
  public String getRequestPackageName() {
    return requestPackageName;
  }

  public void setRequestPackageName(String requestPackageName) {
    this.requestPackageName = requestPackageName;
  }


  public RequestDetails timestampMillis(String timestampMillis) {
    this.timestampMillis = timestampMillis;
    return this;
  }

  /**
   * Required. Timestamp, in milliseconds, of the integrity application request.
   * @return timestampMillis
   */
  @javax.annotation.Nullable
  public String getTimestampMillis() {
    return timestampMillis;
  }

  public void setTimestampMillis(String timestampMillis) {
    this.timestampMillis = timestampMillis;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequestDetails requestDetails = (RequestDetails) o;
    return Objects.equals(this.nonce, requestDetails.nonce) &&
        Objects.equals(this.requestHash, requestDetails.requestHash) &&
        Objects.equals(this.requestPackageName, requestDetails.requestPackageName) &&
        Objects.equals(this.timestampMillis, requestDetails.timestampMillis);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nonce, requestHash, requestPackageName, timestampMillis);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequestDetails {\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("    requestHash: ").append(toIndentedString(requestHash)).append("\n");
    sb.append("    requestPackageName: ").append(toIndentedString(requestPackageName)).append("\n");
    sb.append("    timestampMillis: ").append(toIndentedString(timestampMillis)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("nonce");
    openapiFields.add("requestHash");
    openapiFields.add("requestPackageName");
    openapiFields.add("timestampMillis");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RequestDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RequestDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RequestDetails is not found in the empty JSON string", RequestDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RequestDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RequestDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("nonce") != null && !jsonObj.get("nonce").isJsonNull()) && !jsonObj.get("nonce").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nonce` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nonce").toString()));
      }
      if ((jsonObj.get("requestHash") != null && !jsonObj.get("requestHash").isJsonNull()) && !jsonObj.get("requestHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestHash").toString()));
      }
      if ((jsonObj.get("requestPackageName") != null && !jsonObj.get("requestPackageName").isJsonNull()) && !jsonObj.get("requestPackageName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestPackageName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestPackageName").toString()));
      }
      if ((jsonObj.get("timestampMillis") != null && !jsonObj.get("timestampMillis").isJsonNull()) && !jsonObj.get("timestampMillis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timestampMillis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timestampMillis").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RequestDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RequestDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RequestDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RequestDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<RequestDetails>() {
           @Override
           public void write(JsonWriter out, RequestDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RequestDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RequestDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RequestDetails
   * @throws IOException if the JSON string is invalid with respect to RequestDetails
   */
  public static RequestDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RequestDetails.class);
  }

  /**
   * Convert an instance of RequestDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

