/*
 * Google Play Integrity API
 * The Play Integrity API helps you check that you're interacting with your genuine app on a genuine Android device powered by Google Play services. The Play Integrity API has replaced SafetyNet Attestation and Android Device Verification.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AccountDetails;
import org.openapitools.client.model.AppIntegrity;
import org.openapitools.client.model.DeviceIntegrity;
import org.openapitools.client.model.EnvironmentDetails;
import org.openapitools.client.model.RequestDetails;
import org.openapitools.client.model.TestingDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains basic app information and integrity signals like device attestation and licensing details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:51.784546-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TokenPayloadExternal {
  public static final String SERIALIZED_NAME_ACCOUNT_DETAILS = "accountDetails";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_DETAILS)
  private AccountDetails accountDetails;

  public static final String SERIALIZED_NAME_APP_INTEGRITY = "appIntegrity";
  @SerializedName(SERIALIZED_NAME_APP_INTEGRITY)
  private AppIntegrity appIntegrity;

  public static final String SERIALIZED_NAME_DEVICE_INTEGRITY = "deviceIntegrity";
  @SerializedName(SERIALIZED_NAME_DEVICE_INTEGRITY)
  private DeviceIntegrity deviceIntegrity;

  public static final String SERIALIZED_NAME_ENVIRONMENT_DETAILS = "environmentDetails";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_DETAILS)
  private EnvironmentDetails environmentDetails;

  public static final String SERIALIZED_NAME_REQUEST_DETAILS = "requestDetails";
  @SerializedName(SERIALIZED_NAME_REQUEST_DETAILS)
  private RequestDetails requestDetails;

  public static final String SERIALIZED_NAME_TESTING_DETAILS = "testingDetails";
  @SerializedName(SERIALIZED_NAME_TESTING_DETAILS)
  private TestingDetails testingDetails;

  public TokenPayloadExternal() {
  }

  public TokenPayloadExternal accountDetails(AccountDetails accountDetails) {
    this.accountDetails = accountDetails;
    return this;
  }

  /**
   * Get accountDetails
   * @return accountDetails
   */
  @javax.annotation.Nullable
  public AccountDetails getAccountDetails() {
    return accountDetails;
  }

  public void setAccountDetails(AccountDetails accountDetails) {
    this.accountDetails = accountDetails;
  }


  public TokenPayloadExternal appIntegrity(AppIntegrity appIntegrity) {
    this.appIntegrity = appIntegrity;
    return this;
  }

  /**
   * Get appIntegrity
   * @return appIntegrity
   */
  @javax.annotation.Nullable
  public AppIntegrity getAppIntegrity() {
    return appIntegrity;
  }

  public void setAppIntegrity(AppIntegrity appIntegrity) {
    this.appIntegrity = appIntegrity;
  }


  public TokenPayloadExternal deviceIntegrity(DeviceIntegrity deviceIntegrity) {
    this.deviceIntegrity = deviceIntegrity;
    return this;
  }

  /**
   * Get deviceIntegrity
   * @return deviceIntegrity
   */
  @javax.annotation.Nullable
  public DeviceIntegrity getDeviceIntegrity() {
    return deviceIntegrity;
  }

  public void setDeviceIntegrity(DeviceIntegrity deviceIntegrity) {
    this.deviceIntegrity = deviceIntegrity;
  }


  public TokenPayloadExternal environmentDetails(EnvironmentDetails environmentDetails) {
    this.environmentDetails = environmentDetails;
    return this;
  }

  /**
   * Get environmentDetails
   * @return environmentDetails
   */
  @javax.annotation.Nullable
  public EnvironmentDetails getEnvironmentDetails() {
    return environmentDetails;
  }

  public void setEnvironmentDetails(EnvironmentDetails environmentDetails) {
    this.environmentDetails = environmentDetails;
  }


  public TokenPayloadExternal requestDetails(RequestDetails requestDetails) {
    this.requestDetails = requestDetails;
    return this;
  }

  /**
   * Get requestDetails
   * @return requestDetails
   */
  @javax.annotation.Nullable
  public RequestDetails getRequestDetails() {
    return requestDetails;
  }

  public void setRequestDetails(RequestDetails requestDetails) {
    this.requestDetails = requestDetails;
  }


  public TokenPayloadExternal testingDetails(TestingDetails testingDetails) {
    this.testingDetails = testingDetails;
    return this;
  }

  /**
   * Get testingDetails
   * @return testingDetails
   */
  @javax.annotation.Nullable
  public TestingDetails getTestingDetails() {
    return testingDetails;
  }

  public void setTestingDetails(TestingDetails testingDetails) {
    this.testingDetails = testingDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TokenPayloadExternal tokenPayloadExternal = (TokenPayloadExternal) o;
    return Objects.equals(this.accountDetails, tokenPayloadExternal.accountDetails) &&
        Objects.equals(this.appIntegrity, tokenPayloadExternal.appIntegrity) &&
        Objects.equals(this.deviceIntegrity, tokenPayloadExternal.deviceIntegrity) &&
        Objects.equals(this.environmentDetails, tokenPayloadExternal.environmentDetails) &&
        Objects.equals(this.requestDetails, tokenPayloadExternal.requestDetails) &&
        Objects.equals(this.testingDetails, tokenPayloadExternal.testingDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountDetails, appIntegrity, deviceIntegrity, environmentDetails, requestDetails, testingDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TokenPayloadExternal {\n");
    sb.append("    accountDetails: ").append(toIndentedString(accountDetails)).append("\n");
    sb.append("    appIntegrity: ").append(toIndentedString(appIntegrity)).append("\n");
    sb.append("    deviceIntegrity: ").append(toIndentedString(deviceIntegrity)).append("\n");
    sb.append("    environmentDetails: ").append(toIndentedString(environmentDetails)).append("\n");
    sb.append("    requestDetails: ").append(toIndentedString(requestDetails)).append("\n");
    sb.append("    testingDetails: ").append(toIndentedString(testingDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountDetails");
    openapiFields.add("appIntegrity");
    openapiFields.add("deviceIntegrity");
    openapiFields.add("environmentDetails");
    openapiFields.add("requestDetails");
    openapiFields.add("testingDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TokenPayloadExternal
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TokenPayloadExternal.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TokenPayloadExternal is not found in the empty JSON string", TokenPayloadExternal.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TokenPayloadExternal.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TokenPayloadExternal` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accountDetails`
      if (jsonObj.get("accountDetails") != null && !jsonObj.get("accountDetails").isJsonNull()) {
        AccountDetails.validateJsonElement(jsonObj.get("accountDetails"));
      }
      // validate the optional field `appIntegrity`
      if (jsonObj.get("appIntegrity") != null && !jsonObj.get("appIntegrity").isJsonNull()) {
        AppIntegrity.validateJsonElement(jsonObj.get("appIntegrity"));
      }
      // validate the optional field `deviceIntegrity`
      if (jsonObj.get("deviceIntegrity") != null && !jsonObj.get("deviceIntegrity").isJsonNull()) {
        DeviceIntegrity.validateJsonElement(jsonObj.get("deviceIntegrity"));
      }
      // validate the optional field `environmentDetails`
      if (jsonObj.get("environmentDetails") != null && !jsonObj.get("environmentDetails").isJsonNull()) {
        EnvironmentDetails.validateJsonElement(jsonObj.get("environmentDetails"));
      }
      // validate the optional field `requestDetails`
      if (jsonObj.get("requestDetails") != null && !jsonObj.get("requestDetails").isJsonNull()) {
        RequestDetails.validateJsonElement(jsonObj.get("requestDetails"));
      }
      // validate the optional field `testingDetails`
      if (jsonObj.get("testingDetails") != null && !jsonObj.get("testingDetails").isJsonNull()) {
        TestingDetails.validateJsonElement(jsonObj.get("testingDetails"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TokenPayloadExternal.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TokenPayloadExternal' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TokenPayloadExternal> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TokenPayloadExternal.class));

       return (TypeAdapter<T>) new TypeAdapter<TokenPayloadExternal>() {
           @Override
           public void write(JsonWriter out, TokenPayloadExternal value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TokenPayloadExternal read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TokenPayloadExternal given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TokenPayloadExternal
   * @throws IOException if the JSON string is invalid with respect to TokenPayloadExternal
   */
  public static TokenPayloadExternal fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TokenPayloadExternal.class);
  }

  /**
   * Convert an instance of TokenPayloadExternal to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

