# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AppAccessRiskVerdict(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, other_apps: str=None, play_or_system_apps: str=None):
        """AppAccessRiskVerdict - a model defined in OpenAPI

        :param other_apps: The other_apps of this AppAccessRiskVerdict.
        :param play_or_system_apps: The play_or_system_apps of this AppAccessRiskVerdict.
        """
        self.openapi_types = {
            'other_apps': str,
            'play_or_system_apps': str
        }

        self.attribute_map = {
            'other_apps': 'otherApps',
            'play_or_system_apps': 'playOrSystemApps'
        }

        self._other_apps = other_apps
        self._play_or_system_apps = play_or_system_apps

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppAccessRiskVerdict':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppAccessRiskVerdict of this AppAccessRiskVerdict.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def other_apps(self):
        """Gets the other_apps of this AppAccessRiskVerdict.

        Required. App access risk verdict related to apps that are not installed by Google Play, and are not preloaded on the system image by the device manufacturer.

        :return: The other_apps of this AppAccessRiskVerdict.
        :rtype: str
        """
        return self._other_apps

    @other_apps.setter
    def other_apps(self, other_apps):
        """Sets the other_apps of this AppAccessRiskVerdict.

        Required. App access risk verdict related to apps that are not installed by Google Play, and are not preloaded on the system image by the device manufacturer.

        :param other_apps: The other_apps of this AppAccessRiskVerdict.
        :type other_apps: str
        """
        allowed_values = ["UNKNOWN", "UNEVALUATED", "NOT_INSTALLED", "INSTALLED", "CAPTURING", "CONTROLLING"]  # noqa: E501
        if other_apps not in allowed_values:
            raise ValueError(
                "Invalid value for `other_apps` ({0}), must be one of {1}"
                .format(other_apps, allowed_values)
            )

        self._other_apps = other_apps

    @property
    def play_or_system_apps(self):
        """Gets the play_or_system_apps of this AppAccessRiskVerdict.

        Required. App access risk verdict related to apps that are not installed by the Google Play Store, and are not preloaded on the system image by the device manufacturer.

        :return: The play_or_system_apps of this AppAccessRiskVerdict.
        :rtype: str
        """
        return self._play_or_system_apps

    @play_or_system_apps.setter
    def play_or_system_apps(self, play_or_system_apps):
        """Sets the play_or_system_apps of this AppAccessRiskVerdict.

        Required. App access risk verdict related to apps that are not installed by the Google Play Store, and are not preloaded on the system image by the device manufacturer.

        :param play_or_system_apps: The play_or_system_apps of this AppAccessRiskVerdict.
        :type play_or_system_apps: str
        """
        allowed_values = ["UNKNOWN", "UNEVALUATED", "NOT_INSTALLED", "INSTALLED", "CAPTURING", "CONTROLLING"]  # noqa: E501
        if play_or_system_apps not in allowed_values:
            raise ValueError(
                "Invalid value for `play_or_system_apps` ({0}), must be one of {1}"
                .format(play_or_system_apps, allowed_values)
            )

        self._play_or_system_apps = play_or_system_apps
