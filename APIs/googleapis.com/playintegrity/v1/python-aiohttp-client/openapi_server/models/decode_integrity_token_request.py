# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DecodeIntegrityTokenRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, integrity_token: str=None):
        """DecodeIntegrityTokenRequest - a model defined in OpenAPI

        :param integrity_token: The integrity_token of this DecodeIntegrityTokenRequest.
        """
        self.openapi_types = {
            'integrity_token': str
        }

        self.attribute_map = {
            'integrity_token': 'integrityToken'
        }

        self._integrity_token = integrity_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DecodeIntegrityTokenRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DecodeIntegrityTokenRequest of this DecodeIntegrityTokenRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def integrity_token(self):
        """Gets the integrity_token of this DecodeIntegrityTokenRequest.

        Encoded integrity token.

        :return: The integrity_token of this DecodeIntegrityTokenRequest.
        :rtype: str
        """
        return self._integrity_token

    @integrity_token.setter
    def integrity_token(self, integrity_token):
        """Sets the integrity_token of this DecodeIntegrityTokenRequest.

        Encoded integrity token.

        :param integrity_token: The integrity_token of this DecodeIntegrityTokenRequest.
        :type integrity_token: str
        """

        self._integrity_token = integrity_token
