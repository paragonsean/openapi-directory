# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.app_access_risk_verdict import AppAccessRiskVerdict
from openapi_server import util


class EnvironmentDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_access_risk_verdict: AppAccessRiskVerdict=None, play_protect_verdict: str=None):
        """EnvironmentDetails - a model defined in OpenAPI

        :param app_access_risk_verdict: The app_access_risk_verdict of this EnvironmentDetails.
        :param play_protect_verdict: The play_protect_verdict of this EnvironmentDetails.
        """
        self.openapi_types = {
            'app_access_risk_verdict': AppAccessRiskVerdict,
            'play_protect_verdict': str
        }

        self.attribute_map = {
            'app_access_risk_verdict': 'appAccessRiskVerdict',
            'play_protect_verdict': 'playProtectVerdict'
        }

        self._app_access_risk_verdict = app_access_risk_verdict
        self._play_protect_verdict = play_protect_verdict

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnvironmentDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnvironmentDetails of this EnvironmentDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_access_risk_verdict(self):
        """Gets the app_access_risk_verdict of this EnvironmentDetails.


        :return: The app_access_risk_verdict of this EnvironmentDetails.
        :rtype: AppAccessRiskVerdict
        """
        return self._app_access_risk_verdict

    @app_access_risk_verdict.setter
    def app_access_risk_verdict(self, app_access_risk_verdict):
        """Sets the app_access_risk_verdict of this EnvironmentDetails.


        :param app_access_risk_verdict: The app_access_risk_verdict of this EnvironmentDetails.
        :type app_access_risk_verdict: AppAccessRiskVerdict
        """

        self._app_access_risk_verdict = app_access_risk_verdict

    @property
    def play_protect_verdict(self):
        """Gets the play_protect_verdict of this EnvironmentDetails.

        The evaluation of Play Protect verdict.

        :return: The play_protect_verdict of this EnvironmentDetails.
        :rtype: str
        """
        return self._play_protect_verdict

    @play_protect_verdict.setter
    def play_protect_verdict(self, play_protect_verdict):
        """Sets the play_protect_verdict of this EnvironmentDetails.

        The evaluation of Play Protect verdict.

        :param play_protect_verdict: The play_protect_verdict of this EnvironmentDetails.
        :type play_protect_verdict: str
        """
        allowed_values = ["PLAY_PROTECT_VERDICT_UNSPECIFIED", "UNEVALUATED", "NO_ISSUES", "NO_DATA", "MEDIUM_RISK", "HIGH_RISK", "POSSIBLE_RISK"]  # noqa: E501
        if play_protect_verdict not in allowed_values:
            raise ValueError(
                "Invalid value for `play_protect_verdict` ({0}), must be one of {1}"
                .format(play_protect_verdict, allowed_values)
            )

        self._play_protect_verdict = play_protect_verdict
