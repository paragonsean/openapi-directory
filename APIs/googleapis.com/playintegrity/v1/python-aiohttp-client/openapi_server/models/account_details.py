# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_activity import AccountActivity
from openapi_server import util


class AccountDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_activity: AccountActivity=None, app_licensing_verdict: str=None):
        """AccountDetails - a model defined in OpenAPI

        :param account_activity: The account_activity of this AccountDetails.
        :param app_licensing_verdict: The app_licensing_verdict of this AccountDetails.
        """
        self.openapi_types = {
            'account_activity': AccountActivity,
            'app_licensing_verdict': str
        }

        self.attribute_map = {
            'account_activity': 'accountActivity',
            'app_licensing_verdict': 'appLicensingVerdict'
        }

        self._account_activity = account_activity
        self._app_licensing_verdict = app_licensing_verdict

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountDetails of this AccountDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_activity(self):
        """Gets the account_activity of this AccountDetails.


        :return: The account_activity of this AccountDetails.
        :rtype: AccountActivity
        """
        return self._account_activity

    @account_activity.setter
    def account_activity(self, account_activity):
        """Sets the account_activity of this AccountDetails.


        :param account_activity: The account_activity of this AccountDetails.
        :type account_activity: AccountActivity
        """

        self._account_activity = account_activity

    @property
    def app_licensing_verdict(self):
        """Gets the app_licensing_verdict of this AccountDetails.

        Required. Details about the licensing status of the user for the app in the scope.

        :return: The app_licensing_verdict of this AccountDetails.
        :rtype: str
        """
        return self._app_licensing_verdict

    @app_licensing_verdict.setter
    def app_licensing_verdict(self, app_licensing_verdict):
        """Sets the app_licensing_verdict of this AccountDetails.

        Required. Details about the licensing status of the user for the app in the scope.

        :param app_licensing_verdict: The app_licensing_verdict of this AccountDetails.
        :type app_licensing_verdict: str
        """
        allowed_values = ["UNKNOWN", "LICENSED", "UNLICENSED", "UNEVALUATED"]  # noqa: E501
        if app_licensing_verdict not in allowed_values:
            raise ValueError(
                "Invalid value for `app_licensing_verdict` ({0}), must be one of {1}"
                .format(app_licensing_verdict, allowed_values)
            )

        self._app_licensing_verdict = app_licensing_verdict
