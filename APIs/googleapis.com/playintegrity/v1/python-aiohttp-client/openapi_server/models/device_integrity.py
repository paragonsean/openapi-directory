# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.recent_device_activity import RecentDeviceActivity
from openapi_server import util


class DeviceIntegrity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_recognition_verdict: List[str]=None, recent_device_activity: RecentDeviceActivity=None):
        """DeviceIntegrity - a model defined in OpenAPI

        :param device_recognition_verdict: The device_recognition_verdict of this DeviceIntegrity.
        :param recent_device_activity: The recent_device_activity of this DeviceIntegrity.
        """
        self.openapi_types = {
            'device_recognition_verdict': List[str],
            'recent_device_activity': RecentDeviceActivity
        }

        self.attribute_map = {
            'device_recognition_verdict': 'deviceRecognitionVerdict',
            'recent_device_activity': 'recentDeviceActivity'
        }

        self._device_recognition_verdict = device_recognition_verdict
        self._recent_device_activity = recent_device_activity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceIntegrity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceIntegrity of this DeviceIntegrity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_recognition_verdict(self):
        """Gets the device_recognition_verdict of this DeviceIntegrity.

        Details about the integrity of the device the app is running on.

        :return: The device_recognition_verdict of this DeviceIntegrity.
        :rtype: List[str]
        """
        return self._device_recognition_verdict

    @device_recognition_verdict.setter
    def device_recognition_verdict(self, device_recognition_verdict):
        """Sets the device_recognition_verdict of this DeviceIntegrity.

        Details about the integrity of the device the app is running on.

        :param device_recognition_verdict: The device_recognition_verdict of this DeviceIntegrity.
        :type device_recognition_verdict: List[str]
        """
        allowed_values = ["UNKNOWN", "MEETS_BASIC_INTEGRITY", "MEETS_DEVICE_INTEGRITY", "MEETS_STRONG_INTEGRITY", "MEETS_VIRTUAL_INTEGRITY"]  # noqa: E501
        if not set(device_recognition_verdict).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `device_recognition_verdict` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(device_recognition_verdict) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._device_recognition_verdict = device_recognition_verdict

    @property
    def recent_device_activity(self):
        """Gets the recent_device_activity of this DeviceIntegrity.


        :return: The recent_device_activity of this DeviceIntegrity.
        :rtype: RecentDeviceActivity
        """
        return self._recent_device_activity

    @recent_device_activity.setter
    def recent_device_activity(self, recent_device_activity):
        """Sets the recent_device_activity of this DeviceIntegrity.


        :param recent_device_activity: The recent_device_activity of this DeviceIntegrity.
        :type recent_device_activity: RecentDeviceActivity
        """

        self._recent_device_activity = recent_device_activity
