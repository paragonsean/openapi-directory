/**
 * Google Play Integrity API
 * The Play Integrity API helps you check that you're interacting with your genuine app on a genuine Android device powered by Google Play services. The Play Integrity API has replaced SafetyNet Attestation and Android Device Verification.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRequestDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRequestDetails::OAIRequestDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRequestDetails::OAIRequestDetails() {
    this->initializeModel();
}

OAIRequestDetails::~OAIRequestDetails() {}

void OAIRequestDetails::initializeModel() {

    m_nonce_isSet = false;
    m_nonce_isValid = false;

    m_request_hash_isSet = false;
    m_request_hash_isValid = false;

    m_request_package_name_isSet = false;
    m_request_package_name_isValid = false;

    m_timestamp_millis_isSet = false;
    m_timestamp_millis_isValid = false;
}

void OAIRequestDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRequestDetails::fromJsonObject(QJsonObject json) {

    m_nonce_isValid = ::OpenAPI::fromJsonValue(m_nonce, json[QString("nonce")]);
    m_nonce_isSet = !json[QString("nonce")].isNull() && m_nonce_isValid;

    m_request_hash_isValid = ::OpenAPI::fromJsonValue(m_request_hash, json[QString("requestHash")]);
    m_request_hash_isSet = !json[QString("requestHash")].isNull() && m_request_hash_isValid;

    m_request_package_name_isValid = ::OpenAPI::fromJsonValue(m_request_package_name, json[QString("requestPackageName")]);
    m_request_package_name_isSet = !json[QString("requestPackageName")].isNull() && m_request_package_name_isValid;

    m_timestamp_millis_isValid = ::OpenAPI::fromJsonValue(m_timestamp_millis, json[QString("timestampMillis")]);
    m_timestamp_millis_isSet = !json[QString("timestampMillis")].isNull() && m_timestamp_millis_isValid;
}

QString OAIRequestDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRequestDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_nonce_isSet) {
        obj.insert(QString("nonce"), ::OpenAPI::toJsonValue(m_nonce));
    }
    if (m_request_hash_isSet) {
        obj.insert(QString("requestHash"), ::OpenAPI::toJsonValue(m_request_hash));
    }
    if (m_request_package_name_isSet) {
        obj.insert(QString("requestPackageName"), ::OpenAPI::toJsonValue(m_request_package_name));
    }
    if (m_timestamp_millis_isSet) {
        obj.insert(QString("timestampMillis"), ::OpenAPI::toJsonValue(m_timestamp_millis));
    }
    return obj;
}

QString OAIRequestDetails::getNonce() const {
    return m_nonce;
}
void OAIRequestDetails::setNonce(const QString &nonce) {
    m_nonce = nonce;
    m_nonce_isSet = true;
}

bool OAIRequestDetails::is_nonce_Set() const{
    return m_nonce_isSet;
}

bool OAIRequestDetails::is_nonce_Valid() const{
    return m_nonce_isValid;
}

QString OAIRequestDetails::getRequestHash() const {
    return m_request_hash;
}
void OAIRequestDetails::setRequestHash(const QString &request_hash) {
    m_request_hash = request_hash;
    m_request_hash_isSet = true;
}

bool OAIRequestDetails::is_request_hash_Set() const{
    return m_request_hash_isSet;
}

bool OAIRequestDetails::is_request_hash_Valid() const{
    return m_request_hash_isValid;
}

QString OAIRequestDetails::getRequestPackageName() const {
    return m_request_package_name;
}
void OAIRequestDetails::setRequestPackageName(const QString &request_package_name) {
    m_request_package_name = request_package_name;
    m_request_package_name_isSet = true;
}

bool OAIRequestDetails::is_request_package_name_Set() const{
    return m_request_package_name_isSet;
}

bool OAIRequestDetails::is_request_package_name_Valid() const{
    return m_request_package_name_isValid;
}

QString OAIRequestDetails::getTimestampMillis() const {
    return m_timestamp_millis;
}
void OAIRequestDetails::setTimestampMillis(const QString &timestamp_millis) {
    m_timestamp_millis = timestamp_millis;
    m_timestamp_millis_isSet = true;
}

bool OAIRequestDetails::is_timestamp_millis_Set() const{
    return m_timestamp_millis_isSet;
}

bool OAIRequestDetails::is_timestamp_millis_Valid() const{
    return m_timestamp_millis_isValid;
}

bool OAIRequestDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_nonce_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_package_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_millis_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRequestDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
