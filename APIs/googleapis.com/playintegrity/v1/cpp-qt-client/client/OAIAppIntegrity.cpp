/**
 * Google Play Integrity API
 * The Play Integrity API helps you check that you're interacting with your genuine app on a genuine Android device powered by Google Play services. The Play Integrity API has replaced SafetyNet Attestation and Android Device Verification.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppIntegrity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppIntegrity::OAIAppIntegrity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppIntegrity::OAIAppIntegrity() {
    this->initializeModel();
}

OAIAppIntegrity::~OAIAppIntegrity() {}

void OAIAppIntegrity::initializeModel() {

    m_app_recognition_verdict_isSet = false;
    m_app_recognition_verdict_isValid = false;

    m_certificate_sha256_digest_isSet = false;
    m_certificate_sha256_digest_isValid = false;

    m_package_name_isSet = false;
    m_package_name_isValid = false;

    m_version_code_isSet = false;
    m_version_code_isValid = false;
}

void OAIAppIntegrity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppIntegrity::fromJsonObject(QJsonObject json) {

    m_app_recognition_verdict_isValid = ::OpenAPI::fromJsonValue(m_app_recognition_verdict, json[QString("appRecognitionVerdict")]);
    m_app_recognition_verdict_isSet = !json[QString("appRecognitionVerdict")].isNull() && m_app_recognition_verdict_isValid;

    m_certificate_sha256_digest_isValid = ::OpenAPI::fromJsonValue(m_certificate_sha256_digest, json[QString("certificateSha256Digest")]);
    m_certificate_sha256_digest_isSet = !json[QString("certificateSha256Digest")].isNull() && m_certificate_sha256_digest_isValid;

    m_package_name_isValid = ::OpenAPI::fromJsonValue(m_package_name, json[QString("packageName")]);
    m_package_name_isSet = !json[QString("packageName")].isNull() && m_package_name_isValid;

    m_version_code_isValid = ::OpenAPI::fromJsonValue(m_version_code, json[QString("versionCode")]);
    m_version_code_isSet = !json[QString("versionCode")].isNull() && m_version_code_isValid;
}

QString OAIAppIntegrity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppIntegrity::asJsonObject() const {
    QJsonObject obj;
    if (m_app_recognition_verdict_isSet) {
        obj.insert(QString("appRecognitionVerdict"), ::OpenAPI::toJsonValue(m_app_recognition_verdict));
    }
    if (m_certificate_sha256_digest.size() > 0) {
        obj.insert(QString("certificateSha256Digest"), ::OpenAPI::toJsonValue(m_certificate_sha256_digest));
    }
    if (m_package_name_isSet) {
        obj.insert(QString("packageName"), ::OpenAPI::toJsonValue(m_package_name));
    }
    if (m_version_code_isSet) {
        obj.insert(QString("versionCode"), ::OpenAPI::toJsonValue(m_version_code));
    }
    return obj;
}

QString OAIAppIntegrity::getAppRecognitionVerdict() const {
    return m_app_recognition_verdict;
}
void OAIAppIntegrity::setAppRecognitionVerdict(const QString &app_recognition_verdict) {
    m_app_recognition_verdict = app_recognition_verdict;
    m_app_recognition_verdict_isSet = true;
}

bool OAIAppIntegrity::is_app_recognition_verdict_Set() const{
    return m_app_recognition_verdict_isSet;
}

bool OAIAppIntegrity::is_app_recognition_verdict_Valid() const{
    return m_app_recognition_verdict_isValid;
}

QList<QString> OAIAppIntegrity::getCertificateSha256Digest() const {
    return m_certificate_sha256_digest;
}
void OAIAppIntegrity::setCertificateSha256Digest(const QList<QString> &certificate_sha256_digest) {
    m_certificate_sha256_digest = certificate_sha256_digest;
    m_certificate_sha256_digest_isSet = true;
}

bool OAIAppIntegrity::is_certificate_sha256_digest_Set() const{
    return m_certificate_sha256_digest_isSet;
}

bool OAIAppIntegrity::is_certificate_sha256_digest_Valid() const{
    return m_certificate_sha256_digest_isValid;
}

QString OAIAppIntegrity::getPackageName() const {
    return m_package_name;
}
void OAIAppIntegrity::setPackageName(const QString &package_name) {
    m_package_name = package_name;
    m_package_name_isSet = true;
}

bool OAIAppIntegrity::is_package_name_Set() const{
    return m_package_name_isSet;
}

bool OAIAppIntegrity::is_package_name_Valid() const{
    return m_package_name_isValid;
}

QString OAIAppIntegrity::getVersionCode() const {
    return m_version_code;
}
void OAIAppIntegrity::setVersionCode(const QString &version_code) {
    m_version_code = version_code;
    m_version_code_isSet = true;
}

bool OAIAppIntegrity::is_version_code_Set() const{
    return m_version_code_isSet;
}

bool OAIAppIntegrity::is_version_code_Valid() const{
    return m_version_code_isValid;
}

bool OAIAppIntegrity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_recognition_verdict_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_sha256_digest.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppIntegrity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
