/**
 * Google Play Integrity API
 * The Play Integrity API helps you check that you're interacting with your genuine app on a genuine Android device powered by Google Play services. The Play Integrity API has replaced SafetyNet Attestation and Android Device Verification.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppAccessRiskVerdict.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppAccessRiskVerdict::OAIAppAccessRiskVerdict(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppAccessRiskVerdict::OAIAppAccessRiskVerdict() {
    this->initializeModel();
}

OAIAppAccessRiskVerdict::~OAIAppAccessRiskVerdict() {}

void OAIAppAccessRiskVerdict::initializeModel() {

    m_other_apps_isSet = false;
    m_other_apps_isValid = false;

    m_play_or_system_apps_isSet = false;
    m_play_or_system_apps_isValid = false;
}

void OAIAppAccessRiskVerdict::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppAccessRiskVerdict::fromJsonObject(QJsonObject json) {

    m_other_apps_isValid = ::OpenAPI::fromJsonValue(m_other_apps, json[QString("otherApps")]);
    m_other_apps_isSet = !json[QString("otherApps")].isNull() && m_other_apps_isValid;

    m_play_or_system_apps_isValid = ::OpenAPI::fromJsonValue(m_play_or_system_apps, json[QString("playOrSystemApps")]);
    m_play_or_system_apps_isSet = !json[QString("playOrSystemApps")].isNull() && m_play_or_system_apps_isValid;
}

QString OAIAppAccessRiskVerdict::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppAccessRiskVerdict::asJsonObject() const {
    QJsonObject obj;
    if (m_other_apps_isSet) {
        obj.insert(QString("otherApps"), ::OpenAPI::toJsonValue(m_other_apps));
    }
    if (m_play_or_system_apps_isSet) {
        obj.insert(QString("playOrSystemApps"), ::OpenAPI::toJsonValue(m_play_or_system_apps));
    }
    return obj;
}

QString OAIAppAccessRiskVerdict::getOtherApps() const {
    return m_other_apps;
}
void OAIAppAccessRiskVerdict::setOtherApps(const QString &other_apps) {
    m_other_apps = other_apps;
    m_other_apps_isSet = true;
}

bool OAIAppAccessRiskVerdict::is_other_apps_Set() const{
    return m_other_apps_isSet;
}

bool OAIAppAccessRiskVerdict::is_other_apps_Valid() const{
    return m_other_apps_isValid;
}

QString OAIAppAccessRiskVerdict::getPlayOrSystemApps() const {
    return m_play_or_system_apps;
}
void OAIAppAccessRiskVerdict::setPlayOrSystemApps(const QString &play_or_system_apps) {
    m_play_or_system_apps = play_or_system_apps;
    m_play_or_system_apps_isSet = true;
}

bool OAIAppAccessRiskVerdict::is_play_or_system_apps_Set() const{
    return m_play_or_system_apps_isSet;
}

bool OAIAppAccessRiskVerdict::is_play_or_system_apps_Valid() const{
    return m_play_or_system_apps_isValid;
}

bool OAIAppAccessRiskVerdict::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_other_apps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_or_system_apps_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppAccessRiskVerdict::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
