/**
 * Google Play Integrity API
 * The Play Integrity API helps you check that you're interacting with your genuine app on a genuine Android device powered by Google Play services. The Play Integrity API has replaced SafetyNet Attestation and Android Device Verification.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceIntegrity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceIntegrity::OAIDeviceIntegrity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceIntegrity::OAIDeviceIntegrity() {
    this->initializeModel();
}

OAIDeviceIntegrity::~OAIDeviceIntegrity() {}

void OAIDeviceIntegrity::initializeModel() {

    m_device_recognition_verdict_isSet = false;
    m_device_recognition_verdict_isValid = false;

    m_recent_device_activity_isSet = false;
    m_recent_device_activity_isValid = false;
}

void OAIDeviceIntegrity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceIntegrity::fromJsonObject(QJsonObject json) {

    m_device_recognition_verdict_isValid = ::OpenAPI::fromJsonValue(m_device_recognition_verdict, json[QString("deviceRecognitionVerdict")]);
    m_device_recognition_verdict_isSet = !json[QString("deviceRecognitionVerdict")].isNull() && m_device_recognition_verdict_isValid;

    m_recent_device_activity_isValid = ::OpenAPI::fromJsonValue(m_recent_device_activity, json[QString("recentDeviceActivity")]);
    m_recent_device_activity_isSet = !json[QString("recentDeviceActivity")].isNull() && m_recent_device_activity_isValid;
}

QString OAIDeviceIntegrity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceIntegrity::asJsonObject() const {
    QJsonObject obj;
    if (m_device_recognition_verdict.size() > 0) {
        obj.insert(QString("deviceRecognitionVerdict"), ::OpenAPI::toJsonValue(m_device_recognition_verdict));
    }
    if (m_recent_device_activity.isSet()) {
        obj.insert(QString("recentDeviceActivity"), ::OpenAPI::toJsonValue(m_recent_device_activity));
    }
    return obj;
}

QList<QString> OAIDeviceIntegrity::getDeviceRecognitionVerdict() const {
    return m_device_recognition_verdict;
}
void OAIDeviceIntegrity::setDeviceRecognitionVerdict(const QList<QString> &device_recognition_verdict) {
    m_device_recognition_verdict = device_recognition_verdict;
    m_device_recognition_verdict_isSet = true;
}

bool OAIDeviceIntegrity::is_device_recognition_verdict_Set() const{
    return m_device_recognition_verdict_isSet;
}

bool OAIDeviceIntegrity::is_device_recognition_verdict_Valid() const{
    return m_device_recognition_verdict_isValid;
}

OAIRecentDeviceActivity OAIDeviceIntegrity::getRecentDeviceActivity() const {
    return m_recent_device_activity;
}
void OAIDeviceIntegrity::setRecentDeviceActivity(const OAIRecentDeviceActivity &recent_device_activity) {
    m_recent_device_activity = recent_device_activity;
    m_recent_device_activity_isSet = true;
}

bool OAIDeviceIntegrity::is_recent_device_activity_Set() const{
    return m_recent_device_activity_isSet;
}

bool OAIDeviceIntegrity::is_recent_device_activity_Valid() const{
    return m_recent_device_activity_isValid;
}

bool OAIDeviceIntegrity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_recognition_verdict.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_recent_device_activity.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceIntegrity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
