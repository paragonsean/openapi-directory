/**
 * Google Play Integrity API
 * The Play Integrity API helps you check that you're interacting with your genuine app on a genuine Android device powered by Google Play services. The Play Integrity API has replaced SafetyNet Attestation and Android Device Verification.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITokenPayloadExternal.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITokenPayloadExternal::OAITokenPayloadExternal(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITokenPayloadExternal::OAITokenPayloadExternal() {
    this->initializeModel();
}

OAITokenPayloadExternal::~OAITokenPayloadExternal() {}

void OAITokenPayloadExternal::initializeModel() {

    m_account_details_isSet = false;
    m_account_details_isValid = false;

    m_app_integrity_isSet = false;
    m_app_integrity_isValid = false;

    m_device_integrity_isSet = false;
    m_device_integrity_isValid = false;

    m_environment_details_isSet = false;
    m_environment_details_isValid = false;

    m_request_details_isSet = false;
    m_request_details_isValid = false;

    m_testing_details_isSet = false;
    m_testing_details_isValid = false;
}

void OAITokenPayloadExternal::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITokenPayloadExternal::fromJsonObject(QJsonObject json) {

    m_account_details_isValid = ::OpenAPI::fromJsonValue(m_account_details, json[QString("accountDetails")]);
    m_account_details_isSet = !json[QString("accountDetails")].isNull() && m_account_details_isValid;

    m_app_integrity_isValid = ::OpenAPI::fromJsonValue(m_app_integrity, json[QString("appIntegrity")]);
    m_app_integrity_isSet = !json[QString("appIntegrity")].isNull() && m_app_integrity_isValid;

    m_device_integrity_isValid = ::OpenAPI::fromJsonValue(m_device_integrity, json[QString("deviceIntegrity")]);
    m_device_integrity_isSet = !json[QString("deviceIntegrity")].isNull() && m_device_integrity_isValid;

    m_environment_details_isValid = ::OpenAPI::fromJsonValue(m_environment_details, json[QString("environmentDetails")]);
    m_environment_details_isSet = !json[QString("environmentDetails")].isNull() && m_environment_details_isValid;

    m_request_details_isValid = ::OpenAPI::fromJsonValue(m_request_details, json[QString("requestDetails")]);
    m_request_details_isSet = !json[QString("requestDetails")].isNull() && m_request_details_isValid;

    m_testing_details_isValid = ::OpenAPI::fromJsonValue(m_testing_details, json[QString("testingDetails")]);
    m_testing_details_isSet = !json[QString("testingDetails")].isNull() && m_testing_details_isValid;
}

QString OAITokenPayloadExternal::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITokenPayloadExternal::asJsonObject() const {
    QJsonObject obj;
    if (m_account_details.isSet()) {
        obj.insert(QString("accountDetails"), ::OpenAPI::toJsonValue(m_account_details));
    }
    if (m_app_integrity.isSet()) {
        obj.insert(QString("appIntegrity"), ::OpenAPI::toJsonValue(m_app_integrity));
    }
    if (m_device_integrity.isSet()) {
        obj.insert(QString("deviceIntegrity"), ::OpenAPI::toJsonValue(m_device_integrity));
    }
    if (m_environment_details.isSet()) {
        obj.insert(QString("environmentDetails"), ::OpenAPI::toJsonValue(m_environment_details));
    }
    if (m_request_details.isSet()) {
        obj.insert(QString("requestDetails"), ::OpenAPI::toJsonValue(m_request_details));
    }
    if (m_testing_details.isSet()) {
        obj.insert(QString("testingDetails"), ::OpenAPI::toJsonValue(m_testing_details));
    }
    return obj;
}

OAIAccountDetails OAITokenPayloadExternal::getAccountDetails() const {
    return m_account_details;
}
void OAITokenPayloadExternal::setAccountDetails(const OAIAccountDetails &account_details) {
    m_account_details = account_details;
    m_account_details_isSet = true;
}

bool OAITokenPayloadExternal::is_account_details_Set() const{
    return m_account_details_isSet;
}

bool OAITokenPayloadExternal::is_account_details_Valid() const{
    return m_account_details_isValid;
}

OAIAppIntegrity OAITokenPayloadExternal::getAppIntegrity() const {
    return m_app_integrity;
}
void OAITokenPayloadExternal::setAppIntegrity(const OAIAppIntegrity &app_integrity) {
    m_app_integrity = app_integrity;
    m_app_integrity_isSet = true;
}

bool OAITokenPayloadExternal::is_app_integrity_Set() const{
    return m_app_integrity_isSet;
}

bool OAITokenPayloadExternal::is_app_integrity_Valid() const{
    return m_app_integrity_isValid;
}

OAIDeviceIntegrity OAITokenPayloadExternal::getDeviceIntegrity() const {
    return m_device_integrity;
}
void OAITokenPayloadExternal::setDeviceIntegrity(const OAIDeviceIntegrity &device_integrity) {
    m_device_integrity = device_integrity;
    m_device_integrity_isSet = true;
}

bool OAITokenPayloadExternal::is_device_integrity_Set() const{
    return m_device_integrity_isSet;
}

bool OAITokenPayloadExternal::is_device_integrity_Valid() const{
    return m_device_integrity_isValid;
}

OAIEnvironmentDetails OAITokenPayloadExternal::getEnvironmentDetails() const {
    return m_environment_details;
}
void OAITokenPayloadExternal::setEnvironmentDetails(const OAIEnvironmentDetails &environment_details) {
    m_environment_details = environment_details;
    m_environment_details_isSet = true;
}

bool OAITokenPayloadExternal::is_environment_details_Set() const{
    return m_environment_details_isSet;
}

bool OAITokenPayloadExternal::is_environment_details_Valid() const{
    return m_environment_details_isValid;
}

OAIRequestDetails OAITokenPayloadExternal::getRequestDetails() const {
    return m_request_details;
}
void OAITokenPayloadExternal::setRequestDetails(const OAIRequestDetails &request_details) {
    m_request_details = request_details;
    m_request_details_isSet = true;
}

bool OAITokenPayloadExternal::is_request_details_Set() const{
    return m_request_details_isSet;
}

bool OAITokenPayloadExternal::is_request_details_Valid() const{
    return m_request_details_isValid;
}

OAITestingDetails OAITokenPayloadExternal::getTestingDetails() const {
    return m_testing_details;
}
void OAITokenPayloadExternal::setTestingDetails(const OAITestingDetails &testing_details) {
    m_testing_details = testing_details;
    m_testing_details_isSet = true;
}

bool OAITokenPayloadExternal::is_testing_details_Set() const{
    return m_testing_details_isSet;
}

bool OAITokenPayloadExternal::is_testing_details_Valid() const{
    return m_testing_details_isValid;
}

bool OAITokenPayloadExternal::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_integrity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_integrity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_testing_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITokenPayloadExternal::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
