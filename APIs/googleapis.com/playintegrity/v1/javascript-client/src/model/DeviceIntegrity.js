/**
 * Google Play Integrity API
 * The Play Integrity API helps you check that you're interacting with your genuine app on a genuine Android device powered by Google Play services. The Play Integrity API has replaced SafetyNet Attestation and Android Device Verification.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RecentDeviceActivity from './RecentDeviceActivity';

/**
 * The DeviceIntegrity model module.
 * @module model/DeviceIntegrity
 * @version v1
 */
class DeviceIntegrity {
    /**
     * Constructs a new <code>DeviceIntegrity</code>.
     * Contains the device attestation information.
     * @alias module:model/DeviceIntegrity
     */
    constructor() { 
        
        DeviceIntegrity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeviceIntegrity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceIntegrity} obj Optional instance to populate.
     * @return {module:model/DeviceIntegrity} The populated <code>DeviceIntegrity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceIntegrity();

            if (data.hasOwnProperty('deviceRecognitionVerdict')) {
                obj['deviceRecognitionVerdict'] = ApiClient.convertToType(data['deviceRecognitionVerdict'], ['String']);
            }
            if (data.hasOwnProperty('recentDeviceActivity')) {
                obj['recentDeviceActivity'] = RecentDeviceActivity.constructFromObject(data['recentDeviceActivity']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceIntegrity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceIntegrity</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['deviceRecognitionVerdict'])) {
            throw new Error("Expected the field `deviceRecognitionVerdict` to be an array in the JSON data but got " + data['deviceRecognitionVerdict']);
        }
        // validate the optional field `recentDeviceActivity`
        if (data['recentDeviceActivity']) { // data not null
          RecentDeviceActivity.validateJSON(data['recentDeviceActivity']);
        }

        return true;
    }


}



/**
 * Details about the integrity of the device the app is running on.
 * @member {Array.<module:model/DeviceIntegrity.DeviceRecognitionVerdictEnum>} deviceRecognitionVerdict
 */
DeviceIntegrity.prototype['deviceRecognitionVerdict'] = undefined;

/**
 * @member {module:model/RecentDeviceActivity} recentDeviceActivity
 */
DeviceIntegrity.prototype['recentDeviceActivity'] = undefined;





/**
 * Allowed values for the <code>deviceRecognitionVerdict</code> property.
 * @enum {String}
 * @readonly
 */
DeviceIntegrity['DeviceRecognitionVerdictEnum'] = {

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN",

    /**
     * value: "MEETS_BASIC_INTEGRITY"
     * @const
     */
    "MEETS_BASIC_INTEGRITY": "MEETS_BASIC_INTEGRITY",

    /**
     * value: "MEETS_DEVICE_INTEGRITY"
     * @const
     */
    "MEETS_DEVICE_INTEGRITY": "MEETS_DEVICE_INTEGRITY",

    /**
     * value: "MEETS_STRONG_INTEGRITY"
     * @const
     */
    "MEETS_STRONG_INTEGRITY": "MEETS_STRONG_INTEGRITY",

    /**
     * value: "MEETS_VIRTUAL_INTEGRITY"
     * @const
     */
    "MEETS_VIRTUAL_INTEGRITY": "MEETS_VIRTUAL_INTEGRITY"
};



export default DeviceIntegrity;

