/**
 * AdSense Host API
 * Generates performance reports, generates ad codes, and provides publisher management capabilities for AdSense Hosts.
 *
 * The version of the OpenAPI document: v4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Report from '../model/Report';

/**
* Reports service.
* @module api/ReportsApi
* @version v4.1
*/
export default class ReportsApi {

    /**
    * Constructs a new ReportsApi. 
    * @alias module:api/ReportsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the adsensehostReportsGenerate operation.
     * @callback module:api/ReportsApi~adsensehostReportsGenerateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Report} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate an AdSense report based on the report request sent in the query parameters. Returns the result as JSON; to retrieve output in CSV format specify \"alt=csv\" as a query parameter.
     * @param {String} startDate Start of the date range to report on in \"YYYY-MM-DD\" format, inclusive.
     * @param {String} endDate End of the date range to report on in \"YYYY-MM-DD\" format, inclusive.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {Array.<String>} [dimension] Dimensions to base the report on.
     * @param {Array.<String>} [filter] Filters to be run on the report.
     * @param {String} [locale] Optional locale to use for translating report output to a local language. Defaults to \"en_US\" if not specified.
     * @param {Number} [maxResults] The maximum number of rows of report data to return.
     * @param {Array.<String>} [metric] Numeric columns to include in the report.
     * @param {Array.<String>} [sort] The name of a dimension or metric to sort the resulting report on, optionally prefixed with \"+\" to sort ascending or \"-\" to sort descending. If no prefix is specified, the column is sorted ascending.
     * @param {Number} [startIndex] Index of the first row of report data to return.
     * @param {module:api/ReportsApi~adsensehostReportsGenerateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Report}
     */
    adsensehostReportsGenerate(startDate, endDate, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling adsensehostReportsGenerate");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling adsensehostReportsGenerate");
      }

      let pathParams = {
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'startDate': startDate,
        'endDate': endDate,
        'dimension': this.apiClient.buildCollectionParam(opts['dimension'], 'multi'),
        'filter': this.apiClient.buildCollectionParam(opts['filter'], 'multi'),
        'locale': opts['locale'],
        'maxResults': opts['maxResults'],
        'metric': this.apiClient.buildCollectionParam(opts['metric'], 'multi'),
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        'startIndex': opts['startIndex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Report;
      return this.apiClient.callApi(
        '/reports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
