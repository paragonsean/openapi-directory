/**
 * AdSense Host API
 * Generates performance reports, generates ad codes, and provides publisher management capabilities for AdSense Hosts.
 *
 * The version of the OpenAPI document: v4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AssociationSession from '../model/AssociationSession';

/**
* Associationsessions service.
* @module api/AssociationsessionsApi
* @version v4.1
*/
export default class AssociationsessionsApi {

    /**
    * Constructs a new AssociationsessionsApi. 
    * @alias module:api/AssociationsessionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the adsensehostAssociationsessionsStart operation.
     * @callback module:api/AssociationsessionsApi~adsensehostAssociationsessionsStartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationSession} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an association session for initiating an association with an AdSense user.
     * @param {Array.<module:model/String>} productCode Products to associate with the user.
     * @param {String} websiteUrl The URL of the user's hosted website.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {String} [callbackUrl] The URL to redirect the user to once association is completed. It receives a token parameter that can then be used to retrieve the associated account.
     * @param {String} [userLocale] The preferred locale of the user.
     * @param {String} [websiteLocale] The locale of the user's hosted website.
     * @param {module:api/AssociationsessionsApi~adsensehostAssociationsessionsStartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationSession}
     */
    adsensehostAssociationsessionsStart(productCode, websiteUrl, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productCode' is set
      if (productCode === undefined || productCode === null) {
        throw new Error("Missing the required parameter 'productCode' when calling adsensehostAssociationsessionsStart");
      }
      // verify the required parameter 'websiteUrl' is set
      if (websiteUrl === undefined || websiteUrl === null) {
        throw new Error("Missing the required parameter 'websiteUrl' when calling adsensehostAssociationsessionsStart");
      }

      let pathParams = {
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'productCode': this.apiClient.buildCollectionParam(productCode, 'multi'),
        'websiteUrl': websiteUrl,
        'callbackUrl': opts['callbackUrl'],
        'userLocale': opts['userLocale'],
        'websiteLocale': opts['websiteLocale']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationSession;
      return this.apiClient.callApi(
        '/associationsessions/start', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adsensehostAssociationsessionsVerify operation.
     * @callback module:api/AssociationsessionsApi~adsensehostAssociationsessionsVerifyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationSession} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify an association session after the association callback returns from AdSense signup.
     * @param {String} token The token returned to the association callback URL.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/AssociationsessionsApi~adsensehostAssociationsessionsVerifyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationSession}
     */
    adsensehostAssociationsessionsVerify(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adsensehostAssociationsessionsVerify");
      }

      let pathParams = {
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationSession;
      return this.apiClient.callApi(
        '/associationsessions/verify', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
