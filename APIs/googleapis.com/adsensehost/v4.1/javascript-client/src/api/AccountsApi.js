/**
 * AdSense Host API
 * Generates performance reports, generates ad codes, and provides publisher management capabilities for AdSense Hosts.
 *
 * The version of the OpenAPI document: v4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Account from '../model/Account';
import Accounts from '../model/Accounts';
import AdClient from '../model/AdClient';
import AdClients from '../model/AdClients';
import AdCode from '../model/AdCode';
import AdUnit from '../model/AdUnit';
import AdUnits from '../model/AdUnits';
import Report from '../model/Report';

/**
* Accounts service.
* @module api/AccountsApi
* @version v4.1
*/
export default class AccountsApi {

    /**
    * Constructs a new AccountsApi. 
    * @alias module:api/AccountsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the adsensehostAccountsAdclientsGet operation.
     * @callback module:api/AccountsApi~adsensehostAccountsAdclientsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdClient} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information about one of the ad clients in the specified publisher's AdSense account.
     * @param {String} accountId Account which contains the ad client.
     * @param {String} adClientId Ad client to get.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/AccountsApi~adsensehostAccountsAdclientsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdClient}
     */
    adsensehostAccountsAdclientsGet(accountId, adClientId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adsensehostAccountsAdclientsGet");
      }
      // verify the required parameter 'adClientId' is set
      if (adClientId === undefined || adClientId === null) {
        throw new Error("Missing the required parameter 'adClientId' when calling adsensehostAccountsAdclientsGet");
      }

      let pathParams = {
        'accountId': accountId,
        'adClientId': adClientId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AdClient;
      return this.apiClient.callApi(
        '/accounts/{accountId}/adclients/{adClientId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adsensehostAccountsAdclientsList operation.
     * @callback module:api/AccountsApi~adsensehostAccountsAdclientsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdClients} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all hosted ad clients in the specified hosted account.
     * @param {String} accountId Account for which to list ad clients.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {Number} [maxResults] The maximum number of ad clients to include in the response, used for paging.
     * @param {String} [pageToken] A continuation token, used to page through ad clients. To retrieve the next page, set this parameter to the value of \"nextPageToken\" from the previous response.
     * @param {module:api/AccountsApi~adsensehostAccountsAdclientsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdClients}
     */
    adsensehostAccountsAdclientsList(accountId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adsensehostAccountsAdclientsList");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'maxResults': opts['maxResults'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AdClients;
      return this.apiClient.callApi(
        '/accounts/{accountId}/adclients', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adsensehostAccountsAdunitsDelete operation.
     * @callback module:api/AccountsApi~adsensehostAccountsAdunitsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdUnit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the specified ad unit from the specified publisher AdSense account.
     * @param {String} accountId Account which contains the ad unit.
     * @param {String} adClientId Ad client for which to get ad unit.
     * @param {String} adUnitId Ad unit to delete.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/AccountsApi~adsensehostAccountsAdunitsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdUnit}
     */
    adsensehostAccountsAdunitsDelete(accountId, adClientId, adUnitId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adsensehostAccountsAdunitsDelete");
      }
      // verify the required parameter 'adClientId' is set
      if (adClientId === undefined || adClientId === null) {
        throw new Error("Missing the required parameter 'adClientId' when calling adsensehostAccountsAdunitsDelete");
      }
      // verify the required parameter 'adUnitId' is set
      if (adUnitId === undefined || adUnitId === null) {
        throw new Error("Missing the required parameter 'adUnitId' when calling adsensehostAccountsAdunitsDelete");
      }

      let pathParams = {
        'accountId': accountId,
        'adClientId': adClientId,
        'adUnitId': adUnitId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AdUnit;
      return this.apiClient.callApi(
        '/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adsensehostAccountsAdunitsGet operation.
     * @callback module:api/AccountsApi~adsensehostAccountsAdunitsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdUnit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the specified host ad unit in this AdSense account.
     * @param {String} accountId Account which contains the ad unit.
     * @param {String} adClientId Ad client for which to get ad unit.
     * @param {String} adUnitId Ad unit to get.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/AccountsApi~adsensehostAccountsAdunitsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdUnit}
     */
    adsensehostAccountsAdunitsGet(accountId, adClientId, adUnitId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adsensehostAccountsAdunitsGet");
      }
      // verify the required parameter 'adClientId' is set
      if (adClientId === undefined || adClientId === null) {
        throw new Error("Missing the required parameter 'adClientId' when calling adsensehostAccountsAdunitsGet");
      }
      // verify the required parameter 'adUnitId' is set
      if (adUnitId === undefined || adUnitId === null) {
        throw new Error("Missing the required parameter 'adUnitId' when calling adsensehostAccountsAdunitsGet");
      }

      let pathParams = {
        'accountId': accountId,
        'adClientId': adClientId,
        'adUnitId': adUnitId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AdUnit;
      return this.apiClient.callApi(
        '/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adsensehostAccountsAdunitsGetAdCode operation.
     * @callback module:api/AccountsApi~adsensehostAccountsAdunitsGetAdCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdCode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get ad code for the specified ad unit, attaching the specified host custom channels.
     * @param {String} accountId Account which contains the ad client.
     * @param {String} adClientId Ad client with contains the ad unit.
     * @param {String} adUnitId Ad unit to get the code for.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {Array.<String>} [hostCustomChannelId] Host custom channel to attach to the ad code.
     * @param {module:api/AccountsApi~adsensehostAccountsAdunitsGetAdCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdCode}
     */
    adsensehostAccountsAdunitsGetAdCode(accountId, adClientId, adUnitId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adsensehostAccountsAdunitsGetAdCode");
      }
      // verify the required parameter 'adClientId' is set
      if (adClientId === undefined || adClientId === null) {
        throw new Error("Missing the required parameter 'adClientId' when calling adsensehostAccountsAdunitsGetAdCode");
      }
      // verify the required parameter 'adUnitId' is set
      if (adUnitId === undefined || adUnitId === null) {
        throw new Error("Missing the required parameter 'adUnitId' when calling adsensehostAccountsAdunitsGetAdCode");
      }

      let pathParams = {
        'accountId': accountId,
        'adClientId': adClientId,
        'adUnitId': adUnitId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'hostCustomChannelId': this.apiClient.buildCollectionParam(opts['hostCustomChannelId'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AdCode;
      return this.apiClient.callApi(
        '/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}/adcode', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adsensehostAccountsAdunitsInsert operation.
     * @callback module:api/AccountsApi~adsensehostAccountsAdunitsInsertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdUnit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert the supplied ad unit into the specified publisher AdSense account.
     * @param {String} accountId Account which will contain the ad unit.
     * @param {String} adClientId Ad client into which to insert the ad unit.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/AdUnit} [adUnit] 
     * @param {module:api/AccountsApi~adsensehostAccountsAdunitsInsertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdUnit}
     */
    adsensehostAccountsAdunitsInsert(accountId, adClientId, opts, callback) {
      opts = opts || {};
      let postBody = opts['adUnit'];
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adsensehostAccountsAdunitsInsert");
      }
      // verify the required parameter 'adClientId' is set
      if (adClientId === undefined || adClientId === null) {
        throw new Error("Missing the required parameter 'adClientId' when calling adsensehostAccountsAdunitsInsert");
      }

      let pathParams = {
        'accountId': accountId,
        'adClientId': adClientId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AdUnit;
      return this.apiClient.callApi(
        '/accounts/{accountId}/adclients/{adClientId}/adunits', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adsensehostAccountsAdunitsList operation.
     * @callback module:api/AccountsApi~adsensehostAccountsAdunitsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdUnits} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all ad units in the specified publisher's AdSense account.
     * @param {String} accountId Account which contains the ad client.
     * @param {String} adClientId Ad client for which to list ad units.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {Boolean} [includeInactive] Whether to include inactive ad units. Default: true.
     * @param {Number} [maxResults] The maximum number of ad units to include in the response, used for paging.
     * @param {String} [pageToken] A continuation token, used to page through ad units. To retrieve the next page, set this parameter to the value of \"nextPageToken\" from the previous response.
     * @param {module:api/AccountsApi~adsensehostAccountsAdunitsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdUnits}
     */
    adsensehostAccountsAdunitsList(accountId, adClientId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adsensehostAccountsAdunitsList");
      }
      // verify the required parameter 'adClientId' is set
      if (adClientId === undefined || adClientId === null) {
        throw new Error("Missing the required parameter 'adClientId' when calling adsensehostAccountsAdunitsList");
      }

      let pathParams = {
        'accountId': accountId,
        'adClientId': adClientId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'includeInactive': opts['includeInactive'],
        'maxResults': opts['maxResults'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AdUnits;
      return this.apiClient.callApi(
        '/accounts/{accountId}/adclients/{adClientId}/adunits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adsensehostAccountsAdunitsPatch operation.
     * @callback module:api/AccountsApi~adsensehostAccountsAdunitsPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdUnit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the supplied ad unit in the specified publisher AdSense account. This method supports patch semantics.
     * @param {String} accountId Account which contains the ad client.
     * @param {String} adClientId Ad client which contains the ad unit.
     * @param {String} adUnitId Ad unit to get.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/AdUnit} [adUnit] 
     * @param {module:api/AccountsApi~adsensehostAccountsAdunitsPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdUnit}
     */
    adsensehostAccountsAdunitsPatch(accountId, adClientId, adUnitId, opts, callback) {
      opts = opts || {};
      let postBody = opts['adUnit'];
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adsensehostAccountsAdunitsPatch");
      }
      // verify the required parameter 'adClientId' is set
      if (adClientId === undefined || adClientId === null) {
        throw new Error("Missing the required parameter 'adClientId' when calling adsensehostAccountsAdunitsPatch");
      }
      // verify the required parameter 'adUnitId' is set
      if (adUnitId === undefined || adUnitId === null) {
        throw new Error("Missing the required parameter 'adUnitId' when calling adsensehostAccountsAdunitsPatch");
      }

      let pathParams = {
        'accountId': accountId,
        'adClientId': adClientId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'adUnitId': adUnitId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AdUnit;
      return this.apiClient.callApi(
        '/accounts/{accountId}/adclients/{adClientId}/adunits', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adsensehostAccountsAdunitsUpdate operation.
     * @callback module:api/AccountsApi~adsensehostAccountsAdunitsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdUnit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the supplied ad unit in the specified publisher AdSense account.
     * @param {String} accountId Account which contains the ad client.
     * @param {String} adClientId Ad client which contains the ad unit.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/AdUnit} [adUnit] 
     * @param {module:api/AccountsApi~adsensehostAccountsAdunitsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdUnit}
     */
    adsensehostAccountsAdunitsUpdate(accountId, adClientId, opts, callback) {
      opts = opts || {};
      let postBody = opts['adUnit'];
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adsensehostAccountsAdunitsUpdate");
      }
      // verify the required parameter 'adClientId' is set
      if (adClientId === undefined || adClientId === null) {
        throw new Error("Missing the required parameter 'adClientId' when calling adsensehostAccountsAdunitsUpdate");
      }

      let pathParams = {
        'accountId': accountId,
        'adClientId': adClientId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AdUnit;
      return this.apiClient.callApi(
        '/accounts/{accountId}/adclients/{adClientId}/adunits', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adsensehostAccountsGet operation.
     * @callback module:api/AccountsApi~adsensehostAccountsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information about the selected associated AdSense account.
     * @param {String} accountId Account to get information about.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/AccountsApi~adsensehostAccountsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Account}
     */
    adsensehostAccountsGet(accountId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adsensehostAccountsGet");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Account;
      return this.apiClient.callApi(
        '/accounts/{accountId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adsensehostAccountsList operation.
     * @callback module:api/AccountsApi~adsensehostAccountsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Accounts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List hosted accounts associated with this AdSense account by ad client id.
     * @param {Array.<String>} filterAdClientId Ad clients to list accounts for.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/AccountsApi~adsensehostAccountsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Accounts}
     */
    adsensehostAccountsList(filterAdClientId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'filterAdClientId' is set
      if (filterAdClientId === undefined || filterAdClientId === null) {
        throw new Error("Missing the required parameter 'filterAdClientId' when calling adsensehostAccountsList");
      }

      let pathParams = {
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'filterAdClientId': this.apiClient.buildCollectionParam(filterAdClientId, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Accounts;
      return this.apiClient.callApi(
        '/accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adsensehostAccountsReportsGenerate operation.
     * @callback module:api/AccountsApi~adsensehostAccountsReportsGenerateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Report} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate an AdSense report based on the report request sent in the query parameters. Returns the result as JSON; to retrieve output in CSV format specify \"alt=csv\" as a query parameter.
     * @param {String} accountId Hosted account upon which to report.
     * @param {String} startDate Start of the date range to report on in \"YYYY-MM-DD\" format, inclusive.
     * @param {String} endDate End of the date range to report on in \"YYYY-MM-DD\" format, inclusive.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {Array.<String>} [dimension] Dimensions to base the report on.
     * @param {Array.<String>} [filter] Filters to be run on the report.
     * @param {String} [locale] Optional locale to use for translating report output to a local language. Defaults to \"en_US\" if not specified.
     * @param {Number} [maxResults] The maximum number of rows of report data to return.
     * @param {Array.<String>} [metric] Numeric columns to include in the report.
     * @param {Array.<String>} [sort] The name of a dimension or metric to sort the resulting report on, optionally prefixed with \"+\" to sort ascending or \"-\" to sort descending. If no prefix is specified, the column is sorted ascending.
     * @param {Number} [startIndex] Index of the first row of report data to return.
     * @param {module:api/AccountsApi~adsensehostAccountsReportsGenerateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Report}
     */
    adsensehostAccountsReportsGenerate(accountId, startDate, endDate, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adsensehostAccountsReportsGenerate");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling adsensehostAccountsReportsGenerate");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling adsensehostAccountsReportsGenerate");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'startDate': startDate,
        'endDate': endDate,
        'dimension': this.apiClient.buildCollectionParam(opts['dimension'], 'multi'),
        'filter': this.apiClient.buildCollectionParam(opts['filter'], 'multi'),
        'locale': opts['locale'],
        'maxResults': opts['maxResults'],
        'metric': this.apiClient.buildCollectionParam(opts['metric'], 'multi'),
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        'startIndex': opts['startIndex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Report;
      return this.apiClient.callApi(
        '/accounts/{accountId}/reports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
