/**
 * AdSense Host API
 * Generates performance reports, generates ad codes, and provides publisher management capabilities for AdSense Hosts.
 *
 * The version of the OpenAPI document: v4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AssociationSession model module.
 * @module model/AssociationSession
 * @version v4.1
 */
class AssociationSession {
    /**
     * Constructs a new <code>AssociationSession</code>.
     * @alias module:model/AssociationSession
     */
    constructor() { 
        
        AssociationSession.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'adsensehost#associationSession';
    }

    /**
     * Constructs a <code>AssociationSession</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AssociationSession} obj Optional instance to populate.
     * @return {module:model/AssociationSession} The populated <code>AssociationSession</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AssociationSession();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('productCodes')) {
                obj['productCodes'] = ApiClient.convertToType(data['productCodes'], ['String']);
            }
            if (data.hasOwnProperty('redirectUrl')) {
                obj['redirectUrl'] = ApiClient.convertToType(data['redirectUrl'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('userLocale')) {
                obj['userLocale'] = ApiClient.convertToType(data['userLocale'], 'String');
            }
            if (data.hasOwnProperty('websiteLocale')) {
                obj['websiteLocale'] = ApiClient.convertToType(data['websiteLocale'], 'String');
            }
            if (data.hasOwnProperty('websiteUrl')) {
                obj['websiteUrl'] = ApiClient.convertToType(data['websiteUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AssociationSession</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AssociationSession</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['productCodes'])) {
            throw new Error("Expected the field `productCodes` to be an array in the JSON data but got " + data['productCodes']);
        }
        // ensure the json data is a string
        if (data['redirectUrl'] && !(typeof data['redirectUrl'] === 'string' || data['redirectUrl'] instanceof String)) {
            throw new Error("Expected the field `redirectUrl` to be a primitive type in the JSON string but got " + data['redirectUrl']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['userLocale'] && !(typeof data['userLocale'] === 'string' || data['userLocale'] instanceof String)) {
            throw new Error("Expected the field `userLocale` to be a primitive type in the JSON string but got " + data['userLocale']);
        }
        // ensure the json data is a string
        if (data['websiteLocale'] && !(typeof data['websiteLocale'] === 'string' || data['websiteLocale'] instanceof String)) {
            throw new Error("Expected the field `websiteLocale` to be a primitive type in the JSON string but got " + data['websiteLocale']);
        }
        // ensure the json data is a string
        if (data['websiteUrl'] && !(typeof data['websiteUrl'] === 'string' || data['websiteUrl'] instanceof String)) {
            throw new Error("Expected the field `websiteUrl` to be a primitive type in the JSON string but got " + data['websiteUrl']);
        }

        return true;
    }


}



/**
 * Hosted account id of the associated publisher after association. Present if status is ACCEPTED.
 * @member {String} accountId
 */
AssociationSession.prototype['accountId'] = undefined;

/**
 * Unique identifier of this association session.
 * @member {String} id
 */
AssociationSession.prototype['id'] = undefined;

/**
 * Kind of resource this is, in this case adsensehost#associationSession.
 * @member {String} kind
 * @default 'adsensehost#associationSession'
 */
AssociationSession.prototype['kind'] = 'adsensehost#associationSession';

/**
 * The products to associate with the user. Options: AFC, AFG, AFV, AFS (deprecated), AFMC (deprecated)
 * @member {Array.<String>} productCodes
 */
AssociationSession.prototype['productCodes'] = undefined;

/**
 * Redirect URL of this association session. Used to redirect users into the AdSense association flow.
 * @member {String} redirectUrl
 */
AssociationSession.prototype['redirectUrl'] = undefined;

/**
 * Status of the completed association, available once the association callback token has been verified. One of ACCEPTED, REJECTED, or ERROR.
 * @member {String} status
 */
AssociationSession.prototype['status'] = undefined;

/**
 * The preferred locale of the user themselves when going through the AdSense association flow.
 * @member {String} userLocale
 */
AssociationSession.prototype['userLocale'] = undefined;

/**
 * The locale of the user's hosted website.
 * @member {String} websiteLocale
 */
AssociationSession.prototype['websiteLocale'] = undefined;

/**
 * The URL of the user's hosted website.
 * @member {String} websiteUrl
 */
AssociationSession.prototype['websiteUrl'] = undefined;






export default AssociationSession;

