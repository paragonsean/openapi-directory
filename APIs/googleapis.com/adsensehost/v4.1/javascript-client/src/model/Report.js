/**
 * AdSense Host API
 * Generates performance reports, generates ad codes, and provides publisher management capabilities for AdSense Hosts.
 *
 * The version of the OpenAPI document: v4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReportHeadersInner from './ReportHeadersInner';

/**
 * The Report model module.
 * @module model/Report
 * @version v4.1
 */
class Report {
    /**
     * Constructs a new <code>Report</code>.
     * @alias module:model/Report
     */
    constructor() { 
        
        Report.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'adsensehost#report';
    }

    /**
     * Constructs a <code>Report</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Report} obj Optional instance to populate.
     * @return {module:model/Report} The populated <code>Report</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Report();

            if (data.hasOwnProperty('averages')) {
                obj['averages'] = ApiClient.convertToType(data['averages'], ['String']);
            }
            if (data.hasOwnProperty('headers')) {
                obj['headers'] = ApiClient.convertToType(data['headers'], [ReportHeadersInner]);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('rows')) {
                obj['rows'] = ApiClient.convertToType(data['rows'], [['String']]);
            }
            if (data.hasOwnProperty('totalMatchedRows')) {
                obj['totalMatchedRows'] = ApiClient.convertToType(data['totalMatchedRows'], 'String');
            }
            if (data.hasOwnProperty('totals')) {
                obj['totals'] = ApiClient.convertToType(data['totals'], ['String']);
            }
            if (data.hasOwnProperty('warnings')) {
                obj['warnings'] = ApiClient.convertToType(data['warnings'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Report</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Report</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['averages'])) {
            throw new Error("Expected the field `averages` to be an array in the JSON data but got " + data['averages']);
        }
        if (data['headers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['headers'])) {
                throw new Error("Expected the field `headers` to be an array in the JSON data but got " + data['headers']);
            }
            // validate the optional field `headers` (array)
            for (const item of data['headers']) {
                ReportHeadersInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['rows'])) {
            throw new Error("Expected the field `rows` to be an array in the JSON data but got " + data['rows']);
        }
        // ensure the json data is a string
        if (data['totalMatchedRows'] && !(typeof data['totalMatchedRows'] === 'string' || data['totalMatchedRows'] instanceof String)) {
            throw new Error("Expected the field `totalMatchedRows` to be a primitive type in the JSON string but got " + data['totalMatchedRows']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['totals'])) {
            throw new Error("Expected the field `totals` to be an array in the JSON data but got " + data['totals']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['warnings'])) {
            throw new Error("Expected the field `warnings` to be an array in the JSON data but got " + data['warnings']);
        }

        return true;
    }


}



/**
 * The averages of the report. This is the same length as any other row in the report; cells corresponding to dimension columns are empty.
 * @member {Array.<String>} averages
 */
Report.prototype['averages'] = undefined;

/**
 * The header information of the columns requested in the report. This is a list of headers; one for each dimension in the request, followed by one for each metric in the request.
 * @member {Array.<module:model/ReportHeadersInner>} headers
 */
Report.prototype['headers'] = undefined;

/**
 * Kind this is, in this case adsensehost#report.
 * @member {String} kind
 * @default 'adsensehost#report'
 */
Report.prototype['kind'] = 'adsensehost#report';

/**
 * The output rows of the report. Each row is a list of cells; one for each dimension in the request, followed by one for each metric in the request. The dimension cells contain strings, and the metric cells contain numbers.
 * @member {Array.<Array.<String>>} rows
 */
Report.prototype['rows'] = undefined;

/**
 * The total number of rows matched by the report request. Fewer rows may be returned in the response due to being limited by the row count requested or the report row limit.
 * @member {String} totalMatchedRows
 */
Report.prototype['totalMatchedRows'] = undefined;

/**
 * The totals of the report. This is the same length as any other row in the report; cells corresponding to dimension columns are empty.
 * @member {Array.<String>} totals
 */
Report.prototype['totals'] = undefined;

/**
 * Any warnings associated with generation of the report.
 * @member {Array.<String>} warnings
 */
Report.prototype['warnings'] = undefined;






export default Report;

