/**
 * AdSense Host API
 * Generates performance reports, generates ad codes, and provides publisher management capabilities for AdSense Hosts.
 *
 * The version of the OpenAPI document: v4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssociationSession.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssociationSession::OAIAssociationSession(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssociationSession::OAIAssociationSession() {
    this->initializeModel();
}

OAIAssociationSession::~OAIAssociationSession() {}

void OAIAssociationSession::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_product_codes_isSet = false;
    m_product_codes_isValid = false;

    m_redirect_url_isSet = false;
    m_redirect_url_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_user_locale_isSet = false;
    m_user_locale_isValid = false;

    m_website_locale_isSet = false;
    m_website_locale_isValid = false;

    m_website_url_isSet = false;
    m_website_url_isValid = false;
}

void OAIAssociationSession::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssociationSession::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_product_codes_isValid = ::OpenAPI::fromJsonValue(m_product_codes, json[QString("productCodes")]);
    m_product_codes_isSet = !json[QString("productCodes")].isNull() && m_product_codes_isValid;

    m_redirect_url_isValid = ::OpenAPI::fromJsonValue(m_redirect_url, json[QString("redirectUrl")]);
    m_redirect_url_isSet = !json[QString("redirectUrl")].isNull() && m_redirect_url_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_user_locale_isValid = ::OpenAPI::fromJsonValue(m_user_locale, json[QString("userLocale")]);
    m_user_locale_isSet = !json[QString("userLocale")].isNull() && m_user_locale_isValid;

    m_website_locale_isValid = ::OpenAPI::fromJsonValue(m_website_locale, json[QString("websiteLocale")]);
    m_website_locale_isSet = !json[QString("websiteLocale")].isNull() && m_website_locale_isValid;

    m_website_url_isValid = ::OpenAPI::fromJsonValue(m_website_url, json[QString("websiteUrl")]);
    m_website_url_isSet = !json[QString("websiteUrl")].isNull() && m_website_url_isValid;
}

QString OAIAssociationSession::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssociationSession::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_product_codes.size() > 0) {
        obj.insert(QString("productCodes"), ::OpenAPI::toJsonValue(m_product_codes));
    }
    if (m_redirect_url_isSet) {
        obj.insert(QString("redirectUrl"), ::OpenAPI::toJsonValue(m_redirect_url));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_user_locale_isSet) {
        obj.insert(QString("userLocale"), ::OpenAPI::toJsonValue(m_user_locale));
    }
    if (m_website_locale_isSet) {
        obj.insert(QString("websiteLocale"), ::OpenAPI::toJsonValue(m_website_locale));
    }
    if (m_website_url_isSet) {
        obj.insert(QString("websiteUrl"), ::OpenAPI::toJsonValue(m_website_url));
    }
    return obj;
}

QString OAIAssociationSession::getAccountId() const {
    return m_account_id;
}
void OAIAssociationSession::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIAssociationSession::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIAssociationSession::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIAssociationSession::getId() const {
    return m_id;
}
void OAIAssociationSession::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAssociationSession::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAssociationSession::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAssociationSession::getKind() const {
    return m_kind;
}
void OAIAssociationSession::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIAssociationSession::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIAssociationSession::is_kind_Valid() const{
    return m_kind_isValid;
}

QList<QString> OAIAssociationSession::getProductCodes() const {
    return m_product_codes;
}
void OAIAssociationSession::setProductCodes(const QList<QString> &product_codes) {
    m_product_codes = product_codes;
    m_product_codes_isSet = true;
}

bool OAIAssociationSession::is_product_codes_Set() const{
    return m_product_codes_isSet;
}

bool OAIAssociationSession::is_product_codes_Valid() const{
    return m_product_codes_isValid;
}

QString OAIAssociationSession::getRedirectUrl() const {
    return m_redirect_url;
}
void OAIAssociationSession::setRedirectUrl(const QString &redirect_url) {
    m_redirect_url = redirect_url;
    m_redirect_url_isSet = true;
}

bool OAIAssociationSession::is_redirect_url_Set() const{
    return m_redirect_url_isSet;
}

bool OAIAssociationSession::is_redirect_url_Valid() const{
    return m_redirect_url_isValid;
}

QString OAIAssociationSession::getStatus() const {
    return m_status;
}
void OAIAssociationSession::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAssociationSession::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAssociationSession::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIAssociationSession::getUserLocale() const {
    return m_user_locale;
}
void OAIAssociationSession::setUserLocale(const QString &user_locale) {
    m_user_locale = user_locale;
    m_user_locale_isSet = true;
}

bool OAIAssociationSession::is_user_locale_Set() const{
    return m_user_locale_isSet;
}

bool OAIAssociationSession::is_user_locale_Valid() const{
    return m_user_locale_isValid;
}

QString OAIAssociationSession::getWebsiteLocale() const {
    return m_website_locale;
}
void OAIAssociationSession::setWebsiteLocale(const QString &website_locale) {
    m_website_locale = website_locale;
    m_website_locale_isSet = true;
}

bool OAIAssociationSession::is_website_locale_Set() const{
    return m_website_locale_isSet;
}

bool OAIAssociationSession::is_website_locale_Valid() const{
    return m_website_locale_isValid;
}

QString OAIAssociationSession::getWebsiteUrl() const {
    return m_website_url;
}
void OAIAssociationSession::setWebsiteUrl(const QString &website_url) {
    m_website_url = website_url;
    m_website_url_isSet = true;
}

bool OAIAssociationSession::is_website_url_Set() const{
    return m_website_url_isSet;
}

bool OAIAssociationSession::is_website_url_Valid() const{
    return m_website_url_isValid;
}

bool OAIAssociationSession::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssociationSession::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
