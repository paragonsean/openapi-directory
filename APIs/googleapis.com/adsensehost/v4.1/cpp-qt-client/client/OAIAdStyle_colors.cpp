/**
 * AdSense Host API
 * Generates performance reports, generates ad codes, and provides publisher management capabilities for AdSense Hosts.
 *
 * The version of the OpenAPI document: v4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdStyle_colors.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdStyle_colors::OAIAdStyle_colors(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdStyle_colors::OAIAdStyle_colors() {
    this->initializeModel();
}

OAIAdStyle_colors::~OAIAdStyle_colors() {}

void OAIAdStyle_colors::initializeModel() {

    m_background_isSet = false;
    m_background_isValid = false;

    m_border_isSet = false;
    m_border_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIAdStyle_colors::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdStyle_colors::fromJsonObject(QJsonObject json) {

    m_background_isValid = ::OpenAPI::fromJsonValue(m_background, json[QString("background")]);
    m_background_isSet = !json[QString("background")].isNull() && m_background_isValid;

    m_border_isValid = ::OpenAPI::fromJsonValue(m_border, json[QString("border")]);
    m_border_isSet = !json[QString("border")].isNull() && m_border_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIAdStyle_colors::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdStyle_colors::asJsonObject() const {
    QJsonObject obj;
    if (m_background_isSet) {
        obj.insert(QString("background"), ::OpenAPI::toJsonValue(m_background));
    }
    if (m_border_isSet) {
        obj.insert(QString("border"), ::OpenAPI::toJsonValue(m_border));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIAdStyle_colors::getBackground() const {
    return m_background;
}
void OAIAdStyle_colors::setBackground(const QString &background) {
    m_background = background;
    m_background_isSet = true;
}

bool OAIAdStyle_colors::is_background_Set() const{
    return m_background_isSet;
}

bool OAIAdStyle_colors::is_background_Valid() const{
    return m_background_isValid;
}

QString OAIAdStyle_colors::getBorder() const {
    return m_border;
}
void OAIAdStyle_colors::setBorder(const QString &border) {
    m_border = border;
    m_border_isSet = true;
}

bool OAIAdStyle_colors::is_border_Set() const{
    return m_border_isSet;
}

bool OAIAdStyle_colors::is_border_Valid() const{
    return m_border_isValid;
}

QString OAIAdStyle_colors::getText() const {
    return m_text;
}
void OAIAdStyle_colors::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIAdStyle_colors::is_text_Set() const{
    return m_text_isSet;
}

bool OAIAdStyle_colors::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIAdStyle_colors::getTitle() const {
    return m_title;
}
void OAIAdStyle_colors::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIAdStyle_colors::is_title_Set() const{
    return m_title_isSet;
}

bool OAIAdStyle_colors::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIAdStyle_colors::getUrl() const {
    return m_url;
}
void OAIAdStyle_colors::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIAdStyle_colors::is_url_Set() const{
    return m_url_isSet;
}

bool OAIAdStyle_colors::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIAdStyle_colors::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_background_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_border_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdStyle_colors::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
