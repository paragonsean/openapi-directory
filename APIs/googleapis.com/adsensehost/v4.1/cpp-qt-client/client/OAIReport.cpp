/**
 * AdSense Host API
 * Generates performance reports, generates ad codes, and provides publisher management capabilities for AdSense Hosts.
 *
 * The version of the OpenAPI document: v4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReport::OAIReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReport::OAIReport() {
    this->initializeModel();
}

OAIReport::~OAIReport() {}

void OAIReport::initializeModel() {

    m_averages_isSet = false;
    m_averages_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_rows_isSet = false;
    m_rows_isValid = false;

    m_total_matched_rows_isSet = false;
    m_total_matched_rows_isValid = false;

    m_totals_isSet = false;
    m_totals_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;
}

void OAIReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReport::fromJsonObject(QJsonObject json) {

    m_averages_isValid = ::OpenAPI::fromJsonValue(m_averages, json[QString("averages")]);
    m_averages_isSet = !json[QString("averages")].isNull() && m_averages_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    if(json["rows"].isArray()){
        auto arr = json["rows"].toArray();
        m_rows_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<QString> item;
                m_rows_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_rows_isSet = !jval.isNull() && m_rows_isValid;
                m_rows.push_back(item);
            }
        }
    }

    m_total_matched_rows_isValid = ::OpenAPI::fromJsonValue(m_total_matched_rows, json[QString("totalMatchedRows")]);
    m_total_matched_rows_isSet = !json[QString("totalMatchedRows")].isNull() && m_total_matched_rows_isValid;

    m_totals_isValid = ::OpenAPI::fromJsonValue(m_totals, json[QString("totals")]);
    m_totals_isSet = !json[QString("totals")].isNull() && m_totals_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("warnings")]);
    m_warnings_isSet = !json[QString("warnings")].isNull() && m_warnings_isValid;
}

QString OAIReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReport::asJsonObject() const {
    QJsonObject obj;
    if (m_averages.size() > 0) {
        obj.insert(QString("averages"), ::OpenAPI::toJsonValue(m_averages));
    }
    if (m_headers.size() > 0) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_rows.size() > 0) {
        
        obj.insert(QString("rows"), toJsonValue(m_rows));
    }
    if (m_total_matched_rows_isSet) {
        obj.insert(QString("totalMatchedRows"), ::OpenAPI::toJsonValue(m_total_matched_rows));
    }
    if (m_totals.size() > 0) {
        obj.insert(QString("totals"), ::OpenAPI::toJsonValue(m_totals));
    }
    if (m_warnings.size() > 0) {
        obj.insert(QString("warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    return obj;
}

QList<QString> OAIReport::getAverages() const {
    return m_averages;
}
void OAIReport::setAverages(const QList<QString> &averages) {
    m_averages = averages;
    m_averages_isSet = true;
}

bool OAIReport::is_averages_Set() const{
    return m_averages_isSet;
}

bool OAIReport::is_averages_Valid() const{
    return m_averages_isValid;
}

QList<OAIReport_headers_inner> OAIReport::getHeaders() const {
    return m_headers;
}
void OAIReport::setHeaders(const QList<OAIReport_headers_inner> &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIReport::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIReport::is_headers_Valid() const{
    return m_headers_isValid;
}

QString OAIReport::getKind() const {
    return m_kind;
}
void OAIReport::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIReport::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIReport::is_kind_Valid() const{
    return m_kind_isValid;
}

QList<QList<QString>> OAIReport::getRows() const {
    return m_rows;
}
void OAIReport::setRows(const QList<QList<QString>> &rows) {
    m_rows = rows;
    m_rows_isSet = true;
}

bool OAIReport::is_rows_Set() const{
    return m_rows_isSet;
}

bool OAIReport::is_rows_Valid() const{
    return m_rows_isValid;
}

QString OAIReport::getTotalMatchedRows() const {
    return m_total_matched_rows;
}
void OAIReport::setTotalMatchedRows(const QString &total_matched_rows) {
    m_total_matched_rows = total_matched_rows;
    m_total_matched_rows_isSet = true;
}

bool OAIReport::is_total_matched_rows_Set() const{
    return m_total_matched_rows_isSet;
}

bool OAIReport::is_total_matched_rows_Valid() const{
    return m_total_matched_rows_isValid;
}

QList<QString> OAIReport::getTotals() const {
    return m_totals;
}
void OAIReport::setTotals(const QList<QString> &totals) {
    m_totals = totals;
    m_totals_isSet = true;
}

bool OAIReport::is_totals_Set() const{
    return m_totals_isSet;
}

bool OAIReport::is_totals_Valid() const{
    return m_totals_isValid;
}

QList<QString> OAIReport::getWarnings() const {
    return m_warnings;
}
void OAIReport::setWarnings(const QList<QString> &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAIReport::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAIReport::is_warnings_Valid() const{
    return m_warnings_isValid;
}

bool OAIReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_averages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rows.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_matched_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_totals.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
