/**
 * AdSense Host API
 * Generates performance reports, generates ad codes, and provides publisher management capabilities for AdSense Hosts.
 *
 * The version of the OpenAPI document: v4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdStyle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdStyle::OAIAdStyle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdStyle::OAIAdStyle() {
    this->initializeModel();
}

OAIAdStyle::~OAIAdStyle() {}

void OAIAdStyle::initializeModel() {

    m_colors_isSet = false;
    m_colors_isValid = false;

    m_corners_isSet = false;
    m_corners_isValid = false;

    m_font_isSet = false;
    m_font_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;
}

void OAIAdStyle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdStyle::fromJsonObject(QJsonObject json) {

    m_colors_isValid = ::OpenAPI::fromJsonValue(m_colors, json[QString("colors")]);
    m_colors_isSet = !json[QString("colors")].isNull() && m_colors_isValid;

    m_corners_isValid = ::OpenAPI::fromJsonValue(m_corners, json[QString("corners")]);
    m_corners_isSet = !json[QString("corners")].isNull() && m_corners_isValid;

    m_font_isValid = ::OpenAPI::fromJsonValue(m_font, json[QString("font")]);
    m_font_isSet = !json[QString("font")].isNull() && m_font_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;
}

QString OAIAdStyle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdStyle::asJsonObject() const {
    QJsonObject obj;
    if (m_colors.isSet()) {
        obj.insert(QString("colors"), ::OpenAPI::toJsonValue(m_colors));
    }
    if (m_corners_isSet) {
        obj.insert(QString("corners"), ::OpenAPI::toJsonValue(m_corners));
    }
    if (m_font.isSet()) {
        obj.insert(QString("font"), ::OpenAPI::toJsonValue(m_font));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    return obj;
}

OAIAdStyle_colors OAIAdStyle::getColors() const {
    return m_colors;
}
void OAIAdStyle::setColors(const OAIAdStyle_colors &colors) {
    m_colors = colors;
    m_colors_isSet = true;
}

bool OAIAdStyle::is_colors_Set() const{
    return m_colors_isSet;
}

bool OAIAdStyle::is_colors_Valid() const{
    return m_colors_isValid;
}

QString OAIAdStyle::getCorners() const {
    return m_corners;
}
void OAIAdStyle::setCorners(const QString &corners) {
    m_corners = corners;
    m_corners_isSet = true;
}

bool OAIAdStyle::is_corners_Set() const{
    return m_corners_isSet;
}

bool OAIAdStyle::is_corners_Valid() const{
    return m_corners_isValid;
}

OAIAdStyle_font OAIAdStyle::getFont() const {
    return m_font;
}
void OAIAdStyle::setFont(const OAIAdStyle_font &font) {
    m_font = font;
    m_font_isSet = true;
}

bool OAIAdStyle::is_font_Set() const{
    return m_font_isSet;
}

bool OAIAdStyle::is_font_Valid() const{
    return m_font_isValid;
}

QString OAIAdStyle::getKind() const {
    return m_kind;
}
void OAIAdStyle::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIAdStyle::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIAdStyle::is_kind_Valid() const{
    return m_kind_isValid;
}

bool OAIAdStyle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_colors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_corners_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_font.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdStyle::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
