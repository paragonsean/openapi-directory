/**
 * AdSense Host API
 * Generates performance reports, generates ad codes, and provides publisher management capabilities for AdSense Hosts.
 *
 * The version of the OpenAPI document: v4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdUnit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdUnit::OAIAdUnit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdUnit::OAIAdUnit() {
    this->initializeModel();
}

OAIAdUnit::~OAIAdUnit() {}

void OAIAdUnit::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_content_ads_settings_isSet = false;
    m_content_ads_settings_isValid = false;

    m_custom_style_isSet = false;
    m_custom_style_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_mobile_content_ads_settings_isSet = false;
    m_mobile_content_ads_settings_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIAdUnit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdUnit::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_content_ads_settings_isValid = ::OpenAPI::fromJsonValue(m_content_ads_settings, json[QString("contentAdsSettings")]);
    m_content_ads_settings_isSet = !json[QString("contentAdsSettings")].isNull() && m_content_ads_settings_isValid;

    m_custom_style_isValid = ::OpenAPI::fromJsonValue(m_custom_style, json[QString("customStyle")]);
    m_custom_style_isSet = !json[QString("customStyle")].isNull() && m_custom_style_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_mobile_content_ads_settings_isValid = ::OpenAPI::fromJsonValue(m_mobile_content_ads_settings, json[QString("mobileContentAdsSettings")]);
    m_mobile_content_ads_settings_isSet = !json[QString("mobileContentAdsSettings")].isNull() && m_mobile_content_ads_settings_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIAdUnit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdUnit::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_content_ads_settings.isSet()) {
        obj.insert(QString("contentAdsSettings"), ::OpenAPI::toJsonValue(m_content_ads_settings));
    }
    if (m_custom_style.isSet()) {
        obj.insert(QString("customStyle"), ::OpenAPI::toJsonValue(m_custom_style));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_mobile_content_ads_settings.isSet()) {
        obj.insert(QString("mobileContentAdsSettings"), ::OpenAPI::toJsonValue(m_mobile_content_ads_settings));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIAdUnit::getCode() const {
    return m_code;
}
void OAIAdUnit::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIAdUnit::is_code_Set() const{
    return m_code_isSet;
}

bool OAIAdUnit::is_code_Valid() const{
    return m_code_isValid;
}

OAIAdUnit_contentAdsSettings OAIAdUnit::getContentAdsSettings() const {
    return m_content_ads_settings;
}
void OAIAdUnit::setContentAdsSettings(const OAIAdUnit_contentAdsSettings &content_ads_settings) {
    m_content_ads_settings = content_ads_settings;
    m_content_ads_settings_isSet = true;
}

bool OAIAdUnit::is_content_ads_settings_Set() const{
    return m_content_ads_settings_isSet;
}

bool OAIAdUnit::is_content_ads_settings_Valid() const{
    return m_content_ads_settings_isValid;
}

OAIAdStyle OAIAdUnit::getCustomStyle() const {
    return m_custom_style;
}
void OAIAdUnit::setCustomStyle(const OAIAdStyle &custom_style) {
    m_custom_style = custom_style;
    m_custom_style_isSet = true;
}

bool OAIAdUnit::is_custom_style_Set() const{
    return m_custom_style_isSet;
}

bool OAIAdUnit::is_custom_style_Valid() const{
    return m_custom_style_isValid;
}

QString OAIAdUnit::getId() const {
    return m_id;
}
void OAIAdUnit::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAdUnit::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAdUnit::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAdUnit::getKind() const {
    return m_kind;
}
void OAIAdUnit::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIAdUnit::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIAdUnit::is_kind_Valid() const{
    return m_kind_isValid;
}

OAIAdUnit_mobileContentAdsSettings OAIAdUnit::getMobileContentAdsSettings() const {
    return m_mobile_content_ads_settings;
}
void OAIAdUnit::setMobileContentAdsSettings(const OAIAdUnit_mobileContentAdsSettings &mobile_content_ads_settings) {
    m_mobile_content_ads_settings = mobile_content_ads_settings;
    m_mobile_content_ads_settings_isSet = true;
}

bool OAIAdUnit::is_mobile_content_ads_settings_Set() const{
    return m_mobile_content_ads_settings_isSet;
}

bool OAIAdUnit::is_mobile_content_ads_settings_Valid() const{
    return m_mobile_content_ads_settings_isValid;
}

QString OAIAdUnit::getName() const {
    return m_name;
}
void OAIAdUnit::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAdUnit::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAdUnit::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAdUnit::getStatus() const {
    return m_status;
}
void OAIAdUnit::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAdUnit::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAdUnit::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIAdUnit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_ads_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_content_ads_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdUnit::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
