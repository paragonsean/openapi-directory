/**
 * AdSense Host API
 * Generates performance reports, generates ad codes, and provides publisher management capabilities for AdSense Hosts.
 *
 * The version of the OpenAPI document: v4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdUnit_contentAdsSettings_backupOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdUnit_contentAdsSettings_backupOption::OAIAdUnit_contentAdsSettings_backupOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdUnit_contentAdsSettings_backupOption::OAIAdUnit_contentAdsSettings_backupOption() {
    this->initializeModel();
}

OAIAdUnit_contentAdsSettings_backupOption::~OAIAdUnit_contentAdsSettings_backupOption() {}

void OAIAdUnit_contentAdsSettings_backupOption::initializeModel() {

    m_color_isSet = false;
    m_color_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIAdUnit_contentAdsSettings_backupOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdUnit_contentAdsSettings_backupOption::fromJsonObject(QJsonObject json) {

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIAdUnit_contentAdsSettings_backupOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdUnit_contentAdsSettings_backupOption::asJsonObject() const {
    QJsonObject obj;
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIAdUnit_contentAdsSettings_backupOption::getColor() const {
    return m_color;
}
void OAIAdUnit_contentAdsSettings_backupOption::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIAdUnit_contentAdsSettings_backupOption::is_color_Set() const{
    return m_color_isSet;
}

bool OAIAdUnit_contentAdsSettings_backupOption::is_color_Valid() const{
    return m_color_isValid;
}

QString OAIAdUnit_contentAdsSettings_backupOption::getType() const {
    return m_type;
}
void OAIAdUnit_contentAdsSettings_backupOption::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAdUnit_contentAdsSettings_backupOption::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAdUnit_contentAdsSettings_backupOption::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIAdUnit_contentAdsSettings_backupOption::getUrl() const {
    return m_url;
}
void OAIAdUnit_contentAdsSettings_backupOption::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIAdUnit_contentAdsSettings_backupOption::is_url_Set() const{
    return m_url_isSet;
}

bool OAIAdUnit_contentAdsSettings_backupOption::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIAdUnit_contentAdsSettings_backupOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdUnit_contentAdsSettings_backupOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
