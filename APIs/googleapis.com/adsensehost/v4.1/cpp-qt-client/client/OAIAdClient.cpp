/**
 * AdSense Host API
 * Generates performance reports, generates ad codes, and provides publisher management capabilities for AdSense Hosts.
 *
 * The version of the OpenAPI document: v4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdClient.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdClient::OAIAdClient(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdClient::OAIAdClient() {
    this->initializeModel();
}

OAIAdClient::~OAIAdClient() {}

void OAIAdClient::initializeModel() {

    m_arc_opt_in_isSet = false;
    m_arc_opt_in_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_product_code_isSet = false;
    m_product_code_isValid = false;

    m_supports_reporting_isSet = false;
    m_supports_reporting_isValid = false;
}

void OAIAdClient::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdClient::fromJsonObject(QJsonObject json) {

    m_arc_opt_in_isValid = ::OpenAPI::fromJsonValue(m_arc_opt_in, json[QString("arcOptIn")]);
    m_arc_opt_in_isSet = !json[QString("arcOptIn")].isNull() && m_arc_opt_in_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_product_code_isValid = ::OpenAPI::fromJsonValue(m_product_code, json[QString("productCode")]);
    m_product_code_isSet = !json[QString("productCode")].isNull() && m_product_code_isValid;

    m_supports_reporting_isValid = ::OpenAPI::fromJsonValue(m_supports_reporting, json[QString("supportsReporting")]);
    m_supports_reporting_isSet = !json[QString("supportsReporting")].isNull() && m_supports_reporting_isValid;
}

QString OAIAdClient::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdClient::asJsonObject() const {
    QJsonObject obj;
    if (m_arc_opt_in_isSet) {
        obj.insert(QString("arcOptIn"), ::OpenAPI::toJsonValue(m_arc_opt_in));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_product_code_isSet) {
        obj.insert(QString("productCode"), ::OpenAPI::toJsonValue(m_product_code));
    }
    if (m_supports_reporting_isSet) {
        obj.insert(QString("supportsReporting"), ::OpenAPI::toJsonValue(m_supports_reporting));
    }
    return obj;
}

bool OAIAdClient::isArcOptIn() const {
    return m_arc_opt_in;
}
void OAIAdClient::setArcOptIn(const bool &arc_opt_in) {
    m_arc_opt_in = arc_opt_in;
    m_arc_opt_in_isSet = true;
}

bool OAIAdClient::is_arc_opt_in_Set() const{
    return m_arc_opt_in_isSet;
}

bool OAIAdClient::is_arc_opt_in_Valid() const{
    return m_arc_opt_in_isValid;
}

QString OAIAdClient::getId() const {
    return m_id;
}
void OAIAdClient::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAdClient::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAdClient::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAdClient::getKind() const {
    return m_kind;
}
void OAIAdClient::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIAdClient::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIAdClient::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIAdClient::getProductCode() const {
    return m_product_code;
}
void OAIAdClient::setProductCode(const QString &product_code) {
    m_product_code = product_code;
    m_product_code_isSet = true;
}

bool OAIAdClient::is_product_code_Set() const{
    return m_product_code_isSet;
}

bool OAIAdClient::is_product_code_Valid() const{
    return m_product_code_isValid;
}

bool OAIAdClient::isSupportsReporting() const {
    return m_supports_reporting;
}
void OAIAdClient::setSupportsReporting(const bool &supports_reporting) {
    m_supports_reporting = supports_reporting;
    m_supports_reporting_isSet = true;
}

bool OAIAdClient::is_supports_reporting_Set() const{
    return m_supports_reporting_isSet;
}

bool OAIAdClient::is_supports_reporting_Valid() const{
    return m_supports_reporting_isValid;
}

bool OAIAdClient::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arc_opt_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_reporting_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdClient::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
