/**
 * AdSense Host API
 * Generates performance reports, generates ad codes, and provides publisher management capabilities for AdSense Hosts.
 *
 * The version of the OpenAPI document: v4.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdUnit_mobileContentAdsSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdUnit_mobileContentAdsSettings::OAIAdUnit_mobileContentAdsSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdUnit_mobileContentAdsSettings::OAIAdUnit_mobileContentAdsSettings() {
    this->initializeModel();
}

OAIAdUnit_mobileContentAdsSettings::~OAIAdUnit_mobileContentAdsSettings() {}

void OAIAdUnit_mobileContentAdsSettings::initializeModel() {

    m_markup_language_isSet = false;
    m_markup_language_isValid = false;

    m_scripting_language_isSet = false;
    m_scripting_language_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAdUnit_mobileContentAdsSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdUnit_mobileContentAdsSettings::fromJsonObject(QJsonObject json) {

    m_markup_language_isValid = ::OpenAPI::fromJsonValue(m_markup_language, json[QString("markupLanguage")]);
    m_markup_language_isSet = !json[QString("markupLanguage")].isNull() && m_markup_language_isValid;

    m_scripting_language_isValid = ::OpenAPI::fromJsonValue(m_scripting_language, json[QString("scriptingLanguage")]);
    m_scripting_language_isSet = !json[QString("scriptingLanguage")].isNull() && m_scripting_language_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAdUnit_mobileContentAdsSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdUnit_mobileContentAdsSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_markup_language_isSet) {
        obj.insert(QString("markupLanguage"), ::OpenAPI::toJsonValue(m_markup_language));
    }
    if (m_scripting_language_isSet) {
        obj.insert(QString("scriptingLanguage"), ::OpenAPI::toJsonValue(m_scripting_language));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIAdUnit_mobileContentAdsSettings::getMarkupLanguage() const {
    return m_markup_language;
}
void OAIAdUnit_mobileContentAdsSettings::setMarkupLanguage(const QString &markup_language) {
    m_markup_language = markup_language;
    m_markup_language_isSet = true;
}

bool OAIAdUnit_mobileContentAdsSettings::is_markup_language_Set() const{
    return m_markup_language_isSet;
}

bool OAIAdUnit_mobileContentAdsSettings::is_markup_language_Valid() const{
    return m_markup_language_isValid;
}

QString OAIAdUnit_mobileContentAdsSettings::getScriptingLanguage() const {
    return m_scripting_language;
}
void OAIAdUnit_mobileContentAdsSettings::setScriptingLanguage(const QString &scripting_language) {
    m_scripting_language = scripting_language;
    m_scripting_language_isSet = true;
}

bool OAIAdUnit_mobileContentAdsSettings::is_scripting_language_Set() const{
    return m_scripting_language_isSet;
}

bool OAIAdUnit_mobileContentAdsSettings::is_scripting_language_Valid() const{
    return m_scripting_language_isValid;
}

QString OAIAdUnit_mobileContentAdsSettings::getSize() const {
    return m_size;
}
void OAIAdUnit_mobileContentAdsSettings::setSize(const QString &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIAdUnit_mobileContentAdsSettings::is_size_Set() const{
    return m_size_isSet;
}

bool OAIAdUnit_mobileContentAdsSettings::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIAdUnit_mobileContentAdsSettings::getType() const {
    return m_type;
}
void OAIAdUnit_mobileContentAdsSettings::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAdUnit_mobileContentAdsSettings::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAdUnit_mobileContentAdsSettings::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAdUnit_mobileContentAdsSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_markup_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scripting_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdUnit_mobileContentAdsSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
