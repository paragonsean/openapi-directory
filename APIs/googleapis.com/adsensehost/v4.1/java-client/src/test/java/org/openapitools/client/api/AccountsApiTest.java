/*
 * AdSense Host API
 * Generates performance reports, generates ad codes, and provides publisher management capabilities for AdSense Hosts.
 *
 * The version of the OpenAPI document: v4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Account;
import org.openapitools.client.model.Accounts;
import org.openapitools.client.model.AdClient;
import org.openapitools.client.model.AdClients;
import org.openapitools.client.model.AdCode;
import org.openapitools.client.model.AdUnit;
import org.openapitools.client.model.AdUnits;
import org.openapitools.client.model.Report;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountsApi
 */
@Disabled
public class AccountsApiTest {

    private final AccountsApi api = new AccountsApi();

    /**
     * Get information about one of the ad clients in the specified publisher&#39;s AdSense account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adsensehostAccountsAdclientsGetTest() throws ApiException {
        String accountId = null;
        String adClientId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        AdClient response = api.adsensehostAccountsAdclientsGet(accountId, adClientId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * List all hosted ad clients in the specified hosted account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adsensehostAccountsAdclientsListTest() throws ApiException {
        String accountId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Integer maxResults = null;
        String pageToken = null;
        AdClients response = api.adsensehostAccountsAdclientsList(accountId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, pageToken);
        // TODO: test validations
    }

    /**
     * Delete the specified ad unit from the specified publisher AdSense account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adsensehostAccountsAdunitsDeleteTest() throws ApiException {
        String accountId = null;
        String adClientId = null;
        String adUnitId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        AdUnit response = api.adsensehostAccountsAdunitsDelete(accountId, adClientId, adUnitId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Get the specified host ad unit in this AdSense account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adsensehostAccountsAdunitsGetTest() throws ApiException {
        String accountId = null;
        String adClientId = null;
        String adUnitId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        AdUnit response = api.adsensehostAccountsAdunitsGet(accountId, adClientId, adUnitId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Get ad code for the specified ad unit, attaching the specified host custom channels.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adsensehostAccountsAdunitsGetAdCodeTest() throws ApiException {
        String accountId = null;
        String adClientId = null;
        String adUnitId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        List<String> hostCustomChannelId = null;
        AdCode response = api.adsensehostAccountsAdunitsGetAdCode(accountId, adClientId, adUnitId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, hostCustomChannelId);
        // TODO: test validations
    }

    /**
     * Insert the supplied ad unit into the specified publisher AdSense account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adsensehostAccountsAdunitsInsertTest() throws ApiException {
        String accountId = null;
        String adClientId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        AdUnit adUnit = null;
        AdUnit response = api.adsensehostAccountsAdunitsInsert(accountId, adClientId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, adUnit);
        // TODO: test validations
    }

    /**
     * List all ad units in the specified publisher&#39;s AdSense account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adsensehostAccountsAdunitsListTest() throws ApiException {
        String accountId = null;
        String adClientId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Boolean includeInactive = null;
        Integer maxResults = null;
        String pageToken = null;
        AdUnits response = api.adsensehostAccountsAdunitsList(accountId, adClientId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, includeInactive, maxResults, pageToken);
        // TODO: test validations
    }

    /**
     * Update the supplied ad unit in the specified publisher AdSense account. This method supports patch semantics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adsensehostAccountsAdunitsPatchTest() throws ApiException {
        String accountId = null;
        String adClientId = null;
        String adUnitId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        AdUnit adUnit = null;
        AdUnit response = api.adsensehostAccountsAdunitsPatch(accountId, adClientId, adUnitId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, adUnit);
        // TODO: test validations
    }

    /**
     * Update the supplied ad unit in the specified publisher AdSense account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adsensehostAccountsAdunitsUpdateTest() throws ApiException {
        String accountId = null;
        String adClientId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        AdUnit adUnit = null;
        AdUnit response = api.adsensehostAccountsAdunitsUpdate(accountId, adClientId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, adUnit);
        // TODO: test validations
    }

    /**
     * Get information about the selected associated AdSense account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adsensehostAccountsGetTest() throws ApiException {
        String accountId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Account response = api.adsensehostAccountsGet(accountId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * List hosted accounts associated with this AdSense account by ad client id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adsensehostAccountsListTest() throws ApiException {
        List<String> filterAdClientId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Accounts response = api.adsensehostAccountsList(filterAdClientId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Generate an AdSense report based on the report request sent in the query parameters. Returns the result as JSON; to retrieve output in CSV format specify \&quot;alt&#x3D;csv\&quot; as a query parameter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adsensehostAccountsReportsGenerateTest() throws ApiException {
        String accountId = null;
        String startDate = null;
        String endDate = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        List<String> dimension = null;
        List<String> filter = null;
        String locale = null;
        Integer maxResults = null;
        List<String> metric = null;
        List<String> sort = null;
        Integer startIndex = null;
        Report response = api.adsensehostAccountsReportsGenerate(accountId, startDate, endDate, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, dimension, filter, locale, maxResults, metric, sort, startIndex);
        // TODO: test validations
    }

}
