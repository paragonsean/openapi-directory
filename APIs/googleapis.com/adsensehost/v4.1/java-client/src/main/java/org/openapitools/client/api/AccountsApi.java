/*
 * AdSense Host API
 * Generates performance reports, generates ad codes, and provides publisher management capabilities for AdSense Hosts.
 *
 * The version of the OpenAPI document: v4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Account;
import org.openapitools.client.model.Accounts;
import org.openapitools.client.model.AdClient;
import org.openapitools.client.model.AdClients;
import org.openapitools.client.model.AdCode;
import org.openapitools.client.model.AdUnit;
import org.openapitools.client.model.AdUnits;
import org.openapitools.client.model.Report;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for adsensehostAccountsAdclientsGet
     * @param accountId Account which contains the ad client. (required)
     * @param adClientId Ad client to get. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adsensehostAccountsAdclientsGetCall(String accountId, String adClientId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/adclients/{adClientId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "adClientId" + "}", localVarApiClient.escapeString(adClientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adsensehostAccountsAdclientsGetValidateBeforeCall(String accountId, String adClientId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling adsensehostAccountsAdclientsGet(Async)");
        }

        // verify the required parameter 'adClientId' is set
        if (adClientId == null) {
            throw new ApiException("Missing the required parameter 'adClientId' when calling adsensehostAccountsAdclientsGet(Async)");
        }

        return adsensehostAccountsAdclientsGetCall(accountId, adClientId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);

    }

    /**
     * 
     * Get information about one of the ad clients in the specified publisher&#39;s AdSense account.
     * @param accountId Account which contains the ad client. (required)
     * @param adClientId Ad client to get. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return AdClient
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public AdClient adsensehostAccountsAdclientsGet(String accountId, String adClientId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        ApiResponse<AdClient> localVarResp = adsensehostAccountsAdclientsGetWithHttpInfo(accountId, adClientId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        return localVarResp.getData();
    }

    /**
     * 
     * Get information about one of the ad clients in the specified publisher&#39;s AdSense account.
     * @param accountId Account which contains the ad client. (required)
     * @param adClientId Ad client to get. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return ApiResponse&lt;AdClient&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdClient> adsensehostAccountsAdclientsGetWithHttpInfo(String accountId, String adClientId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        okhttp3.Call localVarCall = adsensehostAccountsAdclientsGetValidateBeforeCall(accountId, adClientId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, null);
        Type localVarReturnType = new TypeToken<AdClient>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get information about one of the ad clients in the specified publisher&#39;s AdSense account.
     * @param accountId Account which contains the ad client. (required)
     * @param adClientId Ad client to get. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adsensehostAccountsAdclientsGetAsync(String accountId, String adClientId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback<AdClient> _callback) throws ApiException {

        okhttp3.Call localVarCall = adsensehostAccountsAdclientsGetValidateBeforeCall(accountId, adClientId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);
        Type localVarReturnType = new TypeToken<AdClient>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adsensehostAccountsAdclientsList
     * @param accountId Account for which to list ad clients. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of ad clients to include in the response, used for paging. (optional)
     * @param pageToken A continuation token, used to page through ad clients. To retrieve the next page, set this parameter to the value of \&quot;nextPageToken\&quot; from the previous response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adsensehostAccountsAdclientsListCall(String accountId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/adclients"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adsensehostAccountsAdclientsListValidateBeforeCall(String accountId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling adsensehostAccountsAdclientsList(Async)");
        }

        return adsensehostAccountsAdclientsListCall(accountId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, pageToken, _callback);

    }

    /**
     * 
     * List all hosted ad clients in the specified hosted account.
     * @param accountId Account for which to list ad clients. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of ad clients to include in the response, used for paging. (optional)
     * @param pageToken A continuation token, used to page through ad clients. To retrieve the next page, set this parameter to the value of \&quot;nextPageToken\&quot; from the previous response. (optional)
     * @return AdClients
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public AdClients adsensehostAccountsAdclientsList(String accountId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, String pageToken) throws ApiException {
        ApiResponse<AdClients> localVarResp = adsensehostAccountsAdclientsListWithHttpInfo(accountId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * List all hosted ad clients in the specified hosted account.
     * @param accountId Account for which to list ad clients. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of ad clients to include in the response, used for paging. (optional)
     * @param pageToken A continuation token, used to page through ad clients. To retrieve the next page, set this parameter to the value of \&quot;nextPageToken\&quot; from the previous response. (optional)
     * @return ApiResponse&lt;AdClients&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdClients> adsensehostAccountsAdclientsListWithHttpInfo(String accountId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = adsensehostAccountsAdclientsListValidateBeforeCall(accountId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, pageToken, null);
        Type localVarReturnType = new TypeToken<AdClients>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all hosted ad clients in the specified hosted account.
     * @param accountId Account for which to list ad clients. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of ad clients to include in the response, used for paging. (optional)
     * @param pageToken A continuation token, used to page through ad clients. To retrieve the next page, set this parameter to the value of \&quot;nextPageToken\&quot; from the previous response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adsensehostAccountsAdclientsListAsync(String accountId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, String pageToken, final ApiCallback<AdClients> _callback) throws ApiException {

        okhttp3.Call localVarCall = adsensehostAccountsAdclientsListValidateBeforeCall(accountId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, pageToken, _callback);
        Type localVarReturnType = new TypeToken<AdClients>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adsensehostAccountsAdunitsDelete
     * @param accountId Account which contains the ad unit. (required)
     * @param adClientId Ad client for which to get ad unit. (required)
     * @param adUnitId Ad unit to delete. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adsensehostAccountsAdunitsDeleteCall(String accountId, String adClientId, String adUnitId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "adClientId" + "}", localVarApiClient.escapeString(adClientId.toString()))
            .replace("{" + "adUnitId" + "}", localVarApiClient.escapeString(adUnitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adsensehostAccountsAdunitsDeleteValidateBeforeCall(String accountId, String adClientId, String adUnitId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling adsensehostAccountsAdunitsDelete(Async)");
        }

        // verify the required parameter 'adClientId' is set
        if (adClientId == null) {
            throw new ApiException("Missing the required parameter 'adClientId' when calling adsensehostAccountsAdunitsDelete(Async)");
        }

        // verify the required parameter 'adUnitId' is set
        if (adUnitId == null) {
            throw new ApiException("Missing the required parameter 'adUnitId' when calling adsensehostAccountsAdunitsDelete(Async)");
        }

        return adsensehostAccountsAdunitsDeleteCall(accountId, adClientId, adUnitId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);

    }

    /**
     * 
     * Delete the specified ad unit from the specified publisher AdSense account.
     * @param accountId Account which contains the ad unit. (required)
     * @param adClientId Ad client for which to get ad unit. (required)
     * @param adUnitId Ad unit to delete. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return AdUnit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public AdUnit adsensehostAccountsAdunitsDelete(String accountId, String adClientId, String adUnitId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        ApiResponse<AdUnit> localVarResp = adsensehostAccountsAdunitsDeleteWithHttpInfo(accountId, adClientId, adUnitId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete the specified ad unit from the specified publisher AdSense account.
     * @param accountId Account which contains the ad unit. (required)
     * @param adClientId Ad client for which to get ad unit. (required)
     * @param adUnitId Ad unit to delete. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return ApiResponse&lt;AdUnit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdUnit> adsensehostAccountsAdunitsDeleteWithHttpInfo(String accountId, String adClientId, String adUnitId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        okhttp3.Call localVarCall = adsensehostAccountsAdunitsDeleteValidateBeforeCall(accountId, adClientId, adUnitId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, null);
        Type localVarReturnType = new TypeToken<AdUnit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete the specified ad unit from the specified publisher AdSense account.
     * @param accountId Account which contains the ad unit. (required)
     * @param adClientId Ad client for which to get ad unit. (required)
     * @param adUnitId Ad unit to delete. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adsensehostAccountsAdunitsDeleteAsync(String accountId, String adClientId, String adUnitId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback<AdUnit> _callback) throws ApiException {

        okhttp3.Call localVarCall = adsensehostAccountsAdunitsDeleteValidateBeforeCall(accountId, adClientId, adUnitId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);
        Type localVarReturnType = new TypeToken<AdUnit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adsensehostAccountsAdunitsGet
     * @param accountId Account which contains the ad unit. (required)
     * @param adClientId Ad client for which to get ad unit. (required)
     * @param adUnitId Ad unit to get. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adsensehostAccountsAdunitsGetCall(String accountId, String adClientId, String adUnitId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "adClientId" + "}", localVarApiClient.escapeString(adClientId.toString()))
            .replace("{" + "adUnitId" + "}", localVarApiClient.escapeString(adUnitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adsensehostAccountsAdunitsGetValidateBeforeCall(String accountId, String adClientId, String adUnitId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling adsensehostAccountsAdunitsGet(Async)");
        }

        // verify the required parameter 'adClientId' is set
        if (adClientId == null) {
            throw new ApiException("Missing the required parameter 'adClientId' when calling adsensehostAccountsAdunitsGet(Async)");
        }

        // verify the required parameter 'adUnitId' is set
        if (adUnitId == null) {
            throw new ApiException("Missing the required parameter 'adUnitId' when calling adsensehostAccountsAdunitsGet(Async)");
        }

        return adsensehostAccountsAdunitsGetCall(accountId, adClientId, adUnitId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);

    }

    /**
     * 
     * Get the specified host ad unit in this AdSense account.
     * @param accountId Account which contains the ad unit. (required)
     * @param adClientId Ad client for which to get ad unit. (required)
     * @param adUnitId Ad unit to get. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return AdUnit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public AdUnit adsensehostAccountsAdunitsGet(String accountId, String adClientId, String adUnitId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        ApiResponse<AdUnit> localVarResp = adsensehostAccountsAdunitsGetWithHttpInfo(accountId, adClientId, adUnitId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the specified host ad unit in this AdSense account.
     * @param accountId Account which contains the ad unit. (required)
     * @param adClientId Ad client for which to get ad unit. (required)
     * @param adUnitId Ad unit to get. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return ApiResponse&lt;AdUnit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdUnit> adsensehostAccountsAdunitsGetWithHttpInfo(String accountId, String adClientId, String adUnitId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        okhttp3.Call localVarCall = adsensehostAccountsAdunitsGetValidateBeforeCall(accountId, adClientId, adUnitId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, null);
        Type localVarReturnType = new TypeToken<AdUnit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the specified host ad unit in this AdSense account.
     * @param accountId Account which contains the ad unit. (required)
     * @param adClientId Ad client for which to get ad unit. (required)
     * @param adUnitId Ad unit to get. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adsensehostAccountsAdunitsGetAsync(String accountId, String adClientId, String adUnitId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback<AdUnit> _callback) throws ApiException {

        okhttp3.Call localVarCall = adsensehostAccountsAdunitsGetValidateBeforeCall(accountId, adClientId, adUnitId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);
        Type localVarReturnType = new TypeToken<AdUnit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adsensehostAccountsAdunitsGetAdCode
     * @param accountId Account which contains the ad client. (required)
     * @param adClientId Ad client with contains the ad unit. (required)
     * @param adUnitId Ad unit to get the code for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param hostCustomChannelId Host custom channel to attach to the ad code. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adsensehostAccountsAdunitsGetAdCodeCall(String accountId, String adClientId, String adUnitId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, List<String> hostCustomChannelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}/adcode"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "adClientId" + "}", localVarApiClient.escapeString(adClientId.toString()))
            .replace("{" + "adUnitId" + "}", localVarApiClient.escapeString(adUnitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (hostCustomChannelId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "hostCustomChannelId", hostCustomChannelId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adsensehostAccountsAdunitsGetAdCodeValidateBeforeCall(String accountId, String adClientId, String adUnitId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, List<String> hostCustomChannelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling adsensehostAccountsAdunitsGetAdCode(Async)");
        }

        // verify the required parameter 'adClientId' is set
        if (adClientId == null) {
            throw new ApiException("Missing the required parameter 'adClientId' when calling adsensehostAccountsAdunitsGetAdCode(Async)");
        }

        // verify the required parameter 'adUnitId' is set
        if (adUnitId == null) {
            throw new ApiException("Missing the required parameter 'adUnitId' when calling adsensehostAccountsAdunitsGetAdCode(Async)");
        }

        return adsensehostAccountsAdunitsGetAdCodeCall(accountId, adClientId, adUnitId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, hostCustomChannelId, _callback);

    }

    /**
     * 
     * Get ad code for the specified ad unit, attaching the specified host custom channels.
     * @param accountId Account which contains the ad client. (required)
     * @param adClientId Ad client with contains the ad unit. (required)
     * @param adUnitId Ad unit to get the code for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param hostCustomChannelId Host custom channel to attach to the ad code. (optional)
     * @return AdCode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public AdCode adsensehostAccountsAdunitsGetAdCode(String accountId, String adClientId, String adUnitId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, List<String> hostCustomChannelId) throws ApiException {
        ApiResponse<AdCode> localVarResp = adsensehostAccountsAdunitsGetAdCodeWithHttpInfo(accountId, adClientId, adUnitId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, hostCustomChannelId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get ad code for the specified ad unit, attaching the specified host custom channels.
     * @param accountId Account which contains the ad client. (required)
     * @param adClientId Ad client with contains the ad unit. (required)
     * @param adUnitId Ad unit to get the code for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param hostCustomChannelId Host custom channel to attach to the ad code. (optional)
     * @return ApiResponse&lt;AdCode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdCode> adsensehostAccountsAdunitsGetAdCodeWithHttpInfo(String accountId, String adClientId, String adUnitId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, List<String> hostCustomChannelId) throws ApiException {
        okhttp3.Call localVarCall = adsensehostAccountsAdunitsGetAdCodeValidateBeforeCall(accountId, adClientId, adUnitId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, hostCustomChannelId, null);
        Type localVarReturnType = new TypeToken<AdCode>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get ad code for the specified ad unit, attaching the specified host custom channels.
     * @param accountId Account which contains the ad client. (required)
     * @param adClientId Ad client with contains the ad unit. (required)
     * @param adUnitId Ad unit to get the code for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param hostCustomChannelId Host custom channel to attach to the ad code. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adsensehostAccountsAdunitsGetAdCodeAsync(String accountId, String adClientId, String adUnitId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, List<String> hostCustomChannelId, final ApiCallback<AdCode> _callback) throws ApiException {

        okhttp3.Call localVarCall = adsensehostAccountsAdunitsGetAdCodeValidateBeforeCall(accountId, adClientId, adUnitId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, hostCustomChannelId, _callback);
        Type localVarReturnType = new TypeToken<AdCode>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adsensehostAccountsAdunitsInsert
     * @param accountId Account which will contain the ad unit. (required)
     * @param adClientId Ad client into which to insert the ad unit. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param adUnit  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adsensehostAccountsAdunitsInsertCall(String accountId, String adClientId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, AdUnit adUnit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adUnit;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/adclients/{adClientId}/adunits"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "adClientId" + "}", localVarApiClient.escapeString(adClientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adsensehostAccountsAdunitsInsertValidateBeforeCall(String accountId, String adClientId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, AdUnit adUnit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling adsensehostAccountsAdunitsInsert(Async)");
        }

        // verify the required parameter 'adClientId' is set
        if (adClientId == null) {
            throw new ApiException("Missing the required parameter 'adClientId' when calling adsensehostAccountsAdunitsInsert(Async)");
        }

        return adsensehostAccountsAdunitsInsertCall(accountId, adClientId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, adUnit, _callback);

    }

    /**
     * 
     * Insert the supplied ad unit into the specified publisher AdSense account.
     * @param accountId Account which will contain the ad unit. (required)
     * @param adClientId Ad client into which to insert the ad unit. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param adUnit  (optional)
     * @return AdUnit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public AdUnit adsensehostAccountsAdunitsInsert(String accountId, String adClientId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, AdUnit adUnit) throws ApiException {
        ApiResponse<AdUnit> localVarResp = adsensehostAccountsAdunitsInsertWithHttpInfo(accountId, adClientId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, adUnit);
        return localVarResp.getData();
    }

    /**
     * 
     * Insert the supplied ad unit into the specified publisher AdSense account.
     * @param accountId Account which will contain the ad unit. (required)
     * @param adClientId Ad client into which to insert the ad unit. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param adUnit  (optional)
     * @return ApiResponse&lt;AdUnit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdUnit> adsensehostAccountsAdunitsInsertWithHttpInfo(String accountId, String adClientId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, AdUnit adUnit) throws ApiException {
        okhttp3.Call localVarCall = adsensehostAccountsAdunitsInsertValidateBeforeCall(accountId, adClientId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, adUnit, null);
        Type localVarReturnType = new TypeToken<AdUnit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Insert the supplied ad unit into the specified publisher AdSense account.
     * @param accountId Account which will contain the ad unit. (required)
     * @param adClientId Ad client into which to insert the ad unit. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param adUnit  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adsensehostAccountsAdunitsInsertAsync(String accountId, String adClientId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, AdUnit adUnit, final ApiCallback<AdUnit> _callback) throws ApiException {

        okhttp3.Call localVarCall = adsensehostAccountsAdunitsInsertValidateBeforeCall(accountId, adClientId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, adUnit, _callback);
        Type localVarReturnType = new TypeToken<AdUnit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adsensehostAccountsAdunitsList
     * @param accountId Account which contains the ad client. (required)
     * @param adClientId Ad client for which to list ad units. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param includeInactive Whether to include inactive ad units. Default: true. (optional)
     * @param maxResults The maximum number of ad units to include in the response, used for paging. (optional)
     * @param pageToken A continuation token, used to page through ad units. To retrieve the next page, set this parameter to the value of \&quot;nextPageToken\&quot; from the previous response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adsensehostAccountsAdunitsListCall(String accountId, String adClientId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean includeInactive, Integer maxResults, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/adclients/{adClientId}/adunits"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "adClientId" + "}", localVarApiClient.escapeString(adClientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (includeInactive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeInactive", includeInactive));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adsensehostAccountsAdunitsListValidateBeforeCall(String accountId, String adClientId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean includeInactive, Integer maxResults, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling adsensehostAccountsAdunitsList(Async)");
        }

        // verify the required parameter 'adClientId' is set
        if (adClientId == null) {
            throw new ApiException("Missing the required parameter 'adClientId' when calling adsensehostAccountsAdunitsList(Async)");
        }

        return adsensehostAccountsAdunitsListCall(accountId, adClientId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, includeInactive, maxResults, pageToken, _callback);

    }

    /**
     * 
     * List all ad units in the specified publisher&#39;s AdSense account.
     * @param accountId Account which contains the ad client. (required)
     * @param adClientId Ad client for which to list ad units. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param includeInactive Whether to include inactive ad units. Default: true. (optional)
     * @param maxResults The maximum number of ad units to include in the response, used for paging. (optional)
     * @param pageToken A continuation token, used to page through ad units. To retrieve the next page, set this parameter to the value of \&quot;nextPageToken\&quot; from the previous response. (optional)
     * @return AdUnits
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public AdUnits adsensehostAccountsAdunitsList(String accountId, String adClientId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean includeInactive, Integer maxResults, String pageToken) throws ApiException {
        ApiResponse<AdUnits> localVarResp = adsensehostAccountsAdunitsListWithHttpInfo(accountId, adClientId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, includeInactive, maxResults, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * List all ad units in the specified publisher&#39;s AdSense account.
     * @param accountId Account which contains the ad client. (required)
     * @param adClientId Ad client for which to list ad units. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param includeInactive Whether to include inactive ad units. Default: true. (optional)
     * @param maxResults The maximum number of ad units to include in the response, used for paging. (optional)
     * @param pageToken A continuation token, used to page through ad units. To retrieve the next page, set this parameter to the value of \&quot;nextPageToken\&quot; from the previous response. (optional)
     * @return ApiResponse&lt;AdUnits&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdUnits> adsensehostAccountsAdunitsListWithHttpInfo(String accountId, String adClientId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean includeInactive, Integer maxResults, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = adsensehostAccountsAdunitsListValidateBeforeCall(accountId, adClientId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, includeInactive, maxResults, pageToken, null);
        Type localVarReturnType = new TypeToken<AdUnits>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all ad units in the specified publisher&#39;s AdSense account.
     * @param accountId Account which contains the ad client. (required)
     * @param adClientId Ad client for which to list ad units. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param includeInactive Whether to include inactive ad units. Default: true. (optional)
     * @param maxResults The maximum number of ad units to include in the response, used for paging. (optional)
     * @param pageToken A continuation token, used to page through ad units. To retrieve the next page, set this parameter to the value of \&quot;nextPageToken\&quot; from the previous response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adsensehostAccountsAdunitsListAsync(String accountId, String adClientId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean includeInactive, Integer maxResults, String pageToken, final ApiCallback<AdUnits> _callback) throws ApiException {

        okhttp3.Call localVarCall = adsensehostAccountsAdunitsListValidateBeforeCall(accountId, adClientId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, includeInactive, maxResults, pageToken, _callback);
        Type localVarReturnType = new TypeToken<AdUnits>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adsensehostAccountsAdunitsPatch
     * @param accountId Account which contains the ad client. (required)
     * @param adClientId Ad client which contains the ad unit. (required)
     * @param adUnitId Ad unit to get. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param adUnit  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adsensehostAccountsAdunitsPatchCall(String accountId, String adClientId, String adUnitId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, AdUnit adUnit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adUnit;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/adclients/{adClientId}/adunits"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "adClientId" + "}", localVarApiClient.escapeString(adClientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (adUnitId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("adUnitId", adUnitId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adsensehostAccountsAdunitsPatchValidateBeforeCall(String accountId, String adClientId, String adUnitId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, AdUnit adUnit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling adsensehostAccountsAdunitsPatch(Async)");
        }

        // verify the required parameter 'adClientId' is set
        if (adClientId == null) {
            throw new ApiException("Missing the required parameter 'adClientId' when calling adsensehostAccountsAdunitsPatch(Async)");
        }

        // verify the required parameter 'adUnitId' is set
        if (adUnitId == null) {
            throw new ApiException("Missing the required parameter 'adUnitId' when calling adsensehostAccountsAdunitsPatch(Async)");
        }

        return adsensehostAccountsAdunitsPatchCall(accountId, adClientId, adUnitId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, adUnit, _callback);

    }

    /**
     * 
     * Update the supplied ad unit in the specified publisher AdSense account. This method supports patch semantics.
     * @param accountId Account which contains the ad client. (required)
     * @param adClientId Ad client which contains the ad unit. (required)
     * @param adUnitId Ad unit to get. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param adUnit  (optional)
     * @return AdUnit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public AdUnit adsensehostAccountsAdunitsPatch(String accountId, String adClientId, String adUnitId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, AdUnit adUnit) throws ApiException {
        ApiResponse<AdUnit> localVarResp = adsensehostAccountsAdunitsPatchWithHttpInfo(accountId, adClientId, adUnitId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, adUnit);
        return localVarResp.getData();
    }

    /**
     * 
     * Update the supplied ad unit in the specified publisher AdSense account. This method supports patch semantics.
     * @param accountId Account which contains the ad client. (required)
     * @param adClientId Ad client which contains the ad unit. (required)
     * @param adUnitId Ad unit to get. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param adUnit  (optional)
     * @return ApiResponse&lt;AdUnit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdUnit> adsensehostAccountsAdunitsPatchWithHttpInfo(String accountId, String adClientId, String adUnitId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, AdUnit adUnit) throws ApiException {
        okhttp3.Call localVarCall = adsensehostAccountsAdunitsPatchValidateBeforeCall(accountId, adClientId, adUnitId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, adUnit, null);
        Type localVarReturnType = new TypeToken<AdUnit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update the supplied ad unit in the specified publisher AdSense account. This method supports patch semantics.
     * @param accountId Account which contains the ad client. (required)
     * @param adClientId Ad client which contains the ad unit. (required)
     * @param adUnitId Ad unit to get. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param adUnit  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adsensehostAccountsAdunitsPatchAsync(String accountId, String adClientId, String adUnitId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, AdUnit adUnit, final ApiCallback<AdUnit> _callback) throws ApiException {

        okhttp3.Call localVarCall = adsensehostAccountsAdunitsPatchValidateBeforeCall(accountId, adClientId, adUnitId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, adUnit, _callback);
        Type localVarReturnType = new TypeToken<AdUnit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adsensehostAccountsAdunitsUpdate
     * @param accountId Account which contains the ad client. (required)
     * @param adClientId Ad client which contains the ad unit. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param adUnit  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adsensehostAccountsAdunitsUpdateCall(String accountId, String adClientId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, AdUnit adUnit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adUnit;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/adclients/{adClientId}/adunits"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "adClientId" + "}", localVarApiClient.escapeString(adClientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adsensehostAccountsAdunitsUpdateValidateBeforeCall(String accountId, String adClientId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, AdUnit adUnit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling adsensehostAccountsAdunitsUpdate(Async)");
        }

        // verify the required parameter 'adClientId' is set
        if (adClientId == null) {
            throw new ApiException("Missing the required parameter 'adClientId' when calling adsensehostAccountsAdunitsUpdate(Async)");
        }

        return adsensehostAccountsAdunitsUpdateCall(accountId, adClientId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, adUnit, _callback);

    }

    /**
     * 
     * Update the supplied ad unit in the specified publisher AdSense account.
     * @param accountId Account which contains the ad client. (required)
     * @param adClientId Ad client which contains the ad unit. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param adUnit  (optional)
     * @return AdUnit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public AdUnit adsensehostAccountsAdunitsUpdate(String accountId, String adClientId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, AdUnit adUnit) throws ApiException {
        ApiResponse<AdUnit> localVarResp = adsensehostAccountsAdunitsUpdateWithHttpInfo(accountId, adClientId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, adUnit);
        return localVarResp.getData();
    }

    /**
     * 
     * Update the supplied ad unit in the specified publisher AdSense account.
     * @param accountId Account which contains the ad client. (required)
     * @param adClientId Ad client which contains the ad unit. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param adUnit  (optional)
     * @return ApiResponse&lt;AdUnit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdUnit> adsensehostAccountsAdunitsUpdateWithHttpInfo(String accountId, String adClientId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, AdUnit adUnit) throws ApiException {
        okhttp3.Call localVarCall = adsensehostAccountsAdunitsUpdateValidateBeforeCall(accountId, adClientId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, adUnit, null);
        Type localVarReturnType = new TypeToken<AdUnit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update the supplied ad unit in the specified publisher AdSense account.
     * @param accountId Account which contains the ad client. (required)
     * @param adClientId Ad client which contains the ad unit. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param adUnit  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adsensehostAccountsAdunitsUpdateAsync(String accountId, String adClientId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, AdUnit adUnit, final ApiCallback<AdUnit> _callback) throws ApiException {

        okhttp3.Call localVarCall = adsensehostAccountsAdunitsUpdateValidateBeforeCall(accountId, adClientId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, adUnit, _callback);
        Type localVarReturnType = new TypeToken<AdUnit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adsensehostAccountsGet
     * @param accountId Account to get information about. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adsensehostAccountsGetCall(String accountId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adsensehostAccountsGetValidateBeforeCall(String accountId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling adsensehostAccountsGet(Async)");
        }

        return adsensehostAccountsGetCall(accountId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);

    }

    /**
     * 
     * Get information about the selected associated AdSense account.
     * @param accountId Account to get information about. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return Account
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Account adsensehostAccountsGet(String accountId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        ApiResponse<Account> localVarResp = adsensehostAccountsGetWithHttpInfo(accountId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        return localVarResp.getData();
    }

    /**
     * 
     * Get information about the selected associated AdSense account.
     * @param accountId Account to get information about. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return ApiResponse&lt;Account&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Account> adsensehostAccountsGetWithHttpInfo(String accountId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        okhttp3.Call localVarCall = adsensehostAccountsGetValidateBeforeCall(accountId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, null);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get information about the selected associated AdSense account.
     * @param accountId Account to get information about. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adsensehostAccountsGetAsync(String accountId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback<Account> _callback) throws ApiException {

        okhttp3.Call localVarCall = adsensehostAccountsGetValidateBeforeCall(accountId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adsensehostAccountsList
     * @param filterAdClientId Ad clients to list accounts for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adsensehostAccountsListCall(List<String> filterAdClientId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (filterAdClientId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filterAdClientId", filterAdClientId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adsensehostAccountsListValidateBeforeCall(List<String> filterAdClientId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'filterAdClientId' is set
        if (filterAdClientId == null) {
            throw new ApiException("Missing the required parameter 'filterAdClientId' when calling adsensehostAccountsList(Async)");
        }

        return adsensehostAccountsListCall(filterAdClientId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);

    }

    /**
     * 
     * List hosted accounts associated with this AdSense account by ad client id.
     * @param filterAdClientId Ad clients to list accounts for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return Accounts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Accounts adsensehostAccountsList(List<String> filterAdClientId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        ApiResponse<Accounts> localVarResp = adsensehostAccountsListWithHttpInfo(filterAdClientId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        return localVarResp.getData();
    }

    /**
     * 
     * List hosted accounts associated with this AdSense account by ad client id.
     * @param filterAdClientId Ad clients to list accounts for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return ApiResponse&lt;Accounts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Accounts> adsensehostAccountsListWithHttpInfo(List<String> filterAdClientId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        okhttp3.Call localVarCall = adsensehostAccountsListValidateBeforeCall(filterAdClientId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, null);
        Type localVarReturnType = new TypeToken<Accounts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List hosted accounts associated with this AdSense account by ad client id.
     * @param filterAdClientId Ad clients to list accounts for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adsensehostAccountsListAsync(List<String> filterAdClientId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback<Accounts> _callback) throws ApiException {

        okhttp3.Call localVarCall = adsensehostAccountsListValidateBeforeCall(filterAdClientId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);
        Type localVarReturnType = new TypeToken<Accounts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adsensehostAccountsReportsGenerate
     * @param accountId Hosted account upon which to report. (required)
     * @param startDate Start of the date range to report on in \&quot;YYYY-MM-DD\&quot; format, inclusive. (required)
     * @param endDate End of the date range to report on in \&quot;YYYY-MM-DD\&quot; format, inclusive. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param dimension Dimensions to base the report on. (optional)
     * @param filter Filters to be run on the report. (optional)
     * @param locale Optional locale to use for translating report output to a local language. Defaults to \&quot;en_US\&quot; if not specified. (optional)
     * @param maxResults The maximum number of rows of report data to return. (optional)
     * @param metric Numeric columns to include in the report. (optional)
     * @param sort The name of a dimension or metric to sort the resulting report on, optionally prefixed with \&quot;+\&quot; to sort ascending or \&quot;-\&quot; to sort descending. If no prefix is specified, the column is sorted ascending. (optional)
     * @param startIndex Index of the first row of report data to return. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adsensehostAccountsReportsGenerateCall(String accountId, String startDate, String endDate, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, List<String> dimension, List<String> filter, String locale, Integer maxResults, List<String> metric, List<String> sort, Integer startIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/reports"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (dimension != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dimension", dimension));
        }

        if (filter != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filter", filter));
        }

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (metric != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "metric", metric));
        }

        if (sort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sort", sort));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adsensehostAccountsReportsGenerateValidateBeforeCall(String accountId, String startDate, String endDate, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, List<String> dimension, List<String> filter, String locale, Integer maxResults, List<String> metric, List<String> sort, Integer startIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling adsensehostAccountsReportsGenerate(Async)");
        }

        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling adsensehostAccountsReportsGenerate(Async)");
        }

        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling adsensehostAccountsReportsGenerate(Async)");
        }

        return adsensehostAccountsReportsGenerateCall(accountId, startDate, endDate, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, dimension, filter, locale, maxResults, metric, sort, startIndex, _callback);

    }

    /**
     * 
     * Generate an AdSense report based on the report request sent in the query parameters. Returns the result as JSON; to retrieve output in CSV format specify \&quot;alt&#x3D;csv\&quot; as a query parameter.
     * @param accountId Hosted account upon which to report. (required)
     * @param startDate Start of the date range to report on in \&quot;YYYY-MM-DD\&quot; format, inclusive. (required)
     * @param endDate End of the date range to report on in \&quot;YYYY-MM-DD\&quot; format, inclusive. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param dimension Dimensions to base the report on. (optional)
     * @param filter Filters to be run on the report. (optional)
     * @param locale Optional locale to use for translating report output to a local language. Defaults to \&quot;en_US\&quot; if not specified. (optional)
     * @param maxResults The maximum number of rows of report data to return. (optional)
     * @param metric Numeric columns to include in the report. (optional)
     * @param sort The name of a dimension or metric to sort the resulting report on, optionally prefixed with \&quot;+\&quot; to sort ascending or \&quot;-\&quot; to sort descending. If no prefix is specified, the column is sorted ascending. (optional)
     * @param startIndex Index of the first row of report data to return. (optional)
     * @return Report
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Report adsensehostAccountsReportsGenerate(String accountId, String startDate, String endDate, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, List<String> dimension, List<String> filter, String locale, Integer maxResults, List<String> metric, List<String> sort, Integer startIndex) throws ApiException {
        ApiResponse<Report> localVarResp = adsensehostAccountsReportsGenerateWithHttpInfo(accountId, startDate, endDate, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, dimension, filter, locale, maxResults, metric, sort, startIndex);
        return localVarResp.getData();
    }

    /**
     * 
     * Generate an AdSense report based on the report request sent in the query parameters. Returns the result as JSON; to retrieve output in CSV format specify \&quot;alt&#x3D;csv\&quot; as a query parameter.
     * @param accountId Hosted account upon which to report. (required)
     * @param startDate Start of the date range to report on in \&quot;YYYY-MM-DD\&quot; format, inclusive. (required)
     * @param endDate End of the date range to report on in \&quot;YYYY-MM-DD\&quot; format, inclusive. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param dimension Dimensions to base the report on. (optional)
     * @param filter Filters to be run on the report. (optional)
     * @param locale Optional locale to use for translating report output to a local language. Defaults to \&quot;en_US\&quot; if not specified. (optional)
     * @param maxResults The maximum number of rows of report data to return. (optional)
     * @param metric Numeric columns to include in the report. (optional)
     * @param sort The name of a dimension or metric to sort the resulting report on, optionally prefixed with \&quot;+\&quot; to sort ascending or \&quot;-\&quot; to sort descending. If no prefix is specified, the column is sorted ascending. (optional)
     * @param startIndex Index of the first row of report data to return. (optional)
     * @return ApiResponse&lt;Report&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Report> adsensehostAccountsReportsGenerateWithHttpInfo(String accountId, String startDate, String endDate, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, List<String> dimension, List<String> filter, String locale, Integer maxResults, List<String> metric, List<String> sort, Integer startIndex) throws ApiException {
        okhttp3.Call localVarCall = adsensehostAccountsReportsGenerateValidateBeforeCall(accountId, startDate, endDate, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, dimension, filter, locale, maxResults, metric, sort, startIndex, null);
        Type localVarReturnType = new TypeToken<Report>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Generate an AdSense report based on the report request sent in the query parameters. Returns the result as JSON; to retrieve output in CSV format specify \&quot;alt&#x3D;csv\&quot; as a query parameter.
     * @param accountId Hosted account upon which to report. (required)
     * @param startDate Start of the date range to report on in \&quot;YYYY-MM-DD\&quot; format, inclusive. (required)
     * @param endDate End of the date range to report on in \&quot;YYYY-MM-DD\&quot; format, inclusive. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param dimension Dimensions to base the report on. (optional)
     * @param filter Filters to be run on the report. (optional)
     * @param locale Optional locale to use for translating report output to a local language. Defaults to \&quot;en_US\&quot; if not specified. (optional)
     * @param maxResults The maximum number of rows of report data to return. (optional)
     * @param metric Numeric columns to include in the report. (optional)
     * @param sort The name of a dimension or metric to sort the resulting report on, optionally prefixed with \&quot;+\&quot; to sort ascending or \&quot;-\&quot; to sort descending. If no prefix is specified, the column is sorted ascending. (optional)
     * @param startIndex Index of the first row of report data to return. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adsensehostAccountsReportsGenerateAsync(String accountId, String startDate, String endDate, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, List<String> dimension, List<String> filter, String locale, Integer maxResults, List<String> metric, List<String> sort, Integer startIndex, final ApiCallback<Report> _callback) throws ApiException {

        okhttp3.Call localVarCall = adsensehostAccountsReportsGenerateValidateBeforeCall(accountId, startDate, endDate, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, dimension, filter, locale, maxResults, metric, sort, startIndex, _callback);
        Type localVarReturnType = new TypeToken<Report>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
