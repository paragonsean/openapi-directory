/*
 * AdSense Host API
 * Generates performance reports, generates ad codes, and provides publisher management capabilities for AdSense Hosts.
 *
 * The version of the OpenAPI document: v4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AssociationSession
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:54.075363-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssociationSession {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "adsensehost#associationSession";

  public static final String SERIALIZED_NAME_PRODUCT_CODES = "productCodes";
  @SerializedName(SERIALIZED_NAME_PRODUCT_CODES)
  private List<String> productCodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_REDIRECT_URL = "redirectUrl";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URL)
  private String redirectUrl;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_USER_LOCALE = "userLocale";
  @SerializedName(SERIALIZED_NAME_USER_LOCALE)
  private String userLocale;

  public static final String SERIALIZED_NAME_WEBSITE_LOCALE = "websiteLocale";
  @SerializedName(SERIALIZED_NAME_WEBSITE_LOCALE)
  private String websiteLocale;

  public static final String SERIALIZED_NAME_WEBSITE_URL = "websiteUrl";
  @SerializedName(SERIALIZED_NAME_WEBSITE_URL)
  private String websiteUrl;

  public AssociationSession() {
  }

  public AssociationSession accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Hosted account id of the associated publisher after association. Present if status is ACCEPTED.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public AssociationSession id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier of this association session.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AssociationSession kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Kind of resource this is, in this case adsensehost#associationSession.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public AssociationSession productCodes(List<String> productCodes) {
    this.productCodes = productCodes;
    return this;
  }

  public AssociationSession addProductCodesItem(String productCodesItem) {
    if (this.productCodes == null) {
      this.productCodes = new ArrayList<>();
    }
    this.productCodes.add(productCodesItem);
    return this;
  }

  /**
   * The products to associate with the user. Options: AFC, AFG, AFV, AFS (deprecated), AFMC (deprecated)
   * @return productCodes
   */
  @javax.annotation.Nullable
  public List<String> getProductCodes() {
    return productCodes;
  }

  public void setProductCodes(List<String> productCodes) {
    this.productCodes = productCodes;
  }


  public AssociationSession redirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
    return this;
  }

  /**
   * Redirect URL of this association session. Used to redirect users into the AdSense association flow.
   * @return redirectUrl
   */
  @javax.annotation.Nullable
  public String getRedirectUrl() {
    return redirectUrl;
  }

  public void setRedirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
  }


  public AssociationSession status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Status of the completed association, available once the association callback token has been verified. One of ACCEPTED, REJECTED, or ERROR.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public AssociationSession userLocale(String userLocale) {
    this.userLocale = userLocale;
    return this;
  }

  /**
   * The preferred locale of the user themselves when going through the AdSense association flow.
   * @return userLocale
   */
  @javax.annotation.Nullable
  public String getUserLocale() {
    return userLocale;
  }

  public void setUserLocale(String userLocale) {
    this.userLocale = userLocale;
  }


  public AssociationSession websiteLocale(String websiteLocale) {
    this.websiteLocale = websiteLocale;
    return this;
  }

  /**
   * The locale of the user&#39;s hosted website.
   * @return websiteLocale
   */
  @javax.annotation.Nullable
  public String getWebsiteLocale() {
    return websiteLocale;
  }

  public void setWebsiteLocale(String websiteLocale) {
    this.websiteLocale = websiteLocale;
  }


  public AssociationSession websiteUrl(String websiteUrl) {
    this.websiteUrl = websiteUrl;
    return this;
  }

  /**
   * The URL of the user&#39;s hosted website.
   * @return websiteUrl
   */
  @javax.annotation.Nullable
  public String getWebsiteUrl() {
    return websiteUrl;
  }

  public void setWebsiteUrl(String websiteUrl) {
    this.websiteUrl = websiteUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssociationSession associationSession = (AssociationSession) o;
    return Objects.equals(this.accountId, associationSession.accountId) &&
        Objects.equals(this.id, associationSession.id) &&
        Objects.equals(this.kind, associationSession.kind) &&
        Objects.equals(this.productCodes, associationSession.productCodes) &&
        Objects.equals(this.redirectUrl, associationSession.redirectUrl) &&
        Objects.equals(this.status, associationSession.status) &&
        Objects.equals(this.userLocale, associationSession.userLocale) &&
        Objects.equals(this.websiteLocale, associationSession.websiteLocale) &&
        Objects.equals(this.websiteUrl, associationSession.websiteUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, id, kind, productCodes, redirectUrl, status, userLocale, websiteLocale, websiteUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssociationSession {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    productCodes: ").append(toIndentedString(productCodes)).append("\n");
    sb.append("    redirectUrl: ").append(toIndentedString(redirectUrl)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    userLocale: ").append(toIndentedString(userLocale)).append("\n");
    sb.append("    websiteLocale: ").append(toIndentedString(websiteLocale)).append("\n");
    sb.append("    websiteUrl: ").append(toIndentedString(websiteUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("productCodes");
    openapiFields.add("redirectUrl");
    openapiFields.add("status");
    openapiFields.add("userLocale");
    openapiFields.add("websiteLocale");
    openapiFields.add("websiteUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssociationSession
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssociationSession.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssociationSession is not found in the empty JSON string", AssociationSession.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssociationSession.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssociationSession` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("productCodes") != null && !jsonObj.get("productCodes").isJsonNull() && !jsonObj.get("productCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `productCodes` to be an array in the JSON string but got `%s`", jsonObj.get("productCodes").toString()));
      }
      if ((jsonObj.get("redirectUrl") != null && !jsonObj.get("redirectUrl").isJsonNull()) && !jsonObj.get("redirectUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirectUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirectUrl").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("userLocale") != null && !jsonObj.get("userLocale").isJsonNull()) && !jsonObj.get("userLocale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userLocale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userLocale").toString()));
      }
      if ((jsonObj.get("websiteLocale") != null && !jsonObj.get("websiteLocale").isJsonNull()) && !jsonObj.get("websiteLocale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `websiteLocale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("websiteLocale").toString()));
      }
      if ((jsonObj.get("websiteUrl") != null && !jsonObj.get("websiteUrl").isJsonNull()) && !jsonObj.get("websiteUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `websiteUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("websiteUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssociationSession.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssociationSession' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssociationSession> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssociationSession.class));

       return (TypeAdapter<T>) new TypeAdapter<AssociationSession>() {
           @Override
           public void write(JsonWriter out, AssociationSession value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssociationSession read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssociationSession given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssociationSession
   * @throws IOException if the JSON string is invalid with respect to AssociationSession
   */
  public static AssociationSession fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssociationSession.class);
  }

  /**
   * Convert an instance of AssociationSession to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

