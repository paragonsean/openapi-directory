/*
 * AdSense Host API
 * Generates performance reports, generates ad codes, and provides publisher management capabilities for AdSense Hosts.
 *
 * The version of the OpenAPI document: v4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Report;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReportsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReportsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReportsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for adsensehostReportsGenerate
     * @param startDate Start of the date range to report on in \&quot;YYYY-MM-DD\&quot; format, inclusive. (required)
     * @param endDate End of the date range to report on in \&quot;YYYY-MM-DD\&quot; format, inclusive. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param dimension Dimensions to base the report on. (optional)
     * @param filter Filters to be run on the report. (optional)
     * @param locale Optional locale to use for translating report output to a local language. Defaults to \&quot;en_US\&quot; if not specified. (optional)
     * @param maxResults The maximum number of rows of report data to return. (optional)
     * @param metric Numeric columns to include in the report. (optional)
     * @param sort The name of a dimension or metric to sort the resulting report on, optionally prefixed with \&quot;+\&quot; to sort ascending or \&quot;-\&quot; to sort descending. If no prefix is specified, the column is sorted ascending. (optional)
     * @param startIndex Index of the first row of report data to return. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adsensehostReportsGenerateCall(String startDate, String endDate, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, List<String> dimension, List<String> filter, String locale, Integer maxResults, List<String> metric, List<String> sort, Integer startIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (dimension != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dimension", dimension));
        }

        if (filter != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filter", filter));
        }

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (metric != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "metric", metric));
        }

        if (sort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sort", sort));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adsensehostReportsGenerateValidateBeforeCall(String startDate, String endDate, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, List<String> dimension, List<String> filter, String locale, Integer maxResults, List<String> metric, List<String> sort, Integer startIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling adsensehostReportsGenerate(Async)");
        }

        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling adsensehostReportsGenerate(Async)");
        }

        return adsensehostReportsGenerateCall(startDate, endDate, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, dimension, filter, locale, maxResults, metric, sort, startIndex, _callback);

    }

    /**
     * 
     * Generate an AdSense report based on the report request sent in the query parameters. Returns the result as JSON; to retrieve output in CSV format specify \&quot;alt&#x3D;csv\&quot; as a query parameter.
     * @param startDate Start of the date range to report on in \&quot;YYYY-MM-DD\&quot; format, inclusive. (required)
     * @param endDate End of the date range to report on in \&quot;YYYY-MM-DD\&quot; format, inclusive. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param dimension Dimensions to base the report on. (optional)
     * @param filter Filters to be run on the report. (optional)
     * @param locale Optional locale to use for translating report output to a local language. Defaults to \&quot;en_US\&quot; if not specified. (optional)
     * @param maxResults The maximum number of rows of report data to return. (optional)
     * @param metric Numeric columns to include in the report. (optional)
     * @param sort The name of a dimension or metric to sort the resulting report on, optionally prefixed with \&quot;+\&quot; to sort ascending or \&quot;-\&quot; to sort descending. If no prefix is specified, the column is sorted ascending. (optional)
     * @param startIndex Index of the first row of report data to return. (optional)
     * @return Report
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Report adsensehostReportsGenerate(String startDate, String endDate, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, List<String> dimension, List<String> filter, String locale, Integer maxResults, List<String> metric, List<String> sort, Integer startIndex) throws ApiException {
        ApiResponse<Report> localVarResp = adsensehostReportsGenerateWithHttpInfo(startDate, endDate, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, dimension, filter, locale, maxResults, metric, sort, startIndex);
        return localVarResp.getData();
    }

    /**
     * 
     * Generate an AdSense report based on the report request sent in the query parameters. Returns the result as JSON; to retrieve output in CSV format specify \&quot;alt&#x3D;csv\&quot; as a query parameter.
     * @param startDate Start of the date range to report on in \&quot;YYYY-MM-DD\&quot; format, inclusive. (required)
     * @param endDate End of the date range to report on in \&quot;YYYY-MM-DD\&quot; format, inclusive. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param dimension Dimensions to base the report on. (optional)
     * @param filter Filters to be run on the report. (optional)
     * @param locale Optional locale to use for translating report output to a local language. Defaults to \&quot;en_US\&quot; if not specified. (optional)
     * @param maxResults The maximum number of rows of report data to return. (optional)
     * @param metric Numeric columns to include in the report. (optional)
     * @param sort The name of a dimension or metric to sort the resulting report on, optionally prefixed with \&quot;+\&quot; to sort ascending or \&quot;-\&quot; to sort descending. If no prefix is specified, the column is sorted ascending. (optional)
     * @param startIndex Index of the first row of report data to return. (optional)
     * @return ApiResponse&lt;Report&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Report> adsensehostReportsGenerateWithHttpInfo(String startDate, String endDate, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, List<String> dimension, List<String> filter, String locale, Integer maxResults, List<String> metric, List<String> sort, Integer startIndex) throws ApiException {
        okhttp3.Call localVarCall = adsensehostReportsGenerateValidateBeforeCall(startDate, endDate, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, dimension, filter, locale, maxResults, metric, sort, startIndex, null);
        Type localVarReturnType = new TypeToken<Report>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Generate an AdSense report based on the report request sent in the query parameters. Returns the result as JSON; to retrieve output in CSV format specify \&quot;alt&#x3D;csv\&quot; as a query parameter.
     * @param startDate Start of the date range to report on in \&quot;YYYY-MM-DD\&quot; format, inclusive. (required)
     * @param endDate End of the date range to report on in \&quot;YYYY-MM-DD\&quot; format, inclusive. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param dimension Dimensions to base the report on. (optional)
     * @param filter Filters to be run on the report. (optional)
     * @param locale Optional locale to use for translating report output to a local language. Defaults to \&quot;en_US\&quot; if not specified. (optional)
     * @param maxResults The maximum number of rows of report data to return. (optional)
     * @param metric Numeric columns to include in the report. (optional)
     * @param sort The name of a dimension or metric to sort the resulting report on, optionally prefixed with \&quot;+\&quot; to sort ascending or \&quot;-\&quot; to sort descending. If no prefix is specified, the column is sorted ascending. (optional)
     * @param startIndex Index of the first row of report data to return. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adsensehostReportsGenerateAsync(String startDate, String endDate, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, List<String> dimension, List<String> filter, String locale, Integer maxResults, List<String> metric, List<String> sort, Integer startIndex, final ApiCallback<Report> _callback) throws ApiException {

        okhttp3.Call localVarCall = adsensehostReportsGenerateValidateBeforeCall(startDate, endDate, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, dimension, filter, locale, maxResults, metric, sort, startIndex, _callback);
        Type localVarReturnType = new TypeToken<Report>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
