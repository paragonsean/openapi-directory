# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssociationSession(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, id: str=None, kind: str='adsensehost#associationSession', product_codes: List[str]=None, redirect_url: str=None, status: str=None, user_locale: str=None, website_locale: str=None, website_url: str=None):
        """AssociationSession - a model defined in OpenAPI

        :param account_id: The account_id of this AssociationSession.
        :param id: The id of this AssociationSession.
        :param kind: The kind of this AssociationSession.
        :param product_codes: The product_codes of this AssociationSession.
        :param redirect_url: The redirect_url of this AssociationSession.
        :param status: The status of this AssociationSession.
        :param user_locale: The user_locale of this AssociationSession.
        :param website_locale: The website_locale of this AssociationSession.
        :param website_url: The website_url of this AssociationSession.
        """
        self.openapi_types = {
            'account_id': str,
            'id': str,
            'kind': str,
            'product_codes': List[str],
            'redirect_url': str,
            'status': str,
            'user_locale': str,
            'website_locale': str,
            'website_url': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'id': 'id',
            'kind': 'kind',
            'product_codes': 'productCodes',
            'redirect_url': 'redirectUrl',
            'status': 'status',
            'user_locale': 'userLocale',
            'website_locale': 'websiteLocale',
            'website_url': 'websiteUrl'
        }

        self._account_id = account_id
        self._id = id
        self._kind = kind
        self._product_codes = product_codes
        self._redirect_url = redirect_url
        self._status = status
        self._user_locale = user_locale
        self._website_locale = website_locale
        self._website_url = website_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssociationSession':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssociationSession of this AssociationSession.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this AssociationSession.

        Hosted account id of the associated publisher after association. Present if status is ACCEPTED.

        :return: The account_id of this AssociationSession.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AssociationSession.

        Hosted account id of the associated publisher after association. Present if status is ACCEPTED.

        :param account_id: The account_id of this AssociationSession.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def id(self):
        """Gets the id of this AssociationSession.

        Unique identifier of this association session.

        :return: The id of this AssociationSession.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AssociationSession.

        Unique identifier of this association session.

        :param id: The id of this AssociationSession.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this AssociationSession.

        Kind of resource this is, in this case adsensehost#associationSession.

        :return: The kind of this AssociationSession.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this AssociationSession.

        Kind of resource this is, in this case adsensehost#associationSession.

        :param kind: The kind of this AssociationSession.
        :type kind: str
        """

        self._kind = kind

    @property
    def product_codes(self):
        """Gets the product_codes of this AssociationSession.

        The products to associate with the user. Options: AFC, AFG, AFV, AFS (deprecated), AFMC (deprecated)

        :return: The product_codes of this AssociationSession.
        :rtype: List[str]
        """
        return self._product_codes

    @product_codes.setter
    def product_codes(self, product_codes):
        """Sets the product_codes of this AssociationSession.

        The products to associate with the user. Options: AFC, AFG, AFV, AFS (deprecated), AFMC (deprecated)

        :param product_codes: The product_codes of this AssociationSession.
        :type product_codes: List[str]
        """

        self._product_codes = product_codes

    @property
    def redirect_url(self):
        """Gets the redirect_url of this AssociationSession.

        Redirect URL of this association session. Used to redirect users into the AdSense association flow.

        :return: The redirect_url of this AssociationSession.
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """Sets the redirect_url of this AssociationSession.

        Redirect URL of this association session. Used to redirect users into the AdSense association flow.

        :param redirect_url: The redirect_url of this AssociationSession.
        :type redirect_url: str
        """

        self._redirect_url = redirect_url

    @property
    def status(self):
        """Gets the status of this AssociationSession.

        Status of the completed association, available once the association callback token has been verified. One of ACCEPTED, REJECTED, or ERROR.

        :return: The status of this AssociationSession.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AssociationSession.

        Status of the completed association, available once the association callback token has been verified. One of ACCEPTED, REJECTED, or ERROR.

        :param status: The status of this AssociationSession.
        :type status: str
        """

        self._status = status

    @property
    def user_locale(self):
        """Gets the user_locale of this AssociationSession.

        The preferred locale of the user themselves when going through the AdSense association flow.

        :return: The user_locale of this AssociationSession.
        :rtype: str
        """
        return self._user_locale

    @user_locale.setter
    def user_locale(self, user_locale):
        """Sets the user_locale of this AssociationSession.

        The preferred locale of the user themselves when going through the AdSense association flow.

        :param user_locale: The user_locale of this AssociationSession.
        :type user_locale: str
        """

        self._user_locale = user_locale

    @property
    def website_locale(self):
        """Gets the website_locale of this AssociationSession.

        The locale of the user's hosted website.

        :return: The website_locale of this AssociationSession.
        :rtype: str
        """
        return self._website_locale

    @website_locale.setter
    def website_locale(self, website_locale):
        """Sets the website_locale of this AssociationSession.

        The locale of the user's hosted website.

        :param website_locale: The website_locale of this AssociationSession.
        :type website_locale: str
        """

        self._website_locale = website_locale

    @property
    def website_url(self):
        """Gets the website_url of this AssociationSession.

        The URL of the user's hosted website.

        :return: The website_url of this AssociationSession.
        :rtype: str
        """
        return self._website_url

    @website_url.setter
    def website_url(self, website_url):
        """Sets the website_url of this AssociationSession.

        The URL of the user's hosted website.

        :param website_url: The website_url of this AssociationSession.
        :type website_url: str
        """

        self._website_url = website_url
