# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.report_headers_inner import ReportHeadersInner
from openapi_server import util


class Report(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, averages: List[str]=None, headers: List[ReportHeadersInner]=None, kind: str='adsensehost#report', rows: List[List[str]]=None, total_matched_rows: str=None, totals: List[str]=None, warnings: List[str]=None):
        """Report - a model defined in OpenAPI

        :param averages: The averages of this Report.
        :param headers: The headers of this Report.
        :param kind: The kind of this Report.
        :param rows: The rows of this Report.
        :param total_matched_rows: The total_matched_rows of this Report.
        :param totals: The totals of this Report.
        :param warnings: The warnings of this Report.
        """
        self.openapi_types = {
            'averages': List[str],
            'headers': List[ReportHeadersInner],
            'kind': str,
            'rows': List[List[str]],
            'total_matched_rows': str,
            'totals': List[str],
            'warnings': List[str]
        }

        self.attribute_map = {
            'averages': 'averages',
            'headers': 'headers',
            'kind': 'kind',
            'rows': 'rows',
            'total_matched_rows': 'totalMatchedRows',
            'totals': 'totals',
            'warnings': 'warnings'
        }

        self._averages = averages
        self._headers = headers
        self._kind = kind
        self._rows = rows
        self._total_matched_rows = total_matched_rows
        self._totals = totals
        self._warnings = warnings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Report':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Report of this Report.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def averages(self):
        """Gets the averages of this Report.

        The averages of the report. This is the same length as any other row in the report; cells corresponding to dimension columns are empty.

        :return: The averages of this Report.
        :rtype: List[str]
        """
        return self._averages

    @averages.setter
    def averages(self, averages):
        """Sets the averages of this Report.

        The averages of the report. This is the same length as any other row in the report; cells corresponding to dimension columns are empty.

        :param averages: The averages of this Report.
        :type averages: List[str]
        """

        self._averages = averages

    @property
    def headers(self):
        """Gets the headers of this Report.

        The header information of the columns requested in the report. This is a list of headers; one for each dimension in the request, followed by one for each metric in the request.

        :return: The headers of this Report.
        :rtype: List[ReportHeadersInner]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this Report.

        The header information of the columns requested in the report. This is a list of headers; one for each dimension in the request, followed by one for each metric in the request.

        :param headers: The headers of this Report.
        :type headers: List[ReportHeadersInner]
        """

        self._headers = headers

    @property
    def kind(self):
        """Gets the kind of this Report.

        Kind this is, in this case adsensehost#report.

        :return: The kind of this Report.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Report.

        Kind this is, in this case adsensehost#report.

        :param kind: The kind of this Report.
        :type kind: str
        """

        self._kind = kind

    @property
    def rows(self):
        """Gets the rows of this Report.

        The output rows of the report. Each row is a list of cells; one for each dimension in the request, followed by one for each metric in the request. The dimension cells contain strings, and the metric cells contain numbers.

        :return: The rows of this Report.
        :rtype: List[List[str]]
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this Report.

        The output rows of the report. Each row is a list of cells; one for each dimension in the request, followed by one for each metric in the request. The dimension cells contain strings, and the metric cells contain numbers.

        :param rows: The rows of this Report.
        :type rows: List[List[str]]
        """

        self._rows = rows

    @property
    def total_matched_rows(self):
        """Gets the total_matched_rows of this Report.

        The total number of rows matched by the report request. Fewer rows may be returned in the response due to being limited by the row count requested or the report row limit.

        :return: The total_matched_rows of this Report.
        :rtype: str
        """
        return self._total_matched_rows

    @total_matched_rows.setter
    def total_matched_rows(self, total_matched_rows):
        """Sets the total_matched_rows of this Report.

        The total number of rows matched by the report request. Fewer rows may be returned in the response due to being limited by the row count requested or the report row limit.

        :param total_matched_rows: The total_matched_rows of this Report.
        :type total_matched_rows: str
        """

        self._total_matched_rows = total_matched_rows

    @property
    def totals(self):
        """Gets the totals of this Report.

        The totals of the report. This is the same length as any other row in the report; cells corresponding to dimension columns are empty.

        :return: The totals of this Report.
        :rtype: List[str]
        """
        return self._totals

    @totals.setter
    def totals(self, totals):
        """Sets the totals of this Report.

        The totals of the report. This is the same length as any other row in the report; cells corresponding to dimension columns are empty.

        :param totals: The totals of this Report.
        :type totals: List[str]
        """

        self._totals = totals

    @property
    def warnings(self):
        """Gets the warnings of this Report.

        Any warnings associated with generation of the report.

        :return: The warnings of this Report.
        :rtype: List[str]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this Report.

        Any warnings associated with generation of the report.

        :param warnings: The warnings of this Report.
        :type warnings: List[str]
        """

        self._warnings = warnings
