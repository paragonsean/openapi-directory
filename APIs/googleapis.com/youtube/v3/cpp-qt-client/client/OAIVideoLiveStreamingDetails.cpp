/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoLiveStreamingDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoLiveStreamingDetails::OAIVideoLiveStreamingDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoLiveStreamingDetails::OAIVideoLiveStreamingDetails() {
    this->initializeModel();
}

OAIVideoLiveStreamingDetails::~OAIVideoLiveStreamingDetails() {}

void OAIVideoLiveStreamingDetails::initializeModel() {

    m_active_live_chat_id_isSet = false;
    m_active_live_chat_id_isValid = false;

    m_actual_end_time_isSet = false;
    m_actual_end_time_isValid = false;

    m_actual_start_time_isSet = false;
    m_actual_start_time_isValid = false;

    m_concurrent_viewers_isSet = false;
    m_concurrent_viewers_isValid = false;

    m_scheduled_end_time_isSet = false;
    m_scheduled_end_time_isValid = false;

    m_scheduled_start_time_isSet = false;
    m_scheduled_start_time_isValid = false;
}

void OAIVideoLiveStreamingDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoLiveStreamingDetails::fromJsonObject(QJsonObject json) {

    m_active_live_chat_id_isValid = ::OpenAPI::fromJsonValue(m_active_live_chat_id, json[QString("activeLiveChatId")]);
    m_active_live_chat_id_isSet = !json[QString("activeLiveChatId")].isNull() && m_active_live_chat_id_isValid;

    m_actual_end_time_isValid = ::OpenAPI::fromJsonValue(m_actual_end_time, json[QString("actualEndTime")]);
    m_actual_end_time_isSet = !json[QString("actualEndTime")].isNull() && m_actual_end_time_isValid;

    m_actual_start_time_isValid = ::OpenAPI::fromJsonValue(m_actual_start_time, json[QString("actualStartTime")]);
    m_actual_start_time_isSet = !json[QString("actualStartTime")].isNull() && m_actual_start_time_isValid;

    m_concurrent_viewers_isValid = ::OpenAPI::fromJsonValue(m_concurrent_viewers, json[QString("concurrentViewers")]);
    m_concurrent_viewers_isSet = !json[QString("concurrentViewers")].isNull() && m_concurrent_viewers_isValid;

    m_scheduled_end_time_isValid = ::OpenAPI::fromJsonValue(m_scheduled_end_time, json[QString("scheduledEndTime")]);
    m_scheduled_end_time_isSet = !json[QString("scheduledEndTime")].isNull() && m_scheduled_end_time_isValid;

    m_scheduled_start_time_isValid = ::OpenAPI::fromJsonValue(m_scheduled_start_time, json[QString("scheduledStartTime")]);
    m_scheduled_start_time_isSet = !json[QString("scheduledStartTime")].isNull() && m_scheduled_start_time_isValid;
}

QString OAIVideoLiveStreamingDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoLiveStreamingDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_active_live_chat_id_isSet) {
        obj.insert(QString("activeLiveChatId"), ::OpenAPI::toJsonValue(m_active_live_chat_id));
    }
    if (m_actual_end_time_isSet) {
        obj.insert(QString("actualEndTime"), ::OpenAPI::toJsonValue(m_actual_end_time));
    }
    if (m_actual_start_time_isSet) {
        obj.insert(QString("actualStartTime"), ::OpenAPI::toJsonValue(m_actual_start_time));
    }
    if (m_concurrent_viewers_isSet) {
        obj.insert(QString("concurrentViewers"), ::OpenAPI::toJsonValue(m_concurrent_viewers));
    }
    if (m_scheduled_end_time_isSet) {
        obj.insert(QString("scheduledEndTime"), ::OpenAPI::toJsonValue(m_scheduled_end_time));
    }
    if (m_scheduled_start_time_isSet) {
        obj.insert(QString("scheduledStartTime"), ::OpenAPI::toJsonValue(m_scheduled_start_time));
    }
    return obj;
}

QString OAIVideoLiveStreamingDetails::getActiveLiveChatId() const {
    return m_active_live_chat_id;
}
void OAIVideoLiveStreamingDetails::setActiveLiveChatId(const QString &active_live_chat_id) {
    m_active_live_chat_id = active_live_chat_id;
    m_active_live_chat_id_isSet = true;
}

bool OAIVideoLiveStreamingDetails::is_active_live_chat_id_Set() const{
    return m_active_live_chat_id_isSet;
}

bool OAIVideoLiveStreamingDetails::is_active_live_chat_id_Valid() const{
    return m_active_live_chat_id_isValid;
}

QDateTime OAIVideoLiveStreamingDetails::getActualEndTime() const {
    return m_actual_end_time;
}
void OAIVideoLiveStreamingDetails::setActualEndTime(const QDateTime &actual_end_time) {
    m_actual_end_time = actual_end_time;
    m_actual_end_time_isSet = true;
}

bool OAIVideoLiveStreamingDetails::is_actual_end_time_Set() const{
    return m_actual_end_time_isSet;
}

bool OAIVideoLiveStreamingDetails::is_actual_end_time_Valid() const{
    return m_actual_end_time_isValid;
}

QDateTime OAIVideoLiveStreamingDetails::getActualStartTime() const {
    return m_actual_start_time;
}
void OAIVideoLiveStreamingDetails::setActualStartTime(const QDateTime &actual_start_time) {
    m_actual_start_time = actual_start_time;
    m_actual_start_time_isSet = true;
}

bool OAIVideoLiveStreamingDetails::is_actual_start_time_Set() const{
    return m_actual_start_time_isSet;
}

bool OAIVideoLiveStreamingDetails::is_actual_start_time_Valid() const{
    return m_actual_start_time_isValid;
}

QString OAIVideoLiveStreamingDetails::getConcurrentViewers() const {
    return m_concurrent_viewers;
}
void OAIVideoLiveStreamingDetails::setConcurrentViewers(const QString &concurrent_viewers) {
    m_concurrent_viewers = concurrent_viewers;
    m_concurrent_viewers_isSet = true;
}

bool OAIVideoLiveStreamingDetails::is_concurrent_viewers_Set() const{
    return m_concurrent_viewers_isSet;
}

bool OAIVideoLiveStreamingDetails::is_concurrent_viewers_Valid() const{
    return m_concurrent_viewers_isValid;
}

QDateTime OAIVideoLiveStreamingDetails::getScheduledEndTime() const {
    return m_scheduled_end_time;
}
void OAIVideoLiveStreamingDetails::setScheduledEndTime(const QDateTime &scheduled_end_time) {
    m_scheduled_end_time = scheduled_end_time;
    m_scheduled_end_time_isSet = true;
}

bool OAIVideoLiveStreamingDetails::is_scheduled_end_time_Set() const{
    return m_scheduled_end_time_isSet;
}

bool OAIVideoLiveStreamingDetails::is_scheduled_end_time_Valid() const{
    return m_scheduled_end_time_isValid;
}

QDateTime OAIVideoLiveStreamingDetails::getScheduledStartTime() const {
    return m_scheduled_start_time;
}
void OAIVideoLiveStreamingDetails::setScheduledStartTime(const QDateTime &scheduled_start_time) {
    m_scheduled_start_time = scheduled_start_time;
    m_scheduled_start_time_isSet = true;
}

bool OAIVideoLiveStreamingDetails::is_scheduled_start_time_Set() const{
    return m_scheduled_start_time_isSet;
}

bool OAIVideoLiveStreamingDetails::is_scheduled_start_time_Valid() const{
    return m_scheduled_start_time_isValid;
}

bool OAIVideoLiveStreamingDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_live_chat_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_actual_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_actual_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_concurrent_viewers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoLiveStreamingDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
