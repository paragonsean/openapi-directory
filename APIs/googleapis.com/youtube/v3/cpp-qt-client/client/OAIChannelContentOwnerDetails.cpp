/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelContentOwnerDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelContentOwnerDetails::OAIChannelContentOwnerDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelContentOwnerDetails::OAIChannelContentOwnerDetails() {
    this->initializeModel();
}

OAIChannelContentOwnerDetails::~OAIChannelContentOwnerDetails() {}

void OAIChannelContentOwnerDetails::initializeModel() {

    m_content_owner_isSet = false;
    m_content_owner_isValid = false;

    m_time_linked_isSet = false;
    m_time_linked_isValid = false;
}

void OAIChannelContentOwnerDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelContentOwnerDetails::fromJsonObject(QJsonObject json) {

    m_content_owner_isValid = ::OpenAPI::fromJsonValue(m_content_owner, json[QString("contentOwner")]);
    m_content_owner_isSet = !json[QString("contentOwner")].isNull() && m_content_owner_isValid;

    m_time_linked_isValid = ::OpenAPI::fromJsonValue(m_time_linked, json[QString("timeLinked")]);
    m_time_linked_isSet = !json[QString("timeLinked")].isNull() && m_time_linked_isValid;
}

QString OAIChannelContentOwnerDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelContentOwnerDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_content_owner_isSet) {
        obj.insert(QString("contentOwner"), ::OpenAPI::toJsonValue(m_content_owner));
    }
    if (m_time_linked_isSet) {
        obj.insert(QString("timeLinked"), ::OpenAPI::toJsonValue(m_time_linked));
    }
    return obj;
}

QString OAIChannelContentOwnerDetails::getContentOwner() const {
    return m_content_owner;
}
void OAIChannelContentOwnerDetails::setContentOwner(const QString &content_owner) {
    m_content_owner = content_owner;
    m_content_owner_isSet = true;
}

bool OAIChannelContentOwnerDetails::is_content_owner_Set() const{
    return m_content_owner_isSet;
}

bool OAIChannelContentOwnerDetails::is_content_owner_Valid() const{
    return m_content_owner_isValid;
}

QDateTime OAIChannelContentOwnerDetails::getTimeLinked() const {
    return m_time_linked;
}
void OAIChannelContentOwnerDetails::setTimeLinked(const QDateTime &time_linked) {
    m_time_linked = time_linked;
    m_time_linked_isSet = true;
}

bool OAIChannelContentOwnerDetails::is_time_linked_Set() const{
    return m_time_linked_isSet;
}

bool OAIChannelContentOwnerDetails::is_time_linked_Valid() const{
    return m_time_linked_isValid;
}

bool OAIChannelContentOwnerDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_linked_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelContentOwnerDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
