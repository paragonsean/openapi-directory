/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIngestionInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIngestionInfo::OAIIngestionInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIngestionInfo::OAIIngestionInfo() {
    this->initializeModel();
}

OAIIngestionInfo::~OAIIngestionInfo() {}

void OAIIngestionInfo::initializeModel() {

    m_backup_ingestion_address_isSet = false;
    m_backup_ingestion_address_isValid = false;

    m_ingestion_address_isSet = false;
    m_ingestion_address_isValid = false;

    m_rtmps_backup_ingestion_address_isSet = false;
    m_rtmps_backup_ingestion_address_isValid = false;

    m_rtmps_ingestion_address_isSet = false;
    m_rtmps_ingestion_address_isValid = false;

    m_stream_name_isSet = false;
    m_stream_name_isValid = false;
}

void OAIIngestionInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIngestionInfo::fromJsonObject(QJsonObject json) {

    m_backup_ingestion_address_isValid = ::OpenAPI::fromJsonValue(m_backup_ingestion_address, json[QString("backupIngestionAddress")]);
    m_backup_ingestion_address_isSet = !json[QString("backupIngestionAddress")].isNull() && m_backup_ingestion_address_isValid;

    m_ingestion_address_isValid = ::OpenAPI::fromJsonValue(m_ingestion_address, json[QString("ingestionAddress")]);
    m_ingestion_address_isSet = !json[QString("ingestionAddress")].isNull() && m_ingestion_address_isValid;

    m_rtmps_backup_ingestion_address_isValid = ::OpenAPI::fromJsonValue(m_rtmps_backup_ingestion_address, json[QString("rtmpsBackupIngestionAddress")]);
    m_rtmps_backup_ingestion_address_isSet = !json[QString("rtmpsBackupIngestionAddress")].isNull() && m_rtmps_backup_ingestion_address_isValid;

    m_rtmps_ingestion_address_isValid = ::OpenAPI::fromJsonValue(m_rtmps_ingestion_address, json[QString("rtmpsIngestionAddress")]);
    m_rtmps_ingestion_address_isSet = !json[QString("rtmpsIngestionAddress")].isNull() && m_rtmps_ingestion_address_isValid;

    m_stream_name_isValid = ::OpenAPI::fromJsonValue(m_stream_name, json[QString("streamName")]);
    m_stream_name_isSet = !json[QString("streamName")].isNull() && m_stream_name_isValid;
}

QString OAIIngestionInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIngestionInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_ingestion_address_isSet) {
        obj.insert(QString("backupIngestionAddress"), ::OpenAPI::toJsonValue(m_backup_ingestion_address));
    }
    if (m_ingestion_address_isSet) {
        obj.insert(QString("ingestionAddress"), ::OpenAPI::toJsonValue(m_ingestion_address));
    }
    if (m_rtmps_backup_ingestion_address_isSet) {
        obj.insert(QString("rtmpsBackupIngestionAddress"), ::OpenAPI::toJsonValue(m_rtmps_backup_ingestion_address));
    }
    if (m_rtmps_ingestion_address_isSet) {
        obj.insert(QString("rtmpsIngestionAddress"), ::OpenAPI::toJsonValue(m_rtmps_ingestion_address));
    }
    if (m_stream_name_isSet) {
        obj.insert(QString("streamName"), ::OpenAPI::toJsonValue(m_stream_name));
    }
    return obj;
}

QString OAIIngestionInfo::getBackupIngestionAddress() const {
    return m_backup_ingestion_address;
}
void OAIIngestionInfo::setBackupIngestionAddress(const QString &backup_ingestion_address) {
    m_backup_ingestion_address = backup_ingestion_address;
    m_backup_ingestion_address_isSet = true;
}

bool OAIIngestionInfo::is_backup_ingestion_address_Set() const{
    return m_backup_ingestion_address_isSet;
}

bool OAIIngestionInfo::is_backup_ingestion_address_Valid() const{
    return m_backup_ingestion_address_isValid;
}

QString OAIIngestionInfo::getIngestionAddress() const {
    return m_ingestion_address;
}
void OAIIngestionInfo::setIngestionAddress(const QString &ingestion_address) {
    m_ingestion_address = ingestion_address;
    m_ingestion_address_isSet = true;
}

bool OAIIngestionInfo::is_ingestion_address_Set() const{
    return m_ingestion_address_isSet;
}

bool OAIIngestionInfo::is_ingestion_address_Valid() const{
    return m_ingestion_address_isValid;
}

QString OAIIngestionInfo::getRtmpsBackupIngestionAddress() const {
    return m_rtmps_backup_ingestion_address;
}
void OAIIngestionInfo::setRtmpsBackupIngestionAddress(const QString &rtmps_backup_ingestion_address) {
    m_rtmps_backup_ingestion_address = rtmps_backup_ingestion_address;
    m_rtmps_backup_ingestion_address_isSet = true;
}

bool OAIIngestionInfo::is_rtmps_backup_ingestion_address_Set() const{
    return m_rtmps_backup_ingestion_address_isSet;
}

bool OAIIngestionInfo::is_rtmps_backup_ingestion_address_Valid() const{
    return m_rtmps_backup_ingestion_address_isValid;
}

QString OAIIngestionInfo::getRtmpsIngestionAddress() const {
    return m_rtmps_ingestion_address;
}
void OAIIngestionInfo::setRtmpsIngestionAddress(const QString &rtmps_ingestion_address) {
    m_rtmps_ingestion_address = rtmps_ingestion_address;
    m_rtmps_ingestion_address_isSet = true;
}

bool OAIIngestionInfo::is_rtmps_ingestion_address_Set() const{
    return m_rtmps_ingestion_address_isSet;
}

bool OAIIngestionInfo::is_rtmps_ingestion_address_Valid() const{
    return m_rtmps_ingestion_address_isValid;
}

QString OAIIngestionInfo::getStreamName() const {
    return m_stream_name;
}
void OAIIngestionInfo::setStreamName(const QString &stream_name) {
    m_stream_name = stream_name;
    m_stream_name_isSet = true;
}

bool OAIIngestionInfo::is_stream_name_Set() const{
    return m_stream_name_isSet;
}

bool OAIIngestionInfo::is_stream_name_Valid() const{
    return m_stream_name_isValid;
}

bool OAIIngestionInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_ingestion_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingestion_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rtmps_backup_ingestion_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rtmps_ingestion_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIngestionInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
