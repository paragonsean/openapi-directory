/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILiveChatMessageSnippet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILiveChatMessageSnippet::OAILiveChatMessageSnippet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILiveChatMessageSnippet::OAILiveChatMessageSnippet() {
    this->initializeModel();
}

OAILiveChatMessageSnippet::~OAILiveChatMessageSnippet() {}

void OAILiveChatMessageSnippet::initializeModel() {

    m_author_channel_id_isSet = false;
    m_author_channel_id_isValid = false;

    m_display_message_isSet = false;
    m_display_message_isValid = false;

    m_fan_funding_event_details_isSet = false;
    m_fan_funding_event_details_isValid = false;

    m_gift_membership_received_details_isSet = false;
    m_gift_membership_received_details_isValid = false;

    m_has_display_content_isSet = false;
    m_has_display_content_isValid = false;

    m_live_chat_id_isSet = false;
    m_live_chat_id_isValid = false;

    m_member_milestone_chat_details_isSet = false;
    m_member_milestone_chat_details_isValid = false;

    m_membership_gifting_details_isSet = false;
    m_membership_gifting_details_isValid = false;

    m_message_deleted_details_isSet = false;
    m_message_deleted_details_isValid = false;

    m_message_retracted_details_isSet = false;
    m_message_retracted_details_isValid = false;

    m_new_sponsor_details_isSet = false;
    m_new_sponsor_details_isValid = false;

    m_poll_details_isSet = false;
    m_poll_details_isValid = false;

    m_published_at_isSet = false;
    m_published_at_isValid = false;

    m_super_chat_details_isSet = false;
    m_super_chat_details_isValid = false;

    m_super_sticker_details_isSet = false;
    m_super_sticker_details_isValid = false;

    m_text_message_details_isSet = false;
    m_text_message_details_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_banned_details_isSet = false;
    m_user_banned_details_isValid = false;
}

void OAILiveChatMessageSnippet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILiveChatMessageSnippet::fromJsonObject(QJsonObject json) {

    m_author_channel_id_isValid = ::OpenAPI::fromJsonValue(m_author_channel_id, json[QString("authorChannelId")]);
    m_author_channel_id_isSet = !json[QString("authorChannelId")].isNull() && m_author_channel_id_isValid;

    m_display_message_isValid = ::OpenAPI::fromJsonValue(m_display_message, json[QString("displayMessage")]);
    m_display_message_isSet = !json[QString("displayMessage")].isNull() && m_display_message_isValid;

    m_fan_funding_event_details_isValid = ::OpenAPI::fromJsonValue(m_fan_funding_event_details, json[QString("fanFundingEventDetails")]);
    m_fan_funding_event_details_isSet = !json[QString("fanFundingEventDetails")].isNull() && m_fan_funding_event_details_isValid;

    m_gift_membership_received_details_isValid = ::OpenAPI::fromJsonValue(m_gift_membership_received_details, json[QString("giftMembershipReceivedDetails")]);
    m_gift_membership_received_details_isSet = !json[QString("giftMembershipReceivedDetails")].isNull() && m_gift_membership_received_details_isValid;

    m_has_display_content_isValid = ::OpenAPI::fromJsonValue(m_has_display_content, json[QString("hasDisplayContent")]);
    m_has_display_content_isSet = !json[QString("hasDisplayContent")].isNull() && m_has_display_content_isValid;

    m_live_chat_id_isValid = ::OpenAPI::fromJsonValue(m_live_chat_id, json[QString("liveChatId")]);
    m_live_chat_id_isSet = !json[QString("liveChatId")].isNull() && m_live_chat_id_isValid;

    m_member_milestone_chat_details_isValid = ::OpenAPI::fromJsonValue(m_member_milestone_chat_details, json[QString("memberMilestoneChatDetails")]);
    m_member_milestone_chat_details_isSet = !json[QString("memberMilestoneChatDetails")].isNull() && m_member_milestone_chat_details_isValid;

    m_membership_gifting_details_isValid = ::OpenAPI::fromJsonValue(m_membership_gifting_details, json[QString("membershipGiftingDetails")]);
    m_membership_gifting_details_isSet = !json[QString("membershipGiftingDetails")].isNull() && m_membership_gifting_details_isValid;

    m_message_deleted_details_isValid = ::OpenAPI::fromJsonValue(m_message_deleted_details, json[QString("messageDeletedDetails")]);
    m_message_deleted_details_isSet = !json[QString("messageDeletedDetails")].isNull() && m_message_deleted_details_isValid;

    m_message_retracted_details_isValid = ::OpenAPI::fromJsonValue(m_message_retracted_details, json[QString("messageRetractedDetails")]);
    m_message_retracted_details_isSet = !json[QString("messageRetractedDetails")].isNull() && m_message_retracted_details_isValid;

    m_new_sponsor_details_isValid = ::OpenAPI::fromJsonValue(m_new_sponsor_details, json[QString("newSponsorDetails")]);
    m_new_sponsor_details_isSet = !json[QString("newSponsorDetails")].isNull() && m_new_sponsor_details_isValid;

    m_poll_details_isValid = ::OpenAPI::fromJsonValue(m_poll_details, json[QString("pollDetails")]);
    m_poll_details_isSet = !json[QString("pollDetails")].isNull() && m_poll_details_isValid;

    m_published_at_isValid = ::OpenAPI::fromJsonValue(m_published_at, json[QString("publishedAt")]);
    m_published_at_isSet = !json[QString("publishedAt")].isNull() && m_published_at_isValid;

    m_super_chat_details_isValid = ::OpenAPI::fromJsonValue(m_super_chat_details, json[QString("superChatDetails")]);
    m_super_chat_details_isSet = !json[QString("superChatDetails")].isNull() && m_super_chat_details_isValid;

    m_super_sticker_details_isValid = ::OpenAPI::fromJsonValue(m_super_sticker_details, json[QString("superStickerDetails")]);
    m_super_sticker_details_isSet = !json[QString("superStickerDetails")].isNull() && m_super_sticker_details_isValid;

    m_text_message_details_isValid = ::OpenAPI::fromJsonValue(m_text_message_details, json[QString("textMessageDetails")]);
    m_text_message_details_isSet = !json[QString("textMessageDetails")].isNull() && m_text_message_details_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_banned_details_isValid = ::OpenAPI::fromJsonValue(m_user_banned_details, json[QString("userBannedDetails")]);
    m_user_banned_details_isSet = !json[QString("userBannedDetails")].isNull() && m_user_banned_details_isValid;
}

QString OAILiveChatMessageSnippet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILiveChatMessageSnippet::asJsonObject() const {
    QJsonObject obj;
    if (m_author_channel_id_isSet) {
        obj.insert(QString("authorChannelId"), ::OpenAPI::toJsonValue(m_author_channel_id));
    }
    if (m_display_message_isSet) {
        obj.insert(QString("displayMessage"), ::OpenAPI::toJsonValue(m_display_message));
    }
    if (m_fan_funding_event_details.isSet()) {
        obj.insert(QString("fanFundingEventDetails"), ::OpenAPI::toJsonValue(m_fan_funding_event_details));
    }
    if (m_gift_membership_received_details.isSet()) {
        obj.insert(QString("giftMembershipReceivedDetails"), ::OpenAPI::toJsonValue(m_gift_membership_received_details));
    }
    if (m_has_display_content_isSet) {
        obj.insert(QString("hasDisplayContent"), ::OpenAPI::toJsonValue(m_has_display_content));
    }
    if (m_live_chat_id_isSet) {
        obj.insert(QString("liveChatId"), ::OpenAPI::toJsonValue(m_live_chat_id));
    }
    if (m_member_milestone_chat_details.isSet()) {
        obj.insert(QString("memberMilestoneChatDetails"), ::OpenAPI::toJsonValue(m_member_milestone_chat_details));
    }
    if (m_membership_gifting_details.isSet()) {
        obj.insert(QString("membershipGiftingDetails"), ::OpenAPI::toJsonValue(m_membership_gifting_details));
    }
    if (m_message_deleted_details.isSet()) {
        obj.insert(QString("messageDeletedDetails"), ::OpenAPI::toJsonValue(m_message_deleted_details));
    }
    if (m_message_retracted_details.isSet()) {
        obj.insert(QString("messageRetractedDetails"), ::OpenAPI::toJsonValue(m_message_retracted_details));
    }
    if (m_new_sponsor_details.isSet()) {
        obj.insert(QString("newSponsorDetails"), ::OpenAPI::toJsonValue(m_new_sponsor_details));
    }
    if (m_poll_details.isSet()) {
        obj.insert(QString("pollDetails"), ::OpenAPI::toJsonValue(m_poll_details));
    }
    if (m_published_at_isSet) {
        obj.insert(QString("publishedAt"), ::OpenAPI::toJsonValue(m_published_at));
    }
    if (m_super_chat_details.isSet()) {
        obj.insert(QString("superChatDetails"), ::OpenAPI::toJsonValue(m_super_chat_details));
    }
    if (m_super_sticker_details.isSet()) {
        obj.insert(QString("superStickerDetails"), ::OpenAPI::toJsonValue(m_super_sticker_details));
    }
    if (m_text_message_details.isSet()) {
        obj.insert(QString("textMessageDetails"), ::OpenAPI::toJsonValue(m_text_message_details));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user_banned_details.isSet()) {
        obj.insert(QString("userBannedDetails"), ::OpenAPI::toJsonValue(m_user_banned_details));
    }
    return obj;
}

QString OAILiveChatMessageSnippet::getAuthorChannelId() const {
    return m_author_channel_id;
}
void OAILiveChatMessageSnippet::setAuthorChannelId(const QString &author_channel_id) {
    m_author_channel_id = author_channel_id;
    m_author_channel_id_isSet = true;
}

bool OAILiveChatMessageSnippet::is_author_channel_id_Set() const{
    return m_author_channel_id_isSet;
}

bool OAILiveChatMessageSnippet::is_author_channel_id_Valid() const{
    return m_author_channel_id_isValid;
}

QString OAILiveChatMessageSnippet::getDisplayMessage() const {
    return m_display_message;
}
void OAILiveChatMessageSnippet::setDisplayMessage(const QString &display_message) {
    m_display_message = display_message;
    m_display_message_isSet = true;
}

bool OAILiveChatMessageSnippet::is_display_message_Set() const{
    return m_display_message_isSet;
}

bool OAILiveChatMessageSnippet::is_display_message_Valid() const{
    return m_display_message_isValid;
}

OAILiveChatFanFundingEventDetails OAILiveChatMessageSnippet::getFanFundingEventDetails() const {
    return m_fan_funding_event_details;
}
void OAILiveChatMessageSnippet::setFanFundingEventDetails(const OAILiveChatFanFundingEventDetails &fan_funding_event_details) {
    m_fan_funding_event_details = fan_funding_event_details;
    m_fan_funding_event_details_isSet = true;
}

bool OAILiveChatMessageSnippet::is_fan_funding_event_details_Set() const{
    return m_fan_funding_event_details_isSet;
}

bool OAILiveChatMessageSnippet::is_fan_funding_event_details_Valid() const{
    return m_fan_funding_event_details_isValid;
}

OAILiveChatGiftMembershipReceivedDetails OAILiveChatMessageSnippet::getGiftMembershipReceivedDetails() const {
    return m_gift_membership_received_details;
}
void OAILiveChatMessageSnippet::setGiftMembershipReceivedDetails(const OAILiveChatGiftMembershipReceivedDetails &gift_membership_received_details) {
    m_gift_membership_received_details = gift_membership_received_details;
    m_gift_membership_received_details_isSet = true;
}

bool OAILiveChatMessageSnippet::is_gift_membership_received_details_Set() const{
    return m_gift_membership_received_details_isSet;
}

bool OAILiveChatMessageSnippet::is_gift_membership_received_details_Valid() const{
    return m_gift_membership_received_details_isValid;
}

bool OAILiveChatMessageSnippet::isHasDisplayContent() const {
    return m_has_display_content;
}
void OAILiveChatMessageSnippet::setHasDisplayContent(const bool &has_display_content) {
    m_has_display_content = has_display_content;
    m_has_display_content_isSet = true;
}

bool OAILiveChatMessageSnippet::is_has_display_content_Set() const{
    return m_has_display_content_isSet;
}

bool OAILiveChatMessageSnippet::is_has_display_content_Valid() const{
    return m_has_display_content_isValid;
}

QString OAILiveChatMessageSnippet::getLiveChatId() const {
    return m_live_chat_id;
}
void OAILiveChatMessageSnippet::setLiveChatId(const QString &live_chat_id) {
    m_live_chat_id = live_chat_id;
    m_live_chat_id_isSet = true;
}

bool OAILiveChatMessageSnippet::is_live_chat_id_Set() const{
    return m_live_chat_id_isSet;
}

bool OAILiveChatMessageSnippet::is_live_chat_id_Valid() const{
    return m_live_chat_id_isValid;
}

OAILiveChatMemberMilestoneChatDetails OAILiveChatMessageSnippet::getMemberMilestoneChatDetails() const {
    return m_member_milestone_chat_details;
}
void OAILiveChatMessageSnippet::setMemberMilestoneChatDetails(const OAILiveChatMemberMilestoneChatDetails &member_milestone_chat_details) {
    m_member_milestone_chat_details = member_milestone_chat_details;
    m_member_milestone_chat_details_isSet = true;
}

bool OAILiveChatMessageSnippet::is_member_milestone_chat_details_Set() const{
    return m_member_milestone_chat_details_isSet;
}

bool OAILiveChatMessageSnippet::is_member_milestone_chat_details_Valid() const{
    return m_member_milestone_chat_details_isValid;
}

OAILiveChatMembershipGiftingDetails OAILiveChatMessageSnippet::getMembershipGiftingDetails() const {
    return m_membership_gifting_details;
}
void OAILiveChatMessageSnippet::setMembershipGiftingDetails(const OAILiveChatMembershipGiftingDetails &membership_gifting_details) {
    m_membership_gifting_details = membership_gifting_details;
    m_membership_gifting_details_isSet = true;
}

bool OAILiveChatMessageSnippet::is_membership_gifting_details_Set() const{
    return m_membership_gifting_details_isSet;
}

bool OAILiveChatMessageSnippet::is_membership_gifting_details_Valid() const{
    return m_membership_gifting_details_isValid;
}

OAILiveChatMessageDeletedDetails OAILiveChatMessageSnippet::getMessageDeletedDetails() const {
    return m_message_deleted_details;
}
void OAILiveChatMessageSnippet::setMessageDeletedDetails(const OAILiveChatMessageDeletedDetails &message_deleted_details) {
    m_message_deleted_details = message_deleted_details;
    m_message_deleted_details_isSet = true;
}

bool OAILiveChatMessageSnippet::is_message_deleted_details_Set() const{
    return m_message_deleted_details_isSet;
}

bool OAILiveChatMessageSnippet::is_message_deleted_details_Valid() const{
    return m_message_deleted_details_isValid;
}

OAILiveChatMessageRetractedDetails OAILiveChatMessageSnippet::getMessageRetractedDetails() const {
    return m_message_retracted_details;
}
void OAILiveChatMessageSnippet::setMessageRetractedDetails(const OAILiveChatMessageRetractedDetails &message_retracted_details) {
    m_message_retracted_details = message_retracted_details;
    m_message_retracted_details_isSet = true;
}

bool OAILiveChatMessageSnippet::is_message_retracted_details_Set() const{
    return m_message_retracted_details_isSet;
}

bool OAILiveChatMessageSnippet::is_message_retracted_details_Valid() const{
    return m_message_retracted_details_isValid;
}

OAILiveChatNewSponsorDetails OAILiveChatMessageSnippet::getNewSponsorDetails() const {
    return m_new_sponsor_details;
}
void OAILiveChatMessageSnippet::setNewSponsorDetails(const OAILiveChatNewSponsorDetails &new_sponsor_details) {
    m_new_sponsor_details = new_sponsor_details;
    m_new_sponsor_details_isSet = true;
}

bool OAILiveChatMessageSnippet::is_new_sponsor_details_Set() const{
    return m_new_sponsor_details_isSet;
}

bool OAILiveChatMessageSnippet::is_new_sponsor_details_Valid() const{
    return m_new_sponsor_details_isValid;
}

OAILiveChatPollDetails OAILiveChatMessageSnippet::getPollDetails() const {
    return m_poll_details;
}
void OAILiveChatMessageSnippet::setPollDetails(const OAILiveChatPollDetails &poll_details) {
    m_poll_details = poll_details;
    m_poll_details_isSet = true;
}

bool OAILiveChatMessageSnippet::is_poll_details_Set() const{
    return m_poll_details_isSet;
}

bool OAILiveChatMessageSnippet::is_poll_details_Valid() const{
    return m_poll_details_isValid;
}

QDateTime OAILiveChatMessageSnippet::getPublishedAt() const {
    return m_published_at;
}
void OAILiveChatMessageSnippet::setPublishedAt(const QDateTime &published_at) {
    m_published_at = published_at;
    m_published_at_isSet = true;
}

bool OAILiveChatMessageSnippet::is_published_at_Set() const{
    return m_published_at_isSet;
}

bool OAILiveChatMessageSnippet::is_published_at_Valid() const{
    return m_published_at_isValid;
}

OAILiveChatSuperChatDetails OAILiveChatMessageSnippet::getSuperChatDetails() const {
    return m_super_chat_details;
}
void OAILiveChatMessageSnippet::setSuperChatDetails(const OAILiveChatSuperChatDetails &super_chat_details) {
    m_super_chat_details = super_chat_details;
    m_super_chat_details_isSet = true;
}

bool OAILiveChatMessageSnippet::is_super_chat_details_Set() const{
    return m_super_chat_details_isSet;
}

bool OAILiveChatMessageSnippet::is_super_chat_details_Valid() const{
    return m_super_chat_details_isValid;
}

OAILiveChatSuperStickerDetails OAILiveChatMessageSnippet::getSuperStickerDetails() const {
    return m_super_sticker_details;
}
void OAILiveChatMessageSnippet::setSuperStickerDetails(const OAILiveChatSuperStickerDetails &super_sticker_details) {
    m_super_sticker_details = super_sticker_details;
    m_super_sticker_details_isSet = true;
}

bool OAILiveChatMessageSnippet::is_super_sticker_details_Set() const{
    return m_super_sticker_details_isSet;
}

bool OAILiveChatMessageSnippet::is_super_sticker_details_Valid() const{
    return m_super_sticker_details_isValid;
}

OAILiveChatTextMessageDetails OAILiveChatMessageSnippet::getTextMessageDetails() const {
    return m_text_message_details;
}
void OAILiveChatMessageSnippet::setTextMessageDetails(const OAILiveChatTextMessageDetails &text_message_details) {
    m_text_message_details = text_message_details;
    m_text_message_details_isSet = true;
}

bool OAILiveChatMessageSnippet::is_text_message_details_Set() const{
    return m_text_message_details_isSet;
}

bool OAILiveChatMessageSnippet::is_text_message_details_Valid() const{
    return m_text_message_details_isValid;
}

QString OAILiveChatMessageSnippet::getType() const {
    return m_type;
}
void OAILiveChatMessageSnippet::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAILiveChatMessageSnippet::is_type_Set() const{
    return m_type_isSet;
}

bool OAILiveChatMessageSnippet::is_type_Valid() const{
    return m_type_isValid;
}

OAILiveChatUserBannedMessageDetails OAILiveChatMessageSnippet::getUserBannedDetails() const {
    return m_user_banned_details;
}
void OAILiveChatMessageSnippet::setUserBannedDetails(const OAILiveChatUserBannedMessageDetails &user_banned_details) {
    m_user_banned_details = user_banned_details;
    m_user_banned_details_isSet = true;
}

bool OAILiveChatMessageSnippet::is_user_banned_details_Set() const{
    return m_user_banned_details_isSet;
}

bool OAILiveChatMessageSnippet::is_user_banned_details_Valid() const{
    return m_user_banned_details_isValid;
}

bool OAILiveChatMessageSnippet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fan_funding_event_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gift_membership_received_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_display_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_chat_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_milestone_chat_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_gifting_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_deleted_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_retracted_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_sponsor_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_poll_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_super_chat_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_super_sticker_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_message_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_banned_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILiveChatMessageSnippet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
