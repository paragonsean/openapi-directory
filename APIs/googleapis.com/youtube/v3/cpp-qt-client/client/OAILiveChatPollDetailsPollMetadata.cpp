/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILiveChatPollDetailsPollMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILiveChatPollDetailsPollMetadata::OAILiveChatPollDetailsPollMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILiveChatPollDetailsPollMetadata::OAILiveChatPollDetailsPollMetadata() {
    this->initializeModel();
}

OAILiveChatPollDetailsPollMetadata::~OAILiveChatPollDetailsPollMetadata() {}

void OAILiveChatPollDetailsPollMetadata::initializeModel() {

    m_options_isSet = false;
    m_options_isValid = false;

    m_question_text_isSet = false;
    m_question_text_isValid = false;
}

void OAILiveChatPollDetailsPollMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILiveChatPollDetailsPollMetadata::fromJsonObject(QJsonObject json) {

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_question_text_isValid = ::OpenAPI::fromJsonValue(m_question_text, json[QString("questionText")]);
    m_question_text_isSet = !json[QString("questionText")].isNull() && m_question_text_isValid;
}

QString OAILiveChatPollDetailsPollMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILiveChatPollDetailsPollMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_options.size() > 0) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_question_text_isSet) {
        obj.insert(QString("questionText"), ::OpenAPI::toJsonValue(m_question_text));
    }
    return obj;
}

QList<OAILiveChatPollDetailsPollMetadataPollOption> OAILiveChatPollDetailsPollMetadata::getOptions() const {
    return m_options;
}
void OAILiveChatPollDetailsPollMetadata::setOptions(const QList<OAILiveChatPollDetailsPollMetadataPollOption> &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAILiveChatPollDetailsPollMetadata::is_options_Set() const{
    return m_options_isSet;
}

bool OAILiveChatPollDetailsPollMetadata::is_options_Valid() const{
    return m_options_isValid;
}

QString OAILiveChatPollDetailsPollMetadata::getQuestionText() const {
    return m_question_text;
}
void OAILiveChatPollDetailsPollMetadata::setQuestionText(const QString &question_text) {
    m_question_text = question_text;
    m_question_text_isSet = true;
}

bool OAILiveChatPollDetailsPollMetadata::is_question_text_Set() const{
    return m_question_text_isSet;
}

bool OAILiveChatPollDetailsPollMetadata::is_question_text_Valid() const{
    return m_question_text_isValid;
}

bool OAILiveChatPollDetailsPollMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILiveChatPollDetailsPollMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
