/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMemberSnippet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMemberSnippet::OAIMemberSnippet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMemberSnippet::OAIMemberSnippet() {
    this->initializeModel();
}

OAIMemberSnippet::~OAIMemberSnippet() {}

void OAIMemberSnippet::initializeModel() {

    m_creator_channel_id_isSet = false;
    m_creator_channel_id_isValid = false;

    m_member_details_isSet = false;
    m_member_details_isValid = false;

    m_memberships_details_isSet = false;
    m_memberships_details_isValid = false;
}

void OAIMemberSnippet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMemberSnippet::fromJsonObject(QJsonObject json) {

    m_creator_channel_id_isValid = ::OpenAPI::fromJsonValue(m_creator_channel_id, json[QString("creatorChannelId")]);
    m_creator_channel_id_isSet = !json[QString("creatorChannelId")].isNull() && m_creator_channel_id_isValid;

    m_member_details_isValid = ::OpenAPI::fromJsonValue(m_member_details, json[QString("memberDetails")]);
    m_member_details_isSet = !json[QString("memberDetails")].isNull() && m_member_details_isValid;

    m_memberships_details_isValid = ::OpenAPI::fromJsonValue(m_memberships_details, json[QString("membershipsDetails")]);
    m_memberships_details_isSet = !json[QString("membershipsDetails")].isNull() && m_memberships_details_isValid;
}

QString OAIMemberSnippet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMemberSnippet::asJsonObject() const {
    QJsonObject obj;
    if (m_creator_channel_id_isSet) {
        obj.insert(QString("creatorChannelId"), ::OpenAPI::toJsonValue(m_creator_channel_id));
    }
    if (m_member_details.isSet()) {
        obj.insert(QString("memberDetails"), ::OpenAPI::toJsonValue(m_member_details));
    }
    if (m_memberships_details.isSet()) {
        obj.insert(QString("membershipsDetails"), ::OpenAPI::toJsonValue(m_memberships_details));
    }
    return obj;
}

QString OAIMemberSnippet::getCreatorChannelId() const {
    return m_creator_channel_id;
}
void OAIMemberSnippet::setCreatorChannelId(const QString &creator_channel_id) {
    m_creator_channel_id = creator_channel_id;
    m_creator_channel_id_isSet = true;
}

bool OAIMemberSnippet::is_creator_channel_id_Set() const{
    return m_creator_channel_id_isSet;
}

bool OAIMemberSnippet::is_creator_channel_id_Valid() const{
    return m_creator_channel_id_isValid;
}

OAIChannelProfileDetails OAIMemberSnippet::getMemberDetails() const {
    return m_member_details;
}
void OAIMemberSnippet::setMemberDetails(const OAIChannelProfileDetails &member_details) {
    m_member_details = member_details;
    m_member_details_isSet = true;
}

bool OAIMemberSnippet::is_member_details_Set() const{
    return m_member_details_isSet;
}

bool OAIMemberSnippet::is_member_details_Valid() const{
    return m_member_details_isValid;
}

OAIMembershipsDetails OAIMemberSnippet::getMembershipsDetails() const {
    return m_memberships_details;
}
void OAIMemberSnippet::setMembershipsDetails(const OAIMembershipsDetails &memberships_details) {
    m_memberships_details = memberships_details;
    m_memberships_details_isSet = true;
}

bool OAIMemberSnippet::is_memberships_details_Set() const{
    return m_memberships_details_isSet;
}

bool OAIMemberSnippet::is_memberships_details_Valid() const{
    return m_memberships_details_isValid;
}

bool OAIMemberSnippet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creator_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_memberships_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMemberSnippet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
