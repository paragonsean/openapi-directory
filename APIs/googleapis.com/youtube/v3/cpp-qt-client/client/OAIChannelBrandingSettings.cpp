/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelBrandingSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelBrandingSettings::OAIChannelBrandingSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelBrandingSettings::OAIChannelBrandingSettings() {
    this->initializeModel();
}

OAIChannelBrandingSettings::~OAIChannelBrandingSettings() {}

void OAIChannelBrandingSettings::initializeModel() {

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_hints_isSet = false;
    m_hints_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_watch_isSet = false;
    m_watch_isValid = false;
}

void OAIChannelBrandingSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelBrandingSettings::fromJsonObject(QJsonObject json) {

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_hints_isValid = ::OpenAPI::fromJsonValue(m_hints, json[QString("hints")]);
    m_hints_isSet = !json[QString("hints")].isNull() && m_hints_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_watch_isValid = ::OpenAPI::fromJsonValue(m_watch, json[QString("watch")]);
    m_watch_isSet = !json[QString("watch")].isNull() && m_watch_isValid;
}

QString OAIChannelBrandingSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelBrandingSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_channel.isSet()) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_hints.size() > 0) {
        obj.insert(QString("hints"), ::OpenAPI::toJsonValue(m_hints));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_watch.isSet()) {
        obj.insert(QString("watch"), ::OpenAPI::toJsonValue(m_watch));
    }
    return obj;
}

OAIChannelSettings OAIChannelBrandingSettings::getChannel() const {
    return m_channel;
}
void OAIChannelBrandingSettings::setChannel(const OAIChannelSettings &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIChannelBrandingSettings::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIChannelBrandingSettings::is_channel_Valid() const{
    return m_channel_isValid;
}

QList<OAIPropertyValue> OAIChannelBrandingSettings::getHints() const {
    return m_hints;
}
void OAIChannelBrandingSettings::setHints(const QList<OAIPropertyValue> &hints) {
    m_hints = hints;
    m_hints_isSet = true;
}

bool OAIChannelBrandingSettings::is_hints_Set() const{
    return m_hints_isSet;
}

bool OAIChannelBrandingSettings::is_hints_Valid() const{
    return m_hints_isValid;
}

OAIImageSettings OAIChannelBrandingSettings::getImage() const {
    return m_image;
}
void OAIChannelBrandingSettings::setImage(const OAIImageSettings &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIChannelBrandingSettings::is_image_Set() const{
    return m_image_isSet;
}

bool OAIChannelBrandingSettings::is_image_Valid() const{
    return m_image_isValid;
}

OAIWatchSettings OAIChannelBrandingSettings::getWatch() const {
    return m_watch;
}
void OAIChannelBrandingSettings::setWatch(const OAIWatchSettings &watch) {
    m_watch = watch;
    m_watch_isSet = true;
}

bool OAIChannelBrandingSettings::is_watch_Set() const{
    return m_watch_isSet;
}

bool OAIChannelBrandingSettings::is_watch_Valid() const{
    return m_watch_isValid;
}

bool OAIChannelBrandingSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_watch.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelBrandingSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
