/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelProfileDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelProfileDetails::OAIChannelProfileDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelProfileDetails::OAIChannelProfileDetails() {
    this->initializeModel();
}

OAIChannelProfileDetails::~OAIChannelProfileDetails() {}

void OAIChannelProfileDetails::initializeModel() {

    m_channel_id_isSet = false;
    m_channel_id_isValid = false;

    m_channel_url_isSet = false;
    m_channel_url_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_profile_image_url_isSet = false;
    m_profile_image_url_isValid = false;
}

void OAIChannelProfileDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelProfileDetails::fromJsonObject(QJsonObject json) {

    m_channel_id_isValid = ::OpenAPI::fromJsonValue(m_channel_id, json[QString("channelId")]);
    m_channel_id_isSet = !json[QString("channelId")].isNull() && m_channel_id_isValid;

    m_channel_url_isValid = ::OpenAPI::fromJsonValue(m_channel_url, json[QString("channelUrl")]);
    m_channel_url_isSet = !json[QString("channelUrl")].isNull() && m_channel_url_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_profile_image_url_isValid = ::OpenAPI::fromJsonValue(m_profile_image_url, json[QString("profileImageUrl")]);
    m_profile_image_url_isSet = !json[QString("profileImageUrl")].isNull() && m_profile_image_url_isValid;
}

QString OAIChannelProfileDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelProfileDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_id_isSet) {
        obj.insert(QString("channelId"), ::OpenAPI::toJsonValue(m_channel_id));
    }
    if (m_channel_url_isSet) {
        obj.insert(QString("channelUrl"), ::OpenAPI::toJsonValue(m_channel_url));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_profile_image_url_isSet) {
        obj.insert(QString("profileImageUrl"), ::OpenAPI::toJsonValue(m_profile_image_url));
    }
    return obj;
}

QString OAIChannelProfileDetails::getChannelId() const {
    return m_channel_id;
}
void OAIChannelProfileDetails::setChannelId(const QString &channel_id) {
    m_channel_id = channel_id;
    m_channel_id_isSet = true;
}

bool OAIChannelProfileDetails::is_channel_id_Set() const{
    return m_channel_id_isSet;
}

bool OAIChannelProfileDetails::is_channel_id_Valid() const{
    return m_channel_id_isValid;
}

QString OAIChannelProfileDetails::getChannelUrl() const {
    return m_channel_url;
}
void OAIChannelProfileDetails::setChannelUrl(const QString &channel_url) {
    m_channel_url = channel_url;
    m_channel_url_isSet = true;
}

bool OAIChannelProfileDetails::is_channel_url_Set() const{
    return m_channel_url_isSet;
}

bool OAIChannelProfileDetails::is_channel_url_Valid() const{
    return m_channel_url_isValid;
}

QString OAIChannelProfileDetails::getDisplayName() const {
    return m_display_name;
}
void OAIChannelProfileDetails::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIChannelProfileDetails::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIChannelProfileDetails::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIChannelProfileDetails::getProfileImageUrl() const {
    return m_profile_image_url;
}
void OAIChannelProfileDetails::setProfileImageUrl(const QString &profile_image_url) {
    m_profile_image_url = profile_image_url;
    m_profile_image_url_isSet = true;
}

bool OAIChannelProfileDetails::is_profile_image_url_Set() const{
    return m_profile_image_url_isSet;
}

bool OAIChannelProfileDetails::is_profile_image_url_Valid() const{
    return m_profile_image_url_isValid;
}

bool OAIChannelProfileDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelProfileDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
