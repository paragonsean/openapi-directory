/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICaptionSnippet.h
 *
 * Basic details about a caption track, such as its language and name.
 */

#ifndef OAICaptionSnippet_H
#define OAICaptionSnippet_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICaptionSnippet : public OAIObject {
public:
    OAICaptionSnippet();
    OAICaptionSnippet(QString json);
    ~OAICaptionSnippet() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAudioTrackType() const;
    void setAudioTrackType(const QString &audio_track_type);
    bool is_audio_track_type_Set() const;
    bool is_audio_track_type_Valid() const;

    QString getFailureReason() const;
    void setFailureReason(const QString &failure_reason);
    bool is_failure_reason_Set() const;
    bool is_failure_reason_Valid() const;

    bool isIsAutoSynced() const;
    void setIsAutoSynced(const bool &is_auto_synced);
    bool is_is_auto_synced_Set() const;
    bool is_is_auto_synced_Valid() const;

    bool isIsCc() const;
    void setIsCc(const bool &is_cc);
    bool is_is_cc_Set() const;
    bool is_is_cc_Valid() const;

    bool isIsDraft() const;
    void setIsDraft(const bool &is_draft);
    bool is_is_draft_Set() const;
    bool is_is_draft_Valid() const;

    bool isIsEasyReader() const;
    void setIsEasyReader(const bool &is_easy_reader);
    bool is_is_easy_reader_Set() const;
    bool is_is_easy_reader_Valid() const;

    bool isIsLarge() const;
    void setIsLarge(const bool &is_large);
    bool is_is_large_Set() const;
    bool is_is_large_Valid() const;

    QString getLanguage() const;
    void setLanguage(const QString &language);
    bool is_language_Set() const;
    bool is_language_Valid() const;

    QDateTime getLastUpdated() const;
    void setLastUpdated(const QDateTime &last_updated);
    bool is_last_updated_Set() const;
    bool is_last_updated_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getTrackKind() const;
    void setTrackKind(const QString &track_kind);
    bool is_track_kind_Set() const;
    bool is_track_kind_Valid() const;

    QString getVideoId() const;
    void setVideoId(const QString &video_id);
    bool is_video_id_Set() const;
    bool is_video_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_audio_track_type;
    bool m_audio_track_type_isSet;
    bool m_audio_track_type_isValid;

    QString m_failure_reason;
    bool m_failure_reason_isSet;
    bool m_failure_reason_isValid;

    bool m_is_auto_synced;
    bool m_is_auto_synced_isSet;
    bool m_is_auto_synced_isValid;

    bool m_is_cc;
    bool m_is_cc_isSet;
    bool m_is_cc_isValid;

    bool m_is_draft;
    bool m_is_draft_isSet;
    bool m_is_draft_isValid;

    bool m_is_easy_reader;
    bool m_is_easy_reader_isSet;
    bool m_is_easy_reader_isValid;

    bool m_is_large;
    bool m_is_large_isSet;
    bool m_is_large_isValid;

    QString m_language;
    bool m_language_isSet;
    bool m_language_isValid;

    QDateTime m_last_updated;
    bool m_last_updated_isSet;
    bool m_last_updated_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_track_kind;
    bool m_track_kind_isSet;
    bool m_track_kind_isValid;

    QString m_video_id;
    bool m_video_id_isSet;
    bool m_video_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICaptionSnippet)

#endif // OAICaptionSnippet_H
