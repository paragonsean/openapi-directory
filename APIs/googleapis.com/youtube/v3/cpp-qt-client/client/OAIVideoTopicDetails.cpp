/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoTopicDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoTopicDetails::OAIVideoTopicDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoTopicDetails::OAIVideoTopicDetails() {
    this->initializeModel();
}

OAIVideoTopicDetails::~OAIVideoTopicDetails() {}

void OAIVideoTopicDetails::initializeModel() {

    m_relevant_topic_ids_isSet = false;
    m_relevant_topic_ids_isValid = false;

    m_topic_categories_isSet = false;
    m_topic_categories_isValid = false;

    m_topic_ids_isSet = false;
    m_topic_ids_isValid = false;
}

void OAIVideoTopicDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoTopicDetails::fromJsonObject(QJsonObject json) {

    m_relevant_topic_ids_isValid = ::OpenAPI::fromJsonValue(m_relevant_topic_ids, json[QString("relevantTopicIds")]);
    m_relevant_topic_ids_isSet = !json[QString("relevantTopicIds")].isNull() && m_relevant_topic_ids_isValid;

    m_topic_categories_isValid = ::OpenAPI::fromJsonValue(m_topic_categories, json[QString("topicCategories")]);
    m_topic_categories_isSet = !json[QString("topicCategories")].isNull() && m_topic_categories_isValid;

    m_topic_ids_isValid = ::OpenAPI::fromJsonValue(m_topic_ids, json[QString("topicIds")]);
    m_topic_ids_isSet = !json[QString("topicIds")].isNull() && m_topic_ids_isValid;
}

QString OAIVideoTopicDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoTopicDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_relevant_topic_ids.size() > 0) {
        obj.insert(QString("relevantTopicIds"), ::OpenAPI::toJsonValue(m_relevant_topic_ids));
    }
    if (m_topic_categories.size() > 0) {
        obj.insert(QString("topicCategories"), ::OpenAPI::toJsonValue(m_topic_categories));
    }
    if (m_topic_ids.size() > 0) {
        obj.insert(QString("topicIds"), ::OpenAPI::toJsonValue(m_topic_ids));
    }
    return obj;
}

QList<QString> OAIVideoTopicDetails::getRelevantTopicIds() const {
    return m_relevant_topic_ids;
}
void OAIVideoTopicDetails::setRelevantTopicIds(const QList<QString> &relevant_topic_ids) {
    m_relevant_topic_ids = relevant_topic_ids;
    m_relevant_topic_ids_isSet = true;
}

bool OAIVideoTopicDetails::is_relevant_topic_ids_Set() const{
    return m_relevant_topic_ids_isSet;
}

bool OAIVideoTopicDetails::is_relevant_topic_ids_Valid() const{
    return m_relevant_topic_ids_isValid;
}

QList<QString> OAIVideoTopicDetails::getTopicCategories() const {
    return m_topic_categories;
}
void OAIVideoTopicDetails::setTopicCategories(const QList<QString> &topic_categories) {
    m_topic_categories = topic_categories;
    m_topic_categories_isSet = true;
}

bool OAIVideoTopicDetails::is_topic_categories_Set() const{
    return m_topic_categories_isSet;
}

bool OAIVideoTopicDetails::is_topic_categories_Valid() const{
    return m_topic_categories_isValid;
}

QList<QString> OAIVideoTopicDetails::getTopicIds() const {
    return m_topic_ids;
}
void OAIVideoTopicDetails::setTopicIds(const QList<QString> &topic_ids) {
    m_topic_ids = topic_ids;
    m_topic_ids_isSet = true;
}

bool OAIVideoTopicDetails::is_topic_ids_Set() const{
    return m_topic_ids_isSet;
}

bool OAIVideoTopicDetails::is_topic_ids_Valid() const{
    return m_topic_ids_isValid;
}

bool OAIVideoTopicDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_relevant_topic_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoTopicDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
