/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoProcessingDetailsProcessingProgress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoProcessingDetailsProcessingProgress::OAIVideoProcessingDetailsProcessingProgress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoProcessingDetailsProcessingProgress::OAIVideoProcessingDetailsProcessingProgress() {
    this->initializeModel();
}

OAIVideoProcessingDetailsProcessingProgress::~OAIVideoProcessingDetailsProcessingProgress() {}

void OAIVideoProcessingDetailsProcessingProgress::initializeModel() {

    m_parts_processed_isSet = false;
    m_parts_processed_isValid = false;

    m_parts_total_isSet = false;
    m_parts_total_isValid = false;

    m_time_left_ms_isSet = false;
    m_time_left_ms_isValid = false;
}

void OAIVideoProcessingDetailsProcessingProgress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoProcessingDetailsProcessingProgress::fromJsonObject(QJsonObject json) {

    m_parts_processed_isValid = ::OpenAPI::fromJsonValue(m_parts_processed, json[QString("partsProcessed")]);
    m_parts_processed_isSet = !json[QString("partsProcessed")].isNull() && m_parts_processed_isValid;

    m_parts_total_isValid = ::OpenAPI::fromJsonValue(m_parts_total, json[QString("partsTotal")]);
    m_parts_total_isSet = !json[QString("partsTotal")].isNull() && m_parts_total_isValid;

    m_time_left_ms_isValid = ::OpenAPI::fromJsonValue(m_time_left_ms, json[QString("timeLeftMs")]);
    m_time_left_ms_isSet = !json[QString("timeLeftMs")].isNull() && m_time_left_ms_isValid;
}

QString OAIVideoProcessingDetailsProcessingProgress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoProcessingDetailsProcessingProgress::asJsonObject() const {
    QJsonObject obj;
    if (m_parts_processed_isSet) {
        obj.insert(QString("partsProcessed"), ::OpenAPI::toJsonValue(m_parts_processed));
    }
    if (m_parts_total_isSet) {
        obj.insert(QString("partsTotal"), ::OpenAPI::toJsonValue(m_parts_total));
    }
    if (m_time_left_ms_isSet) {
        obj.insert(QString("timeLeftMs"), ::OpenAPI::toJsonValue(m_time_left_ms));
    }
    return obj;
}

QString OAIVideoProcessingDetailsProcessingProgress::getPartsProcessed() const {
    return m_parts_processed;
}
void OAIVideoProcessingDetailsProcessingProgress::setPartsProcessed(const QString &parts_processed) {
    m_parts_processed = parts_processed;
    m_parts_processed_isSet = true;
}

bool OAIVideoProcessingDetailsProcessingProgress::is_parts_processed_Set() const{
    return m_parts_processed_isSet;
}

bool OAIVideoProcessingDetailsProcessingProgress::is_parts_processed_Valid() const{
    return m_parts_processed_isValid;
}

QString OAIVideoProcessingDetailsProcessingProgress::getPartsTotal() const {
    return m_parts_total;
}
void OAIVideoProcessingDetailsProcessingProgress::setPartsTotal(const QString &parts_total) {
    m_parts_total = parts_total;
    m_parts_total_isSet = true;
}

bool OAIVideoProcessingDetailsProcessingProgress::is_parts_total_Set() const{
    return m_parts_total_isSet;
}

bool OAIVideoProcessingDetailsProcessingProgress::is_parts_total_Valid() const{
    return m_parts_total_isValid;
}

QString OAIVideoProcessingDetailsProcessingProgress::getTimeLeftMs() const {
    return m_time_left_ms;
}
void OAIVideoProcessingDetailsProcessingProgress::setTimeLeftMs(const QString &time_left_ms) {
    m_time_left_ms = time_left_ms;
    m_time_left_ms_isSet = true;
}

bool OAIVideoProcessingDetailsProcessingProgress::is_time_left_ms_Set() const{
    return m_time_left_ms_isSet;
}

bool OAIVideoProcessingDetailsProcessingProgress::is_time_left_ms_Valid() const{
    return m_time_left_ms_isValid;
}

bool OAIVideoProcessingDetailsProcessingProgress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_parts_processed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parts_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_left_ms_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoProcessingDetailsProcessingProgress::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
