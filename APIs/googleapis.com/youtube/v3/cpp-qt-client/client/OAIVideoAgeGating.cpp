/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoAgeGating.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoAgeGating::OAIVideoAgeGating(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoAgeGating::OAIVideoAgeGating() {
    this->initializeModel();
}

OAIVideoAgeGating::~OAIVideoAgeGating() {}

void OAIVideoAgeGating::initializeModel() {

    m_alcohol_content_isSet = false;
    m_alcohol_content_isValid = false;

    m_restricted_isSet = false;
    m_restricted_isValid = false;

    m_video_game_rating_isSet = false;
    m_video_game_rating_isValid = false;
}

void OAIVideoAgeGating::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoAgeGating::fromJsonObject(QJsonObject json) {

    m_alcohol_content_isValid = ::OpenAPI::fromJsonValue(m_alcohol_content, json[QString("alcoholContent")]);
    m_alcohol_content_isSet = !json[QString("alcoholContent")].isNull() && m_alcohol_content_isValid;

    m_restricted_isValid = ::OpenAPI::fromJsonValue(m_restricted, json[QString("restricted")]);
    m_restricted_isSet = !json[QString("restricted")].isNull() && m_restricted_isValid;

    m_video_game_rating_isValid = ::OpenAPI::fromJsonValue(m_video_game_rating, json[QString("videoGameRating")]);
    m_video_game_rating_isSet = !json[QString("videoGameRating")].isNull() && m_video_game_rating_isValid;
}

QString OAIVideoAgeGating::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoAgeGating::asJsonObject() const {
    QJsonObject obj;
    if (m_alcohol_content_isSet) {
        obj.insert(QString("alcoholContent"), ::OpenAPI::toJsonValue(m_alcohol_content));
    }
    if (m_restricted_isSet) {
        obj.insert(QString("restricted"), ::OpenAPI::toJsonValue(m_restricted));
    }
    if (m_video_game_rating_isSet) {
        obj.insert(QString("videoGameRating"), ::OpenAPI::toJsonValue(m_video_game_rating));
    }
    return obj;
}

bool OAIVideoAgeGating::isAlcoholContent() const {
    return m_alcohol_content;
}
void OAIVideoAgeGating::setAlcoholContent(const bool &alcohol_content) {
    m_alcohol_content = alcohol_content;
    m_alcohol_content_isSet = true;
}

bool OAIVideoAgeGating::is_alcohol_content_Set() const{
    return m_alcohol_content_isSet;
}

bool OAIVideoAgeGating::is_alcohol_content_Valid() const{
    return m_alcohol_content_isValid;
}

bool OAIVideoAgeGating::isRestricted() const {
    return m_restricted;
}
void OAIVideoAgeGating::setRestricted(const bool &restricted) {
    m_restricted = restricted;
    m_restricted_isSet = true;
}

bool OAIVideoAgeGating::is_restricted_Set() const{
    return m_restricted_isSet;
}

bool OAIVideoAgeGating::is_restricted_Valid() const{
    return m_restricted_isValid;
}

QString OAIVideoAgeGating::getVideoGameRating() const {
    return m_video_game_rating;
}
void OAIVideoAgeGating::setVideoGameRating(const QString &video_game_rating) {
    m_video_game_rating = video_game_rating;
    m_video_game_rating_isSet = true;
}

bool OAIVideoAgeGating::is_video_game_rating_Set() const{
    return m_video_game_rating_isSet;
}

bool OAIVideoAgeGating::is_video_game_rating_Valid() const{
    return m_video_game_rating_isValid;
}

bool OAIVideoAgeGating::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alcohol_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restricted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_game_rating_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoAgeGating::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
