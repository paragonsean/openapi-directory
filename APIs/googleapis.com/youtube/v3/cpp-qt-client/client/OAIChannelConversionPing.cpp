/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelConversionPing.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelConversionPing::OAIChannelConversionPing(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelConversionPing::OAIChannelConversionPing() {
    this->initializeModel();
}

OAIChannelConversionPing::~OAIChannelConversionPing() {}

void OAIChannelConversionPing::initializeModel() {

    m_context_isSet = false;
    m_context_isValid = false;

    m_conversion_url_isSet = false;
    m_conversion_url_isValid = false;
}

void OAIChannelConversionPing::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelConversionPing::fromJsonObject(QJsonObject json) {

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_conversion_url_isValid = ::OpenAPI::fromJsonValue(m_conversion_url, json[QString("conversionUrl")]);
    m_conversion_url_isSet = !json[QString("conversionUrl")].isNull() && m_conversion_url_isValid;
}

QString OAIChannelConversionPing::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelConversionPing::asJsonObject() const {
    QJsonObject obj;
    if (m_context_isSet) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_conversion_url_isSet) {
        obj.insert(QString("conversionUrl"), ::OpenAPI::toJsonValue(m_conversion_url));
    }
    return obj;
}

QString OAIChannelConversionPing::getContext() const {
    return m_context;
}
void OAIChannelConversionPing::setContext(const QString &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIChannelConversionPing::is_context_Set() const{
    return m_context_isSet;
}

bool OAIChannelConversionPing::is_context_Valid() const{
    return m_context_isValid;
}

QString OAIChannelConversionPing::getConversionUrl() const {
    return m_conversion_url;
}
void OAIChannelConversionPing::setConversionUrl(const QString &conversion_url) {
    m_conversion_url = conversion_url;
    m_conversion_url_isSet = true;
}

bool OAIChannelConversionPing::is_conversion_url_Set() const{
    return m_conversion_url_isSet;
}

bool OAIChannelConversionPing::is_conversion_url_Valid() const{
    return m_conversion_url_isValid;
}

bool OAIChannelConversionPing::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversion_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelConversionPing::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
