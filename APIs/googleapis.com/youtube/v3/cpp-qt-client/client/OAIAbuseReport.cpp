/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAbuseReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAbuseReport::OAIAbuseReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAbuseReport::OAIAbuseReport() {
    this->initializeModel();
}

OAIAbuseReport::~OAIAbuseReport() {}

void OAIAbuseReport::initializeModel() {

    m_abuse_types_isSet = false;
    m_abuse_types_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_related_entities_isSet = false;
    m_related_entities_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;
}

void OAIAbuseReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAbuseReport::fromJsonObject(QJsonObject json) {

    m_abuse_types_isValid = ::OpenAPI::fromJsonValue(m_abuse_types, json[QString("abuseTypes")]);
    m_abuse_types_isSet = !json[QString("abuseTypes")].isNull() && m_abuse_types_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_related_entities_isValid = ::OpenAPI::fromJsonValue(m_related_entities, json[QString("relatedEntities")]);
    m_related_entities_isSet = !json[QString("relatedEntities")].isNull() && m_related_entities_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;
}

QString OAIAbuseReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAbuseReport::asJsonObject() const {
    QJsonObject obj;
    if (m_abuse_types.size() > 0) {
        obj.insert(QString("abuseTypes"), ::OpenAPI::toJsonValue(m_abuse_types));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_related_entities.size() > 0) {
        obj.insert(QString("relatedEntities"), ::OpenAPI::toJsonValue(m_related_entities));
    }
    if (m_subject.isSet()) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    return obj;
}

QList<OAIAbuseType> OAIAbuseReport::getAbuseTypes() const {
    return m_abuse_types;
}
void OAIAbuseReport::setAbuseTypes(const QList<OAIAbuseType> &abuse_types) {
    m_abuse_types = abuse_types;
    m_abuse_types_isSet = true;
}

bool OAIAbuseReport::is_abuse_types_Set() const{
    return m_abuse_types_isSet;
}

bool OAIAbuseReport::is_abuse_types_Valid() const{
    return m_abuse_types_isValid;
}

QString OAIAbuseReport::getDescription() const {
    return m_description;
}
void OAIAbuseReport::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAbuseReport::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAbuseReport::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIRelatedEntity> OAIAbuseReport::getRelatedEntities() const {
    return m_related_entities;
}
void OAIAbuseReport::setRelatedEntities(const QList<OAIRelatedEntity> &related_entities) {
    m_related_entities = related_entities;
    m_related_entities_isSet = true;
}

bool OAIAbuseReport::is_related_entities_Set() const{
    return m_related_entities_isSet;
}

bool OAIAbuseReport::is_related_entities_Valid() const{
    return m_related_entities_isValid;
}

OAIEntity OAIAbuseReport::getSubject() const {
    return m_subject;
}
void OAIAbuseReport::setSubject(const OAIEntity &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIAbuseReport::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIAbuseReport::is_subject_Valid() const{
    return m_subject_isValid;
}

bool OAIAbuseReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_abuse_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_entities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAbuseReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
