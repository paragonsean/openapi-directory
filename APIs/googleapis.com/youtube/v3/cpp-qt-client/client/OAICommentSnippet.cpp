/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommentSnippet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommentSnippet::OAICommentSnippet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommentSnippet::OAICommentSnippet() {
    this->initializeModel();
}

OAICommentSnippet::~OAICommentSnippet() {}

void OAICommentSnippet::initializeModel() {

    m_author_channel_id_isSet = false;
    m_author_channel_id_isValid = false;

    m_author_channel_url_isSet = false;
    m_author_channel_url_isValid = false;

    m_author_display_name_isSet = false;
    m_author_display_name_isValid = false;

    m_author_profile_image_url_isSet = false;
    m_author_profile_image_url_isValid = false;

    m_can_rate_isSet = false;
    m_can_rate_isValid = false;

    m_channel_id_isSet = false;
    m_channel_id_isValid = false;

    m_like_count_isSet = false;
    m_like_count_isValid = false;

    m_moderation_status_isSet = false;
    m_moderation_status_isValid = false;

    m_parent_id_isSet = false;
    m_parent_id_isValid = false;

    m_published_at_isSet = false;
    m_published_at_isValid = false;

    m_text_display_isSet = false;
    m_text_display_isValid = false;

    m_text_original_isSet = false;
    m_text_original_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_video_id_isSet = false;
    m_video_id_isValid = false;

    m_viewer_rating_isSet = false;
    m_viewer_rating_isValid = false;
}

void OAICommentSnippet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommentSnippet::fromJsonObject(QJsonObject json) {

    m_author_channel_id_isValid = ::OpenAPI::fromJsonValue(m_author_channel_id, json[QString("authorChannelId")]);
    m_author_channel_id_isSet = !json[QString("authorChannelId")].isNull() && m_author_channel_id_isValid;

    m_author_channel_url_isValid = ::OpenAPI::fromJsonValue(m_author_channel_url, json[QString("authorChannelUrl")]);
    m_author_channel_url_isSet = !json[QString("authorChannelUrl")].isNull() && m_author_channel_url_isValid;

    m_author_display_name_isValid = ::OpenAPI::fromJsonValue(m_author_display_name, json[QString("authorDisplayName")]);
    m_author_display_name_isSet = !json[QString("authorDisplayName")].isNull() && m_author_display_name_isValid;

    m_author_profile_image_url_isValid = ::OpenAPI::fromJsonValue(m_author_profile_image_url, json[QString("authorProfileImageUrl")]);
    m_author_profile_image_url_isSet = !json[QString("authorProfileImageUrl")].isNull() && m_author_profile_image_url_isValid;

    m_can_rate_isValid = ::OpenAPI::fromJsonValue(m_can_rate, json[QString("canRate")]);
    m_can_rate_isSet = !json[QString("canRate")].isNull() && m_can_rate_isValid;

    m_channel_id_isValid = ::OpenAPI::fromJsonValue(m_channel_id, json[QString("channelId")]);
    m_channel_id_isSet = !json[QString("channelId")].isNull() && m_channel_id_isValid;

    m_like_count_isValid = ::OpenAPI::fromJsonValue(m_like_count, json[QString("likeCount")]);
    m_like_count_isSet = !json[QString("likeCount")].isNull() && m_like_count_isValid;

    m_moderation_status_isValid = ::OpenAPI::fromJsonValue(m_moderation_status, json[QString("moderationStatus")]);
    m_moderation_status_isSet = !json[QString("moderationStatus")].isNull() && m_moderation_status_isValid;

    m_parent_id_isValid = ::OpenAPI::fromJsonValue(m_parent_id, json[QString("parentId")]);
    m_parent_id_isSet = !json[QString("parentId")].isNull() && m_parent_id_isValid;

    m_published_at_isValid = ::OpenAPI::fromJsonValue(m_published_at, json[QString("publishedAt")]);
    m_published_at_isSet = !json[QString("publishedAt")].isNull() && m_published_at_isValid;

    m_text_display_isValid = ::OpenAPI::fromJsonValue(m_text_display, json[QString("textDisplay")]);
    m_text_display_isSet = !json[QString("textDisplay")].isNull() && m_text_display_isValid;

    m_text_original_isValid = ::OpenAPI::fromJsonValue(m_text_original, json[QString("textOriginal")]);
    m_text_original_isSet = !json[QString("textOriginal")].isNull() && m_text_original_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;

    m_video_id_isValid = ::OpenAPI::fromJsonValue(m_video_id, json[QString("videoId")]);
    m_video_id_isSet = !json[QString("videoId")].isNull() && m_video_id_isValid;

    m_viewer_rating_isValid = ::OpenAPI::fromJsonValue(m_viewer_rating, json[QString("viewerRating")]);
    m_viewer_rating_isSet = !json[QString("viewerRating")].isNull() && m_viewer_rating_isValid;
}

QString OAICommentSnippet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommentSnippet::asJsonObject() const {
    QJsonObject obj;
    if (m_author_channel_id.isSet()) {
        obj.insert(QString("authorChannelId"), ::OpenAPI::toJsonValue(m_author_channel_id));
    }
    if (m_author_channel_url_isSet) {
        obj.insert(QString("authorChannelUrl"), ::OpenAPI::toJsonValue(m_author_channel_url));
    }
    if (m_author_display_name_isSet) {
        obj.insert(QString("authorDisplayName"), ::OpenAPI::toJsonValue(m_author_display_name));
    }
    if (m_author_profile_image_url_isSet) {
        obj.insert(QString("authorProfileImageUrl"), ::OpenAPI::toJsonValue(m_author_profile_image_url));
    }
    if (m_can_rate_isSet) {
        obj.insert(QString("canRate"), ::OpenAPI::toJsonValue(m_can_rate));
    }
    if (m_channel_id_isSet) {
        obj.insert(QString("channelId"), ::OpenAPI::toJsonValue(m_channel_id));
    }
    if (m_like_count_isSet) {
        obj.insert(QString("likeCount"), ::OpenAPI::toJsonValue(m_like_count));
    }
    if (m_moderation_status_isSet) {
        obj.insert(QString("moderationStatus"), ::OpenAPI::toJsonValue(m_moderation_status));
    }
    if (m_parent_id_isSet) {
        obj.insert(QString("parentId"), ::OpenAPI::toJsonValue(m_parent_id));
    }
    if (m_published_at_isSet) {
        obj.insert(QString("publishedAt"), ::OpenAPI::toJsonValue(m_published_at));
    }
    if (m_text_display_isSet) {
        obj.insert(QString("textDisplay"), ::OpenAPI::toJsonValue(m_text_display));
    }
    if (m_text_original_isSet) {
        obj.insert(QString("textOriginal"), ::OpenAPI::toJsonValue(m_text_original));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_video_id_isSet) {
        obj.insert(QString("videoId"), ::OpenAPI::toJsonValue(m_video_id));
    }
    if (m_viewer_rating_isSet) {
        obj.insert(QString("viewerRating"), ::OpenAPI::toJsonValue(m_viewer_rating));
    }
    return obj;
}

OAICommentSnippetAuthorChannelId OAICommentSnippet::getAuthorChannelId() const {
    return m_author_channel_id;
}
void OAICommentSnippet::setAuthorChannelId(const OAICommentSnippetAuthorChannelId &author_channel_id) {
    m_author_channel_id = author_channel_id;
    m_author_channel_id_isSet = true;
}

bool OAICommentSnippet::is_author_channel_id_Set() const{
    return m_author_channel_id_isSet;
}

bool OAICommentSnippet::is_author_channel_id_Valid() const{
    return m_author_channel_id_isValid;
}

QString OAICommentSnippet::getAuthorChannelUrl() const {
    return m_author_channel_url;
}
void OAICommentSnippet::setAuthorChannelUrl(const QString &author_channel_url) {
    m_author_channel_url = author_channel_url;
    m_author_channel_url_isSet = true;
}

bool OAICommentSnippet::is_author_channel_url_Set() const{
    return m_author_channel_url_isSet;
}

bool OAICommentSnippet::is_author_channel_url_Valid() const{
    return m_author_channel_url_isValid;
}

QString OAICommentSnippet::getAuthorDisplayName() const {
    return m_author_display_name;
}
void OAICommentSnippet::setAuthorDisplayName(const QString &author_display_name) {
    m_author_display_name = author_display_name;
    m_author_display_name_isSet = true;
}

bool OAICommentSnippet::is_author_display_name_Set() const{
    return m_author_display_name_isSet;
}

bool OAICommentSnippet::is_author_display_name_Valid() const{
    return m_author_display_name_isValid;
}

QString OAICommentSnippet::getAuthorProfileImageUrl() const {
    return m_author_profile_image_url;
}
void OAICommentSnippet::setAuthorProfileImageUrl(const QString &author_profile_image_url) {
    m_author_profile_image_url = author_profile_image_url;
    m_author_profile_image_url_isSet = true;
}

bool OAICommentSnippet::is_author_profile_image_url_Set() const{
    return m_author_profile_image_url_isSet;
}

bool OAICommentSnippet::is_author_profile_image_url_Valid() const{
    return m_author_profile_image_url_isValid;
}

bool OAICommentSnippet::isCanRate() const {
    return m_can_rate;
}
void OAICommentSnippet::setCanRate(const bool &can_rate) {
    m_can_rate = can_rate;
    m_can_rate_isSet = true;
}

bool OAICommentSnippet::is_can_rate_Set() const{
    return m_can_rate_isSet;
}

bool OAICommentSnippet::is_can_rate_Valid() const{
    return m_can_rate_isValid;
}

QString OAICommentSnippet::getChannelId() const {
    return m_channel_id;
}
void OAICommentSnippet::setChannelId(const QString &channel_id) {
    m_channel_id = channel_id;
    m_channel_id_isSet = true;
}

bool OAICommentSnippet::is_channel_id_Set() const{
    return m_channel_id_isSet;
}

bool OAICommentSnippet::is_channel_id_Valid() const{
    return m_channel_id_isValid;
}

qint32 OAICommentSnippet::getLikeCount() const {
    return m_like_count;
}
void OAICommentSnippet::setLikeCount(const qint32 &like_count) {
    m_like_count = like_count;
    m_like_count_isSet = true;
}

bool OAICommentSnippet::is_like_count_Set() const{
    return m_like_count_isSet;
}

bool OAICommentSnippet::is_like_count_Valid() const{
    return m_like_count_isValid;
}

QString OAICommentSnippet::getModerationStatus() const {
    return m_moderation_status;
}
void OAICommentSnippet::setModerationStatus(const QString &moderation_status) {
    m_moderation_status = moderation_status;
    m_moderation_status_isSet = true;
}

bool OAICommentSnippet::is_moderation_status_Set() const{
    return m_moderation_status_isSet;
}

bool OAICommentSnippet::is_moderation_status_Valid() const{
    return m_moderation_status_isValid;
}

QString OAICommentSnippet::getParentId() const {
    return m_parent_id;
}
void OAICommentSnippet::setParentId(const QString &parent_id) {
    m_parent_id = parent_id;
    m_parent_id_isSet = true;
}

bool OAICommentSnippet::is_parent_id_Set() const{
    return m_parent_id_isSet;
}

bool OAICommentSnippet::is_parent_id_Valid() const{
    return m_parent_id_isValid;
}

QDateTime OAICommentSnippet::getPublishedAt() const {
    return m_published_at;
}
void OAICommentSnippet::setPublishedAt(const QDateTime &published_at) {
    m_published_at = published_at;
    m_published_at_isSet = true;
}

bool OAICommentSnippet::is_published_at_Set() const{
    return m_published_at_isSet;
}

bool OAICommentSnippet::is_published_at_Valid() const{
    return m_published_at_isValid;
}

QString OAICommentSnippet::getTextDisplay() const {
    return m_text_display;
}
void OAICommentSnippet::setTextDisplay(const QString &text_display) {
    m_text_display = text_display;
    m_text_display_isSet = true;
}

bool OAICommentSnippet::is_text_display_Set() const{
    return m_text_display_isSet;
}

bool OAICommentSnippet::is_text_display_Valid() const{
    return m_text_display_isValid;
}

QString OAICommentSnippet::getTextOriginal() const {
    return m_text_original;
}
void OAICommentSnippet::setTextOriginal(const QString &text_original) {
    m_text_original = text_original;
    m_text_original_isSet = true;
}

bool OAICommentSnippet::is_text_original_Set() const{
    return m_text_original_isSet;
}

bool OAICommentSnippet::is_text_original_Valid() const{
    return m_text_original_isValid;
}

QDateTime OAICommentSnippet::getUpdatedAt() const {
    return m_updated_at;
}
void OAICommentSnippet::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAICommentSnippet::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAICommentSnippet::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAICommentSnippet::getVideoId() const {
    return m_video_id;
}
void OAICommentSnippet::setVideoId(const QString &video_id) {
    m_video_id = video_id;
    m_video_id_isSet = true;
}

bool OAICommentSnippet::is_video_id_Set() const{
    return m_video_id_isSet;
}

bool OAICommentSnippet::is_video_id_Valid() const{
    return m_video_id_isValid;
}

QString OAICommentSnippet::getViewerRating() const {
    return m_viewer_rating;
}
void OAICommentSnippet::setViewerRating(const QString &viewer_rating) {
    m_viewer_rating = viewer_rating;
    m_viewer_rating_isSet = true;
}

bool OAICommentSnippet::is_viewer_rating_Set() const{
    return m_viewer_rating_isSet;
}

bool OAICommentSnippet::is_viewer_rating_Valid() const{
    return m_viewer_rating_isValid;
}

bool OAICommentSnippet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author_channel_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_channel_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_profile_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_like_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moderation_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_original_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_viewer_rating_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommentSnippet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
