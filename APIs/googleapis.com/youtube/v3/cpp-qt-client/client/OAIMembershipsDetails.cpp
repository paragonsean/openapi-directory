/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMembershipsDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMembershipsDetails::OAIMembershipsDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMembershipsDetails::OAIMembershipsDetails() {
    this->initializeModel();
}

OAIMembershipsDetails::~OAIMembershipsDetails() {}

void OAIMembershipsDetails::initializeModel() {

    m_accessible_levels_isSet = false;
    m_accessible_levels_isValid = false;

    m_highest_accessible_level_isSet = false;
    m_highest_accessible_level_isValid = false;

    m_highest_accessible_level_display_name_isSet = false;
    m_highest_accessible_level_display_name_isValid = false;

    m_memberships_duration_isSet = false;
    m_memberships_duration_isValid = false;

    m_memberships_duration_at_levels_isSet = false;
    m_memberships_duration_at_levels_isValid = false;
}

void OAIMembershipsDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMembershipsDetails::fromJsonObject(QJsonObject json) {

    m_accessible_levels_isValid = ::OpenAPI::fromJsonValue(m_accessible_levels, json[QString("accessibleLevels")]);
    m_accessible_levels_isSet = !json[QString("accessibleLevels")].isNull() && m_accessible_levels_isValid;

    m_highest_accessible_level_isValid = ::OpenAPI::fromJsonValue(m_highest_accessible_level, json[QString("highestAccessibleLevel")]);
    m_highest_accessible_level_isSet = !json[QString("highestAccessibleLevel")].isNull() && m_highest_accessible_level_isValid;

    m_highest_accessible_level_display_name_isValid = ::OpenAPI::fromJsonValue(m_highest_accessible_level_display_name, json[QString("highestAccessibleLevelDisplayName")]);
    m_highest_accessible_level_display_name_isSet = !json[QString("highestAccessibleLevelDisplayName")].isNull() && m_highest_accessible_level_display_name_isValid;

    m_memberships_duration_isValid = ::OpenAPI::fromJsonValue(m_memberships_duration, json[QString("membershipsDuration")]);
    m_memberships_duration_isSet = !json[QString("membershipsDuration")].isNull() && m_memberships_duration_isValid;

    m_memberships_duration_at_levels_isValid = ::OpenAPI::fromJsonValue(m_memberships_duration_at_levels, json[QString("membershipsDurationAtLevels")]);
    m_memberships_duration_at_levels_isSet = !json[QString("membershipsDurationAtLevels")].isNull() && m_memberships_duration_at_levels_isValid;
}

QString OAIMembershipsDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMembershipsDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_accessible_levels.size() > 0) {
        obj.insert(QString("accessibleLevels"), ::OpenAPI::toJsonValue(m_accessible_levels));
    }
    if (m_highest_accessible_level_isSet) {
        obj.insert(QString("highestAccessibleLevel"), ::OpenAPI::toJsonValue(m_highest_accessible_level));
    }
    if (m_highest_accessible_level_display_name_isSet) {
        obj.insert(QString("highestAccessibleLevelDisplayName"), ::OpenAPI::toJsonValue(m_highest_accessible_level_display_name));
    }
    if (m_memberships_duration.isSet()) {
        obj.insert(QString("membershipsDuration"), ::OpenAPI::toJsonValue(m_memberships_duration));
    }
    if (m_memberships_duration_at_levels.size() > 0) {
        obj.insert(QString("membershipsDurationAtLevels"), ::OpenAPI::toJsonValue(m_memberships_duration_at_levels));
    }
    return obj;
}

QList<QString> OAIMembershipsDetails::getAccessibleLevels() const {
    return m_accessible_levels;
}
void OAIMembershipsDetails::setAccessibleLevels(const QList<QString> &accessible_levels) {
    m_accessible_levels = accessible_levels;
    m_accessible_levels_isSet = true;
}

bool OAIMembershipsDetails::is_accessible_levels_Set() const{
    return m_accessible_levels_isSet;
}

bool OAIMembershipsDetails::is_accessible_levels_Valid() const{
    return m_accessible_levels_isValid;
}

QString OAIMembershipsDetails::getHighestAccessibleLevel() const {
    return m_highest_accessible_level;
}
void OAIMembershipsDetails::setHighestAccessibleLevel(const QString &highest_accessible_level) {
    m_highest_accessible_level = highest_accessible_level;
    m_highest_accessible_level_isSet = true;
}

bool OAIMembershipsDetails::is_highest_accessible_level_Set() const{
    return m_highest_accessible_level_isSet;
}

bool OAIMembershipsDetails::is_highest_accessible_level_Valid() const{
    return m_highest_accessible_level_isValid;
}

QString OAIMembershipsDetails::getHighestAccessibleLevelDisplayName() const {
    return m_highest_accessible_level_display_name;
}
void OAIMembershipsDetails::setHighestAccessibleLevelDisplayName(const QString &highest_accessible_level_display_name) {
    m_highest_accessible_level_display_name = highest_accessible_level_display_name;
    m_highest_accessible_level_display_name_isSet = true;
}

bool OAIMembershipsDetails::is_highest_accessible_level_display_name_Set() const{
    return m_highest_accessible_level_display_name_isSet;
}

bool OAIMembershipsDetails::is_highest_accessible_level_display_name_Valid() const{
    return m_highest_accessible_level_display_name_isValid;
}

OAIMembershipsDuration OAIMembershipsDetails::getMembershipsDuration() const {
    return m_memberships_duration;
}
void OAIMembershipsDetails::setMembershipsDuration(const OAIMembershipsDuration &memberships_duration) {
    m_memberships_duration = memberships_duration;
    m_memberships_duration_isSet = true;
}

bool OAIMembershipsDetails::is_memberships_duration_Set() const{
    return m_memberships_duration_isSet;
}

bool OAIMembershipsDetails::is_memberships_duration_Valid() const{
    return m_memberships_duration_isValid;
}

QList<OAIMembershipsDurationAtLevel> OAIMembershipsDetails::getMembershipsDurationAtLevels() const {
    return m_memberships_duration_at_levels;
}
void OAIMembershipsDetails::setMembershipsDurationAtLevels(const QList<OAIMembershipsDurationAtLevel> &memberships_duration_at_levels) {
    m_memberships_duration_at_levels = memberships_duration_at_levels;
    m_memberships_duration_at_levels_isSet = true;
}

bool OAIMembershipsDetails::is_memberships_duration_at_levels_Set() const{
    return m_memberships_duration_at_levels_isSet;
}

bool OAIMembershipsDetails::is_memberships_duration_at_levels_Valid() const{
    return m_memberships_duration_at_levels_isValid;
}

bool OAIMembershipsDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accessible_levels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_highest_accessible_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_highest_accessible_level_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memberships_duration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_memberships_duration_at_levels.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMembershipsDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
