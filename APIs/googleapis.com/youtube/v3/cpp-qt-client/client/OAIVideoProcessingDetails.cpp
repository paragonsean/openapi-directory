/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoProcessingDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoProcessingDetails::OAIVideoProcessingDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoProcessingDetails::OAIVideoProcessingDetails() {
    this->initializeModel();
}

OAIVideoProcessingDetails::~OAIVideoProcessingDetails() {}

void OAIVideoProcessingDetails::initializeModel() {

    m_editor_suggestions_availability_isSet = false;
    m_editor_suggestions_availability_isValid = false;

    m_file_details_availability_isSet = false;
    m_file_details_availability_isValid = false;

    m_processing_failure_reason_isSet = false;
    m_processing_failure_reason_isValid = false;

    m_processing_issues_availability_isSet = false;
    m_processing_issues_availability_isValid = false;

    m_processing_progress_isSet = false;
    m_processing_progress_isValid = false;

    m_processing_status_isSet = false;
    m_processing_status_isValid = false;

    m_tag_suggestions_availability_isSet = false;
    m_tag_suggestions_availability_isValid = false;

    m_thumbnails_availability_isSet = false;
    m_thumbnails_availability_isValid = false;
}

void OAIVideoProcessingDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoProcessingDetails::fromJsonObject(QJsonObject json) {

    m_editor_suggestions_availability_isValid = ::OpenAPI::fromJsonValue(m_editor_suggestions_availability, json[QString("editorSuggestionsAvailability")]);
    m_editor_suggestions_availability_isSet = !json[QString("editorSuggestionsAvailability")].isNull() && m_editor_suggestions_availability_isValid;

    m_file_details_availability_isValid = ::OpenAPI::fromJsonValue(m_file_details_availability, json[QString("fileDetailsAvailability")]);
    m_file_details_availability_isSet = !json[QString("fileDetailsAvailability")].isNull() && m_file_details_availability_isValid;

    m_processing_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_processing_failure_reason, json[QString("processingFailureReason")]);
    m_processing_failure_reason_isSet = !json[QString("processingFailureReason")].isNull() && m_processing_failure_reason_isValid;

    m_processing_issues_availability_isValid = ::OpenAPI::fromJsonValue(m_processing_issues_availability, json[QString("processingIssuesAvailability")]);
    m_processing_issues_availability_isSet = !json[QString("processingIssuesAvailability")].isNull() && m_processing_issues_availability_isValid;

    m_processing_progress_isValid = ::OpenAPI::fromJsonValue(m_processing_progress, json[QString("processingProgress")]);
    m_processing_progress_isSet = !json[QString("processingProgress")].isNull() && m_processing_progress_isValid;

    m_processing_status_isValid = ::OpenAPI::fromJsonValue(m_processing_status, json[QString("processingStatus")]);
    m_processing_status_isSet = !json[QString("processingStatus")].isNull() && m_processing_status_isValid;

    m_tag_suggestions_availability_isValid = ::OpenAPI::fromJsonValue(m_tag_suggestions_availability, json[QString("tagSuggestionsAvailability")]);
    m_tag_suggestions_availability_isSet = !json[QString("tagSuggestionsAvailability")].isNull() && m_tag_suggestions_availability_isValid;

    m_thumbnails_availability_isValid = ::OpenAPI::fromJsonValue(m_thumbnails_availability, json[QString("thumbnailsAvailability")]);
    m_thumbnails_availability_isSet = !json[QString("thumbnailsAvailability")].isNull() && m_thumbnails_availability_isValid;
}

QString OAIVideoProcessingDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoProcessingDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_editor_suggestions_availability_isSet) {
        obj.insert(QString("editorSuggestionsAvailability"), ::OpenAPI::toJsonValue(m_editor_suggestions_availability));
    }
    if (m_file_details_availability_isSet) {
        obj.insert(QString("fileDetailsAvailability"), ::OpenAPI::toJsonValue(m_file_details_availability));
    }
    if (m_processing_failure_reason_isSet) {
        obj.insert(QString("processingFailureReason"), ::OpenAPI::toJsonValue(m_processing_failure_reason));
    }
    if (m_processing_issues_availability_isSet) {
        obj.insert(QString("processingIssuesAvailability"), ::OpenAPI::toJsonValue(m_processing_issues_availability));
    }
    if (m_processing_progress.isSet()) {
        obj.insert(QString("processingProgress"), ::OpenAPI::toJsonValue(m_processing_progress));
    }
    if (m_processing_status_isSet) {
        obj.insert(QString("processingStatus"), ::OpenAPI::toJsonValue(m_processing_status));
    }
    if (m_tag_suggestions_availability_isSet) {
        obj.insert(QString("tagSuggestionsAvailability"), ::OpenAPI::toJsonValue(m_tag_suggestions_availability));
    }
    if (m_thumbnails_availability_isSet) {
        obj.insert(QString("thumbnailsAvailability"), ::OpenAPI::toJsonValue(m_thumbnails_availability));
    }
    return obj;
}

QString OAIVideoProcessingDetails::getEditorSuggestionsAvailability() const {
    return m_editor_suggestions_availability;
}
void OAIVideoProcessingDetails::setEditorSuggestionsAvailability(const QString &editor_suggestions_availability) {
    m_editor_suggestions_availability = editor_suggestions_availability;
    m_editor_suggestions_availability_isSet = true;
}

bool OAIVideoProcessingDetails::is_editor_suggestions_availability_Set() const{
    return m_editor_suggestions_availability_isSet;
}

bool OAIVideoProcessingDetails::is_editor_suggestions_availability_Valid() const{
    return m_editor_suggestions_availability_isValid;
}

QString OAIVideoProcessingDetails::getFileDetailsAvailability() const {
    return m_file_details_availability;
}
void OAIVideoProcessingDetails::setFileDetailsAvailability(const QString &file_details_availability) {
    m_file_details_availability = file_details_availability;
    m_file_details_availability_isSet = true;
}

bool OAIVideoProcessingDetails::is_file_details_availability_Set() const{
    return m_file_details_availability_isSet;
}

bool OAIVideoProcessingDetails::is_file_details_availability_Valid() const{
    return m_file_details_availability_isValid;
}

QString OAIVideoProcessingDetails::getProcessingFailureReason() const {
    return m_processing_failure_reason;
}
void OAIVideoProcessingDetails::setProcessingFailureReason(const QString &processing_failure_reason) {
    m_processing_failure_reason = processing_failure_reason;
    m_processing_failure_reason_isSet = true;
}

bool OAIVideoProcessingDetails::is_processing_failure_reason_Set() const{
    return m_processing_failure_reason_isSet;
}

bool OAIVideoProcessingDetails::is_processing_failure_reason_Valid() const{
    return m_processing_failure_reason_isValid;
}

QString OAIVideoProcessingDetails::getProcessingIssuesAvailability() const {
    return m_processing_issues_availability;
}
void OAIVideoProcessingDetails::setProcessingIssuesAvailability(const QString &processing_issues_availability) {
    m_processing_issues_availability = processing_issues_availability;
    m_processing_issues_availability_isSet = true;
}

bool OAIVideoProcessingDetails::is_processing_issues_availability_Set() const{
    return m_processing_issues_availability_isSet;
}

bool OAIVideoProcessingDetails::is_processing_issues_availability_Valid() const{
    return m_processing_issues_availability_isValid;
}

OAIVideoProcessingDetailsProcessingProgress OAIVideoProcessingDetails::getProcessingProgress() const {
    return m_processing_progress;
}
void OAIVideoProcessingDetails::setProcessingProgress(const OAIVideoProcessingDetailsProcessingProgress &processing_progress) {
    m_processing_progress = processing_progress;
    m_processing_progress_isSet = true;
}

bool OAIVideoProcessingDetails::is_processing_progress_Set() const{
    return m_processing_progress_isSet;
}

bool OAIVideoProcessingDetails::is_processing_progress_Valid() const{
    return m_processing_progress_isValid;
}

QString OAIVideoProcessingDetails::getProcessingStatus() const {
    return m_processing_status;
}
void OAIVideoProcessingDetails::setProcessingStatus(const QString &processing_status) {
    m_processing_status = processing_status;
    m_processing_status_isSet = true;
}

bool OAIVideoProcessingDetails::is_processing_status_Set() const{
    return m_processing_status_isSet;
}

bool OAIVideoProcessingDetails::is_processing_status_Valid() const{
    return m_processing_status_isValid;
}

QString OAIVideoProcessingDetails::getTagSuggestionsAvailability() const {
    return m_tag_suggestions_availability;
}
void OAIVideoProcessingDetails::setTagSuggestionsAvailability(const QString &tag_suggestions_availability) {
    m_tag_suggestions_availability = tag_suggestions_availability;
    m_tag_suggestions_availability_isSet = true;
}

bool OAIVideoProcessingDetails::is_tag_suggestions_availability_Set() const{
    return m_tag_suggestions_availability_isSet;
}

bool OAIVideoProcessingDetails::is_tag_suggestions_availability_Valid() const{
    return m_tag_suggestions_availability_isValid;
}

QString OAIVideoProcessingDetails::getThumbnailsAvailability() const {
    return m_thumbnails_availability;
}
void OAIVideoProcessingDetails::setThumbnailsAvailability(const QString &thumbnails_availability) {
    m_thumbnails_availability = thumbnails_availability;
    m_thumbnails_availability_isSet = true;
}

bool OAIVideoProcessingDetails::is_thumbnails_availability_Set() const{
    return m_thumbnails_availability_isSet;
}

bool OAIVideoProcessingDetails::is_thumbnails_availability_Valid() const{
    return m_thumbnails_availability_isValid;
}

bool OAIVideoProcessingDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_editor_suggestions_availability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_details_availability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_issues_availability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_progress.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_suggestions_availability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnails_availability_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoProcessingDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
