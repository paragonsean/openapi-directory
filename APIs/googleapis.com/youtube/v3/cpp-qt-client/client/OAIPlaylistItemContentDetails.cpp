/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlaylistItemContentDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlaylistItemContentDetails::OAIPlaylistItemContentDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlaylistItemContentDetails::OAIPlaylistItemContentDetails() {
    this->initializeModel();
}

OAIPlaylistItemContentDetails::~OAIPlaylistItemContentDetails() {}

void OAIPlaylistItemContentDetails::initializeModel() {

    m_end_at_isSet = false;
    m_end_at_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_start_at_isSet = false;
    m_start_at_isValid = false;

    m_video_id_isSet = false;
    m_video_id_isValid = false;

    m_video_published_at_isSet = false;
    m_video_published_at_isValid = false;
}

void OAIPlaylistItemContentDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlaylistItemContentDetails::fromJsonObject(QJsonObject json) {

    m_end_at_isValid = ::OpenAPI::fromJsonValue(m_end_at, json[QString("endAt")]);
    m_end_at_isSet = !json[QString("endAt")].isNull() && m_end_at_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_start_at_isValid = ::OpenAPI::fromJsonValue(m_start_at, json[QString("startAt")]);
    m_start_at_isSet = !json[QString("startAt")].isNull() && m_start_at_isValid;

    m_video_id_isValid = ::OpenAPI::fromJsonValue(m_video_id, json[QString("videoId")]);
    m_video_id_isSet = !json[QString("videoId")].isNull() && m_video_id_isValid;

    m_video_published_at_isValid = ::OpenAPI::fromJsonValue(m_video_published_at, json[QString("videoPublishedAt")]);
    m_video_published_at_isSet = !json[QString("videoPublishedAt")].isNull() && m_video_published_at_isValid;
}

QString OAIPlaylistItemContentDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlaylistItemContentDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_end_at_isSet) {
        obj.insert(QString("endAt"), ::OpenAPI::toJsonValue(m_end_at));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_start_at_isSet) {
        obj.insert(QString("startAt"), ::OpenAPI::toJsonValue(m_start_at));
    }
    if (m_video_id_isSet) {
        obj.insert(QString("videoId"), ::OpenAPI::toJsonValue(m_video_id));
    }
    if (m_video_published_at_isSet) {
        obj.insert(QString("videoPublishedAt"), ::OpenAPI::toJsonValue(m_video_published_at));
    }
    return obj;
}

QString OAIPlaylistItemContentDetails::getEndAt() const {
    return m_end_at;
}
void OAIPlaylistItemContentDetails::setEndAt(const QString &end_at) {
    m_end_at = end_at;
    m_end_at_isSet = true;
}

bool OAIPlaylistItemContentDetails::is_end_at_Set() const{
    return m_end_at_isSet;
}

bool OAIPlaylistItemContentDetails::is_end_at_Valid() const{
    return m_end_at_isValid;
}

QString OAIPlaylistItemContentDetails::getNote() const {
    return m_note;
}
void OAIPlaylistItemContentDetails::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIPlaylistItemContentDetails::is_note_Set() const{
    return m_note_isSet;
}

bool OAIPlaylistItemContentDetails::is_note_Valid() const{
    return m_note_isValid;
}

QString OAIPlaylistItemContentDetails::getStartAt() const {
    return m_start_at;
}
void OAIPlaylistItemContentDetails::setStartAt(const QString &start_at) {
    m_start_at = start_at;
    m_start_at_isSet = true;
}

bool OAIPlaylistItemContentDetails::is_start_at_Set() const{
    return m_start_at_isSet;
}

bool OAIPlaylistItemContentDetails::is_start_at_Valid() const{
    return m_start_at_isValid;
}

QString OAIPlaylistItemContentDetails::getVideoId() const {
    return m_video_id;
}
void OAIPlaylistItemContentDetails::setVideoId(const QString &video_id) {
    m_video_id = video_id;
    m_video_id_isSet = true;
}

bool OAIPlaylistItemContentDetails::is_video_id_Set() const{
    return m_video_id_isSet;
}

bool OAIPlaylistItemContentDetails::is_video_id_Valid() const{
    return m_video_id_isValid;
}

QDateTime OAIPlaylistItemContentDetails::getVideoPublishedAt() const {
    return m_video_published_at;
}
void OAIPlaylistItemContentDetails::setVideoPublishedAt(const QDateTime &video_published_at) {
    m_video_published_at = video_published_at;
    m_video_published_at_isSet = true;
}

bool OAIPlaylistItemContentDetails::is_video_published_at_Set() const{
    return m_video_published_at_isSet;
}

bool OAIPlaylistItemContentDetails::is_video_published_at_Valid() const{
    return m_video_published_at_isValid;
}

bool OAIPlaylistItemContentDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_published_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlaylistItemContentDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
