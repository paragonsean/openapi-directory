/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIThumbnailDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIThumbnailDetails::OAIThumbnailDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIThumbnailDetails::OAIThumbnailDetails() {
    this->initializeModel();
}

OAIThumbnailDetails::~OAIThumbnailDetails() {}

void OAIThumbnailDetails::initializeModel() {

    m_high_isSet = false;
    m_high_isValid = false;

    m_maxres_isSet = false;
    m_maxres_isValid = false;

    m_medium_isSet = false;
    m_medium_isValid = false;

    m_standard_isSet = false;
    m_standard_isValid = false;
}

void OAIThumbnailDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIThumbnailDetails::fromJsonObject(QJsonObject json) {

    m_high_isValid = ::OpenAPI::fromJsonValue(m_high, json[QString("high")]);
    m_high_isSet = !json[QString("high")].isNull() && m_high_isValid;

    m_maxres_isValid = ::OpenAPI::fromJsonValue(m_maxres, json[QString("maxres")]);
    m_maxres_isSet = !json[QString("maxres")].isNull() && m_maxres_isValid;

    m_medium_isValid = ::OpenAPI::fromJsonValue(m_medium, json[QString("medium")]);
    m_medium_isSet = !json[QString("medium")].isNull() && m_medium_isValid;

    m_standard_isValid = ::OpenAPI::fromJsonValue(m_standard, json[QString("standard")]);
    m_standard_isSet = !json[QString("standard")].isNull() && m_standard_isValid;
}

QString OAIThumbnailDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIThumbnailDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_high.isSet()) {
        obj.insert(QString("high"), ::OpenAPI::toJsonValue(m_high));
    }
    if (m_maxres.isSet()) {
        obj.insert(QString("maxres"), ::OpenAPI::toJsonValue(m_maxres));
    }
    if (m_medium.isSet()) {
        obj.insert(QString("medium"), ::OpenAPI::toJsonValue(m_medium));
    }
    if (m_standard.isSet()) {
        obj.insert(QString("standard"), ::OpenAPI::toJsonValue(m_standard));
    }
    return obj;
}

OAIThumbnail OAIThumbnailDetails::getHigh() const {
    return m_high;
}
void OAIThumbnailDetails::setHigh(const OAIThumbnail &high) {
    m_high = high;
    m_high_isSet = true;
}

bool OAIThumbnailDetails::is_high_Set() const{
    return m_high_isSet;
}

bool OAIThumbnailDetails::is_high_Valid() const{
    return m_high_isValid;
}

OAIThumbnail OAIThumbnailDetails::getMaxres() const {
    return m_maxres;
}
void OAIThumbnailDetails::setMaxres(const OAIThumbnail &maxres) {
    m_maxres = maxres;
    m_maxres_isSet = true;
}

bool OAIThumbnailDetails::is_maxres_Set() const{
    return m_maxres_isSet;
}

bool OAIThumbnailDetails::is_maxres_Valid() const{
    return m_maxres_isValid;
}

OAIThumbnail OAIThumbnailDetails::getMedium() const {
    return m_medium;
}
void OAIThumbnailDetails::setMedium(const OAIThumbnail &medium) {
    m_medium = medium;
    m_medium_isSet = true;
}

bool OAIThumbnailDetails::is_medium_Set() const{
    return m_medium_isSet;
}

bool OAIThumbnailDetails::is_medium_Valid() const{
    return m_medium_isValid;
}

OAIThumbnail OAIThumbnailDetails::getStandard() const {
    return m_standard;
}
void OAIThumbnailDetails::setStandard(const OAIThumbnail &standard) {
    m_standard = standard;
    m_standard_isSet = true;
}

bool OAIThumbnailDetails::is_standard_Set() const{
    return m_standard_isSet;
}

bool OAIThumbnailDetails::is_standard_Valid() const{
    return m_standard_isValid;
}

bool OAIThumbnailDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_high.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maxres.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_medium.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_standard.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIThumbnailDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
