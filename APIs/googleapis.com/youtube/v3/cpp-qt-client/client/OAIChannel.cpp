/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannel::OAIChannel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannel::OAIChannel() {
    this->initializeModel();
}

OAIChannel::~OAIChannel() {}

void OAIChannel::initializeModel() {

    m_audit_details_isSet = false;
    m_audit_details_isValid = false;

    m_branding_settings_isSet = false;
    m_branding_settings_isValid = false;

    m_content_details_isSet = false;
    m_content_details_isValid = false;

    m_content_owner_details_isSet = false;
    m_content_owner_details_isValid = false;

    m_conversion_pings_isSet = false;
    m_conversion_pings_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_localizations_isSet = false;
    m_localizations_isValid = false;

    m_snippet_isSet = false;
    m_snippet_isValid = false;

    m_statistics_isSet = false;
    m_statistics_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_topic_details_isSet = false;
    m_topic_details_isValid = false;
}

void OAIChannel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannel::fromJsonObject(QJsonObject json) {

    m_audit_details_isValid = ::OpenAPI::fromJsonValue(m_audit_details, json[QString("auditDetails")]);
    m_audit_details_isSet = !json[QString("auditDetails")].isNull() && m_audit_details_isValid;

    m_branding_settings_isValid = ::OpenAPI::fromJsonValue(m_branding_settings, json[QString("brandingSettings")]);
    m_branding_settings_isSet = !json[QString("brandingSettings")].isNull() && m_branding_settings_isValid;

    m_content_details_isValid = ::OpenAPI::fromJsonValue(m_content_details, json[QString("contentDetails")]);
    m_content_details_isSet = !json[QString("contentDetails")].isNull() && m_content_details_isValid;

    m_content_owner_details_isValid = ::OpenAPI::fromJsonValue(m_content_owner_details, json[QString("contentOwnerDetails")]);
    m_content_owner_details_isSet = !json[QString("contentOwnerDetails")].isNull() && m_content_owner_details_isValid;

    m_conversion_pings_isValid = ::OpenAPI::fromJsonValue(m_conversion_pings, json[QString("conversionPings")]);
    m_conversion_pings_isSet = !json[QString("conversionPings")].isNull() && m_conversion_pings_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_localizations_isValid = ::OpenAPI::fromJsonValue(m_localizations, json[QString("localizations")]);
    m_localizations_isSet = !json[QString("localizations")].isNull() && m_localizations_isValid;

    m_snippet_isValid = ::OpenAPI::fromJsonValue(m_snippet, json[QString("snippet")]);
    m_snippet_isSet = !json[QString("snippet")].isNull() && m_snippet_isValid;

    m_statistics_isValid = ::OpenAPI::fromJsonValue(m_statistics, json[QString("statistics")]);
    m_statistics_isSet = !json[QString("statistics")].isNull() && m_statistics_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_topic_details_isValid = ::OpenAPI::fromJsonValue(m_topic_details, json[QString("topicDetails")]);
    m_topic_details_isSet = !json[QString("topicDetails")].isNull() && m_topic_details_isValid;
}

QString OAIChannel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannel::asJsonObject() const {
    QJsonObject obj;
    if (m_audit_details.isSet()) {
        obj.insert(QString("auditDetails"), ::OpenAPI::toJsonValue(m_audit_details));
    }
    if (m_branding_settings.isSet()) {
        obj.insert(QString("brandingSettings"), ::OpenAPI::toJsonValue(m_branding_settings));
    }
    if (m_content_details.isSet()) {
        obj.insert(QString("contentDetails"), ::OpenAPI::toJsonValue(m_content_details));
    }
    if (m_content_owner_details.isSet()) {
        obj.insert(QString("contentOwnerDetails"), ::OpenAPI::toJsonValue(m_content_owner_details));
    }
    if (m_conversion_pings.isSet()) {
        obj.insert(QString("conversionPings"), ::OpenAPI::toJsonValue(m_conversion_pings));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_localizations.size() > 0) {
        obj.insert(QString("localizations"), ::OpenAPI::toJsonValue(m_localizations));
    }
    if (m_snippet.isSet()) {
        obj.insert(QString("snippet"), ::OpenAPI::toJsonValue(m_snippet));
    }
    if (m_statistics.isSet()) {
        obj.insert(QString("statistics"), ::OpenAPI::toJsonValue(m_statistics));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_topic_details.isSet()) {
        obj.insert(QString("topicDetails"), ::OpenAPI::toJsonValue(m_topic_details));
    }
    return obj;
}

OAIChannelAuditDetails OAIChannel::getAuditDetails() const {
    return m_audit_details;
}
void OAIChannel::setAuditDetails(const OAIChannelAuditDetails &audit_details) {
    m_audit_details = audit_details;
    m_audit_details_isSet = true;
}

bool OAIChannel::is_audit_details_Set() const{
    return m_audit_details_isSet;
}

bool OAIChannel::is_audit_details_Valid() const{
    return m_audit_details_isValid;
}

OAIChannelBrandingSettings OAIChannel::getBrandingSettings() const {
    return m_branding_settings;
}
void OAIChannel::setBrandingSettings(const OAIChannelBrandingSettings &branding_settings) {
    m_branding_settings = branding_settings;
    m_branding_settings_isSet = true;
}

bool OAIChannel::is_branding_settings_Set() const{
    return m_branding_settings_isSet;
}

bool OAIChannel::is_branding_settings_Valid() const{
    return m_branding_settings_isValid;
}

OAIChannelContentDetails OAIChannel::getContentDetails() const {
    return m_content_details;
}
void OAIChannel::setContentDetails(const OAIChannelContentDetails &content_details) {
    m_content_details = content_details;
    m_content_details_isSet = true;
}

bool OAIChannel::is_content_details_Set() const{
    return m_content_details_isSet;
}

bool OAIChannel::is_content_details_Valid() const{
    return m_content_details_isValid;
}

OAIChannelContentOwnerDetails OAIChannel::getContentOwnerDetails() const {
    return m_content_owner_details;
}
void OAIChannel::setContentOwnerDetails(const OAIChannelContentOwnerDetails &content_owner_details) {
    m_content_owner_details = content_owner_details;
    m_content_owner_details_isSet = true;
}

bool OAIChannel::is_content_owner_details_Set() const{
    return m_content_owner_details_isSet;
}

bool OAIChannel::is_content_owner_details_Valid() const{
    return m_content_owner_details_isValid;
}

OAIChannelConversionPings OAIChannel::getConversionPings() const {
    return m_conversion_pings;
}
void OAIChannel::setConversionPings(const OAIChannelConversionPings &conversion_pings) {
    m_conversion_pings = conversion_pings;
    m_conversion_pings_isSet = true;
}

bool OAIChannel::is_conversion_pings_Set() const{
    return m_conversion_pings_isSet;
}

bool OAIChannel::is_conversion_pings_Valid() const{
    return m_conversion_pings_isValid;
}

QString OAIChannel::getEtag() const {
    return m_etag;
}
void OAIChannel::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIChannel::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIChannel::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIChannel::getId() const {
    return m_id;
}
void OAIChannel::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIChannel::is_id_Set() const{
    return m_id_isSet;
}

bool OAIChannel::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIChannel::getKind() const {
    return m_kind;
}
void OAIChannel::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIChannel::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIChannel::is_kind_Valid() const{
    return m_kind_isValid;
}

QMap<QString, OAIChannelLocalization> OAIChannel::getLocalizations() const {
    return m_localizations;
}
void OAIChannel::setLocalizations(const QMap<QString, OAIChannelLocalization> &localizations) {
    m_localizations = localizations;
    m_localizations_isSet = true;
}

bool OAIChannel::is_localizations_Set() const{
    return m_localizations_isSet;
}

bool OAIChannel::is_localizations_Valid() const{
    return m_localizations_isValid;
}

OAIChannelSnippet OAIChannel::getSnippet() const {
    return m_snippet;
}
void OAIChannel::setSnippet(const OAIChannelSnippet &snippet) {
    m_snippet = snippet;
    m_snippet_isSet = true;
}

bool OAIChannel::is_snippet_Set() const{
    return m_snippet_isSet;
}

bool OAIChannel::is_snippet_Valid() const{
    return m_snippet_isValid;
}

OAIChannelStatistics OAIChannel::getStatistics() const {
    return m_statistics;
}
void OAIChannel::setStatistics(const OAIChannelStatistics &statistics) {
    m_statistics = statistics;
    m_statistics_isSet = true;
}

bool OAIChannel::is_statistics_Set() const{
    return m_statistics_isSet;
}

bool OAIChannel::is_statistics_Valid() const{
    return m_statistics_isValid;
}

OAIChannelStatus OAIChannel::getStatus() const {
    return m_status;
}
void OAIChannel::setStatus(const OAIChannelStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIChannel::is_status_Set() const{
    return m_status_isSet;
}

bool OAIChannel::is_status_Valid() const{
    return m_status_isValid;
}

OAIChannelTopicDetails OAIChannel::getTopicDetails() const {
    return m_topic_details;
}
void OAIChannel::setTopicDetails(const OAIChannelTopicDetails &topic_details) {
    m_topic_details = topic_details;
    m_topic_details_isSet = true;
}

bool OAIChannel::is_topic_details_Set() const{
    return m_topic_details_isSet;
}

bool OAIChannel::is_topic_details_Valid() const{
    return m_topic_details_isValid;
}

bool OAIChannel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audit_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_branding_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_owner_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversion_pings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_localizations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_snippet.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
