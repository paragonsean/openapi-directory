/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILiveChatModeratorSnippet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILiveChatModeratorSnippet::OAILiveChatModeratorSnippet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILiveChatModeratorSnippet::OAILiveChatModeratorSnippet() {
    this->initializeModel();
}

OAILiveChatModeratorSnippet::~OAILiveChatModeratorSnippet() {}

void OAILiveChatModeratorSnippet::initializeModel() {

    m_live_chat_id_isSet = false;
    m_live_chat_id_isValid = false;

    m_moderator_details_isSet = false;
    m_moderator_details_isValid = false;
}

void OAILiveChatModeratorSnippet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILiveChatModeratorSnippet::fromJsonObject(QJsonObject json) {

    m_live_chat_id_isValid = ::OpenAPI::fromJsonValue(m_live_chat_id, json[QString("liveChatId")]);
    m_live_chat_id_isSet = !json[QString("liveChatId")].isNull() && m_live_chat_id_isValid;

    m_moderator_details_isValid = ::OpenAPI::fromJsonValue(m_moderator_details, json[QString("moderatorDetails")]);
    m_moderator_details_isSet = !json[QString("moderatorDetails")].isNull() && m_moderator_details_isValid;
}

QString OAILiveChatModeratorSnippet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILiveChatModeratorSnippet::asJsonObject() const {
    QJsonObject obj;
    if (m_live_chat_id_isSet) {
        obj.insert(QString("liveChatId"), ::OpenAPI::toJsonValue(m_live_chat_id));
    }
    if (m_moderator_details.isSet()) {
        obj.insert(QString("moderatorDetails"), ::OpenAPI::toJsonValue(m_moderator_details));
    }
    return obj;
}

QString OAILiveChatModeratorSnippet::getLiveChatId() const {
    return m_live_chat_id;
}
void OAILiveChatModeratorSnippet::setLiveChatId(const QString &live_chat_id) {
    m_live_chat_id = live_chat_id;
    m_live_chat_id_isSet = true;
}

bool OAILiveChatModeratorSnippet::is_live_chat_id_Set() const{
    return m_live_chat_id_isSet;
}

bool OAILiveChatModeratorSnippet::is_live_chat_id_Valid() const{
    return m_live_chat_id_isValid;
}

OAIChannelProfileDetails OAILiveChatModeratorSnippet::getModeratorDetails() const {
    return m_moderator_details;
}
void OAILiveChatModeratorSnippet::setModeratorDetails(const OAIChannelProfileDetails &moderator_details) {
    m_moderator_details = moderator_details;
    m_moderator_details_isSet = true;
}

bool OAILiveChatModeratorSnippet::is_moderator_details_Set() const{
    return m_moderator_details_isSet;
}

bool OAILiveChatModeratorSnippet::is_moderator_details_Valid() const{
    return m_moderator_details_isValid;
}

bool OAILiveChatModeratorSnippet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_live_chat_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moderator_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILiveChatModeratorSnippet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
