/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchResultSnippet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchResultSnippet::OAISearchResultSnippet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchResultSnippet::OAISearchResultSnippet() {
    this->initializeModel();
}

OAISearchResultSnippet::~OAISearchResultSnippet() {}

void OAISearchResultSnippet::initializeModel() {

    m_channel_id_isSet = false;
    m_channel_id_isValid = false;

    m_channel_title_isSet = false;
    m_channel_title_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_live_broadcast_content_isSet = false;
    m_live_broadcast_content_isValid = false;

    m_published_at_isSet = false;
    m_published_at_isValid = false;

    m_thumbnails_isSet = false;
    m_thumbnails_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAISearchResultSnippet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchResultSnippet::fromJsonObject(QJsonObject json) {

    m_channel_id_isValid = ::OpenAPI::fromJsonValue(m_channel_id, json[QString("channelId")]);
    m_channel_id_isSet = !json[QString("channelId")].isNull() && m_channel_id_isValid;

    m_channel_title_isValid = ::OpenAPI::fromJsonValue(m_channel_title, json[QString("channelTitle")]);
    m_channel_title_isSet = !json[QString("channelTitle")].isNull() && m_channel_title_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_live_broadcast_content_isValid = ::OpenAPI::fromJsonValue(m_live_broadcast_content, json[QString("liveBroadcastContent")]);
    m_live_broadcast_content_isSet = !json[QString("liveBroadcastContent")].isNull() && m_live_broadcast_content_isValid;

    m_published_at_isValid = ::OpenAPI::fromJsonValue(m_published_at, json[QString("publishedAt")]);
    m_published_at_isSet = !json[QString("publishedAt")].isNull() && m_published_at_isValid;

    m_thumbnails_isValid = ::OpenAPI::fromJsonValue(m_thumbnails, json[QString("thumbnails")]);
    m_thumbnails_isSet = !json[QString("thumbnails")].isNull() && m_thumbnails_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAISearchResultSnippet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchResultSnippet::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_id_isSet) {
        obj.insert(QString("channelId"), ::OpenAPI::toJsonValue(m_channel_id));
    }
    if (m_channel_title_isSet) {
        obj.insert(QString("channelTitle"), ::OpenAPI::toJsonValue(m_channel_title));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_live_broadcast_content_isSet) {
        obj.insert(QString("liveBroadcastContent"), ::OpenAPI::toJsonValue(m_live_broadcast_content));
    }
    if (m_published_at_isSet) {
        obj.insert(QString("publishedAt"), ::OpenAPI::toJsonValue(m_published_at));
    }
    if (m_thumbnails.isSet()) {
        obj.insert(QString("thumbnails"), ::OpenAPI::toJsonValue(m_thumbnails));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAISearchResultSnippet::getChannelId() const {
    return m_channel_id;
}
void OAISearchResultSnippet::setChannelId(const QString &channel_id) {
    m_channel_id = channel_id;
    m_channel_id_isSet = true;
}

bool OAISearchResultSnippet::is_channel_id_Set() const{
    return m_channel_id_isSet;
}

bool OAISearchResultSnippet::is_channel_id_Valid() const{
    return m_channel_id_isValid;
}

QString OAISearchResultSnippet::getChannelTitle() const {
    return m_channel_title;
}
void OAISearchResultSnippet::setChannelTitle(const QString &channel_title) {
    m_channel_title = channel_title;
    m_channel_title_isSet = true;
}

bool OAISearchResultSnippet::is_channel_title_Set() const{
    return m_channel_title_isSet;
}

bool OAISearchResultSnippet::is_channel_title_Valid() const{
    return m_channel_title_isValid;
}

QString OAISearchResultSnippet::getDescription() const {
    return m_description;
}
void OAISearchResultSnippet::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISearchResultSnippet::is_description_Set() const{
    return m_description_isSet;
}

bool OAISearchResultSnippet::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISearchResultSnippet::getLiveBroadcastContent() const {
    return m_live_broadcast_content;
}
void OAISearchResultSnippet::setLiveBroadcastContent(const QString &live_broadcast_content) {
    m_live_broadcast_content = live_broadcast_content;
    m_live_broadcast_content_isSet = true;
}

bool OAISearchResultSnippet::is_live_broadcast_content_Set() const{
    return m_live_broadcast_content_isSet;
}

bool OAISearchResultSnippet::is_live_broadcast_content_Valid() const{
    return m_live_broadcast_content_isValid;
}

QDateTime OAISearchResultSnippet::getPublishedAt() const {
    return m_published_at;
}
void OAISearchResultSnippet::setPublishedAt(const QDateTime &published_at) {
    m_published_at = published_at;
    m_published_at_isSet = true;
}

bool OAISearchResultSnippet::is_published_at_Set() const{
    return m_published_at_isSet;
}

bool OAISearchResultSnippet::is_published_at_Valid() const{
    return m_published_at_isValid;
}

OAIThumbnailDetails OAISearchResultSnippet::getThumbnails() const {
    return m_thumbnails;
}
void OAISearchResultSnippet::setThumbnails(const OAIThumbnailDetails &thumbnails) {
    m_thumbnails = thumbnails;
    m_thumbnails_isSet = true;
}

bool OAISearchResultSnippet::is_thumbnails_Set() const{
    return m_thumbnails_isSet;
}

bool OAISearchResultSnippet::is_thumbnails_Valid() const{
    return m_thumbnails_isValid;
}

QString OAISearchResultSnippet::getTitle() const {
    return m_title;
}
void OAISearchResultSnippet::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAISearchResultSnippet::is_title_Set() const{
    return m_title_isSet;
}

bool OAISearchResultSnippet::is_title_Valid() const{
    return m_title_isValid;
}

bool OAISearchResultSnippet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_broadcast_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnails.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchResultSnippet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
