/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICaptionSnippet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICaptionSnippet::OAICaptionSnippet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICaptionSnippet::OAICaptionSnippet() {
    this->initializeModel();
}

OAICaptionSnippet::~OAICaptionSnippet() {}

void OAICaptionSnippet::initializeModel() {

    m_audio_track_type_isSet = false;
    m_audio_track_type_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_is_auto_synced_isSet = false;
    m_is_auto_synced_isValid = false;

    m_is_cc_isSet = false;
    m_is_cc_isValid = false;

    m_is_draft_isSet = false;
    m_is_draft_isValid = false;

    m_is_easy_reader_isSet = false;
    m_is_easy_reader_isValid = false;

    m_is_large_isSet = false;
    m_is_large_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_track_kind_isSet = false;
    m_track_kind_isValid = false;

    m_video_id_isSet = false;
    m_video_id_isValid = false;
}

void OAICaptionSnippet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICaptionSnippet::fromJsonObject(QJsonObject json) {

    m_audio_track_type_isValid = ::OpenAPI::fromJsonValue(m_audio_track_type, json[QString("audioTrackType")]);
    m_audio_track_type_isSet = !json[QString("audioTrackType")].isNull() && m_audio_track_type_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("failureReason")]);
    m_failure_reason_isSet = !json[QString("failureReason")].isNull() && m_failure_reason_isValid;

    m_is_auto_synced_isValid = ::OpenAPI::fromJsonValue(m_is_auto_synced, json[QString("isAutoSynced")]);
    m_is_auto_synced_isSet = !json[QString("isAutoSynced")].isNull() && m_is_auto_synced_isValid;

    m_is_cc_isValid = ::OpenAPI::fromJsonValue(m_is_cc, json[QString("isCC")]);
    m_is_cc_isSet = !json[QString("isCC")].isNull() && m_is_cc_isValid;

    m_is_draft_isValid = ::OpenAPI::fromJsonValue(m_is_draft, json[QString("isDraft")]);
    m_is_draft_isSet = !json[QString("isDraft")].isNull() && m_is_draft_isValid;

    m_is_easy_reader_isValid = ::OpenAPI::fromJsonValue(m_is_easy_reader, json[QString("isEasyReader")]);
    m_is_easy_reader_isSet = !json[QString("isEasyReader")].isNull() && m_is_easy_reader_isValid;

    m_is_large_isValid = ::OpenAPI::fromJsonValue(m_is_large, json[QString("isLarge")]);
    m_is_large_isSet = !json[QString("isLarge")].isNull() && m_is_large_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_track_kind_isValid = ::OpenAPI::fromJsonValue(m_track_kind, json[QString("trackKind")]);
    m_track_kind_isSet = !json[QString("trackKind")].isNull() && m_track_kind_isValid;

    m_video_id_isValid = ::OpenAPI::fromJsonValue(m_video_id, json[QString("videoId")]);
    m_video_id_isSet = !json[QString("videoId")].isNull() && m_video_id_isValid;
}

QString OAICaptionSnippet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICaptionSnippet::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_track_type_isSet) {
        obj.insert(QString("audioTrackType"), ::OpenAPI::toJsonValue(m_audio_track_type));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("failureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_is_auto_synced_isSet) {
        obj.insert(QString("isAutoSynced"), ::OpenAPI::toJsonValue(m_is_auto_synced));
    }
    if (m_is_cc_isSet) {
        obj.insert(QString("isCC"), ::OpenAPI::toJsonValue(m_is_cc));
    }
    if (m_is_draft_isSet) {
        obj.insert(QString("isDraft"), ::OpenAPI::toJsonValue(m_is_draft));
    }
    if (m_is_easy_reader_isSet) {
        obj.insert(QString("isEasyReader"), ::OpenAPI::toJsonValue(m_is_easy_reader));
    }
    if (m_is_large_isSet) {
        obj.insert(QString("isLarge"), ::OpenAPI::toJsonValue(m_is_large));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_track_kind_isSet) {
        obj.insert(QString("trackKind"), ::OpenAPI::toJsonValue(m_track_kind));
    }
    if (m_video_id_isSet) {
        obj.insert(QString("videoId"), ::OpenAPI::toJsonValue(m_video_id));
    }
    return obj;
}

QString OAICaptionSnippet::getAudioTrackType() const {
    return m_audio_track_type;
}
void OAICaptionSnippet::setAudioTrackType(const QString &audio_track_type) {
    m_audio_track_type = audio_track_type;
    m_audio_track_type_isSet = true;
}

bool OAICaptionSnippet::is_audio_track_type_Set() const{
    return m_audio_track_type_isSet;
}

bool OAICaptionSnippet::is_audio_track_type_Valid() const{
    return m_audio_track_type_isValid;
}

QString OAICaptionSnippet::getFailureReason() const {
    return m_failure_reason;
}
void OAICaptionSnippet::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAICaptionSnippet::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAICaptionSnippet::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

bool OAICaptionSnippet::isIsAutoSynced() const {
    return m_is_auto_synced;
}
void OAICaptionSnippet::setIsAutoSynced(const bool &is_auto_synced) {
    m_is_auto_synced = is_auto_synced;
    m_is_auto_synced_isSet = true;
}

bool OAICaptionSnippet::is_is_auto_synced_Set() const{
    return m_is_auto_synced_isSet;
}

bool OAICaptionSnippet::is_is_auto_synced_Valid() const{
    return m_is_auto_synced_isValid;
}

bool OAICaptionSnippet::isIsCc() const {
    return m_is_cc;
}
void OAICaptionSnippet::setIsCc(const bool &is_cc) {
    m_is_cc = is_cc;
    m_is_cc_isSet = true;
}

bool OAICaptionSnippet::is_is_cc_Set() const{
    return m_is_cc_isSet;
}

bool OAICaptionSnippet::is_is_cc_Valid() const{
    return m_is_cc_isValid;
}

bool OAICaptionSnippet::isIsDraft() const {
    return m_is_draft;
}
void OAICaptionSnippet::setIsDraft(const bool &is_draft) {
    m_is_draft = is_draft;
    m_is_draft_isSet = true;
}

bool OAICaptionSnippet::is_is_draft_Set() const{
    return m_is_draft_isSet;
}

bool OAICaptionSnippet::is_is_draft_Valid() const{
    return m_is_draft_isValid;
}

bool OAICaptionSnippet::isIsEasyReader() const {
    return m_is_easy_reader;
}
void OAICaptionSnippet::setIsEasyReader(const bool &is_easy_reader) {
    m_is_easy_reader = is_easy_reader;
    m_is_easy_reader_isSet = true;
}

bool OAICaptionSnippet::is_is_easy_reader_Set() const{
    return m_is_easy_reader_isSet;
}

bool OAICaptionSnippet::is_is_easy_reader_Valid() const{
    return m_is_easy_reader_isValid;
}

bool OAICaptionSnippet::isIsLarge() const {
    return m_is_large;
}
void OAICaptionSnippet::setIsLarge(const bool &is_large) {
    m_is_large = is_large;
    m_is_large_isSet = true;
}

bool OAICaptionSnippet::is_is_large_Set() const{
    return m_is_large_isSet;
}

bool OAICaptionSnippet::is_is_large_Valid() const{
    return m_is_large_isValid;
}

QString OAICaptionSnippet::getLanguage() const {
    return m_language;
}
void OAICaptionSnippet::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAICaptionSnippet::is_language_Set() const{
    return m_language_isSet;
}

bool OAICaptionSnippet::is_language_Valid() const{
    return m_language_isValid;
}

QDateTime OAICaptionSnippet::getLastUpdated() const {
    return m_last_updated;
}
void OAICaptionSnippet::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAICaptionSnippet::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAICaptionSnippet::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAICaptionSnippet::getName() const {
    return m_name;
}
void OAICaptionSnippet::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICaptionSnippet::is_name_Set() const{
    return m_name_isSet;
}

bool OAICaptionSnippet::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICaptionSnippet::getStatus() const {
    return m_status;
}
void OAICaptionSnippet::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICaptionSnippet::is_status_Set() const{
    return m_status_isSet;
}

bool OAICaptionSnippet::is_status_Valid() const{
    return m_status_isValid;
}

QString OAICaptionSnippet::getTrackKind() const {
    return m_track_kind;
}
void OAICaptionSnippet::setTrackKind(const QString &track_kind) {
    m_track_kind = track_kind;
    m_track_kind_isSet = true;
}

bool OAICaptionSnippet::is_track_kind_Set() const{
    return m_track_kind_isSet;
}

bool OAICaptionSnippet::is_track_kind_Valid() const{
    return m_track_kind_isValid;
}

QString OAICaptionSnippet::getVideoId() const {
    return m_video_id;
}
void OAICaptionSnippet::setVideoId(const QString &video_id) {
    m_video_id = video_id;
    m_video_id_isSet = true;
}

bool OAICaptionSnippet::is_video_id_Set() const{
    return m_video_id_isSet;
}

bool OAICaptionSnippet::is_video_id_Valid() const{
    return m_video_id_isValid;
}

bool OAICaptionSnippet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_track_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_auto_synced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_cc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_draft_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_easy_reader_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_large_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICaptionSnippet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
