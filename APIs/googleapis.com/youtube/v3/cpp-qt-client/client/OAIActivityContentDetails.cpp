/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActivityContentDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActivityContentDetails::OAIActivityContentDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActivityContentDetails::OAIActivityContentDetails() {
    this->initializeModel();
}

OAIActivityContentDetails::~OAIActivityContentDetails() {}

void OAIActivityContentDetails::initializeModel() {

    m_bulletin_isSet = false;
    m_bulletin_isValid = false;

    m_channel_item_isSet = false;
    m_channel_item_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_favorite_isSet = false;
    m_favorite_isValid = false;

    m_like_isSet = false;
    m_like_isValid = false;

    m_playlist_item_isSet = false;
    m_playlist_item_isValid = false;

    m_promoted_item_isSet = false;
    m_promoted_item_isValid = false;

    m_recommendation_isSet = false;
    m_recommendation_isValid = false;

    m_social_isSet = false;
    m_social_isValid = false;

    m_subscription_isSet = false;
    m_subscription_isValid = false;

    m_upload_isSet = false;
    m_upload_isValid = false;
}

void OAIActivityContentDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActivityContentDetails::fromJsonObject(QJsonObject json) {

    m_bulletin_isValid = ::OpenAPI::fromJsonValue(m_bulletin, json[QString("bulletin")]);
    m_bulletin_isSet = !json[QString("bulletin")].isNull() && m_bulletin_isValid;

    m_channel_item_isValid = ::OpenAPI::fromJsonValue(m_channel_item, json[QString("channelItem")]);
    m_channel_item_isSet = !json[QString("channelItem")].isNull() && m_channel_item_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_favorite_isValid = ::OpenAPI::fromJsonValue(m_favorite, json[QString("favorite")]);
    m_favorite_isSet = !json[QString("favorite")].isNull() && m_favorite_isValid;

    m_like_isValid = ::OpenAPI::fromJsonValue(m_like, json[QString("like")]);
    m_like_isSet = !json[QString("like")].isNull() && m_like_isValid;

    m_playlist_item_isValid = ::OpenAPI::fromJsonValue(m_playlist_item, json[QString("playlistItem")]);
    m_playlist_item_isSet = !json[QString("playlistItem")].isNull() && m_playlist_item_isValid;

    m_promoted_item_isValid = ::OpenAPI::fromJsonValue(m_promoted_item, json[QString("promotedItem")]);
    m_promoted_item_isSet = !json[QString("promotedItem")].isNull() && m_promoted_item_isValid;

    m_recommendation_isValid = ::OpenAPI::fromJsonValue(m_recommendation, json[QString("recommendation")]);
    m_recommendation_isSet = !json[QString("recommendation")].isNull() && m_recommendation_isValid;

    m_social_isValid = ::OpenAPI::fromJsonValue(m_social, json[QString("social")]);
    m_social_isSet = !json[QString("social")].isNull() && m_social_isValid;

    m_subscription_isValid = ::OpenAPI::fromJsonValue(m_subscription, json[QString("subscription")]);
    m_subscription_isSet = !json[QString("subscription")].isNull() && m_subscription_isValid;

    m_upload_isValid = ::OpenAPI::fromJsonValue(m_upload, json[QString("upload")]);
    m_upload_isSet = !json[QString("upload")].isNull() && m_upload_isValid;
}

QString OAIActivityContentDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActivityContentDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_bulletin.isSet()) {
        obj.insert(QString("bulletin"), ::OpenAPI::toJsonValue(m_bulletin));
    }
    if (m_channel_item.isSet()) {
        obj.insert(QString("channelItem"), ::OpenAPI::toJsonValue(m_channel_item));
    }
    if (m_comment.isSet()) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_favorite.isSet()) {
        obj.insert(QString("favorite"), ::OpenAPI::toJsonValue(m_favorite));
    }
    if (m_like.isSet()) {
        obj.insert(QString("like"), ::OpenAPI::toJsonValue(m_like));
    }
    if (m_playlist_item.isSet()) {
        obj.insert(QString("playlistItem"), ::OpenAPI::toJsonValue(m_playlist_item));
    }
    if (m_promoted_item.isSet()) {
        obj.insert(QString("promotedItem"), ::OpenAPI::toJsonValue(m_promoted_item));
    }
    if (m_recommendation.isSet()) {
        obj.insert(QString("recommendation"), ::OpenAPI::toJsonValue(m_recommendation));
    }
    if (m_social.isSet()) {
        obj.insert(QString("social"), ::OpenAPI::toJsonValue(m_social));
    }
    if (m_subscription.isSet()) {
        obj.insert(QString("subscription"), ::OpenAPI::toJsonValue(m_subscription));
    }
    if (m_upload.isSet()) {
        obj.insert(QString("upload"), ::OpenAPI::toJsonValue(m_upload));
    }
    return obj;
}

OAIActivityContentDetailsBulletin OAIActivityContentDetails::getBulletin() const {
    return m_bulletin;
}
void OAIActivityContentDetails::setBulletin(const OAIActivityContentDetailsBulletin &bulletin) {
    m_bulletin = bulletin;
    m_bulletin_isSet = true;
}

bool OAIActivityContentDetails::is_bulletin_Set() const{
    return m_bulletin_isSet;
}

bool OAIActivityContentDetails::is_bulletin_Valid() const{
    return m_bulletin_isValid;
}

OAIActivityContentDetailsChannelItem OAIActivityContentDetails::getChannelItem() const {
    return m_channel_item;
}
void OAIActivityContentDetails::setChannelItem(const OAIActivityContentDetailsChannelItem &channel_item) {
    m_channel_item = channel_item;
    m_channel_item_isSet = true;
}

bool OAIActivityContentDetails::is_channel_item_Set() const{
    return m_channel_item_isSet;
}

bool OAIActivityContentDetails::is_channel_item_Valid() const{
    return m_channel_item_isValid;
}

OAIActivityContentDetailsComment OAIActivityContentDetails::getComment() const {
    return m_comment;
}
void OAIActivityContentDetails::setComment(const OAIActivityContentDetailsComment &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIActivityContentDetails::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIActivityContentDetails::is_comment_Valid() const{
    return m_comment_isValid;
}

OAIActivityContentDetailsFavorite OAIActivityContentDetails::getFavorite() const {
    return m_favorite;
}
void OAIActivityContentDetails::setFavorite(const OAIActivityContentDetailsFavorite &favorite) {
    m_favorite = favorite;
    m_favorite_isSet = true;
}

bool OAIActivityContentDetails::is_favorite_Set() const{
    return m_favorite_isSet;
}

bool OAIActivityContentDetails::is_favorite_Valid() const{
    return m_favorite_isValid;
}

OAIActivityContentDetailsLike OAIActivityContentDetails::getLike() const {
    return m_like;
}
void OAIActivityContentDetails::setLike(const OAIActivityContentDetailsLike &like) {
    m_like = like;
    m_like_isSet = true;
}

bool OAIActivityContentDetails::is_like_Set() const{
    return m_like_isSet;
}

bool OAIActivityContentDetails::is_like_Valid() const{
    return m_like_isValid;
}

OAIActivityContentDetailsPlaylistItem OAIActivityContentDetails::getPlaylistItem() const {
    return m_playlist_item;
}
void OAIActivityContentDetails::setPlaylistItem(const OAIActivityContentDetailsPlaylistItem &playlist_item) {
    m_playlist_item = playlist_item;
    m_playlist_item_isSet = true;
}

bool OAIActivityContentDetails::is_playlist_item_Set() const{
    return m_playlist_item_isSet;
}

bool OAIActivityContentDetails::is_playlist_item_Valid() const{
    return m_playlist_item_isValid;
}

OAIActivityContentDetailsPromotedItem OAIActivityContentDetails::getPromotedItem() const {
    return m_promoted_item;
}
void OAIActivityContentDetails::setPromotedItem(const OAIActivityContentDetailsPromotedItem &promoted_item) {
    m_promoted_item = promoted_item;
    m_promoted_item_isSet = true;
}

bool OAIActivityContentDetails::is_promoted_item_Set() const{
    return m_promoted_item_isSet;
}

bool OAIActivityContentDetails::is_promoted_item_Valid() const{
    return m_promoted_item_isValid;
}

OAIActivityContentDetailsRecommendation OAIActivityContentDetails::getRecommendation() const {
    return m_recommendation;
}
void OAIActivityContentDetails::setRecommendation(const OAIActivityContentDetailsRecommendation &recommendation) {
    m_recommendation = recommendation;
    m_recommendation_isSet = true;
}

bool OAIActivityContentDetails::is_recommendation_Set() const{
    return m_recommendation_isSet;
}

bool OAIActivityContentDetails::is_recommendation_Valid() const{
    return m_recommendation_isValid;
}

OAIActivityContentDetailsSocial OAIActivityContentDetails::getSocial() const {
    return m_social;
}
void OAIActivityContentDetails::setSocial(const OAIActivityContentDetailsSocial &social) {
    m_social = social;
    m_social_isSet = true;
}

bool OAIActivityContentDetails::is_social_Set() const{
    return m_social_isSet;
}

bool OAIActivityContentDetails::is_social_Valid() const{
    return m_social_isValid;
}

OAIActivityContentDetailsSubscription OAIActivityContentDetails::getSubscription() const {
    return m_subscription;
}
void OAIActivityContentDetails::setSubscription(const OAIActivityContentDetailsSubscription &subscription) {
    m_subscription = subscription;
    m_subscription_isSet = true;
}

bool OAIActivityContentDetails::is_subscription_Set() const{
    return m_subscription_isSet;
}

bool OAIActivityContentDetails::is_subscription_Valid() const{
    return m_subscription_isValid;
}

OAIActivityContentDetailsUpload OAIActivityContentDetails::getUpload() const {
    return m_upload;
}
void OAIActivityContentDetails::setUpload(const OAIActivityContentDetailsUpload &upload) {
    m_upload = upload;
    m_upload_isSet = true;
}

bool OAIActivityContentDetails::is_upload_Set() const{
    return m_upload_isSet;
}

bool OAIActivityContentDetails::is_upload_Valid() const{
    return m_upload_isValid;
}

bool OAIActivityContentDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bulletin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_favorite.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_like.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_playlist_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_promoted_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_social.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActivityContentDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
