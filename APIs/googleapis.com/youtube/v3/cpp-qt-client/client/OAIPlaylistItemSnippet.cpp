/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlaylistItemSnippet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlaylistItemSnippet::OAIPlaylistItemSnippet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlaylistItemSnippet::OAIPlaylistItemSnippet() {
    this->initializeModel();
}

OAIPlaylistItemSnippet::~OAIPlaylistItemSnippet() {}

void OAIPlaylistItemSnippet::initializeModel() {

    m_channel_id_isSet = false;
    m_channel_id_isValid = false;

    m_channel_title_isSet = false;
    m_channel_title_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_playlist_id_isSet = false;
    m_playlist_id_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_published_at_isSet = false;
    m_published_at_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_thumbnails_isSet = false;
    m_thumbnails_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_video_owner_channel_id_isSet = false;
    m_video_owner_channel_id_isValid = false;

    m_video_owner_channel_title_isSet = false;
    m_video_owner_channel_title_isValid = false;
}

void OAIPlaylistItemSnippet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlaylistItemSnippet::fromJsonObject(QJsonObject json) {

    m_channel_id_isValid = ::OpenAPI::fromJsonValue(m_channel_id, json[QString("channelId")]);
    m_channel_id_isSet = !json[QString("channelId")].isNull() && m_channel_id_isValid;

    m_channel_title_isValid = ::OpenAPI::fromJsonValue(m_channel_title, json[QString("channelTitle")]);
    m_channel_title_isSet = !json[QString("channelTitle")].isNull() && m_channel_title_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_playlist_id_isValid = ::OpenAPI::fromJsonValue(m_playlist_id, json[QString("playlistId")]);
    m_playlist_id_isSet = !json[QString("playlistId")].isNull() && m_playlist_id_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_published_at_isValid = ::OpenAPI::fromJsonValue(m_published_at, json[QString("publishedAt")]);
    m_published_at_isSet = !json[QString("publishedAt")].isNull() && m_published_at_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_thumbnails_isValid = ::OpenAPI::fromJsonValue(m_thumbnails, json[QString("thumbnails")]);
    m_thumbnails_isSet = !json[QString("thumbnails")].isNull() && m_thumbnails_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_video_owner_channel_id_isValid = ::OpenAPI::fromJsonValue(m_video_owner_channel_id, json[QString("videoOwnerChannelId")]);
    m_video_owner_channel_id_isSet = !json[QString("videoOwnerChannelId")].isNull() && m_video_owner_channel_id_isValid;

    m_video_owner_channel_title_isValid = ::OpenAPI::fromJsonValue(m_video_owner_channel_title, json[QString("videoOwnerChannelTitle")]);
    m_video_owner_channel_title_isSet = !json[QString("videoOwnerChannelTitle")].isNull() && m_video_owner_channel_title_isValid;
}

QString OAIPlaylistItemSnippet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlaylistItemSnippet::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_id_isSet) {
        obj.insert(QString("channelId"), ::OpenAPI::toJsonValue(m_channel_id));
    }
    if (m_channel_title_isSet) {
        obj.insert(QString("channelTitle"), ::OpenAPI::toJsonValue(m_channel_title));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_playlist_id_isSet) {
        obj.insert(QString("playlistId"), ::OpenAPI::toJsonValue(m_playlist_id));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_published_at_isSet) {
        obj.insert(QString("publishedAt"), ::OpenAPI::toJsonValue(m_published_at));
    }
    if (m_resource_id.isSet()) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_thumbnails.isSet()) {
        obj.insert(QString("thumbnails"), ::OpenAPI::toJsonValue(m_thumbnails));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_video_owner_channel_id_isSet) {
        obj.insert(QString("videoOwnerChannelId"), ::OpenAPI::toJsonValue(m_video_owner_channel_id));
    }
    if (m_video_owner_channel_title_isSet) {
        obj.insert(QString("videoOwnerChannelTitle"), ::OpenAPI::toJsonValue(m_video_owner_channel_title));
    }
    return obj;
}

QString OAIPlaylistItemSnippet::getChannelId() const {
    return m_channel_id;
}
void OAIPlaylistItemSnippet::setChannelId(const QString &channel_id) {
    m_channel_id = channel_id;
    m_channel_id_isSet = true;
}

bool OAIPlaylistItemSnippet::is_channel_id_Set() const{
    return m_channel_id_isSet;
}

bool OAIPlaylistItemSnippet::is_channel_id_Valid() const{
    return m_channel_id_isValid;
}

QString OAIPlaylistItemSnippet::getChannelTitle() const {
    return m_channel_title;
}
void OAIPlaylistItemSnippet::setChannelTitle(const QString &channel_title) {
    m_channel_title = channel_title;
    m_channel_title_isSet = true;
}

bool OAIPlaylistItemSnippet::is_channel_title_Set() const{
    return m_channel_title_isSet;
}

bool OAIPlaylistItemSnippet::is_channel_title_Valid() const{
    return m_channel_title_isValid;
}

QString OAIPlaylistItemSnippet::getDescription() const {
    return m_description;
}
void OAIPlaylistItemSnippet::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPlaylistItemSnippet::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPlaylistItemSnippet::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPlaylistItemSnippet::getPlaylistId() const {
    return m_playlist_id;
}
void OAIPlaylistItemSnippet::setPlaylistId(const QString &playlist_id) {
    m_playlist_id = playlist_id;
    m_playlist_id_isSet = true;
}

bool OAIPlaylistItemSnippet::is_playlist_id_Set() const{
    return m_playlist_id_isSet;
}

bool OAIPlaylistItemSnippet::is_playlist_id_Valid() const{
    return m_playlist_id_isValid;
}

qint32 OAIPlaylistItemSnippet::getPosition() const {
    return m_position;
}
void OAIPlaylistItemSnippet::setPosition(const qint32 &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIPlaylistItemSnippet::is_position_Set() const{
    return m_position_isSet;
}

bool OAIPlaylistItemSnippet::is_position_Valid() const{
    return m_position_isValid;
}

QDateTime OAIPlaylistItemSnippet::getPublishedAt() const {
    return m_published_at;
}
void OAIPlaylistItemSnippet::setPublishedAt(const QDateTime &published_at) {
    m_published_at = published_at;
    m_published_at_isSet = true;
}

bool OAIPlaylistItemSnippet::is_published_at_Set() const{
    return m_published_at_isSet;
}

bool OAIPlaylistItemSnippet::is_published_at_Valid() const{
    return m_published_at_isValid;
}

OAIResourceId OAIPlaylistItemSnippet::getResourceId() const {
    return m_resource_id;
}
void OAIPlaylistItemSnippet::setResourceId(const OAIResourceId &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIPlaylistItemSnippet::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIPlaylistItemSnippet::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

OAIThumbnailDetails OAIPlaylistItemSnippet::getThumbnails() const {
    return m_thumbnails;
}
void OAIPlaylistItemSnippet::setThumbnails(const OAIThumbnailDetails &thumbnails) {
    m_thumbnails = thumbnails;
    m_thumbnails_isSet = true;
}

bool OAIPlaylistItemSnippet::is_thumbnails_Set() const{
    return m_thumbnails_isSet;
}

bool OAIPlaylistItemSnippet::is_thumbnails_Valid() const{
    return m_thumbnails_isValid;
}

QString OAIPlaylistItemSnippet::getTitle() const {
    return m_title;
}
void OAIPlaylistItemSnippet::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPlaylistItemSnippet::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPlaylistItemSnippet::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIPlaylistItemSnippet::getVideoOwnerChannelId() const {
    return m_video_owner_channel_id;
}
void OAIPlaylistItemSnippet::setVideoOwnerChannelId(const QString &video_owner_channel_id) {
    m_video_owner_channel_id = video_owner_channel_id;
    m_video_owner_channel_id_isSet = true;
}

bool OAIPlaylistItemSnippet::is_video_owner_channel_id_Set() const{
    return m_video_owner_channel_id_isSet;
}

bool OAIPlaylistItemSnippet::is_video_owner_channel_id_Valid() const{
    return m_video_owner_channel_id_isValid;
}

QString OAIPlaylistItemSnippet::getVideoOwnerChannelTitle() const {
    return m_video_owner_channel_title;
}
void OAIPlaylistItemSnippet::setVideoOwnerChannelTitle(const QString &video_owner_channel_title) {
    m_video_owner_channel_title = video_owner_channel_title;
    m_video_owner_channel_title_isSet = true;
}

bool OAIPlaylistItemSnippet::is_video_owner_channel_title_Set() const{
    return m_video_owner_channel_title_isSet;
}

bool OAIPlaylistItemSnippet::is_video_owner_channel_title_Valid() const{
    return m_video_owner_channel_title_isValid;
}

bool OAIPlaylistItemSnippet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_playlist_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnails.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_owner_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_owner_channel_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlaylistItemSnippet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
