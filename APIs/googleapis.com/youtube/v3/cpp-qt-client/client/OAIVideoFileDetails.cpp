/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoFileDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoFileDetails::OAIVideoFileDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoFileDetails::OAIVideoFileDetails() {
    this->initializeModel();
}

OAIVideoFileDetails::~OAIVideoFileDetails() {}

void OAIVideoFileDetails::initializeModel() {

    m_audio_streams_isSet = false;
    m_audio_streams_isValid = false;

    m_bitrate_bps_isSet = false;
    m_bitrate_bps_isValid = false;

    m_container_isSet = false;
    m_container_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_duration_ms_isSet = false;
    m_duration_ms_isValid = false;

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_file_size_isSet = false;
    m_file_size_isValid = false;

    m_file_type_isSet = false;
    m_file_type_isValid = false;

    m_video_streams_isSet = false;
    m_video_streams_isValid = false;
}

void OAIVideoFileDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoFileDetails::fromJsonObject(QJsonObject json) {

    m_audio_streams_isValid = ::OpenAPI::fromJsonValue(m_audio_streams, json[QString("audioStreams")]);
    m_audio_streams_isSet = !json[QString("audioStreams")].isNull() && m_audio_streams_isValid;

    m_bitrate_bps_isValid = ::OpenAPI::fromJsonValue(m_bitrate_bps, json[QString("bitrateBps")]);
    m_bitrate_bps_isSet = !json[QString("bitrateBps")].isNull() && m_bitrate_bps_isValid;

    m_container_isValid = ::OpenAPI::fromJsonValue(m_container, json[QString("container")]);
    m_container_isSet = !json[QString("container")].isNull() && m_container_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_duration_ms_isValid = ::OpenAPI::fromJsonValue(m_duration_ms, json[QString("durationMs")]);
    m_duration_ms_isSet = !json[QString("durationMs")].isNull() && m_duration_ms_isValid;

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("fileName")]);
    m_file_name_isSet = !json[QString("fileName")].isNull() && m_file_name_isValid;

    m_file_size_isValid = ::OpenAPI::fromJsonValue(m_file_size, json[QString("fileSize")]);
    m_file_size_isSet = !json[QString("fileSize")].isNull() && m_file_size_isValid;

    m_file_type_isValid = ::OpenAPI::fromJsonValue(m_file_type, json[QString("fileType")]);
    m_file_type_isSet = !json[QString("fileType")].isNull() && m_file_type_isValid;

    m_video_streams_isValid = ::OpenAPI::fromJsonValue(m_video_streams, json[QString("videoStreams")]);
    m_video_streams_isSet = !json[QString("videoStreams")].isNull() && m_video_streams_isValid;
}

QString OAIVideoFileDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoFileDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_streams.size() > 0) {
        obj.insert(QString("audioStreams"), ::OpenAPI::toJsonValue(m_audio_streams));
    }
    if (m_bitrate_bps_isSet) {
        obj.insert(QString("bitrateBps"), ::OpenAPI::toJsonValue(m_bitrate_bps));
    }
    if (m_container_isSet) {
        obj.insert(QString("container"), ::OpenAPI::toJsonValue(m_container));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_duration_ms_isSet) {
        obj.insert(QString("durationMs"), ::OpenAPI::toJsonValue(m_duration_ms));
    }
    if (m_file_name_isSet) {
        obj.insert(QString("fileName"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_file_size_isSet) {
        obj.insert(QString("fileSize"), ::OpenAPI::toJsonValue(m_file_size));
    }
    if (m_file_type_isSet) {
        obj.insert(QString("fileType"), ::OpenAPI::toJsonValue(m_file_type));
    }
    if (m_video_streams.size() > 0) {
        obj.insert(QString("videoStreams"), ::OpenAPI::toJsonValue(m_video_streams));
    }
    return obj;
}

QList<OAIVideoFileDetailsAudioStream> OAIVideoFileDetails::getAudioStreams() const {
    return m_audio_streams;
}
void OAIVideoFileDetails::setAudioStreams(const QList<OAIVideoFileDetailsAudioStream> &audio_streams) {
    m_audio_streams = audio_streams;
    m_audio_streams_isSet = true;
}

bool OAIVideoFileDetails::is_audio_streams_Set() const{
    return m_audio_streams_isSet;
}

bool OAIVideoFileDetails::is_audio_streams_Valid() const{
    return m_audio_streams_isValid;
}

QString OAIVideoFileDetails::getBitrateBps() const {
    return m_bitrate_bps;
}
void OAIVideoFileDetails::setBitrateBps(const QString &bitrate_bps) {
    m_bitrate_bps = bitrate_bps;
    m_bitrate_bps_isSet = true;
}

bool OAIVideoFileDetails::is_bitrate_bps_Set() const{
    return m_bitrate_bps_isSet;
}

bool OAIVideoFileDetails::is_bitrate_bps_Valid() const{
    return m_bitrate_bps_isValid;
}

QString OAIVideoFileDetails::getContainer() const {
    return m_container;
}
void OAIVideoFileDetails::setContainer(const QString &container) {
    m_container = container;
    m_container_isSet = true;
}

bool OAIVideoFileDetails::is_container_Set() const{
    return m_container_isSet;
}

bool OAIVideoFileDetails::is_container_Valid() const{
    return m_container_isValid;
}

QString OAIVideoFileDetails::getCreationTime() const {
    return m_creation_time;
}
void OAIVideoFileDetails::setCreationTime(const QString &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIVideoFileDetails::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIVideoFileDetails::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIVideoFileDetails::getDurationMs() const {
    return m_duration_ms;
}
void OAIVideoFileDetails::setDurationMs(const QString &duration_ms) {
    m_duration_ms = duration_ms;
    m_duration_ms_isSet = true;
}

bool OAIVideoFileDetails::is_duration_ms_Set() const{
    return m_duration_ms_isSet;
}

bool OAIVideoFileDetails::is_duration_ms_Valid() const{
    return m_duration_ms_isValid;
}

QString OAIVideoFileDetails::getFileName() const {
    return m_file_name;
}
void OAIVideoFileDetails::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAIVideoFileDetails::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAIVideoFileDetails::is_file_name_Valid() const{
    return m_file_name_isValid;
}

QString OAIVideoFileDetails::getFileSize() const {
    return m_file_size;
}
void OAIVideoFileDetails::setFileSize(const QString &file_size) {
    m_file_size = file_size;
    m_file_size_isSet = true;
}

bool OAIVideoFileDetails::is_file_size_Set() const{
    return m_file_size_isSet;
}

bool OAIVideoFileDetails::is_file_size_Valid() const{
    return m_file_size_isValid;
}

QString OAIVideoFileDetails::getFileType() const {
    return m_file_type;
}
void OAIVideoFileDetails::setFileType(const QString &file_type) {
    m_file_type = file_type;
    m_file_type_isSet = true;
}

bool OAIVideoFileDetails::is_file_type_Set() const{
    return m_file_type_isSet;
}

bool OAIVideoFileDetails::is_file_type_Valid() const{
    return m_file_type_isValid;
}

QList<OAIVideoFileDetailsVideoStream> OAIVideoFileDetails::getVideoStreams() const {
    return m_video_streams;
}
void OAIVideoFileDetails::setVideoStreams(const QList<OAIVideoFileDetailsVideoStream> &video_streams) {
    m_video_streams = video_streams;
    m_video_streams_isSet = true;
}

bool OAIVideoFileDetails::is_video_streams_Set() const{
    return m_video_streams_isSet;
}

bool OAIVideoFileDetails::is_video_streams_Valid() const{
    return m_video_streams_isValid;
}

bool OAIVideoFileDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_streams.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_bitrate_bps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_streams.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoFileDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
