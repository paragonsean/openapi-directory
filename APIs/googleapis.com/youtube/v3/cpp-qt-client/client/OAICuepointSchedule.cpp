/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICuepointSchedule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICuepointSchedule::OAICuepointSchedule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICuepointSchedule::OAICuepointSchedule() {
    this->initializeModel();
}

OAICuepointSchedule::~OAICuepointSchedule() {}

void OAICuepointSchedule::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_pause_ads_until_isSet = false;
    m_pause_ads_until_isValid = false;

    m_repeat_interval_secs_isSet = false;
    m_repeat_interval_secs_isValid = false;

    m_schedule_strategy_isSet = false;
    m_schedule_strategy_isValid = false;
}

void OAICuepointSchedule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICuepointSchedule::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_pause_ads_until_isValid = ::OpenAPI::fromJsonValue(m_pause_ads_until, json[QString("pauseAdsUntil")]);
    m_pause_ads_until_isSet = !json[QString("pauseAdsUntil")].isNull() && m_pause_ads_until_isValid;

    m_repeat_interval_secs_isValid = ::OpenAPI::fromJsonValue(m_repeat_interval_secs, json[QString("repeatIntervalSecs")]);
    m_repeat_interval_secs_isSet = !json[QString("repeatIntervalSecs")].isNull() && m_repeat_interval_secs_isValid;

    m_schedule_strategy_isValid = ::OpenAPI::fromJsonValue(m_schedule_strategy, json[QString("scheduleStrategy")]);
    m_schedule_strategy_isSet = !json[QString("scheduleStrategy")].isNull() && m_schedule_strategy_isValid;
}

QString OAICuepointSchedule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICuepointSchedule::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_pause_ads_until_isSet) {
        obj.insert(QString("pauseAdsUntil"), ::OpenAPI::toJsonValue(m_pause_ads_until));
    }
    if (m_repeat_interval_secs_isSet) {
        obj.insert(QString("repeatIntervalSecs"), ::OpenAPI::toJsonValue(m_repeat_interval_secs));
    }
    if (m_schedule_strategy_isSet) {
        obj.insert(QString("scheduleStrategy"), ::OpenAPI::toJsonValue(m_schedule_strategy));
    }
    return obj;
}

bool OAICuepointSchedule::isEnabled() const {
    return m_enabled;
}
void OAICuepointSchedule::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAICuepointSchedule::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAICuepointSchedule::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAICuepointSchedule::getPauseAdsUntil() const {
    return m_pause_ads_until;
}
void OAICuepointSchedule::setPauseAdsUntil(const QString &pause_ads_until) {
    m_pause_ads_until = pause_ads_until;
    m_pause_ads_until_isSet = true;
}

bool OAICuepointSchedule::is_pause_ads_until_Set() const{
    return m_pause_ads_until_isSet;
}

bool OAICuepointSchedule::is_pause_ads_until_Valid() const{
    return m_pause_ads_until_isValid;
}

qint32 OAICuepointSchedule::getRepeatIntervalSecs() const {
    return m_repeat_interval_secs;
}
void OAICuepointSchedule::setRepeatIntervalSecs(const qint32 &repeat_interval_secs) {
    m_repeat_interval_secs = repeat_interval_secs;
    m_repeat_interval_secs_isSet = true;
}

bool OAICuepointSchedule::is_repeat_interval_secs_Set() const{
    return m_repeat_interval_secs_isSet;
}

bool OAICuepointSchedule::is_repeat_interval_secs_Valid() const{
    return m_repeat_interval_secs_isValid;
}

QString OAICuepointSchedule::getScheduleStrategy() const {
    return m_schedule_strategy;
}
void OAICuepointSchedule::setScheduleStrategy(const QString &schedule_strategy) {
    m_schedule_strategy = schedule_strategy;
    m_schedule_strategy_isSet = true;
}

bool OAICuepointSchedule::is_schedule_strategy_Set() const{
    return m_schedule_strategy_isSet;
}

bool OAICuepointSchedule::is_schedule_strategy_Valid() const{
    return m_schedule_strategy_isValid;
}

bool OAICuepointSchedule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pause_ads_until_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repeat_interval_secs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_strategy_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICuepointSchedule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
