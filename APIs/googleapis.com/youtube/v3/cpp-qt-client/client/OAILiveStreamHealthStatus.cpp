/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILiveStreamHealthStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILiveStreamHealthStatus::OAILiveStreamHealthStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILiveStreamHealthStatus::OAILiveStreamHealthStatus() {
    this->initializeModel();
}

OAILiveStreamHealthStatus::~OAILiveStreamHealthStatus() {}

void OAILiveStreamHealthStatus::initializeModel() {

    m_configuration_issues_isSet = false;
    m_configuration_issues_isValid = false;

    m_last_update_time_seconds_isSet = false;
    m_last_update_time_seconds_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAILiveStreamHealthStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILiveStreamHealthStatus::fromJsonObject(QJsonObject json) {

    m_configuration_issues_isValid = ::OpenAPI::fromJsonValue(m_configuration_issues, json[QString("configurationIssues")]);
    m_configuration_issues_isSet = !json[QString("configurationIssues")].isNull() && m_configuration_issues_isValid;

    m_last_update_time_seconds_isValid = ::OpenAPI::fromJsonValue(m_last_update_time_seconds, json[QString("lastUpdateTimeSeconds")]);
    m_last_update_time_seconds_isSet = !json[QString("lastUpdateTimeSeconds")].isNull() && m_last_update_time_seconds_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAILiveStreamHealthStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILiveStreamHealthStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_configuration_issues.size() > 0) {
        obj.insert(QString("configurationIssues"), ::OpenAPI::toJsonValue(m_configuration_issues));
    }
    if (m_last_update_time_seconds_isSet) {
        obj.insert(QString("lastUpdateTimeSeconds"), ::OpenAPI::toJsonValue(m_last_update_time_seconds));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QList<OAILiveStreamConfigurationIssue> OAILiveStreamHealthStatus::getConfigurationIssues() const {
    return m_configuration_issues;
}
void OAILiveStreamHealthStatus::setConfigurationIssues(const QList<OAILiveStreamConfigurationIssue> &configuration_issues) {
    m_configuration_issues = configuration_issues;
    m_configuration_issues_isSet = true;
}

bool OAILiveStreamHealthStatus::is_configuration_issues_Set() const{
    return m_configuration_issues_isSet;
}

bool OAILiveStreamHealthStatus::is_configuration_issues_Valid() const{
    return m_configuration_issues_isValid;
}

QString OAILiveStreamHealthStatus::getLastUpdateTimeSeconds() const {
    return m_last_update_time_seconds;
}
void OAILiveStreamHealthStatus::setLastUpdateTimeSeconds(const QString &last_update_time_seconds) {
    m_last_update_time_seconds = last_update_time_seconds;
    m_last_update_time_seconds_isSet = true;
}

bool OAILiveStreamHealthStatus::is_last_update_time_seconds_Set() const{
    return m_last_update_time_seconds_isSet;
}

bool OAILiveStreamHealthStatus::is_last_update_time_seconds_Valid() const{
    return m_last_update_time_seconds_isValid;
}

QString OAILiveStreamHealthStatus::getStatus() const {
    return m_status;
}
void OAILiveStreamHealthStatus::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAILiveStreamHealthStatus::is_status_Set() const{
    return m_status_isSet;
}

bool OAILiveStreamHealthStatus::is_status_Valid() const{
    return m_status_isValid;
}

bool OAILiveStreamHealthStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configuration_issues.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_time_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILiveStreamHealthStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
