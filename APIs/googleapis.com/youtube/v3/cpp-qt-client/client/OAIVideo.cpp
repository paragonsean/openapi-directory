/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideo::OAIVideo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideo::OAIVideo() {
    this->initializeModel();
}

OAIVideo::~OAIVideo() {}

void OAIVideo::initializeModel() {

    m_age_gating_isSet = false;
    m_age_gating_isValid = false;

    m_content_details_isSet = false;
    m_content_details_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_file_details_isSet = false;
    m_file_details_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_live_streaming_details_isSet = false;
    m_live_streaming_details_isValid = false;

    m_localizations_isSet = false;
    m_localizations_isValid = false;

    m_monetization_details_isSet = false;
    m_monetization_details_isValid = false;

    m_player_isSet = false;
    m_player_isValid = false;

    m_processing_details_isSet = false;
    m_processing_details_isValid = false;

    m_project_details_isSet = false;
    m_project_details_isValid = false;

    m_recording_details_isSet = false;
    m_recording_details_isValid = false;

    m_snippet_isSet = false;
    m_snippet_isValid = false;

    m_statistics_isSet = false;
    m_statistics_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_suggestions_isSet = false;
    m_suggestions_isValid = false;

    m_topic_details_isSet = false;
    m_topic_details_isValid = false;
}

void OAIVideo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideo::fromJsonObject(QJsonObject json) {

    m_age_gating_isValid = ::OpenAPI::fromJsonValue(m_age_gating, json[QString("ageGating")]);
    m_age_gating_isSet = !json[QString("ageGating")].isNull() && m_age_gating_isValid;

    m_content_details_isValid = ::OpenAPI::fromJsonValue(m_content_details, json[QString("contentDetails")]);
    m_content_details_isSet = !json[QString("contentDetails")].isNull() && m_content_details_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_file_details_isValid = ::OpenAPI::fromJsonValue(m_file_details, json[QString("fileDetails")]);
    m_file_details_isSet = !json[QString("fileDetails")].isNull() && m_file_details_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_live_streaming_details_isValid = ::OpenAPI::fromJsonValue(m_live_streaming_details, json[QString("liveStreamingDetails")]);
    m_live_streaming_details_isSet = !json[QString("liveStreamingDetails")].isNull() && m_live_streaming_details_isValid;

    m_localizations_isValid = ::OpenAPI::fromJsonValue(m_localizations, json[QString("localizations")]);
    m_localizations_isSet = !json[QString("localizations")].isNull() && m_localizations_isValid;

    m_monetization_details_isValid = ::OpenAPI::fromJsonValue(m_monetization_details, json[QString("monetizationDetails")]);
    m_monetization_details_isSet = !json[QString("monetizationDetails")].isNull() && m_monetization_details_isValid;

    m_player_isValid = ::OpenAPI::fromJsonValue(m_player, json[QString("player")]);
    m_player_isSet = !json[QString("player")].isNull() && m_player_isValid;

    m_processing_details_isValid = ::OpenAPI::fromJsonValue(m_processing_details, json[QString("processingDetails")]);
    m_processing_details_isSet = !json[QString("processingDetails")].isNull() && m_processing_details_isValid;

    m_project_details_isValid = ::OpenAPI::fromJsonValue(m_project_details, json[QString("projectDetails")]);
    m_project_details_isSet = !json[QString("projectDetails")].isNull() && m_project_details_isValid;

    m_recording_details_isValid = ::OpenAPI::fromJsonValue(m_recording_details, json[QString("recordingDetails")]);
    m_recording_details_isSet = !json[QString("recordingDetails")].isNull() && m_recording_details_isValid;

    m_snippet_isValid = ::OpenAPI::fromJsonValue(m_snippet, json[QString("snippet")]);
    m_snippet_isSet = !json[QString("snippet")].isNull() && m_snippet_isValid;

    m_statistics_isValid = ::OpenAPI::fromJsonValue(m_statistics, json[QString("statistics")]);
    m_statistics_isSet = !json[QString("statistics")].isNull() && m_statistics_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_suggestions_isValid = ::OpenAPI::fromJsonValue(m_suggestions, json[QString("suggestions")]);
    m_suggestions_isSet = !json[QString("suggestions")].isNull() && m_suggestions_isValid;

    m_topic_details_isValid = ::OpenAPI::fromJsonValue(m_topic_details, json[QString("topicDetails")]);
    m_topic_details_isSet = !json[QString("topicDetails")].isNull() && m_topic_details_isValid;
}

QString OAIVideo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideo::asJsonObject() const {
    QJsonObject obj;
    if (m_age_gating.isSet()) {
        obj.insert(QString("ageGating"), ::OpenAPI::toJsonValue(m_age_gating));
    }
    if (m_content_details.isSet()) {
        obj.insert(QString("contentDetails"), ::OpenAPI::toJsonValue(m_content_details));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_file_details.isSet()) {
        obj.insert(QString("fileDetails"), ::OpenAPI::toJsonValue(m_file_details));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_live_streaming_details.isSet()) {
        obj.insert(QString("liveStreamingDetails"), ::OpenAPI::toJsonValue(m_live_streaming_details));
    }
    if (m_localizations.size() > 0) {
        obj.insert(QString("localizations"), ::OpenAPI::toJsonValue(m_localizations));
    }
    if (m_monetization_details.isSet()) {
        obj.insert(QString("monetizationDetails"), ::OpenAPI::toJsonValue(m_monetization_details));
    }
    if (m_player.isSet()) {
        obj.insert(QString("player"), ::OpenAPI::toJsonValue(m_player));
    }
    if (m_processing_details.isSet()) {
        obj.insert(QString("processingDetails"), ::OpenAPI::toJsonValue(m_processing_details));
    }
    if (m_project_details_isSet) {
        obj.insert(QString("projectDetails"), ::OpenAPI::toJsonValue(m_project_details));
    }
    if (m_recording_details.isSet()) {
        obj.insert(QString("recordingDetails"), ::OpenAPI::toJsonValue(m_recording_details));
    }
    if (m_snippet.isSet()) {
        obj.insert(QString("snippet"), ::OpenAPI::toJsonValue(m_snippet));
    }
    if (m_statistics.isSet()) {
        obj.insert(QString("statistics"), ::OpenAPI::toJsonValue(m_statistics));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_suggestions.isSet()) {
        obj.insert(QString("suggestions"), ::OpenAPI::toJsonValue(m_suggestions));
    }
    if (m_topic_details.isSet()) {
        obj.insert(QString("topicDetails"), ::OpenAPI::toJsonValue(m_topic_details));
    }
    return obj;
}

OAIVideoAgeGating OAIVideo::getAgeGating() const {
    return m_age_gating;
}
void OAIVideo::setAgeGating(const OAIVideoAgeGating &age_gating) {
    m_age_gating = age_gating;
    m_age_gating_isSet = true;
}

bool OAIVideo::is_age_gating_Set() const{
    return m_age_gating_isSet;
}

bool OAIVideo::is_age_gating_Valid() const{
    return m_age_gating_isValid;
}

OAIVideoContentDetails OAIVideo::getContentDetails() const {
    return m_content_details;
}
void OAIVideo::setContentDetails(const OAIVideoContentDetails &content_details) {
    m_content_details = content_details;
    m_content_details_isSet = true;
}

bool OAIVideo::is_content_details_Set() const{
    return m_content_details_isSet;
}

bool OAIVideo::is_content_details_Valid() const{
    return m_content_details_isValid;
}

QString OAIVideo::getEtag() const {
    return m_etag;
}
void OAIVideo::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIVideo::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIVideo::is_etag_Valid() const{
    return m_etag_isValid;
}

OAIVideoFileDetails OAIVideo::getFileDetails() const {
    return m_file_details;
}
void OAIVideo::setFileDetails(const OAIVideoFileDetails &file_details) {
    m_file_details = file_details;
    m_file_details_isSet = true;
}

bool OAIVideo::is_file_details_Set() const{
    return m_file_details_isSet;
}

bool OAIVideo::is_file_details_Valid() const{
    return m_file_details_isValid;
}

QString OAIVideo::getId() const {
    return m_id;
}
void OAIVideo::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIVideo::is_id_Set() const{
    return m_id_isSet;
}

bool OAIVideo::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIVideo::getKind() const {
    return m_kind;
}
void OAIVideo::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIVideo::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIVideo::is_kind_Valid() const{
    return m_kind_isValid;
}

OAIVideoLiveStreamingDetails OAIVideo::getLiveStreamingDetails() const {
    return m_live_streaming_details;
}
void OAIVideo::setLiveStreamingDetails(const OAIVideoLiveStreamingDetails &live_streaming_details) {
    m_live_streaming_details = live_streaming_details;
    m_live_streaming_details_isSet = true;
}

bool OAIVideo::is_live_streaming_details_Set() const{
    return m_live_streaming_details_isSet;
}

bool OAIVideo::is_live_streaming_details_Valid() const{
    return m_live_streaming_details_isValid;
}

QMap<QString, OAIVideoLocalization> OAIVideo::getLocalizations() const {
    return m_localizations;
}
void OAIVideo::setLocalizations(const QMap<QString, OAIVideoLocalization> &localizations) {
    m_localizations = localizations;
    m_localizations_isSet = true;
}

bool OAIVideo::is_localizations_Set() const{
    return m_localizations_isSet;
}

bool OAIVideo::is_localizations_Valid() const{
    return m_localizations_isValid;
}

OAIVideoMonetizationDetails OAIVideo::getMonetizationDetails() const {
    return m_monetization_details;
}
void OAIVideo::setMonetizationDetails(const OAIVideoMonetizationDetails &monetization_details) {
    m_monetization_details = monetization_details;
    m_monetization_details_isSet = true;
}

bool OAIVideo::is_monetization_details_Set() const{
    return m_monetization_details_isSet;
}

bool OAIVideo::is_monetization_details_Valid() const{
    return m_monetization_details_isValid;
}

OAIVideoPlayer OAIVideo::getPlayer() const {
    return m_player;
}
void OAIVideo::setPlayer(const OAIVideoPlayer &player) {
    m_player = player;
    m_player_isSet = true;
}

bool OAIVideo::is_player_Set() const{
    return m_player_isSet;
}

bool OAIVideo::is_player_Valid() const{
    return m_player_isValid;
}

OAIVideoProcessingDetails OAIVideo::getProcessingDetails() const {
    return m_processing_details;
}
void OAIVideo::setProcessingDetails(const OAIVideoProcessingDetails &processing_details) {
    m_processing_details = processing_details;
    m_processing_details_isSet = true;
}

bool OAIVideo::is_processing_details_Set() const{
    return m_processing_details_isSet;
}

bool OAIVideo::is_processing_details_Valid() const{
    return m_processing_details_isValid;
}

OAIObject OAIVideo::getProjectDetails() const {
    return m_project_details;
}
void OAIVideo::setProjectDetails(const OAIObject &project_details) {
    m_project_details = project_details;
    m_project_details_isSet = true;
}

bool OAIVideo::is_project_details_Set() const{
    return m_project_details_isSet;
}

bool OAIVideo::is_project_details_Valid() const{
    return m_project_details_isValid;
}

OAIVideoRecordingDetails OAIVideo::getRecordingDetails() const {
    return m_recording_details;
}
void OAIVideo::setRecordingDetails(const OAIVideoRecordingDetails &recording_details) {
    m_recording_details = recording_details;
    m_recording_details_isSet = true;
}

bool OAIVideo::is_recording_details_Set() const{
    return m_recording_details_isSet;
}

bool OAIVideo::is_recording_details_Valid() const{
    return m_recording_details_isValid;
}

OAIVideoSnippet OAIVideo::getSnippet() const {
    return m_snippet;
}
void OAIVideo::setSnippet(const OAIVideoSnippet &snippet) {
    m_snippet = snippet;
    m_snippet_isSet = true;
}

bool OAIVideo::is_snippet_Set() const{
    return m_snippet_isSet;
}

bool OAIVideo::is_snippet_Valid() const{
    return m_snippet_isValid;
}

OAIVideoStatistics OAIVideo::getStatistics() const {
    return m_statistics;
}
void OAIVideo::setStatistics(const OAIVideoStatistics &statistics) {
    m_statistics = statistics;
    m_statistics_isSet = true;
}

bool OAIVideo::is_statistics_Set() const{
    return m_statistics_isSet;
}

bool OAIVideo::is_statistics_Valid() const{
    return m_statistics_isValid;
}

OAIVideoStatus OAIVideo::getStatus() const {
    return m_status;
}
void OAIVideo::setStatus(const OAIVideoStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIVideo::is_status_Set() const{
    return m_status_isSet;
}

bool OAIVideo::is_status_Valid() const{
    return m_status_isValid;
}

OAIVideoSuggestions OAIVideo::getSuggestions() const {
    return m_suggestions;
}
void OAIVideo::setSuggestions(const OAIVideoSuggestions &suggestions) {
    m_suggestions = suggestions;
    m_suggestions_isSet = true;
}

bool OAIVideo::is_suggestions_Set() const{
    return m_suggestions_isSet;
}

bool OAIVideo::is_suggestions_Valid() const{
    return m_suggestions_isValid;
}

OAIVideoTopicDetails OAIVideo::getTopicDetails() const {
    return m_topic_details;
}
void OAIVideo::setTopicDetails(const OAIVideoTopicDetails &topic_details) {
    m_topic_details = topic_details;
    m_topic_details_isSet = true;
}

bool OAIVideo::is_topic_details_Set() const{
    return m_topic_details_isSet;
}

bool OAIVideo::is_topic_details_Valid() const{
    return m_topic_details_isValid;
}

bool OAIVideo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_age_gating.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_streaming_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_localizations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_monetization_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_player.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recording_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_snippet.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggestions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
