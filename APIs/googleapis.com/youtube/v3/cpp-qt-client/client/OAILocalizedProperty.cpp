/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocalizedProperty.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocalizedProperty::OAILocalizedProperty(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocalizedProperty::OAILocalizedProperty() {
    this->initializeModel();
}

OAILocalizedProperty::~OAILocalizedProperty() {}

void OAILocalizedProperty::initializeModel() {

    m_default_language_isSet = false;
    m_default_language_isValid = false;

    m_localized_isSet = false;
    m_localized_isValid = false;
}

void OAILocalizedProperty::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocalizedProperty::fromJsonObject(QJsonObject json) {

    m_default_language_isValid = ::OpenAPI::fromJsonValue(m_default_language, json[QString("defaultLanguage")]);
    m_default_language_isSet = !json[QString("defaultLanguage")].isNull() && m_default_language_isValid;

    m_localized_isValid = ::OpenAPI::fromJsonValue(m_localized, json[QString("localized")]);
    m_localized_isSet = !json[QString("localized")].isNull() && m_localized_isValid;
}

QString OAILocalizedProperty::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocalizedProperty::asJsonObject() const {
    QJsonObject obj;
    if (m_default_language.isSet()) {
        obj.insert(QString("defaultLanguage"), ::OpenAPI::toJsonValue(m_default_language));
    }
    if (m_localized.size() > 0) {
        obj.insert(QString("localized"), ::OpenAPI::toJsonValue(m_localized));
    }
    return obj;
}

OAILanguageTag OAILocalizedProperty::getDefaultLanguage() const {
    return m_default_language;
}
void OAILocalizedProperty::setDefaultLanguage(const OAILanguageTag &default_language) {
    m_default_language = default_language;
    m_default_language_isSet = true;
}

bool OAILocalizedProperty::is_default_language_Set() const{
    return m_default_language_isSet;
}

bool OAILocalizedProperty::is_default_language_Valid() const{
    return m_default_language_isValid;
}

QList<OAILocalizedString> OAILocalizedProperty::getLocalized() const {
    return m_localized;
}
void OAILocalizedProperty::setLocalized(const QList<OAILocalizedString> &localized) {
    m_localized = localized;
    m_localized_isSet = true;
}

bool OAILocalizedProperty::is_localized_Set() const{
    return m_localized_isSet;
}

bool OAILocalizedProperty::is_localized_Valid() const{
    return m_localized_isValid;
}

bool OAILocalizedProperty::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_language.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_localized.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocalizedProperty::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
