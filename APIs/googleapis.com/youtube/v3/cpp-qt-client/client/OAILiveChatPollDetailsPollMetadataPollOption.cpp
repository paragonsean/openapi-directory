/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILiveChatPollDetailsPollMetadataPollOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILiveChatPollDetailsPollMetadataPollOption::OAILiveChatPollDetailsPollMetadataPollOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILiveChatPollDetailsPollMetadataPollOption::OAILiveChatPollDetailsPollMetadataPollOption() {
    this->initializeModel();
}

OAILiveChatPollDetailsPollMetadataPollOption::~OAILiveChatPollDetailsPollMetadataPollOption() {}

void OAILiveChatPollDetailsPollMetadataPollOption::initializeModel() {

    m_option_text_isSet = false;
    m_option_text_isValid = false;

    m_tally_isSet = false;
    m_tally_isValid = false;
}

void OAILiveChatPollDetailsPollMetadataPollOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILiveChatPollDetailsPollMetadataPollOption::fromJsonObject(QJsonObject json) {

    m_option_text_isValid = ::OpenAPI::fromJsonValue(m_option_text, json[QString("optionText")]);
    m_option_text_isSet = !json[QString("optionText")].isNull() && m_option_text_isValid;

    m_tally_isValid = ::OpenAPI::fromJsonValue(m_tally, json[QString("tally")]);
    m_tally_isSet = !json[QString("tally")].isNull() && m_tally_isValid;
}

QString OAILiveChatPollDetailsPollMetadataPollOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILiveChatPollDetailsPollMetadataPollOption::asJsonObject() const {
    QJsonObject obj;
    if (m_option_text_isSet) {
        obj.insert(QString("optionText"), ::OpenAPI::toJsonValue(m_option_text));
    }
    if (m_tally_isSet) {
        obj.insert(QString("tally"), ::OpenAPI::toJsonValue(m_tally));
    }
    return obj;
}

QString OAILiveChatPollDetailsPollMetadataPollOption::getOptionText() const {
    return m_option_text;
}
void OAILiveChatPollDetailsPollMetadataPollOption::setOptionText(const QString &option_text) {
    m_option_text = option_text;
    m_option_text_isSet = true;
}

bool OAILiveChatPollDetailsPollMetadataPollOption::is_option_text_Set() const{
    return m_option_text_isSet;
}

bool OAILiveChatPollDetailsPollMetadataPollOption::is_option_text_Valid() const{
    return m_option_text_isValid;
}

QString OAILiveChatPollDetailsPollMetadataPollOption::getTally() const {
    return m_tally;
}
void OAILiveChatPollDetailsPollMetadataPollOption::setTally(const QString &tally) {
    m_tally = tally;
    m_tally_isSet = true;
}

bool OAILiveChatPollDetailsPollMetadataPollOption::is_tally_Set() const{
    return m_tally_isSet;
}

bool OAILiveChatPollDetailsPollMetadataPollOption::is_tally_Valid() const{
    return m_tally_isValid;
}

bool OAILiveChatPollDetailsPollMetadataPollOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_option_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tally_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILiveChatPollDetailsPollMetadataPollOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
