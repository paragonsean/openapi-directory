/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILiveStreamContentDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILiveStreamContentDetails::OAILiveStreamContentDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILiveStreamContentDetails::OAILiveStreamContentDetails() {
    this->initializeModel();
}

OAILiveStreamContentDetails::~OAILiveStreamContentDetails() {}

void OAILiveStreamContentDetails::initializeModel() {

    m_closed_captions_ingestion_url_isSet = false;
    m_closed_captions_ingestion_url_isValid = false;

    m_is_reusable_isSet = false;
    m_is_reusable_isValid = false;
}

void OAILiveStreamContentDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILiveStreamContentDetails::fromJsonObject(QJsonObject json) {

    m_closed_captions_ingestion_url_isValid = ::OpenAPI::fromJsonValue(m_closed_captions_ingestion_url, json[QString("closedCaptionsIngestionUrl")]);
    m_closed_captions_ingestion_url_isSet = !json[QString("closedCaptionsIngestionUrl")].isNull() && m_closed_captions_ingestion_url_isValid;

    m_is_reusable_isValid = ::OpenAPI::fromJsonValue(m_is_reusable, json[QString("isReusable")]);
    m_is_reusable_isSet = !json[QString("isReusable")].isNull() && m_is_reusable_isValid;
}

QString OAILiveStreamContentDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILiveStreamContentDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_closed_captions_ingestion_url_isSet) {
        obj.insert(QString("closedCaptionsIngestionUrl"), ::OpenAPI::toJsonValue(m_closed_captions_ingestion_url));
    }
    if (m_is_reusable_isSet) {
        obj.insert(QString("isReusable"), ::OpenAPI::toJsonValue(m_is_reusable));
    }
    return obj;
}

QString OAILiveStreamContentDetails::getClosedCaptionsIngestionUrl() const {
    return m_closed_captions_ingestion_url;
}
void OAILiveStreamContentDetails::setClosedCaptionsIngestionUrl(const QString &closed_captions_ingestion_url) {
    m_closed_captions_ingestion_url = closed_captions_ingestion_url;
    m_closed_captions_ingestion_url_isSet = true;
}

bool OAILiveStreamContentDetails::is_closed_captions_ingestion_url_Set() const{
    return m_closed_captions_ingestion_url_isSet;
}

bool OAILiveStreamContentDetails::is_closed_captions_ingestion_url_Valid() const{
    return m_closed_captions_ingestion_url_isValid;
}

bool OAILiveStreamContentDetails::isIsReusable() const {
    return m_is_reusable;
}
void OAILiveStreamContentDetails::setIsReusable(const bool &is_reusable) {
    m_is_reusable = is_reusable;
    m_is_reusable_isSet = true;
}

bool OAILiveStreamContentDetails::is_is_reusable_Set() const{
    return m_is_reusable_isSet;
}

bool OAILiveStreamContentDetails::is_is_reusable_Valid() const{
    return m_is_reusable_isValid;
}

bool OAILiveStreamContentDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_closed_captions_ingestion_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_reusable_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILiveStreamContentDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
