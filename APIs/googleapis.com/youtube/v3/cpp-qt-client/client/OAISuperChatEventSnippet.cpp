/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISuperChatEventSnippet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISuperChatEventSnippet::OAISuperChatEventSnippet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISuperChatEventSnippet::OAISuperChatEventSnippet() {
    this->initializeModel();
}

OAISuperChatEventSnippet::~OAISuperChatEventSnippet() {}

void OAISuperChatEventSnippet::initializeModel() {

    m_amount_micros_isSet = false;
    m_amount_micros_isValid = false;

    m_channel_id_isSet = false;
    m_channel_id_isValid = false;

    m_comment_text_isSet = false;
    m_comment_text_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_display_string_isSet = false;
    m_display_string_isValid = false;

    m_is_super_sticker_event_isSet = false;
    m_is_super_sticker_event_isValid = false;

    m_message_type_isSet = false;
    m_message_type_isValid = false;

    m_super_sticker_metadata_isSet = false;
    m_super_sticker_metadata_isValid = false;

    m_supporter_details_isSet = false;
    m_supporter_details_isValid = false;
}

void OAISuperChatEventSnippet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISuperChatEventSnippet::fromJsonObject(QJsonObject json) {

    m_amount_micros_isValid = ::OpenAPI::fromJsonValue(m_amount_micros, json[QString("amountMicros")]);
    m_amount_micros_isSet = !json[QString("amountMicros")].isNull() && m_amount_micros_isValid;

    m_channel_id_isValid = ::OpenAPI::fromJsonValue(m_channel_id, json[QString("channelId")]);
    m_channel_id_isSet = !json[QString("channelId")].isNull() && m_channel_id_isValid;

    m_comment_text_isValid = ::OpenAPI::fromJsonValue(m_comment_text, json[QString("commentText")]);
    m_comment_text_isSet = !json[QString("commentText")].isNull() && m_comment_text_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_display_string_isValid = ::OpenAPI::fromJsonValue(m_display_string, json[QString("displayString")]);
    m_display_string_isSet = !json[QString("displayString")].isNull() && m_display_string_isValid;

    m_is_super_sticker_event_isValid = ::OpenAPI::fromJsonValue(m_is_super_sticker_event, json[QString("isSuperStickerEvent")]);
    m_is_super_sticker_event_isSet = !json[QString("isSuperStickerEvent")].isNull() && m_is_super_sticker_event_isValid;

    m_message_type_isValid = ::OpenAPI::fromJsonValue(m_message_type, json[QString("messageType")]);
    m_message_type_isSet = !json[QString("messageType")].isNull() && m_message_type_isValid;

    m_super_sticker_metadata_isValid = ::OpenAPI::fromJsonValue(m_super_sticker_metadata, json[QString("superStickerMetadata")]);
    m_super_sticker_metadata_isSet = !json[QString("superStickerMetadata")].isNull() && m_super_sticker_metadata_isValid;

    m_supporter_details_isValid = ::OpenAPI::fromJsonValue(m_supporter_details, json[QString("supporterDetails")]);
    m_supporter_details_isSet = !json[QString("supporterDetails")].isNull() && m_supporter_details_isValid;
}

QString OAISuperChatEventSnippet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISuperChatEventSnippet::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_micros_isSet) {
        obj.insert(QString("amountMicros"), ::OpenAPI::toJsonValue(m_amount_micros));
    }
    if (m_channel_id_isSet) {
        obj.insert(QString("channelId"), ::OpenAPI::toJsonValue(m_channel_id));
    }
    if (m_comment_text_isSet) {
        obj.insert(QString("commentText"), ::OpenAPI::toJsonValue(m_comment_text));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_display_string_isSet) {
        obj.insert(QString("displayString"), ::OpenAPI::toJsonValue(m_display_string));
    }
    if (m_is_super_sticker_event_isSet) {
        obj.insert(QString("isSuperStickerEvent"), ::OpenAPI::toJsonValue(m_is_super_sticker_event));
    }
    if (m_message_type_isSet) {
        obj.insert(QString("messageType"), ::OpenAPI::toJsonValue(m_message_type));
    }
    if (m_super_sticker_metadata.isSet()) {
        obj.insert(QString("superStickerMetadata"), ::OpenAPI::toJsonValue(m_super_sticker_metadata));
    }
    if (m_supporter_details.isSet()) {
        obj.insert(QString("supporterDetails"), ::OpenAPI::toJsonValue(m_supporter_details));
    }
    return obj;
}

QString OAISuperChatEventSnippet::getAmountMicros() const {
    return m_amount_micros;
}
void OAISuperChatEventSnippet::setAmountMicros(const QString &amount_micros) {
    m_amount_micros = amount_micros;
    m_amount_micros_isSet = true;
}

bool OAISuperChatEventSnippet::is_amount_micros_Set() const{
    return m_amount_micros_isSet;
}

bool OAISuperChatEventSnippet::is_amount_micros_Valid() const{
    return m_amount_micros_isValid;
}

QString OAISuperChatEventSnippet::getChannelId() const {
    return m_channel_id;
}
void OAISuperChatEventSnippet::setChannelId(const QString &channel_id) {
    m_channel_id = channel_id;
    m_channel_id_isSet = true;
}

bool OAISuperChatEventSnippet::is_channel_id_Set() const{
    return m_channel_id_isSet;
}

bool OAISuperChatEventSnippet::is_channel_id_Valid() const{
    return m_channel_id_isValid;
}

QString OAISuperChatEventSnippet::getCommentText() const {
    return m_comment_text;
}
void OAISuperChatEventSnippet::setCommentText(const QString &comment_text) {
    m_comment_text = comment_text;
    m_comment_text_isSet = true;
}

bool OAISuperChatEventSnippet::is_comment_text_Set() const{
    return m_comment_text_isSet;
}

bool OAISuperChatEventSnippet::is_comment_text_Valid() const{
    return m_comment_text_isValid;
}

QDateTime OAISuperChatEventSnippet::getCreatedAt() const {
    return m_created_at;
}
void OAISuperChatEventSnippet::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAISuperChatEventSnippet::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAISuperChatEventSnippet::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAISuperChatEventSnippet::getCurrency() const {
    return m_currency;
}
void OAISuperChatEventSnippet::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAISuperChatEventSnippet::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAISuperChatEventSnippet::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAISuperChatEventSnippet::getDisplayString() const {
    return m_display_string;
}
void OAISuperChatEventSnippet::setDisplayString(const QString &display_string) {
    m_display_string = display_string;
    m_display_string_isSet = true;
}

bool OAISuperChatEventSnippet::is_display_string_Set() const{
    return m_display_string_isSet;
}

bool OAISuperChatEventSnippet::is_display_string_Valid() const{
    return m_display_string_isValid;
}

bool OAISuperChatEventSnippet::isIsSuperStickerEvent() const {
    return m_is_super_sticker_event;
}
void OAISuperChatEventSnippet::setIsSuperStickerEvent(const bool &is_super_sticker_event) {
    m_is_super_sticker_event = is_super_sticker_event;
    m_is_super_sticker_event_isSet = true;
}

bool OAISuperChatEventSnippet::is_is_super_sticker_event_Set() const{
    return m_is_super_sticker_event_isSet;
}

bool OAISuperChatEventSnippet::is_is_super_sticker_event_Valid() const{
    return m_is_super_sticker_event_isValid;
}

qint32 OAISuperChatEventSnippet::getMessageType() const {
    return m_message_type;
}
void OAISuperChatEventSnippet::setMessageType(const qint32 &message_type) {
    m_message_type = message_type;
    m_message_type_isSet = true;
}

bool OAISuperChatEventSnippet::is_message_type_Set() const{
    return m_message_type_isSet;
}

bool OAISuperChatEventSnippet::is_message_type_Valid() const{
    return m_message_type_isValid;
}

OAISuperStickerMetadata OAISuperChatEventSnippet::getSuperStickerMetadata() const {
    return m_super_sticker_metadata;
}
void OAISuperChatEventSnippet::setSuperStickerMetadata(const OAISuperStickerMetadata &super_sticker_metadata) {
    m_super_sticker_metadata = super_sticker_metadata;
    m_super_sticker_metadata_isSet = true;
}

bool OAISuperChatEventSnippet::is_super_sticker_metadata_Set() const{
    return m_super_sticker_metadata_isSet;
}

bool OAISuperChatEventSnippet::is_super_sticker_metadata_Valid() const{
    return m_super_sticker_metadata_isValid;
}

OAIChannelProfileDetails OAISuperChatEventSnippet::getSupporterDetails() const {
    return m_supporter_details;
}
void OAISuperChatEventSnippet::setSupporterDetails(const OAIChannelProfileDetails &supporter_details) {
    m_supporter_details = supporter_details;
    m_supporter_details_isSet = true;
}

bool OAISuperChatEventSnippet::is_supporter_details_Set() const{
    return m_supporter_details_isSet;
}

bool OAISuperChatEventSnippet::is_supporter_details_Valid() const{
    return m_supporter_details_isValid;
}

bool OAISuperChatEventSnippet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_micros_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_super_sticker_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_super_sticker_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supporter_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISuperChatEventSnippet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
