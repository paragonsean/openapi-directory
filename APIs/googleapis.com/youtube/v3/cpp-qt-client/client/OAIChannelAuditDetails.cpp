/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelAuditDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelAuditDetails::OAIChannelAuditDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelAuditDetails::OAIChannelAuditDetails() {
    this->initializeModel();
}

OAIChannelAuditDetails::~OAIChannelAuditDetails() {}

void OAIChannelAuditDetails::initializeModel() {

    m_community_guidelines_good_standing_isSet = false;
    m_community_guidelines_good_standing_isValid = false;

    m_content_id_claims_good_standing_isSet = false;
    m_content_id_claims_good_standing_isValid = false;

    m_copyright_strikes_good_standing_isSet = false;
    m_copyright_strikes_good_standing_isValid = false;
}

void OAIChannelAuditDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelAuditDetails::fromJsonObject(QJsonObject json) {

    m_community_guidelines_good_standing_isValid = ::OpenAPI::fromJsonValue(m_community_guidelines_good_standing, json[QString("communityGuidelinesGoodStanding")]);
    m_community_guidelines_good_standing_isSet = !json[QString("communityGuidelinesGoodStanding")].isNull() && m_community_guidelines_good_standing_isValid;

    m_content_id_claims_good_standing_isValid = ::OpenAPI::fromJsonValue(m_content_id_claims_good_standing, json[QString("contentIdClaimsGoodStanding")]);
    m_content_id_claims_good_standing_isSet = !json[QString("contentIdClaimsGoodStanding")].isNull() && m_content_id_claims_good_standing_isValid;

    m_copyright_strikes_good_standing_isValid = ::OpenAPI::fromJsonValue(m_copyright_strikes_good_standing, json[QString("copyrightStrikesGoodStanding")]);
    m_copyright_strikes_good_standing_isSet = !json[QString("copyrightStrikesGoodStanding")].isNull() && m_copyright_strikes_good_standing_isValid;
}

QString OAIChannelAuditDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelAuditDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_community_guidelines_good_standing_isSet) {
        obj.insert(QString("communityGuidelinesGoodStanding"), ::OpenAPI::toJsonValue(m_community_guidelines_good_standing));
    }
    if (m_content_id_claims_good_standing_isSet) {
        obj.insert(QString("contentIdClaimsGoodStanding"), ::OpenAPI::toJsonValue(m_content_id_claims_good_standing));
    }
    if (m_copyright_strikes_good_standing_isSet) {
        obj.insert(QString("copyrightStrikesGoodStanding"), ::OpenAPI::toJsonValue(m_copyright_strikes_good_standing));
    }
    return obj;
}

bool OAIChannelAuditDetails::isCommunityGuidelinesGoodStanding() const {
    return m_community_guidelines_good_standing;
}
void OAIChannelAuditDetails::setCommunityGuidelinesGoodStanding(const bool &community_guidelines_good_standing) {
    m_community_guidelines_good_standing = community_guidelines_good_standing;
    m_community_guidelines_good_standing_isSet = true;
}

bool OAIChannelAuditDetails::is_community_guidelines_good_standing_Set() const{
    return m_community_guidelines_good_standing_isSet;
}

bool OAIChannelAuditDetails::is_community_guidelines_good_standing_Valid() const{
    return m_community_guidelines_good_standing_isValid;
}

bool OAIChannelAuditDetails::isContentIdClaimsGoodStanding() const {
    return m_content_id_claims_good_standing;
}
void OAIChannelAuditDetails::setContentIdClaimsGoodStanding(const bool &content_id_claims_good_standing) {
    m_content_id_claims_good_standing = content_id_claims_good_standing;
    m_content_id_claims_good_standing_isSet = true;
}

bool OAIChannelAuditDetails::is_content_id_claims_good_standing_Set() const{
    return m_content_id_claims_good_standing_isSet;
}

bool OAIChannelAuditDetails::is_content_id_claims_good_standing_Valid() const{
    return m_content_id_claims_good_standing_isValid;
}

bool OAIChannelAuditDetails::isCopyrightStrikesGoodStanding() const {
    return m_copyright_strikes_good_standing;
}
void OAIChannelAuditDetails::setCopyrightStrikesGoodStanding(const bool &copyright_strikes_good_standing) {
    m_copyright_strikes_good_standing = copyright_strikes_good_standing;
    m_copyright_strikes_good_standing_isSet = true;
}

bool OAIChannelAuditDetails::is_copyright_strikes_good_standing_Set() const{
    return m_copyright_strikes_good_standing_isSet;
}

bool OAIChannelAuditDetails::is_copyright_strikes_good_standing_Valid() const{
    return m_copyright_strikes_good_standing_isValid;
}

bool OAIChannelAuditDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_community_guidelines_good_standing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_id_claims_good_standing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copyright_strikes_good_standing_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelAuditDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
