/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoStatus::OAIVideoStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoStatus::OAIVideoStatus() {
    this->initializeModel();
}

OAIVideoStatus::~OAIVideoStatus() {}

void OAIVideoStatus::initializeModel() {

    m_embeddable_isSet = false;
    m_embeddable_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_license_isSet = false;
    m_license_isValid = false;

    m_made_for_kids_isSet = false;
    m_made_for_kids_isValid = false;

    m_privacy_status_isSet = false;
    m_privacy_status_isValid = false;

    m_public_stats_viewable_isSet = false;
    m_public_stats_viewable_isValid = false;

    m_publish_at_isSet = false;
    m_publish_at_isValid = false;

    m_rejection_reason_isSet = false;
    m_rejection_reason_isValid = false;

    m_self_declared_made_for_kids_isSet = false;
    m_self_declared_made_for_kids_isValid = false;

    m_upload_status_isSet = false;
    m_upload_status_isValid = false;
}

void OAIVideoStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoStatus::fromJsonObject(QJsonObject json) {

    m_embeddable_isValid = ::OpenAPI::fromJsonValue(m_embeddable, json[QString("embeddable")]);
    m_embeddable_isSet = !json[QString("embeddable")].isNull() && m_embeddable_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("failureReason")]);
    m_failure_reason_isSet = !json[QString("failureReason")].isNull() && m_failure_reason_isValid;

    m_license_isValid = ::OpenAPI::fromJsonValue(m_license, json[QString("license")]);
    m_license_isSet = !json[QString("license")].isNull() && m_license_isValid;

    m_made_for_kids_isValid = ::OpenAPI::fromJsonValue(m_made_for_kids, json[QString("madeForKids")]);
    m_made_for_kids_isSet = !json[QString("madeForKids")].isNull() && m_made_for_kids_isValid;

    m_privacy_status_isValid = ::OpenAPI::fromJsonValue(m_privacy_status, json[QString("privacyStatus")]);
    m_privacy_status_isSet = !json[QString("privacyStatus")].isNull() && m_privacy_status_isValid;

    m_public_stats_viewable_isValid = ::OpenAPI::fromJsonValue(m_public_stats_viewable, json[QString("publicStatsViewable")]);
    m_public_stats_viewable_isSet = !json[QString("publicStatsViewable")].isNull() && m_public_stats_viewable_isValid;

    m_publish_at_isValid = ::OpenAPI::fromJsonValue(m_publish_at, json[QString("publishAt")]);
    m_publish_at_isSet = !json[QString("publishAt")].isNull() && m_publish_at_isValid;

    m_rejection_reason_isValid = ::OpenAPI::fromJsonValue(m_rejection_reason, json[QString("rejectionReason")]);
    m_rejection_reason_isSet = !json[QString("rejectionReason")].isNull() && m_rejection_reason_isValid;

    m_self_declared_made_for_kids_isValid = ::OpenAPI::fromJsonValue(m_self_declared_made_for_kids, json[QString("selfDeclaredMadeForKids")]);
    m_self_declared_made_for_kids_isSet = !json[QString("selfDeclaredMadeForKids")].isNull() && m_self_declared_made_for_kids_isValid;

    m_upload_status_isValid = ::OpenAPI::fromJsonValue(m_upload_status, json[QString("uploadStatus")]);
    m_upload_status_isSet = !json[QString("uploadStatus")].isNull() && m_upload_status_isValid;
}

QString OAIVideoStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_embeddable_isSet) {
        obj.insert(QString("embeddable"), ::OpenAPI::toJsonValue(m_embeddable));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("failureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_license_isSet) {
        obj.insert(QString("license"), ::OpenAPI::toJsonValue(m_license));
    }
    if (m_made_for_kids_isSet) {
        obj.insert(QString("madeForKids"), ::OpenAPI::toJsonValue(m_made_for_kids));
    }
    if (m_privacy_status_isSet) {
        obj.insert(QString("privacyStatus"), ::OpenAPI::toJsonValue(m_privacy_status));
    }
    if (m_public_stats_viewable_isSet) {
        obj.insert(QString("publicStatsViewable"), ::OpenAPI::toJsonValue(m_public_stats_viewable));
    }
    if (m_publish_at_isSet) {
        obj.insert(QString("publishAt"), ::OpenAPI::toJsonValue(m_publish_at));
    }
    if (m_rejection_reason_isSet) {
        obj.insert(QString("rejectionReason"), ::OpenAPI::toJsonValue(m_rejection_reason));
    }
    if (m_self_declared_made_for_kids_isSet) {
        obj.insert(QString("selfDeclaredMadeForKids"), ::OpenAPI::toJsonValue(m_self_declared_made_for_kids));
    }
    if (m_upload_status_isSet) {
        obj.insert(QString("uploadStatus"), ::OpenAPI::toJsonValue(m_upload_status));
    }
    return obj;
}

bool OAIVideoStatus::isEmbeddable() const {
    return m_embeddable;
}
void OAIVideoStatus::setEmbeddable(const bool &embeddable) {
    m_embeddable = embeddable;
    m_embeddable_isSet = true;
}

bool OAIVideoStatus::is_embeddable_Set() const{
    return m_embeddable_isSet;
}

bool OAIVideoStatus::is_embeddable_Valid() const{
    return m_embeddable_isValid;
}

QString OAIVideoStatus::getFailureReason() const {
    return m_failure_reason;
}
void OAIVideoStatus::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIVideoStatus::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIVideoStatus::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

QString OAIVideoStatus::getLicense() const {
    return m_license;
}
void OAIVideoStatus::setLicense(const QString &license) {
    m_license = license;
    m_license_isSet = true;
}

bool OAIVideoStatus::is_license_Set() const{
    return m_license_isSet;
}

bool OAIVideoStatus::is_license_Valid() const{
    return m_license_isValid;
}

bool OAIVideoStatus::isMadeForKids() const {
    return m_made_for_kids;
}
void OAIVideoStatus::setMadeForKids(const bool &made_for_kids) {
    m_made_for_kids = made_for_kids;
    m_made_for_kids_isSet = true;
}

bool OAIVideoStatus::is_made_for_kids_Set() const{
    return m_made_for_kids_isSet;
}

bool OAIVideoStatus::is_made_for_kids_Valid() const{
    return m_made_for_kids_isValid;
}

QString OAIVideoStatus::getPrivacyStatus() const {
    return m_privacy_status;
}
void OAIVideoStatus::setPrivacyStatus(const QString &privacy_status) {
    m_privacy_status = privacy_status;
    m_privacy_status_isSet = true;
}

bool OAIVideoStatus::is_privacy_status_Set() const{
    return m_privacy_status_isSet;
}

bool OAIVideoStatus::is_privacy_status_Valid() const{
    return m_privacy_status_isValid;
}

bool OAIVideoStatus::isPublicStatsViewable() const {
    return m_public_stats_viewable;
}
void OAIVideoStatus::setPublicStatsViewable(const bool &public_stats_viewable) {
    m_public_stats_viewable = public_stats_viewable;
    m_public_stats_viewable_isSet = true;
}

bool OAIVideoStatus::is_public_stats_viewable_Set() const{
    return m_public_stats_viewable_isSet;
}

bool OAIVideoStatus::is_public_stats_viewable_Valid() const{
    return m_public_stats_viewable_isValid;
}

QDateTime OAIVideoStatus::getPublishAt() const {
    return m_publish_at;
}
void OAIVideoStatus::setPublishAt(const QDateTime &publish_at) {
    m_publish_at = publish_at;
    m_publish_at_isSet = true;
}

bool OAIVideoStatus::is_publish_at_Set() const{
    return m_publish_at_isSet;
}

bool OAIVideoStatus::is_publish_at_Valid() const{
    return m_publish_at_isValid;
}

QString OAIVideoStatus::getRejectionReason() const {
    return m_rejection_reason;
}
void OAIVideoStatus::setRejectionReason(const QString &rejection_reason) {
    m_rejection_reason = rejection_reason;
    m_rejection_reason_isSet = true;
}

bool OAIVideoStatus::is_rejection_reason_Set() const{
    return m_rejection_reason_isSet;
}

bool OAIVideoStatus::is_rejection_reason_Valid() const{
    return m_rejection_reason_isValid;
}

bool OAIVideoStatus::isSelfDeclaredMadeForKids() const {
    return m_self_declared_made_for_kids;
}
void OAIVideoStatus::setSelfDeclaredMadeForKids(const bool &self_declared_made_for_kids) {
    m_self_declared_made_for_kids = self_declared_made_for_kids;
    m_self_declared_made_for_kids_isSet = true;
}

bool OAIVideoStatus::is_self_declared_made_for_kids_Set() const{
    return m_self_declared_made_for_kids_isSet;
}

bool OAIVideoStatus::is_self_declared_made_for_kids_Valid() const{
    return m_self_declared_made_for_kids_isValid;
}

QString OAIVideoStatus::getUploadStatus() const {
    return m_upload_status;
}
void OAIVideoStatus::setUploadStatus(const QString &upload_status) {
    m_upload_status = upload_status;
    m_upload_status_isSet = true;
}

bool OAIVideoStatus::is_upload_status_Set() const{
    return m_upload_status_isSet;
}

bool OAIVideoStatus::is_upload_status_Valid() const{
    return m_upload_status_isValid;
}

bool OAIVideoStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_embeddable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_made_for_kids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_privacy_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_stats_viewable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publish_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rejection_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_declared_made_for_kids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
