/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPlaylistItem.h
 *
 * A *playlistItem* resource identifies another resource, such as a video, that is included in a playlist. In addition, the playlistItem resource contains details about the included resource that pertain specifically to how that resource is used in that playlist. YouTube uses playlists to identify special collections of videos for a channel, such as: - uploaded videos - favorite videos - positively rated (liked) videos - watch history - watch later To be more specific, these lists are associated with a channel, which is a collection of a person, group, or company&#39;s videos, playlists, and other YouTube information. You can retrieve the playlist IDs for each of these lists from the channel resource for a given channel. You can then use the playlistItems.list method to retrieve any of those lists. You can also add or remove items from those lists by calling the playlistItems.insert and playlistItems.delete methods. For example, if a user gives a positive rating to a video, you would insert that video into the liked videos playlist for that user&#39;s channel.
 */

#ifndef OAIPlaylistItem_H
#define OAIPlaylistItem_H

#include <QJsonObject>

#include "OAIPlaylistItemContentDetails.h"
#include "OAIPlaylistItemSnippet.h"
#include "OAIPlaylistItemStatus.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPlaylistItemContentDetails;
class OAIPlaylistItemSnippet;
class OAIPlaylistItemStatus;

class OAIPlaylistItem : public OAIObject {
public:
    OAIPlaylistItem();
    OAIPlaylistItem(QString json);
    ~OAIPlaylistItem() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIPlaylistItemContentDetails getContentDetails() const;
    void setContentDetails(const OAIPlaylistItemContentDetails &content_details);
    bool is_content_details_Set() const;
    bool is_content_details_Valid() const;

    QString getEtag() const;
    void setEtag(const QString &etag);
    bool is_etag_Set() const;
    bool is_etag_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getKind() const;
    void setKind(const QString &kind);
    bool is_kind_Set() const;
    bool is_kind_Valid() const;

    OAIPlaylistItemSnippet getSnippet() const;
    void setSnippet(const OAIPlaylistItemSnippet &snippet);
    bool is_snippet_Set() const;
    bool is_snippet_Valid() const;

    OAIPlaylistItemStatus getStatus() const;
    void setStatus(const OAIPlaylistItemStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIPlaylistItemContentDetails m_content_details;
    bool m_content_details_isSet;
    bool m_content_details_isValid;

    QString m_etag;
    bool m_etag_isSet;
    bool m_etag_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_kind;
    bool m_kind_isSet;
    bool m_kind_isValid;

    OAIPlaylistItemSnippet m_snippet;
    bool m_snippet_isSet;
    bool m_snippet_isValid;

    OAIPlaylistItemStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPlaylistItem)

#endif // OAIPlaylistItem_H
