/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelSettings::OAIChannelSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelSettings::OAIChannelSettings() {
    this->initializeModel();
}

OAIChannelSettings::~OAIChannelSettings() {}

void OAIChannelSettings::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_default_language_isSet = false;
    m_default_language_isValid = false;

    m_default_tab_isSet = false;
    m_default_tab_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_featured_channels_title_isSet = false;
    m_featured_channels_title_isValid = false;

    m_featured_channels_urls_isSet = false;
    m_featured_channels_urls_isValid = false;

    m_keywords_isSet = false;
    m_keywords_isValid = false;

    m_moderate_comments_isSet = false;
    m_moderate_comments_isValid = false;

    m_profile_color_isSet = false;
    m_profile_color_isValid = false;

    m_show_browse_view_isSet = false;
    m_show_browse_view_isValid = false;

    m_show_related_channels_isSet = false;
    m_show_related_channels_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_tracking_analytics_account_id_isSet = false;
    m_tracking_analytics_account_id_isValid = false;

    m_unsubscribed_trailer_isSet = false;
    m_unsubscribed_trailer_isValid = false;
}

void OAIChannelSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelSettings::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_default_language_isValid = ::OpenAPI::fromJsonValue(m_default_language, json[QString("defaultLanguage")]);
    m_default_language_isSet = !json[QString("defaultLanguage")].isNull() && m_default_language_isValid;

    m_default_tab_isValid = ::OpenAPI::fromJsonValue(m_default_tab, json[QString("defaultTab")]);
    m_default_tab_isSet = !json[QString("defaultTab")].isNull() && m_default_tab_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_featured_channels_title_isValid = ::OpenAPI::fromJsonValue(m_featured_channels_title, json[QString("featuredChannelsTitle")]);
    m_featured_channels_title_isSet = !json[QString("featuredChannelsTitle")].isNull() && m_featured_channels_title_isValid;

    m_featured_channels_urls_isValid = ::OpenAPI::fromJsonValue(m_featured_channels_urls, json[QString("featuredChannelsUrls")]);
    m_featured_channels_urls_isSet = !json[QString("featuredChannelsUrls")].isNull() && m_featured_channels_urls_isValid;

    m_keywords_isValid = ::OpenAPI::fromJsonValue(m_keywords, json[QString("keywords")]);
    m_keywords_isSet = !json[QString("keywords")].isNull() && m_keywords_isValid;

    m_moderate_comments_isValid = ::OpenAPI::fromJsonValue(m_moderate_comments, json[QString("moderateComments")]);
    m_moderate_comments_isSet = !json[QString("moderateComments")].isNull() && m_moderate_comments_isValid;

    m_profile_color_isValid = ::OpenAPI::fromJsonValue(m_profile_color, json[QString("profileColor")]);
    m_profile_color_isSet = !json[QString("profileColor")].isNull() && m_profile_color_isValid;

    m_show_browse_view_isValid = ::OpenAPI::fromJsonValue(m_show_browse_view, json[QString("showBrowseView")]);
    m_show_browse_view_isSet = !json[QString("showBrowseView")].isNull() && m_show_browse_view_isValid;

    m_show_related_channels_isValid = ::OpenAPI::fromJsonValue(m_show_related_channels, json[QString("showRelatedChannels")]);
    m_show_related_channels_isSet = !json[QString("showRelatedChannels")].isNull() && m_show_related_channels_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_tracking_analytics_account_id_isValid = ::OpenAPI::fromJsonValue(m_tracking_analytics_account_id, json[QString("trackingAnalyticsAccountId")]);
    m_tracking_analytics_account_id_isSet = !json[QString("trackingAnalyticsAccountId")].isNull() && m_tracking_analytics_account_id_isValid;

    m_unsubscribed_trailer_isValid = ::OpenAPI::fromJsonValue(m_unsubscribed_trailer, json[QString("unsubscribedTrailer")]);
    m_unsubscribed_trailer_isSet = !json[QString("unsubscribedTrailer")].isNull() && m_unsubscribed_trailer_isValid;
}

QString OAIChannelSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_default_language_isSet) {
        obj.insert(QString("defaultLanguage"), ::OpenAPI::toJsonValue(m_default_language));
    }
    if (m_default_tab_isSet) {
        obj.insert(QString("defaultTab"), ::OpenAPI::toJsonValue(m_default_tab));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_featured_channels_title_isSet) {
        obj.insert(QString("featuredChannelsTitle"), ::OpenAPI::toJsonValue(m_featured_channels_title));
    }
    if (m_featured_channels_urls.size() > 0) {
        obj.insert(QString("featuredChannelsUrls"), ::OpenAPI::toJsonValue(m_featured_channels_urls));
    }
    if (m_keywords_isSet) {
        obj.insert(QString("keywords"), ::OpenAPI::toJsonValue(m_keywords));
    }
    if (m_moderate_comments_isSet) {
        obj.insert(QString("moderateComments"), ::OpenAPI::toJsonValue(m_moderate_comments));
    }
    if (m_profile_color_isSet) {
        obj.insert(QString("profileColor"), ::OpenAPI::toJsonValue(m_profile_color));
    }
    if (m_show_browse_view_isSet) {
        obj.insert(QString("showBrowseView"), ::OpenAPI::toJsonValue(m_show_browse_view));
    }
    if (m_show_related_channels_isSet) {
        obj.insert(QString("showRelatedChannels"), ::OpenAPI::toJsonValue(m_show_related_channels));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_tracking_analytics_account_id_isSet) {
        obj.insert(QString("trackingAnalyticsAccountId"), ::OpenAPI::toJsonValue(m_tracking_analytics_account_id));
    }
    if (m_unsubscribed_trailer_isSet) {
        obj.insert(QString("unsubscribedTrailer"), ::OpenAPI::toJsonValue(m_unsubscribed_trailer));
    }
    return obj;
}

QString OAIChannelSettings::getCountry() const {
    return m_country;
}
void OAIChannelSettings::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIChannelSettings::is_country_Set() const{
    return m_country_isSet;
}

bool OAIChannelSettings::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIChannelSettings::getDefaultLanguage() const {
    return m_default_language;
}
void OAIChannelSettings::setDefaultLanguage(const QString &default_language) {
    m_default_language = default_language;
    m_default_language_isSet = true;
}

bool OAIChannelSettings::is_default_language_Set() const{
    return m_default_language_isSet;
}

bool OAIChannelSettings::is_default_language_Valid() const{
    return m_default_language_isValid;
}

QString OAIChannelSettings::getDefaultTab() const {
    return m_default_tab;
}
void OAIChannelSettings::setDefaultTab(const QString &default_tab) {
    m_default_tab = default_tab;
    m_default_tab_isSet = true;
}

bool OAIChannelSettings::is_default_tab_Set() const{
    return m_default_tab_isSet;
}

bool OAIChannelSettings::is_default_tab_Valid() const{
    return m_default_tab_isValid;
}

QString OAIChannelSettings::getDescription() const {
    return m_description;
}
void OAIChannelSettings::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIChannelSettings::is_description_Set() const{
    return m_description_isSet;
}

bool OAIChannelSettings::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIChannelSettings::getFeaturedChannelsTitle() const {
    return m_featured_channels_title;
}
void OAIChannelSettings::setFeaturedChannelsTitle(const QString &featured_channels_title) {
    m_featured_channels_title = featured_channels_title;
    m_featured_channels_title_isSet = true;
}

bool OAIChannelSettings::is_featured_channels_title_Set() const{
    return m_featured_channels_title_isSet;
}

bool OAIChannelSettings::is_featured_channels_title_Valid() const{
    return m_featured_channels_title_isValid;
}

QList<QString> OAIChannelSettings::getFeaturedChannelsUrls() const {
    return m_featured_channels_urls;
}
void OAIChannelSettings::setFeaturedChannelsUrls(const QList<QString> &featured_channels_urls) {
    m_featured_channels_urls = featured_channels_urls;
    m_featured_channels_urls_isSet = true;
}

bool OAIChannelSettings::is_featured_channels_urls_Set() const{
    return m_featured_channels_urls_isSet;
}

bool OAIChannelSettings::is_featured_channels_urls_Valid() const{
    return m_featured_channels_urls_isValid;
}

QString OAIChannelSettings::getKeywords() const {
    return m_keywords;
}
void OAIChannelSettings::setKeywords(const QString &keywords) {
    m_keywords = keywords;
    m_keywords_isSet = true;
}

bool OAIChannelSettings::is_keywords_Set() const{
    return m_keywords_isSet;
}

bool OAIChannelSettings::is_keywords_Valid() const{
    return m_keywords_isValid;
}

bool OAIChannelSettings::isModerateComments() const {
    return m_moderate_comments;
}
void OAIChannelSettings::setModerateComments(const bool &moderate_comments) {
    m_moderate_comments = moderate_comments;
    m_moderate_comments_isSet = true;
}

bool OAIChannelSettings::is_moderate_comments_Set() const{
    return m_moderate_comments_isSet;
}

bool OAIChannelSettings::is_moderate_comments_Valid() const{
    return m_moderate_comments_isValid;
}

QString OAIChannelSettings::getProfileColor() const {
    return m_profile_color;
}
void OAIChannelSettings::setProfileColor(const QString &profile_color) {
    m_profile_color = profile_color;
    m_profile_color_isSet = true;
}

bool OAIChannelSettings::is_profile_color_Set() const{
    return m_profile_color_isSet;
}

bool OAIChannelSettings::is_profile_color_Valid() const{
    return m_profile_color_isValid;
}

bool OAIChannelSettings::isShowBrowseView() const {
    return m_show_browse_view;
}
void OAIChannelSettings::setShowBrowseView(const bool &show_browse_view) {
    m_show_browse_view = show_browse_view;
    m_show_browse_view_isSet = true;
}

bool OAIChannelSettings::is_show_browse_view_Set() const{
    return m_show_browse_view_isSet;
}

bool OAIChannelSettings::is_show_browse_view_Valid() const{
    return m_show_browse_view_isValid;
}

bool OAIChannelSettings::isShowRelatedChannels() const {
    return m_show_related_channels;
}
void OAIChannelSettings::setShowRelatedChannels(const bool &show_related_channels) {
    m_show_related_channels = show_related_channels;
    m_show_related_channels_isSet = true;
}

bool OAIChannelSettings::is_show_related_channels_Set() const{
    return m_show_related_channels_isSet;
}

bool OAIChannelSettings::is_show_related_channels_Valid() const{
    return m_show_related_channels_isValid;
}

QString OAIChannelSettings::getTitle() const {
    return m_title;
}
void OAIChannelSettings::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIChannelSettings::is_title_Set() const{
    return m_title_isSet;
}

bool OAIChannelSettings::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIChannelSettings::getTrackingAnalyticsAccountId() const {
    return m_tracking_analytics_account_id;
}
void OAIChannelSettings::setTrackingAnalyticsAccountId(const QString &tracking_analytics_account_id) {
    m_tracking_analytics_account_id = tracking_analytics_account_id;
    m_tracking_analytics_account_id_isSet = true;
}

bool OAIChannelSettings::is_tracking_analytics_account_id_Set() const{
    return m_tracking_analytics_account_id_isSet;
}

bool OAIChannelSettings::is_tracking_analytics_account_id_Valid() const{
    return m_tracking_analytics_account_id_isValid;
}

QString OAIChannelSettings::getUnsubscribedTrailer() const {
    return m_unsubscribed_trailer;
}
void OAIChannelSettings::setUnsubscribedTrailer(const QString &unsubscribed_trailer) {
    m_unsubscribed_trailer = unsubscribed_trailer;
    m_unsubscribed_trailer_isSet = true;
}

bool OAIChannelSettings::is_unsubscribed_trailer_Set() const{
    return m_unsubscribed_trailer_isSet;
}

bool OAIChannelSettings::is_unsubscribed_trailer_Valid() const{
    return m_unsubscribed_trailer_isValid;
}

bool OAIChannelSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_tab_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_featured_channels_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_featured_channels_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_keywords_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moderate_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_browse_view_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_related_channels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_analytics_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unsubscribed_trailer_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
