/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILiveBroadcastContentDetails.h
 *
 * Detailed settings of a broadcast.
 */

#ifndef OAILiveBroadcastContentDetails_H
#define OAILiveBroadcastContentDetails_H

#include <QJsonObject>

#include "OAIMonitorStreamInfo.h"
#include <QByteArray>
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMonitorStreamInfo;

class OAILiveBroadcastContentDetails : public OAIObject {
public:
    OAILiveBroadcastContentDetails();
    OAILiveBroadcastContentDetails(QString json);
    ~OAILiveBroadcastContentDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBoundStreamId() const;
    void setBoundStreamId(const QString &bound_stream_id);
    bool is_bound_stream_id_Set() const;
    bool is_bound_stream_id_Valid() const;

    QDateTime getBoundStreamLastUpdateTimeMs() const;
    void setBoundStreamLastUpdateTimeMs(const QDateTime &bound_stream_last_update_time_ms);
    bool is_bound_stream_last_update_time_ms_Set() const;
    bool is_bound_stream_last_update_time_ms_Valid() const;

    QString getClosedCaptionsType() const;
    void setClosedCaptionsType(const QString &closed_captions_type);
    bool is_closed_captions_type_Set() const;
    bool is_closed_captions_type_Valid() const;

    bool isEnableAutoStart() const;
    void setEnableAutoStart(const bool &enable_auto_start);
    bool is_enable_auto_start_Set() const;
    bool is_enable_auto_start_Valid() const;

    bool isEnableAutoStop() const;
    void setEnableAutoStop(const bool &enable_auto_stop);
    bool is_enable_auto_stop_Set() const;
    bool is_enable_auto_stop_Valid() const;

    Q_DECL_DEPRECATED bool isEnableClosedCaptions() const;
    Q_DECL_DEPRECATED void setEnableClosedCaptions(const bool &enable_closed_captions);
    Q_DECL_DEPRECATED bool is_enable_closed_captions_Set() const;
    Q_DECL_DEPRECATED bool is_enable_closed_captions_Valid() const;

    bool isEnableContentEncryption() const;
    void setEnableContentEncryption(const bool &enable_content_encryption);
    bool is_enable_content_encryption_Set() const;
    bool is_enable_content_encryption_Valid() const;

    bool isEnableDvr() const;
    void setEnableDvr(const bool &enable_dvr);
    bool is_enable_dvr_Set() const;
    bool is_enable_dvr_Valid() const;

    bool isEnableEmbed() const;
    void setEnableEmbed(const bool &enable_embed);
    bool is_enable_embed_Set() const;
    bool is_enable_embed_Valid() const;

    Q_DECL_DEPRECATED bool isEnableLowLatency() const;
    Q_DECL_DEPRECATED void setEnableLowLatency(const bool &enable_low_latency);
    Q_DECL_DEPRECATED bool is_enable_low_latency_Set() const;
    Q_DECL_DEPRECATED bool is_enable_low_latency_Valid() const;

    QString getLatencyPreference() const;
    void setLatencyPreference(const QString &latency_preference);
    bool is_latency_preference_Set() const;
    bool is_latency_preference_Valid() const;

    QByteArray getMesh() const;
    void setMesh(const QByteArray &mesh);
    bool is_mesh_Set() const;
    bool is_mesh_Valid() const;

    OAIMonitorStreamInfo getMonitorStream() const;
    void setMonitorStream(const OAIMonitorStreamInfo &monitor_stream);
    bool is_monitor_stream_Set() const;
    bool is_monitor_stream_Valid() const;

    QString getProjection() const;
    void setProjection(const QString &projection);
    bool is_projection_Set() const;
    bool is_projection_Valid() const;

    bool isRecordFromStart() const;
    void setRecordFromStart(const bool &record_from_start);
    bool is_record_from_start_Set() const;
    bool is_record_from_start_Valid() const;

    bool isStartWithSlate() const;
    void setStartWithSlate(const bool &start_with_slate);
    bool is_start_with_slate_Set() const;
    bool is_start_with_slate_Valid() const;

    QString getStereoLayout() const;
    void setStereoLayout(const QString &stereo_layout);
    bool is_stereo_layout_Set() const;
    bool is_stereo_layout_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_bound_stream_id;
    bool m_bound_stream_id_isSet;
    bool m_bound_stream_id_isValid;

    QDateTime m_bound_stream_last_update_time_ms;
    bool m_bound_stream_last_update_time_ms_isSet;
    bool m_bound_stream_last_update_time_ms_isValid;

    QString m_closed_captions_type;
    bool m_closed_captions_type_isSet;
    bool m_closed_captions_type_isValid;

    bool m_enable_auto_start;
    bool m_enable_auto_start_isSet;
    bool m_enable_auto_start_isValid;

    bool m_enable_auto_stop;
    bool m_enable_auto_stop_isSet;
    bool m_enable_auto_stop_isValid;

    bool m_enable_closed_captions;
    bool m_enable_closed_captions_isSet;
    bool m_enable_closed_captions_isValid;

    bool m_enable_content_encryption;
    bool m_enable_content_encryption_isSet;
    bool m_enable_content_encryption_isValid;

    bool m_enable_dvr;
    bool m_enable_dvr_isSet;
    bool m_enable_dvr_isValid;

    bool m_enable_embed;
    bool m_enable_embed_isSet;
    bool m_enable_embed_isValid;

    bool m_enable_low_latency;
    bool m_enable_low_latency_isSet;
    bool m_enable_low_latency_isValid;

    QString m_latency_preference;
    bool m_latency_preference_isSet;
    bool m_latency_preference_isValid;

    QByteArray m_mesh;
    bool m_mesh_isSet;
    bool m_mesh_isValid;

    OAIMonitorStreamInfo m_monitor_stream;
    bool m_monitor_stream_isSet;
    bool m_monitor_stream_isValid;

    QString m_projection;
    bool m_projection_isSet;
    bool m_projection_isValid;

    bool m_record_from_start;
    bool m_record_from_start_isSet;
    bool m_record_from_start_isValid;

    bool m_start_with_slate;
    bool m_start_with_slate_isSet;
    bool m_start_with_slate_isValid;

    QString m_stereo_layout;
    bool m_stereo_layout_isSet;
    bool m_stereo_layout_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILiveBroadcastContentDetails)

#endif // OAILiveBroadcastContentDetails_H
