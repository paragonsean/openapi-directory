/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICdnSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICdnSettings::OAICdnSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICdnSettings::OAICdnSettings() {
    this->initializeModel();
}

OAICdnSettings::~OAICdnSettings() {}

void OAICdnSettings::initializeModel() {

    m_format_isSet = false;
    m_format_isValid = false;

    m_frame_rate_isSet = false;
    m_frame_rate_isValid = false;

    m_ingestion_info_isSet = false;
    m_ingestion_info_isValid = false;

    m_ingestion_type_isSet = false;
    m_ingestion_type_isValid = false;

    m_resolution_isSet = false;
    m_resolution_isValid = false;
}

void OAICdnSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICdnSettings::fromJsonObject(QJsonObject json) {

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_frame_rate_isValid = ::OpenAPI::fromJsonValue(m_frame_rate, json[QString("frameRate")]);
    m_frame_rate_isSet = !json[QString("frameRate")].isNull() && m_frame_rate_isValid;

    m_ingestion_info_isValid = ::OpenAPI::fromJsonValue(m_ingestion_info, json[QString("ingestionInfo")]);
    m_ingestion_info_isSet = !json[QString("ingestionInfo")].isNull() && m_ingestion_info_isValid;

    m_ingestion_type_isValid = ::OpenAPI::fromJsonValue(m_ingestion_type, json[QString("ingestionType")]);
    m_ingestion_type_isSet = !json[QString("ingestionType")].isNull() && m_ingestion_type_isValid;

    m_resolution_isValid = ::OpenAPI::fromJsonValue(m_resolution, json[QString("resolution")]);
    m_resolution_isSet = !json[QString("resolution")].isNull() && m_resolution_isValid;
}

QString OAICdnSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICdnSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_frame_rate_isSet) {
        obj.insert(QString("frameRate"), ::OpenAPI::toJsonValue(m_frame_rate));
    }
    if (m_ingestion_info.isSet()) {
        obj.insert(QString("ingestionInfo"), ::OpenAPI::toJsonValue(m_ingestion_info));
    }
    if (m_ingestion_type_isSet) {
        obj.insert(QString("ingestionType"), ::OpenAPI::toJsonValue(m_ingestion_type));
    }
    if (m_resolution_isSet) {
        obj.insert(QString("resolution"), ::OpenAPI::toJsonValue(m_resolution));
    }
    return obj;
}

QString OAICdnSettings::getFormat() const {
    return m_format;
}
void OAICdnSettings::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAICdnSettings::is_format_Set() const{
    return m_format_isSet;
}

bool OAICdnSettings::is_format_Valid() const{
    return m_format_isValid;
}

QString OAICdnSettings::getFrameRate() const {
    return m_frame_rate;
}
void OAICdnSettings::setFrameRate(const QString &frame_rate) {
    m_frame_rate = frame_rate;
    m_frame_rate_isSet = true;
}

bool OAICdnSettings::is_frame_rate_Set() const{
    return m_frame_rate_isSet;
}

bool OAICdnSettings::is_frame_rate_Valid() const{
    return m_frame_rate_isValid;
}

OAIIngestionInfo OAICdnSettings::getIngestionInfo() const {
    return m_ingestion_info;
}
void OAICdnSettings::setIngestionInfo(const OAIIngestionInfo &ingestion_info) {
    m_ingestion_info = ingestion_info;
    m_ingestion_info_isSet = true;
}

bool OAICdnSettings::is_ingestion_info_Set() const{
    return m_ingestion_info_isSet;
}

bool OAICdnSettings::is_ingestion_info_Valid() const{
    return m_ingestion_info_isValid;
}

QString OAICdnSettings::getIngestionType() const {
    return m_ingestion_type;
}
void OAICdnSettings::setIngestionType(const QString &ingestion_type) {
    m_ingestion_type = ingestion_type;
    m_ingestion_type_isSet = true;
}

bool OAICdnSettings::is_ingestion_type_Set() const{
    return m_ingestion_type_isSet;
}

bool OAICdnSettings::is_ingestion_type_Valid() const{
    return m_ingestion_type_isValid;
}

QString OAICdnSettings::getResolution() const {
    return m_resolution;
}
void OAICdnSettings::setResolution(const QString &resolution) {
    m_resolution = resolution;
    m_resolution_isSet = true;
}

bool OAICdnSettings::is_resolution_Set() const{
    return m_resolution_isSet;
}

bool OAICdnSettings::is_resolution_Valid() const{
    return m_resolution_isValid;
}

bool OAICdnSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frame_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingestion_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingestion_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICdnSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
