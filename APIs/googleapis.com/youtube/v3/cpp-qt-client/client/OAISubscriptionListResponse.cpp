/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptionListResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptionListResponse::OAISubscriptionListResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptionListResponse::OAISubscriptionListResponse() {
    this->initializeModel();
}

OAISubscriptionListResponse::~OAISubscriptionListResponse() {}

void OAISubscriptionListResponse::initializeModel() {

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_event_id_isSet = false;
    m_event_id_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_page_info_isSet = false;
    m_page_info_isValid = false;

    m_prev_page_token_isSet = false;
    m_prev_page_token_isValid = false;

    m_token_pagination_isSet = false;
    m_token_pagination_isValid = false;

    m_visitor_id_isSet = false;
    m_visitor_id_isValid = false;
}

void OAISubscriptionListResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriptionListResponse::fromJsonObject(QJsonObject json) {

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_event_id_isValid = ::OpenAPI::fromJsonValue(m_event_id, json[QString("eventId")]);
    m_event_id_isSet = !json[QString("eventId")].isNull() && m_event_id_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_page_info_isValid = ::OpenAPI::fromJsonValue(m_page_info, json[QString("pageInfo")]);
    m_page_info_isSet = !json[QString("pageInfo")].isNull() && m_page_info_isValid;

    m_prev_page_token_isValid = ::OpenAPI::fromJsonValue(m_prev_page_token, json[QString("prevPageToken")]);
    m_prev_page_token_isSet = !json[QString("prevPageToken")].isNull() && m_prev_page_token_isValid;

    m_token_pagination_isValid = ::OpenAPI::fromJsonValue(m_token_pagination, json[QString("tokenPagination")]);
    m_token_pagination_isSet = !json[QString("tokenPagination")].isNull() && m_token_pagination_isValid;

    m_visitor_id_isValid = ::OpenAPI::fromJsonValue(m_visitor_id, json[QString("visitorId")]);
    m_visitor_id_isSet = !json[QString("visitorId")].isNull() && m_visitor_id_isValid;
}

QString OAISubscriptionListResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriptionListResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_event_id_isSet) {
        obj.insert(QString("eventId"), ::OpenAPI::toJsonValue(m_event_id));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_page_info.isSet()) {
        obj.insert(QString("pageInfo"), ::OpenAPI::toJsonValue(m_page_info));
    }
    if (m_prev_page_token_isSet) {
        obj.insert(QString("prevPageToken"), ::OpenAPI::toJsonValue(m_prev_page_token));
    }
    if (m_token_pagination_isSet) {
        obj.insert(QString("tokenPagination"), ::OpenAPI::toJsonValue(m_token_pagination));
    }
    if (m_visitor_id_isSet) {
        obj.insert(QString("visitorId"), ::OpenAPI::toJsonValue(m_visitor_id));
    }
    return obj;
}

QString OAISubscriptionListResponse::getEtag() const {
    return m_etag;
}
void OAISubscriptionListResponse::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAISubscriptionListResponse::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAISubscriptionListResponse::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAISubscriptionListResponse::getEventId() const {
    return m_event_id;
}
void OAISubscriptionListResponse::setEventId(const QString &event_id) {
    m_event_id = event_id;
    m_event_id_isSet = true;
}

bool OAISubscriptionListResponse::is_event_id_Set() const{
    return m_event_id_isSet;
}

bool OAISubscriptionListResponse::is_event_id_Valid() const{
    return m_event_id_isValid;
}

QList<OAISubscription> OAISubscriptionListResponse::getItems() const {
    return m_items;
}
void OAISubscriptionListResponse::setItems(const QList<OAISubscription> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAISubscriptionListResponse::is_items_Set() const{
    return m_items_isSet;
}

bool OAISubscriptionListResponse::is_items_Valid() const{
    return m_items_isValid;
}

QString OAISubscriptionListResponse::getKind() const {
    return m_kind;
}
void OAISubscriptionListResponse::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAISubscriptionListResponse::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAISubscriptionListResponse::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAISubscriptionListResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAISubscriptionListResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAISubscriptionListResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAISubscriptionListResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

OAIPageInfo OAISubscriptionListResponse::getPageInfo() const {
    return m_page_info;
}
void OAISubscriptionListResponse::setPageInfo(const OAIPageInfo &page_info) {
    m_page_info = page_info;
    m_page_info_isSet = true;
}

bool OAISubscriptionListResponse::is_page_info_Set() const{
    return m_page_info_isSet;
}

bool OAISubscriptionListResponse::is_page_info_Valid() const{
    return m_page_info_isValid;
}

QString OAISubscriptionListResponse::getPrevPageToken() const {
    return m_prev_page_token;
}
void OAISubscriptionListResponse::setPrevPageToken(const QString &prev_page_token) {
    m_prev_page_token = prev_page_token;
    m_prev_page_token_isSet = true;
}

bool OAISubscriptionListResponse::is_prev_page_token_Set() const{
    return m_prev_page_token_isSet;
}

bool OAISubscriptionListResponse::is_prev_page_token_Valid() const{
    return m_prev_page_token_isValid;
}

OAIObject OAISubscriptionListResponse::getTokenPagination() const {
    return m_token_pagination;
}
void OAISubscriptionListResponse::setTokenPagination(const OAIObject &token_pagination) {
    m_token_pagination = token_pagination;
    m_token_pagination_isSet = true;
}

bool OAISubscriptionListResponse::is_token_pagination_Set() const{
    return m_token_pagination_isSet;
}

bool OAISubscriptionListResponse::is_token_pagination_Valid() const{
    return m_token_pagination_isValid;
}

QString OAISubscriptionListResponse::getVisitorId() const {
    return m_visitor_id;
}
void OAISubscriptionListResponse::setVisitorId(const QString &visitor_id) {
    m_visitor_id = visitor_id;
    m_visitor_id_isSet = true;
}

bool OAISubscriptionListResponse::is_visitor_id_Set() const{
    return m_visitor_id_isSet;
}

bool OAISubscriptionListResponse::is_visitor_id_Valid() const{
    return m_visitor_id_isValid;
}

bool OAISubscriptionListResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_prev_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_pagination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visitor_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriptionListResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
