/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVideoFileDetailsVideoStream.h
 *
 * Information about a video stream.
 */

#ifndef OAIVideoFileDetailsVideoStream_H
#define OAIVideoFileDetailsVideoStream_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIVideoFileDetailsVideoStream : public OAIObject {
public:
    OAIVideoFileDetailsVideoStream();
    OAIVideoFileDetailsVideoStream(QString json);
    ~OAIVideoFileDetailsVideoStream() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getAspectRatio() const;
    void setAspectRatio(const double &aspect_ratio);
    bool is_aspect_ratio_Set() const;
    bool is_aspect_ratio_Valid() const;

    QString getBitrateBps() const;
    void setBitrateBps(const QString &bitrate_bps);
    bool is_bitrate_bps_Set() const;
    bool is_bitrate_bps_Valid() const;

    QString getCodec() const;
    void setCodec(const QString &codec);
    bool is_codec_Set() const;
    bool is_codec_Valid() const;

    double getFrameRateFps() const;
    void setFrameRateFps(const double &frame_rate_fps);
    bool is_frame_rate_fps_Set() const;
    bool is_frame_rate_fps_Valid() const;

    qint32 getHeightPixels() const;
    void setHeightPixels(const qint32 &height_pixels);
    bool is_height_pixels_Set() const;
    bool is_height_pixels_Valid() const;

    QString getRotation() const;
    void setRotation(const QString &rotation);
    bool is_rotation_Set() const;
    bool is_rotation_Valid() const;

    QString getVendor() const;
    void setVendor(const QString &vendor);
    bool is_vendor_Set() const;
    bool is_vendor_Valid() const;

    qint32 getWidthPixels() const;
    void setWidthPixels(const qint32 &width_pixels);
    bool is_width_pixels_Set() const;
    bool is_width_pixels_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_aspect_ratio;
    bool m_aspect_ratio_isSet;
    bool m_aspect_ratio_isValid;

    QString m_bitrate_bps;
    bool m_bitrate_bps_isSet;
    bool m_bitrate_bps_isValid;

    QString m_codec;
    bool m_codec_isSet;
    bool m_codec_isValid;

    double m_frame_rate_fps;
    bool m_frame_rate_fps_isSet;
    bool m_frame_rate_fps_isValid;

    qint32 m_height_pixels;
    bool m_height_pixels_isSet;
    bool m_height_pixels_isValid;

    QString m_rotation;
    bool m_rotation_isSet;
    bool m_rotation_isValid;

    QString m_vendor;
    bool m_vendor_isSet;
    bool m_vendor_isValid;

    qint32 m_width_pixels;
    bool m_width_pixels_isSet;
    bool m_width_pixels_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVideoFileDetailsVideoStream)

#endif // OAIVideoFileDetailsVideoStream_H
