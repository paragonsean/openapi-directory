/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILiveBroadcastContentDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILiveBroadcastContentDetails::OAILiveBroadcastContentDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILiveBroadcastContentDetails::OAILiveBroadcastContentDetails() {
    this->initializeModel();
}

OAILiveBroadcastContentDetails::~OAILiveBroadcastContentDetails() {}

void OAILiveBroadcastContentDetails::initializeModel() {

    m_bound_stream_id_isSet = false;
    m_bound_stream_id_isValid = false;

    m_bound_stream_last_update_time_ms_isSet = false;
    m_bound_stream_last_update_time_ms_isValid = false;

    m_closed_captions_type_isSet = false;
    m_closed_captions_type_isValid = false;

    m_enable_auto_start_isSet = false;
    m_enable_auto_start_isValid = false;

    m_enable_auto_stop_isSet = false;
    m_enable_auto_stop_isValid = false;

    m_enable_closed_captions_isSet = false;
    m_enable_closed_captions_isValid = false;

    m_enable_content_encryption_isSet = false;
    m_enable_content_encryption_isValid = false;

    m_enable_dvr_isSet = false;
    m_enable_dvr_isValid = false;

    m_enable_embed_isSet = false;
    m_enable_embed_isValid = false;

    m_enable_low_latency_isSet = false;
    m_enable_low_latency_isValid = false;

    m_latency_preference_isSet = false;
    m_latency_preference_isValid = false;

    m_mesh_isSet = false;
    m_mesh_isValid = false;

    m_monitor_stream_isSet = false;
    m_monitor_stream_isValid = false;

    m_projection_isSet = false;
    m_projection_isValid = false;

    m_record_from_start_isSet = false;
    m_record_from_start_isValid = false;

    m_start_with_slate_isSet = false;
    m_start_with_slate_isValid = false;

    m_stereo_layout_isSet = false;
    m_stereo_layout_isValid = false;
}

void OAILiveBroadcastContentDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILiveBroadcastContentDetails::fromJsonObject(QJsonObject json) {

    m_bound_stream_id_isValid = ::OpenAPI::fromJsonValue(m_bound_stream_id, json[QString("boundStreamId")]);
    m_bound_stream_id_isSet = !json[QString("boundStreamId")].isNull() && m_bound_stream_id_isValid;

    m_bound_stream_last_update_time_ms_isValid = ::OpenAPI::fromJsonValue(m_bound_stream_last_update_time_ms, json[QString("boundStreamLastUpdateTimeMs")]);
    m_bound_stream_last_update_time_ms_isSet = !json[QString("boundStreamLastUpdateTimeMs")].isNull() && m_bound_stream_last_update_time_ms_isValid;

    m_closed_captions_type_isValid = ::OpenAPI::fromJsonValue(m_closed_captions_type, json[QString("closedCaptionsType")]);
    m_closed_captions_type_isSet = !json[QString("closedCaptionsType")].isNull() && m_closed_captions_type_isValid;

    m_enable_auto_start_isValid = ::OpenAPI::fromJsonValue(m_enable_auto_start, json[QString("enableAutoStart")]);
    m_enable_auto_start_isSet = !json[QString("enableAutoStart")].isNull() && m_enable_auto_start_isValid;

    m_enable_auto_stop_isValid = ::OpenAPI::fromJsonValue(m_enable_auto_stop, json[QString("enableAutoStop")]);
    m_enable_auto_stop_isSet = !json[QString("enableAutoStop")].isNull() && m_enable_auto_stop_isValid;

    m_enable_closed_captions_isValid = ::OpenAPI::fromJsonValue(m_enable_closed_captions, json[QString("enableClosedCaptions")]);
    m_enable_closed_captions_isSet = !json[QString("enableClosedCaptions")].isNull() && m_enable_closed_captions_isValid;

    m_enable_content_encryption_isValid = ::OpenAPI::fromJsonValue(m_enable_content_encryption, json[QString("enableContentEncryption")]);
    m_enable_content_encryption_isSet = !json[QString("enableContentEncryption")].isNull() && m_enable_content_encryption_isValid;

    m_enable_dvr_isValid = ::OpenAPI::fromJsonValue(m_enable_dvr, json[QString("enableDvr")]);
    m_enable_dvr_isSet = !json[QString("enableDvr")].isNull() && m_enable_dvr_isValid;

    m_enable_embed_isValid = ::OpenAPI::fromJsonValue(m_enable_embed, json[QString("enableEmbed")]);
    m_enable_embed_isSet = !json[QString("enableEmbed")].isNull() && m_enable_embed_isValid;

    m_enable_low_latency_isValid = ::OpenAPI::fromJsonValue(m_enable_low_latency, json[QString("enableLowLatency")]);
    m_enable_low_latency_isSet = !json[QString("enableLowLatency")].isNull() && m_enable_low_latency_isValid;

    m_latency_preference_isValid = ::OpenAPI::fromJsonValue(m_latency_preference, json[QString("latencyPreference")]);
    m_latency_preference_isSet = !json[QString("latencyPreference")].isNull() && m_latency_preference_isValid;

    m_mesh_isValid = ::OpenAPI::fromJsonValue(m_mesh, json[QString("mesh")]);
    m_mesh_isSet = !json[QString("mesh")].isNull() && m_mesh_isValid;

    m_monitor_stream_isValid = ::OpenAPI::fromJsonValue(m_monitor_stream, json[QString("monitorStream")]);
    m_monitor_stream_isSet = !json[QString("monitorStream")].isNull() && m_monitor_stream_isValid;

    m_projection_isValid = ::OpenAPI::fromJsonValue(m_projection, json[QString("projection")]);
    m_projection_isSet = !json[QString("projection")].isNull() && m_projection_isValid;

    m_record_from_start_isValid = ::OpenAPI::fromJsonValue(m_record_from_start, json[QString("recordFromStart")]);
    m_record_from_start_isSet = !json[QString("recordFromStart")].isNull() && m_record_from_start_isValid;

    m_start_with_slate_isValid = ::OpenAPI::fromJsonValue(m_start_with_slate, json[QString("startWithSlate")]);
    m_start_with_slate_isSet = !json[QString("startWithSlate")].isNull() && m_start_with_slate_isValid;

    m_stereo_layout_isValid = ::OpenAPI::fromJsonValue(m_stereo_layout, json[QString("stereoLayout")]);
    m_stereo_layout_isSet = !json[QString("stereoLayout")].isNull() && m_stereo_layout_isValid;
}

QString OAILiveBroadcastContentDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILiveBroadcastContentDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_bound_stream_id_isSet) {
        obj.insert(QString("boundStreamId"), ::OpenAPI::toJsonValue(m_bound_stream_id));
    }
    if (m_bound_stream_last_update_time_ms_isSet) {
        obj.insert(QString("boundStreamLastUpdateTimeMs"), ::OpenAPI::toJsonValue(m_bound_stream_last_update_time_ms));
    }
    if (m_closed_captions_type_isSet) {
        obj.insert(QString("closedCaptionsType"), ::OpenAPI::toJsonValue(m_closed_captions_type));
    }
    if (m_enable_auto_start_isSet) {
        obj.insert(QString("enableAutoStart"), ::OpenAPI::toJsonValue(m_enable_auto_start));
    }
    if (m_enable_auto_stop_isSet) {
        obj.insert(QString("enableAutoStop"), ::OpenAPI::toJsonValue(m_enable_auto_stop));
    }
    if (m_enable_closed_captions_isSet) {
        obj.insert(QString("enableClosedCaptions"), ::OpenAPI::toJsonValue(m_enable_closed_captions));
    }
    if (m_enable_content_encryption_isSet) {
        obj.insert(QString("enableContentEncryption"), ::OpenAPI::toJsonValue(m_enable_content_encryption));
    }
    if (m_enable_dvr_isSet) {
        obj.insert(QString("enableDvr"), ::OpenAPI::toJsonValue(m_enable_dvr));
    }
    if (m_enable_embed_isSet) {
        obj.insert(QString("enableEmbed"), ::OpenAPI::toJsonValue(m_enable_embed));
    }
    if (m_enable_low_latency_isSet) {
        obj.insert(QString("enableLowLatency"), ::OpenAPI::toJsonValue(m_enable_low_latency));
    }
    if (m_latency_preference_isSet) {
        obj.insert(QString("latencyPreference"), ::OpenAPI::toJsonValue(m_latency_preference));
    }
    if (m_mesh_isSet) {
        obj.insert(QString("mesh"), ::OpenAPI::toJsonValue(m_mesh));
    }
    if (m_monitor_stream.isSet()) {
        obj.insert(QString("monitorStream"), ::OpenAPI::toJsonValue(m_monitor_stream));
    }
    if (m_projection_isSet) {
        obj.insert(QString("projection"), ::OpenAPI::toJsonValue(m_projection));
    }
    if (m_record_from_start_isSet) {
        obj.insert(QString("recordFromStart"), ::OpenAPI::toJsonValue(m_record_from_start));
    }
    if (m_start_with_slate_isSet) {
        obj.insert(QString("startWithSlate"), ::OpenAPI::toJsonValue(m_start_with_slate));
    }
    if (m_stereo_layout_isSet) {
        obj.insert(QString("stereoLayout"), ::OpenAPI::toJsonValue(m_stereo_layout));
    }
    return obj;
}

QString OAILiveBroadcastContentDetails::getBoundStreamId() const {
    return m_bound_stream_id;
}
void OAILiveBroadcastContentDetails::setBoundStreamId(const QString &bound_stream_id) {
    m_bound_stream_id = bound_stream_id;
    m_bound_stream_id_isSet = true;
}

bool OAILiveBroadcastContentDetails::is_bound_stream_id_Set() const{
    return m_bound_stream_id_isSet;
}

bool OAILiveBroadcastContentDetails::is_bound_stream_id_Valid() const{
    return m_bound_stream_id_isValid;
}

QDateTime OAILiveBroadcastContentDetails::getBoundStreamLastUpdateTimeMs() const {
    return m_bound_stream_last_update_time_ms;
}
void OAILiveBroadcastContentDetails::setBoundStreamLastUpdateTimeMs(const QDateTime &bound_stream_last_update_time_ms) {
    m_bound_stream_last_update_time_ms = bound_stream_last_update_time_ms;
    m_bound_stream_last_update_time_ms_isSet = true;
}

bool OAILiveBroadcastContentDetails::is_bound_stream_last_update_time_ms_Set() const{
    return m_bound_stream_last_update_time_ms_isSet;
}

bool OAILiveBroadcastContentDetails::is_bound_stream_last_update_time_ms_Valid() const{
    return m_bound_stream_last_update_time_ms_isValid;
}

QString OAILiveBroadcastContentDetails::getClosedCaptionsType() const {
    return m_closed_captions_type;
}
void OAILiveBroadcastContentDetails::setClosedCaptionsType(const QString &closed_captions_type) {
    m_closed_captions_type = closed_captions_type;
    m_closed_captions_type_isSet = true;
}

bool OAILiveBroadcastContentDetails::is_closed_captions_type_Set() const{
    return m_closed_captions_type_isSet;
}

bool OAILiveBroadcastContentDetails::is_closed_captions_type_Valid() const{
    return m_closed_captions_type_isValid;
}

bool OAILiveBroadcastContentDetails::isEnableAutoStart() const {
    return m_enable_auto_start;
}
void OAILiveBroadcastContentDetails::setEnableAutoStart(const bool &enable_auto_start) {
    m_enable_auto_start = enable_auto_start;
    m_enable_auto_start_isSet = true;
}

bool OAILiveBroadcastContentDetails::is_enable_auto_start_Set() const{
    return m_enable_auto_start_isSet;
}

bool OAILiveBroadcastContentDetails::is_enable_auto_start_Valid() const{
    return m_enable_auto_start_isValid;
}

bool OAILiveBroadcastContentDetails::isEnableAutoStop() const {
    return m_enable_auto_stop;
}
void OAILiveBroadcastContentDetails::setEnableAutoStop(const bool &enable_auto_stop) {
    m_enable_auto_stop = enable_auto_stop;
    m_enable_auto_stop_isSet = true;
}

bool OAILiveBroadcastContentDetails::is_enable_auto_stop_Set() const{
    return m_enable_auto_stop_isSet;
}

bool OAILiveBroadcastContentDetails::is_enable_auto_stop_Valid() const{
    return m_enable_auto_stop_isValid;
}

bool OAILiveBroadcastContentDetails::isEnableClosedCaptions() const {
    return m_enable_closed_captions;
}
void OAILiveBroadcastContentDetails::setEnableClosedCaptions(const bool &enable_closed_captions) {
    m_enable_closed_captions = enable_closed_captions;
    m_enable_closed_captions_isSet = true;
}

bool OAILiveBroadcastContentDetails::is_enable_closed_captions_Set() const{
    return m_enable_closed_captions_isSet;
}

bool OAILiveBroadcastContentDetails::is_enable_closed_captions_Valid() const{
    return m_enable_closed_captions_isValid;
}

bool OAILiveBroadcastContentDetails::isEnableContentEncryption() const {
    return m_enable_content_encryption;
}
void OAILiveBroadcastContentDetails::setEnableContentEncryption(const bool &enable_content_encryption) {
    m_enable_content_encryption = enable_content_encryption;
    m_enable_content_encryption_isSet = true;
}

bool OAILiveBroadcastContentDetails::is_enable_content_encryption_Set() const{
    return m_enable_content_encryption_isSet;
}

bool OAILiveBroadcastContentDetails::is_enable_content_encryption_Valid() const{
    return m_enable_content_encryption_isValid;
}

bool OAILiveBroadcastContentDetails::isEnableDvr() const {
    return m_enable_dvr;
}
void OAILiveBroadcastContentDetails::setEnableDvr(const bool &enable_dvr) {
    m_enable_dvr = enable_dvr;
    m_enable_dvr_isSet = true;
}

bool OAILiveBroadcastContentDetails::is_enable_dvr_Set() const{
    return m_enable_dvr_isSet;
}

bool OAILiveBroadcastContentDetails::is_enable_dvr_Valid() const{
    return m_enable_dvr_isValid;
}

bool OAILiveBroadcastContentDetails::isEnableEmbed() const {
    return m_enable_embed;
}
void OAILiveBroadcastContentDetails::setEnableEmbed(const bool &enable_embed) {
    m_enable_embed = enable_embed;
    m_enable_embed_isSet = true;
}

bool OAILiveBroadcastContentDetails::is_enable_embed_Set() const{
    return m_enable_embed_isSet;
}

bool OAILiveBroadcastContentDetails::is_enable_embed_Valid() const{
    return m_enable_embed_isValid;
}

bool OAILiveBroadcastContentDetails::isEnableLowLatency() const {
    return m_enable_low_latency;
}
void OAILiveBroadcastContentDetails::setEnableLowLatency(const bool &enable_low_latency) {
    m_enable_low_latency = enable_low_latency;
    m_enable_low_latency_isSet = true;
}

bool OAILiveBroadcastContentDetails::is_enable_low_latency_Set() const{
    return m_enable_low_latency_isSet;
}

bool OAILiveBroadcastContentDetails::is_enable_low_latency_Valid() const{
    return m_enable_low_latency_isValid;
}

QString OAILiveBroadcastContentDetails::getLatencyPreference() const {
    return m_latency_preference;
}
void OAILiveBroadcastContentDetails::setLatencyPreference(const QString &latency_preference) {
    m_latency_preference = latency_preference;
    m_latency_preference_isSet = true;
}

bool OAILiveBroadcastContentDetails::is_latency_preference_Set() const{
    return m_latency_preference_isSet;
}

bool OAILiveBroadcastContentDetails::is_latency_preference_Valid() const{
    return m_latency_preference_isValid;
}

QByteArray OAILiveBroadcastContentDetails::getMesh() const {
    return m_mesh;
}
void OAILiveBroadcastContentDetails::setMesh(const QByteArray &mesh) {
    m_mesh = mesh;
    m_mesh_isSet = true;
}

bool OAILiveBroadcastContentDetails::is_mesh_Set() const{
    return m_mesh_isSet;
}

bool OAILiveBroadcastContentDetails::is_mesh_Valid() const{
    return m_mesh_isValid;
}

OAIMonitorStreamInfo OAILiveBroadcastContentDetails::getMonitorStream() const {
    return m_monitor_stream;
}
void OAILiveBroadcastContentDetails::setMonitorStream(const OAIMonitorStreamInfo &monitor_stream) {
    m_monitor_stream = monitor_stream;
    m_monitor_stream_isSet = true;
}

bool OAILiveBroadcastContentDetails::is_monitor_stream_Set() const{
    return m_monitor_stream_isSet;
}

bool OAILiveBroadcastContentDetails::is_monitor_stream_Valid() const{
    return m_monitor_stream_isValid;
}

QString OAILiveBroadcastContentDetails::getProjection() const {
    return m_projection;
}
void OAILiveBroadcastContentDetails::setProjection(const QString &projection) {
    m_projection = projection;
    m_projection_isSet = true;
}

bool OAILiveBroadcastContentDetails::is_projection_Set() const{
    return m_projection_isSet;
}

bool OAILiveBroadcastContentDetails::is_projection_Valid() const{
    return m_projection_isValid;
}

bool OAILiveBroadcastContentDetails::isRecordFromStart() const {
    return m_record_from_start;
}
void OAILiveBroadcastContentDetails::setRecordFromStart(const bool &record_from_start) {
    m_record_from_start = record_from_start;
    m_record_from_start_isSet = true;
}

bool OAILiveBroadcastContentDetails::is_record_from_start_Set() const{
    return m_record_from_start_isSet;
}

bool OAILiveBroadcastContentDetails::is_record_from_start_Valid() const{
    return m_record_from_start_isValid;
}

bool OAILiveBroadcastContentDetails::isStartWithSlate() const {
    return m_start_with_slate;
}
void OAILiveBroadcastContentDetails::setStartWithSlate(const bool &start_with_slate) {
    m_start_with_slate = start_with_slate;
    m_start_with_slate_isSet = true;
}

bool OAILiveBroadcastContentDetails::is_start_with_slate_Set() const{
    return m_start_with_slate_isSet;
}

bool OAILiveBroadcastContentDetails::is_start_with_slate_Valid() const{
    return m_start_with_slate_isValid;
}

QString OAILiveBroadcastContentDetails::getStereoLayout() const {
    return m_stereo_layout;
}
void OAILiveBroadcastContentDetails::setStereoLayout(const QString &stereo_layout) {
    m_stereo_layout = stereo_layout;
    m_stereo_layout_isSet = true;
}

bool OAILiveBroadcastContentDetails::is_stereo_layout_Set() const{
    return m_stereo_layout_isSet;
}

bool OAILiveBroadcastContentDetails::is_stereo_layout_Valid() const{
    return m_stereo_layout_isValid;
}

bool OAILiveBroadcastContentDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bound_stream_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bound_stream_last_update_time_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_captions_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_auto_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_auto_stop_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_closed_captions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_content_encryption_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_dvr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_embed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_low_latency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latency_preference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mesh_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitor_stream.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_projection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_from_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_with_slate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stereo_layout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILiveBroadcastContentDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
