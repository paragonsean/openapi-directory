/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelContentDetails_relatedPlaylists.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelContentDetails_relatedPlaylists::OAIChannelContentDetails_relatedPlaylists(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelContentDetails_relatedPlaylists::OAIChannelContentDetails_relatedPlaylists() {
    this->initializeModel();
}

OAIChannelContentDetails_relatedPlaylists::~OAIChannelContentDetails_relatedPlaylists() {}

void OAIChannelContentDetails_relatedPlaylists::initializeModel() {

    m_favorites_isSet = false;
    m_favorites_isValid = false;

    m_likes_isSet = false;
    m_likes_isValid = false;

    m_uploads_isSet = false;
    m_uploads_isValid = false;

    m_watch_history_isSet = false;
    m_watch_history_isValid = false;

    m_watch_later_isSet = false;
    m_watch_later_isValid = false;
}

void OAIChannelContentDetails_relatedPlaylists::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelContentDetails_relatedPlaylists::fromJsonObject(QJsonObject json) {

    m_favorites_isValid = ::OpenAPI::fromJsonValue(m_favorites, json[QString("favorites")]);
    m_favorites_isSet = !json[QString("favorites")].isNull() && m_favorites_isValid;

    m_likes_isValid = ::OpenAPI::fromJsonValue(m_likes, json[QString("likes")]);
    m_likes_isSet = !json[QString("likes")].isNull() && m_likes_isValid;

    m_uploads_isValid = ::OpenAPI::fromJsonValue(m_uploads, json[QString("uploads")]);
    m_uploads_isSet = !json[QString("uploads")].isNull() && m_uploads_isValid;

    m_watch_history_isValid = ::OpenAPI::fromJsonValue(m_watch_history, json[QString("watchHistory")]);
    m_watch_history_isSet = !json[QString("watchHistory")].isNull() && m_watch_history_isValid;

    m_watch_later_isValid = ::OpenAPI::fromJsonValue(m_watch_later, json[QString("watchLater")]);
    m_watch_later_isSet = !json[QString("watchLater")].isNull() && m_watch_later_isValid;
}

QString OAIChannelContentDetails_relatedPlaylists::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelContentDetails_relatedPlaylists::asJsonObject() const {
    QJsonObject obj;
    if (m_favorites_isSet) {
        obj.insert(QString("favorites"), ::OpenAPI::toJsonValue(m_favorites));
    }
    if (m_likes_isSet) {
        obj.insert(QString("likes"), ::OpenAPI::toJsonValue(m_likes));
    }
    if (m_uploads_isSet) {
        obj.insert(QString("uploads"), ::OpenAPI::toJsonValue(m_uploads));
    }
    if (m_watch_history_isSet) {
        obj.insert(QString("watchHistory"), ::OpenAPI::toJsonValue(m_watch_history));
    }
    if (m_watch_later_isSet) {
        obj.insert(QString("watchLater"), ::OpenAPI::toJsonValue(m_watch_later));
    }
    return obj;
}

QString OAIChannelContentDetails_relatedPlaylists::getFavorites() const {
    return m_favorites;
}
void OAIChannelContentDetails_relatedPlaylists::setFavorites(const QString &favorites) {
    m_favorites = favorites;
    m_favorites_isSet = true;
}

bool OAIChannelContentDetails_relatedPlaylists::is_favorites_Set() const{
    return m_favorites_isSet;
}

bool OAIChannelContentDetails_relatedPlaylists::is_favorites_Valid() const{
    return m_favorites_isValid;
}

QString OAIChannelContentDetails_relatedPlaylists::getLikes() const {
    return m_likes;
}
void OAIChannelContentDetails_relatedPlaylists::setLikes(const QString &likes) {
    m_likes = likes;
    m_likes_isSet = true;
}

bool OAIChannelContentDetails_relatedPlaylists::is_likes_Set() const{
    return m_likes_isSet;
}

bool OAIChannelContentDetails_relatedPlaylists::is_likes_Valid() const{
    return m_likes_isValid;
}

QString OAIChannelContentDetails_relatedPlaylists::getUploads() const {
    return m_uploads;
}
void OAIChannelContentDetails_relatedPlaylists::setUploads(const QString &uploads) {
    m_uploads = uploads;
    m_uploads_isSet = true;
}

bool OAIChannelContentDetails_relatedPlaylists::is_uploads_Set() const{
    return m_uploads_isSet;
}

bool OAIChannelContentDetails_relatedPlaylists::is_uploads_Valid() const{
    return m_uploads_isValid;
}

QString OAIChannelContentDetails_relatedPlaylists::getWatchHistory() const {
    return m_watch_history;
}
void OAIChannelContentDetails_relatedPlaylists::setWatchHistory(const QString &watch_history) {
    m_watch_history = watch_history;
    m_watch_history_isSet = true;
}

bool OAIChannelContentDetails_relatedPlaylists::is_watch_history_Set() const{
    return m_watch_history_isSet;
}

bool OAIChannelContentDetails_relatedPlaylists::is_watch_history_Valid() const{
    return m_watch_history_isValid;
}

QString OAIChannelContentDetails_relatedPlaylists::getWatchLater() const {
    return m_watch_later;
}
void OAIChannelContentDetails_relatedPlaylists::setWatchLater(const QString &watch_later) {
    m_watch_later = watch_later;
    m_watch_later_isSet = true;
}

bool OAIChannelContentDetails_relatedPlaylists::is_watch_later_Set() const{
    return m_watch_later_isSet;
}

bool OAIChannelContentDetails_relatedPlaylists::is_watch_later_Valid() const{
    return m_watch_later_isValid;
}

bool OAIChannelContentDetails_relatedPlaylists::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_favorites_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_likes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uploads_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_watch_history_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_watch_later_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelContentDetails_relatedPlaylists::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
