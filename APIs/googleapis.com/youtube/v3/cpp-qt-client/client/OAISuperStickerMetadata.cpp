/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISuperStickerMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISuperStickerMetadata::OAISuperStickerMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISuperStickerMetadata::OAISuperStickerMetadata() {
    this->initializeModel();
}

OAISuperStickerMetadata::~OAISuperStickerMetadata() {}

void OAISuperStickerMetadata::initializeModel() {

    m_alt_text_isSet = false;
    m_alt_text_isValid = false;

    m_alt_text_language_isSet = false;
    m_alt_text_language_isValid = false;

    m_sticker_id_isSet = false;
    m_sticker_id_isValid = false;
}

void OAISuperStickerMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISuperStickerMetadata::fromJsonObject(QJsonObject json) {

    m_alt_text_isValid = ::OpenAPI::fromJsonValue(m_alt_text, json[QString("altText")]);
    m_alt_text_isSet = !json[QString("altText")].isNull() && m_alt_text_isValid;

    m_alt_text_language_isValid = ::OpenAPI::fromJsonValue(m_alt_text_language, json[QString("altTextLanguage")]);
    m_alt_text_language_isSet = !json[QString("altTextLanguage")].isNull() && m_alt_text_language_isValid;

    m_sticker_id_isValid = ::OpenAPI::fromJsonValue(m_sticker_id, json[QString("stickerId")]);
    m_sticker_id_isSet = !json[QString("stickerId")].isNull() && m_sticker_id_isValid;
}

QString OAISuperStickerMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISuperStickerMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_alt_text_isSet) {
        obj.insert(QString("altText"), ::OpenAPI::toJsonValue(m_alt_text));
    }
    if (m_alt_text_language_isSet) {
        obj.insert(QString("altTextLanguage"), ::OpenAPI::toJsonValue(m_alt_text_language));
    }
    if (m_sticker_id_isSet) {
        obj.insert(QString("stickerId"), ::OpenAPI::toJsonValue(m_sticker_id));
    }
    return obj;
}

QString OAISuperStickerMetadata::getAltText() const {
    return m_alt_text;
}
void OAISuperStickerMetadata::setAltText(const QString &alt_text) {
    m_alt_text = alt_text;
    m_alt_text_isSet = true;
}

bool OAISuperStickerMetadata::is_alt_text_Set() const{
    return m_alt_text_isSet;
}

bool OAISuperStickerMetadata::is_alt_text_Valid() const{
    return m_alt_text_isValid;
}

QString OAISuperStickerMetadata::getAltTextLanguage() const {
    return m_alt_text_language;
}
void OAISuperStickerMetadata::setAltTextLanguage(const QString &alt_text_language) {
    m_alt_text_language = alt_text_language;
    m_alt_text_language_isSet = true;
}

bool OAISuperStickerMetadata::is_alt_text_language_Set() const{
    return m_alt_text_language_isSet;
}

bool OAISuperStickerMetadata::is_alt_text_language_Valid() const{
    return m_alt_text_language_isValid;
}

QString OAISuperStickerMetadata::getStickerId() const {
    return m_sticker_id;
}
void OAISuperStickerMetadata::setStickerId(const QString &sticker_id) {
    m_sticker_id = sticker_id;
    m_sticker_id_isSet = true;
}

bool OAISuperStickerMetadata::is_sticker_id_Set() const{
    return m_sticker_id_isSet;
}

bool OAISuperStickerMetadata::is_sticker_id_Valid() const{
    return m_sticker_id_isValid;
}

bool OAISuperStickerMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alt_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alt_text_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sticker_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISuperStickerMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
