/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommentThreadSnippet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommentThreadSnippet::OAICommentThreadSnippet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommentThreadSnippet::OAICommentThreadSnippet() {
    this->initializeModel();
}

OAICommentThreadSnippet::~OAICommentThreadSnippet() {}

void OAICommentThreadSnippet::initializeModel() {

    m_can_reply_isSet = false;
    m_can_reply_isValid = false;

    m_channel_id_isSet = false;
    m_channel_id_isValid = false;

    m_is_public_isSet = false;
    m_is_public_isValid = false;

    m_top_level_comment_isSet = false;
    m_top_level_comment_isValid = false;

    m_total_reply_count_isSet = false;
    m_total_reply_count_isValid = false;

    m_video_id_isSet = false;
    m_video_id_isValid = false;
}

void OAICommentThreadSnippet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommentThreadSnippet::fromJsonObject(QJsonObject json) {

    m_can_reply_isValid = ::OpenAPI::fromJsonValue(m_can_reply, json[QString("canReply")]);
    m_can_reply_isSet = !json[QString("canReply")].isNull() && m_can_reply_isValid;

    m_channel_id_isValid = ::OpenAPI::fromJsonValue(m_channel_id, json[QString("channelId")]);
    m_channel_id_isSet = !json[QString("channelId")].isNull() && m_channel_id_isValid;

    m_is_public_isValid = ::OpenAPI::fromJsonValue(m_is_public, json[QString("isPublic")]);
    m_is_public_isSet = !json[QString("isPublic")].isNull() && m_is_public_isValid;

    m_top_level_comment_isValid = ::OpenAPI::fromJsonValue(m_top_level_comment, json[QString("topLevelComment")]);
    m_top_level_comment_isSet = !json[QString("topLevelComment")].isNull() && m_top_level_comment_isValid;

    m_total_reply_count_isValid = ::OpenAPI::fromJsonValue(m_total_reply_count, json[QString("totalReplyCount")]);
    m_total_reply_count_isSet = !json[QString("totalReplyCount")].isNull() && m_total_reply_count_isValid;

    m_video_id_isValid = ::OpenAPI::fromJsonValue(m_video_id, json[QString("videoId")]);
    m_video_id_isSet = !json[QString("videoId")].isNull() && m_video_id_isValid;
}

QString OAICommentThreadSnippet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommentThreadSnippet::asJsonObject() const {
    QJsonObject obj;
    if (m_can_reply_isSet) {
        obj.insert(QString("canReply"), ::OpenAPI::toJsonValue(m_can_reply));
    }
    if (m_channel_id_isSet) {
        obj.insert(QString("channelId"), ::OpenAPI::toJsonValue(m_channel_id));
    }
    if (m_is_public_isSet) {
        obj.insert(QString("isPublic"), ::OpenAPI::toJsonValue(m_is_public));
    }
    if (m_top_level_comment.isSet()) {
        obj.insert(QString("topLevelComment"), ::OpenAPI::toJsonValue(m_top_level_comment));
    }
    if (m_total_reply_count_isSet) {
        obj.insert(QString("totalReplyCount"), ::OpenAPI::toJsonValue(m_total_reply_count));
    }
    if (m_video_id_isSet) {
        obj.insert(QString("videoId"), ::OpenAPI::toJsonValue(m_video_id));
    }
    return obj;
}

bool OAICommentThreadSnippet::isCanReply() const {
    return m_can_reply;
}
void OAICommentThreadSnippet::setCanReply(const bool &can_reply) {
    m_can_reply = can_reply;
    m_can_reply_isSet = true;
}

bool OAICommentThreadSnippet::is_can_reply_Set() const{
    return m_can_reply_isSet;
}

bool OAICommentThreadSnippet::is_can_reply_Valid() const{
    return m_can_reply_isValid;
}

QString OAICommentThreadSnippet::getChannelId() const {
    return m_channel_id;
}
void OAICommentThreadSnippet::setChannelId(const QString &channel_id) {
    m_channel_id = channel_id;
    m_channel_id_isSet = true;
}

bool OAICommentThreadSnippet::is_channel_id_Set() const{
    return m_channel_id_isSet;
}

bool OAICommentThreadSnippet::is_channel_id_Valid() const{
    return m_channel_id_isValid;
}

bool OAICommentThreadSnippet::isIsPublic() const {
    return m_is_public;
}
void OAICommentThreadSnippet::setIsPublic(const bool &is_public) {
    m_is_public = is_public;
    m_is_public_isSet = true;
}

bool OAICommentThreadSnippet::is_is_public_Set() const{
    return m_is_public_isSet;
}

bool OAICommentThreadSnippet::is_is_public_Valid() const{
    return m_is_public_isValid;
}

OAIComment OAICommentThreadSnippet::getTopLevelComment() const {
    return m_top_level_comment;
}
void OAICommentThreadSnippet::setTopLevelComment(const OAIComment &top_level_comment) {
    m_top_level_comment = top_level_comment;
    m_top_level_comment_isSet = true;
}

bool OAICommentThreadSnippet::is_top_level_comment_Set() const{
    return m_top_level_comment_isSet;
}

bool OAICommentThreadSnippet::is_top_level_comment_Valid() const{
    return m_top_level_comment_isValid;
}

qint32 OAICommentThreadSnippet::getTotalReplyCount() const {
    return m_total_reply_count;
}
void OAICommentThreadSnippet::setTotalReplyCount(const qint32 &total_reply_count) {
    m_total_reply_count = total_reply_count;
    m_total_reply_count_isSet = true;
}

bool OAICommentThreadSnippet::is_total_reply_count_Set() const{
    return m_total_reply_count_isSet;
}

bool OAICommentThreadSnippet::is_total_reply_count_Valid() const{
    return m_total_reply_count_isValid;
}

QString OAICommentThreadSnippet::getVideoId() const {
    return m_video_id;
}
void OAICommentThreadSnippet::setVideoId(const QString &video_id) {
    m_video_id = video_id;
    m_video_id_isSet = true;
}

bool OAICommentThreadSnippet::is_video_id_Set() const{
    return m_video_id_isSet;
}

bool OAICommentThreadSnippet::is_video_id_Valid() const{
    return m_video_id_isValid;
}

bool OAICommentThreadSnippet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_can_reply_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_level_comment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_reply_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommentThreadSnippet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
