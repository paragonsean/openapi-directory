/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoContentDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoContentDetails::OAIVideoContentDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoContentDetails::OAIVideoContentDetails() {
    this->initializeModel();
}

OAIVideoContentDetails::~OAIVideoContentDetails() {}

void OAIVideoContentDetails::initializeModel() {

    m_caption_isSet = false;
    m_caption_isValid = false;

    m_content_rating_isSet = false;
    m_content_rating_isValid = false;

    m_country_restriction_isSet = false;
    m_country_restriction_isValid = false;

    m_definition_isSet = false;
    m_definition_isValid = false;

    m_dimension_isSet = false;
    m_dimension_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_has_custom_thumbnail_isSet = false;
    m_has_custom_thumbnail_isValid = false;

    m_licensed_content_isSet = false;
    m_licensed_content_isValid = false;

    m_projection_isSet = false;
    m_projection_isValid = false;

    m_region_restriction_isSet = false;
    m_region_restriction_isValid = false;
}

void OAIVideoContentDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoContentDetails::fromJsonObject(QJsonObject json) {

    m_caption_isValid = ::OpenAPI::fromJsonValue(m_caption, json[QString("caption")]);
    m_caption_isSet = !json[QString("caption")].isNull() && m_caption_isValid;

    m_content_rating_isValid = ::OpenAPI::fromJsonValue(m_content_rating, json[QString("contentRating")]);
    m_content_rating_isSet = !json[QString("contentRating")].isNull() && m_content_rating_isValid;

    m_country_restriction_isValid = ::OpenAPI::fromJsonValue(m_country_restriction, json[QString("countryRestriction")]);
    m_country_restriction_isSet = !json[QString("countryRestriction")].isNull() && m_country_restriction_isValid;

    m_definition_isValid = ::OpenAPI::fromJsonValue(m_definition, json[QString("definition")]);
    m_definition_isSet = !json[QString("definition")].isNull() && m_definition_isValid;

    m_dimension_isValid = ::OpenAPI::fromJsonValue(m_dimension, json[QString("dimension")]);
    m_dimension_isSet = !json[QString("dimension")].isNull() && m_dimension_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_has_custom_thumbnail_isValid = ::OpenAPI::fromJsonValue(m_has_custom_thumbnail, json[QString("hasCustomThumbnail")]);
    m_has_custom_thumbnail_isSet = !json[QString("hasCustomThumbnail")].isNull() && m_has_custom_thumbnail_isValid;

    m_licensed_content_isValid = ::OpenAPI::fromJsonValue(m_licensed_content, json[QString("licensedContent")]);
    m_licensed_content_isSet = !json[QString("licensedContent")].isNull() && m_licensed_content_isValid;

    m_projection_isValid = ::OpenAPI::fromJsonValue(m_projection, json[QString("projection")]);
    m_projection_isSet = !json[QString("projection")].isNull() && m_projection_isValid;

    m_region_restriction_isValid = ::OpenAPI::fromJsonValue(m_region_restriction, json[QString("regionRestriction")]);
    m_region_restriction_isSet = !json[QString("regionRestriction")].isNull() && m_region_restriction_isValid;
}

QString OAIVideoContentDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoContentDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_caption_isSet) {
        obj.insert(QString("caption"), ::OpenAPI::toJsonValue(m_caption));
    }
    if (m_content_rating.isSet()) {
        obj.insert(QString("contentRating"), ::OpenAPI::toJsonValue(m_content_rating));
    }
    if (m_country_restriction.isSet()) {
        obj.insert(QString("countryRestriction"), ::OpenAPI::toJsonValue(m_country_restriction));
    }
    if (m_definition_isSet) {
        obj.insert(QString("definition"), ::OpenAPI::toJsonValue(m_definition));
    }
    if (m_dimension_isSet) {
        obj.insert(QString("dimension"), ::OpenAPI::toJsonValue(m_dimension));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_has_custom_thumbnail_isSet) {
        obj.insert(QString("hasCustomThumbnail"), ::OpenAPI::toJsonValue(m_has_custom_thumbnail));
    }
    if (m_licensed_content_isSet) {
        obj.insert(QString("licensedContent"), ::OpenAPI::toJsonValue(m_licensed_content));
    }
    if (m_projection_isSet) {
        obj.insert(QString("projection"), ::OpenAPI::toJsonValue(m_projection));
    }
    if (m_region_restriction.isSet()) {
        obj.insert(QString("regionRestriction"), ::OpenAPI::toJsonValue(m_region_restriction));
    }
    return obj;
}

QString OAIVideoContentDetails::getCaption() const {
    return m_caption;
}
void OAIVideoContentDetails::setCaption(const QString &caption) {
    m_caption = caption;
    m_caption_isSet = true;
}

bool OAIVideoContentDetails::is_caption_Set() const{
    return m_caption_isSet;
}

bool OAIVideoContentDetails::is_caption_Valid() const{
    return m_caption_isValid;
}

OAIContentRating OAIVideoContentDetails::getContentRating() const {
    return m_content_rating;
}
void OAIVideoContentDetails::setContentRating(const OAIContentRating &content_rating) {
    m_content_rating = content_rating;
    m_content_rating_isSet = true;
}

bool OAIVideoContentDetails::is_content_rating_Set() const{
    return m_content_rating_isSet;
}

bool OAIVideoContentDetails::is_content_rating_Valid() const{
    return m_content_rating_isValid;
}

OAIAccessPolicy OAIVideoContentDetails::getCountryRestriction() const {
    return m_country_restriction;
}
void OAIVideoContentDetails::setCountryRestriction(const OAIAccessPolicy &country_restriction) {
    m_country_restriction = country_restriction;
    m_country_restriction_isSet = true;
}

bool OAIVideoContentDetails::is_country_restriction_Set() const{
    return m_country_restriction_isSet;
}

bool OAIVideoContentDetails::is_country_restriction_Valid() const{
    return m_country_restriction_isValid;
}

QString OAIVideoContentDetails::getDefinition() const {
    return m_definition;
}
void OAIVideoContentDetails::setDefinition(const QString &definition) {
    m_definition = definition;
    m_definition_isSet = true;
}

bool OAIVideoContentDetails::is_definition_Set() const{
    return m_definition_isSet;
}

bool OAIVideoContentDetails::is_definition_Valid() const{
    return m_definition_isValid;
}

QString OAIVideoContentDetails::getDimension() const {
    return m_dimension;
}
void OAIVideoContentDetails::setDimension(const QString &dimension) {
    m_dimension = dimension;
    m_dimension_isSet = true;
}

bool OAIVideoContentDetails::is_dimension_Set() const{
    return m_dimension_isSet;
}

bool OAIVideoContentDetails::is_dimension_Valid() const{
    return m_dimension_isValid;
}

QString OAIVideoContentDetails::getDuration() const {
    return m_duration;
}
void OAIVideoContentDetails::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIVideoContentDetails::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIVideoContentDetails::is_duration_Valid() const{
    return m_duration_isValid;
}

bool OAIVideoContentDetails::isHasCustomThumbnail() const {
    return m_has_custom_thumbnail;
}
void OAIVideoContentDetails::setHasCustomThumbnail(const bool &has_custom_thumbnail) {
    m_has_custom_thumbnail = has_custom_thumbnail;
    m_has_custom_thumbnail_isSet = true;
}

bool OAIVideoContentDetails::is_has_custom_thumbnail_Set() const{
    return m_has_custom_thumbnail_isSet;
}

bool OAIVideoContentDetails::is_has_custom_thumbnail_Valid() const{
    return m_has_custom_thumbnail_isValid;
}

bool OAIVideoContentDetails::isLicensedContent() const {
    return m_licensed_content;
}
void OAIVideoContentDetails::setLicensedContent(const bool &licensed_content) {
    m_licensed_content = licensed_content;
    m_licensed_content_isSet = true;
}

bool OAIVideoContentDetails::is_licensed_content_Set() const{
    return m_licensed_content_isSet;
}

bool OAIVideoContentDetails::is_licensed_content_Valid() const{
    return m_licensed_content_isValid;
}

QString OAIVideoContentDetails::getProjection() const {
    return m_projection;
}
void OAIVideoContentDetails::setProjection(const QString &projection) {
    m_projection = projection;
    m_projection_isSet = true;
}

bool OAIVideoContentDetails::is_projection_Set() const{
    return m_projection_isSet;
}

bool OAIVideoContentDetails::is_projection_Valid() const{
    return m_projection_isValid;
}

OAIVideoContentDetailsRegionRestriction OAIVideoContentDetails::getRegionRestriction() const {
    return m_region_restriction;
}
void OAIVideoContentDetails::setRegionRestriction(const OAIVideoContentDetailsRegionRestriction &region_restriction) {
    m_region_restriction = region_restriction;
    m_region_restriction_isSet = true;
}

bool OAIVideoContentDetails::is_region_restriction_Set() const{
    return m_region_restriction_isSet;
}

bool OAIVideoContentDetails::is_region_restriction_Valid() const{
    return m_region_restriction_isValid;
}

bool OAIVideoContentDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_caption_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_rating.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_restriction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_definition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_custom_thumbnail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_licensed_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_projection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_restriction.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoContentDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
