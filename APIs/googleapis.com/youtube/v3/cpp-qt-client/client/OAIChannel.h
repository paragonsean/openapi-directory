/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIChannel.h
 *
 * A *channel* resource contains information about a YouTube channel.
 */

#ifndef OAIChannel_H
#define OAIChannel_H

#include <QJsonObject>

#include "OAIChannelAuditDetails.h"
#include "OAIChannelBrandingSettings.h"
#include "OAIChannelContentDetails.h"
#include "OAIChannelContentOwnerDetails.h"
#include "OAIChannelConversionPings.h"
#include "OAIChannelLocalization.h"
#include "OAIChannelSnippet.h"
#include "OAIChannelStatistics.h"
#include "OAIChannelStatus.h"
#include "OAIChannelTopicDetails.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIChannelAuditDetails;
class OAIChannelBrandingSettings;
class OAIChannelContentDetails;
class OAIChannelContentOwnerDetails;
class OAIChannelConversionPings;
class OAIChannelLocalization;
class OAIChannelSnippet;
class OAIChannelStatistics;
class OAIChannelStatus;
class OAIChannelTopicDetails;

class OAIChannel : public OAIObject {
public:
    OAIChannel();
    OAIChannel(QString json);
    ~OAIChannel() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIChannelAuditDetails getAuditDetails() const;
    void setAuditDetails(const OAIChannelAuditDetails &audit_details);
    bool is_audit_details_Set() const;
    bool is_audit_details_Valid() const;

    OAIChannelBrandingSettings getBrandingSettings() const;
    void setBrandingSettings(const OAIChannelBrandingSettings &branding_settings);
    bool is_branding_settings_Set() const;
    bool is_branding_settings_Valid() const;

    OAIChannelContentDetails getContentDetails() const;
    void setContentDetails(const OAIChannelContentDetails &content_details);
    bool is_content_details_Set() const;
    bool is_content_details_Valid() const;

    OAIChannelContentOwnerDetails getContentOwnerDetails() const;
    void setContentOwnerDetails(const OAIChannelContentOwnerDetails &content_owner_details);
    bool is_content_owner_details_Set() const;
    bool is_content_owner_details_Valid() const;

    OAIChannelConversionPings getConversionPings() const;
    void setConversionPings(const OAIChannelConversionPings &conversion_pings);
    bool is_conversion_pings_Set() const;
    bool is_conversion_pings_Valid() const;

    QString getEtag() const;
    void setEtag(const QString &etag);
    bool is_etag_Set() const;
    bool is_etag_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getKind() const;
    void setKind(const QString &kind);
    bool is_kind_Set() const;
    bool is_kind_Valid() const;

    QMap<QString, OAIChannelLocalization> getLocalizations() const;
    void setLocalizations(const QMap<QString, OAIChannelLocalization> &localizations);
    bool is_localizations_Set() const;
    bool is_localizations_Valid() const;

    OAIChannelSnippet getSnippet() const;
    void setSnippet(const OAIChannelSnippet &snippet);
    bool is_snippet_Set() const;
    bool is_snippet_Valid() const;

    OAIChannelStatistics getStatistics() const;
    void setStatistics(const OAIChannelStatistics &statistics);
    bool is_statistics_Set() const;
    bool is_statistics_Valid() const;

    OAIChannelStatus getStatus() const;
    void setStatus(const OAIChannelStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    OAIChannelTopicDetails getTopicDetails() const;
    void setTopicDetails(const OAIChannelTopicDetails &topic_details);
    bool is_topic_details_Set() const;
    bool is_topic_details_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIChannelAuditDetails m_audit_details;
    bool m_audit_details_isSet;
    bool m_audit_details_isValid;

    OAIChannelBrandingSettings m_branding_settings;
    bool m_branding_settings_isSet;
    bool m_branding_settings_isValid;

    OAIChannelContentDetails m_content_details;
    bool m_content_details_isSet;
    bool m_content_details_isValid;

    OAIChannelContentOwnerDetails m_content_owner_details;
    bool m_content_owner_details_isSet;
    bool m_content_owner_details_isValid;

    OAIChannelConversionPings m_conversion_pings;
    bool m_conversion_pings_isSet;
    bool m_conversion_pings_isValid;

    QString m_etag;
    bool m_etag_isSet;
    bool m_etag_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_kind;
    bool m_kind_isSet;
    bool m_kind_isValid;

    QMap<QString, OAIChannelLocalization> m_localizations;
    bool m_localizations_isSet;
    bool m_localizations_isValid;

    OAIChannelSnippet m_snippet;
    bool m_snippet_isSet;
    bool m_snippet_isValid;

    OAIChannelStatistics m_statistics;
    bool m_statistics_isSet;
    bool m_statistics_isValid;

    OAIChannelStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    OAIChannelTopicDetails m_topic_details;
    bool m_topic_details_isSet;
    bool m_topic_details_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIChannel)

#endif // OAIChannel_H
