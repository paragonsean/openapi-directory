/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWatchSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWatchSettings::OAIWatchSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWatchSettings::OAIWatchSettings() {
    this->initializeModel();
}

OAIWatchSettings::~OAIWatchSettings() {}

void OAIWatchSettings::initializeModel() {

    m_background_color_isSet = false;
    m_background_color_isValid = false;

    m_featured_playlist_id_isSet = false;
    m_featured_playlist_id_isValid = false;

    m_text_color_isSet = false;
    m_text_color_isValid = false;
}

void OAIWatchSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWatchSettings::fromJsonObject(QJsonObject json) {

    m_background_color_isValid = ::OpenAPI::fromJsonValue(m_background_color, json[QString("backgroundColor")]);
    m_background_color_isSet = !json[QString("backgroundColor")].isNull() && m_background_color_isValid;

    m_featured_playlist_id_isValid = ::OpenAPI::fromJsonValue(m_featured_playlist_id, json[QString("featuredPlaylistId")]);
    m_featured_playlist_id_isSet = !json[QString("featuredPlaylistId")].isNull() && m_featured_playlist_id_isValid;

    m_text_color_isValid = ::OpenAPI::fromJsonValue(m_text_color, json[QString("textColor")]);
    m_text_color_isSet = !json[QString("textColor")].isNull() && m_text_color_isValid;
}

QString OAIWatchSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWatchSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_background_color_isSet) {
        obj.insert(QString("backgroundColor"), ::OpenAPI::toJsonValue(m_background_color));
    }
    if (m_featured_playlist_id_isSet) {
        obj.insert(QString("featuredPlaylistId"), ::OpenAPI::toJsonValue(m_featured_playlist_id));
    }
    if (m_text_color_isSet) {
        obj.insert(QString("textColor"), ::OpenAPI::toJsonValue(m_text_color));
    }
    return obj;
}

QString OAIWatchSettings::getBackgroundColor() const {
    return m_background_color;
}
void OAIWatchSettings::setBackgroundColor(const QString &background_color) {
    m_background_color = background_color;
    m_background_color_isSet = true;
}

bool OAIWatchSettings::is_background_color_Set() const{
    return m_background_color_isSet;
}

bool OAIWatchSettings::is_background_color_Valid() const{
    return m_background_color_isValid;
}

QString OAIWatchSettings::getFeaturedPlaylistId() const {
    return m_featured_playlist_id;
}
void OAIWatchSettings::setFeaturedPlaylistId(const QString &featured_playlist_id) {
    m_featured_playlist_id = featured_playlist_id;
    m_featured_playlist_id_isSet = true;
}

bool OAIWatchSettings::is_featured_playlist_id_Set() const{
    return m_featured_playlist_id_isSet;
}

bool OAIWatchSettings::is_featured_playlist_id_Valid() const{
    return m_featured_playlist_id_isValid;
}

QString OAIWatchSettings::getTextColor() const {
    return m_text_color;
}
void OAIWatchSettings::setTextColor(const QString &text_color) {
    m_text_color = text_color;
    m_text_color_isSet = true;
}

bool OAIWatchSettings::is_text_color_Set() const{
    return m_text_color_isSet;
}

bool OAIWatchSettings::is_text_color_Valid() const{
    return m_text_color_isValid;
}

bool OAIWatchSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_background_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_featured_playlist_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_color_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWatchSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
