/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlaylistSnippet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlaylistSnippet::OAIPlaylistSnippet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlaylistSnippet::OAIPlaylistSnippet() {
    this->initializeModel();
}

OAIPlaylistSnippet::~OAIPlaylistSnippet() {}

void OAIPlaylistSnippet::initializeModel() {

    m_channel_id_isSet = false;
    m_channel_id_isValid = false;

    m_channel_title_isSet = false;
    m_channel_title_isValid = false;

    m_default_language_isSet = false;
    m_default_language_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_localized_isSet = false;
    m_localized_isValid = false;

    m_published_at_isSet = false;
    m_published_at_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_thumbnail_video_id_isSet = false;
    m_thumbnail_video_id_isValid = false;

    m_thumbnails_isSet = false;
    m_thumbnails_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIPlaylistSnippet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlaylistSnippet::fromJsonObject(QJsonObject json) {

    m_channel_id_isValid = ::OpenAPI::fromJsonValue(m_channel_id, json[QString("channelId")]);
    m_channel_id_isSet = !json[QString("channelId")].isNull() && m_channel_id_isValid;

    m_channel_title_isValid = ::OpenAPI::fromJsonValue(m_channel_title, json[QString("channelTitle")]);
    m_channel_title_isSet = !json[QString("channelTitle")].isNull() && m_channel_title_isValid;

    m_default_language_isValid = ::OpenAPI::fromJsonValue(m_default_language, json[QString("defaultLanguage")]);
    m_default_language_isSet = !json[QString("defaultLanguage")].isNull() && m_default_language_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_localized_isValid = ::OpenAPI::fromJsonValue(m_localized, json[QString("localized")]);
    m_localized_isSet = !json[QString("localized")].isNull() && m_localized_isValid;

    m_published_at_isValid = ::OpenAPI::fromJsonValue(m_published_at, json[QString("publishedAt")]);
    m_published_at_isSet = !json[QString("publishedAt")].isNull() && m_published_at_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_thumbnail_video_id_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_video_id, json[QString("thumbnailVideoId")]);
    m_thumbnail_video_id_isSet = !json[QString("thumbnailVideoId")].isNull() && m_thumbnail_video_id_isValid;

    m_thumbnails_isValid = ::OpenAPI::fromJsonValue(m_thumbnails, json[QString("thumbnails")]);
    m_thumbnails_isSet = !json[QString("thumbnails")].isNull() && m_thumbnails_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIPlaylistSnippet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlaylistSnippet::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_id_isSet) {
        obj.insert(QString("channelId"), ::OpenAPI::toJsonValue(m_channel_id));
    }
    if (m_channel_title_isSet) {
        obj.insert(QString("channelTitle"), ::OpenAPI::toJsonValue(m_channel_title));
    }
    if (m_default_language_isSet) {
        obj.insert(QString("defaultLanguage"), ::OpenAPI::toJsonValue(m_default_language));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_localized.isSet()) {
        obj.insert(QString("localized"), ::OpenAPI::toJsonValue(m_localized));
    }
    if (m_published_at_isSet) {
        obj.insert(QString("publishedAt"), ::OpenAPI::toJsonValue(m_published_at));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_thumbnail_video_id_isSet) {
        obj.insert(QString("thumbnailVideoId"), ::OpenAPI::toJsonValue(m_thumbnail_video_id));
    }
    if (m_thumbnails.isSet()) {
        obj.insert(QString("thumbnails"), ::OpenAPI::toJsonValue(m_thumbnails));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIPlaylistSnippet::getChannelId() const {
    return m_channel_id;
}
void OAIPlaylistSnippet::setChannelId(const QString &channel_id) {
    m_channel_id = channel_id;
    m_channel_id_isSet = true;
}

bool OAIPlaylistSnippet::is_channel_id_Set() const{
    return m_channel_id_isSet;
}

bool OAIPlaylistSnippet::is_channel_id_Valid() const{
    return m_channel_id_isValid;
}

QString OAIPlaylistSnippet::getChannelTitle() const {
    return m_channel_title;
}
void OAIPlaylistSnippet::setChannelTitle(const QString &channel_title) {
    m_channel_title = channel_title;
    m_channel_title_isSet = true;
}

bool OAIPlaylistSnippet::is_channel_title_Set() const{
    return m_channel_title_isSet;
}

bool OAIPlaylistSnippet::is_channel_title_Valid() const{
    return m_channel_title_isValid;
}

QString OAIPlaylistSnippet::getDefaultLanguage() const {
    return m_default_language;
}
void OAIPlaylistSnippet::setDefaultLanguage(const QString &default_language) {
    m_default_language = default_language;
    m_default_language_isSet = true;
}

bool OAIPlaylistSnippet::is_default_language_Set() const{
    return m_default_language_isSet;
}

bool OAIPlaylistSnippet::is_default_language_Valid() const{
    return m_default_language_isValid;
}

QString OAIPlaylistSnippet::getDescription() const {
    return m_description;
}
void OAIPlaylistSnippet::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPlaylistSnippet::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPlaylistSnippet::is_description_Valid() const{
    return m_description_isValid;
}

OAIPlaylistLocalization OAIPlaylistSnippet::getLocalized() const {
    return m_localized;
}
void OAIPlaylistSnippet::setLocalized(const OAIPlaylistLocalization &localized) {
    m_localized = localized;
    m_localized_isSet = true;
}

bool OAIPlaylistSnippet::is_localized_Set() const{
    return m_localized_isSet;
}

bool OAIPlaylistSnippet::is_localized_Valid() const{
    return m_localized_isValid;
}

QDateTime OAIPlaylistSnippet::getPublishedAt() const {
    return m_published_at;
}
void OAIPlaylistSnippet::setPublishedAt(const QDateTime &published_at) {
    m_published_at = published_at;
    m_published_at_isSet = true;
}

bool OAIPlaylistSnippet::is_published_at_Set() const{
    return m_published_at_isSet;
}

bool OAIPlaylistSnippet::is_published_at_Valid() const{
    return m_published_at_isValid;
}

QList<QString> OAIPlaylistSnippet::getTags() const {
    return m_tags;
}
void OAIPlaylistSnippet::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIPlaylistSnippet::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIPlaylistSnippet::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIPlaylistSnippet::getThumbnailVideoId() const {
    return m_thumbnail_video_id;
}
void OAIPlaylistSnippet::setThumbnailVideoId(const QString &thumbnail_video_id) {
    m_thumbnail_video_id = thumbnail_video_id;
    m_thumbnail_video_id_isSet = true;
}

bool OAIPlaylistSnippet::is_thumbnail_video_id_Set() const{
    return m_thumbnail_video_id_isSet;
}

bool OAIPlaylistSnippet::is_thumbnail_video_id_Valid() const{
    return m_thumbnail_video_id_isValid;
}

OAIThumbnailDetails OAIPlaylistSnippet::getThumbnails() const {
    return m_thumbnails;
}
void OAIPlaylistSnippet::setThumbnails(const OAIThumbnailDetails &thumbnails) {
    m_thumbnails = thumbnails;
    m_thumbnails_isSet = true;
}

bool OAIPlaylistSnippet::is_thumbnails_Set() const{
    return m_thumbnails_isSet;
}

bool OAIPlaylistSnippet::is_thumbnails_Valid() const{
    return m_thumbnails_isValid;
}

QString OAIPlaylistSnippet::getTitle() const {
    return m_title;
}
void OAIPlaylistSnippet::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPlaylistSnippet::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPlaylistSnippet::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIPlaylistSnippet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_localized.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_video_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnails.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlaylistSnippet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
