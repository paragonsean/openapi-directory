/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInvideoBranding.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInvideoBranding::OAIInvideoBranding(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInvideoBranding::OAIInvideoBranding() {
    this->initializeModel();
}

OAIInvideoBranding::~OAIInvideoBranding() {}

void OAIInvideoBranding::initializeModel() {

    m_image_bytes_isSet = false;
    m_image_bytes_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_target_channel_id_isSet = false;
    m_target_channel_id_isValid = false;

    m_timing_isSet = false;
    m_timing_isValid = false;
}

void OAIInvideoBranding::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInvideoBranding::fromJsonObject(QJsonObject json) {

    m_image_bytes_isValid = ::OpenAPI::fromJsonValue(m_image_bytes, json[QString("imageBytes")]);
    m_image_bytes_isSet = !json[QString("imageBytes")].isNull() && m_image_bytes_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("imageUrl")]);
    m_image_url_isSet = !json[QString("imageUrl")].isNull() && m_image_url_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_target_channel_id_isValid = ::OpenAPI::fromJsonValue(m_target_channel_id, json[QString("targetChannelId")]);
    m_target_channel_id_isSet = !json[QString("targetChannelId")].isNull() && m_target_channel_id_isValid;

    m_timing_isValid = ::OpenAPI::fromJsonValue(m_timing, json[QString("timing")]);
    m_timing_isSet = !json[QString("timing")].isNull() && m_timing_isValid;
}

QString OAIInvideoBranding::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInvideoBranding::asJsonObject() const {
    QJsonObject obj;
    if (m_image_bytes_isSet) {
        obj.insert(QString("imageBytes"), ::OpenAPI::toJsonValue(m_image_bytes));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("imageUrl"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_position.isSet()) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_target_channel_id_isSet) {
        obj.insert(QString("targetChannelId"), ::OpenAPI::toJsonValue(m_target_channel_id));
    }
    if (m_timing.isSet()) {
        obj.insert(QString("timing"), ::OpenAPI::toJsonValue(m_timing));
    }
    return obj;
}

QByteArray OAIInvideoBranding::getImageBytes() const {
    return m_image_bytes;
}
void OAIInvideoBranding::setImageBytes(const QByteArray &image_bytes) {
    m_image_bytes = image_bytes;
    m_image_bytes_isSet = true;
}

bool OAIInvideoBranding::is_image_bytes_Set() const{
    return m_image_bytes_isSet;
}

bool OAIInvideoBranding::is_image_bytes_Valid() const{
    return m_image_bytes_isValid;
}

QString OAIInvideoBranding::getImageUrl() const {
    return m_image_url;
}
void OAIInvideoBranding::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIInvideoBranding::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIInvideoBranding::is_image_url_Valid() const{
    return m_image_url_isValid;
}

OAIInvideoPosition OAIInvideoBranding::getPosition() const {
    return m_position;
}
void OAIInvideoBranding::setPosition(const OAIInvideoPosition &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIInvideoBranding::is_position_Set() const{
    return m_position_isSet;
}

bool OAIInvideoBranding::is_position_Valid() const{
    return m_position_isValid;
}

QString OAIInvideoBranding::getTargetChannelId() const {
    return m_target_channel_id;
}
void OAIInvideoBranding::setTargetChannelId(const QString &target_channel_id) {
    m_target_channel_id = target_channel_id;
    m_target_channel_id_isSet = true;
}

bool OAIInvideoBranding::is_target_channel_id_Set() const{
    return m_target_channel_id_isSet;
}

bool OAIInvideoBranding::is_target_channel_id_Valid() const{
    return m_target_channel_id_isValid;
}

OAIInvideoTiming OAIInvideoBranding::getTiming() const {
    return m_timing;
}
void OAIInvideoBranding::setTiming(const OAIInvideoTiming &timing) {
    m_timing = timing;
    m_timing_isSet = true;
}

bool OAIInvideoBranding::is_timing_Set() const{
    return m_timing_isSet;
}

bool OAIInvideoBranding::is_timing_Valid() const{
    return m_timing_isValid;
}

bool OAIInvideoBranding::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timing.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInvideoBranding::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
