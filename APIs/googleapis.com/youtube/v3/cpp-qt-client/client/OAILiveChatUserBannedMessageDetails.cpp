/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILiveChatUserBannedMessageDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILiveChatUserBannedMessageDetails::OAILiveChatUserBannedMessageDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILiveChatUserBannedMessageDetails::OAILiveChatUserBannedMessageDetails() {
    this->initializeModel();
}

OAILiveChatUserBannedMessageDetails::~OAILiveChatUserBannedMessageDetails() {}

void OAILiveChatUserBannedMessageDetails::initializeModel() {

    m_ban_duration_seconds_isSet = false;
    m_ban_duration_seconds_isValid = false;

    m_ban_type_isSet = false;
    m_ban_type_isValid = false;

    m_banned_user_details_isSet = false;
    m_banned_user_details_isValid = false;
}

void OAILiveChatUserBannedMessageDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILiveChatUserBannedMessageDetails::fromJsonObject(QJsonObject json) {

    m_ban_duration_seconds_isValid = ::OpenAPI::fromJsonValue(m_ban_duration_seconds, json[QString("banDurationSeconds")]);
    m_ban_duration_seconds_isSet = !json[QString("banDurationSeconds")].isNull() && m_ban_duration_seconds_isValid;

    m_ban_type_isValid = ::OpenAPI::fromJsonValue(m_ban_type, json[QString("banType")]);
    m_ban_type_isSet = !json[QString("banType")].isNull() && m_ban_type_isValid;

    m_banned_user_details_isValid = ::OpenAPI::fromJsonValue(m_banned_user_details, json[QString("bannedUserDetails")]);
    m_banned_user_details_isSet = !json[QString("bannedUserDetails")].isNull() && m_banned_user_details_isValid;
}

QString OAILiveChatUserBannedMessageDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILiveChatUserBannedMessageDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_ban_duration_seconds_isSet) {
        obj.insert(QString("banDurationSeconds"), ::OpenAPI::toJsonValue(m_ban_duration_seconds));
    }
    if (m_ban_type_isSet) {
        obj.insert(QString("banType"), ::OpenAPI::toJsonValue(m_ban_type));
    }
    if (m_banned_user_details.isSet()) {
        obj.insert(QString("bannedUserDetails"), ::OpenAPI::toJsonValue(m_banned_user_details));
    }
    return obj;
}

QString OAILiveChatUserBannedMessageDetails::getBanDurationSeconds() const {
    return m_ban_duration_seconds;
}
void OAILiveChatUserBannedMessageDetails::setBanDurationSeconds(const QString &ban_duration_seconds) {
    m_ban_duration_seconds = ban_duration_seconds;
    m_ban_duration_seconds_isSet = true;
}

bool OAILiveChatUserBannedMessageDetails::is_ban_duration_seconds_Set() const{
    return m_ban_duration_seconds_isSet;
}

bool OAILiveChatUserBannedMessageDetails::is_ban_duration_seconds_Valid() const{
    return m_ban_duration_seconds_isValid;
}

QString OAILiveChatUserBannedMessageDetails::getBanType() const {
    return m_ban_type;
}
void OAILiveChatUserBannedMessageDetails::setBanType(const QString &ban_type) {
    m_ban_type = ban_type;
    m_ban_type_isSet = true;
}

bool OAILiveChatUserBannedMessageDetails::is_ban_type_Set() const{
    return m_ban_type_isSet;
}

bool OAILiveChatUserBannedMessageDetails::is_ban_type_Valid() const{
    return m_ban_type_isValid;
}

OAIChannelProfileDetails OAILiveChatUserBannedMessageDetails::getBannedUserDetails() const {
    return m_banned_user_details;
}
void OAILiveChatUserBannedMessageDetails::setBannedUserDetails(const OAIChannelProfileDetails &banned_user_details) {
    m_banned_user_details = banned_user_details;
    m_banned_user_details_isSet = true;
}

bool OAILiveChatUserBannedMessageDetails::is_banned_user_details_Set() const{
    return m_banned_user_details_isSet;
}

bool OAILiveChatUserBannedMessageDetails::is_banned_user_details_Valid() const{
    return m_banned_user_details_isValid;
}

bool OAILiveChatUserBannedMessageDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ban_duration_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ban_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_banned_user_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILiveChatUserBannedMessageDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
