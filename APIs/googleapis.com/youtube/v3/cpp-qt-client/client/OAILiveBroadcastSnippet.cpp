/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILiveBroadcastSnippet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILiveBroadcastSnippet::OAILiveBroadcastSnippet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILiveBroadcastSnippet::OAILiveBroadcastSnippet() {
    this->initializeModel();
}

OAILiveBroadcastSnippet::~OAILiveBroadcastSnippet() {}

void OAILiveBroadcastSnippet::initializeModel() {

    m_actual_end_time_isSet = false;
    m_actual_end_time_isValid = false;

    m_actual_start_time_isSet = false;
    m_actual_start_time_isValid = false;

    m_channel_id_isSet = false;
    m_channel_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_is_default_broadcast_isSet = false;
    m_is_default_broadcast_isValid = false;

    m_live_chat_id_isSet = false;
    m_live_chat_id_isValid = false;

    m_published_at_isSet = false;
    m_published_at_isValid = false;

    m_scheduled_end_time_isSet = false;
    m_scheduled_end_time_isValid = false;

    m_scheduled_start_time_isSet = false;
    m_scheduled_start_time_isValid = false;

    m_thumbnails_isSet = false;
    m_thumbnails_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAILiveBroadcastSnippet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILiveBroadcastSnippet::fromJsonObject(QJsonObject json) {

    m_actual_end_time_isValid = ::OpenAPI::fromJsonValue(m_actual_end_time, json[QString("actualEndTime")]);
    m_actual_end_time_isSet = !json[QString("actualEndTime")].isNull() && m_actual_end_time_isValid;

    m_actual_start_time_isValid = ::OpenAPI::fromJsonValue(m_actual_start_time, json[QString("actualStartTime")]);
    m_actual_start_time_isSet = !json[QString("actualStartTime")].isNull() && m_actual_start_time_isValid;

    m_channel_id_isValid = ::OpenAPI::fromJsonValue(m_channel_id, json[QString("channelId")]);
    m_channel_id_isSet = !json[QString("channelId")].isNull() && m_channel_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_is_default_broadcast_isValid = ::OpenAPI::fromJsonValue(m_is_default_broadcast, json[QString("isDefaultBroadcast")]);
    m_is_default_broadcast_isSet = !json[QString("isDefaultBroadcast")].isNull() && m_is_default_broadcast_isValid;

    m_live_chat_id_isValid = ::OpenAPI::fromJsonValue(m_live_chat_id, json[QString("liveChatId")]);
    m_live_chat_id_isSet = !json[QString("liveChatId")].isNull() && m_live_chat_id_isValid;

    m_published_at_isValid = ::OpenAPI::fromJsonValue(m_published_at, json[QString("publishedAt")]);
    m_published_at_isSet = !json[QString("publishedAt")].isNull() && m_published_at_isValid;

    m_scheduled_end_time_isValid = ::OpenAPI::fromJsonValue(m_scheduled_end_time, json[QString("scheduledEndTime")]);
    m_scheduled_end_time_isSet = !json[QString("scheduledEndTime")].isNull() && m_scheduled_end_time_isValid;

    m_scheduled_start_time_isValid = ::OpenAPI::fromJsonValue(m_scheduled_start_time, json[QString("scheduledStartTime")]);
    m_scheduled_start_time_isSet = !json[QString("scheduledStartTime")].isNull() && m_scheduled_start_time_isValid;

    m_thumbnails_isValid = ::OpenAPI::fromJsonValue(m_thumbnails, json[QString("thumbnails")]);
    m_thumbnails_isSet = !json[QString("thumbnails")].isNull() && m_thumbnails_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAILiveBroadcastSnippet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILiveBroadcastSnippet::asJsonObject() const {
    QJsonObject obj;
    if (m_actual_end_time_isSet) {
        obj.insert(QString("actualEndTime"), ::OpenAPI::toJsonValue(m_actual_end_time));
    }
    if (m_actual_start_time_isSet) {
        obj.insert(QString("actualStartTime"), ::OpenAPI::toJsonValue(m_actual_start_time));
    }
    if (m_channel_id_isSet) {
        obj.insert(QString("channelId"), ::OpenAPI::toJsonValue(m_channel_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_is_default_broadcast_isSet) {
        obj.insert(QString("isDefaultBroadcast"), ::OpenAPI::toJsonValue(m_is_default_broadcast));
    }
    if (m_live_chat_id_isSet) {
        obj.insert(QString("liveChatId"), ::OpenAPI::toJsonValue(m_live_chat_id));
    }
    if (m_published_at_isSet) {
        obj.insert(QString("publishedAt"), ::OpenAPI::toJsonValue(m_published_at));
    }
    if (m_scheduled_end_time_isSet) {
        obj.insert(QString("scheduledEndTime"), ::OpenAPI::toJsonValue(m_scheduled_end_time));
    }
    if (m_scheduled_start_time_isSet) {
        obj.insert(QString("scheduledStartTime"), ::OpenAPI::toJsonValue(m_scheduled_start_time));
    }
    if (m_thumbnails.isSet()) {
        obj.insert(QString("thumbnails"), ::OpenAPI::toJsonValue(m_thumbnails));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QDateTime OAILiveBroadcastSnippet::getActualEndTime() const {
    return m_actual_end_time;
}
void OAILiveBroadcastSnippet::setActualEndTime(const QDateTime &actual_end_time) {
    m_actual_end_time = actual_end_time;
    m_actual_end_time_isSet = true;
}

bool OAILiveBroadcastSnippet::is_actual_end_time_Set() const{
    return m_actual_end_time_isSet;
}

bool OAILiveBroadcastSnippet::is_actual_end_time_Valid() const{
    return m_actual_end_time_isValid;
}

QDateTime OAILiveBroadcastSnippet::getActualStartTime() const {
    return m_actual_start_time;
}
void OAILiveBroadcastSnippet::setActualStartTime(const QDateTime &actual_start_time) {
    m_actual_start_time = actual_start_time;
    m_actual_start_time_isSet = true;
}

bool OAILiveBroadcastSnippet::is_actual_start_time_Set() const{
    return m_actual_start_time_isSet;
}

bool OAILiveBroadcastSnippet::is_actual_start_time_Valid() const{
    return m_actual_start_time_isValid;
}

QString OAILiveBroadcastSnippet::getChannelId() const {
    return m_channel_id;
}
void OAILiveBroadcastSnippet::setChannelId(const QString &channel_id) {
    m_channel_id = channel_id;
    m_channel_id_isSet = true;
}

bool OAILiveBroadcastSnippet::is_channel_id_Set() const{
    return m_channel_id_isSet;
}

bool OAILiveBroadcastSnippet::is_channel_id_Valid() const{
    return m_channel_id_isValid;
}

QString OAILiveBroadcastSnippet::getDescription() const {
    return m_description;
}
void OAILiveBroadcastSnippet::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAILiveBroadcastSnippet::is_description_Set() const{
    return m_description_isSet;
}

bool OAILiveBroadcastSnippet::is_description_Valid() const{
    return m_description_isValid;
}

bool OAILiveBroadcastSnippet::isIsDefaultBroadcast() const {
    return m_is_default_broadcast;
}
void OAILiveBroadcastSnippet::setIsDefaultBroadcast(const bool &is_default_broadcast) {
    m_is_default_broadcast = is_default_broadcast;
    m_is_default_broadcast_isSet = true;
}

bool OAILiveBroadcastSnippet::is_is_default_broadcast_Set() const{
    return m_is_default_broadcast_isSet;
}

bool OAILiveBroadcastSnippet::is_is_default_broadcast_Valid() const{
    return m_is_default_broadcast_isValid;
}

QString OAILiveBroadcastSnippet::getLiveChatId() const {
    return m_live_chat_id;
}
void OAILiveBroadcastSnippet::setLiveChatId(const QString &live_chat_id) {
    m_live_chat_id = live_chat_id;
    m_live_chat_id_isSet = true;
}

bool OAILiveBroadcastSnippet::is_live_chat_id_Set() const{
    return m_live_chat_id_isSet;
}

bool OAILiveBroadcastSnippet::is_live_chat_id_Valid() const{
    return m_live_chat_id_isValid;
}

QDateTime OAILiveBroadcastSnippet::getPublishedAt() const {
    return m_published_at;
}
void OAILiveBroadcastSnippet::setPublishedAt(const QDateTime &published_at) {
    m_published_at = published_at;
    m_published_at_isSet = true;
}

bool OAILiveBroadcastSnippet::is_published_at_Set() const{
    return m_published_at_isSet;
}

bool OAILiveBroadcastSnippet::is_published_at_Valid() const{
    return m_published_at_isValid;
}

QDateTime OAILiveBroadcastSnippet::getScheduledEndTime() const {
    return m_scheduled_end_time;
}
void OAILiveBroadcastSnippet::setScheduledEndTime(const QDateTime &scheduled_end_time) {
    m_scheduled_end_time = scheduled_end_time;
    m_scheduled_end_time_isSet = true;
}

bool OAILiveBroadcastSnippet::is_scheduled_end_time_Set() const{
    return m_scheduled_end_time_isSet;
}

bool OAILiveBroadcastSnippet::is_scheduled_end_time_Valid() const{
    return m_scheduled_end_time_isValid;
}

QDateTime OAILiveBroadcastSnippet::getScheduledStartTime() const {
    return m_scheduled_start_time;
}
void OAILiveBroadcastSnippet::setScheduledStartTime(const QDateTime &scheduled_start_time) {
    m_scheduled_start_time = scheduled_start_time;
    m_scheduled_start_time_isSet = true;
}

bool OAILiveBroadcastSnippet::is_scheduled_start_time_Set() const{
    return m_scheduled_start_time_isSet;
}

bool OAILiveBroadcastSnippet::is_scheduled_start_time_Valid() const{
    return m_scheduled_start_time_isValid;
}

OAIThumbnailDetails OAILiveBroadcastSnippet::getThumbnails() const {
    return m_thumbnails;
}
void OAILiveBroadcastSnippet::setThumbnails(const OAIThumbnailDetails &thumbnails) {
    m_thumbnails = thumbnails;
    m_thumbnails_isSet = true;
}

bool OAILiveBroadcastSnippet::is_thumbnails_Set() const{
    return m_thumbnails_isSet;
}

bool OAILiveBroadcastSnippet::is_thumbnails_Valid() const{
    return m_thumbnails_isValid;
}

QString OAILiveBroadcastSnippet::getTitle() const {
    return m_title;
}
void OAILiveBroadcastSnippet::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAILiveBroadcastSnippet::is_title_Set() const{
    return m_title_isSet;
}

bool OAILiveBroadcastSnippet::is_title_Valid() const{
    return m_title_isValid;
}

bool OAILiveBroadcastSnippet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actual_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_actual_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_default_broadcast_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_chat_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnails.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILiveBroadcastSnippet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
