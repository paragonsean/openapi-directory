/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoSuggestions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoSuggestions::OAIVideoSuggestions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoSuggestions::OAIVideoSuggestions() {
    this->initializeModel();
}

OAIVideoSuggestions::~OAIVideoSuggestions() {}

void OAIVideoSuggestions::initializeModel() {

    m_editor_suggestions_isSet = false;
    m_editor_suggestions_isValid = false;

    m_processing_errors_isSet = false;
    m_processing_errors_isValid = false;

    m_processing_hints_isSet = false;
    m_processing_hints_isValid = false;

    m_processing_warnings_isSet = false;
    m_processing_warnings_isValid = false;

    m_tag_suggestions_isSet = false;
    m_tag_suggestions_isValid = false;
}

void OAIVideoSuggestions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoSuggestions::fromJsonObject(QJsonObject json) {

    m_editor_suggestions_isValid = ::OpenAPI::fromJsonValue(m_editor_suggestions, json[QString("editorSuggestions")]);
    m_editor_suggestions_isSet = !json[QString("editorSuggestions")].isNull() && m_editor_suggestions_isValid;

    m_processing_errors_isValid = ::OpenAPI::fromJsonValue(m_processing_errors, json[QString("processingErrors")]);
    m_processing_errors_isSet = !json[QString("processingErrors")].isNull() && m_processing_errors_isValid;

    m_processing_hints_isValid = ::OpenAPI::fromJsonValue(m_processing_hints, json[QString("processingHints")]);
    m_processing_hints_isSet = !json[QString("processingHints")].isNull() && m_processing_hints_isValid;

    m_processing_warnings_isValid = ::OpenAPI::fromJsonValue(m_processing_warnings, json[QString("processingWarnings")]);
    m_processing_warnings_isSet = !json[QString("processingWarnings")].isNull() && m_processing_warnings_isValid;

    m_tag_suggestions_isValid = ::OpenAPI::fromJsonValue(m_tag_suggestions, json[QString("tagSuggestions")]);
    m_tag_suggestions_isSet = !json[QString("tagSuggestions")].isNull() && m_tag_suggestions_isValid;
}

QString OAIVideoSuggestions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoSuggestions::asJsonObject() const {
    QJsonObject obj;
    if (m_editor_suggestions.size() > 0) {
        obj.insert(QString("editorSuggestions"), ::OpenAPI::toJsonValue(m_editor_suggestions));
    }
    if (m_processing_errors.size() > 0) {
        obj.insert(QString("processingErrors"), ::OpenAPI::toJsonValue(m_processing_errors));
    }
    if (m_processing_hints.size() > 0) {
        obj.insert(QString("processingHints"), ::OpenAPI::toJsonValue(m_processing_hints));
    }
    if (m_processing_warnings.size() > 0) {
        obj.insert(QString("processingWarnings"), ::OpenAPI::toJsonValue(m_processing_warnings));
    }
    if (m_tag_suggestions.size() > 0) {
        obj.insert(QString("tagSuggestions"), ::OpenAPI::toJsonValue(m_tag_suggestions));
    }
    return obj;
}

QList<QString> OAIVideoSuggestions::getEditorSuggestions() const {
    return m_editor_suggestions;
}
void OAIVideoSuggestions::setEditorSuggestions(const QList<QString> &editor_suggestions) {
    m_editor_suggestions = editor_suggestions;
    m_editor_suggestions_isSet = true;
}

bool OAIVideoSuggestions::is_editor_suggestions_Set() const{
    return m_editor_suggestions_isSet;
}

bool OAIVideoSuggestions::is_editor_suggestions_Valid() const{
    return m_editor_suggestions_isValid;
}

QList<QString> OAIVideoSuggestions::getProcessingErrors() const {
    return m_processing_errors;
}
void OAIVideoSuggestions::setProcessingErrors(const QList<QString> &processing_errors) {
    m_processing_errors = processing_errors;
    m_processing_errors_isSet = true;
}

bool OAIVideoSuggestions::is_processing_errors_Set() const{
    return m_processing_errors_isSet;
}

bool OAIVideoSuggestions::is_processing_errors_Valid() const{
    return m_processing_errors_isValid;
}

QList<QString> OAIVideoSuggestions::getProcessingHints() const {
    return m_processing_hints;
}
void OAIVideoSuggestions::setProcessingHints(const QList<QString> &processing_hints) {
    m_processing_hints = processing_hints;
    m_processing_hints_isSet = true;
}

bool OAIVideoSuggestions::is_processing_hints_Set() const{
    return m_processing_hints_isSet;
}

bool OAIVideoSuggestions::is_processing_hints_Valid() const{
    return m_processing_hints_isValid;
}

QList<QString> OAIVideoSuggestions::getProcessingWarnings() const {
    return m_processing_warnings;
}
void OAIVideoSuggestions::setProcessingWarnings(const QList<QString> &processing_warnings) {
    m_processing_warnings = processing_warnings;
    m_processing_warnings_isSet = true;
}

bool OAIVideoSuggestions::is_processing_warnings_Set() const{
    return m_processing_warnings_isSet;
}

bool OAIVideoSuggestions::is_processing_warnings_Valid() const{
    return m_processing_warnings_isValid;
}

QList<OAIVideoSuggestionsTagSuggestion> OAIVideoSuggestions::getTagSuggestions() const {
    return m_tag_suggestions;
}
void OAIVideoSuggestions::setTagSuggestions(const QList<OAIVideoSuggestionsTagSuggestion> &tag_suggestions) {
    m_tag_suggestions = tag_suggestions;
    m_tag_suggestions_isSet = true;
}

bool OAIVideoSuggestions::is_tag_suggestions_Set() const{
    return m_tag_suggestions_isSet;
}

bool OAIVideoSuggestions::is_tag_suggestions_Valid() const{
    return m_tag_suggestions_isValid;
}

bool OAIVideoSuggestions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_editor_suggestions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_hints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_warnings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_suggestions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoSuggestions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
