/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILiveChatFanFundingEventDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILiveChatFanFundingEventDetails::OAILiveChatFanFundingEventDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILiveChatFanFundingEventDetails::OAILiveChatFanFundingEventDetails() {
    this->initializeModel();
}

OAILiveChatFanFundingEventDetails::~OAILiveChatFanFundingEventDetails() {}

void OAILiveChatFanFundingEventDetails::initializeModel() {

    m_amount_display_string_isSet = false;
    m_amount_display_string_isValid = false;

    m_amount_micros_isSet = false;
    m_amount_micros_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_user_comment_isSet = false;
    m_user_comment_isValid = false;
}

void OAILiveChatFanFundingEventDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILiveChatFanFundingEventDetails::fromJsonObject(QJsonObject json) {

    m_amount_display_string_isValid = ::OpenAPI::fromJsonValue(m_amount_display_string, json[QString("amountDisplayString")]);
    m_amount_display_string_isSet = !json[QString("amountDisplayString")].isNull() && m_amount_display_string_isValid;

    m_amount_micros_isValid = ::OpenAPI::fromJsonValue(m_amount_micros, json[QString("amountMicros")]);
    m_amount_micros_isSet = !json[QString("amountMicros")].isNull() && m_amount_micros_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_user_comment_isValid = ::OpenAPI::fromJsonValue(m_user_comment, json[QString("userComment")]);
    m_user_comment_isSet = !json[QString("userComment")].isNull() && m_user_comment_isValid;
}

QString OAILiveChatFanFundingEventDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILiveChatFanFundingEventDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_display_string_isSet) {
        obj.insert(QString("amountDisplayString"), ::OpenAPI::toJsonValue(m_amount_display_string));
    }
    if (m_amount_micros_isSet) {
        obj.insert(QString("amountMicros"), ::OpenAPI::toJsonValue(m_amount_micros));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_user_comment_isSet) {
        obj.insert(QString("userComment"), ::OpenAPI::toJsonValue(m_user_comment));
    }
    return obj;
}

QString OAILiveChatFanFundingEventDetails::getAmountDisplayString() const {
    return m_amount_display_string;
}
void OAILiveChatFanFundingEventDetails::setAmountDisplayString(const QString &amount_display_string) {
    m_amount_display_string = amount_display_string;
    m_amount_display_string_isSet = true;
}

bool OAILiveChatFanFundingEventDetails::is_amount_display_string_Set() const{
    return m_amount_display_string_isSet;
}

bool OAILiveChatFanFundingEventDetails::is_amount_display_string_Valid() const{
    return m_amount_display_string_isValid;
}

QString OAILiveChatFanFundingEventDetails::getAmountMicros() const {
    return m_amount_micros;
}
void OAILiveChatFanFundingEventDetails::setAmountMicros(const QString &amount_micros) {
    m_amount_micros = amount_micros;
    m_amount_micros_isSet = true;
}

bool OAILiveChatFanFundingEventDetails::is_amount_micros_Set() const{
    return m_amount_micros_isSet;
}

bool OAILiveChatFanFundingEventDetails::is_amount_micros_Valid() const{
    return m_amount_micros_isValid;
}

QString OAILiveChatFanFundingEventDetails::getCurrency() const {
    return m_currency;
}
void OAILiveChatFanFundingEventDetails::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAILiveChatFanFundingEventDetails::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAILiveChatFanFundingEventDetails::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAILiveChatFanFundingEventDetails::getUserComment() const {
    return m_user_comment;
}
void OAILiveChatFanFundingEventDetails::setUserComment(const QString &user_comment) {
    m_user_comment = user_comment;
    m_user_comment_isSet = true;
}

bool OAILiveChatFanFundingEventDetails::is_user_comment_Set() const{
    return m_user_comment_isSet;
}

bool OAILiveChatFanFundingEventDetails::is_user_comment_Valid() const{
    return m_user_comment_isValid;
}

bool OAILiveChatFanFundingEventDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_display_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_micros_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_comment_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILiveChatFanFundingEventDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
