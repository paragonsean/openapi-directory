/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIThirdPartyLink.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIThirdPartyLink::OAIThirdPartyLink(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIThirdPartyLink::OAIThirdPartyLink() {
    this->initializeModel();
}

OAIThirdPartyLink::~OAIThirdPartyLink() {}

void OAIThirdPartyLink::initializeModel() {

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_linking_token_isSet = false;
    m_linking_token_isValid = false;

    m_snippet_isSet = false;
    m_snippet_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIThirdPartyLink::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIThirdPartyLink::fromJsonObject(QJsonObject json) {

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_linking_token_isValid = ::OpenAPI::fromJsonValue(m_linking_token, json[QString("linkingToken")]);
    m_linking_token_isSet = !json[QString("linkingToken")].isNull() && m_linking_token_isValid;

    m_snippet_isValid = ::OpenAPI::fromJsonValue(m_snippet, json[QString("snippet")]);
    m_snippet_isSet = !json[QString("snippet")].isNull() && m_snippet_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIThirdPartyLink::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIThirdPartyLink::asJsonObject() const {
    QJsonObject obj;
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_linking_token_isSet) {
        obj.insert(QString("linkingToken"), ::OpenAPI::toJsonValue(m_linking_token));
    }
    if (m_snippet.isSet()) {
        obj.insert(QString("snippet"), ::OpenAPI::toJsonValue(m_snippet));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIThirdPartyLink::getEtag() const {
    return m_etag;
}
void OAIThirdPartyLink::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIThirdPartyLink::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIThirdPartyLink::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIThirdPartyLink::getKind() const {
    return m_kind;
}
void OAIThirdPartyLink::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIThirdPartyLink::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIThirdPartyLink::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIThirdPartyLink::getLinkingToken() const {
    return m_linking_token;
}
void OAIThirdPartyLink::setLinkingToken(const QString &linking_token) {
    m_linking_token = linking_token;
    m_linking_token_isSet = true;
}

bool OAIThirdPartyLink::is_linking_token_Set() const{
    return m_linking_token_isSet;
}

bool OAIThirdPartyLink::is_linking_token_Valid() const{
    return m_linking_token_isValid;
}

OAIThirdPartyLinkSnippet OAIThirdPartyLink::getSnippet() const {
    return m_snippet;
}
void OAIThirdPartyLink::setSnippet(const OAIThirdPartyLinkSnippet &snippet) {
    m_snippet = snippet;
    m_snippet_isSet = true;
}

bool OAIThirdPartyLink::is_snippet_Set() const{
    return m_snippet_isSet;
}

bool OAIThirdPartyLink::is_snippet_Valid() const{
    return m_snippet_isValid;
}

OAIThirdPartyLinkStatus OAIThirdPartyLink::getStatus() const {
    return m_status;
}
void OAIThirdPartyLink::setStatus(const OAIThirdPartyLinkStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIThirdPartyLink::is_status_Set() const{
    return m_status_isSet;
}

bool OAIThirdPartyLink::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIThirdPartyLink::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linking_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snippet.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIThirdPartyLink::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
