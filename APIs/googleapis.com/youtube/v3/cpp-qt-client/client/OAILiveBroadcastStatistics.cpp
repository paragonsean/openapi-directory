/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILiveBroadcastStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILiveBroadcastStatistics::OAILiveBroadcastStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILiveBroadcastStatistics::OAILiveBroadcastStatistics() {
    this->initializeModel();
}

OAILiveBroadcastStatistics::~OAILiveBroadcastStatistics() {}

void OAILiveBroadcastStatistics::initializeModel() {

    m_concurrent_viewers_isSet = false;
    m_concurrent_viewers_isValid = false;
}

void OAILiveBroadcastStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILiveBroadcastStatistics::fromJsonObject(QJsonObject json) {

    m_concurrent_viewers_isValid = ::OpenAPI::fromJsonValue(m_concurrent_viewers, json[QString("concurrentViewers")]);
    m_concurrent_viewers_isSet = !json[QString("concurrentViewers")].isNull() && m_concurrent_viewers_isValid;
}

QString OAILiveBroadcastStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILiveBroadcastStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_concurrent_viewers_isSet) {
        obj.insert(QString("concurrentViewers"), ::OpenAPI::toJsonValue(m_concurrent_viewers));
    }
    return obj;
}

QString OAILiveBroadcastStatistics::getConcurrentViewers() const {
    return m_concurrent_viewers;
}
void OAILiveBroadcastStatistics::setConcurrentViewers(const QString &concurrent_viewers) {
    m_concurrent_viewers = concurrent_viewers;
    m_concurrent_viewers_isSet = true;
}

bool OAILiveBroadcastStatistics::is_concurrent_viewers_Set() const{
    return m_concurrent_viewers_isSet;
}

bool OAILiveBroadcastStatistics::is_concurrent_viewers_Valid() const{
    return m_concurrent_viewers_isValid;
}

bool OAILiveBroadcastStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_concurrent_viewers_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILiveBroadcastStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
