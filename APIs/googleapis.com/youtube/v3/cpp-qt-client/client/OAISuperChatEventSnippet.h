/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISuperChatEventSnippet.h
 *
 * 
 */

#ifndef OAISuperChatEventSnippet_H
#define OAISuperChatEventSnippet_H

#include <QJsonObject>

#include "OAIChannelProfileDetails.h"
#include "OAISuperStickerMetadata.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISuperStickerMetadata;
class OAIChannelProfileDetails;

class OAISuperChatEventSnippet : public OAIObject {
public:
    OAISuperChatEventSnippet();
    OAISuperChatEventSnippet(QString json);
    ~OAISuperChatEventSnippet() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAmountMicros() const;
    void setAmountMicros(const QString &amount_micros);
    bool is_amount_micros_Set() const;
    bool is_amount_micros_Valid() const;

    QString getChannelId() const;
    void setChannelId(const QString &channel_id);
    bool is_channel_id_Set() const;
    bool is_channel_id_Valid() const;

    QString getCommentText() const;
    void setCommentText(const QString &comment_text);
    bool is_comment_text_Set() const;
    bool is_comment_text_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QString getCurrency() const;
    void setCurrency(const QString &currency);
    bool is_currency_Set() const;
    bool is_currency_Valid() const;

    QString getDisplayString() const;
    void setDisplayString(const QString &display_string);
    bool is_display_string_Set() const;
    bool is_display_string_Valid() const;

    bool isIsSuperStickerEvent() const;
    void setIsSuperStickerEvent(const bool &is_super_sticker_event);
    bool is_is_super_sticker_event_Set() const;
    bool is_is_super_sticker_event_Valid() const;

    qint32 getMessageType() const;
    void setMessageType(const qint32 &message_type);
    bool is_message_type_Set() const;
    bool is_message_type_Valid() const;

    OAISuperStickerMetadata getSuperStickerMetadata() const;
    void setSuperStickerMetadata(const OAISuperStickerMetadata &super_sticker_metadata);
    bool is_super_sticker_metadata_Set() const;
    bool is_super_sticker_metadata_Valid() const;

    OAIChannelProfileDetails getSupporterDetails() const;
    void setSupporterDetails(const OAIChannelProfileDetails &supporter_details);
    bool is_supporter_details_Set() const;
    bool is_supporter_details_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_amount_micros;
    bool m_amount_micros_isSet;
    bool m_amount_micros_isValid;

    QString m_channel_id;
    bool m_channel_id_isSet;
    bool m_channel_id_isValid;

    QString m_comment_text;
    bool m_comment_text_isSet;
    bool m_comment_text_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QString m_currency;
    bool m_currency_isSet;
    bool m_currency_isValid;

    QString m_display_string;
    bool m_display_string_isSet;
    bool m_display_string_isValid;

    bool m_is_super_sticker_event;
    bool m_is_super_sticker_event_isSet;
    bool m_is_super_sticker_event_isValid;

    qint32 m_message_type;
    bool m_message_type_isSet;
    bool m_message_type_isValid;

    OAISuperStickerMetadata m_super_sticker_metadata;
    bool m_super_sticker_metadata_isSet;
    bool m_super_sticker_metadata_isValid;

    OAIChannelProfileDetails m_supporter_details;
    bool m_supporter_details_isSet;
    bool m_supporter_details_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISuperChatEventSnippet)

#endif // OAISuperChatEventSnippet_H
