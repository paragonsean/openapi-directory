/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVideoLiveStreamingDetails.h
 *
 * Details about the live streaming metadata.
 */

#ifndef OAIVideoLiveStreamingDetails_H
#define OAIVideoLiveStreamingDetails_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIVideoLiveStreamingDetails : public OAIObject {
public:
    OAIVideoLiveStreamingDetails();
    OAIVideoLiveStreamingDetails(QString json);
    ~OAIVideoLiveStreamingDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getActiveLiveChatId() const;
    void setActiveLiveChatId(const QString &active_live_chat_id);
    bool is_active_live_chat_id_Set() const;
    bool is_active_live_chat_id_Valid() const;

    QDateTime getActualEndTime() const;
    void setActualEndTime(const QDateTime &actual_end_time);
    bool is_actual_end_time_Set() const;
    bool is_actual_end_time_Valid() const;

    QDateTime getActualStartTime() const;
    void setActualStartTime(const QDateTime &actual_start_time);
    bool is_actual_start_time_Set() const;
    bool is_actual_start_time_Valid() const;

    QString getConcurrentViewers() const;
    void setConcurrentViewers(const QString &concurrent_viewers);
    bool is_concurrent_viewers_Set() const;
    bool is_concurrent_viewers_Valid() const;

    QDateTime getScheduledEndTime() const;
    void setScheduledEndTime(const QDateTime &scheduled_end_time);
    bool is_scheduled_end_time_Set() const;
    bool is_scheduled_end_time_Valid() const;

    QDateTime getScheduledStartTime() const;
    void setScheduledStartTime(const QDateTime &scheduled_start_time);
    bool is_scheduled_start_time_Set() const;
    bool is_scheduled_start_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_active_live_chat_id;
    bool m_active_live_chat_id_isSet;
    bool m_active_live_chat_id_isValid;

    QDateTime m_actual_end_time;
    bool m_actual_end_time_isSet;
    bool m_actual_end_time_isValid;

    QDateTime m_actual_start_time;
    bool m_actual_start_time_isSet;
    bool m_actual_start_time_isValid;

    QString m_concurrent_viewers;
    bool m_concurrent_viewers_isSet;
    bool m_concurrent_viewers_isValid;

    QDateTime m_scheduled_end_time;
    bool m_scheduled_end_time_isSet;
    bool m_scheduled_end_time_isValid;

    QDateTime m_scheduled_start_time;
    bool m_scheduled_start_time_isSet;
    bool m_scheduled_start_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVideoLiveStreamingDetails)

#endif // OAIVideoLiveStreamingDetails_H
