/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelBannerResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelBannerResource::OAIChannelBannerResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelBannerResource::OAIChannelBannerResource() {
    this->initializeModel();
}

OAIChannelBannerResource::~OAIChannelBannerResource() {}

void OAIChannelBannerResource::initializeModel() {

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIChannelBannerResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelBannerResource::fromJsonObject(QJsonObject json) {

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIChannelBannerResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelBannerResource::asJsonObject() const {
    QJsonObject obj;
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIChannelBannerResource::getEtag() const {
    return m_etag;
}
void OAIChannelBannerResource::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIChannelBannerResource::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIChannelBannerResource::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIChannelBannerResource::getKind() const {
    return m_kind;
}
void OAIChannelBannerResource::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIChannelBannerResource::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIChannelBannerResource::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIChannelBannerResource::getUrl() const {
    return m_url;
}
void OAIChannelBannerResource::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIChannelBannerResource::is_url_Set() const{
    return m_url_isSet;
}

bool OAIChannelBannerResource::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIChannelBannerResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelBannerResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
