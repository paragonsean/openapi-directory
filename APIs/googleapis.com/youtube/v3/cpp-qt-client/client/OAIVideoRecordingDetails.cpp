/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoRecordingDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoRecordingDetails::OAIVideoRecordingDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoRecordingDetails::OAIVideoRecordingDetails() {
    this->initializeModel();
}

OAIVideoRecordingDetails::~OAIVideoRecordingDetails() {}

void OAIVideoRecordingDetails::initializeModel() {

    m_location_isSet = false;
    m_location_isValid = false;

    m_location_description_isSet = false;
    m_location_description_isValid = false;

    m_recording_date_isSet = false;
    m_recording_date_isValid = false;
}

void OAIVideoRecordingDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoRecordingDetails::fromJsonObject(QJsonObject json) {

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_location_description_isValid = ::OpenAPI::fromJsonValue(m_location_description, json[QString("locationDescription")]);
    m_location_description_isSet = !json[QString("locationDescription")].isNull() && m_location_description_isValid;

    m_recording_date_isValid = ::OpenAPI::fromJsonValue(m_recording_date, json[QString("recordingDate")]);
    m_recording_date_isSet = !json[QString("recordingDate")].isNull() && m_recording_date_isValid;
}

QString OAIVideoRecordingDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoRecordingDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_location_description_isSet) {
        obj.insert(QString("locationDescription"), ::OpenAPI::toJsonValue(m_location_description));
    }
    if (m_recording_date_isSet) {
        obj.insert(QString("recordingDate"), ::OpenAPI::toJsonValue(m_recording_date));
    }
    return obj;
}

OAIGeoPoint OAIVideoRecordingDetails::getLocation() const {
    return m_location;
}
void OAIVideoRecordingDetails::setLocation(const OAIGeoPoint &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIVideoRecordingDetails::is_location_Set() const{
    return m_location_isSet;
}

bool OAIVideoRecordingDetails::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIVideoRecordingDetails::getLocationDescription() const {
    return m_location_description;
}
void OAIVideoRecordingDetails::setLocationDescription(const QString &location_description) {
    m_location_description = location_description;
    m_location_description_isSet = true;
}

bool OAIVideoRecordingDetails::is_location_description_Set() const{
    return m_location_description_isSet;
}

bool OAIVideoRecordingDetails::is_location_description_Valid() const{
    return m_location_description_isValid;
}

QDateTime OAIVideoRecordingDetails::getRecordingDate() const {
    return m_recording_date;
}
void OAIVideoRecordingDetails::setRecordingDate(const QDateTime &recording_date) {
    m_recording_date = recording_date;
    m_recording_date_isSet = true;
}

bool OAIVideoRecordingDetails::is_recording_date_Set() const{
    return m_recording_date_isSet;
}

bool OAIVideoRecordingDetails::is_recording_date_Valid() const{
    return m_recording_date_isValid;
}

bool OAIVideoRecordingDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recording_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoRecordingDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
