/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMembershipsLevelSnippet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMembershipsLevelSnippet::OAIMembershipsLevelSnippet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMembershipsLevelSnippet::OAIMembershipsLevelSnippet() {
    this->initializeModel();
}

OAIMembershipsLevelSnippet::~OAIMembershipsLevelSnippet() {}

void OAIMembershipsLevelSnippet::initializeModel() {

    m_creator_channel_id_isSet = false;
    m_creator_channel_id_isValid = false;

    m_level_details_isSet = false;
    m_level_details_isValid = false;
}

void OAIMembershipsLevelSnippet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMembershipsLevelSnippet::fromJsonObject(QJsonObject json) {

    m_creator_channel_id_isValid = ::OpenAPI::fromJsonValue(m_creator_channel_id, json[QString("creatorChannelId")]);
    m_creator_channel_id_isSet = !json[QString("creatorChannelId")].isNull() && m_creator_channel_id_isValid;

    m_level_details_isValid = ::OpenAPI::fromJsonValue(m_level_details, json[QString("levelDetails")]);
    m_level_details_isSet = !json[QString("levelDetails")].isNull() && m_level_details_isValid;
}

QString OAIMembershipsLevelSnippet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMembershipsLevelSnippet::asJsonObject() const {
    QJsonObject obj;
    if (m_creator_channel_id_isSet) {
        obj.insert(QString("creatorChannelId"), ::OpenAPI::toJsonValue(m_creator_channel_id));
    }
    if (m_level_details.isSet()) {
        obj.insert(QString("levelDetails"), ::OpenAPI::toJsonValue(m_level_details));
    }
    return obj;
}

QString OAIMembershipsLevelSnippet::getCreatorChannelId() const {
    return m_creator_channel_id;
}
void OAIMembershipsLevelSnippet::setCreatorChannelId(const QString &creator_channel_id) {
    m_creator_channel_id = creator_channel_id;
    m_creator_channel_id_isSet = true;
}

bool OAIMembershipsLevelSnippet::is_creator_channel_id_Set() const{
    return m_creator_channel_id_isSet;
}

bool OAIMembershipsLevelSnippet::is_creator_channel_id_Valid() const{
    return m_creator_channel_id_isValid;
}

OAILevelDetails OAIMembershipsLevelSnippet::getLevelDetails() const {
    return m_level_details;
}
void OAIMembershipsLevelSnippet::setLevelDetails(const OAILevelDetails &level_details) {
    m_level_details = level_details;
    m_level_details_isSet = true;
}

bool OAIMembershipsLevelSnippet::is_level_details_Set() const{
    return m_level_details_isSet;
}

bool OAIMembershipsLevelSnippet::is_level_details_Valid() const{
    return m_level_details_isValid;
}

bool OAIMembershipsLevelSnippet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creator_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMembershipsLevelSnippet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
