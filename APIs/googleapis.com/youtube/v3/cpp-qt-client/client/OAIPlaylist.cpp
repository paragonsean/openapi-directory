/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlaylist.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlaylist::OAIPlaylist(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlaylist::OAIPlaylist() {
    this->initializeModel();
}

OAIPlaylist::~OAIPlaylist() {}

void OAIPlaylist::initializeModel() {

    m_content_details_isSet = false;
    m_content_details_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_localizations_isSet = false;
    m_localizations_isValid = false;

    m_player_isSet = false;
    m_player_isValid = false;

    m_snippet_isSet = false;
    m_snippet_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIPlaylist::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlaylist::fromJsonObject(QJsonObject json) {

    m_content_details_isValid = ::OpenAPI::fromJsonValue(m_content_details, json[QString("contentDetails")]);
    m_content_details_isSet = !json[QString("contentDetails")].isNull() && m_content_details_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_localizations_isValid = ::OpenAPI::fromJsonValue(m_localizations, json[QString("localizations")]);
    m_localizations_isSet = !json[QString("localizations")].isNull() && m_localizations_isValid;

    m_player_isValid = ::OpenAPI::fromJsonValue(m_player, json[QString("player")]);
    m_player_isSet = !json[QString("player")].isNull() && m_player_isValid;

    m_snippet_isValid = ::OpenAPI::fromJsonValue(m_snippet, json[QString("snippet")]);
    m_snippet_isSet = !json[QString("snippet")].isNull() && m_snippet_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIPlaylist::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlaylist::asJsonObject() const {
    QJsonObject obj;
    if (m_content_details.isSet()) {
        obj.insert(QString("contentDetails"), ::OpenAPI::toJsonValue(m_content_details));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_localizations.size() > 0) {
        obj.insert(QString("localizations"), ::OpenAPI::toJsonValue(m_localizations));
    }
    if (m_player.isSet()) {
        obj.insert(QString("player"), ::OpenAPI::toJsonValue(m_player));
    }
    if (m_snippet.isSet()) {
        obj.insert(QString("snippet"), ::OpenAPI::toJsonValue(m_snippet));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIPlaylistContentDetails OAIPlaylist::getContentDetails() const {
    return m_content_details;
}
void OAIPlaylist::setContentDetails(const OAIPlaylistContentDetails &content_details) {
    m_content_details = content_details;
    m_content_details_isSet = true;
}

bool OAIPlaylist::is_content_details_Set() const{
    return m_content_details_isSet;
}

bool OAIPlaylist::is_content_details_Valid() const{
    return m_content_details_isValid;
}

QString OAIPlaylist::getEtag() const {
    return m_etag;
}
void OAIPlaylist::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIPlaylist::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIPlaylist::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIPlaylist::getId() const {
    return m_id;
}
void OAIPlaylist::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPlaylist::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPlaylist::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPlaylist::getKind() const {
    return m_kind;
}
void OAIPlaylist::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIPlaylist::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIPlaylist::is_kind_Valid() const{
    return m_kind_isValid;
}

QMap<QString, OAIPlaylistLocalization> OAIPlaylist::getLocalizations() const {
    return m_localizations;
}
void OAIPlaylist::setLocalizations(const QMap<QString, OAIPlaylistLocalization> &localizations) {
    m_localizations = localizations;
    m_localizations_isSet = true;
}

bool OAIPlaylist::is_localizations_Set() const{
    return m_localizations_isSet;
}

bool OAIPlaylist::is_localizations_Valid() const{
    return m_localizations_isValid;
}

OAIPlaylistPlayer OAIPlaylist::getPlayer() const {
    return m_player;
}
void OAIPlaylist::setPlayer(const OAIPlaylistPlayer &player) {
    m_player = player;
    m_player_isSet = true;
}

bool OAIPlaylist::is_player_Set() const{
    return m_player_isSet;
}

bool OAIPlaylist::is_player_Valid() const{
    return m_player_isValid;
}

OAIPlaylistSnippet OAIPlaylist::getSnippet() const {
    return m_snippet;
}
void OAIPlaylist::setSnippet(const OAIPlaylistSnippet &snippet) {
    m_snippet = snippet;
    m_snippet_isSet = true;
}

bool OAIPlaylist::is_snippet_Set() const{
    return m_snippet_isSet;
}

bool OAIPlaylist::is_snippet_Valid() const{
    return m_snippet_isValid;
}

OAIPlaylistStatus OAIPlaylist::getStatus() const {
    return m_status;
}
void OAIPlaylist::setStatus(const OAIPlaylistStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPlaylist::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPlaylist::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIPlaylist::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_localizations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_player.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_snippet.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlaylist::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
