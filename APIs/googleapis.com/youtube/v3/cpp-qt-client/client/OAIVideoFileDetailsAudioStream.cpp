/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoFileDetailsAudioStream.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoFileDetailsAudioStream::OAIVideoFileDetailsAudioStream(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoFileDetailsAudioStream::OAIVideoFileDetailsAudioStream() {
    this->initializeModel();
}

OAIVideoFileDetailsAudioStream::~OAIVideoFileDetailsAudioStream() {}

void OAIVideoFileDetailsAudioStream::initializeModel() {

    m_bitrate_bps_isSet = false;
    m_bitrate_bps_isValid = false;

    m_channel_count_isSet = false;
    m_channel_count_isValid = false;

    m_codec_isSet = false;
    m_codec_isValid = false;

    m_vendor_isSet = false;
    m_vendor_isValid = false;
}

void OAIVideoFileDetailsAudioStream::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoFileDetailsAudioStream::fromJsonObject(QJsonObject json) {

    m_bitrate_bps_isValid = ::OpenAPI::fromJsonValue(m_bitrate_bps, json[QString("bitrateBps")]);
    m_bitrate_bps_isSet = !json[QString("bitrateBps")].isNull() && m_bitrate_bps_isValid;

    m_channel_count_isValid = ::OpenAPI::fromJsonValue(m_channel_count, json[QString("channelCount")]);
    m_channel_count_isSet = !json[QString("channelCount")].isNull() && m_channel_count_isValid;

    m_codec_isValid = ::OpenAPI::fromJsonValue(m_codec, json[QString("codec")]);
    m_codec_isSet = !json[QString("codec")].isNull() && m_codec_isValid;

    m_vendor_isValid = ::OpenAPI::fromJsonValue(m_vendor, json[QString("vendor")]);
    m_vendor_isSet = !json[QString("vendor")].isNull() && m_vendor_isValid;
}

QString OAIVideoFileDetailsAudioStream::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoFileDetailsAudioStream::asJsonObject() const {
    QJsonObject obj;
    if (m_bitrate_bps_isSet) {
        obj.insert(QString("bitrateBps"), ::OpenAPI::toJsonValue(m_bitrate_bps));
    }
    if (m_channel_count_isSet) {
        obj.insert(QString("channelCount"), ::OpenAPI::toJsonValue(m_channel_count));
    }
    if (m_codec_isSet) {
        obj.insert(QString("codec"), ::OpenAPI::toJsonValue(m_codec));
    }
    if (m_vendor_isSet) {
        obj.insert(QString("vendor"), ::OpenAPI::toJsonValue(m_vendor));
    }
    return obj;
}

QString OAIVideoFileDetailsAudioStream::getBitrateBps() const {
    return m_bitrate_bps;
}
void OAIVideoFileDetailsAudioStream::setBitrateBps(const QString &bitrate_bps) {
    m_bitrate_bps = bitrate_bps;
    m_bitrate_bps_isSet = true;
}

bool OAIVideoFileDetailsAudioStream::is_bitrate_bps_Set() const{
    return m_bitrate_bps_isSet;
}

bool OAIVideoFileDetailsAudioStream::is_bitrate_bps_Valid() const{
    return m_bitrate_bps_isValid;
}

qint32 OAIVideoFileDetailsAudioStream::getChannelCount() const {
    return m_channel_count;
}
void OAIVideoFileDetailsAudioStream::setChannelCount(const qint32 &channel_count) {
    m_channel_count = channel_count;
    m_channel_count_isSet = true;
}

bool OAIVideoFileDetailsAudioStream::is_channel_count_Set() const{
    return m_channel_count_isSet;
}

bool OAIVideoFileDetailsAudioStream::is_channel_count_Valid() const{
    return m_channel_count_isValid;
}

QString OAIVideoFileDetailsAudioStream::getCodec() const {
    return m_codec;
}
void OAIVideoFileDetailsAudioStream::setCodec(const QString &codec) {
    m_codec = codec;
    m_codec_isSet = true;
}

bool OAIVideoFileDetailsAudioStream::is_codec_Set() const{
    return m_codec_isSet;
}

bool OAIVideoFileDetailsAudioStream::is_codec_Valid() const{
    return m_codec_isValid;
}

QString OAIVideoFileDetailsAudioStream::getVendor() const {
    return m_vendor;
}
void OAIVideoFileDetailsAudioStream::setVendor(const QString &vendor) {
    m_vendor = vendor;
    m_vendor_isSet = true;
}

bool OAIVideoFileDetailsAudioStream::is_vendor_Set() const{
    return m_vendor_isSet;
}

bool OAIVideoFileDetailsAudioStream::is_vendor_Valid() const{
    return m_vendor_isValid;
}

bool OAIVideoFileDetailsAudioStream::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bitrate_bps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_codec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoFileDetailsAudioStream::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
