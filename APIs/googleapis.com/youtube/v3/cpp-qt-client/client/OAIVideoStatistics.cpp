/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoStatistics::OAIVideoStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoStatistics::OAIVideoStatistics() {
    this->initializeModel();
}

OAIVideoStatistics::~OAIVideoStatistics() {}

void OAIVideoStatistics::initializeModel() {

    m_comment_count_isSet = false;
    m_comment_count_isValid = false;

    m_dislike_count_isSet = false;
    m_dislike_count_isValid = false;

    m_favorite_count_isSet = false;
    m_favorite_count_isValid = false;

    m_like_count_isSet = false;
    m_like_count_isValid = false;

    m_view_count_isSet = false;
    m_view_count_isValid = false;
}

void OAIVideoStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoStatistics::fromJsonObject(QJsonObject json) {

    m_comment_count_isValid = ::OpenAPI::fromJsonValue(m_comment_count, json[QString("commentCount")]);
    m_comment_count_isSet = !json[QString("commentCount")].isNull() && m_comment_count_isValid;

    m_dislike_count_isValid = ::OpenAPI::fromJsonValue(m_dislike_count, json[QString("dislikeCount")]);
    m_dislike_count_isSet = !json[QString("dislikeCount")].isNull() && m_dislike_count_isValid;

    m_favorite_count_isValid = ::OpenAPI::fromJsonValue(m_favorite_count, json[QString("favoriteCount")]);
    m_favorite_count_isSet = !json[QString("favoriteCount")].isNull() && m_favorite_count_isValid;

    m_like_count_isValid = ::OpenAPI::fromJsonValue(m_like_count, json[QString("likeCount")]);
    m_like_count_isSet = !json[QString("likeCount")].isNull() && m_like_count_isValid;

    m_view_count_isValid = ::OpenAPI::fromJsonValue(m_view_count, json[QString("viewCount")]);
    m_view_count_isSet = !json[QString("viewCount")].isNull() && m_view_count_isValid;
}

QString OAIVideoStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_comment_count_isSet) {
        obj.insert(QString("commentCount"), ::OpenAPI::toJsonValue(m_comment_count));
    }
    if (m_dislike_count_isSet) {
        obj.insert(QString("dislikeCount"), ::OpenAPI::toJsonValue(m_dislike_count));
    }
    if (m_favorite_count_isSet) {
        obj.insert(QString("favoriteCount"), ::OpenAPI::toJsonValue(m_favorite_count));
    }
    if (m_like_count_isSet) {
        obj.insert(QString("likeCount"), ::OpenAPI::toJsonValue(m_like_count));
    }
    if (m_view_count_isSet) {
        obj.insert(QString("viewCount"), ::OpenAPI::toJsonValue(m_view_count));
    }
    return obj;
}

QString OAIVideoStatistics::getCommentCount() const {
    return m_comment_count;
}
void OAIVideoStatistics::setCommentCount(const QString &comment_count) {
    m_comment_count = comment_count;
    m_comment_count_isSet = true;
}

bool OAIVideoStatistics::is_comment_count_Set() const{
    return m_comment_count_isSet;
}

bool OAIVideoStatistics::is_comment_count_Valid() const{
    return m_comment_count_isValid;
}

QString OAIVideoStatistics::getDislikeCount() const {
    return m_dislike_count;
}
void OAIVideoStatistics::setDislikeCount(const QString &dislike_count) {
    m_dislike_count = dislike_count;
    m_dislike_count_isSet = true;
}

bool OAIVideoStatistics::is_dislike_count_Set() const{
    return m_dislike_count_isSet;
}

bool OAIVideoStatistics::is_dislike_count_Valid() const{
    return m_dislike_count_isValid;
}

QString OAIVideoStatistics::getFavoriteCount() const {
    return m_favorite_count;
}
void OAIVideoStatistics::setFavoriteCount(const QString &favorite_count) {
    m_favorite_count = favorite_count;
    m_favorite_count_isSet = true;
}

bool OAIVideoStatistics::is_favorite_count_Set() const{
    return m_favorite_count_isSet;
}

bool OAIVideoStatistics::is_favorite_count_Valid() const{
    return m_favorite_count_isValid;
}

QString OAIVideoStatistics::getLikeCount() const {
    return m_like_count;
}
void OAIVideoStatistics::setLikeCount(const QString &like_count) {
    m_like_count = like_count;
    m_like_count_isSet = true;
}

bool OAIVideoStatistics::is_like_count_Set() const{
    return m_like_count_isSet;
}

bool OAIVideoStatistics::is_like_count_Valid() const{
    return m_like_count_isValid;
}

QString OAIVideoStatistics::getViewCount() const {
    return m_view_count;
}
void OAIVideoStatistics::setViewCount(const QString &view_count) {
    m_view_count = view_count;
    m_view_count_isSet = true;
}

bool OAIVideoStatistics::is_view_count_Set() const{
    return m_view_count_isSet;
}

bool OAIVideoStatistics::is_view_count_Valid() const{
    return m_view_count_isValid;
}

bool OAIVideoStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comment_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dislike_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_favorite_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_like_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
