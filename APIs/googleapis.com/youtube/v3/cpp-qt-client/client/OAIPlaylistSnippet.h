/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPlaylistSnippet.h
 *
 * Basic details about a playlist, including title, description and thumbnails.
 */

#ifndef OAIPlaylistSnippet_H
#define OAIPlaylistSnippet_H

#include <QJsonObject>

#include "OAIPlaylistLocalization.h"
#include "OAIThumbnailDetails.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPlaylistLocalization;
class OAIThumbnailDetails;

class OAIPlaylistSnippet : public OAIObject {
public:
    OAIPlaylistSnippet();
    OAIPlaylistSnippet(QString json);
    ~OAIPlaylistSnippet() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getChannelId() const;
    void setChannelId(const QString &channel_id);
    bool is_channel_id_Set() const;
    bool is_channel_id_Valid() const;

    QString getChannelTitle() const;
    void setChannelTitle(const QString &channel_title);
    bool is_channel_title_Set() const;
    bool is_channel_title_Valid() const;

    QString getDefaultLanguage() const;
    void setDefaultLanguage(const QString &default_language);
    bool is_default_language_Set() const;
    bool is_default_language_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAIPlaylistLocalization getLocalized() const;
    void setLocalized(const OAIPlaylistLocalization &localized);
    bool is_localized_Set() const;
    bool is_localized_Valid() const;

    QDateTime getPublishedAt() const;
    void setPublishedAt(const QDateTime &published_at);
    bool is_published_at_Set() const;
    bool is_published_at_Valid() const;

    Q_DECL_DEPRECATED QList<QString> getTags() const;
    Q_DECL_DEPRECATED void setTags(const QList<QString> &tags);
    Q_DECL_DEPRECATED bool is_tags_Set() const;
    Q_DECL_DEPRECATED bool is_tags_Valid() const;

    QString getThumbnailVideoId() const;
    void setThumbnailVideoId(const QString &thumbnail_video_id);
    bool is_thumbnail_video_id_Set() const;
    bool is_thumbnail_video_id_Valid() const;

    OAIThumbnailDetails getThumbnails() const;
    void setThumbnails(const OAIThumbnailDetails &thumbnails);
    bool is_thumbnails_Set() const;
    bool is_thumbnails_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_channel_id;
    bool m_channel_id_isSet;
    bool m_channel_id_isValid;

    QString m_channel_title;
    bool m_channel_title_isSet;
    bool m_channel_title_isValid;

    QString m_default_language;
    bool m_default_language_isSet;
    bool m_default_language_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAIPlaylistLocalization m_localized;
    bool m_localized_isSet;
    bool m_localized_isValid;

    QDateTime m_published_at;
    bool m_published_at_isSet;
    bool m_published_at_isValid;

    QList<QString> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QString m_thumbnail_video_id;
    bool m_thumbnail_video_id_isSet;
    bool m_thumbnail_video_id_isValid;

    OAIThumbnailDetails m_thumbnails;
    bool m_thumbnails_isSet;
    bool m_thumbnails_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPlaylistSnippet)

#endif // OAIPlaylistSnippet_H
