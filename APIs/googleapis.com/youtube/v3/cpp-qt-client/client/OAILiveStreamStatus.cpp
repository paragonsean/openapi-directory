/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILiveStreamStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILiveStreamStatus::OAILiveStreamStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILiveStreamStatus::OAILiveStreamStatus() {
    this->initializeModel();
}

OAILiveStreamStatus::~OAILiveStreamStatus() {}

void OAILiveStreamStatus::initializeModel() {

    m_health_status_isSet = false;
    m_health_status_isValid = false;

    m_stream_status_isSet = false;
    m_stream_status_isValid = false;
}

void OAILiveStreamStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILiveStreamStatus::fromJsonObject(QJsonObject json) {

    m_health_status_isValid = ::OpenAPI::fromJsonValue(m_health_status, json[QString("healthStatus")]);
    m_health_status_isSet = !json[QString("healthStatus")].isNull() && m_health_status_isValid;

    m_stream_status_isValid = ::OpenAPI::fromJsonValue(m_stream_status, json[QString("streamStatus")]);
    m_stream_status_isSet = !json[QString("streamStatus")].isNull() && m_stream_status_isValid;
}

QString OAILiveStreamStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILiveStreamStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_health_status.isSet()) {
        obj.insert(QString("healthStatus"), ::OpenAPI::toJsonValue(m_health_status));
    }
    if (m_stream_status_isSet) {
        obj.insert(QString("streamStatus"), ::OpenAPI::toJsonValue(m_stream_status));
    }
    return obj;
}

OAILiveStreamHealthStatus OAILiveStreamStatus::getHealthStatus() const {
    return m_health_status;
}
void OAILiveStreamStatus::setHealthStatus(const OAILiveStreamHealthStatus &health_status) {
    m_health_status = health_status;
    m_health_status_isSet = true;
}

bool OAILiveStreamStatus::is_health_status_Set() const{
    return m_health_status_isSet;
}

bool OAILiveStreamStatus::is_health_status_Valid() const{
    return m_health_status_isValid;
}

QString OAILiveStreamStatus::getStreamStatus() const {
    return m_stream_status;
}
void OAILiveStreamStatus::setStreamStatus(const QString &stream_status) {
    m_stream_status = stream_status;
    m_stream_status_isSet = true;
}

bool OAILiveStreamStatus::is_stream_status_Set() const{
    return m_stream_status_isSet;
}

bool OAILiveStreamStatus::is_stream_status_Valid() const{
    return m_stream_status_isValid;
}

bool OAILiveStreamStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_health_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILiveStreamStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
