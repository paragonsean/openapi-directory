/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoFileDetailsVideoStream.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoFileDetailsVideoStream::OAIVideoFileDetailsVideoStream(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoFileDetailsVideoStream::OAIVideoFileDetailsVideoStream() {
    this->initializeModel();
}

OAIVideoFileDetailsVideoStream::~OAIVideoFileDetailsVideoStream() {}

void OAIVideoFileDetailsVideoStream::initializeModel() {

    m_aspect_ratio_isSet = false;
    m_aspect_ratio_isValid = false;

    m_bitrate_bps_isSet = false;
    m_bitrate_bps_isValid = false;

    m_codec_isSet = false;
    m_codec_isValid = false;

    m_frame_rate_fps_isSet = false;
    m_frame_rate_fps_isValid = false;

    m_height_pixels_isSet = false;
    m_height_pixels_isValid = false;

    m_rotation_isSet = false;
    m_rotation_isValid = false;

    m_vendor_isSet = false;
    m_vendor_isValid = false;

    m_width_pixels_isSet = false;
    m_width_pixels_isValid = false;
}

void OAIVideoFileDetailsVideoStream::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoFileDetailsVideoStream::fromJsonObject(QJsonObject json) {

    m_aspect_ratio_isValid = ::OpenAPI::fromJsonValue(m_aspect_ratio, json[QString("aspectRatio")]);
    m_aspect_ratio_isSet = !json[QString("aspectRatio")].isNull() && m_aspect_ratio_isValid;

    m_bitrate_bps_isValid = ::OpenAPI::fromJsonValue(m_bitrate_bps, json[QString("bitrateBps")]);
    m_bitrate_bps_isSet = !json[QString("bitrateBps")].isNull() && m_bitrate_bps_isValid;

    m_codec_isValid = ::OpenAPI::fromJsonValue(m_codec, json[QString("codec")]);
    m_codec_isSet = !json[QString("codec")].isNull() && m_codec_isValid;

    m_frame_rate_fps_isValid = ::OpenAPI::fromJsonValue(m_frame_rate_fps, json[QString("frameRateFps")]);
    m_frame_rate_fps_isSet = !json[QString("frameRateFps")].isNull() && m_frame_rate_fps_isValid;

    m_height_pixels_isValid = ::OpenAPI::fromJsonValue(m_height_pixels, json[QString("heightPixels")]);
    m_height_pixels_isSet = !json[QString("heightPixels")].isNull() && m_height_pixels_isValid;

    m_rotation_isValid = ::OpenAPI::fromJsonValue(m_rotation, json[QString("rotation")]);
    m_rotation_isSet = !json[QString("rotation")].isNull() && m_rotation_isValid;

    m_vendor_isValid = ::OpenAPI::fromJsonValue(m_vendor, json[QString("vendor")]);
    m_vendor_isSet = !json[QString("vendor")].isNull() && m_vendor_isValid;

    m_width_pixels_isValid = ::OpenAPI::fromJsonValue(m_width_pixels, json[QString("widthPixels")]);
    m_width_pixels_isSet = !json[QString("widthPixels")].isNull() && m_width_pixels_isValid;
}

QString OAIVideoFileDetailsVideoStream::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoFileDetailsVideoStream::asJsonObject() const {
    QJsonObject obj;
    if (m_aspect_ratio_isSet) {
        obj.insert(QString("aspectRatio"), ::OpenAPI::toJsonValue(m_aspect_ratio));
    }
    if (m_bitrate_bps_isSet) {
        obj.insert(QString("bitrateBps"), ::OpenAPI::toJsonValue(m_bitrate_bps));
    }
    if (m_codec_isSet) {
        obj.insert(QString("codec"), ::OpenAPI::toJsonValue(m_codec));
    }
    if (m_frame_rate_fps_isSet) {
        obj.insert(QString("frameRateFps"), ::OpenAPI::toJsonValue(m_frame_rate_fps));
    }
    if (m_height_pixels_isSet) {
        obj.insert(QString("heightPixels"), ::OpenAPI::toJsonValue(m_height_pixels));
    }
    if (m_rotation_isSet) {
        obj.insert(QString("rotation"), ::OpenAPI::toJsonValue(m_rotation));
    }
    if (m_vendor_isSet) {
        obj.insert(QString("vendor"), ::OpenAPI::toJsonValue(m_vendor));
    }
    if (m_width_pixels_isSet) {
        obj.insert(QString("widthPixels"), ::OpenAPI::toJsonValue(m_width_pixels));
    }
    return obj;
}

double OAIVideoFileDetailsVideoStream::getAspectRatio() const {
    return m_aspect_ratio;
}
void OAIVideoFileDetailsVideoStream::setAspectRatio(const double &aspect_ratio) {
    m_aspect_ratio = aspect_ratio;
    m_aspect_ratio_isSet = true;
}

bool OAIVideoFileDetailsVideoStream::is_aspect_ratio_Set() const{
    return m_aspect_ratio_isSet;
}

bool OAIVideoFileDetailsVideoStream::is_aspect_ratio_Valid() const{
    return m_aspect_ratio_isValid;
}

QString OAIVideoFileDetailsVideoStream::getBitrateBps() const {
    return m_bitrate_bps;
}
void OAIVideoFileDetailsVideoStream::setBitrateBps(const QString &bitrate_bps) {
    m_bitrate_bps = bitrate_bps;
    m_bitrate_bps_isSet = true;
}

bool OAIVideoFileDetailsVideoStream::is_bitrate_bps_Set() const{
    return m_bitrate_bps_isSet;
}

bool OAIVideoFileDetailsVideoStream::is_bitrate_bps_Valid() const{
    return m_bitrate_bps_isValid;
}

QString OAIVideoFileDetailsVideoStream::getCodec() const {
    return m_codec;
}
void OAIVideoFileDetailsVideoStream::setCodec(const QString &codec) {
    m_codec = codec;
    m_codec_isSet = true;
}

bool OAIVideoFileDetailsVideoStream::is_codec_Set() const{
    return m_codec_isSet;
}

bool OAIVideoFileDetailsVideoStream::is_codec_Valid() const{
    return m_codec_isValid;
}

double OAIVideoFileDetailsVideoStream::getFrameRateFps() const {
    return m_frame_rate_fps;
}
void OAIVideoFileDetailsVideoStream::setFrameRateFps(const double &frame_rate_fps) {
    m_frame_rate_fps = frame_rate_fps;
    m_frame_rate_fps_isSet = true;
}

bool OAIVideoFileDetailsVideoStream::is_frame_rate_fps_Set() const{
    return m_frame_rate_fps_isSet;
}

bool OAIVideoFileDetailsVideoStream::is_frame_rate_fps_Valid() const{
    return m_frame_rate_fps_isValid;
}

qint32 OAIVideoFileDetailsVideoStream::getHeightPixels() const {
    return m_height_pixels;
}
void OAIVideoFileDetailsVideoStream::setHeightPixels(const qint32 &height_pixels) {
    m_height_pixels = height_pixels;
    m_height_pixels_isSet = true;
}

bool OAIVideoFileDetailsVideoStream::is_height_pixels_Set() const{
    return m_height_pixels_isSet;
}

bool OAIVideoFileDetailsVideoStream::is_height_pixels_Valid() const{
    return m_height_pixels_isValid;
}

QString OAIVideoFileDetailsVideoStream::getRotation() const {
    return m_rotation;
}
void OAIVideoFileDetailsVideoStream::setRotation(const QString &rotation) {
    m_rotation = rotation;
    m_rotation_isSet = true;
}

bool OAIVideoFileDetailsVideoStream::is_rotation_Set() const{
    return m_rotation_isSet;
}

bool OAIVideoFileDetailsVideoStream::is_rotation_Valid() const{
    return m_rotation_isValid;
}

QString OAIVideoFileDetailsVideoStream::getVendor() const {
    return m_vendor;
}
void OAIVideoFileDetailsVideoStream::setVendor(const QString &vendor) {
    m_vendor = vendor;
    m_vendor_isSet = true;
}

bool OAIVideoFileDetailsVideoStream::is_vendor_Set() const{
    return m_vendor_isSet;
}

bool OAIVideoFileDetailsVideoStream::is_vendor_Valid() const{
    return m_vendor_isValid;
}

qint32 OAIVideoFileDetailsVideoStream::getWidthPixels() const {
    return m_width_pixels;
}
void OAIVideoFileDetailsVideoStream::setWidthPixels(const qint32 &width_pixels) {
    m_width_pixels = width_pixels;
    m_width_pixels_isSet = true;
}

bool OAIVideoFileDetailsVideoStream::is_width_pixels_Set() const{
    return m_width_pixels_isSet;
}

bool OAIVideoFileDetailsVideoStream::is_width_pixels_Valid() const{
    return m_width_pixels_isValid;
}

bool OAIVideoFileDetailsVideoStream::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aspect_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bitrate_bps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_codec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frame_rate_fps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_pixels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rotation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_pixels_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoFileDetailsVideoStream::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
