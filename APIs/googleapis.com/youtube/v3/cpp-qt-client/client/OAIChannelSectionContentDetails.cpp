/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelSectionContentDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelSectionContentDetails::OAIChannelSectionContentDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelSectionContentDetails::OAIChannelSectionContentDetails() {
    this->initializeModel();
}

OAIChannelSectionContentDetails::~OAIChannelSectionContentDetails() {}

void OAIChannelSectionContentDetails::initializeModel() {

    m_channels_isSet = false;
    m_channels_isValid = false;

    m_playlists_isSet = false;
    m_playlists_isValid = false;
}

void OAIChannelSectionContentDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelSectionContentDetails::fromJsonObject(QJsonObject json) {

    m_channels_isValid = ::OpenAPI::fromJsonValue(m_channels, json[QString("channels")]);
    m_channels_isSet = !json[QString("channels")].isNull() && m_channels_isValid;

    m_playlists_isValid = ::OpenAPI::fromJsonValue(m_playlists, json[QString("playlists")]);
    m_playlists_isSet = !json[QString("playlists")].isNull() && m_playlists_isValid;
}

QString OAIChannelSectionContentDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelSectionContentDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_channels.size() > 0) {
        obj.insert(QString("channels"), ::OpenAPI::toJsonValue(m_channels));
    }
    if (m_playlists.size() > 0) {
        obj.insert(QString("playlists"), ::OpenAPI::toJsonValue(m_playlists));
    }
    return obj;
}

QList<QString> OAIChannelSectionContentDetails::getChannels() const {
    return m_channels;
}
void OAIChannelSectionContentDetails::setChannels(const QList<QString> &channels) {
    m_channels = channels;
    m_channels_isSet = true;
}

bool OAIChannelSectionContentDetails::is_channels_Set() const{
    return m_channels_isSet;
}

bool OAIChannelSectionContentDetails::is_channels_Valid() const{
    return m_channels_isValid;
}

QList<QString> OAIChannelSectionContentDetails::getPlaylists() const {
    return m_playlists;
}
void OAIChannelSectionContentDetails::setPlaylists(const QList<QString> &playlists) {
    m_playlists = playlists;
    m_playlists_isSet = true;
}

bool OAIChannelSectionContentDetails::is_playlists_Set() const{
    return m_playlists_isSet;
}

bool OAIChannelSectionContentDetails::is_playlists_Valid() const{
    return m_playlists_isValid;
}

bool OAIChannelSectionContentDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_playlists.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelSectionContentDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
