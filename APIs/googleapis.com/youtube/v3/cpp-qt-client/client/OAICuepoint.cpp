/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICuepoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICuepoint::OAICuepoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICuepoint::OAICuepoint() {
    this->initializeModel();
}

OAICuepoint::~OAICuepoint() {}

void OAICuepoint::initializeModel() {

    m_cue_type_isSet = false;
    m_cue_type_isValid = false;

    m_duration_secs_isSet = false;
    m_duration_secs_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_insertion_offset_time_ms_isSet = false;
    m_insertion_offset_time_ms_isValid = false;

    m_walltime_ms_isSet = false;
    m_walltime_ms_isValid = false;
}

void OAICuepoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICuepoint::fromJsonObject(QJsonObject json) {

    m_cue_type_isValid = ::OpenAPI::fromJsonValue(m_cue_type, json[QString("cueType")]);
    m_cue_type_isSet = !json[QString("cueType")].isNull() && m_cue_type_isValid;

    m_duration_secs_isValid = ::OpenAPI::fromJsonValue(m_duration_secs, json[QString("durationSecs")]);
    m_duration_secs_isSet = !json[QString("durationSecs")].isNull() && m_duration_secs_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_insertion_offset_time_ms_isValid = ::OpenAPI::fromJsonValue(m_insertion_offset_time_ms, json[QString("insertionOffsetTimeMs")]);
    m_insertion_offset_time_ms_isSet = !json[QString("insertionOffsetTimeMs")].isNull() && m_insertion_offset_time_ms_isValid;

    m_walltime_ms_isValid = ::OpenAPI::fromJsonValue(m_walltime_ms, json[QString("walltimeMs")]);
    m_walltime_ms_isSet = !json[QString("walltimeMs")].isNull() && m_walltime_ms_isValid;
}

QString OAICuepoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICuepoint::asJsonObject() const {
    QJsonObject obj;
    if (m_cue_type_isSet) {
        obj.insert(QString("cueType"), ::OpenAPI::toJsonValue(m_cue_type));
    }
    if (m_duration_secs_isSet) {
        obj.insert(QString("durationSecs"), ::OpenAPI::toJsonValue(m_duration_secs));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_insertion_offset_time_ms_isSet) {
        obj.insert(QString("insertionOffsetTimeMs"), ::OpenAPI::toJsonValue(m_insertion_offset_time_ms));
    }
    if (m_walltime_ms_isSet) {
        obj.insert(QString("walltimeMs"), ::OpenAPI::toJsonValue(m_walltime_ms));
    }
    return obj;
}

QString OAICuepoint::getCueType() const {
    return m_cue_type;
}
void OAICuepoint::setCueType(const QString &cue_type) {
    m_cue_type = cue_type;
    m_cue_type_isSet = true;
}

bool OAICuepoint::is_cue_type_Set() const{
    return m_cue_type_isSet;
}

bool OAICuepoint::is_cue_type_Valid() const{
    return m_cue_type_isValid;
}

qint32 OAICuepoint::getDurationSecs() const {
    return m_duration_secs;
}
void OAICuepoint::setDurationSecs(const qint32 &duration_secs) {
    m_duration_secs = duration_secs;
    m_duration_secs_isSet = true;
}

bool OAICuepoint::is_duration_secs_Set() const{
    return m_duration_secs_isSet;
}

bool OAICuepoint::is_duration_secs_Valid() const{
    return m_duration_secs_isValid;
}

QString OAICuepoint::getEtag() const {
    return m_etag;
}
void OAICuepoint::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAICuepoint::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAICuepoint::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAICuepoint::getId() const {
    return m_id;
}
void OAICuepoint::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICuepoint::is_id_Set() const{
    return m_id_isSet;
}

bool OAICuepoint::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICuepoint::getInsertionOffsetTimeMs() const {
    return m_insertion_offset_time_ms;
}
void OAICuepoint::setInsertionOffsetTimeMs(const QString &insertion_offset_time_ms) {
    m_insertion_offset_time_ms = insertion_offset_time_ms;
    m_insertion_offset_time_ms_isSet = true;
}

bool OAICuepoint::is_insertion_offset_time_ms_Set() const{
    return m_insertion_offset_time_ms_isSet;
}

bool OAICuepoint::is_insertion_offset_time_ms_Valid() const{
    return m_insertion_offset_time_ms_isValid;
}

QString OAICuepoint::getWalltimeMs() const {
    return m_walltime_ms;
}
void OAICuepoint::setWalltimeMs(const QString &walltime_ms) {
    m_walltime_ms = walltime_ms;
    m_walltime_ms_isSet = true;
}

bool OAICuepoint::is_walltime_ms_Set() const{
    return m_walltime_ms_isSet;
}

bool OAICuepoint::is_walltime_ms_Valid() const{
    return m_walltime_ms_isValid;
}

bool OAICuepoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cue_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_secs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insertion_offset_time_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_walltime_ms_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICuepoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
