/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlaylistImageSnippet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlaylistImageSnippet::OAIPlaylistImageSnippet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlaylistImageSnippet::OAIPlaylistImageSnippet() {
    this->initializeModel();
}

OAIPlaylistImageSnippet::~OAIPlaylistImageSnippet() {}

void OAIPlaylistImageSnippet::initializeModel() {

    m_height_isSet = false;
    m_height_isValid = false;

    m_playlist_id_isSet = false;
    m_playlist_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIPlaylistImageSnippet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlaylistImageSnippet::fromJsonObject(QJsonObject json) {

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_playlist_id_isValid = ::OpenAPI::fromJsonValue(m_playlist_id, json[QString("playlistId")]);
    m_playlist_id_isSet = !json[QString("playlistId")].isNull() && m_playlist_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIPlaylistImageSnippet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlaylistImageSnippet::asJsonObject() const {
    QJsonObject obj;
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_playlist_id_isSet) {
        obj.insert(QString("playlistId"), ::OpenAPI::toJsonValue(m_playlist_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

qint32 OAIPlaylistImageSnippet::getHeight() const {
    return m_height;
}
void OAIPlaylistImageSnippet::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIPlaylistImageSnippet::is_height_Set() const{
    return m_height_isSet;
}

bool OAIPlaylistImageSnippet::is_height_Valid() const{
    return m_height_isValid;
}

QString OAIPlaylistImageSnippet::getPlaylistId() const {
    return m_playlist_id;
}
void OAIPlaylistImageSnippet::setPlaylistId(const QString &playlist_id) {
    m_playlist_id = playlist_id;
    m_playlist_id_isSet = true;
}

bool OAIPlaylistImageSnippet::is_playlist_id_Set() const{
    return m_playlist_id_isSet;
}

bool OAIPlaylistImageSnippet::is_playlist_id_Valid() const{
    return m_playlist_id_isValid;
}

QString OAIPlaylistImageSnippet::getType() const {
    return m_type;
}
void OAIPlaylistImageSnippet::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPlaylistImageSnippet::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPlaylistImageSnippet::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIPlaylistImageSnippet::getWidth() const {
    return m_width;
}
void OAIPlaylistImageSnippet::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIPlaylistImageSnippet::is_width_Set() const{
    return m_width_isSet;
}

bool OAIPlaylistImageSnippet::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIPlaylistImageSnippet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_playlist_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlaylistImageSnippet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
