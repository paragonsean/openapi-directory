/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILiveBroadcastStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILiveBroadcastStatus::OAILiveBroadcastStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILiveBroadcastStatus::OAILiveBroadcastStatus() {
    this->initializeModel();
}

OAILiveBroadcastStatus::~OAILiveBroadcastStatus() {}

void OAILiveBroadcastStatus::initializeModel() {

    m_life_cycle_status_isSet = false;
    m_life_cycle_status_isValid = false;

    m_live_broadcast_priority_isSet = false;
    m_live_broadcast_priority_isValid = false;

    m_made_for_kids_isSet = false;
    m_made_for_kids_isValid = false;

    m_privacy_status_isSet = false;
    m_privacy_status_isValid = false;

    m_recording_status_isSet = false;
    m_recording_status_isValid = false;

    m_self_declared_made_for_kids_isSet = false;
    m_self_declared_made_for_kids_isValid = false;
}

void OAILiveBroadcastStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILiveBroadcastStatus::fromJsonObject(QJsonObject json) {

    m_life_cycle_status_isValid = ::OpenAPI::fromJsonValue(m_life_cycle_status, json[QString("lifeCycleStatus")]);
    m_life_cycle_status_isSet = !json[QString("lifeCycleStatus")].isNull() && m_life_cycle_status_isValid;

    m_live_broadcast_priority_isValid = ::OpenAPI::fromJsonValue(m_live_broadcast_priority, json[QString("liveBroadcastPriority")]);
    m_live_broadcast_priority_isSet = !json[QString("liveBroadcastPriority")].isNull() && m_live_broadcast_priority_isValid;

    m_made_for_kids_isValid = ::OpenAPI::fromJsonValue(m_made_for_kids, json[QString("madeForKids")]);
    m_made_for_kids_isSet = !json[QString("madeForKids")].isNull() && m_made_for_kids_isValid;

    m_privacy_status_isValid = ::OpenAPI::fromJsonValue(m_privacy_status, json[QString("privacyStatus")]);
    m_privacy_status_isSet = !json[QString("privacyStatus")].isNull() && m_privacy_status_isValid;

    m_recording_status_isValid = ::OpenAPI::fromJsonValue(m_recording_status, json[QString("recordingStatus")]);
    m_recording_status_isSet = !json[QString("recordingStatus")].isNull() && m_recording_status_isValid;

    m_self_declared_made_for_kids_isValid = ::OpenAPI::fromJsonValue(m_self_declared_made_for_kids, json[QString("selfDeclaredMadeForKids")]);
    m_self_declared_made_for_kids_isSet = !json[QString("selfDeclaredMadeForKids")].isNull() && m_self_declared_made_for_kids_isValid;
}

QString OAILiveBroadcastStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILiveBroadcastStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_life_cycle_status_isSet) {
        obj.insert(QString("lifeCycleStatus"), ::OpenAPI::toJsonValue(m_life_cycle_status));
    }
    if (m_live_broadcast_priority_isSet) {
        obj.insert(QString("liveBroadcastPriority"), ::OpenAPI::toJsonValue(m_live_broadcast_priority));
    }
    if (m_made_for_kids_isSet) {
        obj.insert(QString("madeForKids"), ::OpenAPI::toJsonValue(m_made_for_kids));
    }
    if (m_privacy_status_isSet) {
        obj.insert(QString("privacyStatus"), ::OpenAPI::toJsonValue(m_privacy_status));
    }
    if (m_recording_status_isSet) {
        obj.insert(QString("recordingStatus"), ::OpenAPI::toJsonValue(m_recording_status));
    }
    if (m_self_declared_made_for_kids_isSet) {
        obj.insert(QString("selfDeclaredMadeForKids"), ::OpenAPI::toJsonValue(m_self_declared_made_for_kids));
    }
    return obj;
}

QString OAILiveBroadcastStatus::getLifeCycleStatus() const {
    return m_life_cycle_status;
}
void OAILiveBroadcastStatus::setLifeCycleStatus(const QString &life_cycle_status) {
    m_life_cycle_status = life_cycle_status;
    m_life_cycle_status_isSet = true;
}

bool OAILiveBroadcastStatus::is_life_cycle_status_Set() const{
    return m_life_cycle_status_isSet;
}

bool OAILiveBroadcastStatus::is_life_cycle_status_Valid() const{
    return m_life_cycle_status_isValid;
}

QString OAILiveBroadcastStatus::getLiveBroadcastPriority() const {
    return m_live_broadcast_priority;
}
void OAILiveBroadcastStatus::setLiveBroadcastPriority(const QString &live_broadcast_priority) {
    m_live_broadcast_priority = live_broadcast_priority;
    m_live_broadcast_priority_isSet = true;
}

bool OAILiveBroadcastStatus::is_live_broadcast_priority_Set() const{
    return m_live_broadcast_priority_isSet;
}

bool OAILiveBroadcastStatus::is_live_broadcast_priority_Valid() const{
    return m_live_broadcast_priority_isValid;
}

bool OAILiveBroadcastStatus::isMadeForKids() const {
    return m_made_for_kids;
}
void OAILiveBroadcastStatus::setMadeForKids(const bool &made_for_kids) {
    m_made_for_kids = made_for_kids;
    m_made_for_kids_isSet = true;
}

bool OAILiveBroadcastStatus::is_made_for_kids_Set() const{
    return m_made_for_kids_isSet;
}

bool OAILiveBroadcastStatus::is_made_for_kids_Valid() const{
    return m_made_for_kids_isValid;
}

QString OAILiveBroadcastStatus::getPrivacyStatus() const {
    return m_privacy_status;
}
void OAILiveBroadcastStatus::setPrivacyStatus(const QString &privacy_status) {
    m_privacy_status = privacy_status;
    m_privacy_status_isSet = true;
}

bool OAILiveBroadcastStatus::is_privacy_status_Set() const{
    return m_privacy_status_isSet;
}

bool OAILiveBroadcastStatus::is_privacy_status_Valid() const{
    return m_privacy_status_isValid;
}

QString OAILiveBroadcastStatus::getRecordingStatus() const {
    return m_recording_status;
}
void OAILiveBroadcastStatus::setRecordingStatus(const QString &recording_status) {
    m_recording_status = recording_status;
    m_recording_status_isSet = true;
}

bool OAILiveBroadcastStatus::is_recording_status_Set() const{
    return m_recording_status_isSet;
}

bool OAILiveBroadcastStatus::is_recording_status_Valid() const{
    return m_recording_status_isValid;
}

bool OAILiveBroadcastStatus::isSelfDeclaredMadeForKids() const {
    return m_self_declared_made_for_kids;
}
void OAILiveBroadcastStatus::setSelfDeclaredMadeForKids(const bool &self_declared_made_for_kids) {
    m_self_declared_made_for_kids = self_declared_made_for_kids;
    m_self_declared_made_for_kids_isSet = true;
}

bool OAILiveBroadcastStatus::is_self_declared_made_for_kids_Set() const{
    return m_self_declared_made_for_kids_isSet;
}

bool OAILiveBroadcastStatus::is_self_declared_made_for_kids_Valid() const{
    return m_self_declared_made_for_kids_isValid;
}

bool OAILiveBroadcastStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_life_cycle_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_broadcast_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_made_for_kids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_privacy_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recording_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_declared_made_for_kids_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILiveBroadcastStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
