/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelSectionSnippet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelSectionSnippet::OAIChannelSectionSnippet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelSectionSnippet::OAIChannelSectionSnippet() {
    this->initializeModel();
}

OAIChannelSectionSnippet::~OAIChannelSectionSnippet() {}

void OAIChannelSectionSnippet::initializeModel() {

    m_channel_id_isSet = false;
    m_channel_id_isValid = false;

    m_default_language_isSet = false;
    m_default_language_isValid = false;

    m_localized_isSet = false;
    m_localized_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_style_isSet = false;
    m_style_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIChannelSectionSnippet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelSectionSnippet::fromJsonObject(QJsonObject json) {

    m_channel_id_isValid = ::OpenAPI::fromJsonValue(m_channel_id, json[QString("channelId")]);
    m_channel_id_isSet = !json[QString("channelId")].isNull() && m_channel_id_isValid;

    m_default_language_isValid = ::OpenAPI::fromJsonValue(m_default_language, json[QString("defaultLanguage")]);
    m_default_language_isSet = !json[QString("defaultLanguage")].isNull() && m_default_language_isValid;

    m_localized_isValid = ::OpenAPI::fromJsonValue(m_localized, json[QString("localized")]);
    m_localized_isSet = !json[QString("localized")].isNull() && m_localized_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_style_isValid = ::OpenAPI::fromJsonValue(m_style, json[QString("style")]);
    m_style_isSet = !json[QString("style")].isNull() && m_style_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIChannelSectionSnippet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelSectionSnippet::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_id_isSet) {
        obj.insert(QString("channelId"), ::OpenAPI::toJsonValue(m_channel_id));
    }
    if (m_default_language_isSet) {
        obj.insert(QString("defaultLanguage"), ::OpenAPI::toJsonValue(m_default_language));
    }
    if (m_localized.isSet()) {
        obj.insert(QString("localized"), ::OpenAPI::toJsonValue(m_localized));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_style_isSet) {
        obj.insert(QString("style"), ::OpenAPI::toJsonValue(m_style));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIChannelSectionSnippet::getChannelId() const {
    return m_channel_id;
}
void OAIChannelSectionSnippet::setChannelId(const QString &channel_id) {
    m_channel_id = channel_id;
    m_channel_id_isSet = true;
}

bool OAIChannelSectionSnippet::is_channel_id_Set() const{
    return m_channel_id_isSet;
}

bool OAIChannelSectionSnippet::is_channel_id_Valid() const{
    return m_channel_id_isValid;
}

QString OAIChannelSectionSnippet::getDefaultLanguage() const {
    return m_default_language;
}
void OAIChannelSectionSnippet::setDefaultLanguage(const QString &default_language) {
    m_default_language = default_language;
    m_default_language_isSet = true;
}

bool OAIChannelSectionSnippet::is_default_language_Set() const{
    return m_default_language_isSet;
}

bool OAIChannelSectionSnippet::is_default_language_Valid() const{
    return m_default_language_isValid;
}

OAIChannelSectionLocalization OAIChannelSectionSnippet::getLocalized() const {
    return m_localized;
}
void OAIChannelSectionSnippet::setLocalized(const OAIChannelSectionLocalization &localized) {
    m_localized = localized;
    m_localized_isSet = true;
}

bool OAIChannelSectionSnippet::is_localized_Set() const{
    return m_localized_isSet;
}

bool OAIChannelSectionSnippet::is_localized_Valid() const{
    return m_localized_isValid;
}

qint32 OAIChannelSectionSnippet::getPosition() const {
    return m_position;
}
void OAIChannelSectionSnippet::setPosition(const qint32 &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIChannelSectionSnippet::is_position_Set() const{
    return m_position_isSet;
}

bool OAIChannelSectionSnippet::is_position_Valid() const{
    return m_position_isValid;
}

QString OAIChannelSectionSnippet::getStyle() const {
    return m_style;
}
void OAIChannelSectionSnippet::setStyle(const QString &style) {
    m_style = style;
    m_style_isSet = true;
}

bool OAIChannelSectionSnippet::is_style_Set() const{
    return m_style_isSet;
}

bool OAIChannelSectionSnippet::is_style_Valid() const{
    return m_style_isValid;
}

QString OAIChannelSectionSnippet::getTitle() const {
    return m_title;
}
void OAIChannelSectionSnippet::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIChannelSectionSnippet::is_title_Set() const{
    return m_title_isSet;
}

bool OAIChannelSectionSnippet::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIChannelSectionSnippet::getType() const {
    return m_type;
}
void OAIChannelSectionSnippet::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIChannelSectionSnippet::is_type_Set() const{
    return m_type_isSet;
}

bool OAIChannelSectionSnippet::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIChannelSectionSnippet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_localized.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_style_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelSectionSnippet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
