/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelStatistics::OAIChannelStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelStatistics::OAIChannelStatistics() {
    this->initializeModel();
}

OAIChannelStatistics::~OAIChannelStatistics() {}

void OAIChannelStatistics::initializeModel() {

    m_comment_count_isSet = false;
    m_comment_count_isValid = false;

    m_hidden_subscriber_count_isSet = false;
    m_hidden_subscriber_count_isValid = false;

    m_subscriber_count_isSet = false;
    m_subscriber_count_isValid = false;

    m_video_count_isSet = false;
    m_video_count_isValid = false;

    m_view_count_isSet = false;
    m_view_count_isValid = false;
}

void OAIChannelStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelStatistics::fromJsonObject(QJsonObject json) {

    m_comment_count_isValid = ::OpenAPI::fromJsonValue(m_comment_count, json[QString("commentCount")]);
    m_comment_count_isSet = !json[QString("commentCount")].isNull() && m_comment_count_isValid;

    m_hidden_subscriber_count_isValid = ::OpenAPI::fromJsonValue(m_hidden_subscriber_count, json[QString("hiddenSubscriberCount")]);
    m_hidden_subscriber_count_isSet = !json[QString("hiddenSubscriberCount")].isNull() && m_hidden_subscriber_count_isValid;

    m_subscriber_count_isValid = ::OpenAPI::fromJsonValue(m_subscriber_count, json[QString("subscriberCount")]);
    m_subscriber_count_isSet = !json[QString("subscriberCount")].isNull() && m_subscriber_count_isValid;

    m_video_count_isValid = ::OpenAPI::fromJsonValue(m_video_count, json[QString("videoCount")]);
    m_video_count_isSet = !json[QString("videoCount")].isNull() && m_video_count_isValid;

    m_view_count_isValid = ::OpenAPI::fromJsonValue(m_view_count, json[QString("viewCount")]);
    m_view_count_isSet = !json[QString("viewCount")].isNull() && m_view_count_isValid;
}

QString OAIChannelStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_comment_count_isSet) {
        obj.insert(QString("commentCount"), ::OpenAPI::toJsonValue(m_comment_count));
    }
    if (m_hidden_subscriber_count_isSet) {
        obj.insert(QString("hiddenSubscriberCount"), ::OpenAPI::toJsonValue(m_hidden_subscriber_count));
    }
    if (m_subscriber_count_isSet) {
        obj.insert(QString("subscriberCount"), ::OpenAPI::toJsonValue(m_subscriber_count));
    }
    if (m_video_count_isSet) {
        obj.insert(QString("videoCount"), ::OpenAPI::toJsonValue(m_video_count));
    }
    if (m_view_count_isSet) {
        obj.insert(QString("viewCount"), ::OpenAPI::toJsonValue(m_view_count));
    }
    return obj;
}

QString OAIChannelStatistics::getCommentCount() const {
    return m_comment_count;
}
void OAIChannelStatistics::setCommentCount(const QString &comment_count) {
    m_comment_count = comment_count;
    m_comment_count_isSet = true;
}

bool OAIChannelStatistics::is_comment_count_Set() const{
    return m_comment_count_isSet;
}

bool OAIChannelStatistics::is_comment_count_Valid() const{
    return m_comment_count_isValid;
}

bool OAIChannelStatistics::isHiddenSubscriberCount() const {
    return m_hidden_subscriber_count;
}
void OAIChannelStatistics::setHiddenSubscriberCount(const bool &hidden_subscriber_count) {
    m_hidden_subscriber_count = hidden_subscriber_count;
    m_hidden_subscriber_count_isSet = true;
}

bool OAIChannelStatistics::is_hidden_subscriber_count_Set() const{
    return m_hidden_subscriber_count_isSet;
}

bool OAIChannelStatistics::is_hidden_subscriber_count_Valid() const{
    return m_hidden_subscriber_count_isValid;
}

QString OAIChannelStatistics::getSubscriberCount() const {
    return m_subscriber_count;
}
void OAIChannelStatistics::setSubscriberCount(const QString &subscriber_count) {
    m_subscriber_count = subscriber_count;
    m_subscriber_count_isSet = true;
}

bool OAIChannelStatistics::is_subscriber_count_Set() const{
    return m_subscriber_count_isSet;
}

bool OAIChannelStatistics::is_subscriber_count_Valid() const{
    return m_subscriber_count_isValid;
}

QString OAIChannelStatistics::getVideoCount() const {
    return m_video_count;
}
void OAIChannelStatistics::setVideoCount(const QString &video_count) {
    m_video_count = video_count;
    m_video_count_isSet = true;
}

bool OAIChannelStatistics::is_video_count_Set() const{
    return m_video_count_isSet;
}

bool OAIChannelStatistics::is_video_count_Valid() const{
    return m_video_count_isValid;
}

QString OAIChannelStatistics::getViewCount() const {
    return m_view_count;
}
void OAIChannelStatistics::setViewCount(const QString &view_count) {
    m_view_count = view_count;
    m_view_count_isSet = true;
}

bool OAIChannelStatistics::is_view_count_Set() const{
    return m_view_count_isSet;
}

bool OAIChannelStatistics::is_view_count_Valid() const{
    return m_view_count_isValid;
}

bool OAIChannelStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comment_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hidden_subscriber_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscriber_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
