/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Cuepoint;
import org.openapitools.client.model.LiveBroadcast;
import org.openapitools.client.model.LiveBroadcastListResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LiveBroadcastsApi
 */
@Disabled
public class LiveBroadcastsApiTest {

    private final LiveBroadcastsApi api = new LiveBroadcastsApi();

    /**
     * Bind a broadcast to a stream.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void youtubeLiveBroadcastsBindTest() throws ApiException {
        String id = null;
        List<String> part = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String onBehalfOfContentOwner = null;
        String onBehalfOfContentOwnerChannel = null;
        String streamId = null;
        LiveBroadcast response = api.youtubeLiveBroadcastsBind(id, part, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, onBehalfOfContentOwner, onBehalfOfContentOwnerChannel, streamId);
        // TODO: test validations
    }

    /**
     * Delete a given broadcast.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void youtubeLiveBroadcastsDeleteTest() throws ApiException {
        String id = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String onBehalfOfContentOwner = null;
        String onBehalfOfContentOwnerChannel = null;
        api.youtubeLiveBroadcastsDelete(id, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, onBehalfOfContentOwner, onBehalfOfContentOwnerChannel);
        // TODO: test validations
    }

    /**
     * Inserts a new stream for the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void youtubeLiveBroadcastsInsertTest() throws ApiException {
        List<String> part = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String onBehalfOfContentOwner = null;
        String onBehalfOfContentOwnerChannel = null;
        LiveBroadcast liveBroadcast = null;
        LiveBroadcast response = api.youtubeLiveBroadcastsInsert(part, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, onBehalfOfContentOwner, onBehalfOfContentOwnerChannel, liveBroadcast);
        // TODO: test validations
    }

    /**
     * Insert cuepoints in a broadcast
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void youtubeLiveBroadcastsInsertCuepointTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String id = null;
        String onBehalfOfContentOwner = null;
        String onBehalfOfContentOwnerChannel = null;
        List<String> part = null;
        Cuepoint cuepoint = null;
        Cuepoint response = api.youtubeLiveBroadcastsInsertCuepoint($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, id, onBehalfOfContentOwner, onBehalfOfContentOwnerChannel, part, cuepoint);
        // TODO: test validations
    }

    /**
     * Retrieve the list of broadcasts associated with the given channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void youtubeLiveBroadcastsListTest() throws ApiException {
        List<String> part = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String broadcastStatus = null;
        String broadcastType = null;
        List<String> id = null;
        Integer maxResults = null;
        Boolean mine = null;
        String onBehalfOfContentOwner = null;
        String onBehalfOfContentOwnerChannel = null;
        String pageToken = null;
        LiveBroadcastListResponse response = api.youtubeLiveBroadcastsList(part, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, broadcastStatus, broadcastType, id, maxResults, mine, onBehalfOfContentOwner, onBehalfOfContentOwnerChannel, pageToken);
        // TODO: test validations
    }

    /**
     * Transition a broadcast to a given status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void youtubeLiveBroadcastsTransitionTest() throws ApiException {
        String broadcastStatus = null;
        String id = null;
        List<String> part = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String onBehalfOfContentOwner = null;
        String onBehalfOfContentOwnerChannel = null;
        LiveBroadcast response = api.youtubeLiveBroadcastsTransition(broadcastStatus, id, part, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, onBehalfOfContentOwner, onBehalfOfContentOwnerChannel);
        // TODO: test validations
    }

    /**
     * Updates an existing broadcast for the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void youtubeLiveBroadcastsUpdateTest() throws ApiException {
        List<String> part = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String onBehalfOfContentOwner = null;
        String onBehalfOfContentOwnerChannel = null;
        LiveBroadcast liveBroadcast = null;
        LiveBroadcast response = api.youtubeLiveBroadcastsUpdate(part, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, onBehalfOfContentOwner, onBehalfOfContentOwnerChannel, liveBroadcast);
        // TODO: test validations
    }

}
