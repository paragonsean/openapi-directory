/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Video;
import org.openapitools.client.model.VideoAbuseReport;
import org.openapitools.client.model.VideoGetRatingResponse;
import org.openapitools.client.model.VideoListResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VideosApi
 */
@Disabled
public class VideosApiTest {

    private final VideosApi api = new VideosApi();

    /**
     * Deletes a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void youtubeVideosDeleteTest() throws ApiException {
        String id = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String onBehalfOfContentOwner = null;
        api.youtubeVideosDelete(id, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, onBehalfOfContentOwner);
        // TODO: test validations
    }

    /**
     * Retrieves the ratings that the authorized user gave to a list of specified videos.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void youtubeVideosGetRatingTest() throws ApiException {
        List<String> id = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String onBehalfOfContentOwner = null;
        VideoGetRatingResponse response = api.youtubeVideosGetRating(id, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, onBehalfOfContentOwner);
        // TODO: test validations
    }

    /**
     * Inserts a new resource into this collection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void youtubeVideosInsertTest() throws ApiException {
        List<String> part = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean autoLevels = null;
        Boolean notifySubscribers = null;
        String onBehalfOfContentOwner = null;
        String onBehalfOfContentOwnerChannel = null;
        Boolean stabilize = null;
        Video video = null;
        Video response = api.youtubeVideosInsert(part, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, autoLevels, notifySubscribers, onBehalfOfContentOwner, onBehalfOfContentOwnerChannel, stabilize, video);
        // TODO: test validations
    }

    /**
     * Retrieves a list of resources, possibly filtered.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void youtubeVideosListTest() throws ApiException {
        List<String> part = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String chart = null;
        String hl = null;
        List<String> id = null;
        String locale = null;
        Integer maxHeight = null;
        Integer maxResults = null;
        Integer maxWidth = null;
        String myRating = null;
        String onBehalfOfContentOwner = null;
        String pageToken = null;
        String regionCode = null;
        String videoCategoryId = null;
        VideoListResponse response = api.youtubeVideosList(part, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, chart, hl, id, locale, maxHeight, maxResults, maxWidth, myRating, onBehalfOfContentOwner, pageToken, regionCode, videoCategoryId);
        // TODO: test validations
    }

    /**
     * Adds a like or dislike rating to a video or removes a rating from a video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void youtubeVideosRateTest() throws ApiException {
        String id = null;
        String rating = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.youtubeVideosRate(id, rating, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Report abuse for a video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void youtubeVideosReportAbuseTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String onBehalfOfContentOwner = null;
        VideoAbuseReport videoAbuseReport = null;
        api.youtubeVideosReportAbuse($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, onBehalfOfContentOwner, videoAbuseReport);
        // TODO: test validations
    }

    /**
     * Updates an existing resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void youtubeVideosUpdateTest() throws ApiException {
        List<String> part = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String onBehalfOfContentOwner = null;
        Video video = null;
        Video response = api.youtubeVideosUpdate(part, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, onBehalfOfContentOwner, video);
        // TODO: test validations
    }

}
