/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.PlaylistImage;
import org.openapitools.client.model.PlaylistImageListResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PlaylistImagesApi
 */
@Disabled
public class PlaylistImagesApiTest {

    private final PlaylistImagesApi api = new PlaylistImagesApi();

    /**
     * Deletes a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void youtubePlaylistImagesDeleteTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String id = null;
        String onBehalfOfContentOwner = null;
        api.youtubePlaylistImagesDelete($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, id, onBehalfOfContentOwner);
        // TODO: test validations
    }

    /**
     * Inserts a new resource into this collection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void youtubePlaylistImagesInsertTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String onBehalfOfContentOwner = null;
        String onBehalfOfContentOwnerChannel = null;
        List<String> part = null;
        PlaylistImage playlistImage = null;
        PlaylistImage response = api.youtubePlaylistImagesInsert($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, onBehalfOfContentOwner, onBehalfOfContentOwnerChannel, part, playlistImage);
        // TODO: test validations
    }

    /**
     * Retrieves a list of resources, possibly filtered.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void youtubePlaylistImagesListTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer maxResults = null;
        String onBehalfOfContentOwner = null;
        String onBehalfOfContentOwnerChannel = null;
        String pageToken = null;
        String parent = null;
        List<String> part = null;
        PlaylistImageListResponse response = api.youtubePlaylistImagesList($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, maxResults, onBehalfOfContentOwner, onBehalfOfContentOwnerChannel, pageToken, parent, part);
        // TODO: test validations
    }

    /**
     * Updates an existing resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void youtubePlaylistImagesUpdateTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String onBehalfOfContentOwner = null;
        List<String> part = null;
        PlaylistImage playlistImage = null;
        PlaylistImage response = api.youtubePlaylistImagesUpdate($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, onBehalfOfContentOwner, part, playlistImage);
        // TODO: test validations
    }

}
