/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Note that there may be a 5-second end-point resolution issue. For instance, if a cuepoint comes in for 22:03:27, we may stuff the cuepoint into 22:03:25 or 22:03:30, depending. This is an artifact of HLS.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Cuepoint {
  /**
   * Gets or Sets cueType
   */
  @JsonAdapter(CueTypeEnum.Adapter.class)
  public enum CueTypeEnum {
    CUE_TYPE_UNSPECIFIED("cueTypeUnspecified"),
    
    CUE_TYPE_AD("cueTypeAd");

    private String value;

    CueTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CueTypeEnum fromValue(String value) {
      for (CueTypeEnum b : CueTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CueTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CueTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CueTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CueTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CueTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CUE_TYPE = "cueType";
  @SerializedName(SERIALIZED_NAME_CUE_TYPE)
  private CueTypeEnum cueType;

  public static final String SERIALIZED_NAME_DURATION_SECS = "durationSecs";
  @SerializedName(SERIALIZED_NAME_DURATION_SECS)
  private Integer durationSecs;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INSERTION_OFFSET_TIME_MS = "insertionOffsetTimeMs";
  @SerializedName(SERIALIZED_NAME_INSERTION_OFFSET_TIME_MS)
  private String insertionOffsetTimeMs;

  public static final String SERIALIZED_NAME_WALLTIME_MS = "walltimeMs";
  @SerializedName(SERIALIZED_NAME_WALLTIME_MS)
  private String walltimeMs;

  public Cuepoint() {
  }

  public Cuepoint cueType(CueTypeEnum cueType) {
    this.cueType = cueType;
    return this;
  }

  /**
   * Get cueType
   * @return cueType
   */
  @javax.annotation.Nullable
  public CueTypeEnum getCueType() {
    return cueType;
  }

  public void setCueType(CueTypeEnum cueType) {
    this.cueType = cueType;
  }


  public Cuepoint durationSecs(Integer durationSecs) {
    this.durationSecs = durationSecs;
    return this;
  }

  /**
   * The duration of this cuepoint.
   * @return durationSecs
   */
  @javax.annotation.Nullable
  public Integer getDurationSecs() {
    return durationSecs;
  }

  public void setDurationSecs(Integer durationSecs) {
    this.durationSecs = durationSecs;
  }


  public Cuepoint etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * Get etag
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public Cuepoint id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The identifier for cuepoint resource.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Cuepoint insertionOffsetTimeMs(String insertionOffsetTimeMs) {
    this.insertionOffsetTimeMs = insertionOffsetTimeMs;
    return this;
  }

  /**
   * The time when the cuepoint should be inserted by offset to the broadcast actual start time.
   * @return insertionOffsetTimeMs
   */
  @javax.annotation.Nullable
  public String getInsertionOffsetTimeMs() {
    return insertionOffsetTimeMs;
  }

  public void setInsertionOffsetTimeMs(String insertionOffsetTimeMs) {
    this.insertionOffsetTimeMs = insertionOffsetTimeMs;
  }


  public Cuepoint walltimeMs(String walltimeMs) {
    this.walltimeMs = walltimeMs;
    return this;
  }

  /**
   * The wall clock time at which the cuepoint should be inserted. Only one of insertion_offset_time_ms and walltime_ms may be set at a time.
   * @return walltimeMs
   */
  @javax.annotation.Nullable
  public String getWalltimeMs() {
    return walltimeMs;
  }

  public void setWalltimeMs(String walltimeMs) {
    this.walltimeMs = walltimeMs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Cuepoint cuepoint = (Cuepoint) o;
    return Objects.equals(this.cueType, cuepoint.cueType) &&
        Objects.equals(this.durationSecs, cuepoint.durationSecs) &&
        Objects.equals(this.etag, cuepoint.etag) &&
        Objects.equals(this.id, cuepoint.id) &&
        Objects.equals(this.insertionOffsetTimeMs, cuepoint.insertionOffsetTimeMs) &&
        Objects.equals(this.walltimeMs, cuepoint.walltimeMs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cueType, durationSecs, etag, id, insertionOffsetTimeMs, walltimeMs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Cuepoint {\n");
    sb.append("    cueType: ").append(toIndentedString(cueType)).append("\n");
    sb.append("    durationSecs: ").append(toIndentedString(durationSecs)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    insertionOffsetTimeMs: ").append(toIndentedString(insertionOffsetTimeMs)).append("\n");
    sb.append("    walltimeMs: ").append(toIndentedString(walltimeMs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cueType");
    openapiFields.add("durationSecs");
    openapiFields.add("etag");
    openapiFields.add("id");
    openapiFields.add("insertionOffsetTimeMs");
    openapiFields.add("walltimeMs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Cuepoint
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Cuepoint.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Cuepoint is not found in the empty JSON string", Cuepoint.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Cuepoint.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Cuepoint` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cueType") != null && !jsonObj.get("cueType").isJsonNull()) && !jsonObj.get("cueType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cueType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cueType").toString()));
      }
      // validate the optional field `cueType`
      if (jsonObj.get("cueType") != null && !jsonObj.get("cueType").isJsonNull()) {
        CueTypeEnum.validateJsonElement(jsonObj.get("cueType"));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("insertionOffsetTimeMs") != null && !jsonObj.get("insertionOffsetTimeMs").isJsonNull()) && !jsonObj.get("insertionOffsetTimeMs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `insertionOffsetTimeMs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("insertionOffsetTimeMs").toString()));
      }
      if ((jsonObj.get("walltimeMs") != null && !jsonObj.get("walltimeMs").isJsonNull()) && !jsonObj.get("walltimeMs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `walltimeMs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("walltimeMs").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Cuepoint.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Cuepoint' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Cuepoint> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Cuepoint.class));

       return (TypeAdapter<T>) new TypeAdapter<Cuepoint>() {
           @Override
           public void write(JsonWriter out, Cuepoint value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Cuepoint read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Cuepoint given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Cuepoint
   * @throws IOException if the JSON string is invalid with respect to Cuepoint
   */
  public static Cuepoint fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Cuepoint.class);
  }

  /**
   * Convert an instance of Cuepoint to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

