/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ThumbnailDetails;
import org.openapitools.client.model.VideoLocalization;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Basic details about a video, including title, description, uploader, thumbnails and category.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VideoSnippet {
  public static final String SERIALIZED_NAME_CATEGORY_ID = "categoryId";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private String categoryId;

  public static final String SERIALIZED_NAME_CHANNEL_ID = "channelId";
  @SerializedName(SERIALIZED_NAME_CHANNEL_ID)
  private String channelId;

  public static final String SERIALIZED_NAME_CHANNEL_TITLE = "channelTitle";
  @SerializedName(SERIALIZED_NAME_CHANNEL_TITLE)
  private String channelTitle;

  public static final String SERIALIZED_NAME_DEFAULT_AUDIO_LANGUAGE = "defaultAudioLanguage";
  @SerializedName(SERIALIZED_NAME_DEFAULT_AUDIO_LANGUAGE)
  private String defaultAudioLanguage;

  public static final String SERIALIZED_NAME_DEFAULT_LANGUAGE = "defaultLanguage";
  @SerializedName(SERIALIZED_NAME_DEFAULT_LANGUAGE)
  private String defaultLanguage;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * Indicates if the video is an upcoming/active live broadcast. Or it&#39;s \&quot;none\&quot; if the video is not an upcoming/active live broadcast.
   */
  @JsonAdapter(LiveBroadcastContentEnum.Adapter.class)
  public enum LiveBroadcastContentEnum {
    NONE("none"),
    
    UPCOMING("upcoming"),
    
    LIVE("live"),
    
    COMPLETED("completed");

    private String value;

    LiveBroadcastContentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LiveBroadcastContentEnum fromValue(String value) {
      for (LiveBroadcastContentEnum b : LiveBroadcastContentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LiveBroadcastContentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LiveBroadcastContentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LiveBroadcastContentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LiveBroadcastContentEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LiveBroadcastContentEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LIVE_BROADCAST_CONTENT = "liveBroadcastContent";
  @SerializedName(SERIALIZED_NAME_LIVE_BROADCAST_CONTENT)
  private LiveBroadcastContentEnum liveBroadcastContent;

  public static final String SERIALIZED_NAME_LOCALIZED = "localized";
  @SerializedName(SERIALIZED_NAME_LOCALIZED)
  private VideoLocalization localized;

  public static final String SERIALIZED_NAME_PUBLISHED_AT = "publishedAt";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_AT)
  private OffsetDateTime publishedAt;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_THUMBNAILS = "thumbnails";
  @SerializedName(SERIALIZED_NAME_THUMBNAILS)
  private ThumbnailDetails thumbnails;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public VideoSnippet() {
  }

  public VideoSnippet categoryId(String categoryId) {
    this.categoryId = categoryId;
    return this;
  }

  /**
   * The YouTube video category associated with the video.
   * @return categoryId
   */
  @javax.annotation.Nullable
  public String getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(String categoryId) {
    this.categoryId = categoryId;
  }


  public VideoSnippet channelId(String channelId) {
    this.channelId = channelId;
    return this;
  }

  /**
   * The ID that YouTube uses to uniquely identify the channel that the video was uploaded to.
   * @return channelId
   */
  @javax.annotation.Nullable
  public String getChannelId() {
    return channelId;
  }

  public void setChannelId(String channelId) {
    this.channelId = channelId;
  }


  public VideoSnippet channelTitle(String channelTitle) {
    this.channelTitle = channelTitle;
    return this;
  }

  /**
   * Channel title for the channel that the video belongs to.
   * @return channelTitle
   */
  @javax.annotation.Nullable
  public String getChannelTitle() {
    return channelTitle;
  }

  public void setChannelTitle(String channelTitle) {
    this.channelTitle = channelTitle;
  }


  public VideoSnippet defaultAudioLanguage(String defaultAudioLanguage) {
    this.defaultAudioLanguage = defaultAudioLanguage;
    return this;
  }

  /**
   * The default_audio_language property specifies the language spoken in the video&#39;s default audio track.
   * @return defaultAudioLanguage
   */
  @javax.annotation.Nullable
  public String getDefaultAudioLanguage() {
    return defaultAudioLanguage;
  }

  public void setDefaultAudioLanguage(String defaultAudioLanguage) {
    this.defaultAudioLanguage = defaultAudioLanguage;
  }


  public VideoSnippet defaultLanguage(String defaultLanguage) {
    this.defaultLanguage = defaultLanguage;
    return this;
  }

  /**
   * The language of the videos&#39;s default snippet.
   * @return defaultLanguage
   */
  @javax.annotation.Nullable
  public String getDefaultLanguage() {
    return defaultLanguage;
  }

  public void setDefaultLanguage(String defaultLanguage) {
    this.defaultLanguage = defaultLanguage;
  }


  public VideoSnippet description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The video&#39;s description. @mutable youtube.videos.insert youtube.videos.update
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public VideoSnippet liveBroadcastContent(LiveBroadcastContentEnum liveBroadcastContent) {
    this.liveBroadcastContent = liveBroadcastContent;
    return this;
  }

  /**
   * Indicates if the video is an upcoming/active live broadcast. Or it&#39;s \&quot;none\&quot; if the video is not an upcoming/active live broadcast.
   * @return liveBroadcastContent
   */
  @javax.annotation.Nullable
  public LiveBroadcastContentEnum getLiveBroadcastContent() {
    return liveBroadcastContent;
  }

  public void setLiveBroadcastContent(LiveBroadcastContentEnum liveBroadcastContent) {
    this.liveBroadcastContent = liveBroadcastContent;
  }


  public VideoSnippet localized(VideoLocalization localized) {
    this.localized = localized;
    return this;
  }

  /**
   * Get localized
   * @return localized
   */
  @javax.annotation.Nullable
  public VideoLocalization getLocalized() {
    return localized;
  }

  public void setLocalized(VideoLocalization localized) {
    this.localized = localized;
  }


  public VideoSnippet publishedAt(OffsetDateTime publishedAt) {
    this.publishedAt = publishedAt;
    return this;
  }

  /**
   * The date and time when the video was uploaded.
   * @return publishedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPublishedAt() {
    return publishedAt;
  }

  public void setPublishedAt(OffsetDateTime publishedAt) {
    this.publishedAt = publishedAt;
  }


  public VideoSnippet tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public VideoSnippet addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * A list of keyword tags associated with the video. Tags may contain spaces.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public VideoSnippet thumbnails(ThumbnailDetails thumbnails) {
    this.thumbnails = thumbnails;
    return this;
  }

  /**
   * Get thumbnails
   * @return thumbnails
   */
  @javax.annotation.Nullable
  public ThumbnailDetails getThumbnails() {
    return thumbnails;
  }

  public void setThumbnails(ThumbnailDetails thumbnails) {
    this.thumbnails = thumbnails;
  }


  public VideoSnippet title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The video&#39;s title. @mutable youtube.videos.insert youtube.videos.update
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoSnippet videoSnippet = (VideoSnippet) o;
    return Objects.equals(this.categoryId, videoSnippet.categoryId) &&
        Objects.equals(this.channelId, videoSnippet.channelId) &&
        Objects.equals(this.channelTitle, videoSnippet.channelTitle) &&
        Objects.equals(this.defaultAudioLanguage, videoSnippet.defaultAudioLanguage) &&
        Objects.equals(this.defaultLanguage, videoSnippet.defaultLanguage) &&
        Objects.equals(this.description, videoSnippet.description) &&
        Objects.equals(this.liveBroadcastContent, videoSnippet.liveBroadcastContent) &&
        Objects.equals(this.localized, videoSnippet.localized) &&
        Objects.equals(this.publishedAt, videoSnippet.publishedAt) &&
        Objects.equals(this.tags, videoSnippet.tags) &&
        Objects.equals(this.thumbnails, videoSnippet.thumbnails) &&
        Objects.equals(this.title, videoSnippet.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoryId, channelId, channelTitle, defaultAudioLanguage, defaultLanguage, description, liveBroadcastContent, localized, publishedAt, tags, thumbnails, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoSnippet {\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    channelId: ").append(toIndentedString(channelId)).append("\n");
    sb.append("    channelTitle: ").append(toIndentedString(channelTitle)).append("\n");
    sb.append("    defaultAudioLanguage: ").append(toIndentedString(defaultAudioLanguage)).append("\n");
    sb.append("    defaultLanguage: ").append(toIndentedString(defaultLanguage)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    liveBroadcastContent: ").append(toIndentedString(liveBroadcastContent)).append("\n");
    sb.append("    localized: ").append(toIndentedString(localized)).append("\n");
    sb.append("    publishedAt: ").append(toIndentedString(publishedAt)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    thumbnails: ").append(toIndentedString(thumbnails)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categoryId");
    openapiFields.add("channelId");
    openapiFields.add("channelTitle");
    openapiFields.add("defaultAudioLanguage");
    openapiFields.add("defaultLanguage");
    openapiFields.add("description");
    openapiFields.add("liveBroadcastContent");
    openapiFields.add("localized");
    openapiFields.add("publishedAt");
    openapiFields.add("tags");
    openapiFields.add("thumbnails");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoSnippet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoSnippet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoSnippet is not found in the empty JSON string", VideoSnippet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoSnippet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoSnippet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("categoryId") != null && !jsonObj.get("categoryId").isJsonNull()) && !jsonObj.get("categoryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryId").toString()));
      }
      if ((jsonObj.get("channelId") != null && !jsonObj.get("channelId").isJsonNull()) && !jsonObj.get("channelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channelId").toString()));
      }
      if ((jsonObj.get("channelTitle") != null && !jsonObj.get("channelTitle").isJsonNull()) && !jsonObj.get("channelTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channelTitle").toString()));
      }
      if ((jsonObj.get("defaultAudioLanguage") != null && !jsonObj.get("defaultAudioLanguage").isJsonNull()) && !jsonObj.get("defaultAudioLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultAudioLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultAudioLanguage").toString()));
      }
      if ((jsonObj.get("defaultLanguage") != null && !jsonObj.get("defaultLanguage").isJsonNull()) && !jsonObj.get("defaultLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultLanguage").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("liveBroadcastContent") != null && !jsonObj.get("liveBroadcastContent").isJsonNull()) && !jsonObj.get("liveBroadcastContent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `liveBroadcastContent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("liveBroadcastContent").toString()));
      }
      // validate the optional field `liveBroadcastContent`
      if (jsonObj.get("liveBroadcastContent") != null && !jsonObj.get("liveBroadcastContent").isJsonNull()) {
        LiveBroadcastContentEnum.validateJsonElement(jsonObj.get("liveBroadcastContent"));
      }
      // validate the optional field `localized`
      if (jsonObj.get("localized") != null && !jsonObj.get("localized").isJsonNull()) {
        VideoLocalization.validateJsonElement(jsonObj.get("localized"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      // validate the optional field `thumbnails`
      if (jsonObj.get("thumbnails") != null && !jsonObj.get("thumbnails").isJsonNull()) {
        ThumbnailDetails.validateJsonElement(jsonObj.get("thumbnails"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoSnippet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoSnippet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoSnippet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoSnippet.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoSnippet>() {
           @Override
           public void write(JsonWriter out, VideoSnippet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoSnippet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoSnippet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoSnippet
   * @throws IOException if the JSON string is invalid with respect to VideoSnippet
   */
  public static VideoSnippet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoSnippet.class);
  }

  /**
   * Convert an instance of VideoSnippet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

