/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings and Info of the monitor stream
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MonitorStreamInfo {
  public static final String SERIALIZED_NAME_BROADCAST_STREAM_DELAY_MS = "broadcastStreamDelayMs";
  @SerializedName(SERIALIZED_NAME_BROADCAST_STREAM_DELAY_MS)
  private Integer broadcastStreamDelayMs;

  public static final String SERIALIZED_NAME_EMBED_HTML = "embedHtml";
  @SerializedName(SERIALIZED_NAME_EMBED_HTML)
  private String embedHtml;

  public static final String SERIALIZED_NAME_ENABLE_MONITOR_STREAM = "enableMonitorStream";
  @SerializedName(SERIALIZED_NAME_ENABLE_MONITOR_STREAM)
  private Boolean enableMonitorStream;

  public MonitorStreamInfo() {
  }

  public MonitorStreamInfo broadcastStreamDelayMs(Integer broadcastStreamDelayMs) {
    this.broadcastStreamDelayMs = broadcastStreamDelayMs;
    return this;
  }

  /**
   * If you have set the enableMonitorStream property to true, then this property determines the length of the live broadcast delay.
   * @return broadcastStreamDelayMs
   */
  @javax.annotation.Nullable
  public Integer getBroadcastStreamDelayMs() {
    return broadcastStreamDelayMs;
  }

  public void setBroadcastStreamDelayMs(Integer broadcastStreamDelayMs) {
    this.broadcastStreamDelayMs = broadcastStreamDelayMs;
  }


  public MonitorStreamInfo embedHtml(String embedHtml) {
    this.embedHtml = embedHtml;
    return this;
  }

  /**
   * HTML code that embeds a player that plays the monitor stream.
   * @return embedHtml
   */
  @javax.annotation.Nullable
  public String getEmbedHtml() {
    return embedHtml;
  }

  public void setEmbedHtml(String embedHtml) {
    this.embedHtml = embedHtml;
  }


  public MonitorStreamInfo enableMonitorStream(Boolean enableMonitorStream) {
    this.enableMonitorStream = enableMonitorStream;
    return this;
  }

  /**
   * This value determines whether the monitor stream is enabled for the broadcast. If the monitor stream is enabled, then YouTube will broadcast the event content on a special stream intended only for the broadcaster&#39;s consumption. The broadcaster can use the stream to review the event content and also to identify the optimal times to insert cuepoints. You need to set this value to true if you intend to have a broadcast delay for your event. *Note:* This property cannot be updated once the broadcast is in the testing or live state.
   * @return enableMonitorStream
   */
  @javax.annotation.Nullable
  public Boolean getEnableMonitorStream() {
    return enableMonitorStream;
  }

  public void setEnableMonitorStream(Boolean enableMonitorStream) {
    this.enableMonitorStream = enableMonitorStream;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MonitorStreamInfo monitorStreamInfo = (MonitorStreamInfo) o;
    return Objects.equals(this.broadcastStreamDelayMs, monitorStreamInfo.broadcastStreamDelayMs) &&
        Objects.equals(this.embedHtml, monitorStreamInfo.embedHtml) &&
        Objects.equals(this.enableMonitorStream, monitorStreamInfo.enableMonitorStream);
  }

  @Override
  public int hashCode() {
    return Objects.hash(broadcastStreamDelayMs, embedHtml, enableMonitorStream);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MonitorStreamInfo {\n");
    sb.append("    broadcastStreamDelayMs: ").append(toIndentedString(broadcastStreamDelayMs)).append("\n");
    sb.append("    embedHtml: ").append(toIndentedString(embedHtml)).append("\n");
    sb.append("    enableMonitorStream: ").append(toIndentedString(enableMonitorStream)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("broadcastStreamDelayMs");
    openapiFields.add("embedHtml");
    openapiFields.add("enableMonitorStream");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MonitorStreamInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MonitorStreamInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MonitorStreamInfo is not found in the empty JSON string", MonitorStreamInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MonitorStreamInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MonitorStreamInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("embedHtml") != null && !jsonObj.get("embedHtml").isJsonNull()) && !jsonObj.get("embedHtml").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `embedHtml` to be a primitive type in the JSON string but got `%s`", jsonObj.get("embedHtml").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MonitorStreamInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MonitorStreamInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MonitorStreamInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MonitorStreamInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<MonitorStreamInfo>() {
           @Override
           public void write(JsonWriter out, MonitorStreamInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MonitorStreamInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MonitorStreamInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MonitorStreamInfo
   * @throws IOException if the JSON string is invalid with respect to MonitorStreamInfo
   */
  public static MonitorStreamInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MonitorStreamInfo.class);
  }

  /**
   * Convert an instance of MonitorStreamInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

