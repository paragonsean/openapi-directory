/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PlaylistLocalization;
import org.openapitools.client.model.ThumbnailDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Basic details about a playlist, including title, description and thumbnails.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PlaylistSnippet {
  public static final String SERIALIZED_NAME_CHANNEL_ID = "channelId";
  @SerializedName(SERIALIZED_NAME_CHANNEL_ID)
  private String channelId;

  public static final String SERIALIZED_NAME_CHANNEL_TITLE = "channelTitle";
  @SerializedName(SERIALIZED_NAME_CHANNEL_TITLE)
  private String channelTitle;

  public static final String SERIALIZED_NAME_DEFAULT_LANGUAGE = "defaultLanguage";
  @SerializedName(SERIALIZED_NAME_DEFAULT_LANGUAGE)
  private String defaultLanguage;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_LOCALIZED = "localized";
  @SerializedName(SERIALIZED_NAME_LOCALIZED)
  private PlaylistLocalization localized;

  public static final String SERIALIZED_NAME_PUBLISHED_AT = "publishedAt";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_AT)
  private OffsetDateTime publishedAt;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_THUMBNAIL_VIDEO_ID = "thumbnailVideoId";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_VIDEO_ID)
  private String thumbnailVideoId;

  public static final String SERIALIZED_NAME_THUMBNAILS = "thumbnails";
  @SerializedName(SERIALIZED_NAME_THUMBNAILS)
  private ThumbnailDetails thumbnails;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public PlaylistSnippet() {
  }

  public PlaylistSnippet channelId(String channelId) {
    this.channelId = channelId;
    return this;
  }

  /**
   * The ID that YouTube uses to uniquely identify the channel that published the playlist.
   * @return channelId
   */
  @javax.annotation.Nullable
  public String getChannelId() {
    return channelId;
  }

  public void setChannelId(String channelId) {
    this.channelId = channelId;
  }


  public PlaylistSnippet channelTitle(String channelTitle) {
    this.channelTitle = channelTitle;
    return this;
  }

  /**
   * The channel title of the channel that the video belongs to.
   * @return channelTitle
   */
  @javax.annotation.Nullable
  public String getChannelTitle() {
    return channelTitle;
  }

  public void setChannelTitle(String channelTitle) {
    this.channelTitle = channelTitle;
  }


  public PlaylistSnippet defaultLanguage(String defaultLanguage) {
    this.defaultLanguage = defaultLanguage;
    return this;
  }

  /**
   * The language of the playlist&#39;s default title and description.
   * @return defaultLanguage
   */
  @javax.annotation.Nullable
  public String getDefaultLanguage() {
    return defaultLanguage;
  }

  public void setDefaultLanguage(String defaultLanguage) {
    this.defaultLanguage = defaultLanguage;
  }


  public PlaylistSnippet description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The playlist&#39;s description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public PlaylistSnippet localized(PlaylistLocalization localized) {
    this.localized = localized;
    return this;
  }

  /**
   * Get localized
   * @return localized
   */
  @javax.annotation.Nullable
  public PlaylistLocalization getLocalized() {
    return localized;
  }

  public void setLocalized(PlaylistLocalization localized) {
    this.localized = localized;
  }


  public PlaylistSnippet publishedAt(OffsetDateTime publishedAt) {
    this.publishedAt = publishedAt;
    return this;
  }

  /**
   * The date and time that the playlist was created.
   * @return publishedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPublishedAt() {
    return publishedAt;
  }

  public void setPublishedAt(OffsetDateTime publishedAt) {
    this.publishedAt = publishedAt;
  }


  @Deprecated
  public PlaylistSnippet tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public PlaylistSnippet addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Keyword tags associated with the playlist.
   * @return tags
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  @Deprecated
  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public PlaylistSnippet thumbnailVideoId(String thumbnailVideoId) {
    this.thumbnailVideoId = thumbnailVideoId;
    return this;
  }

  /**
   * Note: if the playlist has a custom thumbnail, this field will not be populated. The video id selected by the user that will be used as the thumbnail of this playlist. This field defaults to the first publicly viewable video in the playlist, if: 1. The user has never selected a video to be the thumbnail of the playlist. 2. The user selects a video to be the thumbnail, and then removes that video from the playlist. 3. The user selects a non-owned video to be the thumbnail, but that video becomes private, or gets deleted.
   * @return thumbnailVideoId
   */
  @javax.annotation.Nullable
  public String getThumbnailVideoId() {
    return thumbnailVideoId;
  }

  public void setThumbnailVideoId(String thumbnailVideoId) {
    this.thumbnailVideoId = thumbnailVideoId;
  }


  public PlaylistSnippet thumbnails(ThumbnailDetails thumbnails) {
    this.thumbnails = thumbnails;
    return this;
  }

  /**
   * Get thumbnails
   * @return thumbnails
   */
  @javax.annotation.Nullable
  public ThumbnailDetails getThumbnails() {
    return thumbnails;
  }

  public void setThumbnails(ThumbnailDetails thumbnails) {
    this.thumbnails = thumbnails;
  }


  public PlaylistSnippet title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The playlist&#39;s title.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlaylistSnippet playlistSnippet = (PlaylistSnippet) o;
    return Objects.equals(this.channelId, playlistSnippet.channelId) &&
        Objects.equals(this.channelTitle, playlistSnippet.channelTitle) &&
        Objects.equals(this.defaultLanguage, playlistSnippet.defaultLanguage) &&
        Objects.equals(this.description, playlistSnippet.description) &&
        Objects.equals(this.localized, playlistSnippet.localized) &&
        Objects.equals(this.publishedAt, playlistSnippet.publishedAt) &&
        Objects.equals(this.tags, playlistSnippet.tags) &&
        Objects.equals(this.thumbnailVideoId, playlistSnippet.thumbnailVideoId) &&
        Objects.equals(this.thumbnails, playlistSnippet.thumbnails) &&
        Objects.equals(this.title, playlistSnippet.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channelId, channelTitle, defaultLanguage, description, localized, publishedAt, tags, thumbnailVideoId, thumbnails, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlaylistSnippet {\n");
    sb.append("    channelId: ").append(toIndentedString(channelId)).append("\n");
    sb.append("    channelTitle: ").append(toIndentedString(channelTitle)).append("\n");
    sb.append("    defaultLanguage: ").append(toIndentedString(defaultLanguage)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    localized: ").append(toIndentedString(localized)).append("\n");
    sb.append("    publishedAt: ").append(toIndentedString(publishedAt)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    thumbnailVideoId: ").append(toIndentedString(thumbnailVideoId)).append("\n");
    sb.append("    thumbnails: ").append(toIndentedString(thumbnails)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("channelId");
    openapiFields.add("channelTitle");
    openapiFields.add("defaultLanguage");
    openapiFields.add("description");
    openapiFields.add("localized");
    openapiFields.add("publishedAt");
    openapiFields.add("tags");
    openapiFields.add("thumbnailVideoId");
    openapiFields.add("thumbnails");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlaylistSnippet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlaylistSnippet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlaylistSnippet is not found in the empty JSON string", PlaylistSnippet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlaylistSnippet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlaylistSnippet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("channelId") != null && !jsonObj.get("channelId").isJsonNull()) && !jsonObj.get("channelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channelId").toString()));
      }
      if ((jsonObj.get("channelTitle") != null && !jsonObj.get("channelTitle").isJsonNull()) && !jsonObj.get("channelTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channelTitle").toString()));
      }
      if ((jsonObj.get("defaultLanguage") != null && !jsonObj.get("defaultLanguage").isJsonNull()) && !jsonObj.get("defaultLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultLanguage").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `localized`
      if (jsonObj.get("localized") != null && !jsonObj.get("localized").isJsonNull()) {
        PlaylistLocalization.validateJsonElement(jsonObj.get("localized"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("thumbnailVideoId") != null && !jsonObj.get("thumbnailVideoId").isJsonNull()) && !jsonObj.get("thumbnailVideoId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbnailVideoId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbnailVideoId").toString()));
      }
      // validate the optional field `thumbnails`
      if (jsonObj.get("thumbnails") != null && !jsonObj.get("thumbnails").isJsonNull()) {
        ThumbnailDetails.validateJsonElement(jsonObj.get("thumbnails"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlaylistSnippet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlaylistSnippet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlaylistSnippet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlaylistSnippet.class));

       return (TypeAdapter<T>) new TypeAdapter<PlaylistSnippet>() {
           @Override
           public void write(JsonWriter out, PlaylistSnippet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlaylistSnippet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlaylistSnippet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlaylistSnippet
   * @throws IOException if the JSON string is invalid with respect to PlaylistSnippet
   */
  public static PlaylistSnippet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlaylistSnippet.class);
  }

  /**
   * Convert an instance of PlaylistSnippet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

