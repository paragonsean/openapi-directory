/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ChannelProfileDetails;
import org.openapitools.client.model.SuperStickerMetadata;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SuperChatEventSnippet
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SuperChatEventSnippet {
  public static final String SERIALIZED_NAME_AMOUNT_MICROS = "amountMicros";
  @SerializedName(SERIALIZED_NAME_AMOUNT_MICROS)
  private String amountMicros;

  public static final String SERIALIZED_NAME_CHANNEL_ID = "channelId";
  @SerializedName(SERIALIZED_NAME_CHANNEL_ID)
  private String channelId;

  public static final String SERIALIZED_NAME_COMMENT_TEXT = "commentText";
  @SerializedName(SERIALIZED_NAME_COMMENT_TEXT)
  private String commentText;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_DISPLAY_STRING = "displayString";
  @SerializedName(SERIALIZED_NAME_DISPLAY_STRING)
  private String displayString;

  public static final String SERIALIZED_NAME_IS_SUPER_STICKER_EVENT = "isSuperStickerEvent";
  @SerializedName(SERIALIZED_NAME_IS_SUPER_STICKER_EVENT)
  private Boolean isSuperStickerEvent;

  public static final String SERIALIZED_NAME_MESSAGE_TYPE = "messageType";
  @SerializedName(SERIALIZED_NAME_MESSAGE_TYPE)
  private Integer messageType;

  public static final String SERIALIZED_NAME_SUPER_STICKER_METADATA = "superStickerMetadata";
  @SerializedName(SERIALIZED_NAME_SUPER_STICKER_METADATA)
  private SuperStickerMetadata superStickerMetadata;

  public static final String SERIALIZED_NAME_SUPPORTER_DETAILS = "supporterDetails";
  @SerializedName(SERIALIZED_NAME_SUPPORTER_DETAILS)
  private ChannelProfileDetails supporterDetails;

  public SuperChatEventSnippet() {
  }

  public SuperChatEventSnippet amountMicros(String amountMicros) {
    this.amountMicros = amountMicros;
    return this;
  }

  /**
   * The purchase amount, in micros of the purchase currency. e.g., 1 is represented as 1000000.
   * @return amountMicros
   */
  @javax.annotation.Nullable
  public String getAmountMicros() {
    return amountMicros;
  }

  public void setAmountMicros(String amountMicros) {
    this.amountMicros = amountMicros;
  }


  public SuperChatEventSnippet channelId(String channelId) {
    this.channelId = channelId;
    return this;
  }

  /**
   * Channel id where the event occurred.
   * @return channelId
   */
  @javax.annotation.Nullable
  public String getChannelId() {
    return channelId;
  }

  public void setChannelId(String channelId) {
    this.channelId = channelId;
  }


  public SuperChatEventSnippet commentText(String commentText) {
    this.commentText = commentText;
    return this;
  }

  /**
   * The text contents of the comment left by the user.
   * @return commentText
   */
  @javax.annotation.Nullable
  public String getCommentText() {
    return commentText;
  }

  public void setCommentText(String commentText) {
    this.commentText = commentText;
  }


  public SuperChatEventSnippet createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The date and time when the event occurred.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public SuperChatEventSnippet currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * The currency in which the purchase was made. ISO 4217.
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public SuperChatEventSnippet displayString(String displayString) {
    this.displayString = displayString;
    return this;
  }

  /**
   * A rendered string that displays the purchase amount and currency (e.g., \&quot;$1.00\&quot;). The string is rendered for the given language.
   * @return displayString
   */
  @javax.annotation.Nullable
  public String getDisplayString() {
    return displayString;
  }

  public void setDisplayString(String displayString) {
    this.displayString = displayString;
  }


  public SuperChatEventSnippet isSuperStickerEvent(Boolean isSuperStickerEvent) {
    this.isSuperStickerEvent = isSuperStickerEvent;
    return this;
  }

  /**
   * True if this event is a Super Sticker event.
   * @return isSuperStickerEvent
   */
  @javax.annotation.Nullable
  public Boolean getIsSuperStickerEvent() {
    return isSuperStickerEvent;
  }

  public void setIsSuperStickerEvent(Boolean isSuperStickerEvent) {
    this.isSuperStickerEvent = isSuperStickerEvent;
  }


  public SuperChatEventSnippet messageType(Integer messageType) {
    this.messageType = messageType;
    return this;
  }

  /**
   * The tier for the paid message, which is based on the amount of money spent to purchase the message.
   * @return messageType
   */
  @javax.annotation.Nullable
  public Integer getMessageType() {
    return messageType;
  }

  public void setMessageType(Integer messageType) {
    this.messageType = messageType;
  }


  public SuperChatEventSnippet superStickerMetadata(SuperStickerMetadata superStickerMetadata) {
    this.superStickerMetadata = superStickerMetadata;
    return this;
  }

  /**
   * Get superStickerMetadata
   * @return superStickerMetadata
   */
  @javax.annotation.Nullable
  public SuperStickerMetadata getSuperStickerMetadata() {
    return superStickerMetadata;
  }

  public void setSuperStickerMetadata(SuperStickerMetadata superStickerMetadata) {
    this.superStickerMetadata = superStickerMetadata;
  }


  public SuperChatEventSnippet supporterDetails(ChannelProfileDetails supporterDetails) {
    this.supporterDetails = supporterDetails;
    return this;
  }

  /**
   * Get supporterDetails
   * @return supporterDetails
   */
  @javax.annotation.Nullable
  public ChannelProfileDetails getSupporterDetails() {
    return supporterDetails;
  }

  public void setSupporterDetails(ChannelProfileDetails supporterDetails) {
    this.supporterDetails = supporterDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SuperChatEventSnippet superChatEventSnippet = (SuperChatEventSnippet) o;
    return Objects.equals(this.amountMicros, superChatEventSnippet.amountMicros) &&
        Objects.equals(this.channelId, superChatEventSnippet.channelId) &&
        Objects.equals(this.commentText, superChatEventSnippet.commentText) &&
        Objects.equals(this.createdAt, superChatEventSnippet.createdAt) &&
        Objects.equals(this.currency, superChatEventSnippet.currency) &&
        Objects.equals(this.displayString, superChatEventSnippet.displayString) &&
        Objects.equals(this.isSuperStickerEvent, superChatEventSnippet.isSuperStickerEvent) &&
        Objects.equals(this.messageType, superChatEventSnippet.messageType) &&
        Objects.equals(this.superStickerMetadata, superChatEventSnippet.superStickerMetadata) &&
        Objects.equals(this.supporterDetails, superChatEventSnippet.supporterDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amountMicros, channelId, commentText, createdAt, currency, displayString, isSuperStickerEvent, messageType, superStickerMetadata, supporterDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SuperChatEventSnippet {\n");
    sb.append("    amountMicros: ").append(toIndentedString(amountMicros)).append("\n");
    sb.append("    channelId: ").append(toIndentedString(channelId)).append("\n");
    sb.append("    commentText: ").append(toIndentedString(commentText)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    displayString: ").append(toIndentedString(displayString)).append("\n");
    sb.append("    isSuperStickerEvent: ").append(toIndentedString(isSuperStickerEvent)).append("\n");
    sb.append("    messageType: ").append(toIndentedString(messageType)).append("\n");
    sb.append("    superStickerMetadata: ").append(toIndentedString(superStickerMetadata)).append("\n");
    sb.append("    supporterDetails: ").append(toIndentedString(supporterDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amountMicros");
    openapiFields.add("channelId");
    openapiFields.add("commentText");
    openapiFields.add("createdAt");
    openapiFields.add("currency");
    openapiFields.add("displayString");
    openapiFields.add("isSuperStickerEvent");
    openapiFields.add("messageType");
    openapiFields.add("superStickerMetadata");
    openapiFields.add("supporterDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SuperChatEventSnippet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SuperChatEventSnippet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SuperChatEventSnippet is not found in the empty JSON string", SuperChatEventSnippet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SuperChatEventSnippet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SuperChatEventSnippet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("amountMicros") != null && !jsonObj.get("amountMicros").isJsonNull()) && !jsonObj.get("amountMicros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amountMicros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amountMicros").toString()));
      }
      if ((jsonObj.get("channelId") != null && !jsonObj.get("channelId").isJsonNull()) && !jsonObj.get("channelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channelId").toString()));
      }
      if ((jsonObj.get("commentText") != null && !jsonObj.get("commentText").isJsonNull()) && !jsonObj.get("commentText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commentText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commentText").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("displayString") != null && !jsonObj.get("displayString").isJsonNull()) && !jsonObj.get("displayString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayString").toString()));
      }
      // validate the optional field `superStickerMetadata`
      if (jsonObj.get("superStickerMetadata") != null && !jsonObj.get("superStickerMetadata").isJsonNull()) {
        SuperStickerMetadata.validateJsonElement(jsonObj.get("superStickerMetadata"));
      }
      // validate the optional field `supporterDetails`
      if (jsonObj.get("supporterDetails") != null && !jsonObj.get("supporterDetails").isJsonNull()) {
        ChannelProfileDetails.validateJsonElement(jsonObj.get("supporterDetails"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SuperChatEventSnippet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SuperChatEventSnippet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SuperChatEventSnippet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SuperChatEventSnippet.class));

       return (TypeAdapter<T>) new TypeAdapter<SuperChatEventSnippet>() {
           @Override
           public void write(JsonWriter out, SuperChatEventSnippet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SuperChatEventSnippet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SuperChatEventSnippet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SuperChatEventSnippet
   * @throws IOException if the JSON string is invalid with respect to SuperChatEventSnippet
   */
  public static SuperChatEventSnippet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SuperChatEventSnippet.class);
  }

  /**
   * Convert an instance of SuperChatEventSnippet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

