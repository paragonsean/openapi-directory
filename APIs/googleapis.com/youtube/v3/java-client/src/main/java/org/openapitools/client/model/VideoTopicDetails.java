/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Freebase topic information related to the video.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VideoTopicDetails {
  public static final String SERIALIZED_NAME_RELEVANT_TOPIC_IDS = "relevantTopicIds";
  @SerializedName(SERIALIZED_NAME_RELEVANT_TOPIC_IDS)
  private List<String> relevantTopicIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOPIC_CATEGORIES = "topicCategories";
  @SerializedName(SERIALIZED_NAME_TOPIC_CATEGORIES)
  private List<String> topicCategories = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOPIC_IDS = "topicIds";
  @SerializedName(SERIALIZED_NAME_TOPIC_IDS)
  private List<String> topicIds = new ArrayList<>();

  public VideoTopicDetails() {
  }

  public VideoTopicDetails relevantTopicIds(List<String> relevantTopicIds) {
    this.relevantTopicIds = relevantTopicIds;
    return this;
  }

  public VideoTopicDetails addRelevantTopicIdsItem(String relevantTopicIdsItem) {
    if (this.relevantTopicIds == null) {
      this.relevantTopicIds = new ArrayList<>();
    }
    this.relevantTopicIds.add(relevantTopicIdsItem);
    return this;
  }

  /**
   * Similar to topic_id, except that these topics are merely relevant to the video. These are topics that may be mentioned in, or appear in the video. You can retrieve information about each topic using Freebase Topic API.
   * @return relevantTopicIds
   */
  @javax.annotation.Nullable
  public List<String> getRelevantTopicIds() {
    return relevantTopicIds;
  }

  public void setRelevantTopicIds(List<String> relevantTopicIds) {
    this.relevantTopicIds = relevantTopicIds;
  }


  public VideoTopicDetails topicCategories(List<String> topicCategories) {
    this.topicCategories = topicCategories;
    return this;
  }

  public VideoTopicDetails addTopicCategoriesItem(String topicCategoriesItem) {
    if (this.topicCategories == null) {
      this.topicCategories = new ArrayList<>();
    }
    this.topicCategories.add(topicCategoriesItem);
    return this;
  }

  /**
   * A list of Wikipedia URLs that provide a high-level description of the video&#39;s content.
   * @return topicCategories
   */
  @javax.annotation.Nullable
  public List<String> getTopicCategories() {
    return topicCategories;
  }

  public void setTopicCategories(List<String> topicCategories) {
    this.topicCategories = topicCategories;
  }


  public VideoTopicDetails topicIds(List<String> topicIds) {
    this.topicIds = topicIds;
    return this;
  }

  public VideoTopicDetails addTopicIdsItem(String topicIdsItem) {
    if (this.topicIds == null) {
      this.topicIds = new ArrayList<>();
    }
    this.topicIds.add(topicIdsItem);
    return this;
  }

  /**
   * A list of Freebase topic IDs that are centrally associated with the video. These are topics that are centrally featured in the video, and it can be said that the video is mainly about each of these. You can retrieve information about each topic using the &lt; a href&#x3D;\&quot;http://wiki.freebase.com/wiki/Topic_API\&quot;&gt;Freebase Topic API.
   * @return topicIds
   */
  @javax.annotation.Nullable
  public List<String> getTopicIds() {
    return topicIds;
  }

  public void setTopicIds(List<String> topicIds) {
    this.topicIds = topicIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoTopicDetails videoTopicDetails = (VideoTopicDetails) o;
    return Objects.equals(this.relevantTopicIds, videoTopicDetails.relevantTopicIds) &&
        Objects.equals(this.topicCategories, videoTopicDetails.topicCategories) &&
        Objects.equals(this.topicIds, videoTopicDetails.topicIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(relevantTopicIds, topicCategories, topicIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoTopicDetails {\n");
    sb.append("    relevantTopicIds: ").append(toIndentedString(relevantTopicIds)).append("\n");
    sb.append("    topicCategories: ").append(toIndentedString(topicCategories)).append("\n");
    sb.append("    topicIds: ").append(toIndentedString(topicIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("relevantTopicIds");
    openapiFields.add("topicCategories");
    openapiFields.add("topicIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoTopicDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoTopicDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoTopicDetails is not found in the empty JSON string", VideoTopicDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoTopicDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoTopicDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("relevantTopicIds") != null && !jsonObj.get("relevantTopicIds").isJsonNull() && !jsonObj.get("relevantTopicIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `relevantTopicIds` to be an array in the JSON string but got `%s`", jsonObj.get("relevantTopicIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("topicCategories") != null && !jsonObj.get("topicCategories").isJsonNull() && !jsonObj.get("topicCategories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `topicCategories` to be an array in the JSON string but got `%s`", jsonObj.get("topicCategories").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("topicIds") != null && !jsonObj.get("topicIds").isJsonNull() && !jsonObj.get("topicIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `topicIds` to be an array in the JSON string but got `%s`", jsonObj.get("topicIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoTopicDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoTopicDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoTopicDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoTopicDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoTopicDetails>() {
           @Override
           public void write(JsonWriter out, VideoTopicDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoTopicDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoTopicDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoTopicDetails
   * @throws IOException if the JSON string is invalid with respect to VideoTopicDetails
   */
  public static VideoTopicDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoTopicDetails.class);
  }

  /**
   * Convert an instance of VideoTopicDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

