/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single tag suggestion with it&#39;s relevance information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VideoSuggestionsTagSuggestion {
  public static final String SERIALIZED_NAME_CATEGORY_RESTRICTS = "categoryRestricts";
  @SerializedName(SERIALIZED_NAME_CATEGORY_RESTRICTS)
  private List<String> categoryRestricts = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private String tag;

  public VideoSuggestionsTagSuggestion() {
  }

  public VideoSuggestionsTagSuggestion categoryRestricts(List<String> categoryRestricts) {
    this.categoryRestricts = categoryRestricts;
    return this;
  }

  public VideoSuggestionsTagSuggestion addCategoryRestrictsItem(String categoryRestrictsItem) {
    if (this.categoryRestricts == null) {
      this.categoryRestricts = new ArrayList<>();
    }
    this.categoryRestricts.add(categoryRestrictsItem);
    return this;
  }

  /**
   * A set of video categories for which the tag is relevant. You can use this information to display appropriate tag suggestions based on the video category that the video uploader associates with the video. By default, tag suggestions are relevant for all categories if there are no restricts defined for the keyword.
   * @return categoryRestricts
   */
  @javax.annotation.Nullable
  public List<String> getCategoryRestricts() {
    return categoryRestricts;
  }

  public void setCategoryRestricts(List<String> categoryRestricts) {
    this.categoryRestricts = categoryRestricts;
  }


  public VideoSuggestionsTagSuggestion tag(String tag) {
    this.tag = tag;
    return this;
  }

  /**
   * The keyword tag suggested for the video.
   * @return tag
   */
  @javax.annotation.Nullable
  public String getTag() {
    return tag;
  }

  public void setTag(String tag) {
    this.tag = tag;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoSuggestionsTagSuggestion videoSuggestionsTagSuggestion = (VideoSuggestionsTagSuggestion) o;
    return Objects.equals(this.categoryRestricts, videoSuggestionsTagSuggestion.categoryRestricts) &&
        Objects.equals(this.tag, videoSuggestionsTagSuggestion.tag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoryRestricts, tag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoSuggestionsTagSuggestion {\n");
    sb.append("    categoryRestricts: ").append(toIndentedString(categoryRestricts)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categoryRestricts");
    openapiFields.add("tag");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoSuggestionsTagSuggestion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoSuggestionsTagSuggestion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoSuggestionsTagSuggestion is not found in the empty JSON string", VideoSuggestionsTagSuggestion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoSuggestionsTagSuggestion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoSuggestionsTagSuggestion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("categoryRestricts") != null && !jsonObj.get("categoryRestricts").isJsonNull() && !jsonObj.get("categoryRestricts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryRestricts` to be an array in the JSON string but got `%s`", jsonObj.get("categoryRestricts").toString()));
      }
      if ((jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) && !jsonObj.get("tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoSuggestionsTagSuggestion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoSuggestionsTagSuggestion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoSuggestionsTagSuggestion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoSuggestionsTagSuggestion.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoSuggestionsTagSuggestion>() {
           @Override
           public void write(JsonWriter out, VideoSuggestionsTagSuggestion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoSuggestionsTagSuggestion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoSuggestionsTagSuggestion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoSuggestionsTagSuggestion
   * @throws IOException if the JSON string is invalid with respect to VideoSuggestionsTagSuggestion
   */
  public static VideoSuggestionsTagSuggestion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoSuggestionsTagSuggestion.class);
  }

  /**
   * Convert an instance of VideoSuggestionsTagSuggestion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

