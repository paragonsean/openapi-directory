/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PlaylistItemContentDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PlaylistItemContentDetails {
  public static final String SERIALIZED_NAME_END_AT = "endAt";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_END_AT)
  private String endAt;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_START_AT = "startAt";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_START_AT)
  private String startAt;

  public static final String SERIALIZED_NAME_VIDEO_ID = "videoId";
  @SerializedName(SERIALIZED_NAME_VIDEO_ID)
  private String videoId;

  public static final String SERIALIZED_NAME_VIDEO_PUBLISHED_AT = "videoPublishedAt";
  @SerializedName(SERIALIZED_NAME_VIDEO_PUBLISHED_AT)
  private OffsetDateTime videoPublishedAt;

  public PlaylistItemContentDetails() {
  }

  @Deprecated
  public PlaylistItemContentDetails endAt(String endAt) {
    this.endAt = endAt;
    return this;
  }

  /**
   * The time, measured in seconds from the start of the video, when the video should stop playing. (The playlist owner can specify the times when the video should start and stop playing when the video is played in the context of the playlist.) By default, assume that the video.endTime is the end of the video.
   * @return endAt
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getEndAt() {
    return endAt;
  }

  @Deprecated
  public void setEndAt(String endAt) {
    this.endAt = endAt;
  }


  public PlaylistItemContentDetails note(String note) {
    this.note = note;
    return this;
  }

  /**
   * A user-generated note for this item.
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  @Deprecated
  public PlaylistItemContentDetails startAt(String startAt) {
    this.startAt = startAt;
    return this;
  }

  /**
   * The time, measured in seconds from the start of the video, when the video should start playing. (The playlist owner can specify the times when the video should start and stop playing when the video is played in the context of the playlist.) The default value is 0.
   * @return startAt
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getStartAt() {
    return startAt;
  }

  @Deprecated
  public void setStartAt(String startAt) {
    this.startAt = startAt;
  }


  public PlaylistItemContentDetails videoId(String videoId) {
    this.videoId = videoId;
    return this;
  }

  /**
   * The ID that YouTube uses to uniquely identify a video. To retrieve the video resource, set the id query parameter to this value in your API request.
   * @return videoId
   */
  @javax.annotation.Nullable
  public String getVideoId() {
    return videoId;
  }

  public void setVideoId(String videoId) {
    this.videoId = videoId;
  }


  public PlaylistItemContentDetails videoPublishedAt(OffsetDateTime videoPublishedAt) {
    this.videoPublishedAt = videoPublishedAt;
    return this;
  }

  /**
   * The date and time that the video was published to YouTube.
   * @return videoPublishedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getVideoPublishedAt() {
    return videoPublishedAt;
  }

  public void setVideoPublishedAt(OffsetDateTime videoPublishedAt) {
    this.videoPublishedAt = videoPublishedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlaylistItemContentDetails playlistItemContentDetails = (PlaylistItemContentDetails) o;
    return Objects.equals(this.endAt, playlistItemContentDetails.endAt) &&
        Objects.equals(this.note, playlistItemContentDetails.note) &&
        Objects.equals(this.startAt, playlistItemContentDetails.startAt) &&
        Objects.equals(this.videoId, playlistItemContentDetails.videoId) &&
        Objects.equals(this.videoPublishedAt, playlistItemContentDetails.videoPublishedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endAt, note, startAt, videoId, videoPublishedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlaylistItemContentDetails {\n");
    sb.append("    endAt: ").append(toIndentedString(endAt)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    startAt: ").append(toIndentedString(startAt)).append("\n");
    sb.append("    videoId: ").append(toIndentedString(videoId)).append("\n");
    sb.append("    videoPublishedAt: ").append(toIndentedString(videoPublishedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endAt");
    openapiFields.add("note");
    openapiFields.add("startAt");
    openapiFields.add("videoId");
    openapiFields.add("videoPublishedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlaylistItemContentDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlaylistItemContentDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlaylistItemContentDetails is not found in the empty JSON string", PlaylistItemContentDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlaylistItemContentDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlaylistItemContentDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("endAt") != null && !jsonObj.get("endAt").isJsonNull()) && !jsonObj.get("endAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endAt").toString()));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if ((jsonObj.get("startAt") != null && !jsonObj.get("startAt").isJsonNull()) && !jsonObj.get("startAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startAt").toString()));
      }
      if ((jsonObj.get("videoId") != null && !jsonObj.get("videoId").isJsonNull()) && !jsonObj.get("videoId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `videoId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("videoId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlaylistItemContentDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlaylistItemContentDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlaylistItemContentDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlaylistItemContentDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<PlaylistItemContentDetails>() {
           @Override
           public void write(JsonWriter out, PlaylistItemContentDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlaylistItemContentDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlaylistItemContentDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlaylistItemContentDetails
   * @throws IOException if the JSON string is invalid with respect to PlaylistItemContentDetails
   */
  public static PlaylistItemContentDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlaylistItemContentDetails.class);
  }

  /**
   * Convert an instance of PlaylistItemContentDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

