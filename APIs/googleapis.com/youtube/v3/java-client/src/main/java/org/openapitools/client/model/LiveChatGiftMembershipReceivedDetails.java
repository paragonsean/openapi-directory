/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LiveChatGiftMembershipReceivedDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LiveChatGiftMembershipReceivedDetails {
  public static final String SERIALIZED_NAME_ASSOCIATED_MEMBERSHIP_GIFTING_MESSAGE_ID = "associatedMembershipGiftingMessageId";
  @SerializedName(SERIALIZED_NAME_ASSOCIATED_MEMBERSHIP_GIFTING_MESSAGE_ID)
  private String associatedMembershipGiftingMessageId;

  public static final String SERIALIZED_NAME_GIFTER_CHANNEL_ID = "gifterChannelId";
  @SerializedName(SERIALIZED_NAME_GIFTER_CHANNEL_ID)
  private String gifterChannelId;

  public static final String SERIALIZED_NAME_MEMBER_LEVEL_NAME = "memberLevelName";
  @SerializedName(SERIALIZED_NAME_MEMBER_LEVEL_NAME)
  private String memberLevelName;

  public LiveChatGiftMembershipReceivedDetails() {
  }

  public LiveChatGiftMembershipReceivedDetails associatedMembershipGiftingMessageId(String associatedMembershipGiftingMessageId) {
    this.associatedMembershipGiftingMessageId = associatedMembershipGiftingMessageId;
    return this;
  }

  /**
   * The ID of the membership gifting message that is related to this gift membership. This ID will always refer to a message whose type is &#39;membershipGiftingEvent&#39;.
   * @return associatedMembershipGiftingMessageId
   */
  @javax.annotation.Nullable
  public String getAssociatedMembershipGiftingMessageId() {
    return associatedMembershipGiftingMessageId;
  }

  public void setAssociatedMembershipGiftingMessageId(String associatedMembershipGiftingMessageId) {
    this.associatedMembershipGiftingMessageId = associatedMembershipGiftingMessageId;
  }


  public LiveChatGiftMembershipReceivedDetails gifterChannelId(String gifterChannelId) {
    this.gifterChannelId = gifterChannelId;
    return this;
  }

  /**
   * The ID of the user that made the membership gifting purchase. This matches the &#x60;snippet.authorChannelId&#x60; of the associated membership gifting message.
   * @return gifterChannelId
   */
  @javax.annotation.Nullable
  public String getGifterChannelId() {
    return gifterChannelId;
  }

  public void setGifterChannelId(String gifterChannelId) {
    this.gifterChannelId = gifterChannelId;
  }


  public LiveChatGiftMembershipReceivedDetails memberLevelName(String memberLevelName) {
    this.memberLevelName = memberLevelName;
    return this;
  }

  /**
   * The name of the Level at which the viewer is a member. This matches the &#x60;snippet.membershipGiftingDetails.giftMembershipsLevelName&#x60; of the associated membership gifting message. The Level names are defined by the YouTube channel offering the Membership. In some situations this field isn&#39;t filled.
   * @return memberLevelName
   */
  @javax.annotation.Nullable
  public String getMemberLevelName() {
    return memberLevelName;
  }

  public void setMemberLevelName(String memberLevelName) {
    this.memberLevelName = memberLevelName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LiveChatGiftMembershipReceivedDetails liveChatGiftMembershipReceivedDetails = (LiveChatGiftMembershipReceivedDetails) o;
    return Objects.equals(this.associatedMembershipGiftingMessageId, liveChatGiftMembershipReceivedDetails.associatedMembershipGiftingMessageId) &&
        Objects.equals(this.gifterChannelId, liveChatGiftMembershipReceivedDetails.gifterChannelId) &&
        Objects.equals(this.memberLevelName, liveChatGiftMembershipReceivedDetails.memberLevelName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(associatedMembershipGiftingMessageId, gifterChannelId, memberLevelName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LiveChatGiftMembershipReceivedDetails {\n");
    sb.append("    associatedMembershipGiftingMessageId: ").append(toIndentedString(associatedMembershipGiftingMessageId)).append("\n");
    sb.append("    gifterChannelId: ").append(toIndentedString(gifterChannelId)).append("\n");
    sb.append("    memberLevelName: ").append(toIndentedString(memberLevelName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("associatedMembershipGiftingMessageId");
    openapiFields.add("gifterChannelId");
    openapiFields.add("memberLevelName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LiveChatGiftMembershipReceivedDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LiveChatGiftMembershipReceivedDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LiveChatGiftMembershipReceivedDetails is not found in the empty JSON string", LiveChatGiftMembershipReceivedDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LiveChatGiftMembershipReceivedDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LiveChatGiftMembershipReceivedDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("associatedMembershipGiftingMessageId") != null && !jsonObj.get("associatedMembershipGiftingMessageId").isJsonNull()) && !jsonObj.get("associatedMembershipGiftingMessageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `associatedMembershipGiftingMessageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("associatedMembershipGiftingMessageId").toString()));
      }
      if ((jsonObj.get("gifterChannelId") != null && !jsonObj.get("gifterChannelId").isJsonNull()) && !jsonObj.get("gifterChannelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gifterChannelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gifterChannelId").toString()));
      }
      if ((jsonObj.get("memberLevelName") != null && !jsonObj.get("memberLevelName").isJsonNull()) && !jsonObj.get("memberLevelName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `memberLevelName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("memberLevelName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LiveChatGiftMembershipReceivedDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LiveChatGiftMembershipReceivedDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LiveChatGiftMembershipReceivedDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LiveChatGiftMembershipReceivedDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<LiveChatGiftMembershipReceivedDetails>() {
           @Override
           public void write(JsonWriter out, LiveChatGiftMembershipReceivedDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LiveChatGiftMembershipReceivedDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LiveChatGiftMembershipReceivedDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LiveChatGiftMembershipReceivedDetails
   * @throws IOException if the JSON string is invalid with respect to LiveChatGiftMembershipReceivedDetails
   */
  public static LiveChatGiftMembershipReceivedDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LiveChatGiftMembershipReceivedDetails.class);
  }

  /**
   * Convert an instance of LiveChatGiftMembershipReceivedDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

