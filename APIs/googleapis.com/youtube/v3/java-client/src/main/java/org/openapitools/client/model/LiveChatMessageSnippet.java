/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.LiveChatFanFundingEventDetails;
import org.openapitools.client.model.LiveChatGiftMembershipReceivedDetails;
import org.openapitools.client.model.LiveChatMemberMilestoneChatDetails;
import org.openapitools.client.model.LiveChatMembershipGiftingDetails;
import org.openapitools.client.model.LiveChatMessageDeletedDetails;
import org.openapitools.client.model.LiveChatMessageRetractedDetails;
import org.openapitools.client.model.LiveChatNewSponsorDetails;
import org.openapitools.client.model.LiveChatPollDetails;
import org.openapitools.client.model.LiveChatSuperChatDetails;
import org.openapitools.client.model.LiveChatSuperStickerDetails;
import org.openapitools.client.model.LiveChatTextMessageDetails;
import org.openapitools.client.model.LiveChatUserBannedMessageDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Next ID: 34
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LiveChatMessageSnippet {
  public static final String SERIALIZED_NAME_AUTHOR_CHANNEL_ID = "authorChannelId";
  @SerializedName(SERIALIZED_NAME_AUTHOR_CHANNEL_ID)
  private String authorChannelId;

  public static final String SERIALIZED_NAME_DISPLAY_MESSAGE = "displayMessage";
  @SerializedName(SERIALIZED_NAME_DISPLAY_MESSAGE)
  private String displayMessage;

  public static final String SERIALIZED_NAME_FAN_FUNDING_EVENT_DETAILS = "fanFundingEventDetails";
  @SerializedName(SERIALIZED_NAME_FAN_FUNDING_EVENT_DETAILS)
  private LiveChatFanFundingEventDetails fanFundingEventDetails;

  public static final String SERIALIZED_NAME_GIFT_MEMBERSHIP_RECEIVED_DETAILS = "giftMembershipReceivedDetails";
  @SerializedName(SERIALIZED_NAME_GIFT_MEMBERSHIP_RECEIVED_DETAILS)
  private LiveChatGiftMembershipReceivedDetails giftMembershipReceivedDetails;

  public static final String SERIALIZED_NAME_HAS_DISPLAY_CONTENT = "hasDisplayContent";
  @SerializedName(SERIALIZED_NAME_HAS_DISPLAY_CONTENT)
  private Boolean hasDisplayContent;

  public static final String SERIALIZED_NAME_LIVE_CHAT_ID = "liveChatId";
  @SerializedName(SERIALIZED_NAME_LIVE_CHAT_ID)
  private String liveChatId;

  public static final String SERIALIZED_NAME_MEMBER_MILESTONE_CHAT_DETAILS = "memberMilestoneChatDetails";
  @SerializedName(SERIALIZED_NAME_MEMBER_MILESTONE_CHAT_DETAILS)
  private LiveChatMemberMilestoneChatDetails memberMilestoneChatDetails;

  public static final String SERIALIZED_NAME_MEMBERSHIP_GIFTING_DETAILS = "membershipGiftingDetails";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_GIFTING_DETAILS)
  private LiveChatMembershipGiftingDetails membershipGiftingDetails;

  public static final String SERIALIZED_NAME_MESSAGE_DELETED_DETAILS = "messageDeletedDetails";
  @SerializedName(SERIALIZED_NAME_MESSAGE_DELETED_DETAILS)
  private LiveChatMessageDeletedDetails messageDeletedDetails;

  public static final String SERIALIZED_NAME_MESSAGE_RETRACTED_DETAILS = "messageRetractedDetails";
  @SerializedName(SERIALIZED_NAME_MESSAGE_RETRACTED_DETAILS)
  private LiveChatMessageRetractedDetails messageRetractedDetails;

  public static final String SERIALIZED_NAME_NEW_SPONSOR_DETAILS = "newSponsorDetails";
  @SerializedName(SERIALIZED_NAME_NEW_SPONSOR_DETAILS)
  private LiveChatNewSponsorDetails newSponsorDetails;

  public static final String SERIALIZED_NAME_POLL_DETAILS = "pollDetails";
  @SerializedName(SERIALIZED_NAME_POLL_DETAILS)
  private LiveChatPollDetails pollDetails;

  public static final String SERIALIZED_NAME_PUBLISHED_AT = "publishedAt";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_AT)
  private OffsetDateTime publishedAt;

  public static final String SERIALIZED_NAME_SUPER_CHAT_DETAILS = "superChatDetails";
  @SerializedName(SERIALIZED_NAME_SUPER_CHAT_DETAILS)
  private LiveChatSuperChatDetails superChatDetails;

  public static final String SERIALIZED_NAME_SUPER_STICKER_DETAILS = "superStickerDetails";
  @SerializedName(SERIALIZED_NAME_SUPER_STICKER_DETAILS)
  private LiveChatSuperStickerDetails superStickerDetails;

  public static final String SERIALIZED_NAME_TEXT_MESSAGE_DETAILS = "textMessageDetails";
  @SerializedName(SERIALIZED_NAME_TEXT_MESSAGE_DETAILS)
  private LiveChatTextMessageDetails textMessageDetails;

  /**
   * The type of message, this will always be present, it determines the contents of the message as well as which fields will be present.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    INVALID_TYPE("invalidType"),
    
    TEXT_MESSAGE_EVENT("textMessageEvent"),
    
    TOMBSTONE("tombstone"),
    
    FAN_FUNDING_EVENT("fanFundingEvent"),
    
    CHAT_ENDED_EVENT("chatEndedEvent"),
    
    SPONSOR_ONLY_MODE_STARTED_EVENT("sponsorOnlyModeStartedEvent"),
    
    SPONSOR_ONLY_MODE_ENDED_EVENT("sponsorOnlyModeEndedEvent"),
    
    NEW_SPONSOR_EVENT("newSponsorEvent"),
    
    MEMBER_MILESTONE_CHAT_EVENT("memberMilestoneChatEvent"),
    
    MEMBERSHIP_GIFTING_EVENT("membershipGiftingEvent"),
    
    GIFT_MEMBERSHIP_RECEIVED_EVENT("giftMembershipReceivedEvent"),
    
    MESSAGE_DELETED_EVENT("messageDeletedEvent"),
    
    MESSAGE_RETRACTED_EVENT("messageRetractedEvent"),
    
    USER_BANNED_EVENT("userBannedEvent"),
    
    SUPER_CHAT_EVENT("superChatEvent"),
    
    SUPER_STICKER_EVENT("superStickerEvent"),
    
    POLL_EVENT("pollEvent");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_USER_BANNED_DETAILS = "userBannedDetails";
  @SerializedName(SERIALIZED_NAME_USER_BANNED_DETAILS)
  private LiveChatUserBannedMessageDetails userBannedDetails;

  public LiveChatMessageSnippet() {
  }

  public LiveChatMessageSnippet authorChannelId(String authorChannelId) {
    this.authorChannelId = authorChannelId;
    return this;
  }

  /**
   * The ID of the user that authored this message, this field is not always filled. textMessageEvent - the user that wrote the message fanFundingEvent - the user that funded the broadcast newSponsorEvent - the user that just became a sponsor memberMilestoneChatEvent - the member that sent the message membershipGiftingEvent - the user that made the purchase giftMembershipReceivedEvent - the user that received the gift membership messageDeletedEvent - the moderator that took the action messageRetractedEvent - the author that retracted their message userBannedEvent - the moderator that took the action superChatEvent - the user that made the purchase superStickerEvent - the user that made the purchase pollEvent - the user that created the poll
   * @return authorChannelId
   */
  @javax.annotation.Nullable
  public String getAuthorChannelId() {
    return authorChannelId;
  }

  public void setAuthorChannelId(String authorChannelId) {
    this.authorChannelId = authorChannelId;
  }


  public LiveChatMessageSnippet displayMessage(String displayMessage) {
    this.displayMessage = displayMessage;
    return this;
  }

  /**
   * Contains a string that can be displayed to the user. If this field is not present the message is silent, at the moment only messages of type TOMBSTONE and CHAT_ENDED_EVENT are silent.
   * @return displayMessage
   */
  @javax.annotation.Nullable
  public String getDisplayMessage() {
    return displayMessage;
  }

  public void setDisplayMessage(String displayMessage) {
    this.displayMessage = displayMessage;
  }


  public LiveChatMessageSnippet fanFundingEventDetails(LiveChatFanFundingEventDetails fanFundingEventDetails) {
    this.fanFundingEventDetails = fanFundingEventDetails;
    return this;
  }

  /**
   * Get fanFundingEventDetails
   * @return fanFundingEventDetails
   */
  @javax.annotation.Nullable
  public LiveChatFanFundingEventDetails getFanFundingEventDetails() {
    return fanFundingEventDetails;
  }

  public void setFanFundingEventDetails(LiveChatFanFundingEventDetails fanFundingEventDetails) {
    this.fanFundingEventDetails = fanFundingEventDetails;
  }


  public LiveChatMessageSnippet giftMembershipReceivedDetails(LiveChatGiftMembershipReceivedDetails giftMembershipReceivedDetails) {
    this.giftMembershipReceivedDetails = giftMembershipReceivedDetails;
    return this;
  }

  /**
   * Get giftMembershipReceivedDetails
   * @return giftMembershipReceivedDetails
   */
  @javax.annotation.Nullable
  public LiveChatGiftMembershipReceivedDetails getGiftMembershipReceivedDetails() {
    return giftMembershipReceivedDetails;
  }

  public void setGiftMembershipReceivedDetails(LiveChatGiftMembershipReceivedDetails giftMembershipReceivedDetails) {
    this.giftMembershipReceivedDetails = giftMembershipReceivedDetails;
  }


  public LiveChatMessageSnippet hasDisplayContent(Boolean hasDisplayContent) {
    this.hasDisplayContent = hasDisplayContent;
    return this;
  }

  /**
   * Whether the message has display content that should be displayed to users.
   * @return hasDisplayContent
   */
  @javax.annotation.Nullable
  public Boolean getHasDisplayContent() {
    return hasDisplayContent;
  }

  public void setHasDisplayContent(Boolean hasDisplayContent) {
    this.hasDisplayContent = hasDisplayContent;
  }


  public LiveChatMessageSnippet liveChatId(String liveChatId) {
    this.liveChatId = liveChatId;
    return this;
  }

  /**
   * Get liveChatId
   * @return liveChatId
   */
  @javax.annotation.Nullable
  public String getLiveChatId() {
    return liveChatId;
  }

  public void setLiveChatId(String liveChatId) {
    this.liveChatId = liveChatId;
  }


  public LiveChatMessageSnippet memberMilestoneChatDetails(LiveChatMemberMilestoneChatDetails memberMilestoneChatDetails) {
    this.memberMilestoneChatDetails = memberMilestoneChatDetails;
    return this;
  }

  /**
   * Get memberMilestoneChatDetails
   * @return memberMilestoneChatDetails
   */
  @javax.annotation.Nullable
  public LiveChatMemberMilestoneChatDetails getMemberMilestoneChatDetails() {
    return memberMilestoneChatDetails;
  }

  public void setMemberMilestoneChatDetails(LiveChatMemberMilestoneChatDetails memberMilestoneChatDetails) {
    this.memberMilestoneChatDetails = memberMilestoneChatDetails;
  }


  public LiveChatMessageSnippet membershipGiftingDetails(LiveChatMembershipGiftingDetails membershipGiftingDetails) {
    this.membershipGiftingDetails = membershipGiftingDetails;
    return this;
  }

  /**
   * Get membershipGiftingDetails
   * @return membershipGiftingDetails
   */
  @javax.annotation.Nullable
  public LiveChatMembershipGiftingDetails getMembershipGiftingDetails() {
    return membershipGiftingDetails;
  }

  public void setMembershipGiftingDetails(LiveChatMembershipGiftingDetails membershipGiftingDetails) {
    this.membershipGiftingDetails = membershipGiftingDetails;
  }


  public LiveChatMessageSnippet messageDeletedDetails(LiveChatMessageDeletedDetails messageDeletedDetails) {
    this.messageDeletedDetails = messageDeletedDetails;
    return this;
  }

  /**
   * Get messageDeletedDetails
   * @return messageDeletedDetails
   */
  @javax.annotation.Nullable
  public LiveChatMessageDeletedDetails getMessageDeletedDetails() {
    return messageDeletedDetails;
  }

  public void setMessageDeletedDetails(LiveChatMessageDeletedDetails messageDeletedDetails) {
    this.messageDeletedDetails = messageDeletedDetails;
  }


  public LiveChatMessageSnippet messageRetractedDetails(LiveChatMessageRetractedDetails messageRetractedDetails) {
    this.messageRetractedDetails = messageRetractedDetails;
    return this;
  }

  /**
   * Get messageRetractedDetails
   * @return messageRetractedDetails
   */
  @javax.annotation.Nullable
  public LiveChatMessageRetractedDetails getMessageRetractedDetails() {
    return messageRetractedDetails;
  }

  public void setMessageRetractedDetails(LiveChatMessageRetractedDetails messageRetractedDetails) {
    this.messageRetractedDetails = messageRetractedDetails;
  }


  public LiveChatMessageSnippet newSponsorDetails(LiveChatNewSponsorDetails newSponsorDetails) {
    this.newSponsorDetails = newSponsorDetails;
    return this;
  }

  /**
   * Get newSponsorDetails
   * @return newSponsorDetails
   */
  @javax.annotation.Nullable
  public LiveChatNewSponsorDetails getNewSponsorDetails() {
    return newSponsorDetails;
  }

  public void setNewSponsorDetails(LiveChatNewSponsorDetails newSponsorDetails) {
    this.newSponsorDetails = newSponsorDetails;
  }


  public LiveChatMessageSnippet pollDetails(LiveChatPollDetails pollDetails) {
    this.pollDetails = pollDetails;
    return this;
  }

  /**
   * Get pollDetails
   * @return pollDetails
   */
  @javax.annotation.Nullable
  public LiveChatPollDetails getPollDetails() {
    return pollDetails;
  }

  public void setPollDetails(LiveChatPollDetails pollDetails) {
    this.pollDetails = pollDetails;
  }


  public LiveChatMessageSnippet publishedAt(OffsetDateTime publishedAt) {
    this.publishedAt = publishedAt;
    return this;
  }

  /**
   * The date and time when the message was orignally published.
   * @return publishedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPublishedAt() {
    return publishedAt;
  }

  public void setPublishedAt(OffsetDateTime publishedAt) {
    this.publishedAt = publishedAt;
  }


  public LiveChatMessageSnippet superChatDetails(LiveChatSuperChatDetails superChatDetails) {
    this.superChatDetails = superChatDetails;
    return this;
  }

  /**
   * Get superChatDetails
   * @return superChatDetails
   */
  @javax.annotation.Nullable
  public LiveChatSuperChatDetails getSuperChatDetails() {
    return superChatDetails;
  }

  public void setSuperChatDetails(LiveChatSuperChatDetails superChatDetails) {
    this.superChatDetails = superChatDetails;
  }


  public LiveChatMessageSnippet superStickerDetails(LiveChatSuperStickerDetails superStickerDetails) {
    this.superStickerDetails = superStickerDetails;
    return this;
  }

  /**
   * Get superStickerDetails
   * @return superStickerDetails
   */
  @javax.annotation.Nullable
  public LiveChatSuperStickerDetails getSuperStickerDetails() {
    return superStickerDetails;
  }

  public void setSuperStickerDetails(LiveChatSuperStickerDetails superStickerDetails) {
    this.superStickerDetails = superStickerDetails;
  }


  public LiveChatMessageSnippet textMessageDetails(LiveChatTextMessageDetails textMessageDetails) {
    this.textMessageDetails = textMessageDetails;
    return this;
  }

  /**
   * Get textMessageDetails
   * @return textMessageDetails
   */
  @javax.annotation.Nullable
  public LiveChatTextMessageDetails getTextMessageDetails() {
    return textMessageDetails;
  }

  public void setTextMessageDetails(LiveChatTextMessageDetails textMessageDetails) {
    this.textMessageDetails = textMessageDetails;
  }


  public LiveChatMessageSnippet type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of message, this will always be present, it determines the contents of the message as well as which fields will be present.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public LiveChatMessageSnippet userBannedDetails(LiveChatUserBannedMessageDetails userBannedDetails) {
    this.userBannedDetails = userBannedDetails;
    return this;
  }

  /**
   * Get userBannedDetails
   * @return userBannedDetails
   */
  @javax.annotation.Nullable
  public LiveChatUserBannedMessageDetails getUserBannedDetails() {
    return userBannedDetails;
  }

  public void setUserBannedDetails(LiveChatUserBannedMessageDetails userBannedDetails) {
    this.userBannedDetails = userBannedDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LiveChatMessageSnippet liveChatMessageSnippet = (LiveChatMessageSnippet) o;
    return Objects.equals(this.authorChannelId, liveChatMessageSnippet.authorChannelId) &&
        Objects.equals(this.displayMessage, liveChatMessageSnippet.displayMessage) &&
        Objects.equals(this.fanFundingEventDetails, liveChatMessageSnippet.fanFundingEventDetails) &&
        Objects.equals(this.giftMembershipReceivedDetails, liveChatMessageSnippet.giftMembershipReceivedDetails) &&
        Objects.equals(this.hasDisplayContent, liveChatMessageSnippet.hasDisplayContent) &&
        Objects.equals(this.liveChatId, liveChatMessageSnippet.liveChatId) &&
        Objects.equals(this.memberMilestoneChatDetails, liveChatMessageSnippet.memberMilestoneChatDetails) &&
        Objects.equals(this.membershipGiftingDetails, liveChatMessageSnippet.membershipGiftingDetails) &&
        Objects.equals(this.messageDeletedDetails, liveChatMessageSnippet.messageDeletedDetails) &&
        Objects.equals(this.messageRetractedDetails, liveChatMessageSnippet.messageRetractedDetails) &&
        Objects.equals(this.newSponsorDetails, liveChatMessageSnippet.newSponsorDetails) &&
        Objects.equals(this.pollDetails, liveChatMessageSnippet.pollDetails) &&
        Objects.equals(this.publishedAt, liveChatMessageSnippet.publishedAt) &&
        Objects.equals(this.superChatDetails, liveChatMessageSnippet.superChatDetails) &&
        Objects.equals(this.superStickerDetails, liveChatMessageSnippet.superStickerDetails) &&
        Objects.equals(this.textMessageDetails, liveChatMessageSnippet.textMessageDetails) &&
        Objects.equals(this.type, liveChatMessageSnippet.type) &&
        Objects.equals(this.userBannedDetails, liveChatMessageSnippet.userBannedDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorChannelId, displayMessage, fanFundingEventDetails, giftMembershipReceivedDetails, hasDisplayContent, liveChatId, memberMilestoneChatDetails, membershipGiftingDetails, messageDeletedDetails, messageRetractedDetails, newSponsorDetails, pollDetails, publishedAt, superChatDetails, superStickerDetails, textMessageDetails, type, userBannedDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LiveChatMessageSnippet {\n");
    sb.append("    authorChannelId: ").append(toIndentedString(authorChannelId)).append("\n");
    sb.append("    displayMessage: ").append(toIndentedString(displayMessage)).append("\n");
    sb.append("    fanFundingEventDetails: ").append(toIndentedString(fanFundingEventDetails)).append("\n");
    sb.append("    giftMembershipReceivedDetails: ").append(toIndentedString(giftMembershipReceivedDetails)).append("\n");
    sb.append("    hasDisplayContent: ").append(toIndentedString(hasDisplayContent)).append("\n");
    sb.append("    liveChatId: ").append(toIndentedString(liveChatId)).append("\n");
    sb.append("    memberMilestoneChatDetails: ").append(toIndentedString(memberMilestoneChatDetails)).append("\n");
    sb.append("    membershipGiftingDetails: ").append(toIndentedString(membershipGiftingDetails)).append("\n");
    sb.append("    messageDeletedDetails: ").append(toIndentedString(messageDeletedDetails)).append("\n");
    sb.append("    messageRetractedDetails: ").append(toIndentedString(messageRetractedDetails)).append("\n");
    sb.append("    newSponsorDetails: ").append(toIndentedString(newSponsorDetails)).append("\n");
    sb.append("    pollDetails: ").append(toIndentedString(pollDetails)).append("\n");
    sb.append("    publishedAt: ").append(toIndentedString(publishedAt)).append("\n");
    sb.append("    superChatDetails: ").append(toIndentedString(superChatDetails)).append("\n");
    sb.append("    superStickerDetails: ").append(toIndentedString(superStickerDetails)).append("\n");
    sb.append("    textMessageDetails: ").append(toIndentedString(textMessageDetails)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    userBannedDetails: ").append(toIndentedString(userBannedDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorChannelId");
    openapiFields.add("displayMessage");
    openapiFields.add("fanFundingEventDetails");
    openapiFields.add("giftMembershipReceivedDetails");
    openapiFields.add("hasDisplayContent");
    openapiFields.add("liveChatId");
    openapiFields.add("memberMilestoneChatDetails");
    openapiFields.add("membershipGiftingDetails");
    openapiFields.add("messageDeletedDetails");
    openapiFields.add("messageRetractedDetails");
    openapiFields.add("newSponsorDetails");
    openapiFields.add("pollDetails");
    openapiFields.add("publishedAt");
    openapiFields.add("superChatDetails");
    openapiFields.add("superStickerDetails");
    openapiFields.add("textMessageDetails");
    openapiFields.add("type");
    openapiFields.add("userBannedDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LiveChatMessageSnippet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LiveChatMessageSnippet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LiveChatMessageSnippet is not found in the empty JSON string", LiveChatMessageSnippet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LiveChatMessageSnippet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LiveChatMessageSnippet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("authorChannelId") != null && !jsonObj.get("authorChannelId").isJsonNull()) && !jsonObj.get("authorChannelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorChannelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorChannelId").toString()));
      }
      if ((jsonObj.get("displayMessage") != null && !jsonObj.get("displayMessage").isJsonNull()) && !jsonObj.get("displayMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayMessage").toString()));
      }
      // validate the optional field `fanFundingEventDetails`
      if (jsonObj.get("fanFundingEventDetails") != null && !jsonObj.get("fanFundingEventDetails").isJsonNull()) {
        LiveChatFanFundingEventDetails.validateJsonElement(jsonObj.get("fanFundingEventDetails"));
      }
      // validate the optional field `giftMembershipReceivedDetails`
      if (jsonObj.get("giftMembershipReceivedDetails") != null && !jsonObj.get("giftMembershipReceivedDetails").isJsonNull()) {
        LiveChatGiftMembershipReceivedDetails.validateJsonElement(jsonObj.get("giftMembershipReceivedDetails"));
      }
      if ((jsonObj.get("liveChatId") != null && !jsonObj.get("liveChatId").isJsonNull()) && !jsonObj.get("liveChatId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `liveChatId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("liveChatId").toString()));
      }
      // validate the optional field `memberMilestoneChatDetails`
      if (jsonObj.get("memberMilestoneChatDetails") != null && !jsonObj.get("memberMilestoneChatDetails").isJsonNull()) {
        LiveChatMemberMilestoneChatDetails.validateJsonElement(jsonObj.get("memberMilestoneChatDetails"));
      }
      // validate the optional field `membershipGiftingDetails`
      if (jsonObj.get("membershipGiftingDetails") != null && !jsonObj.get("membershipGiftingDetails").isJsonNull()) {
        LiveChatMembershipGiftingDetails.validateJsonElement(jsonObj.get("membershipGiftingDetails"));
      }
      // validate the optional field `messageDeletedDetails`
      if (jsonObj.get("messageDeletedDetails") != null && !jsonObj.get("messageDeletedDetails").isJsonNull()) {
        LiveChatMessageDeletedDetails.validateJsonElement(jsonObj.get("messageDeletedDetails"));
      }
      // validate the optional field `messageRetractedDetails`
      if (jsonObj.get("messageRetractedDetails") != null && !jsonObj.get("messageRetractedDetails").isJsonNull()) {
        LiveChatMessageRetractedDetails.validateJsonElement(jsonObj.get("messageRetractedDetails"));
      }
      // validate the optional field `newSponsorDetails`
      if (jsonObj.get("newSponsorDetails") != null && !jsonObj.get("newSponsorDetails").isJsonNull()) {
        LiveChatNewSponsorDetails.validateJsonElement(jsonObj.get("newSponsorDetails"));
      }
      // validate the optional field `pollDetails`
      if (jsonObj.get("pollDetails") != null && !jsonObj.get("pollDetails").isJsonNull()) {
        LiveChatPollDetails.validateJsonElement(jsonObj.get("pollDetails"));
      }
      // validate the optional field `superChatDetails`
      if (jsonObj.get("superChatDetails") != null && !jsonObj.get("superChatDetails").isJsonNull()) {
        LiveChatSuperChatDetails.validateJsonElement(jsonObj.get("superChatDetails"));
      }
      // validate the optional field `superStickerDetails`
      if (jsonObj.get("superStickerDetails") != null && !jsonObj.get("superStickerDetails").isJsonNull()) {
        LiveChatSuperStickerDetails.validateJsonElement(jsonObj.get("superStickerDetails"));
      }
      // validate the optional field `textMessageDetails`
      if (jsonObj.get("textMessageDetails") != null && !jsonObj.get("textMessageDetails").isJsonNull()) {
        LiveChatTextMessageDetails.validateJsonElement(jsonObj.get("textMessageDetails"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      // validate the optional field `userBannedDetails`
      if (jsonObj.get("userBannedDetails") != null && !jsonObj.get("userBannedDetails").isJsonNull()) {
        LiveChatUserBannedMessageDetails.validateJsonElement(jsonObj.get("userBannedDetails"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LiveChatMessageSnippet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LiveChatMessageSnippet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LiveChatMessageSnippet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LiveChatMessageSnippet.class));

       return (TypeAdapter<T>) new TypeAdapter<LiveChatMessageSnippet>() {
           @Override
           public void write(JsonWriter out, LiveChatMessageSnippet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LiveChatMessageSnippet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LiveChatMessageSnippet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LiveChatMessageSnippet
   * @throws IOException if the JSON string is invalid with respect to LiveChatMessageSnippet
   */
  public static LiveChatMessageSnippet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LiveChatMessageSnippet.class);
  }

  /**
   * Convert an instance of LiveChatMessageSnippet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

