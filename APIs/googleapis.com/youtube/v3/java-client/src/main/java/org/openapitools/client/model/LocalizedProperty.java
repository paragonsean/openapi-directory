/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LanguageTag;
import org.openapitools.client.model.LocalizedString;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LocalizedProperty
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LocalizedProperty {
  public static final String SERIALIZED_NAME_DEFAULT_LANGUAGE = "defaultLanguage";
  @SerializedName(SERIALIZED_NAME_DEFAULT_LANGUAGE)
  private LanguageTag defaultLanguage;

  public static final String SERIALIZED_NAME_LOCALIZED = "localized";
  @SerializedName(SERIALIZED_NAME_LOCALIZED)
  private List<LocalizedString> localized = new ArrayList<>();

  public LocalizedProperty() {
  }

  public LocalizedProperty defaultLanguage(LanguageTag defaultLanguage) {
    this.defaultLanguage = defaultLanguage;
    return this;
  }

  /**
   * Get defaultLanguage
   * @return defaultLanguage
   */
  @javax.annotation.Nullable
  public LanguageTag getDefaultLanguage() {
    return defaultLanguage;
  }

  public void setDefaultLanguage(LanguageTag defaultLanguage) {
    this.defaultLanguage = defaultLanguage;
  }


  public LocalizedProperty localized(List<LocalizedString> localized) {
    this.localized = localized;
    return this;
  }

  public LocalizedProperty addLocalizedItem(LocalizedString localizedItem) {
    if (this.localized == null) {
      this.localized = new ArrayList<>();
    }
    this.localized.add(localizedItem);
    return this;
  }

  /**
   * Get localized
   * @return localized
   */
  @javax.annotation.Nullable
  public List<LocalizedString> getLocalized() {
    return localized;
  }

  public void setLocalized(List<LocalizedString> localized) {
    this.localized = localized;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LocalizedProperty localizedProperty = (LocalizedProperty) o;
    return Objects.equals(this.defaultLanguage, localizedProperty.defaultLanguage) &&
        Objects.equals(this.localized, localizedProperty.localized);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultLanguage, localized);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LocalizedProperty {\n");
    sb.append("    defaultLanguage: ").append(toIndentedString(defaultLanguage)).append("\n");
    sb.append("    localized: ").append(toIndentedString(localized)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("defaultLanguage");
    openapiFields.add("localized");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LocalizedProperty
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LocalizedProperty.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LocalizedProperty is not found in the empty JSON string", LocalizedProperty.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LocalizedProperty.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LocalizedProperty` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `defaultLanguage`
      if (jsonObj.get("defaultLanguage") != null && !jsonObj.get("defaultLanguage").isJsonNull()) {
        LanguageTag.validateJsonElement(jsonObj.get("defaultLanguage"));
      }
      if (jsonObj.get("localized") != null && !jsonObj.get("localized").isJsonNull()) {
        JsonArray jsonArraylocalized = jsonObj.getAsJsonArray("localized");
        if (jsonArraylocalized != null) {
          // ensure the json data is an array
          if (!jsonObj.get("localized").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `localized` to be an array in the JSON string but got `%s`", jsonObj.get("localized").toString()));
          }

          // validate the optional field `localized` (array)
          for (int i = 0; i < jsonArraylocalized.size(); i++) {
            LocalizedString.validateJsonElement(jsonArraylocalized.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LocalizedProperty.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LocalizedProperty' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LocalizedProperty> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LocalizedProperty.class));

       return (TypeAdapter<T>) new TypeAdapter<LocalizedProperty>() {
           @Override
           public void write(JsonWriter out, LocalizedProperty value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LocalizedProperty read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LocalizedProperty given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LocalizedProperty
   * @throws IOException if the JSON string is invalid with respect to LocalizedProperty
   */
  public static LocalizedProperty fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LocalizedProperty.class);
  }

  /**
   * Convert an instance of LocalizedProperty to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

