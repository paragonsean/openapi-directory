/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Statistics about a channel: number of subscribers, number of videos in the channel, etc.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChannelStatistics {
  public static final String SERIALIZED_NAME_COMMENT_COUNT = "commentCount";
  @SerializedName(SERIALIZED_NAME_COMMENT_COUNT)
  private String commentCount;

  public static final String SERIALIZED_NAME_HIDDEN_SUBSCRIBER_COUNT = "hiddenSubscriberCount";
  @SerializedName(SERIALIZED_NAME_HIDDEN_SUBSCRIBER_COUNT)
  private Boolean hiddenSubscriberCount;

  public static final String SERIALIZED_NAME_SUBSCRIBER_COUNT = "subscriberCount";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBER_COUNT)
  private String subscriberCount;

  public static final String SERIALIZED_NAME_VIDEO_COUNT = "videoCount";
  @SerializedName(SERIALIZED_NAME_VIDEO_COUNT)
  private String videoCount;

  public static final String SERIALIZED_NAME_VIEW_COUNT = "viewCount";
  @SerializedName(SERIALIZED_NAME_VIEW_COUNT)
  private String viewCount;

  public ChannelStatistics() {
  }

  public ChannelStatistics commentCount(String commentCount) {
    this.commentCount = commentCount;
    return this;
  }

  /**
   * The number of comments for the channel.
   * @return commentCount
   */
  @javax.annotation.Nullable
  public String getCommentCount() {
    return commentCount;
  }

  public void setCommentCount(String commentCount) {
    this.commentCount = commentCount;
  }


  public ChannelStatistics hiddenSubscriberCount(Boolean hiddenSubscriberCount) {
    this.hiddenSubscriberCount = hiddenSubscriberCount;
    return this;
  }

  /**
   * Whether or not the number of subscribers is shown for this user.
   * @return hiddenSubscriberCount
   */
  @javax.annotation.Nullable
  public Boolean getHiddenSubscriberCount() {
    return hiddenSubscriberCount;
  }

  public void setHiddenSubscriberCount(Boolean hiddenSubscriberCount) {
    this.hiddenSubscriberCount = hiddenSubscriberCount;
  }


  public ChannelStatistics subscriberCount(String subscriberCount) {
    this.subscriberCount = subscriberCount;
    return this;
  }

  /**
   * The number of subscribers that the channel has.
   * @return subscriberCount
   */
  @javax.annotation.Nullable
  public String getSubscriberCount() {
    return subscriberCount;
  }

  public void setSubscriberCount(String subscriberCount) {
    this.subscriberCount = subscriberCount;
  }


  public ChannelStatistics videoCount(String videoCount) {
    this.videoCount = videoCount;
    return this;
  }

  /**
   * The number of videos uploaded to the channel.
   * @return videoCount
   */
  @javax.annotation.Nullable
  public String getVideoCount() {
    return videoCount;
  }

  public void setVideoCount(String videoCount) {
    this.videoCount = videoCount;
  }


  public ChannelStatistics viewCount(String viewCount) {
    this.viewCount = viewCount;
    return this;
  }

  /**
   * The number of times the channel has been viewed.
   * @return viewCount
   */
  @javax.annotation.Nullable
  public String getViewCount() {
    return viewCount;
  }

  public void setViewCount(String viewCount) {
    this.viewCount = viewCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChannelStatistics channelStatistics = (ChannelStatistics) o;
    return Objects.equals(this.commentCount, channelStatistics.commentCount) &&
        Objects.equals(this.hiddenSubscriberCount, channelStatistics.hiddenSubscriberCount) &&
        Objects.equals(this.subscriberCount, channelStatistics.subscriberCount) &&
        Objects.equals(this.videoCount, channelStatistics.videoCount) &&
        Objects.equals(this.viewCount, channelStatistics.viewCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commentCount, hiddenSubscriberCount, subscriberCount, videoCount, viewCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChannelStatistics {\n");
    sb.append("    commentCount: ").append(toIndentedString(commentCount)).append("\n");
    sb.append("    hiddenSubscriberCount: ").append(toIndentedString(hiddenSubscriberCount)).append("\n");
    sb.append("    subscriberCount: ").append(toIndentedString(subscriberCount)).append("\n");
    sb.append("    videoCount: ").append(toIndentedString(videoCount)).append("\n");
    sb.append("    viewCount: ").append(toIndentedString(viewCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commentCount");
    openapiFields.add("hiddenSubscriberCount");
    openapiFields.add("subscriberCount");
    openapiFields.add("videoCount");
    openapiFields.add("viewCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChannelStatistics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChannelStatistics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChannelStatistics is not found in the empty JSON string", ChannelStatistics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChannelStatistics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChannelStatistics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("commentCount") != null && !jsonObj.get("commentCount").isJsonNull()) && !jsonObj.get("commentCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commentCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commentCount").toString()));
      }
      if ((jsonObj.get("subscriberCount") != null && !jsonObj.get("subscriberCount").isJsonNull()) && !jsonObj.get("subscriberCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriberCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriberCount").toString()));
      }
      if ((jsonObj.get("videoCount") != null && !jsonObj.get("videoCount").isJsonNull()) && !jsonObj.get("videoCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `videoCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("videoCount").toString()));
      }
      if ((jsonObj.get("viewCount") != null && !jsonObj.get("viewCount").isJsonNull()) && !jsonObj.get("viewCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `viewCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("viewCount").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChannelStatistics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChannelStatistics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChannelStatistics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChannelStatistics.class));

       return (TypeAdapter<T>) new TypeAdapter<ChannelStatistics>() {
           @Override
           public void write(JsonWriter out, ChannelStatistics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChannelStatistics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChannelStatistics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChannelStatistics
   * @throws IOException if the JSON string is invalid with respect to ChannelStatistics
   */
  public static ChannelStatistics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChannelStatistics.class);
  }

  /**
   * Convert an instance of ChannelStatistics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

