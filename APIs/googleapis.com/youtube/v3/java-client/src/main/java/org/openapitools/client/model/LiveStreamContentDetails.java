/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Detailed settings of a stream.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LiveStreamContentDetails {
  public static final String SERIALIZED_NAME_CLOSED_CAPTIONS_INGESTION_URL = "closedCaptionsIngestionUrl";
  @SerializedName(SERIALIZED_NAME_CLOSED_CAPTIONS_INGESTION_URL)
  private String closedCaptionsIngestionUrl;

  public static final String SERIALIZED_NAME_IS_REUSABLE = "isReusable";
  @SerializedName(SERIALIZED_NAME_IS_REUSABLE)
  private Boolean isReusable;

  public LiveStreamContentDetails() {
  }

  public LiveStreamContentDetails closedCaptionsIngestionUrl(String closedCaptionsIngestionUrl) {
    this.closedCaptionsIngestionUrl = closedCaptionsIngestionUrl;
    return this;
  }

  /**
   * The ingestion URL where the closed captions of this stream are sent.
   * @return closedCaptionsIngestionUrl
   */
  @javax.annotation.Nullable
  public String getClosedCaptionsIngestionUrl() {
    return closedCaptionsIngestionUrl;
  }

  public void setClosedCaptionsIngestionUrl(String closedCaptionsIngestionUrl) {
    this.closedCaptionsIngestionUrl = closedCaptionsIngestionUrl;
  }


  public LiveStreamContentDetails isReusable(Boolean isReusable) {
    this.isReusable = isReusable;
    return this;
  }

  /**
   * Indicates whether the stream is reusable, which means that it can be bound to multiple broadcasts. It is common for broadcasters to reuse the same stream for many different broadcasts if those broadcasts occur at different times. If you set this value to false, then the stream will not be reusable, which means that it can only be bound to one broadcast. Non-reusable streams differ from reusable streams in the following ways: - A non-reusable stream can only be bound to one broadcast. - A non-reusable stream might be deleted by an automated process after the broadcast ends. - The liveStreams.list method does not list non-reusable streams if you call the method and set the mine parameter to true. The only way to use that method to retrieve the resource for a non-reusable stream is to use the id parameter to identify the stream. 
   * @return isReusable
   */
  @javax.annotation.Nullable
  public Boolean getIsReusable() {
    return isReusable;
  }

  public void setIsReusable(Boolean isReusable) {
    this.isReusable = isReusable;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LiveStreamContentDetails liveStreamContentDetails = (LiveStreamContentDetails) o;
    return Objects.equals(this.closedCaptionsIngestionUrl, liveStreamContentDetails.closedCaptionsIngestionUrl) &&
        Objects.equals(this.isReusable, liveStreamContentDetails.isReusable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(closedCaptionsIngestionUrl, isReusable);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LiveStreamContentDetails {\n");
    sb.append("    closedCaptionsIngestionUrl: ").append(toIndentedString(closedCaptionsIngestionUrl)).append("\n");
    sb.append("    isReusable: ").append(toIndentedString(isReusable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("closedCaptionsIngestionUrl");
    openapiFields.add("isReusable");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LiveStreamContentDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LiveStreamContentDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LiveStreamContentDetails is not found in the empty JSON string", LiveStreamContentDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LiveStreamContentDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LiveStreamContentDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("closedCaptionsIngestionUrl") != null && !jsonObj.get("closedCaptionsIngestionUrl").isJsonNull()) && !jsonObj.get("closedCaptionsIngestionUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `closedCaptionsIngestionUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("closedCaptionsIngestionUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LiveStreamContentDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LiveStreamContentDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LiveStreamContentDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LiveStreamContentDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<LiveStreamContentDetails>() {
           @Override
           public void write(JsonWriter out, LiveStreamContentDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LiveStreamContentDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LiveStreamContentDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LiveStreamContentDetails
   * @throws IOException if the JSON string is invalid with respect to LiveStreamContentDetails
   */
  public static LiveStreamContentDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LiveStreamContentDetails.class);
  }

  /**
   * Convert an instance of LiveStreamContentDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

