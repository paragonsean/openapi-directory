/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Ratings schemes. The country-specific ratings are mostly for movies and shows. LINT.IfChange
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContentRating {
  /**
   * The video&#39;s Australian Classification Board (ACB) or Australian Communications and Media Authority (ACMA) rating. ACMA ratings are used to classify children&#39;s television programming.
   */
  @JsonAdapter(AcbRatingEnum.Adapter.class)
  public enum AcbRatingEnum {
    ACB_UNSPECIFIED("acbUnspecified"),
    
    ACB_E("acbE"),
    
    ACB_P("acbP"),
    
    ACB_C("acbC"),
    
    ACB_G("acbG"),
    
    ACB_PG("acbPg"),
    
    ACB_M("acbM"),
    
    ACB_MA15PLUS("acbMa15plus"),
    
    ACB_R18PLUS("acbR18plus"),
    
    ACB_UNRATED("acbUnrated");

    private String value;

    AcbRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AcbRatingEnum fromValue(String value) {
      for (AcbRatingEnum b : AcbRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AcbRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AcbRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AcbRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AcbRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AcbRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACB_RATING = "acbRating";
  @SerializedName(SERIALIZED_NAME_ACB_RATING)
  private AcbRatingEnum acbRating;

  /**
   * The video&#39;s rating from Italy&#39;s Autorità per le Garanzie nelle Comunicazioni (AGCOM).
   */
  @JsonAdapter(AgcomRatingEnum.Adapter.class)
  public enum AgcomRatingEnum {
    AGCOM_UNSPECIFIED("agcomUnspecified"),
    
    AGCOM_T("agcomT"),
    
    AGCOM_VM14("agcomVm14"),
    
    AGCOM_VM18("agcomVm18"),
    
    AGCOM_UNRATED("agcomUnrated");

    private String value;

    AgcomRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AgcomRatingEnum fromValue(String value) {
      for (AgcomRatingEnum b : AgcomRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AgcomRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AgcomRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AgcomRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AgcomRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AgcomRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AGCOM_RATING = "agcomRating";
  @SerializedName(SERIALIZED_NAME_AGCOM_RATING)
  private AgcomRatingEnum agcomRating;

  /**
   * The video&#39;s Anatel (Asociación Nacional de Televisión) rating for Chilean television.
   */
  @JsonAdapter(AnatelRatingEnum.Adapter.class)
  public enum AnatelRatingEnum {
    ANATEL_UNSPECIFIED("anatelUnspecified"),
    
    ANATEL_F("anatelF"),
    
    ANATEL_I("anatelI"),
    
    ANATEL_I7("anatelI7"),
    
    ANATEL_I10("anatelI10"),
    
    ANATEL_I12("anatelI12"),
    
    ANATEL_R("anatelR"),
    
    ANATEL_A("anatelA"),
    
    ANATEL_UNRATED("anatelUnrated");

    private String value;

    AnatelRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AnatelRatingEnum fromValue(String value) {
      for (AnatelRatingEnum b : AnatelRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AnatelRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AnatelRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AnatelRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AnatelRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AnatelRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ANATEL_RATING = "anatelRating";
  @SerializedName(SERIALIZED_NAME_ANATEL_RATING)
  private AnatelRatingEnum anatelRating;

  /**
   * The video&#39;s British Board of Film Classification (BBFC) rating.
   */
  @JsonAdapter(BbfcRatingEnum.Adapter.class)
  public enum BbfcRatingEnum {
    BBFC_UNSPECIFIED("bbfcUnspecified"),
    
    BBFC_U("bbfcU"),
    
    BBFC_PG("bbfcPg"),
    
    BBFC12A("bbfc12a"),
    
    BBFC12("bbfc12"),
    
    BBFC15("bbfc15"),
    
    BBFC18("bbfc18"),
    
    BBFC_R18("bbfcR18"),
    
    BBFC_UNRATED("bbfcUnrated");

    private String value;

    BbfcRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BbfcRatingEnum fromValue(String value) {
      for (BbfcRatingEnum b : BbfcRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BbfcRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BbfcRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BbfcRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BbfcRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BbfcRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BBFC_RATING = "bbfcRating";
  @SerializedName(SERIALIZED_NAME_BBFC_RATING)
  private BbfcRatingEnum bbfcRating;

  /**
   * The video&#39;s rating from Thailand&#39;s Board of Film and Video Censors.
   */
  @JsonAdapter(BfvcRatingEnum.Adapter.class)
  public enum BfvcRatingEnum {
    BFVC_UNSPECIFIED("bfvcUnspecified"),
    
    BFVC_G("bfvcG"),
    
    BFVC_E("bfvcE"),
    
    BFVC13("bfvc13"),
    
    BFVC15("bfvc15"),
    
    BFVC18("bfvc18"),
    
    BFVC20("bfvc20"),
    
    BFVC_B("bfvcB"),
    
    BFVC_UNRATED("bfvcUnrated");

    private String value;

    BfvcRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BfvcRatingEnum fromValue(String value) {
      for (BfvcRatingEnum b : BfvcRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BfvcRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BfvcRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BfvcRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BfvcRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BfvcRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BFVC_RATING = "bfvcRating";
  @SerializedName(SERIALIZED_NAME_BFVC_RATING)
  private BfvcRatingEnum bfvcRating;

  /**
   * The video&#39;s rating from the Austrian Board of Media Classification (Bundesministerium für Unterricht, Kunst und Kultur).
   */
  @JsonAdapter(BmukkRatingEnum.Adapter.class)
  public enum BmukkRatingEnum {
    BMUKK_UNSPECIFIED("bmukkUnspecified"),
    
    BMUKK_AA("bmukkAa"),
    
    BMUKK6("bmukk6"),
    
    BMUKK8("bmukk8"),
    
    BMUKK10("bmukk10"),
    
    BMUKK12("bmukk12"),
    
    BMUKK14("bmukk14"),
    
    BMUKK16("bmukk16"),
    
    BMUKK_UNRATED("bmukkUnrated");

    private String value;

    BmukkRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BmukkRatingEnum fromValue(String value) {
      for (BmukkRatingEnum b : BmukkRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BmukkRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BmukkRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BmukkRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BmukkRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BmukkRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BMUKK_RATING = "bmukkRating";
  @SerializedName(SERIALIZED_NAME_BMUKK_RATING)
  private BmukkRatingEnum bmukkRating;

  /**
   * Rating system for Canadian TV - Canadian TV Classification System The video&#39;s rating from the Canadian Radio-Television and Telecommunications Commission (CRTC) for Canadian English-language broadcasts. For more information, see the Canadian Broadcast Standards Council website.
   */
  @JsonAdapter(CatvRatingEnum.Adapter.class)
  public enum CatvRatingEnum {
    CATV_UNSPECIFIED("catvUnspecified"),
    
    CATV_C("catvC"),
    
    CATV_C8("catvC8"),
    
    CATV_G("catvG"),
    
    CATV_PG("catvPg"),
    
    CATV14PLUS("catv14plus"),
    
    CATV18PLUS("catv18plus"),
    
    CATV_UNRATED("catvUnrated"),
    
    CATV_E("catvE");

    private String value;

    CatvRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CatvRatingEnum fromValue(String value) {
      for (CatvRatingEnum b : CatvRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CatvRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CatvRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CatvRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CatvRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CatvRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CATV_RATING = "catvRating";
  @SerializedName(SERIALIZED_NAME_CATV_RATING)
  private CatvRatingEnum catvRating;

  /**
   * The video&#39;s rating from the Canadian Radio-Television and Telecommunications Commission (CRTC) for Canadian French-language broadcasts. For more information, see the Canadian Broadcast Standards Council website.
   */
  @JsonAdapter(CatvfrRatingEnum.Adapter.class)
  public enum CatvfrRatingEnum {
    CATVFR_UNSPECIFIED("catvfrUnspecified"),
    
    CATVFR_G("catvfrG"),
    
    CATVFR8PLUS("catvfr8plus"),
    
    CATVFR13PLUS("catvfr13plus"),
    
    CATVFR16PLUS("catvfr16plus"),
    
    CATVFR18PLUS("catvfr18plus"),
    
    CATVFR_UNRATED("catvfrUnrated"),
    
    CATVFR_E("catvfrE");

    private String value;

    CatvfrRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CatvfrRatingEnum fromValue(String value) {
      for (CatvfrRatingEnum b : CatvfrRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CatvfrRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CatvfrRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CatvfrRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CatvfrRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CatvfrRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CATVFR_RATING = "catvfrRating";
  @SerializedName(SERIALIZED_NAME_CATVFR_RATING)
  private CatvfrRatingEnum catvfrRating;

  /**
   * The video&#39;s Central Board of Film Certification (CBFC - India) rating.
   */
  @JsonAdapter(CbfcRatingEnum.Adapter.class)
  public enum CbfcRatingEnum {
    CBFC_UNSPECIFIED("cbfcUnspecified"),
    
    CBFC_U("cbfcU"),
    
    CBFC_UA("cbfcUA"),
    
    CBFC_UA7PLUS("cbfcUA7plus"),
    
    CBFC_UA13PLUS("cbfcUA13plus"),
    
    CBFC_UA16PLUS("cbfcUA16plus"),
    
    CBFC_A("cbfcA"),
    
    CBFC_S("cbfcS"),
    
    CBFC_UNRATED("cbfcUnrated");

    private String value;

    CbfcRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CbfcRatingEnum fromValue(String value) {
      for (CbfcRatingEnum b : CbfcRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CbfcRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CbfcRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CbfcRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CbfcRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CbfcRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CBFC_RATING = "cbfcRating";
  @SerializedName(SERIALIZED_NAME_CBFC_RATING)
  private CbfcRatingEnum cbfcRating;

  /**
   * The video&#39;s Consejo de Calificación Cinematográfica (Chile) rating.
   */
  @JsonAdapter(CccRatingEnum.Adapter.class)
  public enum CccRatingEnum {
    CCC_UNSPECIFIED("cccUnspecified"),
    
    CCC_TE("cccTe"),
    
    CCC6("ccc6"),
    
    CCC14("ccc14"),
    
    CCC18("ccc18"),
    
    CCC18V("ccc18v"),
    
    CCC18S("ccc18s"),
    
    CCC_UNRATED("cccUnrated");

    private String value;

    CccRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CccRatingEnum fromValue(String value) {
      for (CccRatingEnum b : CccRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CccRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CccRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CccRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CccRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CccRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CCC_RATING = "cccRating";
  @SerializedName(SERIALIZED_NAME_CCC_RATING)
  private CccRatingEnum cccRating;

  /**
   * The video&#39;s rating from Portugal&#39;s Comissão de Classificação de Espect´culos.
   */
  @JsonAdapter(CceRatingEnum.Adapter.class)
  public enum CceRatingEnum {
    CCE_UNSPECIFIED("cceUnspecified"),
    
    CCE_M4("cceM4"),
    
    CCE_M6("cceM6"),
    
    CCE_M12("cceM12"),
    
    CCE_M16("cceM16"),
    
    CCE_M18("cceM18"),
    
    CCE_UNRATED("cceUnrated"),
    
    CCE_M14("cceM14");

    private String value;

    CceRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CceRatingEnum fromValue(String value) {
      for (CceRatingEnum b : CceRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CceRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CceRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CceRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CceRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CceRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CCE_RATING = "cceRating";
  @SerializedName(SERIALIZED_NAME_CCE_RATING)
  private CceRatingEnum cceRating;

  /**
   * The video&#39;s rating in Switzerland.
   */
  @JsonAdapter(ChfilmRatingEnum.Adapter.class)
  public enum ChfilmRatingEnum {
    CHFILM_UNSPECIFIED("chfilmUnspecified"),
    
    CHFILM0("chfilm0"),
    
    CHFILM6("chfilm6"),
    
    CHFILM12("chfilm12"),
    
    CHFILM16("chfilm16"),
    
    CHFILM18("chfilm18"),
    
    CHFILM_UNRATED("chfilmUnrated");

    private String value;

    ChfilmRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChfilmRatingEnum fromValue(String value) {
      for (ChfilmRatingEnum b : ChfilmRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChfilmRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChfilmRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChfilmRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChfilmRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ChfilmRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CHFILM_RATING = "chfilmRating";
  @SerializedName(SERIALIZED_NAME_CHFILM_RATING)
  private ChfilmRatingEnum chfilmRating;

  /**
   * The video&#39;s Canadian Home Video Rating System (CHVRS) rating.
   */
  @JsonAdapter(ChvrsRatingEnum.Adapter.class)
  public enum ChvrsRatingEnum {
    CHVRS_UNSPECIFIED("chvrsUnspecified"),
    
    CHVRS_G("chvrsG"),
    
    CHVRS_PG("chvrsPg"),
    
    CHVRS14A("chvrs14a"),
    
    CHVRS18A("chvrs18a"),
    
    CHVRS_R("chvrsR"),
    
    CHVRS_E("chvrsE"),
    
    CHVRS_UNRATED("chvrsUnrated");

    private String value;

    ChvrsRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChvrsRatingEnum fromValue(String value) {
      for (ChvrsRatingEnum b : ChvrsRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChvrsRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChvrsRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChvrsRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChvrsRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ChvrsRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CHVRS_RATING = "chvrsRating";
  @SerializedName(SERIALIZED_NAME_CHVRS_RATING)
  private ChvrsRatingEnum chvrsRating;

  /**
   * The video&#39;s rating from the Commission de Contrôle des Films (Belgium).
   */
  @JsonAdapter(CicfRatingEnum.Adapter.class)
  public enum CicfRatingEnum {
    CICF_UNSPECIFIED("cicfUnspecified"),
    
    CICF_E("cicfE"),
    
    CICF_KT_EA("cicfKtEa"),
    
    CICF_KNT_ENA("cicfKntEna"),
    
    CICF_UNRATED("cicfUnrated");

    private String value;

    CicfRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CicfRatingEnum fromValue(String value) {
      for (CicfRatingEnum b : CicfRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CicfRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CicfRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CicfRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CicfRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CicfRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CICF_RATING = "cicfRating";
  @SerializedName(SERIALIZED_NAME_CICF_RATING)
  private CicfRatingEnum cicfRating;

  /**
   * The video&#39;s rating from Romania&#39;s CONSILIUL NATIONAL AL AUDIOVIZUALULUI (CNA).
   */
  @JsonAdapter(CnaRatingEnum.Adapter.class)
  public enum CnaRatingEnum {
    CNA_UNSPECIFIED("cnaUnspecified"),
    
    CNA_AP("cnaAp"),
    
    CNA12("cna12"),
    
    CNA15("cna15"),
    
    CNA18("cna18"),
    
    CNA18PLUS("cna18plus"),
    
    CNA_UNRATED("cnaUnrated");

    private String value;

    CnaRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CnaRatingEnum fromValue(String value) {
      for (CnaRatingEnum b : CnaRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CnaRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CnaRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CnaRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CnaRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CnaRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CNA_RATING = "cnaRating";
  @SerializedName(SERIALIZED_NAME_CNA_RATING)
  private CnaRatingEnum cnaRating;

  /**
   * Rating system in France - Commission de classification cinematographique
   */
  @JsonAdapter(CncRatingEnum.Adapter.class)
  public enum CncRatingEnum {
    CNC_UNSPECIFIED("cncUnspecified"),
    
    CNC_T("cncT"),
    
    CNC10("cnc10"),
    
    CNC12("cnc12"),
    
    CNC16("cnc16"),
    
    CNC18("cnc18"),
    
    CNC_E("cncE"),
    
    CNC_INTERDICTION("cncInterdiction"),
    
    CNC_UNRATED("cncUnrated");

    private String value;

    CncRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CncRatingEnum fromValue(String value) {
      for (CncRatingEnum b : CncRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CncRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CncRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CncRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CncRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CncRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CNC_RATING = "cncRating";
  @SerializedName(SERIALIZED_NAME_CNC_RATING)
  private CncRatingEnum cncRating;

  /**
   * The video&#39;s rating from France&#39;s Conseil supérieur de l’audiovisuel, which rates broadcast content.
   */
  @JsonAdapter(CsaRatingEnum.Adapter.class)
  public enum CsaRatingEnum {
    CSA_UNSPECIFIED("csaUnspecified"),
    
    CSA_T("csaT"),
    
    CSA10("csa10"),
    
    CSA12("csa12"),
    
    CSA16("csa16"),
    
    CSA18("csa18"),
    
    CSA_INTERDICTION("csaInterdiction"),
    
    CSA_UNRATED("csaUnrated");

    private String value;

    CsaRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CsaRatingEnum fromValue(String value) {
      for (CsaRatingEnum b : CsaRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CsaRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CsaRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CsaRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CsaRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CsaRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CSA_RATING = "csaRating";
  @SerializedName(SERIALIZED_NAME_CSA_RATING)
  private CsaRatingEnum csaRating;

  /**
   * The video&#39;s rating from Luxembourg&#39;s Commission de surveillance de la classification des films (CSCF).
   */
  @JsonAdapter(CscfRatingEnum.Adapter.class)
  public enum CscfRatingEnum {
    CSCF_UNSPECIFIED("cscfUnspecified"),
    
    CSCF_AL("cscfAl"),
    
    CSCF_A("cscfA"),
    
    CSCF6("cscf6"),
    
    CSCF9("cscf9"),
    
    CSCF12("cscf12"),
    
    CSCF16("cscf16"),
    
    CSCF18("cscf18"),
    
    CSCF_UNRATED("cscfUnrated");

    private String value;

    CscfRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CscfRatingEnum fromValue(String value) {
      for (CscfRatingEnum b : CscfRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CscfRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CscfRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CscfRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CscfRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CscfRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CSCF_RATING = "cscfRating";
  @SerializedName(SERIALIZED_NAME_CSCF_RATING)
  private CscfRatingEnum cscfRating;

  /**
   * The video&#39;s rating in the Czech Republic.
   */
  @JsonAdapter(CzfilmRatingEnum.Adapter.class)
  public enum CzfilmRatingEnum {
    CZFILM_UNSPECIFIED("czfilmUnspecified"),
    
    CZFILM_U("czfilmU"),
    
    CZFILM12("czfilm12"),
    
    CZFILM14("czfilm14"),
    
    CZFILM18("czfilm18"),
    
    CZFILM_UNRATED("czfilmUnrated");

    private String value;

    CzfilmRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CzfilmRatingEnum fromValue(String value) {
      for (CzfilmRatingEnum b : CzfilmRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CzfilmRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CzfilmRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CzfilmRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CzfilmRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CzfilmRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CZFILM_RATING = "czfilmRating";
  @SerializedName(SERIALIZED_NAME_CZFILM_RATING)
  private CzfilmRatingEnum czfilmRating;

  /**
   * The video&#39;s Departamento de Justiça, Classificação, Qualificação e Títulos (DJCQT - Brazil) rating.
   */
  @JsonAdapter(DjctqRatingEnum.Adapter.class)
  public enum DjctqRatingEnum {
    DJCTQ_UNSPECIFIED("djctqUnspecified"),
    
    DJCTQ_L("djctqL"),
    
    DJCTQ10("djctq10"),
    
    DJCTQ12("djctq12"),
    
    DJCTQ14("djctq14"),
    
    DJCTQ16("djctq16"),
    
    DJCTQ18("djctq18"),
    
    DJCTQ_ER("djctqEr"),
    
    DJCTQ_L10("djctqL10"),
    
    DJCTQ_L12("djctqL12"),
    
    DJCTQ_L14("djctqL14"),
    
    DJCTQ_L16("djctqL16"),
    
    DJCTQ_L18("djctqL18"),
    
    DJCTQ1012("djctq1012"),
    
    DJCTQ1014("djctq1014"),
    
    DJCTQ1016("djctq1016"),
    
    DJCTQ1018("djctq1018"),
    
    DJCTQ1214("djctq1214"),
    
    DJCTQ1216("djctq1216"),
    
    DJCTQ1218("djctq1218"),
    
    DJCTQ1416("djctq1416"),
    
    DJCTQ1418("djctq1418"),
    
    DJCTQ1618("djctq1618"),
    
    DJCTQ_UNRATED("djctqUnrated");

    private String value;

    DjctqRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DjctqRatingEnum fromValue(String value) {
      for (DjctqRatingEnum b : DjctqRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DjctqRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DjctqRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DjctqRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DjctqRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DjctqRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DJCTQ_RATING = "djctqRating";
  @SerializedName(SERIALIZED_NAME_DJCTQ_RATING)
  private DjctqRatingEnum djctqRating;

  /**
   * Gets or Sets djctqRatingReasons
   */
  @JsonAdapter(DjctqRatingReasonsEnum.Adapter.class)
  public enum DjctqRatingReasonsEnum {
    DJCTQ_RATING_REASON_UNSPECIFIED("djctqRatingReasonUnspecified"),
    
    DJCTQ_VIOLENCE("djctqViolence"),
    
    DJCTQ_EXTREME_VIOLENCE("djctqExtremeViolence"),
    
    DJCTQ_SEXUAL_CONTENT("djctqSexualContent"),
    
    DJCTQ_NUDITY("djctqNudity"),
    
    DJCTQ_SEX("djctqSex"),
    
    DJCTQ_EXPLICIT_SEX("djctqExplicitSex"),
    
    DJCTQ_DRUGS("djctqDrugs"),
    
    DJCTQ_LEGAL_DRUGS("djctqLegalDrugs"),
    
    DJCTQ_ILLEGAL_DRUGS("djctqIllegalDrugs"),
    
    DJCTQ_INAPPROPRIATE_LANGUAGE("djctqInappropriateLanguage"),
    
    DJCTQ_CRIMINAL_ACTS("djctqCriminalActs"),
    
    DJCTQ_IMPACTING_CONTENT("djctqImpactingContent");

    private String value;

    DjctqRatingReasonsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DjctqRatingReasonsEnum fromValue(String value) {
      for (DjctqRatingReasonsEnum b : DjctqRatingReasonsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DjctqRatingReasonsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DjctqRatingReasonsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DjctqRatingReasonsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DjctqRatingReasonsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DjctqRatingReasonsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DJCTQ_RATING_REASONS = "djctqRatingReasons";
  @SerializedName(SERIALIZED_NAME_DJCTQ_RATING_REASONS)
  private List<DjctqRatingReasonsEnum> djctqRatingReasons = new ArrayList<>();

  /**
   * Rating system in Turkey - Evaluation and Classification Board of the Ministry of Culture and Tourism
   */
  @JsonAdapter(EcbmctRatingEnum.Adapter.class)
  public enum EcbmctRatingEnum {
    ECBMCT_UNSPECIFIED("ecbmctUnspecified"),
    
    ECBMCT_G("ecbmctG"),
    
    ECBMCT7A("ecbmct7a"),
    
    ECBMCT7PLUS("ecbmct7plus"),
    
    ECBMCT13A("ecbmct13a"),
    
    ECBMCT13PLUS("ecbmct13plus"),
    
    ECBMCT15A("ecbmct15a"),
    
    ECBMCT15PLUS("ecbmct15plus"),
    
    ECBMCT18PLUS("ecbmct18plus"),
    
    ECBMCT_UNRATED("ecbmctUnrated");

    private String value;

    EcbmctRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EcbmctRatingEnum fromValue(String value) {
      for (EcbmctRatingEnum b : EcbmctRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EcbmctRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EcbmctRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EcbmctRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EcbmctRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EcbmctRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ECBMCT_RATING = "ecbmctRating";
  @SerializedName(SERIALIZED_NAME_ECBMCT_RATING)
  private EcbmctRatingEnum ecbmctRating;

  /**
   * The video&#39;s rating in Estonia.
   */
  @JsonAdapter(EefilmRatingEnum.Adapter.class)
  public enum EefilmRatingEnum {
    EEFILM_UNSPECIFIED("eefilmUnspecified"),
    
    EEFILM_PERE("eefilmPere"),
    
    EEFILM_L("eefilmL"),
    
    EEFILM_MS6("eefilmMs6"),
    
    EEFILM_K6("eefilmK6"),
    
    EEFILM_MS12("eefilmMs12"),
    
    EEFILM_K12("eefilmK12"),
    
    EEFILM_K14("eefilmK14"),
    
    EEFILM_K16("eefilmK16"),
    
    EEFILM_UNRATED("eefilmUnrated");

    private String value;

    EefilmRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EefilmRatingEnum fromValue(String value) {
      for (EefilmRatingEnum b : EefilmRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EefilmRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EefilmRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EefilmRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EefilmRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EefilmRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EEFILM_RATING = "eefilmRating";
  @SerializedName(SERIALIZED_NAME_EEFILM_RATING)
  private EefilmRatingEnum eefilmRating;

  /**
   * The video&#39;s rating in Egypt.
   */
  @JsonAdapter(EgfilmRatingEnum.Adapter.class)
  public enum EgfilmRatingEnum {
    EGFILM_UNSPECIFIED("egfilmUnspecified"),
    
    EGFILM_GN("egfilmGn"),
    
    EGFILM18("egfilm18"),
    
    EGFILM_BN("egfilmBn"),
    
    EGFILM_UNRATED("egfilmUnrated");

    private String value;

    EgfilmRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EgfilmRatingEnum fromValue(String value) {
      for (EgfilmRatingEnum b : EgfilmRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EgfilmRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EgfilmRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EgfilmRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EgfilmRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EgfilmRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EGFILM_RATING = "egfilmRating";
  @SerializedName(SERIALIZED_NAME_EGFILM_RATING)
  private EgfilmRatingEnum egfilmRating;

  /**
   * The video&#39;s Eirin (映倫) rating. Eirin is the Japanese rating system.
   */
  @JsonAdapter(EirinRatingEnum.Adapter.class)
  public enum EirinRatingEnum {
    EIRIN_UNSPECIFIED("eirinUnspecified"),
    
    EIRIN_G("eirinG"),
    
    EIRIN_PG12("eirinPg12"),
    
    EIRIN_R15PLUS("eirinR15plus"),
    
    EIRIN_R18PLUS("eirinR18plus"),
    
    EIRIN_UNRATED("eirinUnrated");

    private String value;

    EirinRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EirinRatingEnum fromValue(String value) {
      for (EirinRatingEnum b : EirinRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EirinRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EirinRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EirinRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EirinRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EirinRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EIRIN_RATING = "eirinRating";
  @SerializedName(SERIALIZED_NAME_EIRIN_RATING)
  private EirinRatingEnum eirinRating;

  /**
   * The video&#39;s rating from Malaysia&#39;s Film Censorship Board.
   */
  @JsonAdapter(FcbmRatingEnum.Adapter.class)
  public enum FcbmRatingEnum {
    FCBM_UNSPECIFIED("fcbmUnspecified"),
    
    FCBM_U("fcbmU"),
    
    FCBM_PG13("fcbmPg13"),
    
    FCBM_P13("fcbmP13"),
    
    FCBM18("fcbm18"),
    
    FCBM18SX("fcbm18sx"),
    
    FCBM18PA("fcbm18pa"),
    
    FCBM18SG("fcbm18sg"),
    
    FCBM18PL("fcbm18pl"),
    
    FCBM_UNRATED("fcbmUnrated");

    private String value;

    FcbmRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FcbmRatingEnum fromValue(String value) {
      for (FcbmRatingEnum b : FcbmRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FcbmRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FcbmRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FcbmRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FcbmRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FcbmRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FCBM_RATING = "fcbmRating";
  @SerializedName(SERIALIZED_NAME_FCBM_RATING)
  private FcbmRatingEnum fcbmRating;

  /**
   * The video&#39;s rating from Hong Kong&#39;s Office for Film, Newspaper and Article Administration.
   */
  @JsonAdapter(FcoRatingEnum.Adapter.class)
  public enum FcoRatingEnum {
    FCO_UNSPECIFIED("fcoUnspecified"),
    
    FCO_I("fcoI"),
    
    FCO_IIA("fcoIia"),
    
    FCO_IIB("fcoIib"),
    
    FCO_II("fcoIi"),
    
    FCO_III("fcoIii"),
    
    FCO_UNRATED("fcoUnrated");

    private String value;

    FcoRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FcoRatingEnum fromValue(String value) {
      for (FcoRatingEnum b : FcoRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FcoRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FcoRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FcoRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FcoRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FcoRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FCO_RATING = "fcoRating";
  @SerializedName(SERIALIZED_NAME_FCO_RATING)
  private FcoRatingEnum fcoRating;

  /**
   * This property has been deprecated. Use the contentDetails.contentRating.cncRating instead.
   */
  @JsonAdapter(FmocRatingEnum.Adapter.class)
  public enum FmocRatingEnum {
    FMOC_UNSPECIFIED("fmocUnspecified"),
    
    FMOC_U("fmocU"),
    
    FMOC10("fmoc10"),
    
    FMOC12("fmoc12"),
    
    FMOC16("fmoc16"),
    
    FMOC18("fmoc18"),
    
    FMOC_E("fmocE"),
    
    FMOC_UNRATED("fmocUnrated");

    private String value;

    FmocRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FmocRatingEnum fromValue(String value) {
      for (FmocRatingEnum b : FmocRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FmocRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FmocRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FmocRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FmocRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FmocRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FMOC_RATING = "fmocRating";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_FMOC_RATING)
  private FmocRatingEnum fmocRating;

  /**
   * The video&#39;s rating from South Africa&#39;s Film and Publication Board.
   */
  @JsonAdapter(FpbRatingEnum.Adapter.class)
  public enum FpbRatingEnum {
    FPB_UNSPECIFIED("fpbUnspecified"),
    
    FPB_A("fpbA"),
    
    FPB_PG("fpbPg"),
    
    FPB79_PG("fpb79Pg"),
    
    FPB1012_PG("fpb1012Pg"),
    
    FPB13("fpb13"),
    
    FPB16("fpb16"),
    
    FPB18("fpb18"),
    
    FPB_X18("fpbX18"),
    
    FPB_XX("fpbXx"),
    
    FPB_UNRATED("fpbUnrated"),
    
    FPB10("fpb10");

    private String value;

    FpbRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FpbRatingEnum fromValue(String value) {
      for (FpbRatingEnum b : FpbRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FpbRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FpbRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FpbRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FpbRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FpbRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FPB_RATING = "fpbRating";
  @SerializedName(SERIALIZED_NAME_FPB_RATING)
  private FpbRatingEnum fpbRating;

  /**
   * Gets or Sets fpbRatingReasons
   */
  @JsonAdapter(FpbRatingReasonsEnum.Adapter.class)
  public enum FpbRatingReasonsEnum {
    FPB_RATING_REASON_UNSPECIFIED("fpbRatingReasonUnspecified"),
    
    FPB_BLASPHEMY("fpbBlasphemy"),
    
    FPB_LANGUAGE("fpbLanguage"),
    
    FPB_NUDITY("fpbNudity"),
    
    FPB_PREJUDICE("fpbPrejudice"),
    
    FPB_SEX("fpbSex"),
    
    FPB_VIOLENCE("fpbViolence"),
    
    FPB_DRUGS("fpbDrugs"),
    
    FPB_SEXUAL_VIOLENCE("fpbSexualViolence"),
    
    FPB_HORROR("fpbHorror"),
    
    FPB_CRIMINAL_TECHNIQUES("fpbCriminalTechniques"),
    
    FPB_IMITATIVE_ACTS_TECHNIQUES("fpbImitativeActsTechniques");

    private String value;

    FpbRatingReasonsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FpbRatingReasonsEnum fromValue(String value) {
      for (FpbRatingReasonsEnum b : FpbRatingReasonsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FpbRatingReasonsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FpbRatingReasonsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FpbRatingReasonsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FpbRatingReasonsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FpbRatingReasonsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FPB_RATING_REASONS = "fpbRatingReasons";
  @SerializedName(SERIALIZED_NAME_FPB_RATING_REASONS)
  private List<FpbRatingReasonsEnum> fpbRatingReasons = new ArrayList<>();

  /**
   * The video&#39;s Freiwillige Selbstkontrolle der Filmwirtschaft (FSK - Germany) rating.
   */
  @JsonAdapter(FskRatingEnum.Adapter.class)
  public enum FskRatingEnum {
    FSK_UNSPECIFIED("fskUnspecified"),
    
    FSK0("fsk0"),
    
    FSK6("fsk6"),
    
    FSK12("fsk12"),
    
    FSK16("fsk16"),
    
    FSK18("fsk18"),
    
    FSK_UNRATED("fskUnrated");

    private String value;

    FskRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FskRatingEnum fromValue(String value) {
      for (FskRatingEnum b : FskRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FskRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FskRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FskRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FskRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FskRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FSK_RATING = "fskRating";
  @SerializedName(SERIALIZED_NAME_FSK_RATING)
  private FskRatingEnum fskRating;

  /**
   * The video&#39;s rating in Greece.
   */
  @JsonAdapter(GrfilmRatingEnum.Adapter.class)
  public enum GrfilmRatingEnum {
    GRFILM_UNSPECIFIED("grfilmUnspecified"),
    
    GRFILM_K("grfilmK"),
    
    GRFILM_E("grfilmE"),
    
    GRFILM_K12("grfilmK12"),
    
    GRFILM_K13("grfilmK13"),
    
    GRFILM_K15("grfilmK15"),
    
    GRFILM_K17("grfilmK17"),
    
    GRFILM_K18("grfilmK18"),
    
    GRFILM_UNRATED("grfilmUnrated");

    private String value;

    GrfilmRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GrfilmRatingEnum fromValue(String value) {
      for (GrfilmRatingEnum b : GrfilmRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GrfilmRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GrfilmRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GrfilmRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GrfilmRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GrfilmRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GRFILM_RATING = "grfilmRating";
  @SerializedName(SERIALIZED_NAME_GRFILM_RATING)
  private GrfilmRatingEnum grfilmRating;

  /**
   * The video&#39;s Instituto de la Cinematografía y de las Artes Audiovisuales (ICAA - Spain) rating.
   */
  @JsonAdapter(IcaaRatingEnum.Adapter.class)
  public enum IcaaRatingEnum {
    ICAA_UNSPECIFIED("icaaUnspecified"),
    
    ICAA_APTA("icaaApta"),
    
    ICAA7("icaa7"),
    
    ICAA12("icaa12"),
    
    ICAA13("icaa13"),
    
    ICAA16("icaa16"),
    
    ICAA18("icaa18"),
    
    ICAA_X("icaaX"),
    
    ICAA_UNRATED("icaaUnrated");

    private String value;

    IcaaRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IcaaRatingEnum fromValue(String value) {
      for (IcaaRatingEnum b : IcaaRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IcaaRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IcaaRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IcaaRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IcaaRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IcaaRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ICAA_RATING = "icaaRating";
  @SerializedName(SERIALIZED_NAME_ICAA_RATING)
  private IcaaRatingEnum icaaRating;

  /**
   * The video&#39;s Irish Film Classification Office (IFCO - Ireland) rating. See the IFCO website for more information.
   */
  @JsonAdapter(IfcoRatingEnum.Adapter.class)
  public enum IfcoRatingEnum {
    IFCO_UNSPECIFIED("ifcoUnspecified"),
    
    IFCO_G("ifcoG"),
    
    IFCO_PG("ifcoPg"),
    
    IFCO12("ifco12"),
    
    IFCO12A("ifco12a"),
    
    IFCO15("ifco15"),
    
    IFCO15A("ifco15a"),
    
    IFCO16("ifco16"),
    
    IFCO18("ifco18"),
    
    IFCO_UNRATED("ifcoUnrated");

    private String value;

    IfcoRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IfcoRatingEnum fromValue(String value) {
      for (IfcoRatingEnum b : IfcoRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IfcoRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IfcoRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IfcoRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IfcoRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IfcoRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IFCO_RATING = "ifcoRating";
  @SerializedName(SERIALIZED_NAME_IFCO_RATING)
  private IfcoRatingEnum ifcoRating;

  /**
   * The video&#39;s rating in Israel.
   */
  @JsonAdapter(IlfilmRatingEnum.Adapter.class)
  public enum IlfilmRatingEnum {
    ILFILM_UNSPECIFIED("ilfilmUnspecified"),
    
    ILFILM_AA("ilfilmAa"),
    
    ILFILM12("ilfilm12"),
    
    ILFILM14("ilfilm14"),
    
    ILFILM16("ilfilm16"),
    
    ILFILM18("ilfilm18"),
    
    ILFILM_UNRATED("ilfilmUnrated");

    private String value;

    IlfilmRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IlfilmRatingEnum fromValue(String value) {
      for (IlfilmRatingEnum b : IlfilmRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IlfilmRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IlfilmRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IlfilmRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IlfilmRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IlfilmRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ILFILM_RATING = "ilfilmRating";
  @SerializedName(SERIALIZED_NAME_ILFILM_RATING)
  private IlfilmRatingEnum ilfilmRating;

  /**
   * The video&#39;s INCAA (Instituto Nacional de Cine y Artes Audiovisuales - Argentina) rating.
   */
  @JsonAdapter(IncaaRatingEnum.Adapter.class)
  public enum IncaaRatingEnum {
    INCAA_UNSPECIFIED("incaaUnspecified"),
    
    INCAA_ATP("incaaAtp"),
    
    INCAA_SAM13("incaaSam13"),
    
    INCAA_SAM16("incaaSam16"),
    
    INCAA_SAM18("incaaSam18"),
    
    INCAA_C("incaaC"),
    
    INCAA_UNRATED("incaaUnrated");

    private String value;

    IncaaRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IncaaRatingEnum fromValue(String value) {
      for (IncaaRatingEnum b : IncaaRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IncaaRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IncaaRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IncaaRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IncaaRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IncaaRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INCAA_RATING = "incaaRating";
  @SerializedName(SERIALIZED_NAME_INCAA_RATING)
  private IncaaRatingEnum incaaRating;

  /**
   * The video&#39;s rating from the Kenya Film Classification Board.
   */
  @JsonAdapter(KfcbRatingEnum.Adapter.class)
  public enum KfcbRatingEnum {
    KFCB_UNSPECIFIED("kfcbUnspecified"),
    
    KFCB_G("kfcbG"),
    
    KFCB_PG("kfcbPg"),
    
    KFCB16PLUS("kfcb16plus"),
    
    KFCB_R("kfcbR"),
    
    KFCB_UNRATED("kfcbUnrated");

    private String value;

    KfcbRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KfcbRatingEnum fromValue(String value) {
      for (KfcbRatingEnum b : KfcbRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KfcbRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KfcbRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KfcbRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KfcbRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KfcbRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KFCB_RATING = "kfcbRating";
  @SerializedName(SERIALIZED_NAME_KFCB_RATING)
  private KfcbRatingEnum kfcbRating;

  /**
   * The video&#39;s NICAM/Kijkwijzer rating from the Nederlands Instituut voor de Classificatie van Audiovisuele Media (Netherlands).
   */
  @JsonAdapter(KijkwijzerRatingEnum.Adapter.class)
  public enum KijkwijzerRatingEnum {
    KIJKWIJZER_UNSPECIFIED("kijkwijzerUnspecified"),
    
    KIJKWIJZER_AL("kijkwijzerAl"),
    
    KIJKWIJZER6("kijkwijzer6"),
    
    KIJKWIJZER9("kijkwijzer9"),
    
    KIJKWIJZER12("kijkwijzer12"),
    
    KIJKWIJZER16("kijkwijzer16"),
    
    KIJKWIJZER18("kijkwijzer18"),
    
    KIJKWIJZER_UNRATED("kijkwijzerUnrated");

    private String value;

    KijkwijzerRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KijkwijzerRatingEnum fromValue(String value) {
      for (KijkwijzerRatingEnum b : KijkwijzerRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KijkwijzerRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KijkwijzerRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KijkwijzerRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KijkwijzerRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KijkwijzerRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KIJKWIJZER_RATING = "kijkwijzerRating";
  @SerializedName(SERIALIZED_NAME_KIJKWIJZER_RATING)
  private KijkwijzerRatingEnum kijkwijzerRating;

  /**
   * The video&#39;s Korea Media Rating Board (영상물등급위원회) rating. The KMRB rates videos in South Korea.
   */
  @JsonAdapter(KmrbRatingEnum.Adapter.class)
  public enum KmrbRatingEnum {
    KMRB_UNSPECIFIED("kmrbUnspecified"),
    
    KMRB_ALL("kmrbAll"),
    
    KMRB12PLUS("kmrb12plus"),
    
    KMRB15PLUS("kmrb15plus"),
    
    KMRB_TEENR("kmrbTeenr"),
    
    KMRB_R("kmrbR"),
    
    KMRB_UNRATED("kmrbUnrated");

    private String value;

    KmrbRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KmrbRatingEnum fromValue(String value) {
      for (KmrbRatingEnum b : KmrbRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KmrbRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KmrbRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KmrbRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KmrbRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KmrbRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KMRB_RATING = "kmrbRating";
  @SerializedName(SERIALIZED_NAME_KMRB_RATING)
  private KmrbRatingEnum kmrbRating;

  /**
   * The video&#39;s rating from Indonesia&#39;s Lembaga Sensor Film.
   */
  @JsonAdapter(LsfRatingEnum.Adapter.class)
  public enum LsfRatingEnum {
    LSF_UNSPECIFIED("lsfUnspecified"),
    
    LSF_SU("lsfSu"),
    
    LSF_A("lsfA"),
    
    LSF_BO("lsfBo"),
    
    LSF13("lsf13"),
    
    LSF_R("lsfR"),
    
    LSF17("lsf17"),
    
    LSF_D("lsfD"),
    
    LSF21("lsf21"),
    
    LSF_UNRATED("lsfUnrated");

    private String value;

    LsfRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LsfRatingEnum fromValue(String value) {
      for (LsfRatingEnum b : LsfRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LsfRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LsfRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LsfRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LsfRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LsfRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LSF_RATING = "lsfRating";
  @SerializedName(SERIALIZED_NAME_LSF_RATING)
  private LsfRatingEnum lsfRating;

  /**
   * The video&#39;s rating from Malta&#39;s Film Age-Classification Board.
   */
  @JsonAdapter(MccaaRatingEnum.Adapter.class)
  public enum MccaaRatingEnum {
    MCCAA_UNSPECIFIED("mccaaUnspecified"),
    
    MCCAA_U("mccaaU"),
    
    MCCAA_PG("mccaaPg"),
    
    MCCAA12A("mccaa12a"),
    
    MCCAA12("mccaa12"),
    
    MCCAA14("mccaa14"),
    
    MCCAA15("mccaa15"),
    
    MCCAA16("mccaa16"),
    
    MCCAA18("mccaa18"),
    
    MCCAA_UNRATED("mccaaUnrated");

    private String value;

    MccaaRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MccaaRatingEnum fromValue(String value) {
      for (MccaaRatingEnum b : MccaaRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MccaaRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MccaaRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MccaaRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MccaaRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MccaaRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MCCAA_RATING = "mccaaRating";
  @SerializedName(SERIALIZED_NAME_MCCAA_RATING)
  private MccaaRatingEnum mccaaRating;

  /**
   * The video&#39;s rating from the Danish Film Institute&#39;s (Det Danske Filminstitut) Media Council for Children and Young People.
   */
  @JsonAdapter(MccypRatingEnum.Adapter.class)
  public enum MccypRatingEnum {
    MCCYP_UNSPECIFIED("mccypUnspecified"),
    
    MCCYP_A("mccypA"),
    
    MCCYP7("mccyp7"),
    
    MCCYP11("mccyp11"),
    
    MCCYP15("mccyp15"),
    
    MCCYP_UNRATED("mccypUnrated");

    private String value;

    MccypRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MccypRatingEnum fromValue(String value) {
      for (MccypRatingEnum b : MccypRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MccypRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MccypRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MccypRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MccypRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MccypRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MCCYP_RATING = "mccypRating";
  @SerializedName(SERIALIZED_NAME_MCCYP_RATING)
  private MccypRatingEnum mccypRating;

  /**
   * The video&#39;s rating system for Vietnam - MCST
   */
  @JsonAdapter(McstRatingEnum.Adapter.class)
  public enum McstRatingEnum {
    MCST_UNSPECIFIED("mcstUnspecified"),
    
    MCST_P("mcstP"),
    
    MCST0("mcst0"),
    
    MCST_C13("mcstC13"),
    
    MCST_C16("mcstC16"),
    
    MCST16PLUS("mcst16plus"),
    
    MCST_C18("mcstC18"),
    
    MCST_GPG("mcstGPg"),
    
    MCST_UNRATED("mcstUnrated");

    private String value;

    McstRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static McstRatingEnum fromValue(String value) {
      for (McstRatingEnum b : McstRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<McstRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final McstRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public McstRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return McstRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      McstRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MCST_RATING = "mcstRating";
  @SerializedName(SERIALIZED_NAME_MCST_RATING)
  private McstRatingEnum mcstRating;

  /**
   * The video&#39;s rating from Singapore&#39;s Media Development Authority (MDA) and, specifically, it&#39;s Board of Film Censors (BFC).
   */
  @JsonAdapter(MdaRatingEnum.Adapter.class)
  public enum MdaRatingEnum {
    MDA_UNSPECIFIED("mdaUnspecified"),
    
    MDA_G("mdaG"),
    
    MDA_PG("mdaPg"),
    
    MDA_PG13("mdaPg13"),
    
    MDA_NC16("mdaNc16"),
    
    MDA_M18("mdaM18"),
    
    MDA_R21("mdaR21"),
    
    MDA_UNRATED("mdaUnrated");

    private String value;

    MdaRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MdaRatingEnum fromValue(String value) {
      for (MdaRatingEnum b : MdaRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MdaRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MdaRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MdaRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MdaRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MdaRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MDA_RATING = "mdaRating";
  @SerializedName(SERIALIZED_NAME_MDA_RATING)
  private MdaRatingEnum mdaRating;

  /**
   * The video&#39;s rating from Medietilsynet, the Norwegian Media Authority.
   */
  @JsonAdapter(MedietilsynetRatingEnum.Adapter.class)
  public enum MedietilsynetRatingEnum {
    MEDIETILSYNET_UNSPECIFIED("medietilsynetUnspecified"),
    
    MEDIETILSYNET_A("medietilsynetA"),
    
    MEDIETILSYNET6("medietilsynet6"),
    
    MEDIETILSYNET7("medietilsynet7"),
    
    MEDIETILSYNET9("medietilsynet9"),
    
    MEDIETILSYNET11("medietilsynet11"),
    
    MEDIETILSYNET12("medietilsynet12"),
    
    MEDIETILSYNET15("medietilsynet15"),
    
    MEDIETILSYNET18("medietilsynet18"),
    
    MEDIETILSYNET_UNRATED("medietilsynetUnrated");

    private String value;

    MedietilsynetRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MedietilsynetRatingEnum fromValue(String value) {
      for (MedietilsynetRatingEnum b : MedietilsynetRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MedietilsynetRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MedietilsynetRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MedietilsynetRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MedietilsynetRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MedietilsynetRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MEDIETILSYNET_RATING = "medietilsynetRating";
  @SerializedName(SERIALIZED_NAME_MEDIETILSYNET_RATING)
  private MedietilsynetRatingEnum medietilsynetRating;

  /**
   * The video&#39;s rating from Finland&#39;s Kansallinen Audiovisuaalinen Instituutti (National Audiovisual Institute).
   */
  @JsonAdapter(MekuRatingEnum.Adapter.class)
  public enum MekuRatingEnum {
    MEKU_UNSPECIFIED("mekuUnspecified"),
    
    MEKU_S("mekuS"),
    
    MEKU7("meku7"),
    
    MEKU12("meku12"),
    
    MEKU16("meku16"),
    
    MEKU18("meku18"),
    
    MEKU_UNRATED("mekuUnrated");

    private String value;

    MekuRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MekuRatingEnum fromValue(String value) {
      for (MekuRatingEnum b : MekuRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MekuRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MekuRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MekuRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MekuRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MekuRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MEKU_RATING = "mekuRating";
  @SerializedName(SERIALIZED_NAME_MEKU_RATING)
  private MekuRatingEnum mekuRating;

  /**
   * The rating system for MENA countries, a clone of MPAA. It is needed to prevent titles go live w/o additional QC check, since some of them can be inappropriate for the countries at all. See b/33408548 for more details.
   */
  @JsonAdapter(MenaMpaaRatingEnum.Adapter.class)
  public enum MenaMpaaRatingEnum {
    MENA_MPAA_UNSPECIFIED("menaMpaaUnspecified"),
    
    MENA_MPAA_G("menaMpaaG"),
    
    MENA_MPAA_PG("menaMpaaPg"),
    
    MENA_MPAA_PG13("menaMpaaPg13"),
    
    MENA_MPAA_R("menaMpaaR"),
    
    MENA_MPAA_UNRATED("menaMpaaUnrated");

    private String value;

    MenaMpaaRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MenaMpaaRatingEnum fromValue(String value) {
      for (MenaMpaaRatingEnum b : MenaMpaaRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MenaMpaaRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MenaMpaaRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MenaMpaaRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MenaMpaaRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MenaMpaaRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MENA_MPAA_RATING = "menaMpaaRating";
  @SerializedName(SERIALIZED_NAME_MENA_MPAA_RATING)
  private MenaMpaaRatingEnum menaMpaaRating;

  /**
   * The video&#39;s rating from the Ministero dei Beni e delle Attività Culturali e del Turismo (Italy).
   */
  @JsonAdapter(MibacRatingEnum.Adapter.class)
  public enum MibacRatingEnum {
    MIBAC_UNSPECIFIED("mibacUnspecified"),
    
    MIBAC_T("mibacT"),
    
    MIBAC_VAP("mibacVap"),
    
    MIBAC_VM6("mibacVm6"),
    
    MIBAC_VM12("mibacVm12"),
    
    MIBAC_VM14("mibacVm14"),
    
    MIBAC_VM16("mibacVm16"),
    
    MIBAC_VM18("mibacVm18"),
    
    MIBAC_UNRATED("mibacUnrated");

    private String value;

    MibacRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MibacRatingEnum fromValue(String value) {
      for (MibacRatingEnum b : MibacRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MibacRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MibacRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MibacRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MibacRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MibacRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MIBAC_RATING = "mibacRating";
  @SerializedName(SERIALIZED_NAME_MIBAC_RATING)
  private MibacRatingEnum mibacRating;

  /**
   * The video&#39;s Ministerio de Cultura (Colombia) rating.
   */
  @JsonAdapter(MocRatingEnum.Adapter.class)
  public enum MocRatingEnum {
    MOC_UNSPECIFIED("mocUnspecified"),
    
    MOC_E("mocE"),
    
    MOC_T("mocT"),
    
    MOC7("moc7"),
    
    MOC12("moc12"),
    
    MOC15("moc15"),
    
    MOC18("moc18"),
    
    MOC_X("mocX"),
    
    MOC_BANNED("mocBanned"),
    
    MOC_UNRATED("mocUnrated");

    private String value;

    MocRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MocRatingEnum fromValue(String value) {
      for (MocRatingEnum b : MocRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MocRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MocRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MocRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MocRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MocRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MOC_RATING = "mocRating";
  @SerializedName(SERIALIZED_NAME_MOC_RATING)
  private MocRatingEnum mocRating;

  /**
   * The video&#39;s rating from Taiwan&#39;s Ministry of Culture (文化部).
   */
  @JsonAdapter(MoctwRatingEnum.Adapter.class)
  public enum MoctwRatingEnum {
    MOCTW_UNSPECIFIED("moctwUnspecified"),
    
    MOCTW_G("moctwG"),
    
    MOCTW_P("moctwP"),
    
    MOCTW_PG("moctwPg"),
    
    MOCTW_R("moctwR"),
    
    MOCTW_UNRATED("moctwUnrated"),
    
    MOCTW_R12("moctwR12"),
    
    MOCTW_R15("moctwR15");

    private String value;

    MoctwRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MoctwRatingEnum fromValue(String value) {
      for (MoctwRatingEnum b : MoctwRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MoctwRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MoctwRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MoctwRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MoctwRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MoctwRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MOCTW_RATING = "moctwRating";
  @SerializedName(SERIALIZED_NAME_MOCTW_RATING)
  private MoctwRatingEnum moctwRating;

  /**
   * The video&#39;s Motion Picture Association of America (MPAA) rating.
   */
  @JsonAdapter(MpaaRatingEnum.Adapter.class)
  public enum MpaaRatingEnum {
    MPAA_UNSPECIFIED("mpaaUnspecified"),
    
    MPAA_G("mpaaG"),
    
    MPAA_PG("mpaaPg"),
    
    MPAA_PG13("mpaaPg13"),
    
    MPAA_R("mpaaR"),
    
    MPAA_NC17("mpaaNc17"),
    
    MPAA_X("mpaaX"),
    
    MPAA_UNRATED("mpaaUnrated");

    private String value;

    MpaaRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MpaaRatingEnum fromValue(String value) {
      for (MpaaRatingEnum b : MpaaRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MpaaRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MpaaRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MpaaRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MpaaRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MpaaRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MPAA_RATING = "mpaaRating";
  @SerializedName(SERIALIZED_NAME_MPAA_RATING)
  private MpaaRatingEnum mpaaRating;

  /**
   * The rating system for trailer, DVD, and Ad in the US. See http://movielabs.com/md/ratings/v2.3/html/US_MPAAT_Ratings.html.
   */
  @JsonAdapter(MpaatRatingEnum.Adapter.class)
  public enum MpaatRatingEnum {
    MPAAT_UNSPECIFIED("mpaatUnspecified"),
    
    MPAAT_GB("mpaatGb"),
    
    MPAAT_RB("mpaatRb");

    private String value;

    MpaatRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MpaatRatingEnum fromValue(String value) {
      for (MpaatRatingEnum b : MpaatRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MpaatRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MpaatRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MpaatRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MpaatRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MpaatRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MPAAT_RATING = "mpaatRating";
  @SerializedName(SERIALIZED_NAME_MPAAT_RATING)
  private MpaatRatingEnum mpaatRating;

  /**
   * The video&#39;s rating from the Movie and Television Review and Classification Board (Philippines).
   */
  @JsonAdapter(MtrcbRatingEnum.Adapter.class)
  public enum MtrcbRatingEnum {
    MTRCB_UNSPECIFIED("mtrcbUnspecified"),
    
    MTRCB_G("mtrcbG"),
    
    MTRCB_PG("mtrcbPg"),
    
    MTRCB_R13("mtrcbR13"),
    
    MTRCB_R16("mtrcbR16"),
    
    MTRCB_R18("mtrcbR18"),
    
    MTRCB_X("mtrcbX"),
    
    MTRCB_UNRATED("mtrcbUnrated");

    private String value;

    MtrcbRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MtrcbRatingEnum fromValue(String value) {
      for (MtrcbRatingEnum b : MtrcbRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MtrcbRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MtrcbRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MtrcbRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MtrcbRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MtrcbRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MTRCB_RATING = "mtrcbRating";
  @SerializedName(SERIALIZED_NAME_MTRCB_RATING)
  private MtrcbRatingEnum mtrcbRating;

  /**
   * The video&#39;s rating from the Maldives National Bureau of Classification.
   */
  @JsonAdapter(NbcRatingEnum.Adapter.class)
  public enum NbcRatingEnum {
    NBC_UNSPECIFIED("nbcUnspecified"),
    
    NBC_G("nbcG"),
    
    NBC_PG("nbcPg"),
    
    NBC12PLUS("nbc12plus"),
    
    NBC15PLUS("nbc15plus"),
    
    NBC18PLUS("nbc18plus"),
    
    NBC18PLUSR("nbc18plusr"),
    
    NBC_PU("nbcPu"),
    
    NBC_UNRATED("nbcUnrated");

    private String value;

    NbcRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NbcRatingEnum fromValue(String value) {
      for (NbcRatingEnum b : NbcRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NbcRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NbcRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NbcRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NbcRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NbcRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NBC_RATING = "nbcRating";
  @SerializedName(SERIALIZED_NAME_NBC_RATING)
  private NbcRatingEnum nbcRating;

  /**
   * The video&#39;s rating in Poland.
   */
  @JsonAdapter(NbcplRatingEnum.Adapter.class)
  public enum NbcplRatingEnum {
    NBCPL_UNSPECIFIED("nbcplUnspecified"),
    
    NBCPL_I("nbcplI"),
    
    NBCPL_II("nbcplIi"),
    
    NBCPL_III("nbcplIii"),
    
    NBCPL_IV("nbcplIv"),
    
    NBCPL18PLUS("nbcpl18plus"),
    
    NBCPL_UNRATED("nbcplUnrated");

    private String value;

    NbcplRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NbcplRatingEnum fromValue(String value) {
      for (NbcplRatingEnum b : NbcplRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NbcplRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NbcplRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NbcplRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NbcplRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NbcplRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NBCPL_RATING = "nbcplRating";
  @SerializedName(SERIALIZED_NAME_NBCPL_RATING)
  private NbcplRatingEnum nbcplRating;

  /**
   * The video&#39;s rating from the Bulgarian National Film Center.
   */
  @JsonAdapter(NfrcRatingEnum.Adapter.class)
  public enum NfrcRatingEnum {
    NFRC_UNSPECIFIED("nfrcUnspecified"),
    
    NFRC_A("nfrcA"),
    
    NFRC_B("nfrcB"),
    
    NFRC_C("nfrcC"),
    
    NFRC_D("nfrcD"),
    
    NFRC_X("nfrcX"),
    
    NFRC_UNRATED("nfrcUnrated");

    private String value;

    NfrcRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NfrcRatingEnum fromValue(String value) {
      for (NfrcRatingEnum b : NfrcRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NfrcRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NfrcRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NfrcRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NfrcRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NfrcRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NFRC_RATING = "nfrcRating";
  @SerializedName(SERIALIZED_NAME_NFRC_RATING)
  private NfrcRatingEnum nfrcRating;

  /**
   * The video&#39;s rating from Nigeria&#39;s National Film and Video Censors Board.
   */
  @JsonAdapter(NfvcbRatingEnum.Adapter.class)
  public enum NfvcbRatingEnum {
    NFVCB_UNSPECIFIED("nfvcbUnspecified"),
    
    NFVCB_G("nfvcbG"),
    
    NFVCB_PG("nfvcbPg"),
    
    NFVCB12("nfvcb12"),
    
    NFVCB12A("nfvcb12a"),
    
    NFVCB15("nfvcb15"),
    
    NFVCB18("nfvcb18"),
    
    NFVCB_RE("nfvcbRe"),
    
    NFVCB_UNRATED("nfvcbUnrated");

    private String value;

    NfvcbRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NfvcbRatingEnum fromValue(String value) {
      for (NfvcbRatingEnum b : NfvcbRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NfvcbRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NfvcbRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NfvcbRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NfvcbRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NfvcbRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NFVCB_RATING = "nfvcbRating";
  @SerializedName(SERIALIZED_NAME_NFVCB_RATING)
  private NfvcbRatingEnum nfvcbRating;

  /**
   * The video&#39;s rating from the Nacionãlais Kino centrs (National Film Centre of Latvia).
   */
  @JsonAdapter(NkclvRatingEnum.Adapter.class)
  public enum NkclvRatingEnum {
    NKCLV_UNSPECIFIED("nkclvUnspecified"),
    
    NKCLV_U("nkclvU"),
    
    NKCLV7PLUS("nkclv7plus"),
    
    NKCLV12PLUS("nkclv12plus"),
    
    NKCLV16PLUS("nkclv16plus"),
    
    NKCLV18PLUS("nkclv18plus"),
    
    NKCLV_UNRATED("nkclvUnrated");

    private String value;

    NkclvRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NkclvRatingEnum fromValue(String value) {
      for (NkclvRatingEnum b : NkclvRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NkclvRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NkclvRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NkclvRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NkclvRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NkclvRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NKCLV_RATING = "nkclvRating";
  @SerializedName(SERIALIZED_NAME_NKCLV_RATING)
  private NkclvRatingEnum nkclvRating;

  /**
   * The National Media Council ratings system for United Arab Emirates.
   */
  @JsonAdapter(NmcRatingEnum.Adapter.class)
  public enum NmcRatingEnum {
    NMC_UNSPECIFIED("nmcUnspecified"),
    
    NMC_G("nmcG"),
    
    NMC_PG("nmcPg"),
    
    NMC_PG13("nmcPg13"),
    
    NMC_PG15("nmcPg15"),
    
    NMC15PLUS("nmc15plus"),
    
    NMC18PLUS("nmc18plus"),
    
    NMC18TC("nmc18tc"),
    
    NMC_UNRATED("nmcUnrated");

    private String value;

    NmcRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NmcRatingEnum fromValue(String value) {
      for (NmcRatingEnum b : NmcRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NmcRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NmcRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NmcRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NmcRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NmcRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NMC_RATING = "nmcRating";
  @SerializedName(SERIALIZED_NAME_NMC_RATING)
  private NmcRatingEnum nmcRating;

  /**
   * The video&#39;s Office of Film and Literature Classification (OFLC - New Zealand) rating.
   */
  @JsonAdapter(OflcRatingEnum.Adapter.class)
  public enum OflcRatingEnum {
    OFLC_UNSPECIFIED("oflcUnspecified"),
    
    OFLC_G("oflcG"),
    
    OFLC_PG("oflcPg"),
    
    OFLC_M("oflcM"),
    
    OFLC_R13("oflcR13"),
    
    OFLC_R15("oflcR15"),
    
    OFLC_R16("oflcR16"),
    
    OFLC_R18("oflcR18"),
    
    OFLC_UNRATED("oflcUnrated"),
    
    OFLC_RP13("oflcRp13"),
    
    OFLC_RP16("oflcRp16"),
    
    OFLC_RP18("oflcRp18");

    private String value;

    OflcRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OflcRatingEnum fromValue(String value) {
      for (OflcRatingEnum b : OflcRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OflcRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OflcRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OflcRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OflcRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OflcRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OFLC_RATING = "oflcRating";
  @SerializedName(SERIALIZED_NAME_OFLC_RATING)
  private OflcRatingEnum oflcRating;

  /**
   * The video&#39;s rating in Peru.
   */
  @JsonAdapter(PefilmRatingEnum.Adapter.class)
  public enum PefilmRatingEnum {
    PEFILM_UNSPECIFIED("pefilmUnspecified"),
    
    PEFILM_PT("pefilmPt"),
    
    PEFILM_PG("pefilmPg"),
    
    PEFILM14("pefilm14"),
    
    PEFILM18("pefilm18"),
    
    PEFILM_UNRATED("pefilmUnrated");

    private String value;

    PefilmRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PefilmRatingEnum fromValue(String value) {
      for (PefilmRatingEnum b : PefilmRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PefilmRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PefilmRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PefilmRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PefilmRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PefilmRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PEFILM_RATING = "pefilmRating";
  @SerializedName(SERIALIZED_NAME_PEFILM_RATING)
  private PefilmRatingEnum pefilmRating;

  /**
   * The video&#39;s rating from the Hungarian Nemzeti Filmiroda, the Rating Committee of the National Office of Film.
   */
  @JsonAdapter(RcnofRatingEnum.Adapter.class)
  public enum RcnofRatingEnum {
    RCNOF_UNSPECIFIED("rcnofUnspecified"),
    
    RCNOF_I("rcnofI"),
    
    RCNOF_II("rcnofIi"),
    
    RCNOF_III("rcnofIii"),
    
    RCNOF_IV("rcnofIv"),
    
    RCNOF_V("rcnofV"),
    
    RCNOF_VI("rcnofVi"),
    
    RCNOF_UNRATED("rcnofUnrated");

    private String value;

    RcnofRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RcnofRatingEnum fromValue(String value) {
      for (RcnofRatingEnum b : RcnofRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RcnofRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RcnofRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RcnofRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RcnofRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RcnofRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RCNOF_RATING = "rcnofRating";
  @SerializedName(SERIALIZED_NAME_RCNOF_RATING)
  private RcnofRatingEnum rcnofRating;

  /**
   * The video&#39;s rating in Venezuela.
   */
  @JsonAdapter(ResorteviolenciaRatingEnum.Adapter.class)
  public enum ResorteviolenciaRatingEnum {
    RESORTEVIOLENCIA_UNSPECIFIED("resorteviolenciaUnspecified"),
    
    RESORTEVIOLENCIA_A("resorteviolenciaA"),
    
    RESORTEVIOLENCIA_B("resorteviolenciaB"),
    
    RESORTEVIOLENCIA_C("resorteviolenciaC"),
    
    RESORTEVIOLENCIA_D("resorteviolenciaD"),
    
    RESORTEVIOLENCIA_E("resorteviolenciaE"),
    
    RESORTEVIOLENCIA_UNRATED("resorteviolenciaUnrated");

    private String value;

    ResorteviolenciaRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResorteviolenciaRatingEnum fromValue(String value) {
      for (ResorteviolenciaRatingEnum b : ResorteviolenciaRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResorteviolenciaRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResorteviolenciaRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResorteviolenciaRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResorteviolenciaRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResorteviolenciaRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESORTEVIOLENCIA_RATING = "resorteviolenciaRating";
  @SerializedName(SERIALIZED_NAME_RESORTEVIOLENCIA_RATING)
  private ResorteviolenciaRatingEnum resorteviolenciaRating;

  /**
   * The video&#39;s General Directorate of Radio, Television and Cinematography (Mexico) rating.
   */
  @JsonAdapter(RtcRatingEnum.Adapter.class)
  public enum RtcRatingEnum {
    RTC_UNSPECIFIED("rtcUnspecified"),
    
    RTC_AA("rtcAa"),
    
    RTC_A("rtcA"),
    
    RTC_B("rtcB"),
    
    RTC_B15("rtcB15"),
    
    RTC_C("rtcC"),
    
    RTC_D("rtcD"),
    
    RTC_UNRATED("rtcUnrated");

    private String value;

    RtcRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RtcRatingEnum fromValue(String value) {
      for (RtcRatingEnum b : RtcRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RtcRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RtcRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RtcRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RtcRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RtcRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RTC_RATING = "rtcRating";
  @SerializedName(SERIALIZED_NAME_RTC_RATING)
  private RtcRatingEnum rtcRating;

  /**
   * The video&#39;s rating from Ireland&#39;s Raidió Teilifís Éireann.
   */
  @JsonAdapter(RteRatingEnum.Adapter.class)
  public enum RteRatingEnum {
    RTE_UNSPECIFIED("rteUnspecified"),
    
    RTE_GA("rteGa"),
    
    RTE_CH("rteCh"),
    
    RTE_PS("rtePs"),
    
    RTE_MA("rteMa"),
    
    RTE_UNRATED("rteUnrated");

    private String value;

    RteRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RteRatingEnum fromValue(String value) {
      for (RteRatingEnum b : RteRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RteRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RteRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RteRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RteRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RteRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RTE_RATING = "rteRating";
  @SerializedName(SERIALIZED_NAME_RTE_RATING)
  private RteRatingEnum rteRating;

  /**
   * The video&#39;s National Film Registry of the Russian Federation (MKRF - Russia) rating.
   */
  @JsonAdapter(RussiaRatingEnum.Adapter.class)
  public enum RussiaRatingEnum {
    RUSSIA_UNSPECIFIED("russiaUnspecified"),
    
    RUSSIA0("russia0"),
    
    RUSSIA6("russia6"),
    
    RUSSIA12("russia12"),
    
    RUSSIA16("russia16"),
    
    RUSSIA18("russia18"),
    
    RUSSIA_UNRATED("russiaUnrated");

    private String value;

    RussiaRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RussiaRatingEnum fromValue(String value) {
      for (RussiaRatingEnum b : RussiaRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RussiaRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RussiaRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RussiaRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RussiaRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RussiaRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RUSSIA_RATING = "russiaRating";
  @SerializedName(SERIALIZED_NAME_RUSSIA_RATING)
  private RussiaRatingEnum russiaRating;

  /**
   * The video&#39;s rating in Slovakia.
   */
  @JsonAdapter(SkfilmRatingEnum.Adapter.class)
  public enum SkfilmRatingEnum {
    SKFILM_UNSPECIFIED("skfilmUnspecified"),
    
    SKFILM_G("skfilmG"),
    
    SKFILM_P2("skfilmP2"),
    
    SKFILM_P5("skfilmP5"),
    
    SKFILM_P8("skfilmP8"),
    
    SKFILM_UNRATED("skfilmUnrated");

    private String value;

    SkfilmRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SkfilmRatingEnum fromValue(String value) {
      for (SkfilmRatingEnum b : SkfilmRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SkfilmRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SkfilmRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SkfilmRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SkfilmRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SkfilmRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SKFILM_RATING = "skfilmRating";
  @SerializedName(SERIALIZED_NAME_SKFILM_RATING)
  private SkfilmRatingEnum skfilmRating;

  /**
   * The video&#39;s rating in Iceland.
   */
  @JsonAdapter(SmaisRatingEnum.Adapter.class)
  public enum SmaisRatingEnum {
    SMAIS_UNSPECIFIED("smaisUnspecified"),
    
    SMAIS_L("smaisL"),
    
    SMAIS7("smais7"),
    
    SMAIS12("smais12"),
    
    SMAIS14("smais14"),
    
    SMAIS16("smais16"),
    
    SMAIS18("smais18"),
    
    SMAIS_UNRATED("smaisUnrated");

    private String value;

    SmaisRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SmaisRatingEnum fromValue(String value) {
      for (SmaisRatingEnum b : SmaisRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SmaisRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SmaisRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SmaisRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SmaisRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SmaisRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SMAIS_RATING = "smaisRating";
  @SerializedName(SERIALIZED_NAME_SMAIS_RATING)
  private SmaisRatingEnum smaisRating;

  /**
   * The video&#39;s rating from Statens medieråd (Sweden&#39;s National Media Council).
   */
  @JsonAdapter(SmsaRatingEnum.Adapter.class)
  public enum SmsaRatingEnum {
    SMSA_UNSPECIFIED("smsaUnspecified"),
    
    SMSA_A("smsaA"),
    
    SMSA7("smsa7"),
    
    SMSA11("smsa11"),
    
    SMSA15("smsa15"),
    
    SMSA_UNRATED("smsaUnrated");

    private String value;

    SmsaRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SmsaRatingEnum fromValue(String value) {
      for (SmsaRatingEnum b : SmsaRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SmsaRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SmsaRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SmsaRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SmsaRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SmsaRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SMSA_RATING = "smsaRating";
  @SerializedName(SERIALIZED_NAME_SMSA_RATING)
  private SmsaRatingEnum smsaRating;

  /**
   * The video&#39;s TV Parental Guidelines (TVPG) rating.
   */
  @JsonAdapter(TvpgRatingEnum.Adapter.class)
  public enum TvpgRatingEnum {
    TVPG_UNSPECIFIED("tvpgUnspecified"),
    
    TVPG_Y("tvpgY"),
    
    TVPG_Y7("tvpgY7"),
    
    TVPG_Y7_FV("tvpgY7Fv"),
    
    TVPG_G("tvpgG"),
    
    TVPG_PG("tvpgPg"),
    
    PG14("pg14"),
    
    TVPG_MA("tvpgMa"),
    
    TVPG_UNRATED("tvpgUnrated");

    private String value;

    TvpgRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TvpgRatingEnum fromValue(String value) {
      for (TvpgRatingEnum b : TvpgRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TvpgRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TvpgRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TvpgRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TvpgRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TvpgRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TVPG_RATING = "tvpgRating";
  @SerializedName(SERIALIZED_NAME_TVPG_RATING)
  private TvpgRatingEnum tvpgRating;

  /**
   * A rating that YouTube uses to identify age-restricted content.
   */
  @JsonAdapter(YtRatingEnum.Adapter.class)
  public enum YtRatingEnum {
    YT_UNSPECIFIED("ytUnspecified"),
    
    YT_AGE_RESTRICTED("ytAgeRestricted");

    private String value;

    YtRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static YtRatingEnum fromValue(String value) {
      for (YtRatingEnum b : YtRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<YtRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final YtRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public YtRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return YtRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      YtRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_YT_RATING = "ytRating";
  @SerializedName(SERIALIZED_NAME_YT_RATING)
  private YtRatingEnum ytRating;

  public ContentRating() {
  }

  public ContentRating acbRating(AcbRatingEnum acbRating) {
    this.acbRating = acbRating;
    return this;
  }

  /**
   * The video&#39;s Australian Classification Board (ACB) or Australian Communications and Media Authority (ACMA) rating. ACMA ratings are used to classify children&#39;s television programming.
   * @return acbRating
   */
  @javax.annotation.Nullable
  public AcbRatingEnum getAcbRating() {
    return acbRating;
  }

  public void setAcbRating(AcbRatingEnum acbRating) {
    this.acbRating = acbRating;
  }


  public ContentRating agcomRating(AgcomRatingEnum agcomRating) {
    this.agcomRating = agcomRating;
    return this;
  }

  /**
   * The video&#39;s rating from Italy&#39;s Autorità per le Garanzie nelle Comunicazioni (AGCOM).
   * @return agcomRating
   */
  @javax.annotation.Nullable
  public AgcomRatingEnum getAgcomRating() {
    return agcomRating;
  }

  public void setAgcomRating(AgcomRatingEnum agcomRating) {
    this.agcomRating = agcomRating;
  }


  public ContentRating anatelRating(AnatelRatingEnum anatelRating) {
    this.anatelRating = anatelRating;
    return this;
  }

  /**
   * The video&#39;s Anatel (Asociación Nacional de Televisión) rating for Chilean television.
   * @return anatelRating
   */
  @javax.annotation.Nullable
  public AnatelRatingEnum getAnatelRating() {
    return anatelRating;
  }

  public void setAnatelRating(AnatelRatingEnum anatelRating) {
    this.anatelRating = anatelRating;
  }


  public ContentRating bbfcRating(BbfcRatingEnum bbfcRating) {
    this.bbfcRating = bbfcRating;
    return this;
  }

  /**
   * The video&#39;s British Board of Film Classification (BBFC) rating.
   * @return bbfcRating
   */
  @javax.annotation.Nullable
  public BbfcRatingEnum getBbfcRating() {
    return bbfcRating;
  }

  public void setBbfcRating(BbfcRatingEnum bbfcRating) {
    this.bbfcRating = bbfcRating;
  }


  public ContentRating bfvcRating(BfvcRatingEnum bfvcRating) {
    this.bfvcRating = bfvcRating;
    return this;
  }

  /**
   * The video&#39;s rating from Thailand&#39;s Board of Film and Video Censors.
   * @return bfvcRating
   */
  @javax.annotation.Nullable
  public BfvcRatingEnum getBfvcRating() {
    return bfvcRating;
  }

  public void setBfvcRating(BfvcRatingEnum bfvcRating) {
    this.bfvcRating = bfvcRating;
  }


  public ContentRating bmukkRating(BmukkRatingEnum bmukkRating) {
    this.bmukkRating = bmukkRating;
    return this;
  }

  /**
   * The video&#39;s rating from the Austrian Board of Media Classification (Bundesministerium für Unterricht, Kunst und Kultur).
   * @return bmukkRating
   */
  @javax.annotation.Nullable
  public BmukkRatingEnum getBmukkRating() {
    return bmukkRating;
  }

  public void setBmukkRating(BmukkRatingEnum bmukkRating) {
    this.bmukkRating = bmukkRating;
  }


  public ContentRating catvRating(CatvRatingEnum catvRating) {
    this.catvRating = catvRating;
    return this;
  }

  /**
   * Rating system for Canadian TV - Canadian TV Classification System The video&#39;s rating from the Canadian Radio-Television and Telecommunications Commission (CRTC) for Canadian English-language broadcasts. For more information, see the Canadian Broadcast Standards Council website.
   * @return catvRating
   */
  @javax.annotation.Nullable
  public CatvRatingEnum getCatvRating() {
    return catvRating;
  }

  public void setCatvRating(CatvRatingEnum catvRating) {
    this.catvRating = catvRating;
  }


  public ContentRating catvfrRating(CatvfrRatingEnum catvfrRating) {
    this.catvfrRating = catvfrRating;
    return this;
  }

  /**
   * The video&#39;s rating from the Canadian Radio-Television and Telecommunications Commission (CRTC) for Canadian French-language broadcasts. For more information, see the Canadian Broadcast Standards Council website.
   * @return catvfrRating
   */
  @javax.annotation.Nullable
  public CatvfrRatingEnum getCatvfrRating() {
    return catvfrRating;
  }

  public void setCatvfrRating(CatvfrRatingEnum catvfrRating) {
    this.catvfrRating = catvfrRating;
  }


  public ContentRating cbfcRating(CbfcRatingEnum cbfcRating) {
    this.cbfcRating = cbfcRating;
    return this;
  }

  /**
   * The video&#39;s Central Board of Film Certification (CBFC - India) rating.
   * @return cbfcRating
   */
  @javax.annotation.Nullable
  public CbfcRatingEnum getCbfcRating() {
    return cbfcRating;
  }

  public void setCbfcRating(CbfcRatingEnum cbfcRating) {
    this.cbfcRating = cbfcRating;
  }


  public ContentRating cccRating(CccRatingEnum cccRating) {
    this.cccRating = cccRating;
    return this;
  }

  /**
   * The video&#39;s Consejo de Calificación Cinematográfica (Chile) rating.
   * @return cccRating
   */
  @javax.annotation.Nullable
  public CccRatingEnum getCccRating() {
    return cccRating;
  }

  public void setCccRating(CccRatingEnum cccRating) {
    this.cccRating = cccRating;
  }


  public ContentRating cceRating(CceRatingEnum cceRating) {
    this.cceRating = cceRating;
    return this;
  }

  /**
   * The video&#39;s rating from Portugal&#39;s Comissão de Classificação de Espect´culos.
   * @return cceRating
   */
  @javax.annotation.Nullable
  public CceRatingEnum getCceRating() {
    return cceRating;
  }

  public void setCceRating(CceRatingEnum cceRating) {
    this.cceRating = cceRating;
  }


  public ContentRating chfilmRating(ChfilmRatingEnum chfilmRating) {
    this.chfilmRating = chfilmRating;
    return this;
  }

  /**
   * The video&#39;s rating in Switzerland.
   * @return chfilmRating
   */
  @javax.annotation.Nullable
  public ChfilmRatingEnum getChfilmRating() {
    return chfilmRating;
  }

  public void setChfilmRating(ChfilmRatingEnum chfilmRating) {
    this.chfilmRating = chfilmRating;
  }


  public ContentRating chvrsRating(ChvrsRatingEnum chvrsRating) {
    this.chvrsRating = chvrsRating;
    return this;
  }

  /**
   * The video&#39;s Canadian Home Video Rating System (CHVRS) rating.
   * @return chvrsRating
   */
  @javax.annotation.Nullable
  public ChvrsRatingEnum getChvrsRating() {
    return chvrsRating;
  }

  public void setChvrsRating(ChvrsRatingEnum chvrsRating) {
    this.chvrsRating = chvrsRating;
  }


  public ContentRating cicfRating(CicfRatingEnum cicfRating) {
    this.cicfRating = cicfRating;
    return this;
  }

  /**
   * The video&#39;s rating from the Commission de Contrôle des Films (Belgium).
   * @return cicfRating
   */
  @javax.annotation.Nullable
  public CicfRatingEnum getCicfRating() {
    return cicfRating;
  }

  public void setCicfRating(CicfRatingEnum cicfRating) {
    this.cicfRating = cicfRating;
  }


  public ContentRating cnaRating(CnaRatingEnum cnaRating) {
    this.cnaRating = cnaRating;
    return this;
  }

  /**
   * The video&#39;s rating from Romania&#39;s CONSILIUL NATIONAL AL AUDIOVIZUALULUI (CNA).
   * @return cnaRating
   */
  @javax.annotation.Nullable
  public CnaRatingEnum getCnaRating() {
    return cnaRating;
  }

  public void setCnaRating(CnaRatingEnum cnaRating) {
    this.cnaRating = cnaRating;
  }


  public ContentRating cncRating(CncRatingEnum cncRating) {
    this.cncRating = cncRating;
    return this;
  }

  /**
   * Rating system in France - Commission de classification cinematographique
   * @return cncRating
   */
  @javax.annotation.Nullable
  public CncRatingEnum getCncRating() {
    return cncRating;
  }

  public void setCncRating(CncRatingEnum cncRating) {
    this.cncRating = cncRating;
  }


  public ContentRating csaRating(CsaRatingEnum csaRating) {
    this.csaRating = csaRating;
    return this;
  }

  /**
   * The video&#39;s rating from France&#39;s Conseil supérieur de l’audiovisuel, which rates broadcast content.
   * @return csaRating
   */
  @javax.annotation.Nullable
  public CsaRatingEnum getCsaRating() {
    return csaRating;
  }

  public void setCsaRating(CsaRatingEnum csaRating) {
    this.csaRating = csaRating;
  }


  public ContentRating cscfRating(CscfRatingEnum cscfRating) {
    this.cscfRating = cscfRating;
    return this;
  }

  /**
   * The video&#39;s rating from Luxembourg&#39;s Commission de surveillance de la classification des films (CSCF).
   * @return cscfRating
   */
  @javax.annotation.Nullable
  public CscfRatingEnum getCscfRating() {
    return cscfRating;
  }

  public void setCscfRating(CscfRatingEnum cscfRating) {
    this.cscfRating = cscfRating;
  }


  public ContentRating czfilmRating(CzfilmRatingEnum czfilmRating) {
    this.czfilmRating = czfilmRating;
    return this;
  }

  /**
   * The video&#39;s rating in the Czech Republic.
   * @return czfilmRating
   */
  @javax.annotation.Nullable
  public CzfilmRatingEnum getCzfilmRating() {
    return czfilmRating;
  }

  public void setCzfilmRating(CzfilmRatingEnum czfilmRating) {
    this.czfilmRating = czfilmRating;
  }


  public ContentRating djctqRating(DjctqRatingEnum djctqRating) {
    this.djctqRating = djctqRating;
    return this;
  }

  /**
   * The video&#39;s Departamento de Justiça, Classificação, Qualificação e Títulos (DJCQT - Brazil) rating.
   * @return djctqRating
   */
  @javax.annotation.Nullable
  public DjctqRatingEnum getDjctqRating() {
    return djctqRating;
  }

  public void setDjctqRating(DjctqRatingEnum djctqRating) {
    this.djctqRating = djctqRating;
  }


  public ContentRating djctqRatingReasons(List<DjctqRatingReasonsEnum> djctqRatingReasons) {
    this.djctqRatingReasons = djctqRatingReasons;
    return this;
  }

  public ContentRating addDjctqRatingReasonsItem(DjctqRatingReasonsEnum djctqRatingReasonsItem) {
    if (this.djctqRatingReasons == null) {
      this.djctqRatingReasons = new ArrayList<>();
    }
    this.djctqRatingReasons.add(djctqRatingReasonsItem);
    return this;
  }

  /**
   * Reasons that explain why the video received its DJCQT (Brazil) rating.
   * @return djctqRatingReasons
   */
  @javax.annotation.Nullable
  public List<DjctqRatingReasonsEnum> getDjctqRatingReasons() {
    return djctqRatingReasons;
  }

  public void setDjctqRatingReasons(List<DjctqRatingReasonsEnum> djctqRatingReasons) {
    this.djctqRatingReasons = djctqRatingReasons;
  }


  public ContentRating ecbmctRating(EcbmctRatingEnum ecbmctRating) {
    this.ecbmctRating = ecbmctRating;
    return this;
  }

  /**
   * Rating system in Turkey - Evaluation and Classification Board of the Ministry of Culture and Tourism
   * @return ecbmctRating
   */
  @javax.annotation.Nullable
  public EcbmctRatingEnum getEcbmctRating() {
    return ecbmctRating;
  }

  public void setEcbmctRating(EcbmctRatingEnum ecbmctRating) {
    this.ecbmctRating = ecbmctRating;
  }


  public ContentRating eefilmRating(EefilmRatingEnum eefilmRating) {
    this.eefilmRating = eefilmRating;
    return this;
  }

  /**
   * The video&#39;s rating in Estonia.
   * @return eefilmRating
   */
  @javax.annotation.Nullable
  public EefilmRatingEnum getEefilmRating() {
    return eefilmRating;
  }

  public void setEefilmRating(EefilmRatingEnum eefilmRating) {
    this.eefilmRating = eefilmRating;
  }


  public ContentRating egfilmRating(EgfilmRatingEnum egfilmRating) {
    this.egfilmRating = egfilmRating;
    return this;
  }

  /**
   * The video&#39;s rating in Egypt.
   * @return egfilmRating
   */
  @javax.annotation.Nullable
  public EgfilmRatingEnum getEgfilmRating() {
    return egfilmRating;
  }

  public void setEgfilmRating(EgfilmRatingEnum egfilmRating) {
    this.egfilmRating = egfilmRating;
  }


  public ContentRating eirinRating(EirinRatingEnum eirinRating) {
    this.eirinRating = eirinRating;
    return this;
  }

  /**
   * The video&#39;s Eirin (映倫) rating. Eirin is the Japanese rating system.
   * @return eirinRating
   */
  @javax.annotation.Nullable
  public EirinRatingEnum getEirinRating() {
    return eirinRating;
  }

  public void setEirinRating(EirinRatingEnum eirinRating) {
    this.eirinRating = eirinRating;
  }


  public ContentRating fcbmRating(FcbmRatingEnum fcbmRating) {
    this.fcbmRating = fcbmRating;
    return this;
  }

  /**
   * The video&#39;s rating from Malaysia&#39;s Film Censorship Board.
   * @return fcbmRating
   */
  @javax.annotation.Nullable
  public FcbmRatingEnum getFcbmRating() {
    return fcbmRating;
  }

  public void setFcbmRating(FcbmRatingEnum fcbmRating) {
    this.fcbmRating = fcbmRating;
  }


  public ContentRating fcoRating(FcoRatingEnum fcoRating) {
    this.fcoRating = fcoRating;
    return this;
  }

  /**
   * The video&#39;s rating from Hong Kong&#39;s Office for Film, Newspaper and Article Administration.
   * @return fcoRating
   */
  @javax.annotation.Nullable
  public FcoRatingEnum getFcoRating() {
    return fcoRating;
  }

  public void setFcoRating(FcoRatingEnum fcoRating) {
    this.fcoRating = fcoRating;
  }


  @Deprecated
  public ContentRating fmocRating(FmocRatingEnum fmocRating) {
    this.fmocRating = fmocRating;
    return this;
  }

  /**
   * This property has been deprecated. Use the contentDetails.contentRating.cncRating instead.
   * @return fmocRating
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public FmocRatingEnum getFmocRating() {
    return fmocRating;
  }

  @Deprecated
  public void setFmocRating(FmocRatingEnum fmocRating) {
    this.fmocRating = fmocRating;
  }


  public ContentRating fpbRating(FpbRatingEnum fpbRating) {
    this.fpbRating = fpbRating;
    return this;
  }

  /**
   * The video&#39;s rating from South Africa&#39;s Film and Publication Board.
   * @return fpbRating
   */
  @javax.annotation.Nullable
  public FpbRatingEnum getFpbRating() {
    return fpbRating;
  }

  public void setFpbRating(FpbRatingEnum fpbRating) {
    this.fpbRating = fpbRating;
  }


  public ContentRating fpbRatingReasons(List<FpbRatingReasonsEnum> fpbRatingReasons) {
    this.fpbRatingReasons = fpbRatingReasons;
    return this;
  }

  public ContentRating addFpbRatingReasonsItem(FpbRatingReasonsEnum fpbRatingReasonsItem) {
    if (this.fpbRatingReasons == null) {
      this.fpbRatingReasons = new ArrayList<>();
    }
    this.fpbRatingReasons.add(fpbRatingReasonsItem);
    return this;
  }

  /**
   * Reasons that explain why the video received its FPB (South Africa) rating.
   * @return fpbRatingReasons
   */
  @javax.annotation.Nullable
  public List<FpbRatingReasonsEnum> getFpbRatingReasons() {
    return fpbRatingReasons;
  }

  public void setFpbRatingReasons(List<FpbRatingReasonsEnum> fpbRatingReasons) {
    this.fpbRatingReasons = fpbRatingReasons;
  }


  public ContentRating fskRating(FskRatingEnum fskRating) {
    this.fskRating = fskRating;
    return this;
  }

  /**
   * The video&#39;s Freiwillige Selbstkontrolle der Filmwirtschaft (FSK - Germany) rating.
   * @return fskRating
   */
  @javax.annotation.Nullable
  public FskRatingEnum getFskRating() {
    return fskRating;
  }

  public void setFskRating(FskRatingEnum fskRating) {
    this.fskRating = fskRating;
  }


  public ContentRating grfilmRating(GrfilmRatingEnum grfilmRating) {
    this.grfilmRating = grfilmRating;
    return this;
  }

  /**
   * The video&#39;s rating in Greece.
   * @return grfilmRating
   */
  @javax.annotation.Nullable
  public GrfilmRatingEnum getGrfilmRating() {
    return grfilmRating;
  }

  public void setGrfilmRating(GrfilmRatingEnum grfilmRating) {
    this.grfilmRating = grfilmRating;
  }


  public ContentRating icaaRating(IcaaRatingEnum icaaRating) {
    this.icaaRating = icaaRating;
    return this;
  }

  /**
   * The video&#39;s Instituto de la Cinematografía y de las Artes Audiovisuales (ICAA - Spain) rating.
   * @return icaaRating
   */
  @javax.annotation.Nullable
  public IcaaRatingEnum getIcaaRating() {
    return icaaRating;
  }

  public void setIcaaRating(IcaaRatingEnum icaaRating) {
    this.icaaRating = icaaRating;
  }


  public ContentRating ifcoRating(IfcoRatingEnum ifcoRating) {
    this.ifcoRating = ifcoRating;
    return this;
  }

  /**
   * The video&#39;s Irish Film Classification Office (IFCO - Ireland) rating. See the IFCO website for more information.
   * @return ifcoRating
   */
  @javax.annotation.Nullable
  public IfcoRatingEnum getIfcoRating() {
    return ifcoRating;
  }

  public void setIfcoRating(IfcoRatingEnum ifcoRating) {
    this.ifcoRating = ifcoRating;
  }


  public ContentRating ilfilmRating(IlfilmRatingEnum ilfilmRating) {
    this.ilfilmRating = ilfilmRating;
    return this;
  }

  /**
   * The video&#39;s rating in Israel.
   * @return ilfilmRating
   */
  @javax.annotation.Nullable
  public IlfilmRatingEnum getIlfilmRating() {
    return ilfilmRating;
  }

  public void setIlfilmRating(IlfilmRatingEnum ilfilmRating) {
    this.ilfilmRating = ilfilmRating;
  }


  public ContentRating incaaRating(IncaaRatingEnum incaaRating) {
    this.incaaRating = incaaRating;
    return this;
  }

  /**
   * The video&#39;s INCAA (Instituto Nacional de Cine y Artes Audiovisuales - Argentina) rating.
   * @return incaaRating
   */
  @javax.annotation.Nullable
  public IncaaRatingEnum getIncaaRating() {
    return incaaRating;
  }

  public void setIncaaRating(IncaaRatingEnum incaaRating) {
    this.incaaRating = incaaRating;
  }


  public ContentRating kfcbRating(KfcbRatingEnum kfcbRating) {
    this.kfcbRating = kfcbRating;
    return this;
  }

  /**
   * The video&#39;s rating from the Kenya Film Classification Board.
   * @return kfcbRating
   */
  @javax.annotation.Nullable
  public KfcbRatingEnum getKfcbRating() {
    return kfcbRating;
  }

  public void setKfcbRating(KfcbRatingEnum kfcbRating) {
    this.kfcbRating = kfcbRating;
  }


  public ContentRating kijkwijzerRating(KijkwijzerRatingEnum kijkwijzerRating) {
    this.kijkwijzerRating = kijkwijzerRating;
    return this;
  }

  /**
   * The video&#39;s NICAM/Kijkwijzer rating from the Nederlands Instituut voor de Classificatie van Audiovisuele Media (Netherlands).
   * @return kijkwijzerRating
   */
  @javax.annotation.Nullable
  public KijkwijzerRatingEnum getKijkwijzerRating() {
    return kijkwijzerRating;
  }

  public void setKijkwijzerRating(KijkwijzerRatingEnum kijkwijzerRating) {
    this.kijkwijzerRating = kijkwijzerRating;
  }


  public ContentRating kmrbRating(KmrbRatingEnum kmrbRating) {
    this.kmrbRating = kmrbRating;
    return this;
  }

  /**
   * The video&#39;s Korea Media Rating Board (영상물등급위원회) rating. The KMRB rates videos in South Korea.
   * @return kmrbRating
   */
  @javax.annotation.Nullable
  public KmrbRatingEnum getKmrbRating() {
    return kmrbRating;
  }

  public void setKmrbRating(KmrbRatingEnum kmrbRating) {
    this.kmrbRating = kmrbRating;
  }


  public ContentRating lsfRating(LsfRatingEnum lsfRating) {
    this.lsfRating = lsfRating;
    return this;
  }

  /**
   * The video&#39;s rating from Indonesia&#39;s Lembaga Sensor Film.
   * @return lsfRating
   */
  @javax.annotation.Nullable
  public LsfRatingEnum getLsfRating() {
    return lsfRating;
  }

  public void setLsfRating(LsfRatingEnum lsfRating) {
    this.lsfRating = lsfRating;
  }


  public ContentRating mccaaRating(MccaaRatingEnum mccaaRating) {
    this.mccaaRating = mccaaRating;
    return this;
  }

  /**
   * The video&#39;s rating from Malta&#39;s Film Age-Classification Board.
   * @return mccaaRating
   */
  @javax.annotation.Nullable
  public MccaaRatingEnum getMccaaRating() {
    return mccaaRating;
  }

  public void setMccaaRating(MccaaRatingEnum mccaaRating) {
    this.mccaaRating = mccaaRating;
  }


  public ContentRating mccypRating(MccypRatingEnum mccypRating) {
    this.mccypRating = mccypRating;
    return this;
  }

  /**
   * The video&#39;s rating from the Danish Film Institute&#39;s (Det Danske Filminstitut) Media Council for Children and Young People.
   * @return mccypRating
   */
  @javax.annotation.Nullable
  public MccypRatingEnum getMccypRating() {
    return mccypRating;
  }

  public void setMccypRating(MccypRatingEnum mccypRating) {
    this.mccypRating = mccypRating;
  }


  public ContentRating mcstRating(McstRatingEnum mcstRating) {
    this.mcstRating = mcstRating;
    return this;
  }

  /**
   * The video&#39;s rating system for Vietnam - MCST
   * @return mcstRating
   */
  @javax.annotation.Nullable
  public McstRatingEnum getMcstRating() {
    return mcstRating;
  }

  public void setMcstRating(McstRatingEnum mcstRating) {
    this.mcstRating = mcstRating;
  }


  public ContentRating mdaRating(MdaRatingEnum mdaRating) {
    this.mdaRating = mdaRating;
    return this;
  }

  /**
   * The video&#39;s rating from Singapore&#39;s Media Development Authority (MDA) and, specifically, it&#39;s Board of Film Censors (BFC).
   * @return mdaRating
   */
  @javax.annotation.Nullable
  public MdaRatingEnum getMdaRating() {
    return mdaRating;
  }

  public void setMdaRating(MdaRatingEnum mdaRating) {
    this.mdaRating = mdaRating;
  }


  public ContentRating medietilsynetRating(MedietilsynetRatingEnum medietilsynetRating) {
    this.medietilsynetRating = medietilsynetRating;
    return this;
  }

  /**
   * The video&#39;s rating from Medietilsynet, the Norwegian Media Authority.
   * @return medietilsynetRating
   */
  @javax.annotation.Nullable
  public MedietilsynetRatingEnum getMedietilsynetRating() {
    return medietilsynetRating;
  }

  public void setMedietilsynetRating(MedietilsynetRatingEnum medietilsynetRating) {
    this.medietilsynetRating = medietilsynetRating;
  }


  public ContentRating mekuRating(MekuRatingEnum mekuRating) {
    this.mekuRating = mekuRating;
    return this;
  }

  /**
   * The video&#39;s rating from Finland&#39;s Kansallinen Audiovisuaalinen Instituutti (National Audiovisual Institute).
   * @return mekuRating
   */
  @javax.annotation.Nullable
  public MekuRatingEnum getMekuRating() {
    return mekuRating;
  }

  public void setMekuRating(MekuRatingEnum mekuRating) {
    this.mekuRating = mekuRating;
  }


  public ContentRating menaMpaaRating(MenaMpaaRatingEnum menaMpaaRating) {
    this.menaMpaaRating = menaMpaaRating;
    return this;
  }

  /**
   * The rating system for MENA countries, a clone of MPAA. It is needed to prevent titles go live w/o additional QC check, since some of them can be inappropriate for the countries at all. See b/33408548 for more details.
   * @return menaMpaaRating
   */
  @javax.annotation.Nullable
  public MenaMpaaRatingEnum getMenaMpaaRating() {
    return menaMpaaRating;
  }

  public void setMenaMpaaRating(MenaMpaaRatingEnum menaMpaaRating) {
    this.menaMpaaRating = menaMpaaRating;
  }


  public ContentRating mibacRating(MibacRatingEnum mibacRating) {
    this.mibacRating = mibacRating;
    return this;
  }

  /**
   * The video&#39;s rating from the Ministero dei Beni e delle Attività Culturali e del Turismo (Italy).
   * @return mibacRating
   */
  @javax.annotation.Nullable
  public MibacRatingEnum getMibacRating() {
    return mibacRating;
  }

  public void setMibacRating(MibacRatingEnum mibacRating) {
    this.mibacRating = mibacRating;
  }


  public ContentRating mocRating(MocRatingEnum mocRating) {
    this.mocRating = mocRating;
    return this;
  }

  /**
   * The video&#39;s Ministerio de Cultura (Colombia) rating.
   * @return mocRating
   */
  @javax.annotation.Nullable
  public MocRatingEnum getMocRating() {
    return mocRating;
  }

  public void setMocRating(MocRatingEnum mocRating) {
    this.mocRating = mocRating;
  }


  public ContentRating moctwRating(MoctwRatingEnum moctwRating) {
    this.moctwRating = moctwRating;
    return this;
  }

  /**
   * The video&#39;s rating from Taiwan&#39;s Ministry of Culture (文化部).
   * @return moctwRating
   */
  @javax.annotation.Nullable
  public MoctwRatingEnum getMoctwRating() {
    return moctwRating;
  }

  public void setMoctwRating(MoctwRatingEnum moctwRating) {
    this.moctwRating = moctwRating;
  }


  public ContentRating mpaaRating(MpaaRatingEnum mpaaRating) {
    this.mpaaRating = mpaaRating;
    return this;
  }

  /**
   * The video&#39;s Motion Picture Association of America (MPAA) rating.
   * @return mpaaRating
   */
  @javax.annotation.Nullable
  public MpaaRatingEnum getMpaaRating() {
    return mpaaRating;
  }

  public void setMpaaRating(MpaaRatingEnum mpaaRating) {
    this.mpaaRating = mpaaRating;
  }


  public ContentRating mpaatRating(MpaatRatingEnum mpaatRating) {
    this.mpaatRating = mpaatRating;
    return this;
  }

  /**
   * The rating system for trailer, DVD, and Ad in the US. See http://movielabs.com/md/ratings/v2.3/html/US_MPAAT_Ratings.html.
   * @return mpaatRating
   */
  @javax.annotation.Nullable
  public MpaatRatingEnum getMpaatRating() {
    return mpaatRating;
  }

  public void setMpaatRating(MpaatRatingEnum mpaatRating) {
    this.mpaatRating = mpaatRating;
  }


  public ContentRating mtrcbRating(MtrcbRatingEnum mtrcbRating) {
    this.mtrcbRating = mtrcbRating;
    return this;
  }

  /**
   * The video&#39;s rating from the Movie and Television Review and Classification Board (Philippines).
   * @return mtrcbRating
   */
  @javax.annotation.Nullable
  public MtrcbRatingEnum getMtrcbRating() {
    return mtrcbRating;
  }

  public void setMtrcbRating(MtrcbRatingEnum mtrcbRating) {
    this.mtrcbRating = mtrcbRating;
  }


  public ContentRating nbcRating(NbcRatingEnum nbcRating) {
    this.nbcRating = nbcRating;
    return this;
  }

  /**
   * The video&#39;s rating from the Maldives National Bureau of Classification.
   * @return nbcRating
   */
  @javax.annotation.Nullable
  public NbcRatingEnum getNbcRating() {
    return nbcRating;
  }

  public void setNbcRating(NbcRatingEnum nbcRating) {
    this.nbcRating = nbcRating;
  }


  public ContentRating nbcplRating(NbcplRatingEnum nbcplRating) {
    this.nbcplRating = nbcplRating;
    return this;
  }

  /**
   * The video&#39;s rating in Poland.
   * @return nbcplRating
   */
  @javax.annotation.Nullable
  public NbcplRatingEnum getNbcplRating() {
    return nbcplRating;
  }

  public void setNbcplRating(NbcplRatingEnum nbcplRating) {
    this.nbcplRating = nbcplRating;
  }


  public ContentRating nfrcRating(NfrcRatingEnum nfrcRating) {
    this.nfrcRating = nfrcRating;
    return this;
  }

  /**
   * The video&#39;s rating from the Bulgarian National Film Center.
   * @return nfrcRating
   */
  @javax.annotation.Nullable
  public NfrcRatingEnum getNfrcRating() {
    return nfrcRating;
  }

  public void setNfrcRating(NfrcRatingEnum nfrcRating) {
    this.nfrcRating = nfrcRating;
  }


  public ContentRating nfvcbRating(NfvcbRatingEnum nfvcbRating) {
    this.nfvcbRating = nfvcbRating;
    return this;
  }

  /**
   * The video&#39;s rating from Nigeria&#39;s National Film and Video Censors Board.
   * @return nfvcbRating
   */
  @javax.annotation.Nullable
  public NfvcbRatingEnum getNfvcbRating() {
    return nfvcbRating;
  }

  public void setNfvcbRating(NfvcbRatingEnum nfvcbRating) {
    this.nfvcbRating = nfvcbRating;
  }


  public ContentRating nkclvRating(NkclvRatingEnum nkclvRating) {
    this.nkclvRating = nkclvRating;
    return this;
  }

  /**
   * The video&#39;s rating from the Nacionãlais Kino centrs (National Film Centre of Latvia).
   * @return nkclvRating
   */
  @javax.annotation.Nullable
  public NkclvRatingEnum getNkclvRating() {
    return nkclvRating;
  }

  public void setNkclvRating(NkclvRatingEnum nkclvRating) {
    this.nkclvRating = nkclvRating;
  }


  public ContentRating nmcRating(NmcRatingEnum nmcRating) {
    this.nmcRating = nmcRating;
    return this;
  }

  /**
   * The National Media Council ratings system for United Arab Emirates.
   * @return nmcRating
   */
  @javax.annotation.Nullable
  public NmcRatingEnum getNmcRating() {
    return nmcRating;
  }

  public void setNmcRating(NmcRatingEnum nmcRating) {
    this.nmcRating = nmcRating;
  }


  public ContentRating oflcRating(OflcRatingEnum oflcRating) {
    this.oflcRating = oflcRating;
    return this;
  }

  /**
   * The video&#39;s Office of Film and Literature Classification (OFLC - New Zealand) rating.
   * @return oflcRating
   */
  @javax.annotation.Nullable
  public OflcRatingEnum getOflcRating() {
    return oflcRating;
  }

  public void setOflcRating(OflcRatingEnum oflcRating) {
    this.oflcRating = oflcRating;
  }


  public ContentRating pefilmRating(PefilmRatingEnum pefilmRating) {
    this.pefilmRating = pefilmRating;
    return this;
  }

  /**
   * The video&#39;s rating in Peru.
   * @return pefilmRating
   */
  @javax.annotation.Nullable
  public PefilmRatingEnum getPefilmRating() {
    return pefilmRating;
  }

  public void setPefilmRating(PefilmRatingEnum pefilmRating) {
    this.pefilmRating = pefilmRating;
  }


  public ContentRating rcnofRating(RcnofRatingEnum rcnofRating) {
    this.rcnofRating = rcnofRating;
    return this;
  }

  /**
   * The video&#39;s rating from the Hungarian Nemzeti Filmiroda, the Rating Committee of the National Office of Film.
   * @return rcnofRating
   */
  @javax.annotation.Nullable
  public RcnofRatingEnum getRcnofRating() {
    return rcnofRating;
  }

  public void setRcnofRating(RcnofRatingEnum rcnofRating) {
    this.rcnofRating = rcnofRating;
  }


  public ContentRating resorteviolenciaRating(ResorteviolenciaRatingEnum resorteviolenciaRating) {
    this.resorteviolenciaRating = resorteviolenciaRating;
    return this;
  }

  /**
   * The video&#39;s rating in Venezuela.
   * @return resorteviolenciaRating
   */
  @javax.annotation.Nullable
  public ResorteviolenciaRatingEnum getResorteviolenciaRating() {
    return resorteviolenciaRating;
  }

  public void setResorteviolenciaRating(ResorteviolenciaRatingEnum resorteviolenciaRating) {
    this.resorteviolenciaRating = resorteviolenciaRating;
  }


  public ContentRating rtcRating(RtcRatingEnum rtcRating) {
    this.rtcRating = rtcRating;
    return this;
  }

  /**
   * The video&#39;s General Directorate of Radio, Television and Cinematography (Mexico) rating.
   * @return rtcRating
   */
  @javax.annotation.Nullable
  public RtcRatingEnum getRtcRating() {
    return rtcRating;
  }

  public void setRtcRating(RtcRatingEnum rtcRating) {
    this.rtcRating = rtcRating;
  }


  public ContentRating rteRating(RteRatingEnum rteRating) {
    this.rteRating = rteRating;
    return this;
  }

  /**
   * The video&#39;s rating from Ireland&#39;s Raidió Teilifís Éireann.
   * @return rteRating
   */
  @javax.annotation.Nullable
  public RteRatingEnum getRteRating() {
    return rteRating;
  }

  public void setRteRating(RteRatingEnum rteRating) {
    this.rteRating = rteRating;
  }


  public ContentRating russiaRating(RussiaRatingEnum russiaRating) {
    this.russiaRating = russiaRating;
    return this;
  }

  /**
   * The video&#39;s National Film Registry of the Russian Federation (MKRF - Russia) rating.
   * @return russiaRating
   */
  @javax.annotation.Nullable
  public RussiaRatingEnum getRussiaRating() {
    return russiaRating;
  }

  public void setRussiaRating(RussiaRatingEnum russiaRating) {
    this.russiaRating = russiaRating;
  }


  public ContentRating skfilmRating(SkfilmRatingEnum skfilmRating) {
    this.skfilmRating = skfilmRating;
    return this;
  }

  /**
   * The video&#39;s rating in Slovakia.
   * @return skfilmRating
   */
  @javax.annotation.Nullable
  public SkfilmRatingEnum getSkfilmRating() {
    return skfilmRating;
  }

  public void setSkfilmRating(SkfilmRatingEnum skfilmRating) {
    this.skfilmRating = skfilmRating;
  }


  public ContentRating smaisRating(SmaisRatingEnum smaisRating) {
    this.smaisRating = smaisRating;
    return this;
  }

  /**
   * The video&#39;s rating in Iceland.
   * @return smaisRating
   */
  @javax.annotation.Nullable
  public SmaisRatingEnum getSmaisRating() {
    return smaisRating;
  }

  public void setSmaisRating(SmaisRatingEnum smaisRating) {
    this.smaisRating = smaisRating;
  }


  public ContentRating smsaRating(SmsaRatingEnum smsaRating) {
    this.smsaRating = smsaRating;
    return this;
  }

  /**
   * The video&#39;s rating from Statens medieråd (Sweden&#39;s National Media Council).
   * @return smsaRating
   */
  @javax.annotation.Nullable
  public SmsaRatingEnum getSmsaRating() {
    return smsaRating;
  }

  public void setSmsaRating(SmsaRatingEnum smsaRating) {
    this.smsaRating = smsaRating;
  }


  public ContentRating tvpgRating(TvpgRatingEnum tvpgRating) {
    this.tvpgRating = tvpgRating;
    return this;
  }

  /**
   * The video&#39;s TV Parental Guidelines (TVPG) rating.
   * @return tvpgRating
   */
  @javax.annotation.Nullable
  public TvpgRatingEnum getTvpgRating() {
    return tvpgRating;
  }

  public void setTvpgRating(TvpgRatingEnum tvpgRating) {
    this.tvpgRating = tvpgRating;
  }


  public ContentRating ytRating(YtRatingEnum ytRating) {
    this.ytRating = ytRating;
    return this;
  }

  /**
   * A rating that YouTube uses to identify age-restricted content.
   * @return ytRating
   */
  @javax.annotation.Nullable
  public YtRatingEnum getYtRating() {
    return ytRating;
  }

  public void setYtRating(YtRatingEnum ytRating) {
    this.ytRating = ytRating;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentRating contentRating = (ContentRating) o;
    return Objects.equals(this.acbRating, contentRating.acbRating) &&
        Objects.equals(this.agcomRating, contentRating.agcomRating) &&
        Objects.equals(this.anatelRating, contentRating.anatelRating) &&
        Objects.equals(this.bbfcRating, contentRating.bbfcRating) &&
        Objects.equals(this.bfvcRating, contentRating.bfvcRating) &&
        Objects.equals(this.bmukkRating, contentRating.bmukkRating) &&
        Objects.equals(this.catvRating, contentRating.catvRating) &&
        Objects.equals(this.catvfrRating, contentRating.catvfrRating) &&
        Objects.equals(this.cbfcRating, contentRating.cbfcRating) &&
        Objects.equals(this.cccRating, contentRating.cccRating) &&
        Objects.equals(this.cceRating, contentRating.cceRating) &&
        Objects.equals(this.chfilmRating, contentRating.chfilmRating) &&
        Objects.equals(this.chvrsRating, contentRating.chvrsRating) &&
        Objects.equals(this.cicfRating, contentRating.cicfRating) &&
        Objects.equals(this.cnaRating, contentRating.cnaRating) &&
        Objects.equals(this.cncRating, contentRating.cncRating) &&
        Objects.equals(this.csaRating, contentRating.csaRating) &&
        Objects.equals(this.cscfRating, contentRating.cscfRating) &&
        Objects.equals(this.czfilmRating, contentRating.czfilmRating) &&
        Objects.equals(this.djctqRating, contentRating.djctqRating) &&
        Objects.equals(this.djctqRatingReasons, contentRating.djctqRatingReasons) &&
        Objects.equals(this.ecbmctRating, contentRating.ecbmctRating) &&
        Objects.equals(this.eefilmRating, contentRating.eefilmRating) &&
        Objects.equals(this.egfilmRating, contentRating.egfilmRating) &&
        Objects.equals(this.eirinRating, contentRating.eirinRating) &&
        Objects.equals(this.fcbmRating, contentRating.fcbmRating) &&
        Objects.equals(this.fcoRating, contentRating.fcoRating) &&
        Objects.equals(this.fmocRating, contentRating.fmocRating) &&
        Objects.equals(this.fpbRating, contentRating.fpbRating) &&
        Objects.equals(this.fpbRatingReasons, contentRating.fpbRatingReasons) &&
        Objects.equals(this.fskRating, contentRating.fskRating) &&
        Objects.equals(this.grfilmRating, contentRating.grfilmRating) &&
        Objects.equals(this.icaaRating, contentRating.icaaRating) &&
        Objects.equals(this.ifcoRating, contentRating.ifcoRating) &&
        Objects.equals(this.ilfilmRating, contentRating.ilfilmRating) &&
        Objects.equals(this.incaaRating, contentRating.incaaRating) &&
        Objects.equals(this.kfcbRating, contentRating.kfcbRating) &&
        Objects.equals(this.kijkwijzerRating, contentRating.kijkwijzerRating) &&
        Objects.equals(this.kmrbRating, contentRating.kmrbRating) &&
        Objects.equals(this.lsfRating, contentRating.lsfRating) &&
        Objects.equals(this.mccaaRating, contentRating.mccaaRating) &&
        Objects.equals(this.mccypRating, contentRating.mccypRating) &&
        Objects.equals(this.mcstRating, contentRating.mcstRating) &&
        Objects.equals(this.mdaRating, contentRating.mdaRating) &&
        Objects.equals(this.medietilsynetRating, contentRating.medietilsynetRating) &&
        Objects.equals(this.mekuRating, contentRating.mekuRating) &&
        Objects.equals(this.menaMpaaRating, contentRating.menaMpaaRating) &&
        Objects.equals(this.mibacRating, contentRating.mibacRating) &&
        Objects.equals(this.mocRating, contentRating.mocRating) &&
        Objects.equals(this.moctwRating, contentRating.moctwRating) &&
        Objects.equals(this.mpaaRating, contentRating.mpaaRating) &&
        Objects.equals(this.mpaatRating, contentRating.mpaatRating) &&
        Objects.equals(this.mtrcbRating, contentRating.mtrcbRating) &&
        Objects.equals(this.nbcRating, contentRating.nbcRating) &&
        Objects.equals(this.nbcplRating, contentRating.nbcplRating) &&
        Objects.equals(this.nfrcRating, contentRating.nfrcRating) &&
        Objects.equals(this.nfvcbRating, contentRating.nfvcbRating) &&
        Objects.equals(this.nkclvRating, contentRating.nkclvRating) &&
        Objects.equals(this.nmcRating, contentRating.nmcRating) &&
        Objects.equals(this.oflcRating, contentRating.oflcRating) &&
        Objects.equals(this.pefilmRating, contentRating.pefilmRating) &&
        Objects.equals(this.rcnofRating, contentRating.rcnofRating) &&
        Objects.equals(this.resorteviolenciaRating, contentRating.resorteviolenciaRating) &&
        Objects.equals(this.rtcRating, contentRating.rtcRating) &&
        Objects.equals(this.rteRating, contentRating.rteRating) &&
        Objects.equals(this.russiaRating, contentRating.russiaRating) &&
        Objects.equals(this.skfilmRating, contentRating.skfilmRating) &&
        Objects.equals(this.smaisRating, contentRating.smaisRating) &&
        Objects.equals(this.smsaRating, contentRating.smsaRating) &&
        Objects.equals(this.tvpgRating, contentRating.tvpgRating) &&
        Objects.equals(this.ytRating, contentRating.ytRating);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acbRating, agcomRating, anatelRating, bbfcRating, bfvcRating, bmukkRating, catvRating, catvfrRating, cbfcRating, cccRating, cceRating, chfilmRating, chvrsRating, cicfRating, cnaRating, cncRating, csaRating, cscfRating, czfilmRating, djctqRating, djctqRatingReasons, ecbmctRating, eefilmRating, egfilmRating, eirinRating, fcbmRating, fcoRating, fmocRating, fpbRating, fpbRatingReasons, fskRating, grfilmRating, icaaRating, ifcoRating, ilfilmRating, incaaRating, kfcbRating, kijkwijzerRating, kmrbRating, lsfRating, mccaaRating, mccypRating, mcstRating, mdaRating, medietilsynetRating, mekuRating, menaMpaaRating, mibacRating, mocRating, moctwRating, mpaaRating, mpaatRating, mtrcbRating, nbcRating, nbcplRating, nfrcRating, nfvcbRating, nkclvRating, nmcRating, oflcRating, pefilmRating, rcnofRating, resorteviolenciaRating, rtcRating, rteRating, russiaRating, skfilmRating, smaisRating, smsaRating, tvpgRating, ytRating);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentRating {\n");
    sb.append("    acbRating: ").append(toIndentedString(acbRating)).append("\n");
    sb.append("    agcomRating: ").append(toIndentedString(agcomRating)).append("\n");
    sb.append("    anatelRating: ").append(toIndentedString(anatelRating)).append("\n");
    sb.append("    bbfcRating: ").append(toIndentedString(bbfcRating)).append("\n");
    sb.append("    bfvcRating: ").append(toIndentedString(bfvcRating)).append("\n");
    sb.append("    bmukkRating: ").append(toIndentedString(bmukkRating)).append("\n");
    sb.append("    catvRating: ").append(toIndentedString(catvRating)).append("\n");
    sb.append("    catvfrRating: ").append(toIndentedString(catvfrRating)).append("\n");
    sb.append("    cbfcRating: ").append(toIndentedString(cbfcRating)).append("\n");
    sb.append("    cccRating: ").append(toIndentedString(cccRating)).append("\n");
    sb.append("    cceRating: ").append(toIndentedString(cceRating)).append("\n");
    sb.append("    chfilmRating: ").append(toIndentedString(chfilmRating)).append("\n");
    sb.append("    chvrsRating: ").append(toIndentedString(chvrsRating)).append("\n");
    sb.append("    cicfRating: ").append(toIndentedString(cicfRating)).append("\n");
    sb.append("    cnaRating: ").append(toIndentedString(cnaRating)).append("\n");
    sb.append("    cncRating: ").append(toIndentedString(cncRating)).append("\n");
    sb.append("    csaRating: ").append(toIndentedString(csaRating)).append("\n");
    sb.append("    cscfRating: ").append(toIndentedString(cscfRating)).append("\n");
    sb.append("    czfilmRating: ").append(toIndentedString(czfilmRating)).append("\n");
    sb.append("    djctqRating: ").append(toIndentedString(djctqRating)).append("\n");
    sb.append("    djctqRatingReasons: ").append(toIndentedString(djctqRatingReasons)).append("\n");
    sb.append("    ecbmctRating: ").append(toIndentedString(ecbmctRating)).append("\n");
    sb.append("    eefilmRating: ").append(toIndentedString(eefilmRating)).append("\n");
    sb.append("    egfilmRating: ").append(toIndentedString(egfilmRating)).append("\n");
    sb.append("    eirinRating: ").append(toIndentedString(eirinRating)).append("\n");
    sb.append("    fcbmRating: ").append(toIndentedString(fcbmRating)).append("\n");
    sb.append("    fcoRating: ").append(toIndentedString(fcoRating)).append("\n");
    sb.append("    fmocRating: ").append(toIndentedString(fmocRating)).append("\n");
    sb.append("    fpbRating: ").append(toIndentedString(fpbRating)).append("\n");
    sb.append("    fpbRatingReasons: ").append(toIndentedString(fpbRatingReasons)).append("\n");
    sb.append("    fskRating: ").append(toIndentedString(fskRating)).append("\n");
    sb.append("    grfilmRating: ").append(toIndentedString(grfilmRating)).append("\n");
    sb.append("    icaaRating: ").append(toIndentedString(icaaRating)).append("\n");
    sb.append("    ifcoRating: ").append(toIndentedString(ifcoRating)).append("\n");
    sb.append("    ilfilmRating: ").append(toIndentedString(ilfilmRating)).append("\n");
    sb.append("    incaaRating: ").append(toIndentedString(incaaRating)).append("\n");
    sb.append("    kfcbRating: ").append(toIndentedString(kfcbRating)).append("\n");
    sb.append("    kijkwijzerRating: ").append(toIndentedString(kijkwijzerRating)).append("\n");
    sb.append("    kmrbRating: ").append(toIndentedString(kmrbRating)).append("\n");
    sb.append("    lsfRating: ").append(toIndentedString(lsfRating)).append("\n");
    sb.append("    mccaaRating: ").append(toIndentedString(mccaaRating)).append("\n");
    sb.append("    mccypRating: ").append(toIndentedString(mccypRating)).append("\n");
    sb.append("    mcstRating: ").append(toIndentedString(mcstRating)).append("\n");
    sb.append("    mdaRating: ").append(toIndentedString(mdaRating)).append("\n");
    sb.append("    medietilsynetRating: ").append(toIndentedString(medietilsynetRating)).append("\n");
    sb.append("    mekuRating: ").append(toIndentedString(mekuRating)).append("\n");
    sb.append("    menaMpaaRating: ").append(toIndentedString(menaMpaaRating)).append("\n");
    sb.append("    mibacRating: ").append(toIndentedString(mibacRating)).append("\n");
    sb.append("    mocRating: ").append(toIndentedString(mocRating)).append("\n");
    sb.append("    moctwRating: ").append(toIndentedString(moctwRating)).append("\n");
    sb.append("    mpaaRating: ").append(toIndentedString(mpaaRating)).append("\n");
    sb.append("    mpaatRating: ").append(toIndentedString(mpaatRating)).append("\n");
    sb.append("    mtrcbRating: ").append(toIndentedString(mtrcbRating)).append("\n");
    sb.append("    nbcRating: ").append(toIndentedString(nbcRating)).append("\n");
    sb.append("    nbcplRating: ").append(toIndentedString(nbcplRating)).append("\n");
    sb.append("    nfrcRating: ").append(toIndentedString(nfrcRating)).append("\n");
    sb.append("    nfvcbRating: ").append(toIndentedString(nfvcbRating)).append("\n");
    sb.append("    nkclvRating: ").append(toIndentedString(nkclvRating)).append("\n");
    sb.append("    nmcRating: ").append(toIndentedString(nmcRating)).append("\n");
    sb.append("    oflcRating: ").append(toIndentedString(oflcRating)).append("\n");
    sb.append("    pefilmRating: ").append(toIndentedString(pefilmRating)).append("\n");
    sb.append("    rcnofRating: ").append(toIndentedString(rcnofRating)).append("\n");
    sb.append("    resorteviolenciaRating: ").append(toIndentedString(resorteviolenciaRating)).append("\n");
    sb.append("    rtcRating: ").append(toIndentedString(rtcRating)).append("\n");
    sb.append("    rteRating: ").append(toIndentedString(rteRating)).append("\n");
    sb.append("    russiaRating: ").append(toIndentedString(russiaRating)).append("\n");
    sb.append("    skfilmRating: ").append(toIndentedString(skfilmRating)).append("\n");
    sb.append("    smaisRating: ").append(toIndentedString(smaisRating)).append("\n");
    sb.append("    smsaRating: ").append(toIndentedString(smsaRating)).append("\n");
    sb.append("    tvpgRating: ").append(toIndentedString(tvpgRating)).append("\n");
    sb.append("    ytRating: ").append(toIndentedString(ytRating)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acbRating");
    openapiFields.add("agcomRating");
    openapiFields.add("anatelRating");
    openapiFields.add("bbfcRating");
    openapiFields.add("bfvcRating");
    openapiFields.add("bmukkRating");
    openapiFields.add("catvRating");
    openapiFields.add("catvfrRating");
    openapiFields.add("cbfcRating");
    openapiFields.add("cccRating");
    openapiFields.add("cceRating");
    openapiFields.add("chfilmRating");
    openapiFields.add("chvrsRating");
    openapiFields.add("cicfRating");
    openapiFields.add("cnaRating");
    openapiFields.add("cncRating");
    openapiFields.add("csaRating");
    openapiFields.add("cscfRating");
    openapiFields.add("czfilmRating");
    openapiFields.add("djctqRating");
    openapiFields.add("djctqRatingReasons");
    openapiFields.add("ecbmctRating");
    openapiFields.add("eefilmRating");
    openapiFields.add("egfilmRating");
    openapiFields.add("eirinRating");
    openapiFields.add("fcbmRating");
    openapiFields.add("fcoRating");
    openapiFields.add("fmocRating");
    openapiFields.add("fpbRating");
    openapiFields.add("fpbRatingReasons");
    openapiFields.add("fskRating");
    openapiFields.add("grfilmRating");
    openapiFields.add("icaaRating");
    openapiFields.add("ifcoRating");
    openapiFields.add("ilfilmRating");
    openapiFields.add("incaaRating");
    openapiFields.add("kfcbRating");
    openapiFields.add("kijkwijzerRating");
    openapiFields.add("kmrbRating");
    openapiFields.add("lsfRating");
    openapiFields.add("mccaaRating");
    openapiFields.add("mccypRating");
    openapiFields.add("mcstRating");
    openapiFields.add("mdaRating");
    openapiFields.add("medietilsynetRating");
    openapiFields.add("mekuRating");
    openapiFields.add("menaMpaaRating");
    openapiFields.add("mibacRating");
    openapiFields.add("mocRating");
    openapiFields.add("moctwRating");
    openapiFields.add("mpaaRating");
    openapiFields.add("mpaatRating");
    openapiFields.add("mtrcbRating");
    openapiFields.add("nbcRating");
    openapiFields.add("nbcplRating");
    openapiFields.add("nfrcRating");
    openapiFields.add("nfvcbRating");
    openapiFields.add("nkclvRating");
    openapiFields.add("nmcRating");
    openapiFields.add("oflcRating");
    openapiFields.add("pefilmRating");
    openapiFields.add("rcnofRating");
    openapiFields.add("resorteviolenciaRating");
    openapiFields.add("rtcRating");
    openapiFields.add("rteRating");
    openapiFields.add("russiaRating");
    openapiFields.add("skfilmRating");
    openapiFields.add("smaisRating");
    openapiFields.add("smsaRating");
    openapiFields.add("tvpgRating");
    openapiFields.add("ytRating");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContentRating
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContentRating.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContentRating is not found in the empty JSON string", ContentRating.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContentRating.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContentRating` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("acbRating") != null && !jsonObj.get("acbRating").isJsonNull()) && !jsonObj.get("acbRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acbRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acbRating").toString()));
      }
      // validate the optional field `acbRating`
      if (jsonObj.get("acbRating") != null && !jsonObj.get("acbRating").isJsonNull()) {
        AcbRatingEnum.validateJsonElement(jsonObj.get("acbRating"));
      }
      if ((jsonObj.get("agcomRating") != null && !jsonObj.get("agcomRating").isJsonNull()) && !jsonObj.get("agcomRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agcomRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agcomRating").toString()));
      }
      // validate the optional field `agcomRating`
      if (jsonObj.get("agcomRating") != null && !jsonObj.get("agcomRating").isJsonNull()) {
        AgcomRatingEnum.validateJsonElement(jsonObj.get("agcomRating"));
      }
      if ((jsonObj.get("anatelRating") != null && !jsonObj.get("anatelRating").isJsonNull()) && !jsonObj.get("anatelRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `anatelRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("anatelRating").toString()));
      }
      // validate the optional field `anatelRating`
      if (jsonObj.get("anatelRating") != null && !jsonObj.get("anatelRating").isJsonNull()) {
        AnatelRatingEnum.validateJsonElement(jsonObj.get("anatelRating"));
      }
      if ((jsonObj.get("bbfcRating") != null && !jsonObj.get("bbfcRating").isJsonNull()) && !jsonObj.get("bbfcRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bbfcRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bbfcRating").toString()));
      }
      // validate the optional field `bbfcRating`
      if (jsonObj.get("bbfcRating") != null && !jsonObj.get("bbfcRating").isJsonNull()) {
        BbfcRatingEnum.validateJsonElement(jsonObj.get("bbfcRating"));
      }
      if ((jsonObj.get("bfvcRating") != null && !jsonObj.get("bfvcRating").isJsonNull()) && !jsonObj.get("bfvcRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bfvcRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bfvcRating").toString()));
      }
      // validate the optional field `bfvcRating`
      if (jsonObj.get("bfvcRating") != null && !jsonObj.get("bfvcRating").isJsonNull()) {
        BfvcRatingEnum.validateJsonElement(jsonObj.get("bfvcRating"));
      }
      if ((jsonObj.get("bmukkRating") != null && !jsonObj.get("bmukkRating").isJsonNull()) && !jsonObj.get("bmukkRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bmukkRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bmukkRating").toString()));
      }
      // validate the optional field `bmukkRating`
      if (jsonObj.get("bmukkRating") != null && !jsonObj.get("bmukkRating").isJsonNull()) {
        BmukkRatingEnum.validateJsonElement(jsonObj.get("bmukkRating"));
      }
      if ((jsonObj.get("catvRating") != null && !jsonObj.get("catvRating").isJsonNull()) && !jsonObj.get("catvRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `catvRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("catvRating").toString()));
      }
      // validate the optional field `catvRating`
      if (jsonObj.get("catvRating") != null && !jsonObj.get("catvRating").isJsonNull()) {
        CatvRatingEnum.validateJsonElement(jsonObj.get("catvRating"));
      }
      if ((jsonObj.get("catvfrRating") != null && !jsonObj.get("catvfrRating").isJsonNull()) && !jsonObj.get("catvfrRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `catvfrRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("catvfrRating").toString()));
      }
      // validate the optional field `catvfrRating`
      if (jsonObj.get("catvfrRating") != null && !jsonObj.get("catvfrRating").isJsonNull()) {
        CatvfrRatingEnum.validateJsonElement(jsonObj.get("catvfrRating"));
      }
      if ((jsonObj.get("cbfcRating") != null && !jsonObj.get("cbfcRating").isJsonNull()) && !jsonObj.get("cbfcRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cbfcRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cbfcRating").toString()));
      }
      // validate the optional field `cbfcRating`
      if (jsonObj.get("cbfcRating") != null && !jsonObj.get("cbfcRating").isJsonNull()) {
        CbfcRatingEnum.validateJsonElement(jsonObj.get("cbfcRating"));
      }
      if ((jsonObj.get("cccRating") != null && !jsonObj.get("cccRating").isJsonNull()) && !jsonObj.get("cccRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cccRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cccRating").toString()));
      }
      // validate the optional field `cccRating`
      if (jsonObj.get("cccRating") != null && !jsonObj.get("cccRating").isJsonNull()) {
        CccRatingEnum.validateJsonElement(jsonObj.get("cccRating"));
      }
      if ((jsonObj.get("cceRating") != null && !jsonObj.get("cceRating").isJsonNull()) && !jsonObj.get("cceRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cceRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cceRating").toString()));
      }
      // validate the optional field `cceRating`
      if (jsonObj.get("cceRating") != null && !jsonObj.get("cceRating").isJsonNull()) {
        CceRatingEnum.validateJsonElement(jsonObj.get("cceRating"));
      }
      if ((jsonObj.get("chfilmRating") != null && !jsonObj.get("chfilmRating").isJsonNull()) && !jsonObj.get("chfilmRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chfilmRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chfilmRating").toString()));
      }
      // validate the optional field `chfilmRating`
      if (jsonObj.get("chfilmRating") != null && !jsonObj.get("chfilmRating").isJsonNull()) {
        ChfilmRatingEnum.validateJsonElement(jsonObj.get("chfilmRating"));
      }
      if ((jsonObj.get("chvrsRating") != null && !jsonObj.get("chvrsRating").isJsonNull()) && !jsonObj.get("chvrsRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chvrsRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chvrsRating").toString()));
      }
      // validate the optional field `chvrsRating`
      if (jsonObj.get("chvrsRating") != null && !jsonObj.get("chvrsRating").isJsonNull()) {
        ChvrsRatingEnum.validateJsonElement(jsonObj.get("chvrsRating"));
      }
      if ((jsonObj.get("cicfRating") != null && !jsonObj.get("cicfRating").isJsonNull()) && !jsonObj.get("cicfRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cicfRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cicfRating").toString()));
      }
      // validate the optional field `cicfRating`
      if (jsonObj.get("cicfRating") != null && !jsonObj.get("cicfRating").isJsonNull()) {
        CicfRatingEnum.validateJsonElement(jsonObj.get("cicfRating"));
      }
      if ((jsonObj.get("cnaRating") != null && !jsonObj.get("cnaRating").isJsonNull()) && !jsonObj.get("cnaRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cnaRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cnaRating").toString()));
      }
      // validate the optional field `cnaRating`
      if (jsonObj.get("cnaRating") != null && !jsonObj.get("cnaRating").isJsonNull()) {
        CnaRatingEnum.validateJsonElement(jsonObj.get("cnaRating"));
      }
      if ((jsonObj.get("cncRating") != null && !jsonObj.get("cncRating").isJsonNull()) && !jsonObj.get("cncRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cncRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cncRating").toString()));
      }
      // validate the optional field `cncRating`
      if (jsonObj.get("cncRating") != null && !jsonObj.get("cncRating").isJsonNull()) {
        CncRatingEnum.validateJsonElement(jsonObj.get("cncRating"));
      }
      if ((jsonObj.get("csaRating") != null && !jsonObj.get("csaRating").isJsonNull()) && !jsonObj.get("csaRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `csaRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("csaRating").toString()));
      }
      // validate the optional field `csaRating`
      if (jsonObj.get("csaRating") != null && !jsonObj.get("csaRating").isJsonNull()) {
        CsaRatingEnum.validateJsonElement(jsonObj.get("csaRating"));
      }
      if ((jsonObj.get("cscfRating") != null && !jsonObj.get("cscfRating").isJsonNull()) && !jsonObj.get("cscfRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cscfRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cscfRating").toString()));
      }
      // validate the optional field `cscfRating`
      if (jsonObj.get("cscfRating") != null && !jsonObj.get("cscfRating").isJsonNull()) {
        CscfRatingEnum.validateJsonElement(jsonObj.get("cscfRating"));
      }
      if ((jsonObj.get("czfilmRating") != null && !jsonObj.get("czfilmRating").isJsonNull()) && !jsonObj.get("czfilmRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `czfilmRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("czfilmRating").toString()));
      }
      // validate the optional field `czfilmRating`
      if (jsonObj.get("czfilmRating") != null && !jsonObj.get("czfilmRating").isJsonNull()) {
        CzfilmRatingEnum.validateJsonElement(jsonObj.get("czfilmRating"));
      }
      if ((jsonObj.get("djctqRating") != null && !jsonObj.get("djctqRating").isJsonNull()) && !jsonObj.get("djctqRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `djctqRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("djctqRating").toString()));
      }
      // validate the optional field `djctqRating`
      if (jsonObj.get("djctqRating") != null && !jsonObj.get("djctqRating").isJsonNull()) {
        DjctqRatingEnum.validateJsonElement(jsonObj.get("djctqRating"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("djctqRatingReasons") != null && !jsonObj.get("djctqRatingReasons").isJsonNull() && !jsonObj.get("djctqRatingReasons").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `djctqRatingReasons` to be an array in the JSON string but got `%s`", jsonObj.get("djctqRatingReasons").toString()));
      }
      if ((jsonObj.get("ecbmctRating") != null && !jsonObj.get("ecbmctRating").isJsonNull()) && !jsonObj.get("ecbmctRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ecbmctRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ecbmctRating").toString()));
      }
      // validate the optional field `ecbmctRating`
      if (jsonObj.get("ecbmctRating") != null && !jsonObj.get("ecbmctRating").isJsonNull()) {
        EcbmctRatingEnum.validateJsonElement(jsonObj.get("ecbmctRating"));
      }
      if ((jsonObj.get("eefilmRating") != null && !jsonObj.get("eefilmRating").isJsonNull()) && !jsonObj.get("eefilmRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eefilmRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eefilmRating").toString()));
      }
      // validate the optional field `eefilmRating`
      if (jsonObj.get("eefilmRating") != null && !jsonObj.get("eefilmRating").isJsonNull()) {
        EefilmRatingEnum.validateJsonElement(jsonObj.get("eefilmRating"));
      }
      if ((jsonObj.get("egfilmRating") != null && !jsonObj.get("egfilmRating").isJsonNull()) && !jsonObj.get("egfilmRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `egfilmRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("egfilmRating").toString()));
      }
      // validate the optional field `egfilmRating`
      if (jsonObj.get("egfilmRating") != null && !jsonObj.get("egfilmRating").isJsonNull()) {
        EgfilmRatingEnum.validateJsonElement(jsonObj.get("egfilmRating"));
      }
      if ((jsonObj.get("eirinRating") != null && !jsonObj.get("eirinRating").isJsonNull()) && !jsonObj.get("eirinRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eirinRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eirinRating").toString()));
      }
      // validate the optional field `eirinRating`
      if (jsonObj.get("eirinRating") != null && !jsonObj.get("eirinRating").isJsonNull()) {
        EirinRatingEnum.validateJsonElement(jsonObj.get("eirinRating"));
      }
      if ((jsonObj.get("fcbmRating") != null && !jsonObj.get("fcbmRating").isJsonNull()) && !jsonObj.get("fcbmRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fcbmRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fcbmRating").toString()));
      }
      // validate the optional field `fcbmRating`
      if (jsonObj.get("fcbmRating") != null && !jsonObj.get("fcbmRating").isJsonNull()) {
        FcbmRatingEnum.validateJsonElement(jsonObj.get("fcbmRating"));
      }
      if ((jsonObj.get("fcoRating") != null && !jsonObj.get("fcoRating").isJsonNull()) && !jsonObj.get("fcoRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fcoRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fcoRating").toString()));
      }
      // validate the optional field `fcoRating`
      if (jsonObj.get("fcoRating") != null && !jsonObj.get("fcoRating").isJsonNull()) {
        FcoRatingEnum.validateJsonElement(jsonObj.get("fcoRating"));
      }
      if ((jsonObj.get("fmocRating") != null && !jsonObj.get("fmocRating").isJsonNull()) && !jsonObj.get("fmocRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fmocRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fmocRating").toString()));
      }
      // validate the optional field `fmocRating`
      if (jsonObj.get("fmocRating") != null && !jsonObj.get("fmocRating").isJsonNull()) {
        FmocRatingEnum.validateJsonElement(jsonObj.get("fmocRating"));
      }
      if ((jsonObj.get("fpbRating") != null && !jsonObj.get("fpbRating").isJsonNull()) && !jsonObj.get("fpbRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fpbRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fpbRating").toString()));
      }
      // validate the optional field `fpbRating`
      if (jsonObj.get("fpbRating") != null && !jsonObj.get("fpbRating").isJsonNull()) {
        FpbRatingEnum.validateJsonElement(jsonObj.get("fpbRating"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("fpbRatingReasons") != null && !jsonObj.get("fpbRatingReasons").isJsonNull() && !jsonObj.get("fpbRatingReasons").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fpbRatingReasons` to be an array in the JSON string but got `%s`", jsonObj.get("fpbRatingReasons").toString()));
      }
      if ((jsonObj.get("fskRating") != null && !jsonObj.get("fskRating").isJsonNull()) && !jsonObj.get("fskRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fskRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fskRating").toString()));
      }
      // validate the optional field `fskRating`
      if (jsonObj.get("fskRating") != null && !jsonObj.get("fskRating").isJsonNull()) {
        FskRatingEnum.validateJsonElement(jsonObj.get("fskRating"));
      }
      if ((jsonObj.get("grfilmRating") != null && !jsonObj.get("grfilmRating").isJsonNull()) && !jsonObj.get("grfilmRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `grfilmRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("grfilmRating").toString()));
      }
      // validate the optional field `grfilmRating`
      if (jsonObj.get("grfilmRating") != null && !jsonObj.get("grfilmRating").isJsonNull()) {
        GrfilmRatingEnum.validateJsonElement(jsonObj.get("grfilmRating"));
      }
      if ((jsonObj.get("icaaRating") != null && !jsonObj.get("icaaRating").isJsonNull()) && !jsonObj.get("icaaRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `icaaRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("icaaRating").toString()));
      }
      // validate the optional field `icaaRating`
      if (jsonObj.get("icaaRating") != null && !jsonObj.get("icaaRating").isJsonNull()) {
        IcaaRatingEnum.validateJsonElement(jsonObj.get("icaaRating"));
      }
      if ((jsonObj.get("ifcoRating") != null && !jsonObj.get("ifcoRating").isJsonNull()) && !jsonObj.get("ifcoRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ifcoRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ifcoRating").toString()));
      }
      // validate the optional field `ifcoRating`
      if (jsonObj.get("ifcoRating") != null && !jsonObj.get("ifcoRating").isJsonNull()) {
        IfcoRatingEnum.validateJsonElement(jsonObj.get("ifcoRating"));
      }
      if ((jsonObj.get("ilfilmRating") != null && !jsonObj.get("ilfilmRating").isJsonNull()) && !jsonObj.get("ilfilmRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ilfilmRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ilfilmRating").toString()));
      }
      // validate the optional field `ilfilmRating`
      if (jsonObj.get("ilfilmRating") != null && !jsonObj.get("ilfilmRating").isJsonNull()) {
        IlfilmRatingEnum.validateJsonElement(jsonObj.get("ilfilmRating"));
      }
      if ((jsonObj.get("incaaRating") != null && !jsonObj.get("incaaRating").isJsonNull()) && !jsonObj.get("incaaRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `incaaRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("incaaRating").toString()));
      }
      // validate the optional field `incaaRating`
      if (jsonObj.get("incaaRating") != null && !jsonObj.get("incaaRating").isJsonNull()) {
        IncaaRatingEnum.validateJsonElement(jsonObj.get("incaaRating"));
      }
      if ((jsonObj.get("kfcbRating") != null && !jsonObj.get("kfcbRating").isJsonNull()) && !jsonObj.get("kfcbRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kfcbRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kfcbRating").toString()));
      }
      // validate the optional field `kfcbRating`
      if (jsonObj.get("kfcbRating") != null && !jsonObj.get("kfcbRating").isJsonNull()) {
        KfcbRatingEnum.validateJsonElement(jsonObj.get("kfcbRating"));
      }
      if ((jsonObj.get("kijkwijzerRating") != null && !jsonObj.get("kijkwijzerRating").isJsonNull()) && !jsonObj.get("kijkwijzerRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kijkwijzerRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kijkwijzerRating").toString()));
      }
      // validate the optional field `kijkwijzerRating`
      if (jsonObj.get("kijkwijzerRating") != null && !jsonObj.get("kijkwijzerRating").isJsonNull()) {
        KijkwijzerRatingEnum.validateJsonElement(jsonObj.get("kijkwijzerRating"));
      }
      if ((jsonObj.get("kmrbRating") != null && !jsonObj.get("kmrbRating").isJsonNull()) && !jsonObj.get("kmrbRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kmrbRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kmrbRating").toString()));
      }
      // validate the optional field `kmrbRating`
      if (jsonObj.get("kmrbRating") != null && !jsonObj.get("kmrbRating").isJsonNull()) {
        KmrbRatingEnum.validateJsonElement(jsonObj.get("kmrbRating"));
      }
      if ((jsonObj.get("lsfRating") != null && !jsonObj.get("lsfRating").isJsonNull()) && !jsonObj.get("lsfRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lsfRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lsfRating").toString()));
      }
      // validate the optional field `lsfRating`
      if (jsonObj.get("lsfRating") != null && !jsonObj.get("lsfRating").isJsonNull()) {
        LsfRatingEnum.validateJsonElement(jsonObj.get("lsfRating"));
      }
      if ((jsonObj.get("mccaaRating") != null && !jsonObj.get("mccaaRating").isJsonNull()) && !jsonObj.get("mccaaRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mccaaRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mccaaRating").toString()));
      }
      // validate the optional field `mccaaRating`
      if (jsonObj.get("mccaaRating") != null && !jsonObj.get("mccaaRating").isJsonNull()) {
        MccaaRatingEnum.validateJsonElement(jsonObj.get("mccaaRating"));
      }
      if ((jsonObj.get("mccypRating") != null && !jsonObj.get("mccypRating").isJsonNull()) && !jsonObj.get("mccypRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mccypRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mccypRating").toString()));
      }
      // validate the optional field `mccypRating`
      if (jsonObj.get("mccypRating") != null && !jsonObj.get("mccypRating").isJsonNull()) {
        MccypRatingEnum.validateJsonElement(jsonObj.get("mccypRating"));
      }
      if ((jsonObj.get("mcstRating") != null && !jsonObj.get("mcstRating").isJsonNull()) && !jsonObj.get("mcstRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mcstRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mcstRating").toString()));
      }
      // validate the optional field `mcstRating`
      if (jsonObj.get("mcstRating") != null && !jsonObj.get("mcstRating").isJsonNull()) {
        McstRatingEnum.validateJsonElement(jsonObj.get("mcstRating"));
      }
      if ((jsonObj.get("mdaRating") != null && !jsonObj.get("mdaRating").isJsonNull()) && !jsonObj.get("mdaRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mdaRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mdaRating").toString()));
      }
      // validate the optional field `mdaRating`
      if (jsonObj.get("mdaRating") != null && !jsonObj.get("mdaRating").isJsonNull()) {
        MdaRatingEnum.validateJsonElement(jsonObj.get("mdaRating"));
      }
      if ((jsonObj.get("medietilsynetRating") != null && !jsonObj.get("medietilsynetRating").isJsonNull()) && !jsonObj.get("medietilsynetRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `medietilsynetRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("medietilsynetRating").toString()));
      }
      // validate the optional field `medietilsynetRating`
      if (jsonObj.get("medietilsynetRating") != null && !jsonObj.get("medietilsynetRating").isJsonNull()) {
        MedietilsynetRatingEnum.validateJsonElement(jsonObj.get("medietilsynetRating"));
      }
      if ((jsonObj.get("mekuRating") != null && !jsonObj.get("mekuRating").isJsonNull()) && !jsonObj.get("mekuRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mekuRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mekuRating").toString()));
      }
      // validate the optional field `mekuRating`
      if (jsonObj.get("mekuRating") != null && !jsonObj.get("mekuRating").isJsonNull()) {
        MekuRatingEnum.validateJsonElement(jsonObj.get("mekuRating"));
      }
      if ((jsonObj.get("menaMpaaRating") != null && !jsonObj.get("menaMpaaRating").isJsonNull()) && !jsonObj.get("menaMpaaRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `menaMpaaRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("menaMpaaRating").toString()));
      }
      // validate the optional field `menaMpaaRating`
      if (jsonObj.get("menaMpaaRating") != null && !jsonObj.get("menaMpaaRating").isJsonNull()) {
        MenaMpaaRatingEnum.validateJsonElement(jsonObj.get("menaMpaaRating"));
      }
      if ((jsonObj.get("mibacRating") != null && !jsonObj.get("mibacRating").isJsonNull()) && !jsonObj.get("mibacRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mibacRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mibacRating").toString()));
      }
      // validate the optional field `mibacRating`
      if (jsonObj.get("mibacRating") != null && !jsonObj.get("mibacRating").isJsonNull()) {
        MibacRatingEnum.validateJsonElement(jsonObj.get("mibacRating"));
      }
      if ((jsonObj.get("mocRating") != null && !jsonObj.get("mocRating").isJsonNull()) && !jsonObj.get("mocRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mocRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mocRating").toString()));
      }
      // validate the optional field `mocRating`
      if (jsonObj.get("mocRating") != null && !jsonObj.get("mocRating").isJsonNull()) {
        MocRatingEnum.validateJsonElement(jsonObj.get("mocRating"));
      }
      if ((jsonObj.get("moctwRating") != null && !jsonObj.get("moctwRating").isJsonNull()) && !jsonObj.get("moctwRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `moctwRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("moctwRating").toString()));
      }
      // validate the optional field `moctwRating`
      if (jsonObj.get("moctwRating") != null && !jsonObj.get("moctwRating").isJsonNull()) {
        MoctwRatingEnum.validateJsonElement(jsonObj.get("moctwRating"));
      }
      if ((jsonObj.get("mpaaRating") != null && !jsonObj.get("mpaaRating").isJsonNull()) && !jsonObj.get("mpaaRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mpaaRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mpaaRating").toString()));
      }
      // validate the optional field `mpaaRating`
      if (jsonObj.get("mpaaRating") != null && !jsonObj.get("mpaaRating").isJsonNull()) {
        MpaaRatingEnum.validateJsonElement(jsonObj.get("mpaaRating"));
      }
      if ((jsonObj.get("mpaatRating") != null && !jsonObj.get("mpaatRating").isJsonNull()) && !jsonObj.get("mpaatRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mpaatRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mpaatRating").toString()));
      }
      // validate the optional field `mpaatRating`
      if (jsonObj.get("mpaatRating") != null && !jsonObj.get("mpaatRating").isJsonNull()) {
        MpaatRatingEnum.validateJsonElement(jsonObj.get("mpaatRating"));
      }
      if ((jsonObj.get("mtrcbRating") != null && !jsonObj.get("mtrcbRating").isJsonNull()) && !jsonObj.get("mtrcbRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mtrcbRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mtrcbRating").toString()));
      }
      // validate the optional field `mtrcbRating`
      if (jsonObj.get("mtrcbRating") != null && !jsonObj.get("mtrcbRating").isJsonNull()) {
        MtrcbRatingEnum.validateJsonElement(jsonObj.get("mtrcbRating"));
      }
      if ((jsonObj.get("nbcRating") != null && !jsonObj.get("nbcRating").isJsonNull()) && !jsonObj.get("nbcRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nbcRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nbcRating").toString()));
      }
      // validate the optional field `nbcRating`
      if (jsonObj.get("nbcRating") != null && !jsonObj.get("nbcRating").isJsonNull()) {
        NbcRatingEnum.validateJsonElement(jsonObj.get("nbcRating"));
      }
      if ((jsonObj.get("nbcplRating") != null && !jsonObj.get("nbcplRating").isJsonNull()) && !jsonObj.get("nbcplRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nbcplRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nbcplRating").toString()));
      }
      // validate the optional field `nbcplRating`
      if (jsonObj.get("nbcplRating") != null && !jsonObj.get("nbcplRating").isJsonNull()) {
        NbcplRatingEnum.validateJsonElement(jsonObj.get("nbcplRating"));
      }
      if ((jsonObj.get("nfrcRating") != null && !jsonObj.get("nfrcRating").isJsonNull()) && !jsonObj.get("nfrcRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nfrcRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nfrcRating").toString()));
      }
      // validate the optional field `nfrcRating`
      if (jsonObj.get("nfrcRating") != null && !jsonObj.get("nfrcRating").isJsonNull()) {
        NfrcRatingEnum.validateJsonElement(jsonObj.get("nfrcRating"));
      }
      if ((jsonObj.get("nfvcbRating") != null && !jsonObj.get("nfvcbRating").isJsonNull()) && !jsonObj.get("nfvcbRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nfvcbRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nfvcbRating").toString()));
      }
      // validate the optional field `nfvcbRating`
      if (jsonObj.get("nfvcbRating") != null && !jsonObj.get("nfvcbRating").isJsonNull()) {
        NfvcbRatingEnum.validateJsonElement(jsonObj.get("nfvcbRating"));
      }
      if ((jsonObj.get("nkclvRating") != null && !jsonObj.get("nkclvRating").isJsonNull()) && !jsonObj.get("nkclvRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nkclvRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nkclvRating").toString()));
      }
      // validate the optional field `nkclvRating`
      if (jsonObj.get("nkclvRating") != null && !jsonObj.get("nkclvRating").isJsonNull()) {
        NkclvRatingEnum.validateJsonElement(jsonObj.get("nkclvRating"));
      }
      if ((jsonObj.get("nmcRating") != null && !jsonObj.get("nmcRating").isJsonNull()) && !jsonObj.get("nmcRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nmcRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nmcRating").toString()));
      }
      // validate the optional field `nmcRating`
      if (jsonObj.get("nmcRating") != null && !jsonObj.get("nmcRating").isJsonNull()) {
        NmcRatingEnum.validateJsonElement(jsonObj.get("nmcRating"));
      }
      if ((jsonObj.get("oflcRating") != null && !jsonObj.get("oflcRating").isJsonNull()) && !jsonObj.get("oflcRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oflcRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oflcRating").toString()));
      }
      // validate the optional field `oflcRating`
      if (jsonObj.get("oflcRating") != null && !jsonObj.get("oflcRating").isJsonNull()) {
        OflcRatingEnum.validateJsonElement(jsonObj.get("oflcRating"));
      }
      if ((jsonObj.get("pefilmRating") != null && !jsonObj.get("pefilmRating").isJsonNull()) && !jsonObj.get("pefilmRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pefilmRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pefilmRating").toString()));
      }
      // validate the optional field `pefilmRating`
      if (jsonObj.get("pefilmRating") != null && !jsonObj.get("pefilmRating").isJsonNull()) {
        PefilmRatingEnum.validateJsonElement(jsonObj.get("pefilmRating"));
      }
      if ((jsonObj.get("rcnofRating") != null && !jsonObj.get("rcnofRating").isJsonNull()) && !jsonObj.get("rcnofRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rcnofRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rcnofRating").toString()));
      }
      // validate the optional field `rcnofRating`
      if (jsonObj.get("rcnofRating") != null && !jsonObj.get("rcnofRating").isJsonNull()) {
        RcnofRatingEnum.validateJsonElement(jsonObj.get("rcnofRating"));
      }
      if ((jsonObj.get("resorteviolenciaRating") != null && !jsonObj.get("resorteviolenciaRating").isJsonNull()) && !jsonObj.get("resorteviolenciaRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resorteviolenciaRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resorteviolenciaRating").toString()));
      }
      // validate the optional field `resorteviolenciaRating`
      if (jsonObj.get("resorteviolenciaRating") != null && !jsonObj.get("resorteviolenciaRating").isJsonNull()) {
        ResorteviolenciaRatingEnum.validateJsonElement(jsonObj.get("resorteviolenciaRating"));
      }
      if ((jsonObj.get("rtcRating") != null && !jsonObj.get("rtcRating").isJsonNull()) && !jsonObj.get("rtcRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rtcRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rtcRating").toString()));
      }
      // validate the optional field `rtcRating`
      if (jsonObj.get("rtcRating") != null && !jsonObj.get("rtcRating").isJsonNull()) {
        RtcRatingEnum.validateJsonElement(jsonObj.get("rtcRating"));
      }
      if ((jsonObj.get("rteRating") != null && !jsonObj.get("rteRating").isJsonNull()) && !jsonObj.get("rteRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rteRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rteRating").toString()));
      }
      // validate the optional field `rteRating`
      if (jsonObj.get("rteRating") != null && !jsonObj.get("rteRating").isJsonNull()) {
        RteRatingEnum.validateJsonElement(jsonObj.get("rteRating"));
      }
      if ((jsonObj.get("russiaRating") != null && !jsonObj.get("russiaRating").isJsonNull()) && !jsonObj.get("russiaRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `russiaRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("russiaRating").toString()));
      }
      // validate the optional field `russiaRating`
      if (jsonObj.get("russiaRating") != null && !jsonObj.get("russiaRating").isJsonNull()) {
        RussiaRatingEnum.validateJsonElement(jsonObj.get("russiaRating"));
      }
      if ((jsonObj.get("skfilmRating") != null && !jsonObj.get("skfilmRating").isJsonNull()) && !jsonObj.get("skfilmRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skfilmRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skfilmRating").toString()));
      }
      // validate the optional field `skfilmRating`
      if (jsonObj.get("skfilmRating") != null && !jsonObj.get("skfilmRating").isJsonNull()) {
        SkfilmRatingEnum.validateJsonElement(jsonObj.get("skfilmRating"));
      }
      if ((jsonObj.get("smaisRating") != null && !jsonObj.get("smaisRating").isJsonNull()) && !jsonObj.get("smaisRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smaisRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smaisRating").toString()));
      }
      // validate the optional field `smaisRating`
      if (jsonObj.get("smaisRating") != null && !jsonObj.get("smaisRating").isJsonNull()) {
        SmaisRatingEnum.validateJsonElement(jsonObj.get("smaisRating"));
      }
      if ((jsonObj.get("smsaRating") != null && !jsonObj.get("smsaRating").isJsonNull()) && !jsonObj.get("smsaRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smsaRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smsaRating").toString()));
      }
      // validate the optional field `smsaRating`
      if (jsonObj.get("smsaRating") != null && !jsonObj.get("smsaRating").isJsonNull()) {
        SmsaRatingEnum.validateJsonElement(jsonObj.get("smsaRating"));
      }
      if ((jsonObj.get("tvpgRating") != null && !jsonObj.get("tvpgRating").isJsonNull()) && !jsonObj.get("tvpgRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tvpgRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tvpgRating").toString()));
      }
      // validate the optional field `tvpgRating`
      if (jsonObj.get("tvpgRating") != null && !jsonObj.get("tvpgRating").isJsonNull()) {
        TvpgRatingEnum.validateJsonElement(jsonObj.get("tvpgRating"));
      }
      if ((jsonObj.get("ytRating") != null && !jsonObj.get("ytRating").isJsonNull()) && !jsonObj.get("ytRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ytRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ytRating").toString()));
      }
      // validate the optional field `ytRating`
      if (jsonObj.get("ytRating") != null && !jsonObj.get("ytRating").isJsonNull()) {
        YtRatingEnum.validateJsonElement(jsonObj.get("ytRating"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContentRating.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContentRating' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContentRating> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContentRating.class));

       return (TypeAdapter<T>) new TypeAdapter<ContentRating>() {
           @Override
           public void write(JsonWriter out, ContentRating value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContentRating read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContentRating given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContentRating
   * @throws IOException if the JSON string is invalid with respect to ContentRating
   */
  public static ContentRating fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContentRating.class);
  }

  /**
   * Convert an instance of ContentRating to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

