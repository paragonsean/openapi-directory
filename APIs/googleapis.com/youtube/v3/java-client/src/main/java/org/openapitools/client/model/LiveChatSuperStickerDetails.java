/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SuperStickerMetadata;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LiveChatSuperStickerDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LiveChatSuperStickerDetails {
  public static final String SERIALIZED_NAME_AMOUNT_DISPLAY_STRING = "amountDisplayString";
  @SerializedName(SERIALIZED_NAME_AMOUNT_DISPLAY_STRING)
  private String amountDisplayString;

  public static final String SERIALIZED_NAME_AMOUNT_MICROS = "amountMicros";
  @SerializedName(SERIALIZED_NAME_AMOUNT_MICROS)
  private String amountMicros;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_SUPER_STICKER_METADATA = "superStickerMetadata";
  @SerializedName(SERIALIZED_NAME_SUPER_STICKER_METADATA)
  private SuperStickerMetadata superStickerMetadata;

  public static final String SERIALIZED_NAME_TIER = "tier";
  @SerializedName(SERIALIZED_NAME_TIER)
  private Integer tier;

  public LiveChatSuperStickerDetails() {
  }

  public LiveChatSuperStickerDetails amountDisplayString(String amountDisplayString) {
    this.amountDisplayString = amountDisplayString;
    return this;
  }

  /**
   * A rendered string that displays the fund amount and currency to the user.
   * @return amountDisplayString
   */
  @javax.annotation.Nullable
  public String getAmountDisplayString() {
    return amountDisplayString;
  }

  public void setAmountDisplayString(String amountDisplayString) {
    this.amountDisplayString = amountDisplayString;
  }


  public LiveChatSuperStickerDetails amountMicros(String amountMicros) {
    this.amountMicros = amountMicros;
    return this;
  }

  /**
   * The amount purchased by the user, in micros (1,750,000 micros &#x3D; 1.75).
   * @return amountMicros
   */
  @javax.annotation.Nullable
  public String getAmountMicros() {
    return amountMicros;
  }

  public void setAmountMicros(String amountMicros) {
    this.amountMicros = amountMicros;
  }


  public LiveChatSuperStickerDetails currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * The currency in which the purchase was made.
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public LiveChatSuperStickerDetails superStickerMetadata(SuperStickerMetadata superStickerMetadata) {
    this.superStickerMetadata = superStickerMetadata;
    return this;
  }

  /**
   * Get superStickerMetadata
   * @return superStickerMetadata
   */
  @javax.annotation.Nullable
  public SuperStickerMetadata getSuperStickerMetadata() {
    return superStickerMetadata;
  }

  public void setSuperStickerMetadata(SuperStickerMetadata superStickerMetadata) {
    this.superStickerMetadata = superStickerMetadata;
  }


  public LiveChatSuperStickerDetails tier(Integer tier) {
    this.tier = tier;
    return this;
  }

  /**
   * The tier in which the amount belongs. Lower amounts belong to lower tiers. The lowest tier is 1.
   * @return tier
   */
  @javax.annotation.Nullable
  public Integer getTier() {
    return tier;
  }

  public void setTier(Integer tier) {
    this.tier = tier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LiveChatSuperStickerDetails liveChatSuperStickerDetails = (LiveChatSuperStickerDetails) o;
    return Objects.equals(this.amountDisplayString, liveChatSuperStickerDetails.amountDisplayString) &&
        Objects.equals(this.amountMicros, liveChatSuperStickerDetails.amountMicros) &&
        Objects.equals(this.currency, liveChatSuperStickerDetails.currency) &&
        Objects.equals(this.superStickerMetadata, liveChatSuperStickerDetails.superStickerMetadata) &&
        Objects.equals(this.tier, liveChatSuperStickerDetails.tier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amountDisplayString, amountMicros, currency, superStickerMetadata, tier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LiveChatSuperStickerDetails {\n");
    sb.append("    amountDisplayString: ").append(toIndentedString(amountDisplayString)).append("\n");
    sb.append("    amountMicros: ").append(toIndentedString(amountMicros)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    superStickerMetadata: ").append(toIndentedString(superStickerMetadata)).append("\n");
    sb.append("    tier: ").append(toIndentedString(tier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amountDisplayString");
    openapiFields.add("amountMicros");
    openapiFields.add("currency");
    openapiFields.add("superStickerMetadata");
    openapiFields.add("tier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LiveChatSuperStickerDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LiveChatSuperStickerDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LiveChatSuperStickerDetails is not found in the empty JSON string", LiveChatSuperStickerDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LiveChatSuperStickerDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LiveChatSuperStickerDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("amountDisplayString") != null && !jsonObj.get("amountDisplayString").isJsonNull()) && !jsonObj.get("amountDisplayString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amountDisplayString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amountDisplayString").toString()));
      }
      if ((jsonObj.get("amountMicros") != null && !jsonObj.get("amountMicros").isJsonNull()) && !jsonObj.get("amountMicros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amountMicros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amountMicros").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      // validate the optional field `superStickerMetadata`
      if (jsonObj.get("superStickerMetadata") != null && !jsonObj.get("superStickerMetadata").isJsonNull()) {
        SuperStickerMetadata.validateJsonElement(jsonObj.get("superStickerMetadata"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LiveChatSuperStickerDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LiveChatSuperStickerDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LiveChatSuperStickerDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LiveChatSuperStickerDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<LiveChatSuperStickerDetails>() {
           @Override
           public void write(JsonWriter out, LiveChatSuperStickerDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LiveChatSuperStickerDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LiveChatSuperStickerDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LiveChatSuperStickerDetails
   * @throws IOException if the JSON string is invalid with respect to LiveChatSuperStickerDetails
   */
  public static LiveChatSuperStickerDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LiveChatSuperStickerDetails.class);
  }

  /**
   * Convert an instance of LiveChatSuperStickerDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

