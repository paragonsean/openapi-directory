/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details about the live streaming metadata.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VideoLiveStreamingDetails {
  public static final String SERIALIZED_NAME_ACTIVE_LIVE_CHAT_ID = "activeLiveChatId";
  @SerializedName(SERIALIZED_NAME_ACTIVE_LIVE_CHAT_ID)
  private String activeLiveChatId;

  public static final String SERIALIZED_NAME_ACTUAL_END_TIME = "actualEndTime";
  @SerializedName(SERIALIZED_NAME_ACTUAL_END_TIME)
  private OffsetDateTime actualEndTime;

  public static final String SERIALIZED_NAME_ACTUAL_START_TIME = "actualStartTime";
  @SerializedName(SERIALIZED_NAME_ACTUAL_START_TIME)
  private OffsetDateTime actualStartTime;

  public static final String SERIALIZED_NAME_CONCURRENT_VIEWERS = "concurrentViewers";
  @SerializedName(SERIALIZED_NAME_CONCURRENT_VIEWERS)
  private String concurrentViewers;

  public static final String SERIALIZED_NAME_SCHEDULED_END_TIME = "scheduledEndTime";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_END_TIME)
  private OffsetDateTime scheduledEndTime;

  public static final String SERIALIZED_NAME_SCHEDULED_START_TIME = "scheduledStartTime";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_START_TIME)
  private OffsetDateTime scheduledStartTime;

  public VideoLiveStreamingDetails() {
  }

  public VideoLiveStreamingDetails activeLiveChatId(String activeLiveChatId) {
    this.activeLiveChatId = activeLiveChatId;
    return this;
  }

  /**
   * The ID of the currently active live chat attached to this video. This field is filled only if the video is a currently live broadcast that has live chat. Once the broadcast transitions to complete this field will be removed and the live chat closed down. For persistent broadcasts that live chat id will no longer be tied to this video but rather to the new video being displayed at the persistent page.
   * @return activeLiveChatId
   */
  @javax.annotation.Nullable
  public String getActiveLiveChatId() {
    return activeLiveChatId;
  }

  public void setActiveLiveChatId(String activeLiveChatId) {
    this.activeLiveChatId = activeLiveChatId;
  }


  public VideoLiveStreamingDetails actualEndTime(OffsetDateTime actualEndTime) {
    this.actualEndTime = actualEndTime;
    return this;
  }

  /**
   * The time that the broadcast actually ended. This value will not be available until the broadcast is over.
   * @return actualEndTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getActualEndTime() {
    return actualEndTime;
  }

  public void setActualEndTime(OffsetDateTime actualEndTime) {
    this.actualEndTime = actualEndTime;
  }


  public VideoLiveStreamingDetails actualStartTime(OffsetDateTime actualStartTime) {
    this.actualStartTime = actualStartTime;
    return this;
  }

  /**
   * The time that the broadcast actually started. This value will not be available until the broadcast begins.
   * @return actualStartTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getActualStartTime() {
    return actualStartTime;
  }

  public void setActualStartTime(OffsetDateTime actualStartTime) {
    this.actualStartTime = actualStartTime;
  }


  public VideoLiveStreamingDetails concurrentViewers(String concurrentViewers) {
    this.concurrentViewers = concurrentViewers;
    return this;
  }

  /**
   * The number of viewers currently watching the broadcast. The property and its value will be present if the broadcast has current viewers and the broadcast owner has not hidden the viewcount for the video. Note that YouTube stops tracking the number of concurrent viewers for a broadcast when the broadcast ends. So, this property would not identify the number of viewers watching an archived video of a live broadcast that already ended.
   * @return concurrentViewers
   */
  @javax.annotation.Nullable
  public String getConcurrentViewers() {
    return concurrentViewers;
  }

  public void setConcurrentViewers(String concurrentViewers) {
    this.concurrentViewers = concurrentViewers;
  }


  public VideoLiveStreamingDetails scheduledEndTime(OffsetDateTime scheduledEndTime) {
    this.scheduledEndTime = scheduledEndTime;
    return this;
  }

  /**
   * The time that the broadcast is scheduled to end. If the value is empty or the property is not present, then the broadcast is scheduled to contiue indefinitely.
   * @return scheduledEndTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getScheduledEndTime() {
    return scheduledEndTime;
  }

  public void setScheduledEndTime(OffsetDateTime scheduledEndTime) {
    this.scheduledEndTime = scheduledEndTime;
  }


  public VideoLiveStreamingDetails scheduledStartTime(OffsetDateTime scheduledStartTime) {
    this.scheduledStartTime = scheduledStartTime;
    return this;
  }

  /**
   * The time that the broadcast is scheduled to begin.
   * @return scheduledStartTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getScheduledStartTime() {
    return scheduledStartTime;
  }

  public void setScheduledStartTime(OffsetDateTime scheduledStartTime) {
    this.scheduledStartTime = scheduledStartTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoLiveStreamingDetails videoLiveStreamingDetails = (VideoLiveStreamingDetails) o;
    return Objects.equals(this.activeLiveChatId, videoLiveStreamingDetails.activeLiveChatId) &&
        Objects.equals(this.actualEndTime, videoLiveStreamingDetails.actualEndTime) &&
        Objects.equals(this.actualStartTime, videoLiveStreamingDetails.actualStartTime) &&
        Objects.equals(this.concurrentViewers, videoLiveStreamingDetails.concurrentViewers) &&
        Objects.equals(this.scheduledEndTime, videoLiveStreamingDetails.scheduledEndTime) &&
        Objects.equals(this.scheduledStartTime, videoLiveStreamingDetails.scheduledStartTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeLiveChatId, actualEndTime, actualStartTime, concurrentViewers, scheduledEndTime, scheduledStartTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoLiveStreamingDetails {\n");
    sb.append("    activeLiveChatId: ").append(toIndentedString(activeLiveChatId)).append("\n");
    sb.append("    actualEndTime: ").append(toIndentedString(actualEndTime)).append("\n");
    sb.append("    actualStartTime: ").append(toIndentedString(actualStartTime)).append("\n");
    sb.append("    concurrentViewers: ").append(toIndentedString(concurrentViewers)).append("\n");
    sb.append("    scheduledEndTime: ").append(toIndentedString(scheduledEndTime)).append("\n");
    sb.append("    scheduledStartTime: ").append(toIndentedString(scheduledStartTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activeLiveChatId");
    openapiFields.add("actualEndTime");
    openapiFields.add("actualStartTime");
    openapiFields.add("concurrentViewers");
    openapiFields.add("scheduledEndTime");
    openapiFields.add("scheduledStartTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoLiveStreamingDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoLiveStreamingDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoLiveStreamingDetails is not found in the empty JSON string", VideoLiveStreamingDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoLiveStreamingDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoLiveStreamingDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("activeLiveChatId") != null && !jsonObj.get("activeLiveChatId").isJsonNull()) && !jsonObj.get("activeLiveChatId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activeLiveChatId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activeLiveChatId").toString()));
      }
      if ((jsonObj.get("concurrentViewers") != null && !jsonObj.get("concurrentViewers").isJsonNull()) && !jsonObj.get("concurrentViewers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `concurrentViewers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("concurrentViewers").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoLiveStreamingDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoLiveStreamingDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoLiveStreamingDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoLiveStreamingDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoLiveStreamingDetails>() {
           @Override
           public void write(JsonWriter out, VideoLiveStreamingDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoLiveStreamingDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoLiveStreamingDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoLiveStreamingDetails
   * @throws IOException if the JSON string is invalid with respect to VideoLiveStreamingDetails
   */
  public static VideoLiveStreamingDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoLiveStreamingDetails.class);
  }

  /**
   * Convert an instance of VideoLiveStreamingDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

