/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LiveStreamConfigurationIssue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LiveStreamHealthStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LiveStreamHealthStatus {
  public static final String SERIALIZED_NAME_CONFIGURATION_ISSUES = "configurationIssues";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_ISSUES)
  private List<LiveStreamConfigurationIssue> configurationIssues = new ArrayList<>();

  public static final String SERIALIZED_NAME_LAST_UPDATE_TIME_SECONDS = "lastUpdateTimeSeconds";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE_TIME_SECONDS)
  private String lastUpdateTimeSeconds;

  /**
   * The status code of this stream
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    GOOD("good"),
    
    OK("ok"),
    
    BAD("bad"),
    
    NO_DATA("noData"),
    
    REVOKED("revoked");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public LiveStreamHealthStatus() {
  }

  public LiveStreamHealthStatus configurationIssues(List<LiveStreamConfigurationIssue> configurationIssues) {
    this.configurationIssues = configurationIssues;
    return this;
  }

  public LiveStreamHealthStatus addConfigurationIssuesItem(LiveStreamConfigurationIssue configurationIssuesItem) {
    if (this.configurationIssues == null) {
      this.configurationIssues = new ArrayList<>();
    }
    this.configurationIssues.add(configurationIssuesItem);
    return this;
  }

  /**
   * The configurations issues on this stream
   * @return configurationIssues
   */
  @javax.annotation.Nullable
  public List<LiveStreamConfigurationIssue> getConfigurationIssues() {
    return configurationIssues;
  }

  public void setConfigurationIssues(List<LiveStreamConfigurationIssue> configurationIssues) {
    this.configurationIssues = configurationIssues;
  }


  public LiveStreamHealthStatus lastUpdateTimeSeconds(String lastUpdateTimeSeconds) {
    this.lastUpdateTimeSeconds = lastUpdateTimeSeconds;
    return this;
  }

  /**
   * The last time this status was updated (in seconds)
   * @return lastUpdateTimeSeconds
   */
  @javax.annotation.Nullable
  public String getLastUpdateTimeSeconds() {
    return lastUpdateTimeSeconds;
  }

  public void setLastUpdateTimeSeconds(String lastUpdateTimeSeconds) {
    this.lastUpdateTimeSeconds = lastUpdateTimeSeconds;
  }


  public LiveStreamHealthStatus status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The status code of this stream
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LiveStreamHealthStatus liveStreamHealthStatus = (LiveStreamHealthStatus) o;
    return Objects.equals(this.configurationIssues, liveStreamHealthStatus.configurationIssues) &&
        Objects.equals(this.lastUpdateTimeSeconds, liveStreamHealthStatus.lastUpdateTimeSeconds) &&
        Objects.equals(this.status, liveStreamHealthStatus.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(configurationIssues, lastUpdateTimeSeconds, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LiveStreamHealthStatus {\n");
    sb.append("    configurationIssues: ").append(toIndentedString(configurationIssues)).append("\n");
    sb.append("    lastUpdateTimeSeconds: ").append(toIndentedString(lastUpdateTimeSeconds)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("configurationIssues");
    openapiFields.add("lastUpdateTimeSeconds");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LiveStreamHealthStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LiveStreamHealthStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LiveStreamHealthStatus is not found in the empty JSON string", LiveStreamHealthStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LiveStreamHealthStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LiveStreamHealthStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("configurationIssues") != null && !jsonObj.get("configurationIssues").isJsonNull()) {
        JsonArray jsonArrayconfigurationIssues = jsonObj.getAsJsonArray("configurationIssues");
        if (jsonArrayconfigurationIssues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("configurationIssues").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `configurationIssues` to be an array in the JSON string but got `%s`", jsonObj.get("configurationIssues").toString()));
          }

          // validate the optional field `configurationIssues` (array)
          for (int i = 0; i < jsonArrayconfigurationIssues.size(); i++) {
            LiveStreamConfigurationIssue.validateJsonElement(jsonArrayconfigurationIssues.get(i));
          };
        }
      }
      if ((jsonObj.get("lastUpdateTimeSeconds") != null && !jsonObj.get("lastUpdateTimeSeconds").isJsonNull()) && !jsonObj.get("lastUpdateTimeSeconds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastUpdateTimeSeconds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastUpdateTimeSeconds").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LiveStreamHealthStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LiveStreamHealthStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LiveStreamHealthStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LiveStreamHealthStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<LiveStreamHealthStatus>() {
           @Override
           public void write(JsonWriter out, LiveStreamHealthStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LiveStreamHealthStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LiveStreamHealthStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LiveStreamHealthStatus
   * @throws IOException if the JSON string is invalid with respect to LiveStreamHealthStatus
   */
  public static LiveStreamHealthStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LiveStreamHealthStatus.class);
  }

  /**
   * Convert an instance of LiveStreamHealthStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

