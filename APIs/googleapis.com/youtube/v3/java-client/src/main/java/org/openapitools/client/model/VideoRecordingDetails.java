/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.GeoPoint;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Recording information associated with the video.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VideoRecordingDetails {
  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private GeoPoint location;

  public static final String SERIALIZED_NAME_LOCATION_DESCRIPTION = "locationDescription";
  @SerializedName(SERIALIZED_NAME_LOCATION_DESCRIPTION)
  private String locationDescription;

  public static final String SERIALIZED_NAME_RECORDING_DATE = "recordingDate";
  @SerializedName(SERIALIZED_NAME_RECORDING_DATE)
  private OffsetDateTime recordingDate;

  public VideoRecordingDetails() {
  }

  public VideoRecordingDetails location(GeoPoint location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public GeoPoint getLocation() {
    return location;
  }

  public void setLocation(GeoPoint location) {
    this.location = location;
  }


  public VideoRecordingDetails locationDescription(String locationDescription) {
    this.locationDescription = locationDescription;
    return this;
  }

  /**
   * The text description of the location where the video was recorded.
   * @return locationDescription
   */
  @javax.annotation.Nullable
  public String getLocationDescription() {
    return locationDescription;
  }

  public void setLocationDescription(String locationDescription) {
    this.locationDescription = locationDescription;
  }


  public VideoRecordingDetails recordingDate(OffsetDateTime recordingDate) {
    this.recordingDate = recordingDate;
    return this;
  }

  /**
   * The date and time when the video was recorded.
   * @return recordingDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRecordingDate() {
    return recordingDate;
  }

  public void setRecordingDate(OffsetDateTime recordingDate) {
    this.recordingDate = recordingDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoRecordingDetails videoRecordingDetails = (VideoRecordingDetails) o;
    return Objects.equals(this.location, videoRecordingDetails.location) &&
        Objects.equals(this.locationDescription, videoRecordingDetails.locationDescription) &&
        Objects.equals(this.recordingDate, videoRecordingDetails.recordingDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(location, locationDescription, recordingDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoRecordingDetails {\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    locationDescription: ").append(toIndentedString(locationDescription)).append("\n");
    sb.append("    recordingDate: ").append(toIndentedString(recordingDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("location");
    openapiFields.add("locationDescription");
    openapiFields.add("recordingDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoRecordingDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoRecordingDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoRecordingDetails is not found in the empty JSON string", VideoRecordingDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoRecordingDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoRecordingDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        GeoPoint.validateJsonElement(jsonObj.get("location"));
      }
      if ((jsonObj.get("locationDescription") != null && !jsonObj.get("locationDescription").isJsonNull()) && !jsonObj.get("locationDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locationDescription").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoRecordingDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoRecordingDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoRecordingDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoRecordingDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoRecordingDetails>() {
           @Override
           public void write(JsonWriter out, VideoRecordingDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoRecordingDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoRecordingDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoRecordingDetails
   * @throws IOException if the JSON string is invalid with respect to VideoRecordingDetails
   */
  public static VideoRecordingDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoRecordingDetails.class);
  }

  /**
   * Convert an instance of VideoRecordingDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

