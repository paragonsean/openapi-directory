/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.VideoFileDetailsAudioStream;
import org.openapitools.client.model.VideoFileDetailsVideoStream;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes original video file properties, including technical details about audio and video streams, but also metadata information like content length, digitization time, or geotagging information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VideoFileDetails {
  public static final String SERIALIZED_NAME_AUDIO_STREAMS = "audioStreams";
  @SerializedName(SERIALIZED_NAME_AUDIO_STREAMS)
  private List<VideoFileDetailsAudioStream> audioStreams = new ArrayList<>();

  public static final String SERIALIZED_NAME_BITRATE_BPS = "bitrateBps";
  @SerializedName(SERIALIZED_NAME_BITRATE_BPS)
  private String bitrateBps;

  public static final String SERIALIZED_NAME_CONTAINER = "container";
  @SerializedName(SERIALIZED_NAME_CONTAINER)
  private String container;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private String creationTime;

  public static final String SERIALIZED_NAME_DURATION_MS = "durationMs";
  @SerializedName(SERIALIZED_NAME_DURATION_MS)
  private String durationMs;

  public static final String SERIALIZED_NAME_FILE_NAME = "fileName";
  @SerializedName(SERIALIZED_NAME_FILE_NAME)
  private String fileName;

  public static final String SERIALIZED_NAME_FILE_SIZE = "fileSize";
  @SerializedName(SERIALIZED_NAME_FILE_SIZE)
  private String fileSize;

  /**
   * The uploaded file&#39;s type as detected by YouTube&#39;s video processing engine. Currently, YouTube only processes video files, but this field is present whether a video file or another type of file was uploaded.
   */
  @JsonAdapter(FileTypeEnum.Adapter.class)
  public enum FileTypeEnum {
    VIDEO("video"),
    
    AUDIO("audio"),
    
    IMAGE("image"),
    
    ARCHIVE("archive"),
    
    DOCUMENT("document"),
    
    PROJECT("project"),
    
    OTHER("other");

    private String value;

    FileTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FileTypeEnum fromValue(String value) {
      for (FileTypeEnum b : FileTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FileTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FileTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FileTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FileTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FileTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FILE_TYPE = "fileType";
  @SerializedName(SERIALIZED_NAME_FILE_TYPE)
  private FileTypeEnum fileType;

  public static final String SERIALIZED_NAME_VIDEO_STREAMS = "videoStreams";
  @SerializedName(SERIALIZED_NAME_VIDEO_STREAMS)
  private List<VideoFileDetailsVideoStream> videoStreams = new ArrayList<>();

  public VideoFileDetails() {
  }

  public VideoFileDetails audioStreams(List<VideoFileDetailsAudioStream> audioStreams) {
    this.audioStreams = audioStreams;
    return this;
  }

  public VideoFileDetails addAudioStreamsItem(VideoFileDetailsAudioStream audioStreamsItem) {
    if (this.audioStreams == null) {
      this.audioStreams = new ArrayList<>();
    }
    this.audioStreams.add(audioStreamsItem);
    return this;
  }

  /**
   * A list of audio streams contained in the uploaded video file. Each item in the list contains detailed metadata about an audio stream.
   * @return audioStreams
   */
  @javax.annotation.Nullable
  public List<VideoFileDetailsAudioStream> getAudioStreams() {
    return audioStreams;
  }

  public void setAudioStreams(List<VideoFileDetailsAudioStream> audioStreams) {
    this.audioStreams = audioStreams;
  }


  public VideoFileDetails bitrateBps(String bitrateBps) {
    this.bitrateBps = bitrateBps;
    return this;
  }

  /**
   * The uploaded video file&#39;s combined (video and audio) bitrate in bits per second.
   * @return bitrateBps
   */
  @javax.annotation.Nullable
  public String getBitrateBps() {
    return bitrateBps;
  }

  public void setBitrateBps(String bitrateBps) {
    this.bitrateBps = bitrateBps;
  }


  public VideoFileDetails container(String container) {
    this.container = container;
    return this;
  }

  /**
   * The uploaded video file&#39;s container format.
   * @return container
   */
  @javax.annotation.Nullable
  public String getContainer() {
    return container;
  }

  public void setContainer(String container) {
    this.container = container;
  }


  public VideoFileDetails creationTime(String creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * The date and time when the uploaded video file was created. The value is specified in ISO 8601 format. Currently, the following ISO 8601 formats are supported: - Date only: YYYY-MM-DD - Naive time: YYYY-MM-DDTHH:MM:SS - Time with timezone: YYYY-MM-DDTHH:MM:SS+HH:MM 
   * @return creationTime
   */
  @javax.annotation.Nullable
  public String getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(String creationTime) {
    this.creationTime = creationTime;
  }


  public VideoFileDetails durationMs(String durationMs) {
    this.durationMs = durationMs;
    return this;
  }

  /**
   * The length of the uploaded video in milliseconds.
   * @return durationMs
   */
  @javax.annotation.Nullable
  public String getDurationMs() {
    return durationMs;
  }

  public void setDurationMs(String durationMs) {
    this.durationMs = durationMs;
  }


  public VideoFileDetails fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

  /**
   * The uploaded file&#39;s name. This field is present whether a video file or another type of file was uploaded.
   * @return fileName
   */
  @javax.annotation.Nullable
  public String getFileName() {
    return fileName;
  }

  public void setFileName(String fileName) {
    this.fileName = fileName;
  }


  public VideoFileDetails fileSize(String fileSize) {
    this.fileSize = fileSize;
    return this;
  }

  /**
   * The uploaded file&#39;s size in bytes. This field is present whether a video file or another type of file was uploaded.
   * @return fileSize
   */
  @javax.annotation.Nullable
  public String getFileSize() {
    return fileSize;
  }

  public void setFileSize(String fileSize) {
    this.fileSize = fileSize;
  }


  public VideoFileDetails fileType(FileTypeEnum fileType) {
    this.fileType = fileType;
    return this;
  }

  /**
   * The uploaded file&#39;s type as detected by YouTube&#39;s video processing engine. Currently, YouTube only processes video files, but this field is present whether a video file or another type of file was uploaded.
   * @return fileType
   */
  @javax.annotation.Nullable
  public FileTypeEnum getFileType() {
    return fileType;
  }

  public void setFileType(FileTypeEnum fileType) {
    this.fileType = fileType;
  }


  public VideoFileDetails videoStreams(List<VideoFileDetailsVideoStream> videoStreams) {
    this.videoStreams = videoStreams;
    return this;
  }

  public VideoFileDetails addVideoStreamsItem(VideoFileDetailsVideoStream videoStreamsItem) {
    if (this.videoStreams == null) {
      this.videoStreams = new ArrayList<>();
    }
    this.videoStreams.add(videoStreamsItem);
    return this;
  }

  /**
   * A list of video streams contained in the uploaded video file. Each item in the list contains detailed metadata about a video stream.
   * @return videoStreams
   */
  @javax.annotation.Nullable
  public List<VideoFileDetailsVideoStream> getVideoStreams() {
    return videoStreams;
  }

  public void setVideoStreams(List<VideoFileDetailsVideoStream> videoStreams) {
    this.videoStreams = videoStreams;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoFileDetails videoFileDetails = (VideoFileDetails) o;
    return Objects.equals(this.audioStreams, videoFileDetails.audioStreams) &&
        Objects.equals(this.bitrateBps, videoFileDetails.bitrateBps) &&
        Objects.equals(this.container, videoFileDetails.container) &&
        Objects.equals(this.creationTime, videoFileDetails.creationTime) &&
        Objects.equals(this.durationMs, videoFileDetails.durationMs) &&
        Objects.equals(this.fileName, videoFileDetails.fileName) &&
        Objects.equals(this.fileSize, videoFileDetails.fileSize) &&
        Objects.equals(this.fileType, videoFileDetails.fileType) &&
        Objects.equals(this.videoStreams, videoFileDetails.videoStreams);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audioStreams, bitrateBps, container, creationTime, durationMs, fileName, fileSize, fileType, videoStreams);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoFileDetails {\n");
    sb.append("    audioStreams: ").append(toIndentedString(audioStreams)).append("\n");
    sb.append("    bitrateBps: ").append(toIndentedString(bitrateBps)).append("\n");
    sb.append("    container: ").append(toIndentedString(container)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    durationMs: ").append(toIndentedString(durationMs)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    fileSize: ").append(toIndentedString(fileSize)).append("\n");
    sb.append("    fileType: ").append(toIndentedString(fileType)).append("\n");
    sb.append("    videoStreams: ").append(toIndentedString(videoStreams)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("audioStreams");
    openapiFields.add("bitrateBps");
    openapiFields.add("container");
    openapiFields.add("creationTime");
    openapiFields.add("durationMs");
    openapiFields.add("fileName");
    openapiFields.add("fileSize");
    openapiFields.add("fileType");
    openapiFields.add("videoStreams");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoFileDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoFileDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoFileDetails is not found in the empty JSON string", VideoFileDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoFileDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoFileDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("audioStreams") != null && !jsonObj.get("audioStreams").isJsonNull()) {
        JsonArray jsonArrayaudioStreams = jsonObj.getAsJsonArray("audioStreams");
        if (jsonArrayaudioStreams != null) {
          // ensure the json data is an array
          if (!jsonObj.get("audioStreams").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `audioStreams` to be an array in the JSON string but got `%s`", jsonObj.get("audioStreams").toString()));
          }

          // validate the optional field `audioStreams` (array)
          for (int i = 0; i < jsonArrayaudioStreams.size(); i++) {
            VideoFileDetailsAudioStream.validateJsonElement(jsonArrayaudioStreams.get(i));
          };
        }
      }
      if ((jsonObj.get("bitrateBps") != null && !jsonObj.get("bitrateBps").isJsonNull()) && !jsonObj.get("bitrateBps").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bitrateBps` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bitrateBps").toString()));
      }
      if ((jsonObj.get("container") != null && !jsonObj.get("container").isJsonNull()) && !jsonObj.get("container").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `container` to be a primitive type in the JSON string but got `%s`", jsonObj.get("container").toString()));
      }
      if ((jsonObj.get("creationTime") != null && !jsonObj.get("creationTime").isJsonNull()) && !jsonObj.get("creationTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creationTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creationTime").toString()));
      }
      if ((jsonObj.get("durationMs") != null && !jsonObj.get("durationMs").isJsonNull()) && !jsonObj.get("durationMs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `durationMs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("durationMs").toString()));
      }
      if ((jsonObj.get("fileName") != null && !jsonObj.get("fileName").isJsonNull()) && !jsonObj.get("fileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileName").toString()));
      }
      if ((jsonObj.get("fileSize") != null && !jsonObj.get("fileSize").isJsonNull()) && !jsonObj.get("fileSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileSize").toString()));
      }
      if ((jsonObj.get("fileType") != null && !jsonObj.get("fileType").isJsonNull()) && !jsonObj.get("fileType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileType").toString()));
      }
      // validate the optional field `fileType`
      if (jsonObj.get("fileType") != null && !jsonObj.get("fileType").isJsonNull()) {
        FileTypeEnum.validateJsonElement(jsonObj.get("fileType"));
      }
      if (jsonObj.get("videoStreams") != null && !jsonObj.get("videoStreams").isJsonNull()) {
        JsonArray jsonArrayvideoStreams = jsonObj.getAsJsonArray("videoStreams");
        if (jsonArrayvideoStreams != null) {
          // ensure the json data is an array
          if (!jsonObj.get("videoStreams").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `videoStreams` to be an array in the JSON string but got `%s`", jsonObj.get("videoStreams").toString()));
          }

          // validate the optional field `videoStreams` (array)
          for (int i = 0; i < jsonArrayvideoStreams.size(); i++) {
            VideoFileDetailsVideoStream.validateJsonElement(jsonArrayvideoStreams.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoFileDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoFileDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoFileDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoFileDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoFileDetails>() {
           @Override
           public void write(JsonWriter out, VideoFileDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoFileDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoFileDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoFileDetails
   * @throws IOException if the JSON string is invalid with respect to VideoFileDetails
   */
  public static VideoFileDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoFileDetails.class);
  }

  /**
   * Convert an instance of VideoFileDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

