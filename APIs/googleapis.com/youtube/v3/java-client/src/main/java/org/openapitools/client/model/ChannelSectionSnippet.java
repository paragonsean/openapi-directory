/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ChannelSectionLocalization;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Basic details about a channel section, including title, style and position.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChannelSectionSnippet {
  public static final String SERIALIZED_NAME_CHANNEL_ID = "channelId";
  @SerializedName(SERIALIZED_NAME_CHANNEL_ID)
  private String channelId;

  public static final String SERIALIZED_NAME_DEFAULT_LANGUAGE = "defaultLanguage";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_DEFAULT_LANGUAGE)
  private String defaultLanguage;

  public static final String SERIALIZED_NAME_LOCALIZED = "localized";
  @SerializedName(SERIALIZED_NAME_LOCALIZED)
  private ChannelSectionLocalization localized;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private Integer position;

  /**
   * The style of the channel section.
   */
  @JsonAdapter(StyleEnum.Adapter.class)
  public enum StyleEnum {
    CHANNELSECTION_STYLE_UNSPECIFIED("channelsectionStyleUnspecified"),
    
    HORIZONTAL_ROW("horizontalRow"),
    
    VERTICAL_LIST("verticalList");

    private String value;

    StyleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StyleEnum fromValue(String value) {
      for (StyleEnum b : StyleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StyleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StyleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StyleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StyleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StyleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STYLE = "style";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_STYLE)
  private StyleEnum style;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  /**
   * The type of the channel section.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    CHANNELSECTION_TYPE_UNDEFINED("channelsectionTypeUndefined"),
    
    SINGLE_PLAYLIST("singlePlaylist"),
    
    MULTIPLE_PLAYLISTS("multiplePlaylists"),
    
    POPULAR_UPLOADS("popularUploads"),
    
    RECENT_UPLOADS("recentUploads"),
    
    LIKES("likes"),
    
    ALL_PLAYLISTS("allPlaylists"),
    
    LIKED_PLAYLISTS("likedPlaylists"),
    
    RECENT_POSTS("recentPosts"),
    
    RECENT_ACTIVITY("recentActivity"),
    
    LIVE_EVENTS("liveEvents"),
    
    UPCOMING_EVENTS("upcomingEvents"),
    
    COMPLETED_EVENTS("completedEvents"),
    
    MULTIPLE_CHANNELS("multipleChannels"),
    
    POSTED_VIDEOS("postedVideos"),
    
    POSTED_PLAYLISTS("postedPlaylists"),
    
    SUBSCRIPTIONS("subscriptions");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public ChannelSectionSnippet() {
  }

  public ChannelSectionSnippet channelId(String channelId) {
    this.channelId = channelId;
    return this;
  }

  /**
   * The ID that YouTube uses to uniquely identify the channel that published the channel section.
   * @return channelId
   */
  @javax.annotation.Nullable
  public String getChannelId() {
    return channelId;
  }

  public void setChannelId(String channelId) {
    this.channelId = channelId;
  }


  @Deprecated
  public ChannelSectionSnippet defaultLanguage(String defaultLanguage) {
    this.defaultLanguage = defaultLanguage;
    return this;
  }

  /**
   * The language of the channel section&#39;s default title and description.
   * @return defaultLanguage
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getDefaultLanguage() {
    return defaultLanguage;
  }

  @Deprecated
  public void setDefaultLanguage(String defaultLanguage) {
    this.defaultLanguage = defaultLanguage;
  }


  public ChannelSectionSnippet localized(ChannelSectionLocalization localized) {
    this.localized = localized;
    return this;
  }

  /**
   * Get localized
   * @return localized
   */
  @javax.annotation.Nullable
  public ChannelSectionLocalization getLocalized() {
    return localized;
  }

  public void setLocalized(ChannelSectionLocalization localized) {
    this.localized = localized;
  }


  public ChannelSectionSnippet position(Integer position) {
    this.position = position;
    return this;
  }

  /**
   * The position of the channel section in the channel.
   * @return position
   */
  @javax.annotation.Nullable
  public Integer getPosition() {
    return position;
  }

  public void setPosition(Integer position) {
    this.position = position;
  }


  @Deprecated
  public ChannelSectionSnippet style(StyleEnum style) {
    this.style = style;
    return this;
  }

  /**
   * The style of the channel section.
   * @return style
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public StyleEnum getStyle() {
    return style;
  }

  @Deprecated
  public void setStyle(StyleEnum style) {
    this.style = style;
  }


  public ChannelSectionSnippet title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The channel section&#39;s title for multiple_playlists and multiple_channels.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public ChannelSectionSnippet type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the channel section.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChannelSectionSnippet channelSectionSnippet = (ChannelSectionSnippet) o;
    return Objects.equals(this.channelId, channelSectionSnippet.channelId) &&
        Objects.equals(this.defaultLanguage, channelSectionSnippet.defaultLanguage) &&
        Objects.equals(this.localized, channelSectionSnippet.localized) &&
        Objects.equals(this.position, channelSectionSnippet.position) &&
        Objects.equals(this.style, channelSectionSnippet.style) &&
        Objects.equals(this.title, channelSectionSnippet.title) &&
        Objects.equals(this.type, channelSectionSnippet.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channelId, defaultLanguage, localized, position, style, title, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChannelSectionSnippet {\n");
    sb.append("    channelId: ").append(toIndentedString(channelId)).append("\n");
    sb.append("    defaultLanguage: ").append(toIndentedString(defaultLanguage)).append("\n");
    sb.append("    localized: ").append(toIndentedString(localized)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    style: ").append(toIndentedString(style)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("channelId");
    openapiFields.add("defaultLanguage");
    openapiFields.add("localized");
    openapiFields.add("position");
    openapiFields.add("style");
    openapiFields.add("title");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChannelSectionSnippet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChannelSectionSnippet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChannelSectionSnippet is not found in the empty JSON string", ChannelSectionSnippet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChannelSectionSnippet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChannelSectionSnippet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("channelId") != null && !jsonObj.get("channelId").isJsonNull()) && !jsonObj.get("channelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channelId").toString()));
      }
      if ((jsonObj.get("defaultLanguage") != null && !jsonObj.get("defaultLanguage").isJsonNull()) && !jsonObj.get("defaultLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultLanguage").toString()));
      }
      // validate the optional field `localized`
      if (jsonObj.get("localized") != null && !jsonObj.get("localized").isJsonNull()) {
        ChannelSectionLocalization.validateJsonElement(jsonObj.get("localized"));
      }
      if ((jsonObj.get("style") != null && !jsonObj.get("style").isJsonNull()) && !jsonObj.get("style").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `style` to be a primitive type in the JSON string but got `%s`", jsonObj.get("style").toString()));
      }
      // validate the optional field `style`
      if (jsonObj.get("style") != null && !jsonObj.get("style").isJsonNull()) {
        StyleEnum.validateJsonElement(jsonObj.get("style"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChannelSectionSnippet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChannelSectionSnippet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChannelSectionSnippet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChannelSectionSnippet.class));

       return (TypeAdapter<T>) new TypeAdapter<ChannelSectionSnippet>() {
           @Override
           public void write(JsonWriter out, ChannelSectionSnippet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChannelSectionSnippet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChannelSectionSnippet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChannelSectionSnippet
   * @throws IOException if the JSON string is invalid with respect to ChannelSectionSnippet
   */
  public static ChannelSectionSnippet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChannelSectionSnippet.class);
  }

  /**
   * Convert an instance of ChannelSectionSnippet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

