/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CdnSettings;
import org.openapitools.client.model.LiveStreamContentDetails;
import org.openapitools.client.model.LiveStreamSnippet;
import org.openapitools.client.model.LiveStreamStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A live stream describes a live ingestion point.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LiveStream {
  public static final String SERIALIZED_NAME_CDN = "cdn";
  @SerializedName(SERIALIZED_NAME_CDN)
  private CdnSettings cdn;

  public static final String SERIALIZED_NAME_CONTENT_DETAILS = "contentDetails";
  @SerializedName(SERIALIZED_NAME_CONTENT_DETAILS)
  private LiveStreamContentDetails contentDetails;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "youtube#liveStream";

  public static final String SERIALIZED_NAME_SNIPPET = "snippet";
  @SerializedName(SERIALIZED_NAME_SNIPPET)
  private LiveStreamSnippet snippet;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private LiveStreamStatus status;

  public LiveStream() {
  }

  public LiveStream cdn(CdnSettings cdn) {
    this.cdn = cdn;
    return this;
  }

  /**
   * Get cdn
   * @return cdn
   */
  @javax.annotation.Nullable
  public CdnSettings getCdn() {
    return cdn;
  }

  public void setCdn(CdnSettings cdn) {
    this.cdn = cdn;
  }


  public LiveStream contentDetails(LiveStreamContentDetails contentDetails) {
    this.contentDetails = contentDetails;
    return this;
  }

  /**
   * Get contentDetails
   * @return contentDetails
   */
  @javax.annotation.Nullable
  public LiveStreamContentDetails getContentDetails() {
    return contentDetails;
  }

  public void setContentDetails(LiveStreamContentDetails contentDetails) {
    this.contentDetails = contentDetails;
  }


  public LiveStream etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * Etag of this resource.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public LiveStream id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID that YouTube assigns to uniquely identify the stream.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public LiveStream kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string \&quot;youtube#liveStream\&quot;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public LiveStream snippet(LiveStreamSnippet snippet) {
    this.snippet = snippet;
    return this;
  }

  /**
   * Get snippet
   * @return snippet
   */
  @javax.annotation.Nullable
  public LiveStreamSnippet getSnippet() {
    return snippet;
  }

  public void setSnippet(LiveStreamSnippet snippet) {
    this.snippet = snippet;
  }


  public LiveStream status(LiveStreamStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public LiveStreamStatus getStatus() {
    return status;
  }

  public void setStatus(LiveStreamStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LiveStream liveStream = (LiveStream) o;
    return Objects.equals(this.cdn, liveStream.cdn) &&
        Objects.equals(this.contentDetails, liveStream.contentDetails) &&
        Objects.equals(this.etag, liveStream.etag) &&
        Objects.equals(this.id, liveStream.id) &&
        Objects.equals(this.kind, liveStream.kind) &&
        Objects.equals(this.snippet, liveStream.snippet) &&
        Objects.equals(this.status, liveStream.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cdn, contentDetails, etag, id, kind, snippet, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LiveStream {\n");
    sb.append("    cdn: ").append(toIndentedString(cdn)).append("\n");
    sb.append("    contentDetails: ").append(toIndentedString(contentDetails)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    snippet: ").append(toIndentedString(snippet)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cdn");
    openapiFields.add("contentDetails");
    openapiFields.add("etag");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("snippet");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LiveStream
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LiveStream.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LiveStream is not found in the empty JSON string", LiveStream.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LiveStream.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LiveStream` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cdn`
      if (jsonObj.get("cdn") != null && !jsonObj.get("cdn").isJsonNull()) {
        CdnSettings.validateJsonElement(jsonObj.get("cdn"));
      }
      // validate the optional field `contentDetails`
      if (jsonObj.get("contentDetails") != null && !jsonObj.get("contentDetails").isJsonNull()) {
        LiveStreamContentDetails.validateJsonElement(jsonObj.get("contentDetails"));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `snippet`
      if (jsonObj.get("snippet") != null && !jsonObj.get("snippet").isJsonNull()) {
        LiveStreamSnippet.validateJsonElement(jsonObj.get("snippet"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        LiveStreamStatus.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LiveStream.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LiveStream' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LiveStream> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LiveStream.class));

       return (TypeAdapter<T>) new TypeAdapter<LiveStream>() {
           @Override
           public void write(JsonWriter out, LiveStream value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LiveStream read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LiveStream given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LiveStream
   * @throws IOException if the JSON string is invalid with respect to LiveStream
   */
  public static LiveStream fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LiveStream.class);
  }

  /**
   * Convert an instance of LiveStream to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

