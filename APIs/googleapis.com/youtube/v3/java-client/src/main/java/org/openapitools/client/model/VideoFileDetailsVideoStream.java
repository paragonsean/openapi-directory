/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about a video stream.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VideoFileDetailsVideoStream {
  public static final String SERIALIZED_NAME_ASPECT_RATIO = "aspectRatio";
  @SerializedName(SERIALIZED_NAME_ASPECT_RATIO)
  private Double aspectRatio;

  public static final String SERIALIZED_NAME_BITRATE_BPS = "bitrateBps";
  @SerializedName(SERIALIZED_NAME_BITRATE_BPS)
  private String bitrateBps;

  public static final String SERIALIZED_NAME_CODEC = "codec";
  @SerializedName(SERIALIZED_NAME_CODEC)
  private String codec;

  public static final String SERIALIZED_NAME_FRAME_RATE_FPS = "frameRateFps";
  @SerializedName(SERIALIZED_NAME_FRAME_RATE_FPS)
  private Double frameRateFps;

  public static final String SERIALIZED_NAME_HEIGHT_PIXELS = "heightPixels";
  @SerializedName(SERIALIZED_NAME_HEIGHT_PIXELS)
  private Integer heightPixels;

  /**
   * The amount that YouTube needs to rotate the original source content to properly display the video.
   */
  @JsonAdapter(RotationEnum.Adapter.class)
  public enum RotationEnum {
    NONE("none"),
    
    CLOCKWISE("clockwise"),
    
    UPSIDE_DOWN("upsideDown"),
    
    COUNTER_CLOCKWISE("counterClockwise"),
    
    OTHER("other");

    private String value;

    RotationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RotationEnum fromValue(String value) {
      for (RotationEnum b : RotationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RotationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RotationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RotationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RotationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RotationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROTATION = "rotation";
  @SerializedName(SERIALIZED_NAME_ROTATION)
  private RotationEnum rotation;

  public static final String SERIALIZED_NAME_VENDOR = "vendor";
  @SerializedName(SERIALIZED_NAME_VENDOR)
  private String vendor;

  public static final String SERIALIZED_NAME_WIDTH_PIXELS = "widthPixels";
  @SerializedName(SERIALIZED_NAME_WIDTH_PIXELS)
  private Integer widthPixels;

  public VideoFileDetailsVideoStream() {
  }

  public VideoFileDetailsVideoStream aspectRatio(Double aspectRatio) {
    this.aspectRatio = aspectRatio;
    return this;
  }

  /**
   * The video content&#39;s display aspect ratio, which specifies the aspect ratio in which the video should be displayed.
   * @return aspectRatio
   */
  @javax.annotation.Nullable
  public Double getAspectRatio() {
    return aspectRatio;
  }

  public void setAspectRatio(Double aspectRatio) {
    this.aspectRatio = aspectRatio;
  }


  public VideoFileDetailsVideoStream bitrateBps(String bitrateBps) {
    this.bitrateBps = bitrateBps;
    return this;
  }

  /**
   * The video stream&#39;s bitrate, in bits per second.
   * @return bitrateBps
   */
  @javax.annotation.Nullable
  public String getBitrateBps() {
    return bitrateBps;
  }

  public void setBitrateBps(String bitrateBps) {
    this.bitrateBps = bitrateBps;
  }


  public VideoFileDetailsVideoStream codec(String codec) {
    this.codec = codec;
    return this;
  }

  /**
   * The video codec that the stream uses.
   * @return codec
   */
  @javax.annotation.Nullable
  public String getCodec() {
    return codec;
  }

  public void setCodec(String codec) {
    this.codec = codec;
  }


  public VideoFileDetailsVideoStream frameRateFps(Double frameRateFps) {
    this.frameRateFps = frameRateFps;
    return this;
  }

  /**
   * The video stream&#39;s frame rate, in frames per second.
   * @return frameRateFps
   */
  @javax.annotation.Nullable
  public Double getFrameRateFps() {
    return frameRateFps;
  }

  public void setFrameRateFps(Double frameRateFps) {
    this.frameRateFps = frameRateFps;
  }


  public VideoFileDetailsVideoStream heightPixels(Integer heightPixels) {
    this.heightPixels = heightPixels;
    return this;
  }

  /**
   * The encoded video content&#39;s height in pixels.
   * @return heightPixels
   */
  @javax.annotation.Nullable
  public Integer getHeightPixels() {
    return heightPixels;
  }

  public void setHeightPixels(Integer heightPixels) {
    this.heightPixels = heightPixels;
  }


  public VideoFileDetailsVideoStream rotation(RotationEnum rotation) {
    this.rotation = rotation;
    return this;
  }

  /**
   * The amount that YouTube needs to rotate the original source content to properly display the video.
   * @return rotation
   */
  @javax.annotation.Nullable
  public RotationEnum getRotation() {
    return rotation;
  }

  public void setRotation(RotationEnum rotation) {
    this.rotation = rotation;
  }


  public VideoFileDetailsVideoStream vendor(String vendor) {
    this.vendor = vendor;
    return this;
  }

  /**
   * A value that uniquely identifies a video vendor. Typically, the value is a four-letter vendor code.
   * @return vendor
   */
  @javax.annotation.Nullable
  public String getVendor() {
    return vendor;
  }

  public void setVendor(String vendor) {
    this.vendor = vendor;
  }


  public VideoFileDetailsVideoStream widthPixels(Integer widthPixels) {
    this.widthPixels = widthPixels;
    return this;
  }

  /**
   * The encoded video content&#39;s width in pixels. You can calculate the video&#39;s encoding aspect ratio as width_pixels / height_pixels.
   * @return widthPixels
   */
  @javax.annotation.Nullable
  public Integer getWidthPixels() {
    return widthPixels;
  }

  public void setWidthPixels(Integer widthPixels) {
    this.widthPixels = widthPixels;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoFileDetailsVideoStream videoFileDetailsVideoStream = (VideoFileDetailsVideoStream) o;
    return Objects.equals(this.aspectRatio, videoFileDetailsVideoStream.aspectRatio) &&
        Objects.equals(this.bitrateBps, videoFileDetailsVideoStream.bitrateBps) &&
        Objects.equals(this.codec, videoFileDetailsVideoStream.codec) &&
        Objects.equals(this.frameRateFps, videoFileDetailsVideoStream.frameRateFps) &&
        Objects.equals(this.heightPixels, videoFileDetailsVideoStream.heightPixels) &&
        Objects.equals(this.rotation, videoFileDetailsVideoStream.rotation) &&
        Objects.equals(this.vendor, videoFileDetailsVideoStream.vendor) &&
        Objects.equals(this.widthPixels, videoFileDetailsVideoStream.widthPixels);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aspectRatio, bitrateBps, codec, frameRateFps, heightPixels, rotation, vendor, widthPixels);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoFileDetailsVideoStream {\n");
    sb.append("    aspectRatio: ").append(toIndentedString(aspectRatio)).append("\n");
    sb.append("    bitrateBps: ").append(toIndentedString(bitrateBps)).append("\n");
    sb.append("    codec: ").append(toIndentedString(codec)).append("\n");
    sb.append("    frameRateFps: ").append(toIndentedString(frameRateFps)).append("\n");
    sb.append("    heightPixels: ").append(toIndentedString(heightPixels)).append("\n");
    sb.append("    rotation: ").append(toIndentedString(rotation)).append("\n");
    sb.append("    vendor: ").append(toIndentedString(vendor)).append("\n");
    sb.append("    widthPixels: ").append(toIndentedString(widthPixels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aspectRatio");
    openapiFields.add("bitrateBps");
    openapiFields.add("codec");
    openapiFields.add("frameRateFps");
    openapiFields.add("heightPixels");
    openapiFields.add("rotation");
    openapiFields.add("vendor");
    openapiFields.add("widthPixels");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoFileDetailsVideoStream
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoFileDetailsVideoStream.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoFileDetailsVideoStream is not found in the empty JSON string", VideoFileDetailsVideoStream.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoFileDetailsVideoStream.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoFileDetailsVideoStream` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bitrateBps") != null && !jsonObj.get("bitrateBps").isJsonNull()) && !jsonObj.get("bitrateBps").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bitrateBps` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bitrateBps").toString()));
      }
      if ((jsonObj.get("codec") != null && !jsonObj.get("codec").isJsonNull()) && !jsonObj.get("codec").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `codec` to be a primitive type in the JSON string but got `%s`", jsonObj.get("codec").toString()));
      }
      if ((jsonObj.get("rotation") != null && !jsonObj.get("rotation").isJsonNull()) && !jsonObj.get("rotation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rotation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rotation").toString()));
      }
      // validate the optional field `rotation`
      if (jsonObj.get("rotation") != null && !jsonObj.get("rotation").isJsonNull()) {
        RotationEnum.validateJsonElement(jsonObj.get("rotation"));
      }
      if ((jsonObj.get("vendor") != null && !jsonObj.get("vendor").isJsonNull()) && !jsonObj.get("vendor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendor").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoFileDetailsVideoStream.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoFileDetailsVideoStream' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoFileDetailsVideoStream> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoFileDetailsVideoStream.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoFileDetailsVideoStream>() {
           @Override
           public void write(JsonWriter out, VideoFileDetailsVideoStream value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoFileDetailsVideoStream read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoFileDetailsVideoStream given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoFileDetailsVideoStream
   * @throws IOException if the JSON string is invalid with respect to VideoFileDetailsVideoStream
   */
  public static VideoFileDetailsVideoStream fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoFileDetailsVideoStream.class);
  }

  /**
   * Convert an instance of VideoFileDetailsVideoStream to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

