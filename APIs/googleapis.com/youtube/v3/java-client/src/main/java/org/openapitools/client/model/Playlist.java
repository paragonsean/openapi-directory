/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.PlaylistContentDetails;
import org.openapitools.client.model.PlaylistLocalization;
import org.openapitools.client.model.PlaylistPlayer;
import org.openapitools.client.model.PlaylistSnippet;
import org.openapitools.client.model.PlaylistStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A *playlist* resource represents a YouTube playlist. A playlist is a collection of videos that can be viewed sequentially and shared with other users. A playlist can contain up to 200 videos, and YouTube does not limit the number of playlists that each user creates. By default, playlists are publicly visible to other users, but playlists can be public or private. YouTube also uses playlists to identify special collections of videos for a channel, such as: - uploaded videos - favorite videos - positively rated (liked) videos - watch history - watch later To be more specific, these lists are associated with a channel, which is a collection of a person, group, or company&#39;s videos, playlists, and other YouTube information. You can retrieve the playlist IDs for each of these lists from the channel resource for a given channel. You can then use the playlistItems.list method to retrieve any of those lists. You can also add or remove items from those lists by calling the playlistItems.insert and playlistItems.delete methods.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Playlist {
  public static final String SERIALIZED_NAME_CONTENT_DETAILS = "contentDetails";
  @SerializedName(SERIALIZED_NAME_CONTENT_DETAILS)
  private PlaylistContentDetails contentDetails;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "youtube#playlist";

  public static final String SERIALIZED_NAME_LOCALIZATIONS = "localizations";
  @SerializedName(SERIALIZED_NAME_LOCALIZATIONS)
  private Map<String, PlaylistLocalization> localizations = new HashMap<>();

  public static final String SERIALIZED_NAME_PLAYER = "player";
  @SerializedName(SERIALIZED_NAME_PLAYER)
  private PlaylistPlayer player;

  public static final String SERIALIZED_NAME_SNIPPET = "snippet";
  @SerializedName(SERIALIZED_NAME_SNIPPET)
  private PlaylistSnippet snippet;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private PlaylistStatus status;

  public Playlist() {
  }

  public Playlist contentDetails(PlaylistContentDetails contentDetails) {
    this.contentDetails = contentDetails;
    return this;
  }

  /**
   * Get contentDetails
   * @return contentDetails
   */
  @javax.annotation.Nullable
  public PlaylistContentDetails getContentDetails() {
    return contentDetails;
  }

  public void setContentDetails(PlaylistContentDetails contentDetails) {
    this.contentDetails = contentDetails;
  }


  public Playlist etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * Etag of this resource.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public Playlist id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID that YouTube uses to uniquely identify the playlist.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Playlist kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string \&quot;youtube#playlist\&quot;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Playlist localizations(Map<String, PlaylistLocalization> localizations) {
    this.localizations = localizations;
    return this;
  }

  public Playlist putLocalizationsItem(String key, PlaylistLocalization localizationsItem) {
    if (this.localizations == null) {
      this.localizations = new HashMap<>();
    }
    this.localizations.put(key, localizationsItem);
    return this;
  }

  /**
   * Localizations for different languages
   * @return localizations
   */
  @javax.annotation.Nullable
  public Map<String, PlaylistLocalization> getLocalizations() {
    return localizations;
  }

  public void setLocalizations(Map<String, PlaylistLocalization> localizations) {
    this.localizations = localizations;
  }


  public Playlist player(PlaylistPlayer player) {
    this.player = player;
    return this;
  }

  /**
   * Get player
   * @return player
   */
  @javax.annotation.Nullable
  public PlaylistPlayer getPlayer() {
    return player;
  }

  public void setPlayer(PlaylistPlayer player) {
    this.player = player;
  }


  public Playlist snippet(PlaylistSnippet snippet) {
    this.snippet = snippet;
    return this;
  }

  /**
   * Get snippet
   * @return snippet
   */
  @javax.annotation.Nullable
  public PlaylistSnippet getSnippet() {
    return snippet;
  }

  public void setSnippet(PlaylistSnippet snippet) {
    this.snippet = snippet;
  }


  public Playlist status(PlaylistStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public PlaylistStatus getStatus() {
    return status;
  }

  public void setStatus(PlaylistStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Playlist playlist = (Playlist) o;
    return Objects.equals(this.contentDetails, playlist.contentDetails) &&
        Objects.equals(this.etag, playlist.etag) &&
        Objects.equals(this.id, playlist.id) &&
        Objects.equals(this.kind, playlist.kind) &&
        Objects.equals(this.localizations, playlist.localizations) &&
        Objects.equals(this.player, playlist.player) &&
        Objects.equals(this.snippet, playlist.snippet) &&
        Objects.equals(this.status, playlist.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentDetails, etag, id, kind, localizations, player, snippet, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Playlist {\n");
    sb.append("    contentDetails: ").append(toIndentedString(contentDetails)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    localizations: ").append(toIndentedString(localizations)).append("\n");
    sb.append("    player: ").append(toIndentedString(player)).append("\n");
    sb.append("    snippet: ").append(toIndentedString(snippet)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contentDetails");
    openapiFields.add("etag");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("localizations");
    openapiFields.add("player");
    openapiFields.add("snippet");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Playlist
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Playlist.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Playlist is not found in the empty JSON string", Playlist.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Playlist.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Playlist` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `contentDetails`
      if (jsonObj.get("contentDetails") != null && !jsonObj.get("contentDetails").isJsonNull()) {
        PlaylistContentDetails.validateJsonElement(jsonObj.get("contentDetails"));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `player`
      if (jsonObj.get("player") != null && !jsonObj.get("player").isJsonNull()) {
        PlaylistPlayer.validateJsonElement(jsonObj.get("player"));
      }
      // validate the optional field `snippet`
      if (jsonObj.get("snippet") != null && !jsonObj.get("snippet").isJsonNull()) {
        PlaylistSnippet.validateJsonElement(jsonObj.get("snippet"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        PlaylistStatus.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Playlist.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Playlist' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Playlist> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Playlist.class));

       return (TypeAdapter<T>) new TypeAdapter<Playlist>() {
           @Override
           public void write(JsonWriter out, Playlist value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Playlist read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Playlist given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Playlist
   * @throws IOException if the JSON string is invalid with respect to Playlist
   */
  public static Playlist fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Playlist.class);
  }

  /**
   * Convert an instance of Playlist to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

