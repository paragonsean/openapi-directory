/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.SearchListResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SearchApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SearchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SearchApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for youtubeSearchList
     * @param part The *part* parameter specifies a comma-separated list of one or more search resource properties that the API response will include. Set the parameter value to snippet. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param channelId Filter on resources belonging to this channelId. (optional)
     * @param channelType Add a filter on the channel search. (optional)
     * @param eventType Filter on the livestream status of the videos. (optional)
     * @param forContentOwner Search owned by a content owner. (optional)
     * @param forDeveloper Restrict the search to only retrieve videos uploaded using the project id of the authenticated user. (optional)
     * @param forMine Search for the private videos of the authenticated user. (optional)
     * @param location Filter on location of the video (optional)
     * @param locationRadius Filter on distance from the location (specified above). (optional)
     * @param maxResults The *maxResults* parameter specifies the maximum number of items that should be returned in the result set. (optional)
     * @param onBehalfOfContentOwner *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     * @param order Sort order of the results. (optional)
     * @param pageToken The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved. (optional)
     * @param publishedAfter Filter on resources published after this date. (optional)
     * @param publishedBefore Filter on resources published before this date. (optional)
     * @param q Textual search terms to match. (optional)
     * @param regionCode Display the content as seen by viewers in this country. (optional)
     * @param relevanceLanguage Return results relevant to this language. (optional)
     * @param safeSearch Indicates whether the search results should include restricted content as well as standard content. (optional)
     * @param topicId Restrict results to a particular topic. (optional)
     * @param type Restrict results to a particular set of resource types from One Platform. (optional)
     * @param videoCaption Filter on the presence of captions on the videos. (optional)
     * @param videoCategoryId Filter on videos in a specific category. (optional)
     * @param videoDefinition Filter on the definition of the videos. (optional)
     * @param videoDimension Filter on 3d videos. (optional)
     * @param videoDuration Filter on the duration of the videos. (optional)
     * @param videoEmbeddable Filter on embeddable videos. (optional)
     * @param videoLicense Filter on the license of the videos. (optional)
     * @param videoPaidProductPlacement  (optional)
     * @param videoSyndicated Filter on syndicated videos. (optional)
     * @param videoType Filter on videos of a specific type. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call youtubeSearchListCall(List<String> part, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String channelId, String channelType, String eventType, Boolean forContentOwner, Boolean forDeveloper, Boolean forMine, String location, String locationRadius, Integer maxResults, String onBehalfOfContentOwner, String order, String pageToken, String publishedAfter, String publishedBefore, String q, String regionCode, String relevanceLanguage, String safeSearch, String topicId, List<String> type, String videoCaption, String videoCategoryId, String videoDefinition, String videoDimension, String videoDuration, String videoEmbeddable, String videoLicense, String videoPaidProductPlacement, String videoSyndicated, String videoType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/youtube/v3/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (part != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "part", part));
        }

        if (channelId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channelId", channelId));
        }

        if (channelType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channelType", channelType));
        }

        if (eventType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventType", eventType));
        }

        if (forContentOwner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("forContentOwner", forContentOwner));
        }

        if (forDeveloper != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("forDeveloper", forDeveloper));
        }

        if (forMine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("forMine", forMine));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (locationRadius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationRadius", locationRadius));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (onBehalfOfContentOwner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onBehalfOfContentOwner", onBehalfOfContentOwner));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (publishedAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("publishedAfter", publishedAfter));
        }

        if (publishedBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("publishedBefore", publishedBefore));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (regionCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("regionCode", regionCode));
        }

        if (relevanceLanguage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relevanceLanguage", relevanceLanguage));
        }

        if (safeSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("safeSearch", safeSearch));
        }

        if (topicId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("topicId", topicId));
        }

        if (type != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "type", type));
        }

        if (videoCaption != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("videoCaption", videoCaption));
        }

        if (videoCategoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("videoCategoryId", videoCategoryId));
        }

        if (videoDefinition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("videoDefinition", videoDefinition));
        }

        if (videoDimension != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("videoDimension", videoDimension));
        }

        if (videoDuration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("videoDuration", videoDuration));
        }

        if (videoEmbeddable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("videoEmbeddable", videoEmbeddable));
        }

        if (videoLicense != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("videoLicense", videoLicense));
        }

        if (videoPaidProductPlacement != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("videoPaidProductPlacement", videoPaidProductPlacement));
        }

        if (videoSyndicated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("videoSyndicated", videoSyndicated));
        }

        if (videoType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("videoType", videoType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call youtubeSearchListValidateBeforeCall(List<String> part, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String channelId, String channelType, String eventType, Boolean forContentOwner, Boolean forDeveloper, Boolean forMine, String location, String locationRadius, Integer maxResults, String onBehalfOfContentOwner, String order, String pageToken, String publishedAfter, String publishedBefore, String q, String regionCode, String relevanceLanguage, String safeSearch, String topicId, List<String> type, String videoCaption, String videoCategoryId, String videoDefinition, String videoDimension, String videoDuration, String videoEmbeddable, String videoLicense, String videoPaidProductPlacement, String videoSyndicated, String videoType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'part' is set
        if (part == null) {
            throw new ApiException("Missing the required parameter 'part' when calling youtubeSearchList(Async)");
        }

        return youtubeSearchListCall(part, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, channelId, channelType, eventType, forContentOwner, forDeveloper, forMine, location, locationRadius, maxResults, onBehalfOfContentOwner, order, pageToken, publishedAfter, publishedBefore, q, regionCode, relevanceLanguage, safeSearch, topicId, type, videoCaption, videoCategoryId, videoDefinition, videoDimension, videoDuration, videoEmbeddable, videoLicense, videoPaidProductPlacement, videoSyndicated, videoType, _callback);

    }

    /**
     * 
     * Retrieves a list of search resources
     * @param part The *part* parameter specifies a comma-separated list of one or more search resource properties that the API response will include. Set the parameter value to snippet. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param channelId Filter on resources belonging to this channelId. (optional)
     * @param channelType Add a filter on the channel search. (optional)
     * @param eventType Filter on the livestream status of the videos. (optional)
     * @param forContentOwner Search owned by a content owner. (optional)
     * @param forDeveloper Restrict the search to only retrieve videos uploaded using the project id of the authenticated user. (optional)
     * @param forMine Search for the private videos of the authenticated user. (optional)
     * @param location Filter on location of the video (optional)
     * @param locationRadius Filter on distance from the location (specified above). (optional)
     * @param maxResults The *maxResults* parameter specifies the maximum number of items that should be returned in the result set. (optional)
     * @param onBehalfOfContentOwner *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     * @param order Sort order of the results. (optional)
     * @param pageToken The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved. (optional)
     * @param publishedAfter Filter on resources published after this date. (optional)
     * @param publishedBefore Filter on resources published before this date. (optional)
     * @param q Textual search terms to match. (optional)
     * @param regionCode Display the content as seen by viewers in this country. (optional)
     * @param relevanceLanguage Return results relevant to this language. (optional)
     * @param safeSearch Indicates whether the search results should include restricted content as well as standard content. (optional)
     * @param topicId Restrict results to a particular topic. (optional)
     * @param type Restrict results to a particular set of resource types from One Platform. (optional)
     * @param videoCaption Filter on the presence of captions on the videos. (optional)
     * @param videoCategoryId Filter on videos in a specific category. (optional)
     * @param videoDefinition Filter on the definition of the videos. (optional)
     * @param videoDimension Filter on 3d videos. (optional)
     * @param videoDuration Filter on the duration of the videos. (optional)
     * @param videoEmbeddable Filter on embeddable videos. (optional)
     * @param videoLicense Filter on the license of the videos. (optional)
     * @param videoPaidProductPlacement  (optional)
     * @param videoSyndicated Filter on syndicated videos. (optional)
     * @param videoType Filter on videos of a specific type. (optional)
     * @return SearchListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public SearchListResponse youtubeSearchList(List<String> part, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String channelId, String channelType, String eventType, Boolean forContentOwner, Boolean forDeveloper, Boolean forMine, String location, String locationRadius, Integer maxResults, String onBehalfOfContentOwner, String order, String pageToken, String publishedAfter, String publishedBefore, String q, String regionCode, String relevanceLanguage, String safeSearch, String topicId, List<String> type, String videoCaption, String videoCategoryId, String videoDefinition, String videoDimension, String videoDuration, String videoEmbeddable, String videoLicense, String videoPaidProductPlacement, String videoSyndicated, String videoType) throws ApiException {
        ApiResponse<SearchListResponse> localVarResp = youtubeSearchListWithHttpInfo(part, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, channelId, channelType, eventType, forContentOwner, forDeveloper, forMine, location, locationRadius, maxResults, onBehalfOfContentOwner, order, pageToken, publishedAfter, publishedBefore, q, regionCode, relevanceLanguage, safeSearch, topicId, type, videoCaption, videoCategoryId, videoDefinition, videoDimension, videoDuration, videoEmbeddable, videoLicense, videoPaidProductPlacement, videoSyndicated, videoType);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves a list of search resources
     * @param part The *part* parameter specifies a comma-separated list of one or more search resource properties that the API response will include. Set the parameter value to snippet. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param channelId Filter on resources belonging to this channelId. (optional)
     * @param channelType Add a filter on the channel search. (optional)
     * @param eventType Filter on the livestream status of the videos. (optional)
     * @param forContentOwner Search owned by a content owner. (optional)
     * @param forDeveloper Restrict the search to only retrieve videos uploaded using the project id of the authenticated user. (optional)
     * @param forMine Search for the private videos of the authenticated user. (optional)
     * @param location Filter on location of the video (optional)
     * @param locationRadius Filter on distance from the location (specified above). (optional)
     * @param maxResults The *maxResults* parameter specifies the maximum number of items that should be returned in the result set. (optional)
     * @param onBehalfOfContentOwner *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     * @param order Sort order of the results. (optional)
     * @param pageToken The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved. (optional)
     * @param publishedAfter Filter on resources published after this date. (optional)
     * @param publishedBefore Filter on resources published before this date. (optional)
     * @param q Textual search terms to match. (optional)
     * @param regionCode Display the content as seen by viewers in this country. (optional)
     * @param relevanceLanguage Return results relevant to this language. (optional)
     * @param safeSearch Indicates whether the search results should include restricted content as well as standard content. (optional)
     * @param topicId Restrict results to a particular topic. (optional)
     * @param type Restrict results to a particular set of resource types from One Platform. (optional)
     * @param videoCaption Filter on the presence of captions on the videos. (optional)
     * @param videoCategoryId Filter on videos in a specific category. (optional)
     * @param videoDefinition Filter on the definition of the videos. (optional)
     * @param videoDimension Filter on 3d videos. (optional)
     * @param videoDuration Filter on the duration of the videos. (optional)
     * @param videoEmbeddable Filter on embeddable videos. (optional)
     * @param videoLicense Filter on the license of the videos. (optional)
     * @param videoPaidProductPlacement  (optional)
     * @param videoSyndicated Filter on syndicated videos. (optional)
     * @param videoType Filter on videos of a specific type. (optional)
     * @return ApiResponse&lt;SearchListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchListResponse> youtubeSearchListWithHttpInfo(List<String> part, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String channelId, String channelType, String eventType, Boolean forContentOwner, Boolean forDeveloper, Boolean forMine, String location, String locationRadius, Integer maxResults, String onBehalfOfContentOwner, String order, String pageToken, String publishedAfter, String publishedBefore, String q, String regionCode, String relevanceLanguage, String safeSearch, String topicId, List<String> type, String videoCaption, String videoCategoryId, String videoDefinition, String videoDimension, String videoDuration, String videoEmbeddable, String videoLicense, String videoPaidProductPlacement, String videoSyndicated, String videoType) throws ApiException {
        okhttp3.Call localVarCall = youtubeSearchListValidateBeforeCall(part, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, channelId, channelType, eventType, forContentOwner, forDeveloper, forMine, location, locationRadius, maxResults, onBehalfOfContentOwner, order, pageToken, publishedAfter, publishedBefore, q, regionCode, relevanceLanguage, safeSearch, topicId, type, videoCaption, videoCategoryId, videoDefinition, videoDimension, videoDuration, videoEmbeddable, videoLicense, videoPaidProductPlacement, videoSyndicated, videoType, null);
        Type localVarReturnType = new TypeToken<SearchListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves a list of search resources
     * @param part The *part* parameter specifies a comma-separated list of one or more search resource properties that the API response will include. Set the parameter value to snippet. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param channelId Filter on resources belonging to this channelId. (optional)
     * @param channelType Add a filter on the channel search. (optional)
     * @param eventType Filter on the livestream status of the videos. (optional)
     * @param forContentOwner Search owned by a content owner. (optional)
     * @param forDeveloper Restrict the search to only retrieve videos uploaded using the project id of the authenticated user. (optional)
     * @param forMine Search for the private videos of the authenticated user. (optional)
     * @param location Filter on location of the video (optional)
     * @param locationRadius Filter on distance from the location (specified above). (optional)
     * @param maxResults The *maxResults* parameter specifies the maximum number of items that should be returned in the result set. (optional)
     * @param onBehalfOfContentOwner *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request&#39;s authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner. (optional)
     * @param order Sort order of the results. (optional)
     * @param pageToken The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved. (optional)
     * @param publishedAfter Filter on resources published after this date. (optional)
     * @param publishedBefore Filter on resources published before this date. (optional)
     * @param q Textual search terms to match. (optional)
     * @param regionCode Display the content as seen by viewers in this country. (optional)
     * @param relevanceLanguage Return results relevant to this language. (optional)
     * @param safeSearch Indicates whether the search results should include restricted content as well as standard content. (optional)
     * @param topicId Restrict results to a particular topic. (optional)
     * @param type Restrict results to a particular set of resource types from One Platform. (optional)
     * @param videoCaption Filter on the presence of captions on the videos. (optional)
     * @param videoCategoryId Filter on videos in a specific category. (optional)
     * @param videoDefinition Filter on the definition of the videos. (optional)
     * @param videoDimension Filter on 3d videos. (optional)
     * @param videoDuration Filter on the duration of the videos. (optional)
     * @param videoEmbeddable Filter on embeddable videos. (optional)
     * @param videoLicense Filter on the license of the videos. (optional)
     * @param videoPaidProductPlacement  (optional)
     * @param videoSyndicated Filter on syndicated videos. (optional)
     * @param videoType Filter on videos of a specific type. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call youtubeSearchListAsync(List<String> part, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String channelId, String channelType, String eventType, Boolean forContentOwner, Boolean forDeveloper, Boolean forMine, String location, String locationRadius, Integer maxResults, String onBehalfOfContentOwner, String order, String pageToken, String publishedAfter, String publishedBefore, String q, String regionCode, String relevanceLanguage, String safeSearch, String topicId, List<String> type, String videoCaption, String videoCategoryId, String videoDefinition, String videoDimension, String videoDuration, String videoEmbeddable, String videoLicense, String videoPaidProductPlacement, String videoSyndicated, String videoType, final ApiCallback<SearchListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = youtubeSearchListValidateBeforeCall(part, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, channelId, channelType, eventType, forContentOwner, forDeveloper, forMine, location, locationRadius, maxResults, onBehalfOfContentOwner, order, pageToken, publishedAfter, publishedBefore, q, regionCode, relevanceLanguage, safeSearch, topicId, type, videoCaption, videoCategoryId, videoDefinition, videoDimension, videoDuration, videoEmbeddable, videoLicense, videoPaidProductPlacement, videoSyndicated, videoType, _callback);
        Type localVarReturnType = new TypeToken<SearchListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
