/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.CommentSnippetAuthorChannelId;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Basic details about a comment, such as its author and text.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CommentSnippet {
  public static final String SERIALIZED_NAME_AUTHOR_CHANNEL_ID = "authorChannelId";
  @SerializedName(SERIALIZED_NAME_AUTHOR_CHANNEL_ID)
  private CommentSnippetAuthorChannelId authorChannelId;

  public static final String SERIALIZED_NAME_AUTHOR_CHANNEL_URL = "authorChannelUrl";
  @SerializedName(SERIALIZED_NAME_AUTHOR_CHANNEL_URL)
  private String authorChannelUrl;

  public static final String SERIALIZED_NAME_AUTHOR_DISPLAY_NAME = "authorDisplayName";
  @SerializedName(SERIALIZED_NAME_AUTHOR_DISPLAY_NAME)
  private String authorDisplayName;

  public static final String SERIALIZED_NAME_AUTHOR_PROFILE_IMAGE_URL = "authorProfileImageUrl";
  @SerializedName(SERIALIZED_NAME_AUTHOR_PROFILE_IMAGE_URL)
  private String authorProfileImageUrl;

  public static final String SERIALIZED_NAME_CAN_RATE = "canRate";
  @SerializedName(SERIALIZED_NAME_CAN_RATE)
  private Boolean canRate;

  public static final String SERIALIZED_NAME_CHANNEL_ID = "channelId";
  @SerializedName(SERIALIZED_NAME_CHANNEL_ID)
  private String channelId;

  public static final String SERIALIZED_NAME_LIKE_COUNT = "likeCount";
  @SerializedName(SERIALIZED_NAME_LIKE_COUNT)
  private Integer likeCount;

  /**
   * The comment&#39;s moderation status. Will not be set if the comments were requested through the id filter.
   */
  @JsonAdapter(ModerationStatusEnum.Adapter.class)
  public enum ModerationStatusEnum {
    PUBLISHED("published"),
    
    HELD_FOR_REVIEW("heldForReview"),
    
    LIKELY_SPAM("likelySpam"),
    
    REJECTED("rejected");

    private String value;

    ModerationStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModerationStatusEnum fromValue(String value) {
      for (ModerationStatusEnum b : ModerationStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModerationStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModerationStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModerationStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModerationStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ModerationStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MODERATION_STATUS = "moderationStatus";
  @SerializedName(SERIALIZED_NAME_MODERATION_STATUS)
  private ModerationStatusEnum moderationStatus;

  public static final String SERIALIZED_NAME_PARENT_ID = "parentId";
  @SerializedName(SERIALIZED_NAME_PARENT_ID)
  private String parentId;

  public static final String SERIALIZED_NAME_PUBLISHED_AT = "publishedAt";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_AT)
  private OffsetDateTime publishedAt;

  public static final String SERIALIZED_NAME_TEXT_DISPLAY = "textDisplay";
  @SerializedName(SERIALIZED_NAME_TEXT_DISPLAY)
  private String textDisplay;

  public static final String SERIALIZED_NAME_TEXT_ORIGINAL = "textOriginal";
  @SerializedName(SERIALIZED_NAME_TEXT_ORIGINAL)
  private String textOriginal;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_VIDEO_ID = "videoId";
  @SerializedName(SERIALIZED_NAME_VIDEO_ID)
  private String videoId;

  /**
   * The rating the viewer has given to this comment. For the time being this will never return RATE_TYPE_DISLIKE and instead return RATE_TYPE_NONE. This may change in the future.
   */
  @JsonAdapter(ViewerRatingEnum.Adapter.class)
  public enum ViewerRatingEnum {
    NONE("none"),
    
    LIKE("like"),
    
    DISLIKE("dislike");

    private String value;

    ViewerRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ViewerRatingEnum fromValue(String value) {
      for (ViewerRatingEnum b : ViewerRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ViewerRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ViewerRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ViewerRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ViewerRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ViewerRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VIEWER_RATING = "viewerRating";
  @SerializedName(SERIALIZED_NAME_VIEWER_RATING)
  private ViewerRatingEnum viewerRating;

  public CommentSnippet() {
  }

  public CommentSnippet authorChannelId(CommentSnippetAuthorChannelId authorChannelId) {
    this.authorChannelId = authorChannelId;
    return this;
  }

  /**
   * Get authorChannelId
   * @return authorChannelId
   */
  @javax.annotation.Nullable
  public CommentSnippetAuthorChannelId getAuthorChannelId() {
    return authorChannelId;
  }

  public void setAuthorChannelId(CommentSnippetAuthorChannelId authorChannelId) {
    this.authorChannelId = authorChannelId;
  }


  public CommentSnippet authorChannelUrl(String authorChannelUrl) {
    this.authorChannelUrl = authorChannelUrl;
    return this;
  }

  /**
   * Link to the author&#39;s YouTube channel, if any.
   * @return authorChannelUrl
   */
  @javax.annotation.Nullable
  public String getAuthorChannelUrl() {
    return authorChannelUrl;
  }

  public void setAuthorChannelUrl(String authorChannelUrl) {
    this.authorChannelUrl = authorChannelUrl;
  }


  public CommentSnippet authorDisplayName(String authorDisplayName) {
    this.authorDisplayName = authorDisplayName;
    return this;
  }

  /**
   * The name of the user who posted the comment.
   * @return authorDisplayName
   */
  @javax.annotation.Nullable
  public String getAuthorDisplayName() {
    return authorDisplayName;
  }

  public void setAuthorDisplayName(String authorDisplayName) {
    this.authorDisplayName = authorDisplayName;
  }


  public CommentSnippet authorProfileImageUrl(String authorProfileImageUrl) {
    this.authorProfileImageUrl = authorProfileImageUrl;
    return this;
  }

  /**
   * The URL for the avatar of the user who posted the comment.
   * @return authorProfileImageUrl
   */
  @javax.annotation.Nullable
  public String getAuthorProfileImageUrl() {
    return authorProfileImageUrl;
  }

  public void setAuthorProfileImageUrl(String authorProfileImageUrl) {
    this.authorProfileImageUrl = authorProfileImageUrl;
  }


  public CommentSnippet canRate(Boolean canRate) {
    this.canRate = canRate;
    return this;
  }

  /**
   * Whether the current viewer can rate this comment.
   * @return canRate
   */
  @javax.annotation.Nullable
  public Boolean getCanRate() {
    return canRate;
  }

  public void setCanRate(Boolean canRate) {
    this.canRate = canRate;
  }


  public CommentSnippet channelId(String channelId) {
    this.channelId = channelId;
    return this;
  }

  /**
   * The id of the corresponding YouTube channel. In case of a channel comment this is the channel the comment refers to. In case of a video comment it&#39;s the video&#39;s channel.
   * @return channelId
   */
  @javax.annotation.Nullable
  public String getChannelId() {
    return channelId;
  }

  public void setChannelId(String channelId) {
    this.channelId = channelId;
  }


  public CommentSnippet likeCount(Integer likeCount) {
    this.likeCount = likeCount;
    return this;
  }

  /**
   * The total number of likes this comment has received.
   * @return likeCount
   */
  @javax.annotation.Nullable
  public Integer getLikeCount() {
    return likeCount;
  }

  public void setLikeCount(Integer likeCount) {
    this.likeCount = likeCount;
  }


  public CommentSnippet moderationStatus(ModerationStatusEnum moderationStatus) {
    this.moderationStatus = moderationStatus;
    return this;
  }

  /**
   * The comment&#39;s moderation status. Will not be set if the comments were requested through the id filter.
   * @return moderationStatus
   */
  @javax.annotation.Nullable
  public ModerationStatusEnum getModerationStatus() {
    return moderationStatus;
  }

  public void setModerationStatus(ModerationStatusEnum moderationStatus) {
    this.moderationStatus = moderationStatus;
  }


  public CommentSnippet parentId(String parentId) {
    this.parentId = parentId;
    return this;
  }

  /**
   * The unique id of the parent comment, only set for replies.
   * @return parentId
   */
  @javax.annotation.Nullable
  public String getParentId() {
    return parentId;
  }

  public void setParentId(String parentId) {
    this.parentId = parentId;
  }


  public CommentSnippet publishedAt(OffsetDateTime publishedAt) {
    this.publishedAt = publishedAt;
    return this;
  }

  /**
   * The date and time when the comment was originally published.
   * @return publishedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPublishedAt() {
    return publishedAt;
  }

  public void setPublishedAt(OffsetDateTime publishedAt) {
    this.publishedAt = publishedAt;
  }


  public CommentSnippet textDisplay(String textDisplay) {
    this.textDisplay = textDisplay;
    return this;
  }

  /**
   * The comment&#39;s text. The format is either plain text or HTML dependent on what has been requested. Even the plain text representation may differ from the text originally posted in that it may replace video links with video titles etc.
   * @return textDisplay
   */
  @javax.annotation.Nullable
  public String getTextDisplay() {
    return textDisplay;
  }

  public void setTextDisplay(String textDisplay) {
    this.textDisplay = textDisplay;
  }


  public CommentSnippet textOriginal(String textOriginal) {
    this.textOriginal = textOriginal;
    return this;
  }

  /**
   * The comment&#39;s original raw text as initially posted or last updated. The original text will only be returned if it is accessible to the viewer, which is only guaranteed if the viewer is the comment&#39;s author.
   * @return textOriginal
   */
  @javax.annotation.Nullable
  public String getTextOriginal() {
    return textOriginal;
  }

  public void setTextOriginal(String textOriginal) {
    this.textOriginal = textOriginal;
  }


  public CommentSnippet updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * The date and time when the comment was last updated.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public CommentSnippet videoId(String videoId) {
    this.videoId = videoId;
    return this;
  }

  /**
   * The ID of the video the comment refers to, if any.
   * @return videoId
   */
  @javax.annotation.Nullable
  public String getVideoId() {
    return videoId;
  }

  public void setVideoId(String videoId) {
    this.videoId = videoId;
  }


  public CommentSnippet viewerRating(ViewerRatingEnum viewerRating) {
    this.viewerRating = viewerRating;
    return this;
  }

  /**
   * The rating the viewer has given to this comment. For the time being this will never return RATE_TYPE_DISLIKE and instead return RATE_TYPE_NONE. This may change in the future.
   * @return viewerRating
   */
  @javax.annotation.Nullable
  public ViewerRatingEnum getViewerRating() {
    return viewerRating;
  }

  public void setViewerRating(ViewerRatingEnum viewerRating) {
    this.viewerRating = viewerRating;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommentSnippet commentSnippet = (CommentSnippet) o;
    return Objects.equals(this.authorChannelId, commentSnippet.authorChannelId) &&
        Objects.equals(this.authorChannelUrl, commentSnippet.authorChannelUrl) &&
        Objects.equals(this.authorDisplayName, commentSnippet.authorDisplayName) &&
        Objects.equals(this.authorProfileImageUrl, commentSnippet.authorProfileImageUrl) &&
        Objects.equals(this.canRate, commentSnippet.canRate) &&
        Objects.equals(this.channelId, commentSnippet.channelId) &&
        Objects.equals(this.likeCount, commentSnippet.likeCount) &&
        Objects.equals(this.moderationStatus, commentSnippet.moderationStatus) &&
        Objects.equals(this.parentId, commentSnippet.parentId) &&
        Objects.equals(this.publishedAt, commentSnippet.publishedAt) &&
        Objects.equals(this.textDisplay, commentSnippet.textDisplay) &&
        Objects.equals(this.textOriginal, commentSnippet.textOriginal) &&
        Objects.equals(this.updatedAt, commentSnippet.updatedAt) &&
        Objects.equals(this.videoId, commentSnippet.videoId) &&
        Objects.equals(this.viewerRating, commentSnippet.viewerRating);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorChannelId, authorChannelUrl, authorDisplayName, authorProfileImageUrl, canRate, channelId, likeCount, moderationStatus, parentId, publishedAt, textDisplay, textOriginal, updatedAt, videoId, viewerRating);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommentSnippet {\n");
    sb.append("    authorChannelId: ").append(toIndentedString(authorChannelId)).append("\n");
    sb.append("    authorChannelUrl: ").append(toIndentedString(authorChannelUrl)).append("\n");
    sb.append("    authorDisplayName: ").append(toIndentedString(authorDisplayName)).append("\n");
    sb.append("    authorProfileImageUrl: ").append(toIndentedString(authorProfileImageUrl)).append("\n");
    sb.append("    canRate: ").append(toIndentedString(canRate)).append("\n");
    sb.append("    channelId: ").append(toIndentedString(channelId)).append("\n");
    sb.append("    likeCount: ").append(toIndentedString(likeCount)).append("\n");
    sb.append("    moderationStatus: ").append(toIndentedString(moderationStatus)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    publishedAt: ").append(toIndentedString(publishedAt)).append("\n");
    sb.append("    textDisplay: ").append(toIndentedString(textDisplay)).append("\n");
    sb.append("    textOriginal: ").append(toIndentedString(textOriginal)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    videoId: ").append(toIndentedString(videoId)).append("\n");
    sb.append("    viewerRating: ").append(toIndentedString(viewerRating)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorChannelId");
    openapiFields.add("authorChannelUrl");
    openapiFields.add("authorDisplayName");
    openapiFields.add("authorProfileImageUrl");
    openapiFields.add("canRate");
    openapiFields.add("channelId");
    openapiFields.add("likeCount");
    openapiFields.add("moderationStatus");
    openapiFields.add("parentId");
    openapiFields.add("publishedAt");
    openapiFields.add("textDisplay");
    openapiFields.add("textOriginal");
    openapiFields.add("updatedAt");
    openapiFields.add("videoId");
    openapiFields.add("viewerRating");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CommentSnippet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CommentSnippet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommentSnippet is not found in the empty JSON string", CommentSnippet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CommentSnippet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CommentSnippet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `authorChannelId`
      if (jsonObj.get("authorChannelId") != null && !jsonObj.get("authorChannelId").isJsonNull()) {
        CommentSnippetAuthorChannelId.validateJsonElement(jsonObj.get("authorChannelId"));
      }
      if ((jsonObj.get("authorChannelUrl") != null && !jsonObj.get("authorChannelUrl").isJsonNull()) && !jsonObj.get("authorChannelUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorChannelUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorChannelUrl").toString()));
      }
      if ((jsonObj.get("authorDisplayName") != null && !jsonObj.get("authorDisplayName").isJsonNull()) && !jsonObj.get("authorDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorDisplayName").toString()));
      }
      if ((jsonObj.get("authorProfileImageUrl") != null && !jsonObj.get("authorProfileImageUrl").isJsonNull()) && !jsonObj.get("authorProfileImageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorProfileImageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorProfileImageUrl").toString()));
      }
      if ((jsonObj.get("channelId") != null && !jsonObj.get("channelId").isJsonNull()) && !jsonObj.get("channelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channelId").toString()));
      }
      if ((jsonObj.get("moderationStatus") != null && !jsonObj.get("moderationStatus").isJsonNull()) && !jsonObj.get("moderationStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `moderationStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("moderationStatus").toString()));
      }
      // validate the optional field `moderationStatus`
      if (jsonObj.get("moderationStatus") != null && !jsonObj.get("moderationStatus").isJsonNull()) {
        ModerationStatusEnum.validateJsonElement(jsonObj.get("moderationStatus"));
      }
      if ((jsonObj.get("parentId") != null && !jsonObj.get("parentId").isJsonNull()) && !jsonObj.get("parentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentId").toString()));
      }
      if ((jsonObj.get("textDisplay") != null && !jsonObj.get("textDisplay").isJsonNull()) && !jsonObj.get("textDisplay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `textDisplay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("textDisplay").toString()));
      }
      if ((jsonObj.get("textOriginal") != null && !jsonObj.get("textOriginal").isJsonNull()) && !jsonObj.get("textOriginal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `textOriginal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("textOriginal").toString()));
      }
      if ((jsonObj.get("videoId") != null && !jsonObj.get("videoId").isJsonNull()) && !jsonObj.get("videoId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `videoId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("videoId").toString()));
      }
      if ((jsonObj.get("viewerRating") != null && !jsonObj.get("viewerRating").isJsonNull()) && !jsonObj.get("viewerRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `viewerRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("viewerRating").toString()));
      }
      // validate the optional field `viewerRating`
      if (jsonObj.get("viewerRating") != null && !jsonObj.get("viewerRating").isJsonNull()) {
        ViewerRatingEnum.validateJsonElement(jsonObj.get("viewerRating"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommentSnippet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommentSnippet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommentSnippet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommentSnippet.class));

       return (TypeAdapter<T>) new TypeAdapter<CommentSnippet>() {
           @Override
           public void write(JsonWriter out, CommentSnippet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CommentSnippet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CommentSnippet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CommentSnippet
   * @throws IOException if the JSON string is invalid with respect to CommentSnippet
   */
  public static CommentSnippet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommentSnippet.class);
  }

  /**
   * Convert an instance of CommentSnippet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

