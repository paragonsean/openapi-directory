/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MembershipsDuration;
import org.openapitools.client.model.MembershipsDurationAtLevel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MembershipsDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MembershipsDetails {
  public static final String SERIALIZED_NAME_ACCESSIBLE_LEVELS = "accessibleLevels";
  @SerializedName(SERIALIZED_NAME_ACCESSIBLE_LEVELS)
  private List<String> accessibleLevels = new ArrayList<>();

  public static final String SERIALIZED_NAME_HIGHEST_ACCESSIBLE_LEVEL = "highestAccessibleLevel";
  @SerializedName(SERIALIZED_NAME_HIGHEST_ACCESSIBLE_LEVEL)
  private String highestAccessibleLevel;

  public static final String SERIALIZED_NAME_HIGHEST_ACCESSIBLE_LEVEL_DISPLAY_NAME = "highestAccessibleLevelDisplayName";
  @SerializedName(SERIALIZED_NAME_HIGHEST_ACCESSIBLE_LEVEL_DISPLAY_NAME)
  private String highestAccessibleLevelDisplayName;

  public static final String SERIALIZED_NAME_MEMBERSHIPS_DURATION = "membershipsDuration";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIPS_DURATION)
  private MembershipsDuration membershipsDuration;

  public static final String SERIALIZED_NAME_MEMBERSHIPS_DURATION_AT_LEVELS = "membershipsDurationAtLevels";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIPS_DURATION_AT_LEVELS)
  private List<MembershipsDurationAtLevel> membershipsDurationAtLevels = new ArrayList<>();

  public MembershipsDetails() {
  }

  public MembershipsDetails accessibleLevels(List<String> accessibleLevels) {
    this.accessibleLevels = accessibleLevels;
    return this;
  }

  public MembershipsDetails addAccessibleLevelsItem(String accessibleLevelsItem) {
    if (this.accessibleLevels == null) {
      this.accessibleLevels = new ArrayList<>();
    }
    this.accessibleLevels.add(accessibleLevelsItem);
    return this;
  }

  /**
   * Ids of all levels that the user has access to. This includes the currently active level and all other levels that are included because of a higher purchase.
   * @return accessibleLevels
   */
  @javax.annotation.Nullable
  public List<String> getAccessibleLevels() {
    return accessibleLevels;
  }

  public void setAccessibleLevels(List<String> accessibleLevels) {
    this.accessibleLevels = accessibleLevels;
  }


  public MembershipsDetails highestAccessibleLevel(String highestAccessibleLevel) {
    this.highestAccessibleLevel = highestAccessibleLevel;
    return this;
  }

  /**
   * Id of the highest level that the user has access to at the moment.
   * @return highestAccessibleLevel
   */
  @javax.annotation.Nullable
  public String getHighestAccessibleLevel() {
    return highestAccessibleLevel;
  }

  public void setHighestAccessibleLevel(String highestAccessibleLevel) {
    this.highestAccessibleLevel = highestAccessibleLevel;
  }


  public MembershipsDetails highestAccessibleLevelDisplayName(String highestAccessibleLevelDisplayName) {
    this.highestAccessibleLevelDisplayName = highestAccessibleLevelDisplayName;
    return this;
  }

  /**
   * Display name for the highest level that the user has access to at the moment.
   * @return highestAccessibleLevelDisplayName
   */
  @javax.annotation.Nullable
  public String getHighestAccessibleLevelDisplayName() {
    return highestAccessibleLevelDisplayName;
  }

  public void setHighestAccessibleLevelDisplayName(String highestAccessibleLevelDisplayName) {
    this.highestAccessibleLevelDisplayName = highestAccessibleLevelDisplayName;
  }


  public MembershipsDetails membershipsDuration(MembershipsDuration membershipsDuration) {
    this.membershipsDuration = membershipsDuration;
    return this;
  }

  /**
   * Get membershipsDuration
   * @return membershipsDuration
   */
  @javax.annotation.Nullable
  public MembershipsDuration getMembershipsDuration() {
    return membershipsDuration;
  }

  public void setMembershipsDuration(MembershipsDuration membershipsDuration) {
    this.membershipsDuration = membershipsDuration;
  }


  public MembershipsDetails membershipsDurationAtLevels(List<MembershipsDurationAtLevel> membershipsDurationAtLevels) {
    this.membershipsDurationAtLevels = membershipsDurationAtLevels;
    return this;
  }

  public MembershipsDetails addMembershipsDurationAtLevelsItem(MembershipsDurationAtLevel membershipsDurationAtLevelsItem) {
    if (this.membershipsDurationAtLevels == null) {
      this.membershipsDurationAtLevels = new ArrayList<>();
    }
    this.membershipsDurationAtLevels.add(membershipsDurationAtLevelsItem);
    return this;
  }

  /**
   * Data about memberships duration on particular pricing levels.
   * @return membershipsDurationAtLevels
   */
  @javax.annotation.Nullable
  public List<MembershipsDurationAtLevel> getMembershipsDurationAtLevels() {
    return membershipsDurationAtLevels;
  }

  public void setMembershipsDurationAtLevels(List<MembershipsDurationAtLevel> membershipsDurationAtLevels) {
    this.membershipsDurationAtLevels = membershipsDurationAtLevels;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MembershipsDetails membershipsDetails = (MembershipsDetails) o;
    return Objects.equals(this.accessibleLevels, membershipsDetails.accessibleLevels) &&
        Objects.equals(this.highestAccessibleLevel, membershipsDetails.highestAccessibleLevel) &&
        Objects.equals(this.highestAccessibleLevelDisplayName, membershipsDetails.highestAccessibleLevelDisplayName) &&
        Objects.equals(this.membershipsDuration, membershipsDetails.membershipsDuration) &&
        Objects.equals(this.membershipsDurationAtLevels, membershipsDetails.membershipsDurationAtLevels);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessibleLevels, highestAccessibleLevel, highestAccessibleLevelDisplayName, membershipsDuration, membershipsDurationAtLevels);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MembershipsDetails {\n");
    sb.append("    accessibleLevels: ").append(toIndentedString(accessibleLevels)).append("\n");
    sb.append("    highestAccessibleLevel: ").append(toIndentedString(highestAccessibleLevel)).append("\n");
    sb.append("    highestAccessibleLevelDisplayName: ").append(toIndentedString(highestAccessibleLevelDisplayName)).append("\n");
    sb.append("    membershipsDuration: ").append(toIndentedString(membershipsDuration)).append("\n");
    sb.append("    membershipsDurationAtLevels: ").append(toIndentedString(membershipsDurationAtLevels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessibleLevels");
    openapiFields.add("highestAccessibleLevel");
    openapiFields.add("highestAccessibleLevelDisplayName");
    openapiFields.add("membershipsDuration");
    openapiFields.add("membershipsDurationAtLevels");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MembershipsDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MembershipsDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MembershipsDetails is not found in the empty JSON string", MembershipsDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MembershipsDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MembershipsDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("accessibleLevels") != null && !jsonObj.get("accessibleLevels").isJsonNull() && !jsonObj.get("accessibleLevels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessibleLevels` to be an array in the JSON string but got `%s`", jsonObj.get("accessibleLevels").toString()));
      }
      if ((jsonObj.get("highestAccessibleLevel") != null && !jsonObj.get("highestAccessibleLevel").isJsonNull()) && !jsonObj.get("highestAccessibleLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `highestAccessibleLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("highestAccessibleLevel").toString()));
      }
      if ((jsonObj.get("highestAccessibleLevelDisplayName") != null && !jsonObj.get("highestAccessibleLevelDisplayName").isJsonNull()) && !jsonObj.get("highestAccessibleLevelDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `highestAccessibleLevelDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("highestAccessibleLevelDisplayName").toString()));
      }
      // validate the optional field `membershipsDuration`
      if (jsonObj.get("membershipsDuration") != null && !jsonObj.get("membershipsDuration").isJsonNull()) {
        MembershipsDuration.validateJsonElement(jsonObj.get("membershipsDuration"));
      }
      if (jsonObj.get("membershipsDurationAtLevels") != null && !jsonObj.get("membershipsDurationAtLevels").isJsonNull()) {
        JsonArray jsonArraymembershipsDurationAtLevels = jsonObj.getAsJsonArray("membershipsDurationAtLevels");
        if (jsonArraymembershipsDurationAtLevels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("membershipsDurationAtLevels").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `membershipsDurationAtLevels` to be an array in the JSON string but got `%s`", jsonObj.get("membershipsDurationAtLevels").toString()));
          }

          // validate the optional field `membershipsDurationAtLevels` (array)
          for (int i = 0; i < jsonArraymembershipsDurationAtLevels.size(); i++) {
            MembershipsDurationAtLevel.validateJsonElement(jsonArraymembershipsDurationAtLevels.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MembershipsDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MembershipsDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MembershipsDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MembershipsDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<MembershipsDetails>() {
           @Override
           public void write(JsonWriter out, MembershipsDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MembershipsDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MembershipsDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MembershipsDetails
   * @throws IOException if the JSON string is invalid with respect to MembershipsDetails
   */
  public static MembershipsDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MembershipsDetails.class);
  }

  /**
   * Convert an instance of MembershipsDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

