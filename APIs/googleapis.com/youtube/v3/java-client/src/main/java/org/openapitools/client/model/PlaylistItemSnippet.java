/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ResourceId;
import org.openapitools.client.model.ThumbnailDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Basic details about a playlist, including title, description and thumbnails. Basic details of a YouTube Playlist item provided by the author. Next ID: 15
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PlaylistItemSnippet {
  public static final String SERIALIZED_NAME_CHANNEL_ID = "channelId";
  @SerializedName(SERIALIZED_NAME_CHANNEL_ID)
  private String channelId;

  public static final String SERIALIZED_NAME_CHANNEL_TITLE = "channelTitle";
  @SerializedName(SERIALIZED_NAME_CHANNEL_TITLE)
  private String channelTitle;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_PLAYLIST_ID = "playlistId";
  @SerializedName(SERIALIZED_NAME_PLAYLIST_ID)
  private String playlistId;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private Integer position;

  public static final String SERIALIZED_NAME_PUBLISHED_AT = "publishedAt";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_AT)
  private OffsetDateTime publishedAt;

  public static final String SERIALIZED_NAME_RESOURCE_ID = "resourceId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private ResourceId resourceId;

  public static final String SERIALIZED_NAME_THUMBNAILS = "thumbnails";
  @SerializedName(SERIALIZED_NAME_THUMBNAILS)
  private ThumbnailDetails thumbnails;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_VIDEO_OWNER_CHANNEL_ID = "videoOwnerChannelId";
  @SerializedName(SERIALIZED_NAME_VIDEO_OWNER_CHANNEL_ID)
  private String videoOwnerChannelId;

  public static final String SERIALIZED_NAME_VIDEO_OWNER_CHANNEL_TITLE = "videoOwnerChannelTitle";
  @SerializedName(SERIALIZED_NAME_VIDEO_OWNER_CHANNEL_TITLE)
  private String videoOwnerChannelTitle;

  public PlaylistItemSnippet() {
  }

  public PlaylistItemSnippet channelId(String channelId) {
    this.channelId = channelId;
    return this;
  }

  /**
   * The ID that YouTube uses to uniquely identify the user that added the item to the playlist.
   * @return channelId
   */
  @javax.annotation.Nullable
  public String getChannelId() {
    return channelId;
  }

  public void setChannelId(String channelId) {
    this.channelId = channelId;
  }


  public PlaylistItemSnippet channelTitle(String channelTitle) {
    this.channelTitle = channelTitle;
    return this;
  }

  /**
   * Channel title for the channel that the playlist item belongs to.
   * @return channelTitle
   */
  @javax.annotation.Nullable
  public String getChannelTitle() {
    return channelTitle;
  }

  public void setChannelTitle(String channelTitle) {
    this.channelTitle = channelTitle;
  }


  public PlaylistItemSnippet description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The item&#39;s description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public PlaylistItemSnippet playlistId(String playlistId) {
    this.playlistId = playlistId;
    return this;
  }

  /**
   * The ID that YouTube uses to uniquely identify thGe playlist that the playlist item is in.
   * @return playlistId
   */
  @javax.annotation.Nullable
  public String getPlaylistId() {
    return playlistId;
  }

  public void setPlaylistId(String playlistId) {
    this.playlistId = playlistId;
  }


  public PlaylistItemSnippet position(Integer position) {
    this.position = position;
    return this;
  }

  /**
   * The order in which the item appears in the playlist. The value uses a zero-based index, so the first item has a position of 0, the second item has a position of 1, and so forth.
   * @return position
   */
  @javax.annotation.Nullable
  public Integer getPosition() {
    return position;
  }

  public void setPosition(Integer position) {
    this.position = position;
  }


  public PlaylistItemSnippet publishedAt(OffsetDateTime publishedAt) {
    this.publishedAt = publishedAt;
    return this;
  }

  /**
   * The date and time that the item was added to the playlist.
   * @return publishedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPublishedAt() {
    return publishedAt;
  }

  public void setPublishedAt(OffsetDateTime publishedAt) {
    this.publishedAt = publishedAt;
  }


  public PlaylistItemSnippet resourceId(ResourceId resourceId) {
    this.resourceId = resourceId;
    return this;
  }

  /**
   * Get resourceId
   * @return resourceId
   */
  @javax.annotation.Nullable
  public ResourceId getResourceId() {
    return resourceId;
  }

  public void setResourceId(ResourceId resourceId) {
    this.resourceId = resourceId;
  }


  public PlaylistItemSnippet thumbnails(ThumbnailDetails thumbnails) {
    this.thumbnails = thumbnails;
    return this;
  }

  /**
   * Get thumbnails
   * @return thumbnails
   */
  @javax.annotation.Nullable
  public ThumbnailDetails getThumbnails() {
    return thumbnails;
  }

  public void setThumbnails(ThumbnailDetails thumbnails) {
    this.thumbnails = thumbnails;
  }


  public PlaylistItemSnippet title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The item&#39;s title.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public PlaylistItemSnippet videoOwnerChannelId(String videoOwnerChannelId) {
    this.videoOwnerChannelId = videoOwnerChannelId;
    return this;
  }

  /**
   * Channel id for the channel this video belongs to.
   * @return videoOwnerChannelId
   */
  @javax.annotation.Nullable
  public String getVideoOwnerChannelId() {
    return videoOwnerChannelId;
  }

  public void setVideoOwnerChannelId(String videoOwnerChannelId) {
    this.videoOwnerChannelId = videoOwnerChannelId;
  }


  public PlaylistItemSnippet videoOwnerChannelTitle(String videoOwnerChannelTitle) {
    this.videoOwnerChannelTitle = videoOwnerChannelTitle;
    return this;
  }

  /**
   * Channel title for the channel this video belongs to.
   * @return videoOwnerChannelTitle
   */
  @javax.annotation.Nullable
  public String getVideoOwnerChannelTitle() {
    return videoOwnerChannelTitle;
  }

  public void setVideoOwnerChannelTitle(String videoOwnerChannelTitle) {
    this.videoOwnerChannelTitle = videoOwnerChannelTitle;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlaylistItemSnippet playlistItemSnippet = (PlaylistItemSnippet) o;
    return Objects.equals(this.channelId, playlistItemSnippet.channelId) &&
        Objects.equals(this.channelTitle, playlistItemSnippet.channelTitle) &&
        Objects.equals(this.description, playlistItemSnippet.description) &&
        Objects.equals(this.playlistId, playlistItemSnippet.playlistId) &&
        Objects.equals(this.position, playlistItemSnippet.position) &&
        Objects.equals(this.publishedAt, playlistItemSnippet.publishedAt) &&
        Objects.equals(this.resourceId, playlistItemSnippet.resourceId) &&
        Objects.equals(this.thumbnails, playlistItemSnippet.thumbnails) &&
        Objects.equals(this.title, playlistItemSnippet.title) &&
        Objects.equals(this.videoOwnerChannelId, playlistItemSnippet.videoOwnerChannelId) &&
        Objects.equals(this.videoOwnerChannelTitle, playlistItemSnippet.videoOwnerChannelTitle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channelId, channelTitle, description, playlistId, position, publishedAt, resourceId, thumbnails, title, videoOwnerChannelId, videoOwnerChannelTitle);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlaylistItemSnippet {\n");
    sb.append("    channelId: ").append(toIndentedString(channelId)).append("\n");
    sb.append("    channelTitle: ").append(toIndentedString(channelTitle)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    playlistId: ").append(toIndentedString(playlistId)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    publishedAt: ").append(toIndentedString(publishedAt)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    thumbnails: ").append(toIndentedString(thumbnails)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    videoOwnerChannelId: ").append(toIndentedString(videoOwnerChannelId)).append("\n");
    sb.append("    videoOwnerChannelTitle: ").append(toIndentedString(videoOwnerChannelTitle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("channelId");
    openapiFields.add("channelTitle");
    openapiFields.add("description");
    openapiFields.add("playlistId");
    openapiFields.add("position");
    openapiFields.add("publishedAt");
    openapiFields.add("resourceId");
    openapiFields.add("thumbnails");
    openapiFields.add("title");
    openapiFields.add("videoOwnerChannelId");
    openapiFields.add("videoOwnerChannelTitle");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlaylistItemSnippet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlaylistItemSnippet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlaylistItemSnippet is not found in the empty JSON string", PlaylistItemSnippet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlaylistItemSnippet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlaylistItemSnippet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("channelId") != null && !jsonObj.get("channelId").isJsonNull()) && !jsonObj.get("channelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channelId").toString()));
      }
      if ((jsonObj.get("channelTitle") != null && !jsonObj.get("channelTitle").isJsonNull()) && !jsonObj.get("channelTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channelTitle").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("playlistId") != null && !jsonObj.get("playlistId").isJsonNull()) && !jsonObj.get("playlistId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `playlistId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("playlistId").toString()));
      }
      // validate the optional field `resourceId`
      if (jsonObj.get("resourceId") != null && !jsonObj.get("resourceId").isJsonNull()) {
        ResourceId.validateJsonElement(jsonObj.get("resourceId"));
      }
      // validate the optional field `thumbnails`
      if (jsonObj.get("thumbnails") != null && !jsonObj.get("thumbnails").isJsonNull()) {
        ThumbnailDetails.validateJsonElement(jsonObj.get("thumbnails"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("videoOwnerChannelId") != null && !jsonObj.get("videoOwnerChannelId").isJsonNull()) && !jsonObj.get("videoOwnerChannelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `videoOwnerChannelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("videoOwnerChannelId").toString()));
      }
      if ((jsonObj.get("videoOwnerChannelTitle") != null && !jsonObj.get("videoOwnerChannelTitle").isJsonNull()) && !jsonObj.get("videoOwnerChannelTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `videoOwnerChannelTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("videoOwnerChannelTitle").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlaylistItemSnippet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlaylistItemSnippet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlaylistItemSnippet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlaylistItemSnippet.class));

       return (TypeAdapter<T>) new TypeAdapter<PlaylistItemSnippet>() {
           @Override
           public void write(JsonWriter out, PlaylistItemSnippet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlaylistItemSnippet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlaylistItemSnippet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlaylistItemSnippet
   * @throws IOException if the JSON string is invalid with respect to PlaylistItemSnippet
   */
  public static PlaylistItemSnippet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlaylistItemSnippet.class);
  }

  /**
   * Convert an instance of PlaylistItemSnippet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

