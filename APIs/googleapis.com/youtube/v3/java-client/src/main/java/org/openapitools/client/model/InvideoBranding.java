/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.InvideoPosition;
import org.openapitools.client.model.InvideoTiming;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LINT.IfChange Describes an invideo branding.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InvideoBranding {
  public static final String SERIALIZED_NAME_IMAGE_BYTES = "imageBytes";
  @SerializedName(SERIALIZED_NAME_IMAGE_BYTES)
  private byte[] imageBytes;

  public static final String SERIALIZED_NAME_IMAGE_URL = "imageUrl";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private InvideoPosition position;

  public static final String SERIALIZED_NAME_TARGET_CHANNEL_ID = "targetChannelId";
  @SerializedName(SERIALIZED_NAME_TARGET_CHANNEL_ID)
  private String targetChannelId;

  public static final String SERIALIZED_NAME_TIMING = "timing";
  @SerializedName(SERIALIZED_NAME_TIMING)
  private InvideoTiming timing;

  public InvideoBranding() {
  }

  public InvideoBranding imageBytes(byte[] imageBytes) {
    this.imageBytes = imageBytes;
    return this;
  }

  /**
   * The bytes the uploaded image. Only used in api to youtube communication.
   * @return imageBytes
   */
  @javax.annotation.Nullable
  public byte[] getImageBytes() {
    return imageBytes;
  }

  public void setImageBytes(byte[] imageBytes) {
    this.imageBytes = imageBytes;
  }


  public InvideoBranding imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * The url of the uploaded image. Only used in apiary to api communication.
   * @return imageUrl
   */
  @javax.annotation.Nullable
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public InvideoBranding position(InvideoPosition position) {
    this.position = position;
    return this;
  }

  /**
   * Get position
   * @return position
   */
  @javax.annotation.Nullable
  public InvideoPosition getPosition() {
    return position;
  }

  public void setPosition(InvideoPosition position) {
    this.position = position;
  }


  public InvideoBranding targetChannelId(String targetChannelId) {
    this.targetChannelId = targetChannelId;
    return this;
  }

  /**
   * The channel to which this branding links. If not present it defaults to the current channel.
   * @return targetChannelId
   */
  @javax.annotation.Nullable
  public String getTargetChannelId() {
    return targetChannelId;
  }

  public void setTargetChannelId(String targetChannelId) {
    this.targetChannelId = targetChannelId;
  }


  public InvideoBranding timing(InvideoTiming timing) {
    this.timing = timing;
    return this;
  }

  /**
   * Get timing
   * @return timing
   */
  @javax.annotation.Nullable
  public InvideoTiming getTiming() {
    return timing;
  }

  public void setTiming(InvideoTiming timing) {
    this.timing = timing;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvideoBranding invideoBranding = (InvideoBranding) o;
    return Arrays.equals(this.imageBytes, invideoBranding.imageBytes) &&
        Objects.equals(this.imageUrl, invideoBranding.imageUrl) &&
        Objects.equals(this.position, invideoBranding.position) &&
        Objects.equals(this.targetChannelId, invideoBranding.targetChannelId) &&
        Objects.equals(this.timing, invideoBranding.timing);
  }

  @Override
  public int hashCode() {
    return Objects.hash(Arrays.hashCode(imageBytes), imageUrl, position, targetChannelId, timing);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvideoBranding {\n");
    sb.append("    imageBytes: ").append(toIndentedString(imageBytes)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    targetChannelId: ").append(toIndentedString(targetChannelId)).append("\n");
    sb.append("    timing: ").append(toIndentedString(timing)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("imageBytes");
    openapiFields.add("imageUrl");
    openapiFields.add("position");
    openapiFields.add("targetChannelId");
    openapiFields.add("timing");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InvideoBranding
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InvideoBranding.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InvideoBranding is not found in the empty JSON string", InvideoBranding.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InvideoBranding.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InvideoBranding` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("imageUrl") != null && !jsonObj.get("imageUrl").isJsonNull()) && !jsonObj.get("imageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageUrl").toString()));
      }
      // validate the optional field `position`
      if (jsonObj.get("position") != null && !jsonObj.get("position").isJsonNull()) {
        InvideoPosition.validateJsonElement(jsonObj.get("position"));
      }
      if ((jsonObj.get("targetChannelId") != null && !jsonObj.get("targetChannelId").isJsonNull()) && !jsonObj.get("targetChannelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetChannelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetChannelId").toString()));
      }
      // validate the optional field `timing`
      if (jsonObj.get("timing") != null && !jsonObj.get("timing").isJsonNull()) {
        InvideoTiming.validateJsonElement(jsonObj.get("timing"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InvideoBranding.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InvideoBranding' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InvideoBranding> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InvideoBranding.class));

       return (TypeAdapter<T>) new TypeAdapter<InvideoBranding>() {
           @Override
           public void write(JsonWriter out, InvideoBranding value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InvideoBranding read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InvideoBranding given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InvideoBranding
   * @throws IOException if the JSON string is invalid with respect to InvideoBranding
   */
  public static InvideoBranding fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InvideoBranding.class);
  }

  /**
   * Convert an instance of InvideoBranding to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

