/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.IngestionInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Brief description of the live stream cdn settings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CdnSettings {
  public static final String SERIALIZED_NAME_FORMAT = "format";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private String format;

  /**
   * The frame rate of the inbound video data.
   */
  @JsonAdapter(FrameRateEnum.Adapter.class)
  public enum FrameRateEnum {
    _30FPS("30fps"),
    
    _60FPS("60fps"),
    
    VARIABLE("variable");

    private String value;

    FrameRateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FrameRateEnum fromValue(String value) {
      for (FrameRateEnum b : FrameRateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FrameRateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FrameRateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FrameRateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FrameRateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FrameRateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FRAME_RATE = "frameRate";
  @SerializedName(SERIALIZED_NAME_FRAME_RATE)
  private FrameRateEnum frameRate;

  public static final String SERIALIZED_NAME_INGESTION_INFO = "ingestionInfo";
  @SerializedName(SERIALIZED_NAME_INGESTION_INFO)
  private IngestionInfo ingestionInfo;

  /**
   *  The method or protocol used to transmit the video stream.
   */
  @JsonAdapter(IngestionTypeEnum.Adapter.class)
  public enum IngestionTypeEnum {
    RTMP("rtmp"),
    
    DASH("dash"),
    
    WEBRTC("webrtc"),
    
    HLS("hls");

    private String value;

    IngestionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IngestionTypeEnum fromValue(String value) {
      for (IngestionTypeEnum b : IngestionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IngestionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IngestionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IngestionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IngestionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IngestionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INGESTION_TYPE = "ingestionType";
  @SerializedName(SERIALIZED_NAME_INGESTION_TYPE)
  private IngestionTypeEnum ingestionType;

  /**
   * The resolution of the inbound video data.
   */
  @JsonAdapter(ResolutionEnum.Adapter.class)
  public enum ResolutionEnum {
    _240P("240p"),
    
    _360P("360p"),
    
    _480P("480p"),
    
    _720P("720p"),
    
    _1080P("1080p"),
    
    _1440P("1440p"),
    
    _2160P("2160p"),
    
    VARIABLE("variable");

    private String value;

    ResolutionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResolutionEnum fromValue(String value) {
      for (ResolutionEnum b : ResolutionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResolutionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResolutionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResolutionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResolutionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResolutionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESOLUTION = "resolution";
  @SerializedName(SERIALIZED_NAME_RESOLUTION)
  private ResolutionEnum resolution;

  public CdnSettings() {
  }

  @Deprecated
  public CdnSettings format(String format) {
    this.format = format;
    return this;
  }

  /**
   * The format of the video stream that you are sending to Youtube. 
   * @return format
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getFormat() {
    return format;
  }

  @Deprecated
  public void setFormat(String format) {
    this.format = format;
  }


  public CdnSettings frameRate(FrameRateEnum frameRate) {
    this.frameRate = frameRate;
    return this;
  }

  /**
   * The frame rate of the inbound video data.
   * @return frameRate
   */
  @javax.annotation.Nullable
  public FrameRateEnum getFrameRate() {
    return frameRate;
  }

  public void setFrameRate(FrameRateEnum frameRate) {
    this.frameRate = frameRate;
  }


  public CdnSettings ingestionInfo(IngestionInfo ingestionInfo) {
    this.ingestionInfo = ingestionInfo;
    return this;
  }

  /**
   * Get ingestionInfo
   * @return ingestionInfo
   */
  @javax.annotation.Nullable
  public IngestionInfo getIngestionInfo() {
    return ingestionInfo;
  }

  public void setIngestionInfo(IngestionInfo ingestionInfo) {
    this.ingestionInfo = ingestionInfo;
  }


  public CdnSettings ingestionType(IngestionTypeEnum ingestionType) {
    this.ingestionType = ingestionType;
    return this;
  }

  /**
   *  The method or protocol used to transmit the video stream.
   * @return ingestionType
   */
  @javax.annotation.Nullable
  public IngestionTypeEnum getIngestionType() {
    return ingestionType;
  }

  public void setIngestionType(IngestionTypeEnum ingestionType) {
    this.ingestionType = ingestionType;
  }


  public CdnSettings resolution(ResolutionEnum resolution) {
    this.resolution = resolution;
    return this;
  }

  /**
   * The resolution of the inbound video data.
   * @return resolution
   */
  @javax.annotation.Nullable
  public ResolutionEnum getResolution() {
    return resolution;
  }

  public void setResolution(ResolutionEnum resolution) {
    this.resolution = resolution;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CdnSettings cdnSettings = (CdnSettings) o;
    return Objects.equals(this.format, cdnSettings.format) &&
        Objects.equals(this.frameRate, cdnSettings.frameRate) &&
        Objects.equals(this.ingestionInfo, cdnSettings.ingestionInfo) &&
        Objects.equals(this.ingestionType, cdnSettings.ingestionType) &&
        Objects.equals(this.resolution, cdnSettings.resolution);
  }

  @Override
  public int hashCode() {
    return Objects.hash(format, frameRate, ingestionInfo, ingestionType, resolution);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CdnSettings {\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    frameRate: ").append(toIndentedString(frameRate)).append("\n");
    sb.append("    ingestionInfo: ").append(toIndentedString(ingestionInfo)).append("\n");
    sb.append("    ingestionType: ").append(toIndentedString(ingestionType)).append("\n");
    sb.append("    resolution: ").append(toIndentedString(resolution)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("format");
    openapiFields.add("frameRate");
    openapiFields.add("ingestionInfo");
    openapiFields.add("ingestionType");
    openapiFields.add("resolution");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CdnSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CdnSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CdnSettings is not found in the empty JSON string", CdnSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CdnSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CdnSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) && !jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      if ((jsonObj.get("frameRate") != null && !jsonObj.get("frameRate").isJsonNull()) && !jsonObj.get("frameRate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `frameRate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("frameRate").toString()));
      }
      // validate the optional field `frameRate`
      if (jsonObj.get("frameRate") != null && !jsonObj.get("frameRate").isJsonNull()) {
        FrameRateEnum.validateJsonElement(jsonObj.get("frameRate"));
      }
      // validate the optional field `ingestionInfo`
      if (jsonObj.get("ingestionInfo") != null && !jsonObj.get("ingestionInfo").isJsonNull()) {
        IngestionInfo.validateJsonElement(jsonObj.get("ingestionInfo"));
      }
      if ((jsonObj.get("ingestionType") != null && !jsonObj.get("ingestionType").isJsonNull()) && !jsonObj.get("ingestionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ingestionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ingestionType").toString()));
      }
      // validate the optional field `ingestionType`
      if (jsonObj.get("ingestionType") != null && !jsonObj.get("ingestionType").isJsonNull()) {
        IngestionTypeEnum.validateJsonElement(jsonObj.get("ingestionType"));
      }
      if ((jsonObj.get("resolution") != null && !jsonObj.get("resolution").isJsonNull()) && !jsonObj.get("resolution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resolution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resolution").toString()));
      }
      // validate the optional field `resolution`
      if (jsonObj.get("resolution") != null && !jsonObj.get("resolution").isJsonNull()) {
        ResolutionEnum.validateJsonElement(jsonObj.get("resolution"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CdnSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CdnSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CdnSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CdnSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<CdnSettings>() {
           @Override
           public void write(JsonWriter out, CdnSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CdnSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CdnSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CdnSettings
   * @throws IOException if the JSON string is invalid with respect to CdnSettings
   */
  public static CdnSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CdnSettings.class);
  }

  /**
   * Convert an instance of CdnSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

