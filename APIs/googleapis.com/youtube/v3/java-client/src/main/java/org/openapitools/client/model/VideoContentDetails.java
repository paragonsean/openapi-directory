/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AccessPolicy;
import org.openapitools.client.model.ContentRating;
import org.openapitools.client.model.VideoContentDetailsRegionRestriction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details about the content of a YouTube Video.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VideoContentDetails {
  /**
   * The value of captions indicates whether the video has captions or not.
   */
  @JsonAdapter(CaptionEnum.Adapter.class)
  public enum CaptionEnum {
    TRUE("true"),
    
    FALSE("false");

    private String value;

    CaptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CaptionEnum fromValue(String value) {
      for (CaptionEnum b : CaptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CaptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CaptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CaptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CaptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CaptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CAPTION = "caption";
  @SerializedName(SERIALIZED_NAME_CAPTION)
  private CaptionEnum caption;

  public static final String SERIALIZED_NAME_CONTENT_RATING = "contentRating";
  @SerializedName(SERIALIZED_NAME_CONTENT_RATING)
  private ContentRating contentRating;

  public static final String SERIALIZED_NAME_COUNTRY_RESTRICTION = "countryRestriction";
  @SerializedName(SERIALIZED_NAME_COUNTRY_RESTRICTION)
  private AccessPolicy countryRestriction;

  /**
   * The value of definition indicates whether the video is available in high definition or only in standard definition.
   */
  @JsonAdapter(DefinitionEnum.Adapter.class)
  public enum DefinitionEnum {
    SD("sd"),
    
    HD("hd");

    private String value;

    DefinitionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DefinitionEnum fromValue(String value) {
      for (DefinitionEnum b : DefinitionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DefinitionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DefinitionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DefinitionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DefinitionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DefinitionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEFINITION = "definition";
  @SerializedName(SERIALIZED_NAME_DEFINITION)
  private DefinitionEnum definition;

  public static final String SERIALIZED_NAME_DIMENSION = "dimension";
  @SerializedName(SERIALIZED_NAME_DIMENSION)
  private String dimension;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration;

  public static final String SERIALIZED_NAME_HAS_CUSTOM_THUMBNAIL = "hasCustomThumbnail";
  @SerializedName(SERIALIZED_NAME_HAS_CUSTOM_THUMBNAIL)
  private Boolean hasCustomThumbnail;

  public static final String SERIALIZED_NAME_LICENSED_CONTENT = "licensedContent";
  @SerializedName(SERIALIZED_NAME_LICENSED_CONTENT)
  private Boolean licensedContent;

  /**
   * Specifies the projection format of the video.
   */
  @JsonAdapter(ProjectionEnum.Adapter.class)
  public enum ProjectionEnum {
    RECTANGULAR("rectangular"),
    
    _360("360");

    private String value;

    ProjectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProjectionEnum fromValue(String value) {
      for (ProjectionEnum b : ProjectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProjectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProjectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProjectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProjectionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProjectionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROJECTION = "projection";
  @SerializedName(SERIALIZED_NAME_PROJECTION)
  private ProjectionEnum projection;

  public static final String SERIALIZED_NAME_REGION_RESTRICTION = "regionRestriction";
  @SerializedName(SERIALIZED_NAME_REGION_RESTRICTION)
  private VideoContentDetailsRegionRestriction regionRestriction;

  public VideoContentDetails() {
  }

  public VideoContentDetails caption(CaptionEnum caption) {
    this.caption = caption;
    return this;
  }

  /**
   * The value of captions indicates whether the video has captions or not.
   * @return caption
   */
  @javax.annotation.Nullable
  public CaptionEnum getCaption() {
    return caption;
  }

  public void setCaption(CaptionEnum caption) {
    this.caption = caption;
  }


  public VideoContentDetails contentRating(ContentRating contentRating) {
    this.contentRating = contentRating;
    return this;
  }

  /**
   * Get contentRating
   * @return contentRating
   */
  @javax.annotation.Nullable
  public ContentRating getContentRating() {
    return contentRating;
  }

  public void setContentRating(ContentRating contentRating) {
    this.contentRating = contentRating;
  }


  public VideoContentDetails countryRestriction(AccessPolicy countryRestriction) {
    this.countryRestriction = countryRestriction;
    return this;
  }

  /**
   * Get countryRestriction
   * @return countryRestriction
   */
  @javax.annotation.Nullable
  public AccessPolicy getCountryRestriction() {
    return countryRestriction;
  }

  public void setCountryRestriction(AccessPolicy countryRestriction) {
    this.countryRestriction = countryRestriction;
  }


  public VideoContentDetails definition(DefinitionEnum definition) {
    this.definition = definition;
    return this;
  }

  /**
   * The value of definition indicates whether the video is available in high definition or only in standard definition.
   * @return definition
   */
  @javax.annotation.Nullable
  public DefinitionEnum getDefinition() {
    return definition;
  }

  public void setDefinition(DefinitionEnum definition) {
    this.definition = definition;
  }


  public VideoContentDetails dimension(String dimension) {
    this.dimension = dimension;
    return this;
  }

  /**
   * The value of dimension indicates whether the video is available in 3D or in 2D.
   * @return dimension
   */
  @javax.annotation.Nullable
  public String getDimension() {
    return dimension;
  }

  public void setDimension(String dimension) {
    this.dimension = dimension;
  }


  public VideoContentDetails duration(String duration) {
    this.duration = duration;
    return this;
  }

  /**
   * The length of the video. The tag value is an ISO 8601 duration in the format PT#M#S, in which the letters PT indicate that the value specifies a period of time, and the letters M and S refer to length in minutes and seconds, respectively. The # characters preceding the M and S letters are both integers that specify the number of minutes (or seconds) of the video. For example, a value of PT15M51S indicates that the video is 15 minutes and 51 seconds long.
   * @return duration
   */
  @javax.annotation.Nullable
  public String getDuration() {
    return duration;
  }

  public void setDuration(String duration) {
    this.duration = duration;
  }


  public VideoContentDetails hasCustomThumbnail(Boolean hasCustomThumbnail) {
    this.hasCustomThumbnail = hasCustomThumbnail;
    return this;
  }

  /**
   * Indicates whether the video uploader has provided a custom thumbnail image for the video. This property is only visible to the video uploader.
   * @return hasCustomThumbnail
   */
  @javax.annotation.Nullable
  public Boolean getHasCustomThumbnail() {
    return hasCustomThumbnail;
  }

  public void setHasCustomThumbnail(Boolean hasCustomThumbnail) {
    this.hasCustomThumbnail = hasCustomThumbnail;
  }


  public VideoContentDetails licensedContent(Boolean licensedContent) {
    this.licensedContent = licensedContent;
    return this;
  }

  /**
   * The value of is_license_content indicates whether the video is licensed content.
   * @return licensedContent
   */
  @javax.annotation.Nullable
  public Boolean getLicensedContent() {
    return licensedContent;
  }

  public void setLicensedContent(Boolean licensedContent) {
    this.licensedContent = licensedContent;
  }


  public VideoContentDetails projection(ProjectionEnum projection) {
    this.projection = projection;
    return this;
  }

  /**
   * Specifies the projection format of the video.
   * @return projection
   */
  @javax.annotation.Nullable
  public ProjectionEnum getProjection() {
    return projection;
  }

  public void setProjection(ProjectionEnum projection) {
    this.projection = projection;
  }


  public VideoContentDetails regionRestriction(VideoContentDetailsRegionRestriction regionRestriction) {
    this.regionRestriction = regionRestriction;
    return this;
  }

  /**
   * Get regionRestriction
   * @return regionRestriction
   */
  @javax.annotation.Nullable
  public VideoContentDetailsRegionRestriction getRegionRestriction() {
    return regionRestriction;
  }

  public void setRegionRestriction(VideoContentDetailsRegionRestriction regionRestriction) {
    this.regionRestriction = regionRestriction;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoContentDetails videoContentDetails = (VideoContentDetails) o;
    return Objects.equals(this.caption, videoContentDetails.caption) &&
        Objects.equals(this.contentRating, videoContentDetails.contentRating) &&
        Objects.equals(this.countryRestriction, videoContentDetails.countryRestriction) &&
        Objects.equals(this.definition, videoContentDetails.definition) &&
        Objects.equals(this.dimension, videoContentDetails.dimension) &&
        Objects.equals(this.duration, videoContentDetails.duration) &&
        Objects.equals(this.hasCustomThumbnail, videoContentDetails.hasCustomThumbnail) &&
        Objects.equals(this.licensedContent, videoContentDetails.licensedContent) &&
        Objects.equals(this.projection, videoContentDetails.projection) &&
        Objects.equals(this.regionRestriction, videoContentDetails.regionRestriction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(caption, contentRating, countryRestriction, definition, dimension, duration, hasCustomThumbnail, licensedContent, projection, regionRestriction);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoContentDetails {\n");
    sb.append("    caption: ").append(toIndentedString(caption)).append("\n");
    sb.append("    contentRating: ").append(toIndentedString(contentRating)).append("\n");
    sb.append("    countryRestriction: ").append(toIndentedString(countryRestriction)).append("\n");
    sb.append("    definition: ").append(toIndentedString(definition)).append("\n");
    sb.append("    dimension: ").append(toIndentedString(dimension)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    hasCustomThumbnail: ").append(toIndentedString(hasCustomThumbnail)).append("\n");
    sb.append("    licensedContent: ").append(toIndentedString(licensedContent)).append("\n");
    sb.append("    projection: ").append(toIndentedString(projection)).append("\n");
    sb.append("    regionRestriction: ").append(toIndentedString(regionRestriction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("caption");
    openapiFields.add("contentRating");
    openapiFields.add("countryRestriction");
    openapiFields.add("definition");
    openapiFields.add("dimension");
    openapiFields.add("duration");
    openapiFields.add("hasCustomThumbnail");
    openapiFields.add("licensedContent");
    openapiFields.add("projection");
    openapiFields.add("regionRestriction");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoContentDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoContentDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoContentDetails is not found in the empty JSON string", VideoContentDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoContentDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoContentDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("caption") != null && !jsonObj.get("caption").isJsonNull()) && !jsonObj.get("caption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caption").toString()));
      }
      // validate the optional field `caption`
      if (jsonObj.get("caption") != null && !jsonObj.get("caption").isJsonNull()) {
        CaptionEnum.validateJsonElement(jsonObj.get("caption"));
      }
      // validate the optional field `contentRating`
      if (jsonObj.get("contentRating") != null && !jsonObj.get("contentRating").isJsonNull()) {
        ContentRating.validateJsonElement(jsonObj.get("contentRating"));
      }
      // validate the optional field `countryRestriction`
      if (jsonObj.get("countryRestriction") != null && !jsonObj.get("countryRestriction").isJsonNull()) {
        AccessPolicy.validateJsonElement(jsonObj.get("countryRestriction"));
      }
      if ((jsonObj.get("definition") != null && !jsonObj.get("definition").isJsonNull()) && !jsonObj.get("definition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `definition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("definition").toString()));
      }
      // validate the optional field `definition`
      if (jsonObj.get("definition") != null && !jsonObj.get("definition").isJsonNull()) {
        DefinitionEnum.validateJsonElement(jsonObj.get("definition"));
      }
      if ((jsonObj.get("dimension") != null && !jsonObj.get("dimension").isJsonNull()) && !jsonObj.get("dimension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dimension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dimension").toString()));
      }
      if ((jsonObj.get("duration") != null && !jsonObj.get("duration").isJsonNull()) && !jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
      if ((jsonObj.get("projection") != null && !jsonObj.get("projection").isJsonNull()) && !jsonObj.get("projection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projection").toString()));
      }
      // validate the optional field `projection`
      if (jsonObj.get("projection") != null && !jsonObj.get("projection").isJsonNull()) {
        ProjectionEnum.validateJsonElement(jsonObj.get("projection"));
      }
      // validate the optional field `regionRestriction`
      if (jsonObj.get("regionRestriction") != null && !jsonObj.get("regionRestriction").isJsonNull()) {
        VideoContentDetailsRegionRestriction.validateJsonElement(jsonObj.get("regionRestriction"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoContentDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoContentDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoContentDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoContentDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoContentDetails>() {
           @Override
           public void write(JsonWriter out, VideoContentDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoContentDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoContentDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoContentDetails
   * @throws IOException if the JSON string is invalid with respect to VideoContentDetails
   */
  public static VideoContentDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoContentDetails.class);
  }

  /**
   * Convert an instance of VideoContentDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

