/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Player to be used for a video playback.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VideoPlayer {
  public static final String SERIALIZED_NAME_EMBED_HEIGHT = "embedHeight";
  @SerializedName(SERIALIZED_NAME_EMBED_HEIGHT)
  private String embedHeight;

  public static final String SERIALIZED_NAME_EMBED_HTML = "embedHtml";
  @SerializedName(SERIALIZED_NAME_EMBED_HTML)
  private String embedHtml;

  public static final String SERIALIZED_NAME_EMBED_WIDTH = "embedWidth";
  @SerializedName(SERIALIZED_NAME_EMBED_WIDTH)
  private String embedWidth;

  public VideoPlayer() {
  }

  public VideoPlayer embedHeight(String embedHeight) {
    this.embedHeight = embedHeight;
    return this;
  }

  /**
   * Get embedHeight
   * @return embedHeight
   */
  @javax.annotation.Nullable
  public String getEmbedHeight() {
    return embedHeight;
  }

  public void setEmbedHeight(String embedHeight) {
    this.embedHeight = embedHeight;
  }


  public VideoPlayer embedHtml(String embedHtml) {
    this.embedHtml = embedHtml;
    return this;
  }

  /**
   * An &lt;iframe&gt; tag that embeds a player that will play the video.
   * @return embedHtml
   */
  @javax.annotation.Nullable
  public String getEmbedHtml() {
    return embedHtml;
  }

  public void setEmbedHtml(String embedHtml) {
    this.embedHtml = embedHtml;
  }


  public VideoPlayer embedWidth(String embedWidth) {
    this.embedWidth = embedWidth;
    return this;
  }

  /**
   * The embed width
   * @return embedWidth
   */
  @javax.annotation.Nullable
  public String getEmbedWidth() {
    return embedWidth;
  }

  public void setEmbedWidth(String embedWidth) {
    this.embedWidth = embedWidth;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoPlayer videoPlayer = (VideoPlayer) o;
    return Objects.equals(this.embedHeight, videoPlayer.embedHeight) &&
        Objects.equals(this.embedHtml, videoPlayer.embedHtml) &&
        Objects.equals(this.embedWidth, videoPlayer.embedWidth);
  }

  @Override
  public int hashCode() {
    return Objects.hash(embedHeight, embedHtml, embedWidth);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoPlayer {\n");
    sb.append("    embedHeight: ").append(toIndentedString(embedHeight)).append("\n");
    sb.append("    embedHtml: ").append(toIndentedString(embedHtml)).append("\n");
    sb.append("    embedWidth: ").append(toIndentedString(embedWidth)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("embedHeight");
    openapiFields.add("embedHtml");
    openapiFields.add("embedWidth");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoPlayer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoPlayer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoPlayer is not found in the empty JSON string", VideoPlayer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoPlayer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoPlayer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("embedHeight") != null && !jsonObj.get("embedHeight").isJsonNull()) && !jsonObj.get("embedHeight").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `embedHeight` to be a primitive type in the JSON string but got `%s`", jsonObj.get("embedHeight").toString()));
      }
      if ((jsonObj.get("embedHtml") != null && !jsonObj.get("embedHtml").isJsonNull()) && !jsonObj.get("embedHtml").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `embedHtml` to be a primitive type in the JSON string but got `%s`", jsonObj.get("embedHtml").toString()));
      }
      if ((jsonObj.get("embedWidth") != null && !jsonObj.get("embedWidth").isJsonNull()) && !jsonObj.get("embedWidth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `embedWidth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("embedWidth").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoPlayer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoPlayer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoPlayer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoPlayer.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoPlayer>() {
           @Override
           public void write(JsonWriter out, VideoPlayer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoPlayer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoPlayer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoPlayer
   * @throws IOException if the JSON string is invalid with respect to VideoPlayer
   */
  public static VideoPlayer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoPlayer.class);
  }

  /**
   * Convert an instance of VideoPlayer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

