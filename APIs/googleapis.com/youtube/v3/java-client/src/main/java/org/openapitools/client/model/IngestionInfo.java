/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes information necessary for ingesting an RTMP, HTTP, or SRT stream.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IngestionInfo {
  public static final String SERIALIZED_NAME_BACKUP_INGESTION_ADDRESS = "backupIngestionAddress";
  @SerializedName(SERIALIZED_NAME_BACKUP_INGESTION_ADDRESS)
  private String backupIngestionAddress;

  public static final String SERIALIZED_NAME_INGESTION_ADDRESS = "ingestionAddress";
  @SerializedName(SERIALIZED_NAME_INGESTION_ADDRESS)
  private String ingestionAddress;

  public static final String SERIALIZED_NAME_RTMPS_BACKUP_INGESTION_ADDRESS = "rtmpsBackupIngestionAddress";
  @SerializedName(SERIALIZED_NAME_RTMPS_BACKUP_INGESTION_ADDRESS)
  private String rtmpsBackupIngestionAddress;

  public static final String SERIALIZED_NAME_RTMPS_INGESTION_ADDRESS = "rtmpsIngestionAddress";
  @SerializedName(SERIALIZED_NAME_RTMPS_INGESTION_ADDRESS)
  private String rtmpsIngestionAddress;

  public static final String SERIALIZED_NAME_STREAM_NAME = "streamName";
  @SerializedName(SERIALIZED_NAME_STREAM_NAME)
  private String streamName;

  public IngestionInfo() {
  }

  public IngestionInfo backupIngestionAddress(String backupIngestionAddress) {
    this.backupIngestionAddress = backupIngestionAddress;
    return this;
  }

  /**
   * The backup ingestion URL that you should use to stream video to YouTube. You have the option of simultaneously streaming the content that you are sending to the ingestionAddress to this URL.
   * @return backupIngestionAddress
   */
  @javax.annotation.Nullable
  public String getBackupIngestionAddress() {
    return backupIngestionAddress;
  }

  public void setBackupIngestionAddress(String backupIngestionAddress) {
    this.backupIngestionAddress = backupIngestionAddress;
  }


  public IngestionInfo ingestionAddress(String ingestionAddress) {
    this.ingestionAddress = ingestionAddress;
    return this;
  }

  /**
   * The primary ingestion URL that you should use to stream video to YouTube. You must stream video to this URL. Depending on which application or tool you use to encode your video stream, you may need to enter the stream URL and stream name separately or you may need to concatenate them in the following format: *STREAM_URL/STREAM_NAME* 
   * @return ingestionAddress
   */
  @javax.annotation.Nullable
  public String getIngestionAddress() {
    return ingestionAddress;
  }

  public void setIngestionAddress(String ingestionAddress) {
    this.ingestionAddress = ingestionAddress;
  }


  public IngestionInfo rtmpsBackupIngestionAddress(String rtmpsBackupIngestionAddress) {
    this.rtmpsBackupIngestionAddress = rtmpsBackupIngestionAddress;
    return this;
  }

  /**
   * This ingestion url may be used instead of backupIngestionAddress in order to stream via RTMPS. Not applicable to non-RTMP streams.
   * @return rtmpsBackupIngestionAddress
   */
  @javax.annotation.Nullable
  public String getRtmpsBackupIngestionAddress() {
    return rtmpsBackupIngestionAddress;
  }

  public void setRtmpsBackupIngestionAddress(String rtmpsBackupIngestionAddress) {
    this.rtmpsBackupIngestionAddress = rtmpsBackupIngestionAddress;
  }


  public IngestionInfo rtmpsIngestionAddress(String rtmpsIngestionAddress) {
    this.rtmpsIngestionAddress = rtmpsIngestionAddress;
    return this;
  }

  /**
   * This ingestion url may be used instead of ingestionAddress in order to stream via RTMPS. Not applicable to non-RTMP streams.
   * @return rtmpsIngestionAddress
   */
  @javax.annotation.Nullable
  public String getRtmpsIngestionAddress() {
    return rtmpsIngestionAddress;
  }

  public void setRtmpsIngestionAddress(String rtmpsIngestionAddress) {
    this.rtmpsIngestionAddress = rtmpsIngestionAddress;
  }


  public IngestionInfo streamName(String streamName) {
    this.streamName = streamName;
    return this;
  }

  /**
   * The stream name that YouTube assigns to the video stream.
   * @return streamName
   */
  @javax.annotation.Nullable
  public String getStreamName() {
    return streamName;
  }

  public void setStreamName(String streamName) {
    this.streamName = streamName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IngestionInfo ingestionInfo = (IngestionInfo) o;
    return Objects.equals(this.backupIngestionAddress, ingestionInfo.backupIngestionAddress) &&
        Objects.equals(this.ingestionAddress, ingestionInfo.ingestionAddress) &&
        Objects.equals(this.rtmpsBackupIngestionAddress, ingestionInfo.rtmpsBackupIngestionAddress) &&
        Objects.equals(this.rtmpsIngestionAddress, ingestionInfo.rtmpsIngestionAddress) &&
        Objects.equals(this.streamName, ingestionInfo.streamName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupIngestionAddress, ingestionAddress, rtmpsBackupIngestionAddress, rtmpsIngestionAddress, streamName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IngestionInfo {\n");
    sb.append("    backupIngestionAddress: ").append(toIndentedString(backupIngestionAddress)).append("\n");
    sb.append("    ingestionAddress: ").append(toIndentedString(ingestionAddress)).append("\n");
    sb.append("    rtmpsBackupIngestionAddress: ").append(toIndentedString(rtmpsBackupIngestionAddress)).append("\n");
    sb.append("    rtmpsIngestionAddress: ").append(toIndentedString(rtmpsIngestionAddress)).append("\n");
    sb.append("    streamName: ").append(toIndentedString(streamName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backupIngestionAddress");
    openapiFields.add("ingestionAddress");
    openapiFields.add("rtmpsBackupIngestionAddress");
    openapiFields.add("rtmpsIngestionAddress");
    openapiFields.add("streamName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IngestionInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IngestionInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IngestionInfo is not found in the empty JSON string", IngestionInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IngestionInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IngestionInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("backupIngestionAddress") != null && !jsonObj.get("backupIngestionAddress").isJsonNull()) && !jsonObj.get("backupIngestionAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backupIngestionAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backupIngestionAddress").toString()));
      }
      if ((jsonObj.get("ingestionAddress") != null && !jsonObj.get("ingestionAddress").isJsonNull()) && !jsonObj.get("ingestionAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ingestionAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ingestionAddress").toString()));
      }
      if ((jsonObj.get("rtmpsBackupIngestionAddress") != null && !jsonObj.get("rtmpsBackupIngestionAddress").isJsonNull()) && !jsonObj.get("rtmpsBackupIngestionAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rtmpsBackupIngestionAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rtmpsBackupIngestionAddress").toString()));
      }
      if ((jsonObj.get("rtmpsIngestionAddress") != null && !jsonObj.get("rtmpsIngestionAddress").isJsonNull()) && !jsonObj.get("rtmpsIngestionAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rtmpsIngestionAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rtmpsIngestionAddress").toString()));
      }
      if ((jsonObj.get("streamName") != null && !jsonObj.get("streamName").isJsonNull()) && !jsonObj.get("streamName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streamName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streamName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IngestionInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IngestionInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IngestionInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IngestionInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<IngestionInfo>() {
           @Override
           public void write(JsonWriter out, IngestionInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IngestionInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IngestionInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IngestionInfo
   * @throws IOException if the JSON string is invalid with respect to IngestionInfo
   */
  public static IngestionInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IngestionInfo.class);
  }

  /**
   * Convert an instance of IngestionInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

