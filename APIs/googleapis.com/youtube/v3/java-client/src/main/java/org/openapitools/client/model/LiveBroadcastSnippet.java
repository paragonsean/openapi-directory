/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ThumbnailDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Basic broadcast information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LiveBroadcastSnippet {
  public static final String SERIALIZED_NAME_ACTUAL_END_TIME = "actualEndTime";
  @SerializedName(SERIALIZED_NAME_ACTUAL_END_TIME)
  private OffsetDateTime actualEndTime;

  public static final String SERIALIZED_NAME_ACTUAL_START_TIME = "actualStartTime";
  @SerializedName(SERIALIZED_NAME_ACTUAL_START_TIME)
  private OffsetDateTime actualStartTime;

  public static final String SERIALIZED_NAME_CHANNEL_ID = "channelId";
  @SerializedName(SERIALIZED_NAME_CHANNEL_ID)
  private String channelId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_IS_DEFAULT_BROADCAST = "isDefaultBroadcast";
  @SerializedName(SERIALIZED_NAME_IS_DEFAULT_BROADCAST)
  private Boolean isDefaultBroadcast;

  public static final String SERIALIZED_NAME_LIVE_CHAT_ID = "liveChatId";
  @SerializedName(SERIALIZED_NAME_LIVE_CHAT_ID)
  private String liveChatId;

  public static final String SERIALIZED_NAME_PUBLISHED_AT = "publishedAt";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_AT)
  private OffsetDateTime publishedAt;

  public static final String SERIALIZED_NAME_SCHEDULED_END_TIME = "scheduledEndTime";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_END_TIME)
  private OffsetDateTime scheduledEndTime;

  public static final String SERIALIZED_NAME_SCHEDULED_START_TIME = "scheduledStartTime";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_START_TIME)
  private OffsetDateTime scheduledStartTime;

  public static final String SERIALIZED_NAME_THUMBNAILS = "thumbnails";
  @SerializedName(SERIALIZED_NAME_THUMBNAILS)
  private ThumbnailDetails thumbnails;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public LiveBroadcastSnippet() {
  }

  public LiveBroadcastSnippet actualEndTime(OffsetDateTime actualEndTime) {
    this.actualEndTime = actualEndTime;
    return this;
  }

  /**
   * The date and time that the broadcast actually ended. This information is only available once the broadcast&#39;s state is complete.
   * @return actualEndTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getActualEndTime() {
    return actualEndTime;
  }

  public void setActualEndTime(OffsetDateTime actualEndTime) {
    this.actualEndTime = actualEndTime;
  }


  public LiveBroadcastSnippet actualStartTime(OffsetDateTime actualStartTime) {
    this.actualStartTime = actualStartTime;
    return this;
  }

  /**
   * The date and time that the broadcast actually started. This information is only available once the broadcast&#39;s state is live.
   * @return actualStartTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getActualStartTime() {
    return actualStartTime;
  }

  public void setActualStartTime(OffsetDateTime actualStartTime) {
    this.actualStartTime = actualStartTime;
  }


  public LiveBroadcastSnippet channelId(String channelId) {
    this.channelId = channelId;
    return this;
  }

  /**
   * The ID that YouTube uses to uniquely identify the channel that is publishing the broadcast.
   * @return channelId
   */
  @javax.annotation.Nullable
  public String getChannelId() {
    return channelId;
  }

  public void setChannelId(String channelId) {
    this.channelId = channelId;
  }


  public LiveBroadcastSnippet description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The broadcast&#39;s description. As with the title, you can set this field by modifying the broadcast resource or by setting the description field of the corresponding video resource.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public LiveBroadcastSnippet isDefaultBroadcast(Boolean isDefaultBroadcast) {
    this.isDefaultBroadcast = isDefaultBroadcast;
    return this;
  }

  /**
   * Indicates whether this broadcast is the default broadcast. Internal only.
   * @return isDefaultBroadcast
   */
  @javax.annotation.Nullable
  public Boolean getIsDefaultBroadcast() {
    return isDefaultBroadcast;
  }

  public void setIsDefaultBroadcast(Boolean isDefaultBroadcast) {
    this.isDefaultBroadcast = isDefaultBroadcast;
  }


  public LiveBroadcastSnippet liveChatId(String liveChatId) {
    this.liveChatId = liveChatId;
    return this;
  }

  /**
   * The id of the live chat for this broadcast.
   * @return liveChatId
   */
  @javax.annotation.Nullable
  public String getLiveChatId() {
    return liveChatId;
  }

  public void setLiveChatId(String liveChatId) {
    this.liveChatId = liveChatId;
  }


  public LiveBroadcastSnippet publishedAt(OffsetDateTime publishedAt) {
    this.publishedAt = publishedAt;
    return this;
  }

  /**
   * The date and time that the broadcast was added to YouTube&#39;s live broadcast schedule.
   * @return publishedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPublishedAt() {
    return publishedAt;
  }

  public void setPublishedAt(OffsetDateTime publishedAt) {
    this.publishedAt = publishedAt;
  }


  public LiveBroadcastSnippet scheduledEndTime(OffsetDateTime scheduledEndTime) {
    this.scheduledEndTime = scheduledEndTime;
    return this;
  }

  /**
   * The date and time that the broadcast is scheduled to end.
   * @return scheduledEndTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getScheduledEndTime() {
    return scheduledEndTime;
  }

  public void setScheduledEndTime(OffsetDateTime scheduledEndTime) {
    this.scheduledEndTime = scheduledEndTime;
  }


  public LiveBroadcastSnippet scheduledStartTime(OffsetDateTime scheduledStartTime) {
    this.scheduledStartTime = scheduledStartTime;
    return this;
  }

  /**
   * The date and time that the broadcast is scheduled to start.
   * @return scheduledStartTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getScheduledStartTime() {
    return scheduledStartTime;
  }

  public void setScheduledStartTime(OffsetDateTime scheduledStartTime) {
    this.scheduledStartTime = scheduledStartTime;
  }


  public LiveBroadcastSnippet thumbnails(ThumbnailDetails thumbnails) {
    this.thumbnails = thumbnails;
    return this;
  }

  /**
   * Get thumbnails
   * @return thumbnails
   */
  @javax.annotation.Nullable
  public ThumbnailDetails getThumbnails() {
    return thumbnails;
  }

  public void setThumbnails(ThumbnailDetails thumbnails) {
    this.thumbnails = thumbnails;
  }


  public LiveBroadcastSnippet title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The broadcast&#39;s title. Note that the broadcast represents exactly one YouTube video. You can set this field by modifying the broadcast resource or by setting the title field of the corresponding video resource.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LiveBroadcastSnippet liveBroadcastSnippet = (LiveBroadcastSnippet) o;
    return Objects.equals(this.actualEndTime, liveBroadcastSnippet.actualEndTime) &&
        Objects.equals(this.actualStartTime, liveBroadcastSnippet.actualStartTime) &&
        Objects.equals(this.channelId, liveBroadcastSnippet.channelId) &&
        Objects.equals(this.description, liveBroadcastSnippet.description) &&
        Objects.equals(this.isDefaultBroadcast, liveBroadcastSnippet.isDefaultBroadcast) &&
        Objects.equals(this.liveChatId, liveBroadcastSnippet.liveChatId) &&
        Objects.equals(this.publishedAt, liveBroadcastSnippet.publishedAt) &&
        Objects.equals(this.scheduledEndTime, liveBroadcastSnippet.scheduledEndTime) &&
        Objects.equals(this.scheduledStartTime, liveBroadcastSnippet.scheduledStartTime) &&
        Objects.equals(this.thumbnails, liveBroadcastSnippet.thumbnails) &&
        Objects.equals(this.title, liveBroadcastSnippet.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actualEndTime, actualStartTime, channelId, description, isDefaultBroadcast, liveChatId, publishedAt, scheduledEndTime, scheduledStartTime, thumbnails, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LiveBroadcastSnippet {\n");
    sb.append("    actualEndTime: ").append(toIndentedString(actualEndTime)).append("\n");
    sb.append("    actualStartTime: ").append(toIndentedString(actualStartTime)).append("\n");
    sb.append("    channelId: ").append(toIndentedString(channelId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    isDefaultBroadcast: ").append(toIndentedString(isDefaultBroadcast)).append("\n");
    sb.append("    liveChatId: ").append(toIndentedString(liveChatId)).append("\n");
    sb.append("    publishedAt: ").append(toIndentedString(publishedAt)).append("\n");
    sb.append("    scheduledEndTime: ").append(toIndentedString(scheduledEndTime)).append("\n");
    sb.append("    scheduledStartTime: ").append(toIndentedString(scheduledStartTime)).append("\n");
    sb.append("    thumbnails: ").append(toIndentedString(thumbnails)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actualEndTime");
    openapiFields.add("actualStartTime");
    openapiFields.add("channelId");
    openapiFields.add("description");
    openapiFields.add("isDefaultBroadcast");
    openapiFields.add("liveChatId");
    openapiFields.add("publishedAt");
    openapiFields.add("scheduledEndTime");
    openapiFields.add("scheduledStartTime");
    openapiFields.add("thumbnails");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LiveBroadcastSnippet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LiveBroadcastSnippet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LiveBroadcastSnippet is not found in the empty JSON string", LiveBroadcastSnippet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LiveBroadcastSnippet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LiveBroadcastSnippet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("channelId") != null && !jsonObj.get("channelId").isJsonNull()) && !jsonObj.get("channelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channelId").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("liveChatId") != null && !jsonObj.get("liveChatId").isJsonNull()) && !jsonObj.get("liveChatId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `liveChatId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("liveChatId").toString()));
      }
      // validate the optional field `thumbnails`
      if (jsonObj.get("thumbnails") != null && !jsonObj.get("thumbnails").isJsonNull()) {
        ThumbnailDetails.validateJsonElement(jsonObj.get("thumbnails"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LiveBroadcastSnippet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LiveBroadcastSnippet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LiveBroadcastSnippet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LiveBroadcastSnippet.class));

       return (TypeAdapter<T>) new TypeAdapter<LiveBroadcastSnippet>() {
           @Override
           public void write(JsonWriter out, LiveBroadcastSnippet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LiveBroadcastSnippet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LiveBroadcastSnippet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LiveBroadcastSnippet
   * @throws IOException if the JSON string is invalid with respect to LiveBroadcastSnippet
   */
  public static LiveBroadcastSnippet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LiveBroadcastSnippet.class);
  }

  /**
   * Convert an instance of LiveBroadcastSnippet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

