/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details about a resource which is being promoted.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ActivityContentDetailsPromotedItem {
  public static final String SERIALIZED_NAME_AD_TAG = "adTag";
  @SerializedName(SERIALIZED_NAME_AD_TAG)
  private String adTag;

  public static final String SERIALIZED_NAME_CLICK_TRACKING_URL = "clickTrackingUrl";
  @SerializedName(SERIALIZED_NAME_CLICK_TRACKING_URL)
  private String clickTrackingUrl;

  public static final String SERIALIZED_NAME_CREATIVE_VIEW_URL = "creativeViewUrl";
  @SerializedName(SERIALIZED_NAME_CREATIVE_VIEW_URL)
  private String creativeViewUrl;

  /**
   * The type of call-to-action, a message to the user indicating action that can be taken.
   */
  @JsonAdapter(CtaTypeEnum.Adapter.class)
  public enum CtaTypeEnum {
    CTA_TYPE_UNSPECIFIED("ctaTypeUnspecified"),
    
    VISIT_ADVERTISER_SITE("visitAdvertiserSite");

    private String value;

    CtaTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CtaTypeEnum fromValue(String value) {
      for (CtaTypeEnum b : CtaTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CtaTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CtaTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CtaTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CtaTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CtaTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CTA_TYPE = "ctaType";
  @SerializedName(SERIALIZED_NAME_CTA_TYPE)
  private CtaTypeEnum ctaType;

  public static final String SERIALIZED_NAME_CUSTOM_CTA_BUTTON_TEXT = "customCtaButtonText";
  @SerializedName(SERIALIZED_NAME_CUSTOM_CTA_BUTTON_TEXT)
  private String customCtaButtonText;

  public static final String SERIALIZED_NAME_DESCRIPTION_TEXT = "descriptionText";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION_TEXT)
  private String descriptionText;

  public static final String SERIALIZED_NAME_DESTINATION_URL = "destinationUrl";
  @SerializedName(SERIALIZED_NAME_DESTINATION_URL)
  private String destinationUrl;

  public static final String SERIALIZED_NAME_FORECASTING_URL = "forecastingUrl";
  @SerializedName(SERIALIZED_NAME_FORECASTING_URL)
  private List<String> forecastingUrl = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMPRESSION_URL = "impressionUrl";
  @SerializedName(SERIALIZED_NAME_IMPRESSION_URL)
  private List<String> impressionUrl = new ArrayList<>();

  public static final String SERIALIZED_NAME_VIDEO_ID = "videoId";
  @SerializedName(SERIALIZED_NAME_VIDEO_ID)
  private String videoId;

  public ActivityContentDetailsPromotedItem() {
  }

  public ActivityContentDetailsPromotedItem adTag(String adTag) {
    this.adTag = adTag;
    return this;
  }

  /**
   * The URL the client should fetch to request a promoted item.
   * @return adTag
   */
  @javax.annotation.Nullable
  public String getAdTag() {
    return adTag;
  }

  public void setAdTag(String adTag) {
    this.adTag = adTag;
  }


  public ActivityContentDetailsPromotedItem clickTrackingUrl(String clickTrackingUrl) {
    this.clickTrackingUrl = clickTrackingUrl;
    return this;
  }

  /**
   * The URL the client should ping to indicate that the user clicked through on this promoted item.
   * @return clickTrackingUrl
   */
  @javax.annotation.Nullable
  public String getClickTrackingUrl() {
    return clickTrackingUrl;
  }

  public void setClickTrackingUrl(String clickTrackingUrl) {
    this.clickTrackingUrl = clickTrackingUrl;
  }


  public ActivityContentDetailsPromotedItem creativeViewUrl(String creativeViewUrl) {
    this.creativeViewUrl = creativeViewUrl;
    return this;
  }

  /**
   * The URL the client should ping to indicate that the user was shown this promoted item.
   * @return creativeViewUrl
   */
  @javax.annotation.Nullable
  public String getCreativeViewUrl() {
    return creativeViewUrl;
  }

  public void setCreativeViewUrl(String creativeViewUrl) {
    this.creativeViewUrl = creativeViewUrl;
  }


  public ActivityContentDetailsPromotedItem ctaType(CtaTypeEnum ctaType) {
    this.ctaType = ctaType;
    return this;
  }

  /**
   * The type of call-to-action, a message to the user indicating action that can be taken.
   * @return ctaType
   */
  @javax.annotation.Nullable
  public CtaTypeEnum getCtaType() {
    return ctaType;
  }

  public void setCtaType(CtaTypeEnum ctaType) {
    this.ctaType = ctaType;
  }


  public ActivityContentDetailsPromotedItem customCtaButtonText(String customCtaButtonText) {
    this.customCtaButtonText = customCtaButtonText;
    return this;
  }

  /**
   * The custom call-to-action button text. If specified, it will override the default button text for the cta_type.
   * @return customCtaButtonText
   */
  @javax.annotation.Nullable
  public String getCustomCtaButtonText() {
    return customCtaButtonText;
  }

  public void setCustomCtaButtonText(String customCtaButtonText) {
    this.customCtaButtonText = customCtaButtonText;
  }


  public ActivityContentDetailsPromotedItem descriptionText(String descriptionText) {
    this.descriptionText = descriptionText;
    return this;
  }

  /**
   * The text description to accompany the promoted item.
   * @return descriptionText
   */
  @javax.annotation.Nullable
  public String getDescriptionText() {
    return descriptionText;
  }

  public void setDescriptionText(String descriptionText) {
    this.descriptionText = descriptionText;
  }


  public ActivityContentDetailsPromotedItem destinationUrl(String destinationUrl) {
    this.destinationUrl = destinationUrl;
    return this;
  }

  /**
   * The URL the client should direct the user to, if the user chooses to visit the advertiser&#39;s website.
   * @return destinationUrl
   */
  @javax.annotation.Nullable
  public String getDestinationUrl() {
    return destinationUrl;
  }

  public void setDestinationUrl(String destinationUrl) {
    this.destinationUrl = destinationUrl;
  }


  public ActivityContentDetailsPromotedItem forecastingUrl(List<String> forecastingUrl) {
    this.forecastingUrl = forecastingUrl;
    return this;
  }

  public ActivityContentDetailsPromotedItem addForecastingUrlItem(String forecastingUrlItem) {
    if (this.forecastingUrl == null) {
      this.forecastingUrl = new ArrayList<>();
    }
    this.forecastingUrl.add(forecastingUrlItem);
    return this;
  }

  /**
   * The list of forecasting URLs. The client should ping all of these URLs when a promoted item is not available, to indicate that a promoted item could have been shown.
   * @return forecastingUrl
   */
  @javax.annotation.Nullable
  public List<String> getForecastingUrl() {
    return forecastingUrl;
  }

  public void setForecastingUrl(List<String> forecastingUrl) {
    this.forecastingUrl = forecastingUrl;
  }


  public ActivityContentDetailsPromotedItem impressionUrl(List<String> impressionUrl) {
    this.impressionUrl = impressionUrl;
    return this;
  }

  public ActivityContentDetailsPromotedItem addImpressionUrlItem(String impressionUrlItem) {
    if (this.impressionUrl == null) {
      this.impressionUrl = new ArrayList<>();
    }
    this.impressionUrl.add(impressionUrlItem);
    return this;
  }

  /**
   * The list of impression URLs. The client should ping all of these URLs to indicate that the user was shown this promoted item.
   * @return impressionUrl
   */
  @javax.annotation.Nullable
  public List<String> getImpressionUrl() {
    return impressionUrl;
  }

  public void setImpressionUrl(List<String> impressionUrl) {
    this.impressionUrl = impressionUrl;
  }


  public ActivityContentDetailsPromotedItem videoId(String videoId) {
    this.videoId = videoId;
    return this;
  }

  /**
   * The ID that YouTube uses to uniquely identify the promoted video.
   * @return videoId
   */
  @javax.annotation.Nullable
  public String getVideoId() {
    return videoId;
  }

  public void setVideoId(String videoId) {
    this.videoId = videoId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActivityContentDetailsPromotedItem activityContentDetailsPromotedItem = (ActivityContentDetailsPromotedItem) o;
    return Objects.equals(this.adTag, activityContentDetailsPromotedItem.adTag) &&
        Objects.equals(this.clickTrackingUrl, activityContentDetailsPromotedItem.clickTrackingUrl) &&
        Objects.equals(this.creativeViewUrl, activityContentDetailsPromotedItem.creativeViewUrl) &&
        Objects.equals(this.ctaType, activityContentDetailsPromotedItem.ctaType) &&
        Objects.equals(this.customCtaButtonText, activityContentDetailsPromotedItem.customCtaButtonText) &&
        Objects.equals(this.descriptionText, activityContentDetailsPromotedItem.descriptionText) &&
        Objects.equals(this.destinationUrl, activityContentDetailsPromotedItem.destinationUrl) &&
        Objects.equals(this.forecastingUrl, activityContentDetailsPromotedItem.forecastingUrl) &&
        Objects.equals(this.impressionUrl, activityContentDetailsPromotedItem.impressionUrl) &&
        Objects.equals(this.videoId, activityContentDetailsPromotedItem.videoId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adTag, clickTrackingUrl, creativeViewUrl, ctaType, customCtaButtonText, descriptionText, destinationUrl, forecastingUrl, impressionUrl, videoId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActivityContentDetailsPromotedItem {\n");
    sb.append("    adTag: ").append(toIndentedString(adTag)).append("\n");
    sb.append("    clickTrackingUrl: ").append(toIndentedString(clickTrackingUrl)).append("\n");
    sb.append("    creativeViewUrl: ").append(toIndentedString(creativeViewUrl)).append("\n");
    sb.append("    ctaType: ").append(toIndentedString(ctaType)).append("\n");
    sb.append("    customCtaButtonText: ").append(toIndentedString(customCtaButtonText)).append("\n");
    sb.append("    descriptionText: ").append(toIndentedString(descriptionText)).append("\n");
    sb.append("    destinationUrl: ").append(toIndentedString(destinationUrl)).append("\n");
    sb.append("    forecastingUrl: ").append(toIndentedString(forecastingUrl)).append("\n");
    sb.append("    impressionUrl: ").append(toIndentedString(impressionUrl)).append("\n");
    sb.append("    videoId: ").append(toIndentedString(videoId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adTag");
    openapiFields.add("clickTrackingUrl");
    openapiFields.add("creativeViewUrl");
    openapiFields.add("ctaType");
    openapiFields.add("customCtaButtonText");
    openapiFields.add("descriptionText");
    openapiFields.add("destinationUrl");
    openapiFields.add("forecastingUrl");
    openapiFields.add("impressionUrl");
    openapiFields.add("videoId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ActivityContentDetailsPromotedItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ActivityContentDetailsPromotedItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActivityContentDetailsPromotedItem is not found in the empty JSON string", ActivityContentDetailsPromotedItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ActivityContentDetailsPromotedItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActivityContentDetailsPromotedItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("adTag") != null && !jsonObj.get("adTag").isJsonNull()) && !jsonObj.get("adTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adTag").toString()));
      }
      if ((jsonObj.get("clickTrackingUrl") != null && !jsonObj.get("clickTrackingUrl").isJsonNull()) && !jsonObj.get("clickTrackingUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clickTrackingUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clickTrackingUrl").toString()));
      }
      if ((jsonObj.get("creativeViewUrl") != null && !jsonObj.get("creativeViewUrl").isJsonNull()) && !jsonObj.get("creativeViewUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creativeViewUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creativeViewUrl").toString()));
      }
      if ((jsonObj.get("ctaType") != null && !jsonObj.get("ctaType").isJsonNull()) && !jsonObj.get("ctaType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ctaType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ctaType").toString()));
      }
      // validate the optional field `ctaType`
      if (jsonObj.get("ctaType") != null && !jsonObj.get("ctaType").isJsonNull()) {
        CtaTypeEnum.validateJsonElement(jsonObj.get("ctaType"));
      }
      if ((jsonObj.get("customCtaButtonText") != null && !jsonObj.get("customCtaButtonText").isJsonNull()) && !jsonObj.get("customCtaButtonText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customCtaButtonText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customCtaButtonText").toString()));
      }
      if ((jsonObj.get("descriptionText") != null && !jsonObj.get("descriptionText").isJsonNull()) && !jsonObj.get("descriptionText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `descriptionText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("descriptionText").toString()));
      }
      if ((jsonObj.get("destinationUrl") != null && !jsonObj.get("destinationUrl").isJsonNull()) && !jsonObj.get("destinationUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationUrl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("forecastingUrl") != null && !jsonObj.get("forecastingUrl").isJsonNull() && !jsonObj.get("forecastingUrl").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `forecastingUrl` to be an array in the JSON string but got `%s`", jsonObj.get("forecastingUrl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("impressionUrl") != null && !jsonObj.get("impressionUrl").isJsonNull() && !jsonObj.get("impressionUrl").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `impressionUrl` to be an array in the JSON string but got `%s`", jsonObj.get("impressionUrl").toString()));
      }
      if ((jsonObj.get("videoId") != null && !jsonObj.get("videoId").isJsonNull()) && !jsonObj.get("videoId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `videoId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("videoId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActivityContentDetailsPromotedItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActivityContentDetailsPromotedItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActivityContentDetailsPromotedItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActivityContentDetailsPromotedItem.class));

       return (TypeAdapter<T>) new TypeAdapter<ActivityContentDetailsPromotedItem>() {
           @Override
           public void write(JsonWriter out, ActivityContentDetailsPromotedItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActivityContentDetailsPromotedItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ActivityContentDetailsPromotedItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ActivityContentDetailsPromotedItem
   * @throws IOException if the JSON string is invalid with respect to ActivityContentDetailsPromotedItem
   */
  public static ActivityContentDetailsPromotedItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActivityContentDetailsPromotedItem.class);
  }

  /**
   * Convert an instance of ActivityContentDetailsPromotedItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

