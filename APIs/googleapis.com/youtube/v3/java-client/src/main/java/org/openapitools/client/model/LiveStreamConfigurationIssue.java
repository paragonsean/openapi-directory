/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LiveStreamConfigurationIssue
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LiveStreamConfigurationIssue {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  /**
   * How severe this issue is to the stream.
   */
  @JsonAdapter(SeverityEnum.Adapter.class)
  public enum SeverityEnum {
    INFO("info"),
    
    WARNING("warning"),
    
    ERROR("error");

    private String value;

    SeverityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SeverityEnum fromValue(String value) {
      for (SeverityEnum b : SeverityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SeverityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SeverityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SeverityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SeverityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SeverityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private SeverityEnum severity;

  /**
   * The kind of error happening.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    GOP_SIZE_OVER("gopSizeOver"),
    
    GOP_SIZE_LONG("gopSizeLong"),
    
    GOP_SIZE_SHORT("gopSizeShort"),
    
    OPEN_GOP("openGop"),
    
    BAD_CONTAINER("badContainer"),
    
    AUDIO_BITRATE_HIGH("audioBitrateHigh"),
    
    AUDIO_BITRATE_LOW("audioBitrateLow"),
    
    AUDIO_SAMPLE_RATE("audioSampleRate"),
    
    BITRATE_HIGH("bitrateHigh"),
    
    BITRATE_LOW("bitrateLow"),
    
    AUDIO_CODEC("audioCodec"),
    
    VIDEO_CODEC("videoCodec"),
    
    NO_AUDIO_STREAM("noAudioStream"),
    
    NO_VIDEO_STREAM("noVideoStream"),
    
    MULTIPLE_VIDEO_STREAMS("multipleVideoStreams"),
    
    MULTIPLE_AUDIO_STREAMS("multipleAudioStreams"),
    
    AUDIO_TOO_MANY_CHANNELS("audioTooManyChannels"),
    
    INTERLACED_VIDEO("interlacedVideo"),
    
    FRAME_RATE_HIGH("frameRateHigh"),
    
    RESOLUTION_MISMATCH("resolutionMismatch"),
    
    VIDEO_CODEC_MISMATCH("videoCodecMismatch"),
    
    VIDEO_INTERLACE_MISMATCH("videoInterlaceMismatch"),
    
    VIDEO_PROFILE_MISMATCH("videoProfileMismatch"),
    
    VIDEO_BITRATE_MISMATCH("videoBitrateMismatch"),
    
    FRAMERATE_MISMATCH("framerateMismatch"),
    
    GOP_MISMATCH("gopMismatch"),
    
    AUDIO_SAMPLE_RATE_MISMATCH("audioSampleRateMismatch"),
    
    AUDIO_STEREO_MISMATCH("audioStereoMismatch"),
    
    AUDIO_CODEC_MISMATCH("audioCodecMismatch"),
    
    AUDIO_BITRATE_MISMATCH("audioBitrateMismatch"),
    
    VIDEO_RESOLUTION_SUBOPTIMAL("videoResolutionSuboptimal"),
    
    VIDEO_RESOLUTION_UNSUPPORTED("videoResolutionUnsupported"),
    
    VIDEO_INGESTION_STARVED("videoIngestionStarved"),
    
    VIDEO_INGESTION_FASTER_THAN_REALTIME("videoIngestionFasterThanRealtime");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public LiveStreamConfigurationIssue() {
  }

  public LiveStreamConfigurationIssue description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The long-form description of the issue and how to resolve it.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public LiveStreamConfigurationIssue reason(String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * The short-form reason for this issue.
   * @return reason
   */
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }


  public LiveStreamConfigurationIssue severity(SeverityEnum severity) {
    this.severity = severity;
    return this;
  }

  /**
   * How severe this issue is to the stream.
   * @return severity
   */
  @javax.annotation.Nullable
  public SeverityEnum getSeverity() {
    return severity;
  }

  public void setSeverity(SeverityEnum severity) {
    this.severity = severity;
  }


  public LiveStreamConfigurationIssue type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The kind of error happening.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LiveStreamConfigurationIssue liveStreamConfigurationIssue = (LiveStreamConfigurationIssue) o;
    return Objects.equals(this.description, liveStreamConfigurationIssue.description) &&
        Objects.equals(this.reason, liveStreamConfigurationIssue.reason) &&
        Objects.equals(this.severity, liveStreamConfigurationIssue.severity) &&
        Objects.equals(this.type, liveStreamConfigurationIssue.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, reason, severity, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LiveStreamConfigurationIssue {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("reason");
    openapiFields.add("severity");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LiveStreamConfigurationIssue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LiveStreamConfigurationIssue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LiveStreamConfigurationIssue is not found in the empty JSON string", LiveStreamConfigurationIssue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LiveStreamConfigurationIssue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LiveStreamConfigurationIssue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      if ((jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) && !jsonObj.get("severity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `severity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("severity").toString()));
      }
      // validate the optional field `severity`
      if (jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) {
        SeverityEnum.validateJsonElement(jsonObj.get("severity"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LiveStreamConfigurationIssue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LiveStreamConfigurationIssue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LiveStreamConfigurationIssue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LiveStreamConfigurationIssue.class));

       return (TypeAdapter<T>) new TypeAdapter<LiveStreamConfigurationIssue>() {
           @Override
           public void write(JsonWriter out, LiveStreamConfigurationIssue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LiveStreamConfigurationIssue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LiveStreamConfigurationIssue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LiveStreamConfigurationIssue
   * @throws IOException if the JSON string is invalid with respect to LiveStreamConfigurationIssue
   */
  public static LiveStreamConfigurationIssue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LiveStreamConfigurationIssue.class);
  }

  /**
   * Convert an instance of LiveStreamConfigurationIssue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

