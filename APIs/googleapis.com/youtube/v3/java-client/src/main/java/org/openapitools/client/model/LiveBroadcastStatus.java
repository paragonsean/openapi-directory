/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Live broadcast state.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LiveBroadcastStatus {
  /**
   * The broadcast&#39;s status. The status can be updated using the API&#39;s liveBroadcasts.transition method.
   */
  @JsonAdapter(LifeCycleStatusEnum.Adapter.class)
  public enum LifeCycleStatusEnum {
    LIFE_CYCLE_STATUS_UNSPECIFIED("lifeCycleStatusUnspecified"),
    
    CREATED("created"),
    
    READY("ready"),
    
    TESTING("testing"),
    
    LIVE("live"),
    
    COMPLETE("complete"),
    
    REVOKED("revoked"),
    
    TEST_STARTING("testStarting"),
    
    LIVE_STARTING("liveStarting");

    private String value;

    LifeCycleStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LifeCycleStatusEnum fromValue(String value) {
      for (LifeCycleStatusEnum b : LifeCycleStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LifeCycleStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LifeCycleStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LifeCycleStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LifeCycleStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LifeCycleStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LIFE_CYCLE_STATUS = "lifeCycleStatus";
  @SerializedName(SERIALIZED_NAME_LIFE_CYCLE_STATUS)
  private LifeCycleStatusEnum lifeCycleStatus;

  /**
   * Priority of the live broadcast event (internal state).
   */
  @JsonAdapter(LiveBroadcastPriorityEnum.Adapter.class)
  public enum LiveBroadcastPriorityEnum {
    LIVE_BROADCAST_PRIORITY_UNSPECIFIED("liveBroadcastPriorityUnspecified"),
    
    LOW("low"),
    
    NORMAL("normal"),
    
    HIGH("high");

    private String value;

    LiveBroadcastPriorityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LiveBroadcastPriorityEnum fromValue(String value) {
      for (LiveBroadcastPriorityEnum b : LiveBroadcastPriorityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LiveBroadcastPriorityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LiveBroadcastPriorityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LiveBroadcastPriorityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LiveBroadcastPriorityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LiveBroadcastPriorityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LIVE_BROADCAST_PRIORITY = "liveBroadcastPriority";
  @SerializedName(SERIALIZED_NAME_LIVE_BROADCAST_PRIORITY)
  private LiveBroadcastPriorityEnum liveBroadcastPriority;

  public static final String SERIALIZED_NAME_MADE_FOR_KIDS = "madeForKids";
  @SerializedName(SERIALIZED_NAME_MADE_FOR_KIDS)
  private Boolean madeForKids;

  /**
   * The broadcast&#39;s privacy status. Note that the broadcast represents exactly one YouTube video, so the privacy settings are identical to those supported for videos. In addition, you can set this field by modifying the broadcast resource or by setting the privacyStatus field of the corresponding video resource.
   */
  @JsonAdapter(PrivacyStatusEnum.Adapter.class)
  public enum PrivacyStatusEnum {
    PUBLIC("public"),
    
    UNLISTED("unlisted"),
    
    PRIVATE("private");

    private String value;

    PrivacyStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PrivacyStatusEnum fromValue(String value) {
      for (PrivacyStatusEnum b : PrivacyStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PrivacyStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PrivacyStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PrivacyStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PrivacyStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PrivacyStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRIVACY_STATUS = "privacyStatus";
  @SerializedName(SERIALIZED_NAME_PRIVACY_STATUS)
  private PrivacyStatusEnum privacyStatus;

  /**
   * The broadcast&#39;s recording status.
   */
  @JsonAdapter(RecordingStatusEnum.Adapter.class)
  public enum RecordingStatusEnum {
    LIVE_BROADCAST_RECORDING_STATUS_UNSPECIFIED("liveBroadcastRecordingStatusUnspecified"),
    
    NOT_RECORDING("notRecording"),
    
    RECORDING("recording"),
    
    RECORDED("recorded");

    private String value;

    RecordingStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RecordingStatusEnum fromValue(String value) {
      for (RecordingStatusEnum b : RecordingStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RecordingStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RecordingStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RecordingStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RecordingStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RecordingStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RECORDING_STATUS = "recordingStatus";
  @SerializedName(SERIALIZED_NAME_RECORDING_STATUS)
  private RecordingStatusEnum recordingStatus;

  public static final String SERIALIZED_NAME_SELF_DECLARED_MADE_FOR_KIDS = "selfDeclaredMadeForKids";
  @SerializedName(SERIALIZED_NAME_SELF_DECLARED_MADE_FOR_KIDS)
  private Boolean selfDeclaredMadeForKids;

  public LiveBroadcastStatus() {
  }

  public LiveBroadcastStatus lifeCycleStatus(LifeCycleStatusEnum lifeCycleStatus) {
    this.lifeCycleStatus = lifeCycleStatus;
    return this;
  }

  /**
   * The broadcast&#39;s status. The status can be updated using the API&#39;s liveBroadcasts.transition method.
   * @return lifeCycleStatus
   */
  @javax.annotation.Nullable
  public LifeCycleStatusEnum getLifeCycleStatus() {
    return lifeCycleStatus;
  }

  public void setLifeCycleStatus(LifeCycleStatusEnum lifeCycleStatus) {
    this.lifeCycleStatus = lifeCycleStatus;
  }


  public LiveBroadcastStatus liveBroadcastPriority(LiveBroadcastPriorityEnum liveBroadcastPriority) {
    this.liveBroadcastPriority = liveBroadcastPriority;
    return this;
  }

  /**
   * Priority of the live broadcast event (internal state).
   * @return liveBroadcastPriority
   */
  @javax.annotation.Nullable
  public LiveBroadcastPriorityEnum getLiveBroadcastPriority() {
    return liveBroadcastPriority;
  }

  public void setLiveBroadcastPriority(LiveBroadcastPriorityEnum liveBroadcastPriority) {
    this.liveBroadcastPriority = liveBroadcastPriority;
  }


  public LiveBroadcastStatus madeForKids(Boolean madeForKids) {
    this.madeForKids = madeForKids;
    return this;
  }

  /**
   * Whether the broadcast is made for kids or not, decided by YouTube instead of the creator. This field is read only.
   * @return madeForKids
   */
  @javax.annotation.Nullable
  public Boolean getMadeForKids() {
    return madeForKids;
  }

  public void setMadeForKids(Boolean madeForKids) {
    this.madeForKids = madeForKids;
  }


  public LiveBroadcastStatus privacyStatus(PrivacyStatusEnum privacyStatus) {
    this.privacyStatus = privacyStatus;
    return this;
  }

  /**
   * The broadcast&#39;s privacy status. Note that the broadcast represents exactly one YouTube video, so the privacy settings are identical to those supported for videos. In addition, you can set this field by modifying the broadcast resource or by setting the privacyStatus field of the corresponding video resource.
   * @return privacyStatus
   */
  @javax.annotation.Nullable
  public PrivacyStatusEnum getPrivacyStatus() {
    return privacyStatus;
  }

  public void setPrivacyStatus(PrivacyStatusEnum privacyStatus) {
    this.privacyStatus = privacyStatus;
  }


  public LiveBroadcastStatus recordingStatus(RecordingStatusEnum recordingStatus) {
    this.recordingStatus = recordingStatus;
    return this;
  }

  /**
   * The broadcast&#39;s recording status.
   * @return recordingStatus
   */
  @javax.annotation.Nullable
  public RecordingStatusEnum getRecordingStatus() {
    return recordingStatus;
  }

  public void setRecordingStatus(RecordingStatusEnum recordingStatus) {
    this.recordingStatus = recordingStatus;
  }


  public LiveBroadcastStatus selfDeclaredMadeForKids(Boolean selfDeclaredMadeForKids) {
    this.selfDeclaredMadeForKids = selfDeclaredMadeForKids;
    return this;
  }

  /**
   * This field will be set to True if the creator declares the broadcast to be kids only: go/live-cw-work.
   * @return selfDeclaredMadeForKids
   */
  @javax.annotation.Nullable
  public Boolean getSelfDeclaredMadeForKids() {
    return selfDeclaredMadeForKids;
  }

  public void setSelfDeclaredMadeForKids(Boolean selfDeclaredMadeForKids) {
    this.selfDeclaredMadeForKids = selfDeclaredMadeForKids;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LiveBroadcastStatus liveBroadcastStatus = (LiveBroadcastStatus) o;
    return Objects.equals(this.lifeCycleStatus, liveBroadcastStatus.lifeCycleStatus) &&
        Objects.equals(this.liveBroadcastPriority, liveBroadcastStatus.liveBroadcastPriority) &&
        Objects.equals(this.madeForKids, liveBroadcastStatus.madeForKids) &&
        Objects.equals(this.privacyStatus, liveBroadcastStatus.privacyStatus) &&
        Objects.equals(this.recordingStatus, liveBroadcastStatus.recordingStatus) &&
        Objects.equals(this.selfDeclaredMadeForKids, liveBroadcastStatus.selfDeclaredMadeForKids);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lifeCycleStatus, liveBroadcastPriority, madeForKids, privacyStatus, recordingStatus, selfDeclaredMadeForKids);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LiveBroadcastStatus {\n");
    sb.append("    lifeCycleStatus: ").append(toIndentedString(lifeCycleStatus)).append("\n");
    sb.append("    liveBroadcastPriority: ").append(toIndentedString(liveBroadcastPriority)).append("\n");
    sb.append("    madeForKids: ").append(toIndentedString(madeForKids)).append("\n");
    sb.append("    privacyStatus: ").append(toIndentedString(privacyStatus)).append("\n");
    sb.append("    recordingStatus: ").append(toIndentedString(recordingStatus)).append("\n");
    sb.append("    selfDeclaredMadeForKids: ").append(toIndentedString(selfDeclaredMadeForKids)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lifeCycleStatus");
    openapiFields.add("liveBroadcastPriority");
    openapiFields.add("madeForKids");
    openapiFields.add("privacyStatus");
    openapiFields.add("recordingStatus");
    openapiFields.add("selfDeclaredMadeForKids");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LiveBroadcastStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LiveBroadcastStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LiveBroadcastStatus is not found in the empty JSON string", LiveBroadcastStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LiveBroadcastStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LiveBroadcastStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("lifeCycleStatus") != null && !jsonObj.get("lifeCycleStatus").isJsonNull()) && !jsonObj.get("lifeCycleStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lifeCycleStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lifeCycleStatus").toString()));
      }
      // validate the optional field `lifeCycleStatus`
      if (jsonObj.get("lifeCycleStatus") != null && !jsonObj.get("lifeCycleStatus").isJsonNull()) {
        LifeCycleStatusEnum.validateJsonElement(jsonObj.get("lifeCycleStatus"));
      }
      if ((jsonObj.get("liveBroadcastPriority") != null && !jsonObj.get("liveBroadcastPriority").isJsonNull()) && !jsonObj.get("liveBroadcastPriority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `liveBroadcastPriority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("liveBroadcastPriority").toString()));
      }
      // validate the optional field `liveBroadcastPriority`
      if (jsonObj.get("liveBroadcastPriority") != null && !jsonObj.get("liveBroadcastPriority").isJsonNull()) {
        LiveBroadcastPriorityEnum.validateJsonElement(jsonObj.get("liveBroadcastPriority"));
      }
      if ((jsonObj.get("privacyStatus") != null && !jsonObj.get("privacyStatus").isJsonNull()) && !jsonObj.get("privacyStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privacyStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privacyStatus").toString()));
      }
      // validate the optional field `privacyStatus`
      if (jsonObj.get("privacyStatus") != null && !jsonObj.get("privacyStatus").isJsonNull()) {
        PrivacyStatusEnum.validateJsonElement(jsonObj.get("privacyStatus"));
      }
      if ((jsonObj.get("recordingStatus") != null && !jsonObj.get("recordingStatus").isJsonNull()) && !jsonObj.get("recordingStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recordingStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recordingStatus").toString()));
      }
      // validate the optional field `recordingStatus`
      if (jsonObj.get("recordingStatus") != null && !jsonObj.get("recordingStatus").isJsonNull()) {
        RecordingStatusEnum.validateJsonElement(jsonObj.get("recordingStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LiveBroadcastStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LiveBroadcastStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LiveBroadcastStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LiveBroadcastStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<LiveBroadcastStatus>() {
           @Override
           public void write(JsonWriter out, LiveBroadcastStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LiveBroadcastStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LiveBroadcastStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LiveBroadcastStatus
   * @throws IOException if the JSON string is invalid with respect to LiveBroadcastStatus
   */
  public static LiveBroadcastStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LiveBroadcastStatus.class);
  }

  /**
   * Convert an instance of LiveBroadcastStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

