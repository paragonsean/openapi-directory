/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AbuseType;
import org.openapitools.client.model.Entity;
import org.openapitools.client.model.RelatedEntity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AbuseReport
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AbuseReport {
  public static final String SERIALIZED_NAME_ABUSE_TYPES = "abuseTypes";
  @SerializedName(SERIALIZED_NAME_ABUSE_TYPES)
  private List<AbuseType> abuseTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_RELATED_ENTITIES = "relatedEntities";
  @SerializedName(SERIALIZED_NAME_RELATED_ENTITIES)
  private List<RelatedEntity> relatedEntities = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private Entity subject;

  public AbuseReport() {
  }

  public AbuseReport abuseTypes(List<AbuseType> abuseTypes) {
    this.abuseTypes = abuseTypes;
    return this;
  }

  public AbuseReport addAbuseTypesItem(AbuseType abuseTypesItem) {
    if (this.abuseTypes == null) {
      this.abuseTypes = new ArrayList<>();
    }
    this.abuseTypes.add(abuseTypesItem);
    return this;
  }

  /**
   * Get abuseTypes
   * @return abuseTypes
   */
  @javax.annotation.Nullable
  public List<AbuseType> getAbuseTypes() {
    return abuseTypes;
  }

  public void setAbuseTypes(List<AbuseType> abuseTypes) {
    this.abuseTypes = abuseTypes;
  }


  public AbuseReport description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public AbuseReport relatedEntities(List<RelatedEntity> relatedEntities) {
    this.relatedEntities = relatedEntities;
    return this;
  }

  public AbuseReport addRelatedEntitiesItem(RelatedEntity relatedEntitiesItem) {
    if (this.relatedEntities == null) {
      this.relatedEntities = new ArrayList<>();
    }
    this.relatedEntities.add(relatedEntitiesItem);
    return this;
  }

  /**
   * Get relatedEntities
   * @return relatedEntities
   */
  @javax.annotation.Nullable
  public List<RelatedEntity> getRelatedEntities() {
    return relatedEntities;
  }

  public void setRelatedEntities(List<RelatedEntity> relatedEntities) {
    this.relatedEntities = relatedEntities;
  }


  public AbuseReport subject(Entity subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Get subject
   * @return subject
   */
  @javax.annotation.Nullable
  public Entity getSubject() {
    return subject;
  }

  public void setSubject(Entity subject) {
    this.subject = subject;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AbuseReport abuseReport = (AbuseReport) o;
    return Objects.equals(this.abuseTypes, abuseReport.abuseTypes) &&
        Objects.equals(this.description, abuseReport.description) &&
        Objects.equals(this.relatedEntities, abuseReport.relatedEntities) &&
        Objects.equals(this.subject, abuseReport.subject);
  }

  @Override
  public int hashCode() {
    return Objects.hash(abuseTypes, description, relatedEntities, subject);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AbuseReport {\n");
    sb.append("    abuseTypes: ").append(toIndentedString(abuseTypes)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    relatedEntities: ").append(toIndentedString(relatedEntities)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("abuseTypes");
    openapiFields.add("description");
    openapiFields.add("relatedEntities");
    openapiFields.add("subject");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AbuseReport
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AbuseReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AbuseReport is not found in the empty JSON string", AbuseReport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AbuseReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AbuseReport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("abuseTypes") != null && !jsonObj.get("abuseTypes").isJsonNull()) {
        JsonArray jsonArrayabuseTypes = jsonObj.getAsJsonArray("abuseTypes");
        if (jsonArrayabuseTypes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("abuseTypes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `abuseTypes` to be an array in the JSON string but got `%s`", jsonObj.get("abuseTypes").toString()));
          }

          // validate the optional field `abuseTypes` (array)
          for (int i = 0; i < jsonArrayabuseTypes.size(); i++) {
            AbuseType.validateJsonElement(jsonArrayabuseTypes.get(i));
          };
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("relatedEntities") != null && !jsonObj.get("relatedEntities").isJsonNull()) {
        JsonArray jsonArrayrelatedEntities = jsonObj.getAsJsonArray("relatedEntities");
        if (jsonArrayrelatedEntities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("relatedEntities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `relatedEntities` to be an array in the JSON string but got `%s`", jsonObj.get("relatedEntities").toString()));
          }

          // validate the optional field `relatedEntities` (array)
          for (int i = 0; i < jsonArrayrelatedEntities.size(); i++) {
            RelatedEntity.validateJsonElement(jsonArrayrelatedEntities.get(i));
          };
        }
      }
      // validate the optional field `subject`
      if (jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) {
        Entity.validateJsonElement(jsonObj.get("subject"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AbuseReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AbuseReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AbuseReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AbuseReport.class));

       return (TypeAdapter<T>) new TypeAdapter<AbuseReport>() {
           @Override
           public void write(JsonWriter out, AbuseReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AbuseReport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AbuseReport given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AbuseReport
   * @throws IOException if the JSON string is invalid with respect to AbuseReport
   */
  public static AbuseReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AbuseReport.class);
  }

  /**
   * Convert an instance of AbuseReport to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

