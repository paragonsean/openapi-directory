/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LiveChatMembershipGiftingDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LiveChatMembershipGiftingDetails {
  public static final String SERIALIZED_NAME_GIFT_MEMBERSHIPS_COUNT = "giftMembershipsCount";
  @SerializedName(SERIALIZED_NAME_GIFT_MEMBERSHIPS_COUNT)
  private Integer giftMembershipsCount;

  public static final String SERIALIZED_NAME_GIFT_MEMBERSHIPS_LEVEL_NAME = "giftMembershipsLevelName";
  @SerializedName(SERIALIZED_NAME_GIFT_MEMBERSHIPS_LEVEL_NAME)
  private String giftMembershipsLevelName;

  public LiveChatMembershipGiftingDetails() {
  }

  public LiveChatMembershipGiftingDetails giftMembershipsCount(Integer giftMembershipsCount) {
    this.giftMembershipsCount = giftMembershipsCount;
    return this;
  }

  /**
   * The number of gift memberships purchased by the user.
   * @return giftMembershipsCount
   */
  @javax.annotation.Nullable
  public Integer getGiftMembershipsCount() {
    return giftMembershipsCount;
  }

  public void setGiftMembershipsCount(Integer giftMembershipsCount) {
    this.giftMembershipsCount = giftMembershipsCount;
  }


  public LiveChatMembershipGiftingDetails giftMembershipsLevelName(String giftMembershipsLevelName) {
    this.giftMembershipsLevelName = giftMembershipsLevelName;
    return this;
  }

  /**
   * The name of the level of the gift memberships purchased by the user. The Level names are defined by the YouTube channel offering the Membership. In some situations this field isn&#39;t filled.
   * @return giftMembershipsLevelName
   */
  @javax.annotation.Nullable
  public String getGiftMembershipsLevelName() {
    return giftMembershipsLevelName;
  }

  public void setGiftMembershipsLevelName(String giftMembershipsLevelName) {
    this.giftMembershipsLevelName = giftMembershipsLevelName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LiveChatMembershipGiftingDetails liveChatMembershipGiftingDetails = (LiveChatMembershipGiftingDetails) o;
    return Objects.equals(this.giftMembershipsCount, liveChatMembershipGiftingDetails.giftMembershipsCount) &&
        Objects.equals(this.giftMembershipsLevelName, liveChatMembershipGiftingDetails.giftMembershipsLevelName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(giftMembershipsCount, giftMembershipsLevelName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LiveChatMembershipGiftingDetails {\n");
    sb.append("    giftMembershipsCount: ").append(toIndentedString(giftMembershipsCount)).append("\n");
    sb.append("    giftMembershipsLevelName: ").append(toIndentedString(giftMembershipsLevelName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("giftMembershipsCount");
    openapiFields.add("giftMembershipsLevelName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LiveChatMembershipGiftingDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LiveChatMembershipGiftingDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LiveChatMembershipGiftingDetails is not found in the empty JSON string", LiveChatMembershipGiftingDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LiveChatMembershipGiftingDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LiveChatMembershipGiftingDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("giftMembershipsLevelName") != null && !jsonObj.get("giftMembershipsLevelName").isJsonNull()) && !jsonObj.get("giftMembershipsLevelName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `giftMembershipsLevelName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("giftMembershipsLevelName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LiveChatMembershipGiftingDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LiveChatMembershipGiftingDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LiveChatMembershipGiftingDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LiveChatMembershipGiftingDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<LiveChatMembershipGiftingDetails>() {
           @Override
           public void write(JsonWriter out, LiveChatMembershipGiftingDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LiveChatMembershipGiftingDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LiveChatMembershipGiftingDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LiveChatMembershipGiftingDetails
   * @throws IOException if the JSON string is invalid with respect to LiveChatMembershipGiftingDetails
   */
  public static LiveChatMembershipGiftingDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LiveChatMembershipGiftingDetails.class);
  }

  /**
   * Convert an instance of LiveChatMembershipGiftingDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

