/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MembershipsDurationAtLevel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MembershipsDurationAtLevel {
  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private String level;

  public static final String SERIALIZED_NAME_MEMBER_SINCE = "memberSince";
  @SerializedName(SERIALIZED_NAME_MEMBER_SINCE)
  private String memberSince;

  public static final String SERIALIZED_NAME_MEMBER_TOTAL_DURATION_MONTHS = "memberTotalDurationMonths";
  @SerializedName(SERIALIZED_NAME_MEMBER_TOTAL_DURATION_MONTHS)
  private Integer memberTotalDurationMonths;

  public MembershipsDurationAtLevel() {
  }

  public MembershipsDurationAtLevel level(String level) {
    this.level = level;
    return this;
  }

  /**
   * Pricing level ID.
   * @return level
   */
  @javax.annotation.Nullable
  public String getLevel() {
    return level;
  }

  public void setLevel(String level) {
    this.level = level;
  }


  public MembershipsDurationAtLevel memberSince(String memberSince) {
    this.memberSince = memberSince;
    return this;
  }

  /**
   * The date and time when the user became a continuous member for the given level.
   * @return memberSince
   */
  @javax.annotation.Nullable
  public String getMemberSince() {
    return memberSince;
  }

  public void setMemberSince(String memberSince) {
    this.memberSince = memberSince;
  }


  public MembershipsDurationAtLevel memberTotalDurationMonths(Integer memberTotalDurationMonths) {
    this.memberTotalDurationMonths = memberTotalDurationMonths;
    return this;
  }

  /**
   * The cumulative time the user has been a member for the given level in complete months (the time is rounded down to the nearest integer).
   * @return memberTotalDurationMonths
   */
  @javax.annotation.Nullable
  public Integer getMemberTotalDurationMonths() {
    return memberTotalDurationMonths;
  }

  public void setMemberTotalDurationMonths(Integer memberTotalDurationMonths) {
    this.memberTotalDurationMonths = memberTotalDurationMonths;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MembershipsDurationAtLevel membershipsDurationAtLevel = (MembershipsDurationAtLevel) o;
    return Objects.equals(this.level, membershipsDurationAtLevel.level) &&
        Objects.equals(this.memberSince, membershipsDurationAtLevel.memberSince) &&
        Objects.equals(this.memberTotalDurationMonths, membershipsDurationAtLevel.memberTotalDurationMonths);
  }

  @Override
  public int hashCode() {
    return Objects.hash(level, memberSince, memberTotalDurationMonths);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MembershipsDurationAtLevel {\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    memberSince: ").append(toIndentedString(memberSince)).append("\n");
    sb.append("    memberTotalDurationMonths: ").append(toIndentedString(memberTotalDurationMonths)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("level");
    openapiFields.add("memberSince");
    openapiFields.add("memberTotalDurationMonths");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MembershipsDurationAtLevel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MembershipsDurationAtLevel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MembershipsDurationAtLevel is not found in the empty JSON string", MembershipsDurationAtLevel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MembershipsDurationAtLevel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MembershipsDurationAtLevel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("level") != null && !jsonObj.get("level").isJsonNull()) && !jsonObj.get("level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("level").toString()));
      }
      if ((jsonObj.get("memberSince") != null && !jsonObj.get("memberSince").isJsonNull()) && !jsonObj.get("memberSince").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `memberSince` to be a primitive type in the JSON string but got `%s`", jsonObj.get("memberSince").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MembershipsDurationAtLevel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MembershipsDurationAtLevel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MembershipsDurationAtLevel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MembershipsDurationAtLevel.class));

       return (TypeAdapter<T>) new TypeAdapter<MembershipsDurationAtLevel>() {
           @Override
           public void write(JsonWriter out, MembershipsDurationAtLevel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MembershipsDurationAtLevel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MembershipsDurationAtLevel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MembershipsDurationAtLevel
   * @throws IOException if the JSON string is invalid with respect to MembershipsDurationAtLevel
   */
  public static MembershipsDurationAtLevel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MembershipsDurationAtLevel.class);
  }

  /**
   * Convert an instance of MembershipsDurationAtLevel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

