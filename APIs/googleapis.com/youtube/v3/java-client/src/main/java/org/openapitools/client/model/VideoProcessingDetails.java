/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.VideoProcessingDetailsProcessingProgress;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes processing status and progress and availability of some other Video resource parts.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VideoProcessingDetails {
  public static final String SERIALIZED_NAME_EDITOR_SUGGESTIONS_AVAILABILITY = "editorSuggestionsAvailability";
  @SerializedName(SERIALIZED_NAME_EDITOR_SUGGESTIONS_AVAILABILITY)
  private String editorSuggestionsAvailability;

  public static final String SERIALIZED_NAME_FILE_DETAILS_AVAILABILITY = "fileDetailsAvailability";
  @SerializedName(SERIALIZED_NAME_FILE_DETAILS_AVAILABILITY)
  private String fileDetailsAvailability;

  /**
   * The reason that YouTube failed to process the video. This property will only have a value if the processingStatus property&#39;s value is failed.
   */
  @JsonAdapter(ProcessingFailureReasonEnum.Adapter.class)
  public enum ProcessingFailureReasonEnum {
    UPLOAD_FAILED("uploadFailed"),
    
    TRANSCODE_FAILED("transcodeFailed"),
    
    STREAMING_FAILED("streamingFailed"),
    
    OTHER("other");

    private String value;

    ProcessingFailureReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProcessingFailureReasonEnum fromValue(String value) {
      for (ProcessingFailureReasonEnum b : ProcessingFailureReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProcessingFailureReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProcessingFailureReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProcessingFailureReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProcessingFailureReasonEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProcessingFailureReasonEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROCESSING_FAILURE_REASON = "processingFailureReason";
  @SerializedName(SERIALIZED_NAME_PROCESSING_FAILURE_REASON)
  private ProcessingFailureReasonEnum processingFailureReason;

  public static final String SERIALIZED_NAME_PROCESSING_ISSUES_AVAILABILITY = "processingIssuesAvailability";
  @SerializedName(SERIALIZED_NAME_PROCESSING_ISSUES_AVAILABILITY)
  private String processingIssuesAvailability;

  public static final String SERIALIZED_NAME_PROCESSING_PROGRESS = "processingProgress";
  @SerializedName(SERIALIZED_NAME_PROCESSING_PROGRESS)
  private VideoProcessingDetailsProcessingProgress processingProgress;

  /**
   * The video&#39;s processing status. This value indicates whether YouTube was able to process the video or if the video is still being processed.
   */
  @JsonAdapter(ProcessingStatusEnum.Adapter.class)
  public enum ProcessingStatusEnum {
    PROCESSING("processing"),
    
    SUCCEEDED("succeeded"),
    
    FAILED("failed"),
    
    TERMINATED("terminated");

    private String value;

    ProcessingStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProcessingStatusEnum fromValue(String value) {
      for (ProcessingStatusEnum b : ProcessingStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProcessingStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProcessingStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProcessingStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProcessingStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProcessingStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROCESSING_STATUS = "processingStatus";
  @SerializedName(SERIALIZED_NAME_PROCESSING_STATUS)
  private ProcessingStatusEnum processingStatus;

  public static final String SERIALIZED_NAME_TAG_SUGGESTIONS_AVAILABILITY = "tagSuggestionsAvailability";
  @SerializedName(SERIALIZED_NAME_TAG_SUGGESTIONS_AVAILABILITY)
  private String tagSuggestionsAvailability;

  public static final String SERIALIZED_NAME_THUMBNAILS_AVAILABILITY = "thumbnailsAvailability";
  @SerializedName(SERIALIZED_NAME_THUMBNAILS_AVAILABILITY)
  private String thumbnailsAvailability;

  public VideoProcessingDetails() {
  }

  public VideoProcessingDetails editorSuggestionsAvailability(String editorSuggestionsAvailability) {
    this.editorSuggestionsAvailability = editorSuggestionsAvailability;
    return this;
  }

  /**
   * This value indicates whether video editing suggestions, which might improve video quality or the playback experience, are available for the video. You can retrieve these suggestions by requesting the suggestions part in your videos.list() request.
   * @return editorSuggestionsAvailability
   */
  @javax.annotation.Nullable
  public String getEditorSuggestionsAvailability() {
    return editorSuggestionsAvailability;
  }

  public void setEditorSuggestionsAvailability(String editorSuggestionsAvailability) {
    this.editorSuggestionsAvailability = editorSuggestionsAvailability;
  }


  public VideoProcessingDetails fileDetailsAvailability(String fileDetailsAvailability) {
    this.fileDetailsAvailability = fileDetailsAvailability;
    return this;
  }

  /**
   * This value indicates whether file details are available for the uploaded video. You can retrieve a video&#39;s file details by requesting the fileDetails part in your videos.list() request.
   * @return fileDetailsAvailability
   */
  @javax.annotation.Nullable
  public String getFileDetailsAvailability() {
    return fileDetailsAvailability;
  }

  public void setFileDetailsAvailability(String fileDetailsAvailability) {
    this.fileDetailsAvailability = fileDetailsAvailability;
  }


  public VideoProcessingDetails processingFailureReason(ProcessingFailureReasonEnum processingFailureReason) {
    this.processingFailureReason = processingFailureReason;
    return this;
  }

  /**
   * The reason that YouTube failed to process the video. This property will only have a value if the processingStatus property&#39;s value is failed.
   * @return processingFailureReason
   */
  @javax.annotation.Nullable
  public ProcessingFailureReasonEnum getProcessingFailureReason() {
    return processingFailureReason;
  }

  public void setProcessingFailureReason(ProcessingFailureReasonEnum processingFailureReason) {
    this.processingFailureReason = processingFailureReason;
  }


  public VideoProcessingDetails processingIssuesAvailability(String processingIssuesAvailability) {
    this.processingIssuesAvailability = processingIssuesAvailability;
    return this;
  }

  /**
   * This value indicates whether the video processing engine has generated suggestions that might improve YouTube&#39;s ability to process the the video, warnings that explain video processing problems, or errors that cause video processing problems. You can retrieve these suggestions by requesting the suggestions part in your videos.list() request.
   * @return processingIssuesAvailability
   */
  @javax.annotation.Nullable
  public String getProcessingIssuesAvailability() {
    return processingIssuesAvailability;
  }

  public void setProcessingIssuesAvailability(String processingIssuesAvailability) {
    this.processingIssuesAvailability = processingIssuesAvailability;
  }


  public VideoProcessingDetails processingProgress(VideoProcessingDetailsProcessingProgress processingProgress) {
    this.processingProgress = processingProgress;
    return this;
  }

  /**
   * Get processingProgress
   * @return processingProgress
   */
  @javax.annotation.Nullable
  public VideoProcessingDetailsProcessingProgress getProcessingProgress() {
    return processingProgress;
  }

  public void setProcessingProgress(VideoProcessingDetailsProcessingProgress processingProgress) {
    this.processingProgress = processingProgress;
  }


  public VideoProcessingDetails processingStatus(ProcessingStatusEnum processingStatus) {
    this.processingStatus = processingStatus;
    return this;
  }

  /**
   * The video&#39;s processing status. This value indicates whether YouTube was able to process the video or if the video is still being processed.
   * @return processingStatus
   */
  @javax.annotation.Nullable
  public ProcessingStatusEnum getProcessingStatus() {
    return processingStatus;
  }

  public void setProcessingStatus(ProcessingStatusEnum processingStatus) {
    this.processingStatus = processingStatus;
  }


  public VideoProcessingDetails tagSuggestionsAvailability(String tagSuggestionsAvailability) {
    this.tagSuggestionsAvailability = tagSuggestionsAvailability;
    return this;
  }

  /**
   * This value indicates whether keyword (tag) suggestions are available for the video. Tags can be added to a video&#39;s metadata to make it easier for other users to find the video. You can retrieve these suggestions by requesting the suggestions part in your videos.list() request.
   * @return tagSuggestionsAvailability
   */
  @javax.annotation.Nullable
  public String getTagSuggestionsAvailability() {
    return tagSuggestionsAvailability;
  }

  public void setTagSuggestionsAvailability(String tagSuggestionsAvailability) {
    this.tagSuggestionsAvailability = tagSuggestionsAvailability;
  }


  public VideoProcessingDetails thumbnailsAvailability(String thumbnailsAvailability) {
    this.thumbnailsAvailability = thumbnailsAvailability;
    return this;
  }

  /**
   * This value indicates whether thumbnail images have been generated for the video.
   * @return thumbnailsAvailability
   */
  @javax.annotation.Nullable
  public String getThumbnailsAvailability() {
    return thumbnailsAvailability;
  }

  public void setThumbnailsAvailability(String thumbnailsAvailability) {
    this.thumbnailsAvailability = thumbnailsAvailability;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoProcessingDetails videoProcessingDetails = (VideoProcessingDetails) o;
    return Objects.equals(this.editorSuggestionsAvailability, videoProcessingDetails.editorSuggestionsAvailability) &&
        Objects.equals(this.fileDetailsAvailability, videoProcessingDetails.fileDetailsAvailability) &&
        Objects.equals(this.processingFailureReason, videoProcessingDetails.processingFailureReason) &&
        Objects.equals(this.processingIssuesAvailability, videoProcessingDetails.processingIssuesAvailability) &&
        Objects.equals(this.processingProgress, videoProcessingDetails.processingProgress) &&
        Objects.equals(this.processingStatus, videoProcessingDetails.processingStatus) &&
        Objects.equals(this.tagSuggestionsAvailability, videoProcessingDetails.tagSuggestionsAvailability) &&
        Objects.equals(this.thumbnailsAvailability, videoProcessingDetails.thumbnailsAvailability);
  }

  @Override
  public int hashCode() {
    return Objects.hash(editorSuggestionsAvailability, fileDetailsAvailability, processingFailureReason, processingIssuesAvailability, processingProgress, processingStatus, tagSuggestionsAvailability, thumbnailsAvailability);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoProcessingDetails {\n");
    sb.append("    editorSuggestionsAvailability: ").append(toIndentedString(editorSuggestionsAvailability)).append("\n");
    sb.append("    fileDetailsAvailability: ").append(toIndentedString(fileDetailsAvailability)).append("\n");
    sb.append("    processingFailureReason: ").append(toIndentedString(processingFailureReason)).append("\n");
    sb.append("    processingIssuesAvailability: ").append(toIndentedString(processingIssuesAvailability)).append("\n");
    sb.append("    processingProgress: ").append(toIndentedString(processingProgress)).append("\n");
    sb.append("    processingStatus: ").append(toIndentedString(processingStatus)).append("\n");
    sb.append("    tagSuggestionsAvailability: ").append(toIndentedString(tagSuggestionsAvailability)).append("\n");
    sb.append("    thumbnailsAvailability: ").append(toIndentedString(thumbnailsAvailability)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("editorSuggestionsAvailability");
    openapiFields.add("fileDetailsAvailability");
    openapiFields.add("processingFailureReason");
    openapiFields.add("processingIssuesAvailability");
    openapiFields.add("processingProgress");
    openapiFields.add("processingStatus");
    openapiFields.add("tagSuggestionsAvailability");
    openapiFields.add("thumbnailsAvailability");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoProcessingDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoProcessingDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoProcessingDetails is not found in the empty JSON string", VideoProcessingDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoProcessingDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoProcessingDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("editorSuggestionsAvailability") != null && !jsonObj.get("editorSuggestionsAvailability").isJsonNull()) && !jsonObj.get("editorSuggestionsAvailability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `editorSuggestionsAvailability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("editorSuggestionsAvailability").toString()));
      }
      if ((jsonObj.get("fileDetailsAvailability") != null && !jsonObj.get("fileDetailsAvailability").isJsonNull()) && !jsonObj.get("fileDetailsAvailability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileDetailsAvailability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileDetailsAvailability").toString()));
      }
      if ((jsonObj.get("processingFailureReason") != null && !jsonObj.get("processingFailureReason").isJsonNull()) && !jsonObj.get("processingFailureReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processingFailureReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processingFailureReason").toString()));
      }
      // validate the optional field `processingFailureReason`
      if (jsonObj.get("processingFailureReason") != null && !jsonObj.get("processingFailureReason").isJsonNull()) {
        ProcessingFailureReasonEnum.validateJsonElement(jsonObj.get("processingFailureReason"));
      }
      if ((jsonObj.get("processingIssuesAvailability") != null && !jsonObj.get("processingIssuesAvailability").isJsonNull()) && !jsonObj.get("processingIssuesAvailability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processingIssuesAvailability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processingIssuesAvailability").toString()));
      }
      // validate the optional field `processingProgress`
      if (jsonObj.get("processingProgress") != null && !jsonObj.get("processingProgress").isJsonNull()) {
        VideoProcessingDetailsProcessingProgress.validateJsonElement(jsonObj.get("processingProgress"));
      }
      if ((jsonObj.get("processingStatus") != null && !jsonObj.get("processingStatus").isJsonNull()) && !jsonObj.get("processingStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processingStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processingStatus").toString()));
      }
      // validate the optional field `processingStatus`
      if (jsonObj.get("processingStatus") != null && !jsonObj.get("processingStatus").isJsonNull()) {
        ProcessingStatusEnum.validateJsonElement(jsonObj.get("processingStatus"));
      }
      if ((jsonObj.get("tagSuggestionsAvailability") != null && !jsonObj.get("tagSuggestionsAvailability").isJsonNull()) && !jsonObj.get("tagSuggestionsAvailability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tagSuggestionsAvailability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tagSuggestionsAvailability").toString()));
      }
      if ((jsonObj.get("thumbnailsAvailability") != null && !jsonObj.get("thumbnailsAvailability").isJsonNull()) && !jsonObj.get("thumbnailsAvailability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbnailsAvailability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbnailsAvailability").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoProcessingDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoProcessingDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoProcessingDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoProcessingDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoProcessingDetails>() {
           @Override
           public void write(JsonWriter out, VideoProcessingDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoProcessingDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoProcessingDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoProcessingDetails
   * @throws IOException if the JSON string is invalid with respect to VideoProcessingDetails
   */
  public static VideoProcessingDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoProcessingDetails.class);
  }

  /**
   * Convert an instance of VideoProcessingDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

