/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Basic details about a caption track, such as its language and name.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CaptionSnippet {
  /**
   * The type of audio track associated with the caption track.
   */
  @JsonAdapter(AudioTrackTypeEnum.Adapter.class)
  public enum AudioTrackTypeEnum {
    UNKNOWN("unknown"),
    
    PRIMARY("primary"),
    
    COMMENTARY("commentary"),
    
    DESCRIPTIVE("descriptive");

    private String value;

    AudioTrackTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AudioTrackTypeEnum fromValue(String value) {
      for (AudioTrackTypeEnum b : AudioTrackTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AudioTrackTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AudioTrackTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AudioTrackTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AudioTrackTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AudioTrackTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUDIO_TRACK_TYPE = "audioTrackType";
  @SerializedName(SERIALIZED_NAME_AUDIO_TRACK_TYPE)
  private AudioTrackTypeEnum audioTrackType;

  /**
   * The reason that YouTube failed to process the caption track. This property is only present if the state property&#39;s value is failed.
   */
  @JsonAdapter(FailureReasonEnum.Adapter.class)
  public enum FailureReasonEnum {
    UNKNOWN_FORMAT("unknownFormat"),
    
    UNSUPPORTED_FORMAT("unsupportedFormat"),
    
    PROCESSING_FAILED("processingFailed");

    private String value;

    FailureReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FailureReasonEnum fromValue(String value) {
      for (FailureReasonEnum b : FailureReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FailureReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FailureReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FailureReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FailureReasonEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FailureReasonEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FAILURE_REASON = "failureReason";
  @SerializedName(SERIALIZED_NAME_FAILURE_REASON)
  private FailureReasonEnum failureReason;

  public static final String SERIALIZED_NAME_IS_AUTO_SYNCED = "isAutoSynced";
  @SerializedName(SERIALIZED_NAME_IS_AUTO_SYNCED)
  private Boolean isAutoSynced;

  public static final String SERIALIZED_NAME_IS_C_C = "isCC";
  @SerializedName(SERIALIZED_NAME_IS_C_C)
  private Boolean isCC;

  public static final String SERIALIZED_NAME_IS_DRAFT = "isDraft";
  @SerializedName(SERIALIZED_NAME_IS_DRAFT)
  private Boolean isDraft;

  public static final String SERIALIZED_NAME_IS_EASY_READER = "isEasyReader";
  @SerializedName(SERIALIZED_NAME_IS_EASY_READER)
  private Boolean isEasyReader;

  public static final String SERIALIZED_NAME_IS_LARGE = "isLarge";
  @SerializedName(SERIALIZED_NAME_IS_LARGE)
  private Boolean isLarge;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "lastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * The caption track&#39;s status.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    SERVING("serving"),
    
    SYNCING("syncing"),
    
    FAILED("failed");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  /**
   * The caption track&#39;s type.
   */
  @JsonAdapter(TrackKindEnum.Adapter.class)
  public enum TrackKindEnum {
    STANDARD("standard"),
    
    ASR("ASR"),
    
    FORCED("forced");

    private String value;

    TrackKindEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TrackKindEnum fromValue(String value) {
      for (TrackKindEnum b : TrackKindEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TrackKindEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TrackKindEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TrackKindEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TrackKindEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TrackKindEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRACK_KIND = "trackKind";
  @SerializedName(SERIALIZED_NAME_TRACK_KIND)
  private TrackKindEnum trackKind;

  public static final String SERIALIZED_NAME_VIDEO_ID = "videoId";
  @SerializedName(SERIALIZED_NAME_VIDEO_ID)
  private String videoId;

  public CaptionSnippet() {
  }

  public CaptionSnippet audioTrackType(AudioTrackTypeEnum audioTrackType) {
    this.audioTrackType = audioTrackType;
    return this;
  }

  /**
   * The type of audio track associated with the caption track.
   * @return audioTrackType
   */
  @javax.annotation.Nullable
  public AudioTrackTypeEnum getAudioTrackType() {
    return audioTrackType;
  }

  public void setAudioTrackType(AudioTrackTypeEnum audioTrackType) {
    this.audioTrackType = audioTrackType;
  }


  public CaptionSnippet failureReason(FailureReasonEnum failureReason) {
    this.failureReason = failureReason;
    return this;
  }

  /**
   * The reason that YouTube failed to process the caption track. This property is only present if the state property&#39;s value is failed.
   * @return failureReason
   */
  @javax.annotation.Nullable
  public FailureReasonEnum getFailureReason() {
    return failureReason;
  }

  public void setFailureReason(FailureReasonEnum failureReason) {
    this.failureReason = failureReason;
  }


  public CaptionSnippet isAutoSynced(Boolean isAutoSynced) {
    this.isAutoSynced = isAutoSynced;
    return this;
  }

  /**
   * Indicates whether YouTube synchronized the caption track to the audio track in the video. The value will be true if a sync was explicitly requested when the caption track was uploaded. For example, when calling the captions.insert or captions.update methods, you can set the sync parameter to true to instruct YouTube to sync the uploaded track to the video. If the value is false, YouTube uses the time codes in the uploaded caption track to determine when to display captions.
   * @return isAutoSynced
   */
  @javax.annotation.Nullable
  public Boolean getIsAutoSynced() {
    return isAutoSynced;
  }

  public void setIsAutoSynced(Boolean isAutoSynced) {
    this.isAutoSynced = isAutoSynced;
  }


  public CaptionSnippet isCC(Boolean isCC) {
    this.isCC = isCC;
    return this;
  }

  /**
   * Indicates whether the track contains closed captions for the deaf and hard of hearing. The default value is false.
   * @return isCC
   */
  @javax.annotation.Nullable
  public Boolean getIsCC() {
    return isCC;
  }

  public void setIsCC(Boolean isCC) {
    this.isCC = isCC;
  }


  public CaptionSnippet isDraft(Boolean isDraft) {
    this.isDraft = isDraft;
    return this;
  }

  /**
   * Indicates whether the caption track is a draft. If the value is true, then the track is not publicly visible. The default value is false. @mutable youtube.captions.insert youtube.captions.update
   * @return isDraft
   */
  @javax.annotation.Nullable
  public Boolean getIsDraft() {
    return isDraft;
  }

  public void setIsDraft(Boolean isDraft) {
    this.isDraft = isDraft;
  }


  public CaptionSnippet isEasyReader(Boolean isEasyReader) {
    this.isEasyReader = isEasyReader;
    return this;
  }

  /**
   * Indicates whether caption track is formatted for \&quot;easy reader,\&quot; meaning it is at a third-grade level for language learners. The default value is false.
   * @return isEasyReader
   */
  @javax.annotation.Nullable
  public Boolean getIsEasyReader() {
    return isEasyReader;
  }

  public void setIsEasyReader(Boolean isEasyReader) {
    this.isEasyReader = isEasyReader;
  }


  public CaptionSnippet isLarge(Boolean isLarge) {
    this.isLarge = isLarge;
    return this;
  }

  /**
   * Indicates whether the caption track uses large text for the vision-impaired. The default value is false.
   * @return isLarge
   */
  @javax.annotation.Nullable
  public Boolean getIsLarge() {
    return isLarge;
  }

  public void setIsLarge(Boolean isLarge) {
    this.isLarge = isLarge;
  }


  public CaptionSnippet language(String language) {
    this.language = language;
    return this;
  }

  /**
   * The language of the caption track. The property value is a BCP-47 language tag.
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public CaptionSnippet lastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * The date and time when the caption track was last updated.
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public CaptionSnippet name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the caption track. The name is intended to be visible to the user as an option during playback.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CaptionSnippet status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The caption track&#39;s status.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public CaptionSnippet trackKind(TrackKindEnum trackKind) {
    this.trackKind = trackKind;
    return this;
  }

  /**
   * The caption track&#39;s type.
   * @return trackKind
   */
  @javax.annotation.Nullable
  public TrackKindEnum getTrackKind() {
    return trackKind;
  }

  public void setTrackKind(TrackKindEnum trackKind) {
    this.trackKind = trackKind;
  }


  public CaptionSnippet videoId(String videoId) {
    this.videoId = videoId;
    return this;
  }

  /**
   * The ID that YouTube uses to uniquely identify the video associated with the caption track. @mutable youtube.captions.insert
   * @return videoId
   */
  @javax.annotation.Nullable
  public String getVideoId() {
    return videoId;
  }

  public void setVideoId(String videoId) {
    this.videoId = videoId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CaptionSnippet captionSnippet = (CaptionSnippet) o;
    return Objects.equals(this.audioTrackType, captionSnippet.audioTrackType) &&
        Objects.equals(this.failureReason, captionSnippet.failureReason) &&
        Objects.equals(this.isAutoSynced, captionSnippet.isAutoSynced) &&
        Objects.equals(this.isCC, captionSnippet.isCC) &&
        Objects.equals(this.isDraft, captionSnippet.isDraft) &&
        Objects.equals(this.isEasyReader, captionSnippet.isEasyReader) &&
        Objects.equals(this.isLarge, captionSnippet.isLarge) &&
        Objects.equals(this.language, captionSnippet.language) &&
        Objects.equals(this.lastUpdated, captionSnippet.lastUpdated) &&
        Objects.equals(this.name, captionSnippet.name) &&
        Objects.equals(this.status, captionSnippet.status) &&
        Objects.equals(this.trackKind, captionSnippet.trackKind) &&
        Objects.equals(this.videoId, captionSnippet.videoId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audioTrackType, failureReason, isAutoSynced, isCC, isDraft, isEasyReader, isLarge, language, lastUpdated, name, status, trackKind, videoId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CaptionSnippet {\n");
    sb.append("    audioTrackType: ").append(toIndentedString(audioTrackType)).append("\n");
    sb.append("    failureReason: ").append(toIndentedString(failureReason)).append("\n");
    sb.append("    isAutoSynced: ").append(toIndentedString(isAutoSynced)).append("\n");
    sb.append("    isCC: ").append(toIndentedString(isCC)).append("\n");
    sb.append("    isDraft: ").append(toIndentedString(isDraft)).append("\n");
    sb.append("    isEasyReader: ").append(toIndentedString(isEasyReader)).append("\n");
    sb.append("    isLarge: ").append(toIndentedString(isLarge)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    trackKind: ").append(toIndentedString(trackKind)).append("\n");
    sb.append("    videoId: ").append(toIndentedString(videoId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("audioTrackType");
    openapiFields.add("failureReason");
    openapiFields.add("isAutoSynced");
    openapiFields.add("isCC");
    openapiFields.add("isDraft");
    openapiFields.add("isEasyReader");
    openapiFields.add("isLarge");
    openapiFields.add("language");
    openapiFields.add("lastUpdated");
    openapiFields.add("name");
    openapiFields.add("status");
    openapiFields.add("trackKind");
    openapiFields.add("videoId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CaptionSnippet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CaptionSnippet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CaptionSnippet is not found in the empty JSON string", CaptionSnippet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CaptionSnippet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CaptionSnippet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("audioTrackType") != null && !jsonObj.get("audioTrackType").isJsonNull()) && !jsonObj.get("audioTrackType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audioTrackType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audioTrackType").toString()));
      }
      // validate the optional field `audioTrackType`
      if (jsonObj.get("audioTrackType") != null && !jsonObj.get("audioTrackType").isJsonNull()) {
        AudioTrackTypeEnum.validateJsonElement(jsonObj.get("audioTrackType"));
      }
      if ((jsonObj.get("failureReason") != null && !jsonObj.get("failureReason").isJsonNull()) && !jsonObj.get("failureReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `failureReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("failureReason").toString()));
      }
      // validate the optional field `failureReason`
      if (jsonObj.get("failureReason") != null && !jsonObj.get("failureReason").isJsonNull()) {
        FailureReasonEnum.validateJsonElement(jsonObj.get("failureReason"));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("trackKind") != null && !jsonObj.get("trackKind").isJsonNull()) && !jsonObj.get("trackKind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trackKind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trackKind").toString()));
      }
      // validate the optional field `trackKind`
      if (jsonObj.get("trackKind") != null && !jsonObj.get("trackKind").isJsonNull()) {
        TrackKindEnum.validateJsonElement(jsonObj.get("trackKind"));
      }
      if ((jsonObj.get("videoId") != null && !jsonObj.get("videoId").isJsonNull()) && !jsonObj.get("videoId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `videoId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("videoId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CaptionSnippet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CaptionSnippet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CaptionSnippet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CaptionSnippet.class));

       return (TypeAdapter<T>) new TypeAdapter<CaptionSnippet>() {
           @Override
           public void write(JsonWriter out, CaptionSnippet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CaptionSnippet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CaptionSnippet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CaptionSnippet
   * @throws IOException if the JSON string is invalid with respect to CaptionSnippet
   */
  public static CaptionSnippet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CaptionSnippet.class);
  }

  /**
   * Convert an instance of CaptionSnippet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

