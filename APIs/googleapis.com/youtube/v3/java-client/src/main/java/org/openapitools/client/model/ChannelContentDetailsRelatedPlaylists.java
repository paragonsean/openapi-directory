/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ChannelContentDetailsRelatedPlaylists
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChannelContentDetailsRelatedPlaylists {
  public static final String SERIALIZED_NAME_FAVORITES = "favorites";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_FAVORITES)
  private String favorites;

  public static final String SERIALIZED_NAME_LIKES = "likes";
  @SerializedName(SERIALIZED_NAME_LIKES)
  private String likes;

  public static final String SERIALIZED_NAME_UPLOADS = "uploads";
  @SerializedName(SERIALIZED_NAME_UPLOADS)
  private String uploads;

  public static final String SERIALIZED_NAME_WATCH_HISTORY = "watchHistory";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_WATCH_HISTORY)
  private String watchHistory;

  public static final String SERIALIZED_NAME_WATCH_LATER = "watchLater";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_WATCH_LATER)
  private String watchLater;

  public ChannelContentDetailsRelatedPlaylists() {
  }

  @Deprecated
  public ChannelContentDetailsRelatedPlaylists favorites(String favorites) {
    this.favorites = favorites;
    return this;
  }

  /**
   * The ID of the playlist that contains the channel\&quot;s favorite videos. Use the playlistItems.insert and playlistItems.delete to add or remove items from that list.
   * @return favorites
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getFavorites() {
    return favorites;
  }

  @Deprecated
  public void setFavorites(String favorites) {
    this.favorites = favorites;
  }


  public ChannelContentDetailsRelatedPlaylists likes(String likes) {
    this.likes = likes;
    return this;
  }

  /**
   * The ID of the playlist that contains the channel\&quot;s liked videos. Use the playlistItems.insert and playlistItems.delete to add or remove items from that list.
   * @return likes
   */
  @javax.annotation.Nullable
  public String getLikes() {
    return likes;
  }

  public void setLikes(String likes) {
    this.likes = likes;
  }


  public ChannelContentDetailsRelatedPlaylists uploads(String uploads) {
    this.uploads = uploads;
    return this;
  }

  /**
   * The ID of the playlist that contains the channel\&quot;s uploaded videos. Use the videos.insert method to upload new videos and the videos.delete method to delete previously uploaded videos.
   * @return uploads
   */
  @javax.annotation.Nullable
  public String getUploads() {
    return uploads;
  }

  public void setUploads(String uploads) {
    this.uploads = uploads;
  }


  @Deprecated
  public ChannelContentDetailsRelatedPlaylists watchHistory(String watchHistory) {
    this.watchHistory = watchHistory;
    return this;
  }

  /**
   * The ID of the playlist that contains the channel\&quot;s watch history. Use the playlistItems.insert and playlistItems.delete to add or remove items from that list.
   * @return watchHistory
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getWatchHistory() {
    return watchHistory;
  }

  @Deprecated
  public void setWatchHistory(String watchHistory) {
    this.watchHistory = watchHistory;
  }


  @Deprecated
  public ChannelContentDetailsRelatedPlaylists watchLater(String watchLater) {
    this.watchLater = watchLater;
    return this;
  }

  /**
   * The ID of the playlist that contains the channel\&quot;s watch later playlist. Use the playlistItems.insert and playlistItems.delete to add or remove items from that list.
   * @return watchLater
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getWatchLater() {
    return watchLater;
  }

  @Deprecated
  public void setWatchLater(String watchLater) {
    this.watchLater = watchLater;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChannelContentDetailsRelatedPlaylists channelContentDetailsRelatedPlaylists = (ChannelContentDetailsRelatedPlaylists) o;
    return Objects.equals(this.favorites, channelContentDetailsRelatedPlaylists.favorites) &&
        Objects.equals(this.likes, channelContentDetailsRelatedPlaylists.likes) &&
        Objects.equals(this.uploads, channelContentDetailsRelatedPlaylists.uploads) &&
        Objects.equals(this.watchHistory, channelContentDetailsRelatedPlaylists.watchHistory) &&
        Objects.equals(this.watchLater, channelContentDetailsRelatedPlaylists.watchLater);
  }

  @Override
  public int hashCode() {
    return Objects.hash(favorites, likes, uploads, watchHistory, watchLater);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChannelContentDetailsRelatedPlaylists {\n");
    sb.append("    favorites: ").append(toIndentedString(favorites)).append("\n");
    sb.append("    likes: ").append(toIndentedString(likes)).append("\n");
    sb.append("    uploads: ").append(toIndentedString(uploads)).append("\n");
    sb.append("    watchHistory: ").append(toIndentedString(watchHistory)).append("\n");
    sb.append("    watchLater: ").append(toIndentedString(watchLater)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("favorites");
    openapiFields.add("likes");
    openapiFields.add("uploads");
    openapiFields.add("watchHistory");
    openapiFields.add("watchLater");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChannelContentDetailsRelatedPlaylists
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChannelContentDetailsRelatedPlaylists.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChannelContentDetailsRelatedPlaylists is not found in the empty JSON string", ChannelContentDetailsRelatedPlaylists.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChannelContentDetailsRelatedPlaylists.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChannelContentDetailsRelatedPlaylists` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("favorites") != null && !jsonObj.get("favorites").isJsonNull()) && !jsonObj.get("favorites").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `favorites` to be a primitive type in the JSON string but got `%s`", jsonObj.get("favorites").toString()));
      }
      if ((jsonObj.get("likes") != null && !jsonObj.get("likes").isJsonNull()) && !jsonObj.get("likes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `likes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("likes").toString()));
      }
      if ((jsonObj.get("uploads") != null && !jsonObj.get("uploads").isJsonNull()) && !jsonObj.get("uploads").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uploads` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uploads").toString()));
      }
      if ((jsonObj.get("watchHistory") != null && !jsonObj.get("watchHistory").isJsonNull()) && !jsonObj.get("watchHistory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `watchHistory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("watchHistory").toString()));
      }
      if ((jsonObj.get("watchLater") != null && !jsonObj.get("watchLater").isJsonNull()) && !jsonObj.get("watchLater").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `watchLater` to be a primitive type in the JSON string but got `%s`", jsonObj.get("watchLater").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChannelContentDetailsRelatedPlaylists.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChannelContentDetailsRelatedPlaylists' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChannelContentDetailsRelatedPlaylists> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChannelContentDetailsRelatedPlaylists.class));

       return (TypeAdapter<T>) new TypeAdapter<ChannelContentDetailsRelatedPlaylists>() {
           @Override
           public void write(JsonWriter out, ChannelContentDetailsRelatedPlaylists value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChannelContentDetailsRelatedPlaylists read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChannelContentDetailsRelatedPlaylists given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChannelContentDetailsRelatedPlaylists
   * @throws IOException if the JSON string is invalid with respect to ChannelContentDetailsRelatedPlaylists
   */
  public static ChannelContentDetailsRelatedPlaylists fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChannelContentDetailsRelatedPlaylists.class);
  }

  /**
   * Convert an instance of ChannelContentDetailsRelatedPlaylists to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

