/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ActivityContentDetailsBulletin;
import org.openapitools.client.model.ActivityContentDetailsChannelItem;
import org.openapitools.client.model.ActivityContentDetailsComment;
import org.openapitools.client.model.ActivityContentDetailsFavorite;
import org.openapitools.client.model.ActivityContentDetailsLike;
import org.openapitools.client.model.ActivityContentDetailsPlaylistItem;
import org.openapitools.client.model.ActivityContentDetailsPromotedItem;
import org.openapitools.client.model.ActivityContentDetailsRecommendation;
import org.openapitools.client.model.ActivityContentDetailsSocial;
import org.openapitools.client.model.ActivityContentDetailsSubscription;
import org.openapitools.client.model.ActivityContentDetailsUpload;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details about the content of an activity: the video that was shared, the channel that was subscribed to, etc.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ActivityContentDetails {
  public static final String SERIALIZED_NAME_BULLETIN = "bulletin";
  @SerializedName(SERIALIZED_NAME_BULLETIN)
  private ActivityContentDetailsBulletin bulletin;

  public static final String SERIALIZED_NAME_CHANNEL_ITEM = "channelItem";
  @SerializedName(SERIALIZED_NAME_CHANNEL_ITEM)
  private ActivityContentDetailsChannelItem channelItem;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private ActivityContentDetailsComment comment;

  public static final String SERIALIZED_NAME_FAVORITE = "favorite";
  @SerializedName(SERIALIZED_NAME_FAVORITE)
  private ActivityContentDetailsFavorite favorite;

  public static final String SERIALIZED_NAME_LIKE = "like";
  @SerializedName(SERIALIZED_NAME_LIKE)
  private ActivityContentDetailsLike like;

  public static final String SERIALIZED_NAME_PLAYLIST_ITEM = "playlistItem";
  @SerializedName(SERIALIZED_NAME_PLAYLIST_ITEM)
  private ActivityContentDetailsPlaylistItem playlistItem;

  public static final String SERIALIZED_NAME_PROMOTED_ITEM = "promotedItem";
  @SerializedName(SERIALIZED_NAME_PROMOTED_ITEM)
  private ActivityContentDetailsPromotedItem promotedItem;

  public static final String SERIALIZED_NAME_RECOMMENDATION = "recommendation";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATION)
  private ActivityContentDetailsRecommendation recommendation;

  public static final String SERIALIZED_NAME_SOCIAL = "social";
  @SerializedName(SERIALIZED_NAME_SOCIAL)
  private ActivityContentDetailsSocial social;

  public static final String SERIALIZED_NAME_SUBSCRIPTION = "subscription";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION)
  private ActivityContentDetailsSubscription subscription;

  public static final String SERIALIZED_NAME_UPLOAD = "upload";
  @SerializedName(SERIALIZED_NAME_UPLOAD)
  private ActivityContentDetailsUpload upload;

  public ActivityContentDetails() {
  }

  public ActivityContentDetails bulletin(ActivityContentDetailsBulletin bulletin) {
    this.bulletin = bulletin;
    return this;
  }

  /**
   * Get bulletin
   * @return bulletin
   */
  @javax.annotation.Nullable
  public ActivityContentDetailsBulletin getBulletin() {
    return bulletin;
  }

  public void setBulletin(ActivityContentDetailsBulletin bulletin) {
    this.bulletin = bulletin;
  }


  public ActivityContentDetails channelItem(ActivityContentDetailsChannelItem channelItem) {
    this.channelItem = channelItem;
    return this;
  }

  /**
   * Get channelItem
   * @return channelItem
   */
  @javax.annotation.Nullable
  public ActivityContentDetailsChannelItem getChannelItem() {
    return channelItem;
  }

  public void setChannelItem(ActivityContentDetailsChannelItem channelItem) {
    this.channelItem = channelItem;
  }


  public ActivityContentDetails comment(ActivityContentDetailsComment comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Get comment
   * @return comment
   */
  @javax.annotation.Nullable
  public ActivityContentDetailsComment getComment() {
    return comment;
  }

  public void setComment(ActivityContentDetailsComment comment) {
    this.comment = comment;
  }


  public ActivityContentDetails favorite(ActivityContentDetailsFavorite favorite) {
    this.favorite = favorite;
    return this;
  }

  /**
   * Get favorite
   * @return favorite
   */
  @javax.annotation.Nullable
  public ActivityContentDetailsFavorite getFavorite() {
    return favorite;
  }

  public void setFavorite(ActivityContentDetailsFavorite favorite) {
    this.favorite = favorite;
  }


  public ActivityContentDetails like(ActivityContentDetailsLike like) {
    this.like = like;
    return this;
  }

  /**
   * Get like
   * @return like
   */
  @javax.annotation.Nullable
  public ActivityContentDetailsLike getLike() {
    return like;
  }

  public void setLike(ActivityContentDetailsLike like) {
    this.like = like;
  }


  public ActivityContentDetails playlistItem(ActivityContentDetailsPlaylistItem playlistItem) {
    this.playlistItem = playlistItem;
    return this;
  }

  /**
   * Get playlistItem
   * @return playlistItem
   */
  @javax.annotation.Nullable
  public ActivityContentDetailsPlaylistItem getPlaylistItem() {
    return playlistItem;
  }

  public void setPlaylistItem(ActivityContentDetailsPlaylistItem playlistItem) {
    this.playlistItem = playlistItem;
  }


  public ActivityContentDetails promotedItem(ActivityContentDetailsPromotedItem promotedItem) {
    this.promotedItem = promotedItem;
    return this;
  }

  /**
   * Get promotedItem
   * @return promotedItem
   */
  @javax.annotation.Nullable
  public ActivityContentDetailsPromotedItem getPromotedItem() {
    return promotedItem;
  }

  public void setPromotedItem(ActivityContentDetailsPromotedItem promotedItem) {
    this.promotedItem = promotedItem;
  }


  public ActivityContentDetails recommendation(ActivityContentDetailsRecommendation recommendation) {
    this.recommendation = recommendation;
    return this;
  }

  /**
   * Get recommendation
   * @return recommendation
   */
  @javax.annotation.Nullable
  public ActivityContentDetailsRecommendation getRecommendation() {
    return recommendation;
  }

  public void setRecommendation(ActivityContentDetailsRecommendation recommendation) {
    this.recommendation = recommendation;
  }


  public ActivityContentDetails social(ActivityContentDetailsSocial social) {
    this.social = social;
    return this;
  }

  /**
   * Get social
   * @return social
   */
  @javax.annotation.Nullable
  public ActivityContentDetailsSocial getSocial() {
    return social;
  }

  public void setSocial(ActivityContentDetailsSocial social) {
    this.social = social;
  }


  public ActivityContentDetails subscription(ActivityContentDetailsSubscription subscription) {
    this.subscription = subscription;
    return this;
  }

  /**
   * Get subscription
   * @return subscription
   */
  @javax.annotation.Nullable
  public ActivityContentDetailsSubscription getSubscription() {
    return subscription;
  }

  public void setSubscription(ActivityContentDetailsSubscription subscription) {
    this.subscription = subscription;
  }


  public ActivityContentDetails upload(ActivityContentDetailsUpload upload) {
    this.upload = upload;
    return this;
  }

  /**
   * Get upload
   * @return upload
   */
  @javax.annotation.Nullable
  public ActivityContentDetailsUpload getUpload() {
    return upload;
  }

  public void setUpload(ActivityContentDetailsUpload upload) {
    this.upload = upload;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActivityContentDetails activityContentDetails = (ActivityContentDetails) o;
    return Objects.equals(this.bulletin, activityContentDetails.bulletin) &&
        Objects.equals(this.channelItem, activityContentDetails.channelItem) &&
        Objects.equals(this.comment, activityContentDetails.comment) &&
        Objects.equals(this.favorite, activityContentDetails.favorite) &&
        Objects.equals(this.like, activityContentDetails.like) &&
        Objects.equals(this.playlistItem, activityContentDetails.playlistItem) &&
        Objects.equals(this.promotedItem, activityContentDetails.promotedItem) &&
        Objects.equals(this.recommendation, activityContentDetails.recommendation) &&
        Objects.equals(this.social, activityContentDetails.social) &&
        Objects.equals(this.subscription, activityContentDetails.subscription) &&
        Objects.equals(this.upload, activityContentDetails.upload);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bulletin, channelItem, comment, favorite, like, playlistItem, promotedItem, recommendation, social, subscription, upload);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActivityContentDetails {\n");
    sb.append("    bulletin: ").append(toIndentedString(bulletin)).append("\n");
    sb.append("    channelItem: ").append(toIndentedString(channelItem)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    favorite: ").append(toIndentedString(favorite)).append("\n");
    sb.append("    like: ").append(toIndentedString(like)).append("\n");
    sb.append("    playlistItem: ").append(toIndentedString(playlistItem)).append("\n");
    sb.append("    promotedItem: ").append(toIndentedString(promotedItem)).append("\n");
    sb.append("    recommendation: ").append(toIndentedString(recommendation)).append("\n");
    sb.append("    social: ").append(toIndentedString(social)).append("\n");
    sb.append("    subscription: ").append(toIndentedString(subscription)).append("\n");
    sb.append("    upload: ").append(toIndentedString(upload)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bulletin");
    openapiFields.add("channelItem");
    openapiFields.add("comment");
    openapiFields.add("favorite");
    openapiFields.add("like");
    openapiFields.add("playlistItem");
    openapiFields.add("promotedItem");
    openapiFields.add("recommendation");
    openapiFields.add("social");
    openapiFields.add("subscription");
    openapiFields.add("upload");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ActivityContentDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ActivityContentDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActivityContentDetails is not found in the empty JSON string", ActivityContentDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ActivityContentDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActivityContentDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `bulletin`
      if (jsonObj.get("bulletin") != null && !jsonObj.get("bulletin").isJsonNull()) {
        ActivityContentDetailsBulletin.validateJsonElement(jsonObj.get("bulletin"));
      }
      // validate the optional field `channelItem`
      if (jsonObj.get("channelItem") != null && !jsonObj.get("channelItem").isJsonNull()) {
        ActivityContentDetailsChannelItem.validateJsonElement(jsonObj.get("channelItem"));
      }
      // validate the optional field `comment`
      if (jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) {
        ActivityContentDetailsComment.validateJsonElement(jsonObj.get("comment"));
      }
      // validate the optional field `favorite`
      if (jsonObj.get("favorite") != null && !jsonObj.get("favorite").isJsonNull()) {
        ActivityContentDetailsFavorite.validateJsonElement(jsonObj.get("favorite"));
      }
      // validate the optional field `like`
      if (jsonObj.get("like") != null && !jsonObj.get("like").isJsonNull()) {
        ActivityContentDetailsLike.validateJsonElement(jsonObj.get("like"));
      }
      // validate the optional field `playlistItem`
      if (jsonObj.get("playlistItem") != null && !jsonObj.get("playlistItem").isJsonNull()) {
        ActivityContentDetailsPlaylistItem.validateJsonElement(jsonObj.get("playlistItem"));
      }
      // validate the optional field `promotedItem`
      if (jsonObj.get("promotedItem") != null && !jsonObj.get("promotedItem").isJsonNull()) {
        ActivityContentDetailsPromotedItem.validateJsonElement(jsonObj.get("promotedItem"));
      }
      // validate the optional field `recommendation`
      if (jsonObj.get("recommendation") != null && !jsonObj.get("recommendation").isJsonNull()) {
        ActivityContentDetailsRecommendation.validateJsonElement(jsonObj.get("recommendation"));
      }
      // validate the optional field `social`
      if (jsonObj.get("social") != null && !jsonObj.get("social").isJsonNull()) {
        ActivityContentDetailsSocial.validateJsonElement(jsonObj.get("social"));
      }
      // validate the optional field `subscription`
      if (jsonObj.get("subscription") != null && !jsonObj.get("subscription").isJsonNull()) {
        ActivityContentDetailsSubscription.validateJsonElement(jsonObj.get("subscription"));
      }
      // validate the optional field `upload`
      if (jsonObj.get("upload") != null && !jsonObj.get("upload").isJsonNull()) {
        ActivityContentDetailsUpload.validateJsonElement(jsonObj.get("upload"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActivityContentDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActivityContentDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActivityContentDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActivityContentDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ActivityContentDetails>() {
           @Override
           public void write(JsonWriter out, ActivityContentDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActivityContentDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ActivityContentDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ActivityContentDetails
   * @throws IOException if the JSON string is invalid with respect to ActivityContentDetails
   */
  public static ActivityContentDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActivityContentDetails.class);
  }

  /**
   * Convert an instance of ActivityContentDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

