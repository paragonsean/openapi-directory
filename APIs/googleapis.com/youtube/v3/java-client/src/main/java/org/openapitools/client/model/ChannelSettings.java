/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Branding properties for the channel view.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChannelSettings {
  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_DEFAULT_LANGUAGE = "defaultLanguage";
  @SerializedName(SERIALIZED_NAME_DEFAULT_LANGUAGE)
  private String defaultLanguage;

  public static final String SERIALIZED_NAME_DEFAULT_TAB = "defaultTab";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_DEFAULT_TAB)
  private String defaultTab;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FEATURED_CHANNELS_TITLE = "featuredChannelsTitle";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_FEATURED_CHANNELS_TITLE)
  private String featuredChannelsTitle;

  public static final String SERIALIZED_NAME_FEATURED_CHANNELS_URLS = "featuredChannelsUrls";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_FEATURED_CHANNELS_URLS)
  private List<String> featuredChannelsUrls = new ArrayList<>();

  public static final String SERIALIZED_NAME_KEYWORDS = "keywords";
  @SerializedName(SERIALIZED_NAME_KEYWORDS)
  private String keywords;

  public static final String SERIALIZED_NAME_MODERATE_COMMENTS = "moderateComments";
  @SerializedName(SERIALIZED_NAME_MODERATE_COMMENTS)
  private Boolean moderateComments;

  public static final String SERIALIZED_NAME_PROFILE_COLOR = "profileColor";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_PROFILE_COLOR)
  private String profileColor;

  public static final String SERIALIZED_NAME_SHOW_BROWSE_VIEW = "showBrowseView";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_SHOW_BROWSE_VIEW)
  private Boolean showBrowseView;

  public static final String SERIALIZED_NAME_SHOW_RELATED_CHANNELS = "showRelatedChannels";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_SHOW_RELATED_CHANNELS)
  private Boolean showRelatedChannels;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TRACKING_ANALYTICS_ACCOUNT_ID = "trackingAnalyticsAccountId";
  @SerializedName(SERIALIZED_NAME_TRACKING_ANALYTICS_ACCOUNT_ID)
  private String trackingAnalyticsAccountId;

  public static final String SERIALIZED_NAME_UNSUBSCRIBED_TRAILER = "unsubscribedTrailer";
  @SerializedName(SERIALIZED_NAME_UNSUBSCRIBED_TRAILER)
  private String unsubscribedTrailer;

  public ChannelSettings() {
  }

  public ChannelSettings country(String country) {
    this.country = country;
    return this;
  }

  /**
   * The country of the channel.
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public ChannelSettings defaultLanguage(String defaultLanguage) {
    this.defaultLanguage = defaultLanguage;
    return this;
  }

  /**
   * Get defaultLanguage
   * @return defaultLanguage
   */
  @javax.annotation.Nullable
  public String getDefaultLanguage() {
    return defaultLanguage;
  }

  public void setDefaultLanguage(String defaultLanguage) {
    this.defaultLanguage = defaultLanguage;
  }


  @Deprecated
  public ChannelSettings defaultTab(String defaultTab) {
    this.defaultTab = defaultTab;
    return this;
  }

  /**
   * Which content tab users should see when viewing the channel.
   * @return defaultTab
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getDefaultTab() {
    return defaultTab;
  }

  @Deprecated
  public void setDefaultTab(String defaultTab) {
    this.defaultTab = defaultTab;
  }


  public ChannelSettings description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Specifies the channel description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  @Deprecated
  public ChannelSettings featuredChannelsTitle(String featuredChannelsTitle) {
    this.featuredChannelsTitle = featuredChannelsTitle;
    return this;
  }

  /**
   * Title for the featured channels tab.
   * @return featuredChannelsTitle
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getFeaturedChannelsTitle() {
    return featuredChannelsTitle;
  }

  @Deprecated
  public void setFeaturedChannelsTitle(String featuredChannelsTitle) {
    this.featuredChannelsTitle = featuredChannelsTitle;
  }


  @Deprecated
  public ChannelSettings featuredChannelsUrls(List<String> featuredChannelsUrls) {
    this.featuredChannelsUrls = featuredChannelsUrls;
    return this;
  }

  public ChannelSettings addFeaturedChannelsUrlsItem(String featuredChannelsUrlsItem) {
    if (this.featuredChannelsUrls == null) {
      this.featuredChannelsUrls = new ArrayList<>();
    }
    this.featuredChannelsUrls.add(featuredChannelsUrlsItem);
    return this;
  }

  /**
   * The list of featured channels.
   * @return featuredChannelsUrls
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<String> getFeaturedChannelsUrls() {
    return featuredChannelsUrls;
  }

  @Deprecated
  public void setFeaturedChannelsUrls(List<String> featuredChannelsUrls) {
    this.featuredChannelsUrls = featuredChannelsUrls;
  }


  public ChannelSettings keywords(String keywords) {
    this.keywords = keywords;
    return this;
  }

  /**
   * Lists keywords associated with the channel, comma-separated.
   * @return keywords
   */
  @javax.annotation.Nullable
  public String getKeywords() {
    return keywords;
  }

  public void setKeywords(String keywords) {
    this.keywords = keywords;
  }


  public ChannelSettings moderateComments(Boolean moderateComments) {
    this.moderateComments = moderateComments;
    return this;
  }

  /**
   * Whether user-submitted comments left on the channel page need to be approved by the channel owner to be publicly visible.
   * @return moderateComments
   */
  @javax.annotation.Nullable
  public Boolean getModerateComments() {
    return moderateComments;
  }

  public void setModerateComments(Boolean moderateComments) {
    this.moderateComments = moderateComments;
  }


  @Deprecated
  public ChannelSettings profileColor(String profileColor) {
    this.profileColor = profileColor;
    return this;
  }

  /**
   * A prominent color that can be rendered on this channel page.
   * @return profileColor
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getProfileColor() {
    return profileColor;
  }

  @Deprecated
  public void setProfileColor(String profileColor) {
    this.profileColor = profileColor;
  }


  @Deprecated
  public ChannelSettings showBrowseView(Boolean showBrowseView) {
    this.showBrowseView = showBrowseView;
    return this;
  }

  /**
   * Whether the tab to browse the videos should be displayed.
   * @return showBrowseView
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getShowBrowseView() {
    return showBrowseView;
  }

  @Deprecated
  public void setShowBrowseView(Boolean showBrowseView) {
    this.showBrowseView = showBrowseView;
  }


  @Deprecated
  public ChannelSettings showRelatedChannels(Boolean showRelatedChannels) {
    this.showRelatedChannels = showRelatedChannels;
    return this;
  }

  /**
   * Whether related channels should be proposed.
   * @return showRelatedChannels
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getShowRelatedChannels() {
    return showRelatedChannels;
  }

  @Deprecated
  public void setShowRelatedChannels(Boolean showRelatedChannels) {
    this.showRelatedChannels = showRelatedChannels;
  }


  public ChannelSettings title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Specifies the channel title.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public ChannelSettings trackingAnalyticsAccountId(String trackingAnalyticsAccountId) {
    this.trackingAnalyticsAccountId = trackingAnalyticsAccountId;
    return this;
  }

  /**
   * The ID for a Google Analytics account to track and measure traffic to the channels.
   * @return trackingAnalyticsAccountId
   */
  @javax.annotation.Nullable
  public String getTrackingAnalyticsAccountId() {
    return trackingAnalyticsAccountId;
  }

  public void setTrackingAnalyticsAccountId(String trackingAnalyticsAccountId) {
    this.trackingAnalyticsAccountId = trackingAnalyticsAccountId;
  }


  public ChannelSettings unsubscribedTrailer(String unsubscribedTrailer) {
    this.unsubscribedTrailer = unsubscribedTrailer;
    return this;
  }

  /**
   * The trailer of the channel, for users that are not subscribers.
   * @return unsubscribedTrailer
   */
  @javax.annotation.Nullable
  public String getUnsubscribedTrailer() {
    return unsubscribedTrailer;
  }

  public void setUnsubscribedTrailer(String unsubscribedTrailer) {
    this.unsubscribedTrailer = unsubscribedTrailer;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChannelSettings channelSettings = (ChannelSettings) o;
    return Objects.equals(this.country, channelSettings.country) &&
        Objects.equals(this.defaultLanguage, channelSettings.defaultLanguage) &&
        Objects.equals(this.defaultTab, channelSettings.defaultTab) &&
        Objects.equals(this.description, channelSettings.description) &&
        Objects.equals(this.featuredChannelsTitle, channelSettings.featuredChannelsTitle) &&
        Objects.equals(this.featuredChannelsUrls, channelSettings.featuredChannelsUrls) &&
        Objects.equals(this.keywords, channelSettings.keywords) &&
        Objects.equals(this.moderateComments, channelSettings.moderateComments) &&
        Objects.equals(this.profileColor, channelSettings.profileColor) &&
        Objects.equals(this.showBrowseView, channelSettings.showBrowseView) &&
        Objects.equals(this.showRelatedChannels, channelSettings.showRelatedChannels) &&
        Objects.equals(this.title, channelSettings.title) &&
        Objects.equals(this.trackingAnalyticsAccountId, channelSettings.trackingAnalyticsAccountId) &&
        Objects.equals(this.unsubscribedTrailer, channelSettings.unsubscribedTrailer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(country, defaultLanguage, defaultTab, description, featuredChannelsTitle, featuredChannelsUrls, keywords, moderateComments, profileColor, showBrowseView, showRelatedChannels, title, trackingAnalyticsAccountId, unsubscribedTrailer);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChannelSettings {\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    defaultLanguage: ").append(toIndentedString(defaultLanguage)).append("\n");
    sb.append("    defaultTab: ").append(toIndentedString(defaultTab)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    featuredChannelsTitle: ").append(toIndentedString(featuredChannelsTitle)).append("\n");
    sb.append("    featuredChannelsUrls: ").append(toIndentedString(featuredChannelsUrls)).append("\n");
    sb.append("    keywords: ").append(toIndentedString(keywords)).append("\n");
    sb.append("    moderateComments: ").append(toIndentedString(moderateComments)).append("\n");
    sb.append("    profileColor: ").append(toIndentedString(profileColor)).append("\n");
    sb.append("    showBrowseView: ").append(toIndentedString(showBrowseView)).append("\n");
    sb.append("    showRelatedChannels: ").append(toIndentedString(showRelatedChannels)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    trackingAnalyticsAccountId: ").append(toIndentedString(trackingAnalyticsAccountId)).append("\n");
    sb.append("    unsubscribedTrailer: ").append(toIndentedString(unsubscribedTrailer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("country");
    openapiFields.add("defaultLanguage");
    openapiFields.add("defaultTab");
    openapiFields.add("description");
    openapiFields.add("featuredChannelsTitle");
    openapiFields.add("featuredChannelsUrls");
    openapiFields.add("keywords");
    openapiFields.add("moderateComments");
    openapiFields.add("profileColor");
    openapiFields.add("showBrowseView");
    openapiFields.add("showRelatedChannels");
    openapiFields.add("title");
    openapiFields.add("trackingAnalyticsAccountId");
    openapiFields.add("unsubscribedTrailer");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChannelSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChannelSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChannelSettings is not found in the empty JSON string", ChannelSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChannelSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChannelSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("defaultLanguage") != null && !jsonObj.get("defaultLanguage").isJsonNull()) && !jsonObj.get("defaultLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultLanguage").toString()));
      }
      if ((jsonObj.get("defaultTab") != null && !jsonObj.get("defaultTab").isJsonNull()) && !jsonObj.get("defaultTab").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultTab` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultTab").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("featuredChannelsTitle") != null && !jsonObj.get("featuredChannelsTitle").isJsonNull()) && !jsonObj.get("featuredChannelsTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `featuredChannelsTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("featuredChannelsTitle").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("featuredChannelsUrls") != null && !jsonObj.get("featuredChannelsUrls").isJsonNull() && !jsonObj.get("featuredChannelsUrls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `featuredChannelsUrls` to be an array in the JSON string but got `%s`", jsonObj.get("featuredChannelsUrls").toString()));
      }
      if ((jsonObj.get("keywords") != null && !jsonObj.get("keywords").isJsonNull()) && !jsonObj.get("keywords").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keywords` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keywords").toString()));
      }
      if ((jsonObj.get("profileColor") != null && !jsonObj.get("profileColor").isJsonNull()) && !jsonObj.get("profileColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profileColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profileColor").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("trackingAnalyticsAccountId") != null && !jsonObj.get("trackingAnalyticsAccountId").isJsonNull()) && !jsonObj.get("trackingAnalyticsAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trackingAnalyticsAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trackingAnalyticsAccountId").toString()));
      }
      if ((jsonObj.get("unsubscribedTrailer") != null && !jsonObj.get("unsubscribedTrailer").isJsonNull()) && !jsonObj.get("unsubscribedTrailer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unsubscribedTrailer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unsubscribedTrailer").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChannelSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChannelSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChannelSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChannelSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<ChannelSettings>() {
           @Override
           public void write(JsonWriter out, ChannelSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChannelSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChannelSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChannelSettings
   * @throws IOException if the JSON string is invalid with respect to ChannelSettings
   */
  public static ChannelSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChannelSettings.class);
  }

  /**
   * Convert an instance of ChannelSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

