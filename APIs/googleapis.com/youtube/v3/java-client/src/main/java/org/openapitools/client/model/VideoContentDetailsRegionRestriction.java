/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DEPRECATED Region restriction of the video.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VideoContentDetailsRegionRestriction {
  public static final String SERIALIZED_NAME_ALLOWED = "allowed";
  @SerializedName(SERIALIZED_NAME_ALLOWED)
  private List<String> allowed = new ArrayList<>();

  public static final String SERIALIZED_NAME_BLOCKED = "blocked";
  @SerializedName(SERIALIZED_NAME_BLOCKED)
  private List<String> blocked = new ArrayList<>();

  public VideoContentDetailsRegionRestriction() {
  }

  public VideoContentDetailsRegionRestriction allowed(List<String> allowed) {
    this.allowed = allowed;
    return this;
  }

  public VideoContentDetailsRegionRestriction addAllowedItem(String allowedItem) {
    if (this.allowed == null) {
      this.allowed = new ArrayList<>();
    }
    this.allowed.add(allowedItem);
    return this;
  }

  /**
   * A list of region codes that identify countries where the video is viewable. If this property is present and a country is not listed in its value, then the video is blocked from appearing in that country. If this property is present and contains an empty list, the video is blocked in all countries.
   * @return allowed
   */
  @javax.annotation.Nullable
  public List<String> getAllowed() {
    return allowed;
  }

  public void setAllowed(List<String> allowed) {
    this.allowed = allowed;
  }


  public VideoContentDetailsRegionRestriction blocked(List<String> blocked) {
    this.blocked = blocked;
    return this;
  }

  public VideoContentDetailsRegionRestriction addBlockedItem(String blockedItem) {
    if (this.blocked == null) {
      this.blocked = new ArrayList<>();
    }
    this.blocked.add(blockedItem);
    return this;
  }

  /**
   * A list of region codes that identify countries where the video is blocked. If this property is present and a country is not listed in its value, then the video is viewable in that country. If this property is present and contains an empty list, the video is viewable in all countries.
   * @return blocked
   */
  @javax.annotation.Nullable
  public List<String> getBlocked() {
    return blocked;
  }

  public void setBlocked(List<String> blocked) {
    this.blocked = blocked;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoContentDetailsRegionRestriction videoContentDetailsRegionRestriction = (VideoContentDetailsRegionRestriction) o;
    return Objects.equals(this.allowed, videoContentDetailsRegionRestriction.allowed) &&
        Objects.equals(this.blocked, videoContentDetailsRegionRestriction.blocked);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowed, blocked);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoContentDetailsRegionRestriction {\n");
    sb.append("    allowed: ").append(toIndentedString(allowed)).append("\n");
    sb.append("    blocked: ").append(toIndentedString(blocked)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowed");
    openapiFields.add("blocked");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoContentDetailsRegionRestriction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoContentDetailsRegionRestriction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoContentDetailsRegionRestriction is not found in the empty JSON string", VideoContentDetailsRegionRestriction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoContentDetailsRegionRestriction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoContentDetailsRegionRestriction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowed") != null && !jsonObj.get("allowed").isJsonNull() && !jsonObj.get("allowed").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed` to be an array in the JSON string but got `%s`", jsonObj.get("allowed").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("blocked") != null && !jsonObj.get("blocked").isJsonNull() && !jsonObj.get("blocked").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `blocked` to be an array in the JSON string but got `%s`", jsonObj.get("blocked").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoContentDetailsRegionRestriction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoContentDetailsRegionRestriction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoContentDetailsRegionRestriction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoContentDetailsRegionRestriction.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoContentDetailsRegionRestriction>() {
           @Override
           public void write(JsonWriter out, VideoContentDetailsRegionRestriction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoContentDetailsRegionRestriction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoContentDetailsRegionRestriction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoContentDetailsRegionRestriction
   * @throws IOException if the JSON string is invalid with respect to VideoContentDetailsRegionRestriction
   */
  public static VideoContentDetailsRegionRestriction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoContentDetailsRegionRestriction.class);
  }

  /**
   * Convert an instance of VideoContentDetailsRegionRestriction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

