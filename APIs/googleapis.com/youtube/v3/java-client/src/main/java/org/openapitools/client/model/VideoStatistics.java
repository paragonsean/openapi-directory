/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Statistics about the video, such as the number of times the video was viewed or liked.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VideoStatistics {
  public static final String SERIALIZED_NAME_COMMENT_COUNT = "commentCount";
  @SerializedName(SERIALIZED_NAME_COMMENT_COUNT)
  private String commentCount;

  public static final String SERIALIZED_NAME_DISLIKE_COUNT = "dislikeCount";
  @SerializedName(SERIALIZED_NAME_DISLIKE_COUNT)
  private String dislikeCount;

  public static final String SERIALIZED_NAME_FAVORITE_COUNT = "favoriteCount";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_FAVORITE_COUNT)
  private String favoriteCount;

  public static final String SERIALIZED_NAME_LIKE_COUNT = "likeCount";
  @SerializedName(SERIALIZED_NAME_LIKE_COUNT)
  private String likeCount;

  public static final String SERIALIZED_NAME_VIEW_COUNT = "viewCount";
  @SerializedName(SERIALIZED_NAME_VIEW_COUNT)
  private String viewCount;

  public VideoStatistics() {
  }

  public VideoStatistics commentCount(String commentCount) {
    this.commentCount = commentCount;
    return this;
  }

  /**
   * The number of comments for the video.
   * @return commentCount
   */
  @javax.annotation.Nullable
  public String getCommentCount() {
    return commentCount;
  }

  public void setCommentCount(String commentCount) {
    this.commentCount = commentCount;
  }


  public VideoStatistics dislikeCount(String dislikeCount) {
    this.dislikeCount = dislikeCount;
    return this;
  }

  /**
   * The number of users who have indicated that they disliked the video by giving it a negative rating.
   * @return dislikeCount
   */
  @javax.annotation.Nullable
  public String getDislikeCount() {
    return dislikeCount;
  }

  public void setDislikeCount(String dislikeCount) {
    this.dislikeCount = dislikeCount;
  }


  @Deprecated
  public VideoStatistics favoriteCount(String favoriteCount) {
    this.favoriteCount = favoriteCount;
    return this;
  }

  /**
   * The number of users who currently have the video marked as a favorite video.
   * @return favoriteCount
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getFavoriteCount() {
    return favoriteCount;
  }

  @Deprecated
  public void setFavoriteCount(String favoriteCount) {
    this.favoriteCount = favoriteCount;
  }


  public VideoStatistics likeCount(String likeCount) {
    this.likeCount = likeCount;
    return this;
  }

  /**
   * The number of users who have indicated that they liked the video by giving it a positive rating.
   * @return likeCount
   */
  @javax.annotation.Nullable
  public String getLikeCount() {
    return likeCount;
  }

  public void setLikeCount(String likeCount) {
    this.likeCount = likeCount;
  }


  public VideoStatistics viewCount(String viewCount) {
    this.viewCount = viewCount;
    return this;
  }

  /**
   * The number of times the video has been viewed.
   * @return viewCount
   */
  @javax.annotation.Nullable
  public String getViewCount() {
    return viewCount;
  }

  public void setViewCount(String viewCount) {
    this.viewCount = viewCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoStatistics videoStatistics = (VideoStatistics) o;
    return Objects.equals(this.commentCount, videoStatistics.commentCount) &&
        Objects.equals(this.dislikeCount, videoStatistics.dislikeCount) &&
        Objects.equals(this.favoriteCount, videoStatistics.favoriteCount) &&
        Objects.equals(this.likeCount, videoStatistics.likeCount) &&
        Objects.equals(this.viewCount, videoStatistics.viewCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commentCount, dislikeCount, favoriteCount, likeCount, viewCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoStatistics {\n");
    sb.append("    commentCount: ").append(toIndentedString(commentCount)).append("\n");
    sb.append("    dislikeCount: ").append(toIndentedString(dislikeCount)).append("\n");
    sb.append("    favoriteCount: ").append(toIndentedString(favoriteCount)).append("\n");
    sb.append("    likeCount: ").append(toIndentedString(likeCount)).append("\n");
    sb.append("    viewCount: ").append(toIndentedString(viewCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commentCount");
    openapiFields.add("dislikeCount");
    openapiFields.add("favoriteCount");
    openapiFields.add("likeCount");
    openapiFields.add("viewCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoStatistics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoStatistics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoStatistics is not found in the empty JSON string", VideoStatistics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoStatistics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoStatistics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("commentCount") != null && !jsonObj.get("commentCount").isJsonNull()) && !jsonObj.get("commentCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commentCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commentCount").toString()));
      }
      if ((jsonObj.get("dislikeCount") != null && !jsonObj.get("dislikeCount").isJsonNull()) && !jsonObj.get("dislikeCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dislikeCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dislikeCount").toString()));
      }
      if ((jsonObj.get("favoriteCount") != null && !jsonObj.get("favoriteCount").isJsonNull()) && !jsonObj.get("favoriteCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `favoriteCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("favoriteCount").toString()));
      }
      if ((jsonObj.get("likeCount") != null && !jsonObj.get("likeCount").isJsonNull()) && !jsonObj.get("likeCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `likeCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("likeCount").toString()));
      }
      if ((jsonObj.get("viewCount") != null && !jsonObj.get("viewCount").isJsonNull()) && !jsonObj.get("viewCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `viewCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("viewCount").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoStatistics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoStatistics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoStatistics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoStatistics.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoStatistics>() {
           @Override
           public void write(JsonWriter out, VideoStatistics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoStatistics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoStatistics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoStatistics
   * @throws IOException if the JSON string is invalid with respect to VideoStatistics
   */
  public static VideoStatistics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoStatistics.class);
  }

  /**
   * Convert an instance of VideoStatistics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

