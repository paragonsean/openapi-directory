/*
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Schedule to insert cuepoints into a broadcast by ads automator.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:06.328357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CuepointSchedule {
  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_PAUSE_ADS_UNTIL = "pauseAdsUntil";
  @SerializedName(SERIALIZED_NAME_PAUSE_ADS_UNTIL)
  private String pauseAdsUntil;

  public static final String SERIALIZED_NAME_REPEAT_INTERVAL_SECS = "repeatIntervalSecs";
  @SerializedName(SERIALIZED_NAME_REPEAT_INTERVAL_SECS)
  private Integer repeatIntervalSecs;

  /**
   * The strategy to use when scheduling cuepoints.
   */
  @JsonAdapter(ScheduleStrategyEnum.Adapter.class)
  public enum ScheduleStrategyEnum {
    SCHEDULE_STRATEGY_UNSPECIFIED("scheduleStrategyUnspecified"),
    
    CONCURRENT("concurrent"),
    
    NON_CONCURRENT("nonConcurrent");

    private String value;

    ScheduleStrategyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScheduleStrategyEnum fromValue(String value) {
      for (ScheduleStrategyEnum b : ScheduleStrategyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ScheduleStrategyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScheduleStrategyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScheduleStrategyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ScheduleStrategyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ScheduleStrategyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SCHEDULE_STRATEGY = "scheduleStrategy";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_STRATEGY)
  private ScheduleStrategyEnum scheduleStrategy;

  public CuepointSchedule() {
  }

  public CuepointSchedule enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * This field is semantically required. If it is set false or not set, other fields in this message will be ignored.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public CuepointSchedule pauseAdsUntil(String pauseAdsUntil) {
    this.pauseAdsUntil = pauseAdsUntil;
    return this;
  }

  /**
   * If set, automatic cuepoint insertion is paused until this timestamp (\&quot;No Ad Zone\&quot;). The value is specified in ISO 8601 format.
   * @return pauseAdsUntil
   */
  @javax.annotation.Nullable
  public String getPauseAdsUntil() {
    return pauseAdsUntil;
  }

  public void setPauseAdsUntil(String pauseAdsUntil) {
    this.pauseAdsUntil = pauseAdsUntil;
  }


  public CuepointSchedule repeatIntervalSecs(Integer repeatIntervalSecs) {
    this.repeatIntervalSecs = repeatIntervalSecs;
    return this;
  }

  /**
   * Interval frequency in seconds that api uses to insert cuepoints automatically.
   * @return repeatIntervalSecs
   */
  @javax.annotation.Nullable
  public Integer getRepeatIntervalSecs() {
    return repeatIntervalSecs;
  }

  public void setRepeatIntervalSecs(Integer repeatIntervalSecs) {
    this.repeatIntervalSecs = repeatIntervalSecs;
  }


  public CuepointSchedule scheduleStrategy(ScheduleStrategyEnum scheduleStrategy) {
    this.scheduleStrategy = scheduleStrategy;
    return this;
  }

  /**
   * The strategy to use when scheduling cuepoints.
   * @return scheduleStrategy
   */
  @javax.annotation.Nullable
  public ScheduleStrategyEnum getScheduleStrategy() {
    return scheduleStrategy;
  }

  public void setScheduleStrategy(ScheduleStrategyEnum scheduleStrategy) {
    this.scheduleStrategy = scheduleStrategy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CuepointSchedule cuepointSchedule = (CuepointSchedule) o;
    return Objects.equals(this.enabled, cuepointSchedule.enabled) &&
        Objects.equals(this.pauseAdsUntil, cuepointSchedule.pauseAdsUntil) &&
        Objects.equals(this.repeatIntervalSecs, cuepointSchedule.repeatIntervalSecs) &&
        Objects.equals(this.scheduleStrategy, cuepointSchedule.scheduleStrategy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, pauseAdsUntil, repeatIntervalSecs, scheduleStrategy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CuepointSchedule {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    pauseAdsUntil: ").append(toIndentedString(pauseAdsUntil)).append("\n");
    sb.append("    repeatIntervalSecs: ").append(toIndentedString(repeatIntervalSecs)).append("\n");
    sb.append("    scheduleStrategy: ").append(toIndentedString(scheduleStrategy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enabled");
    openapiFields.add("pauseAdsUntil");
    openapiFields.add("repeatIntervalSecs");
    openapiFields.add("scheduleStrategy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CuepointSchedule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CuepointSchedule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CuepointSchedule is not found in the empty JSON string", CuepointSchedule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CuepointSchedule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CuepointSchedule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("pauseAdsUntil") != null && !jsonObj.get("pauseAdsUntil").isJsonNull()) && !jsonObj.get("pauseAdsUntil").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pauseAdsUntil` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pauseAdsUntil").toString()));
      }
      if ((jsonObj.get("scheduleStrategy") != null && !jsonObj.get("scheduleStrategy").isJsonNull()) && !jsonObj.get("scheduleStrategy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduleStrategy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheduleStrategy").toString()));
      }
      // validate the optional field `scheduleStrategy`
      if (jsonObj.get("scheduleStrategy") != null && !jsonObj.get("scheduleStrategy").isJsonNull()) {
        ScheduleStrategyEnum.validateJsonElement(jsonObj.get("scheduleStrategy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CuepointSchedule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CuepointSchedule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CuepointSchedule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CuepointSchedule.class));

       return (TypeAdapter<T>) new TypeAdapter<CuepointSchedule>() {
           @Override
           public void write(JsonWriter out, CuepointSchedule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CuepointSchedule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CuepointSchedule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CuepointSchedule
   * @throws IOException if the JSON string is invalid with respect to CuepointSchedule
   */
  public static CuepointSchedule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CuepointSchedule.class);
  }

  /**
   * Convert an instance of CuepointSchedule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

