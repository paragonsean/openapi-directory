# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChannelSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, default_language: str=None, default_tab: str=None, description: str=None, featured_channels_title: str=None, featured_channels_urls: List[str]=None, keywords: str=None, moderate_comments: bool=None, profile_color: str=None, show_browse_view: bool=None, show_related_channels: bool=None, title: str=None, tracking_analytics_account_id: str=None, unsubscribed_trailer: str=None):
        """ChannelSettings - a model defined in OpenAPI

        :param country: The country of this ChannelSettings.
        :param default_language: The default_language of this ChannelSettings.
        :param default_tab: The default_tab of this ChannelSettings.
        :param description: The description of this ChannelSettings.
        :param featured_channels_title: The featured_channels_title of this ChannelSettings.
        :param featured_channels_urls: The featured_channels_urls of this ChannelSettings.
        :param keywords: The keywords of this ChannelSettings.
        :param moderate_comments: The moderate_comments of this ChannelSettings.
        :param profile_color: The profile_color of this ChannelSettings.
        :param show_browse_view: The show_browse_view of this ChannelSettings.
        :param show_related_channels: The show_related_channels of this ChannelSettings.
        :param title: The title of this ChannelSettings.
        :param tracking_analytics_account_id: The tracking_analytics_account_id of this ChannelSettings.
        :param unsubscribed_trailer: The unsubscribed_trailer of this ChannelSettings.
        """
        self.openapi_types = {
            'country': str,
            'default_language': str,
            'default_tab': str,
            'description': str,
            'featured_channels_title': str,
            'featured_channels_urls': List[str],
            'keywords': str,
            'moderate_comments': bool,
            'profile_color': str,
            'show_browse_view': bool,
            'show_related_channels': bool,
            'title': str,
            'tracking_analytics_account_id': str,
            'unsubscribed_trailer': str
        }

        self.attribute_map = {
            'country': 'country',
            'default_language': 'defaultLanguage',
            'default_tab': 'defaultTab',
            'description': 'description',
            'featured_channels_title': 'featuredChannelsTitle',
            'featured_channels_urls': 'featuredChannelsUrls',
            'keywords': 'keywords',
            'moderate_comments': 'moderateComments',
            'profile_color': 'profileColor',
            'show_browse_view': 'showBrowseView',
            'show_related_channels': 'showRelatedChannels',
            'title': 'title',
            'tracking_analytics_account_id': 'trackingAnalyticsAccountId',
            'unsubscribed_trailer': 'unsubscribedTrailer'
        }

        self._country = country
        self._default_language = default_language
        self._default_tab = default_tab
        self._description = description
        self._featured_channels_title = featured_channels_title
        self._featured_channels_urls = featured_channels_urls
        self._keywords = keywords
        self._moderate_comments = moderate_comments
        self._profile_color = profile_color
        self._show_browse_view = show_browse_view
        self._show_related_channels = show_related_channels
        self._title = title
        self._tracking_analytics_account_id = tracking_analytics_account_id
        self._unsubscribed_trailer = unsubscribed_trailer

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChannelSettings of this ChannelSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this ChannelSettings.

        The country of the channel.

        :return: The country of this ChannelSettings.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this ChannelSettings.

        The country of the channel.

        :param country: The country of this ChannelSettings.
        :type country: str
        """

        self._country = country

    @property
    def default_language(self):
        """Gets the default_language of this ChannelSettings.


        :return: The default_language of this ChannelSettings.
        :rtype: str
        """
        return self._default_language

    @default_language.setter
    def default_language(self, default_language):
        """Sets the default_language of this ChannelSettings.


        :param default_language: The default_language of this ChannelSettings.
        :type default_language: str
        """

        self._default_language = default_language

    @property
    def default_tab(self):
        """Gets the default_tab of this ChannelSettings.

        Which content tab users should see when viewing the channel.

        :return: The default_tab of this ChannelSettings.
        :rtype: str
        """
        return self._default_tab

    @default_tab.setter
    def default_tab(self, default_tab):
        """Sets the default_tab of this ChannelSettings.

        Which content tab users should see when viewing the channel.

        :param default_tab: The default_tab of this ChannelSettings.
        :type default_tab: str
        """

        self._default_tab = default_tab

    @property
    def description(self):
        """Gets the description of this ChannelSettings.

        Specifies the channel description.

        :return: The description of this ChannelSettings.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ChannelSettings.

        Specifies the channel description.

        :param description: The description of this ChannelSettings.
        :type description: str
        """

        self._description = description

    @property
    def featured_channels_title(self):
        """Gets the featured_channels_title of this ChannelSettings.

        Title for the featured channels tab.

        :return: The featured_channels_title of this ChannelSettings.
        :rtype: str
        """
        return self._featured_channels_title

    @featured_channels_title.setter
    def featured_channels_title(self, featured_channels_title):
        """Sets the featured_channels_title of this ChannelSettings.

        Title for the featured channels tab.

        :param featured_channels_title: The featured_channels_title of this ChannelSettings.
        :type featured_channels_title: str
        """

        self._featured_channels_title = featured_channels_title

    @property
    def featured_channels_urls(self):
        """Gets the featured_channels_urls of this ChannelSettings.

        The list of featured channels.

        :return: The featured_channels_urls of this ChannelSettings.
        :rtype: List[str]
        """
        return self._featured_channels_urls

    @featured_channels_urls.setter
    def featured_channels_urls(self, featured_channels_urls):
        """Sets the featured_channels_urls of this ChannelSettings.

        The list of featured channels.

        :param featured_channels_urls: The featured_channels_urls of this ChannelSettings.
        :type featured_channels_urls: List[str]
        """

        self._featured_channels_urls = featured_channels_urls

    @property
    def keywords(self):
        """Gets the keywords of this ChannelSettings.

        Lists keywords associated with the channel, comma-separated.

        :return: The keywords of this ChannelSettings.
        :rtype: str
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this ChannelSettings.

        Lists keywords associated with the channel, comma-separated.

        :param keywords: The keywords of this ChannelSettings.
        :type keywords: str
        """

        self._keywords = keywords

    @property
    def moderate_comments(self):
        """Gets the moderate_comments of this ChannelSettings.

        Whether user-submitted comments left on the channel page need to be approved by the channel owner to be publicly visible.

        :return: The moderate_comments of this ChannelSettings.
        :rtype: bool
        """
        return self._moderate_comments

    @moderate_comments.setter
    def moderate_comments(self, moderate_comments):
        """Sets the moderate_comments of this ChannelSettings.

        Whether user-submitted comments left on the channel page need to be approved by the channel owner to be publicly visible.

        :param moderate_comments: The moderate_comments of this ChannelSettings.
        :type moderate_comments: bool
        """

        self._moderate_comments = moderate_comments

    @property
    def profile_color(self):
        """Gets the profile_color of this ChannelSettings.

        A prominent color that can be rendered on this channel page.

        :return: The profile_color of this ChannelSettings.
        :rtype: str
        """
        return self._profile_color

    @profile_color.setter
    def profile_color(self, profile_color):
        """Sets the profile_color of this ChannelSettings.

        A prominent color that can be rendered on this channel page.

        :param profile_color: The profile_color of this ChannelSettings.
        :type profile_color: str
        """

        self._profile_color = profile_color

    @property
    def show_browse_view(self):
        """Gets the show_browse_view of this ChannelSettings.

        Whether the tab to browse the videos should be displayed.

        :return: The show_browse_view of this ChannelSettings.
        :rtype: bool
        """
        return self._show_browse_view

    @show_browse_view.setter
    def show_browse_view(self, show_browse_view):
        """Sets the show_browse_view of this ChannelSettings.

        Whether the tab to browse the videos should be displayed.

        :param show_browse_view: The show_browse_view of this ChannelSettings.
        :type show_browse_view: bool
        """

        self._show_browse_view = show_browse_view

    @property
    def show_related_channels(self):
        """Gets the show_related_channels of this ChannelSettings.

        Whether related channels should be proposed.

        :return: The show_related_channels of this ChannelSettings.
        :rtype: bool
        """
        return self._show_related_channels

    @show_related_channels.setter
    def show_related_channels(self, show_related_channels):
        """Sets the show_related_channels of this ChannelSettings.

        Whether related channels should be proposed.

        :param show_related_channels: The show_related_channels of this ChannelSettings.
        :type show_related_channels: bool
        """

        self._show_related_channels = show_related_channels

    @property
    def title(self):
        """Gets the title of this ChannelSettings.

        Specifies the channel title.

        :return: The title of this ChannelSettings.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ChannelSettings.

        Specifies the channel title.

        :param title: The title of this ChannelSettings.
        :type title: str
        """

        self._title = title

    @property
    def tracking_analytics_account_id(self):
        """Gets the tracking_analytics_account_id of this ChannelSettings.

        The ID for a Google Analytics account to track and measure traffic to the channels.

        :return: The tracking_analytics_account_id of this ChannelSettings.
        :rtype: str
        """
        return self._tracking_analytics_account_id

    @tracking_analytics_account_id.setter
    def tracking_analytics_account_id(self, tracking_analytics_account_id):
        """Sets the tracking_analytics_account_id of this ChannelSettings.

        The ID for a Google Analytics account to track and measure traffic to the channels.

        :param tracking_analytics_account_id: The tracking_analytics_account_id of this ChannelSettings.
        :type tracking_analytics_account_id: str
        """

        self._tracking_analytics_account_id = tracking_analytics_account_id

    @property
    def unsubscribed_trailer(self):
        """Gets the unsubscribed_trailer of this ChannelSettings.

        The trailer of the channel, for users that are not subscribers.

        :return: The unsubscribed_trailer of this ChannelSettings.
        :rtype: str
        """
        return self._unsubscribed_trailer

    @unsubscribed_trailer.setter
    def unsubscribed_trailer(self, unsubscribed_trailer):
        """Sets the unsubscribed_trailer of this ChannelSettings.

        The trailer of the channel, for users that are not subscribers.

        :param unsubscribed_trailer: The unsubscribed_trailer of this ChannelSettings.
        :type unsubscribed_trailer: str
        """

        self._unsubscribed_trailer = unsubscribed_trailer
