# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VideoStatistics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comment_count: str=None, dislike_count: str=None, favorite_count: str=None, like_count: str=None, view_count: str=None):
        """VideoStatistics - a model defined in OpenAPI

        :param comment_count: The comment_count of this VideoStatistics.
        :param dislike_count: The dislike_count of this VideoStatistics.
        :param favorite_count: The favorite_count of this VideoStatistics.
        :param like_count: The like_count of this VideoStatistics.
        :param view_count: The view_count of this VideoStatistics.
        """
        self.openapi_types = {
            'comment_count': str,
            'dislike_count': str,
            'favorite_count': str,
            'like_count': str,
            'view_count': str
        }

        self.attribute_map = {
            'comment_count': 'commentCount',
            'dislike_count': 'dislikeCount',
            'favorite_count': 'favoriteCount',
            'like_count': 'likeCount',
            'view_count': 'viewCount'
        }

        self._comment_count = comment_count
        self._dislike_count = dislike_count
        self._favorite_count = favorite_count
        self._like_count = like_count
        self._view_count = view_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoStatistics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VideoStatistics of this VideoStatistics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comment_count(self):
        """Gets the comment_count of this VideoStatistics.

        The number of comments for the video.

        :return: The comment_count of this VideoStatistics.
        :rtype: str
        """
        return self._comment_count

    @comment_count.setter
    def comment_count(self, comment_count):
        """Sets the comment_count of this VideoStatistics.

        The number of comments for the video.

        :param comment_count: The comment_count of this VideoStatistics.
        :type comment_count: str
        """

        self._comment_count = comment_count

    @property
    def dislike_count(self):
        """Gets the dislike_count of this VideoStatistics.

        The number of users who have indicated that they disliked the video by giving it a negative rating.

        :return: The dislike_count of this VideoStatistics.
        :rtype: str
        """
        return self._dislike_count

    @dislike_count.setter
    def dislike_count(self, dislike_count):
        """Sets the dislike_count of this VideoStatistics.

        The number of users who have indicated that they disliked the video by giving it a negative rating.

        :param dislike_count: The dislike_count of this VideoStatistics.
        :type dislike_count: str
        """

        self._dislike_count = dislike_count

    @property
    def favorite_count(self):
        """Gets the favorite_count of this VideoStatistics.

        The number of users who currently have the video marked as a favorite video.

        :return: The favorite_count of this VideoStatistics.
        :rtype: str
        """
        return self._favorite_count

    @favorite_count.setter
    def favorite_count(self, favorite_count):
        """Sets the favorite_count of this VideoStatistics.

        The number of users who currently have the video marked as a favorite video.

        :param favorite_count: The favorite_count of this VideoStatistics.
        :type favorite_count: str
        """

        self._favorite_count = favorite_count

    @property
    def like_count(self):
        """Gets the like_count of this VideoStatistics.

        The number of users who have indicated that they liked the video by giving it a positive rating.

        :return: The like_count of this VideoStatistics.
        :rtype: str
        """
        return self._like_count

    @like_count.setter
    def like_count(self, like_count):
        """Sets the like_count of this VideoStatistics.

        The number of users who have indicated that they liked the video by giving it a positive rating.

        :param like_count: The like_count of this VideoStatistics.
        :type like_count: str
        """

        self._like_count = like_count

    @property
    def view_count(self):
        """Gets the view_count of this VideoStatistics.

        The number of times the video has been viewed.

        :return: The view_count of this VideoStatistics.
        :rtype: str
        """
        return self._view_count

    @view_count.setter
    def view_count(self, view_count):
        """Sets the view_count of this VideoStatistics.

        The number of times the video has been viewed.

        :param view_count: The view_count of this VideoStatistics.
        :type view_count: str
        """

        self._view_count = view_count
