# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_audit_details import ChannelAuditDetails
from openapi_server.models.channel_branding_settings import ChannelBrandingSettings
from openapi_server.models.channel_content_details import ChannelContentDetails
from openapi_server.models.channel_content_owner_details import ChannelContentOwnerDetails
from openapi_server.models.channel_conversion_pings import ChannelConversionPings
from openapi_server.models.channel_localization import ChannelLocalization
from openapi_server.models.channel_snippet import ChannelSnippet
from openapi_server.models.channel_statistics import ChannelStatistics
from openapi_server.models.channel_status import ChannelStatus
from openapi_server.models.channel_topic_details import ChannelTopicDetails
from openapi_server import util


class Channel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audit_details: ChannelAuditDetails=None, branding_settings: ChannelBrandingSettings=None, content_details: ChannelContentDetails=None, content_owner_details: ChannelContentOwnerDetails=None, conversion_pings: ChannelConversionPings=None, etag: str=None, id: str=None, kind: str='youtube#channel', localizations: Dict[str, ChannelLocalization]=None, snippet: ChannelSnippet=None, statistics: ChannelStatistics=None, status: ChannelStatus=None, topic_details: ChannelTopicDetails=None):
        """Channel - a model defined in OpenAPI

        :param audit_details: The audit_details of this Channel.
        :param branding_settings: The branding_settings of this Channel.
        :param content_details: The content_details of this Channel.
        :param content_owner_details: The content_owner_details of this Channel.
        :param conversion_pings: The conversion_pings of this Channel.
        :param etag: The etag of this Channel.
        :param id: The id of this Channel.
        :param kind: The kind of this Channel.
        :param localizations: The localizations of this Channel.
        :param snippet: The snippet of this Channel.
        :param statistics: The statistics of this Channel.
        :param status: The status of this Channel.
        :param topic_details: The topic_details of this Channel.
        """
        self.openapi_types = {
            'audit_details': ChannelAuditDetails,
            'branding_settings': ChannelBrandingSettings,
            'content_details': ChannelContentDetails,
            'content_owner_details': ChannelContentOwnerDetails,
            'conversion_pings': ChannelConversionPings,
            'etag': str,
            'id': str,
            'kind': str,
            'localizations': Dict[str, ChannelLocalization],
            'snippet': ChannelSnippet,
            'statistics': ChannelStatistics,
            'status': ChannelStatus,
            'topic_details': ChannelTopicDetails
        }

        self.attribute_map = {
            'audit_details': 'auditDetails',
            'branding_settings': 'brandingSettings',
            'content_details': 'contentDetails',
            'content_owner_details': 'contentOwnerDetails',
            'conversion_pings': 'conversionPings',
            'etag': 'etag',
            'id': 'id',
            'kind': 'kind',
            'localizations': 'localizations',
            'snippet': 'snippet',
            'statistics': 'statistics',
            'status': 'status',
            'topic_details': 'topicDetails'
        }

        self._audit_details = audit_details
        self._branding_settings = branding_settings
        self._content_details = content_details
        self._content_owner_details = content_owner_details
        self._conversion_pings = conversion_pings
        self._etag = etag
        self._id = id
        self._kind = kind
        self._localizations = localizations
        self._snippet = snippet
        self._statistics = statistics
        self._status = status
        self._topic_details = topic_details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Channel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Channel of this Channel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audit_details(self):
        """Gets the audit_details of this Channel.


        :return: The audit_details of this Channel.
        :rtype: ChannelAuditDetails
        """
        return self._audit_details

    @audit_details.setter
    def audit_details(self, audit_details):
        """Sets the audit_details of this Channel.


        :param audit_details: The audit_details of this Channel.
        :type audit_details: ChannelAuditDetails
        """

        self._audit_details = audit_details

    @property
    def branding_settings(self):
        """Gets the branding_settings of this Channel.


        :return: The branding_settings of this Channel.
        :rtype: ChannelBrandingSettings
        """
        return self._branding_settings

    @branding_settings.setter
    def branding_settings(self, branding_settings):
        """Sets the branding_settings of this Channel.


        :param branding_settings: The branding_settings of this Channel.
        :type branding_settings: ChannelBrandingSettings
        """

        self._branding_settings = branding_settings

    @property
    def content_details(self):
        """Gets the content_details of this Channel.


        :return: The content_details of this Channel.
        :rtype: ChannelContentDetails
        """
        return self._content_details

    @content_details.setter
    def content_details(self, content_details):
        """Sets the content_details of this Channel.


        :param content_details: The content_details of this Channel.
        :type content_details: ChannelContentDetails
        """

        self._content_details = content_details

    @property
    def content_owner_details(self):
        """Gets the content_owner_details of this Channel.


        :return: The content_owner_details of this Channel.
        :rtype: ChannelContentOwnerDetails
        """
        return self._content_owner_details

    @content_owner_details.setter
    def content_owner_details(self, content_owner_details):
        """Sets the content_owner_details of this Channel.


        :param content_owner_details: The content_owner_details of this Channel.
        :type content_owner_details: ChannelContentOwnerDetails
        """

        self._content_owner_details = content_owner_details

    @property
    def conversion_pings(self):
        """Gets the conversion_pings of this Channel.


        :return: The conversion_pings of this Channel.
        :rtype: ChannelConversionPings
        """
        return self._conversion_pings

    @conversion_pings.setter
    def conversion_pings(self, conversion_pings):
        """Sets the conversion_pings of this Channel.


        :param conversion_pings: The conversion_pings of this Channel.
        :type conversion_pings: ChannelConversionPings
        """

        self._conversion_pings = conversion_pings

    @property
    def etag(self):
        """Gets the etag of this Channel.

        Etag of this resource.

        :return: The etag of this Channel.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Channel.

        Etag of this resource.

        :param etag: The etag of this Channel.
        :type etag: str
        """

        self._etag = etag

    @property
    def id(self):
        """Gets the id of this Channel.

        The ID that YouTube uses to uniquely identify the channel.

        :return: The id of this Channel.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Channel.

        The ID that YouTube uses to uniquely identify the channel.

        :param id: The id of this Channel.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this Channel.

        Identifies what kind of resource this is. Value: the fixed string \"youtube#channel\".

        :return: The kind of this Channel.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Channel.

        Identifies what kind of resource this is. Value: the fixed string \"youtube#channel\".

        :param kind: The kind of this Channel.
        :type kind: str
        """

        self._kind = kind

    @property
    def localizations(self):
        """Gets the localizations of this Channel.

        Localizations for different languages

        :return: The localizations of this Channel.
        :rtype: Dict[str, ChannelLocalization]
        """
        return self._localizations

    @localizations.setter
    def localizations(self, localizations):
        """Sets the localizations of this Channel.

        Localizations for different languages

        :param localizations: The localizations of this Channel.
        :type localizations: Dict[str, ChannelLocalization]
        """

        self._localizations = localizations

    @property
    def snippet(self):
        """Gets the snippet of this Channel.


        :return: The snippet of this Channel.
        :rtype: ChannelSnippet
        """
        return self._snippet

    @snippet.setter
    def snippet(self, snippet):
        """Sets the snippet of this Channel.


        :param snippet: The snippet of this Channel.
        :type snippet: ChannelSnippet
        """

        self._snippet = snippet

    @property
    def statistics(self):
        """Gets the statistics of this Channel.


        :return: The statistics of this Channel.
        :rtype: ChannelStatistics
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this Channel.


        :param statistics: The statistics of this Channel.
        :type statistics: ChannelStatistics
        """

        self._statistics = statistics

    @property
    def status(self):
        """Gets the status of this Channel.


        :return: The status of this Channel.
        :rtype: ChannelStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Channel.


        :param status: The status of this Channel.
        :type status: ChannelStatus
        """

        self._status = status

    @property
    def topic_details(self):
        """Gets the topic_details of this Channel.


        :return: The topic_details of this Channel.
        :rtype: ChannelTopicDetails
        """
        return self._topic_details

    @topic_details.setter
    def topic_details(self, topic_details):
        """Sets the topic_details of this Channel.


        :param topic_details: The topic_details of this Channel.
        :type topic_details: ChannelTopicDetails
        """

        self._topic_details = topic_details
