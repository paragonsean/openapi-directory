# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.video_suggestions_tag_suggestion import VideoSuggestionsTagSuggestion
from openapi_server import util


class VideoSuggestions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, editor_suggestions: List[str]=None, processing_errors: List[str]=None, processing_hints: List[str]=None, processing_warnings: List[str]=None, tag_suggestions: List[VideoSuggestionsTagSuggestion]=None):
        """VideoSuggestions - a model defined in OpenAPI

        :param editor_suggestions: The editor_suggestions of this VideoSuggestions.
        :param processing_errors: The processing_errors of this VideoSuggestions.
        :param processing_hints: The processing_hints of this VideoSuggestions.
        :param processing_warnings: The processing_warnings of this VideoSuggestions.
        :param tag_suggestions: The tag_suggestions of this VideoSuggestions.
        """
        self.openapi_types = {
            'editor_suggestions': List[str],
            'processing_errors': List[str],
            'processing_hints': List[str],
            'processing_warnings': List[str],
            'tag_suggestions': List[VideoSuggestionsTagSuggestion]
        }

        self.attribute_map = {
            'editor_suggestions': 'editorSuggestions',
            'processing_errors': 'processingErrors',
            'processing_hints': 'processingHints',
            'processing_warnings': 'processingWarnings',
            'tag_suggestions': 'tagSuggestions'
        }

        self._editor_suggestions = editor_suggestions
        self._processing_errors = processing_errors
        self._processing_hints = processing_hints
        self._processing_warnings = processing_warnings
        self._tag_suggestions = tag_suggestions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoSuggestions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VideoSuggestions of this VideoSuggestions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def editor_suggestions(self):
        """Gets the editor_suggestions of this VideoSuggestions.

        A list of video editing operations that might improve the video quality or playback experience of the uploaded video.

        :return: The editor_suggestions of this VideoSuggestions.
        :rtype: List[str]
        """
        return self._editor_suggestions

    @editor_suggestions.setter
    def editor_suggestions(self, editor_suggestions):
        """Sets the editor_suggestions of this VideoSuggestions.

        A list of video editing operations that might improve the video quality or playback experience of the uploaded video.

        :param editor_suggestions: The editor_suggestions of this VideoSuggestions.
        :type editor_suggestions: List[str]
        """
        allowed_values = ["videoAutoLevels", "videoStabilize", "videoCrop", "audioQuietAudioSwap"]  # noqa: E501
        if not set(editor_suggestions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `editor_suggestions` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(editor_suggestions) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._editor_suggestions = editor_suggestions

    @property
    def processing_errors(self):
        """Gets the processing_errors of this VideoSuggestions.

        A list of errors that will prevent YouTube from successfully processing the uploaded video video. These errors indicate that, regardless of the video's current processing status, eventually, that status will almost certainly be failed.

        :return: The processing_errors of this VideoSuggestions.
        :rtype: List[str]
        """
        return self._processing_errors

    @processing_errors.setter
    def processing_errors(self, processing_errors):
        """Sets the processing_errors of this VideoSuggestions.

        A list of errors that will prevent YouTube from successfully processing the uploaded video video. These errors indicate that, regardless of the video's current processing status, eventually, that status will almost certainly be failed.

        :param processing_errors: The processing_errors of this VideoSuggestions.
        :type processing_errors: List[str]
        """
        allowed_values = ["audioFile", "imageFile", "projectFile", "notAVideoFile", "docFile", "archiveFile", "unsupportedSpatialAudioLayout"]  # noqa: E501
        if not set(processing_errors).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `processing_errors` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(processing_errors) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._processing_errors = processing_errors

    @property
    def processing_hints(self):
        """Gets the processing_hints of this VideoSuggestions.

        A list of suggestions that may improve YouTube's ability to process the video.

        :return: The processing_hints of this VideoSuggestions.
        :rtype: List[str]
        """
        return self._processing_hints

    @processing_hints.setter
    def processing_hints(self, processing_hints):
        """Sets the processing_hints of this VideoSuggestions.

        A list of suggestions that may improve YouTube's ability to process the video.

        :param processing_hints: The processing_hints of this VideoSuggestions.
        :type processing_hints: List[str]
        """
        allowed_values = ["nonStreamableMov", "sendBestQualityVideo", "sphericalVideo", "spatialAudio", "vrVideo", "hdrVideo"]  # noqa: E501
        if not set(processing_hints).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `processing_hints` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(processing_hints) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._processing_hints = processing_hints

    @property
    def processing_warnings(self):
        """Gets the processing_warnings of this VideoSuggestions.

        A list of reasons why YouTube may have difficulty transcoding the uploaded video or that might result in an erroneous transcoding. These warnings are generated before YouTube actually processes the uploaded video file. In addition, they identify issues that are unlikely to cause the video processing to fail but that might cause problems such as sync issues, video artifacts, or a missing audio track.

        :return: The processing_warnings of this VideoSuggestions.
        :rtype: List[str]
        """
        return self._processing_warnings

    @processing_warnings.setter
    def processing_warnings(self, processing_warnings):
        """Sets the processing_warnings of this VideoSuggestions.

        A list of reasons why YouTube may have difficulty transcoding the uploaded video or that might result in an erroneous transcoding. These warnings are generated before YouTube actually processes the uploaded video file. In addition, they identify issues that are unlikely to cause the video processing to fail but that might cause problems such as sync issues, video artifacts, or a missing audio track.

        :param processing_warnings: The processing_warnings of this VideoSuggestions.
        :type processing_warnings: List[str]
        """
        allowed_values = ["unknownContainer", "unknownVideoCodec", "unknownAudioCodec", "inconsistentResolution", "hasEditlist", "problematicVideoCodec", "problematicAudioCodec", "unsupportedVrStereoMode", "unsupportedSphericalProjectionType", "unsupportedHdrPixelFormat", "unsupportedHdrColorMetadata", "problematicHdrLookupTable"]  # noqa: E501
        if not set(processing_warnings).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `processing_warnings` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(processing_warnings) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._processing_warnings = processing_warnings

    @property
    def tag_suggestions(self):
        """Gets the tag_suggestions of this VideoSuggestions.

        A list of keyword tags that could be added to the video's metadata to increase the likelihood that users will locate your video when searching or browsing on YouTube.

        :return: The tag_suggestions of this VideoSuggestions.
        :rtype: List[VideoSuggestionsTagSuggestion]
        """
        return self._tag_suggestions

    @tag_suggestions.setter
    def tag_suggestions(self, tag_suggestions):
        """Sets the tag_suggestions of this VideoSuggestions.

        A list of keyword tags that could be added to the video's metadata to increase the likelihood that users will locate your video when searching or browsing on YouTube.

        :param tag_suggestions: The tag_suggestions of this VideoSuggestions.
        :type tag_suggestions: List[VideoSuggestionsTagSuggestion]
        """

        self._tag_suggestions = tag_suggestions
