# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VideoStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, embeddable: bool=None, failure_reason: str=None, license: str=None, made_for_kids: bool=None, privacy_status: str=None, public_stats_viewable: bool=None, publish_at: datetime=None, rejection_reason: str=None, self_declared_made_for_kids: bool=None, upload_status: str=None):
        """VideoStatus - a model defined in OpenAPI

        :param embeddable: The embeddable of this VideoStatus.
        :param failure_reason: The failure_reason of this VideoStatus.
        :param license: The license of this VideoStatus.
        :param made_for_kids: The made_for_kids of this VideoStatus.
        :param privacy_status: The privacy_status of this VideoStatus.
        :param public_stats_viewable: The public_stats_viewable of this VideoStatus.
        :param publish_at: The publish_at of this VideoStatus.
        :param rejection_reason: The rejection_reason of this VideoStatus.
        :param self_declared_made_for_kids: The self_declared_made_for_kids of this VideoStatus.
        :param upload_status: The upload_status of this VideoStatus.
        """
        self.openapi_types = {
            'embeddable': bool,
            'failure_reason': str,
            'license': str,
            'made_for_kids': bool,
            'privacy_status': str,
            'public_stats_viewable': bool,
            'publish_at': datetime,
            'rejection_reason': str,
            'self_declared_made_for_kids': bool,
            'upload_status': str
        }

        self.attribute_map = {
            'embeddable': 'embeddable',
            'failure_reason': 'failureReason',
            'license': 'license',
            'made_for_kids': 'madeForKids',
            'privacy_status': 'privacyStatus',
            'public_stats_viewable': 'publicStatsViewable',
            'publish_at': 'publishAt',
            'rejection_reason': 'rejectionReason',
            'self_declared_made_for_kids': 'selfDeclaredMadeForKids',
            'upload_status': 'uploadStatus'
        }

        self._embeddable = embeddable
        self._failure_reason = failure_reason
        self._license = license
        self._made_for_kids = made_for_kids
        self._privacy_status = privacy_status
        self._public_stats_viewable = public_stats_viewable
        self._publish_at = publish_at
        self._rejection_reason = rejection_reason
        self._self_declared_made_for_kids = self_declared_made_for_kids
        self._upload_status = upload_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VideoStatus of this VideoStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def embeddable(self):
        """Gets the embeddable of this VideoStatus.

        This value indicates if the video can be embedded on another website. @mutable youtube.videos.insert youtube.videos.update

        :return: The embeddable of this VideoStatus.
        :rtype: bool
        """
        return self._embeddable

    @embeddable.setter
    def embeddable(self, embeddable):
        """Sets the embeddable of this VideoStatus.

        This value indicates if the video can be embedded on another website. @mutable youtube.videos.insert youtube.videos.update

        :param embeddable: The embeddable of this VideoStatus.
        :type embeddable: bool
        """

        self._embeddable = embeddable

    @property
    def failure_reason(self):
        """Gets the failure_reason of this VideoStatus.

        This value explains why a video failed to upload. This property is only present if the uploadStatus property indicates that the upload failed.

        :return: The failure_reason of this VideoStatus.
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this VideoStatus.

        This value explains why a video failed to upload. This property is only present if the uploadStatus property indicates that the upload failed.

        :param failure_reason: The failure_reason of this VideoStatus.
        :type failure_reason: str
        """
        allowed_values = ["conversion", "invalidFile", "emptyFile", "tooSmall", "codec", "uploadAborted"]  # noqa: E501
        if failure_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `failure_reason` ({0}), must be one of {1}"
                .format(failure_reason, allowed_values)
            )

        self._failure_reason = failure_reason

    @property
    def license(self):
        """Gets the license of this VideoStatus.

        The video's license. @mutable youtube.videos.insert youtube.videos.update

        :return: The license of this VideoStatus.
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this VideoStatus.

        The video's license. @mutable youtube.videos.insert youtube.videos.update

        :param license: The license of this VideoStatus.
        :type license: str
        """
        allowed_values = ["youtube", "creativeCommon"]  # noqa: E501
        if license not in allowed_values:
            raise ValueError(
                "Invalid value for `license` ({0}), must be one of {1}"
                .format(license, allowed_values)
            )

        self._license = license

    @property
    def made_for_kids(self):
        """Gets the made_for_kids of this VideoStatus.


        :return: The made_for_kids of this VideoStatus.
        :rtype: bool
        """
        return self._made_for_kids

    @made_for_kids.setter
    def made_for_kids(self, made_for_kids):
        """Sets the made_for_kids of this VideoStatus.


        :param made_for_kids: The made_for_kids of this VideoStatus.
        :type made_for_kids: bool
        """

        self._made_for_kids = made_for_kids

    @property
    def privacy_status(self):
        """Gets the privacy_status of this VideoStatus.

        The video's privacy status.

        :return: The privacy_status of this VideoStatus.
        :rtype: str
        """
        return self._privacy_status

    @privacy_status.setter
    def privacy_status(self, privacy_status):
        """Sets the privacy_status of this VideoStatus.

        The video's privacy status.

        :param privacy_status: The privacy_status of this VideoStatus.
        :type privacy_status: str
        """
        allowed_values = ["public", "unlisted", "private"]  # noqa: E501
        if privacy_status not in allowed_values:
            raise ValueError(
                "Invalid value for `privacy_status` ({0}), must be one of {1}"
                .format(privacy_status, allowed_values)
            )

        self._privacy_status = privacy_status

    @property
    def public_stats_viewable(self):
        """Gets the public_stats_viewable of this VideoStatus.

        This value indicates if the extended video statistics on the watch page can be viewed by everyone. Note that the view count, likes, etc will still be visible if this is disabled. @mutable youtube.videos.insert youtube.videos.update

        :return: The public_stats_viewable of this VideoStatus.
        :rtype: bool
        """
        return self._public_stats_viewable

    @public_stats_viewable.setter
    def public_stats_viewable(self, public_stats_viewable):
        """Sets the public_stats_viewable of this VideoStatus.

        This value indicates if the extended video statistics on the watch page can be viewed by everyone. Note that the view count, likes, etc will still be visible if this is disabled. @mutable youtube.videos.insert youtube.videos.update

        :param public_stats_viewable: The public_stats_viewable of this VideoStatus.
        :type public_stats_viewable: bool
        """

        self._public_stats_viewable = public_stats_viewable

    @property
    def publish_at(self):
        """Gets the publish_at of this VideoStatus.

        The date and time when the video is scheduled to publish. It can be set only if the privacy status of the video is private..

        :return: The publish_at of this VideoStatus.
        :rtype: datetime
        """
        return self._publish_at

    @publish_at.setter
    def publish_at(self, publish_at):
        """Sets the publish_at of this VideoStatus.

        The date and time when the video is scheduled to publish. It can be set only if the privacy status of the video is private..

        :param publish_at: The publish_at of this VideoStatus.
        :type publish_at: datetime
        """

        self._publish_at = publish_at

    @property
    def rejection_reason(self):
        """Gets the rejection_reason of this VideoStatus.

        This value explains why YouTube rejected an uploaded video. This property is only present if the uploadStatus property indicates that the upload was rejected.

        :return: The rejection_reason of this VideoStatus.
        :rtype: str
        """
        return self._rejection_reason

    @rejection_reason.setter
    def rejection_reason(self, rejection_reason):
        """Sets the rejection_reason of this VideoStatus.

        This value explains why YouTube rejected an uploaded video. This property is only present if the uploadStatus property indicates that the upload was rejected.

        :param rejection_reason: The rejection_reason of this VideoStatus.
        :type rejection_reason: str
        """
        allowed_values = ["copyright", "inappropriate", "duplicate", "termsOfUse", "uploaderAccountSuspended", "length", "claim", "uploaderAccountClosed", "trademark", "legal"]  # noqa: E501
        if rejection_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `rejection_reason` ({0}), must be one of {1}"
                .format(rejection_reason, allowed_values)
            )

        self._rejection_reason = rejection_reason

    @property
    def self_declared_made_for_kids(self):
        """Gets the self_declared_made_for_kids of this VideoStatus.


        :return: The self_declared_made_for_kids of this VideoStatus.
        :rtype: bool
        """
        return self._self_declared_made_for_kids

    @self_declared_made_for_kids.setter
    def self_declared_made_for_kids(self, self_declared_made_for_kids):
        """Sets the self_declared_made_for_kids of this VideoStatus.


        :param self_declared_made_for_kids: The self_declared_made_for_kids of this VideoStatus.
        :type self_declared_made_for_kids: bool
        """

        self._self_declared_made_for_kids = self_declared_made_for_kids

    @property
    def upload_status(self):
        """Gets the upload_status of this VideoStatus.

        The status of the uploaded video.

        :return: The upload_status of this VideoStatus.
        :rtype: str
        """
        return self._upload_status

    @upload_status.setter
    def upload_status(self, upload_status):
        """Sets the upload_status of this VideoStatus.

        The status of the uploaded video.

        :param upload_status: The upload_status of this VideoStatus.
        :type upload_status: str
        """
        allowed_values = ["uploaded", "processed", "failed", "rejected", "deleted"]  # noqa: E501
        if upload_status not in allowed_values:
            raise ValueError(
                "Invalid value for `upload_status` ({0}), must be one of {1}"
                .format(upload_status, allowed_values)
            )

        self._upload_status = upload_status
