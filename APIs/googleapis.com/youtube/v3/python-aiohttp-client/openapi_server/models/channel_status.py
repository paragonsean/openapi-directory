# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChannelStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_linked: bool=None, long_uploads_status: str=None, made_for_kids: bool=None, privacy_status: str=None, self_declared_made_for_kids: bool=None):
        """ChannelStatus - a model defined in OpenAPI

        :param is_linked: The is_linked of this ChannelStatus.
        :param long_uploads_status: The long_uploads_status of this ChannelStatus.
        :param made_for_kids: The made_for_kids of this ChannelStatus.
        :param privacy_status: The privacy_status of this ChannelStatus.
        :param self_declared_made_for_kids: The self_declared_made_for_kids of this ChannelStatus.
        """
        self.openapi_types = {
            'is_linked': bool,
            'long_uploads_status': str,
            'made_for_kids': bool,
            'privacy_status': str,
            'self_declared_made_for_kids': bool
        }

        self.attribute_map = {
            'is_linked': 'isLinked',
            'long_uploads_status': 'longUploadsStatus',
            'made_for_kids': 'madeForKids',
            'privacy_status': 'privacyStatus',
            'self_declared_made_for_kids': 'selfDeclaredMadeForKids'
        }

        self._is_linked = is_linked
        self._long_uploads_status = long_uploads_status
        self._made_for_kids = made_for_kids
        self._privacy_status = privacy_status
        self._self_declared_made_for_kids = self_declared_made_for_kids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChannelStatus of this ChannelStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_linked(self):
        """Gets the is_linked of this ChannelStatus.

        If true, then the user is linked to either a YouTube username or G+ account. Otherwise, the user doesn't have a public YouTube identity.

        :return: The is_linked of this ChannelStatus.
        :rtype: bool
        """
        return self._is_linked

    @is_linked.setter
    def is_linked(self, is_linked):
        """Sets the is_linked of this ChannelStatus.

        If true, then the user is linked to either a YouTube username or G+ account. Otherwise, the user doesn't have a public YouTube identity.

        :param is_linked: The is_linked of this ChannelStatus.
        :type is_linked: bool
        """

        self._is_linked = is_linked

    @property
    def long_uploads_status(self):
        """Gets the long_uploads_status of this ChannelStatus.

        The long uploads status of this channel. See https://support.google.com/youtube/answer/71673 for more information.

        :return: The long_uploads_status of this ChannelStatus.
        :rtype: str
        """
        return self._long_uploads_status

    @long_uploads_status.setter
    def long_uploads_status(self, long_uploads_status):
        """Sets the long_uploads_status of this ChannelStatus.

        The long uploads status of this channel. See https://support.google.com/youtube/answer/71673 for more information.

        :param long_uploads_status: The long_uploads_status of this ChannelStatus.
        :type long_uploads_status: str
        """
        allowed_values = ["longUploadsUnspecified", "allowed", "eligible", "disallowed"]  # noqa: E501
        if long_uploads_status not in allowed_values:
            raise ValueError(
                "Invalid value for `long_uploads_status` ({0}), must be one of {1}"
                .format(long_uploads_status, allowed_values)
            )

        self._long_uploads_status = long_uploads_status

    @property
    def made_for_kids(self):
        """Gets the made_for_kids of this ChannelStatus.


        :return: The made_for_kids of this ChannelStatus.
        :rtype: bool
        """
        return self._made_for_kids

    @made_for_kids.setter
    def made_for_kids(self, made_for_kids):
        """Sets the made_for_kids of this ChannelStatus.


        :param made_for_kids: The made_for_kids of this ChannelStatus.
        :type made_for_kids: bool
        """

        self._made_for_kids = made_for_kids

    @property
    def privacy_status(self):
        """Gets the privacy_status of this ChannelStatus.

        Privacy status of the channel.

        :return: The privacy_status of this ChannelStatus.
        :rtype: str
        """
        return self._privacy_status

    @privacy_status.setter
    def privacy_status(self, privacy_status):
        """Sets the privacy_status of this ChannelStatus.

        Privacy status of the channel.

        :param privacy_status: The privacy_status of this ChannelStatus.
        :type privacy_status: str
        """
        allowed_values = ["public", "unlisted", "private"]  # noqa: E501
        if privacy_status not in allowed_values:
            raise ValueError(
                "Invalid value for `privacy_status` ({0}), must be one of {1}"
                .format(privacy_status, allowed_values)
            )

        self._privacy_status = privacy_status

    @property
    def self_declared_made_for_kids(self):
        """Gets the self_declared_made_for_kids of this ChannelStatus.


        :return: The self_declared_made_for_kids of this ChannelStatus.
        :rtype: bool
        """
        return self._self_declared_made_for_kids

    @self_declared_made_for_kids.setter
    def self_declared_made_for_kids(self, self_declared_made_for_kids):
        """Sets the self_declared_made_for_kids of this ChannelStatus.


        :param self_declared_made_for_kids: The self_declared_made_for_kids of this ChannelStatus.
        :type self_declared_made_for_kids: bool
        """

        self._self_declared_made_for_kids = self_declared_made_for_kids
