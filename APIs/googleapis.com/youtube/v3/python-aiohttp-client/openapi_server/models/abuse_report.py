# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.abuse_type import AbuseType
from openapi_server.models.entity import Entity
from openapi_server.models.related_entity import RelatedEntity
from openapi_server import util


class AbuseReport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, abuse_types: List[AbuseType]=None, description: str=None, related_entities: List[RelatedEntity]=None, subject: Entity=None):
        """AbuseReport - a model defined in OpenAPI

        :param abuse_types: The abuse_types of this AbuseReport.
        :param description: The description of this AbuseReport.
        :param related_entities: The related_entities of this AbuseReport.
        :param subject: The subject of this AbuseReport.
        """
        self.openapi_types = {
            'abuse_types': List[AbuseType],
            'description': str,
            'related_entities': List[RelatedEntity],
            'subject': Entity
        }

        self.attribute_map = {
            'abuse_types': 'abuseTypes',
            'description': 'description',
            'related_entities': 'relatedEntities',
            'subject': 'subject'
        }

        self._abuse_types = abuse_types
        self._description = description
        self._related_entities = related_entities
        self._subject = subject

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AbuseReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AbuseReport of this AbuseReport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def abuse_types(self):
        """Gets the abuse_types of this AbuseReport.


        :return: The abuse_types of this AbuseReport.
        :rtype: List[AbuseType]
        """
        return self._abuse_types

    @abuse_types.setter
    def abuse_types(self, abuse_types):
        """Sets the abuse_types of this AbuseReport.


        :param abuse_types: The abuse_types of this AbuseReport.
        :type abuse_types: List[AbuseType]
        """

        self._abuse_types = abuse_types

    @property
    def description(self):
        """Gets the description of this AbuseReport.


        :return: The description of this AbuseReport.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AbuseReport.


        :param description: The description of this AbuseReport.
        :type description: str
        """

        self._description = description

    @property
    def related_entities(self):
        """Gets the related_entities of this AbuseReport.


        :return: The related_entities of this AbuseReport.
        :rtype: List[RelatedEntity]
        """
        return self._related_entities

    @related_entities.setter
    def related_entities(self, related_entities):
        """Sets the related_entities of this AbuseReport.


        :param related_entities: The related_entities of this AbuseReport.
        :type related_entities: List[RelatedEntity]
        """

        self._related_entities = related_entities

    @property
    def subject(self):
        """Gets the subject of this AbuseReport.


        :return: The subject of this AbuseReport.
        :rtype: Entity
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this AbuseReport.


        :param subject: The subject of this AbuseReport.
        :type subject: Entity
        """

        self._subject = subject
