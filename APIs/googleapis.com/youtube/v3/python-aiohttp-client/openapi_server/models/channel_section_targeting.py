# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChannelSectionTargeting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, countries: List[str]=None, languages: List[str]=None, regions: List[str]=None):
        """ChannelSectionTargeting - a model defined in OpenAPI

        :param countries: The countries of this ChannelSectionTargeting.
        :param languages: The languages of this ChannelSectionTargeting.
        :param regions: The regions of this ChannelSectionTargeting.
        """
        self.openapi_types = {
            'countries': List[str],
            'languages': List[str],
            'regions': List[str]
        }

        self.attribute_map = {
            'countries': 'countries',
            'languages': 'languages',
            'regions': 'regions'
        }

        self._countries = countries
        self._languages = languages
        self._regions = regions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelSectionTargeting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChannelSectionTargeting of this ChannelSectionTargeting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def countries(self):
        """Gets the countries of this ChannelSectionTargeting.

        The country the channel section is targeting.

        :return: The countries of this ChannelSectionTargeting.
        :rtype: List[str]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this ChannelSectionTargeting.

        The country the channel section is targeting.

        :param countries: The countries of this ChannelSectionTargeting.
        :type countries: List[str]
        """

        self._countries = countries

    @property
    def languages(self):
        """Gets the languages of this ChannelSectionTargeting.

        The language the channel section is targeting.

        :return: The languages of this ChannelSectionTargeting.
        :rtype: List[str]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this ChannelSectionTargeting.

        The language the channel section is targeting.

        :param languages: The languages of this ChannelSectionTargeting.
        :type languages: List[str]
        """

        self._languages = languages

    @property
    def regions(self):
        """Gets the regions of this ChannelSectionTargeting.

        The region the channel section is targeting.

        :return: The regions of this ChannelSectionTargeting.
        :rtype: List[str]
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this ChannelSectionTargeting.

        The region the channel section is targeting.

        :param regions: The regions of this ChannelSectionTargeting.
        :type regions: List[str]
        """

        self._regions = regions
