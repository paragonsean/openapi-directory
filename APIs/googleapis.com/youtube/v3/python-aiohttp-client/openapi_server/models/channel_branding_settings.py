# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_settings import ChannelSettings
from openapi_server.models.image_settings import ImageSettings
from openapi_server.models.property_value import PropertyValue
from openapi_server.models.watch_settings import WatchSettings
from openapi_server import util


class ChannelBrandingSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel: ChannelSettings=None, hints: List[PropertyValue]=None, image: ImageSettings=None, watch: WatchSettings=None):
        """ChannelBrandingSettings - a model defined in OpenAPI

        :param channel: The channel of this ChannelBrandingSettings.
        :param hints: The hints of this ChannelBrandingSettings.
        :param image: The image of this ChannelBrandingSettings.
        :param watch: The watch of this ChannelBrandingSettings.
        """
        self.openapi_types = {
            'channel': ChannelSettings,
            'hints': List[PropertyValue],
            'image': ImageSettings,
            'watch': WatchSettings
        }

        self.attribute_map = {
            'channel': 'channel',
            'hints': 'hints',
            'image': 'image',
            'watch': 'watch'
        }

        self._channel = channel
        self._hints = hints
        self._image = image
        self._watch = watch

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelBrandingSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChannelBrandingSettings of this ChannelBrandingSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel(self):
        """Gets the channel of this ChannelBrandingSettings.


        :return: The channel of this ChannelBrandingSettings.
        :rtype: ChannelSettings
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this ChannelBrandingSettings.


        :param channel: The channel of this ChannelBrandingSettings.
        :type channel: ChannelSettings
        """

        self._channel = channel

    @property
    def hints(self):
        """Gets the hints of this ChannelBrandingSettings.

        Additional experimental branding properties.

        :return: The hints of this ChannelBrandingSettings.
        :rtype: List[PropertyValue]
        """
        return self._hints

    @hints.setter
    def hints(self, hints):
        """Sets the hints of this ChannelBrandingSettings.

        Additional experimental branding properties.

        :param hints: The hints of this ChannelBrandingSettings.
        :type hints: List[PropertyValue]
        """

        self._hints = hints

    @property
    def image(self):
        """Gets the image of this ChannelBrandingSettings.


        :return: The image of this ChannelBrandingSettings.
        :rtype: ImageSettings
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ChannelBrandingSettings.


        :param image: The image of this ChannelBrandingSettings.
        :type image: ImageSettings
        """

        self._image = image

    @property
    def watch(self):
        """Gets the watch of this ChannelBrandingSettings.


        :return: The watch of this ChannelBrandingSettings.
        :rtype: WatchSettings
        """
        return self._watch

    @watch.setter
    def watch(self, watch):
        """Sets the watch of this ChannelBrandingSettings.


        :param watch: The watch of this ChannelBrandingSettings.
        :type watch: WatchSettings
        """

        self._watch = watch
