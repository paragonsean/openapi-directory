# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ThirdPartyLinkStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, link_status: str=None):
        """ThirdPartyLinkStatus - a model defined in OpenAPI

        :param link_status: The link_status of this ThirdPartyLinkStatus.
        """
        self.openapi_types = {
            'link_status': str
        }

        self.attribute_map = {
            'link_status': 'linkStatus'
        }

        self._link_status = link_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ThirdPartyLinkStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ThirdPartyLinkStatus of this ThirdPartyLinkStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def link_status(self):
        """Gets the link_status of this ThirdPartyLinkStatus.


        :return: The link_status of this ThirdPartyLinkStatus.
        :rtype: str
        """
        return self._link_status

    @link_status.setter
    def link_status(self, link_status):
        """Sets the link_status of this ThirdPartyLinkStatus.


        :param link_status: The link_status of this ThirdPartyLinkStatus.
        :type link_status: str
        """
        allowed_values = ["unknown", "failed", "pending", "linked"]  # noqa: E501
        if link_status not in allowed_values:
            raise ValueError(
                "Invalid value for `link_status` ({0}), must be one of {1}"
                .format(link_status, allowed_values)
            )

        self._link_status = link_status
