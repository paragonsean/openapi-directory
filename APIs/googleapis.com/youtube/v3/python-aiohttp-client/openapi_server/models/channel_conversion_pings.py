# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_conversion_ping import ChannelConversionPing
from openapi_server import util


class ChannelConversionPings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pings: List[ChannelConversionPing]=None):
        """ChannelConversionPings - a model defined in OpenAPI

        :param pings: The pings of this ChannelConversionPings.
        """
        self.openapi_types = {
            'pings': List[ChannelConversionPing]
        }

        self.attribute_map = {
            'pings': 'pings'
        }

        self._pings = pings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelConversionPings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChannelConversionPings of this ChannelConversionPings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pings(self):
        """Gets the pings of this ChannelConversionPings.

        Pings that the app shall fire (authenticated by biscotti cookie). Each ping has a context, in which the app must fire the ping, and a url identifying the ping.

        :return: The pings of this ChannelConversionPings.
        :rtype: List[ChannelConversionPing]
        """
        return self._pings

    @pings.setter
    def pings(self, pings):
        """Sets the pings of this ChannelConversionPings.

        Pings that the app shall fire (authenticated by biscotti cookie). Each ping has a context, in which the app must fire the ping, and a url identifying the ping.

        :param pings: The pings of this ChannelConversionPings.
        :type pings: List[ChannelConversionPing]
        """

        self._pings = pings
