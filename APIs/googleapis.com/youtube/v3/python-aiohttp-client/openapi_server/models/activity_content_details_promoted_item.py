# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ActivityContentDetailsPromotedItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ad_tag: str=None, click_tracking_url: str=None, creative_view_url: str=None, cta_type: str=None, custom_cta_button_text: str=None, description_text: str=None, destination_url: str=None, forecasting_url: List[str]=None, impression_url: List[str]=None, video_id: str=None):
        """ActivityContentDetailsPromotedItem - a model defined in OpenAPI

        :param ad_tag: The ad_tag of this ActivityContentDetailsPromotedItem.
        :param click_tracking_url: The click_tracking_url of this ActivityContentDetailsPromotedItem.
        :param creative_view_url: The creative_view_url of this ActivityContentDetailsPromotedItem.
        :param cta_type: The cta_type of this ActivityContentDetailsPromotedItem.
        :param custom_cta_button_text: The custom_cta_button_text of this ActivityContentDetailsPromotedItem.
        :param description_text: The description_text of this ActivityContentDetailsPromotedItem.
        :param destination_url: The destination_url of this ActivityContentDetailsPromotedItem.
        :param forecasting_url: The forecasting_url of this ActivityContentDetailsPromotedItem.
        :param impression_url: The impression_url of this ActivityContentDetailsPromotedItem.
        :param video_id: The video_id of this ActivityContentDetailsPromotedItem.
        """
        self.openapi_types = {
            'ad_tag': str,
            'click_tracking_url': str,
            'creative_view_url': str,
            'cta_type': str,
            'custom_cta_button_text': str,
            'description_text': str,
            'destination_url': str,
            'forecasting_url': List[str],
            'impression_url': List[str],
            'video_id': str
        }

        self.attribute_map = {
            'ad_tag': 'adTag',
            'click_tracking_url': 'clickTrackingUrl',
            'creative_view_url': 'creativeViewUrl',
            'cta_type': 'ctaType',
            'custom_cta_button_text': 'customCtaButtonText',
            'description_text': 'descriptionText',
            'destination_url': 'destinationUrl',
            'forecasting_url': 'forecastingUrl',
            'impression_url': 'impressionUrl',
            'video_id': 'videoId'
        }

        self._ad_tag = ad_tag
        self._click_tracking_url = click_tracking_url
        self._creative_view_url = creative_view_url
        self._cta_type = cta_type
        self._custom_cta_button_text = custom_cta_button_text
        self._description_text = description_text
        self._destination_url = destination_url
        self._forecasting_url = forecasting_url
        self._impression_url = impression_url
        self._video_id = video_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActivityContentDetailsPromotedItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActivityContentDetailsPromotedItem of this ActivityContentDetailsPromotedItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ad_tag(self):
        """Gets the ad_tag of this ActivityContentDetailsPromotedItem.

        The URL the client should fetch to request a promoted item.

        :return: The ad_tag of this ActivityContentDetailsPromotedItem.
        :rtype: str
        """
        return self._ad_tag

    @ad_tag.setter
    def ad_tag(self, ad_tag):
        """Sets the ad_tag of this ActivityContentDetailsPromotedItem.

        The URL the client should fetch to request a promoted item.

        :param ad_tag: The ad_tag of this ActivityContentDetailsPromotedItem.
        :type ad_tag: str
        """

        self._ad_tag = ad_tag

    @property
    def click_tracking_url(self):
        """Gets the click_tracking_url of this ActivityContentDetailsPromotedItem.

        The URL the client should ping to indicate that the user clicked through on this promoted item.

        :return: The click_tracking_url of this ActivityContentDetailsPromotedItem.
        :rtype: str
        """
        return self._click_tracking_url

    @click_tracking_url.setter
    def click_tracking_url(self, click_tracking_url):
        """Sets the click_tracking_url of this ActivityContentDetailsPromotedItem.

        The URL the client should ping to indicate that the user clicked through on this promoted item.

        :param click_tracking_url: The click_tracking_url of this ActivityContentDetailsPromotedItem.
        :type click_tracking_url: str
        """

        self._click_tracking_url = click_tracking_url

    @property
    def creative_view_url(self):
        """Gets the creative_view_url of this ActivityContentDetailsPromotedItem.

        The URL the client should ping to indicate that the user was shown this promoted item.

        :return: The creative_view_url of this ActivityContentDetailsPromotedItem.
        :rtype: str
        """
        return self._creative_view_url

    @creative_view_url.setter
    def creative_view_url(self, creative_view_url):
        """Sets the creative_view_url of this ActivityContentDetailsPromotedItem.

        The URL the client should ping to indicate that the user was shown this promoted item.

        :param creative_view_url: The creative_view_url of this ActivityContentDetailsPromotedItem.
        :type creative_view_url: str
        """

        self._creative_view_url = creative_view_url

    @property
    def cta_type(self):
        """Gets the cta_type of this ActivityContentDetailsPromotedItem.

        The type of call-to-action, a message to the user indicating action that can be taken.

        :return: The cta_type of this ActivityContentDetailsPromotedItem.
        :rtype: str
        """
        return self._cta_type

    @cta_type.setter
    def cta_type(self, cta_type):
        """Sets the cta_type of this ActivityContentDetailsPromotedItem.

        The type of call-to-action, a message to the user indicating action that can be taken.

        :param cta_type: The cta_type of this ActivityContentDetailsPromotedItem.
        :type cta_type: str
        """
        allowed_values = ["ctaTypeUnspecified", "visitAdvertiserSite"]  # noqa: E501
        if cta_type not in allowed_values:
            raise ValueError(
                "Invalid value for `cta_type` ({0}), must be one of {1}"
                .format(cta_type, allowed_values)
            )

        self._cta_type = cta_type

    @property
    def custom_cta_button_text(self):
        """Gets the custom_cta_button_text of this ActivityContentDetailsPromotedItem.

        The custom call-to-action button text. If specified, it will override the default button text for the cta_type.

        :return: The custom_cta_button_text of this ActivityContentDetailsPromotedItem.
        :rtype: str
        """
        return self._custom_cta_button_text

    @custom_cta_button_text.setter
    def custom_cta_button_text(self, custom_cta_button_text):
        """Sets the custom_cta_button_text of this ActivityContentDetailsPromotedItem.

        The custom call-to-action button text. If specified, it will override the default button text for the cta_type.

        :param custom_cta_button_text: The custom_cta_button_text of this ActivityContentDetailsPromotedItem.
        :type custom_cta_button_text: str
        """

        self._custom_cta_button_text = custom_cta_button_text

    @property
    def description_text(self):
        """Gets the description_text of this ActivityContentDetailsPromotedItem.

        The text description to accompany the promoted item.

        :return: The description_text of this ActivityContentDetailsPromotedItem.
        :rtype: str
        """
        return self._description_text

    @description_text.setter
    def description_text(self, description_text):
        """Sets the description_text of this ActivityContentDetailsPromotedItem.

        The text description to accompany the promoted item.

        :param description_text: The description_text of this ActivityContentDetailsPromotedItem.
        :type description_text: str
        """

        self._description_text = description_text

    @property
    def destination_url(self):
        """Gets the destination_url of this ActivityContentDetailsPromotedItem.

        The URL the client should direct the user to, if the user chooses to visit the advertiser's website.

        :return: The destination_url of this ActivityContentDetailsPromotedItem.
        :rtype: str
        """
        return self._destination_url

    @destination_url.setter
    def destination_url(self, destination_url):
        """Sets the destination_url of this ActivityContentDetailsPromotedItem.

        The URL the client should direct the user to, if the user chooses to visit the advertiser's website.

        :param destination_url: The destination_url of this ActivityContentDetailsPromotedItem.
        :type destination_url: str
        """

        self._destination_url = destination_url

    @property
    def forecasting_url(self):
        """Gets the forecasting_url of this ActivityContentDetailsPromotedItem.

        The list of forecasting URLs. The client should ping all of these URLs when a promoted item is not available, to indicate that a promoted item could have been shown.

        :return: The forecasting_url of this ActivityContentDetailsPromotedItem.
        :rtype: List[str]
        """
        return self._forecasting_url

    @forecasting_url.setter
    def forecasting_url(self, forecasting_url):
        """Sets the forecasting_url of this ActivityContentDetailsPromotedItem.

        The list of forecasting URLs. The client should ping all of these URLs when a promoted item is not available, to indicate that a promoted item could have been shown.

        :param forecasting_url: The forecasting_url of this ActivityContentDetailsPromotedItem.
        :type forecasting_url: List[str]
        """

        self._forecasting_url = forecasting_url

    @property
    def impression_url(self):
        """Gets the impression_url of this ActivityContentDetailsPromotedItem.

        The list of impression URLs. The client should ping all of these URLs to indicate that the user was shown this promoted item.

        :return: The impression_url of this ActivityContentDetailsPromotedItem.
        :rtype: List[str]
        """
        return self._impression_url

    @impression_url.setter
    def impression_url(self, impression_url):
        """Sets the impression_url of this ActivityContentDetailsPromotedItem.

        The list of impression URLs. The client should ping all of these URLs to indicate that the user was shown this promoted item.

        :param impression_url: The impression_url of this ActivityContentDetailsPromotedItem.
        :type impression_url: List[str]
        """

        self._impression_url = impression_url

    @property
    def video_id(self):
        """Gets the video_id of this ActivityContentDetailsPromotedItem.

        The ID that YouTube uses to uniquely identify the promoted video.

        :return: The video_id of this ActivityContentDetailsPromotedItem.
        :rtype: str
        """
        return self._video_id

    @video_id.setter
    def video_id(self, video_id):
        """Sets the video_id of this ActivityContentDetailsPromotedItem.

        The ID that YouTube uses to uniquely identify the promoted video.

        :param video_id: The video_id of this ActivityContentDetailsPromotedItem.
        :type video_id: str
        """

        self._video_id = video_id
