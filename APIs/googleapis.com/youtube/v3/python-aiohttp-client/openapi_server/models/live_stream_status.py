# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.live_stream_health_status import LiveStreamHealthStatus
from openapi_server import util


class LiveStreamStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, health_status: LiveStreamHealthStatus=None, stream_status: str=None):
        """LiveStreamStatus - a model defined in OpenAPI

        :param health_status: The health_status of this LiveStreamStatus.
        :param stream_status: The stream_status of this LiveStreamStatus.
        """
        self.openapi_types = {
            'health_status': LiveStreamHealthStatus,
            'stream_status': str
        }

        self.attribute_map = {
            'health_status': 'healthStatus',
            'stream_status': 'streamStatus'
        }

        self._health_status = health_status
        self._stream_status = stream_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LiveStreamStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LiveStreamStatus of this LiveStreamStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def health_status(self):
        """Gets the health_status of this LiveStreamStatus.


        :return: The health_status of this LiveStreamStatus.
        :rtype: LiveStreamHealthStatus
        """
        return self._health_status

    @health_status.setter
    def health_status(self, health_status):
        """Sets the health_status of this LiveStreamStatus.


        :param health_status: The health_status of this LiveStreamStatus.
        :type health_status: LiveStreamHealthStatus
        """

        self._health_status = health_status

    @property
    def stream_status(self):
        """Gets the stream_status of this LiveStreamStatus.


        :return: The stream_status of this LiveStreamStatus.
        :rtype: str
        """
        return self._stream_status

    @stream_status.setter
    def stream_status(self, stream_status):
        """Sets the stream_status of this LiveStreamStatus.


        :param stream_status: The stream_status of this LiveStreamStatus.
        :type stream_status: str
        """
        allowed_values = ["created", "ready", "active", "inactive", "error"]  # noqa: E501
        if stream_status not in allowed_values:
            raise ValueError(
                "Invalid value for `stream_status` ({0}), must be one of {1}"
                .format(stream_status, allowed_values)
            )

        self._stream_status = stream_status
