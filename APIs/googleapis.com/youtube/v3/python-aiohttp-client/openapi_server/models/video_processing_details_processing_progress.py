# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VideoProcessingDetailsProcessingProgress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, parts_processed: str=None, parts_total: str=None, time_left_ms: str=None):
        """VideoProcessingDetailsProcessingProgress - a model defined in OpenAPI

        :param parts_processed: The parts_processed of this VideoProcessingDetailsProcessingProgress.
        :param parts_total: The parts_total of this VideoProcessingDetailsProcessingProgress.
        :param time_left_ms: The time_left_ms of this VideoProcessingDetailsProcessingProgress.
        """
        self.openapi_types = {
            'parts_processed': str,
            'parts_total': str,
            'time_left_ms': str
        }

        self.attribute_map = {
            'parts_processed': 'partsProcessed',
            'parts_total': 'partsTotal',
            'time_left_ms': 'timeLeftMs'
        }

        self._parts_processed = parts_processed
        self._parts_total = parts_total
        self._time_left_ms = time_left_ms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoProcessingDetailsProcessingProgress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VideoProcessingDetailsProcessingProgress of this VideoProcessingDetailsProcessingProgress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parts_processed(self):
        """Gets the parts_processed of this VideoProcessingDetailsProcessingProgress.

        The number of parts of the video that YouTube has already processed. You can estimate the percentage of the video that YouTube has already processed by calculating: 100 * parts_processed / parts_total Note that since the estimated number of parts could increase without a corresponding increase in the number of parts that have already been processed, it is possible that the calculated progress could periodically decrease while YouTube processes a video.

        :return: The parts_processed of this VideoProcessingDetailsProcessingProgress.
        :rtype: str
        """
        return self._parts_processed

    @parts_processed.setter
    def parts_processed(self, parts_processed):
        """Sets the parts_processed of this VideoProcessingDetailsProcessingProgress.

        The number of parts of the video that YouTube has already processed. You can estimate the percentage of the video that YouTube has already processed by calculating: 100 * parts_processed / parts_total Note that since the estimated number of parts could increase without a corresponding increase in the number of parts that have already been processed, it is possible that the calculated progress could periodically decrease while YouTube processes a video.

        :param parts_processed: The parts_processed of this VideoProcessingDetailsProcessingProgress.
        :type parts_processed: str
        """

        self._parts_processed = parts_processed

    @property
    def parts_total(self):
        """Gets the parts_total of this VideoProcessingDetailsProcessingProgress.

        An estimate of the total number of parts that need to be processed for the video. The number may be updated with more precise estimates while YouTube processes the video.

        :return: The parts_total of this VideoProcessingDetailsProcessingProgress.
        :rtype: str
        """
        return self._parts_total

    @parts_total.setter
    def parts_total(self, parts_total):
        """Sets the parts_total of this VideoProcessingDetailsProcessingProgress.

        An estimate of the total number of parts that need to be processed for the video. The number may be updated with more precise estimates while YouTube processes the video.

        :param parts_total: The parts_total of this VideoProcessingDetailsProcessingProgress.
        :type parts_total: str
        """

        self._parts_total = parts_total

    @property
    def time_left_ms(self):
        """Gets the time_left_ms of this VideoProcessingDetailsProcessingProgress.

        An estimate of the amount of time, in millseconds, that YouTube needs to finish processing the video.

        :return: The time_left_ms of this VideoProcessingDetailsProcessingProgress.
        :rtype: str
        """
        return self._time_left_ms

    @time_left_ms.setter
    def time_left_ms(self, time_left_ms):
        """Sets the time_left_ms of this VideoProcessingDetailsProcessingProgress.

        An estimate of the amount of time, in millseconds, that YouTube needs to finish processing the video.

        :param time_left_ms: The time_left_ms of this VideoProcessingDetailsProcessingProgress.
        :type time_left_ms: str
        """

        self._time_left_ms = time_left_ms
