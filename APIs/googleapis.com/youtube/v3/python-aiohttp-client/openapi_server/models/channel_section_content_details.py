# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChannelSectionContentDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channels: List[str]=None, playlists: List[str]=None):
        """ChannelSectionContentDetails - a model defined in OpenAPI

        :param channels: The channels of this ChannelSectionContentDetails.
        :param playlists: The playlists of this ChannelSectionContentDetails.
        """
        self.openapi_types = {
            'channels': List[str],
            'playlists': List[str]
        }

        self.attribute_map = {
            'channels': 'channels',
            'playlists': 'playlists'
        }

        self._channels = channels
        self._playlists = playlists

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelSectionContentDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChannelSectionContentDetails of this ChannelSectionContentDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channels(self):
        """Gets the channels of this ChannelSectionContentDetails.

        The channel ids for type multiple_channels.

        :return: The channels of this ChannelSectionContentDetails.
        :rtype: List[str]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this ChannelSectionContentDetails.

        The channel ids for type multiple_channels.

        :param channels: The channels of this ChannelSectionContentDetails.
        :type channels: List[str]
        """

        self._channels = channels

    @property
    def playlists(self):
        """Gets the playlists of this ChannelSectionContentDetails.

        The playlist ids for type single_playlist and multiple_playlists. For singlePlaylist, only one playlistId is allowed.

        :return: The playlists of this ChannelSectionContentDetails.
        :rtype: List[str]
        """
        return self._playlists

    @playlists.setter
    def playlists(self, playlists):
        """Sets the playlists of this ChannelSectionContentDetails.

        The playlist ids for type single_playlist and multiple_playlists. For singlePlaylist, only one playlistId is allowed.

        :param playlists: The playlists of this ChannelSectionContentDetails.
        :type playlists: List[str]
        """

        self._playlists = playlists
