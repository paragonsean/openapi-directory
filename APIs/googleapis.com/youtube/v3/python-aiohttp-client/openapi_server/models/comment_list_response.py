# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.comment import Comment
from openapi_server.models.page_info import PageInfo
from openapi_server import util


class CommentListResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, etag: str=None, event_id: str=None, items: List[Comment]=None, kind: str='youtube#commentListResponse', next_page_token: str=None, page_info: PageInfo=None, token_pagination: object=None, visitor_id: str=None):
        """CommentListResponse - a model defined in OpenAPI

        :param etag: The etag of this CommentListResponse.
        :param event_id: The event_id of this CommentListResponse.
        :param items: The items of this CommentListResponse.
        :param kind: The kind of this CommentListResponse.
        :param next_page_token: The next_page_token of this CommentListResponse.
        :param page_info: The page_info of this CommentListResponse.
        :param token_pagination: The token_pagination of this CommentListResponse.
        :param visitor_id: The visitor_id of this CommentListResponse.
        """
        self.openapi_types = {
            'etag': str,
            'event_id': str,
            'items': List[Comment],
            'kind': str,
            'next_page_token': str,
            'page_info': PageInfo,
            'token_pagination': object,
            'visitor_id': str
        }

        self.attribute_map = {
            'etag': 'etag',
            'event_id': 'eventId',
            'items': 'items',
            'kind': 'kind',
            'next_page_token': 'nextPageToken',
            'page_info': 'pageInfo',
            'token_pagination': 'tokenPagination',
            'visitor_id': 'visitorId'
        }

        self._etag = etag
        self._event_id = event_id
        self._items = items
        self._kind = kind
        self._next_page_token = next_page_token
        self._page_info = page_info
        self._token_pagination = token_pagination
        self._visitor_id = visitor_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommentListResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommentListResponse of this CommentListResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def etag(self):
        """Gets the etag of this CommentListResponse.

        Etag of this resource.

        :return: The etag of this CommentListResponse.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this CommentListResponse.

        Etag of this resource.

        :param etag: The etag of this CommentListResponse.
        :type etag: str
        """

        self._etag = etag

    @property
    def event_id(self):
        """Gets the event_id of this CommentListResponse.

        Serialized EventId of the request which produced this response.

        :return: The event_id of this CommentListResponse.
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this CommentListResponse.

        Serialized EventId of the request which produced this response.

        :param event_id: The event_id of this CommentListResponse.
        :type event_id: str
        """

        self._event_id = event_id

    @property
    def items(self):
        """Gets the items of this CommentListResponse.

        A list of comments that match the request criteria.

        :return: The items of this CommentListResponse.
        :rtype: List[Comment]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this CommentListResponse.

        A list of comments that match the request criteria.

        :param items: The items of this CommentListResponse.
        :type items: List[Comment]
        """

        self._items = items

    @property
    def kind(self):
        """Gets the kind of this CommentListResponse.

        Identifies what kind of resource this is. Value: the fixed string \"youtube#commentListResponse\".

        :return: The kind of this CommentListResponse.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this CommentListResponse.

        Identifies what kind of resource this is. Value: the fixed string \"youtube#commentListResponse\".

        :param kind: The kind of this CommentListResponse.
        :type kind: str
        """

        self._kind = kind

    @property
    def next_page_token(self):
        """Gets the next_page_token of this CommentListResponse.

        The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.

        :return: The next_page_token of this CommentListResponse.
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this CommentListResponse.

        The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.

        :param next_page_token: The next_page_token of this CommentListResponse.
        :type next_page_token: str
        """

        self._next_page_token = next_page_token

    @property
    def page_info(self):
        """Gets the page_info of this CommentListResponse.


        :return: The page_info of this CommentListResponse.
        :rtype: PageInfo
        """
        return self._page_info

    @page_info.setter
    def page_info(self, page_info):
        """Sets the page_info of this CommentListResponse.


        :param page_info: The page_info of this CommentListResponse.
        :type page_info: PageInfo
        """

        self._page_info = page_info

    @property
    def token_pagination(self):
        """Gets the token_pagination of this CommentListResponse.

        Stub token pagination template to suppress results.

        :return: The token_pagination of this CommentListResponse.
        :rtype: object
        """
        return self._token_pagination

    @token_pagination.setter
    def token_pagination(self, token_pagination):
        """Sets the token_pagination of this CommentListResponse.

        Stub token pagination template to suppress results.

        :param token_pagination: The token_pagination of this CommentListResponse.
        :type token_pagination: object
        """

        self._token_pagination = token_pagination

    @property
    def visitor_id(self):
        """Gets the visitor_id of this CommentListResponse.

        The visitorId identifies the visitor.

        :return: The visitor_id of this CommentListResponse.
        :rtype: str
        """
        return self._visitor_id

    @visitor_id.setter
    def visitor_id(self, visitor_id):
        """Sets the visitor_id of this CommentListResponse.

        The visitorId identifies the visitor.

        :param visitor_id: The visitor_id of this CommentListResponse.
        :type visitor_id: str
        """

        self._visitor_id = visitor_id
