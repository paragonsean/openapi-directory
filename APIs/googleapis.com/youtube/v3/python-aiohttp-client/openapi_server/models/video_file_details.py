# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.video_file_details_audio_stream import VideoFileDetailsAudioStream
from openapi_server.models.video_file_details_video_stream import VideoFileDetailsVideoStream
from openapi_server import util


class VideoFileDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio_streams: List[VideoFileDetailsAudioStream]=None, bitrate_bps: str=None, container: str=None, creation_time: str=None, duration_ms: str=None, file_name: str=None, file_size: str=None, file_type: str=None, video_streams: List[VideoFileDetailsVideoStream]=None):
        """VideoFileDetails - a model defined in OpenAPI

        :param audio_streams: The audio_streams of this VideoFileDetails.
        :param bitrate_bps: The bitrate_bps of this VideoFileDetails.
        :param container: The container of this VideoFileDetails.
        :param creation_time: The creation_time of this VideoFileDetails.
        :param duration_ms: The duration_ms of this VideoFileDetails.
        :param file_name: The file_name of this VideoFileDetails.
        :param file_size: The file_size of this VideoFileDetails.
        :param file_type: The file_type of this VideoFileDetails.
        :param video_streams: The video_streams of this VideoFileDetails.
        """
        self.openapi_types = {
            'audio_streams': List[VideoFileDetailsAudioStream],
            'bitrate_bps': str,
            'container': str,
            'creation_time': str,
            'duration_ms': str,
            'file_name': str,
            'file_size': str,
            'file_type': str,
            'video_streams': List[VideoFileDetailsVideoStream]
        }

        self.attribute_map = {
            'audio_streams': 'audioStreams',
            'bitrate_bps': 'bitrateBps',
            'container': 'container',
            'creation_time': 'creationTime',
            'duration_ms': 'durationMs',
            'file_name': 'fileName',
            'file_size': 'fileSize',
            'file_type': 'fileType',
            'video_streams': 'videoStreams'
        }

        self._audio_streams = audio_streams
        self._bitrate_bps = bitrate_bps
        self._container = container
        self._creation_time = creation_time
        self._duration_ms = duration_ms
        self._file_name = file_name
        self._file_size = file_size
        self._file_type = file_type
        self._video_streams = video_streams

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoFileDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VideoFileDetails of this VideoFileDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio_streams(self):
        """Gets the audio_streams of this VideoFileDetails.

        A list of audio streams contained in the uploaded video file. Each item in the list contains detailed metadata about an audio stream.

        :return: The audio_streams of this VideoFileDetails.
        :rtype: List[VideoFileDetailsAudioStream]
        """
        return self._audio_streams

    @audio_streams.setter
    def audio_streams(self, audio_streams):
        """Sets the audio_streams of this VideoFileDetails.

        A list of audio streams contained in the uploaded video file. Each item in the list contains detailed metadata about an audio stream.

        :param audio_streams: The audio_streams of this VideoFileDetails.
        :type audio_streams: List[VideoFileDetailsAudioStream]
        """

        self._audio_streams = audio_streams

    @property
    def bitrate_bps(self):
        """Gets the bitrate_bps of this VideoFileDetails.

        The uploaded video file's combined (video and audio) bitrate in bits per second.

        :return: The bitrate_bps of this VideoFileDetails.
        :rtype: str
        """
        return self._bitrate_bps

    @bitrate_bps.setter
    def bitrate_bps(self, bitrate_bps):
        """Sets the bitrate_bps of this VideoFileDetails.

        The uploaded video file's combined (video and audio) bitrate in bits per second.

        :param bitrate_bps: The bitrate_bps of this VideoFileDetails.
        :type bitrate_bps: str
        """

        self._bitrate_bps = bitrate_bps

    @property
    def container(self):
        """Gets the container of this VideoFileDetails.

        The uploaded video file's container format.

        :return: The container of this VideoFileDetails.
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this VideoFileDetails.

        The uploaded video file's container format.

        :param container: The container of this VideoFileDetails.
        :type container: str
        """

        self._container = container

    @property
    def creation_time(self):
        """Gets the creation_time of this VideoFileDetails.

        The date and time when the uploaded video file was created. The value is specified in ISO 8601 format. Currently, the following ISO 8601 formats are supported: - Date only: YYYY-MM-DD - Naive time: YYYY-MM-DDTHH:MM:SS - Time with timezone: YYYY-MM-DDTHH:MM:SS+HH:MM 

        :return: The creation_time of this VideoFileDetails.
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this VideoFileDetails.

        The date and time when the uploaded video file was created. The value is specified in ISO 8601 format. Currently, the following ISO 8601 formats are supported: - Date only: YYYY-MM-DD - Naive time: YYYY-MM-DDTHH:MM:SS - Time with timezone: YYYY-MM-DDTHH:MM:SS+HH:MM 

        :param creation_time: The creation_time of this VideoFileDetails.
        :type creation_time: str
        """

        self._creation_time = creation_time

    @property
    def duration_ms(self):
        """Gets the duration_ms of this VideoFileDetails.

        The length of the uploaded video in milliseconds.

        :return: The duration_ms of this VideoFileDetails.
        :rtype: str
        """
        return self._duration_ms

    @duration_ms.setter
    def duration_ms(self, duration_ms):
        """Sets the duration_ms of this VideoFileDetails.

        The length of the uploaded video in milliseconds.

        :param duration_ms: The duration_ms of this VideoFileDetails.
        :type duration_ms: str
        """

        self._duration_ms = duration_ms

    @property
    def file_name(self):
        """Gets the file_name of this VideoFileDetails.

        The uploaded file's name. This field is present whether a video file or another type of file was uploaded.

        :return: The file_name of this VideoFileDetails.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this VideoFileDetails.

        The uploaded file's name. This field is present whether a video file or another type of file was uploaded.

        :param file_name: The file_name of this VideoFileDetails.
        :type file_name: str
        """

        self._file_name = file_name

    @property
    def file_size(self):
        """Gets the file_size of this VideoFileDetails.

        The uploaded file's size in bytes. This field is present whether a video file or another type of file was uploaded.

        :return: The file_size of this VideoFileDetails.
        :rtype: str
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this VideoFileDetails.

        The uploaded file's size in bytes. This field is present whether a video file or another type of file was uploaded.

        :param file_size: The file_size of this VideoFileDetails.
        :type file_size: str
        """

        self._file_size = file_size

    @property
    def file_type(self):
        """Gets the file_type of this VideoFileDetails.

        The uploaded file's type as detected by YouTube's video processing engine. Currently, YouTube only processes video files, but this field is present whether a video file or another type of file was uploaded.

        :return: The file_type of this VideoFileDetails.
        :rtype: str
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this VideoFileDetails.

        The uploaded file's type as detected by YouTube's video processing engine. Currently, YouTube only processes video files, but this field is present whether a video file or another type of file was uploaded.

        :param file_type: The file_type of this VideoFileDetails.
        :type file_type: str
        """
        allowed_values = ["video", "audio", "image", "archive", "document", "project", "other"]  # noqa: E501
        if file_type not in allowed_values:
            raise ValueError(
                "Invalid value for `file_type` ({0}), must be one of {1}"
                .format(file_type, allowed_values)
            )

        self._file_type = file_type

    @property
    def video_streams(self):
        """Gets the video_streams of this VideoFileDetails.

        A list of video streams contained in the uploaded video file. Each item in the list contains detailed metadata about a video stream.

        :return: The video_streams of this VideoFileDetails.
        :rtype: List[VideoFileDetailsVideoStream]
        """
        return self._video_streams

    @video_streams.setter
    def video_streams(self, video_streams):
        """Sets the video_streams of this VideoFileDetails.

        A list of video streams contained in the uploaded video file. Each item in the list contains detailed metadata about a video stream.

        :param video_streams: The video_streams of this VideoFileDetails.
        :type video_streams: List[VideoFileDetailsVideoStream]
        """

        self._video_streams = video_streams
