# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChannelConversionPing(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context: str=None, conversion_url: str=None):
        """ChannelConversionPing - a model defined in OpenAPI

        :param context: The context of this ChannelConversionPing.
        :param conversion_url: The conversion_url of this ChannelConversionPing.
        """
        self.openapi_types = {
            'context': str,
            'conversion_url': str
        }

        self.attribute_map = {
            'context': 'context',
            'conversion_url': 'conversionUrl'
        }

        self._context = context
        self._conversion_url = conversion_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelConversionPing':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChannelConversionPing of this ChannelConversionPing.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context(self):
        """Gets the context of this ChannelConversionPing.

        Defines the context of the ping.

        :return: The context of this ChannelConversionPing.
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this ChannelConversionPing.

        Defines the context of the ping.

        :param context: The context of this ChannelConversionPing.
        :type context: str
        """
        allowed_values = ["subscribe", "unsubscribe", "cview"]  # noqa: E501
        if context not in allowed_values:
            raise ValueError(
                "Invalid value for `context` ({0}), must be one of {1}"
                .format(context, allowed_values)
            )

        self._context = context

    @property
    def conversion_url(self):
        """Gets the conversion_url of this ChannelConversionPing.

        The url (without the schema) that the player shall send the ping to. It's at caller's descretion to decide which schema to use (http vs https) Example of a returned url: //googleads.g.doubleclick.net/pagead/ viewthroughconversion/962985656/?data=path%3DtHe_path%3Btype%3D cview%3Butuid%3DGISQtTNGYqaYl4sKxoVvKA&labe=default The caller must append biscotti authentication (ms param in case of mobile, for example) to this ping.

        :return: The conversion_url of this ChannelConversionPing.
        :rtype: str
        """
        return self._conversion_url

    @conversion_url.setter
    def conversion_url(self, conversion_url):
        """Sets the conversion_url of this ChannelConversionPing.

        The url (without the schema) that the player shall send the ping to. It's at caller's descretion to decide which schema to use (http vs https) Example of a returned url: //googleads.g.doubleclick.net/pagead/ viewthroughconversion/962985656/?data=path%3DtHe_path%3Btype%3D cview%3Butuid%3DGISQtTNGYqaYl4sKxoVvKA&labe=default The caller must append biscotti authentication (ms param in case of mobile, for example) to this ping.

        :param conversion_url: The conversion_url of this ChannelConversionPing.
        :type conversion_url: str
        """

        self._conversion_url = conversion_url
