# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VideoContentDetailsRegionRestriction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed: List[str]=None, blocked: List[str]=None):
        """VideoContentDetailsRegionRestriction - a model defined in OpenAPI

        :param allowed: The allowed of this VideoContentDetailsRegionRestriction.
        :param blocked: The blocked of this VideoContentDetailsRegionRestriction.
        """
        self.openapi_types = {
            'allowed': List[str],
            'blocked': List[str]
        }

        self.attribute_map = {
            'allowed': 'allowed',
            'blocked': 'blocked'
        }

        self._allowed = allowed
        self._blocked = blocked

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoContentDetailsRegionRestriction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VideoContentDetailsRegionRestriction of this VideoContentDetailsRegionRestriction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed(self):
        """Gets the allowed of this VideoContentDetailsRegionRestriction.

        A list of region codes that identify countries where the video is viewable. If this property is present and a country is not listed in its value, then the video is blocked from appearing in that country. If this property is present and contains an empty list, the video is blocked in all countries.

        :return: The allowed of this VideoContentDetailsRegionRestriction.
        :rtype: List[str]
        """
        return self._allowed

    @allowed.setter
    def allowed(self, allowed):
        """Sets the allowed of this VideoContentDetailsRegionRestriction.

        A list of region codes that identify countries where the video is viewable. If this property is present and a country is not listed in its value, then the video is blocked from appearing in that country. If this property is present and contains an empty list, the video is blocked in all countries.

        :param allowed: The allowed of this VideoContentDetailsRegionRestriction.
        :type allowed: List[str]
        """

        self._allowed = allowed

    @property
    def blocked(self):
        """Gets the blocked of this VideoContentDetailsRegionRestriction.

        A list of region codes that identify countries where the video is blocked. If this property is present and a country is not listed in its value, then the video is viewable in that country. If this property is present and contains an empty list, the video is viewable in all countries.

        :return: The blocked of this VideoContentDetailsRegionRestriction.
        :rtype: List[str]
        """
        return self._blocked

    @blocked.setter
    def blocked(self, blocked):
        """Sets the blocked of this VideoContentDetailsRegionRestriction.

        A list of region codes that identify countries where the video is blocked. If this property is present and a country is not listed in its value, then the video is viewable in that country. If this property is present and contains an empty list, the video is viewable in all countries.

        :param blocked: The blocked of this VideoContentDetailsRegionRestriction.
        :type blocked: List[str]
        """

        self._blocked = blocked
