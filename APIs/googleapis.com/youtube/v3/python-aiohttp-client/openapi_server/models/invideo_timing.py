# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InvideoTiming(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duration_ms: str=None, offset_ms: str=None, type: str=None):
        """InvideoTiming - a model defined in OpenAPI

        :param duration_ms: The duration_ms of this InvideoTiming.
        :param offset_ms: The offset_ms of this InvideoTiming.
        :param type: The type of this InvideoTiming.
        """
        self.openapi_types = {
            'duration_ms': str,
            'offset_ms': str,
            'type': str
        }

        self.attribute_map = {
            'duration_ms': 'durationMs',
            'offset_ms': 'offsetMs',
            'type': 'type'
        }

        self._duration_ms = duration_ms
        self._offset_ms = offset_ms
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InvideoTiming':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InvideoTiming of this InvideoTiming.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duration_ms(self):
        """Gets the duration_ms of this InvideoTiming.

        Defines the duration in milliseconds for which the promotion should be displayed. If missing, the client should use the default.

        :return: The duration_ms of this InvideoTiming.
        :rtype: str
        """
        return self._duration_ms

    @duration_ms.setter
    def duration_ms(self, duration_ms):
        """Sets the duration_ms of this InvideoTiming.

        Defines the duration in milliseconds for which the promotion should be displayed. If missing, the client should use the default.

        :param duration_ms: The duration_ms of this InvideoTiming.
        :type duration_ms: str
        """

        self._duration_ms = duration_ms

    @property
    def offset_ms(self):
        """Gets the offset_ms of this InvideoTiming.

        Defines the time at which the promotion will appear. Depending on the value of type the value of the offsetMs field will represent a time offset from the start or from the end of the video, expressed in milliseconds.

        :return: The offset_ms of this InvideoTiming.
        :rtype: str
        """
        return self._offset_ms

    @offset_ms.setter
    def offset_ms(self, offset_ms):
        """Sets the offset_ms of this InvideoTiming.

        Defines the time at which the promotion will appear. Depending on the value of type the value of the offsetMs field will represent a time offset from the start or from the end of the video, expressed in milliseconds.

        :param offset_ms: The offset_ms of this InvideoTiming.
        :type offset_ms: str
        """

        self._offset_ms = offset_ms

    @property
    def type(self):
        """Gets the type of this InvideoTiming.

        Describes a timing type. If the value is offsetFromStart, then the offsetMs field represents an offset from the start of the video. If the value is offsetFromEnd, then the offsetMs field represents an offset from the end of the video.

        :return: The type of this InvideoTiming.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InvideoTiming.

        Describes a timing type. If the value is offsetFromStart, then the offsetMs field represents an offset from the start of the video. If the value is offsetFromEnd, then the offsetMs field represents an offset from the end of the video.

        :param type: The type of this InvideoTiming.
        :type type: str
        """
        allowed_values = ["offsetFromStart", "offsetFromEnd"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
