# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ingestion_info import IngestionInfo
from openapi_server import util


class CdnSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, format: str=None, frame_rate: str=None, ingestion_info: IngestionInfo=None, ingestion_type: str=None, resolution: str=None):
        """CdnSettings - a model defined in OpenAPI

        :param format: The format of this CdnSettings.
        :param frame_rate: The frame_rate of this CdnSettings.
        :param ingestion_info: The ingestion_info of this CdnSettings.
        :param ingestion_type: The ingestion_type of this CdnSettings.
        :param resolution: The resolution of this CdnSettings.
        """
        self.openapi_types = {
            'format': str,
            'frame_rate': str,
            'ingestion_info': IngestionInfo,
            'ingestion_type': str,
            'resolution': str
        }

        self.attribute_map = {
            'format': 'format',
            'frame_rate': 'frameRate',
            'ingestion_info': 'ingestionInfo',
            'ingestion_type': 'ingestionType',
            'resolution': 'resolution'
        }

        self._format = format
        self._frame_rate = frame_rate
        self._ingestion_info = ingestion_info
        self._ingestion_type = ingestion_type
        self._resolution = resolution

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CdnSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CdnSettings of this CdnSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def format(self):
        """Gets the format of this CdnSettings.

        The format of the video stream that you are sending to Youtube. 

        :return: The format of this CdnSettings.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this CdnSettings.

        The format of the video stream that you are sending to Youtube. 

        :param format: The format of this CdnSettings.
        :type format: str
        """

        self._format = format

    @property
    def frame_rate(self):
        """Gets the frame_rate of this CdnSettings.

        The frame rate of the inbound video data.

        :return: The frame_rate of this CdnSettings.
        :rtype: str
        """
        return self._frame_rate

    @frame_rate.setter
    def frame_rate(self, frame_rate):
        """Sets the frame_rate of this CdnSettings.

        The frame rate of the inbound video data.

        :param frame_rate: The frame_rate of this CdnSettings.
        :type frame_rate: str
        """
        allowed_values = ["30fps", "60fps", "variable"]  # noqa: E501
        if frame_rate not in allowed_values:
            raise ValueError(
                "Invalid value for `frame_rate` ({0}), must be one of {1}"
                .format(frame_rate, allowed_values)
            )

        self._frame_rate = frame_rate

    @property
    def ingestion_info(self):
        """Gets the ingestion_info of this CdnSettings.


        :return: The ingestion_info of this CdnSettings.
        :rtype: IngestionInfo
        """
        return self._ingestion_info

    @ingestion_info.setter
    def ingestion_info(self, ingestion_info):
        """Sets the ingestion_info of this CdnSettings.


        :param ingestion_info: The ingestion_info of this CdnSettings.
        :type ingestion_info: IngestionInfo
        """

        self._ingestion_info = ingestion_info

    @property
    def ingestion_type(self):
        """Gets the ingestion_type of this CdnSettings.

         The method or protocol used to transmit the video stream.

        :return: The ingestion_type of this CdnSettings.
        :rtype: str
        """
        return self._ingestion_type

    @ingestion_type.setter
    def ingestion_type(self, ingestion_type):
        """Sets the ingestion_type of this CdnSettings.

         The method or protocol used to transmit the video stream.

        :param ingestion_type: The ingestion_type of this CdnSettings.
        :type ingestion_type: str
        """
        allowed_values = ["rtmp", "dash", "webrtc", "hls"]  # noqa: E501
        if ingestion_type not in allowed_values:
            raise ValueError(
                "Invalid value for `ingestion_type` ({0}), must be one of {1}"
                .format(ingestion_type, allowed_values)
            )

        self._ingestion_type = ingestion_type

    @property
    def resolution(self):
        """Gets the resolution of this CdnSettings.

        The resolution of the inbound video data.

        :return: The resolution of this CdnSettings.
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this CdnSettings.

        The resolution of the inbound video data.

        :param resolution: The resolution of this CdnSettings.
        :type resolution: str
        """
        allowed_values = ["240p", "360p", "480p", "720p", "1080p", "1440p", "2160p", "variable"]  # noqa: E501
        if resolution not in allowed_values:
            raise ValueError(
                "Invalid value for `resolution` ({0}), must be one of {1}"
                .format(resolution, allowed_values)
            )

        self._resolution = resolution
