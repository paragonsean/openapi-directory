# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.live_stream_configuration_issue import LiveStreamConfigurationIssue
from openapi_server import util


class LiveStreamHealthStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configuration_issues: List[LiveStreamConfigurationIssue]=None, last_update_time_seconds: str=None, status: str=None):
        """LiveStreamHealthStatus - a model defined in OpenAPI

        :param configuration_issues: The configuration_issues of this LiveStreamHealthStatus.
        :param last_update_time_seconds: The last_update_time_seconds of this LiveStreamHealthStatus.
        :param status: The status of this LiveStreamHealthStatus.
        """
        self.openapi_types = {
            'configuration_issues': List[LiveStreamConfigurationIssue],
            'last_update_time_seconds': str,
            'status': str
        }

        self.attribute_map = {
            'configuration_issues': 'configurationIssues',
            'last_update_time_seconds': 'lastUpdateTimeSeconds',
            'status': 'status'
        }

        self._configuration_issues = configuration_issues
        self._last_update_time_seconds = last_update_time_seconds
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LiveStreamHealthStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LiveStreamHealthStatus of this LiveStreamHealthStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configuration_issues(self):
        """Gets the configuration_issues of this LiveStreamHealthStatus.

        The configurations issues on this stream

        :return: The configuration_issues of this LiveStreamHealthStatus.
        :rtype: List[LiveStreamConfigurationIssue]
        """
        return self._configuration_issues

    @configuration_issues.setter
    def configuration_issues(self, configuration_issues):
        """Sets the configuration_issues of this LiveStreamHealthStatus.

        The configurations issues on this stream

        :param configuration_issues: The configuration_issues of this LiveStreamHealthStatus.
        :type configuration_issues: List[LiveStreamConfigurationIssue]
        """

        self._configuration_issues = configuration_issues

    @property
    def last_update_time_seconds(self):
        """Gets the last_update_time_seconds of this LiveStreamHealthStatus.

        The last time this status was updated (in seconds)

        :return: The last_update_time_seconds of this LiveStreamHealthStatus.
        :rtype: str
        """
        return self._last_update_time_seconds

    @last_update_time_seconds.setter
    def last_update_time_seconds(self, last_update_time_seconds):
        """Sets the last_update_time_seconds of this LiveStreamHealthStatus.

        The last time this status was updated (in seconds)

        :param last_update_time_seconds: The last_update_time_seconds of this LiveStreamHealthStatus.
        :type last_update_time_seconds: str
        """

        self._last_update_time_seconds = last_update_time_seconds

    @property
    def status(self):
        """Gets the status of this LiveStreamHealthStatus.

        The status code of this stream

        :return: The status of this LiveStreamHealthStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LiveStreamHealthStatus.

        The status code of this stream

        :param status: The status of this LiveStreamHealthStatus.
        :type status: str
        """
        allowed_values = ["good", "ok", "bad", "noData", "revoked"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
