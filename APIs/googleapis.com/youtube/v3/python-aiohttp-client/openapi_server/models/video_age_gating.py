# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VideoAgeGating(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alcohol_content: bool=None, restricted: bool=None, video_game_rating: str=None):
        """VideoAgeGating - a model defined in OpenAPI

        :param alcohol_content: The alcohol_content of this VideoAgeGating.
        :param restricted: The restricted of this VideoAgeGating.
        :param video_game_rating: The video_game_rating of this VideoAgeGating.
        """
        self.openapi_types = {
            'alcohol_content': bool,
            'restricted': bool,
            'video_game_rating': str
        }

        self.attribute_map = {
            'alcohol_content': 'alcoholContent',
            'restricted': 'restricted',
            'video_game_rating': 'videoGameRating'
        }

        self._alcohol_content = alcohol_content
        self._restricted = restricted
        self._video_game_rating = video_game_rating

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoAgeGating':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VideoAgeGating of this VideoAgeGating.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alcohol_content(self):
        """Gets the alcohol_content of this VideoAgeGating.

        Indicates whether or not the video has alcoholic beverage content. Only users of legal purchasing age in a particular country, as identified by ICAP, can view the content.

        :return: The alcohol_content of this VideoAgeGating.
        :rtype: bool
        """
        return self._alcohol_content

    @alcohol_content.setter
    def alcohol_content(self, alcohol_content):
        """Sets the alcohol_content of this VideoAgeGating.

        Indicates whether or not the video has alcoholic beverage content. Only users of legal purchasing age in a particular country, as identified by ICAP, can view the content.

        :param alcohol_content: The alcohol_content of this VideoAgeGating.
        :type alcohol_content: bool
        """

        self._alcohol_content = alcohol_content

    @property
    def restricted(self):
        """Gets the restricted of this VideoAgeGating.

        Age-restricted trailers. For redband trailers and adult-rated video-games. Only users aged 18+ can view the content. The the field is true the content is restricted to viewers aged 18+. Otherwise The field won't be present.

        :return: The restricted of this VideoAgeGating.
        :rtype: bool
        """
        return self._restricted

    @restricted.setter
    def restricted(self, restricted):
        """Sets the restricted of this VideoAgeGating.

        Age-restricted trailers. For redband trailers and adult-rated video-games. Only users aged 18+ can view the content. The the field is true the content is restricted to viewers aged 18+. Otherwise The field won't be present.

        :param restricted: The restricted of this VideoAgeGating.
        :type restricted: bool
        """

        self._restricted = restricted

    @property
    def video_game_rating(self):
        """Gets the video_game_rating of this VideoAgeGating.

        Video game rating, if any.

        :return: The video_game_rating of this VideoAgeGating.
        :rtype: str
        """
        return self._video_game_rating

    @video_game_rating.setter
    def video_game_rating(self, video_game_rating):
        """Sets the video_game_rating of this VideoAgeGating.

        Video game rating, if any.

        :param video_game_rating: The video_game_rating of this VideoAgeGating.
        :type video_game_rating: str
        """
        allowed_values = ["anyone", "m15Plus", "m16Plus", "m17Plus"]  # noqa: E501
        if video_game_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `video_game_rating` ({0}), must be one of {1}"
                .format(video_game_rating, allowed_values)
            )

        self._video_game_rating = video_game_rating
