# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CuepointSchedule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, pause_ads_until: str=None, repeat_interval_secs: int=None, schedule_strategy: str=None):
        """CuepointSchedule - a model defined in OpenAPI

        :param enabled: The enabled of this CuepointSchedule.
        :param pause_ads_until: The pause_ads_until of this CuepointSchedule.
        :param repeat_interval_secs: The repeat_interval_secs of this CuepointSchedule.
        :param schedule_strategy: The schedule_strategy of this CuepointSchedule.
        """
        self.openapi_types = {
            'enabled': bool,
            'pause_ads_until': str,
            'repeat_interval_secs': int,
            'schedule_strategy': str
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'pause_ads_until': 'pauseAdsUntil',
            'repeat_interval_secs': 'repeatIntervalSecs',
            'schedule_strategy': 'scheduleStrategy'
        }

        self._enabled = enabled
        self._pause_ads_until = pause_ads_until
        self._repeat_interval_secs = repeat_interval_secs
        self._schedule_strategy = schedule_strategy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CuepointSchedule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CuepointSchedule of this CuepointSchedule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this CuepointSchedule.

        This field is semantically required. If it is set false or not set, other fields in this message will be ignored.

        :return: The enabled of this CuepointSchedule.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this CuepointSchedule.

        This field is semantically required. If it is set false or not set, other fields in this message will be ignored.

        :param enabled: The enabled of this CuepointSchedule.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def pause_ads_until(self):
        """Gets the pause_ads_until of this CuepointSchedule.

        If set, automatic cuepoint insertion is paused until this timestamp (\"No Ad Zone\"). The value is specified in ISO 8601 format.

        :return: The pause_ads_until of this CuepointSchedule.
        :rtype: str
        """
        return self._pause_ads_until

    @pause_ads_until.setter
    def pause_ads_until(self, pause_ads_until):
        """Sets the pause_ads_until of this CuepointSchedule.

        If set, automatic cuepoint insertion is paused until this timestamp (\"No Ad Zone\"). The value is specified in ISO 8601 format.

        :param pause_ads_until: The pause_ads_until of this CuepointSchedule.
        :type pause_ads_until: str
        """

        self._pause_ads_until = pause_ads_until

    @property
    def repeat_interval_secs(self):
        """Gets the repeat_interval_secs of this CuepointSchedule.

        Interval frequency in seconds that api uses to insert cuepoints automatically.

        :return: The repeat_interval_secs of this CuepointSchedule.
        :rtype: int
        """
        return self._repeat_interval_secs

    @repeat_interval_secs.setter
    def repeat_interval_secs(self, repeat_interval_secs):
        """Sets the repeat_interval_secs of this CuepointSchedule.

        Interval frequency in seconds that api uses to insert cuepoints automatically.

        :param repeat_interval_secs: The repeat_interval_secs of this CuepointSchedule.
        :type repeat_interval_secs: int
        """

        self._repeat_interval_secs = repeat_interval_secs

    @property
    def schedule_strategy(self):
        """Gets the schedule_strategy of this CuepointSchedule.

        The strategy to use when scheduling cuepoints.

        :return: The schedule_strategy of this CuepointSchedule.
        :rtype: str
        """
        return self._schedule_strategy

    @schedule_strategy.setter
    def schedule_strategy(self, schedule_strategy):
        """Sets the schedule_strategy of this CuepointSchedule.

        The strategy to use when scheduling cuepoints.

        :param schedule_strategy: The schedule_strategy of this CuepointSchedule.
        :type schedule_strategy: str
        """
        allowed_values = ["scheduleStrategyUnspecified", "concurrent", "nonConcurrent"]  # noqa: E501
        if schedule_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `schedule_strategy` ({0}), must be one of {1}"
                .format(schedule_strategy, allowed_values)
            )

        self._schedule_strategy = schedule_strategy
