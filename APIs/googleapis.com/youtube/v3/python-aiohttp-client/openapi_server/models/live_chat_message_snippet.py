# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.live_chat_fan_funding_event_details import LiveChatFanFundingEventDetails
from openapi_server.models.live_chat_gift_membership_received_details import LiveChatGiftMembershipReceivedDetails
from openapi_server.models.live_chat_member_milestone_chat_details import LiveChatMemberMilestoneChatDetails
from openapi_server.models.live_chat_membership_gifting_details import LiveChatMembershipGiftingDetails
from openapi_server.models.live_chat_message_deleted_details import LiveChatMessageDeletedDetails
from openapi_server.models.live_chat_message_retracted_details import LiveChatMessageRetractedDetails
from openapi_server.models.live_chat_new_sponsor_details import LiveChatNewSponsorDetails
from openapi_server.models.live_chat_poll_details import LiveChatPollDetails
from openapi_server.models.live_chat_super_chat_details import LiveChatSuperChatDetails
from openapi_server.models.live_chat_super_sticker_details import LiveChatSuperStickerDetails
from openapi_server.models.live_chat_text_message_details import LiveChatTextMessageDetails
from openapi_server.models.live_chat_user_banned_message_details import LiveChatUserBannedMessageDetails
from openapi_server import util


class LiveChatMessageSnippet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author_channel_id: str=None, display_message: str=None, fan_funding_event_details: LiveChatFanFundingEventDetails=None, gift_membership_received_details: LiveChatGiftMembershipReceivedDetails=None, has_display_content: bool=None, live_chat_id: str=None, member_milestone_chat_details: LiveChatMemberMilestoneChatDetails=None, membership_gifting_details: LiveChatMembershipGiftingDetails=None, message_deleted_details: LiveChatMessageDeletedDetails=None, message_retracted_details: LiveChatMessageRetractedDetails=None, new_sponsor_details: LiveChatNewSponsorDetails=None, poll_details: LiveChatPollDetails=None, published_at: datetime=None, super_chat_details: LiveChatSuperChatDetails=None, super_sticker_details: LiveChatSuperStickerDetails=None, text_message_details: LiveChatTextMessageDetails=None, type: str=None, user_banned_details: LiveChatUserBannedMessageDetails=None):
        """LiveChatMessageSnippet - a model defined in OpenAPI

        :param author_channel_id: The author_channel_id of this LiveChatMessageSnippet.
        :param display_message: The display_message of this LiveChatMessageSnippet.
        :param fan_funding_event_details: The fan_funding_event_details of this LiveChatMessageSnippet.
        :param gift_membership_received_details: The gift_membership_received_details of this LiveChatMessageSnippet.
        :param has_display_content: The has_display_content of this LiveChatMessageSnippet.
        :param live_chat_id: The live_chat_id of this LiveChatMessageSnippet.
        :param member_milestone_chat_details: The member_milestone_chat_details of this LiveChatMessageSnippet.
        :param membership_gifting_details: The membership_gifting_details of this LiveChatMessageSnippet.
        :param message_deleted_details: The message_deleted_details of this LiveChatMessageSnippet.
        :param message_retracted_details: The message_retracted_details of this LiveChatMessageSnippet.
        :param new_sponsor_details: The new_sponsor_details of this LiveChatMessageSnippet.
        :param poll_details: The poll_details of this LiveChatMessageSnippet.
        :param published_at: The published_at of this LiveChatMessageSnippet.
        :param super_chat_details: The super_chat_details of this LiveChatMessageSnippet.
        :param super_sticker_details: The super_sticker_details of this LiveChatMessageSnippet.
        :param text_message_details: The text_message_details of this LiveChatMessageSnippet.
        :param type: The type of this LiveChatMessageSnippet.
        :param user_banned_details: The user_banned_details of this LiveChatMessageSnippet.
        """
        self.openapi_types = {
            'author_channel_id': str,
            'display_message': str,
            'fan_funding_event_details': LiveChatFanFundingEventDetails,
            'gift_membership_received_details': LiveChatGiftMembershipReceivedDetails,
            'has_display_content': bool,
            'live_chat_id': str,
            'member_milestone_chat_details': LiveChatMemberMilestoneChatDetails,
            'membership_gifting_details': LiveChatMembershipGiftingDetails,
            'message_deleted_details': LiveChatMessageDeletedDetails,
            'message_retracted_details': LiveChatMessageRetractedDetails,
            'new_sponsor_details': LiveChatNewSponsorDetails,
            'poll_details': LiveChatPollDetails,
            'published_at': datetime,
            'super_chat_details': LiveChatSuperChatDetails,
            'super_sticker_details': LiveChatSuperStickerDetails,
            'text_message_details': LiveChatTextMessageDetails,
            'type': str,
            'user_banned_details': LiveChatUserBannedMessageDetails
        }

        self.attribute_map = {
            'author_channel_id': 'authorChannelId',
            'display_message': 'displayMessage',
            'fan_funding_event_details': 'fanFundingEventDetails',
            'gift_membership_received_details': 'giftMembershipReceivedDetails',
            'has_display_content': 'hasDisplayContent',
            'live_chat_id': 'liveChatId',
            'member_milestone_chat_details': 'memberMilestoneChatDetails',
            'membership_gifting_details': 'membershipGiftingDetails',
            'message_deleted_details': 'messageDeletedDetails',
            'message_retracted_details': 'messageRetractedDetails',
            'new_sponsor_details': 'newSponsorDetails',
            'poll_details': 'pollDetails',
            'published_at': 'publishedAt',
            'super_chat_details': 'superChatDetails',
            'super_sticker_details': 'superStickerDetails',
            'text_message_details': 'textMessageDetails',
            'type': 'type',
            'user_banned_details': 'userBannedDetails'
        }

        self._author_channel_id = author_channel_id
        self._display_message = display_message
        self._fan_funding_event_details = fan_funding_event_details
        self._gift_membership_received_details = gift_membership_received_details
        self._has_display_content = has_display_content
        self._live_chat_id = live_chat_id
        self._member_milestone_chat_details = member_milestone_chat_details
        self._membership_gifting_details = membership_gifting_details
        self._message_deleted_details = message_deleted_details
        self._message_retracted_details = message_retracted_details
        self._new_sponsor_details = new_sponsor_details
        self._poll_details = poll_details
        self._published_at = published_at
        self._super_chat_details = super_chat_details
        self._super_sticker_details = super_sticker_details
        self._text_message_details = text_message_details
        self._type = type
        self._user_banned_details = user_banned_details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LiveChatMessageSnippet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LiveChatMessageSnippet of this LiveChatMessageSnippet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author_channel_id(self):
        """Gets the author_channel_id of this LiveChatMessageSnippet.

        The ID of the user that authored this message, this field is not always filled. textMessageEvent - the user that wrote the message fanFundingEvent - the user that funded the broadcast newSponsorEvent - the user that just became a sponsor memberMilestoneChatEvent - the member that sent the message membershipGiftingEvent - the user that made the purchase giftMembershipReceivedEvent - the user that received the gift membership messageDeletedEvent - the moderator that took the action messageRetractedEvent - the author that retracted their message userBannedEvent - the moderator that took the action superChatEvent - the user that made the purchase superStickerEvent - the user that made the purchase pollEvent - the user that created the poll

        :return: The author_channel_id of this LiveChatMessageSnippet.
        :rtype: str
        """
        return self._author_channel_id

    @author_channel_id.setter
    def author_channel_id(self, author_channel_id):
        """Sets the author_channel_id of this LiveChatMessageSnippet.

        The ID of the user that authored this message, this field is not always filled. textMessageEvent - the user that wrote the message fanFundingEvent - the user that funded the broadcast newSponsorEvent - the user that just became a sponsor memberMilestoneChatEvent - the member that sent the message membershipGiftingEvent - the user that made the purchase giftMembershipReceivedEvent - the user that received the gift membership messageDeletedEvent - the moderator that took the action messageRetractedEvent - the author that retracted their message userBannedEvent - the moderator that took the action superChatEvent - the user that made the purchase superStickerEvent - the user that made the purchase pollEvent - the user that created the poll

        :param author_channel_id: The author_channel_id of this LiveChatMessageSnippet.
        :type author_channel_id: str
        """

        self._author_channel_id = author_channel_id

    @property
    def display_message(self):
        """Gets the display_message of this LiveChatMessageSnippet.

        Contains a string that can be displayed to the user. If this field is not present the message is silent, at the moment only messages of type TOMBSTONE and CHAT_ENDED_EVENT are silent.

        :return: The display_message of this LiveChatMessageSnippet.
        :rtype: str
        """
        return self._display_message

    @display_message.setter
    def display_message(self, display_message):
        """Sets the display_message of this LiveChatMessageSnippet.

        Contains a string that can be displayed to the user. If this field is not present the message is silent, at the moment only messages of type TOMBSTONE and CHAT_ENDED_EVENT are silent.

        :param display_message: The display_message of this LiveChatMessageSnippet.
        :type display_message: str
        """

        self._display_message = display_message

    @property
    def fan_funding_event_details(self):
        """Gets the fan_funding_event_details of this LiveChatMessageSnippet.


        :return: The fan_funding_event_details of this LiveChatMessageSnippet.
        :rtype: LiveChatFanFundingEventDetails
        """
        return self._fan_funding_event_details

    @fan_funding_event_details.setter
    def fan_funding_event_details(self, fan_funding_event_details):
        """Sets the fan_funding_event_details of this LiveChatMessageSnippet.


        :param fan_funding_event_details: The fan_funding_event_details of this LiveChatMessageSnippet.
        :type fan_funding_event_details: LiveChatFanFundingEventDetails
        """

        self._fan_funding_event_details = fan_funding_event_details

    @property
    def gift_membership_received_details(self):
        """Gets the gift_membership_received_details of this LiveChatMessageSnippet.


        :return: The gift_membership_received_details of this LiveChatMessageSnippet.
        :rtype: LiveChatGiftMembershipReceivedDetails
        """
        return self._gift_membership_received_details

    @gift_membership_received_details.setter
    def gift_membership_received_details(self, gift_membership_received_details):
        """Sets the gift_membership_received_details of this LiveChatMessageSnippet.


        :param gift_membership_received_details: The gift_membership_received_details of this LiveChatMessageSnippet.
        :type gift_membership_received_details: LiveChatGiftMembershipReceivedDetails
        """

        self._gift_membership_received_details = gift_membership_received_details

    @property
    def has_display_content(self):
        """Gets the has_display_content of this LiveChatMessageSnippet.

        Whether the message has display content that should be displayed to users.

        :return: The has_display_content of this LiveChatMessageSnippet.
        :rtype: bool
        """
        return self._has_display_content

    @has_display_content.setter
    def has_display_content(self, has_display_content):
        """Sets the has_display_content of this LiveChatMessageSnippet.

        Whether the message has display content that should be displayed to users.

        :param has_display_content: The has_display_content of this LiveChatMessageSnippet.
        :type has_display_content: bool
        """

        self._has_display_content = has_display_content

    @property
    def live_chat_id(self):
        """Gets the live_chat_id of this LiveChatMessageSnippet.


        :return: The live_chat_id of this LiveChatMessageSnippet.
        :rtype: str
        """
        return self._live_chat_id

    @live_chat_id.setter
    def live_chat_id(self, live_chat_id):
        """Sets the live_chat_id of this LiveChatMessageSnippet.


        :param live_chat_id: The live_chat_id of this LiveChatMessageSnippet.
        :type live_chat_id: str
        """

        self._live_chat_id = live_chat_id

    @property
    def member_milestone_chat_details(self):
        """Gets the member_milestone_chat_details of this LiveChatMessageSnippet.


        :return: The member_milestone_chat_details of this LiveChatMessageSnippet.
        :rtype: LiveChatMemberMilestoneChatDetails
        """
        return self._member_milestone_chat_details

    @member_milestone_chat_details.setter
    def member_milestone_chat_details(self, member_milestone_chat_details):
        """Sets the member_milestone_chat_details of this LiveChatMessageSnippet.


        :param member_milestone_chat_details: The member_milestone_chat_details of this LiveChatMessageSnippet.
        :type member_milestone_chat_details: LiveChatMemberMilestoneChatDetails
        """

        self._member_milestone_chat_details = member_milestone_chat_details

    @property
    def membership_gifting_details(self):
        """Gets the membership_gifting_details of this LiveChatMessageSnippet.


        :return: The membership_gifting_details of this LiveChatMessageSnippet.
        :rtype: LiveChatMembershipGiftingDetails
        """
        return self._membership_gifting_details

    @membership_gifting_details.setter
    def membership_gifting_details(self, membership_gifting_details):
        """Sets the membership_gifting_details of this LiveChatMessageSnippet.


        :param membership_gifting_details: The membership_gifting_details of this LiveChatMessageSnippet.
        :type membership_gifting_details: LiveChatMembershipGiftingDetails
        """

        self._membership_gifting_details = membership_gifting_details

    @property
    def message_deleted_details(self):
        """Gets the message_deleted_details of this LiveChatMessageSnippet.


        :return: The message_deleted_details of this LiveChatMessageSnippet.
        :rtype: LiveChatMessageDeletedDetails
        """
        return self._message_deleted_details

    @message_deleted_details.setter
    def message_deleted_details(self, message_deleted_details):
        """Sets the message_deleted_details of this LiveChatMessageSnippet.


        :param message_deleted_details: The message_deleted_details of this LiveChatMessageSnippet.
        :type message_deleted_details: LiveChatMessageDeletedDetails
        """

        self._message_deleted_details = message_deleted_details

    @property
    def message_retracted_details(self):
        """Gets the message_retracted_details of this LiveChatMessageSnippet.


        :return: The message_retracted_details of this LiveChatMessageSnippet.
        :rtype: LiveChatMessageRetractedDetails
        """
        return self._message_retracted_details

    @message_retracted_details.setter
    def message_retracted_details(self, message_retracted_details):
        """Sets the message_retracted_details of this LiveChatMessageSnippet.


        :param message_retracted_details: The message_retracted_details of this LiveChatMessageSnippet.
        :type message_retracted_details: LiveChatMessageRetractedDetails
        """

        self._message_retracted_details = message_retracted_details

    @property
    def new_sponsor_details(self):
        """Gets the new_sponsor_details of this LiveChatMessageSnippet.


        :return: The new_sponsor_details of this LiveChatMessageSnippet.
        :rtype: LiveChatNewSponsorDetails
        """
        return self._new_sponsor_details

    @new_sponsor_details.setter
    def new_sponsor_details(self, new_sponsor_details):
        """Sets the new_sponsor_details of this LiveChatMessageSnippet.


        :param new_sponsor_details: The new_sponsor_details of this LiveChatMessageSnippet.
        :type new_sponsor_details: LiveChatNewSponsorDetails
        """

        self._new_sponsor_details = new_sponsor_details

    @property
    def poll_details(self):
        """Gets the poll_details of this LiveChatMessageSnippet.


        :return: The poll_details of this LiveChatMessageSnippet.
        :rtype: LiveChatPollDetails
        """
        return self._poll_details

    @poll_details.setter
    def poll_details(self, poll_details):
        """Sets the poll_details of this LiveChatMessageSnippet.


        :param poll_details: The poll_details of this LiveChatMessageSnippet.
        :type poll_details: LiveChatPollDetails
        """

        self._poll_details = poll_details

    @property
    def published_at(self):
        """Gets the published_at of this LiveChatMessageSnippet.

        The date and time when the message was orignally published.

        :return: The published_at of this LiveChatMessageSnippet.
        :rtype: datetime
        """
        return self._published_at

    @published_at.setter
    def published_at(self, published_at):
        """Sets the published_at of this LiveChatMessageSnippet.

        The date and time when the message was orignally published.

        :param published_at: The published_at of this LiveChatMessageSnippet.
        :type published_at: datetime
        """

        self._published_at = published_at

    @property
    def super_chat_details(self):
        """Gets the super_chat_details of this LiveChatMessageSnippet.


        :return: The super_chat_details of this LiveChatMessageSnippet.
        :rtype: LiveChatSuperChatDetails
        """
        return self._super_chat_details

    @super_chat_details.setter
    def super_chat_details(self, super_chat_details):
        """Sets the super_chat_details of this LiveChatMessageSnippet.


        :param super_chat_details: The super_chat_details of this LiveChatMessageSnippet.
        :type super_chat_details: LiveChatSuperChatDetails
        """

        self._super_chat_details = super_chat_details

    @property
    def super_sticker_details(self):
        """Gets the super_sticker_details of this LiveChatMessageSnippet.


        :return: The super_sticker_details of this LiveChatMessageSnippet.
        :rtype: LiveChatSuperStickerDetails
        """
        return self._super_sticker_details

    @super_sticker_details.setter
    def super_sticker_details(self, super_sticker_details):
        """Sets the super_sticker_details of this LiveChatMessageSnippet.


        :param super_sticker_details: The super_sticker_details of this LiveChatMessageSnippet.
        :type super_sticker_details: LiveChatSuperStickerDetails
        """

        self._super_sticker_details = super_sticker_details

    @property
    def text_message_details(self):
        """Gets the text_message_details of this LiveChatMessageSnippet.


        :return: The text_message_details of this LiveChatMessageSnippet.
        :rtype: LiveChatTextMessageDetails
        """
        return self._text_message_details

    @text_message_details.setter
    def text_message_details(self, text_message_details):
        """Sets the text_message_details of this LiveChatMessageSnippet.


        :param text_message_details: The text_message_details of this LiveChatMessageSnippet.
        :type text_message_details: LiveChatTextMessageDetails
        """

        self._text_message_details = text_message_details

    @property
    def type(self):
        """Gets the type of this LiveChatMessageSnippet.

        The type of message, this will always be present, it determines the contents of the message as well as which fields will be present.

        :return: The type of this LiveChatMessageSnippet.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LiveChatMessageSnippet.

        The type of message, this will always be present, it determines the contents of the message as well as which fields will be present.

        :param type: The type of this LiveChatMessageSnippet.
        :type type: str
        """
        allowed_values = ["invalidType", "textMessageEvent", "tombstone", "fanFundingEvent", "chatEndedEvent", "sponsorOnlyModeStartedEvent", "sponsorOnlyModeEndedEvent", "newSponsorEvent", "memberMilestoneChatEvent", "membershipGiftingEvent", "giftMembershipReceivedEvent", "messageDeletedEvent", "messageRetractedEvent", "userBannedEvent", "superChatEvent", "superStickerEvent", "pollEvent"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def user_banned_details(self):
        """Gets the user_banned_details of this LiveChatMessageSnippet.


        :return: The user_banned_details of this LiveChatMessageSnippet.
        :rtype: LiveChatUserBannedMessageDetails
        """
        return self._user_banned_details

    @user_banned_details.setter
    def user_banned_details(self, user_banned_details):
        """Sets the user_banned_details of this LiveChatMessageSnippet.


        :param user_banned_details: The user_banned_details of this LiveChatMessageSnippet.
        :type user_banned_details: LiveChatUserBannedMessageDetails
        """

        self._user_banned_details = user_banned_details
