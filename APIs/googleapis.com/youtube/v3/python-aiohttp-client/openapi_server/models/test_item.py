# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TestItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, featured_part: bool=None, gaia: str=None, id: str=None, snippet: object=None):
        """TestItem - a model defined in OpenAPI

        :param featured_part: The featured_part of this TestItem.
        :param gaia: The gaia of this TestItem.
        :param id: The id of this TestItem.
        :param snippet: The snippet of this TestItem.
        """
        self.openapi_types = {
            'featured_part': bool,
            'gaia': str,
            'id': str,
            'snippet': object
        }

        self.attribute_map = {
            'featured_part': 'featuredPart',
            'gaia': 'gaia',
            'id': 'id',
            'snippet': 'snippet'
        }

        self._featured_part = featured_part
        self._gaia = gaia
        self._id = id
        self._snippet = snippet

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestItem of this TestItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def featured_part(self):
        """Gets the featured_part of this TestItem.


        :return: The featured_part of this TestItem.
        :rtype: bool
        """
        return self._featured_part

    @featured_part.setter
    def featured_part(self, featured_part):
        """Sets the featured_part of this TestItem.


        :param featured_part: The featured_part of this TestItem.
        :type featured_part: bool
        """

        self._featured_part = featured_part

    @property
    def gaia(self):
        """Gets the gaia of this TestItem.


        :return: The gaia of this TestItem.
        :rtype: str
        """
        return self._gaia

    @gaia.setter
    def gaia(self, gaia):
        """Sets the gaia of this TestItem.


        :param gaia: The gaia of this TestItem.
        :type gaia: str
        """

        self._gaia = gaia

    @property
    def id(self):
        """Gets the id of this TestItem.


        :return: The id of this TestItem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TestItem.


        :param id: The id of this TestItem.
        :type id: str
        """

        self._id = id

    @property
    def snippet(self):
        """Gets the snippet of this TestItem.


        :return: The snippet of this TestItem.
        :rtype: object
        """
        return self._snippet

    @snippet.setter
    def snippet(self, snippet):
        """Sets the snippet of this TestItem.


        :param snippet: The snippet of this TestItem.
        :type snippet: object
        """

        self._snippet = snippet
