# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CaptionSnippet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio_track_type: str=None, failure_reason: str=None, is_auto_synced: bool=None, is_cc: bool=None, is_draft: bool=None, is_easy_reader: bool=None, is_large: bool=None, language: str=None, last_updated: datetime=None, name: str=None, status: str=None, track_kind: str=None, video_id: str=None):
        """CaptionSnippet - a model defined in OpenAPI

        :param audio_track_type: The audio_track_type of this CaptionSnippet.
        :param failure_reason: The failure_reason of this CaptionSnippet.
        :param is_auto_synced: The is_auto_synced of this CaptionSnippet.
        :param is_cc: The is_cc of this CaptionSnippet.
        :param is_draft: The is_draft of this CaptionSnippet.
        :param is_easy_reader: The is_easy_reader of this CaptionSnippet.
        :param is_large: The is_large of this CaptionSnippet.
        :param language: The language of this CaptionSnippet.
        :param last_updated: The last_updated of this CaptionSnippet.
        :param name: The name of this CaptionSnippet.
        :param status: The status of this CaptionSnippet.
        :param track_kind: The track_kind of this CaptionSnippet.
        :param video_id: The video_id of this CaptionSnippet.
        """
        self.openapi_types = {
            'audio_track_type': str,
            'failure_reason': str,
            'is_auto_synced': bool,
            'is_cc': bool,
            'is_draft': bool,
            'is_easy_reader': bool,
            'is_large': bool,
            'language': str,
            'last_updated': datetime,
            'name': str,
            'status': str,
            'track_kind': str,
            'video_id': str
        }

        self.attribute_map = {
            'audio_track_type': 'audioTrackType',
            'failure_reason': 'failureReason',
            'is_auto_synced': 'isAutoSynced',
            'is_cc': 'isCC',
            'is_draft': 'isDraft',
            'is_easy_reader': 'isEasyReader',
            'is_large': 'isLarge',
            'language': 'language',
            'last_updated': 'lastUpdated',
            'name': 'name',
            'status': 'status',
            'track_kind': 'trackKind',
            'video_id': 'videoId'
        }

        self._audio_track_type = audio_track_type
        self._failure_reason = failure_reason
        self._is_auto_synced = is_auto_synced
        self._is_cc = is_cc
        self._is_draft = is_draft
        self._is_easy_reader = is_easy_reader
        self._is_large = is_large
        self._language = language
        self._last_updated = last_updated
        self._name = name
        self._status = status
        self._track_kind = track_kind
        self._video_id = video_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CaptionSnippet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CaptionSnippet of this CaptionSnippet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio_track_type(self):
        """Gets the audio_track_type of this CaptionSnippet.

        The type of audio track associated with the caption track.

        :return: The audio_track_type of this CaptionSnippet.
        :rtype: str
        """
        return self._audio_track_type

    @audio_track_type.setter
    def audio_track_type(self, audio_track_type):
        """Sets the audio_track_type of this CaptionSnippet.

        The type of audio track associated with the caption track.

        :param audio_track_type: The audio_track_type of this CaptionSnippet.
        :type audio_track_type: str
        """
        allowed_values = ["unknown", "primary", "commentary", "descriptive"]  # noqa: E501
        if audio_track_type not in allowed_values:
            raise ValueError(
                "Invalid value for `audio_track_type` ({0}), must be one of {1}"
                .format(audio_track_type, allowed_values)
            )

        self._audio_track_type = audio_track_type

    @property
    def failure_reason(self):
        """Gets the failure_reason of this CaptionSnippet.

        The reason that YouTube failed to process the caption track. This property is only present if the state property's value is failed.

        :return: The failure_reason of this CaptionSnippet.
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this CaptionSnippet.

        The reason that YouTube failed to process the caption track. This property is only present if the state property's value is failed.

        :param failure_reason: The failure_reason of this CaptionSnippet.
        :type failure_reason: str
        """
        allowed_values = ["unknownFormat", "unsupportedFormat", "processingFailed"]  # noqa: E501
        if failure_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `failure_reason` ({0}), must be one of {1}"
                .format(failure_reason, allowed_values)
            )

        self._failure_reason = failure_reason

    @property
    def is_auto_synced(self):
        """Gets the is_auto_synced of this CaptionSnippet.

        Indicates whether YouTube synchronized the caption track to the audio track in the video. The value will be true if a sync was explicitly requested when the caption track was uploaded. For example, when calling the captions.insert or captions.update methods, you can set the sync parameter to true to instruct YouTube to sync the uploaded track to the video. If the value is false, YouTube uses the time codes in the uploaded caption track to determine when to display captions.

        :return: The is_auto_synced of this CaptionSnippet.
        :rtype: bool
        """
        return self._is_auto_synced

    @is_auto_synced.setter
    def is_auto_synced(self, is_auto_synced):
        """Sets the is_auto_synced of this CaptionSnippet.

        Indicates whether YouTube synchronized the caption track to the audio track in the video. The value will be true if a sync was explicitly requested when the caption track was uploaded. For example, when calling the captions.insert or captions.update methods, you can set the sync parameter to true to instruct YouTube to sync the uploaded track to the video. If the value is false, YouTube uses the time codes in the uploaded caption track to determine when to display captions.

        :param is_auto_synced: The is_auto_synced of this CaptionSnippet.
        :type is_auto_synced: bool
        """

        self._is_auto_synced = is_auto_synced

    @property
    def is_cc(self):
        """Gets the is_cc of this CaptionSnippet.

        Indicates whether the track contains closed captions for the deaf and hard of hearing. The default value is false.

        :return: The is_cc of this CaptionSnippet.
        :rtype: bool
        """
        return self._is_cc

    @is_cc.setter
    def is_cc(self, is_cc):
        """Sets the is_cc of this CaptionSnippet.

        Indicates whether the track contains closed captions for the deaf and hard of hearing. The default value is false.

        :param is_cc: The is_cc of this CaptionSnippet.
        :type is_cc: bool
        """

        self._is_cc = is_cc

    @property
    def is_draft(self):
        """Gets the is_draft of this CaptionSnippet.

        Indicates whether the caption track is a draft. If the value is true, then the track is not publicly visible. The default value is false. @mutable youtube.captions.insert youtube.captions.update

        :return: The is_draft of this CaptionSnippet.
        :rtype: bool
        """
        return self._is_draft

    @is_draft.setter
    def is_draft(self, is_draft):
        """Sets the is_draft of this CaptionSnippet.

        Indicates whether the caption track is a draft. If the value is true, then the track is not publicly visible. The default value is false. @mutable youtube.captions.insert youtube.captions.update

        :param is_draft: The is_draft of this CaptionSnippet.
        :type is_draft: bool
        """

        self._is_draft = is_draft

    @property
    def is_easy_reader(self):
        """Gets the is_easy_reader of this CaptionSnippet.

        Indicates whether caption track is formatted for \"easy reader,\" meaning it is at a third-grade level for language learners. The default value is false.

        :return: The is_easy_reader of this CaptionSnippet.
        :rtype: bool
        """
        return self._is_easy_reader

    @is_easy_reader.setter
    def is_easy_reader(self, is_easy_reader):
        """Sets the is_easy_reader of this CaptionSnippet.

        Indicates whether caption track is formatted for \"easy reader,\" meaning it is at a third-grade level for language learners. The default value is false.

        :param is_easy_reader: The is_easy_reader of this CaptionSnippet.
        :type is_easy_reader: bool
        """

        self._is_easy_reader = is_easy_reader

    @property
    def is_large(self):
        """Gets the is_large of this CaptionSnippet.

        Indicates whether the caption track uses large text for the vision-impaired. The default value is false.

        :return: The is_large of this CaptionSnippet.
        :rtype: bool
        """
        return self._is_large

    @is_large.setter
    def is_large(self, is_large):
        """Sets the is_large of this CaptionSnippet.

        Indicates whether the caption track uses large text for the vision-impaired. The default value is false.

        :param is_large: The is_large of this CaptionSnippet.
        :type is_large: bool
        """

        self._is_large = is_large

    @property
    def language(self):
        """Gets the language of this CaptionSnippet.

        The language of the caption track. The property value is a BCP-47 language tag.

        :return: The language of this CaptionSnippet.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this CaptionSnippet.

        The language of the caption track. The property value is a BCP-47 language tag.

        :param language: The language of this CaptionSnippet.
        :type language: str
        """

        self._language = language

    @property
    def last_updated(self):
        """Gets the last_updated of this CaptionSnippet.

        The date and time when the caption track was last updated.

        :return: The last_updated of this CaptionSnippet.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this CaptionSnippet.

        The date and time when the caption track was last updated.

        :param last_updated: The last_updated of this CaptionSnippet.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def name(self):
        """Gets the name of this CaptionSnippet.

        The name of the caption track. The name is intended to be visible to the user as an option during playback.

        :return: The name of this CaptionSnippet.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CaptionSnippet.

        The name of the caption track. The name is intended to be visible to the user as an option during playback.

        :param name: The name of this CaptionSnippet.
        :type name: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this CaptionSnippet.

        The caption track's status.

        :return: The status of this CaptionSnippet.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CaptionSnippet.

        The caption track's status.

        :param status: The status of this CaptionSnippet.
        :type status: str
        """
        allowed_values = ["serving", "syncing", "failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def track_kind(self):
        """Gets the track_kind of this CaptionSnippet.

        The caption track's type.

        :return: The track_kind of this CaptionSnippet.
        :rtype: str
        """
        return self._track_kind

    @track_kind.setter
    def track_kind(self, track_kind):
        """Sets the track_kind of this CaptionSnippet.

        The caption track's type.

        :param track_kind: The track_kind of this CaptionSnippet.
        :type track_kind: str
        """
        allowed_values = ["standard", "ASR", "forced"]  # noqa: E501
        if track_kind not in allowed_values:
            raise ValueError(
                "Invalid value for `track_kind` ({0}), must be one of {1}"
                .format(track_kind, allowed_values)
            )

        self._track_kind = track_kind

    @property
    def video_id(self):
        """Gets the video_id of this CaptionSnippet.

        The ID that YouTube uses to uniquely identify the video associated with the caption track. @mutable youtube.captions.insert

        :return: The video_id of this CaptionSnippet.
        :rtype: str
        """
        return self._video_id

    @video_id.setter
    def video_id(self, video_id):
        """Sets the video_id of this CaptionSnippet.

        The ID that YouTube uses to uniquely identify the video associated with the caption track. @mutable youtube.captions.insert

        :param video_id: The video_id of this CaptionSnippet.
        :type video_id: str
        """

        self._video_id = video_id
