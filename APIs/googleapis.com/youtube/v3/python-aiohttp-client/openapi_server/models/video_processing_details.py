# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.video_processing_details_processing_progress import VideoProcessingDetailsProcessingProgress
from openapi_server import util


class VideoProcessingDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, editor_suggestions_availability: str=None, file_details_availability: str=None, processing_failure_reason: str=None, processing_issues_availability: str=None, processing_progress: VideoProcessingDetailsProcessingProgress=None, processing_status: str=None, tag_suggestions_availability: str=None, thumbnails_availability: str=None):
        """VideoProcessingDetails - a model defined in OpenAPI

        :param editor_suggestions_availability: The editor_suggestions_availability of this VideoProcessingDetails.
        :param file_details_availability: The file_details_availability of this VideoProcessingDetails.
        :param processing_failure_reason: The processing_failure_reason of this VideoProcessingDetails.
        :param processing_issues_availability: The processing_issues_availability of this VideoProcessingDetails.
        :param processing_progress: The processing_progress of this VideoProcessingDetails.
        :param processing_status: The processing_status of this VideoProcessingDetails.
        :param tag_suggestions_availability: The tag_suggestions_availability of this VideoProcessingDetails.
        :param thumbnails_availability: The thumbnails_availability of this VideoProcessingDetails.
        """
        self.openapi_types = {
            'editor_suggestions_availability': str,
            'file_details_availability': str,
            'processing_failure_reason': str,
            'processing_issues_availability': str,
            'processing_progress': VideoProcessingDetailsProcessingProgress,
            'processing_status': str,
            'tag_suggestions_availability': str,
            'thumbnails_availability': str
        }

        self.attribute_map = {
            'editor_suggestions_availability': 'editorSuggestionsAvailability',
            'file_details_availability': 'fileDetailsAvailability',
            'processing_failure_reason': 'processingFailureReason',
            'processing_issues_availability': 'processingIssuesAvailability',
            'processing_progress': 'processingProgress',
            'processing_status': 'processingStatus',
            'tag_suggestions_availability': 'tagSuggestionsAvailability',
            'thumbnails_availability': 'thumbnailsAvailability'
        }

        self._editor_suggestions_availability = editor_suggestions_availability
        self._file_details_availability = file_details_availability
        self._processing_failure_reason = processing_failure_reason
        self._processing_issues_availability = processing_issues_availability
        self._processing_progress = processing_progress
        self._processing_status = processing_status
        self._tag_suggestions_availability = tag_suggestions_availability
        self._thumbnails_availability = thumbnails_availability

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoProcessingDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VideoProcessingDetails of this VideoProcessingDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def editor_suggestions_availability(self):
        """Gets the editor_suggestions_availability of this VideoProcessingDetails.

        This value indicates whether video editing suggestions, which might improve video quality or the playback experience, are available for the video. You can retrieve these suggestions by requesting the suggestions part in your videos.list() request.

        :return: The editor_suggestions_availability of this VideoProcessingDetails.
        :rtype: str
        """
        return self._editor_suggestions_availability

    @editor_suggestions_availability.setter
    def editor_suggestions_availability(self, editor_suggestions_availability):
        """Sets the editor_suggestions_availability of this VideoProcessingDetails.

        This value indicates whether video editing suggestions, which might improve video quality or the playback experience, are available for the video. You can retrieve these suggestions by requesting the suggestions part in your videos.list() request.

        :param editor_suggestions_availability: The editor_suggestions_availability of this VideoProcessingDetails.
        :type editor_suggestions_availability: str
        """

        self._editor_suggestions_availability = editor_suggestions_availability

    @property
    def file_details_availability(self):
        """Gets the file_details_availability of this VideoProcessingDetails.

        This value indicates whether file details are available for the uploaded video. You can retrieve a video's file details by requesting the fileDetails part in your videos.list() request.

        :return: The file_details_availability of this VideoProcessingDetails.
        :rtype: str
        """
        return self._file_details_availability

    @file_details_availability.setter
    def file_details_availability(self, file_details_availability):
        """Sets the file_details_availability of this VideoProcessingDetails.

        This value indicates whether file details are available for the uploaded video. You can retrieve a video's file details by requesting the fileDetails part in your videos.list() request.

        :param file_details_availability: The file_details_availability of this VideoProcessingDetails.
        :type file_details_availability: str
        """

        self._file_details_availability = file_details_availability

    @property
    def processing_failure_reason(self):
        """Gets the processing_failure_reason of this VideoProcessingDetails.

        The reason that YouTube failed to process the video. This property will only have a value if the processingStatus property's value is failed.

        :return: The processing_failure_reason of this VideoProcessingDetails.
        :rtype: str
        """
        return self._processing_failure_reason

    @processing_failure_reason.setter
    def processing_failure_reason(self, processing_failure_reason):
        """Sets the processing_failure_reason of this VideoProcessingDetails.

        The reason that YouTube failed to process the video. This property will only have a value if the processingStatus property's value is failed.

        :param processing_failure_reason: The processing_failure_reason of this VideoProcessingDetails.
        :type processing_failure_reason: str
        """
        allowed_values = ["uploadFailed", "transcodeFailed", "streamingFailed", "other"]  # noqa: E501
        if processing_failure_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `processing_failure_reason` ({0}), must be one of {1}"
                .format(processing_failure_reason, allowed_values)
            )

        self._processing_failure_reason = processing_failure_reason

    @property
    def processing_issues_availability(self):
        """Gets the processing_issues_availability of this VideoProcessingDetails.

        This value indicates whether the video processing engine has generated suggestions that might improve YouTube's ability to process the the video, warnings that explain video processing problems, or errors that cause video processing problems. You can retrieve these suggestions by requesting the suggestions part in your videos.list() request.

        :return: The processing_issues_availability of this VideoProcessingDetails.
        :rtype: str
        """
        return self._processing_issues_availability

    @processing_issues_availability.setter
    def processing_issues_availability(self, processing_issues_availability):
        """Sets the processing_issues_availability of this VideoProcessingDetails.

        This value indicates whether the video processing engine has generated suggestions that might improve YouTube's ability to process the the video, warnings that explain video processing problems, or errors that cause video processing problems. You can retrieve these suggestions by requesting the suggestions part in your videos.list() request.

        :param processing_issues_availability: The processing_issues_availability of this VideoProcessingDetails.
        :type processing_issues_availability: str
        """

        self._processing_issues_availability = processing_issues_availability

    @property
    def processing_progress(self):
        """Gets the processing_progress of this VideoProcessingDetails.


        :return: The processing_progress of this VideoProcessingDetails.
        :rtype: VideoProcessingDetailsProcessingProgress
        """
        return self._processing_progress

    @processing_progress.setter
    def processing_progress(self, processing_progress):
        """Sets the processing_progress of this VideoProcessingDetails.


        :param processing_progress: The processing_progress of this VideoProcessingDetails.
        :type processing_progress: VideoProcessingDetailsProcessingProgress
        """

        self._processing_progress = processing_progress

    @property
    def processing_status(self):
        """Gets the processing_status of this VideoProcessingDetails.

        The video's processing status. This value indicates whether YouTube was able to process the video or if the video is still being processed.

        :return: The processing_status of this VideoProcessingDetails.
        :rtype: str
        """
        return self._processing_status

    @processing_status.setter
    def processing_status(self, processing_status):
        """Sets the processing_status of this VideoProcessingDetails.

        The video's processing status. This value indicates whether YouTube was able to process the video or if the video is still being processed.

        :param processing_status: The processing_status of this VideoProcessingDetails.
        :type processing_status: str
        """
        allowed_values = ["processing", "succeeded", "failed", "terminated"]  # noqa: E501
        if processing_status not in allowed_values:
            raise ValueError(
                "Invalid value for `processing_status` ({0}), must be one of {1}"
                .format(processing_status, allowed_values)
            )

        self._processing_status = processing_status

    @property
    def tag_suggestions_availability(self):
        """Gets the tag_suggestions_availability of this VideoProcessingDetails.

        This value indicates whether keyword (tag) suggestions are available for the video. Tags can be added to a video's metadata to make it easier for other users to find the video. You can retrieve these suggestions by requesting the suggestions part in your videos.list() request.

        :return: The tag_suggestions_availability of this VideoProcessingDetails.
        :rtype: str
        """
        return self._tag_suggestions_availability

    @tag_suggestions_availability.setter
    def tag_suggestions_availability(self, tag_suggestions_availability):
        """Sets the tag_suggestions_availability of this VideoProcessingDetails.

        This value indicates whether keyword (tag) suggestions are available for the video. Tags can be added to a video's metadata to make it easier for other users to find the video. You can retrieve these suggestions by requesting the suggestions part in your videos.list() request.

        :param tag_suggestions_availability: The tag_suggestions_availability of this VideoProcessingDetails.
        :type tag_suggestions_availability: str
        """

        self._tag_suggestions_availability = tag_suggestions_availability

    @property
    def thumbnails_availability(self):
        """Gets the thumbnails_availability of this VideoProcessingDetails.

        This value indicates whether thumbnail images have been generated for the video.

        :return: The thumbnails_availability of this VideoProcessingDetails.
        :rtype: str
        """
        return self._thumbnails_availability

    @thumbnails_availability.setter
    def thumbnails_availability(self, thumbnails_availability):
        """Sets the thumbnails_availability of this VideoProcessingDetails.

        This value indicates whether thumbnail images have been generated for the video.

        :param thumbnails_availability: The thumbnails_availability of this VideoProcessingDetails.
        :type thumbnails_availability: str
        """

        self._thumbnails_availability = thumbnails_availability
