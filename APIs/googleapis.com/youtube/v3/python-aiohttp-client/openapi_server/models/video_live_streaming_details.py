# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VideoLiveStreamingDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_live_chat_id: str=None, actual_end_time: datetime=None, actual_start_time: datetime=None, concurrent_viewers: str=None, scheduled_end_time: datetime=None, scheduled_start_time: datetime=None):
        """VideoLiveStreamingDetails - a model defined in OpenAPI

        :param active_live_chat_id: The active_live_chat_id of this VideoLiveStreamingDetails.
        :param actual_end_time: The actual_end_time of this VideoLiveStreamingDetails.
        :param actual_start_time: The actual_start_time of this VideoLiveStreamingDetails.
        :param concurrent_viewers: The concurrent_viewers of this VideoLiveStreamingDetails.
        :param scheduled_end_time: The scheduled_end_time of this VideoLiveStreamingDetails.
        :param scheduled_start_time: The scheduled_start_time of this VideoLiveStreamingDetails.
        """
        self.openapi_types = {
            'active_live_chat_id': str,
            'actual_end_time': datetime,
            'actual_start_time': datetime,
            'concurrent_viewers': str,
            'scheduled_end_time': datetime,
            'scheduled_start_time': datetime
        }

        self.attribute_map = {
            'active_live_chat_id': 'activeLiveChatId',
            'actual_end_time': 'actualEndTime',
            'actual_start_time': 'actualStartTime',
            'concurrent_viewers': 'concurrentViewers',
            'scheduled_end_time': 'scheduledEndTime',
            'scheduled_start_time': 'scheduledStartTime'
        }

        self._active_live_chat_id = active_live_chat_id
        self._actual_end_time = actual_end_time
        self._actual_start_time = actual_start_time
        self._concurrent_viewers = concurrent_viewers
        self._scheduled_end_time = scheduled_end_time
        self._scheduled_start_time = scheduled_start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoLiveStreamingDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VideoLiveStreamingDetails of this VideoLiveStreamingDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_live_chat_id(self):
        """Gets the active_live_chat_id of this VideoLiveStreamingDetails.

        The ID of the currently active live chat attached to this video. This field is filled only if the video is a currently live broadcast that has live chat. Once the broadcast transitions to complete this field will be removed and the live chat closed down. For persistent broadcasts that live chat id will no longer be tied to this video but rather to the new video being displayed at the persistent page.

        :return: The active_live_chat_id of this VideoLiveStreamingDetails.
        :rtype: str
        """
        return self._active_live_chat_id

    @active_live_chat_id.setter
    def active_live_chat_id(self, active_live_chat_id):
        """Sets the active_live_chat_id of this VideoLiveStreamingDetails.

        The ID of the currently active live chat attached to this video. This field is filled only if the video is a currently live broadcast that has live chat. Once the broadcast transitions to complete this field will be removed and the live chat closed down. For persistent broadcasts that live chat id will no longer be tied to this video but rather to the new video being displayed at the persistent page.

        :param active_live_chat_id: The active_live_chat_id of this VideoLiveStreamingDetails.
        :type active_live_chat_id: str
        """

        self._active_live_chat_id = active_live_chat_id

    @property
    def actual_end_time(self):
        """Gets the actual_end_time of this VideoLiveStreamingDetails.

        The time that the broadcast actually ended. This value will not be available until the broadcast is over.

        :return: The actual_end_time of this VideoLiveStreamingDetails.
        :rtype: datetime
        """
        return self._actual_end_time

    @actual_end_time.setter
    def actual_end_time(self, actual_end_time):
        """Sets the actual_end_time of this VideoLiveStreamingDetails.

        The time that the broadcast actually ended. This value will not be available until the broadcast is over.

        :param actual_end_time: The actual_end_time of this VideoLiveStreamingDetails.
        :type actual_end_time: datetime
        """

        self._actual_end_time = actual_end_time

    @property
    def actual_start_time(self):
        """Gets the actual_start_time of this VideoLiveStreamingDetails.

        The time that the broadcast actually started. This value will not be available until the broadcast begins.

        :return: The actual_start_time of this VideoLiveStreamingDetails.
        :rtype: datetime
        """
        return self._actual_start_time

    @actual_start_time.setter
    def actual_start_time(self, actual_start_time):
        """Sets the actual_start_time of this VideoLiveStreamingDetails.

        The time that the broadcast actually started. This value will not be available until the broadcast begins.

        :param actual_start_time: The actual_start_time of this VideoLiveStreamingDetails.
        :type actual_start_time: datetime
        """

        self._actual_start_time = actual_start_time

    @property
    def concurrent_viewers(self):
        """Gets the concurrent_viewers of this VideoLiveStreamingDetails.

        The number of viewers currently watching the broadcast. The property and its value will be present if the broadcast has current viewers and the broadcast owner has not hidden the viewcount for the video. Note that YouTube stops tracking the number of concurrent viewers for a broadcast when the broadcast ends. So, this property would not identify the number of viewers watching an archived video of a live broadcast that already ended.

        :return: The concurrent_viewers of this VideoLiveStreamingDetails.
        :rtype: str
        """
        return self._concurrent_viewers

    @concurrent_viewers.setter
    def concurrent_viewers(self, concurrent_viewers):
        """Sets the concurrent_viewers of this VideoLiveStreamingDetails.

        The number of viewers currently watching the broadcast. The property and its value will be present if the broadcast has current viewers and the broadcast owner has not hidden the viewcount for the video. Note that YouTube stops tracking the number of concurrent viewers for a broadcast when the broadcast ends. So, this property would not identify the number of viewers watching an archived video of a live broadcast that already ended.

        :param concurrent_viewers: The concurrent_viewers of this VideoLiveStreamingDetails.
        :type concurrent_viewers: str
        """

        self._concurrent_viewers = concurrent_viewers

    @property
    def scheduled_end_time(self):
        """Gets the scheduled_end_time of this VideoLiveStreamingDetails.

        The time that the broadcast is scheduled to end. If the value is empty or the property is not present, then the broadcast is scheduled to contiue indefinitely.

        :return: The scheduled_end_time of this VideoLiveStreamingDetails.
        :rtype: datetime
        """
        return self._scheduled_end_time

    @scheduled_end_time.setter
    def scheduled_end_time(self, scheduled_end_time):
        """Sets the scheduled_end_time of this VideoLiveStreamingDetails.

        The time that the broadcast is scheduled to end. If the value is empty or the property is not present, then the broadcast is scheduled to contiue indefinitely.

        :param scheduled_end_time: The scheduled_end_time of this VideoLiveStreamingDetails.
        :type scheduled_end_time: datetime
        """

        self._scheduled_end_time = scheduled_end_time

    @property
    def scheduled_start_time(self):
        """Gets the scheduled_start_time of this VideoLiveStreamingDetails.

        The time that the broadcast is scheduled to begin.

        :return: The scheduled_start_time of this VideoLiveStreamingDetails.
        :rtype: datetime
        """
        return self._scheduled_start_time

    @scheduled_start_time.setter
    def scheduled_start_time(self, scheduled_start_time):
        """Sets the scheduled_start_time of this VideoLiveStreamingDetails.

        The time that the broadcast is scheduled to begin.

        :param scheduled_start_time: The scheduled_start_time of this VideoLiveStreamingDetails.
        :type scheduled_start_time: datetime
        """

        self._scheduled_start_time = scheduled_start_time
