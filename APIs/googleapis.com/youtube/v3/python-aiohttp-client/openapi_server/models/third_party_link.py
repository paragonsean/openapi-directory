# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.third_party_link_snippet import ThirdPartyLinkSnippet
from openapi_server.models.third_party_link_status import ThirdPartyLinkStatus
from openapi_server import util


class ThirdPartyLink(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, etag: str=None, kind: str='youtube#thirdPartyLink', linking_token: str=None, snippet: ThirdPartyLinkSnippet=None, status: ThirdPartyLinkStatus=None):
        """ThirdPartyLink - a model defined in OpenAPI

        :param etag: The etag of this ThirdPartyLink.
        :param kind: The kind of this ThirdPartyLink.
        :param linking_token: The linking_token of this ThirdPartyLink.
        :param snippet: The snippet of this ThirdPartyLink.
        :param status: The status of this ThirdPartyLink.
        """
        self.openapi_types = {
            'etag': str,
            'kind': str,
            'linking_token': str,
            'snippet': ThirdPartyLinkSnippet,
            'status': ThirdPartyLinkStatus
        }

        self.attribute_map = {
            'etag': 'etag',
            'kind': 'kind',
            'linking_token': 'linkingToken',
            'snippet': 'snippet',
            'status': 'status'
        }

        self._etag = etag
        self._kind = kind
        self._linking_token = linking_token
        self._snippet = snippet
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ThirdPartyLink':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ThirdPartyLink of this ThirdPartyLink.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def etag(self):
        """Gets the etag of this ThirdPartyLink.

        Etag of this resource

        :return: The etag of this ThirdPartyLink.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this ThirdPartyLink.

        Etag of this resource

        :param etag: The etag of this ThirdPartyLink.
        :type etag: str
        """

        self._etag = etag

    @property
    def kind(self):
        """Gets the kind of this ThirdPartyLink.

        Identifies what kind of resource this is. Value: the fixed string \"youtube#thirdPartyLink\".

        :return: The kind of this ThirdPartyLink.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ThirdPartyLink.

        Identifies what kind of resource this is. Value: the fixed string \"youtube#thirdPartyLink\".

        :param kind: The kind of this ThirdPartyLink.
        :type kind: str
        """

        self._kind = kind

    @property
    def linking_token(self):
        """Gets the linking_token of this ThirdPartyLink.

        The linking_token identifies a YouTube account and channel with which the third party account is linked.

        :return: The linking_token of this ThirdPartyLink.
        :rtype: str
        """
        return self._linking_token

    @linking_token.setter
    def linking_token(self, linking_token):
        """Sets the linking_token of this ThirdPartyLink.

        The linking_token identifies a YouTube account and channel with which the third party account is linked.

        :param linking_token: The linking_token of this ThirdPartyLink.
        :type linking_token: str
        """

        self._linking_token = linking_token

    @property
    def snippet(self):
        """Gets the snippet of this ThirdPartyLink.


        :return: The snippet of this ThirdPartyLink.
        :rtype: ThirdPartyLinkSnippet
        """
        return self._snippet

    @snippet.setter
    def snippet(self, snippet):
        """Sets the snippet of this ThirdPartyLink.


        :param snippet: The snippet of this ThirdPartyLink.
        :type snippet: ThirdPartyLinkSnippet
        """

        self._snippet = snippet

    @property
    def status(self):
        """Gets the status of this ThirdPartyLink.


        :return: The status of this ThirdPartyLink.
        :rtype: ThirdPartyLinkStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ThirdPartyLink.


        :param status: The status of this ThirdPartyLink.
        :type status: ThirdPartyLinkStatus
        """

        self._status = status
