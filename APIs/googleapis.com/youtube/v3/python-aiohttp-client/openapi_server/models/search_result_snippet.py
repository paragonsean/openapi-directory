# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.thumbnail_details import ThumbnailDetails
from openapi_server import util


class SearchResultSnippet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_id: str=None, channel_title: str=None, description: str=None, live_broadcast_content: str=None, published_at: datetime=None, thumbnails: ThumbnailDetails=None, title: str=None):
        """SearchResultSnippet - a model defined in OpenAPI

        :param channel_id: The channel_id of this SearchResultSnippet.
        :param channel_title: The channel_title of this SearchResultSnippet.
        :param description: The description of this SearchResultSnippet.
        :param live_broadcast_content: The live_broadcast_content of this SearchResultSnippet.
        :param published_at: The published_at of this SearchResultSnippet.
        :param thumbnails: The thumbnails of this SearchResultSnippet.
        :param title: The title of this SearchResultSnippet.
        """
        self.openapi_types = {
            'channel_id': str,
            'channel_title': str,
            'description': str,
            'live_broadcast_content': str,
            'published_at': datetime,
            'thumbnails': ThumbnailDetails,
            'title': str
        }

        self.attribute_map = {
            'channel_id': 'channelId',
            'channel_title': 'channelTitle',
            'description': 'description',
            'live_broadcast_content': 'liveBroadcastContent',
            'published_at': 'publishedAt',
            'thumbnails': 'thumbnails',
            'title': 'title'
        }

        self._channel_id = channel_id
        self._channel_title = channel_title
        self._description = description
        self._live_broadcast_content = live_broadcast_content
        self._published_at = published_at
        self._thumbnails = thumbnails
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchResultSnippet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchResultSnippet of this SearchResultSnippet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_id(self):
        """Gets the channel_id of this SearchResultSnippet.

        The value that YouTube uses to uniquely identify the channel that published the resource that the search result identifies.

        :return: The channel_id of this SearchResultSnippet.
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this SearchResultSnippet.

        The value that YouTube uses to uniquely identify the channel that published the resource that the search result identifies.

        :param channel_id: The channel_id of this SearchResultSnippet.
        :type channel_id: str
        """

        self._channel_id = channel_id

    @property
    def channel_title(self):
        """Gets the channel_title of this SearchResultSnippet.

        The title of the channel that published the resource that the search result identifies.

        :return: The channel_title of this SearchResultSnippet.
        :rtype: str
        """
        return self._channel_title

    @channel_title.setter
    def channel_title(self, channel_title):
        """Sets the channel_title of this SearchResultSnippet.

        The title of the channel that published the resource that the search result identifies.

        :param channel_title: The channel_title of this SearchResultSnippet.
        :type channel_title: str
        """

        self._channel_title = channel_title

    @property
    def description(self):
        """Gets the description of this SearchResultSnippet.

        A description of the search result.

        :return: The description of this SearchResultSnippet.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SearchResultSnippet.

        A description of the search result.

        :param description: The description of this SearchResultSnippet.
        :type description: str
        """

        self._description = description

    @property
    def live_broadcast_content(self):
        """Gets the live_broadcast_content of this SearchResultSnippet.

        It indicates if the resource (video or channel) has upcoming/active live broadcast content. Or it's \"none\" if there is not any upcoming/active live broadcasts.

        :return: The live_broadcast_content of this SearchResultSnippet.
        :rtype: str
        """
        return self._live_broadcast_content

    @live_broadcast_content.setter
    def live_broadcast_content(self, live_broadcast_content):
        """Sets the live_broadcast_content of this SearchResultSnippet.

        It indicates if the resource (video or channel) has upcoming/active live broadcast content. Or it's \"none\" if there is not any upcoming/active live broadcasts.

        :param live_broadcast_content: The live_broadcast_content of this SearchResultSnippet.
        :type live_broadcast_content: str
        """
        allowed_values = ["none", "upcoming", "live", "completed"]  # noqa: E501
        if live_broadcast_content not in allowed_values:
            raise ValueError(
                "Invalid value for `live_broadcast_content` ({0}), must be one of {1}"
                .format(live_broadcast_content, allowed_values)
            )

        self._live_broadcast_content = live_broadcast_content

    @property
    def published_at(self):
        """Gets the published_at of this SearchResultSnippet.

        The creation date and time of the resource that the search result identifies.

        :return: The published_at of this SearchResultSnippet.
        :rtype: datetime
        """
        return self._published_at

    @published_at.setter
    def published_at(self, published_at):
        """Sets the published_at of this SearchResultSnippet.

        The creation date and time of the resource that the search result identifies.

        :param published_at: The published_at of this SearchResultSnippet.
        :type published_at: datetime
        """

        self._published_at = published_at

    @property
    def thumbnails(self):
        """Gets the thumbnails of this SearchResultSnippet.


        :return: The thumbnails of this SearchResultSnippet.
        :rtype: ThumbnailDetails
        """
        return self._thumbnails

    @thumbnails.setter
    def thumbnails(self, thumbnails):
        """Sets the thumbnails of this SearchResultSnippet.


        :param thumbnails: The thumbnails of this SearchResultSnippet.
        :type thumbnails: ThumbnailDetails
        """

        self._thumbnails = thumbnails

    @property
    def title(self):
        """Gets the title of this SearchResultSnippet.

        The title of the search result.

        :return: The title of this SearchResultSnippet.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SearchResultSnippet.

        The title of the search result.

        :param title: The title of this SearchResultSnippet.
        :type title: str
        """

        self._title = title
