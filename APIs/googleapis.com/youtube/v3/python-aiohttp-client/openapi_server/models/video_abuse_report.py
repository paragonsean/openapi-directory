# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VideoAbuseReport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comments: str=None, language: str=None, reason_id: str=None, secondary_reason_id: str=None, video_id: str=None):
        """VideoAbuseReport - a model defined in OpenAPI

        :param comments: The comments of this VideoAbuseReport.
        :param language: The language of this VideoAbuseReport.
        :param reason_id: The reason_id of this VideoAbuseReport.
        :param secondary_reason_id: The secondary_reason_id of this VideoAbuseReport.
        :param video_id: The video_id of this VideoAbuseReport.
        """
        self.openapi_types = {
            'comments': str,
            'language': str,
            'reason_id': str,
            'secondary_reason_id': str,
            'video_id': str
        }

        self.attribute_map = {
            'comments': 'comments',
            'language': 'language',
            'reason_id': 'reasonId',
            'secondary_reason_id': 'secondaryReasonId',
            'video_id': 'videoId'
        }

        self._comments = comments
        self._language = language
        self._reason_id = reason_id
        self._secondary_reason_id = secondary_reason_id
        self._video_id = video_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoAbuseReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VideoAbuseReport of this VideoAbuseReport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comments(self):
        """Gets the comments of this VideoAbuseReport.

        Additional comments regarding the abuse report.

        :return: The comments of this VideoAbuseReport.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this VideoAbuseReport.

        Additional comments regarding the abuse report.

        :param comments: The comments of this VideoAbuseReport.
        :type comments: str
        """

        self._comments = comments

    @property
    def language(self):
        """Gets the language of this VideoAbuseReport.

        The language that the content was viewed in.

        :return: The language of this VideoAbuseReport.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this VideoAbuseReport.

        The language that the content was viewed in.

        :param language: The language of this VideoAbuseReport.
        :type language: str
        """

        self._language = language

    @property
    def reason_id(self):
        """Gets the reason_id of this VideoAbuseReport.

        The high-level, or primary, reason that the content is abusive. The value is an abuse report reason ID.

        :return: The reason_id of this VideoAbuseReport.
        :rtype: str
        """
        return self._reason_id

    @reason_id.setter
    def reason_id(self, reason_id):
        """Sets the reason_id of this VideoAbuseReport.

        The high-level, or primary, reason that the content is abusive. The value is an abuse report reason ID.

        :param reason_id: The reason_id of this VideoAbuseReport.
        :type reason_id: str
        """

        self._reason_id = reason_id

    @property
    def secondary_reason_id(self):
        """Gets the secondary_reason_id of this VideoAbuseReport.

        The specific, or secondary, reason that this content is abusive (if available). The value is an abuse report reason ID that is a valid secondary reason for the primary reason.

        :return: The secondary_reason_id of this VideoAbuseReport.
        :rtype: str
        """
        return self._secondary_reason_id

    @secondary_reason_id.setter
    def secondary_reason_id(self, secondary_reason_id):
        """Sets the secondary_reason_id of this VideoAbuseReport.

        The specific, or secondary, reason that this content is abusive (if available). The value is an abuse report reason ID that is a valid secondary reason for the primary reason.

        :param secondary_reason_id: The secondary_reason_id of this VideoAbuseReport.
        :type secondary_reason_id: str
        """

        self._secondary_reason_id = secondary_reason_id

    @property
    def video_id(self):
        """Gets the video_id of this VideoAbuseReport.

        The ID that YouTube uses to uniquely identify the video.

        :return: The video_id of this VideoAbuseReport.
        :rtype: str
        """
        return self._video_id

    @video_id.setter
    def video_id(self, video_id):
        """Sets the video_id of this VideoAbuseReport.

        The ID that YouTube uses to uniquely identify the video.

        :param video_id: The video_id of this VideoAbuseReport.
        :type video_id: str
        """

        self._video_id = video_id
