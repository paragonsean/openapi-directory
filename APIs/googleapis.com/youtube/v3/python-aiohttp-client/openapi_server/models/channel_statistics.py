# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChannelStatistics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comment_count: str=None, hidden_subscriber_count: bool=None, subscriber_count: str=None, video_count: str=None, view_count: str=None):
        """ChannelStatistics - a model defined in OpenAPI

        :param comment_count: The comment_count of this ChannelStatistics.
        :param hidden_subscriber_count: The hidden_subscriber_count of this ChannelStatistics.
        :param subscriber_count: The subscriber_count of this ChannelStatistics.
        :param video_count: The video_count of this ChannelStatistics.
        :param view_count: The view_count of this ChannelStatistics.
        """
        self.openapi_types = {
            'comment_count': str,
            'hidden_subscriber_count': bool,
            'subscriber_count': str,
            'video_count': str,
            'view_count': str
        }

        self.attribute_map = {
            'comment_count': 'commentCount',
            'hidden_subscriber_count': 'hiddenSubscriberCount',
            'subscriber_count': 'subscriberCount',
            'video_count': 'videoCount',
            'view_count': 'viewCount'
        }

        self._comment_count = comment_count
        self._hidden_subscriber_count = hidden_subscriber_count
        self._subscriber_count = subscriber_count
        self._video_count = video_count
        self._view_count = view_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelStatistics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChannelStatistics of this ChannelStatistics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comment_count(self):
        """Gets the comment_count of this ChannelStatistics.

        The number of comments for the channel.

        :return: The comment_count of this ChannelStatistics.
        :rtype: str
        """
        return self._comment_count

    @comment_count.setter
    def comment_count(self, comment_count):
        """Sets the comment_count of this ChannelStatistics.

        The number of comments for the channel.

        :param comment_count: The comment_count of this ChannelStatistics.
        :type comment_count: str
        """

        self._comment_count = comment_count

    @property
    def hidden_subscriber_count(self):
        """Gets the hidden_subscriber_count of this ChannelStatistics.

        Whether or not the number of subscribers is shown for this user.

        :return: The hidden_subscriber_count of this ChannelStatistics.
        :rtype: bool
        """
        return self._hidden_subscriber_count

    @hidden_subscriber_count.setter
    def hidden_subscriber_count(self, hidden_subscriber_count):
        """Sets the hidden_subscriber_count of this ChannelStatistics.

        Whether or not the number of subscribers is shown for this user.

        :param hidden_subscriber_count: The hidden_subscriber_count of this ChannelStatistics.
        :type hidden_subscriber_count: bool
        """

        self._hidden_subscriber_count = hidden_subscriber_count

    @property
    def subscriber_count(self):
        """Gets the subscriber_count of this ChannelStatistics.

        The number of subscribers that the channel has.

        :return: The subscriber_count of this ChannelStatistics.
        :rtype: str
        """
        return self._subscriber_count

    @subscriber_count.setter
    def subscriber_count(self, subscriber_count):
        """Sets the subscriber_count of this ChannelStatistics.

        The number of subscribers that the channel has.

        :param subscriber_count: The subscriber_count of this ChannelStatistics.
        :type subscriber_count: str
        """

        self._subscriber_count = subscriber_count

    @property
    def video_count(self):
        """Gets the video_count of this ChannelStatistics.

        The number of videos uploaded to the channel.

        :return: The video_count of this ChannelStatistics.
        :rtype: str
        """
        return self._video_count

    @video_count.setter
    def video_count(self, video_count):
        """Sets the video_count of this ChannelStatistics.

        The number of videos uploaded to the channel.

        :param video_count: The video_count of this ChannelStatistics.
        :type video_count: str
        """

        self._video_count = video_count

    @property
    def view_count(self):
        """Gets the view_count of this ChannelStatistics.

        The number of times the channel has been viewed.

        :return: The view_count of this ChannelStatistics.
        :rtype: str
        """
        return self._view_count

    @view_count.setter
    def view_count(self, view_count):
        """Sets the view_count of this ChannelStatistics.

        The number of times the channel has been viewed.

        :param view_count: The view_count of this ChannelStatistics.
        :type view_count: str
        """

        self._view_count = view_count
