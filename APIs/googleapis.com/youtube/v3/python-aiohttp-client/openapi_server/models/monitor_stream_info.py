# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MonitorStreamInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, broadcast_stream_delay_ms: int=None, embed_html: str=None, enable_monitor_stream: bool=None):
        """MonitorStreamInfo - a model defined in OpenAPI

        :param broadcast_stream_delay_ms: The broadcast_stream_delay_ms of this MonitorStreamInfo.
        :param embed_html: The embed_html of this MonitorStreamInfo.
        :param enable_monitor_stream: The enable_monitor_stream of this MonitorStreamInfo.
        """
        self.openapi_types = {
            'broadcast_stream_delay_ms': int,
            'embed_html': str,
            'enable_monitor_stream': bool
        }

        self.attribute_map = {
            'broadcast_stream_delay_ms': 'broadcastStreamDelayMs',
            'embed_html': 'embedHtml',
            'enable_monitor_stream': 'enableMonitorStream'
        }

        self._broadcast_stream_delay_ms = broadcast_stream_delay_ms
        self._embed_html = embed_html
        self._enable_monitor_stream = enable_monitor_stream

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MonitorStreamInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MonitorStreamInfo of this MonitorStreamInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def broadcast_stream_delay_ms(self):
        """Gets the broadcast_stream_delay_ms of this MonitorStreamInfo.

        If you have set the enableMonitorStream property to true, then this property determines the length of the live broadcast delay.

        :return: The broadcast_stream_delay_ms of this MonitorStreamInfo.
        :rtype: int
        """
        return self._broadcast_stream_delay_ms

    @broadcast_stream_delay_ms.setter
    def broadcast_stream_delay_ms(self, broadcast_stream_delay_ms):
        """Sets the broadcast_stream_delay_ms of this MonitorStreamInfo.

        If you have set the enableMonitorStream property to true, then this property determines the length of the live broadcast delay.

        :param broadcast_stream_delay_ms: The broadcast_stream_delay_ms of this MonitorStreamInfo.
        :type broadcast_stream_delay_ms: int
        """

        self._broadcast_stream_delay_ms = broadcast_stream_delay_ms

    @property
    def embed_html(self):
        """Gets the embed_html of this MonitorStreamInfo.

        HTML code that embeds a player that plays the monitor stream.

        :return: The embed_html of this MonitorStreamInfo.
        :rtype: str
        """
        return self._embed_html

    @embed_html.setter
    def embed_html(self, embed_html):
        """Sets the embed_html of this MonitorStreamInfo.

        HTML code that embeds a player that plays the monitor stream.

        :param embed_html: The embed_html of this MonitorStreamInfo.
        :type embed_html: str
        """

        self._embed_html = embed_html

    @property
    def enable_monitor_stream(self):
        """Gets the enable_monitor_stream of this MonitorStreamInfo.

        This value determines whether the monitor stream is enabled for the broadcast. If the monitor stream is enabled, then YouTube will broadcast the event content on a special stream intended only for the broadcaster's consumption. The broadcaster can use the stream to review the event content and also to identify the optimal times to insert cuepoints. You need to set this value to true if you intend to have a broadcast delay for your event. *Note:* This property cannot be updated once the broadcast is in the testing or live state.

        :return: The enable_monitor_stream of this MonitorStreamInfo.
        :rtype: bool
        """
        return self._enable_monitor_stream

    @enable_monitor_stream.setter
    def enable_monitor_stream(self, enable_monitor_stream):
        """Sets the enable_monitor_stream of this MonitorStreamInfo.

        This value determines whether the monitor stream is enabled for the broadcast. If the monitor stream is enabled, then YouTube will broadcast the event content on a special stream intended only for the broadcaster's consumption. The broadcaster can use the stream to review the event content and also to identify the optimal times to insert cuepoints. You need to set this value to true if you intend to have a broadcast delay for your event. *Note:* This property cannot be updated once the broadcast is in the testing or live state.

        :param enable_monitor_stream: The enable_monitor_stream of this MonitorStreamInfo.
        :type enable_monitor_stream: bool
        """

        self._enable_monitor_stream = enable_monitor_stream
