# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.monitor_stream_info import MonitorStreamInfo
from openapi_server import util


class LiveBroadcastContentDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bound_stream_id: str=None, bound_stream_last_update_time_ms: datetime=None, closed_captions_type: str=None, enable_auto_start: bool=None, enable_auto_stop: bool=None, enable_closed_captions: bool=None, enable_content_encryption: bool=None, enable_dvr: bool=None, enable_embed: bool=None, enable_low_latency: bool=None, latency_preference: str=None, mesh: str=None, monitor_stream: MonitorStreamInfo=None, projection: str=None, record_from_start: bool=None, start_with_slate: bool=None, stereo_layout: str=None):
        """LiveBroadcastContentDetails - a model defined in OpenAPI

        :param bound_stream_id: The bound_stream_id of this LiveBroadcastContentDetails.
        :param bound_stream_last_update_time_ms: The bound_stream_last_update_time_ms of this LiveBroadcastContentDetails.
        :param closed_captions_type: The closed_captions_type of this LiveBroadcastContentDetails.
        :param enable_auto_start: The enable_auto_start of this LiveBroadcastContentDetails.
        :param enable_auto_stop: The enable_auto_stop of this LiveBroadcastContentDetails.
        :param enable_closed_captions: The enable_closed_captions of this LiveBroadcastContentDetails.
        :param enable_content_encryption: The enable_content_encryption of this LiveBroadcastContentDetails.
        :param enable_dvr: The enable_dvr of this LiveBroadcastContentDetails.
        :param enable_embed: The enable_embed of this LiveBroadcastContentDetails.
        :param enable_low_latency: The enable_low_latency of this LiveBroadcastContentDetails.
        :param latency_preference: The latency_preference of this LiveBroadcastContentDetails.
        :param mesh: The mesh of this LiveBroadcastContentDetails.
        :param monitor_stream: The monitor_stream of this LiveBroadcastContentDetails.
        :param projection: The projection of this LiveBroadcastContentDetails.
        :param record_from_start: The record_from_start of this LiveBroadcastContentDetails.
        :param start_with_slate: The start_with_slate of this LiveBroadcastContentDetails.
        :param stereo_layout: The stereo_layout of this LiveBroadcastContentDetails.
        """
        self.openapi_types = {
            'bound_stream_id': str,
            'bound_stream_last_update_time_ms': datetime,
            'closed_captions_type': str,
            'enable_auto_start': bool,
            'enable_auto_stop': bool,
            'enable_closed_captions': bool,
            'enable_content_encryption': bool,
            'enable_dvr': bool,
            'enable_embed': bool,
            'enable_low_latency': bool,
            'latency_preference': str,
            'mesh': str,
            'monitor_stream': MonitorStreamInfo,
            'projection': str,
            'record_from_start': bool,
            'start_with_slate': bool,
            'stereo_layout': str
        }

        self.attribute_map = {
            'bound_stream_id': 'boundStreamId',
            'bound_stream_last_update_time_ms': 'boundStreamLastUpdateTimeMs',
            'closed_captions_type': 'closedCaptionsType',
            'enable_auto_start': 'enableAutoStart',
            'enable_auto_stop': 'enableAutoStop',
            'enable_closed_captions': 'enableClosedCaptions',
            'enable_content_encryption': 'enableContentEncryption',
            'enable_dvr': 'enableDvr',
            'enable_embed': 'enableEmbed',
            'enable_low_latency': 'enableLowLatency',
            'latency_preference': 'latencyPreference',
            'mesh': 'mesh',
            'monitor_stream': 'monitorStream',
            'projection': 'projection',
            'record_from_start': 'recordFromStart',
            'start_with_slate': 'startWithSlate',
            'stereo_layout': 'stereoLayout'
        }

        self._bound_stream_id = bound_stream_id
        self._bound_stream_last_update_time_ms = bound_stream_last_update_time_ms
        self._closed_captions_type = closed_captions_type
        self._enable_auto_start = enable_auto_start
        self._enable_auto_stop = enable_auto_stop
        self._enable_closed_captions = enable_closed_captions
        self._enable_content_encryption = enable_content_encryption
        self._enable_dvr = enable_dvr
        self._enable_embed = enable_embed
        self._enable_low_latency = enable_low_latency
        self._latency_preference = latency_preference
        self._mesh = mesh
        self._monitor_stream = monitor_stream
        self._projection = projection
        self._record_from_start = record_from_start
        self._start_with_slate = start_with_slate
        self._stereo_layout = stereo_layout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LiveBroadcastContentDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LiveBroadcastContentDetails of this LiveBroadcastContentDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bound_stream_id(self):
        """Gets the bound_stream_id of this LiveBroadcastContentDetails.

        This value uniquely identifies the live stream bound to the broadcast.

        :return: The bound_stream_id of this LiveBroadcastContentDetails.
        :rtype: str
        """
        return self._bound_stream_id

    @bound_stream_id.setter
    def bound_stream_id(self, bound_stream_id):
        """Sets the bound_stream_id of this LiveBroadcastContentDetails.

        This value uniquely identifies the live stream bound to the broadcast.

        :param bound_stream_id: The bound_stream_id of this LiveBroadcastContentDetails.
        :type bound_stream_id: str
        """

        self._bound_stream_id = bound_stream_id

    @property
    def bound_stream_last_update_time_ms(self):
        """Gets the bound_stream_last_update_time_ms of this LiveBroadcastContentDetails.

        The date and time that the live stream referenced by boundStreamId was last updated.

        :return: The bound_stream_last_update_time_ms of this LiveBroadcastContentDetails.
        :rtype: datetime
        """
        return self._bound_stream_last_update_time_ms

    @bound_stream_last_update_time_ms.setter
    def bound_stream_last_update_time_ms(self, bound_stream_last_update_time_ms):
        """Sets the bound_stream_last_update_time_ms of this LiveBroadcastContentDetails.

        The date and time that the live stream referenced by boundStreamId was last updated.

        :param bound_stream_last_update_time_ms: The bound_stream_last_update_time_ms of this LiveBroadcastContentDetails.
        :type bound_stream_last_update_time_ms: datetime
        """

        self._bound_stream_last_update_time_ms = bound_stream_last_update_time_ms

    @property
    def closed_captions_type(self):
        """Gets the closed_captions_type of this LiveBroadcastContentDetails.


        :return: The closed_captions_type of this LiveBroadcastContentDetails.
        :rtype: str
        """
        return self._closed_captions_type

    @closed_captions_type.setter
    def closed_captions_type(self, closed_captions_type):
        """Sets the closed_captions_type of this LiveBroadcastContentDetails.


        :param closed_captions_type: The closed_captions_type of this LiveBroadcastContentDetails.
        :type closed_captions_type: str
        """
        allowed_values = ["closedCaptionsTypeUnspecified", "closedCaptionsDisabled", "closedCaptionsHttpPost", "closedCaptionsEmbedded"]  # noqa: E501
        if closed_captions_type not in allowed_values:
            raise ValueError(
                "Invalid value for `closed_captions_type` ({0}), must be one of {1}"
                .format(closed_captions_type, allowed_values)
            )

        self._closed_captions_type = closed_captions_type

    @property
    def enable_auto_start(self):
        """Gets the enable_auto_start of this LiveBroadcastContentDetails.

        This setting indicates whether auto start is enabled for this broadcast. The default value for this property is false. This setting can only be used by Events.

        :return: The enable_auto_start of this LiveBroadcastContentDetails.
        :rtype: bool
        """
        return self._enable_auto_start

    @enable_auto_start.setter
    def enable_auto_start(self, enable_auto_start):
        """Sets the enable_auto_start of this LiveBroadcastContentDetails.

        This setting indicates whether auto start is enabled for this broadcast. The default value for this property is false. This setting can only be used by Events.

        :param enable_auto_start: The enable_auto_start of this LiveBroadcastContentDetails.
        :type enable_auto_start: bool
        """

        self._enable_auto_start = enable_auto_start

    @property
    def enable_auto_stop(self):
        """Gets the enable_auto_stop of this LiveBroadcastContentDetails.

        This setting indicates whether auto stop is enabled for this broadcast. The default value for this property is false. This setting can only be used by Events.

        :return: The enable_auto_stop of this LiveBroadcastContentDetails.
        :rtype: bool
        """
        return self._enable_auto_stop

    @enable_auto_stop.setter
    def enable_auto_stop(self, enable_auto_stop):
        """Sets the enable_auto_stop of this LiveBroadcastContentDetails.

        This setting indicates whether auto stop is enabled for this broadcast. The default value for this property is false. This setting can only be used by Events.

        :param enable_auto_stop: The enable_auto_stop of this LiveBroadcastContentDetails.
        :type enable_auto_stop: bool
        """

        self._enable_auto_stop = enable_auto_stop

    @property
    def enable_closed_captions(self):
        """Gets the enable_closed_captions of this LiveBroadcastContentDetails.

        This setting indicates whether HTTP POST closed captioning is enabled for this broadcast. The ingestion URL of the closed captions is returned through the liveStreams API. This is mutually exclusive with using the closed_captions_type property, and is equivalent to setting closed_captions_type to CLOSED_CAPTIONS_HTTP_POST.

        :return: The enable_closed_captions of this LiveBroadcastContentDetails.
        :rtype: bool
        """
        return self._enable_closed_captions

    @enable_closed_captions.setter
    def enable_closed_captions(self, enable_closed_captions):
        """Sets the enable_closed_captions of this LiveBroadcastContentDetails.

        This setting indicates whether HTTP POST closed captioning is enabled for this broadcast. The ingestion URL of the closed captions is returned through the liveStreams API. This is mutually exclusive with using the closed_captions_type property, and is equivalent to setting closed_captions_type to CLOSED_CAPTIONS_HTTP_POST.

        :param enable_closed_captions: The enable_closed_captions of this LiveBroadcastContentDetails.
        :type enable_closed_captions: bool
        """

        self._enable_closed_captions = enable_closed_captions

    @property
    def enable_content_encryption(self):
        """Gets the enable_content_encryption of this LiveBroadcastContentDetails.

        This setting indicates whether YouTube should enable content encryption for the broadcast.

        :return: The enable_content_encryption of this LiveBroadcastContentDetails.
        :rtype: bool
        """
        return self._enable_content_encryption

    @enable_content_encryption.setter
    def enable_content_encryption(self, enable_content_encryption):
        """Sets the enable_content_encryption of this LiveBroadcastContentDetails.

        This setting indicates whether YouTube should enable content encryption for the broadcast.

        :param enable_content_encryption: The enable_content_encryption of this LiveBroadcastContentDetails.
        :type enable_content_encryption: bool
        """

        self._enable_content_encryption = enable_content_encryption

    @property
    def enable_dvr(self):
        """Gets the enable_dvr of this LiveBroadcastContentDetails.

        This setting determines whether viewers can access DVR controls while watching the video. DVR controls enable the viewer to control the video playback experience by pausing, rewinding, or fast forwarding content. The default value for this property is true. *Important:* You must set the value to true and also set the enableArchive property's value to true if you want to make playback available immediately after the broadcast ends.

        :return: The enable_dvr of this LiveBroadcastContentDetails.
        :rtype: bool
        """
        return self._enable_dvr

    @enable_dvr.setter
    def enable_dvr(self, enable_dvr):
        """Sets the enable_dvr of this LiveBroadcastContentDetails.

        This setting determines whether viewers can access DVR controls while watching the video. DVR controls enable the viewer to control the video playback experience by pausing, rewinding, or fast forwarding content. The default value for this property is true. *Important:* You must set the value to true and also set the enableArchive property's value to true if you want to make playback available immediately after the broadcast ends.

        :param enable_dvr: The enable_dvr of this LiveBroadcastContentDetails.
        :type enable_dvr: bool
        """

        self._enable_dvr = enable_dvr

    @property
    def enable_embed(self):
        """Gets the enable_embed of this LiveBroadcastContentDetails.

        This setting indicates whether the broadcast video can be played in an embedded player. If you choose to archive the video (using the enableArchive property), this setting will also apply to the archived video.

        :return: The enable_embed of this LiveBroadcastContentDetails.
        :rtype: bool
        """
        return self._enable_embed

    @enable_embed.setter
    def enable_embed(self, enable_embed):
        """Sets the enable_embed of this LiveBroadcastContentDetails.

        This setting indicates whether the broadcast video can be played in an embedded player. If you choose to archive the video (using the enableArchive property), this setting will also apply to the archived video.

        :param enable_embed: The enable_embed of this LiveBroadcastContentDetails.
        :type enable_embed: bool
        """

        self._enable_embed = enable_embed

    @property
    def enable_low_latency(self):
        """Gets the enable_low_latency of this LiveBroadcastContentDetails.

        Indicates whether this broadcast has low latency enabled.

        :return: The enable_low_latency of this LiveBroadcastContentDetails.
        :rtype: bool
        """
        return self._enable_low_latency

    @enable_low_latency.setter
    def enable_low_latency(self, enable_low_latency):
        """Sets the enable_low_latency of this LiveBroadcastContentDetails.

        Indicates whether this broadcast has low latency enabled.

        :param enable_low_latency: The enable_low_latency of this LiveBroadcastContentDetails.
        :type enable_low_latency: bool
        """

        self._enable_low_latency = enable_low_latency

    @property
    def latency_preference(self):
        """Gets the latency_preference of this LiveBroadcastContentDetails.

        If both this and enable_low_latency are set, they must match. LATENCY_NORMAL should match enable_low_latency=false LATENCY_LOW should match enable_low_latency=true LATENCY_ULTRA_LOW should have enable_low_latency omitted.

        :return: The latency_preference of this LiveBroadcastContentDetails.
        :rtype: str
        """
        return self._latency_preference

    @latency_preference.setter
    def latency_preference(self, latency_preference):
        """Sets the latency_preference of this LiveBroadcastContentDetails.

        If both this and enable_low_latency are set, they must match. LATENCY_NORMAL should match enable_low_latency=false LATENCY_LOW should match enable_low_latency=true LATENCY_ULTRA_LOW should have enable_low_latency omitted.

        :param latency_preference: The latency_preference of this LiveBroadcastContentDetails.
        :type latency_preference: str
        """
        allowed_values = ["latencyPreferenceUnspecified", "normal", "low", "ultraLow"]  # noqa: E501
        if latency_preference not in allowed_values:
            raise ValueError(
                "Invalid value for `latency_preference` ({0}), must be one of {1}"
                .format(latency_preference, allowed_values)
            )

        self._latency_preference = latency_preference

    @property
    def mesh(self):
        """Gets the mesh of this LiveBroadcastContentDetails.

        The mesh for projecting the video if projection is mesh. The mesh value must be a UTF-8 string containing the base-64 encoding of 3D mesh data that follows the Spherical Video V2 RFC specification for an mshp box, excluding the box size and type but including the following four reserved zero bytes for the version and flags.

        :return: The mesh of this LiveBroadcastContentDetails.
        :rtype: str
        """
        return self._mesh

    @mesh.setter
    def mesh(self, mesh):
        """Sets the mesh of this LiveBroadcastContentDetails.

        The mesh for projecting the video if projection is mesh. The mesh value must be a UTF-8 string containing the base-64 encoding of 3D mesh data that follows the Spherical Video V2 RFC specification for an mshp box, excluding the box size and type but including the following four reserved zero bytes for the version and flags.

        :param mesh: The mesh of this LiveBroadcastContentDetails.
        :type mesh: str
        """

        self._mesh = mesh

    @property
    def monitor_stream(self):
        """Gets the monitor_stream of this LiveBroadcastContentDetails.


        :return: The monitor_stream of this LiveBroadcastContentDetails.
        :rtype: MonitorStreamInfo
        """
        return self._monitor_stream

    @monitor_stream.setter
    def monitor_stream(self, monitor_stream):
        """Sets the monitor_stream of this LiveBroadcastContentDetails.


        :param monitor_stream: The monitor_stream of this LiveBroadcastContentDetails.
        :type monitor_stream: MonitorStreamInfo
        """

        self._monitor_stream = monitor_stream

    @property
    def projection(self):
        """Gets the projection of this LiveBroadcastContentDetails.

        The projection format of this broadcast. This defaults to rectangular.

        :return: The projection of this LiveBroadcastContentDetails.
        :rtype: str
        """
        return self._projection

    @projection.setter
    def projection(self, projection):
        """Sets the projection of this LiveBroadcastContentDetails.

        The projection format of this broadcast. This defaults to rectangular.

        :param projection: The projection of this LiveBroadcastContentDetails.
        :type projection: str
        """
        allowed_values = ["projectionUnspecified", "rectangular", "360", "mesh"]  # noqa: E501
        if projection not in allowed_values:
            raise ValueError(
                "Invalid value for `projection` ({0}), must be one of {1}"
                .format(projection, allowed_values)
            )

        self._projection = projection

    @property
    def record_from_start(self):
        """Gets the record_from_start of this LiveBroadcastContentDetails.

        Automatically start recording after the event goes live. The default value for this property is true. *Important:* You must also set the enableDvr property's value to true if you want the playback to be available immediately after the broadcast ends. If you set this property's value to true but do not also set the enableDvr property to true, there may be a delay of around one day before the archived video will be available for playback.

        :return: The record_from_start of this LiveBroadcastContentDetails.
        :rtype: bool
        """
        return self._record_from_start

    @record_from_start.setter
    def record_from_start(self, record_from_start):
        """Sets the record_from_start of this LiveBroadcastContentDetails.

        Automatically start recording after the event goes live. The default value for this property is true. *Important:* You must also set the enableDvr property's value to true if you want the playback to be available immediately after the broadcast ends. If you set this property's value to true but do not also set the enableDvr property to true, there may be a delay of around one day before the archived video will be available for playback.

        :param record_from_start: The record_from_start of this LiveBroadcastContentDetails.
        :type record_from_start: bool
        """

        self._record_from_start = record_from_start

    @property
    def start_with_slate(self):
        """Gets the start_with_slate of this LiveBroadcastContentDetails.

        This setting indicates whether the broadcast should automatically begin with an in-stream slate when you update the broadcast's status to live. After updating the status, you then need to send a liveCuepoints.insert request that sets the cuepoint's eventState to end to remove the in-stream slate and make your broadcast stream visible to viewers.

        :return: The start_with_slate of this LiveBroadcastContentDetails.
        :rtype: bool
        """
        return self._start_with_slate

    @start_with_slate.setter
    def start_with_slate(self, start_with_slate):
        """Sets the start_with_slate of this LiveBroadcastContentDetails.

        This setting indicates whether the broadcast should automatically begin with an in-stream slate when you update the broadcast's status to live. After updating the status, you then need to send a liveCuepoints.insert request that sets the cuepoint's eventState to end to remove the in-stream slate and make your broadcast stream visible to viewers.

        :param start_with_slate: The start_with_slate of this LiveBroadcastContentDetails.
        :type start_with_slate: bool
        """

        self._start_with_slate = start_with_slate

    @property
    def stereo_layout(self):
        """Gets the stereo_layout of this LiveBroadcastContentDetails.

        The 3D stereo layout of this broadcast. This defaults to mono.

        :return: The stereo_layout of this LiveBroadcastContentDetails.
        :rtype: str
        """
        return self._stereo_layout

    @stereo_layout.setter
    def stereo_layout(self, stereo_layout):
        """Sets the stereo_layout of this LiveBroadcastContentDetails.

        The 3D stereo layout of this broadcast. This defaults to mono.

        :param stereo_layout: The stereo_layout of this LiveBroadcastContentDetails.
        :type stereo_layout: str
        """
        allowed_values = ["stereoLayoutUnspecified", "mono", "leftRight", "topBottom"]  # noqa: E501
        if stereo_layout not in allowed_values:
            raise ValueError(
                "Invalid value for `stereo_layout` ({0}), must be one of {1}"
                .format(stereo_layout, allowed_values)
            )

        self._stereo_layout = stereo_layout
