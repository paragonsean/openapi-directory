# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContentRating(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acb_rating: str=None, agcom_rating: str=None, anatel_rating: str=None, bbfc_rating: str=None, bfvc_rating: str=None, bmukk_rating: str=None, catv_rating: str=None, catvfr_rating: str=None, cbfc_rating: str=None, ccc_rating: str=None, cce_rating: str=None, chfilm_rating: str=None, chvrs_rating: str=None, cicf_rating: str=None, cna_rating: str=None, cnc_rating: str=None, csa_rating: str=None, cscf_rating: str=None, czfilm_rating: str=None, djctq_rating: str=None, djctq_rating_reasons: List[str]=None, ecbmct_rating: str=None, eefilm_rating: str=None, egfilm_rating: str=None, eirin_rating: str=None, fcbm_rating: str=None, fco_rating: str=None, fmoc_rating: str=None, fpb_rating: str=None, fpb_rating_reasons: List[str]=None, fsk_rating: str=None, grfilm_rating: str=None, icaa_rating: str=None, ifco_rating: str=None, ilfilm_rating: str=None, incaa_rating: str=None, kfcb_rating: str=None, kijkwijzer_rating: str=None, kmrb_rating: str=None, lsf_rating: str=None, mccaa_rating: str=None, mccyp_rating: str=None, mcst_rating: str=None, mda_rating: str=None, medietilsynet_rating: str=None, meku_rating: str=None, mena_mpaa_rating: str=None, mibac_rating: str=None, moc_rating: str=None, moctw_rating: str=None, mpaa_rating: str=None, mpaat_rating: str=None, mtrcb_rating: str=None, nbc_rating: str=None, nbcpl_rating: str=None, nfrc_rating: str=None, nfvcb_rating: str=None, nkclv_rating: str=None, nmc_rating: str=None, oflc_rating: str=None, pefilm_rating: str=None, rcnof_rating: str=None, resorteviolencia_rating: str=None, rtc_rating: str=None, rte_rating: str=None, russia_rating: str=None, skfilm_rating: str=None, smais_rating: str=None, smsa_rating: str=None, tvpg_rating: str=None, yt_rating: str=None):
        """ContentRating - a model defined in OpenAPI

        :param acb_rating: The acb_rating of this ContentRating.
        :param agcom_rating: The agcom_rating of this ContentRating.
        :param anatel_rating: The anatel_rating of this ContentRating.
        :param bbfc_rating: The bbfc_rating of this ContentRating.
        :param bfvc_rating: The bfvc_rating of this ContentRating.
        :param bmukk_rating: The bmukk_rating of this ContentRating.
        :param catv_rating: The catv_rating of this ContentRating.
        :param catvfr_rating: The catvfr_rating of this ContentRating.
        :param cbfc_rating: The cbfc_rating of this ContentRating.
        :param ccc_rating: The ccc_rating of this ContentRating.
        :param cce_rating: The cce_rating of this ContentRating.
        :param chfilm_rating: The chfilm_rating of this ContentRating.
        :param chvrs_rating: The chvrs_rating of this ContentRating.
        :param cicf_rating: The cicf_rating of this ContentRating.
        :param cna_rating: The cna_rating of this ContentRating.
        :param cnc_rating: The cnc_rating of this ContentRating.
        :param csa_rating: The csa_rating of this ContentRating.
        :param cscf_rating: The cscf_rating of this ContentRating.
        :param czfilm_rating: The czfilm_rating of this ContentRating.
        :param djctq_rating: The djctq_rating of this ContentRating.
        :param djctq_rating_reasons: The djctq_rating_reasons of this ContentRating.
        :param ecbmct_rating: The ecbmct_rating of this ContentRating.
        :param eefilm_rating: The eefilm_rating of this ContentRating.
        :param egfilm_rating: The egfilm_rating of this ContentRating.
        :param eirin_rating: The eirin_rating of this ContentRating.
        :param fcbm_rating: The fcbm_rating of this ContentRating.
        :param fco_rating: The fco_rating of this ContentRating.
        :param fmoc_rating: The fmoc_rating of this ContentRating.
        :param fpb_rating: The fpb_rating of this ContentRating.
        :param fpb_rating_reasons: The fpb_rating_reasons of this ContentRating.
        :param fsk_rating: The fsk_rating of this ContentRating.
        :param grfilm_rating: The grfilm_rating of this ContentRating.
        :param icaa_rating: The icaa_rating of this ContentRating.
        :param ifco_rating: The ifco_rating of this ContentRating.
        :param ilfilm_rating: The ilfilm_rating of this ContentRating.
        :param incaa_rating: The incaa_rating of this ContentRating.
        :param kfcb_rating: The kfcb_rating of this ContentRating.
        :param kijkwijzer_rating: The kijkwijzer_rating of this ContentRating.
        :param kmrb_rating: The kmrb_rating of this ContentRating.
        :param lsf_rating: The lsf_rating of this ContentRating.
        :param mccaa_rating: The mccaa_rating of this ContentRating.
        :param mccyp_rating: The mccyp_rating of this ContentRating.
        :param mcst_rating: The mcst_rating of this ContentRating.
        :param mda_rating: The mda_rating of this ContentRating.
        :param medietilsynet_rating: The medietilsynet_rating of this ContentRating.
        :param meku_rating: The meku_rating of this ContentRating.
        :param mena_mpaa_rating: The mena_mpaa_rating of this ContentRating.
        :param mibac_rating: The mibac_rating of this ContentRating.
        :param moc_rating: The moc_rating of this ContentRating.
        :param moctw_rating: The moctw_rating of this ContentRating.
        :param mpaa_rating: The mpaa_rating of this ContentRating.
        :param mpaat_rating: The mpaat_rating of this ContentRating.
        :param mtrcb_rating: The mtrcb_rating of this ContentRating.
        :param nbc_rating: The nbc_rating of this ContentRating.
        :param nbcpl_rating: The nbcpl_rating of this ContentRating.
        :param nfrc_rating: The nfrc_rating of this ContentRating.
        :param nfvcb_rating: The nfvcb_rating of this ContentRating.
        :param nkclv_rating: The nkclv_rating of this ContentRating.
        :param nmc_rating: The nmc_rating of this ContentRating.
        :param oflc_rating: The oflc_rating of this ContentRating.
        :param pefilm_rating: The pefilm_rating of this ContentRating.
        :param rcnof_rating: The rcnof_rating of this ContentRating.
        :param resorteviolencia_rating: The resorteviolencia_rating of this ContentRating.
        :param rtc_rating: The rtc_rating of this ContentRating.
        :param rte_rating: The rte_rating of this ContentRating.
        :param russia_rating: The russia_rating of this ContentRating.
        :param skfilm_rating: The skfilm_rating of this ContentRating.
        :param smais_rating: The smais_rating of this ContentRating.
        :param smsa_rating: The smsa_rating of this ContentRating.
        :param tvpg_rating: The tvpg_rating of this ContentRating.
        :param yt_rating: The yt_rating of this ContentRating.
        """
        self.openapi_types = {
            'acb_rating': str,
            'agcom_rating': str,
            'anatel_rating': str,
            'bbfc_rating': str,
            'bfvc_rating': str,
            'bmukk_rating': str,
            'catv_rating': str,
            'catvfr_rating': str,
            'cbfc_rating': str,
            'ccc_rating': str,
            'cce_rating': str,
            'chfilm_rating': str,
            'chvrs_rating': str,
            'cicf_rating': str,
            'cna_rating': str,
            'cnc_rating': str,
            'csa_rating': str,
            'cscf_rating': str,
            'czfilm_rating': str,
            'djctq_rating': str,
            'djctq_rating_reasons': List[str],
            'ecbmct_rating': str,
            'eefilm_rating': str,
            'egfilm_rating': str,
            'eirin_rating': str,
            'fcbm_rating': str,
            'fco_rating': str,
            'fmoc_rating': str,
            'fpb_rating': str,
            'fpb_rating_reasons': List[str],
            'fsk_rating': str,
            'grfilm_rating': str,
            'icaa_rating': str,
            'ifco_rating': str,
            'ilfilm_rating': str,
            'incaa_rating': str,
            'kfcb_rating': str,
            'kijkwijzer_rating': str,
            'kmrb_rating': str,
            'lsf_rating': str,
            'mccaa_rating': str,
            'mccyp_rating': str,
            'mcst_rating': str,
            'mda_rating': str,
            'medietilsynet_rating': str,
            'meku_rating': str,
            'mena_mpaa_rating': str,
            'mibac_rating': str,
            'moc_rating': str,
            'moctw_rating': str,
            'mpaa_rating': str,
            'mpaat_rating': str,
            'mtrcb_rating': str,
            'nbc_rating': str,
            'nbcpl_rating': str,
            'nfrc_rating': str,
            'nfvcb_rating': str,
            'nkclv_rating': str,
            'nmc_rating': str,
            'oflc_rating': str,
            'pefilm_rating': str,
            'rcnof_rating': str,
            'resorteviolencia_rating': str,
            'rtc_rating': str,
            'rte_rating': str,
            'russia_rating': str,
            'skfilm_rating': str,
            'smais_rating': str,
            'smsa_rating': str,
            'tvpg_rating': str,
            'yt_rating': str
        }

        self.attribute_map = {
            'acb_rating': 'acbRating',
            'agcom_rating': 'agcomRating',
            'anatel_rating': 'anatelRating',
            'bbfc_rating': 'bbfcRating',
            'bfvc_rating': 'bfvcRating',
            'bmukk_rating': 'bmukkRating',
            'catv_rating': 'catvRating',
            'catvfr_rating': 'catvfrRating',
            'cbfc_rating': 'cbfcRating',
            'ccc_rating': 'cccRating',
            'cce_rating': 'cceRating',
            'chfilm_rating': 'chfilmRating',
            'chvrs_rating': 'chvrsRating',
            'cicf_rating': 'cicfRating',
            'cna_rating': 'cnaRating',
            'cnc_rating': 'cncRating',
            'csa_rating': 'csaRating',
            'cscf_rating': 'cscfRating',
            'czfilm_rating': 'czfilmRating',
            'djctq_rating': 'djctqRating',
            'djctq_rating_reasons': 'djctqRatingReasons',
            'ecbmct_rating': 'ecbmctRating',
            'eefilm_rating': 'eefilmRating',
            'egfilm_rating': 'egfilmRating',
            'eirin_rating': 'eirinRating',
            'fcbm_rating': 'fcbmRating',
            'fco_rating': 'fcoRating',
            'fmoc_rating': 'fmocRating',
            'fpb_rating': 'fpbRating',
            'fpb_rating_reasons': 'fpbRatingReasons',
            'fsk_rating': 'fskRating',
            'grfilm_rating': 'grfilmRating',
            'icaa_rating': 'icaaRating',
            'ifco_rating': 'ifcoRating',
            'ilfilm_rating': 'ilfilmRating',
            'incaa_rating': 'incaaRating',
            'kfcb_rating': 'kfcbRating',
            'kijkwijzer_rating': 'kijkwijzerRating',
            'kmrb_rating': 'kmrbRating',
            'lsf_rating': 'lsfRating',
            'mccaa_rating': 'mccaaRating',
            'mccyp_rating': 'mccypRating',
            'mcst_rating': 'mcstRating',
            'mda_rating': 'mdaRating',
            'medietilsynet_rating': 'medietilsynetRating',
            'meku_rating': 'mekuRating',
            'mena_mpaa_rating': 'menaMpaaRating',
            'mibac_rating': 'mibacRating',
            'moc_rating': 'mocRating',
            'moctw_rating': 'moctwRating',
            'mpaa_rating': 'mpaaRating',
            'mpaat_rating': 'mpaatRating',
            'mtrcb_rating': 'mtrcbRating',
            'nbc_rating': 'nbcRating',
            'nbcpl_rating': 'nbcplRating',
            'nfrc_rating': 'nfrcRating',
            'nfvcb_rating': 'nfvcbRating',
            'nkclv_rating': 'nkclvRating',
            'nmc_rating': 'nmcRating',
            'oflc_rating': 'oflcRating',
            'pefilm_rating': 'pefilmRating',
            'rcnof_rating': 'rcnofRating',
            'resorteviolencia_rating': 'resorteviolenciaRating',
            'rtc_rating': 'rtcRating',
            'rte_rating': 'rteRating',
            'russia_rating': 'russiaRating',
            'skfilm_rating': 'skfilmRating',
            'smais_rating': 'smaisRating',
            'smsa_rating': 'smsaRating',
            'tvpg_rating': 'tvpgRating',
            'yt_rating': 'ytRating'
        }

        self._acb_rating = acb_rating
        self._agcom_rating = agcom_rating
        self._anatel_rating = anatel_rating
        self._bbfc_rating = bbfc_rating
        self._bfvc_rating = bfvc_rating
        self._bmukk_rating = bmukk_rating
        self._catv_rating = catv_rating
        self._catvfr_rating = catvfr_rating
        self._cbfc_rating = cbfc_rating
        self._ccc_rating = ccc_rating
        self._cce_rating = cce_rating
        self._chfilm_rating = chfilm_rating
        self._chvrs_rating = chvrs_rating
        self._cicf_rating = cicf_rating
        self._cna_rating = cna_rating
        self._cnc_rating = cnc_rating
        self._csa_rating = csa_rating
        self._cscf_rating = cscf_rating
        self._czfilm_rating = czfilm_rating
        self._djctq_rating = djctq_rating
        self._djctq_rating_reasons = djctq_rating_reasons
        self._ecbmct_rating = ecbmct_rating
        self._eefilm_rating = eefilm_rating
        self._egfilm_rating = egfilm_rating
        self._eirin_rating = eirin_rating
        self._fcbm_rating = fcbm_rating
        self._fco_rating = fco_rating
        self._fmoc_rating = fmoc_rating
        self._fpb_rating = fpb_rating
        self._fpb_rating_reasons = fpb_rating_reasons
        self._fsk_rating = fsk_rating
        self._grfilm_rating = grfilm_rating
        self._icaa_rating = icaa_rating
        self._ifco_rating = ifco_rating
        self._ilfilm_rating = ilfilm_rating
        self._incaa_rating = incaa_rating
        self._kfcb_rating = kfcb_rating
        self._kijkwijzer_rating = kijkwijzer_rating
        self._kmrb_rating = kmrb_rating
        self._lsf_rating = lsf_rating
        self._mccaa_rating = mccaa_rating
        self._mccyp_rating = mccyp_rating
        self._mcst_rating = mcst_rating
        self._mda_rating = mda_rating
        self._medietilsynet_rating = medietilsynet_rating
        self._meku_rating = meku_rating
        self._mena_mpaa_rating = mena_mpaa_rating
        self._mibac_rating = mibac_rating
        self._moc_rating = moc_rating
        self._moctw_rating = moctw_rating
        self._mpaa_rating = mpaa_rating
        self._mpaat_rating = mpaat_rating
        self._mtrcb_rating = mtrcb_rating
        self._nbc_rating = nbc_rating
        self._nbcpl_rating = nbcpl_rating
        self._nfrc_rating = nfrc_rating
        self._nfvcb_rating = nfvcb_rating
        self._nkclv_rating = nkclv_rating
        self._nmc_rating = nmc_rating
        self._oflc_rating = oflc_rating
        self._pefilm_rating = pefilm_rating
        self._rcnof_rating = rcnof_rating
        self._resorteviolencia_rating = resorteviolencia_rating
        self._rtc_rating = rtc_rating
        self._rte_rating = rte_rating
        self._russia_rating = russia_rating
        self._skfilm_rating = skfilm_rating
        self._smais_rating = smais_rating
        self._smsa_rating = smsa_rating
        self._tvpg_rating = tvpg_rating
        self._yt_rating = yt_rating

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContentRating':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContentRating of this ContentRating.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acb_rating(self):
        """Gets the acb_rating of this ContentRating.

        The video's Australian Classification Board (ACB) or Australian Communications and Media Authority (ACMA) rating. ACMA ratings are used to classify children's television programming.

        :return: The acb_rating of this ContentRating.
        :rtype: str
        """
        return self._acb_rating

    @acb_rating.setter
    def acb_rating(self, acb_rating):
        """Sets the acb_rating of this ContentRating.

        The video's Australian Classification Board (ACB) or Australian Communications and Media Authority (ACMA) rating. ACMA ratings are used to classify children's television programming.

        :param acb_rating: The acb_rating of this ContentRating.
        :type acb_rating: str
        """
        allowed_values = ["acbUnspecified", "acbE", "acbP", "acbC", "acbG", "acbPg", "acbM", "acbMa15plus", "acbR18plus", "acbUnrated"]  # noqa: E501
        if acb_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `acb_rating` ({0}), must be one of {1}"
                .format(acb_rating, allowed_values)
            )

        self._acb_rating = acb_rating

    @property
    def agcom_rating(self):
        """Gets the agcom_rating of this ContentRating.

        The video's rating from Italy's Autorità per le Garanzie nelle Comunicazioni (AGCOM).

        :return: The agcom_rating of this ContentRating.
        :rtype: str
        """
        return self._agcom_rating

    @agcom_rating.setter
    def agcom_rating(self, agcom_rating):
        """Sets the agcom_rating of this ContentRating.

        The video's rating from Italy's Autorità per le Garanzie nelle Comunicazioni (AGCOM).

        :param agcom_rating: The agcom_rating of this ContentRating.
        :type agcom_rating: str
        """
        allowed_values = ["agcomUnspecified", "agcomT", "agcomVm14", "agcomVm18", "agcomUnrated"]  # noqa: E501
        if agcom_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `agcom_rating` ({0}), must be one of {1}"
                .format(agcom_rating, allowed_values)
            )

        self._agcom_rating = agcom_rating

    @property
    def anatel_rating(self):
        """Gets the anatel_rating of this ContentRating.

        The video's Anatel (Asociación Nacional de Televisión) rating for Chilean television.

        :return: The anatel_rating of this ContentRating.
        :rtype: str
        """
        return self._anatel_rating

    @anatel_rating.setter
    def anatel_rating(self, anatel_rating):
        """Sets the anatel_rating of this ContentRating.

        The video's Anatel (Asociación Nacional de Televisión) rating for Chilean television.

        :param anatel_rating: The anatel_rating of this ContentRating.
        :type anatel_rating: str
        """
        allowed_values = ["anatelUnspecified", "anatelF", "anatelI", "anatelI7", "anatelI10", "anatelI12", "anatelR", "anatelA", "anatelUnrated"]  # noqa: E501
        if anatel_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `anatel_rating` ({0}), must be one of {1}"
                .format(anatel_rating, allowed_values)
            )

        self._anatel_rating = anatel_rating

    @property
    def bbfc_rating(self):
        """Gets the bbfc_rating of this ContentRating.

        The video's British Board of Film Classification (BBFC) rating.

        :return: The bbfc_rating of this ContentRating.
        :rtype: str
        """
        return self._bbfc_rating

    @bbfc_rating.setter
    def bbfc_rating(self, bbfc_rating):
        """Sets the bbfc_rating of this ContentRating.

        The video's British Board of Film Classification (BBFC) rating.

        :param bbfc_rating: The bbfc_rating of this ContentRating.
        :type bbfc_rating: str
        """
        allowed_values = ["bbfcUnspecified", "bbfcU", "bbfcPg", "bbfc12a", "bbfc12", "bbfc15", "bbfc18", "bbfcR18", "bbfcUnrated"]  # noqa: E501
        if bbfc_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `bbfc_rating` ({0}), must be one of {1}"
                .format(bbfc_rating, allowed_values)
            )

        self._bbfc_rating = bbfc_rating

    @property
    def bfvc_rating(self):
        """Gets the bfvc_rating of this ContentRating.

        The video's rating from Thailand's Board of Film and Video Censors.

        :return: The bfvc_rating of this ContentRating.
        :rtype: str
        """
        return self._bfvc_rating

    @bfvc_rating.setter
    def bfvc_rating(self, bfvc_rating):
        """Sets the bfvc_rating of this ContentRating.

        The video's rating from Thailand's Board of Film and Video Censors.

        :param bfvc_rating: The bfvc_rating of this ContentRating.
        :type bfvc_rating: str
        """
        allowed_values = ["bfvcUnspecified", "bfvcG", "bfvcE", "bfvc13", "bfvc15", "bfvc18", "bfvc20", "bfvcB", "bfvcUnrated"]  # noqa: E501
        if bfvc_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `bfvc_rating` ({0}), must be one of {1}"
                .format(bfvc_rating, allowed_values)
            )

        self._bfvc_rating = bfvc_rating

    @property
    def bmukk_rating(self):
        """Gets the bmukk_rating of this ContentRating.

        The video's rating from the Austrian Board of Media Classification (Bundesministerium für Unterricht, Kunst und Kultur).

        :return: The bmukk_rating of this ContentRating.
        :rtype: str
        """
        return self._bmukk_rating

    @bmukk_rating.setter
    def bmukk_rating(self, bmukk_rating):
        """Sets the bmukk_rating of this ContentRating.

        The video's rating from the Austrian Board of Media Classification (Bundesministerium für Unterricht, Kunst und Kultur).

        :param bmukk_rating: The bmukk_rating of this ContentRating.
        :type bmukk_rating: str
        """
        allowed_values = ["bmukkUnspecified", "bmukkAa", "bmukk6", "bmukk8", "bmukk10", "bmukk12", "bmukk14", "bmukk16", "bmukkUnrated"]  # noqa: E501
        if bmukk_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `bmukk_rating` ({0}), must be one of {1}"
                .format(bmukk_rating, allowed_values)
            )

        self._bmukk_rating = bmukk_rating

    @property
    def catv_rating(self):
        """Gets the catv_rating of this ContentRating.

        Rating system for Canadian TV - Canadian TV Classification System The video's rating from the Canadian Radio-Television and Telecommunications Commission (CRTC) for Canadian English-language broadcasts. For more information, see the Canadian Broadcast Standards Council website.

        :return: The catv_rating of this ContentRating.
        :rtype: str
        """
        return self._catv_rating

    @catv_rating.setter
    def catv_rating(self, catv_rating):
        """Sets the catv_rating of this ContentRating.

        Rating system for Canadian TV - Canadian TV Classification System The video's rating from the Canadian Radio-Television and Telecommunications Commission (CRTC) for Canadian English-language broadcasts. For more information, see the Canadian Broadcast Standards Council website.

        :param catv_rating: The catv_rating of this ContentRating.
        :type catv_rating: str
        """
        allowed_values = ["catvUnspecified", "catvC", "catvC8", "catvG", "catvPg", "catv14plus", "catv18plus", "catvUnrated", "catvE"]  # noqa: E501
        if catv_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `catv_rating` ({0}), must be one of {1}"
                .format(catv_rating, allowed_values)
            )

        self._catv_rating = catv_rating

    @property
    def catvfr_rating(self):
        """Gets the catvfr_rating of this ContentRating.

        The video's rating from the Canadian Radio-Television and Telecommunications Commission (CRTC) for Canadian French-language broadcasts. For more information, see the Canadian Broadcast Standards Council website.

        :return: The catvfr_rating of this ContentRating.
        :rtype: str
        """
        return self._catvfr_rating

    @catvfr_rating.setter
    def catvfr_rating(self, catvfr_rating):
        """Sets the catvfr_rating of this ContentRating.

        The video's rating from the Canadian Radio-Television and Telecommunications Commission (CRTC) for Canadian French-language broadcasts. For more information, see the Canadian Broadcast Standards Council website.

        :param catvfr_rating: The catvfr_rating of this ContentRating.
        :type catvfr_rating: str
        """
        allowed_values = ["catvfrUnspecified", "catvfrG", "catvfr8plus", "catvfr13plus", "catvfr16plus", "catvfr18plus", "catvfrUnrated", "catvfrE"]  # noqa: E501
        if catvfr_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `catvfr_rating` ({0}), must be one of {1}"
                .format(catvfr_rating, allowed_values)
            )

        self._catvfr_rating = catvfr_rating

    @property
    def cbfc_rating(self):
        """Gets the cbfc_rating of this ContentRating.

        The video's Central Board of Film Certification (CBFC - India) rating.

        :return: The cbfc_rating of this ContentRating.
        :rtype: str
        """
        return self._cbfc_rating

    @cbfc_rating.setter
    def cbfc_rating(self, cbfc_rating):
        """Sets the cbfc_rating of this ContentRating.

        The video's Central Board of Film Certification (CBFC - India) rating.

        :param cbfc_rating: The cbfc_rating of this ContentRating.
        :type cbfc_rating: str
        """
        allowed_values = ["cbfcUnspecified", "cbfcU", "cbfcUA", "cbfcUA7plus", "cbfcUA13plus", "cbfcUA16plus", "cbfcA", "cbfcS", "cbfcUnrated"]  # noqa: E501
        if cbfc_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `cbfc_rating` ({0}), must be one of {1}"
                .format(cbfc_rating, allowed_values)
            )

        self._cbfc_rating = cbfc_rating

    @property
    def ccc_rating(self):
        """Gets the ccc_rating of this ContentRating.

        The video's Consejo de Calificación Cinematográfica (Chile) rating.

        :return: The ccc_rating of this ContentRating.
        :rtype: str
        """
        return self._ccc_rating

    @ccc_rating.setter
    def ccc_rating(self, ccc_rating):
        """Sets the ccc_rating of this ContentRating.

        The video's Consejo de Calificación Cinematográfica (Chile) rating.

        :param ccc_rating: The ccc_rating of this ContentRating.
        :type ccc_rating: str
        """
        allowed_values = ["cccUnspecified", "cccTe", "ccc6", "ccc14", "ccc18", "ccc18v", "ccc18s", "cccUnrated"]  # noqa: E501
        if ccc_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `ccc_rating` ({0}), must be one of {1}"
                .format(ccc_rating, allowed_values)
            )

        self._ccc_rating = ccc_rating

    @property
    def cce_rating(self):
        """Gets the cce_rating of this ContentRating.

        The video's rating from Portugal's Comissão de Classificação de Espect´culos.

        :return: The cce_rating of this ContentRating.
        :rtype: str
        """
        return self._cce_rating

    @cce_rating.setter
    def cce_rating(self, cce_rating):
        """Sets the cce_rating of this ContentRating.

        The video's rating from Portugal's Comissão de Classificação de Espect´culos.

        :param cce_rating: The cce_rating of this ContentRating.
        :type cce_rating: str
        """
        allowed_values = ["cceUnspecified", "cceM4", "cceM6", "cceM12", "cceM16", "cceM18", "cceUnrated", "cceM14"]  # noqa: E501
        if cce_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `cce_rating` ({0}), must be one of {1}"
                .format(cce_rating, allowed_values)
            )

        self._cce_rating = cce_rating

    @property
    def chfilm_rating(self):
        """Gets the chfilm_rating of this ContentRating.

        The video's rating in Switzerland.

        :return: The chfilm_rating of this ContentRating.
        :rtype: str
        """
        return self._chfilm_rating

    @chfilm_rating.setter
    def chfilm_rating(self, chfilm_rating):
        """Sets the chfilm_rating of this ContentRating.

        The video's rating in Switzerland.

        :param chfilm_rating: The chfilm_rating of this ContentRating.
        :type chfilm_rating: str
        """
        allowed_values = ["chfilmUnspecified", "chfilm0", "chfilm6", "chfilm12", "chfilm16", "chfilm18", "chfilmUnrated"]  # noqa: E501
        if chfilm_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `chfilm_rating` ({0}), must be one of {1}"
                .format(chfilm_rating, allowed_values)
            )

        self._chfilm_rating = chfilm_rating

    @property
    def chvrs_rating(self):
        """Gets the chvrs_rating of this ContentRating.

        The video's Canadian Home Video Rating System (CHVRS) rating.

        :return: The chvrs_rating of this ContentRating.
        :rtype: str
        """
        return self._chvrs_rating

    @chvrs_rating.setter
    def chvrs_rating(self, chvrs_rating):
        """Sets the chvrs_rating of this ContentRating.

        The video's Canadian Home Video Rating System (CHVRS) rating.

        :param chvrs_rating: The chvrs_rating of this ContentRating.
        :type chvrs_rating: str
        """
        allowed_values = ["chvrsUnspecified", "chvrsG", "chvrsPg", "chvrs14a", "chvrs18a", "chvrsR", "chvrsE", "chvrsUnrated"]  # noqa: E501
        if chvrs_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `chvrs_rating` ({0}), must be one of {1}"
                .format(chvrs_rating, allowed_values)
            )

        self._chvrs_rating = chvrs_rating

    @property
    def cicf_rating(self):
        """Gets the cicf_rating of this ContentRating.

        The video's rating from the Commission de Contrôle des Films (Belgium).

        :return: The cicf_rating of this ContentRating.
        :rtype: str
        """
        return self._cicf_rating

    @cicf_rating.setter
    def cicf_rating(self, cicf_rating):
        """Sets the cicf_rating of this ContentRating.

        The video's rating from the Commission de Contrôle des Films (Belgium).

        :param cicf_rating: The cicf_rating of this ContentRating.
        :type cicf_rating: str
        """
        allowed_values = ["cicfUnspecified", "cicfE", "cicfKtEa", "cicfKntEna", "cicfUnrated"]  # noqa: E501
        if cicf_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `cicf_rating` ({0}), must be one of {1}"
                .format(cicf_rating, allowed_values)
            )

        self._cicf_rating = cicf_rating

    @property
    def cna_rating(self):
        """Gets the cna_rating of this ContentRating.

        The video's rating from Romania's CONSILIUL NATIONAL AL AUDIOVIZUALULUI (CNA).

        :return: The cna_rating of this ContentRating.
        :rtype: str
        """
        return self._cna_rating

    @cna_rating.setter
    def cna_rating(self, cna_rating):
        """Sets the cna_rating of this ContentRating.

        The video's rating from Romania's CONSILIUL NATIONAL AL AUDIOVIZUALULUI (CNA).

        :param cna_rating: The cna_rating of this ContentRating.
        :type cna_rating: str
        """
        allowed_values = ["cnaUnspecified", "cnaAp", "cna12", "cna15", "cna18", "cna18plus", "cnaUnrated"]  # noqa: E501
        if cna_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `cna_rating` ({0}), must be one of {1}"
                .format(cna_rating, allowed_values)
            )

        self._cna_rating = cna_rating

    @property
    def cnc_rating(self):
        """Gets the cnc_rating of this ContentRating.

        Rating system in France - Commission de classification cinematographique

        :return: The cnc_rating of this ContentRating.
        :rtype: str
        """
        return self._cnc_rating

    @cnc_rating.setter
    def cnc_rating(self, cnc_rating):
        """Sets the cnc_rating of this ContentRating.

        Rating system in France - Commission de classification cinematographique

        :param cnc_rating: The cnc_rating of this ContentRating.
        :type cnc_rating: str
        """
        allowed_values = ["cncUnspecified", "cncT", "cnc10", "cnc12", "cnc16", "cnc18", "cncE", "cncInterdiction", "cncUnrated"]  # noqa: E501
        if cnc_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `cnc_rating` ({0}), must be one of {1}"
                .format(cnc_rating, allowed_values)
            )

        self._cnc_rating = cnc_rating

    @property
    def csa_rating(self):
        """Gets the csa_rating of this ContentRating.

        The video's rating from France's Conseil supérieur de l’audiovisuel, which rates broadcast content.

        :return: The csa_rating of this ContentRating.
        :rtype: str
        """
        return self._csa_rating

    @csa_rating.setter
    def csa_rating(self, csa_rating):
        """Sets the csa_rating of this ContentRating.

        The video's rating from France's Conseil supérieur de l’audiovisuel, which rates broadcast content.

        :param csa_rating: The csa_rating of this ContentRating.
        :type csa_rating: str
        """
        allowed_values = ["csaUnspecified", "csaT", "csa10", "csa12", "csa16", "csa18", "csaInterdiction", "csaUnrated"]  # noqa: E501
        if csa_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `csa_rating` ({0}), must be one of {1}"
                .format(csa_rating, allowed_values)
            )

        self._csa_rating = csa_rating

    @property
    def cscf_rating(self):
        """Gets the cscf_rating of this ContentRating.

        The video's rating from Luxembourg's Commission de surveillance de la classification des films (CSCF).

        :return: The cscf_rating of this ContentRating.
        :rtype: str
        """
        return self._cscf_rating

    @cscf_rating.setter
    def cscf_rating(self, cscf_rating):
        """Sets the cscf_rating of this ContentRating.

        The video's rating from Luxembourg's Commission de surveillance de la classification des films (CSCF).

        :param cscf_rating: The cscf_rating of this ContentRating.
        :type cscf_rating: str
        """
        allowed_values = ["cscfUnspecified", "cscfAl", "cscfA", "cscf6", "cscf9", "cscf12", "cscf16", "cscf18", "cscfUnrated"]  # noqa: E501
        if cscf_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `cscf_rating` ({0}), must be one of {1}"
                .format(cscf_rating, allowed_values)
            )

        self._cscf_rating = cscf_rating

    @property
    def czfilm_rating(self):
        """Gets the czfilm_rating of this ContentRating.

        The video's rating in the Czech Republic.

        :return: The czfilm_rating of this ContentRating.
        :rtype: str
        """
        return self._czfilm_rating

    @czfilm_rating.setter
    def czfilm_rating(self, czfilm_rating):
        """Sets the czfilm_rating of this ContentRating.

        The video's rating in the Czech Republic.

        :param czfilm_rating: The czfilm_rating of this ContentRating.
        :type czfilm_rating: str
        """
        allowed_values = ["czfilmUnspecified", "czfilmU", "czfilm12", "czfilm14", "czfilm18", "czfilmUnrated"]  # noqa: E501
        if czfilm_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `czfilm_rating` ({0}), must be one of {1}"
                .format(czfilm_rating, allowed_values)
            )

        self._czfilm_rating = czfilm_rating

    @property
    def djctq_rating(self):
        """Gets the djctq_rating of this ContentRating.

        The video's Departamento de Justiça, Classificação, Qualificação e Títulos (DJCQT - Brazil) rating.

        :return: The djctq_rating of this ContentRating.
        :rtype: str
        """
        return self._djctq_rating

    @djctq_rating.setter
    def djctq_rating(self, djctq_rating):
        """Sets the djctq_rating of this ContentRating.

        The video's Departamento de Justiça, Classificação, Qualificação e Títulos (DJCQT - Brazil) rating.

        :param djctq_rating: The djctq_rating of this ContentRating.
        :type djctq_rating: str
        """
        allowed_values = ["djctqUnspecified", "djctqL", "djctq10", "djctq12", "djctq14", "djctq16", "djctq18", "djctqEr", "djctqL10", "djctqL12", "djctqL14", "djctqL16", "djctqL18", "djctq1012", "djctq1014", "djctq1016", "djctq1018", "djctq1214", "djctq1216", "djctq1218", "djctq1416", "djctq1418", "djctq1618", "djctqUnrated"]  # noqa: E501
        if djctq_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `djctq_rating` ({0}), must be one of {1}"
                .format(djctq_rating, allowed_values)
            )

        self._djctq_rating = djctq_rating

    @property
    def djctq_rating_reasons(self):
        """Gets the djctq_rating_reasons of this ContentRating.

        Reasons that explain why the video received its DJCQT (Brazil) rating.

        :return: The djctq_rating_reasons of this ContentRating.
        :rtype: List[str]
        """
        return self._djctq_rating_reasons

    @djctq_rating_reasons.setter
    def djctq_rating_reasons(self, djctq_rating_reasons):
        """Sets the djctq_rating_reasons of this ContentRating.

        Reasons that explain why the video received its DJCQT (Brazil) rating.

        :param djctq_rating_reasons: The djctq_rating_reasons of this ContentRating.
        :type djctq_rating_reasons: List[str]
        """
        allowed_values = ["djctqRatingReasonUnspecified", "djctqViolence", "djctqExtremeViolence", "djctqSexualContent", "djctqNudity", "djctqSex", "djctqExplicitSex", "djctqDrugs", "djctqLegalDrugs", "djctqIllegalDrugs", "djctqInappropriateLanguage", "djctqCriminalActs", "djctqImpactingContent"]  # noqa: E501
        if not set(djctq_rating_reasons).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `djctq_rating_reasons` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(djctq_rating_reasons) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._djctq_rating_reasons = djctq_rating_reasons

    @property
    def ecbmct_rating(self):
        """Gets the ecbmct_rating of this ContentRating.

        Rating system in Turkey - Evaluation and Classification Board of the Ministry of Culture and Tourism

        :return: The ecbmct_rating of this ContentRating.
        :rtype: str
        """
        return self._ecbmct_rating

    @ecbmct_rating.setter
    def ecbmct_rating(self, ecbmct_rating):
        """Sets the ecbmct_rating of this ContentRating.

        Rating system in Turkey - Evaluation and Classification Board of the Ministry of Culture and Tourism

        :param ecbmct_rating: The ecbmct_rating of this ContentRating.
        :type ecbmct_rating: str
        """
        allowed_values = ["ecbmctUnspecified", "ecbmctG", "ecbmct7a", "ecbmct7plus", "ecbmct13a", "ecbmct13plus", "ecbmct15a", "ecbmct15plus", "ecbmct18plus", "ecbmctUnrated"]  # noqa: E501
        if ecbmct_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `ecbmct_rating` ({0}), must be one of {1}"
                .format(ecbmct_rating, allowed_values)
            )

        self._ecbmct_rating = ecbmct_rating

    @property
    def eefilm_rating(self):
        """Gets the eefilm_rating of this ContentRating.

        The video's rating in Estonia.

        :return: The eefilm_rating of this ContentRating.
        :rtype: str
        """
        return self._eefilm_rating

    @eefilm_rating.setter
    def eefilm_rating(self, eefilm_rating):
        """Sets the eefilm_rating of this ContentRating.

        The video's rating in Estonia.

        :param eefilm_rating: The eefilm_rating of this ContentRating.
        :type eefilm_rating: str
        """
        allowed_values = ["eefilmUnspecified", "eefilmPere", "eefilmL", "eefilmMs6", "eefilmK6", "eefilmMs12", "eefilmK12", "eefilmK14", "eefilmK16", "eefilmUnrated"]  # noqa: E501
        if eefilm_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `eefilm_rating` ({0}), must be one of {1}"
                .format(eefilm_rating, allowed_values)
            )

        self._eefilm_rating = eefilm_rating

    @property
    def egfilm_rating(self):
        """Gets the egfilm_rating of this ContentRating.

        The video's rating in Egypt.

        :return: The egfilm_rating of this ContentRating.
        :rtype: str
        """
        return self._egfilm_rating

    @egfilm_rating.setter
    def egfilm_rating(self, egfilm_rating):
        """Sets the egfilm_rating of this ContentRating.

        The video's rating in Egypt.

        :param egfilm_rating: The egfilm_rating of this ContentRating.
        :type egfilm_rating: str
        """
        allowed_values = ["egfilmUnspecified", "egfilmGn", "egfilm18", "egfilmBn", "egfilmUnrated"]  # noqa: E501
        if egfilm_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `egfilm_rating` ({0}), must be one of {1}"
                .format(egfilm_rating, allowed_values)
            )

        self._egfilm_rating = egfilm_rating

    @property
    def eirin_rating(self):
        """Gets the eirin_rating of this ContentRating.

        The video's Eirin (映倫) rating. Eirin is the Japanese rating system.

        :return: The eirin_rating of this ContentRating.
        :rtype: str
        """
        return self._eirin_rating

    @eirin_rating.setter
    def eirin_rating(self, eirin_rating):
        """Sets the eirin_rating of this ContentRating.

        The video's Eirin (映倫) rating. Eirin is the Japanese rating system.

        :param eirin_rating: The eirin_rating of this ContentRating.
        :type eirin_rating: str
        """
        allowed_values = ["eirinUnspecified", "eirinG", "eirinPg12", "eirinR15plus", "eirinR18plus", "eirinUnrated"]  # noqa: E501
        if eirin_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `eirin_rating` ({0}), must be one of {1}"
                .format(eirin_rating, allowed_values)
            )

        self._eirin_rating = eirin_rating

    @property
    def fcbm_rating(self):
        """Gets the fcbm_rating of this ContentRating.

        The video's rating from Malaysia's Film Censorship Board.

        :return: The fcbm_rating of this ContentRating.
        :rtype: str
        """
        return self._fcbm_rating

    @fcbm_rating.setter
    def fcbm_rating(self, fcbm_rating):
        """Sets the fcbm_rating of this ContentRating.

        The video's rating from Malaysia's Film Censorship Board.

        :param fcbm_rating: The fcbm_rating of this ContentRating.
        :type fcbm_rating: str
        """
        allowed_values = ["fcbmUnspecified", "fcbmU", "fcbmPg13", "fcbmP13", "fcbm18", "fcbm18sx", "fcbm18pa", "fcbm18sg", "fcbm18pl", "fcbmUnrated"]  # noqa: E501
        if fcbm_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `fcbm_rating` ({0}), must be one of {1}"
                .format(fcbm_rating, allowed_values)
            )

        self._fcbm_rating = fcbm_rating

    @property
    def fco_rating(self):
        """Gets the fco_rating of this ContentRating.

        The video's rating from Hong Kong's Office for Film, Newspaper and Article Administration.

        :return: The fco_rating of this ContentRating.
        :rtype: str
        """
        return self._fco_rating

    @fco_rating.setter
    def fco_rating(self, fco_rating):
        """Sets the fco_rating of this ContentRating.

        The video's rating from Hong Kong's Office for Film, Newspaper and Article Administration.

        :param fco_rating: The fco_rating of this ContentRating.
        :type fco_rating: str
        """
        allowed_values = ["fcoUnspecified", "fcoI", "fcoIia", "fcoIib", "fcoIi", "fcoIii", "fcoUnrated"]  # noqa: E501
        if fco_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `fco_rating` ({0}), must be one of {1}"
                .format(fco_rating, allowed_values)
            )

        self._fco_rating = fco_rating

    @property
    def fmoc_rating(self):
        """Gets the fmoc_rating of this ContentRating.

        This property has been deprecated. Use the contentDetails.contentRating.cncRating instead.

        :return: The fmoc_rating of this ContentRating.
        :rtype: str
        """
        return self._fmoc_rating

    @fmoc_rating.setter
    def fmoc_rating(self, fmoc_rating):
        """Sets the fmoc_rating of this ContentRating.

        This property has been deprecated. Use the contentDetails.contentRating.cncRating instead.

        :param fmoc_rating: The fmoc_rating of this ContentRating.
        :type fmoc_rating: str
        """
        allowed_values = ["fmocUnspecified", "fmocU", "fmoc10", "fmoc12", "fmoc16", "fmoc18", "fmocE", "fmocUnrated"]  # noqa: E501
        if fmoc_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `fmoc_rating` ({0}), must be one of {1}"
                .format(fmoc_rating, allowed_values)
            )

        self._fmoc_rating = fmoc_rating

    @property
    def fpb_rating(self):
        """Gets the fpb_rating of this ContentRating.

        The video's rating from South Africa's Film and Publication Board.

        :return: The fpb_rating of this ContentRating.
        :rtype: str
        """
        return self._fpb_rating

    @fpb_rating.setter
    def fpb_rating(self, fpb_rating):
        """Sets the fpb_rating of this ContentRating.

        The video's rating from South Africa's Film and Publication Board.

        :param fpb_rating: The fpb_rating of this ContentRating.
        :type fpb_rating: str
        """
        allowed_values = ["fpbUnspecified", "fpbA", "fpbPg", "fpb79Pg", "fpb1012Pg", "fpb13", "fpb16", "fpb18", "fpbX18", "fpbXx", "fpbUnrated", "fpb10"]  # noqa: E501
        if fpb_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `fpb_rating` ({0}), must be one of {1}"
                .format(fpb_rating, allowed_values)
            )

        self._fpb_rating = fpb_rating

    @property
    def fpb_rating_reasons(self):
        """Gets the fpb_rating_reasons of this ContentRating.

        Reasons that explain why the video received its FPB (South Africa) rating.

        :return: The fpb_rating_reasons of this ContentRating.
        :rtype: List[str]
        """
        return self._fpb_rating_reasons

    @fpb_rating_reasons.setter
    def fpb_rating_reasons(self, fpb_rating_reasons):
        """Sets the fpb_rating_reasons of this ContentRating.

        Reasons that explain why the video received its FPB (South Africa) rating.

        :param fpb_rating_reasons: The fpb_rating_reasons of this ContentRating.
        :type fpb_rating_reasons: List[str]
        """
        allowed_values = ["fpbRatingReasonUnspecified", "fpbBlasphemy", "fpbLanguage", "fpbNudity", "fpbPrejudice", "fpbSex", "fpbViolence", "fpbDrugs", "fpbSexualViolence", "fpbHorror", "fpbCriminalTechniques", "fpbImitativeActsTechniques"]  # noqa: E501
        if not set(fpb_rating_reasons).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `fpb_rating_reasons` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(fpb_rating_reasons) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._fpb_rating_reasons = fpb_rating_reasons

    @property
    def fsk_rating(self):
        """Gets the fsk_rating of this ContentRating.

        The video's Freiwillige Selbstkontrolle der Filmwirtschaft (FSK - Germany) rating.

        :return: The fsk_rating of this ContentRating.
        :rtype: str
        """
        return self._fsk_rating

    @fsk_rating.setter
    def fsk_rating(self, fsk_rating):
        """Sets the fsk_rating of this ContentRating.

        The video's Freiwillige Selbstkontrolle der Filmwirtschaft (FSK - Germany) rating.

        :param fsk_rating: The fsk_rating of this ContentRating.
        :type fsk_rating: str
        """
        allowed_values = ["fskUnspecified", "fsk0", "fsk6", "fsk12", "fsk16", "fsk18", "fskUnrated"]  # noqa: E501
        if fsk_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `fsk_rating` ({0}), must be one of {1}"
                .format(fsk_rating, allowed_values)
            )

        self._fsk_rating = fsk_rating

    @property
    def grfilm_rating(self):
        """Gets the grfilm_rating of this ContentRating.

        The video's rating in Greece.

        :return: The grfilm_rating of this ContentRating.
        :rtype: str
        """
        return self._grfilm_rating

    @grfilm_rating.setter
    def grfilm_rating(self, grfilm_rating):
        """Sets the grfilm_rating of this ContentRating.

        The video's rating in Greece.

        :param grfilm_rating: The grfilm_rating of this ContentRating.
        :type grfilm_rating: str
        """
        allowed_values = ["grfilmUnspecified", "grfilmK", "grfilmE", "grfilmK12", "grfilmK13", "grfilmK15", "grfilmK17", "grfilmK18", "grfilmUnrated"]  # noqa: E501
        if grfilm_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `grfilm_rating` ({0}), must be one of {1}"
                .format(grfilm_rating, allowed_values)
            )

        self._grfilm_rating = grfilm_rating

    @property
    def icaa_rating(self):
        """Gets the icaa_rating of this ContentRating.

        The video's Instituto de la Cinematografía y de las Artes Audiovisuales (ICAA - Spain) rating.

        :return: The icaa_rating of this ContentRating.
        :rtype: str
        """
        return self._icaa_rating

    @icaa_rating.setter
    def icaa_rating(self, icaa_rating):
        """Sets the icaa_rating of this ContentRating.

        The video's Instituto de la Cinematografía y de las Artes Audiovisuales (ICAA - Spain) rating.

        :param icaa_rating: The icaa_rating of this ContentRating.
        :type icaa_rating: str
        """
        allowed_values = ["icaaUnspecified", "icaaApta", "icaa7", "icaa12", "icaa13", "icaa16", "icaa18", "icaaX", "icaaUnrated"]  # noqa: E501
        if icaa_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `icaa_rating` ({0}), must be one of {1}"
                .format(icaa_rating, allowed_values)
            )

        self._icaa_rating = icaa_rating

    @property
    def ifco_rating(self):
        """Gets the ifco_rating of this ContentRating.

        The video's Irish Film Classification Office (IFCO - Ireland) rating. See the IFCO website for more information.

        :return: The ifco_rating of this ContentRating.
        :rtype: str
        """
        return self._ifco_rating

    @ifco_rating.setter
    def ifco_rating(self, ifco_rating):
        """Sets the ifco_rating of this ContentRating.

        The video's Irish Film Classification Office (IFCO - Ireland) rating. See the IFCO website for more information.

        :param ifco_rating: The ifco_rating of this ContentRating.
        :type ifco_rating: str
        """
        allowed_values = ["ifcoUnspecified", "ifcoG", "ifcoPg", "ifco12", "ifco12a", "ifco15", "ifco15a", "ifco16", "ifco18", "ifcoUnrated"]  # noqa: E501
        if ifco_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `ifco_rating` ({0}), must be one of {1}"
                .format(ifco_rating, allowed_values)
            )

        self._ifco_rating = ifco_rating

    @property
    def ilfilm_rating(self):
        """Gets the ilfilm_rating of this ContentRating.

        The video's rating in Israel.

        :return: The ilfilm_rating of this ContentRating.
        :rtype: str
        """
        return self._ilfilm_rating

    @ilfilm_rating.setter
    def ilfilm_rating(self, ilfilm_rating):
        """Sets the ilfilm_rating of this ContentRating.

        The video's rating in Israel.

        :param ilfilm_rating: The ilfilm_rating of this ContentRating.
        :type ilfilm_rating: str
        """
        allowed_values = ["ilfilmUnspecified", "ilfilmAa", "ilfilm12", "ilfilm14", "ilfilm16", "ilfilm18", "ilfilmUnrated"]  # noqa: E501
        if ilfilm_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `ilfilm_rating` ({0}), must be one of {1}"
                .format(ilfilm_rating, allowed_values)
            )

        self._ilfilm_rating = ilfilm_rating

    @property
    def incaa_rating(self):
        """Gets the incaa_rating of this ContentRating.

        The video's INCAA (Instituto Nacional de Cine y Artes Audiovisuales - Argentina) rating.

        :return: The incaa_rating of this ContentRating.
        :rtype: str
        """
        return self._incaa_rating

    @incaa_rating.setter
    def incaa_rating(self, incaa_rating):
        """Sets the incaa_rating of this ContentRating.

        The video's INCAA (Instituto Nacional de Cine y Artes Audiovisuales - Argentina) rating.

        :param incaa_rating: The incaa_rating of this ContentRating.
        :type incaa_rating: str
        """
        allowed_values = ["incaaUnspecified", "incaaAtp", "incaaSam13", "incaaSam16", "incaaSam18", "incaaC", "incaaUnrated"]  # noqa: E501
        if incaa_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `incaa_rating` ({0}), must be one of {1}"
                .format(incaa_rating, allowed_values)
            )

        self._incaa_rating = incaa_rating

    @property
    def kfcb_rating(self):
        """Gets the kfcb_rating of this ContentRating.

        The video's rating from the Kenya Film Classification Board.

        :return: The kfcb_rating of this ContentRating.
        :rtype: str
        """
        return self._kfcb_rating

    @kfcb_rating.setter
    def kfcb_rating(self, kfcb_rating):
        """Sets the kfcb_rating of this ContentRating.

        The video's rating from the Kenya Film Classification Board.

        :param kfcb_rating: The kfcb_rating of this ContentRating.
        :type kfcb_rating: str
        """
        allowed_values = ["kfcbUnspecified", "kfcbG", "kfcbPg", "kfcb16plus", "kfcbR", "kfcbUnrated"]  # noqa: E501
        if kfcb_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `kfcb_rating` ({0}), must be one of {1}"
                .format(kfcb_rating, allowed_values)
            )

        self._kfcb_rating = kfcb_rating

    @property
    def kijkwijzer_rating(self):
        """Gets the kijkwijzer_rating of this ContentRating.

        The video's NICAM/Kijkwijzer rating from the Nederlands Instituut voor de Classificatie van Audiovisuele Media (Netherlands).

        :return: The kijkwijzer_rating of this ContentRating.
        :rtype: str
        """
        return self._kijkwijzer_rating

    @kijkwijzer_rating.setter
    def kijkwijzer_rating(self, kijkwijzer_rating):
        """Sets the kijkwijzer_rating of this ContentRating.

        The video's NICAM/Kijkwijzer rating from the Nederlands Instituut voor de Classificatie van Audiovisuele Media (Netherlands).

        :param kijkwijzer_rating: The kijkwijzer_rating of this ContentRating.
        :type kijkwijzer_rating: str
        """
        allowed_values = ["kijkwijzerUnspecified", "kijkwijzerAl", "kijkwijzer6", "kijkwijzer9", "kijkwijzer12", "kijkwijzer16", "kijkwijzer18", "kijkwijzerUnrated"]  # noqa: E501
        if kijkwijzer_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `kijkwijzer_rating` ({0}), must be one of {1}"
                .format(kijkwijzer_rating, allowed_values)
            )

        self._kijkwijzer_rating = kijkwijzer_rating

    @property
    def kmrb_rating(self):
        """Gets the kmrb_rating of this ContentRating.

        The video's Korea Media Rating Board (영상물등급위원회) rating. The KMRB rates videos in South Korea.

        :return: The kmrb_rating of this ContentRating.
        :rtype: str
        """
        return self._kmrb_rating

    @kmrb_rating.setter
    def kmrb_rating(self, kmrb_rating):
        """Sets the kmrb_rating of this ContentRating.

        The video's Korea Media Rating Board (영상물등급위원회) rating. The KMRB rates videos in South Korea.

        :param kmrb_rating: The kmrb_rating of this ContentRating.
        :type kmrb_rating: str
        """
        allowed_values = ["kmrbUnspecified", "kmrbAll", "kmrb12plus", "kmrb15plus", "kmrbTeenr", "kmrbR", "kmrbUnrated"]  # noqa: E501
        if kmrb_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `kmrb_rating` ({0}), must be one of {1}"
                .format(kmrb_rating, allowed_values)
            )

        self._kmrb_rating = kmrb_rating

    @property
    def lsf_rating(self):
        """Gets the lsf_rating of this ContentRating.

        The video's rating from Indonesia's Lembaga Sensor Film.

        :return: The lsf_rating of this ContentRating.
        :rtype: str
        """
        return self._lsf_rating

    @lsf_rating.setter
    def lsf_rating(self, lsf_rating):
        """Sets the lsf_rating of this ContentRating.

        The video's rating from Indonesia's Lembaga Sensor Film.

        :param lsf_rating: The lsf_rating of this ContentRating.
        :type lsf_rating: str
        """
        allowed_values = ["lsfUnspecified", "lsfSu", "lsfA", "lsfBo", "lsf13", "lsfR", "lsf17", "lsfD", "lsf21", "lsfUnrated"]  # noqa: E501
        if lsf_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `lsf_rating` ({0}), must be one of {1}"
                .format(lsf_rating, allowed_values)
            )

        self._lsf_rating = lsf_rating

    @property
    def mccaa_rating(self):
        """Gets the mccaa_rating of this ContentRating.

        The video's rating from Malta's Film Age-Classification Board.

        :return: The mccaa_rating of this ContentRating.
        :rtype: str
        """
        return self._mccaa_rating

    @mccaa_rating.setter
    def mccaa_rating(self, mccaa_rating):
        """Sets the mccaa_rating of this ContentRating.

        The video's rating from Malta's Film Age-Classification Board.

        :param mccaa_rating: The mccaa_rating of this ContentRating.
        :type mccaa_rating: str
        """
        allowed_values = ["mccaaUnspecified", "mccaaU", "mccaaPg", "mccaa12a", "mccaa12", "mccaa14", "mccaa15", "mccaa16", "mccaa18", "mccaaUnrated"]  # noqa: E501
        if mccaa_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `mccaa_rating` ({0}), must be one of {1}"
                .format(mccaa_rating, allowed_values)
            )

        self._mccaa_rating = mccaa_rating

    @property
    def mccyp_rating(self):
        """Gets the mccyp_rating of this ContentRating.

        The video's rating from the Danish Film Institute's (Det Danske Filminstitut) Media Council for Children and Young People.

        :return: The mccyp_rating of this ContentRating.
        :rtype: str
        """
        return self._mccyp_rating

    @mccyp_rating.setter
    def mccyp_rating(self, mccyp_rating):
        """Sets the mccyp_rating of this ContentRating.

        The video's rating from the Danish Film Institute's (Det Danske Filminstitut) Media Council for Children and Young People.

        :param mccyp_rating: The mccyp_rating of this ContentRating.
        :type mccyp_rating: str
        """
        allowed_values = ["mccypUnspecified", "mccypA", "mccyp7", "mccyp11", "mccyp15", "mccypUnrated"]  # noqa: E501
        if mccyp_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `mccyp_rating` ({0}), must be one of {1}"
                .format(mccyp_rating, allowed_values)
            )

        self._mccyp_rating = mccyp_rating

    @property
    def mcst_rating(self):
        """Gets the mcst_rating of this ContentRating.

        The video's rating system for Vietnam - MCST

        :return: The mcst_rating of this ContentRating.
        :rtype: str
        """
        return self._mcst_rating

    @mcst_rating.setter
    def mcst_rating(self, mcst_rating):
        """Sets the mcst_rating of this ContentRating.

        The video's rating system for Vietnam - MCST

        :param mcst_rating: The mcst_rating of this ContentRating.
        :type mcst_rating: str
        """
        allowed_values = ["mcstUnspecified", "mcstP", "mcst0", "mcstC13", "mcstC16", "mcst16plus", "mcstC18", "mcstGPg", "mcstUnrated"]  # noqa: E501
        if mcst_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `mcst_rating` ({0}), must be one of {1}"
                .format(mcst_rating, allowed_values)
            )

        self._mcst_rating = mcst_rating

    @property
    def mda_rating(self):
        """Gets the mda_rating of this ContentRating.

        The video's rating from Singapore's Media Development Authority (MDA) and, specifically, it's Board of Film Censors (BFC).

        :return: The mda_rating of this ContentRating.
        :rtype: str
        """
        return self._mda_rating

    @mda_rating.setter
    def mda_rating(self, mda_rating):
        """Sets the mda_rating of this ContentRating.

        The video's rating from Singapore's Media Development Authority (MDA) and, specifically, it's Board of Film Censors (BFC).

        :param mda_rating: The mda_rating of this ContentRating.
        :type mda_rating: str
        """
        allowed_values = ["mdaUnspecified", "mdaG", "mdaPg", "mdaPg13", "mdaNc16", "mdaM18", "mdaR21", "mdaUnrated"]  # noqa: E501
        if mda_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `mda_rating` ({0}), must be one of {1}"
                .format(mda_rating, allowed_values)
            )

        self._mda_rating = mda_rating

    @property
    def medietilsynet_rating(self):
        """Gets the medietilsynet_rating of this ContentRating.

        The video's rating from Medietilsynet, the Norwegian Media Authority.

        :return: The medietilsynet_rating of this ContentRating.
        :rtype: str
        """
        return self._medietilsynet_rating

    @medietilsynet_rating.setter
    def medietilsynet_rating(self, medietilsynet_rating):
        """Sets the medietilsynet_rating of this ContentRating.

        The video's rating from Medietilsynet, the Norwegian Media Authority.

        :param medietilsynet_rating: The medietilsynet_rating of this ContentRating.
        :type medietilsynet_rating: str
        """
        allowed_values = ["medietilsynetUnspecified", "medietilsynetA", "medietilsynet6", "medietilsynet7", "medietilsynet9", "medietilsynet11", "medietilsynet12", "medietilsynet15", "medietilsynet18", "medietilsynetUnrated"]  # noqa: E501
        if medietilsynet_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `medietilsynet_rating` ({0}), must be one of {1}"
                .format(medietilsynet_rating, allowed_values)
            )

        self._medietilsynet_rating = medietilsynet_rating

    @property
    def meku_rating(self):
        """Gets the meku_rating of this ContentRating.

        The video's rating from Finland's Kansallinen Audiovisuaalinen Instituutti (National Audiovisual Institute).

        :return: The meku_rating of this ContentRating.
        :rtype: str
        """
        return self._meku_rating

    @meku_rating.setter
    def meku_rating(self, meku_rating):
        """Sets the meku_rating of this ContentRating.

        The video's rating from Finland's Kansallinen Audiovisuaalinen Instituutti (National Audiovisual Institute).

        :param meku_rating: The meku_rating of this ContentRating.
        :type meku_rating: str
        """
        allowed_values = ["mekuUnspecified", "mekuS", "meku7", "meku12", "meku16", "meku18", "mekuUnrated"]  # noqa: E501
        if meku_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `meku_rating` ({0}), must be one of {1}"
                .format(meku_rating, allowed_values)
            )

        self._meku_rating = meku_rating

    @property
    def mena_mpaa_rating(self):
        """Gets the mena_mpaa_rating of this ContentRating.

        The rating system for MENA countries, a clone of MPAA. It is needed to prevent titles go live w/o additional QC check, since some of them can be inappropriate for the countries at all. See b/33408548 for more details.

        :return: The mena_mpaa_rating of this ContentRating.
        :rtype: str
        """
        return self._mena_mpaa_rating

    @mena_mpaa_rating.setter
    def mena_mpaa_rating(self, mena_mpaa_rating):
        """Sets the mena_mpaa_rating of this ContentRating.

        The rating system for MENA countries, a clone of MPAA. It is needed to prevent titles go live w/o additional QC check, since some of them can be inappropriate for the countries at all. See b/33408548 for more details.

        :param mena_mpaa_rating: The mena_mpaa_rating of this ContentRating.
        :type mena_mpaa_rating: str
        """
        allowed_values = ["menaMpaaUnspecified", "menaMpaaG", "menaMpaaPg", "menaMpaaPg13", "menaMpaaR", "menaMpaaUnrated"]  # noqa: E501
        if mena_mpaa_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `mena_mpaa_rating` ({0}), must be one of {1}"
                .format(mena_mpaa_rating, allowed_values)
            )

        self._mena_mpaa_rating = mena_mpaa_rating

    @property
    def mibac_rating(self):
        """Gets the mibac_rating of this ContentRating.

        The video's rating from the Ministero dei Beni e delle Attività Culturali e del Turismo (Italy).

        :return: The mibac_rating of this ContentRating.
        :rtype: str
        """
        return self._mibac_rating

    @mibac_rating.setter
    def mibac_rating(self, mibac_rating):
        """Sets the mibac_rating of this ContentRating.

        The video's rating from the Ministero dei Beni e delle Attività Culturali e del Turismo (Italy).

        :param mibac_rating: The mibac_rating of this ContentRating.
        :type mibac_rating: str
        """
        allowed_values = ["mibacUnspecified", "mibacT", "mibacVap", "mibacVm6", "mibacVm12", "mibacVm14", "mibacVm16", "mibacVm18", "mibacUnrated"]  # noqa: E501
        if mibac_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `mibac_rating` ({0}), must be one of {1}"
                .format(mibac_rating, allowed_values)
            )

        self._mibac_rating = mibac_rating

    @property
    def moc_rating(self):
        """Gets the moc_rating of this ContentRating.

        The video's Ministerio de Cultura (Colombia) rating.

        :return: The moc_rating of this ContentRating.
        :rtype: str
        """
        return self._moc_rating

    @moc_rating.setter
    def moc_rating(self, moc_rating):
        """Sets the moc_rating of this ContentRating.

        The video's Ministerio de Cultura (Colombia) rating.

        :param moc_rating: The moc_rating of this ContentRating.
        :type moc_rating: str
        """
        allowed_values = ["mocUnspecified", "mocE", "mocT", "moc7", "moc12", "moc15", "moc18", "mocX", "mocBanned", "mocUnrated"]  # noqa: E501
        if moc_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `moc_rating` ({0}), must be one of {1}"
                .format(moc_rating, allowed_values)
            )

        self._moc_rating = moc_rating

    @property
    def moctw_rating(self):
        """Gets the moctw_rating of this ContentRating.

        The video's rating from Taiwan's Ministry of Culture (文化部).

        :return: The moctw_rating of this ContentRating.
        :rtype: str
        """
        return self._moctw_rating

    @moctw_rating.setter
    def moctw_rating(self, moctw_rating):
        """Sets the moctw_rating of this ContentRating.

        The video's rating from Taiwan's Ministry of Culture (文化部).

        :param moctw_rating: The moctw_rating of this ContentRating.
        :type moctw_rating: str
        """
        allowed_values = ["moctwUnspecified", "moctwG", "moctwP", "moctwPg", "moctwR", "moctwUnrated", "moctwR12", "moctwR15"]  # noqa: E501
        if moctw_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `moctw_rating` ({0}), must be one of {1}"
                .format(moctw_rating, allowed_values)
            )

        self._moctw_rating = moctw_rating

    @property
    def mpaa_rating(self):
        """Gets the mpaa_rating of this ContentRating.

        The video's Motion Picture Association of America (MPAA) rating.

        :return: The mpaa_rating of this ContentRating.
        :rtype: str
        """
        return self._mpaa_rating

    @mpaa_rating.setter
    def mpaa_rating(self, mpaa_rating):
        """Sets the mpaa_rating of this ContentRating.

        The video's Motion Picture Association of America (MPAA) rating.

        :param mpaa_rating: The mpaa_rating of this ContentRating.
        :type mpaa_rating: str
        """
        allowed_values = ["mpaaUnspecified", "mpaaG", "mpaaPg", "mpaaPg13", "mpaaR", "mpaaNc17", "mpaaX", "mpaaUnrated"]  # noqa: E501
        if mpaa_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `mpaa_rating` ({0}), must be one of {1}"
                .format(mpaa_rating, allowed_values)
            )

        self._mpaa_rating = mpaa_rating

    @property
    def mpaat_rating(self):
        """Gets the mpaat_rating of this ContentRating.

        The rating system for trailer, DVD, and Ad in the US. See http://movielabs.com/md/ratings/v2.3/html/US_MPAAT_Ratings.html.

        :return: The mpaat_rating of this ContentRating.
        :rtype: str
        """
        return self._mpaat_rating

    @mpaat_rating.setter
    def mpaat_rating(self, mpaat_rating):
        """Sets the mpaat_rating of this ContentRating.

        The rating system for trailer, DVD, and Ad in the US. See http://movielabs.com/md/ratings/v2.3/html/US_MPAAT_Ratings.html.

        :param mpaat_rating: The mpaat_rating of this ContentRating.
        :type mpaat_rating: str
        """
        allowed_values = ["mpaatUnspecified", "mpaatGb", "mpaatRb"]  # noqa: E501
        if mpaat_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `mpaat_rating` ({0}), must be one of {1}"
                .format(mpaat_rating, allowed_values)
            )

        self._mpaat_rating = mpaat_rating

    @property
    def mtrcb_rating(self):
        """Gets the mtrcb_rating of this ContentRating.

        The video's rating from the Movie and Television Review and Classification Board (Philippines).

        :return: The mtrcb_rating of this ContentRating.
        :rtype: str
        """
        return self._mtrcb_rating

    @mtrcb_rating.setter
    def mtrcb_rating(self, mtrcb_rating):
        """Sets the mtrcb_rating of this ContentRating.

        The video's rating from the Movie and Television Review and Classification Board (Philippines).

        :param mtrcb_rating: The mtrcb_rating of this ContentRating.
        :type mtrcb_rating: str
        """
        allowed_values = ["mtrcbUnspecified", "mtrcbG", "mtrcbPg", "mtrcbR13", "mtrcbR16", "mtrcbR18", "mtrcbX", "mtrcbUnrated"]  # noqa: E501
        if mtrcb_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `mtrcb_rating` ({0}), must be one of {1}"
                .format(mtrcb_rating, allowed_values)
            )

        self._mtrcb_rating = mtrcb_rating

    @property
    def nbc_rating(self):
        """Gets the nbc_rating of this ContentRating.

        The video's rating from the Maldives National Bureau of Classification.

        :return: The nbc_rating of this ContentRating.
        :rtype: str
        """
        return self._nbc_rating

    @nbc_rating.setter
    def nbc_rating(self, nbc_rating):
        """Sets the nbc_rating of this ContentRating.

        The video's rating from the Maldives National Bureau of Classification.

        :param nbc_rating: The nbc_rating of this ContentRating.
        :type nbc_rating: str
        """
        allowed_values = ["nbcUnspecified", "nbcG", "nbcPg", "nbc12plus", "nbc15plus", "nbc18plus", "nbc18plusr", "nbcPu", "nbcUnrated"]  # noqa: E501
        if nbc_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `nbc_rating` ({0}), must be one of {1}"
                .format(nbc_rating, allowed_values)
            )

        self._nbc_rating = nbc_rating

    @property
    def nbcpl_rating(self):
        """Gets the nbcpl_rating of this ContentRating.

        The video's rating in Poland.

        :return: The nbcpl_rating of this ContentRating.
        :rtype: str
        """
        return self._nbcpl_rating

    @nbcpl_rating.setter
    def nbcpl_rating(self, nbcpl_rating):
        """Sets the nbcpl_rating of this ContentRating.

        The video's rating in Poland.

        :param nbcpl_rating: The nbcpl_rating of this ContentRating.
        :type nbcpl_rating: str
        """
        allowed_values = ["nbcplUnspecified", "nbcplI", "nbcplIi", "nbcplIii", "nbcplIv", "nbcpl18plus", "nbcplUnrated"]  # noqa: E501
        if nbcpl_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `nbcpl_rating` ({0}), must be one of {1}"
                .format(nbcpl_rating, allowed_values)
            )

        self._nbcpl_rating = nbcpl_rating

    @property
    def nfrc_rating(self):
        """Gets the nfrc_rating of this ContentRating.

        The video's rating from the Bulgarian National Film Center.

        :return: The nfrc_rating of this ContentRating.
        :rtype: str
        """
        return self._nfrc_rating

    @nfrc_rating.setter
    def nfrc_rating(self, nfrc_rating):
        """Sets the nfrc_rating of this ContentRating.

        The video's rating from the Bulgarian National Film Center.

        :param nfrc_rating: The nfrc_rating of this ContentRating.
        :type nfrc_rating: str
        """
        allowed_values = ["nfrcUnspecified", "nfrcA", "nfrcB", "nfrcC", "nfrcD", "nfrcX", "nfrcUnrated"]  # noqa: E501
        if nfrc_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `nfrc_rating` ({0}), must be one of {1}"
                .format(nfrc_rating, allowed_values)
            )

        self._nfrc_rating = nfrc_rating

    @property
    def nfvcb_rating(self):
        """Gets the nfvcb_rating of this ContentRating.

        The video's rating from Nigeria's National Film and Video Censors Board.

        :return: The nfvcb_rating of this ContentRating.
        :rtype: str
        """
        return self._nfvcb_rating

    @nfvcb_rating.setter
    def nfvcb_rating(self, nfvcb_rating):
        """Sets the nfvcb_rating of this ContentRating.

        The video's rating from Nigeria's National Film and Video Censors Board.

        :param nfvcb_rating: The nfvcb_rating of this ContentRating.
        :type nfvcb_rating: str
        """
        allowed_values = ["nfvcbUnspecified", "nfvcbG", "nfvcbPg", "nfvcb12", "nfvcb12a", "nfvcb15", "nfvcb18", "nfvcbRe", "nfvcbUnrated"]  # noqa: E501
        if nfvcb_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `nfvcb_rating` ({0}), must be one of {1}"
                .format(nfvcb_rating, allowed_values)
            )

        self._nfvcb_rating = nfvcb_rating

    @property
    def nkclv_rating(self):
        """Gets the nkclv_rating of this ContentRating.

        The video's rating from the Nacionãlais Kino centrs (National Film Centre of Latvia).

        :return: The nkclv_rating of this ContentRating.
        :rtype: str
        """
        return self._nkclv_rating

    @nkclv_rating.setter
    def nkclv_rating(self, nkclv_rating):
        """Sets the nkclv_rating of this ContentRating.

        The video's rating from the Nacionãlais Kino centrs (National Film Centre of Latvia).

        :param nkclv_rating: The nkclv_rating of this ContentRating.
        :type nkclv_rating: str
        """
        allowed_values = ["nkclvUnspecified", "nkclvU", "nkclv7plus", "nkclv12plus", "nkclv16plus", "nkclv18plus", "nkclvUnrated"]  # noqa: E501
        if nkclv_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `nkclv_rating` ({0}), must be one of {1}"
                .format(nkclv_rating, allowed_values)
            )

        self._nkclv_rating = nkclv_rating

    @property
    def nmc_rating(self):
        """Gets the nmc_rating of this ContentRating.

        The National Media Council ratings system for United Arab Emirates.

        :return: The nmc_rating of this ContentRating.
        :rtype: str
        """
        return self._nmc_rating

    @nmc_rating.setter
    def nmc_rating(self, nmc_rating):
        """Sets the nmc_rating of this ContentRating.

        The National Media Council ratings system for United Arab Emirates.

        :param nmc_rating: The nmc_rating of this ContentRating.
        :type nmc_rating: str
        """
        allowed_values = ["nmcUnspecified", "nmcG", "nmcPg", "nmcPg13", "nmcPg15", "nmc15plus", "nmc18plus", "nmc18tc", "nmcUnrated"]  # noqa: E501
        if nmc_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `nmc_rating` ({0}), must be one of {1}"
                .format(nmc_rating, allowed_values)
            )

        self._nmc_rating = nmc_rating

    @property
    def oflc_rating(self):
        """Gets the oflc_rating of this ContentRating.

        The video's Office of Film and Literature Classification (OFLC - New Zealand) rating.

        :return: The oflc_rating of this ContentRating.
        :rtype: str
        """
        return self._oflc_rating

    @oflc_rating.setter
    def oflc_rating(self, oflc_rating):
        """Sets the oflc_rating of this ContentRating.

        The video's Office of Film and Literature Classification (OFLC - New Zealand) rating.

        :param oflc_rating: The oflc_rating of this ContentRating.
        :type oflc_rating: str
        """
        allowed_values = ["oflcUnspecified", "oflcG", "oflcPg", "oflcM", "oflcR13", "oflcR15", "oflcR16", "oflcR18", "oflcUnrated", "oflcRp13", "oflcRp16", "oflcRp18"]  # noqa: E501
        if oflc_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `oflc_rating` ({0}), must be one of {1}"
                .format(oflc_rating, allowed_values)
            )

        self._oflc_rating = oflc_rating

    @property
    def pefilm_rating(self):
        """Gets the pefilm_rating of this ContentRating.

        The video's rating in Peru.

        :return: The pefilm_rating of this ContentRating.
        :rtype: str
        """
        return self._pefilm_rating

    @pefilm_rating.setter
    def pefilm_rating(self, pefilm_rating):
        """Sets the pefilm_rating of this ContentRating.

        The video's rating in Peru.

        :param pefilm_rating: The pefilm_rating of this ContentRating.
        :type pefilm_rating: str
        """
        allowed_values = ["pefilmUnspecified", "pefilmPt", "pefilmPg", "pefilm14", "pefilm18", "pefilmUnrated"]  # noqa: E501
        if pefilm_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `pefilm_rating` ({0}), must be one of {1}"
                .format(pefilm_rating, allowed_values)
            )

        self._pefilm_rating = pefilm_rating

    @property
    def rcnof_rating(self):
        """Gets the rcnof_rating of this ContentRating.

        The video's rating from the Hungarian Nemzeti Filmiroda, the Rating Committee of the National Office of Film.

        :return: The rcnof_rating of this ContentRating.
        :rtype: str
        """
        return self._rcnof_rating

    @rcnof_rating.setter
    def rcnof_rating(self, rcnof_rating):
        """Sets the rcnof_rating of this ContentRating.

        The video's rating from the Hungarian Nemzeti Filmiroda, the Rating Committee of the National Office of Film.

        :param rcnof_rating: The rcnof_rating of this ContentRating.
        :type rcnof_rating: str
        """
        allowed_values = ["rcnofUnspecified", "rcnofI", "rcnofIi", "rcnofIii", "rcnofIv", "rcnofV", "rcnofVi", "rcnofUnrated"]  # noqa: E501
        if rcnof_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `rcnof_rating` ({0}), must be one of {1}"
                .format(rcnof_rating, allowed_values)
            )

        self._rcnof_rating = rcnof_rating

    @property
    def resorteviolencia_rating(self):
        """Gets the resorteviolencia_rating of this ContentRating.

        The video's rating in Venezuela.

        :return: The resorteviolencia_rating of this ContentRating.
        :rtype: str
        """
        return self._resorteviolencia_rating

    @resorteviolencia_rating.setter
    def resorteviolencia_rating(self, resorteviolencia_rating):
        """Sets the resorteviolencia_rating of this ContentRating.

        The video's rating in Venezuela.

        :param resorteviolencia_rating: The resorteviolencia_rating of this ContentRating.
        :type resorteviolencia_rating: str
        """
        allowed_values = ["resorteviolenciaUnspecified", "resorteviolenciaA", "resorteviolenciaB", "resorteviolenciaC", "resorteviolenciaD", "resorteviolenciaE", "resorteviolenciaUnrated"]  # noqa: E501
        if resorteviolencia_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `resorteviolencia_rating` ({0}), must be one of {1}"
                .format(resorteviolencia_rating, allowed_values)
            )

        self._resorteviolencia_rating = resorteviolencia_rating

    @property
    def rtc_rating(self):
        """Gets the rtc_rating of this ContentRating.

        The video's General Directorate of Radio, Television and Cinematography (Mexico) rating.

        :return: The rtc_rating of this ContentRating.
        :rtype: str
        """
        return self._rtc_rating

    @rtc_rating.setter
    def rtc_rating(self, rtc_rating):
        """Sets the rtc_rating of this ContentRating.

        The video's General Directorate of Radio, Television and Cinematography (Mexico) rating.

        :param rtc_rating: The rtc_rating of this ContentRating.
        :type rtc_rating: str
        """
        allowed_values = ["rtcUnspecified", "rtcAa", "rtcA", "rtcB", "rtcB15", "rtcC", "rtcD", "rtcUnrated"]  # noqa: E501
        if rtc_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `rtc_rating` ({0}), must be one of {1}"
                .format(rtc_rating, allowed_values)
            )

        self._rtc_rating = rtc_rating

    @property
    def rte_rating(self):
        """Gets the rte_rating of this ContentRating.

        The video's rating from Ireland's Raidió Teilifís Éireann.

        :return: The rte_rating of this ContentRating.
        :rtype: str
        """
        return self._rte_rating

    @rte_rating.setter
    def rte_rating(self, rte_rating):
        """Sets the rte_rating of this ContentRating.

        The video's rating from Ireland's Raidió Teilifís Éireann.

        :param rte_rating: The rte_rating of this ContentRating.
        :type rte_rating: str
        """
        allowed_values = ["rteUnspecified", "rteGa", "rteCh", "rtePs", "rteMa", "rteUnrated"]  # noqa: E501
        if rte_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `rte_rating` ({0}), must be one of {1}"
                .format(rte_rating, allowed_values)
            )

        self._rte_rating = rte_rating

    @property
    def russia_rating(self):
        """Gets the russia_rating of this ContentRating.

        The video's National Film Registry of the Russian Federation (MKRF - Russia) rating.

        :return: The russia_rating of this ContentRating.
        :rtype: str
        """
        return self._russia_rating

    @russia_rating.setter
    def russia_rating(self, russia_rating):
        """Sets the russia_rating of this ContentRating.

        The video's National Film Registry of the Russian Federation (MKRF - Russia) rating.

        :param russia_rating: The russia_rating of this ContentRating.
        :type russia_rating: str
        """
        allowed_values = ["russiaUnspecified", "russia0", "russia6", "russia12", "russia16", "russia18", "russiaUnrated"]  # noqa: E501
        if russia_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `russia_rating` ({0}), must be one of {1}"
                .format(russia_rating, allowed_values)
            )

        self._russia_rating = russia_rating

    @property
    def skfilm_rating(self):
        """Gets the skfilm_rating of this ContentRating.

        The video's rating in Slovakia.

        :return: The skfilm_rating of this ContentRating.
        :rtype: str
        """
        return self._skfilm_rating

    @skfilm_rating.setter
    def skfilm_rating(self, skfilm_rating):
        """Sets the skfilm_rating of this ContentRating.

        The video's rating in Slovakia.

        :param skfilm_rating: The skfilm_rating of this ContentRating.
        :type skfilm_rating: str
        """
        allowed_values = ["skfilmUnspecified", "skfilmG", "skfilmP2", "skfilmP5", "skfilmP8", "skfilmUnrated"]  # noqa: E501
        if skfilm_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `skfilm_rating` ({0}), must be one of {1}"
                .format(skfilm_rating, allowed_values)
            )

        self._skfilm_rating = skfilm_rating

    @property
    def smais_rating(self):
        """Gets the smais_rating of this ContentRating.

        The video's rating in Iceland.

        :return: The smais_rating of this ContentRating.
        :rtype: str
        """
        return self._smais_rating

    @smais_rating.setter
    def smais_rating(self, smais_rating):
        """Sets the smais_rating of this ContentRating.

        The video's rating in Iceland.

        :param smais_rating: The smais_rating of this ContentRating.
        :type smais_rating: str
        """
        allowed_values = ["smaisUnspecified", "smaisL", "smais7", "smais12", "smais14", "smais16", "smais18", "smaisUnrated"]  # noqa: E501
        if smais_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `smais_rating` ({0}), must be one of {1}"
                .format(smais_rating, allowed_values)
            )

        self._smais_rating = smais_rating

    @property
    def smsa_rating(self):
        """Gets the smsa_rating of this ContentRating.

        The video's rating from Statens medieråd (Sweden's National Media Council).

        :return: The smsa_rating of this ContentRating.
        :rtype: str
        """
        return self._smsa_rating

    @smsa_rating.setter
    def smsa_rating(self, smsa_rating):
        """Sets the smsa_rating of this ContentRating.

        The video's rating from Statens medieråd (Sweden's National Media Council).

        :param smsa_rating: The smsa_rating of this ContentRating.
        :type smsa_rating: str
        """
        allowed_values = ["smsaUnspecified", "smsaA", "smsa7", "smsa11", "smsa15", "smsaUnrated"]  # noqa: E501
        if smsa_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `smsa_rating` ({0}), must be one of {1}"
                .format(smsa_rating, allowed_values)
            )

        self._smsa_rating = smsa_rating

    @property
    def tvpg_rating(self):
        """Gets the tvpg_rating of this ContentRating.

        The video's TV Parental Guidelines (TVPG) rating.

        :return: The tvpg_rating of this ContentRating.
        :rtype: str
        """
        return self._tvpg_rating

    @tvpg_rating.setter
    def tvpg_rating(self, tvpg_rating):
        """Sets the tvpg_rating of this ContentRating.

        The video's TV Parental Guidelines (TVPG) rating.

        :param tvpg_rating: The tvpg_rating of this ContentRating.
        :type tvpg_rating: str
        """
        allowed_values = ["tvpgUnspecified", "tvpgY", "tvpgY7", "tvpgY7Fv", "tvpgG", "tvpgPg", "pg14", "tvpgMa", "tvpgUnrated"]  # noqa: E501
        if tvpg_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `tvpg_rating` ({0}), must be one of {1}"
                .format(tvpg_rating, allowed_values)
            )

        self._tvpg_rating = tvpg_rating

    @property
    def yt_rating(self):
        """Gets the yt_rating of this ContentRating.

        A rating that YouTube uses to identify age-restricted content.

        :return: The yt_rating of this ContentRating.
        :rtype: str
        """
        return self._yt_rating

    @yt_rating.setter
    def yt_rating(self, yt_rating):
        """Sets the yt_rating of this ContentRating.

        A rating that YouTube uses to identify age-restricted content.

        :param yt_rating: The yt_rating of this ContentRating.
        :type yt_rating: str
        """
        allowed_values = ["ytUnspecified", "ytAgeRestricted"]  # noqa: E501
        if yt_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `yt_rating` ({0}), must be one of {1}"
                .format(yt_rating, allowed_values)
            )

        self._yt_rating = yt_rating
