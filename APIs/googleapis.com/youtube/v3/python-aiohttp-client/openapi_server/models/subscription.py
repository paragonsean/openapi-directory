# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.subscription_content_details import SubscriptionContentDetails
from openapi_server.models.subscription_snippet import SubscriptionSnippet
from openapi_server.models.subscription_subscriber_snippet import SubscriptionSubscriberSnippet
from openapi_server import util


class Subscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_details: SubscriptionContentDetails=None, etag: str=None, id: str=None, kind: str='youtube#subscription', snippet: SubscriptionSnippet=None, subscriber_snippet: SubscriptionSubscriberSnippet=None):
        """Subscription - a model defined in OpenAPI

        :param content_details: The content_details of this Subscription.
        :param etag: The etag of this Subscription.
        :param id: The id of this Subscription.
        :param kind: The kind of this Subscription.
        :param snippet: The snippet of this Subscription.
        :param subscriber_snippet: The subscriber_snippet of this Subscription.
        """
        self.openapi_types = {
            'content_details': SubscriptionContentDetails,
            'etag': str,
            'id': str,
            'kind': str,
            'snippet': SubscriptionSnippet,
            'subscriber_snippet': SubscriptionSubscriberSnippet
        }

        self.attribute_map = {
            'content_details': 'contentDetails',
            'etag': 'etag',
            'id': 'id',
            'kind': 'kind',
            'snippet': 'snippet',
            'subscriber_snippet': 'subscriberSnippet'
        }

        self._content_details = content_details
        self._etag = etag
        self._id = id
        self._kind = kind
        self._snippet = snippet
        self._subscriber_snippet = subscriber_snippet

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Subscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Subscription of this Subscription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_details(self):
        """Gets the content_details of this Subscription.


        :return: The content_details of this Subscription.
        :rtype: SubscriptionContentDetails
        """
        return self._content_details

    @content_details.setter
    def content_details(self, content_details):
        """Sets the content_details of this Subscription.


        :param content_details: The content_details of this Subscription.
        :type content_details: SubscriptionContentDetails
        """

        self._content_details = content_details

    @property
    def etag(self):
        """Gets the etag of this Subscription.

        Etag of this resource.

        :return: The etag of this Subscription.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Subscription.

        Etag of this resource.

        :param etag: The etag of this Subscription.
        :type etag: str
        """

        self._etag = etag

    @property
    def id(self):
        """Gets the id of this Subscription.

        The ID that YouTube uses to uniquely identify the subscription.

        :return: The id of this Subscription.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Subscription.

        The ID that YouTube uses to uniquely identify the subscription.

        :param id: The id of this Subscription.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this Subscription.

        Identifies what kind of resource this is. Value: the fixed string \"youtube#subscription\".

        :return: The kind of this Subscription.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Subscription.

        Identifies what kind of resource this is. Value: the fixed string \"youtube#subscription\".

        :param kind: The kind of this Subscription.
        :type kind: str
        """

        self._kind = kind

    @property
    def snippet(self):
        """Gets the snippet of this Subscription.


        :return: The snippet of this Subscription.
        :rtype: SubscriptionSnippet
        """
        return self._snippet

    @snippet.setter
    def snippet(self, snippet):
        """Sets the snippet of this Subscription.


        :param snippet: The snippet of this Subscription.
        :type snippet: SubscriptionSnippet
        """

        self._snippet = snippet

    @property
    def subscriber_snippet(self):
        """Gets the subscriber_snippet of this Subscription.


        :return: The subscriber_snippet of this Subscription.
        :rtype: SubscriptionSubscriberSnippet
        """
        return self._subscriber_snippet

    @subscriber_snippet.setter
    def subscriber_snippet(self, subscriber_snippet):
        """Sets the subscriber_snippet of this Subscription.


        :param subscriber_snippet: The subscriber_snippet of this Subscription.
        :type subscriber_snippet: SubscriptionSubscriberSnippet
        """

        self._subscriber_snippet = subscriber_snippet
