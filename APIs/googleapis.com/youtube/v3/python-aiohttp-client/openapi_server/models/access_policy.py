# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccessPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed: bool=None, exception: List[str]=None):
        """AccessPolicy - a model defined in OpenAPI

        :param allowed: The allowed of this AccessPolicy.
        :param exception: The exception of this AccessPolicy.
        """
        self.openapi_types = {
            'allowed': bool,
            'exception': List[str]
        }

        self.attribute_map = {
            'allowed': 'allowed',
            'exception': 'exception'
        }

        self._allowed = allowed
        self._exception = exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccessPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccessPolicy of this AccessPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed(self):
        """Gets the allowed of this AccessPolicy.

        The value of allowed indicates whether the access to the policy is allowed or denied by default.

        :return: The allowed of this AccessPolicy.
        :rtype: bool
        """
        return self._allowed

    @allowed.setter
    def allowed(self, allowed):
        """Sets the allowed of this AccessPolicy.

        The value of allowed indicates whether the access to the policy is allowed or denied by default.

        :param allowed: The allowed of this AccessPolicy.
        :type allowed: bool
        """

        self._allowed = allowed

    @property
    def exception(self):
        """Gets the exception of this AccessPolicy.

        A list of region codes that identify countries where the default policy do not apply.

        :return: The exception of this AccessPolicy.
        :rtype: List[str]
        """
        return self._exception

    @exception.setter
    def exception(self, exception):
        """Sets the exception of this AccessPolicy.

        A list of region codes that identify countries where the default policy do not apply.

        :param exception: The exception of this AccessPolicy.
        :type exception: List[str]
        """

        self._exception = exception
