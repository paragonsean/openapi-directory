# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.comment import Comment
from openapi_server import util


class CommentThreadSnippet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, can_reply: bool=None, channel_id: str=None, is_public: bool=None, top_level_comment: Comment=None, total_reply_count: int=None, video_id: str=None):
        """CommentThreadSnippet - a model defined in OpenAPI

        :param can_reply: The can_reply of this CommentThreadSnippet.
        :param channel_id: The channel_id of this CommentThreadSnippet.
        :param is_public: The is_public of this CommentThreadSnippet.
        :param top_level_comment: The top_level_comment of this CommentThreadSnippet.
        :param total_reply_count: The total_reply_count of this CommentThreadSnippet.
        :param video_id: The video_id of this CommentThreadSnippet.
        """
        self.openapi_types = {
            'can_reply': bool,
            'channel_id': str,
            'is_public': bool,
            'top_level_comment': Comment,
            'total_reply_count': int,
            'video_id': str
        }

        self.attribute_map = {
            'can_reply': 'canReply',
            'channel_id': 'channelId',
            'is_public': 'isPublic',
            'top_level_comment': 'topLevelComment',
            'total_reply_count': 'totalReplyCount',
            'video_id': 'videoId'
        }

        self._can_reply = can_reply
        self._channel_id = channel_id
        self._is_public = is_public
        self._top_level_comment = top_level_comment
        self._total_reply_count = total_reply_count
        self._video_id = video_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommentThreadSnippet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommentThreadSnippet of this CommentThreadSnippet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def can_reply(self):
        """Gets the can_reply of this CommentThreadSnippet.

        Whether the current viewer of the thread can reply to it. This is viewer specific - other viewers may see a different value for this field.

        :return: The can_reply of this CommentThreadSnippet.
        :rtype: bool
        """
        return self._can_reply

    @can_reply.setter
    def can_reply(self, can_reply):
        """Sets the can_reply of this CommentThreadSnippet.

        Whether the current viewer of the thread can reply to it. This is viewer specific - other viewers may see a different value for this field.

        :param can_reply: The can_reply of this CommentThreadSnippet.
        :type can_reply: bool
        """

        self._can_reply = can_reply

    @property
    def channel_id(self):
        """Gets the channel_id of this CommentThreadSnippet.

        The YouTube channel the comments in the thread refer to or the channel with the video the comments refer to. If video_id isn't set the comments refer to the channel itself.

        :return: The channel_id of this CommentThreadSnippet.
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this CommentThreadSnippet.

        The YouTube channel the comments in the thread refer to or the channel with the video the comments refer to. If video_id isn't set the comments refer to the channel itself.

        :param channel_id: The channel_id of this CommentThreadSnippet.
        :type channel_id: str
        """

        self._channel_id = channel_id

    @property
    def is_public(self):
        """Gets the is_public of this CommentThreadSnippet.

        Whether the thread (and therefore all its comments) is visible to all YouTube users.

        :return: The is_public of this CommentThreadSnippet.
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this CommentThreadSnippet.

        Whether the thread (and therefore all its comments) is visible to all YouTube users.

        :param is_public: The is_public of this CommentThreadSnippet.
        :type is_public: bool
        """

        self._is_public = is_public

    @property
    def top_level_comment(self):
        """Gets the top_level_comment of this CommentThreadSnippet.


        :return: The top_level_comment of this CommentThreadSnippet.
        :rtype: Comment
        """
        return self._top_level_comment

    @top_level_comment.setter
    def top_level_comment(self, top_level_comment):
        """Sets the top_level_comment of this CommentThreadSnippet.


        :param top_level_comment: The top_level_comment of this CommentThreadSnippet.
        :type top_level_comment: Comment
        """

        self._top_level_comment = top_level_comment

    @property
    def total_reply_count(self):
        """Gets the total_reply_count of this CommentThreadSnippet.

        The total number of replies (not including the top level comment).

        :return: The total_reply_count of this CommentThreadSnippet.
        :rtype: int
        """
        return self._total_reply_count

    @total_reply_count.setter
    def total_reply_count(self, total_reply_count):
        """Sets the total_reply_count of this CommentThreadSnippet.

        The total number of replies (not including the top level comment).

        :param total_reply_count: The total_reply_count of this CommentThreadSnippet.
        :type total_reply_count: int
        """

        self._total_reply_count = total_reply_count

    @property
    def video_id(self):
        """Gets the video_id of this CommentThreadSnippet.

        The ID of the video the comments refer to, if any. No video_id implies a channel discussion comment.

        :return: The video_id of this CommentThreadSnippet.
        :rtype: str
        """
        return self._video_id

    @video_id.setter
    def video_id(self, video_id):
        """Sets the video_id of this CommentThreadSnippet.

        The ID of the video the comments refer to, if any. No video_id implies a channel discussion comment.

        :param video_id: The video_id of this CommentThreadSnippet.
        :type video_id: str
        """

        self._video_id = video_id
