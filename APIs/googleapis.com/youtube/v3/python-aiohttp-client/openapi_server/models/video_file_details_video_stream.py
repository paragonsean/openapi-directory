# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VideoFileDetailsVideoStream(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aspect_ratio: float=None, bitrate_bps: str=None, codec: str=None, frame_rate_fps: float=None, height_pixels: int=None, rotation: str=None, vendor: str=None, width_pixels: int=None):
        """VideoFileDetailsVideoStream - a model defined in OpenAPI

        :param aspect_ratio: The aspect_ratio of this VideoFileDetailsVideoStream.
        :param bitrate_bps: The bitrate_bps of this VideoFileDetailsVideoStream.
        :param codec: The codec of this VideoFileDetailsVideoStream.
        :param frame_rate_fps: The frame_rate_fps of this VideoFileDetailsVideoStream.
        :param height_pixels: The height_pixels of this VideoFileDetailsVideoStream.
        :param rotation: The rotation of this VideoFileDetailsVideoStream.
        :param vendor: The vendor of this VideoFileDetailsVideoStream.
        :param width_pixels: The width_pixels of this VideoFileDetailsVideoStream.
        """
        self.openapi_types = {
            'aspect_ratio': float,
            'bitrate_bps': str,
            'codec': str,
            'frame_rate_fps': float,
            'height_pixels': int,
            'rotation': str,
            'vendor': str,
            'width_pixels': int
        }

        self.attribute_map = {
            'aspect_ratio': 'aspectRatio',
            'bitrate_bps': 'bitrateBps',
            'codec': 'codec',
            'frame_rate_fps': 'frameRateFps',
            'height_pixels': 'heightPixels',
            'rotation': 'rotation',
            'vendor': 'vendor',
            'width_pixels': 'widthPixels'
        }

        self._aspect_ratio = aspect_ratio
        self._bitrate_bps = bitrate_bps
        self._codec = codec
        self._frame_rate_fps = frame_rate_fps
        self._height_pixels = height_pixels
        self._rotation = rotation
        self._vendor = vendor
        self._width_pixels = width_pixels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoFileDetailsVideoStream':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VideoFileDetailsVideoStream of this VideoFileDetailsVideoStream.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aspect_ratio(self):
        """Gets the aspect_ratio of this VideoFileDetailsVideoStream.

        The video content's display aspect ratio, which specifies the aspect ratio in which the video should be displayed.

        :return: The aspect_ratio of this VideoFileDetailsVideoStream.
        :rtype: float
        """
        return self._aspect_ratio

    @aspect_ratio.setter
    def aspect_ratio(self, aspect_ratio):
        """Sets the aspect_ratio of this VideoFileDetailsVideoStream.

        The video content's display aspect ratio, which specifies the aspect ratio in which the video should be displayed.

        :param aspect_ratio: The aspect_ratio of this VideoFileDetailsVideoStream.
        :type aspect_ratio: float
        """

        self._aspect_ratio = aspect_ratio

    @property
    def bitrate_bps(self):
        """Gets the bitrate_bps of this VideoFileDetailsVideoStream.

        The video stream's bitrate, in bits per second.

        :return: The bitrate_bps of this VideoFileDetailsVideoStream.
        :rtype: str
        """
        return self._bitrate_bps

    @bitrate_bps.setter
    def bitrate_bps(self, bitrate_bps):
        """Sets the bitrate_bps of this VideoFileDetailsVideoStream.

        The video stream's bitrate, in bits per second.

        :param bitrate_bps: The bitrate_bps of this VideoFileDetailsVideoStream.
        :type bitrate_bps: str
        """

        self._bitrate_bps = bitrate_bps

    @property
    def codec(self):
        """Gets the codec of this VideoFileDetailsVideoStream.

        The video codec that the stream uses.

        :return: The codec of this VideoFileDetailsVideoStream.
        :rtype: str
        """
        return self._codec

    @codec.setter
    def codec(self, codec):
        """Sets the codec of this VideoFileDetailsVideoStream.

        The video codec that the stream uses.

        :param codec: The codec of this VideoFileDetailsVideoStream.
        :type codec: str
        """

        self._codec = codec

    @property
    def frame_rate_fps(self):
        """Gets the frame_rate_fps of this VideoFileDetailsVideoStream.

        The video stream's frame rate, in frames per second.

        :return: The frame_rate_fps of this VideoFileDetailsVideoStream.
        :rtype: float
        """
        return self._frame_rate_fps

    @frame_rate_fps.setter
    def frame_rate_fps(self, frame_rate_fps):
        """Sets the frame_rate_fps of this VideoFileDetailsVideoStream.

        The video stream's frame rate, in frames per second.

        :param frame_rate_fps: The frame_rate_fps of this VideoFileDetailsVideoStream.
        :type frame_rate_fps: float
        """

        self._frame_rate_fps = frame_rate_fps

    @property
    def height_pixels(self):
        """Gets the height_pixels of this VideoFileDetailsVideoStream.

        The encoded video content's height in pixels.

        :return: The height_pixels of this VideoFileDetailsVideoStream.
        :rtype: int
        """
        return self._height_pixels

    @height_pixels.setter
    def height_pixels(self, height_pixels):
        """Sets the height_pixels of this VideoFileDetailsVideoStream.

        The encoded video content's height in pixels.

        :param height_pixels: The height_pixels of this VideoFileDetailsVideoStream.
        :type height_pixels: int
        """

        self._height_pixels = height_pixels

    @property
    def rotation(self):
        """Gets the rotation of this VideoFileDetailsVideoStream.

        The amount that YouTube needs to rotate the original source content to properly display the video.

        :return: The rotation of this VideoFileDetailsVideoStream.
        :rtype: str
        """
        return self._rotation

    @rotation.setter
    def rotation(self, rotation):
        """Sets the rotation of this VideoFileDetailsVideoStream.

        The amount that YouTube needs to rotate the original source content to properly display the video.

        :param rotation: The rotation of this VideoFileDetailsVideoStream.
        :type rotation: str
        """
        allowed_values = ["none", "clockwise", "upsideDown", "counterClockwise", "other"]  # noqa: E501
        if rotation not in allowed_values:
            raise ValueError(
                "Invalid value for `rotation` ({0}), must be one of {1}"
                .format(rotation, allowed_values)
            )

        self._rotation = rotation

    @property
    def vendor(self):
        """Gets the vendor of this VideoFileDetailsVideoStream.

        A value that uniquely identifies a video vendor. Typically, the value is a four-letter vendor code.

        :return: The vendor of this VideoFileDetailsVideoStream.
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this VideoFileDetailsVideoStream.

        A value that uniquely identifies a video vendor. Typically, the value is a four-letter vendor code.

        :param vendor: The vendor of this VideoFileDetailsVideoStream.
        :type vendor: str
        """

        self._vendor = vendor

    @property
    def width_pixels(self):
        """Gets the width_pixels of this VideoFileDetailsVideoStream.

        The encoded video content's width in pixels. You can calculate the video's encoding aspect ratio as width_pixels / height_pixels.

        :return: The width_pixels of this VideoFileDetailsVideoStream.
        :rtype: int
        """
        return self._width_pixels

    @width_pixels.setter
    def width_pixels(self, width_pixels):
        """Sets the width_pixels of this VideoFileDetailsVideoStream.

        The encoded video content's width in pixels. You can calculate the video's encoding aspect ratio as width_pixels / height_pixels.

        :param width_pixels: The width_pixels of this VideoFileDetailsVideoStream.
        :type width_pixels: int
        """

        self._width_pixels = width_pixels
