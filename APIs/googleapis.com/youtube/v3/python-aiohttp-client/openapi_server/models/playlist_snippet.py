# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.playlist_localization import PlaylistLocalization
from openapi_server.models.thumbnail_details import ThumbnailDetails
from openapi_server import util


class PlaylistSnippet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_id: str=None, channel_title: str=None, default_language: str=None, description: str=None, localized: PlaylistLocalization=None, published_at: datetime=None, tags: List[str]=None, thumbnail_video_id: str=None, thumbnails: ThumbnailDetails=None, title: str=None):
        """PlaylistSnippet - a model defined in OpenAPI

        :param channel_id: The channel_id of this PlaylistSnippet.
        :param channel_title: The channel_title of this PlaylistSnippet.
        :param default_language: The default_language of this PlaylistSnippet.
        :param description: The description of this PlaylistSnippet.
        :param localized: The localized of this PlaylistSnippet.
        :param published_at: The published_at of this PlaylistSnippet.
        :param tags: The tags of this PlaylistSnippet.
        :param thumbnail_video_id: The thumbnail_video_id of this PlaylistSnippet.
        :param thumbnails: The thumbnails of this PlaylistSnippet.
        :param title: The title of this PlaylistSnippet.
        """
        self.openapi_types = {
            'channel_id': str,
            'channel_title': str,
            'default_language': str,
            'description': str,
            'localized': PlaylistLocalization,
            'published_at': datetime,
            'tags': List[str],
            'thumbnail_video_id': str,
            'thumbnails': ThumbnailDetails,
            'title': str
        }

        self.attribute_map = {
            'channel_id': 'channelId',
            'channel_title': 'channelTitle',
            'default_language': 'defaultLanguage',
            'description': 'description',
            'localized': 'localized',
            'published_at': 'publishedAt',
            'tags': 'tags',
            'thumbnail_video_id': 'thumbnailVideoId',
            'thumbnails': 'thumbnails',
            'title': 'title'
        }

        self._channel_id = channel_id
        self._channel_title = channel_title
        self._default_language = default_language
        self._description = description
        self._localized = localized
        self._published_at = published_at
        self._tags = tags
        self._thumbnail_video_id = thumbnail_video_id
        self._thumbnails = thumbnails
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlaylistSnippet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlaylistSnippet of this PlaylistSnippet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_id(self):
        """Gets the channel_id of this PlaylistSnippet.

        The ID that YouTube uses to uniquely identify the channel that published the playlist.

        :return: The channel_id of this PlaylistSnippet.
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this PlaylistSnippet.

        The ID that YouTube uses to uniquely identify the channel that published the playlist.

        :param channel_id: The channel_id of this PlaylistSnippet.
        :type channel_id: str
        """

        self._channel_id = channel_id

    @property
    def channel_title(self):
        """Gets the channel_title of this PlaylistSnippet.

        The channel title of the channel that the video belongs to.

        :return: The channel_title of this PlaylistSnippet.
        :rtype: str
        """
        return self._channel_title

    @channel_title.setter
    def channel_title(self, channel_title):
        """Sets the channel_title of this PlaylistSnippet.

        The channel title of the channel that the video belongs to.

        :param channel_title: The channel_title of this PlaylistSnippet.
        :type channel_title: str
        """

        self._channel_title = channel_title

    @property
    def default_language(self):
        """Gets the default_language of this PlaylistSnippet.

        The language of the playlist's default title and description.

        :return: The default_language of this PlaylistSnippet.
        :rtype: str
        """
        return self._default_language

    @default_language.setter
    def default_language(self, default_language):
        """Sets the default_language of this PlaylistSnippet.

        The language of the playlist's default title and description.

        :param default_language: The default_language of this PlaylistSnippet.
        :type default_language: str
        """

        self._default_language = default_language

    @property
    def description(self):
        """Gets the description of this PlaylistSnippet.

        The playlist's description.

        :return: The description of this PlaylistSnippet.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PlaylistSnippet.

        The playlist's description.

        :param description: The description of this PlaylistSnippet.
        :type description: str
        """

        self._description = description

    @property
    def localized(self):
        """Gets the localized of this PlaylistSnippet.


        :return: The localized of this PlaylistSnippet.
        :rtype: PlaylistLocalization
        """
        return self._localized

    @localized.setter
    def localized(self, localized):
        """Sets the localized of this PlaylistSnippet.


        :param localized: The localized of this PlaylistSnippet.
        :type localized: PlaylistLocalization
        """

        self._localized = localized

    @property
    def published_at(self):
        """Gets the published_at of this PlaylistSnippet.

        The date and time that the playlist was created.

        :return: The published_at of this PlaylistSnippet.
        :rtype: datetime
        """
        return self._published_at

    @published_at.setter
    def published_at(self, published_at):
        """Sets the published_at of this PlaylistSnippet.

        The date and time that the playlist was created.

        :param published_at: The published_at of this PlaylistSnippet.
        :type published_at: datetime
        """

        self._published_at = published_at

    @property
    def tags(self):
        """Gets the tags of this PlaylistSnippet.

        Keyword tags associated with the playlist.

        :return: The tags of this PlaylistSnippet.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PlaylistSnippet.

        Keyword tags associated with the playlist.

        :param tags: The tags of this PlaylistSnippet.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def thumbnail_video_id(self):
        """Gets the thumbnail_video_id of this PlaylistSnippet.

        Note: if the playlist has a custom thumbnail, this field will not be populated. The video id selected by the user that will be used as the thumbnail of this playlist. This field defaults to the first publicly viewable video in the playlist, if: 1. The user has never selected a video to be the thumbnail of the playlist. 2. The user selects a video to be the thumbnail, and then removes that video from the playlist. 3. The user selects a non-owned video to be the thumbnail, but that video becomes private, or gets deleted.

        :return: The thumbnail_video_id of this PlaylistSnippet.
        :rtype: str
        """
        return self._thumbnail_video_id

    @thumbnail_video_id.setter
    def thumbnail_video_id(self, thumbnail_video_id):
        """Sets the thumbnail_video_id of this PlaylistSnippet.

        Note: if the playlist has a custom thumbnail, this field will not be populated. The video id selected by the user that will be used as the thumbnail of this playlist. This field defaults to the first publicly viewable video in the playlist, if: 1. The user has never selected a video to be the thumbnail of the playlist. 2. The user selects a video to be the thumbnail, and then removes that video from the playlist. 3. The user selects a non-owned video to be the thumbnail, but that video becomes private, or gets deleted.

        :param thumbnail_video_id: The thumbnail_video_id of this PlaylistSnippet.
        :type thumbnail_video_id: str
        """

        self._thumbnail_video_id = thumbnail_video_id

    @property
    def thumbnails(self):
        """Gets the thumbnails of this PlaylistSnippet.


        :return: The thumbnails of this PlaylistSnippet.
        :rtype: ThumbnailDetails
        """
        return self._thumbnails

    @thumbnails.setter
    def thumbnails(self, thumbnails):
        """Sets the thumbnails of this PlaylistSnippet.


        :param thumbnails: The thumbnails of this PlaylistSnippet.
        :type thumbnails: ThumbnailDetails
        """

        self._thumbnails = thumbnails

    @property
    def title(self):
        """Gets the title of this PlaylistSnippet.

        The playlist's title.

        :return: The title of this PlaylistSnippet.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PlaylistSnippet.

        The playlist's title.

        :param title: The title of this PlaylistSnippet.
        :type title: str
        """

        self._title = title
