# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.comment_snippet_author_channel_id import CommentSnippetAuthorChannelId
from openapi_server import util


class CommentSnippet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author_channel_id: CommentSnippetAuthorChannelId=None, author_channel_url: str=None, author_display_name: str=None, author_profile_image_url: str=None, can_rate: bool=None, channel_id: str=None, like_count: int=None, moderation_status: str=None, parent_id: str=None, published_at: datetime=None, text_display: str=None, text_original: str=None, updated_at: datetime=None, video_id: str=None, viewer_rating: str=None):
        """CommentSnippet - a model defined in OpenAPI

        :param author_channel_id: The author_channel_id of this CommentSnippet.
        :param author_channel_url: The author_channel_url of this CommentSnippet.
        :param author_display_name: The author_display_name of this CommentSnippet.
        :param author_profile_image_url: The author_profile_image_url of this CommentSnippet.
        :param can_rate: The can_rate of this CommentSnippet.
        :param channel_id: The channel_id of this CommentSnippet.
        :param like_count: The like_count of this CommentSnippet.
        :param moderation_status: The moderation_status of this CommentSnippet.
        :param parent_id: The parent_id of this CommentSnippet.
        :param published_at: The published_at of this CommentSnippet.
        :param text_display: The text_display of this CommentSnippet.
        :param text_original: The text_original of this CommentSnippet.
        :param updated_at: The updated_at of this CommentSnippet.
        :param video_id: The video_id of this CommentSnippet.
        :param viewer_rating: The viewer_rating of this CommentSnippet.
        """
        self.openapi_types = {
            'author_channel_id': CommentSnippetAuthorChannelId,
            'author_channel_url': str,
            'author_display_name': str,
            'author_profile_image_url': str,
            'can_rate': bool,
            'channel_id': str,
            'like_count': int,
            'moderation_status': str,
            'parent_id': str,
            'published_at': datetime,
            'text_display': str,
            'text_original': str,
            'updated_at': datetime,
            'video_id': str,
            'viewer_rating': str
        }

        self.attribute_map = {
            'author_channel_id': 'authorChannelId',
            'author_channel_url': 'authorChannelUrl',
            'author_display_name': 'authorDisplayName',
            'author_profile_image_url': 'authorProfileImageUrl',
            'can_rate': 'canRate',
            'channel_id': 'channelId',
            'like_count': 'likeCount',
            'moderation_status': 'moderationStatus',
            'parent_id': 'parentId',
            'published_at': 'publishedAt',
            'text_display': 'textDisplay',
            'text_original': 'textOriginal',
            'updated_at': 'updatedAt',
            'video_id': 'videoId',
            'viewer_rating': 'viewerRating'
        }

        self._author_channel_id = author_channel_id
        self._author_channel_url = author_channel_url
        self._author_display_name = author_display_name
        self._author_profile_image_url = author_profile_image_url
        self._can_rate = can_rate
        self._channel_id = channel_id
        self._like_count = like_count
        self._moderation_status = moderation_status
        self._parent_id = parent_id
        self._published_at = published_at
        self._text_display = text_display
        self._text_original = text_original
        self._updated_at = updated_at
        self._video_id = video_id
        self._viewer_rating = viewer_rating

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommentSnippet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommentSnippet of this CommentSnippet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author_channel_id(self):
        """Gets the author_channel_id of this CommentSnippet.


        :return: The author_channel_id of this CommentSnippet.
        :rtype: CommentSnippetAuthorChannelId
        """
        return self._author_channel_id

    @author_channel_id.setter
    def author_channel_id(self, author_channel_id):
        """Sets the author_channel_id of this CommentSnippet.


        :param author_channel_id: The author_channel_id of this CommentSnippet.
        :type author_channel_id: CommentSnippetAuthorChannelId
        """

        self._author_channel_id = author_channel_id

    @property
    def author_channel_url(self):
        """Gets the author_channel_url of this CommentSnippet.

        Link to the author's YouTube channel, if any.

        :return: The author_channel_url of this CommentSnippet.
        :rtype: str
        """
        return self._author_channel_url

    @author_channel_url.setter
    def author_channel_url(self, author_channel_url):
        """Sets the author_channel_url of this CommentSnippet.

        Link to the author's YouTube channel, if any.

        :param author_channel_url: The author_channel_url of this CommentSnippet.
        :type author_channel_url: str
        """

        self._author_channel_url = author_channel_url

    @property
    def author_display_name(self):
        """Gets the author_display_name of this CommentSnippet.

        The name of the user who posted the comment.

        :return: The author_display_name of this CommentSnippet.
        :rtype: str
        """
        return self._author_display_name

    @author_display_name.setter
    def author_display_name(self, author_display_name):
        """Sets the author_display_name of this CommentSnippet.

        The name of the user who posted the comment.

        :param author_display_name: The author_display_name of this CommentSnippet.
        :type author_display_name: str
        """

        self._author_display_name = author_display_name

    @property
    def author_profile_image_url(self):
        """Gets the author_profile_image_url of this CommentSnippet.

        The URL for the avatar of the user who posted the comment.

        :return: The author_profile_image_url of this CommentSnippet.
        :rtype: str
        """
        return self._author_profile_image_url

    @author_profile_image_url.setter
    def author_profile_image_url(self, author_profile_image_url):
        """Sets the author_profile_image_url of this CommentSnippet.

        The URL for the avatar of the user who posted the comment.

        :param author_profile_image_url: The author_profile_image_url of this CommentSnippet.
        :type author_profile_image_url: str
        """

        self._author_profile_image_url = author_profile_image_url

    @property
    def can_rate(self):
        """Gets the can_rate of this CommentSnippet.

        Whether the current viewer can rate this comment.

        :return: The can_rate of this CommentSnippet.
        :rtype: bool
        """
        return self._can_rate

    @can_rate.setter
    def can_rate(self, can_rate):
        """Sets the can_rate of this CommentSnippet.

        Whether the current viewer can rate this comment.

        :param can_rate: The can_rate of this CommentSnippet.
        :type can_rate: bool
        """

        self._can_rate = can_rate

    @property
    def channel_id(self):
        """Gets the channel_id of this CommentSnippet.

        The id of the corresponding YouTube channel. In case of a channel comment this is the channel the comment refers to. In case of a video comment it's the video's channel.

        :return: The channel_id of this CommentSnippet.
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this CommentSnippet.

        The id of the corresponding YouTube channel. In case of a channel comment this is the channel the comment refers to. In case of a video comment it's the video's channel.

        :param channel_id: The channel_id of this CommentSnippet.
        :type channel_id: str
        """

        self._channel_id = channel_id

    @property
    def like_count(self):
        """Gets the like_count of this CommentSnippet.

        The total number of likes this comment has received.

        :return: The like_count of this CommentSnippet.
        :rtype: int
        """
        return self._like_count

    @like_count.setter
    def like_count(self, like_count):
        """Sets the like_count of this CommentSnippet.

        The total number of likes this comment has received.

        :param like_count: The like_count of this CommentSnippet.
        :type like_count: int
        """

        self._like_count = like_count

    @property
    def moderation_status(self):
        """Gets the moderation_status of this CommentSnippet.

        The comment's moderation status. Will not be set if the comments were requested through the id filter.

        :return: The moderation_status of this CommentSnippet.
        :rtype: str
        """
        return self._moderation_status

    @moderation_status.setter
    def moderation_status(self, moderation_status):
        """Sets the moderation_status of this CommentSnippet.

        The comment's moderation status. Will not be set if the comments were requested through the id filter.

        :param moderation_status: The moderation_status of this CommentSnippet.
        :type moderation_status: str
        """
        allowed_values = ["published", "heldForReview", "likelySpam", "rejected"]  # noqa: E501
        if moderation_status not in allowed_values:
            raise ValueError(
                "Invalid value for `moderation_status` ({0}), must be one of {1}"
                .format(moderation_status, allowed_values)
            )

        self._moderation_status = moderation_status

    @property
    def parent_id(self):
        """Gets the parent_id of this CommentSnippet.

        The unique id of the parent comment, only set for replies.

        :return: The parent_id of this CommentSnippet.
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this CommentSnippet.

        The unique id of the parent comment, only set for replies.

        :param parent_id: The parent_id of this CommentSnippet.
        :type parent_id: str
        """

        self._parent_id = parent_id

    @property
    def published_at(self):
        """Gets the published_at of this CommentSnippet.

        The date and time when the comment was originally published.

        :return: The published_at of this CommentSnippet.
        :rtype: datetime
        """
        return self._published_at

    @published_at.setter
    def published_at(self, published_at):
        """Sets the published_at of this CommentSnippet.

        The date and time when the comment was originally published.

        :param published_at: The published_at of this CommentSnippet.
        :type published_at: datetime
        """

        self._published_at = published_at

    @property
    def text_display(self):
        """Gets the text_display of this CommentSnippet.

        The comment's text. The format is either plain text or HTML dependent on what has been requested. Even the plain text representation may differ from the text originally posted in that it may replace video links with video titles etc.

        :return: The text_display of this CommentSnippet.
        :rtype: str
        """
        return self._text_display

    @text_display.setter
    def text_display(self, text_display):
        """Sets the text_display of this CommentSnippet.

        The comment's text. The format is either plain text or HTML dependent on what has been requested. Even the plain text representation may differ from the text originally posted in that it may replace video links with video titles etc.

        :param text_display: The text_display of this CommentSnippet.
        :type text_display: str
        """

        self._text_display = text_display

    @property
    def text_original(self):
        """Gets the text_original of this CommentSnippet.

        The comment's original raw text as initially posted or last updated. The original text will only be returned if it is accessible to the viewer, which is only guaranteed if the viewer is the comment's author.

        :return: The text_original of this CommentSnippet.
        :rtype: str
        """
        return self._text_original

    @text_original.setter
    def text_original(self, text_original):
        """Sets the text_original of this CommentSnippet.

        The comment's original raw text as initially posted or last updated. The original text will only be returned if it is accessible to the viewer, which is only guaranteed if the viewer is the comment's author.

        :param text_original: The text_original of this CommentSnippet.
        :type text_original: str
        """

        self._text_original = text_original

    @property
    def updated_at(self):
        """Gets the updated_at of this CommentSnippet.

        The date and time when the comment was last updated.

        :return: The updated_at of this CommentSnippet.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CommentSnippet.

        The date and time when the comment was last updated.

        :param updated_at: The updated_at of this CommentSnippet.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def video_id(self):
        """Gets the video_id of this CommentSnippet.

        The ID of the video the comment refers to, if any.

        :return: The video_id of this CommentSnippet.
        :rtype: str
        """
        return self._video_id

    @video_id.setter
    def video_id(self, video_id):
        """Sets the video_id of this CommentSnippet.

        The ID of the video the comment refers to, if any.

        :param video_id: The video_id of this CommentSnippet.
        :type video_id: str
        """

        self._video_id = video_id

    @property
    def viewer_rating(self):
        """Gets the viewer_rating of this CommentSnippet.

        The rating the viewer has given to this comment. For the time being this will never return RATE_TYPE_DISLIKE and instead return RATE_TYPE_NONE. This may change in the future.

        :return: The viewer_rating of this CommentSnippet.
        :rtype: str
        """
        return self._viewer_rating

    @viewer_rating.setter
    def viewer_rating(self, viewer_rating):
        """Sets the viewer_rating of this CommentSnippet.

        The rating the viewer has given to this comment. For the time being this will never return RATE_TYPE_DISLIKE and instead return RATE_TYPE_NONE. This may change in the future.

        :param viewer_rating: The viewer_rating of this CommentSnippet.
        :type viewer_rating: str
        """
        allowed_values = ["none", "like", "dislike"]  # noqa: E501
        if viewer_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `viewer_rating` ({0}), must be one of {1}"
                .format(viewer_rating, allowed_values)
            )

        self._viewer_rating = viewer_rating
