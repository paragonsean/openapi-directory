# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InvideoPosition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, corner_position: str=None, type: str=None):
        """InvideoPosition - a model defined in OpenAPI

        :param corner_position: The corner_position of this InvideoPosition.
        :param type: The type of this InvideoPosition.
        """
        self.openapi_types = {
            'corner_position': str,
            'type': str
        }

        self.attribute_map = {
            'corner_position': 'cornerPosition',
            'type': 'type'
        }

        self._corner_position = corner_position
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InvideoPosition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InvideoPosition of this InvideoPosition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def corner_position(self):
        """Gets the corner_position of this InvideoPosition.

        Describes in which corner of the video the visual widget will appear.

        :return: The corner_position of this InvideoPosition.
        :rtype: str
        """
        return self._corner_position

    @corner_position.setter
    def corner_position(self, corner_position):
        """Sets the corner_position of this InvideoPosition.

        Describes in which corner of the video the visual widget will appear.

        :param corner_position: The corner_position of this InvideoPosition.
        :type corner_position: str
        """
        allowed_values = ["topLeft", "topRight", "bottomLeft", "bottomRight"]  # noqa: E501
        if corner_position not in allowed_values:
            raise ValueError(
                "Invalid value for `corner_position` ({0}), must be one of {1}"
                .format(corner_position, allowed_values)
            )

        self._corner_position = corner_position

    @property
    def type(self):
        """Gets the type of this InvideoPosition.

        Defines the position type.

        :return: The type of this InvideoPosition.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InvideoPosition.

        Defines the position type.

        :param type: The type of this InvideoPosition.
        :type type: str
        """
        allowed_values = ["corner"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
