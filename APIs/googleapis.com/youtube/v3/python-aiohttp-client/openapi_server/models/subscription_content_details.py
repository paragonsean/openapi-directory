# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubscriptionContentDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activity_type: str=None, new_item_count: int=None, total_item_count: int=None):
        """SubscriptionContentDetails - a model defined in OpenAPI

        :param activity_type: The activity_type of this SubscriptionContentDetails.
        :param new_item_count: The new_item_count of this SubscriptionContentDetails.
        :param total_item_count: The total_item_count of this SubscriptionContentDetails.
        """
        self.openapi_types = {
            'activity_type': str,
            'new_item_count': int,
            'total_item_count': int
        }

        self.attribute_map = {
            'activity_type': 'activityType',
            'new_item_count': 'newItemCount',
            'total_item_count': 'totalItemCount'
        }

        self._activity_type = activity_type
        self._new_item_count = new_item_count
        self._total_item_count = total_item_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionContentDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionContentDetails of this SubscriptionContentDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activity_type(self):
        """Gets the activity_type of this SubscriptionContentDetails.

        The type of activity this subscription is for (only uploads, everything).

        :return: The activity_type of this SubscriptionContentDetails.
        :rtype: str
        """
        return self._activity_type

    @activity_type.setter
    def activity_type(self, activity_type):
        """Sets the activity_type of this SubscriptionContentDetails.

        The type of activity this subscription is for (only uploads, everything).

        :param activity_type: The activity_type of this SubscriptionContentDetails.
        :type activity_type: str
        """
        allowed_values = ["subscriptionActivityTypeUnspecified", "all", "uploads"]  # noqa: E501
        if activity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `activity_type` ({0}), must be one of {1}"
                .format(activity_type, allowed_values)
            )

        self._activity_type = activity_type

    @property
    def new_item_count(self):
        """Gets the new_item_count of this SubscriptionContentDetails.

        The number of new items in the subscription since its content was last read.

        :return: The new_item_count of this SubscriptionContentDetails.
        :rtype: int
        """
        return self._new_item_count

    @new_item_count.setter
    def new_item_count(self, new_item_count):
        """Sets the new_item_count of this SubscriptionContentDetails.

        The number of new items in the subscription since its content was last read.

        :param new_item_count: The new_item_count of this SubscriptionContentDetails.
        :type new_item_count: int
        """

        self._new_item_count = new_item_count

    @property
    def total_item_count(self):
        """Gets the total_item_count of this SubscriptionContentDetails.

        The approximate number of items that the subscription points to.

        :return: The total_item_count of this SubscriptionContentDetails.
        :rtype: int
        """
        return self._total_item_count

    @total_item_count.setter
    def total_item_count(self, total_item_count):
        """Sets the total_item_count of this SubscriptionContentDetails.

        The approximate number of items that the subscription points to.

        :param total_item_count: The total_item_count of this SubscriptionContentDetails.
        :type total_item_count: int
        """

        self._total_item_count = total_item_count
