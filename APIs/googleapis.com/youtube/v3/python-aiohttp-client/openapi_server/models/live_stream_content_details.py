# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LiveStreamContentDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, closed_captions_ingestion_url: str=None, is_reusable: bool=None):
        """LiveStreamContentDetails - a model defined in OpenAPI

        :param closed_captions_ingestion_url: The closed_captions_ingestion_url of this LiveStreamContentDetails.
        :param is_reusable: The is_reusable of this LiveStreamContentDetails.
        """
        self.openapi_types = {
            'closed_captions_ingestion_url': str,
            'is_reusable': bool
        }

        self.attribute_map = {
            'closed_captions_ingestion_url': 'closedCaptionsIngestionUrl',
            'is_reusable': 'isReusable'
        }

        self._closed_captions_ingestion_url = closed_captions_ingestion_url
        self._is_reusable = is_reusable

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LiveStreamContentDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LiveStreamContentDetails of this LiveStreamContentDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def closed_captions_ingestion_url(self):
        """Gets the closed_captions_ingestion_url of this LiveStreamContentDetails.

        The ingestion URL where the closed captions of this stream are sent.

        :return: The closed_captions_ingestion_url of this LiveStreamContentDetails.
        :rtype: str
        """
        return self._closed_captions_ingestion_url

    @closed_captions_ingestion_url.setter
    def closed_captions_ingestion_url(self, closed_captions_ingestion_url):
        """Sets the closed_captions_ingestion_url of this LiveStreamContentDetails.

        The ingestion URL where the closed captions of this stream are sent.

        :param closed_captions_ingestion_url: The closed_captions_ingestion_url of this LiveStreamContentDetails.
        :type closed_captions_ingestion_url: str
        """

        self._closed_captions_ingestion_url = closed_captions_ingestion_url

    @property
    def is_reusable(self):
        """Gets the is_reusable of this LiveStreamContentDetails.

        Indicates whether the stream is reusable, which means that it can be bound to multiple broadcasts. It is common for broadcasters to reuse the same stream for many different broadcasts if those broadcasts occur at different times. If you set this value to false, then the stream will not be reusable, which means that it can only be bound to one broadcast. Non-reusable streams differ from reusable streams in the following ways: - A non-reusable stream can only be bound to one broadcast. - A non-reusable stream might be deleted by an automated process after the broadcast ends. - The liveStreams.list method does not list non-reusable streams if you call the method and set the mine parameter to true. The only way to use that method to retrieve the resource for a non-reusable stream is to use the id parameter to identify the stream. 

        :return: The is_reusable of this LiveStreamContentDetails.
        :rtype: bool
        """
        return self._is_reusable

    @is_reusable.setter
    def is_reusable(self, is_reusable):
        """Sets the is_reusable of this LiveStreamContentDetails.

        Indicates whether the stream is reusable, which means that it can be bound to multiple broadcasts. It is common for broadcasters to reuse the same stream for many different broadcasts if those broadcasts occur at different times. If you set this value to false, then the stream will not be reusable, which means that it can only be bound to one broadcast. Non-reusable streams differ from reusable streams in the following ways: - A non-reusable stream can only be bound to one broadcast. - A non-reusable stream might be deleted by an automated process after the broadcast ends. - The liveStreams.list method does not list non-reusable streams if you call the method and set the mine parameter to true. The only way to use that method to retrieve the resource for a non-reusable stream is to use the id parameter to identify the stream. 

        :param is_reusable: The is_reusable of this LiveStreamContentDetails.
        :type is_reusable: bool
        """

        self._is_reusable = is_reusable
