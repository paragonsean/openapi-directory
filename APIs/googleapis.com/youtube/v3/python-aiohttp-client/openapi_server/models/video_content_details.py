# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.access_policy import AccessPolicy
from openapi_server.models.content_rating import ContentRating
from openapi_server.models.video_content_details_region_restriction import VideoContentDetailsRegionRestriction
from openapi_server import util


class VideoContentDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, caption: str=None, content_rating: ContentRating=None, country_restriction: AccessPolicy=None, definition: str=None, dimension: str=None, duration: str=None, has_custom_thumbnail: bool=None, licensed_content: bool=None, projection: str=None, region_restriction: VideoContentDetailsRegionRestriction=None):
        """VideoContentDetails - a model defined in OpenAPI

        :param caption: The caption of this VideoContentDetails.
        :param content_rating: The content_rating of this VideoContentDetails.
        :param country_restriction: The country_restriction of this VideoContentDetails.
        :param definition: The definition of this VideoContentDetails.
        :param dimension: The dimension of this VideoContentDetails.
        :param duration: The duration of this VideoContentDetails.
        :param has_custom_thumbnail: The has_custom_thumbnail of this VideoContentDetails.
        :param licensed_content: The licensed_content of this VideoContentDetails.
        :param projection: The projection of this VideoContentDetails.
        :param region_restriction: The region_restriction of this VideoContentDetails.
        """
        self.openapi_types = {
            'caption': str,
            'content_rating': ContentRating,
            'country_restriction': AccessPolicy,
            'definition': str,
            'dimension': str,
            'duration': str,
            'has_custom_thumbnail': bool,
            'licensed_content': bool,
            'projection': str,
            'region_restriction': VideoContentDetailsRegionRestriction
        }

        self.attribute_map = {
            'caption': 'caption',
            'content_rating': 'contentRating',
            'country_restriction': 'countryRestriction',
            'definition': 'definition',
            'dimension': 'dimension',
            'duration': 'duration',
            'has_custom_thumbnail': 'hasCustomThumbnail',
            'licensed_content': 'licensedContent',
            'projection': 'projection',
            'region_restriction': 'regionRestriction'
        }

        self._caption = caption
        self._content_rating = content_rating
        self._country_restriction = country_restriction
        self._definition = definition
        self._dimension = dimension
        self._duration = duration
        self._has_custom_thumbnail = has_custom_thumbnail
        self._licensed_content = licensed_content
        self._projection = projection
        self._region_restriction = region_restriction

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoContentDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VideoContentDetails of this VideoContentDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def caption(self):
        """Gets the caption of this VideoContentDetails.

        The value of captions indicates whether the video has captions or not.

        :return: The caption of this VideoContentDetails.
        :rtype: str
        """
        return self._caption

    @caption.setter
    def caption(self, caption):
        """Sets the caption of this VideoContentDetails.

        The value of captions indicates whether the video has captions or not.

        :param caption: The caption of this VideoContentDetails.
        :type caption: str
        """
        allowed_values = ["true", "false"]  # noqa: E501
        if caption not in allowed_values:
            raise ValueError(
                "Invalid value for `caption` ({0}), must be one of {1}"
                .format(caption, allowed_values)
            )

        self._caption = caption

    @property
    def content_rating(self):
        """Gets the content_rating of this VideoContentDetails.


        :return: The content_rating of this VideoContentDetails.
        :rtype: ContentRating
        """
        return self._content_rating

    @content_rating.setter
    def content_rating(self, content_rating):
        """Sets the content_rating of this VideoContentDetails.


        :param content_rating: The content_rating of this VideoContentDetails.
        :type content_rating: ContentRating
        """

        self._content_rating = content_rating

    @property
    def country_restriction(self):
        """Gets the country_restriction of this VideoContentDetails.


        :return: The country_restriction of this VideoContentDetails.
        :rtype: AccessPolicy
        """
        return self._country_restriction

    @country_restriction.setter
    def country_restriction(self, country_restriction):
        """Sets the country_restriction of this VideoContentDetails.


        :param country_restriction: The country_restriction of this VideoContentDetails.
        :type country_restriction: AccessPolicy
        """

        self._country_restriction = country_restriction

    @property
    def definition(self):
        """Gets the definition of this VideoContentDetails.

        The value of definition indicates whether the video is available in high definition or only in standard definition.

        :return: The definition of this VideoContentDetails.
        :rtype: str
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this VideoContentDetails.

        The value of definition indicates whether the video is available in high definition or only in standard definition.

        :param definition: The definition of this VideoContentDetails.
        :type definition: str
        """
        allowed_values = ["sd", "hd"]  # noqa: E501
        if definition not in allowed_values:
            raise ValueError(
                "Invalid value for `definition` ({0}), must be one of {1}"
                .format(definition, allowed_values)
            )

        self._definition = definition

    @property
    def dimension(self):
        """Gets the dimension of this VideoContentDetails.

        The value of dimension indicates whether the video is available in 3D or in 2D.

        :return: The dimension of this VideoContentDetails.
        :rtype: str
        """
        return self._dimension

    @dimension.setter
    def dimension(self, dimension):
        """Sets the dimension of this VideoContentDetails.

        The value of dimension indicates whether the video is available in 3D or in 2D.

        :param dimension: The dimension of this VideoContentDetails.
        :type dimension: str
        """

        self._dimension = dimension

    @property
    def duration(self):
        """Gets the duration of this VideoContentDetails.

        The length of the video. The tag value is an ISO 8601 duration in the format PT#M#S, in which the letters PT indicate that the value specifies a period of time, and the letters M and S refer to length in minutes and seconds, respectively. The # characters preceding the M and S letters are both integers that specify the number of minutes (or seconds) of the video. For example, a value of PT15M51S indicates that the video is 15 minutes and 51 seconds long.

        :return: The duration of this VideoContentDetails.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this VideoContentDetails.

        The length of the video. The tag value is an ISO 8601 duration in the format PT#M#S, in which the letters PT indicate that the value specifies a period of time, and the letters M and S refer to length in minutes and seconds, respectively. The # characters preceding the M and S letters are both integers that specify the number of minutes (or seconds) of the video. For example, a value of PT15M51S indicates that the video is 15 minutes and 51 seconds long.

        :param duration: The duration of this VideoContentDetails.
        :type duration: str
        """

        self._duration = duration

    @property
    def has_custom_thumbnail(self):
        """Gets the has_custom_thumbnail of this VideoContentDetails.

        Indicates whether the video uploader has provided a custom thumbnail image for the video. This property is only visible to the video uploader.

        :return: The has_custom_thumbnail of this VideoContentDetails.
        :rtype: bool
        """
        return self._has_custom_thumbnail

    @has_custom_thumbnail.setter
    def has_custom_thumbnail(self, has_custom_thumbnail):
        """Sets the has_custom_thumbnail of this VideoContentDetails.

        Indicates whether the video uploader has provided a custom thumbnail image for the video. This property is only visible to the video uploader.

        :param has_custom_thumbnail: The has_custom_thumbnail of this VideoContentDetails.
        :type has_custom_thumbnail: bool
        """

        self._has_custom_thumbnail = has_custom_thumbnail

    @property
    def licensed_content(self):
        """Gets the licensed_content of this VideoContentDetails.

        The value of is_license_content indicates whether the video is licensed content.

        :return: The licensed_content of this VideoContentDetails.
        :rtype: bool
        """
        return self._licensed_content

    @licensed_content.setter
    def licensed_content(self, licensed_content):
        """Sets the licensed_content of this VideoContentDetails.

        The value of is_license_content indicates whether the video is licensed content.

        :param licensed_content: The licensed_content of this VideoContentDetails.
        :type licensed_content: bool
        """

        self._licensed_content = licensed_content

    @property
    def projection(self):
        """Gets the projection of this VideoContentDetails.

        Specifies the projection format of the video.

        :return: The projection of this VideoContentDetails.
        :rtype: str
        """
        return self._projection

    @projection.setter
    def projection(self, projection):
        """Sets the projection of this VideoContentDetails.

        Specifies the projection format of the video.

        :param projection: The projection of this VideoContentDetails.
        :type projection: str
        """
        allowed_values = ["rectangular", "360"]  # noqa: E501
        if projection not in allowed_values:
            raise ValueError(
                "Invalid value for `projection` ({0}), must be one of {1}"
                .format(projection, allowed_values)
            )

        self._projection = projection

    @property
    def region_restriction(self):
        """Gets the region_restriction of this VideoContentDetails.


        :return: The region_restriction of this VideoContentDetails.
        :rtype: VideoContentDetailsRegionRestriction
        """
        return self._region_restriction

    @region_restriction.setter
    def region_restriction(self, region_restriction):
        """Sets the region_restriction of this VideoContentDetails.


        :param region_restriction: The region_restriction of this VideoContentDetails.
        :type region_restriction: VideoContentDetailsRegionRestriction
        """

        self._region_restriction = region_restriction
