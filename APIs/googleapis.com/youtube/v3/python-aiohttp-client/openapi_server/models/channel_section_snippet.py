# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_section_localization import ChannelSectionLocalization
from openapi_server import util


class ChannelSectionSnippet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_id: str=None, default_language: str=None, localized: ChannelSectionLocalization=None, position: int=None, style: str=None, title: str=None, type: str=None):
        """ChannelSectionSnippet - a model defined in OpenAPI

        :param channel_id: The channel_id of this ChannelSectionSnippet.
        :param default_language: The default_language of this ChannelSectionSnippet.
        :param localized: The localized of this ChannelSectionSnippet.
        :param position: The position of this ChannelSectionSnippet.
        :param style: The style of this ChannelSectionSnippet.
        :param title: The title of this ChannelSectionSnippet.
        :param type: The type of this ChannelSectionSnippet.
        """
        self.openapi_types = {
            'channel_id': str,
            'default_language': str,
            'localized': ChannelSectionLocalization,
            'position': int,
            'style': str,
            'title': str,
            'type': str
        }

        self.attribute_map = {
            'channel_id': 'channelId',
            'default_language': 'defaultLanguage',
            'localized': 'localized',
            'position': 'position',
            'style': 'style',
            'title': 'title',
            'type': 'type'
        }

        self._channel_id = channel_id
        self._default_language = default_language
        self._localized = localized
        self._position = position
        self._style = style
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelSectionSnippet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChannelSectionSnippet of this ChannelSectionSnippet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_id(self):
        """Gets the channel_id of this ChannelSectionSnippet.

        The ID that YouTube uses to uniquely identify the channel that published the channel section.

        :return: The channel_id of this ChannelSectionSnippet.
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this ChannelSectionSnippet.

        The ID that YouTube uses to uniquely identify the channel that published the channel section.

        :param channel_id: The channel_id of this ChannelSectionSnippet.
        :type channel_id: str
        """

        self._channel_id = channel_id

    @property
    def default_language(self):
        """Gets the default_language of this ChannelSectionSnippet.

        The language of the channel section's default title and description.

        :return: The default_language of this ChannelSectionSnippet.
        :rtype: str
        """
        return self._default_language

    @default_language.setter
    def default_language(self, default_language):
        """Sets the default_language of this ChannelSectionSnippet.

        The language of the channel section's default title and description.

        :param default_language: The default_language of this ChannelSectionSnippet.
        :type default_language: str
        """

        self._default_language = default_language

    @property
    def localized(self):
        """Gets the localized of this ChannelSectionSnippet.


        :return: The localized of this ChannelSectionSnippet.
        :rtype: ChannelSectionLocalization
        """
        return self._localized

    @localized.setter
    def localized(self, localized):
        """Sets the localized of this ChannelSectionSnippet.


        :param localized: The localized of this ChannelSectionSnippet.
        :type localized: ChannelSectionLocalization
        """

        self._localized = localized

    @property
    def position(self):
        """Gets the position of this ChannelSectionSnippet.

        The position of the channel section in the channel.

        :return: The position of this ChannelSectionSnippet.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this ChannelSectionSnippet.

        The position of the channel section in the channel.

        :param position: The position of this ChannelSectionSnippet.
        :type position: int
        """

        self._position = position

    @property
    def style(self):
        """Gets the style of this ChannelSectionSnippet.

        The style of the channel section.

        :return: The style of this ChannelSectionSnippet.
        :rtype: str
        """
        return self._style

    @style.setter
    def style(self, style):
        """Sets the style of this ChannelSectionSnippet.

        The style of the channel section.

        :param style: The style of this ChannelSectionSnippet.
        :type style: str
        """
        allowed_values = ["channelsectionStyleUnspecified", "horizontalRow", "verticalList"]  # noqa: E501
        if style not in allowed_values:
            raise ValueError(
                "Invalid value for `style` ({0}), must be one of {1}"
                .format(style, allowed_values)
            )

        self._style = style

    @property
    def title(self):
        """Gets the title of this ChannelSectionSnippet.

        The channel section's title for multiple_playlists and multiple_channels.

        :return: The title of this ChannelSectionSnippet.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ChannelSectionSnippet.

        The channel section's title for multiple_playlists and multiple_channels.

        :param title: The title of this ChannelSectionSnippet.
        :type title: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this ChannelSectionSnippet.

        The type of the channel section.

        :return: The type of this ChannelSectionSnippet.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ChannelSectionSnippet.

        The type of the channel section.

        :param type: The type of this ChannelSectionSnippet.
        :type type: str
        """
        allowed_values = ["channelsectionTypeUndefined", "singlePlaylist", "multiplePlaylists", "popularUploads", "recentUploads", "likes", "allPlaylists", "likedPlaylists", "recentPosts", "recentActivity", "liveEvents", "upcomingEvents", "completedEvents", "multipleChannels", "postedVideos", "postedPlaylists", "subscriptions"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
