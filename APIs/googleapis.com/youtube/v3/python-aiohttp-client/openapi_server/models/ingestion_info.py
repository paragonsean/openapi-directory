# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IngestionInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_ingestion_address: str=None, ingestion_address: str=None, rtmps_backup_ingestion_address: str=None, rtmps_ingestion_address: str=None, stream_name: str=None):
        """IngestionInfo - a model defined in OpenAPI

        :param backup_ingestion_address: The backup_ingestion_address of this IngestionInfo.
        :param ingestion_address: The ingestion_address of this IngestionInfo.
        :param rtmps_backup_ingestion_address: The rtmps_backup_ingestion_address of this IngestionInfo.
        :param rtmps_ingestion_address: The rtmps_ingestion_address of this IngestionInfo.
        :param stream_name: The stream_name of this IngestionInfo.
        """
        self.openapi_types = {
            'backup_ingestion_address': str,
            'ingestion_address': str,
            'rtmps_backup_ingestion_address': str,
            'rtmps_ingestion_address': str,
            'stream_name': str
        }

        self.attribute_map = {
            'backup_ingestion_address': 'backupIngestionAddress',
            'ingestion_address': 'ingestionAddress',
            'rtmps_backup_ingestion_address': 'rtmpsBackupIngestionAddress',
            'rtmps_ingestion_address': 'rtmpsIngestionAddress',
            'stream_name': 'streamName'
        }

        self._backup_ingestion_address = backup_ingestion_address
        self._ingestion_address = ingestion_address
        self._rtmps_backup_ingestion_address = rtmps_backup_ingestion_address
        self._rtmps_ingestion_address = rtmps_ingestion_address
        self._stream_name = stream_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IngestionInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IngestionInfo of this IngestionInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_ingestion_address(self):
        """Gets the backup_ingestion_address of this IngestionInfo.

        The backup ingestion URL that you should use to stream video to YouTube. You have the option of simultaneously streaming the content that you are sending to the ingestionAddress to this URL.

        :return: The backup_ingestion_address of this IngestionInfo.
        :rtype: str
        """
        return self._backup_ingestion_address

    @backup_ingestion_address.setter
    def backup_ingestion_address(self, backup_ingestion_address):
        """Sets the backup_ingestion_address of this IngestionInfo.

        The backup ingestion URL that you should use to stream video to YouTube. You have the option of simultaneously streaming the content that you are sending to the ingestionAddress to this URL.

        :param backup_ingestion_address: The backup_ingestion_address of this IngestionInfo.
        :type backup_ingestion_address: str
        """

        self._backup_ingestion_address = backup_ingestion_address

    @property
    def ingestion_address(self):
        """Gets the ingestion_address of this IngestionInfo.

        The primary ingestion URL that you should use to stream video to YouTube. You must stream video to this URL. Depending on which application or tool you use to encode your video stream, you may need to enter the stream URL and stream name separately or you may need to concatenate them in the following format: *STREAM_URL/STREAM_NAME* 

        :return: The ingestion_address of this IngestionInfo.
        :rtype: str
        """
        return self._ingestion_address

    @ingestion_address.setter
    def ingestion_address(self, ingestion_address):
        """Sets the ingestion_address of this IngestionInfo.

        The primary ingestion URL that you should use to stream video to YouTube. You must stream video to this URL. Depending on which application or tool you use to encode your video stream, you may need to enter the stream URL and stream name separately or you may need to concatenate them in the following format: *STREAM_URL/STREAM_NAME* 

        :param ingestion_address: The ingestion_address of this IngestionInfo.
        :type ingestion_address: str
        """

        self._ingestion_address = ingestion_address

    @property
    def rtmps_backup_ingestion_address(self):
        """Gets the rtmps_backup_ingestion_address of this IngestionInfo.

        This ingestion url may be used instead of backupIngestionAddress in order to stream via RTMPS. Not applicable to non-RTMP streams.

        :return: The rtmps_backup_ingestion_address of this IngestionInfo.
        :rtype: str
        """
        return self._rtmps_backup_ingestion_address

    @rtmps_backup_ingestion_address.setter
    def rtmps_backup_ingestion_address(self, rtmps_backup_ingestion_address):
        """Sets the rtmps_backup_ingestion_address of this IngestionInfo.

        This ingestion url may be used instead of backupIngestionAddress in order to stream via RTMPS. Not applicable to non-RTMP streams.

        :param rtmps_backup_ingestion_address: The rtmps_backup_ingestion_address of this IngestionInfo.
        :type rtmps_backup_ingestion_address: str
        """

        self._rtmps_backup_ingestion_address = rtmps_backup_ingestion_address

    @property
    def rtmps_ingestion_address(self):
        """Gets the rtmps_ingestion_address of this IngestionInfo.

        This ingestion url may be used instead of ingestionAddress in order to stream via RTMPS. Not applicable to non-RTMP streams.

        :return: The rtmps_ingestion_address of this IngestionInfo.
        :rtype: str
        """
        return self._rtmps_ingestion_address

    @rtmps_ingestion_address.setter
    def rtmps_ingestion_address(self, rtmps_ingestion_address):
        """Sets the rtmps_ingestion_address of this IngestionInfo.

        This ingestion url may be used instead of ingestionAddress in order to stream via RTMPS. Not applicable to non-RTMP streams.

        :param rtmps_ingestion_address: The rtmps_ingestion_address of this IngestionInfo.
        :type rtmps_ingestion_address: str
        """

        self._rtmps_ingestion_address = rtmps_ingestion_address

    @property
    def stream_name(self):
        """Gets the stream_name of this IngestionInfo.

        The stream name that YouTube assigns to the video stream.

        :return: The stream_name of this IngestionInfo.
        :rtype: str
        """
        return self._stream_name

    @stream_name.setter
    def stream_name(self, stream_name):
        """Sets the stream_name of this IngestionInfo.

        The stream name that YouTube assigns to the video stream.

        :param stream_name: The stream_name of this IngestionInfo.
        :type stream_name: str
        """

        self._stream_name = stream_name
