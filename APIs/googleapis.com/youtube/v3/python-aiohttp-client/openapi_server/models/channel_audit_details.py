# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChannelAuditDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, community_guidelines_good_standing: bool=None, content_id_claims_good_standing: bool=None, copyright_strikes_good_standing: bool=None):
        """ChannelAuditDetails - a model defined in OpenAPI

        :param community_guidelines_good_standing: The community_guidelines_good_standing of this ChannelAuditDetails.
        :param content_id_claims_good_standing: The content_id_claims_good_standing of this ChannelAuditDetails.
        :param copyright_strikes_good_standing: The copyright_strikes_good_standing of this ChannelAuditDetails.
        """
        self.openapi_types = {
            'community_guidelines_good_standing': bool,
            'content_id_claims_good_standing': bool,
            'copyright_strikes_good_standing': bool
        }

        self.attribute_map = {
            'community_guidelines_good_standing': 'communityGuidelinesGoodStanding',
            'content_id_claims_good_standing': 'contentIdClaimsGoodStanding',
            'copyright_strikes_good_standing': 'copyrightStrikesGoodStanding'
        }

        self._community_guidelines_good_standing = community_guidelines_good_standing
        self._content_id_claims_good_standing = content_id_claims_good_standing
        self._copyright_strikes_good_standing = copyright_strikes_good_standing

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelAuditDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChannelAuditDetails of this ChannelAuditDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def community_guidelines_good_standing(self):
        """Gets the community_guidelines_good_standing of this ChannelAuditDetails.

        Whether or not the channel respects the community guidelines.

        :return: The community_guidelines_good_standing of this ChannelAuditDetails.
        :rtype: bool
        """
        return self._community_guidelines_good_standing

    @community_guidelines_good_standing.setter
    def community_guidelines_good_standing(self, community_guidelines_good_standing):
        """Sets the community_guidelines_good_standing of this ChannelAuditDetails.

        Whether or not the channel respects the community guidelines.

        :param community_guidelines_good_standing: The community_guidelines_good_standing of this ChannelAuditDetails.
        :type community_guidelines_good_standing: bool
        """

        self._community_guidelines_good_standing = community_guidelines_good_standing

    @property
    def content_id_claims_good_standing(self):
        """Gets the content_id_claims_good_standing of this ChannelAuditDetails.

        Whether or not the channel has any unresolved claims.

        :return: The content_id_claims_good_standing of this ChannelAuditDetails.
        :rtype: bool
        """
        return self._content_id_claims_good_standing

    @content_id_claims_good_standing.setter
    def content_id_claims_good_standing(self, content_id_claims_good_standing):
        """Sets the content_id_claims_good_standing of this ChannelAuditDetails.

        Whether or not the channel has any unresolved claims.

        :param content_id_claims_good_standing: The content_id_claims_good_standing of this ChannelAuditDetails.
        :type content_id_claims_good_standing: bool
        """

        self._content_id_claims_good_standing = content_id_claims_good_standing

    @property
    def copyright_strikes_good_standing(self):
        """Gets the copyright_strikes_good_standing of this ChannelAuditDetails.

        Whether or not the channel has any copyright strikes.

        :return: The copyright_strikes_good_standing of this ChannelAuditDetails.
        :rtype: bool
        """
        return self._copyright_strikes_good_standing

    @copyright_strikes_good_standing.setter
    def copyright_strikes_good_standing(self, copyright_strikes_good_standing):
        """Sets the copyright_strikes_good_standing of this ChannelAuditDetails.

        Whether or not the channel has any copyright strikes.

        :param copyright_strikes_good_standing: The copyright_strikes_good_standing of this ChannelAuditDetails.
        :type copyright_strikes_good_standing: bool
        """

        self._copyright_strikes_good_standing = copyright_strikes_good_standing
