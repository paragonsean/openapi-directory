# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LiveBroadcastStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, life_cycle_status: str=None, live_broadcast_priority: str=None, made_for_kids: bool=None, privacy_status: str=None, recording_status: str=None, self_declared_made_for_kids: bool=None):
        """LiveBroadcastStatus - a model defined in OpenAPI

        :param life_cycle_status: The life_cycle_status of this LiveBroadcastStatus.
        :param live_broadcast_priority: The live_broadcast_priority of this LiveBroadcastStatus.
        :param made_for_kids: The made_for_kids of this LiveBroadcastStatus.
        :param privacy_status: The privacy_status of this LiveBroadcastStatus.
        :param recording_status: The recording_status of this LiveBroadcastStatus.
        :param self_declared_made_for_kids: The self_declared_made_for_kids of this LiveBroadcastStatus.
        """
        self.openapi_types = {
            'life_cycle_status': str,
            'live_broadcast_priority': str,
            'made_for_kids': bool,
            'privacy_status': str,
            'recording_status': str,
            'self_declared_made_for_kids': bool
        }

        self.attribute_map = {
            'life_cycle_status': 'lifeCycleStatus',
            'live_broadcast_priority': 'liveBroadcastPriority',
            'made_for_kids': 'madeForKids',
            'privacy_status': 'privacyStatus',
            'recording_status': 'recordingStatus',
            'self_declared_made_for_kids': 'selfDeclaredMadeForKids'
        }

        self._life_cycle_status = life_cycle_status
        self._live_broadcast_priority = live_broadcast_priority
        self._made_for_kids = made_for_kids
        self._privacy_status = privacy_status
        self._recording_status = recording_status
        self._self_declared_made_for_kids = self_declared_made_for_kids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LiveBroadcastStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LiveBroadcastStatus of this LiveBroadcastStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def life_cycle_status(self):
        """Gets the life_cycle_status of this LiveBroadcastStatus.

        The broadcast's status. The status can be updated using the API's liveBroadcasts.transition method.

        :return: The life_cycle_status of this LiveBroadcastStatus.
        :rtype: str
        """
        return self._life_cycle_status

    @life_cycle_status.setter
    def life_cycle_status(self, life_cycle_status):
        """Sets the life_cycle_status of this LiveBroadcastStatus.

        The broadcast's status. The status can be updated using the API's liveBroadcasts.transition method.

        :param life_cycle_status: The life_cycle_status of this LiveBroadcastStatus.
        :type life_cycle_status: str
        """
        allowed_values = ["lifeCycleStatusUnspecified", "created", "ready", "testing", "live", "complete", "revoked", "testStarting", "liveStarting"]  # noqa: E501
        if life_cycle_status not in allowed_values:
            raise ValueError(
                "Invalid value for `life_cycle_status` ({0}), must be one of {1}"
                .format(life_cycle_status, allowed_values)
            )

        self._life_cycle_status = life_cycle_status

    @property
    def live_broadcast_priority(self):
        """Gets the live_broadcast_priority of this LiveBroadcastStatus.

        Priority of the live broadcast event (internal state).

        :return: The live_broadcast_priority of this LiveBroadcastStatus.
        :rtype: str
        """
        return self._live_broadcast_priority

    @live_broadcast_priority.setter
    def live_broadcast_priority(self, live_broadcast_priority):
        """Sets the live_broadcast_priority of this LiveBroadcastStatus.

        Priority of the live broadcast event (internal state).

        :param live_broadcast_priority: The live_broadcast_priority of this LiveBroadcastStatus.
        :type live_broadcast_priority: str
        """
        allowed_values = ["liveBroadcastPriorityUnspecified", "low", "normal", "high"]  # noqa: E501
        if live_broadcast_priority not in allowed_values:
            raise ValueError(
                "Invalid value for `live_broadcast_priority` ({0}), must be one of {1}"
                .format(live_broadcast_priority, allowed_values)
            )

        self._live_broadcast_priority = live_broadcast_priority

    @property
    def made_for_kids(self):
        """Gets the made_for_kids of this LiveBroadcastStatus.

        Whether the broadcast is made for kids or not, decided by YouTube instead of the creator. This field is read only.

        :return: The made_for_kids of this LiveBroadcastStatus.
        :rtype: bool
        """
        return self._made_for_kids

    @made_for_kids.setter
    def made_for_kids(self, made_for_kids):
        """Sets the made_for_kids of this LiveBroadcastStatus.

        Whether the broadcast is made for kids or not, decided by YouTube instead of the creator. This field is read only.

        :param made_for_kids: The made_for_kids of this LiveBroadcastStatus.
        :type made_for_kids: bool
        """

        self._made_for_kids = made_for_kids

    @property
    def privacy_status(self):
        """Gets the privacy_status of this LiveBroadcastStatus.

        The broadcast's privacy status. Note that the broadcast represents exactly one YouTube video, so the privacy settings are identical to those supported for videos. In addition, you can set this field by modifying the broadcast resource or by setting the privacyStatus field of the corresponding video resource.

        :return: The privacy_status of this LiveBroadcastStatus.
        :rtype: str
        """
        return self._privacy_status

    @privacy_status.setter
    def privacy_status(self, privacy_status):
        """Sets the privacy_status of this LiveBroadcastStatus.

        The broadcast's privacy status. Note that the broadcast represents exactly one YouTube video, so the privacy settings are identical to those supported for videos. In addition, you can set this field by modifying the broadcast resource or by setting the privacyStatus field of the corresponding video resource.

        :param privacy_status: The privacy_status of this LiveBroadcastStatus.
        :type privacy_status: str
        """
        allowed_values = ["public", "unlisted", "private"]  # noqa: E501
        if privacy_status not in allowed_values:
            raise ValueError(
                "Invalid value for `privacy_status` ({0}), must be one of {1}"
                .format(privacy_status, allowed_values)
            )

        self._privacy_status = privacy_status

    @property
    def recording_status(self):
        """Gets the recording_status of this LiveBroadcastStatus.

        The broadcast's recording status.

        :return: The recording_status of this LiveBroadcastStatus.
        :rtype: str
        """
        return self._recording_status

    @recording_status.setter
    def recording_status(self, recording_status):
        """Sets the recording_status of this LiveBroadcastStatus.

        The broadcast's recording status.

        :param recording_status: The recording_status of this LiveBroadcastStatus.
        :type recording_status: str
        """
        allowed_values = ["liveBroadcastRecordingStatusUnspecified", "notRecording", "recording", "recorded"]  # noqa: E501
        if recording_status not in allowed_values:
            raise ValueError(
                "Invalid value for `recording_status` ({0}), must be one of {1}"
                .format(recording_status, allowed_values)
            )

        self._recording_status = recording_status

    @property
    def self_declared_made_for_kids(self):
        """Gets the self_declared_made_for_kids of this LiveBroadcastStatus.

        This field will be set to True if the creator declares the broadcast to be kids only: go/live-cw-work.

        :return: The self_declared_made_for_kids of this LiveBroadcastStatus.
        :rtype: bool
        """
        return self._self_declared_made_for_kids

    @self_declared_made_for_kids.setter
    def self_declared_made_for_kids(self, self_declared_made_for_kids):
        """Sets the self_declared_made_for_kids of this LiveBroadcastStatus.

        This field will be set to True if the creator declares the broadcast to be kids only: go/live-cw-work.

        :param self_declared_made_for_kids: The self_declared_made_for_kids of this LiveBroadcastStatus.
        :type self_declared_made_for_kids: bool
        """

        self._self_declared_made_for_kids = self_declared_made_for_kids
