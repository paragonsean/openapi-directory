# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.playlist_content_details import PlaylistContentDetails
from openapi_server.models.playlist_localization import PlaylistLocalization
from openapi_server.models.playlist_player import PlaylistPlayer
from openapi_server.models.playlist_snippet import PlaylistSnippet
from openapi_server.models.playlist_status import PlaylistStatus
from openapi_server import util


class Playlist(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_details: PlaylistContentDetails=None, etag: str=None, id: str=None, kind: str='youtube#playlist', localizations: Dict[str, PlaylistLocalization]=None, player: PlaylistPlayer=None, snippet: PlaylistSnippet=None, status: PlaylistStatus=None):
        """Playlist - a model defined in OpenAPI

        :param content_details: The content_details of this Playlist.
        :param etag: The etag of this Playlist.
        :param id: The id of this Playlist.
        :param kind: The kind of this Playlist.
        :param localizations: The localizations of this Playlist.
        :param player: The player of this Playlist.
        :param snippet: The snippet of this Playlist.
        :param status: The status of this Playlist.
        """
        self.openapi_types = {
            'content_details': PlaylistContentDetails,
            'etag': str,
            'id': str,
            'kind': str,
            'localizations': Dict[str, PlaylistLocalization],
            'player': PlaylistPlayer,
            'snippet': PlaylistSnippet,
            'status': PlaylistStatus
        }

        self.attribute_map = {
            'content_details': 'contentDetails',
            'etag': 'etag',
            'id': 'id',
            'kind': 'kind',
            'localizations': 'localizations',
            'player': 'player',
            'snippet': 'snippet',
            'status': 'status'
        }

        self._content_details = content_details
        self._etag = etag
        self._id = id
        self._kind = kind
        self._localizations = localizations
        self._player = player
        self._snippet = snippet
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Playlist':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Playlist of this Playlist.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_details(self):
        """Gets the content_details of this Playlist.


        :return: The content_details of this Playlist.
        :rtype: PlaylistContentDetails
        """
        return self._content_details

    @content_details.setter
    def content_details(self, content_details):
        """Sets the content_details of this Playlist.


        :param content_details: The content_details of this Playlist.
        :type content_details: PlaylistContentDetails
        """

        self._content_details = content_details

    @property
    def etag(self):
        """Gets the etag of this Playlist.

        Etag of this resource.

        :return: The etag of this Playlist.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Playlist.

        Etag of this resource.

        :param etag: The etag of this Playlist.
        :type etag: str
        """

        self._etag = etag

    @property
    def id(self):
        """Gets the id of this Playlist.

        The ID that YouTube uses to uniquely identify the playlist.

        :return: The id of this Playlist.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Playlist.

        The ID that YouTube uses to uniquely identify the playlist.

        :param id: The id of this Playlist.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this Playlist.

        Identifies what kind of resource this is. Value: the fixed string \"youtube#playlist\".

        :return: The kind of this Playlist.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Playlist.

        Identifies what kind of resource this is. Value: the fixed string \"youtube#playlist\".

        :param kind: The kind of this Playlist.
        :type kind: str
        """

        self._kind = kind

    @property
    def localizations(self):
        """Gets the localizations of this Playlist.

        Localizations for different languages

        :return: The localizations of this Playlist.
        :rtype: Dict[str, PlaylistLocalization]
        """
        return self._localizations

    @localizations.setter
    def localizations(self, localizations):
        """Sets the localizations of this Playlist.

        Localizations for different languages

        :param localizations: The localizations of this Playlist.
        :type localizations: Dict[str, PlaylistLocalization]
        """

        self._localizations = localizations

    @property
    def player(self):
        """Gets the player of this Playlist.


        :return: The player of this Playlist.
        :rtype: PlaylistPlayer
        """
        return self._player

    @player.setter
    def player(self, player):
        """Sets the player of this Playlist.


        :param player: The player of this Playlist.
        :type player: PlaylistPlayer
        """

        self._player = player

    @property
    def snippet(self):
        """Gets the snippet of this Playlist.


        :return: The snippet of this Playlist.
        :rtype: PlaylistSnippet
        """
        return self._snippet

    @snippet.setter
    def snippet(self, snippet):
        """Sets the snippet of this Playlist.


        :param snippet: The snippet of this Playlist.
        :type snippet: PlaylistSnippet
        """

        self._snippet = snippet

    @property
    def status(self):
        """Gets the status of this Playlist.


        :return: The status of this Playlist.
        :rtype: PlaylistStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Playlist.


        :param status: The status of this Playlist.
        :type status: PlaylistStatus
        """

        self._status = status
