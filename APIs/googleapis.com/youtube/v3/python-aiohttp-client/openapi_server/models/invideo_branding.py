# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.invideo_position import InvideoPosition
from openapi_server.models.invideo_timing import InvideoTiming
from openapi_server import util


class InvideoBranding(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, image_bytes: str=None, image_url: str=None, position: InvideoPosition=None, target_channel_id: str=None, timing: InvideoTiming=None):
        """InvideoBranding - a model defined in OpenAPI

        :param image_bytes: The image_bytes of this InvideoBranding.
        :param image_url: The image_url of this InvideoBranding.
        :param position: The position of this InvideoBranding.
        :param target_channel_id: The target_channel_id of this InvideoBranding.
        :param timing: The timing of this InvideoBranding.
        """
        self.openapi_types = {
            'image_bytes': str,
            'image_url': str,
            'position': InvideoPosition,
            'target_channel_id': str,
            'timing': InvideoTiming
        }

        self.attribute_map = {
            'image_bytes': 'imageBytes',
            'image_url': 'imageUrl',
            'position': 'position',
            'target_channel_id': 'targetChannelId',
            'timing': 'timing'
        }

        self._image_bytes = image_bytes
        self._image_url = image_url
        self._position = position
        self._target_channel_id = target_channel_id
        self._timing = timing

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InvideoBranding':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InvideoBranding of this InvideoBranding.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def image_bytes(self):
        """Gets the image_bytes of this InvideoBranding.

        The bytes the uploaded image. Only used in api to youtube communication.

        :return: The image_bytes of this InvideoBranding.
        :rtype: str
        """
        return self._image_bytes

    @image_bytes.setter
    def image_bytes(self, image_bytes):
        """Sets the image_bytes of this InvideoBranding.

        The bytes the uploaded image. Only used in api to youtube communication.

        :param image_bytes: The image_bytes of this InvideoBranding.
        :type image_bytes: str
        """

        self._image_bytes = image_bytes

    @property
    def image_url(self):
        """Gets the image_url of this InvideoBranding.

        The url of the uploaded image. Only used in apiary to api communication.

        :return: The image_url of this InvideoBranding.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this InvideoBranding.

        The url of the uploaded image. Only used in apiary to api communication.

        :param image_url: The image_url of this InvideoBranding.
        :type image_url: str
        """

        self._image_url = image_url

    @property
    def position(self):
        """Gets the position of this InvideoBranding.


        :return: The position of this InvideoBranding.
        :rtype: InvideoPosition
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this InvideoBranding.


        :param position: The position of this InvideoBranding.
        :type position: InvideoPosition
        """

        self._position = position

    @property
    def target_channel_id(self):
        """Gets the target_channel_id of this InvideoBranding.

        The channel to which this branding links. If not present it defaults to the current channel.

        :return: The target_channel_id of this InvideoBranding.
        :rtype: str
        """
        return self._target_channel_id

    @target_channel_id.setter
    def target_channel_id(self, target_channel_id):
        """Sets the target_channel_id of this InvideoBranding.

        The channel to which this branding links. If not present it defaults to the current channel.

        :param target_channel_id: The target_channel_id of this InvideoBranding.
        :type target_channel_id: str
        """

        self._target_channel_id = target_channel_id

    @property
    def timing(self):
        """Gets the timing of this InvideoBranding.


        :return: The timing of this InvideoBranding.
        :rtype: InvideoTiming
        """
        return self._timing

    @timing.setter
    def timing(self, timing):
        """Sets the timing of this InvideoBranding.


        :param timing: The timing of this InvideoBranding.
        :type timing: InvideoTiming
        """

        self._timing = timing
