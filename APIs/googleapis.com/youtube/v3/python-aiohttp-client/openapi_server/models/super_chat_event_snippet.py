# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_profile_details import ChannelProfileDetails
from openapi_server.models.super_sticker_metadata import SuperStickerMetadata
from openapi_server import util


class SuperChatEventSnippet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount_micros: str=None, channel_id: str=None, comment_text: str=None, created_at: datetime=None, currency: str=None, display_string: str=None, is_super_sticker_event: bool=None, message_type: int=None, super_sticker_metadata: SuperStickerMetadata=None, supporter_details: ChannelProfileDetails=None):
        """SuperChatEventSnippet - a model defined in OpenAPI

        :param amount_micros: The amount_micros of this SuperChatEventSnippet.
        :param channel_id: The channel_id of this SuperChatEventSnippet.
        :param comment_text: The comment_text of this SuperChatEventSnippet.
        :param created_at: The created_at of this SuperChatEventSnippet.
        :param currency: The currency of this SuperChatEventSnippet.
        :param display_string: The display_string of this SuperChatEventSnippet.
        :param is_super_sticker_event: The is_super_sticker_event of this SuperChatEventSnippet.
        :param message_type: The message_type of this SuperChatEventSnippet.
        :param super_sticker_metadata: The super_sticker_metadata of this SuperChatEventSnippet.
        :param supporter_details: The supporter_details of this SuperChatEventSnippet.
        """
        self.openapi_types = {
            'amount_micros': str,
            'channel_id': str,
            'comment_text': str,
            'created_at': datetime,
            'currency': str,
            'display_string': str,
            'is_super_sticker_event': bool,
            'message_type': int,
            'super_sticker_metadata': SuperStickerMetadata,
            'supporter_details': ChannelProfileDetails
        }

        self.attribute_map = {
            'amount_micros': 'amountMicros',
            'channel_id': 'channelId',
            'comment_text': 'commentText',
            'created_at': 'createdAt',
            'currency': 'currency',
            'display_string': 'displayString',
            'is_super_sticker_event': 'isSuperStickerEvent',
            'message_type': 'messageType',
            'super_sticker_metadata': 'superStickerMetadata',
            'supporter_details': 'supporterDetails'
        }

        self._amount_micros = amount_micros
        self._channel_id = channel_id
        self._comment_text = comment_text
        self._created_at = created_at
        self._currency = currency
        self._display_string = display_string
        self._is_super_sticker_event = is_super_sticker_event
        self._message_type = message_type
        self._super_sticker_metadata = super_sticker_metadata
        self._supporter_details = supporter_details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SuperChatEventSnippet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SuperChatEventSnippet of this SuperChatEventSnippet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount_micros(self):
        """Gets the amount_micros of this SuperChatEventSnippet.

        The purchase amount, in micros of the purchase currency. e.g., 1 is represented as 1000000.

        :return: The amount_micros of this SuperChatEventSnippet.
        :rtype: str
        """
        return self._amount_micros

    @amount_micros.setter
    def amount_micros(self, amount_micros):
        """Sets the amount_micros of this SuperChatEventSnippet.

        The purchase amount, in micros of the purchase currency. e.g., 1 is represented as 1000000.

        :param amount_micros: The amount_micros of this SuperChatEventSnippet.
        :type amount_micros: str
        """

        self._amount_micros = amount_micros

    @property
    def channel_id(self):
        """Gets the channel_id of this SuperChatEventSnippet.

        Channel id where the event occurred.

        :return: The channel_id of this SuperChatEventSnippet.
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this SuperChatEventSnippet.

        Channel id where the event occurred.

        :param channel_id: The channel_id of this SuperChatEventSnippet.
        :type channel_id: str
        """

        self._channel_id = channel_id

    @property
    def comment_text(self):
        """Gets the comment_text of this SuperChatEventSnippet.

        The text contents of the comment left by the user.

        :return: The comment_text of this SuperChatEventSnippet.
        :rtype: str
        """
        return self._comment_text

    @comment_text.setter
    def comment_text(self, comment_text):
        """Sets the comment_text of this SuperChatEventSnippet.

        The text contents of the comment left by the user.

        :param comment_text: The comment_text of this SuperChatEventSnippet.
        :type comment_text: str
        """

        self._comment_text = comment_text

    @property
    def created_at(self):
        """Gets the created_at of this SuperChatEventSnippet.

        The date and time when the event occurred.

        :return: The created_at of this SuperChatEventSnippet.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SuperChatEventSnippet.

        The date and time when the event occurred.

        :param created_at: The created_at of this SuperChatEventSnippet.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def currency(self):
        """Gets the currency of this SuperChatEventSnippet.

        The currency in which the purchase was made. ISO 4217.

        :return: The currency of this SuperChatEventSnippet.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this SuperChatEventSnippet.

        The currency in which the purchase was made. ISO 4217.

        :param currency: The currency of this SuperChatEventSnippet.
        :type currency: str
        """

        self._currency = currency

    @property
    def display_string(self):
        """Gets the display_string of this SuperChatEventSnippet.

        A rendered string that displays the purchase amount and currency (e.g., \"$1.00\"). The string is rendered for the given language.

        :return: The display_string of this SuperChatEventSnippet.
        :rtype: str
        """
        return self._display_string

    @display_string.setter
    def display_string(self, display_string):
        """Sets the display_string of this SuperChatEventSnippet.

        A rendered string that displays the purchase amount and currency (e.g., \"$1.00\"). The string is rendered for the given language.

        :param display_string: The display_string of this SuperChatEventSnippet.
        :type display_string: str
        """

        self._display_string = display_string

    @property
    def is_super_sticker_event(self):
        """Gets the is_super_sticker_event of this SuperChatEventSnippet.

        True if this event is a Super Sticker event.

        :return: The is_super_sticker_event of this SuperChatEventSnippet.
        :rtype: bool
        """
        return self._is_super_sticker_event

    @is_super_sticker_event.setter
    def is_super_sticker_event(self, is_super_sticker_event):
        """Sets the is_super_sticker_event of this SuperChatEventSnippet.

        True if this event is a Super Sticker event.

        :param is_super_sticker_event: The is_super_sticker_event of this SuperChatEventSnippet.
        :type is_super_sticker_event: bool
        """

        self._is_super_sticker_event = is_super_sticker_event

    @property
    def message_type(self):
        """Gets the message_type of this SuperChatEventSnippet.

        The tier for the paid message, which is based on the amount of money spent to purchase the message.

        :return: The message_type of this SuperChatEventSnippet.
        :rtype: int
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """Sets the message_type of this SuperChatEventSnippet.

        The tier for the paid message, which is based on the amount of money spent to purchase the message.

        :param message_type: The message_type of this SuperChatEventSnippet.
        :type message_type: int
        """

        self._message_type = message_type

    @property
    def super_sticker_metadata(self):
        """Gets the super_sticker_metadata of this SuperChatEventSnippet.


        :return: The super_sticker_metadata of this SuperChatEventSnippet.
        :rtype: SuperStickerMetadata
        """
        return self._super_sticker_metadata

    @super_sticker_metadata.setter
    def super_sticker_metadata(self, super_sticker_metadata):
        """Sets the super_sticker_metadata of this SuperChatEventSnippet.


        :param super_sticker_metadata: The super_sticker_metadata of this SuperChatEventSnippet.
        :type super_sticker_metadata: SuperStickerMetadata
        """

        self._super_sticker_metadata = super_sticker_metadata

    @property
    def supporter_details(self):
        """Gets the supporter_details of this SuperChatEventSnippet.


        :return: The supporter_details of this SuperChatEventSnippet.
        :rtype: ChannelProfileDetails
        """
        return self._supporter_details

    @supporter_details.setter
    def supporter_details(self, supporter_details):
        """Sets the supporter_details of this SuperChatEventSnippet.


        :param supporter_details: The supporter_details of this SuperChatEventSnippet.
        :type supporter_details: ChannelProfileDetails
        """

        self._supporter_details = supporter_details
