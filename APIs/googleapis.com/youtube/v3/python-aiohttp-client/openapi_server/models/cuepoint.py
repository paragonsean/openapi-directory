# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Cuepoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cue_type: str=None, duration_secs: int=None, etag: str=None, id: str=None, insertion_offset_time_ms: str=None, walltime_ms: str=None):
        """Cuepoint - a model defined in OpenAPI

        :param cue_type: The cue_type of this Cuepoint.
        :param duration_secs: The duration_secs of this Cuepoint.
        :param etag: The etag of this Cuepoint.
        :param id: The id of this Cuepoint.
        :param insertion_offset_time_ms: The insertion_offset_time_ms of this Cuepoint.
        :param walltime_ms: The walltime_ms of this Cuepoint.
        """
        self.openapi_types = {
            'cue_type': str,
            'duration_secs': int,
            'etag': str,
            'id': str,
            'insertion_offset_time_ms': str,
            'walltime_ms': str
        }

        self.attribute_map = {
            'cue_type': 'cueType',
            'duration_secs': 'durationSecs',
            'etag': 'etag',
            'id': 'id',
            'insertion_offset_time_ms': 'insertionOffsetTimeMs',
            'walltime_ms': 'walltimeMs'
        }

        self._cue_type = cue_type
        self._duration_secs = duration_secs
        self._etag = etag
        self._id = id
        self._insertion_offset_time_ms = insertion_offset_time_ms
        self._walltime_ms = walltime_ms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Cuepoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Cuepoint of this Cuepoint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cue_type(self):
        """Gets the cue_type of this Cuepoint.


        :return: The cue_type of this Cuepoint.
        :rtype: str
        """
        return self._cue_type

    @cue_type.setter
    def cue_type(self, cue_type):
        """Sets the cue_type of this Cuepoint.


        :param cue_type: The cue_type of this Cuepoint.
        :type cue_type: str
        """
        allowed_values = ["cueTypeUnspecified", "cueTypeAd"]  # noqa: E501
        if cue_type not in allowed_values:
            raise ValueError(
                "Invalid value for `cue_type` ({0}), must be one of {1}"
                .format(cue_type, allowed_values)
            )

        self._cue_type = cue_type

    @property
    def duration_secs(self):
        """Gets the duration_secs of this Cuepoint.

        The duration of this cuepoint.

        :return: The duration_secs of this Cuepoint.
        :rtype: int
        """
        return self._duration_secs

    @duration_secs.setter
    def duration_secs(self, duration_secs):
        """Sets the duration_secs of this Cuepoint.

        The duration of this cuepoint.

        :param duration_secs: The duration_secs of this Cuepoint.
        :type duration_secs: int
        """

        self._duration_secs = duration_secs

    @property
    def etag(self):
        """Gets the etag of this Cuepoint.


        :return: The etag of this Cuepoint.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Cuepoint.


        :param etag: The etag of this Cuepoint.
        :type etag: str
        """

        self._etag = etag

    @property
    def id(self):
        """Gets the id of this Cuepoint.

        The identifier for cuepoint resource.

        :return: The id of this Cuepoint.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Cuepoint.

        The identifier for cuepoint resource.

        :param id: The id of this Cuepoint.
        :type id: str
        """

        self._id = id

    @property
    def insertion_offset_time_ms(self):
        """Gets the insertion_offset_time_ms of this Cuepoint.

        The time when the cuepoint should be inserted by offset to the broadcast actual start time.

        :return: The insertion_offset_time_ms of this Cuepoint.
        :rtype: str
        """
        return self._insertion_offset_time_ms

    @insertion_offset_time_ms.setter
    def insertion_offset_time_ms(self, insertion_offset_time_ms):
        """Sets the insertion_offset_time_ms of this Cuepoint.

        The time when the cuepoint should be inserted by offset to the broadcast actual start time.

        :param insertion_offset_time_ms: The insertion_offset_time_ms of this Cuepoint.
        :type insertion_offset_time_ms: str
        """

        self._insertion_offset_time_ms = insertion_offset_time_ms

    @property
    def walltime_ms(self):
        """Gets the walltime_ms of this Cuepoint.

        The wall clock time at which the cuepoint should be inserted. Only one of insertion_offset_time_ms and walltime_ms may be set at a time.

        :return: The walltime_ms of this Cuepoint.
        :rtype: str
        """
        return self._walltime_ms

    @walltime_ms.setter
    def walltime_ms(self, walltime_ms):
        """Sets the walltime_ms of this Cuepoint.

        The wall clock time at which the cuepoint should be inserted. Only one of insertion_offset_time_ms and walltime_ms may be set at a time.

        :param walltime_ms: The walltime_ms of this Cuepoint.
        :type walltime_ms: str
        """

        self._walltime_ms = walltime_ms
