# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.live_broadcast_content_details import LiveBroadcastContentDetails
from openapi_server.models.live_broadcast_monetization_details import LiveBroadcastMonetizationDetails
from openapi_server.models.live_broadcast_snippet import LiveBroadcastSnippet
from openapi_server.models.live_broadcast_statistics import LiveBroadcastStatistics
from openapi_server.models.live_broadcast_status import LiveBroadcastStatus
from openapi_server import util


class LiveBroadcast(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_details: LiveBroadcastContentDetails=None, etag: str=None, id: str=None, kind: str='youtube#liveBroadcast', monetization_details: LiveBroadcastMonetizationDetails=None, snippet: LiveBroadcastSnippet=None, statistics: LiveBroadcastStatistics=None, status: LiveBroadcastStatus=None):
        """LiveBroadcast - a model defined in OpenAPI

        :param content_details: The content_details of this LiveBroadcast.
        :param etag: The etag of this LiveBroadcast.
        :param id: The id of this LiveBroadcast.
        :param kind: The kind of this LiveBroadcast.
        :param monetization_details: The monetization_details of this LiveBroadcast.
        :param snippet: The snippet of this LiveBroadcast.
        :param statistics: The statistics of this LiveBroadcast.
        :param status: The status of this LiveBroadcast.
        """
        self.openapi_types = {
            'content_details': LiveBroadcastContentDetails,
            'etag': str,
            'id': str,
            'kind': str,
            'monetization_details': LiveBroadcastMonetizationDetails,
            'snippet': LiveBroadcastSnippet,
            'statistics': LiveBroadcastStatistics,
            'status': LiveBroadcastStatus
        }

        self.attribute_map = {
            'content_details': 'contentDetails',
            'etag': 'etag',
            'id': 'id',
            'kind': 'kind',
            'monetization_details': 'monetizationDetails',
            'snippet': 'snippet',
            'statistics': 'statistics',
            'status': 'status'
        }

        self._content_details = content_details
        self._etag = etag
        self._id = id
        self._kind = kind
        self._monetization_details = monetization_details
        self._snippet = snippet
        self._statistics = statistics
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LiveBroadcast':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LiveBroadcast of this LiveBroadcast.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_details(self):
        """Gets the content_details of this LiveBroadcast.


        :return: The content_details of this LiveBroadcast.
        :rtype: LiveBroadcastContentDetails
        """
        return self._content_details

    @content_details.setter
    def content_details(self, content_details):
        """Sets the content_details of this LiveBroadcast.


        :param content_details: The content_details of this LiveBroadcast.
        :type content_details: LiveBroadcastContentDetails
        """

        self._content_details = content_details

    @property
    def etag(self):
        """Gets the etag of this LiveBroadcast.

        Etag of this resource.

        :return: The etag of this LiveBroadcast.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this LiveBroadcast.

        Etag of this resource.

        :param etag: The etag of this LiveBroadcast.
        :type etag: str
        """

        self._etag = etag

    @property
    def id(self):
        """Gets the id of this LiveBroadcast.

        The ID that YouTube assigns to uniquely identify the broadcast.

        :return: The id of this LiveBroadcast.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LiveBroadcast.

        The ID that YouTube assigns to uniquely identify the broadcast.

        :param id: The id of this LiveBroadcast.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this LiveBroadcast.

        Identifies what kind of resource this is. Value: the fixed string \"youtube#liveBroadcast\".

        :return: The kind of this LiveBroadcast.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this LiveBroadcast.

        Identifies what kind of resource this is. Value: the fixed string \"youtube#liveBroadcast\".

        :param kind: The kind of this LiveBroadcast.
        :type kind: str
        """

        self._kind = kind

    @property
    def monetization_details(self):
        """Gets the monetization_details of this LiveBroadcast.


        :return: The monetization_details of this LiveBroadcast.
        :rtype: LiveBroadcastMonetizationDetails
        """
        return self._monetization_details

    @monetization_details.setter
    def monetization_details(self, monetization_details):
        """Sets the monetization_details of this LiveBroadcast.


        :param monetization_details: The monetization_details of this LiveBroadcast.
        :type monetization_details: LiveBroadcastMonetizationDetails
        """

        self._monetization_details = monetization_details

    @property
    def snippet(self):
        """Gets the snippet of this LiveBroadcast.


        :return: The snippet of this LiveBroadcast.
        :rtype: LiveBroadcastSnippet
        """
        return self._snippet

    @snippet.setter
    def snippet(self, snippet):
        """Sets the snippet of this LiveBroadcast.


        :param snippet: The snippet of this LiveBroadcast.
        :type snippet: LiveBroadcastSnippet
        """

        self._snippet = snippet

    @property
    def statistics(self):
        """Gets the statistics of this LiveBroadcast.


        :return: The statistics of this LiveBroadcast.
        :rtype: LiveBroadcastStatistics
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this LiveBroadcast.


        :param statistics: The statistics of this LiveBroadcast.
        :type statistics: LiveBroadcastStatistics
        """

        self._statistics = statistics

    @property
    def status(self):
        """Gets the status of this LiveBroadcast.


        :return: The status of this LiveBroadcast.
        :rtype: LiveBroadcastStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LiveBroadcast.


        :param status: The status of this LiveBroadcast.
        :type status: LiveBroadcastStatus
        """

        self._status = status
