# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LiveStreamConfigurationIssue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, reason: str=None, severity: str=None, type: str=None):
        """LiveStreamConfigurationIssue - a model defined in OpenAPI

        :param description: The description of this LiveStreamConfigurationIssue.
        :param reason: The reason of this LiveStreamConfigurationIssue.
        :param severity: The severity of this LiveStreamConfigurationIssue.
        :param type: The type of this LiveStreamConfigurationIssue.
        """
        self.openapi_types = {
            'description': str,
            'reason': str,
            'severity': str,
            'type': str
        }

        self.attribute_map = {
            'description': 'description',
            'reason': 'reason',
            'severity': 'severity',
            'type': 'type'
        }

        self._description = description
        self._reason = reason
        self._severity = severity
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LiveStreamConfigurationIssue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LiveStreamConfigurationIssue of this LiveStreamConfigurationIssue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this LiveStreamConfigurationIssue.

        The long-form description of the issue and how to resolve it.

        :return: The description of this LiveStreamConfigurationIssue.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LiveStreamConfigurationIssue.

        The long-form description of the issue and how to resolve it.

        :param description: The description of this LiveStreamConfigurationIssue.
        :type description: str
        """

        self._description = description

    @property
    def reason(self):
        """Gets the reason of this LiveStreamConfigurationIssue.

        The short-form reason for this issue.

        :return: The reason of this LiveStreamConfigurationIssue.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this LiveStreamConfigurationIssue.

        The short-form reason for this issue.

        :param reason: The reason of this LiveStreamConfigurationIssue.
        :type reason: str
        """

        self._reason = reason

    @property
    def severity(self):
        """Gets the severity of this LiveStreamConfigurationIssue.

        How severe this issue is to the stream.

        :return: The severity of this LiveStreamConfigurationIssue.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this LiveStreamConfigurationIssue.

        How severe this issue is to the stream.

        :param severity: The severity of this LiveStreamConfigurationIssue.
        :type severity: str
        """
        allowed_values = ["info", "warning", "error"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def type(self):
        """Gets the type of this LiveStreamConfigurationIssue.

        The kind of error happening.

        :return: The type of this LiveStreamConfigurationIssue.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LiveStreamConfigurationIssue.

        The kind of error happening.

        :param type: The type of this LiveStreamConfigurationIssue.
        :type type: str
        """
        allowed_values = ["gopSizeOver", "gopSizeLong", "gopSizeShort", "openGop", "badContainer", "audioBitrateHigh", "audioBitrateLow", "audioSampleRate", "bitrateHigh", "bitrateLow", "audioCodec", "videoCodec", "noAudioStream", "noVideoStream", "multipleVideoStreams", "multipleAudioStreams", "audioTooManyChannels", "interlacedVideo", "frameRateHigh", "resolutionMismatch", "videoCodecMismatch", "videoInterlaceMismatch", "videoProfileMismatch", "videoBitrateMismatch", "framerateMismatch", "gopMismatch", "audioSampleRateMismatch", "audioStereoMismatch", "audioCodecMismatch", "audioBitrateMismatch", "videoResolutionSuboptimal", "videoResolutionUnsupported", "videoIngestionStarved", "videoIngestionFasterThanRealtime"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
