# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.thumbnail_details import ThumbnailDetails
from openapi_server import util


class ActivitySnippet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_id: str=None, channel_title: str=None, description: str=None, group_id: str=None, published_at: datetime=None, thumbnails: ThumbnailDetails=None, title: str=None, type: str=None):
        """ActivitySnippet - a model defined in OpenAPI

        :param channel_id: The channel_id of this ActivitySnippet.
        :param channel_title: The channel_title of this ActivitySnippet.
        :param description: The description of this ActivitySnippet.
        :param group_id: The group_id of this ActivitySnippet.
        :param published_at: The published_at of this ActivitySnippet.
        :param thumbnails: The thumbnails of this ActivitySnippet.
        :param title: The title of this ActivitySnippet.
        :param type: The type of this ActivitySnippet.
        """
        self.openapi_types = {
            'channel_id': str,
            'channel_title': str,
            'description': str,
            'group_id': str,
            'published_at': datetime,
            'thumbnails': ThumbnailDetails,
            'title': str,
            'type': str
        }

        self.attribute_map = {
            'channel_id': 'channelId',
            'channel_title': 'channelTitle',
            'description': 'description',
            'group_id': 'groupId',
            'published_at': 'publishedAt',
            'thumbnails': 'thumbnails',
            'title': 'title',
            'type': 'type'
        }

        self._channel_id = channel_id
        self._channel_title = channel_title
        self._description = description
        self._group_id = group_id
        self._published_at = published_at
        self._thumbnails = thumbnails
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActivitySnippet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActivitySnippet of this ActivitySnippet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_id(self):
        """Gets the channel_id of this ActivitySnippet.

        The ID that YouTube uses to uniquely identify the channel associated with the activity.

        :return: The channel_id of this ActivitySnippet.
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this ActivitySnippet.

        The ID that YouTube uses to uniquely identify the channel associated with the activity.

        :param channel_id: The channel_id of this ActivitySnippet.
        :type channel_id: str
        """

        self._channel_id = channel_id

    @property
    def channel_title(self):
        """Gets the channel_title of this ActivitySnippet.

        Channel title for the channel responsible for this activity

        :return: The channel_title of this ActivitySnippet.
        :rtype: str
        """
        return self._channel_title

    @channel_title.setter
    def channel_title(self, channel_title):
        """Sets the channel_title of this ActivitySnippet.

        Channel title for the channel responsible for this activity

        :param channel_title: The channel_title of this ActivitySnippet.
        :type channel_title: str
        """

        self._channel_title = channel_title

    @property
    def description(self):
        """Gets the description of this ActivitySnippet.

        The description of the resource primarily associated with the activity. @mutable youtube.activities.insert

        :return: The description of this ActivitySnippet.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ActivitySnippet.

        The description of the resource primarily associated with the activity. @mutable youtube.activities.insert

        :param description: The description of this ActivitySnippet.
        :type description: str
        """

        self._description = description

    @property
    def group_id(self):
        """Gets the group_id of this ActivitySnippet.

        The group ID associated with the activity. A group ID identifies user events that are associated with the same user and resource. For example, if a user rates a video and marks the same video as a favorite, the entries for those events would have the same group ID in the user's activity feed. In your user interface, you can avoid repetition by grouping events with the same groupId value.

        :return: The group_id of this ActivitySnippet.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this ActivitySnippet.

        The group ID associated with the activity. A group ID identifies user events that are associated with the same user and resource. For example, if a user rates a video and marks the same video as a favorite, the entries for those events would have the same group ID in the user's activity feed. In your user interface, you can avoid repetition by grouping events with the same groupId value.

        :param group_id: The group_id of this ActivitySnippet.
        :type group_id: str
        """

        self._group_id = group_id

    @property
    def published_at(self):
        """Gets the published_at of this ActivitySnippet.

        The date and time that the video was uploaded.

        :return: The published_at of this ActivitySnippet.
        :rtype: datetime
        """
        return self._published_at

    @published_at.setter
    def published_at(self, published_at):
        """Sets the published_at of this ActivitySnippet.

        The date and time that the video was uploaded.

        :param published_at: The published_at of this ActivitySnippet.
        :type published_at: datetime
        """

        self._published_at = published_at

    @property
    def thumbnails(self):
        """Gets the thumbnails of this ActivitySnippet.


        :return: The thumbnails of this ActivitySnippet.
        :rtype: ThumbnailDetails
        """
        return self._thumbnails

    @thumbnails.setter
    def thumbnails(self, thumbnails):
        """Sets the thumbnails of this ActivitySnippet.


        :param thumbnails: The thumbnails of this ActivitySnippet.
        :type thumbnails: ThumbnailDetails
        """

        self._thumbnails = thumbnails

    @property
    def title(self):
        """Gets the title of this ActivitySnippet.

        The title of the resource primarily associated with the activity.

        :return: The title of this ActivitySnippet.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ActivitySnippet.

        The title of the resource primarily associated with the activity.

        :param title: The title of this ActivitySnippet.
        :type title: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this ActivitySnippet.

        The type of activity that the resource describes.

        :return: The type of this ActivitySnippet.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ActivitySnippet.

        The type of activity that the resource describes.

        :param type: The type of this ActivitySnippet.
        :type type: str
        """
        allowed_values = ["typeUnspecified", "upload", "like", "favorite", "comment", "subscription", "playlistItem", "recommendation", "bulletin", "social", "channelItem", "promotedItem"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
