/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CommentThread from '../model/CommentThread';
import CommentThreadListResponse from '../model/CommentThreadListResponse';

/**
* CommentThreads service.
* @module api/CommentThreadsApi
* @version v3
*/
export default class CommentThreadsApi {

    /**
    * Constructs a new CommentThreadsApi. 
    * @alias module:api/CommentThreadsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the youtubeCommentThreadsInsert operation.
     * @callback module:api/CommentThreadsApi~youtubeCommentThreadsInsertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentThread} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inserts a new resource into this collection.
     * @param {Array.<String>} part The *part* parameter identifies the properties that the API response will include. Set the parameter value to snippet. The snippet part has a quota cost of 2 units.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/CommentThread} [commentThread] 
     * @param {module:api/CommentThreadsApi~youtubeCommentThreadsInsertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentThread}
     */
    youtubeCommentThreadsInsert(part, opts, callback) {
      opts = opts || {};
      let postBody = opts['commentThread'];
      // verify the required parameter 'part' is set
      if (part === undefined || part === null) {
        throw new Error("Missing the required parameter 'part' when calling youtubeCommentThreadsInsert");
      }

      let pathParams = {
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'part': this.apiClient.buildCollectionParam(part, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CommentThread;
      return this.apiClient.callApi(
        '/youtube/v3/commentThreads', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the youtubeCommentThreadsList operation.
     * @callback module:api/CommentThreadsApi~youtubeCommentThreadsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentThreadListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of resources, possibly filtered.
     * @param {Array.<String>} part The *part* parameter specifies a comma-separated list of one or more commentThread resource properties that the API response will include.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [allThreadsRelatedToChannelId] Returns the comment threads of all videos of the channel and the channel comments as well.
     * @param {String} [channelId] Returns the comment threads for all the channel comments (ie does not include comments left on videos).
     * @param {Array.<String>} [id] Returns the comment threads with the given IDs for Stubby or Apiary.
     * @param {Number} [maxResults] The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
     * @param {module:model/String} [moderationStatus] Limits the returned comment threads to those with the specified moderation status. Not compatible with the 'id' filter. Valid values: published, heldForReview, likelySpam.
     * @param {module:model/String} [order] 
     * @param {String} [pageToken] The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
     * @param {String} [searchTerms] Limits the returned comment threads to those matching the specified key words. Not compatible with the 'id' filter.
     * @param {module:model/String} [textFormat] The requested text format for the returned comments.
     * @param {String} [videoId] Returns the comment threads of the specified video.
     * @param {module:api/CommentThreadsApi~youtubeCommentThreadsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentThreadListResponse}
     */
    youtubeCommentThreadsList(part, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'part' is set
      if (part === undefined || part === null) {
        throw new Error("Missing the required parameter 'part' when calling youtubeCommentThreadsList");
      }

      let pathParams = {
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'part': this.apiClient.buildCollectionParam(part, 'multi'),
        'allThreadsRelatedToChannelId': opts['allThreadsRelatedToChannelId'],
        'channelId': opts['channelId'],
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'maxResults': opts['maxResults'],
        'moderationStatus': opts['moderationStatus'],
        'order': opts['order'],
        'pageToken': opts['pageToken'],
        'searchTerms': opts['searchTerms'],
        'textFormat': opts['textFormat'],
        'videoId': opts['videoId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CommentThreadListResponse;
      return this.apiClient.callApi(
        '/youtube/v3/commentThreads', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
