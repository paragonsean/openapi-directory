/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VideoSuggestionsTagSuggestion from './VideoSuggestionsTagSuggestion';

/**
 * The VideoSuggestions model module.
 * @module model/VideoSuggestions
 * @version v3
 */
class VideoSuggestions {
    /**
     * Constructs a new <code>VideoSuggestions</code>.
     * Specifies suggestions on how to improve video content, including encoding hints, tag suggestions, and editor suggestions.
     * @alias module:model/VideoSuggestions
     */
    constructor() { 
        
        VideoSuggestions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VideoSuggestions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VideoSuggestions} obj Optional instance to populate.
     * @return {module:model/VideoSuggestions} The populated <code>VideoSuggestions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VideoSuggestions();

            if (data.hasOwnProperty('editorSuggestions')) {
                obj['editorSuggestions'] = ApiClient.convertToType(data['editorSuggestions'], ['String']);
            }
            if (data.hasOwnProperty('processingErrors')) {
                obj['processingErrors'] = ApiClient.convertToType(data['processingErrors'], ['String']);
            }
            if (data.hasOwnProperty('processingHints')) {
                obj['processingHints'] = ApiClient.convertToType(data['processingHints'], ['String']);
            }
            if (data.hasOwnProperty('processingWarnings')) {
                obj['processingWarnings'] = ApiClient.convertToType(data['processingWarnings'], ['String']);
            }
            if (data.hasOwnProperty('tagSuggestions')) {
                obj['tagSuggestions'] = ApiClient.convertToType(data['tagSuggestions'], [VideoSuggestionsTagSuggestion]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VideoSuggestions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VideoSuggestions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['editorSuggestions'])) {
            throw new Error("Expected the field `editorSuggestions` to be an array in the JSON data but got " + data['editorSuggestions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['processingErrors'])) {
            throw new Error("Expected the field `processingErrors` to be an array in the JSON data but got " + data['processingErrors']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['processingHints'])) {
            throw new Error("Expected the field `processingHints` to be an array in the JSON data but got " + data['processingHints']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['processingWarnings'])) {
            throw new Error("Expected the field `processingWarnings` to be an array in the JSON data but got " + data['processingWarnings']);
        }
        if (data['tagSuggestions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tagSuggestions'])) {
                throw new Error("Expected the field `tagSuggestions` to be an array in the JSON data but got " + data['tagSuggestions']);
            }
            // validate the optional field `tagSuggestions` (array)
            for (const item of data['tagSuggestions']) {
                VideoSuggestionsTagSuggestion.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * A list of video editing operations that might improve the video quality or playback experience of the uploaded video.
 * @member {Array.<module:model/VideoSuggestions.EditorSuggestionsEnum>} editorSuggestions
 */
VideoSuggestions.prototype['editorSuggestions'] = undefined;

/**
 * A list of errors that will prevent YouTube from successfully processing the uploaded video video. These errors indicate that, regardless of the video's current processing status, eventually, that status will almost certainly be failed.
 * @member {Array.<module:model/VideoSuggestions.ProcessingErrorsEnum>} processingErrors
 */
VideoSuggestions.prototype['processingErrors'] = undefined;

/**
 * A list of suggestions that may improve YouTube's ability to process the video.
 * @member {Array.<module:model/VideoSuggestions.ProcessingHintsEnum>} processingHints
 */
VideoSuggestions.prototype['processingHints'] = undefined;

/**
 * A list of reasons why YouTube may have difficulty transcoding the uploaded video or that might result in an erroneous transcoding. These warnings are generated before YouTube actually processes the uploaded video file. In addition, they identify issues that are unlikely to cause the video processing to fail but that might cause problems such as sync issues, video artifacts, or a missing audio track.
 * @member {Array.<module:model/VideoSuggestions.ProcessingWarningsEnum>} processingWarnings
 */
VideoSuggestions.prototype['processingWarnings'] = undefined;

/**
 * A list of keyword tags that could be added to the video's metadata to increase the likelihood that users will locate your video when searching or browsing on YouTube.
 * @member {Array.<module:model/VideoSuggestionsTagSuggestion>} tagSuggestions
 */
VideoSuggestions.prototype['tagSuggestions'] = undefined;





/**
 * Allowed values for the <code>editorSuggestions</code> property.
 * @enum {String}
 * @readonly
 */
VideoSuggestions['EditorSuggestionsEnum'] = {

    /**
     * value: "videoAutoLevels"
     * @const
     */
    "videoAutoLevels": "videoAutoLevels",

    /**
     * value: "videoStabilize"
     * @const
     */
    "videoStabilize": "videoStabilize",

    /**
     * value: "videoCrop"
     * @const
     */
    "videoCrop": "videoCrop",

    /**
     * value: "audioQuietAudioSwap"
     * @const
     */
    "audioQuietAudioSwap": "audioQuietAudioSwap"
};


/**
 * Allowed values for the <code>processingErrors</code> property.
 * @enum {String}
 * @readonly
 */
VideoSuggestions['ProcessingErrorsEnum'] = {

    /**
     * value: "audioFile"
     * @const
     */
    "audioFile": "audioFile",

    /**
     * value: "imageFile"
     * @const
     */
    "imageFile": "imageFile",

    /**
     * value: "projectFile"
     * @const
     */
    "projectFile": "projectFile",

    /**
     * value: "notAVideoFile"
     * @const
     */
    "notAVideoFile": "notAVideoFile",

    /**
     * value: "docFile"
     * @const
     */
    "docFile": "docFile",

    /**
     * value: "archiveFile"
     * @const
     */
    "archiveFile": "archiveFile",

    /**
     * value: "unsupportedSpatialAudioLayout"
     * @const
     */
    "unsupportedSpatialAudioLayout": "unsupportedSpatialAudioLayout"
};


/**
 * Allowed values for the <code>processingHints</code> property.
 * @enum {String}
 * @readonly
 */
VideoSuggestions['ProcessingHintsEnum'] = {

    /**
     * value: "nonStreamableMov"
     * @const
     */
    "nonStreamableMov": "nonStreamableMov",

    /**
     * value: "sendBestQualityVideo"
     * @const
     */
    "sendBestQualityVideo": "sendBestQualityVideo",

    /**
     * value: "sphericalVideo"
     * @const
     */
    "sphericalVideo": "sphericalVideo",

    /**
     * value: "spatialAudio"
     * @const
     */
    "spatialAudio": "spatialAudio",

    /**
     * value: "vrVideo"
     * @const
     */
    "vrVideo": "vrVideo",

    /**
     * value: "hdrVideo"
     * @const
     */
    "hdrVideo": "hdrVideo"
};


/**
 * Allowed values for the <code>processingWarnings</code> property.
 * @enum {String}
 * @readonly
 */
VideoSuggestions['ProcessingWarningsEnum'] = {

    /**
     * value: "unknownContainer"
     * @const
     */
    "unknownContainer": "unknownContainer",

    /**
     * value: "unknownVideoCodec"
     * @const
     */
    "unknownVideoCodec": "unknownVideoCodec",

    /**
     * value: "unknownAudioCodec"
     * @const
     */
    "unknownAudioCodec": "unknownAudioCodec",

    /**
     * value: "inconsistentResolution"
     * @const
     */
    "inconsistentResolution": "inconsistentResolution",

    /**
     * value: "hasEditlist"
     * @const
     */
    "hasEditlist": "hasEditlist",

    /**
     * value: "problematicVideoCodec"
     * @const
     */
    "problematicVideoCodec": "problematicVideoCodec",

    /**
     * value: "problematicAudioCodec"
     * @const
     */
    "problematicAudioCodec": "problematicAudioCodec",

    /**
     * value: "unsupportedVrStereoMode"
     * @const
     */
    "unsupportedVrStereoMode": "unsupportedVrStereoMode",

    /**
     * value: "unsupportedSphericalProjectionType"
     * @const
     */
    "unsupportedSphericalProjectionType": "unsupportedSphericalProjectionType",

    /**
     * value: "unsupportedHdrPixelFormat"
     * @const
     */
    "unsupportedHdrPixelFormat": "unsupportedHdrPixelFormat",

    /**
     * value: "unsupportedHdrColorMetadata"
     * @const
     */
    "unsupportedHdrColorMetadata": "unsupportedHdrColorMetadata",

    /**
     * value: "problematicHdrLookupTable"
     * @const
     */
    "problematicHdrLookupTable": "problematicHdrLookupTable"
};



export default VideoSuggestions;

