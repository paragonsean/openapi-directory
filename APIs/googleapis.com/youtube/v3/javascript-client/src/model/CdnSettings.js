/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IngestionInfo from './IngestionInfo';

/**
 * The CdnSettings model module.
 * @module model/CdnSettings
 * @version v3
 */
class CdnSettings {
    /**
     * Constructs a new <code>CdnSettings</code>.
     * Brief description of the live stream cdn settings.
     * @alias module:model/CdnSettings
     */
    constructor() { 
        
        CdnSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CdnSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CdnSettings} obj Optional instance to populate.
     * @return {module:model/CdnSettings} The populated <code>CdnSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CdnSettings();

            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('frameRate')) {
                obj['frameRate'] = ApiClient.convertToType(data['frameRate'], 'String');
            }
            if (data.hasOwnProperty('ingestionInfo')) {
                obj['ingestionInfo'] = IngestionInfo.constructFromObject(data['ingestionInfo']);
            }
            if (data.hasOwnProperty('ingestionType')) {
                obj['ingestionType'] = ApiClient.convertToType(data['ingestionType'], 'String');
            }
            if (data.hasOwnProperty('resolution')) {
                obj['resolution'] = ApiClient.convertToType(data['resolution'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CdnSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CdnSettings</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // ensure the json data is a string
        if (data['frameRate'] && !(typeof data['frameRate'] === 'string' || data['frameRate'] instanceof String)) {
            throw new Error("Expected the field `frameRate` to be a primitive type in the JSON string but got " + data['frameRate']);
        }
        // validate the optional field `ingestionInfo`
        if (data['ingestionInfo']) { // data not null
          IngestionInfo.validateJSON(data['ingestionInfo']);
        }
        // ensure the json data is a string
        if (data['ingestionType'] && !(typeof data['ingestionType'] === 'string' || data['ingestionType'] instanceof String)) {
            throw new Error("Expected the field `ingestionType` to be a primitive type in the JSON string but got " + data['ingestionType']);
        }
        // ensure the json data is a string
        if (data['resolution'] && !(typeof data['resolution'] === 'string' || data['resolution'] instanceof String)) {
            throw new Error("Expected the field `resolution` to be a primitive type in the JSON string but got " + data['resolution']);
        }

        return true;
    }


}



/**
 * The format of the video stream that you are sending to Youtube. 
 * @member {String} format
 */
CdnSettings.prototype['format'] = undefined;

/**
 * The frame rate of the inbound video data.
 * @member {module:model/CdnSettings.FrameRateEnum} frameRate
 */
CdnSettings.prototype['frameRate'] = undefined;

/**
 * @member {module:model/IngestionInfo} ingestionInfo
 */
CdnSettings.prototype['ingestionInfo'] = undefined;

/**
 *  The method or protocol used to transmit the video stream.
 * @member {module:model/CdnSettings.IngestionTypeEnum} ingestionType
 */
CdnSettings.prototype['ingestionType'] = undefined;

/**
 * The resolution of the inbound video data.
 * @member {module:model/CdnSettings.ResolutionEnum} resolution
 */
CdnSettings.prototype['resolution'] = undefined;





/**
 * Allowed values for the <code>frameRate</code> property.
 * @enum {String}
 * @readonly
 */
CdnSettings['FrameRateEnum'] = {

    /**
     * value: "30fps"
     * @const
     */
    "30fps": "30fps",

    /**
     * value: "60fps"
     * @const
     */
    "60fps": "60fps",

    /**
     * value: "variable"
     * @const
     */
    "variable": "variable"
};


/**
 * Allowed values for the <code>ingestionType</code> property.
 * @enum {String}
 * @readonly
 */
CdnSettings['IngestionTypeEnum'] = {

    /**
     * value: "rtmp"
     * @const
     */
    "rtmp": "rtmp",

    /**
     * value: "dash"
     * @const
     */
    "dash": "dash",

    /**
     * value: "webrtc"
     * @const
     */
    "webrtc": "webrtc",

    /**
     * value: "hls"
     * @const
     */
    "hls": "hls"
};


/**
 * Allowed values for the <code>resolution</code> property.
 * @enum {String}
 * @readonly
 */
CdnSettings['ResolutionEnum'] = {

    /**
     * value: "240p"
     * @const
     */
    "240p": "240p",

    /**
     * value: "360p"
     * @const
     */
    "360p": "360p",

    /**
     * value: "480p"
     * @const
     */
    "480p": "480p",

    /**
     * value: "720p"
     * @const
     */
    "720p": "720p",

    /**
     * value: "1080p"
     * @const
     */
    "1080p": "1080p",

    /**
     * value: "1440p"
     * @const
     */
    "1440p": "1440p",

    /**
     * value: "2160p"
     * @const
     */
    "2160p": "2160p",

    /**
     * value: "variable"
     * @const
     */
    "variable": "variable"
};



export default CdnSettings;

