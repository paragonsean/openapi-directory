/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ActivityContentDetailsPromotedItem model module.
 * @module model/ActivityContentDetailsPromotedItem
 * @version v3
 */
class ActivityContentDetailsPromotedItem {
    /**
     * Constructs a new <code>ActivityContentDetailsPromotedItem</code>.
     * Details about a resource which is being promoted.
     * @alias module:model/ActivityContentDetailsPromotedItem
     */
    constructor() { 
        
        ActivityContentDetailsPromotedItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ActivityContentDetailsPromotedItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ActivityContentDetailsPromotedItem} obj Optional instance to populate.
     * @return {module:model/ActivityContentDetailsPromotedItem} The populated <code>ActivityContentDetailsPromotedItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ActivityContentDetailsPromotedItem();

            if (data.hasOwnProperty('adTag')) {
                obj['adTag'] = ApiClient.convertToType(data['adTag'], 'String');
            }
            if (data.hasOwnProperty('clickTrackingUrl')) {
                obj['clickTrackingUrl'] = ApiClient.convertToType(data['clickTrackingUrl'], 'String');
            }
            if (data.hasOwnProperty('creativeViewUrl')) {
                obj['creativeViewUrl'] = ApiClient.convertToType(data['creativeViewUrl'], 'String');
            }
            if (data.hasOwnProperty('ctaType')) {
                obj['ctaType'] = ApiClient.convertToType(data['ctaType'], 'String');
            }
            if (data.hasOwnProperty('customCtaButtonText')) {
                obj['customCtaButtonText'] = ApiClient.convertToType(data['customCtaButtonText'], 'String');
            }
            if (data.hasOwnProperty('descriptionText')) {
                obj['descriptionText'] = ApiClient.convertToType(data['descriptionText'], 'String');
            }
            if (data.hasOwnProperty('destinationUrl')) {
                obj['destinationUrl'] = ApiClient.convertToType(data['destinationUrl'], 'String');
            }
            if (data.hasOwnProperty('forecastingUrl')) {
                obj['forecastingUrl'] = ApiClient.convertToType(data['forecastingUrl'], ['String']);
            }
            if (data.hasOwnProperty('impressionUrl')) {
                obj['impressionUrl'] = ApiClient.convertToType(data['impressionUrl'], ['String']);
            }
            if (data.hasOwnProperty('videoId')) {
                obj['videoId'] = ApiClient.convertToType(data['videoId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ActivityContentDetailsPromotedItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ActivityContentDetailsPromotedItem</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['adTag'] && !(typeof data['adTag'] === 'string' || data['adTag'] instanceof String)) {
            throw new Error("Expected the field `adTag` to be a primitive type in the JSON string but got " + data['adTag']);
        }
        // ensure the json data is a string
        if (data['clickTrackingUrl'] && !(typeof data['clickTrackingUrl'] === 'string' || data['clickTrackingUrl'] instanceof String)) {
            throw new Error("Expected the field `clickTrackingUrl` to be a primitive type in the JSON string but got " + data['clickTrackingUrl']);
        }
        // ensure the json data is a string
        if (data['creativeViewUrl'] && !(typeof data['creativeViewUrl'] === 'string' || data['creativeViewUrl'] instanceof String)) {
            throw new Error("Expected the field `creativeViewUrl` to be a primitive type in the JSON string but got " + data['creativeViewUrl']);
        }
        // ensure the json data is a string
        if (data['ctaType'] && !(typeof data['ctaType'] === 'string' || data['ctaType'] instanceof String)) {
            throw new Error("Expected the field `ctaType` to be a primitive type in the JSON string but got " + data['ctaType']);
        }
        // ensure the json data is a string
        if (data['customCtaButtonText'] && !(typeof data['customCtaButtonText'] === 'string' || data['customCtaButtonText'] instanceof String)) {
            throw new Error("Expected the field `customCtaButtonText` to be a primitive type in the JSON string but got " + data['customCtaButtonText']);
        }
        // ensure the json data is a string
        if (data['descriptionText'] && !(typeof data['descriptionText'] === 'string' || data['descriptionText'] instanceof String)) {
            throw new Error("Expected the field `descriptionText` to be a primitive type in the JSON string but got " + data['descriptionText']);
        }
        // ensure the json data is a string
        if (data['destinationUrl'] && !(typeof data['destinationUrl'] === 'string' || data['destinationUrl'] instanceof String)) {
            throw new Error("Expected the field `destinationUrl` to be a primitive type in the JSON string but got " + data['destinationUrl']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['forecastingUrl'])) {
            throw new Error("Expected the field `forecastingUrl` to be an array in the JSON data but got " + data['forecastingUrl']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['impressionUrl'])) {
            throw new Error("Expected the field `impressionUrl` to be an array in the JSON data but got " + data['impressionUrl']);
        }
        // ensure the json data is a string
        if (data['videoId'] && !(typeof data['videoId'] === 'string' || data['videoId'] instanceof String)) {
            throw new Error("Expected the field `videoId` to be a primitive type in the JSON string but got " + data['videoId']);
        }

        return true;
    }


}



/**
 * The URL the client should fetch to request a promoted item.
 * @member {String} adTag
 */
ActivityContentDetailsPromotedItem.prototype['adTag'] = undefined;

/**
 * The URL the client should ping to indicate that the user clicked through on this promoted item.
 * @member {String} clickTrackingUrl
 */
ActivityContentDetailsPromotedItem.prototype['clickTrackingUrl'] = undefined;

/**
 * The URL the client should ping to indicate that the user was shown this promoted item.
 * @member {String} creativeViewUrl
 */
ActivityContentDetailsPromotedItem.prototype['creativeViewUrl'] = undefined;

/**
 * The type of call-to-action, a message to the user indicating action that can be taken.
 * @member {module:model/ActivityContentDetailsPromotedItem.CtaTypeEnum} ctaType
 */
ActivityContentDetailsPromotedItem.prototype['ctaType'] = undefined;

/**
 * The custom call-to-action button text. If specified, it will override the default button text for the cta_type.
 * @member {String} customCtaButtonText
 */
ActivityContentDetailsPromotedItem.prototype['customCtaButtonText'] = undefined;

/**
 * The text description to accompany the promoted item.
 * @member {String} descriptionText
 */
ActivityContentDetailsPromotedItem.prototype['descriptionText'] = undefined;

/**
 * The URL the client should direct the user to, if the user chooses to visit the advertiser's website.
 * @member {String} destinationUrl
 */
ActivityContentDetailsPromotedItem.prototype['destinationUrl'] = undefined;

/**
 * The list of forecasting URLs. The client should ping all of these URLs when a promoted item is not available, to indicate that a promoted item could have been shown.
 * @member {Array.<String>} forecastingUrl
 */
ActivityContentDetailsPromotedItem.prototype['forecastingUrl'] = undefined;

/**
 * The list of impression URLs. The client should ping all of these URLs to indicate that the user was shown this promoted item.
 * @member {Array.<String>} impressionUrl
 */
ActivityContentDetailsPromotedItem.prototype['impressionUrl'] = undefined;

/**
 * The ID that YouTube uses to uniquely identify the promoted video.
 * @member {String} videoId
 */
ActivityContentDetailsPromotedItem.prototype['videoId'] = undefined;





/**
 * Allowed values for the <code>ctaType</code> property.
 * @enum {String}
 * @readonly
 */
ActivityContentDetailsPromotedItem['CtaTypeEnum'] = {

    /**
     * value: "ctaTypeUnspecified"
     * @const
     */
    "ctaTypeUnspecified": "ctaTypeUnspecified",

    /**
     * value: "visitAdvertiserSite"
     * @const
     */
    "visitAdvertiserSite": "visitAdvertiserSite"
};



export default ActivityContentDetailsPromotedItem;

