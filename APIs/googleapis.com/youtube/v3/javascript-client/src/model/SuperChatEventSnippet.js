/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChannelProfileDetails from './ChannelProfileDetails';
import SuperStickerMetadata from './SuperStickerMetadata';

/**
 * The SuperChatEventSnippet model module.
 * @module model/SuperChatEventSnippet
 * @version v3
 */
class SuperChatEventSnippet {
    /**
     * Constructs a new <code>SuperChatEventSnippet</code>.
     * @alias module:model/SuperChatEventSnippet
     */
    constructor() { 
        
        SuperChatEventSnippet.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SuperChatEventSnippet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SuperChatEventSnippet} obj Optional instance to populate.
     * @return {module:model/SuperChatEventSnippet} The populated <code>SuperChatEventSnippet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SuperChatEventSnippet();

            if (data.hasOwnProperty('amountMicros')) {
                obj['amountMicros'] = ApiClient.convertToType(data['amountMicros'], 'String');
            }
            if (data.hasOwnProperty('channelId')) {
                obj['channelId'] = ApiClient.convertToType(data['channelId'], 'String');
            }
            if (data.hasOwnProperty('commentText')) {
                obj['commentText'] = ApiClient.convertToType(data['commentText'], 'String');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('displayString')) {
                obj['displayString'] = ApiClient.convertToType(data['displayString'], 'String');
            }
            if (data.hasOwnProperty('isSuperStickerEvent')) {
                obj['isSuperStickerEvent'] = ApiClient.convertToType(data['isSuperStickerEvent'], 'Boolean');
            }
            if (data.hasOwnProperty('messageType')) {
                obj['messageType'] = ApiClient.convertToType(data['messageType'], 'Number');
            }
            if (data.hasOwnProperty('superStickerMetadata')) {
                obj['superStickerMetadata'] = SuperStickerMetadata.constructFromObject(data['superStickerMetadata']);
            }
            if (data.hasOwnProperty('supporterDetails')) {
                obj['supporterDetails'] = ChannelProfileDetails.constructFromObject(data['supporterDetails']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SuperChatEventSnippet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SuperChatEventSnippet</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['amountMicros'] && !(typeof data['amountMicros'] === 'string' || data['amountMicros'] instanceof String)) {
            throw new Error("Expected the field `amountMicros` to be a primitive type in the JSON string but got " + data['amountMicros']);
        }
        // ensure the json data is a string
        if (data['channelId'] && !(typeof data['channelId'] === 'string' || data['channelId'] instanceof String)) {
            throw new Error("Expected the field `channelId` to be a primitive type in the JSON string but got " + data['channelId']);
        }
        // ensure the json data is a string
        if (data['commentText'] && !(typeof data['commentText'] === 'string' || data['commentText'] instanceof String)) {
            throw new Error("Expected the field `commentText` to be a primitive type in the JSON string but got " + data['commentText']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['displayString'] && !(typeof data['displayString'] === 'string' || data['displayString'] instanceof String)) {
            throw new Error("Expected the field `displayString` to be a primitive type in the JSON string but got " + data['displayString']);
        }
        // validate the optional field `superStickerMetadata`
        if (data['superStickerMetadata']) { // data not null
          SuperStickerMetadata.validateJSON(data['superStickerMetadata']);
        }
        // validate the optional field `supporterDetails`
        if (data['supporterDetails']) { // data not null
          ChannelProfileDetails.validateJSON(data['supporterDetails']);
        }

        return true;
    }


}



/**
 * The purchase amount, in micros of the purchase currency. e.g., 1 is represented as 1000000.
 * @member {String} amountMicros
 */
SuperChatEventSnippet.prototype['amountMicros'] = undefined;

/**
 * Channel id where the event occurred.
 * @member {String} channelId
 */
SuperChatEventSnippet.prototype['channelId'] = undefined;

/**
 * The text contents of the comment left by the user.
 * @member {String} commentText
 */
SuperChatEventSnippet.prototype['commentText'] = undefined;

/**
 * The date and time when the event occurred.
 * @member {Date} createdAt
 */
SuperChatEventSnippet.prototype['createdAt'] = undefined;

/**
 * The currency in which the purchase was made. ISO 4217.
 * @member {String} currency
 */
SuperChatEventSnippet.prototype['currency'] = undefined;

/**
 * A rendered string that displays the purchase amount and currency (e.g., \"$1.00\"). The string is rendered for the given language.
 * @member {String} displayString
 */
SuperChatEventSnippet.prototype['displayString'] = undefined;

/**
 * True if this event is a Super Sticker event.
 * @member {Boolean} isSuperStickerEvent
 */
SuperChatEventSnippet.prototype['isSuperStickerEvent'] = undefined;

/**
 * The tier for the paid message, which is based on the amount of money spent to purchase the message.
 * @member {Number} messageType
 */
SuperChatEventSnippet.prototype['messageType'] = undefined;

/**
 * @member {module:model/SuperStickerMetadata} superStickerMetadata
 */
SuperChatEventSnippet.prototype['superStickerMetadata'] = undefined;

/**
 * @member {module:model/ChannelProfileDetails} supporterDetails
 */
SuperChatEventSnippet.prototype['supporterDetails'] = undefined;






export default SuperChatEventSnippet;

