/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Caption from './Caption';

/**
 * The CaptionListResponse model module.
 * @module model/CaptionListResponse
 * @version v3
 */
class CaptionListResponse {
    /**
     * Constructs a new <code>CaptionListResponse</code>.
     * @alias module:model/CaptionListResponse
     */
    constructor() { 
        
        CaptionListResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'youtube#captionListResponse';
    }

    /**
     * Constructs a <code>CaptionListResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CaptionListResponse} obj Optional instance to populate.
     * @return {module:model/CaptionListResponse} The populated <code>CaptionListResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CaptionListResponse();

            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('eventId')) {
                obj['eventId'] = ApiClient.convertToType(data['eventId'], 'String');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [Caption]);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('visitorId')) {
                obj['visitorId'] = ApiClient.convertToType(data['visitorId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CaptionListResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CaptionListResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['eventId'] && !(typeof data['eventId'] === 'string' || data['eventId'] instanceof String)) {
            throw new Error("Expected the field `eventId` to be a primitive type in the JSON string but got " + data['eventId']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                Caption.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['visitorId'] && !(typeof data['visitorId'] === 'string' || data['visitorId'] instanceof String)) {
            throw new Error("Expected the field `visitorId` to be a primitive type in the JSON string but got " + data['visitorId']);
        }

        return true;
    }


}



/**
 * Etag of this resource.
 * @member {String} etag
 */
CaptionListResponse.prototype['etag'] = undefined;

/**
 * Serialized EventId of the request which produced this response.
 * @member {String} eventId
 */
CaptionListResponse.prototype['eventId'] = undefined;

/**
 * A list of captions that match the request criteria.
 * @member {Array.<module:model/Caption>} items
 */
CaptionListResponse.prototype['items'] = undefined;

/**
 * Identifies what kind of resource this is. Value: the fixed string \"youtube#captionListResponse\".
 * @member {String} kind
 * @default 'youtube#captionListResponse'
 */
CaptionListResponse.prototype['kind'] = 'youtube#captionListResponse';

/**
 * The visitorId identifies the visitor.
 * @member {String} visitorId
 */
CaptionListResponse.prototype['visitorId'] = undefined;






export default CaptionListResponse;

