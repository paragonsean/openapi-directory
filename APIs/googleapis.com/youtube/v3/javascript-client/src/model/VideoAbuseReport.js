/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VideoAbuseReport model module.
 * @module model/VideoAbuseReport
 * @version v3
 */
class VideoAbuseReport {
    /**
     * Constructs a new <code>VideoAbuseReport</code>.
     * @alias module:model/VideoAbuseReport
     */
    constructor() { 
        
        VideoAbuseReport.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VideoAbuseReport</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VideoAbuseReport} obj Optional instance to populate.
     * @return {module:model/VideoAbuseReport} The populated <code>VideoAbuseReport</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VideoAbuseReport();

            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], 'String');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('reasonId')) {
                obj['reasonId'] = ApiClient.convertToType(data['reasonId'], 'String');
            }
            if (data.hasOwnProperty('secondaryReasonId')) {
                obj['secondaryReasonId'] = ApiClient.convertToType(data['secondaryReasonId'], 'String');
            }
            if (data.hasOwnProperty('videoId')) {
                obj['videoId'] = ApiClient.convertToType(data['videoId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VideoAbuseReport</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VideoAbuseReport</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['comments'] && !(typeof data['comments'] === 'string' || data['comments'] instanceof String)) {
            throw new Error("Expected the field `comments` to be a primitive type in the JSON string but got " + data['comments']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['reasonId'] && !(typeof data['reasonId'] === 'string' || data['reasonId'] instanceof String)) {
            throw new Error("Expected the field `reasonId` to be a primitive type in the JSON string but got " + data['reasonId']);
        }
        // ensure the json data is a string
        if (data['secondaryReasonId'] && !(typeof data['secondaryReasonId'] === 'string' || data['secondaryReasonId'] instanceof String)) {
            throw new Error("Expected the field `secondaryReasonId` to be a primitive type in the JSON string but got " + data['secondaryReasonId']);
        }
        // ensure the json data is a string
        if (data['videoId'] && !(typeof data['videoId'] === 'string' || data['videoId'] instanceof String)) {
            throw new Error("Expected the field `videoId` to be a primitive type in the JSON string but got " + data['videoId']);
        }

        return true;
    }


}



/**
 * Additional comments regarding the abuse report.
 * @member {String} comments
 */
VideoAbuseReport.prototype['comments'] = undefined;

/**
 * The language that the content was viewed in.
 * @member {String} language
 */
VideoAbuseReport.prototype['language'] = undefined;

/**
 * The high-level, or primary, reason that the content is abusive. The value is an abuse report reason ID.
 * @member {String} reasonId
 */
VideoAbuseReport.prototype['reasonId'] = undefined;

/**
 * The specific, or secondary, reason that this content is abusive (if available). The value is an abuse report reason ID that is a valid secondary reason for the primary reason.
 * @member {String} secondaryReasonId
 */
VideoAbuseReport.prototype['secondaryReasonId'] = undefined;

/**
 * The ID that YouTube uses to uniquely identify the video.
 * @member {String} videoId
 */
VideoAbuseReport.prototype['videoId'] = undefined;






export default VideoAbuseReport;

