/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PlaylistContentDetails from './PlaylistContentDetails';
import PlaylistLocalization from './PlaylistLocalization';
import PlaylistPlayer from './PlaylistPlayer';
import PlaylistSnippet from './PlaylistSnippet';
import PlaylistStatus from './PlaylistStatus';

/**
 * The Playlist model module.
 * @module model/Playlist
 * @version v3
 */
class Playlist {
    /**
     * Constructs a new <code>Playlist</code>.
     * A *playlist* resource represents a YouTube playlist. A playlist is a collection of videos that can be viewed sequentially and shared with other users. A playlist can contain up to 200 videos, and YouTube does not limit the number of playlists that each user creates. By default, playlists are publicly visible to other users, but playlists can be public or private. YouTube also uses playlists to identify special collections of videos for a channel, such as: - uploaded videos - favorite videos - positively rated (liked) videos - watch history - watch later To be more specific, these lists are associated with a channel, which is a collection of a person, group, or company&#39;s videos, playlists, and other YouTube information. You can retrieve the playlist IDs for each of these lists from the channel resource for a given channel. You can then use the playlistItems.list method to retrieve any of those lists. You can also add or remove items from those lists by calling the playlistItems.insert and playlistItems.delete methods.
     * @alias module:model/Playlist
     */
    constructor() { 
        
        Playlist.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'youtube#playlist';
    }

    /**
     * Constructs a <code>Playlist</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Playlist} obj Optional instance to populate.
     * @return {module:model/Playlist} The populated <code>Playlist</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Playlist();

            if (data.hasOwnProperty('contentDetails')) {
                obj['contentDetails'] = PlaylistContentDetails.constructFromObject(data['contentDetails']);
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('localizations')) {
                obj['localizations'] = ApiClient.convertToType(data['localizations'], {'String': PlaylistLocalization});
            }
            if (data.hasOwnProperty('player')) {
                obj['player'] = PlaylistPlayer.constructFromObject(data['player']);
            }
            if (data.hasOwnProperty('snippet')) {
                obj['snippet'] = PlaylistSnippet.constructFromObject(data['snippet']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = PlaylistStatus.constructFromObject(data['status']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Playlist</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Playlist</code>.
     */
    static validateJSON(data) {
        // validate the optional field `contentDetails`
        if (data['contentDetails']) { // data not null
          PlaylistContentDetails.validateJSON(data['contentDetails']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // validate the optional field `player`
        if (data['player']) { // data not null
          PlaylistPlayer.validateJSON(data['player']);
        }
        // validate the optional field `snippet`
        if (data['snippet']) { // data not null
          PlaylistSnippet.validateJSON(data['snippet']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          PlaylistStatus.validateJSON(data['status']);
        }

        return true;
    }


}



/**
 * @member {module:model/PlaylistContentDetails} contentDetails
 */
Playlist.prototype['contentDetails'] = undefined;

/**
 * Etag of this resource.
 * @member {String} etag
 */
Playlist.prototype['etag'] = undefined;

/**
 * The ID that YouTube uses to uniquely identify the playlist.
 * @member {String} id
 */
Playlist.prototype['id'] = undefined;

/**
 * Identifies what kind of resource this is. Value: the fixed string \"youtube#playlist\".
 * @member {String} kind
 * @default 'youtube#playlist'
 */
Playlist.prototype['kind'] = 'youtube#playlist';

/**
 * Localizations for different languages
 * @member {Object.<String, module:model/PlaylistLocalization>} localizations
 */
Playlist.prototype['localizations'] = undefined;

/**
 * @member {module:model/PlaylistPlayer} player
 */
Playlist.prototype['player'] = undefined;

/**
 * @member {module:model/PlaylistSnippet} snippet
 */
Playlist.prototype['snippet'] = undefined;

/**
 * @member {module:model/PlaylistStatus} status
 */
Playlist.prototype['status'] = undefined;






export default Playlist;

