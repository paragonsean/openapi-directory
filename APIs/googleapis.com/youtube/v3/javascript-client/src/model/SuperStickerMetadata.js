/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SuperStickerMetadata model module.
 * @module model/SuperStickerMetadata
 * @version v3
 */
class SuperStickerMetadata {
    /**
     * Constructs a new <code>SuperStickerMetadata</code>.
     * @alias module:model/SuperStickerMetadata
     */
    constructor() { 
        
        SuperStickerMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SuperStickerMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SuperStickerMetadata} obj Optional instance to populate.
     * @return {module:model/SuperStickerMetadata} The populated <code>SuperStickerMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SuperStickerMetadata();

            if (data.hasOwnProperty('altText')) {
                obj['altText'] = ApiClient.convertToType(data['altText'], 'String');
            }
            if (data.hasOwnProperty('altTextLanguage')) {
                obj['altTextLanguage'] = ApiClient.convertToType(data['altTextLanguage'], 'String');
            }
            if (data.hasOwnProperty('stickerId')) {
                obj['stickerId'] = ApiClient.convertToType(data['stickerId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SuperStickerMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SuperStickerMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['altText'] && !(typeof data['altText'] === 'string' || data['altText'] instanceof String)) {
            throw new Error("Expected the field `altText` to be a primitive type in the JSON string but got " + data['altText']);
        }
        // ensure the json data is a string
        if (data['altTextLanguage'] && !(typeof data['altTextLanguage'] === 'string' || data['altTextLanguage'] instanceof String)) {
            throw new Error("Expected the field `altTextLanguage` to be a primitive type in the JSON string but got " + data['altTextLanguage']);
        }
        // ensure the json data is a string
        if (data['stickerId'] && !(typeof data['stickerId'] === 'string' || data['stickerId'] instanceof String)) {
            throw new Error("Expected the field `stickerId` to be a primitive type in the JSON string but got " + data['stickerId']);
        }

        return true;
    }


}



/**
 * Internationalized alt text that describes the sticker image and any animation associated with it.
 * @member {String} altText
 */
SuperStickerMetadata.prototype['altText'] = undefined;

/**
 * Specifies the localization language in which the alt text is returned.
 * @member {String} altTextLanguage
 */
SuperStickerMetadata.prototype['altTextLanguage'] = undefined;

/**
 * Unique identifier of the Super Sticker. This is a shorter form of the alt_text that includes pack name and a recognizable characteristic of the sticker.
 * @member {String} stickerId
 */
SuperStickerMetadata.prototype['stickerId'] = undefined;






export default SuperStickerMetadata;

