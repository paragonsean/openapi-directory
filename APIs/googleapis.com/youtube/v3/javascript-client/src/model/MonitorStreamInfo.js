/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MonitorStreamInfo model module.
 * @module model/MonitorStreamInfo
 * @version v3
 */
class MonitorStreamInfo {
    /**
     * Constructs a new <code>MonitorStreamInfo</code>.
     * Settings and Info of the monitor stream
     * @alias module:model/MonitorStreamInfo
     */
    constructor() { 
        
        MonitorStreamInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MonitorStreamInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MonitorStreamInfo} obj Optional instance to populate.
     * @return {module:model/MonitorStreamInfo} The populated <code>MonitorStreamInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MonitorStreamInfo();

            if (data.hasOwnProperty('broadcastStreamDelayMs')) {
                obj['broadcastStreamDelayMs'] = ApiClient.convertToType(data['broadcastStreamDelayMs'], 'Number');
            }
            if (data.hasOwnProperty('embedHtml')) {
                obj['embedHtml'] = ApiClient.convertToType(data['embedHtml'], 'String');
            }
            if (data.hasOwnProperty('enableMonitorStream')) {
                obj['enableMonitorStream'] = ApiClient.convertToType(data['enableMonitorStream'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MonitorStreamInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MonitorStreamInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['embedHtml'] && !(typeof data['embedHtml'] === 'string' || data['embedHtml'] instanceof String)) {
            throw new Error("Expected the field `embedHtml` to be a primitive type in the JSON string but got " + data['embedHtml']);
        }

        return true;
    }


}



/**
 * If you have set the enableMonitorStream property to true, then this property determines the length of the live broadcast delay.
 * @member {Number} broadcastStreamDelayMs
 */
MonitorStreamInfo.prototype['broadcastStreamDelayMs'] = undefined;

/**
 * HTML code that embeds a player that plays the monitor stream.
 * @member {String} embedHtml
 */
MonitorStreamInfo.prototype['embedHtml'] = undefined;

/**
 * This value determines whether the monitor stream is enabled for the broadcast. If the monitor stream is enabled, then YouTube will broadcast the event content on a special stream intended only for the broadcaster's consumption. The broadcaster can use the stream to review the event content and also to identify the optimal times to insert cuepoints. You need to set this value to true if you intend to have a broadcast delay for your event. *Note:* This property cannot be updated once the broadcast is in the testing or live state.
 * @member {Boolean} enableMonitorStream
 */
MonitorStreamInfo.prototype['enableMonitorStream'] = undefined;






export default MonitorStreamInfo;

