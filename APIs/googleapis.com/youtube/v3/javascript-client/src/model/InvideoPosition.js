/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InvideoPosition model module.
 * @module model/InvideoPosition
 * @version v3
 */
class InvideoPosition {
    /**
     * Constructs a new <code>InvideoPosition</code>.
     * Describes the spatial position of a visual widget inside a video. It is a union of various position types, out of which only will be set one.
     * @alias module:model/InvideoPosition
     */
    constructor() { 
        
        InvideoPosition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InvideoPosition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InvideoPosition} obj Optional instance to populate.
     * @return {module:model/InvideoPosition} The populated <code>InvideoPosition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InvideoPosition();

            if (data.hasOwnProperty('cornerPosition')) {
                obj['cornerPosition'] = ApiClient.convertToType(data['cornerPosition'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InvideoPosition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InvideoPosition</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cornerPosition'] && !(typeof data['cornerPosition'] === 'string' || data['cornerPosition'] instanceof String)) {
            throw new Error("Expected the field `cornerPosition` to be a primitive type in the JSON string but got " + data['cornerPosition']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Describes in which corner of the video the visual widget will appear.
 * @member {module:model/InvideoPosition.CornerPositionEnum} cornerPosition
 */
InvideoPosition.prototype['cornerPosition'] = undefined;

/**
 * Defines the position type.
 * @member {module:model/InvideoPosition.TypeEnum} type
 */
InvideoPosition.prototype['type'] = undefined;





/**
 * Allowed values for the <code>cornerPosition</code> property.
 * @enum {String}
 * @readonly
 */
InvideoPosition['CornerPositionEnum'] = {

    /**
     * value: "topLeft"
     * @const
     */
    "topLeft": "topLeft",

    /**
     * value: "topRight"
     * @const
     */
    "topRight": "topRight",

    /**
     * value: "bottomLeft"
     * @const
     */
    "bottomLeft": "bottomLeft",

    /**
     * value: "bottomRight"
     * @const
     */
    "bottomRight": "bottomRight"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
InvideoPosition['TypeEnum'] = {

    /**
     * value: "corner"
     * @const
     */
    "corner": "corner"
};



export default InvideoPosition;

