/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Comment from './Comment';

/**
 * The CommentThreadSnippet model module.
 * @module model/CommentThreadSnippet
 * @version v3
 */
class CommentThreadSnippet {
    /**
     * Constructs a new <code>CommentThreadSnippet</code>.
     * Basic details about a comment thread.
     * @alias module:model/CommentThreadSnippet
     */
    constructor() { 
        
        CommentThreadSnippet.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CommentThreadSnippet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CommentThreadSnippet} obj Optional instance to populate.
     * @return {module:model/CommentThreadSnippet} The populated <code>CommentThreadSnippet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CommentThreadSnippet();

            if (data.hasOwnProperty('canReply')) {
                obj['canReply'] = ApiClient.convertToType(data['canReply'], 'Boolean');
            }
            if (data.hasOwnProperty('channelId')) {
                obj['channelId'] = ApiClient.convertToType(data['channelId'], 'String');
            }
            if (data.hasOwnProperty('isPublic')) {
                obj['isPublic'] = ApiClient.convertToType(data['isPublic'], 'Boolean');
            }
            if (data.hasOwnProperty('topLevelComment')) {
                obj['topLevelComment'] = Comment.constructFromObject(data['topLevelComment']);
            }
            if (data.hasOwnProperty('totalReplyCount')) {
                obj['totalReplyCount'] = ApiClient.convertToType(data['totalReplyCount'], 'Number');
            }
            if (data.hasOwnProperty('videoId')) {
                obj['videoId'] = ApiClient.convertToType(data['videoId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CommentThreadSnippet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CommentThreadSnippet</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['channelId'] && !(typeof data['channelId'] === 'string' || data['channelId'] instanceof String)) {
            throw new Error("Expected the field `channelId` to be a primitive type in the JSON string but got " + data['channelId']);
        }
        // validate the optional field `topLevelComment`
        if (data['topLevelComment']) { // data not null
          Comment.validateJSON(data['topLevelComment']);
        }
        // ensure the json data is a string
        if (data['videoId'] && !(typeof data['videoId'] === 'string' || data['videoId'] instanceof String)) {
            throw new Error("Expected the field `videoId` to be a primitive type in the JSON string but got " + data['videoId']);
        }

        return true;
    }


}



/**
 * Whether the current viewer of the thread can reply to it. This is viewer specific - other viewers may see a different value for this field.
 * @member {Boolean} canReply
 */
CommentThreadSnippet.prototype['canReply'] = undefined;

/**
 * The YouTube channel the comments in the thread refer to or the channel with the video the comments refer to. If video_id isn't set the comments refer to the channel itself.
 * @member {String} channelId
 */
CommentThreadSnippet.prototype['channelId'] = undefined;

/**
 * Whether the thread (and therefore all its comments) is visible to all YouTube users.
 * @member {Boolean} isPublic
 */
CommentThreadSnippet.prototype['isPublic'] = undefined;

/**
 * @member {module:model/Comment} topLevelComment
 */
CommentThreadSnippet.prototype['topLevelComment'] = undefined;

/**
 * The total number of replies (not including the top level comment).
 * @member {Number} totalReplyCount
 */
CommentThreadSnippet.prototype['totalReplyCount'] = undefined;

/**
 * The ID of the video the comments refer to, if any. No video_id implies a channel discussion comment.
 * @member {String} videoId
 */
CommentThreadSnippet.prototype['videoId'] = undefined;






export default CommentThreadSnippet;

