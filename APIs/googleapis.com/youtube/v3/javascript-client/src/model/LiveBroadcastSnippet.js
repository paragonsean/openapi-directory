/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ThumbnailDetails from './ThumbnailDetails';

/**
 * The LiveBroadcastSnippet model module.
 * @module model/LiveBroadcastSnippet
 * @version v3
 */
class LiveBroadcastSnippet {
    /**
     * Constructs a new <code>LiveBroadcastSnippet</code>.
     * Basic broadcast information.
     * @alias module:model/LiveBroadcastSnippet
     */
    constructor() { 
        
        LiveBroadcastSnippet.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LiveBroadcastSnippet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LiveBroadcastSnippet} obj Optional instance to populate.
     * @return {module:model/LiveBroadcastSnippet} The populated <code>LiveBroadcastSnippet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LiveBroadcastSnippet();

            if (data.hasOwnProperty('actualEndTime')) {
                obj['actualEndTime'] = ApiClient.convertToType(data['actualEndTime'], 'Date');
            }
            if (data.hasOwnProperty('actualStartTime')) {
                obj['actualStartTime'] = ApiClient.convertToType(data['actualStartTime'], 'Date');
            }
            if (data.hasOwnProperty('channelId')) {
                obj['channelId'] = ApiClient.convertToType(data['channelId'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('isDefaultBroadcast')) {
                obj['isDefaultBroadcast'] = ApiClient.convertToType(data['isDefaultBroadcast'], 'Boolean');
            }
            if (data.hasOwnProperty('liveChatId')) {
                obj['liveChatId'] = ApiClient.convertToType(data['liveChatId'], 'String');
            }
            if (data.hasOwnProperty('publishedAt')) {
                obj['publishedAt'] = ApiClient.convertToType(data['publishedAt'], 'Date');
            }
            if (data.hasOwnProperty('scheduledEndTime')) {
                obj['scheduledEndTime'] = ApiClient.convertToType(data['scheduledEndTime'], 'Date');
            }
            if (data.hasOwnProperty('scheduledStartTime')) {
                obj['scheduledStartTime'] = ApiClient.convertToType(data['scheduledStartTime'], 'Date');
            }
            if (data.hasOwnProperty('thumbnails')) {
                obj['thumbnails'] = ThumbnailDetails.constructFromObject(data['thumbnails']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LiveBroadcastSnippet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LiveBroadcastSnippet</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['channelId'] && !(typeof data['channelId'] === 'string' || data['channelId'] instanceof String)) {
            throw new Error("Expected the field `channelId` to be a primitive type in the JSON string but got " + data['channelId']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['liveChatId'] && !(typeof data['liveChatId'] === 'string' || data['liveChatId'] instanceof String)) {
            throw new Error("Expected the field `liveChatId` to be a primitive type in the JSON string but got " + data['liveChatId']);
        }
        // validate the optional field `thumbnails`
        if (data['thumbnails']) { // data not null
          ThumbnailDetails.validateJSON(data['thumbnails']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * The date and time that the broadcast actually ended. This information is only available once the broadcast's state is complete.
 * @member {Date} actualEndTime
 */
LiveBroadcastSnippet.prototype['actualEndTime'] = undefined;

/**
 * The date and time that the broadcast actually started. This information is only available once the broadcast's state is live.
 * @member {Date} actualStartTime
 */
LiveBroadcastSnippet.prototype['actualStartTime'] = undefined;

/**
 * The ID that YouTube uses to uniquely identify the channel that is publishing the broadcast.
 * @member {String} channelId
 */
LiveBroadcastSnippet.prototype['channelId'] = undefined;

/**
 * The broadcast's description. As with the title, you can set this field by modifying the broadcast resource or by setting the description field of the corresponding video resource.
 * @member {String} description
 */
LiveBroadcastSnippet.prototype['description'] = undefined;

/**
 * Indicates whether this broadcast is the default broadcast. Internal only.
 * @member {Boolean} isDefaultBroadcast
 */
LiveBroadcastSnippet.prototype['isDefaultBroadcast'] = undefined;

/**
 * The id of the live chat for this broadcast.
 * @member {String} liveChatId
 */
LiveBroadcastSnippet.prototype['liveChatId'] = undefined;

/**
 * The date and time that the broadcast was added to YouTube's live broadcast schedule.
 * @member {Date} publishedAt
 */
LiveBroadcastSnippet.prototype['publishedAt'] = undefined;

/**
 * The date and time that the broadcast is scheduled to end.
 * @member {Date} scheduledEndTime
 */
LiveBroadcastSnippet.prototype['scheduledEndTime'] = undefined;

/**
 * The date and time that the broadcast is scheduled to start.
 * @member {Date} scheduledStartTime
 */
LiveBroadcastSnippet.prototype['scheduledStartTime'] = undefined;

/**
 * @member {module:model/ThumbnailDetails} thumbnails
 */
LiveBroadcastSnippet.prototype['thumbnails'] = undefined;

/**
 * The broadcast's title. Note that the broadcast represents exactly one YouTube video. You can set this field by modifying the broadcast resource or by setting the title field of the corresponding video resource.
 * @member {String} title
 */
LiveBroadcastSnippet.prototype['title'] = undefined;






export default LiveBroadcastSnippet;

