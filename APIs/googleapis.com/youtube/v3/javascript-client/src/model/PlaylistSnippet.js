/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PlaylistLocalization from './PlaylistLocalization';
import ThumbnailDetails from './ThumbnailDetails';

/**
 * The PlaylistSnippet model module.
 * @module model/PlaylistSnippet
 * @version v3
 */
class PlaylistSnippet {
    /**
     * Constructs a new <code>PlaylistSnippet</code>.
     * Basic details about a playlist, including title, description and thumbnails.
     * @alias module:model/PlaylistSnippet
     */
    constructor() { 
        
        PlaylistSnippet.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PlaylistSnippet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PlaylistSnippet} obj Optional instance to populate.
     * @return {module:model/PlaylistSnippet} The populated <code>PlaylistSnippet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PlaylistSnippet();

            if (data.hasOwnProperty('channelId')) {
                obj['channelId'] = ApiClient.convertToType(data['channelId'], 'String');
            }
            if (data.hasOwnProperty('channelTitle')) {
                obj['channelTitle'] = ApiClient.convertToType(data['channelTitle'], 'String');
            }
            if (data.hasOwnProperty('defaultLanguage')) {
                obj['defaultLanguage'] = ApiClient.convertToType(data['defaultLanguage'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('localized')) {
                obj['localized'] = PlaylistLocalization.constructFromObject(data['localized']);
            }
            if (data.hasOwnProperty('publishedAt')) {
                obj['publishedAt'] = ApiClient.convertToType(data['publishedAt'], 'Date');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('thumbnailVideoId')) {
                obj['thumbnailVideoId'] = ApiClient.convertToType(data['thumbnailVideoId'], 'String');
            }
            if (data.hasOwnProperty('thumbnails')) {
                obj['thumbnails'] = ThumbnailDetails.constructFromObject(data['thumbnails']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PlaylistSnippet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PlaylistSnippet</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['channelId'] && !(typeof data['channelId'] === 'string' || data['channelId'] instanceof String)) {
            throw new Error("Expected the field `channelId` to be a primitive type in the JSON string but got " + data['channelId']);
        }
        // ensure the json data is a string
        if (data['channelTitle'] && !(typeof data['channelTitle'] === 'string' || data['channelTitle'] instanceof String)) {
            throw new Error("Expected the field `channelTitle` to be a primitive type in the JSON string but got " + data['channelTitle']);
        }
        // ensure the json data is a string
        if (data['defaultLanguage'] && !(typeof data['defaultLanguage'] === 'string' || data['defaultLanguage'] instanceof String)) {
            throw new Error("Expected the field `defaultLanguage` to be a primitive type in the JSON string but got " + data['defaultLanguage']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `localized`
        if (data['localized']) { // data not null
          PlaylistLocalization.validateJSON(data['localized']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['thumbnailVideoId'] && !(typeof data['thumbnailVideoId'] === 'string' || data['thumbnailVideoId'] instanceof String)) {
            throw new Error("Expected the field `thumbnailVideoId` to be a primitive type in the JSON string but got " + data['thumbnailVideoId']);
        }
        // validate the optional field `thumbnails`
        if (data['thumbnails']) { // data not null
          ThumbnailDetails.validateJSON(data['thumbnails']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * The ID that YouTube uses to uniquely identify the channel that published the playlist.
 * @member {String} channelId
 */
PlaylistSnippet.prototype['channelId'] = undefined;

/**
 * The channel title of the channel that the video belongs to.
 * @member {String} channelTitle
 */
PlaylistSnippet.prototype['channelTitle'] = undefined;

/**
 * The language of the playlist's default title and description.
 * @member {String} defaultLanguage
 */
PlaylistSnippet.prototype['defaultLanguage'] = undefined;

/**
 * The playlist's description.
 * @member {String} description
 */
PlaylistSnippet.prototype['description'] = undefined;

/**
 * @member {module:model/PlaylistLocalization} localized
 */
PlaylistSnippet.prototype['localized'] = undefined;

/**
 * The date and time that the playlist was created.
 * @member {Date} publishedAt
 */
PlaylistSnippet.prototype['publishedAt'] = undefined;

/**
 * Keyword tags associated with the playlist.
 * @member {Array.<String>} tags
 */
PlaylistSnippet.prototype['tags'] = undefined;

/**
 * Note: if the playlist has a custom thumbnail, this field will not be populated. The video id selected by the user that will be used as the thumbnail of this playlist. This field defaults to the first publicly viewable video in the playlist, if: 1. The user has never selected a video to be the thumbnail of the playlist. 2. The user selects a video to be the thumbnail, and then removes that video from the playlist. 3. The user selects a non-owned video to be the thumbnail, but that video becomes private, or gets deleted.
 * @member {String} thumbnailVideoId
 */
PlaylistSnippet.prototype['thumbnailVideoId'] = undefined;

/**
 * @member {module:model/ThumbnailDetails} thumbnails
 */
PlaylistSnippet.prototype['thumbnails'] = undefined;

/**
 * The playlist's title.
 * @member {String} title
 */
PlaylistSnippet.prototype['title'] = undefined;






export default PlaylistSnippet;

