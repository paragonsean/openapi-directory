/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LanguageTag from './LanguageTag';
import LocalizedString from './LocalizedString';

/**
 * The LocalizedProperty model module.
 * @module model/LocalizedProperty
 * @version v3
 */
class LocalizedProperty {
    /**
     * Constructs a new <code>LocalizedProperty</code>.
     * @alias module:model/LocalizedProperty
     */
    constructor() { 
        
        LocalizedProperty.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LocalizedProperty</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LocalizedProperty} obj Optional instance to populate.
     * @return {module:model/LocalizedProperty} The populated <code>LocalizedProperty</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LocalizedProperty();

            if (data.hasOwnProperty('defaultLanguage')) {
                obj['defaultLanguage'] = LanguageTag.constructFromObject(data['defaultLanguage']);
            }
            if (data.hasOwnProperty('localized')) {
                obj['localized'] = ApiClient.convertToType(data['localized'], [LocalizedString]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LocalizedProperty</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LocalizedProperty</code>.
     */
    static validateJSON(data) {
        // validate the optional field `defaultLanguage`
        if (data['defaultLanguage']) { // data not null
          LanguageTag.validateJSON(data['defaultLanguage']);
        }
        if (data['localized']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['localized'])) {
                throw new Error("Expected the field `localized` to be an array in the JSON data but got " + data['localized']);
            }
            // validate the optional field `localized` (array)
            for (const item of data['localized']) {
                LocalizedString.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/LanguageTag} defaultLanguage
 */
LocalizedProperty.prototype['defaultLanguage'] = undefined;

/**
 * @member {Array.<module:model/LocalizedString>} localized
 */
LocalizedProperty.prototype['localized'] = undefined;






export default LocalizedProperty;

