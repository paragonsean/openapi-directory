/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LiveBroadcastStatus model module.
 * @module model/LiveBroadcastStatus
 * @version v3
 */
class LiveBroadcastStatus {
    /**
     * Constructs a new <code>LiveBroadcastStatus</code>.
     * Live broadcast state.
     * @alias module:model/LiveBroadcastStatus
     */
    constructor() { 
        
        LiveBroadcastStatus.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LiveBroadcastStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LiveBroadcastStatus} obj Optional instance to populate.
     * @return {module:model/LiveBroadcastStatus} The populated <code>LiveBroadcastStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LiveBroadcastStatus();

            if (data.hasOwnProperty('lifeCycleStatus')) {
                obj['lifeCycleStatus'] = ApiClient.convertToType(data['lifeCycleStatus'], 'String');
            }
            if (data.hasOwnProperty('liveBroadcastPriority')) {
                obj['liveBroadcastPriority'] = ApiClient.convertToType(data['liveBroadcastPriority'], 'String');
            }
            if (data.hasOwnProperty('madeForKids')) {
                obj['madeForKids'] = ApiClient.convertToType(data['madeForKids'], 'Boolean');
            }
            if (data.hasOwnProperty('privacyStatus')) {
                obj['privacyStatus'] = ApiClient.convertToType(data['privacyStatus'], 'String');
            }
            if (data.hasOwnProperty('recordingStatus')) {
                obj['recordingStatus'] = ApiClient.convertToType(data['recordingStatus'], 'String');
            }
            if (data.hasOwnProperty('selfDeclaredMadeForKids')) {
                obj['selfDeclaredMadeForKids'] = ApiClient.convertToType(data['selfDeclaredMadeForKids'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LiveBroadcastStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LiveBroadcastStatus</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['lifeCycleStatus'] && !(typeof data['lifeCycleStatus'] === 'string' || data['lifeCycleStatus'] instanceof String)) {
            throw new Error("Expected the field `lifeCycleStatus` to be a primitive type in the JSON string but got " + data['lifeCycleStatus']);
        }
        // ensure the json data is a string
        if (data['liveBroadcastPriority'] && !(typeof data['liveBroadcastPriority'] === 'string' || data['liveBroadcastPriority'] instanceof String)) {
            throw new Error("Expected the field `liveBroadcastPriority` to be a primitive type in the JSON string but got " + data['liveBroadcastPriority']);
        }
        // ensure the json data is a string
        if (data['privacyStatus'] && !(typeof data['privacyStatus'] === 'string' || data['privacyStatus'] instanceof String)) {
            throw new Error("Expected the field `privacyStatus` to be a primitive type in the JSON string but got " + data['privacyStatus']);
        }
        // ensure the json data is a string
        if (data['recordingStatus'] && !(typeof data['recordingStatus'] === 'string' || data['recordingStatus'] instanceof String)) {
            throw new Error("Expected the field `recordingStatus` to be a primitive type in the JSON string but got " + data['recordingStatus']);
        }

        return true;
    }


}



/**
 * The broadcast's status. The status can be updated using the API's liveBroadcasts.transition method.
 * @member {module:model/LiveBroadcastStatus.LifeCycleStatusEnum} lifeCycleStatus
 */
LiveBroadcastStatus.prototype['lifeCycleStatus'] = undefined;

/**
 * Priority of the live broadcast event (internal state).
 * @member {module:model/LiveBroadcastStatus.LiveBroadcastPriorityEnum} liveBroadcastPriority
 */
LiveBroadcastStatus.prototype['liveBroadcastPriority'] = undefined;

/**
 * Whether the broadcast is made for kids or not, decided by YouTube instead of the creator. This field is read only.
 * @member {Boolean} madeForKids
 */
LiveBroadcastStatus.prototype['madeForKids'] = undefined;

/**
 * The broadcast's privacy status. Note that the broadcast represents exactly one YouTube video, so the privacy settings are identical to those supported for videos. In addition, you can set this field by modifying the broadcast resource or by setting the privacyStatus field of the corresponding video resource.
 * @member {module:model/LiveBroadcastStatus.PrivacyStatusEnum} privacyStatus
 */
LiveBroadcastStatus.prototype['privacyStatus'] = undefined;

/**
 * The broadcast's recording status.
 * @member {module:model/LiveBroadcastStatus.RecordingStatusEnum} recordingStatus
 */
LiveBroadcastStatus.prototype['recordingStatus'] = undefined;

/**
 * This field will be set to True if the creator declares the broadcast to be kids only: go/live-cw-work.
 * @member {Boolean} selfDeclaredMadeForKids
 */
LiveBroadcastStatus.prototype['selfDeclaredMadeForKids'] = undefined;





/**
 * Allowed values for the <code>lifeCycleStatus</code> property.
 * @enum {String}
 * @readonly
 */
LiveBroadcastStatus['LifeCycleStatusEnum'] = {

    /**
     * value: "lifeCycleStatusUnspecified"
     * @const
     */
    "lifeCycleStatusUnspecified": "lifeCycleStatusUnspecified",

    /**
     * value: "created"
     * @const
     */
    "created": "created",

    /**
     * value: "ready"
     * @const
     */
    "ready": "ready",

    /**
     * value: "testing"
     * @const
     */
    "testing": "testing",

    /**
     * value: "live"
     * @const
     */
    "live": "live",

    /**
     * value: "complete"
     * @const
     */
    "complete": "complete",

    /**
     * value: "revoked"
     * @const
     */
    "revoked": "revoked",

    /**
     * value: "testStarting"
     * @const
     */
    "testStarting": "testStarting",

    /**
     * value: "liveStarting"
     * @const
     */
    "liveStarting": "liveStarting"
};


/**
 * Allowed values for the <code>liveBroadcastPriority</code> property.
 * @enum {String}
 * @readonly
 */
LiveBroadcastStatus['LiveBroadcastPriorityEnum'] = {

    /**
     * value: "liveBroadcastPriorityUnspecified"
     * @const
     */
    "liveBroadcastPriorityUnspecified": "liveBroadcastPriorityUnspecified",

    /**
     * value: "low"
     * @const
     */
    "low": "low",

    /**
     * value: "normal"
     * @const
     */
    "normal": "normal",

    /**
     * value: "high"
     * @const
     */
    "high": "high"
};


/**
 * Allowed values for the <code>privacyStatus</code> property.
 * @enum {String}
 * @readonly
 */
LiveBroadcastStatus['PrivacyStatusEnum'] = {

    /**
     * value: "public"
     * @const
     */
    "public": "public",

    /**
     * value: "unlisted"
     * @const
     */
    "unlisted": "unlisted",

    /**
     * value: "private"
     * @const
     */
    "private": "private"
};


/**
 * Allowed values for the <code>recordingStatus</code> property.
 * @enum {String}
 * @readonly
 */
LiveBroadcastStatus['RecordingStatusEnum'] = {

    /**
     * value: "liveBroadcastRecordingStatusUnspecified"
     * @const
     */
    "liveBroadcastRecordingStatusUnspecified": "liveBroadcastRecordingStatusUnspecified",

    /**
     * value: "notRecording"
     * @const
     */
    "notRecording": "notRecording",

    /**
     * value: "recording"
     * @const
     */
    "recording": "recording",

    /**
     * value: "recorded"
     * @const
     */
    "recorded": "recorded"
};



export default LiveBroadcastStatus;

