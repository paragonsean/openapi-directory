/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LiveStreamConfigurationIssue model module.
 * @module model/LiveStreamConfigurationIssue
 * @version v3
 */
class LiveStreamConfigurationIssue {
    /**
     * Constructs a new <code>LiveStreamConfigurationIssue</code>.
     * @alias module:model/LiveStreamConfigurationIssue
     */
    constructor() { 
        
        LiveStreamConfigurationIssue.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LiveStreamConfigurationIssue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LiveStreamConfigurationIssue} obj Optional instance to populate.
     * @return {module:model/LiveStreamConfigurationIssue} The populated <code>LiveStreamConfigurationIssue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LiveStreamConfigurationIssue();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LiveStreamConfigurationIssue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LiveStreamConfigurationIssue</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }
        // ensure the json data is a string
        if (data['severity'] && !(typeof data['severity'] === 'string' || data['severity'] instanceof String)) {
            throw new Error("Expected the field `severity` to be a primitive type in the JSON string but got " + data['severity']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The long-form description of the issue and how to resolve it.
 * @member {String} description
 */
LiveStreamConfigurationIssue.prototype['description'] = undefined;

/**
 * The short-form reason for this issue.
 * @member {String} reason
 */
LiveStreamConfigurationIssue.prototype['reason'] = undefined;

/**
 * How severe this issue is to the stream.
 * @member {module:model/LiveStreamConfigurationIssue.SeverityEnum} severity
 */
LiveStreamConfigurationIssue.prototype['severity'] = undefined;

/**
 * The kind of error happening.
 * @member {module:model/LiveStreamConfigurationIssue.TypeEnum} type
 */
LiveStreamConfigurationIssue.prototype['type'] = undefined;





/**
 * Allowed values for the <code>severity</code> property.
 * @enum {String}
 * @readonly
 */
LiveStreamConfigurationIssue['SeverityEnum'] = {

    /**
     * value: "info"
     * @const
     */
    "info": "info",

    /**
     * value: "warning"
     * @const
     */
    "warning": "warning",

    /**
     * value: "error"
     * @const
     */
    "error": "error"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
LiveStreamConfigurationIssue['TypeEnum'] = {

    /**
     * value: "gopSizeOver"
     * @const
     */
    "gopSizeOver": "gopSizeOver",

    /**
     * value: "gopSizeLong"
     * @const
     */
    "gopSizeLong": "gopSizeLong",

    /**
     * value: "gopSizeShort"
     * @const
     */
    "gopSizeShort": "gopSizeShort",

    /**
     * value: "openGop"
     * @const
     */
    "openGop": "openGop",

    /**
     * value: "badContainer"
     * @const
     */
    "badContainer": "badContainer",

    /**
     * value: "audioBitrateHigh"
     * @const
     */
    "audioBitrateHigh": "audioBitrateHigh",

    /**
     * value: "audioBitrateLow"
     * @const
     */
    "audioBitrateLow": "audioBitrateLow",

    /**
     * value: "audioSampleRate"
     * @const
     */
    "audioSampleRate": "audioSampleRate",

    /**
     * value: "bitrateHigh"
     * @const
     */
    "bitrateHigh": "bitrateHigh",

    /**
     * value: "bitrateLow"
     * @const
     */
    "bitrateLow": "bitrateLow",

    /**
     * value: "audioCodec"
     * @const
     */
    "audioCodec": "audioCodec",

    /**
     * value: "videoCodec"
     * @const
     */
    "videoCodec": "videoCodec",

    /**
     * value: "noAudioStream"
     * @const
     */
    "noAudioStream": "noAudioStream",

    /**
     * value: "noVideoStream"
     * @const
     */
    "noVideoStream": "noVideoStream",

    /**
     * value: "multipleVideoStreams"
     * @const
     */
    "multipleVideoStreams": "multipleVideoStreams",

    /**
     * value: "multipleAudioStreams"
     * @const
     */
    "multipleAudioStreams": "multipleAudioStreams",

    /**
     * value: "audioTooManyChannels"
     * @const
     */
    "audioTooManyChannels": "audioTooManyChannels",

    /**
     * value: "interlacedVideo"
     * @const
     */
    "interlacedVideo": "interlacedVideo",

    /**
     * value: "frameRateHigh"
     * @const
     */
    "frameRateHigh": "frameRateHigh",

    /**
     * value: "resolutionMismatch"
     * @const
     */
    "resolutionMismatch": "resolutionMismatch",

    /**
     * value: "videoCodecMismatch"
     * @const
     */
    "videoCodecMismatch": "videoCodecMismatch",

    /**
     * value: "videoInterlaceMismatch"
     * @const
     */
    "videoInterlaceMismatch": "videoInterlaceMismatch",

    /**
     * value: "videoProfileMismatch"
     * @const
     */
    "videoProfileMismatch": "videoProfileMismatch",

    /**
     * value: "videoBitrateMismatch"
     * @const
     */
    "videoBitrateMismatch": "videoBitrateMismatch",

    /**
     * value: "framerateMismatch"
     * @const
     */
    "framerateMismatch": "framerateMismatch",

    /**
     * value: "gopMismatch"
     * @const
     */
    "gopMismatch": "gopMismatch",

    /**
     * value: "audioSampleRateMismatch"
     * @const
     */
    "audioSampleRateMismatch": "audioSampleRateMismatch",

    /**
     * value: "audioStereoMismatch"
     * @const
     */
    "audioStereoMismatch": "audioStereoMismatch",

    /**
     * value: "audioCodecMismatch"
     * @const
     */
    "audioCodecMismatch": "audioCodecMismatch",

    /**
     * value: "audioBitrateMismatch"
     * @const
     */
    "audioBitrateMismatch": "audioBitrateMismatch",

    /**
     * value: "videoResolutionSuboptimal"
     * @const
     */
    "videoResolutionSuboptimal": "videoResolutionSuboptimal",

    /**
     * value: "videoResolutionUnsupported"
     * @const
     */
    "videoResolutionUnsupported": "videoResolutionUnsupported",

    /**
     * value: "videoIngestionStarved"
     * @const
     */
    "videoIngestionStarved": "videoIngestionStarved",

    /**
     * value: "videoIngestionFasterThanRealtime"
     * @const
     */
    "videoIngestionFasterThanRealtime": "videoIngestionFasterThanRealtime"
};



export default LiveStreamConfigurationIssue;

