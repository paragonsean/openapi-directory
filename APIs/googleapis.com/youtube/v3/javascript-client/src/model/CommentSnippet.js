/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CommentSnippetAuthorChannelId from './CommentSnippetAuthorChannelId';

/**
 * The CommentSnippet model module.
 * @module model/CommentSnippet
 * @version v3
 */
class CommentSnippet {
    /**
     * Constructs a new <code>CommentSnippet</code>.
     * Basic details about a comment, such as its author and text.
     * @alias module:model/CommentSnippet
     */
    constructor() { 
        
        CommentSnippet.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CommentSnippet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CommentSnippet} obj Optional instance to populate.
     * @return {module:model/CommentSnippet} The populated <code>CommentSnippet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CommentSnippet();

            if (data.hasOwnProperty('authorChannelId')) {
                obj['authorChannelId'] = CommentSnippetAuthorChannelId.constructFromObject(data['authorChannelId']);
            }
            if (data.hasOwnProperty('authorChannelUrl')) {
                obj['authorChannelUrl'] = ApiClient.convertToType(data['authorChannelUrl'], 'String');
            }
            if (data.hasOwnProperty('authorDisplayName')) {
                obj['authorDisplayName'] = ApiClient.convertToType(data['authorDisplayName'], 'String');
            }
            if (data.hasOwnProperty('authorProfileImageUrl')) {
                obj['authorProfileImageUrl'] = ApiClient.convertToType(data['authorProfileImageUrl'], 'String');
            }
            if (data.hasOwnProperty('canRate')) {
                obj['canRate'] = ApiClient.convertToType(data['canRate'], 'Boolean');
            }
            if (data.hasOwnProperty('channelId')) {
                obj['channelId'] = ApiClient.convertToType(data['channelId'], 'String');
            }
            if (data.hasOwnProperty('likeCount')) {
                obj['likeCount'] = ApiClient.convertToType(data['likeCount'], 'Number');
            }
            if (data.hasOwnProperty('moderationStatus')) {
                obj['moderationStatus'] = ApiClient.convertToType(data['moderationStatus'], 'String');
            }
            if (data.hasOwnProperty('parentId')) {
                obj['parentId'] = ApiClient.convertToType(data['parentId'], 'String');
            }
            if (data.hasOwnProperty('publishedAt')) {
                obj['publishedAt'] = ApiClient.convertToType(data['publishedAt'], 'Date');
            }
            if (data.hasOwnProperty('textDisplay')) {
                obj['textDisplay'] = ApiClient.convertToType(data['textDisplay'], 'String');
            }
            if (data.hasOwnProperty('textOriginal')) {
                obj['textOriginal'] = ApiClient.convertToType(data['textOriginal'], 'String');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
            if (data.hasOwnProperty('videoId')) {
                obj['videoId'] = ApiClient.convertToType(data['videoId'], 'String');
            }
            if (data.hasOwnProperty('viewerRating')) {
                obj['viewerRating'] = ApiClient.convertToType(data['viewerRating'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CommentSnippet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CommentSnippet</code>.
     */
    static validateJSON(data) {
        // validate the optional field `authorChannelId`
        if (data['authorChannelId']) { // data not null
          CommentSnippetAuthorChannelId.validateJSON(data['authorChannelId']);
        }
        // ensure the json data is a string
        if (data['authorChannelUrl'] && !(typeof data['authorChannelUrl'] === 'string' || data['authorChannelUrl'] instanceof String)) {
            throw new Error("Expected the field `authorChannelUrl` to be a primitive type in the JSON string but got " + data['authorChannelUrl']);
        }
        // ensure the json data is a string
        if (data['authorDisplayName'] && !(typeof data['authorDisplayName'] === 'string' || data['authorDisplayName'] instanceof String)) {
            throw new Error("Expected the field `authorDisplayName` to be a primitive type in the JSON string but got " + data['authorDisplayName']);
        }
        // ensure the json data is a string
        if (data['authorProfileImageUrl'] && !(typeof data['authorProfileImageUrl'] === 'string' || data['authorProfileImageUrl'] instanceof String)) {
            throw new Error("Expected the field `authorProfileImageUrl` to be a primitive type in the JSON string but got " + data['authorProfileImageUrl']);
        }
        // ensure the json data is a string
        if (data['channelId'] && !(typeof data['channelId'] === 'string' || data['channelId'] instanceof String)) {
            throw new Error("Expected the field `channelId` to be a primitive type in the JSON string but got " + data['channelId']);
        }
        // ensure the json data is a string
        if (data['moderationStatus'] && !(typeof data['moderationStatus'] === 'string' || data['moderationStatus'] instanceof String)) {
            throw new Error("Expected the field `moderationStatus` to be a primitive type in the JSON string but got " + data['moderationStatus']);
        }
        // ensure the json data is a string
        if (data['parentId'] && !(typeof data['parentId'] === 'string' || data['parentId'] instanceof String)) {
            throw new Error("Expected the field `parentId` to be a primitive type in the JSON string but got " + data['parentId']);
        }
        // ensure the json data is a string
        if (data['textDisplay'] && !(typeof data['textDisplay'] === 'string' || data['textDisplay'] instanceof String)) {
            throw new Error("Expected the field `textDisplay` to be a primitive type in the JSON string but got " + data['textDisplay']);
        }
        // ensure the json data is a string
        if (data['textOriginal'] && !(typeof data['textOriginal'] === 'string' || data['textOriginal'] instanceof String)) {
            throw new Error("Expected the field `textOriginal` to be a primitive type in the JSON string but got " + data['textOriginal']);
        }
        // ensure the json data is a string
        if (data['videoId'] && !(typeof data['videoId'] === 'string' || data['videoId'] instanceof String)) {
            throw new Error("Expected the field `videoId` to be a primitive type in the JSON string but got " + data['videoId']);
        }
        // ensure the json data is a string
        if (data['viewerRating'] && !(typeof data['viewerRating'] === 'string' || data['viewerRating'] instanceof String)) {
            throw new Error("Expected the field `viewerRating` to be a primitive type in the JSON string but got " + data['viewerRating']);
        }

        return true;
    }


}



/**
 * @member {module:model/CommentSnippetAuthorChannelId} authorChannelId
 */
CommentSnippet.prototype['authorChannelId'] = undefined;

/**
 * Link to the author's YouTube channel, if any.
 * @member {String} authorChannelUrl
 */
CommentSnippet.prototype['authorChannelUrl'] = undefined;

/**
 * The name of the user who posted the comment.
 * @member {String} authorDisplayName
 */
CommentSnippet.prototype['authorDisplayName'] = undefined;

/**
 * The URL for the avatar of the user who posted the comment.
 * @member {String} authorProfileImageUrl
 */
CommentSnippet.prototype['authorProfileImageUrl'] = undefined;

/**
 * Whether the current viewer can rate this comment.
 * @member {Boolean} canRate
 */
CommentSnippet.prototype['canRate'] = undefined;

/**
 * The id of the corresponding YouTube channel. In case of a channel comment this is the channel the comment refers to. In case of a video comment it's the video's channel.
 * @member {String} channelId
 */
CommentSnippet.prototype['channelId'] = undefined;

/**
 * The total number of likes this comment has received.
 * @member {Number} likeCount
 */
CommentSnippet.prototype['likeCount'] = undefined;

/**
 * The comment's moderation status. Will not be set if the comments were requested through the id filter.
 * @member {module:model/CommentSnippet.ModerationStatusEnum} moderationStatus
 */
CommentSnippet.prototype['moderationStatus'] = undefined;

/**
 * The unique id of the parent comment, only set for replies.
 * @member {String} parentId
 */
CommentSnippet.prototype['parentId'] = undefined;

/**
 * The date and time when the comment was originally published.
 * @member {Date} publishedAt
 */
CommentSnippet.prototype['publishedAt'] = undefined;

/**
 * The comment's text. The format is either plain text or HTML dependent on what has been requested. Even the plain text representation may differ from the text originally posted in that it may replace video links with video titles etc.
 * @member {String} textDisplay
 */
CommentSnippet.prototype['textDisplay'] = undefined;

/**
 * The comment's original raw text as initially posted or last updated. The original text will only be returned if it is accessible to the viewer, which is only guaranteed if the viewer is the comment's author.
 * @member {String} textOriginal
 */
CommentSnippet.prototype['textOriginal'] = undefined;

/**
 * The date and time when the comment was last updated.
 * @member {Date} updatedAt
 */
CommentSnippet.prototype['updatedAt'] = undefined;

/**
 * The ID of the video the comment refers to, if any.
 * @member {String} videoId
 */
CommentSnippet.prototype['videoId'] = undefined;

/**
 * The rating the viewer has given to this comment. For the time being this will never return RATE_TYPE_DISLIKE and instead return RATE_TYPE_NONE. This may change in the future.
 * @member {module:model/CommentSnippet.ViewerRatingEnum} viewerRating
 */
CommentSnippet.prototype['viewerRating'] = undefined;





/**
 * Allowed values for the <code>moderationStatus</code> property.
 * @enum {String}
 * @readonly
 */
CommentSnippet['ModerationStatusEnum'] = {

    /**
     * value: "published"
     * @const
     */
    "published": "published",

    /**
     * value: "heldForReview"
     * @const
     */
    "heldForReview": "heldForReview",

    /**
     * value: "likelySpam"
     * @const
     */
    "likelySpam": "likelySpam",

    /**
     * value: "rejected"
     * @const
     */
    "rejected": "rejected"
};


/**
 * Allowed values for the <code>viewerRating</code> property.
 * @enum {String}
 * @readonly
 */
CommentSnippet['ViewerRatingEnum'] = {

    /**
     * value: "none"
     * @const
     */
    "none": "none",

    /**
     * value: "like"
     * @const
     */
    "like": "like",

    /**
     * value: "dislike"
     * @const
     */
    "dislike": "dislike"
};



export default CommentSnippet;

