/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LiveStreamContentDetails model module.
 * @module model/LiveStreamContentDetails
 * @version v3
 */
class LiveStreamContentDetails {
    /**
     * Constructs a new <code>LiveStreamContentDetails</code>.
     * Detailed settings of a stream.
     * @alias module:model/LiveStreamContentDetails
     */
    constructor() { 
        
        LiveStreamContentDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LiveStreamContentDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LiveStreamContentDetails} obj Optional instance to populate.
     * @return {module:model/LiveStreamContentDetails} The populated <code>LiveStreamContentDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LiveStreamContentDetails();

            if (data.hasOwnProperty('closedCaptionsIngestionUrl')) {
                obj['closedCaptionsIngestionUrl'] = ApiClient.convertToType(data['closedCaptionsIngestionUrl'], 'String');
            }
            if (data.hasOwnProperty('isReusable')) {
                obj['isReusable'] = ApiClient.convertToType(data['isReusable'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LiveStreamContentDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LiveStreamContentDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['closedCaptionsIngestionUrl'] && !(typeof data['closedCaptionsIngestionUrl'] === 'string' || data['closedCaptionsIngestionUrl'] instanceof String)) {
            throw new Error("Expected the field `closedCaptionsIngestionUrl` to be a primitive type in the JSON string but got " + data['closedCaptionsIngestionUrl']);
        }

        return true;
    }


}



/**
 * The ingestion URL where the closed captions of this stream are sent.
 * @member {String} closedCaptionsIngestionUrl
 */
LiveStreamContentDetails.prototype['closedCaptionsIngestionUrl'] = undefined;

/**
 * Indicates whether the stream is reusable, which means that it can be bound to multiple broadcasts. It is common for broadcasters to reuse the same stream for many different broadcasts if those broadcasts occur at different times. If you set this value to false, then the stream will not be reusable, which means that it can only be bound to one broadcast. Non-reusable streams differ from reusable streams in the following ways: - A non-reusable stream can only be bound to one broadcast. - A non-reusable stream might be deleted by an automated process after the broadcast ends. - The liveStreams.list method does not list non-reusable streams if you call the method and set the mine parameter to true. The only way to use that method to retrieve the resource for a non-reusable stream is to use the id parameter to identify the stream. 
 * @member {Boolean} isReusable
 */
LiveStreamContentDetails.prototype['isReusable'] = undefined;






export default LiveStreamContentDetails;

