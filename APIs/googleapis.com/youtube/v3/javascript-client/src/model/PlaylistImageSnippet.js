/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PlaylistImageSnippet model module.
 * @module model/PlaylistImageSnippet
 * @version v3
 */
class PlaylistImageSnippet {
    /**
     * Constructs a new <code>PlaylistImageSnippet</code>.
     * A *playlistImage* resource identifies another resource, such as a image, that is associated with a playlist. In addition, the playlistImage resource contains details about the included resource that pertain specifically to how that resource is used in that playlist. YouTube uses playlists to identify special collections of videos for a channel, such as: - uploaded videos - favorite videos - positively rated (liked) videos - watch history To be more specific, these lists are associated with a channel, which is a collection of a person, group, or company&#39;s videos, playlists, and other YouTube information. You can retrieve the playlist IDs for each of these lists from the channel resource for a given channel. You can then use the playlistImages.list method to retrieve image data for any of those playlists. You can also add or remove images from those lists by calling the playlistImages.insert and playlistImages.delete methods.
     * @alias module:model/PlaylistImageSnippet
     */
    constructor() { 
        
        PlaylistImageSnippet.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PlaylistImageSnippet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PlaylistImageSnippet} obj Optional instance to populate.
     * @return {module:model/PlaylistImageSnippet} The populated <code>PlaylistImageSnippet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PlaylistImageSnippet();

            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('playlistId')) {
                obj['playlistId'] = ApiClient.convertToType(data['playlistId'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PlaylistImageSnippet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PlaylistImageSnippet</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['playlistId'] && !(typeof data['playlistId'] === 'string' || data['playlistId'] instanceof String)) {
            throw new Error("Expected the field `playlistId` to be a primitive type in the JSON string but got " + data['playlistId']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The image height.
 * @member {Number} height
 */
PlaylistImageSnippet.prototype['height'] = undefined;

/**
 * The Playlist ID of the playlist this image is associated with.
 * @member {String} playlistId
 */
PlaylistImageSnippet.prototype['playlistId'] = undefined;

/**
 * The image type.
 * @member {module:model/PlaylistImageSnippet.TypeEnum} type
 */
PlaylistImageSnippet.prototype['type'] = undefined;

/**
 * The image width.
 * @member {Number} width
 */
PlaylistImageSnippet.prototype['width'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
PlaylistImageSnippet['TypeEnum'] = {

    /**
     * value: "hero"
     * @const
     */
    "hero": "hero"
};



export default PlaylistImageSnippet;

