/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VideoFileDetailsVideoStream model module.
 * @module model/VideoFileDetailsVideoStream
 * @version v3
 */
class VideoFileDetailsVideoStream {
    /**
     * Constructs a new <code>VideoFileDetailsVideoStream</code>.
     * Information about a video stream.
     * @alias module:model/VideoFileDetailsVideoStream
     */
    constructor() { 
        
        VideoFileDetailsVideoStream.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VideoFileDetailsVideoStream</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VideoFileDetailsVideoStream} obj Optional instance to populate.
     * @return {module:model/VideoFileDetailsVideoStream} The populated <code>VideoFileDetailsVideoStream</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VideoFileDetailsVideoStream();

            if (data.hasOwnProperty('aspectRatio')) {
                obj['aspectRatio'] = ApiClient.convertToType(data['aspectRatio'], 'Number');
            }
            if (data.hasOwnProperty('bitrateBps')) {
                obj['bitrateBps'] = ApiClient.convertToType(data['bitrateBps'], 'String');
            }
            if (data.hasOwnProperty('codec')) {
                obj['codec'] = ApiClient.convertToType(data['codec'], 'String');
            }
            if (data.hasOwnProperty('frameRateFps')) {
                obj['frameRateFps'] = ApiClient.convertToType(data['frameRateFps'], 'Number');
            }
            if (data.hasOwnProperty('heightPixels')) {
                obj['heightPixels'] = ApiClient.convertToType(data['heightPixels'], 'Number');
            }
            if (data.hasOwnProperty('rotation')) {
                obj['rotation'] = ApiClient.convertToType(data['rotation'], 'String');
            }
            if (data.hasOwnProperty('vendor')) {
                obj['vendor'] = ApiClient.convertToType(data['vendor'], 'String');
            }
            if (data.hasOwnProperty('widthPixels')) {
                obj['widthPixels'] = ApiClient.convertToType(data['widthPixels'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VideoFileDetailsVideoStream</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VideoFileDetailsVideoStream</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bitrateBps'] && !(typeof data['bitrateBps'] === 'string' || data['bitrateBps'] instanceof String)) {
            throw new Error("Expected the field `bitrateBps` to be a primitive type in the JSON string but got " + data['bitrateBps']);
        }
        // ensure the json data is a string
        if (data['codec'] && !(typeof data['codec'] === 'string' || data['codec'] instanceof String)) {
            throw new Error("Expected the field `codec` to be a primitive type in the JSON string but got " + data['codec']);
        }
        // ensure the json data is a string
        if (data['rotation'] && !(typeof data['rotation'] === 'string' || data['rotation'] instanceof String)) {
            throw new Error("Expected the field `rotation` to be a primitive type in the JSON string but got " + data['rotation']);
        }
        // ensure the json data is a string
        if (data['vendor'] && !(typeof data['vendor'] === 'string' || data['vendor'] instanceof String)) {
            throw new Error("Expected the field `vendor` to be a primitive type in the JSON string but got " + data['vendor']);
        }

        return true;
    }


}



/**
 * The video content's display aspect ratio, which specifies the aspect ratio in which the video should be displayed.
 * @member {Number} aspectRatio
 */
VideoFileDetailsVideoStream.prototype['aspectRatio'] = undefined;

/**
 * The video stream's bitrate, in bits per second.
 * @member {String} bitrateBps
 */
VideoFileDetailsVideoStream.prototype['bitrateBps'] = undefined;

/**
 * The video codec that the stream uses.
 * @member {String} codec
 */
VideoFileDetailsVideoStream.prototype['codec'] = undefined;

/**
 * The video stream's frame rate, in frames per second.
 * @member {Number} frameRateFps
 */
VideoFileDetailsVideoStream.prototype['frameRateFps'] = undefined;

/**
 * The encoded video content's height in pixels.
 * @member {Number} heightPixels
 */
VideoFileDetailsVideoStream.prototype['heightPixels'] = undefined;

/**
 * The amount that YouTube needs to rotate the original source content to properly display the video.
 * @member {module:model/VideoFileDetailsVideoStream.RotationEnum} rotation
 */
VideoFileDetailsVideoStream.prototype['rotation'] = undefined;

/**
 * A value that uniquely identifies a video vendor. Typically, the value is a four-letter vendor code.
 * @member {String} vendor
 */
VideoFileDetailsVideoStream.prototype['vendor'] = undefined;

/**
 * The encoded video content's width in pixels. You can calculate the video's encoding aspect ratio as width_pixels / height_pixels.
 * @member {Number} widthPixels
 */
VideoFileDetailsVideoStream.prototype['widthPixels'] = undefined;





/**
 * Allowed values for the <code>rotation</code> property.
 * @enum {String}
 * @readonly
 */
VideoFileDetailsVideoStream['RotationEnum'] = {

    /**
     * value: "none"
     * @const
     */
    "none": "none",

    /**
     * value: "clockwise"
     * @const
     */
    "clockwise": "clockwise",

    /**
     * value: "upsideDown"
     * @const
     */
    "upsideDown": "upsideDown",

    /**
     * value: "counterClockwise"
     * @const
     */
    "counterClockwise": "counterClockwise",

    /**
     * value: "other"
     * @const
     */
    "other": "other"
};



export default VideoFileDetailsVideoStream;

