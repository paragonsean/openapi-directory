/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChannelSectionLocalization from './ChannelSectionLocalization';

/**
 * The ChannelSectionSnippet model module.
 * @module model/ChannelSectionSnippet
 * @version v3
 */
class ChannelSectionSnippet {
    /**
     * Constructs a new <code>ChannelSectionSnippet</code>.
     * Basic details about a channel section, including title, style and position.
     * @alias module:model/ChannelSectionSnippet
     */
    constructor() { 
        
        ChannelSectionSnippet.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ChannelSectionSnippet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChannelSectionSnippet} obj Optional instance to populate.
     * @return {module:model/ChannelSectionSnippet} The populated <code>ChannelSectionSnippet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChannelSectionSnippet();

            if (data.hasOwnProperty('channelId')) {
                obj['channelId'] = ApiClient.convertToType(data['channelId'], 'String');
            }
            if (data.hasOwnProperty('defaultLanguage')) {
                obj['defaultLanguage'] = ApiClient.convertToType(data['defaultLanguage'], 'String');
            }
            if (data.hasOwnProperty('localized')) {
                obj['localized'] = ChannelSectionLocalization.constructFromObject(data['localized']);
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = ApiClient.convertToType(data['position'], 'Number');
            }
            if (data.hasOwnProperty('style')) {
                obj['style'] = ApiClient.convertToType(data['style'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChannelSectionSnippet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChannelSectionSnippet</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['channelId'] && !(typeof data['channelId'] === 'string' || data['channelId'] instanceof String)) {
            throw new Error("Expected the field `channelId` to be a primitive type in the JSON string but got " + data['channelId']);
        }
        // ensure the json data is a string
        if (data['defaultLanguage'] && !(typeof data['defaultLanguage'] === 'string' || data['defaultLanguage'] instanceof String)) {
            throw new Error("Expected the field `defaultLanguage` to be a primitive type in the JSON string but got " + data['defaultLanguage']);
        }
        // validate the optional field `localized`
        if (data['localized']) { // data not null
          ChannelSectionLocalization.validateJSON(data['localized']);
        }
        // ensure the json data is a string
        if (data['style'] && !(typeof data['style'] === 'string' || data['style'] instanceof String)) {
            throw new Error("Expected the field `style` to be a primitive type in the JSON string but got " + data['style']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The ID that YouTube uses to uniquely identify the channel that published the channel section.
 * @member {String} channelId
 */
ChannelSectionSnippet.prototype['channelId'] = undefined;

/**
 * The language of the channel section's default title and description.
 * @member {String} defaultLanguage
 */
ChannelSectionSnippet.prototype['defaultLanguage'] = undefined;

/**
 * @member {module:model/ChannelSectionLocalization} localized
 */
ChannelSectionSnippet.prototype['localized'] = undefined;

/**
 * The position of the channel section in the channel.
 * @member {Number} position
 */
ChannelSectionSnippet.prototype['position'] = undefined;

/**
 * The style of the channel section.
 * @member {module:model/ChannelSectionSnippet.StyleEnum} style
 */
ChannelSectionSnippet.prototype['style'] = undefined;

/**
 * The channel section's title for multiple_playlists and multiple_channels.
 * @member {String} title
 */
ChannelSectionSnippet.prototype['title'] = undefined;

/**
 * The type of the channel section.
 * @member {module:model/ChannelSectionSnippet.TypeEnum} type
 */
ChannelSectionSnippet.prototype['type'] = undefined;





/**
 * Allowed values for the <code>style</code> property.
 * @enum {String}
 * @readonly
 */
ChannelSectionSnippet['StyleEnum'] = {

    /**
     * value: "channelsectionStyleUnspecified"
     * @const
     */
    "channelsectionStyleUnspecified": "channelsectionStyleUnspecified",

    /**
     * value: "horizontalRow"
     * @const
     */
    "horizontalRow": "horizontalRow",

    /**
     * value: "verticalList"
     * @const
     */
    "verticalList": "verticalList"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ChannelSectionSnippet['TypeEnum'] = {

    /**
     * value: "channelsectionTypeUndefined"
     * @const
     */
    "channelsectionTypeUndefined": "channelsectionTypeUndefined",

    /**
     * value: "singlePlaylist"
     * @const
     */
    "singlePlaylist": "singlePlaylist",

    /**
     * value: "multiplePlaylists"
     * @const
     */
    "multiplePlaylists": "multiplePlaylists",

    /**
     * value: "popularUploads"
     * @const
     */
    "popularUploads": "popularUploads",

    /**
     * value: "recentUploads"
     * @const
     */
    "recentUploads": "recentUploads",

    /**
     * value: "likes"
     * @const
     */
    "likes": "likes",

    /**
     * value: "allPlaylists"
     * @const
     */
    "allPlaylists": "allPlaylists",

    /**
     * value: "likedPlaylists"
     * @const
     */
    "likedPlaylists": "likedPlaylists",

    /**
     * value: "recentPosts"
     * @const
     */
    "recentPosts": "recentPosts",

    /**
     * value: "recentActivity"
     * @const
     */
    "recentActivity": "recentActivity",

    /**
     * value: "liveEvents"
     * @const
     */
    "liveEvents": "liveEvents",

    /**
     * value: "upcomingEvents"
     * @const
     */
    "upcomingEvents": "upcomingEvents",

    /**
     * value: "completedEvents"
     * @const
     */
    "completedEvents": "completedEvents",

    /**
     * value: "multipleChannels"
     * @const
     */
    "multipleChannels": "multipleChannels",

    /**
     * value: "postedVideos"
     * @const
     */
    "postedVideos": "postedVideos",

    /**
     * value: "postedPlaylists"
     * @const
     */
    "postedPlaylists": "postedPlaylists",

    /**
     * value: "subscriptions"
     * @const
     */
    "subscriptions": "subscriptions"
};



export default ChannelSectionSnippet;

