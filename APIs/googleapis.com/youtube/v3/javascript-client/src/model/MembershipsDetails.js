/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MembershipsDuration from './MembershipsDuration';
import MembershipsDurationAtLevel from './MembershipsDurationAtLevel';

/**
 * The MembershipsDetails model module.
 * @module model/MembershipsDetails
 * @version v3
 */
class MembershipsDetails {
    /**
     * Constructs a new <code>MembershipsDetails</code>.
     * @alias module:model/MembershipsDetails
     */
    constructor() { 
        
        MembershipsDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MembershipsDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MembershipsDetails} obj Optional instance to populate.
     * @return {module:model/MembershipsDetails} The populated <code>MembershipsDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MembershipsDetails();

            if (data.hasOwnProperty('accessibleLevels')) {
                obj['accessibleLevels'] = ApiClient.convertToType(data['accessibleLevels'], ['String']);
            }
            if (data.hasOwnProperty('highestAccessibleLevel')) {
                obj['highestAccessibleLevel'] = ApiClient.convertToType(data['highestAccessibleLevel'], 'String');
            }
            if (data.hasOwnProperty('highestAccessibleLevelDisplayName')) {
                obj['highestAccessibleLevelDisplayName'] = ApiClient.convertToType(data['highestAccessibleLevelDisplayName'], 'String');
            }
            if (data.hasOwnProperty('membershipsDuration')) {
                obj['membershipsDuration'] = MembershipsDuration.constructFromObject(data['membershipsDuration']);
            }
            if (data.hasOwnProperty('membershipsDurationAtLevels')) {
                obj['membershipsDurationAtLevels'] = ApiClient.convertToType(data['membershipsDurationAtLevels'], [MembershipsDurationAtLevel]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MembershipsDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MembershipsDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['accessibleLevels'])) {
            throw new Error("Expected the field `accessibleLevels` to be an array in the JSON data but got " + data['accessibleLevels']);
        }
        // ensure the json data is a string
        if (data['highestAccessibleLevel'] && !(typeof data['highestAccessibleLevel'] === 'string' || data['highestAccessibleLevel'] instanceof String)) {
            throw new Error("Expected the field `highestAccessibleLevel` to be a primitive type in the JSON string but got " + data['highestAccessibleLevel']);
        }
        // ensure the json data is a string
        if (data['highestAccessibleLevelDisplayName'] && !(typeof data['highestAccessibleLevelDisplayName'] === 'string' || data['highestAccessibleLevelDisplayName'] instanceof String)) {
            throw new Error("Expected the field `highestAccessibleLevelDisplayName` to be a primitive type in the JSON string but got " + data['highestAccessibleLevelDisplayName']);
        }
        // validate the optional field `membershipsDuration`
        if (data['membershipsDuration']) { // data not null
          MembershipsDuration.validateJSON(data['membershipsDuration']);
        }
        if (data['membershipsDurationAtLevels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['membershipsDurationAtLevels'])) {
                throw new Error("Expected the field `membershipsDurationAtLevels` to be an array in the JSON data but got " + data['membershipsDurationAtLevels']);
            }
            // validate the optional field `membershipsDurationAtLevels` (array)
            for (const item of data['membershipsDurationAtLevels']) {
                MembershipsDurationAtLevel.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Ids of all levels that the user has access to. This includes the currently active level and all other levels that are included because of a higher purchase.
 * @member {Array.<String>} accessibleLevels
 */
MembershipsDetails.prototype['accessibleLevels'] = undefined;

/**
 * Id of the highest level that the user has access to at the moment.
 * @member {String} highestAccessibleLevel
 */
MembershipsDetails.prototype['highestAccessibleLevel'] = undefined;

/**
 * Display name for the highest level that the user has access to at the moment.
 * @member {String} highestAccessibleLevelDisplayName
 */
MembershipsDetails.prototype['highestAccessibleLevelDisplayName'] = undefined;

/**
 * @member {module:model/MembershipsDuration} membershipsDuration
 */
MembershipsDetails.prototype['membershipsDuration'] = undefined;

/**
 * Data about memberships duration on particular pricing levels.
 * @member {Array.<module:model/MembershipsDurationAtLevel>} membershipsDurationAtLevels
 */
MembershipsDetails.prototype['membershipsDurationAtLevels'] = undefined;






export default MembershipsDetails;

