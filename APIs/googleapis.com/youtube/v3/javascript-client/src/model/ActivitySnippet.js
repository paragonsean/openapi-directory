/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ThumbnailDetails from './ThumbnailDetails';

/**
 * The ActivitySnippet model module.
 * @module model/ActivitySnippet
 * @version v3
 */
class ActivitySnippet {
    /**
     * Constructs a new <code>ActivitySnippet</code>.
     * Basic details about an activity, including title, description, thumbnails, activity type and group. Next ID: 12
     * @alias module:model/ActivitySnippet
     */
    constructor() { 
        
        ActivitySnippet.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ActivitySnippet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ActivitySnippet} obj Optional instance to populate.
     * @return {module:model/ActivitySnippet} The populated <code>ActivitySnippet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ActivitySnippet();

            if (data.hasOwnProperty('channelId')) {
                obj['channelId'] = ApiClient.convertToType(data['channelId'], 'String');
            }
            if (data.hasOwnProperty('channelTitle')) {
                obj['channelTitle'] = ApiClient.convertToType(data['channelTitle'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('groupId')) {
                obj['groupId'] = ApiClient.convertToType(data['groupId'], 'String');
            }
            if (data.hasOwnProperty('publishedAt')) {
                obj['publishedAt'] = ApiClient.convertToType(data['publishedAt'], 'Date');
            }
            if (data.hasOwnProperty('thumbnails')) {
                obj['thumbnails'] = ThumbnailDetails.constructFromObject(data['thumbnails']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ActivitySnippet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ActivitySnippet</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['channelId'] && !(typeof data['channelId'] === 'string' || data['channelId'] instanceof String)) {
            throw new Error("Expected the field `channelId` to be a primitive type in the JSON string but got " + data['channelId']);
        }
        // ensure the json data is a string
        if (data['channelTitle'] && !(typeof data['channelTitle'] === 'string' || data['channelTitle'] instanceof String)) {
            throw new Error("Expected the field `channelTitle` to be a primitive type in the JSON string but got " + data['channelTitle']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['groupId'] && !(typeof data['groupId'] === 'string' || data['groupId'] instanceof String)) {
            throw new Error("Expected the field `groupId` to be a primitive type in the JSON string but got " + data['groupId']);
        }
        // validate the optional field `thumbnails`
        if (data['thumbnails']) { // data not null
          ThumbnailDetails.validateJSON(data['thumbnails']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The ID that YouTube uses to uniquely identify the channel associated with the activity.
 * @member {String} channelId
 */
ActivitySnippet.prototype['channelId'] = undefined;

/**
 * Channel title for the channel responsible for this activity
 * @member {String} channelTitle
 */
ActivitySnippet.prototype['channelTitle'] = undefined;

/**
 * The description of the resource primarily associated with the activity. @mutable youtube.activities.insert
 * @member {String} description
 */
ActivitySnippet.prototype['description'] = undefined;

/**
 * The group ID associated with the activity. A group ID identifies user events that are associated with the same user and resource. For example, if a user rates a video and marks the same video as a favorite, the entries for those events would have the same group ID in the user's activity feed. In your user interface, you can avoid repetition by grouping events with the same groupId value.
 * @member {String} groupId
 */
ActivitySnippet.prototype['groupId'] = undefined;

/**
 * The date and time that the video was uploaded.
 * @member {Date} publishedAt
 */
ActivitySnippet.prototype['publishedAt'] = undefined;

/**
 * @member {module:model/ThumbnailDetails} thumbnails
 */
ActivitySnippet.prototype['thumbnails'] = undefined;

/**
 * The title of the resource primarily associated with the activity.
 * @member {String} title
 */
ActivitySnippet.prototype['title'] = undefined;

/**
 * The type of activity that the resource describes.
 * @member {module:model/ActivitySnippet.TypeEnum} type
 */
ActivitySnippet.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ActivitySnippet['TypeEnum'] = {

    /**
     * value: "typeUnspecified"
     * @const
     */
    "typeUnspecified": "typeUnspecified",

    /**
     * value: "upload"
     * @const
     */
    "upload": "upload",

    /**
     * value: "like"
     * @const
     */
    "like": "like",

    /**
     * value: "favorite"
     * @const
     */
    "favorite": "favorite",

    /**
     * value: "comment"
     * @const
     */
    "comment": "comment",

    /**
     * value: "subscription"
     * @const
     */
    "subscription": "subscription",

    /**
     * value: "playlistItem"
     * @const
     */
    "playlistItem": "playlistItem",

    /**
     * value: "recommendation"
     * @const
     */
    "recommendation": "recommendation",

    /**
     * value: "bulletin"
     * @const
     */
    "bulletin": "bulletin",

    /**
     * value: "social"
     * @const
     */
    "social": "social",

    /**
     * value: "channelItem"
     * @const
     */
    "channelItem": "channelItem",

    /**
     * value: "promotedItem"
     * @const
     */
    "promotedItem": "promotedItem"
};



export default ActivitySnippet;

