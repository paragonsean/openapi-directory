/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VideoFileDetailsAudioStream from './VideoFileDetailsAudioStream';
import VideoFileDetailsVideoStream from './VideoFileDetailsVideoStream';

/**
 * The VideoFileDetails model module.
 * @module model/VideoFileDetails
 * @version v3
 */
class VideoFileDetails {
    /**
     * Constructs a new <code>VideoFileDetails</code>.
     * Describes original video file properties, including technical details about audio and video streams, but also metadata information like content length, digitization time, or geotagging information.
     * @alias module:model/VideoFileDetails
     */
    constructor() { 
        
        VideoFileDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VideoFileDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VideoFileDetails} obj Optional instance to populate.
     * @return {module:model/VideoFileDetails} The populated <code>VideoFileDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VideoFileDetails();

            if (data.hasOwnProperty('audioStreams')) {
                obj['audioStreams'] = ApiClient.convertToType(data['audioStreams'], [VideoFileDetailsAudioStream]);
            }
            if (data.hasOwnProperty('bitrateBps')) {
                obj['bitrateBps'] = ApiClient.convertToType(data['bitrateBps'], 'String');
            }
            if (data.hasOwnProperty('container')) {
                obj['container'] = ApiClient.convertToType(data['container'], 'String');
            }
            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'String');
            }
            if (data.hasOwnProperty('durationMs')) {
                obj['durationMs'] = ApiClient.convertToType(data['durationMs'], 'String');
            }
            if (data.hasOwnProperty('fileName')) {
                obj['fileName'] = ApiClient.convertToType(data['fileName'], 'String');
            }
            if (data.hasOwnProperty('fileSize')) {
                obj['fileSize'] = ApiClient.convertToType(data['fileSize'], 'String');
            }
            if (data.hasOwnProperty('fileType')) {
                obj['fileType'] = ApiClient.convertToType(data['fileType'], 'String');
            }
            if (data.hasOwnProperty('videoStreams')) {
                obj['videoStreams'] = ApiClient.convertToType(data['videoStreams'], [VideoFileDetailsVideoStream]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VideoFileDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VideoFileDetails</code>.
     */
    static validateJSON(data) {
        if (data['audioStreams']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['audioStreams'])) {
                throw new Error("Expected the field `audioStreams` to be an array in the JSON data but got " + data['audioStreams']);
            }
            // validate the optional field `audioStreams` (array)
            for (const item of data['audioStreams']) {
                VideoFileDetailsAudioStream.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['bitrateBps'] && !(typeof data['bitrateBps'] === 'string' || data['bitrateBps'] instanceof String)) {
            throw new Error("Expected the field `bitrateBps` to be a primitive type in the JSON string but got " + data['bitrateBps']);
        }
        // ensure the json data is a string
        if (data['container'] && !(typeof data['container'] === 'string' || data['container'] instanceof String)) {
            throw new Error("Expected the field `container` to be a primitive type in the JSON string but got " + data['container']);
        }
        // ensure the json data is a string
        if (data['creationTime'] && !(typeof data['creationTime'] === 'string' || data['creationTime'] instanceof String)) {
            throw new Error("Expected the field `creationTime` to be a primitive type in the JSON string but got " + data['creationTime']);
        }
        // ensure the json data is a string
        if (data['durationMs'] && !(typeof data['durationMs'] === 'string' || data['durationMs'] instanceof String)) {
            throw new Error("Expected the field `durationMs` to be a primitive type in the JSON string but got " + data['durationMs']);
        }
        // ensure the json data is a string
        if (data['fileName'] && !(typeof data['fileName'] === 'string' || data['fileName'] instanceof String)) {
            throw new Error("Expected the field `fileName` to be a primitive type in the JSON string but got " + data['fileName']);
        }
        // ensure the json data is a string
        if (data['fileSize'] && !(typeof data['fileSize'] === 'string' || data['fileSize'] instanceof String)) {
            throw new Error("Expected the field `fileSize` to be a primitive type in the JSON string but got " + data['fileSize']);
        }
        // ensure the json data is a string
        if (data['fileType'] && !(typeof data['fileType'] === 'string' || data['fileType'] instanceof String)) {
            throw new Error("Expected the field `fileType` to be a primitive type in the JSON string but got " + data['fileType']);
        }
        if (data['videoStreams']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['videoStreams'])) {
                throw new Error("Expected the field `videoStreams` to be an array in the JSON data but got " + data['videoStreams']);
            }
            // validate the optional field `videoStreams` (array)
            for (const item of data['videoStreams']) {
                VideoFileDetailsVideoStream.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * A list of audio streams contained in the uploaded video file. Each item in the list contains detailed metadata about an audio stream.
 * @member {Array.<module:model/VideoFileDetailsAudioStream>} audioStreams
 */
VideoFileDetails.prototype['audioStreams'] = undefined;

/**
 * The uploaded video file's combined (video and audio) bitrate in bits per second.
 * @member {String} bitrateBps
 */
VideoFileDetails.prototype['bitrateBps'] = undefined;

/**
 * The uploaded video file's container format.
 * @member {String} container
 */
VideoFileDetails.prototype['container'] = undefined;

/**
 * The date and time when the uploaded video file was created. The value is specified in ISO 8601 format. Currently, the following ISO 8601 formats are supported: - Date only: YYYY-MM-DD - Naive time: YYYY-MM-DDTHH:MM:SS - Time with timezone: YYYY-MM-DDTHH:MM:SS+HH:MM 
 * @member {String} creationTime
 */
VideoFileDetails.prototype['creationTime'] = undefined;

/**
 * The length of the uploaded video in milliseconds.
 * @member {String} durationMs
 */
VideoFileDetails.prototype['durationMs'] = undefined;

/**
 * The uploaded file's name. This field is present whether a video file or another type of file was uploaded.
 * @member {String} fileName
 */
VideoFileDetails.prototype['fileName'] = undefined;

/**
 * The uploaded file's size in bytes. This field is present whether a video file or another type of file was uploaded.
 * @member {String} fileSize
 */
VideoFileDetails.prototype['fileSize'] = undefined;

/**
 * The uploaded file's type as detected by YouTube's video processing engine. Currently, YouTube only processes video files, but this field is present whether a video file or another type of file was uploaded.
 * @member {module:model/VideoFileDetails.FileTypeEnum} fileType
 */
VideoFileDetails.prototype['fileType'] = undefined;

/**
 * A list of video streams contained in the uploaded video file. Each item in the list contains detailed metadata about a video stream.
 * @member {Array.<module:model/VideoFileDetailsVideoStream>} videoStreams
 */
VideoFileDetails.prototype['videoStreams'] = undefined;





/**
 * Allowed values for the <code>fileType</code> property.
 * @enum {String}
 * @readonly
 */
VideoFileDetails['FileTypeEnum'] = {

    /**
     * value: "video"
     * @const
     */
    "video": "video",

    /**
     * value: "audio"
     * @const
     */
    "audio": "audio",

    /**
     * value: "image"
     * @const
     */
    "image": "image",

    /**
     * value: "archive"
     * @const
     */
    "archive": "archive",

    /**
     * value: "document"
     * @const
     */
    "document": "document",

    /**
     * value: "project"
     * @const
     */
    "project": "project",

    /**
     * value: "other"
     * @const
     */
    "other": "other"
};



export default VideoFileDetails;

