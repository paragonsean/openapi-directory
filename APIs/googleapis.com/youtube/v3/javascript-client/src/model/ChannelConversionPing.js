/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ChannelConversionPing model module.
 * @module model/ChannelConversionPing
 * @version v3
 */
class ChannelConversionPing {
    /**
     * Constructs a new <code>ChannelConversionPing</code>.
     * Pings that the app shall fire (authenticated by biscotti cookie). Each ping has a context, in which the app must fire the ping, and a url identifying the ping.
     * @alias module:model/ChannelConversionPing
     */
    constructor() { 
        
        ChannelConversionPing.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ChannelConversionPing</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChannelConversionPing} obj Optional instance to populate.
     * @return {module:model/ChannelConversionPing} The populated <code>ChannelConversionPing</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChannelConversionPing();

            if (data.hasOwnProperty('context')) {
                obj['context'] = ApiClient.convertToType(data['context'], 'String');
            }
            if (data.hasOwnProperty('conversionUrl')) {
                obj['conversionUrl'] = ApiClient.convertToType(data['conversionUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChannelConversionPing</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChannelConversionPing</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['context'] && !(typeof data['context'] === 'string' || data['context'] instanceof String)) {
            throw new Error("Expected the field `context` to be a primitive type in the JSON string but got " + data['context']);
        }
        // ensure the json data is a string
        if (data['conversionUrl'] && !(typeof data['conversionUrl'] === 'string' || data['conversionUrl'] instanceof String)) {
            throw new Error("Expected the field `conversionUrl` to be a primitive type in the JSON string but got " + data['conversionUrl']);
        }

        return true;
    }


}



/**
 * Defines the context of the ping.
 * @member {module:model/ChannelConversionPing.ContextEnum} context
 */
ChannelConversionPing.prototype['context'] = undefined;

/**
 * The url (without the schema) that the player shall send the ping to. It's at caller's descretion to decide which schema to use (http vs https) Example of a returned url: //googleads.g.doubleclick.net/pagead/ viewthroughconversion/962985656/?data=path%3DtHe_path%3Btype%3D cview%3Butuid%3DGISQtTNGYqaYl4sKxoVvKA&labe=default The caller must append biscotti authentication (ms param in case of mobile, for example) to this ping.
 * @member {String} conversionUrl
 */
ChannelConversionPing.prototype['conversionUrl'] = undefined;





/**
 * Allowed values for the <code>context</code> property.
 * @enum {String}
 * @readonly
 */
ChannelConversionPing['ContextEnum'] = {

    /**
     * value: "subscribe"
     * @const
     */
    "subscribe": "subscribe",

    /**
     * value: "unsubscribe"
     * @const
     */
    "unsubscribe": "unsubscribe",

    /**
     * value: "cview"
     * @const
     */
    "cview": "cview"
};



export default ChannelConversionPing;

