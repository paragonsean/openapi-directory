/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VideoProcessingDetailsProcessingProgress from './VideoProcessingDetailsProcessingProgress';

/**
 * The VideoProcessingDetails model module.
 * @module model/VideoProcessingDetails
 * @version v3
 */
class VideoProcessingDetails {
    /**
     * Constructs a new <code>VideoProcessingDetails</code>.
     * Describes processing status and progress and availability of some other Video resource parts.
     * @alias module:model/VideoProcessingDetails
     */
    constructor() { 
        
        VideoProcessingDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VideoProcessingDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VideoProcessingDetails} obj Optional instance to populate.
     * @return {module:model/VideoProcessingDetails} The populated <code>VideoProcessingDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VideoProcessingDetails();

            if (data.hasOwnProperty('editorSuggestionsAvailability')) {
                obj['editorSuggestionsAvailability'] = ApiClient.convertToType(data['editorSuggestionsAvailability'], 'String');
            }
            if (data.hasOwnProperty('fileDetailsAvailability')) {
                obj['fileDetailsAvailability'] = ApiClient.convertToType(data['fileDetailsAvailability'], 'String');
            }
            if (data.hasOwnProperty('processingFailureReason')) {
                obj['processingFailureReason'] = ApiClient.convertToType(data['processingFailureReason'], 'String');
            }
            if (data.hasOwnProperty('processingIssuesAvailability')) {
                obj['processingIssuesAvailability'] = ApiClient.convertToType(data['processingIssuesAvailability'], 'String');
            }
            if (data.hasOwnProperty('processingProgress')) {
                obj['processingProgress'] = VideoProcessingDetailsProcessingProgress.constructFromObject(data['processingProgress']);
            }
            if (data.hasOwnProperty('processingStatus')) {
                obj['processingStatus'] = ApiClient.convertToType(data['processingStatus'], 'String');
            }
            if (data.hasOwnProperty('tagSuggestionsAvailability')) {
                obj['tagSuggestionsAvailability'] = ApiClient.convertToType(data['tagSuggestionsAvailability'], 'String');
            }
            if (data.hasOwnProperty('thumbnailsAvailability')) {
                obj['thumbnailsAvailability'] = ApiClient.convertToType(data['thumbnailsAvailability'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VideoProcessingDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VideoProcessingDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['editorSuggestionsAvailability'] && !(typeof data['editorSuggestionsAvailability'] === 'string' || data['editorSuggestionsAvailability'] instanceof String)) {
            throw new Error("Expected the field `editorSuggestionsAvailability` to be a primitive type in the JSON string but got " + data['editorSuggestionsAvailability']);
        }
        // ensure the json data is a string
        if (data['fileDetailsAvailability'] && !(typeof data['fileDetailsAvailability'] === 'string' || data['fileDetailsAvailability'] instanceof String)) {
            throw new Error("Expected the field `fileDetailsAvailability` to be a primitive type in the JSON string but got " + data['fileDetailsAvailability']);
        }
        // ensure the json data is a string
        if (data['processingFailureReason'] && !(typeof data['processingFailureReason'] === 'string' || data['processingFailureReason'] instanceof String)) {
            throw new Error("Expected the field `processingFailureReason` to be a primitive type in the JSON string but got " + data['processingFailureReason']);
        }
        // ensure the json data is a string
        if (data['processingIssuesAvailability'] && !(typeof data['processingIssuesAvailability'] === 'string' || data['processingIssuesAvailability'] instanceof String)) {
            throw new Error("Expected the field `processingIssuesAvailability` to be a primitive type in the JSON string but got " + data['processingIssuesAvailability']);
        }
        // validate the optional field `processingProgress`
        if (data['processingProgress']) { // data not null
          VideoProcessingDetailsProcessingProgress.validateJSON(data['processingProgress']);
        }
        // ensure the json data is a string
        if (data['processingStatus'] && !(typeof data['processingStatus'] === 'string' || data['processingStatus'] instanceof String)) {
            throw new Error("Expected the field `processingStatus` to be a primitive type in the JSON string but got " + data['processingStatus']);
        }
        // ensure the json data is a string
        if (data['tagSuggestionsAvailability'] && !(typeof data['tagSuggestionsAvailability'] === 'string' || data['tagSuggestionsAvailability'] instanceof String)) {
            throw new Error("Expected the field `tagSuggestionsAvailability` to be a primitive type in the JSON string but got " + data['tagSuggestionsAvailability']);
        }
        // ensure the json data is a string
        if (data['thumbnailsAvailability'] && !(typeof data['thumbnailsAvailability'] === 'string' || data['thumbnailsAvailability'] instanceof String)) {
            throw new Error("Expected the field `thumbnailsAvailability` to be a primitive type in the JSON string but got " + data['thumbnailsAvailability']);
        }

        return true;
    }


}



/**
 * This value indicates whether video editing suggestions, which might improve video quality or the playback experience, are available for the video. You can retrieve these suggestions by requesting the suggestions part in your videos.list() request.
 * @member {String} editorSuggestionsAvailability
 */
VideoProcessingDetails.prototype['editorSuggestionsAvailability'] = undefined;

/**
 * This value indicates whether file details are available for the uploaded video. You can retrieve a video's file details by requesting the fileDetails part in your videos.list() request.
 * @member {String} fileDetailsAvailability
 */
VideoProcessingDetails.prototype['fileDetailsAvailability'] = undefined;

/**
 * The reason that YouTube failed to process the video. This property will only have a value if the processingStatus property's value is failed.
 * @member {module:model/VideoProcessingDetails.ProcessingFailureReasonEnum} processingFailureReason
 */
VideoProcessingDetails.prototype['processingFailureReason'] = undefined;

/**
 * This value indicates whether the video processing engine has generated suggestions that might improve YouTube's ability to process the the video, warnings that explain video processing problems, or errors that cause video processing problems. You can retrieve these suggestions by requesting the suggestions part in your videos.list() request.
 * @member {String} processingIssuesAvailability
 */
VideoProcessingDetails.prototype['processingIssuesAvailability'] = undefined;

/**
 * @member {module:model/VideoProcessingDetailsProcessingProgress} processingProgress
 */
VideoProcessingDetails.prototype['processingProgress'] = undefined;

/**
 * The video's processing status. This value indicates whether YouTube was able to process the video or if the video is still being processed.
 * @member {module:model/VideoProcessingDetails.ProcessingStatusEnum} processingStatus
 */
VideoProcessingDetails.prototype['processingStatus'] = undefined;

/**
 * This value indicates whether keyword (tag) suggestions are available for the video. Tags can be added to a video's metadata to make it easier for other users to find the video. You can retrieve these suggestions by requesting the suggestions part in your videos.list() request.
 * @member {String} tagSuggestionsAvailability
 */
VideoProcessingDetails.prototype['tagSuggestionsAvailability'] = undefined;

/**
 * This value indicates whether thumbnail images have been generated for the video.
 * @member {String} thumbnailsAvailability
 */
VideoProcessingDetails.prototype['thumbnailsAvailability'] = undefined;





/**
 * Allowed values for the <code>processingFailureReason</code> property.
 * @enum {String}
 * @readonly
 */
VideoProcessingDetails['ProcessingFailureReasonEnum'] = {

    /**
     * value: "uploadFailed"
     * @const
     */
    "uploadFailed": "uploadFailed",

    /**
     * value: "transcodeFailed"
     * @const
     */
    "transcodeFailed": "transcodeFailed",

    /**
     * value: "streamingFailed"
     * @const
     */
    "streamingFailed": "streamingFailed",

    /**
     * value: "other"
     * @const
     */
    "other": "other"
};


/**
 * Allowed values for the <code>processingStatus</code> property.
 * @enum {String}
 * @readonly
 */
VideoProcessingDetails['ProcessingStatusEnum'] = {

    /**
     * value: "processing"
     * @const
     */
    "processing": "processing",

    /**
     * value: "succeeded"
     * @const
     */
    "succeeded": "succeeded",

    /**
     * value: "failed"
     * @const
     */
    "failed": "failed",

    /**
     * value: "terminated"
     * @const
     */
    "terminated": "terminated"
};



export default VideoProcessingDetails;

