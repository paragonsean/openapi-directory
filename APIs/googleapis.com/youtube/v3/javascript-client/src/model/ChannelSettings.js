/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ChannelSettings model module.
 * @module model/ChannelSettings
 * @version v3
 */
class ChannelSettings {
    /**
     * Constructs a new <code>ChannelSettings</code>.
     * Branding properties for the channel view.
     * @alias module:model/ChannelSettings
     */
    constructor() { 
        
        ChannelSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ChannelSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChannelSettings} obj Optional instance to populate.
     * @return {module:model/ChannelSettings} The populated <code>ChannelSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChannelSettings();

            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('defaultLanguage')) {
                obj['defaultLanguage'] = ApiClient.convertToType(data['defaultLanguage'], 'String');
            }
            if (data.hasOwnProperty('defaultTab')) {
                obj['defaultTab'] = ApiClient.convertToType(data['defaultTab'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('featuredChannelsTitle')) {
                obj['featuredChannelsTitle'] = ApiClient.convertToType(data['featuredChannelsTitle'], 'String');
            }
            if (data.hasOwnProperty('featuredChannelsUrls')) {
                obj['featuredChannelsUrls'] = ApiClient.convertToType(data['featuredChannelsUrls'], ['String']);
            }
            if (data.hasOwnProperty('keywords')) {
                obj['keywords'] = ApiClient.convertToType(data['keywords'], 'String');
            }
            if (data.hasOwnProperty('moderateComments')) {
                obj['moderateComments'] = ApiClient.convertToType(data['moderateComments'], 'Boolean');
            }
            if (data.hasOwnProperty('profileColor')) {
                obj['profileColor'] = ApiClient.convertToType(data['profileColor'], 'String');
            }
            if (data.hasOwnProperty('showBrowseView')) {
                obj['showBrowseView'] = ApiClient.convertToType(data['showBrowseView'], 'Boolean');
            }
            if (data.hasOwnProperty('showRelatedChannels')) {
                obj['showRelatedChannels'] = ApiClient.convertToType(data['showRelatedChannels'], 'Boolean');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('trackingAnalyticsAccountId')) {
                obj['trackingAnalyticsAccountId'] = ApiClient.convertToType(data['trackingAnalyticsAccountId'], 'String');
            }
            if (data.hasOwnProperty('unsubscribedTrailer')) {
                obj['unsubscribedTrailer'] = ApiClient.convertToType(data['unsubscribedTrailer'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChannelSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChannelSettings</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['defaultLanguage'] && !(typeof data['defaultLanguage'] === 'string' || data['defaultLanguage'] instanceof String)) {
            throw new Error("Expected the field `defaultLanguage` to be a primitive type in the JSON string but got " + data['defaultLanguage']);
        }
        // ensure the json data is a string
        if (data['defaultTab'] && !(typeof data['defaultTab'] === 'string' || data['defaultTab'] instanceof String)) {
            throw new Error("Expected the field `defaultTab` to be a primitive type in the JSON string but got " + data['defaultTab']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['featuredChannelsTitle'] && !(typeof data['featuredChannelsTitle'] === 'string' || data['featuredChannelsTitle'] instanceof String)) {
            throw new Error("Expected the field `featuredChannelsTitle` to be a primitive type in the JSON string but got " + data['featuredChannelsTitle']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['featuredChannelsUrls'])) {
            throw new Error("Expected the field `featuredChannelsUrls` to be an array in the JSON data but got " + data['featuredChannelsUrls']);
        }
        // ensure the json data is a string
        if (data['keywords'] && !(typeof data['keywords'] === 'string' || data['keywords'] instanceof String)) {
            throw new Error("Expected the field `keywords` to be a primitive type in the JSON string but got " + data['keywords']);
        }
        // ensure the json data is a string
        if (data['profileColor'] && !(typeof data['profileColor'] === 'string' || data['profileColor'] instanceof String)) {
            throw new Error("Expected the field `profileColor` to be a primitive type in the JSON string but got " + data['profileColor']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['trackingAnalyticsAccountId'] && !(typeof data['trackingAnalyticsAccountId'] === 'string' || data['trackingAnalyticsAccountId'] instanceof String)) {
            throw new Error("Expected the field `trackingAnalyticsAccountId` to be a primitive type in the JSON string but got " + data['trackingAnalyticsAccountId']);
        }
        // ensure the json data is a string
        if (data['unsubscribedTrailer'] && !(typeof data['unsubscribedTrailer'] === 'string' || data['unsubscribedTrailer'] instanceof String)) {
            throw new Error("Expected the field `unsubscribedTrailer` to be a primitive type in the JSON string but got " + data['unsubscribedTrailer']);
        }

        return true;
    }


}



/**
 * The country of the channel.
 * @member {String} country
 */
ChannelSettings.prototype['country'] = undefined;

/**
 * @member {String} defaultLanguage
 */
ChannelSettings.prototype['defaultLanguage'] = undefined;

/**
 * Which content tab users should see when viewing the channel.
 * @member {String} defaultTab
 */
ChannelSettings.prototype['defaultTab'] = undefined;

/**
 * Specifies the channel description.
 * @member {String} description
 */
ChannelSettings.prototype['description'] = undefined;

/**
 * Title for the featured channels tab.
 * @member {String} featuredChannelsTitle
 */
ChannelSettings.prototype['featuredChannelsTitle'] = undefined;

/**
 * The list of featured channels.
 * @member {Array.<String>} featuredChannelsUrls
 */
ChannelSettings.prototype['featuredChannelsUrls'] = undefined;

/**
 * Lists keywords associated with the channel, comma-separated.
 * @member {String} keywords
 */
ChannelSettings.prototype['keywords'] = undefined;

/**
 * Whether user-submitted comments left on the channel page need to be approved by the channel owner to be publicly visible.
 * @member {Boolean} moderateComments
 */
ChannelSettings.prototype['moderateComments'] = undefined;

/**
 * A prominent color that can be rendered on this channel page.
 * @member {String} profileColor
 */
ChannelSettings.prototype['profileColor'] = undefined;

/**
 * Whether the tab to browse the videos should be displayed.
 * @member {Boolean} showBrowseView
 */
ChannelSettings.prototype['showBrowseView'] = undefined;

/**
 * Whether related channels should be proposed.
 * @member {Boolean} showRelatedChannels
 */
ChannelSettings.prototype['showRelatedChannels'] = undefined;

/**
 * Specifies the channel title.
 * @member {String} title
 */
ChannelSettings.prototype['title'] = undefined;

/**
 * The ID for a Google Analytics account to track and measure traffic to the channels.
 * @member {String} trackingAnalyticsAccountId
 */
ChannelSettings.prototype['trackingAnalyticsAccountId'] = undefined;

/**
 * The trailer of the channel, for users that are not subscribers.
 * @member {String} unsubscribedTrailer
 */
ChannelSettings.prototype['unsubscribedTrailer'] = undefined;






export default ChannelSettings;

