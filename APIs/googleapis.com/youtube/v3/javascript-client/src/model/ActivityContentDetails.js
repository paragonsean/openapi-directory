/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ActivityContentDetailsBulletin from './ActivityContentDetailsBulletin';
import ActivityContentDetailsChannelItem from './ActivityContentDetailsChannelItem';
import ActivityContentDetailsComment from './ActivityContentDetailsComment';
import ActivityContentDetailsFavorite from './ActivityContentDetailsFavorite';
import ActivityContentDetailsLike from './ActivityContentDetailsLike';
import ActivityContentDetailsPlaylistItem from './ActivityContentDetailsPlaylistItem';
import ActivityContentDetailsPromotedItem from './ActivityContentDetailsPromotedItem';
import ActivityContentDetailsRecommendation from './ActivityContentDetailsRecommendation';
import ActivityContentDetailsSocial from './ActivityContentDetailsSocial';
import ActivityContentDetailsSubscription from './ActivityContentDetailsSubscription';
import ActivityContentDetailsUpload from './ActivityContentDetailsUpload';

/**
 * The ActivityContentDetails model module.
 * @module model/ActivityContentDetails
 * @version v3
 */
class ActivityContentDetails {
    /**
     * Constructs a new <code>ActivityContentDetails</code>.
     * Details about the content of an activity: the video that was shared, the channel that was subscribed to, etc.
     * @alias module:model/ActivityContentDetails
     */
    constructor() { 
        
        ActivityContentDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ActivityContentDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ActivityContentDetails} obj Optional instance to populate.
     * @return {module:model/ActivityContentDetails} The populated <code>ActivityContentDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ActivityContentDetails();

            if (data.hasOwnProperty('bulletin')) {
                obj['bulletin'] = ActivityContentDetailsBulletin.constructFromObject(data['bulletin']);
            }
            if (data.hasOwnProperty('channelItem')) {
                obj['channelItem'] = ActivityContentDetailsChannelItem.constructFromObject(data['channelItem']);
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ActivityContentDetailsComment.constructFromObject(data['comment']);
            }
            if (data.hasOwnProperty('favorite')) {
                obj['favorite'] = ActivityContentDetailsFavorite.constructFromObject(data['favorite']);
            }
            if (data.hasOwnProperty('like')) {
                obj['like'] = ActivityContentDetailsLike.constructFromObject(data['like']);
            }
            if (data.hasOwnProperty('playlistItem')) {
                obj['playlistItem'] = ActivityContentDetailsPlaylistItem.constructFromObject(data['playlistItem']);
            }
            if (data.hasOwnProperty('promotedItem')) {
                obj['promotedItem'] = ActivityContentDetailsPromotedItem.constructFromObject(data['promotedItem']);
            }
            if (data.hasOwnProperty('recommendation')) {
                obj['recommendation'] = ActivityContentDetailsRecommendation.constructFromObject(data['recommendation']);
            }
            if (data.hasOwnProperty('social')) {
                obj['social'] = ActivityContentDetailsSocial.constructFromObject(data['social']);
            }
            if (data.hasOwnProperty('subscription')) {
                obj['subscription'] = ActivityContentDetailsSubscription.constructFromObject(data['subscription']);
            }
            if (data.hasOwnProperty('upload')) {
                obj['upload'] = ActivityContentDetailsUpload.constructFromObject(data['upload']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ActivityContentDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ActivityContentDetails</code>.
     */
    static validateJSON(data) {
        // validate the optional field `bulletin`
        if (data['bulletin']) { // data not null
          ActivityContentDetailsBulletin.validateJSON(data['bulletin']);
        }
        // validate the optional field `channelItem`
        if (data['channelItem']) { // data not null
          ActivityContentDetailsChannelItem.validateJSON(data['channelItem']);
        }
        // validate the optional field `comment`
        if (data['comment']) { // data not null
          ActivityContentDetailsComment.validateJSON(data['comment']);
        }
        // validate the optional field `favorite`
        if (data['favorite']) { // data not null
          ActivityContentDetailsFavorite.validateJSON(data['favorite']);
        }
        // validate the optional field `like`
        if (data['like']) { // data not null
          ActivityContentDetailsLike.validateJSON(data['like']);
        }
        // validate the optional field `playlistItem`
        if (data['playlistItem']) { // data not null
          ActivityContentDetailsPlaylistItem.validateJSON(data['playlistItem']);
        }
        // validate the optional field `promotedItem`
        if (data['promotedItem']) { // data not null
          ActivityContentDetailsPromotedItem.validateJSON(data['promotedItem']);
        }
        // validate the optional field `recommendation`
        if (data['recommendation']) { // data not null
          ActivityContentDetailsRecommendation.validateJSON(data['recommendation']);
        }
        // validate the optional field `social`
        if (data['social']) { // data not null
          ActivityContentDetailsSocial.validateJSON(data['social']);
        }
        // validate the optional field `subscription`
        if (data['subscription']) { // data not null
          ActivityContentDetailsSubscription.validateJSON(data['subscription']);
        }
        // validate the optional field `upload`
        if (data['upload']) { // data not null
          ActivityContentDetailsUpload.validateJSON(data['upload']);
        }

        return true;
    }


}



/**
 * @member {module:model/ActivityContentDetailsBulletin} bulletin
 */
ActivityContentDetails.prototype['bulletin'] = undefined;

/**
 * @member {module:model/ActivityContentDetailsChannelItem} channelItem
 */
ActivityContentDetails.prototype['channelItem'] = undefined;

/**
 * @member {module:model/ActivityContentDetailsComment} comment
 */
ActivityContentDetails.prototype['comment'] = undefined;

/**
 * @member {module:model/ActivityContentDetailsFavorite} favorite
 */
ActivityContentDetails.prototype['favorite'] = undefined;

/**
 * @member {module:model/ActivityContentDetailsLike} like
 */
ActivityContentDetails.prototype['like'] = undefined;

/**
 * @member {module:model/ActivityContentDetailsPlaylistItem} playlistItem
 */
ActivityContentDetails.prototype['playlistItem'] = undefined;

/**
 * @member {module:model/ActivityContentDetailsPromotedItem} promotedItem
 */
ActivityContentDetails.prototype['promotedItem'] = undefined;

/**
 * @member {module:model/ActivityContentDetailsRecommendation} recommendation
 */
ActivityContentDetails.prototype['recommendation'] = undefined;

/**
 * @member {module:model/ActivityContentDetailsSocial} social
 */
ActivityContentDetails.prototype['social'] = undefined;

/**
 * @member {module:model/ActivityContentDetailsSubscription} subscription
 */
ActivityContentDetails.prototype['subscription'] = undefined;

/**
 * @member {module:model/ActivityContentDetailsUpload} upload
 */
ActivityContentDetails.prototype['upload'] = undefined;






export default ActivityContentDetails;

