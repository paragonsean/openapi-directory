/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Cuepoint model module.
 * @module model/Cuepoint
 * @version v3
 */
class Cuepoint {
    /**
     * Constructs a new <code>Cuepoint</code>.
     * Note that there may be a 5-second end-point resolution issue. For instance, if a cuepoint comes in for 22:03:27, we may stuff the cuepoint into 22:03:25 or 22:03:30, depending. This is an artifact of HLS.
     * @alias module:model/Cuepoint
     */
    constructor() { 
        
        Cuepoint.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Cuepoint</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Cuepoint} obj Optional instance to populate.
     * @return {module:model/Cuepoint} The populated <code>Cuepoint</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Cuepoint();

            if (data.hasOwnProperty('cueType')) {
                obj['cueType'] = ApiClient.convertToType(data['cueType'], 'String');
            }
            if (data.hasOwnProperty('durationSecs')) {
                obj['durationSecs'] = ApiClient.convertToType(data['durationSecs'], 'Number');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('insertionOffsetTimeMs')) {
                obj['insertionOffsetTimeMs'] = ApiClient.convertToType(data['insertionOffsetTimeMs'], 'String');
            }
            if (data.hasOwnProperty('walltimeMs')) {
                obj['walltimeMs'] = ApiClient.convertToType(data['walltimeMs'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Cuepoint</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Cuepoint</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cueType'] && !(typeof data['cueType'] === 'string' || data['cueType'] instanceof String)) {
            throw new Error("Expected the field `cueType` to be a primitive type in the JSON string but got " + data['cueType']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['insertionOffsetTimeMs'] && !(typeof data['insertionOffsetTimeMs'] === 'string' || data['insertionOffsetTimeMs'] instanceof String)) {
            throw new Error("Expected the field `insertionOffsetTimeMs` to be a primitive type in the JSON string but got " + data['insertionOffsetTimeMs']);
        }
        // ensure the json data is a string
        if (data['walltimeMs'] && !(typeof data['walltimeMs'] === 'string' || data['walltimeMs'] instanceof String)) {
            throw new Error("Expected the field `walltimeMs` to be a primitive type in the JSON string but got " + data['walltimeMs']);
        }

        return true;
    }


}



/**
 * @member {module:model/Cuepoint.CueTypeEnum} cueType
 */
Cuepoint.prototype['cueType'] = undefined;

/**
 * The duration of this cuepoint.
 * @member {Number} durationSecs
 */
Cuepoint.prototype['durationSecs'] = undefined;

/**
 * @member {String} etag
 */
Cuepoint.prototype['etag'] = undefined;

/**
 * The identifier for cuepoint resource.
 * @member {String} id
 */
Cuepoint.prototype['id'] = undefined;

/**
 * The time when the cuepoint should be inserted by offset to the broadcast actual start time.
 * @member {String} insertionOffsetTimeMs
 */
Cuepoint.prototype['insertionOffsetTimeMs'] = undefined;

/**
 * The wall clock time at which the cuepoint should be inserted. Only one of insertion_offset_time_ms and walltime_ms may be set at a time.
 * @member {String} walltimeMs
 */
Cuepoint.prototype['walltimeMs'] = undefined;





/**
 * Allowed values for the <code>cueType</code> property.
 * @enum {String}
 * @readonly
 */
Cuepoint['CueTypeEnum'] = {

    /**
     * value: "cueTypeUnspecified"
     * @const
     */
    "cueTypeUnspecified": "cueTypeUnspecified",

    /**
     * value: "cueTypeAd"
     * @const
     */
    "cueTypeAd": "cueTypeAd"
};



export default Cuepoint;

