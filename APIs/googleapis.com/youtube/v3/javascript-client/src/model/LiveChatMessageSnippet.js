/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LiveChatFanFundingEventDetails from './LiveChatFanFundingEventDetails';
import LiveChatGiftMembershipReceivedDetails from './LiveChatGiftMembershipReceivedDetails';
import LiveChatMemberMilestoneChatDetails from './LiveChatMemberMilestoneChatDetails';
import LiveChatMembershipGiftingDetails from './LiveChatMembershipGiftingDetails';
import LiveChatMessageDeletedDetails from './LiveChatMessageDeletedDetails';
import LiveChatMessageRetractedDetails from './LiveChatMessageRetractedDetails';
import LiveChatNewSponsorDetails from './LiveChatNewSponsorDetails';
import LiveChatPollDetails from './LiveChatPollDetails';
import LiveChatSuperChatDetails from './LiveChatSuperChatDetails';
import LiveChatSuperStickerDetails from './LiveChatSuperStickerDetails';
import LiveChatTextMessageDetails from './LiveChatTextMessageDetails';
import LiveChatUserBannedMessageDetails from './LiveChatUserBannedMessageDetails';

/**
 * The LiveChatMessageSnippet model module.
 * @module model/LiveChatMessageSnippet
 * @version v3
 */
class LiveChatMessageSnippet {
    /**
     * Constructs a new <code>LiveChatMessageSnippet</code>.
     * Next ID: 34
     * @alias module:model/LiveChatMessageSnippet
     */
    constructor() { 
        
        LiveChatMessageSnippet.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LiveChatMessageSnippet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LiveChatMessageSnippet} obj Optional instance to populate.
     * @return {module:model/LiveChatMessageSnippet} The populated <code>LiveChatMessageSnippet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LiveChatMessageSnippet();

            if (data.hasOwnProperty('authorChannelId')) {
                obj['authorChannelId'] = ApiClient.convertToType(data['authorChannelId'], 'String');
            }
            if (data.hasOwnProperty('displayMessage')) {
                obj['displayMessage'] = ApiClient.convertToType(data['displayMessage'], 'String');
            }
            if (data.hasOwnProperty('fanFundingEventDetails')) {
                obj['fanFundingEventDetails'] = LiveChatFanFundingEventDetails.constructFromObject(data['fanFundingEventDetails']);
            }
            if (data.hasOwnProperty('giftMembershipReceivedDetails')) {
                obj['giftMembershipReceivedDetails'] = LiveChatGiftMembershipReceivedDetails.constructFromObject(data['giftMembershipReceivedDetails']);
            }
            if (data.hasOwnProperty('hasDisplayContent')) {
                obj['hasDisplayContent'] = ApiClient.convertToType(data['hasDisplayContent'], 'Boolean');
            }
            if (data.hasOwnProperty('liveChatId')) {
                obj['liveChatId'] = ApiClient.convertToType(data['liveChatId'], 'String');
            }
            if (data.hasOwnProperty('memberMilestoneChatDetails')) {
                obj['memberMilestoneChatDetails'] = LiveChatMemberMilestoneChatDetails.constructFromObject(data['memberMilestoneChatDetails']);
            }
            if (data.hasOwnProperty('membershipGiftingDetails')) {
                obj['membershipGiftingDetails'] = LiveChatMembershipGiftingDetails.constructFromObject(data['membershipGiftingDetails']);
            }
            if (data.hasOwnProperty('messageDeletedDetails')) {
                obj['messageDeletedDetails'] = LiveChatMessageDeletedDetails.constructFromObject(data['messageDeletedDetails']);
            }
            if (data.hasOwnProperty('messageRetractedDetails')) {
                obj['messageRetractedDetails'] = LiveChatMessageRetractedDetails.constructFromObject(data['messageRetractedDetails']);
            }
            if (data.hasOwnProperty('newSponsorDetails')) {
                obj['newSponsorDetails'] = LiveChatNewSponsorDetails.constructFromObject(data['newSponsorDetails']);
            }
            if (data.hasOwnProperty('pollDetails')) {
                obj['pollDetails'] = LiveChatPollDetails.constructFromObject(data['pollDetails']);
            }
            if (data.hasOwnProperty('publishedAt')) {
                obj['publishedAt'] = ApiClient.convertToType(data['publishedAt'], 'Date');
            }
            if (data.hasOwnProperty('superChatDetails')) {
                obj['superChatDetails'] = LiveChatSuperChatDetails.constructFromObject(data['superChatDetails']);
            }
            if (data.hasOwnProperty('superStickerDetails')) {
                obj['superStickerDetails'] = LiveChatSuperStickerDetails.constructFromObject(data['superStickerDetails']);
            }
            if (data.hasOwnProperty('textMessageDetails')) {
                obj['textMessageDetails'] = LiveChatTextMessageDetails.constructFromObject(data['textMessageDetails']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('userBannedDetails')) {
                obj['userBannedDetails'] = LiveChatUserBannedMessageDetails.constructFromObject(data['userBannedDetails']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LiveChatMessageSnippet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LiveChatMessageSnippet</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['authorChannelId'] && !(typeof data['authorChannelId'] === 'string' || data['authorChannelId'] instanceof String)) {
            throw new Error("Expected the field `authorChannelId` to be a primitive type in the JSON string but got " + data['authorChannelId']);
        }
        // ensure the json data is a string
        if (data['displayMessage'] && !(typeof data['displayMessage'] === 'string' || data['displayMessage'] instanceof String)) {
            throw new Error("Expected the field `displayMessage` to be a primitive type in the JSON string but got " + data['displayMessage']);
        }
        // validate the optional field `fanFundingEventDetails`
        if (data['fanFundingEventDetails']) { // data not null
          LiveChatFanFundingEventDetails.validateJSON(data['fanFundingEventDetails']);
        }
        // validate the optional field `giftMembershipReceivedDetails`
        if (data['giftMembershipReceivedDetails']) { // data not null
          LiveChatGiftMembershipReceivedDetails.validateJSON(data['giftMembershipReceivedDetails']);
        }
        // ensure the json data is a string
        if (data['liveChatId'] && !(typeof data['liveChatId'] === 'string' || data['liveChatId'] instanceof String)) {
            throw new Error("Expected the field `liveChatId` to be a primitive type in the JSON string but got " + data['liveChatId']);
        }
        // validate the optional field `memberMilestoneChatDetails`
        if (data['memberMilestoneChatDetails']) { // data not null
          LiveChatMemberMilestoneChatDetails.validateJSON(data['memberMilestoneChatDetails']);
        }
        // validate the optional field `membershipGiftingDetails`
        if (data['membershipGiftingDetails']) { // data not null
          LiveChatMembershipGiftingDetails.validateJSON(data['membershipGiftingDetails']);
        }
        // validate the optional field `messageDeletedDetails`
        if (data['messageDeletedDetails']) { // data not null
          LiveChatMessageDeletedDetails.validateJSON(data['messageDeletedDetails']);
        }
        // validate the optional field `messageRetractedDetails`
        if (data['messageRetractedDetails']) { // data not null
          LiveChatMessageRetractedDetails.validateJSON(data['messageRetractedDetails']);
        }
        // validate the optional field `newSponsorDetails`
        if (data['newSponsorDetails']) { // data not null
          LiveChatNewSponsorDetails.validateJSON(data['newSponsorDetails']);
        }
        // validate the optional field `pollDetails`
        if (data['pollDetails']) { // data not null
          LiveChatPollDetails.validateJSON(data['pollDetails']);
        }
        // validate the optional field `superChatDetails`
        if (data['superChatDetails']) { // data not null
          LiveChatSuperChatDetails.validateJSON(data['superChatDetails']);
        }
        // validate the optional field `superStickerDetails`
        if (data['superStickerDetails']) { // data not null
          LiveChatSuperStickerDetails.validateJSON(data['superStickerDetails']);
        }
        // validate the optional field `textMessageDetails`
        if (data['textMessageDetails']) { // data not null
          LiveChatTextMessageDetails.validateJSON(data['textMessageDetails']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // validate the optional field `userBannedDetails`
        if (data['userBannedDetails']) { // data not null
          LiveChatUserBannedMessageDetails.validateJSON(data['userBannedDetails']);
        }

        return true;
    }


}



/**
 * The ID of the user that authored this message, this field is not always filled. textMessageEvent - the user that wrote the message fanFundingEvent - the user that funded the broadcast newSponsorEvent - the user that just became a sponsor memberMilestoneChatEvent - the member that sent the message membershipGiftingEvent - the user that made the purchase giftMembershipReceivedEvent - the user that received the gift membership messageDeletedEvent - the moderator that took the action messageRetractedEvent - the author that retracted their message userBannedEvent - the moderator that took the action superChatEvent - the user that made the purchase superStickerEvent - the user that made the purchase pollEvent - the user that created the poll
 * @member {String} authorChannelId
 */
LiveChatMessageSnippet.prototype['authorChannelId'] = undefined;

/**
 * Contains a string that can be displayed to the user. If this field is not present the message is silent, at the moment only messages of type TOMBSTONE and CHAT_ENDED_EVENT are silent.
 * @member {String} displayMessage
 */
LiveChatMessageSnippet.prototype['displayMessage'] = undefined;

/**
 * @member {module:model/LiveChatFanFundingEventDetails} fanFundingEventDetails
 */
LiveChatMessageSnippet.prototype['fanFundingEventDetails'] = undefined;

/**
 * @member {module:model/LiveChatGiftMembershipReceivedDetails} giftMembershipReceivedDetails
 */
LiveChatMessageSnippet.prototype['giftMembershipReceivedDetails'] = undefined;

/**
 * Whether the message has display content that should be displayed to users.
 * @member {Boolean} hasDisplayContent
 */
LiveChatMessageSnippet.prototype['hasDisplayContent'] = undefined;

/**
 * @member {String} liveChatId
 */
LiveChatMessageSnippet.prototype['liveChatId'] = undefined;

/**
 * @member {module:model/LiveChatMemberMilestoneChatDetails} memberMilestoneChatDetails
 */
LiveChatMessageSnippet.prototype['memberMilestoneChatDetails'] = undefined;

/**
 * @member {module:model/LiveChatMembershipGiftingDetails} membershipGiftingDetails
 */
LiveChatMessageSnippet.prototype['membershipGiftingDetails'] = undefined;

/**
 * @member {module:model/LiveChatMessageDeletedDetails} messageDeletedDetails
 */
LiveChatMessageSnippet.prototype['messageDeletedDetails'] = undefined;

/**
 * @member {module:model/LiveChatMessageRetractedDetails} messageRetractedDetails
 */
LiveChatMessageSnippet.prototype['messageRetractedDetails'] = undefined;

/**
 * @member {module:model/LiveChatNewSponsorDetails} newSponsorDetails
 */
LiveChatMessageSnippet.prototype['newSponsorDetails'] = undefined;

/**
 * @member {module:model/LiveChatPollDetails} pollDetails
 */
LiveChatMessageSnippet.prototype['pollDetails'] = undefined;

/**
 * The date and time when the message was orignally published.
 * @member {Date} publishedAt
 */
LiveChatMessageSnippet.prototype['publishedAt'] = undefined;

/**
 * @member {module:model/LiveChatSuperChatDetails} superChatDetails
 */
LiveChatMessageSnippet.prototype['superChatDetails'] = undefined;

/**
 * @member {module:model/LiveChatSuperStickerDetails} superStickerDetails
 */
LiveChatMessageSnippet.prototype['superStickerDetails'] = undefined;

/**
 * @member {module:model/LiveChatTextMessageDetails} textMessageDetails
 */
LiveChatMessageSnippet.prototype['textMessageDetails'] = undefined;

/**
 * The type of message, this will always be present, it determines the contents of the message as well as which fields will be present.
 * @member {module:model/LiveChatMessageSnippet.TypeEnum} type
 */
LiveChatMessageSnippet.prototype['type'] = undefined;

/**
 * @member {module:model/LiveChatUserBannedMessageDetails} userBannedDetails
 */
LiveChatMessageSnippet.prototype['userBannedDetails'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
LiveChatMessageSnippet['TypeEnum'] = {

    /**
     * value: "invalidType"
     * @const
     */
    "invalidType": "invalidType",

    /**
     * value: "textMessageEvent"
     * @const
     */
    "textMessageEvent": "textMessageEvent",

    /**
     * value: "tombstone"
     * @const
     */
    "tombstone": "tombstone",

    /**
     * value: "fanFundingEvent"
     * @const
     */
    "fanFundingEvent": "fanFundingEvent",

    /**
     * value: "chatEndedEvent"
     * @const
     */
    "chatEndedEvent": "chatEndedEvent",

    /**
     * value: "sponsorOnlyModeStartedEvent"
     * @const
     */
    "sponsorOnlyModeStartedEvent": "sponsorOnlyModeStartedEvent",

    /**
     * value: "sponsorOnlyModeEndedEvent"
     * @const
     */
    "sponsorOnlyModeEndedEvent": "sponsorOnlyModeEndedEvent",

    /**
     * value: "newSponsorEvent"
     * @const
     */
    "newSponsorEvent": "newSponsorEvent",

    /**
     * value: "memberMilestoneChatEvent"
     * @const
     */
    "memberMilestoneChatEvent": "memberMilestoneChatEvent",

    /**
     * value: "membershipGiftingEvent"
     * @const
     */
    "membershipGiftingEvent": "membershipGiftingEvent",

    /**
     * value: "giftMembershipReceivedEvent"
     * @const
     */
    "giftMembershipReceivedEvent": "giftMembershipReceivedEvent",

    /**
     * value: "messageDeletedEvent"
     * @const
     */
    "messageDeletedEvent": "messageDeletedEvent",

    /**
     * value: "messageRetractedEvent"
     * @const
     */
    "messageRetractedEvent": "messageRetractedEvent",

    /**
     * value: "userBannedEvent"
     * @const
     */
    "userBannedEvent": "userBannedEvent",

    /**
     * value: "superChatEvent"
     * @const
     */
    "superChatEvent": "superChatEvent",

    /**
     * value: "superStickerEvent"
     * @const
     */
    "superStickerEvent": "superStickerEvent",

    /**
     * value: "pollEvent"
     * @const
     */
    "pollEvent": "pollEvent"
};



export default LiveChatMessageSnippet;

