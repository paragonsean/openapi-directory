/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IngestionInfo model module.
 * @module model/IngestionInfo
 * @version v3
 */
class IngestionInfo {
    /**
     * Constructs a new <code>IngestionInfo</code>.
     * Describes information necessary for ingesting an RTMP, HTTP, or SRT stream.
     * @alias module:model/IngestionInfo
     */
    constructor() { 
        
        IngestionInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IngestionInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IngestionInfo} obj Optional instance to populate.
     * @return {module:model/IngestionInfo} The populated <code>IngestionInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IngestionInfo();

            if (data.hasOwnProperty('backupIngestionAddress')) {
                obj['backupIngestionAddress'] = ApiClient.convertToType(data['backupIngestionAddress'], 'String');
            }
            if (data.hasOwnProperty('ingestionAddress')) {
                obj['ingestionAddress'] = ApiClient.convertToType(data['ingestionAddress'], 'String');
            }
            if (data.hasOwnProperty('rtmpsBackupIngestionAddress')) {
                obj['rtmpsBackupIngestionAddress'] = ApiClient.convertToType(data['rtmpsBackupIngestionAddress'], 'String');
            }
            if (data.hasOwnProperty('rtmpsIngestionAddress')) {
                obj['rtmpsIngestionAddress'] = ApiClient.convertToType(data['rtmpsIngestionAddress'], 'String');
            }
            if (data.hasOwnProperty('streamName')) {
                obj['streamName'] = ApiClient.convertToType(data['streamName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IngestionInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IngestionInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['backupIngestionAddress'] && !(typeof data['backupIngestionAddress'] === 'string' || data['backupIngestionAddress'] instanceof String)) {
            throw new Error("Expected the field `backupIngestionAddress` to be a primitive type in the JSON string but got " + data['backupIngestionAddress']);
        }
        // ensure the json data is a string
        if (data['ingestionAddress'] && !(typeof data['ingestionAddress'] === 'string' || data['ingestionAddress'] instanceof String)) {
            throw new Error("Expected the field `ingestionAddress` to be a primitive type in the JSON string but got " + data['ingestionAddress']);
        }
        // ensure the json data is a string
        if (data['rtmpsBackupIngestionAddress'] && !(typeof data['rtmpsBackupIngestionAddress'] === 'string' || data['rtmpsBackupIngestionAddress'] instanceof String)) {
            throw new Error("Expected the field `rtmpsBackupIngestionAddress` to be a primitive type in the JSON string but got " + data['rtmpsBackupIngestionAddress']);
        }
        // ensure the json data is a string
        if (data['rtmpsIngestionAddress'] && !(typeof data['rtmpsIngestionAddress'] === 'string' || data['rtmpsIngestionAddress'] instanceof String)) {
            throw new Error("Expected the field `rtmpsIngestionAddress` to be a primitive type in the JSON string but got " + data['rtmpsIngestionAddress']);
        }
        // ensure the json data is a string
        if (data['streamName'] && !(typeof data['streamName'] === 'string' || data['streamName'] instanceof String)) {
            throw new Error("Expected the field `streamName` to be a primitive type in the JSON string but got " + data['streamName']);
        }

        return true;
    }


}



/**
 * The backup ingestion URL that you should use to stream video to YouTube. You have the option of simultaneously streaming the content that you are sending to the ingestionAddress to this URL.
 * @member {String} backupIngestionAddress
 */
IngestionInfo.prototype['backupIngestionAddress'] = undefined;

/**
 * The primary ingestion URL that you should use to stream video to YouTube. You must stream video to this URL. Depending on which application or tool you use to encode your video stream, you may need to enter the stream URL and stream name separately or you may need to concatenate them in the following format: *STREAM_URL/STREAM_NAME* 
 * @member {String} ingestionAddress
 */
IngestionInfo.prototype['ingestionAddress'] = undefined;

/**
 * This ingestion url may be used instead of backupIngestionAddress in order to stream via RTMPS. Not applicable to non-RTMP streams.
 * @member {String} rtmpsBackupIngestionAddress
 */
IngestionInfo.prototype['rtmpsBackupIngestionAddress'] = undefined;

/**
 * This ingestion url may be used instead of ingestionAddress in order to stream via RTMPS. Not applicable to non-RTMP streams.
 * @member {String} rtmpsIngestionAddress
 */
IngestionInfo.prototype['rtmpsIngestionAddress'] = undefined;

/**
 * The stream name that YouTube assigns to the video stream.
 * @member {String} streamName
 */
IngestionInfo.prototype['streamName'] = undefined;






export default IngestionInfo;

