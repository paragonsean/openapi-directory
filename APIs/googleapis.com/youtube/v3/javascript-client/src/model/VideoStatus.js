/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VideoStatus model module.
 * @module model/VideoStatus
 * @version v3
 */
class VideoStatus {
    /**
     * Constructs a new <code>VideoStatus</code>.
     * Basic details about a video category, such as its localized title. Next Id: 18
     * @alias module:model/VideoStatus
     */
    constructor() { 
        
        VideoStatus.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VideoStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VideoStatus} obj Optional instance to populate.
     * @return {module:model/VideoStatus} The populated <code>VideoStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VideoStatus();

            if (data.hasOwnProperty('embeddable')) {
                obj['embeddable'] = ApiClient.convertToType(data['embeddable'], 'Boolean');
            }
            if (data.hasOwnProperty('failureReason')) {
                obj['failureReason'] = ApiClient.convertToType(data['failureReason'], 'String');
            }
            if (data.hasOwnProperty('license')) {
                obj['license'] = ApiClient.convertToType(data['license'], 'String');
            }
            if (data.hasOwnProperty('madeForKids')) {
                obj['madeForKids'] = ApiClient.convertToType(data['madeForKids'], 'Boolean');
            }
            if (data.hasOwnProperty('privacyStatus')) {
                obj['privacyStatus'] = ApiClient.convertToType(data['privacyStatus'], 'String');
            }
            if (data.hasOwnProperty('publicStatsViewable')) {
                obj['publicStatsViewable'] = ApiClient.convertToType(data['publicStatsViewable'], 'Boolean');
            }
            if (data.hasOwnProperty('publishAt')) {
                obj['publishAt'] = ApiClient.convertToType(data['publishAt'], 'Date');
            }
            if (data.hasOwnProperty('rejectionReason')) {
                obj['rejectionReason'] = ApiClient.convertToType(data['rejectionReason'], 'String');
            }
            if (data.hasOwnProperty('selfDeclaredMadeForKids')) {
                obj['selfDeclaredMadeForKids'] = ApiClient.convertToType(data['selfDeclaredMadeForKids'], 'Boolean');
            }
            if (data.hasOwnProperty('uploadStatus')) {
                obj['uploadStatus'] = ApiClient.convertToType(data['uploadStatus'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VideoStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VideoStatus</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['failureReason'] && !(typeof data['failureReason'] === 'string' || data['failureReason'] instanceof String)) {
            throw new Error("Expected the field `failureReason` to be a primitive type in the JSON string but got " + data['failureReason']);
        }
        // ensure the json data is a string
        if (data['license'] && !(typeof data['license'] === 'string' || data['license'] instanceof String)) {
            throw new Error("Expected the field `license` to be a primitive type in the JSON string but got " + data['license']);
        }
        // ensure the json data is a string
        if (data['privacyStatus'] && !(typeof data['privacyStatus'] === 'string' || data['privacyStatus'] instanceof String)) {
            throw new Error("Expected the field `privacyStatus` to be a primitive type in the JSON string but got " + data['privacyStatus']);
        }
        // ensure the json data is a string
        if (data['rejectionReason'] && !(typeof data['rejectionReason'] === 'string' || data['rejectionReason'] instanceof String)) {
            throw new Error("Expected the field `rejectionReason` to be a primitive type in the JSON string but got " + data['rejectionReason']);
        }
        // ensure the json data is a string
        if (data['uploadStatus'] && !(typeof data['uploadStatus'] === 'string' || data['uploadStatus'] instanceof String)) {
            throw new Error("Expected the field `uploadStatus` to be a primitive type in the JSON string but got " + data['uploadStatus']);
        }

        return true;
    }


}



/**
 * This value indicates if the video can be embedded on another website. @mutable youtube.videos.insert youtube.videos.update
 * @member {Boolean} embeddable
 */
VideoStatus.prototype['embeddable'] = undefined;

/**
 * This value explains why a video failed to upload. This property is only present if the uploadStatus property indicates that the upload failed.
 * @member {module:model/VideoStatus.FailureReasonEnum} failureReason
 */
VideoStatus.prototype['failureReason'] = undefined;

/**
 * The video's license. @mutable youtube.videos.insert youtube.videos.update
 * @member {module:model/VideoStatus.LicenseEnum} license
 */
VideoStatus.prototype['license'] = undefined;

/**
 * @member {Boolean} madeForKids
 */
VideoStatus.prototype['madeForKids'] = undefined;

/**
 * The video's privacy status.
 * @member {module:model/VideoStatus.PrivacyStatusEnum} privacyStatus
 */
VideoStatus.prototype['privacyStatus'] = undefined;

/**
 * This value indicates if the extended video statistics on the watch page can be viewed by everyone. Note that the view count, likes, etc will still be visible if this is disabled. @mutable youtube.videos.insert youtube.videos.update
 * @member {Boolean} publicStatsViewable
 */
VideoStatus.prototype['publicStatsViewable'] = undefined;

/**
 * The date and time when the video is scheduled to publish. It can be set only if the privacy status of the video is private..
 * @member {Date} publishAt
 */
VideoStatus.prototype['publishAt'] = undefined;

/**
 * This value explains why YouTube rejected an uploaded video. This property is only present if the uploadStatus property indicates that the upload was rejected.
 * @member {module:model/VideoStatus.RejectionReasonEnum} rejectionReason
 */
VideoStatus.prototype['rejectionReason'] = undefined;

/**
 * @member {Boolean} selfDeclaredMadeForKids
 */
VideoStatus.prototype['selfDeclaredMadeForKids'] = undefined;

/**
 * The status of the uploaded video.
 * @member {module:model/VideoStatus.UploadStatusEnum} uploadStatus
 */
VideoStatus.prototype['uploadStatus'] = undefined;





/**
 * Allowed values for the <code>failureReason</code> property.
 * @enum {String}
 * @readonly
 */
VideoStatus['FailureReasonEnum'] = {

    /**
     * value: "conversion"
     * @const
     */
    "conversion": "conversion",

    /**
     * value: "invalidFile"
     * @const
     */
    "invalidFile": "invalidFile",

    /**
     * value: "emptyFile"
     * @const
     */
    "emptyFile": "emptyFile",

    /**
     * value: "tooSmall"
     * @const
     */
    "tooSmall": "tooSmall",

    /**
     * value: "codec"
     * @const
     */
    "codec": "codec",

    /**
     * value: "uploadAborted"
     * @const
     */
    "uploadAborted": "uploadAborted"
};


/**
 * Allowed values for the <code>license</code> property.
 * @enum {String}
 * @readonly
 */
VideoStatus['LicenseEnum'] = {

    /**
     * value: "youtube"
     * @const
     */
    "youtube": "youtube",

    /**
     * value: "creativeCommon"
     * @const
     */
    "creativeCommon": "creativeCommon"
};


/**
 * Allowed values for the <code>privacyStatus</code> property.
 * @enum {String}
 * @readonly
 */
VideoStatus['PrivacyStatusEnum'] = {

    /**
     * value: "public"
     * @const
     */
    "public": "public",

    /**
     * value: "unlisted"
     * @const
     */
    "unlisted": "unlisted",

    /**
     * value: "private"
     * @const
     */
    "private": "private"
};


/**
 * Allowed values for the <code>rejectionReason</code> property.
 * @enum {String}
 * @readonly
 */
VideoStatus['RejectionReasonEnum'] = {

    /**
     * value: "copyright"
     * @const
     */
    "copyright": "copyright",

    /**
     * value: "inappropriate"
     * @const
     */
    "inappropriate": "inappropriate",

    /**
     * value: "duplicate"
     * @const
     */
    "duplicate": "duplicate",

    /**
     * value: "termsOfUse"
     * @const
     */
    "termsOfUse": "termsOfUse",

    /**
     * value: "uploaderAccountSuspended"
     * @const
     */
    "uploaderAccountSuspended": "uploaderAccountSuspended",

    /**
     * value: "length"
     * @const
     */
    "length": "length",

    /**
     * value: "claim"
     * @const
     */
    "claim": "claim",

    /**
     * value: "uploaderAccountClosed"
     * @const
     */
    "uploaderAccountClosed": "uploaderAccountClosed",

    /**
     * value: "trademark"
     * @const
     */
    "trademark": "trademark",

    /**
     * value: "legal"
     * @const
     */
    "legal": "legal"
};


/**
 * Allowed values for the <code>uploadStatus</code> property.
 * @enum {String}
 * @readonly
 */
VideoStatus['UploadStatusEnum'] = {

    /**
     * value: "uploaded"
     * @const
     */
    "uploaded": "uploaded",

    /**
     * value: "processed"
     * @const
     */
    "processed": "processed",

    /**
     * value: "failed"
     * @const
     */
    "failed": "failed",

    /**
     * value: "rejected"
     * @const
     */
    "rejected": "rejected",

    /**
     * value: "deleted"
     * @const
     */
    "deleted": "deleted"
};



export default VideoStatus;

