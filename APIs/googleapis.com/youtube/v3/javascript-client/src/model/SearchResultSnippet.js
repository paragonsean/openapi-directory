/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ThumbnailDetails from './ThumbnailDetails';

/**
 * The SearchResultSnippet model module.
 * @module model/SearchResultSnippet
 * @version v3
 */
class SearchResultSnippet {
    /**
     * Constructs a new <code>SearchResultSnippet</code>.
     * Basic details about a search result, including title, description and thumbnails of the item referenced by the search result.
     * @alias module:model/SearchResultSnippet
     */
    constructor() { 
        
        SearchResultSnippet.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SearchResultSnippet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchResultSnippet} obj Optional instance to populate.
     * @return {module:model/SearchResultSnippet} The populated <code>SearchResultSnippet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchResultSnippet();

            if (data.hasOwnProperty('channelId')) {
                obj['channelId'] = ApiClient.convertToType(data['channelId'], 'String');
            }
            if (data.hasOwnProperty('channelTitle')) {
                obj['channelTitle'] = ApiClient.convertToType(data['channelTitle'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('liveBroadcastContent')) {
                obj['liveBroadcastContent'] = ApiClient.convertToType(data['liveBroadcastContent'], 'String');
            }
            if (data.hasOwnProperty('publishedAt')) {
                obj['publishedAt'] = ApiClient.convertToType(data['publishedAt'], 'Date');
            }
            if (data.hasOwnProperty('thumbnails')) {
                obj['thumbnails'] = ThumbnailDetails.constructFromObject(data['thumbnails']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchResultSnippet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchResultSnippet</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['channelId'] && !(typeof data['channelId'] === 'string' || data['channelId'] instanceof String)) {
            throw new Error("Expected the field `channelId` to be a primitive type in the JSON string but got " + data['channelId']);
        }
        // ensure the json data is a string
        if (data['channelTitle'] && !(typeof data['channelTitle'] === 'string' || data['channelTitle'] instanceof String)) {
            throw new Error("Expected the field `channelTitle` to be a primitive type in the JSON string but got " + data['channelTitle']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['liveBroadcastContent'] && !(typeof data['liveBroadcastContent'] === 'string' || data['liveBroadcastContent'] instanceof String)) {
            throw new Error("Expected the field `liveBroadcastContent` to be a primitive type in the JSON string but got " + data['liveBroadcastContent']);
        }
        // validate the optional field `thumbnails`
        if (data['thumbnails']) { // data not null
          ThumbnailDetails.validateJSON(data['thumbnails']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * The value that YouTube uses to uniquely identify the channel that published the resource that the search result identifies.
 * @member {String} channelId
 */
SearchResultSnippet.prototype['channelId'] = undefined;

/**
 * The title of the channel that published the resource that the search result identifies.
 * @member {String} channelTitle
 */
SearchResultSnippet.prototype['channelTitle'] = undefined;

/**
 * A description of the search result.
 * @member {String} description
 */
SearchResultSnippet.prototype['description'] = undefined;

/**
 * It indicates if the resource (video or channel) has upcoming/active live broadcast content. Or it's \"none\" if there is not any upcoming/active live broadcasts.
 * @member {module:model/SearchResultSnippet.LiveBroadcastContentEnum} liveBroadcastContent
 */
SearchResultSnippet.prototype['liveBroadcastContent'] = undefined;

/**
 * The creation date and time of the resource that the search result identifies.
 * @member {Date} publishedAt
 */
SearchResultSnippet.prototype['publishedAt'] = undefined;

/**
 * @member {module:model/ThumbnailDetails} thumbnails
 */
SearchResultSnippet.prototype['thumbnails'] = undefined;

/**
 * The title of the search result.
 * @member {String} title
 */
SearchResultSnippet.prototype['title'] = undefined;





/**
 * Allowed values for the <code>liveBroadcastContent</code> property.
 * @enum {String}
 * @readonly
 */
SearchResultSnippet['LiveBroadcastContentEnum'] = {

    /**
     * value: "none"
     * @const
     */
    "none": "none",

    /**
     * value: "upcoming"
     * @const
     */
    "upcoming": "upcoming",

    /**
     * value: "live"
     * @const
     */
    "live": "live",

    /**
     * value: "completed"
     * @const
     */
    "completed": "completed"
};



export default SearchResultSnippet;

