/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccessPolicy from './AccessPolicy';
import ContentRating from './ContentRating';
import VideoContentDetailsRegionRestriction from './VideoContentDetailsRegionRestriction';

/**
 * The VideoContentDetails model module.
 * @module model/VideoContentDetails
 * @version v3
 */
class VideoContentDetails {
    /**
     * Constructs a new <code>VideoContentDetails</code>.
     * Details about the content of a YouTube Video.
     * @alias module:model/VideoContentDetails
     */
    constructor() { 
        
        VideoContentDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VideoContentDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VideoContentDetails} obj Optional instance to populate.
     * @return {module:model/VideoContentDetails} The populated <code>VideoContentDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VideoContentDetails();

            if (data.hasOwnProperty('caption')) {
                obj['caption'] = ApiClient.convertToType(data['caption'], 'String');
            }
            if (data.hasOwnProperty('contentRating')) {
                obj['contentRating'] = ContentRating.constructFromObject(data['contentRating']);
            }
            if (data.hasOwnProperty('countryRestriction')) {
                obj['countryRestriction'] = AccessPolicy.constructFromObject(data['countryRestriction']);
            }
            if (data.hasOwnProperty('definition')) {
                obj['definition'] = ApiClient.convertToType(data['definition'], 'String');
            }
            if (data.hasOwnProperty('dimension')) {
                obj['dimension'] = ApiClient.convertToType(data['dimension'], 'String');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'String');
            }
            if (data.hasOwnProperty('hasCustomThumbnail')) {
                obj['hasCustomThumbnail'] = ApiClient.convertToType(data['hasCustomThumbnail'], 'Boolean');
            }
            if (data.hasOwnProperty('licensedContent')) {
                obj['licensedContent'] = ApiClient.convertToType(data['licensedContent'], 'Boolean');
            }
            if (data.hasOwnProperty('projection')) {
                obj['projection'] = ApiClient.convertToType(data['projection'], 'String');
            }
            if (data.hasOwnProperty('regionRestriction')) {
                obj['regionRestriction'] = VideoContentDetailsRegionRestriction.constructFromObject(data['regionRestriction']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VideoContentDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VideoContentDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['caption'] && !(typeof data['caption'] === 'string' || data['caption'] instanceof String)) {
            throw new Error("Expected the field `caption` to be a primitive type in the JSON string but got " + data['caption']);
        }
        // validate the optional field `contentRating`
        if (data['contentRating']) { // data not null
          ContentRating.validateJSON(data['contentRating']);
        }
        // validate the optional field `countryRestriction`
        if (data['countryRestriction']) { // data not null
          AccessPolicy.validateJSON(data['countryRestriction']);
        }
        // ensure the json data is a string
        if (data['definition'] && !(typeof data['definition'] === 'string' || data['definition'] instanceof String)) {
            throw new Error("Expected the field `definition` to be a primitive type in the JSON string but got " + data['definition']);
        }
        // ensure the json data is a string
        if (data['dimension'] && !(typeof data['dimension'] === 'string' || data['dimension'] instanceof String)) {
            throw new Error("Expected the field `dimension` to be a primitive type in the JSON string but got " + data['dimension']);
        }
        // ensure the json data is a string
        if (data['duration'] && !(typeof data['duration'] === 'string' || data['duration'] instanceof String)) {
            throw new Error("Expected the field `duration` to be a primitive type in the JSON string but got " + data['duration']);
        }
        // ensure the json data is a string
        if (data['projection'] && !(typeof data['projection'] === 'string' || data['projection'] instanceof String)) {
            throw new Error("Expected the field `projection` to be a primitive type in the JSON string but got " + data['projection']);
        }
        // validate the optional field `regionRestriction`
        if (data['regionRestriction']) { // data not null
          VideoContentDetailsRegionRestriction.validateJSON(data['regionRestriction']);
        }

        return true;
    }


}



/**
 * The value of captions indicates whether the video has captions or not.
 * @member {module:model/VideoContentDetails.CaptionEnum} caption
 */
VideoContentDetails.prototype['caption'] = undefined;

/**
 * @member {module:model/ContentRating} contentRating
 */
VideoContentDetails.prototype['contentRating'] = undefined;

/**
 * @member {module:model/AccessPolicy} countryRestriction
 */
VideoContentDetails.prototype['countryRestriction'] = undefined;

/**
 * The value of definition indicates whether the video is available in high definition or only in standard definition.
 * @member {module:model/VideoContentDetails.DefinitionEnum} definition
 */
VideoContentDetails.prototype['definition'] = undefined;

/**
 * The value of dimension indicates whether the video is available in 3D or in 2D.
 * @member {String} dimension
 */
VideoContentDetails.prototype['dimension'] = undefined;

/**
 * The length of the video. The tag value is an ISO 8601 duration in the format PT#M#S, in which the letters PT indicate that the value specifies a period of time, and the letters M and S refer to length in minutes and seconds, respectively. The # characters preceding the M and S letters are both integers that specify the number of minutes (or seconds) of the video. For example, a value of PT15M51S indicates that the video is 15 minutes and 51 seconds long.
 * @member {String} duration
 */
VideoContentDetails.prototype['duration'] = undefined;

/**
 * Indicates whether the video uploader has provided a custom thumbnail image for the video. This property is only visible to the video uploader.
 * @member {Boolean} hasCustomThumbnail
 */
VideoContentDetails.prototype['hasCustomThumbnail'] = undefined;

/**
 * The value of is_license_content indicates whether the video is licensed content.
 * @member {Boolean} licensedContent
 */
VideoContentDetails.prototype['licensedContent'] = undefined;

/**
 * Specifies the projection format of the video.
 * @member {module:model/VideoContentDetails.ProjectionEnum} projection
 */
VideoContentDetails.prototype['projection'] = undefined;

/**
 * @member {module:model/VideoContentDetailsRegionRestriction} regionRestriction
 */
VideoContentDetails.prototype['regionRestriction'] = undefined;





/**
 * Allowed values for the <code>caption</code> property.
 * @enum {String}
 * @readonly
 */
VideoContentDetails['CaptionEnum'] = {

    /**
     * value: "true"
     * @const
     */
    "true": "true",

    /**
     * value: "false"
     * @const
     */
    "false": "false"
};


/**
 * Allowed values for the <code>definition</code> property.
 * @enum {String}
 * @readonly
 */
VideoContentDetails['DefinitionEnum'] = {

    /**
     * value: "sd"
     * @const
     */
    "sd": "sd",

    /**
     * value: "hd"
     * @const
     */
    "hd": "hd"
};


/**
 * Allowed values for the <code>projection</code> property.
 * @enum {String}
 * @readonly
 */
VideoContentDetails['ProjectionEnum'] = {

    /**
     * value: "rectangular"
     * @const
     */
    "rectangular": "rectangular",

    /**
     * value: "360"
     * @const
     */
    "360": "360"
};



export default VideoContentDetails;

