/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VideoProcessingDetailsProcessingProgress model module.
 * @module model/VideoProcessingDetailsProcessingProgress
 * @version v3
 */
class VideoProcessingDetailsProcessingProgress {
    /**
     * Constructs a new <code>VideoProcessingDetailsProcessingProgress</code>.
     * Video processing progress and completion time estimate.
     * @alias module:model/VideoProcessingDetailsProcessingProgress
     */
    constructor() { 
        
        VideoProcessingDetailsProcessingProgress.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VideoProcessingDetailsProcessingProgress</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VideoProcessingDetailsProcessingProgress} obj Optional instance to populate.
     * @return {module:model/VideoProcessingDetailsProcessingProgress} The populated <code>VideoProcessingDetailsProcessingProgress</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VideoProcessingDetailsProcessingProgress();

            if (data.hasOwnProperty('partsProcessed')) {
                obj['partsProcessed'] = ApiClient.convertToType(data['partsProcessed'], 'String');
            }
            if (data.hasOwnProperty('partsTotal')) {
                obj['partsTotal'] = ApiClient.convertToType(data['partsTotal'], 'String');
            }
            if (data.hasOwnProperty('timeLeftMs')) {
                obj['timeLeftMs'] = ApiClient.convertToType(data['timeLeftMs'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VideoProcessingDetailsProcessingProgress</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VideoProcessingDetailsProcessingProgress</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['partsProcessed'] && !(typeof data['partsProcessed'] === 'string' || data['partsProcessed'] instanceof String)) {
            throw new Error("Expected the field `partsProcessed` to be a primitive type in the JSON string but got " + data['partsProcessed']);
        }
        // ensure the json data is a string
        if (data['partsTotal'] && !(typeof data['partsTotal'] === 'string' || data['partsTotal'] instanceof String)) {
            throw new Error("Expected the field `partsTotal` to be a primitive type in the JSON string but got " + data['partsTotal']);
        }
        // ensure the json data is a string
        if (data['timeLeftMs'] && !(typeof data['timeLeftMs'] === 'string' || data['timeLeftMs'] instanceof String)) {
            throw new Error("Expected the field `timeLeftMs` to be a primitive type in the JSON string but got " + data['timeLeftMs']);
        }

        return true;
    }


}



/**
 * The number of parts of the video that YouTube has already processed. You can estimate the percentage of the video that YouTube has already processed by calculating: 100 * parts_processed / parts_total Note that since the estimated number of parts could increase without a corresponding increase in the number of parts that have already been processed, it is possible that the calculated progress could periodically decrease while YouTube processes a video.
 * @member {String} partsProcessed
 */
VideoProcessingDetailsProcessingProgress.prototype['partsProcessed'] = undefined;

/**
 * An estimate of the total number of parts that need to be processed for the video. The number may be updated with more precise estimates while YouTube processes the video.
 * @member {String} partsTotal
 */
VideoProcessingDetailsProcessingProgress.prototype['partsTotal'] = undefined;

/**
 * An estimate of the amount of time, in millseconds, that YouTube needs to finish processing the video.
 * @member {String} timeLeftMs
 */
VideoProcessingDetailsProcessingProgress.prototype['timeLeftMs'] = undefined;






export default VideoProcessingDetailsProcessingProgress;

