/**
 * YouTube Data API v3
 * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PlaylistItemContentDetails from './PlaylistItemContentDetails';
import PlaylistItemSnippet from './PlaylistItemSnippet';
import PlaylistItemStatus from './PlaylistItemStatus';

/**
 * The PlaylistItem model module.
 * @module model/PlaylistItem
 * @version v3
 */
class PlaylistItem {
    /**
     * Constructs a new <code>PlaylistItem</code>.
     * A *playlistItem* resource identifies another resource, such as a video, that is included in a playlist. In addition, the playlistItem resource contains details about the included resource that pertain specifically to how that resource is used in that playlist. YouTube uses playlists to identify special collections of videos for a channel, such as: - uploaded videos - favorite videos - positively rated (liked) videos - watch history - watch later To be more specific, these lists are associated with a channel, which is a collection of a person, group, or company&#39;s videos, playlists, and other YouTube information. You can retrieve the playlist IDs for each of these lists from the channel resource for a given channel. You can then use the playlistItems.list method to retrieve any of those lists. You can also add or remove items from those lists by calling the playlistItems.insert and playlistItems.delete methods. For example, if a user gives a positive rating to a video, you would insert that video into the liked videos playlist for that user&#39;s channel.
     * @alias module:model/PlaylistItem
     */
    constructor() { 
        
        PlaylistItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'youtube#playlistItem';
    }

    /**
     * Constructs a <code>PlaylistItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PlaylistItem} obj Optional instance to populate.
     * @return {module:model/PlaylistItem} The populated <code>PlaylistItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PlaylistItem();

            if (data.hasOwnProperty('contentDetails')) {
                obj['contentDetails'] = PlaylistItemContentDetails.constructFromObject(data['contentDetails']);
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('snippet')) {
                obj['snippet'] = PlaylistItemSnippet.constructFromObject(data['snippet']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = PlaylistItemStatus.constructFromObject(data['status']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PlaylistItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PlaylistItem</code>.
     */
    static validateJSON(data) {
        // validate the optional field `contentDetails`
        if (data['contentDetails']) { // data not null
          PlaylistItemContentDetails.validateJSON(data['contentDetails']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // validate the optional field `snippet`
        if (data['snippet']) { // data not null
          PlaylistItemSnippet.validateJSON(data['snippet']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          PlaylistItemStatus.validateJSON(data['status']);
        }

        return true;
    }


}



/**
 * @member {module:model/PlaylistItemContentDetails} contentDetails
 */
PlaylistItem.prototype['contentDetails'] = undefined;

/**
 * Etag of this resource.
 * @member {String} etag
 */
PlaylistItem.prototype['etag'] = undefined;

/**
 * The ID that YouTube uses to uniquely identify the playlist item.
 * @member {String} id
 */
PlaylistItem.prototype['id'] = undefined;

/**
 * Identifies what kind of resource this is. Value: the fixed string \"youtube#playlistItem\".
 * @member {String} kind
 * @default 'youtube#playlistItem'
 */
PlaylistItem.prototype['kind'] = 'youtube#playlistItem';

/**
 * @member {module:model/PlaylistItemSnippet} snippet
 */
PlaylistItem.prototype['snippet'] = undefined;

/**
 * @member {module:model/PlaylistItemStatus} status
 */
PlaylistItem.prototype['status'] = undefined;






export default PlaylistItem;

