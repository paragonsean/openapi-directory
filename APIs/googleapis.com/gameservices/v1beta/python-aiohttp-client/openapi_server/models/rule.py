# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.condition import Condition
from openapi_server.models.log_config import LogConfig
from openapi_server import util


class Rule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, conditions: List[Condition]=None, description: str=None, _in: List[str]=None, log_config: List[LogConfig]=None, not_in: List[str]=None, permissions: List[str]=None):
        """Rule - a model defined in OpenAPI

        :param action: The action of this Rule.
        :param conditions: The conditions of this Rule.
        :param description: The description of this Rule.
        :param _in: The _in of this Rule.
        :param log_config: The log_config of this Rule.
        :param not_in: The not_in of this Rule.
        :param permissions: The permissions of this Rule.
        """
        self.openapi_types = {
            'action': str,
            'conditions': List[Condition],
            'description': str,
            '_in': List[str],
            'log_config': List[LogConfig],
            'not_in': List[str],
            'permissions': List[str]
        }

        self.attribute_map = {
            'action': 'action',
            'conditions': 'conditions',
            'description': 'description',
            '_in': 'in',
            'log_config': 'logConfig',
            'not_in': 'notIn',
            'permissions': 'permissions'
        }

        self._action = action
        self._conditions = conditions
        self._description = description
        self.__in = _in
        self._log_config = log_config
        self._not_in = not_in
        self._permissions = permissions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Rule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Rule of this Rule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this Rule.

        Required

        :return: The action of this Rule.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this Rule.

        Required

        :param action: The action of this Rule.
        :type action: str
        """
        allowed_values = ["NO_ACTION", "ALLOW", "ALLOW_WITH_LOG", "DENY", "DENY_WITH_LOG", "LOG"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def conditions(self):
        """Gets the conditions of this Rule.

        Additional restrictions that must be met. All conditions must pass for the rule to match.

        :return: The conditions of this Rule.
        :rtype: List[Condition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this Rule.

        Additional restrictions that must be met. All conditions must pass for the rule to match.

        :param conditions: The conditions of this Rule.
        :type conditions: List[Condition]
        """

        self._conditions = conditions

    @property
    def description(self):
        """Gets the description of this Rule.

        Human-readable description of the rule.

        :return: The description of this Rule.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Rule.

        Human-readable description of the rule.

        :param description: The description of this Rule.
        :type description: str
        """

        self._description = description

    @property
    def _in(self):
        """Gets the _in of this Rule.

        If one or more 'in' clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in at least one of these entries.

        :return: The _in of this Rule.
        :rtype: List[str]
        """
        return self.__in

    @_in.setter
    def _in(self, _in):
        """Sets the _in of this Rule.

        If one or more 'in' clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in at least one of these entries.

        :param _in: The _in of this Rule.
        :type _in: List[str]
        """

        self.__in = _in

    @property
    def log_config(self):
        """Gets the log_config of this Rule.

        The config returned to callers of CheckPolicy for any entries that match the LOG action.

        :return: The log_config of this Rule.
        :rtype: List[LogConfig]
        """
        return self._log_config

    @log_config.setter
    def log_config(self, log_config):
        """Sets the log_config of this Rule.

        The config returned to callers of CheckPolicy for any entries that match the LOG action.

        :param log_config: The log_config of this Rule.
        :type log_config: List[LogConfig]
        """

        self._log_config = log_config

    @property
    def not_in(self):
        """Gets the not_in of this Rule.

        If one or more 'not_in' clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in none of the entries. The format for in and not_in entries can be found at in the Local IAM documentation (see go/local-iam#features).

        :return: The not_in of this Rule.
        :rtype: List[str]
        """
        return self._not_in

    @not_in.setter
    def not_in(self, not_in):
        """Sets the not_in of this Rule.

        If one or more 'not_in' clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in none of the entries. The format for in and not_in entries can be found at in the Local IAM documentation (see go/local-iam#features).

        :param not_in: The not_in of this Rule.
        :type not_in: List[str]
        """

        self._not_in = not_in

    @property
    def permissions(self):
        """Gets the permissions of this Rule.

        A permission is a string of form '..' (e.g., 'storage.buckets.list'). A value of '*' matches all permissions, and a verb part of '*' (e.g., 'storage.buckets.*') matches all verbs.

        :return: The permissions of this Rule.
        :rtype: List[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this Rule.

        A permission is a string of form '..' (e.g., 'storage.buckets.list'). A value of '*' matches all permissions, and a verb part of '*' (e.g., 'storage.buckets.*') matches all verbs.

        :param permissions: The permissions of this Rule.
        :type permissions: List[str]
        """

        self._permissions = permissions
