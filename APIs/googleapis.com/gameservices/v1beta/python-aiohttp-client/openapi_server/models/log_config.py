# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cloud_audit_options import CloudAuditOptions
from openapi_server.models.counter_options import CounterOptions
from openapi_server.models.data_access_options import DataAccessOptions
from openapi_server import util


class LogConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cloud_audit: CloudAuditOptions=None, counter: CounterOptions=None, data_access: DataAccessOptions=None):
        """LogConfig - a model defined in OpenAPI

        :param cloud_audit: The cloud_audit of this LogConfig.
        :param counter: The counter of this LogConfig.
        :param data_access: The data_access of this LogConfig.
        """
        self.openapi_types = {
            'cloud_audit': CloudAuditOptions,
            'counter': CounterOptions,
            'data_access': DataAccessOptions
        }

        self.attribute_map = {
            'cloud_audit': 'cloudAudit',
            'counter': 'counter',
            'data_access': 'dataAccess'
        }

        self._cloud_audit = cloud_audit
        self._counter = counter
        self._data_access = data_access

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LogConfig of this LogConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cloud_audit(self):
        """Gets the cloud_audit of this LogConfig.


        :return: The cloud_audit of this LogConfig.
        :rtype: CloudAuditOptions
        """
        return self._cloud_audit

    @cloud_audit.setter
    def cloud_audit(self, cloud_audit):
        """Sets the cloud_audit of this LogConfig.


        :param cloud_audit: The cloud_audit of this LogConfig.
        :type cloud_audit: CloudAuditOptions
        """

        self._cloud_audit = cloud_audit

    @property
    def counter(self):
        """Gets the counter of this LogConfig.


        :return: The counter of this LogConfig.
        :rtype: CounterOptions
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this LogConfig.


        :param counter: The counter of this LogConfig.
        :type counter: CounterOptions
        """

        self._counter = counter

    @property
    def data_access(self):
        """Gets the data_access of this LogConfig.


        :return: The data_access of this LogConfig.
        :rtype: DataAccessOptions
        """
        return self._data_access

    @data_access.setter
    def data_access(self, data_access):
        """Sets the data_access of this LogConfig.


        :param data_access: The data_access of this LogConfig.
        :type data_access: DataAccessOptions
        """

        self._data_access = data_access
