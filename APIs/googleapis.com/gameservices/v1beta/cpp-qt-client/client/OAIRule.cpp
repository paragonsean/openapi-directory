/**
 * Game Services API
 * Deploy and manage infrastructure for global multiplayer gaming experiences.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRule::OAIRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRule::OAIRule() {
    this->initializeModel();
}

OAIRule::~OAIRule() {}

void OAIRule::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_conditions_isSet = false;
    m_conditions_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_in_isSet = false;
    m_in_isValid = false;

    m_log_config_isSet = false;
    m_log_config_isValid = false;

    m_not_in_isSet = false;
    m_not_in_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;
}

void OAIRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRule::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("conditions")]);
    m_conditions_isSet = !json[QString("conditions")].isNull() && m_conditions_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_in_isValid = ::OpenAPI::fromJsonValue(m_in, json[QString("in")]);
    m_in_isSet = !json[QString("in")].isNull() && m_in_isValid;

    m_log_config_isValid = ::OpenAPI::fromJsonValue(m_log_config, json[QString("logConfig")]);
    m_log_config_isSet = !json[QString("logConfig")].isNull() && m_log_config_isValid;

    m_not_in_isValid = ::OpenAPI::fromJsonValue(m_not_in, json[QString("notIn")]);
    m_not_in_isSet = !json[QString("notIn")].isNull() && m_not_in_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;
}

QString OAIRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRule::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_conditions.size() > 0) {
        obj.insert(QString("conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_in.size() > 0) {
        obj.insert(QString("in"), ::OpenAPI::toJsonValue(m_in));
    }
    if (m_log_config.size() > 0) {
        obj.insert(QString("logConfig"), ::OpenAPI::toJsonValue(m_log_config));
    }
    if (m_not_in.size() > 0) {
        obj.insert(QString("notIn"), ::OpenAPI::toJsonValue(m_not_in));
    }
    if (m_permissions.size() > 0) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    return obj;
}

QString OAIRule::getAction() const {
    return m_action;
}
void OAIRule::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIRule::is_action_Set() const{
    return m_action_isSet;
}

bool OAIRule::is_action_Valid() const{
    return m_action_isValid;
}

QList<OAICondition> OAIRule::getConditions() const {
    return m_conditions;
}
void OAIRule::setConditions(const QList<OAICondition> &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAIRule::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAIRule::is_conditions_Valid() const{
    return m_conditions_isValid;
}

QString OAIRule::getDescription() const {
    return m_description;
}
void OAIRule::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRule::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRule::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAIRule::getIn() const {
    return m_in;
}
void OAIRule::setIn(const QList<QString> &in) {
    m_in = in;
    m_in_isSet = true;
}

bool OAIRule::is_in_Set() const{
    return m_in_isSet;
}

bool OAIRule::is_in_Valid() const{
    return m_in_isValid;
}

QList<OAILogConfig> OAIRule::getLogConfig() const {
    return m_log_config;
}
void OAIRule::setLogConfig(const QList<OAILogConfig> &log_config) {
    m_log_config = log_config;
    m_log_config_isSet = true;
}

bool OAIRule::is_log_config_Set() const{
    return m_log_config_isSet;
}

bool OAIRule::is_log_config_Valid() const{
    return m_log_config_isValid;
}

QList<QString> OAIRule::getNotIn() const {
    return m_not_in;
}
void OAIRule::setNotIn(const QList<QString> &not_in) {
    m_not_in = not_in;
    m_not_in_isSet = true;
}

bool OAIRule::is_not_in_Set() const{
    return m_not_in_isSet;
}

bool OAIRule::is_not_in_Valid() const{
    return m_not_in_isValid;
}

QList<QString> OAIRule::getPermissions() const {
    return m_permissions;
}
void OAIRule::setPermissions(const QList<QString> &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIRule::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIRule::is_permissions_Valid() const{
    return m_permissions_isValid;
}

bool OAIRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_config.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_in.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
