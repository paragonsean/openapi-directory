/**
 * Game Services API
 * Deploy and manage infrastructure for global multiplayer gaming experiences.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloudAuditOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloudAuditOptions::OAICloudAuditOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloudAuditOptions::OAICloudAuditOptions() {
    this->initializeModel();
}

OAICloudAuditOptions::~OAICloudAuditOptions() {}

void OAICloudAuditOptions::initializeModel() {

    m_authorization_logging_options_isSet = false;
    m_authorization_logging_options_isValid = false;

    m_log_name_isSet = false;
    m_log_name_isValid = false;
}

void OAICloudAuditOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloudAuditOptions::fromJsonObject(QJsonObject json) {

    m_authorization_logging_options_isValid = ::OpenAPI::fromJsonValue(m_authorization_logging_options, json[QString("authorizationLoggingOptions")]);
    m_authorization_logging_options_isSet = !json[QString("authorizationLoggingOptions")].isNull() && m_authorization_logging_options_isValid;

    m_log_name_isValid = ::OpenAPI::fromJsonValue(m_log_name, json[QString("logName")]);
    m_log_name_isSet = !json[QString("logName")].isNull() && m_log_name_isValid;
}

QString OAICloudAuditOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloudAuditOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_authorization_logging_options.isSet()) {
        obj.insert(QString("authorizationLoggingOptions"), ::OpenAPI::toJsonValue(m_authorization_logging_options));
    }
    if (m_log_name_isSet) {
        obj.insert(QString("logName"), ::OpenAPI::toJsonValue(m_log_name));
    }
    return obj;
}

OAIAuthorizationLoggingOptions OAICloudAuditOptions::getAuthorizationLoggingOptions() const {
    return m_authorization_logging_options;
}
void OAICloudAuditOptions::setAuthorizationLoggingOptions(const OAIAuthorizationLoggingOptions &authorization_logging_options) {
    m_authorization_logging_options = authorization_logging_options;
    m_authorization_logging_options_isSet = true;
}

bool OAICloudAuditOptions::is_authorization_logging_options_Set() const{
    return m_authorization_logging_options_isSet;
}

bool OAICloudAuditOptions::is_authorization_logging_options_Valid() const{
    return m_authorization_logging_options_isValid;
}

QString OAICloudAuditOptions::getLogName() const {
    return m_log_name;
}
void OAICloudAuditOptions::setLogName(const QString &log_name) {
    m_log_name = log_name;
    m_log_name_isSet = true;
}

bool OAICloudAuditOptions::is_log_name_Set() const{
    return m_log_name_isSet;
}

bool OAICloudAuditOptions::is_log_name_Valid() const{
    return m_log_name_isValid;
}

bool OAICloudAuditOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorization_logging_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloudAuditOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
