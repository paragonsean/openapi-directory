/**
 * Game Services API
 * Deploy and manage infrastructure for global multiplayer gaming experiences.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICondition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICondition::OAICondition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICondition::OAICondition() {
    this->initializeModel();
}

OAICondition::~OAICondition() {}

void OAICondition::initializeModel() {

    m_iam_isSet = false;
    m_iam_isValid = false;

    m_op_isSet = false;
    m_op_isValid = false;

    m_svc_isSet = false;
    m_svc_isValid = false;

    m_sys_isSet = false;
    m_sys_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAICondition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICondition::fromJsonObject(QJsonObject json) {

    m_iam_isValid = ::OpenAPI::fromJsonValue(m_iam, json[QString("iam")]);
    m_iam_isSet = !json[QString("iam")].isNull() && m_iam_isValid;

    m_op_isValid = ::OpenAPI::fromJsonValue(m_op, json[QString("op")]);
    m_op_isSet = !json[QString("op")].isNull() && m_op_isValid;

    m_svc_isValid = ::OpenAPI::fromJsonValue(m_svc, json[QString("svc")]);
    m_svc_isSet = !json[QString("svc")].isNull() && m_svc_isValid;

    m_sys_isValid = ::OpenAPI::fromJsonValue(m_sys, json[QString("sys")]);
    m_sys_isSet = !json[QString("sys")].isNull() && m_sys_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAICondition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICondition::asJsonObject() const {
    QJsonObject obj;
    if (m_iam_isSet) {
        obj.insert(QString("iam"), ::OpenAPI::toJsonValue(m_iam));
    }
    if (m_op_isSet) {
        obj.insert(QString("op"), ::OpenAPI::toJsonValue(m_op));
    }
    if (m_svc_isSet) {
        obj.insert(QString("svc"), ::OpenAPI::toJsonValue(m_svc));
    }
    if (m_sys_isSet) {
        obj.insert(QString("sys"), ::OpenAPI::toJsonValue(m_sys));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QString OAICondition::getIam() const {
    return m_iam;
}
void OAICondition::setIam(const QString &iam) {
    m_iam = iam;
    m_iam_isSet = true;
}

bool OAICondition::is_iam_Set() const{
    return m_iam_isSet;
}

bool OAICondition::is_iam_Valid() const{
    return m_iam_isValid;
}

QString OAICondition::getOp() const {
    return m_op;
}
void OAICondition::setOp(const QString &op) {
    m_op = op;
    m_op_isSet = true;
}

bool OAICondition::is_op_Set() const{
    return m_op_isSet;
}

bool OAICondition::is_op_Valid() const{
    return m_op_isValid;
}

QString OAICondition::getSvc() const {
    return m_svc;
}
void OAICondition::setSvc(const QString &svc) {
    m_svc = svc;
    m_svc_isSet = true;
}

bool OAICondition::is_svc_Set() const{
    return m_svc_isSet;
}

bool OAICondition::is_svc_Valid() const{
    return m_svc_isValid;
}

QString OAICondition::getSys() const {
    return m_sys;
}
void OAICondition::setSys(const QString &sys) {
    m_sys = sys;
    m_sys_isSet = true;
}

bool OAICondition::is_sys_Set() const{
    return m_sys_isSet;
}

bool OAICondition::is_sys_Valid() const{
    return m_sys_isValid;
}

QList<QString> OAICondition::getValues() const {
    return m_values;
}
void OAICondition::setValues(const QList<QString> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAICondition::is_values_Set() const{
    return m_values_isSet;
}

bool OAICondition::is_values_Valid() const{
    return m_values_isValid;
}

bool OAICondition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_iam_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_op_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_svc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sys_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICondition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
