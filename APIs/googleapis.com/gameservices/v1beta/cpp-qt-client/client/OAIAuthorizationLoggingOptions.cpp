/**
 * Game Services API
 * Deploy and manage infrastructure for global multiplayer gaming experiences.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthorizationLoggingOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthorizationLoggingOptions::OAIAuthorizationLoggingOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthorizationLoggingOptions::OAIAuthorizationLoggingOptions() {
    this->initializeModel();
}

OAIAuthorizationLoggingOptions::~OAIAuthorizationLoggingOptions() {}

void OAIAuthorizationLoggingOptions::initializeModel() {

    m_permission_type_isSet = false;
    m_permission_type_isValid = false;
}

void OAIAuthorizationLoggingOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthorizationLoggingOptions::fromJsonObject(QJsonObject json) {

    m_permission_type_isValid = ::OpenAPI::fromJsonValue(m_permission_type, json[QString("permissionType")]);
    m_permission_type_isSet = !json[QString("permissionType")].isNull() && m_permission_type_isValid;
}

QString OAIAuthorizationLoggingOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthorizationLoggingOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_permission_type_isSet) {
        obj.insert(QString("permissionType"), ::OpenAPI::toJsonValue(m_permission_type));
    }
    return obj;
}

QString OAIAuthorizationLoggingOptions::getPermissionType() const {
    return m_permission_type;
}
void OAIAuthorizationLoggingOptions::setPermissionType(const QString &permission_type) {
    m_permission_type = permission_type;
    m_permission_type_isSet = true;
}

bool OAIAuthorizationLoggingOptions::is_permission_type_Set() const{
    return m_permission_type_isSet;
}

bool OAIAuthorizationLoggingOptions::is_permission_type_Valid() const{
    return m_permission_type_isValid;
}

bool OAIAuthorizationLoggingOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_permission_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthorizationLoggingOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
