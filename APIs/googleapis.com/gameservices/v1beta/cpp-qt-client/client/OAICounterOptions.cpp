/**
 * Game Services API
 * Deploy and manage infrastructure for global multiplayer gaming experiences.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICounterOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICounterOptions::OAICounterOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICounterOptions::OAICounterOptions() {
    this->initializeModel();
}

OAICounterOptions::~OAICounterOptions() {}

void OAICounterOptions::initializeModel() {

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_field_isSet = false;
    m_field_isValid = false;

    m_metric_isSet = false;
    m_metric_isValid = false;
}

void OAICounterOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICounterOptions::fromJsonObject(QJsonObject json) {

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("customFields")]);
    m_custom_fields_isSet = !json[QString("customFields")].isNull() && m_custom_fields_isValid;

    m_field_isValid = ::OpenAPI::fromJsonValue(m_field, json[QString("field")]);
    m_field_isSet = !json[QString("field")].isNull() && m_field_isValid;

    m_metric_isValid = ::OpenAPI::fromJsonValue(m_metric, json[QString("metric")]);
    m_metric_isSet = !json[QString("metric")].isNull() && m_metric_isValid;
}

QString OAICounterOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICounterOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_fields.size() > 0) {
        obj.insert(QString("customFields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_field_isSet) {
        obj.insert(QString("field"), ::OpenAPI::toJsonValue(m_field));
    }
    if (m_metric_isSet) {
        obj.insert(QString("metric"), ::OpenAPI::toJsonValue(m_metric));
    }
    return obj;
}

QList<OAICustomField> OAICounterOptions::getCustomFields() const {
    return m_custom_fields;
}
void OAICounterOptions::setCustomFields(const QList<OAICustomField> &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAICounterOptions::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAICounterOptions::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAICounterOptions::getField() const {
    return m_field;
}
void OAICounterOptions::setField(const QString &field) {
    m_field = field;
    m_field_isSet = true;
}

bool OAICounterOptions::is_field_Set() const{
    return m_field_isSet;
}

bool OAICounterOptions::is_field_Valid() const{
    return m_field_isValid;
}

QString OAICounterOptions::getMetric() const {
    return m_metric;
}
void OAICounterOptions::setMetric(const QString &metric) {
    m_metric = metric;
    m_metric_isSet = true;
}

bool OAICounterOptions::is_metric_Set() const{
    return m_metric_isSet;
}

bool OAICounterOptions::is_metric_Valid() const{
    return m_metric_isValid;
}

bool OAICounterOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICounterOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
