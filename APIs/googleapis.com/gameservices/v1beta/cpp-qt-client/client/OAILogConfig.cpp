/**
 * Game Services API
 * Deploy and manage infrastructure for global multiplayer gaming experiences.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILogConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILogConfig::OAILogConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILogConfig::OAILogConfig() {
    this->initializeModel();
}

OAILogConfig::~OAILogConfig() {}

void OAILogConfig::initializeModel() {

    m_cloud_audit_isSet = false;
    m_cloud_audit_isValid = false;

    m_counter_isSet = false;
    m_counter_isValid = false;

    m_data_access_isSet = false;
    m_data_access_isValid = false;
}

void OAILogConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILogConfig::fromJsonObject(QJsonObject json) {

    m_cloud_audit_isValid = ::OpenAPI::fromJsonValue(m_cloud_audit, json[QString("cloudAudit")]);
    m_cloud_audit_isSet = !json[QString("cloudAudit")].isNull() && m_cloud_audit_isValid;

    m_counter_isValid = ::OpenAPI::fromJsonValue(m_counter, json[QString("counter")]);
    m_counter_isSet = !json[QString("counter")].isNull() && m_counter_isValid;

    m_data_access_isValid = ::OpenAPI::fromJsonValue(m_data_access, json[QString("dataAccess")]);
    m_data_access_isSet = !json[QString("dataAccess")].isNull() && m_data_access_isValid;
}

QString OAILogConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILogConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_cloud_audit.isSet()) {
        obj.insert(QString("cloudAudit"), ::OpenAPI::toJsonValue(m_cloud_audit));
    }
    if (m_counter.isSet()) {
        obj.insert(QString("counter"), ::OpenAPI::toJsonValue(m_counter));
    }
    if (m_data_access.isSet()) {
        obj.insert(QString("dataAccess"), ::OpenAPI::toJsonValue(m_data_access));
    }
    return obj;
}

OAICloudAuditOptions OAILogConfig::getCloudAudit() const {
    return m_cloud_audit;
}
void OAILogConfig::setCloudAudit(const OAICloudAuditOptions &cloud_audit) {
    m_cloud_audit = cloud_audit;
    m_cloud_audit_isSet = true;
}

bool OAILogConfig::is_cloud_audit_Set() const{
    return m_cloud_audit_isSet;
}

bool OAILogConfig::is_cloud_audit_Valid() const{
    return m_cloud_audit_isValid;
}

OAICounterOptions OAILogConfig::getCounter() const {
    return m_counter;
}
void OAILogConfig::setCounter(const OAICounterOptions &counter) {
    m_counter = counter;
    m_counter_isSet = true;
}

bool OAILogConfig::is_counter_Set() const{
    return m_counter_isSet;
}

bool OAILogConfig::is_counter_Valid() const{
    return m_counter_isValid;
}

OAIDataAccessOptions OAILogConfig::getDataAccess() const {
    return m_data_access;
}
void OAILogConfig::setDataAccess(const OAIDataAccessOptions &data_access) {
    m_data_access = data_access;
    m_data_access_isSet = true;
}

bool OAILogConfig::is_data_access_Set() const{
    return m_data_access_isSet;
}

bool OAILogConfig::is_data_access_Valid() const{
    return m_data_access_isValid;
}

bool OAILogConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cloud_audit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_counter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_access.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILogConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
