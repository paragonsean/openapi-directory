/*
 * Game Services API
 * Deploy and manage infrastructure for global multiplayer gaming experiences.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AuditLogConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both &#x60;allServices&#x60; and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { \&quot;audit_configs\&quot;: [ { \&quot;service\&quot;: \&quot;allServices\&quot;, \&quot;audit_log_configs\&quot;: [ { \&quot;log_type\&quot;: \&quot;DATA_READ\&quot;, \&quot;exempted_members\&quot;: [ \&quot;user:jose@example.com\&quot; ] }, { \&quot;log_type\&quot;: \&quot;DATA_WRITE\&quot; }, { \&quot;log_type\&quot;: \&quot;ADMIN_READ\&quot; } ] }, { \&quot;service\&quot;: \&quot;sampleservice.googleapis.com\&quot;, \&quot;audit_log_configs\&quot;: [ { \&quot;log_type\&quot;: \&quot;DATA_READ\&quot; }, { \&quot;log_type\&quot;: \&quot;DATA_WRITE\&quot;, \&quot;exempted_members\&quot;: [ \&quot;user:aliya@example.com\&quot; ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts &#x60;jose@example.com&#x60; from DATA_READ logging, and &#x60;aliya@example.com&#x60; from DATA_WRITE logging.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:02.301715-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AuditConfig {
  public static final String SERIALIZED_NAME_AUDIT_LOG_CONFIGS = "auditLogConfigs";
  @SerializedName(SERIALIZED_NAME_AUDIT_LOG_CONFIGS)
  private List<AuditLogConfig> auditLogConfigs = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICE = "service";
  @SerializedName(SERIALIZED_NAME_SERVICE)
  private String service;

  public AuditConfig() {
  }

  public AuditConfig auditLogConfigs(List<AuditLogConfig> auditLogConfigs) {
    this.auditLogConfigs = auditLogConfigs;
    return this;
  }

  public AuditConfig addAuditLogConfigsItem(AuditLogConfig auditLogConfigsItem) {
    if (this.auditLogConfigs == null) {
      this.auditLogConfigs = new ArrayList<>();
    }
    this.auditLogConfigs.add(auditLogConfigsItem);
    return this;
  }

  /**
   * The configuration for logging of each type of permission.
   * @return auditLogConfigs
   */
  @javax.annotation.Nullable
  public List<AuditLogConfig> getAuditLogConfigs() {
    return auditLogConfigs;
  }

  public void setAuditLogConfigs(List<AuditLogConfig> auditLogConfigs) {
    this.auditLogConfigs = auditLogConfigs;
  }


  public AuditConfig service(String service) {
    this.service = service;
    return this;
  }

  /**
   * Specifies a service that will be enabled for audit logging. For example, &#x60;storage.googleapis.com&#x60;, &#x60;cloudsql.googleapis.com&#x60;. &#x60;allServices&#x60; is a special value that covers all services.
   * @return service
   */
  @javax.annotation.Nullable
  public String getService() {
    return service;
  }

  public void setService(String service) {
    this.service = service;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuditConfig auditConfig = (AuditConfig) o;
    return Objects.equals(this.auditLogConfigs, auditConfig.auditLogConfigs) &&
        Objects.equals(this.service, auditConfig.service);
  }

  @Override
  public int hashCode() {
    return Objects.hash(auditLogConfigs, service);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuditConfig {\n");
    sb.append("    auditLogConfigs: ").append(toIndentedString(auditLogConfigs)).append("\n");
    sb.append("    service: ").append(toIndentedString(service)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auditLogConfigs");
    openapiFields.add("service");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AuditConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuditConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuditConfig is not found in the empty JSON string", AuditConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuditConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuditConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("auditLogConfigs") != null && !jsonObj.get("auditLogConfigs").isJsonNull()) {
        JsonArray jsonArrayauditLogConfigs = jsonObj.getAsJsonArray("auditLogConfigs");
        if (jsonArrayauditLogConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("auditLogConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `auditLogConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("auditLogConfigs").toString()));
          }

          // validate the optional field `auditLogConfigs` (array)
          for (int i = 0; i < jsonArrayauditLogConfigs.size(); i++) {
            AuditLogConfig.validateJsonElement(jsonArrayauditLogConfigs.get(i));
          };
        }
      }
      if ((jsonObj.get("service") != null && !jsonObj.get("service").isJsonNull()) && !jsonObj.get("service").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuditConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuditConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuditConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuditConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<AuditConfig>() {
           @Override
           public void write(JsonWriter out, AuditConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuditConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AuditConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AuditConfig
   * @throws IOException if the JSON string is invalid with respect to AuditConfig
   */
  public static AuditConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuditConfig.class);
  }

  /**
   * Convert an instance of AuditConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

