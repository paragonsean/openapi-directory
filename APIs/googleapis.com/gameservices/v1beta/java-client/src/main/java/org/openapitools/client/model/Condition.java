/*
 * Game Services API
 * Deploy and manage infrastructure for global multiplayer gaming experiences.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A condition to be met.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:02.301715-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Condition {
  /**
   * Trusted attributes supplied by the IAM system.
   */
  @JsonAdapter(IamEnum.Adapter.class)
  public enum IamEnum {
    NO_ATTR("NO_ATTR"),
    
    AUTHORITY("AUTHORITY"),
    
    ATTRIBUTION("ATTRIBUTION"),
    
    SECURITY_REALM("SECURITY_REALM"),
    
    APPROVER("APPROVER"),
    
    JUSTIFICATION_TYPE("JUSTIFICATION_TYPE"),
    
    CREDENTIALS_TYPE("CREDENTIALS_TYPE"),
    
    CREDS_ASSERTION("CREDS_ASSERTION");

    private String value;

    IamEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IamEnum fromValue(String value) {
      for (IamEnum b : IamEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IamEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IamEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IamEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IamEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IamEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IAM = "iam";
  @SerializedName(SERIALIZED_NAME_IAM)
  private IamEnum iam;

  /**
   * An operator to apply the subject with.
   */
  @JsonAdapter(OpEnum.Adapter.class)
  public enum OpEnum {
    NO_OP("NO_OP"),
    
    EQUALS("EQUALS"),
    
    NOT_EQUALS("NOT_EQUALS"),
    
    IN("IN"),
    
    NOT_IN("NOT_IN"),
    
    DISCHARGED("DISCHARGED");

    private String value;

    OpEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OpEnum fromValue(String value) {
      for (OpEnum b : OpEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OpEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OpEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OpEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OpEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OpEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OP = "op";
  @SerializedName(SERIALIZED_NAME_OP)
  private OpEnum op;

  public static final String SERIALIZED_NAME_SVC = "svc";
  @SerializedName(SERIALIZED_NAME_SVC)
  private String svc;

  /**
   * Trusted attributes supplied by any service that owns resources and uses the IAM system for access control.
   */
  @JsonAdapter(SysEnum.Adapter.class)
  public enum SysEnum {
    NO_ATTR("NO_ATTR"),
    
    REGION("REGION"),
    
    SERVICE("SERVICE"),
    
    NAME("NAME"),
    
    IP("IP");

    private String value;

    SysEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SysEnum fromValue(String value) {
      for (SysEnum b : SysEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SysEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SysEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SysEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SysEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SysEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SYS = "sys";
  @SerializedName(SERIALIZED_NAME_SYS)
  private SysEnum sys;

  public static final String SERIALIZED_NAME_VALUES = "values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  private List<String> values = new ArrayList<>();

  public Condition() {
  }

  public Condition iam(IamEnum iam) {
    this.iam = iam;
    return this;
  }

  /**
   * Trusted attributes supplied by the IAM system.
   * @return iam
   */
  @javax.annotation.Nullable
  public IamEnum getIam() {
    return iam;
  }

  public void setIam(IamEnum iam) {
    this.iam = iam;
  }


  public Condition op(OpEnum op) {
    this.op = op;
    return this;
  }

  /**
   * An operator to apply the subject with.
   * @return op
   */
  @javax.annotation.Nullable
  public OpEnum getOp() {
    return op;
  }

  public void setOp(OpEnum op) {
    this.op = op;
  }


  public Condition svc(String svc) {
    this.svc = svc;
    return this;
  }

  /**
   * Trusted attributes discharged by the service.
   * @return svc
   */
  @javax.annotation.Nullable
  public String getSvc() {
    return svc;
  }

  public void setSvc(String svc) {
    this.svc = svc;
  }


  public Condition sys(SysEnum sys) {
    this.sys = sys;
    return this;
  }

  /**
   * Trusted attributes supplied by any service that owns resources and uses the IAM system for access control.
   * @return sys
   */
  @javax.annotation.Nullable
  public SysEnum getSys() {
    return sys;
  }

  public void setSys(SysEnum sys) {
    this.sys = sys;
  }


  public Condition values(List<String> values) {
    this.values = values;
    return this;
  }

  public Condition addValuesItem(String valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<>();
    }
    this.values.add(valuesItem);
    return this;
  }

  /**
   * The objects of the condition.
   * @return values
   */
  @javax.annotation.Nullable
  public List<String> getValues() {
    return values;
  }

  public void setValues(List<String> values) {
    this.values = values;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Condition condition = (Condition) o;
    return Objects.equals(this.iam, condition.iam) &&
        Objects.equals(this.op, condition.op) &&
        Objects.equals(this.svc, condition.svc) &&
        Objects.equals(this.sys, condition.sys) &&
        Objects.equals(this.values, condition.values);
  }

  @Override
  public int hashCode() {
    return Objects.hash(iam, op, svc, sys, values);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Condition {\n");
    sb.append("    iam: ").append(toIndentedString(iam)).append("\n");
    sb.append("    op: ").append(toIndentedString(op)).append("\n");
    sb.append("    svc: ").append(toIndentedString(svc)).append("\n");
    sb.append("    sys: ").append(toIndentedString(sys)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("iam");
    openapiFields.add("op");
    openapiFields.add("svc");
    openapiFields.add("sys");
    openapiFields.add("values");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Condition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Condition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Condition is not found in the empty JSON string", Condition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Condition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Condition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("iam") != null && !jsonObj.get("iam").isJsonNull()) && !jsonObj.get("iam").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iam` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iam").toString()));
      }
      // validate the optional field `iam`
      if (jsonObj.get("iam") != null && !jsonObj.get("iam").isJsonNull()) {
        IamEnum.validateJsonElement(jsonObj.get("iam"));
      }
      if ((jsonObj.get("op") != null && !jsonObj.get("op").isJsonNull()) && !jsonObj.get("op").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `op` to be a primitive type in the JSON string but got `%s`", jsonObj.get("op").toString()));
      }
      // validate the optional field `op`
      if (jsonObj.get("op") != null && !jsonObj.get("op").isJsonNull()) {
        OpEnum.validateJsonElement(jsonObj.get("op"));
      }
      if ((jsonObj.get("svc") != null && !jsonObj.get("svc").isJsonNull()) && !jsonObj.get("svc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `svc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("svc").toString()));
      }
      if ((jsonObj.get("sys") != null && !jsonObj.get("sys").isJsonNull()) && !jsonObj.get("sys").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sys` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sys").toString()));
      }
      // validate the optional field `sys`
      if (jsonObj.get("sys") != null && !jsonObj.get("sys").isJsonNull()) {
        SysEnum.validateJsonElement(jsonObj.get("sys"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("values") != null && !jsonObj.get("values").isJsonNull() && !jsonObj.get("values").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `values` to be an array in the JSON string but got `%s`", jsonObj.get("values").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Condition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Condition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Condition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Condition.class));

       return (TypeAdapter<T>) new TypeAdapter<Condition>() {
           @Override
           public void write(JsonWriter out, Condition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Condition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Condition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Condition
   * @throws IOException if the JSON string is invalid with respect to Condition
   */
  public static Condition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Condition.class);
  }

  /**
   * Convert an instance of Condition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

