/**
 * Game Services API
 * Deploy and manage infrastructure for global multiplayer gaming experiences.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomField from './CustomField';

/**
 * The CounterOptions model module.
 * @module model/CounterOptions
 * @version v1beta
 */
class CounterOptions {
    /**
     * Constructs a new <code>CounterOptions</code>.
     * Increment a streamz counter with the specified metric and field names. Metric names should start with a &#39;/&#39;, generally be lowercase-only, and end in \&quot;_count\&quot;. Field names should not contain an initial slash. The actual exported metric names will have \&quot;/iam/policy\&quot; prepended. Field names correspond to IAM request parameters and field values are their respective values. Supported field names: - \&quot;authority\&quot;, which is \&quot;[token]\&quot; if IAMContext.token is present, otherwise the value of IAMContext.authority_selector if present, and otherwise a representation of IAMContext.principal; or - \&quot;iam_principal\&quot;, a representation of IAMContext.principal even if a token or authority selector is present; or - \&quot;\&quot; (empty string), resulting in a counter with no fields. Examples: counter { metric: \&quot;/debug_access_count\&quot; field: \&quot;iam_principal\&quot; } &#x3D;&#x3D;&gt; increment counter /iam/policy/debug_access_count {iam_principal&#x3D;[value of IAMContext.principal]}
     * @alias module:model/CounterOptions
     */
    constructor() { 
        
        CounterOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CounterOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CounterOptions} obj Optional instance to populate.
     * @return {module:model/CounterOptions} The populated <code>CounterOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CounterOptions();

            if (data.hasOwnProperty('customFields')) {
                obj['customFields'] = ApiClient.convertToType(data['customFields'], [CustomField]);
            }
            if (data.hasOwnProperty('field')) {
                obj['field'] = ApiClient.convertToType(data['field'], 'String');
            }
            if (data.hasOwnProperty('metric')) {
                obj['metric'] = ApiClient.convertToType(data['metric'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CounterOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CounterOptions</code>.
     */
    static validateJSON(data) {
        if (data['customFields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['customFields'])) {
                throw new Error("Expected the field `customFields` to be an array in the JSON data but got " + data['customFields']);
            }
            // validate the optional field `customFields` (array)
            for (const item of data['customFields']) {
                CustomField.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['field'] && !(typeof data['field'] === 'string' || data['field'] instanceof String)) {
            throw new Error("Expected the field `field` to be a primitive type in the JSON string but got " + data['field']);
        }
        // ensure the json data is a string
        if (data['metric'] && !(typeof data['metric'] === 'string' || data['metric'] instanceof String)) {
            throw new Error("Expected the field `metric` to be a primitive type in the JSON string but got " + data['metric']);
        }

        return true;
    }


}



/**
 * Custom fields.
 * @member {Array.<module:model/CustomField>} customFields
 */
CounterOptions.prototype['customFields'] = undefined;

/**
 * The field value to attribute.
 * @member {String} field
 */
CounterOptions.prototype['field'] = undefined;

/**
 * The metric to update.
 * @member {String} metric
 */
CounterOptions.prototype['metric'] = undefined;






export default CounterOptions;

