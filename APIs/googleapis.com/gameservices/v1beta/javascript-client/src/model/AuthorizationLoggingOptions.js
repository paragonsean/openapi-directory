/**
 * Game Services API
 * Deploy and manage infrastructure for global multiplayer gaming experiences.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AuthorizationLoggingOptions model module.
 * @module model/AuthorizationLoggingOptions
 * @version v1beta
 */
class AuthorizationLoggingOptions {
    /**
     * Constructs a new <code>AuthorizationLoggingOptions</code>.
     * Authorization-related information used by Cloud Audit Logging.
     * @alias module:model/AuthorizationLoggingOptions
     */
    constructor() { 
        
        AuthorizationLoggingOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AuthorizationLoggingOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AuthorizationLoggingOptions} obj Optional instance to populate.
     * @return {module:model/AuthorizationLoggingOptions} The populated <code>AuthorizationLoggingOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AuthorizationLoggingOptions();

            if (data.hasOwnProperty('permissionType')) {
                obj['permissionType'] = ApiClient.convertToType(data['permissionType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AuthorizationLoggingOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AuthorizationLoggingOptions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['permissionType'] && !(typeof data['permissionType'] === 'string' || data['permissionType'] instanceof String)) {
            throw new Error("Expected the field `permissionType` to be a primitive type in the JSON string but got " + data['permissionType']);
        }

        return true;
    }


}



/**
 * The type of the permission that was checked.
 * @member {module:model/AuthorizationLoggingOptions.PermissionTypeEnum} permissionType
 */
AuthorizationLoggingOptions.prototype['permissionType'] = undefined;





/**
 * Allowed values for the <code>permissionType</code> property.
 * @enum {String}
 * @readonly
 */
AuthorizationLoggingOptions['PermissionTypeEnum'] = {

    /**
     * value: "PERMISSION_TYPE_UNSPECIFIED"
     * @const
     */
    "PERMISSION_TYPE_UNSPECIFIED": "PERMISSION_TYPE_UNSPECIFIED",

    /**
     * value: "ADMIN_READ"
     * @const
     */
    "ADMIN_READ": "ADMIN_READ",

    /**
     * value: "ADMIN_WRITE"
     * @const
     */
    "ADMIN_WRITE": "ADMIN_WRITE",

    /**
     * value: "DATA_READ"
     * @const
     */
    "DATA_READ": "DATA_READ",

    /**
     * value: "DATA_WRITE"
     * @const
     */
    "DATA_WRITE": "DATA_WRITE"
};



export default AuthorizationLoggingOptions;

