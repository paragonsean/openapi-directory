/**
 * Game Services API
 * Deploy and manage infrastructure for global multiplayer gaming experiences.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DataAccessOptions model module.
 * @module model/DataAccessOptions
 * @version v1beta
 */
class DataAccessOptions {
    /**
     * Constructs a new <code>DataAccessOptions</code>.
     * Write a Data Access (Gin) log
     * @alias module:model/DataAccessOptions
     */
    constructor() { 
        
        DataAccessOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataAccessOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataAccessOptions} obj Optional instance to populate.
     * @return {module:model/DataAccessOptions} The populated <code>DataAccessOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataAccessOptions();

            if (data.hasOwnProperty('logMode')) {
                obj['logMode'] = ApiClient.convertToType(data['logMode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataAccessOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataAccessOptions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['logMode'] && !(typeof data['logMode'] === 'string' || data['logMode'] instanceof String)) {
            throw new Error("Expected the field `logMode` to be a primitive type in the JSON string but got " + data['logMode']);
        }

        return true;
    }


}



/**
 * @member {module:model/DataAccessOptions.LogModeEnum} logMode
 */
DataAccessOptions.prototype['logMode'] = undefined;





/**
 * Allowed values for the <code>logMode</code> property.
 * @enum {String}
 * @readonly
 */
DataAccessOptions['LogModeEnum'] = {

    /**
     * value: "LOG_MODE_UNSPECIFIED"
     * @const
     */
    "MODE_UNSPECIFIED": "LOG_MODE_UNSPECIFIED",

    /**
     * value: "LOG_FAIL_CLOSED"
     * @const
     */
    "FAIL_CLOSED": "LOG_FAIL_CLOSED"
};



export default DataAccessOptions;

