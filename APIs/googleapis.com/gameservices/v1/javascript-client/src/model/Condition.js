/**
 * Game Services API
 * Deploy and manage infrastructure for global multiplayer gaming experiences.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Condition model module.
 * @module model/Condition
 * @version v1
 */
class Condition {
    /**
     * Constructs a new <code>Condition</code>.
     * A condition to be met.
     * @alias module:model/Condition
     */
    constructor() { 
        
        Condition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Condition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Condition} obj Optional instance to populate.
     * @return {module:model/Condition} The populated <code>Condition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Condition();

            if (data.hasOwnProperty('iam')) {
                obj['iam'] = ApiClient.convertToType(data['iam'], 'String');
            }
            if (data.hasOwnProperty('op')) {
                obj['op'] = ApiClient.convertToType(data['op'], 'String');
            }
            if (data.hasOwnProperty('svc')) {
                obj['svc'] = ApiClient.convertToType(data['svc'], 'String');
            }
            if (data.hasOwnProperty('sys')) {
                obj['sys'] = ApiClient.convertToType(data['sys'], 'String');
            }
            if (data.hasOwnProperty('values')) {
                obj['values'] = ApiClient.convertToType(data['values'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Condition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Condition</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['iam'] && !(typeof data['iam'] === 'string' || data['iam'] instanceof String)) {
            throw new Error("Expected the field `iam` to be a primitive type in the JSON string but got " + data['iam']);
        }
        // ensure the json data is a string
        if (data['op'] && !(typeof data['op'] === 'string' || data['op'] instanceof String)) {
            throw new Error("Expected the field `op` to be a primitive type in the JSON string but got " + data['op']);
        }
        // ensure the json data is a string
        if (data['svc'] && !(typeof data['svc'] === 'string' || data['svc'] instanceof String)) {
            throw new Error("Expected the field `svc` to be a primitive type in the JSON string but got " + data['svc']);
        }
        // ensure the json data is a string
        if (data['sys'] && !(typeof data['sys'] === 'string' || data['sys'] instanceof String)) {
            throw new Error("Expected the field `sys` to be a primitive type in the JSON string but got " + data['sys']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['values'])) {
            throw new Error("Expected the field `values` to be an array in the JSON data but got " + data['values']);
        }

        return true;
    }


}



/**
 * Trusted attributes supplied by the IAM system.
 * @member {module:model/Condition.IamEnum} iam
 */
Condition.prototype['iam'] = undefined;

/**
 * An operator to apply the subject with.
 * @member {module:model/Condition.OpEnum} op
 */
Condition.prototype['op'] = undefined;

/**
 * Trusted attributes discharged by the service.
 * @member {String} svc
 */
Condition.prototype['svc'] = undefined;

/**
 * Trusted attributes supplied by any service that owns resources and uses the IAM system for access control.
 * @member {module:model/Condition.SysEnum} sys
 */
Condition.prototype['sys'] = undefined;

/**
 * The objects of the condition.
 * @member {Array.<String>} values
 */
Condition.prototype['values'] = undefined;





/**
 * Allowed values for the <code>iam</code> property.
 * @enum {String}
 * @readonly
 */
Condition['IamEnum'] = {

    /**
     * value: "NO_ATTR"
     * @const
     */
    "NO_ATTR": "NO_ATTR",

    /**
     * value: "AUTHORITY"
     * @const
     */
    "AUTHORITY": "AUTHORITY",

    /**
     * value: "ATTRIBUTION"
     * @const
     */
    "ATTRIBUTION": "ATTRIBUTION",

    /**
     * value: "SECURITY_REALM"
     * @const
     */
    "SECURITY_REALM": "SECURITY_REALM",

    /**
     * value: "APPROVER"
     * @const
     */
    "APPROVER": "APPROVER",

    /**
     * value: "JUSTIFICATION_TYPE"
     * @const
     */
    "JUSTIFICATION_TYPE": "JUSTIFICATION_TYPE",

    /**
     * value: "CREDENTIALS_TYPE"
     * @const
     */
    "CREDENTIALS_TYPE": "CREDENTIALS_TYPE",

    /**
     * value: "CREDS_ASSERTION"
     * @const
     */
    "CREDS_ASSERTION": "CREDS_ASSERTION"
};


/**
 * Allowed values for the <code>op</code> property.
 * @enum {String}
 * @readonly
 */
Condition['OpEnum'] = {

    /**
     * value: "NO_OP"
     * @const
     */
    "NO_OP": "NO_OP",

    /**
     * value: "EQUALS"
     * @const
     */
    "EQUALS": "EQUALS",

    /**
     * value: "NOT_EQUALS"
     * @const
     */
    "NOT_EQUALS": "NOT_EQUALS",

    /**
     * value: "IN"
     * @const
     */
    "IN": "IN",

    /**
     * value: "NOT_IN"
     * @const
     */
    "NOT_IN": "NOT_IN",

    /**
     * value: "DISCHARGED"
     * @const
     */
    "DISCHARGED": "DISCHARGED"
};


/**
 * Allowed values for the <code>sys</code> property.
 * @enum {String}
 * @readonly
 */
Condition['SysEnum'] = {

    /**
     * value: "NO_ATTR"
     * @const
     */
    "NO_ATTR": "NO_ATTR",

    /**
     * value: "REGION"
     * @const
     */
    "REGION": "REGION",

    /**
     * value: "SERVICE"
     * @const
     */
    "SERVICE": "SERVICE",

    /**
     * value: "NAME"
     * @const
     */
    "NAME": "NAME",

    /**
     * value: "IP"
     * @const
     */
    "IP": "IP"
};



export default Condition;

