/**
 * Game Services API
 * Deploy and manage infrastructure for global multiplayer gaming experiences.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Condition from './Condition';
import LogConfig from './LogConfig';

/**
 * The Rule model module.
 * @module model/Rule
 * @version v1
 */
class Rule {
    /**
     * Constructs a new <code>Rule</code>.
     * A rule to be applied in a Policy.
     * @alias module:model/Rule
     */
    constructor() { 
        
        Rule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Rule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Rule} obj Optional instance to populate.
     * @return {module:model/Rule} The populated <code>Rule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Rule();

            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('conditions')) {
                obj['conditions'] = ApiClient.convertToType(data['conditions'], [Condition]);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('in')) {
                obj['in'] = ApiClient.convertToType(data['in'], ['String']);
            }
            if (data.hasOwnProperty('logConfig')) {
                obj['logConfig'] = ApiClient.convertToType(data['logConfig'], [LogConfig]);
            }
            if (data.hasOwnProperty('notIn')) {
                obj['notIn'] = ApiClient.convertToType(data['notIn'], ['String']);
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = ApiClient.convertToType(data['permissions'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Rule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Rule</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        if (data['conditions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['conditions'])) {
                throw new Error("Expected the field `conditions` to be an array in the JSON data but got " + data['conditions']);
            }
            // validate the optional field `conditions` (array)
            for (const item of data['conditions']) {
                Condition.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['in'])) {
            throw new Error("Expected the field `in` to be an array in the JSON data but got " + data['in']);
        }
        if (data['logConfig']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['logConfig'])) {
                throw new Error("Expected the field `logConfig` to be an array in the JSON data but got " + data['logConfig']);
            }
            // validate the optional field `logConfig` (array)
            for (const item of data['logConfig']) {
                LogConfig.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['notIn'])) {
            throw new Error("Expected the field `notIn` to be an array in the JSON data but got " + data['notIn']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['permissions'])) {
            throw new Error("Expected the field `permissions` to be an array in the JSON data but got " + data['permissions']);
        }

        return true;
    }


}



/**
 * Required
 * @member {module:model/Rule.ActionEnum} action
 */
Rule.prototype['action'] = undefined;

/**
 * Additional restrictions that must be met. All conditions must pass for the rule to match.
 * @member {Array.<module:model/Condition>} conditions
 */
Rule.prototype['conditions'] = undefined;

/**
 * Human-readable description of the rule.
 * @member {String} description
 */
Rule.prototype['description'] = undefined;

/**
 * If one or more 'in' clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in at least one of these entries.
 * @member {Array.<String>} in
 */
Rule.prototype['in'] = undefined;

/**
 * The config returned to callers of CheckPolicy for any entries that match the LOG action.
 * @member {Array.<module:model/LogConfig>} logConfig
 */
Rule.prototype['logConfig'] = undefined;

/**
 * If one or more 'not_in' clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in none of the entries. The format for in and not_in entries can be found at in the Local IAM documentation (see go/local-iam#features).
 * @member {Array.<String>} notIn
 */
Rule.prototype['notIn'] = undefined;

/**
 * A permission is a string of form '..' (e.g., 'storage.buckets.list'). A value of '*' matches all permissions, and a verb part of '*' (e.g., 'storage.buckets.*') matches all verbs.
 * @member {Array.<String>} permissions
 */
Rule.prototype['permissions'] = undefined;





/**
 * Allowed values for the <code>action</code> property.
 * @enum {String}
 * @readonly
 */
Rule['ActionEnum'] = {

    /**
     * value: "NO_ACTION"
     * @const
     */
    "NO_ACTION": "NO_ACTION",

    /**
     * value: "ALLOW"
     * @const
     */
    "ALLOW": "ALLOW",

    /**
     * value: "ALLOW_WITH_LOG"
     * @const
     */
    "ALLOW_WITH_LOG": "ALLOW_WITH_LOG",

    /**
     * value: "DENY"
     * @const
     */
    "DENY": "DENY",

    /**
     * value: "DENY_WITH_LOG"
     * @const
     */
    "DENY_WITH_LOG": "DENY_WITH_LOG",

    /**
     * value: "LOG"
     * @const
     */
    "LOG": "LOG"
};



export default Rule;

