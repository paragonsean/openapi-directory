/**
 * Game Services API
 * Deploy and manage infrastructure for global multiplayer gaming experiences.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICounterOptions.h
 *
 * Increment a streamz counter with the specified metric and field names. Metric names should start with a &#39;/&#39;, generally be lowercase-only, and end in \&quot;_count\&quot;. Field names should not contain an initial slash. The actual exported metric names will have \&quot;/iam/policy\&quot; prepended. Field names correspond to IAM request parameters and field values are their respective values. Supported field names: - \&quot;authority\&quot;, which is \&quot;[token]\&quot; if IAMContext.token is present, otherwise the value of IAMContext.authority_selector if present, and otherwise a representation of IAMContext.principal; or - \&quot;iam_principal\&quot;, a representation of IAMContext.principal even if a token or authority selector is present; or - \&quot;\&quot; (empty string), resulting in a counter with no fields. Examples: counter { metric: \&quot;/debug_access_count\&quot; field: \&quot;iam_principal\&quot; } &#x3D;&#x3D;&gt; increment counter /iam/policy/debug_access_count {iam_principal&#x3D;[value of IAMContext.principal]}
 */

#ifndef OAICounterOptions_H
#define OAICounterOptions_H

#include <QJsonObject>

#include "OAICustomField.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICustomField;

class OAICounterOptions : public OAIObject {
public:
    OAICounterOptions();
    OAICounterOptions(QString json);
    ~OAICounterOptions() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAICustomField> getCustomFields() const;
    void setCustomFields(const QList<OAICustomField> &custom_fields);
    bool is_custom_fields_Set() const;
    bool is_custom_fields_Valid() const;

    QString getField() const;
    void setField(const QString &field);
    bool is_field_Set() const;
    bool is_field_Valid() const;

    QString getMetric() const;
    void setMetric(const QString &metric);
    bool is_metric_Set() const;
    bool is_metric_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAICustomField> m_custom_fields;
    bool m_custom_fields_isSet;
    bool m_custom_fields_isValid;

    QString m_field;
    bool m_field_isSet;
    bool m_field_isValid;

    QString m_metric;
    bool m_metric_isSet;
    bool m_metric_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICounterOptions)

#endif // OAICounterOptions_H
