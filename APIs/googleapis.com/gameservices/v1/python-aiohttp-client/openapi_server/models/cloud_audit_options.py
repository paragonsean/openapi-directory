# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.authorization_logging_options import AuthorizationLoggingOptions
from openapi_server import util


class CloudAuditOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorization_logging_options: AuthorizationLoggingOptions=None, log_name: str=None):
        """CloudAuditOptions - a model defined in OpenAPI

        :param authorization_logging_options: The authorization_logging_options of this CloudAuditOptions.
        :param log_name: The log_name of this CloudAuditOptions.
        """
        self.openapi_types = {
            'authorization_logging_options': AuthorizationLoggingOptions,
            'log_name': str
        }

        self.attribute_map = {
            'authorization_logging_options': 'authorizationLoggingOptions',
            'log_name': 'logName'
        }

        self._authorization_logging_options = authorization_logging_options
        self._log_name = log_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloudAuditOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloudAuditOptions of this CloudAuditOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorization_logging_options(self):
        """Gets the authorization_logging_options of this CloudAuditOptions.


        :return: The authorization_logging_options of this CloudAuditOptions.
        :rtype: AuthorizationLoggingOptions
        """
        return self._authorization_logging_options

    @authorization_logging_options.setter
    def authorization_logging_options(self, authorization_logging_options):
        """Sets the authorization_logging_options of this CloudAuditOptions.


        :param authorization_logging_options: The authorization_logging_options of this CloudAuditOptions.
        :type authorization_logging_options: AuthorizationLoggingOptions
        """

        self._authorization_logging_options = authorization_logging_options

    @property
    def log_name(self):
        """Gets the log_name of this CloudAuditOptions.

        The log_name to populate in the Cloud Audit Record.

        :return: The log_name of this CloudAuditOptions.
        :rtype: str
        """
        return self._log_name

    @log_name.setter
    def log_name(self, log_name):
        """Sets the log_name of this CloudAuditOptions.

        The log_name to populate in the Cloud Audit Record.

        :param log_name: The log_name of this CloudAuditOptions.
        :type log_name: str
        """
        allowed_values = ["UNSPECIFIED_LOG_NAME", "ADMIN_ACTIVITY", "DATA_ACCESS"]  # noqa: E501
        if log_name not in allowed_values:
            raise ValueError(
                "Invalid value for `log_name` ({0}), must be one of {1}"
                .format(log_name, allowed_values)
            )

        self._log_name = log_name
