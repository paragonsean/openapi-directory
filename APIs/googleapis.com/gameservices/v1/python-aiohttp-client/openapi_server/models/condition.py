# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Condition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, iam: str=None, op: str=None, svc: str=None, sys: str=None, values: List[str]=None):
        """Condition - a model defined in OpenAPI

        :param iam: The iam of this Condition.
        :param op: The op of this Condition.
        :param svc: The svc of this Condition.
        :param sys: The sys of this Condition.
        :param values: The values of this Condition.
        """
        self.openapi_types = {
            'iam': str,
            'op': str,
            'svc': str,
            'sys': str,
            'values': List[str]
        }

        self.attribute_map = {
            'iam': 'iam',
            'op': 'op',
            'svc': 'svc',
            'sys': 'sys',
            'values': 'values'
        }

        self._iam = iam
        self._op = op
        self._svc = svc
        self._sys = sys
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Condition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Condition of this Condition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def iam(self):
        """Gets the iam of this Condition.

        Trusted attributes supplied by the IAM system.

        :return: The iam of this Condition.
        :rtype: str
        """
        return self._iam

    @iam.setter
    def iam(self, iam):
        """Sets the iam of this Condition.

        Trusted attributes supplied by the IAM system.

        :param iam: The iam of this Condition.
        :type iam: str
        """
        allowed_values = ["NO_ATTR", "AUTHORITY", "ATTRIBUTION", "SECURITY_REALM", "APPROVER", "JUSTIFICATION_TYPE", "CREDENTIALS_TYPE", "CREDS_ASSERTION"]  # noqa: E501
        if iam not in allowed_values:
            raise ValueError(
                "Invalid value for `iam` ({0}), must be one of {1}"
                .format(iam, allowed_values)
            )

        self._iam = iam

    @property
    def op(self):
        """Gets the op of this Condition.

        An operator to apply the subject with.

        :return: The op of this Condition.
        :rtype: str
        """
        return self._op

    @op.setter
    def op(self, op):
        """Sets the op of this Condition.

        An operator to apply the subject with.

        :param op: The op of this Condition.
        :type op: str
        """
        allowed_values = ["NO_OP", "EQUALS", "NOT_EQUALS", "IN", "NOT_IN", "DISCHARGED"]  # noqa: E501
        if op not in allowed_values:
            raise ValueError(
                "Invalid value for `op` ({0}), must be one of {1}"
                .format(op, allowed_values)
            )

        self._op = op

    @property
    def svc(self):
        """Gets the svc of this Condition.

        Trusted attributes discharged by the service.

        :return: The svc of this Condition.
        :rtype: str
        """
        return self._svc

    @svc.setter
    def svc(self, svc):
        """Sets the svc of this Condition.

        Trusted attributes discharged by the service.

        :param svc: The svc of this Condition.
        :type svc: str
        """

        self._svc = svc

    @property
    def sys(self):
        """Gets the sys of this Condition.

        Trusted attributes supplied by any service that owns resources and uses the IAM system for access control.

        :return: The sys of this Condition.
        :rtype: str
        """
        return self._sys

    @sys.setter
    def sys(self, sys):
        """Sets the sys of this Condition.

        Trusted attributes supplied by any service that owns resources and uses the IAM system for access control.

        :param sys: The sys of this Condition.
        :type sys: str
        """
        allowed_values = ["NO_ATTR", "REGION", "SERVICE", "NAME", "IP"]  # noqa: E501
        if sys not in allowed_values:
            raise ValueError(
                "Invalid value for `sys` ({0}), must be one of {1}"
                .format(sys, allowed_values)
            )

        self._sys = sys

    @property
    def values(self):
        """Gets the values of this Condition.

        The objects of the condition.

        :return: The values of this Condition.
        :rtype: List[str]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this Condition.

        The objects of the condition.

        :param values: The values of this Condition.
        :type values: List[str]
        """

        self._values = values
