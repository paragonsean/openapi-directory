# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Jwk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alg: str=None, crv: str=None, e: str=None, kid: str=None, kty: str=None, n: str=None, use: str=None, x: str=None, y: str=None):
        """Jwk - a model defined in OpenAPI

        :param alg: The alg of this Jwk.
        :param crv: The crv of this Jwk.
        :param e: The e of this Jwk.
        :param kid: The kid of this Jwk.
        :param kty: The kty of this Jwk.
        :param n: The n of this Jwk.
        :param use: The use of this Jwk.
        :param x: The x of this Jwk.
        :param y: The y of this Jwk.
        """
        self.openapi_types = {
            'alg': str,
            'crv': str,
            'e': str,
            'kid': str,
            'kty': str,
            'n': str,
            'use': str,
            'x': str,
            'y': str
        }

        self.attribute_map = {
            'alg': 'alg',
            'crv': 'crv',
            'e': 'e',
            'kid': 'kid',
            'kty': 'kty',
            'n': 'n',
            'use': 'use',
            'x': 'x',
            'y': 'y'
        }

        self._alg = alg
        self._crv = crv
        self._e = e
        self._kid = kid
        self._kty = kty
        self._n = n
        self._use = use
        self._x = x
        self._y = y

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Jwk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Jwk of this Jwk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alg(self):
        """Gets the alg of this Jwk.

        Algorithm.

        :return: The alg of this Jwk.
        :rtype: str
        """
        return self._alg

    @alg.setter
    def alg(self, alg):
        """Sets the alg of this Jwk.

        Algorithm.

        :param alg: The alg of this Jwk.
        :type alg: str
        """

        self._alg = alg

    @property
    def crv(self):
        """Gets the crv of this Jwk.

        Used for ECDSA keys.

        :return: The crv of this Jwk.
        :rtype: str
        """
        return self._crv

    @crv.setter
    def crv(self, crv):
        """Sets the crv of this Jwk.

        Used for ECDSA keys.

        :param crv: The crv of this Jwk.
        :type crv: str
        """

        self._crv = crv

    @property
    def e(self):
        """Gets the e of this Jwk.

        Used for RSA keys.

        :return: The e of this Jwk.
        :rtype: str
        """
        return self._e

    @e.setter
    def e(self, e):
        """Sets the e of this Jwk.

        Used for RSA keys.

        :param e: The e of this Jwk.
        :type e: str
        """

        self._e = e

    @property
    def kid(self):
        """Gets the kid of this Jwk.

        Key ID.

        :return: The kid of this Jwk.
        :rtype: str
        """
        return self._kid

    @kid.setter
    def kid(self, kid):
        """Sets the kid of this Jwk.

        Key ID.

        :param kid: The kid of this Jwk.
        :type kid: str
        """

        self._kid = kid

    @property
    def kty(self):
        """Gets the kty of this Jwk.

        Key Type.

        :return: The kty of this Jwk.
        :rtype: str
        """
        return self._kty

    @kty.setter
    def kty(self, kty):
        """Sets the kty of this Jwk.

        Key Type.

        :param kty: The kty of this Jwk.
        :type kty: str
        """

        self._kty = kty

    @property
    def n(self):
        """Gets the n of this Jwk.

        Used for RSA keys.

        :return: The n of this Jwk.
        :rtype: str
        """
        return self._n

    @n.setter
    def n(self, n):
        """Sets the n of this Jwk.

        Used for RSA keys.

        :param n: The n of this Jwk.
        :type n: str
        """

        self._n = n

    @property
    def use(self):
        """Gets the use of this Jwk.

        Permitted uses for the public keys.

        :return: The use of this Jwk.
        :rtype: str
        """
        return self._use

    @use.setter
    def use(self, use):
        """Sets the use of this Jwk.

        Permitted uses for the public keys.

        :param use: The use of this Jwk.
        :type use: str
        """

        self._use = use

    @property
    def x(self):
        """Gets the x of this Jwk.

        Used for ECDSA keys.

        :return: The x of this Jwk.
        :rtype: str
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this Jwk.

        Used for ECDSA keys.

        :param x: The x of this Jwk.
        :type x: str
        """

        self._x = x

    @property
    def y(self):
        """Gets the y of this Jwk.

        Used for ECDSA keys.

        :return: The y of this Jwk.
        :rtype: str
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this Jwk.

        Used for ECDSA keys.

        :param y: The y of this Jwk.
        :type y: str
        """

        self._y = y
