# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Fleet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, membership: str=None, pre_registered: bool=None, project: str=None):
        """Fleet - a model defined in OpenAPI

        :param membership: The membership of this Fleet.
        :param pre_registered: The pre_registered of this Fleet.
        :param project: The project of this Fleet.
        """
        self.openapi_types = {
            'membership': str,
            'pre_registered': bool,
            'project': str
        }

        self.attribute_map = {
            'membership': 'membership',
            'pre_registered': 'preRegistered',
            'project': 'project'
        }

        self._membership = membership
        self._pre_registered = pre_registered
        self._project = project

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Fleet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Fleet of this Fleet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def membership(self):
        """Gets the membership of this Fleet.

        [Output only] The full resource name of the registered fleet membership of the cluster, in the format `//gkehub.googleapis.com/projects/*/locations/*/memberships/*`.

        :return: The membership of this Fleet.
        :rtype: str
        """
        return self._membership

    @membership.setter
    def membership(self, membership):
        """Sets the membership of this Fleet.

        [Output only] The full resource name of the registered fleet membership of the cluster, in the format `//gkehub.googleapis.com/projects/*/locations/*/memberships/*`.

        :param membership: The membership of this Fleet.
        :type membership: str
        """

        self._membership = membership

    @property
    def pre_registered(self):
        """Gets the pre_registered of this Fleet.

        [Output only] Whether the cluster has been registered through the fleet API.

        :return: The pre_registered of this Fleet.
        :rtype: bool
        """
        return self._pre_registered

    @pre_registered.setter
    def pre_registered(self, pre_registered):
        """Sets the pre_registered of this Fleet.

        [Output only] Whether the cluster has been registered through the fleet API.

        :param pre_registered: The pre_registered of this Fleet.
        :type pre_registered: bool
        """

        self._pre_registered = pre_registered

    @property
    def project(self):
        """Gets the project of this Fleet.

        The Fleet host project(project ID or project number) where this cluster will be registered to. This field cannot be changed after the cluster has been registered.

        :return: The project of this Fleet.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this Fleet.

        The Fleet host project(project ID or project number) where this cluster will be registered to. This field cannot be changed after the cluster has been registered.

        :param project: The project of this Fleet.
        :type project: str
        """

        self._project = project
