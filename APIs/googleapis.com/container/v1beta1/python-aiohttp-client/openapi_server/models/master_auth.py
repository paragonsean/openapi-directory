# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.client_certificate_config import ClientCertificateConfig
from openapi_server import util


class MasterAuth(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_certificate: str=None, client_certificate_config: ClientCertificateConfig=None, client_key: str=None, cluster_ca_certificate: str=None, password: str=None, username: str=None):
        """MasterAuth - a model defined in OpenAPI

        :param client_certificate: The client_certificate of this MasterAuth.
        :param client_certificate_config: The client_certificate_config of this MasterAuth.
        :param client_key: The client_key of this MasterAuth.
        :param cluster_ca_certificate: The cluster_ca_certificate of this MasterAuth.
        :param password: The password of this MasterAuth.
        :param username: The username of this MasterAuth.
        """
        self.openapi_types = {
            'client_certificate': str,
            'client_certificate_config': ClientCertificateConfig,
            'client_key': str,
            'cluster_ca_certificate': str,
            'password': str,
            'username': str
        }

        self.attribute_map = {
            'client_certificate': 'clientCertificate',
            'client_certificate_config': 'clientCertificateConfig',
            'client_key': 'clientKey',
            'cluster_ca_certificate': 'clusterCaCertificate',
            'password': 'password',
            'username': 'username'
        }

        self._client_certificate = client_certificate
        self._client_certificate_config = client_certificate_config
        self._client_key = client_key
        self._cluster_ca_certificate = cluster_ca_certificate
        self._password = password
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MasterAuth':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MasterAuth of this MasterAuth.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_certificate(self):
        """Gets the client_certificate of this MasterAuth.

        [Output only] Base64-encoded public certificate used by clients to authenticate to the cluster endpoint.

        :return: The client_certificate of this MasterAuth.
        :rtype: str
        """
        return self._client_certificate

    @client_certificate.setter
    def client_certificate(self, client_certificate):
        """Sets the client_certificate of this MasterAuth.

        [Output only] Base64-encoded public certificate used by clients to authenticate to the cluster endpoint.

        :param client_certificate: The client_certificate of this MasterAuth.
        :type client_certificate: str
        """

        self._client_certificate = client_certificate

    @property
    def client_certificate_config(self):
        """Gets the client_certificate_config of this MasterAuth.


        :return: The client_certificate_config of this MasterAuth.
        :rtype: ClientCertificateConfig
        """
        return self._client_certificate_config

    @client_certificate_config.setter
    def client_certificate_config(self, client_certificate_config):
        """Sets the client_certificate_config of this MasterAuth.


        :param client_certificate_config: The client_certificate_config of this MasterAuth.
        :type client_certificate_config: ClientCertificateConfig
        """

        self._client_certificate_config = client_certificate_config

    @property
    def client_key(self):
        """Gets the client_key of this MasterAuth.

        [Output only] Base64-encoded private key used by clients to authenticate to the cluster endpoint.

        :return: The client_key of this MasterAuth.
        :rtype: str
        """
        return self._client_key

    @client_key.setter
    def client_key(self, client_key):
        """Sets the client_key of this MasterAuth.

        [Output only] Base64-encoded private key used by clients to authenticate to the cluster endpoint.

        :param client_key: The client_key of this MasterAuth.
        :type client_key: str
        """

        self._client_key = client_key

    @property
    def cluster_ca_certificate(self):
        """Gets the cluster_ca_certificate of this MasterAuth.


        :return: The cluster_ca_certificate of this MasterAuth.
        :rtype: str
        """
        return self._cluster_ca_certificate

    @cluster_ca_certificate.setter
    def cluster_ca_certificate(self, cluster_ca_certificate):
        """Sets the cluster_ca_certificate of this MasterAuth.


        :param cluster_ca_certificate: The cluster_ca_certificate of this MasterAuth.
        :type cluster_ca_certificate: str
        """

        self._cluster_ca_certificate = cluster_ca_certificate

    @property
    def password(self):
        """Gets the password of this MasterAuth.

        The password to use for HTTP basic authentication to the master endpoint. Because the master endpoint is open to the Internet, you should create a strong password. If a password is provided for cluster creation, username must be non-empty. Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication

        :return: The password of this MasterAuth.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this MasterAuth.

        The password to use for HTTP basic authentication to the master endpoint. Because the master endpoint is open to the Internet, you should create a strong password. If a password is provided for cluster creation, username must be non-empty. Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication

        :param password: The password of this MasterAuth.
        :type password: str
        """

        self._password = password

    @property
    def username(self):
        """Gets the username of this MasterAuth.

        The username to use for HTTP basic authentication to the master endpoint. For clusters v1.6.0 and later, basic authentication can be disabled by leaving username unspecified (or setting it to the empty string). Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication

        :return: The username of this MasterAuth.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this MasterAuth.

        The username to use for HTTP basic authentication to the master endpoint. For clusters v1.6.0 and later, basic authentication can be disabled by leaving username unspecified (or setting it to the empty string). Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication

        :param username: The username of this MasterAuth.
        :type username: str
        """

        self._username = username
