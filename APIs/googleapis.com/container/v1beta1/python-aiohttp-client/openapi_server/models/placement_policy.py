# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PlacementPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, policy_name: str=None, tpu_topology: str=None, type: str=None):
        """PlacementPolicy - a model defined in OpenAPI

        :param policy_name: The policy_name of this PlacementPolicy.
        :param tpu_topology: The tpu_topology of this PlacementPolicy.
        :param type: The type of this PlacementPolicy.
        """
        self.openapi_types = {
            'policy_name': str,
            'tpu_topology': str,
            'type': str
        }

        self.attribute_map = {
            'policy_name': 'policyName',
            'tpu_topology': 'tpuTopology',
            'type': 'type'
        }

        self._policy_name = policy_name
        self._tpu_topology = tpu_topology
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlacementPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlacementPolicy of this PlacementPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def policy_name(self):
        """Gets the policy_name of this PlacementPolicy.

        If set, refers to the name of a custom resource policy supplied by the user. The resource policy must be in the same project and region as the node pool. If not found, InvalidArgument error is returned.

        :return: The policy_name of this PlacementPolicy.
        :rtype: str
        """
        return self._policy_name

    @policy_name.setter
    def policy_name(self, policy_name):
        """Sets the policy_name of this PlacementPolicy.

        If set, refers to the name of a custom resource policy supplied by the user. The resource policy must be in the same project and region as the node pool. If not found, InvalidArgument error is returned.

        :param policy_name: The policy_name of this PlacementPolicy.
        :type policy_name: str
        """

        self._policy_name = policy_name

    @property
    def tpu_topology(self):
        """Gets the tpu_topology of this PlacementPolicy.

        TPU placement topology for pod slice node pool. https://cloud.google.com/tpu/docs/types-topologies#tpu_topologies

        :return: The tpu_topology of this PlacementPolicy.
        :rtype: str
        """
        return self._tpu_topology

    @tpu_topology.setter
    def tpu_topology(self, tpu_topology):
        """Sets the tpu_topology of this PlacementPolicy.

        TPU placement topology for pod slice node pool. https://cloud.google.com/tpu/docs/types-topologies#tpu_topologies

        :param tpu_topology: The tpu_topology of this PlacementPolicy.
        :type tpu_topology: str
        """

        self._tpu_topology = tpu_topology

    @property
    def type(self):
        """Gets the type of this PlacementPolicy.

        The type of placement.

        :return: The type of this PlacementPolicy.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PlacementPolicy.

        The type of placement.

        :param type: The type of this PlacementPolicy.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "COMPACT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
