# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WorkloadALTSConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enable_alts: bool=None):
        """WorkloadALTSConfig - a model defined in OpenAPI

        :param enable_alts: The enable_alts of this WorkloadALTSConfig.
        """
        self.openapi_types = {
            'enable_alts': bool
        }

        self.attribute_map = {
            'enable_alts': 'enableAlts'
        }

        self._enable_alts = enable_alts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkloadALTSConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkloadALTSConfig of this WorkloadALTSConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enable_alts(self):
        """Gets the enable_alts of this WorkloadALTSConfig.

        enable_alts controls whether the alts handshaker should be enabled or not for direct-path. Requires Workload Identity (workload_pool must be non-empty).

        :return: The enable_alts of this WorkloadALTSConfig.
        :rtype: bool
        """
        return self._enable_alts

    @enable_alts.setter
    def enable_alts(self, enable_alts):
        """Sets the enable_alts of this WorkloadALTSConfig.

        enable_alts controls whether the alts handshaker should be enabled or not for direct-path. Requires Workload Identity (workload_pool must be non-empty).

        :param enable_alts: The enable_alts of this WorkloadALTSConfig.
        :type enable_alts: bool
        """

        self._enable_alts = enable_alts
