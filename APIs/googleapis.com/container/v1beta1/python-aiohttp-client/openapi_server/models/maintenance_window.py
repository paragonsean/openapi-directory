# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.daily_maintenance_window import DailyMaintenanceWindow
from openapi_server.models.recurring_time_window import RecurringTimeWindow
from openapi_server.models.time_window import TimeWindow
from openapi_server import util


class MaintenanceWindow(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, daily_maintenance_window: DailyMaintenanceWindow=None, maintenance_exclusions: Dict[str, TimeWindow]=None, recurring_window: RecurringTimeWindow=None):
        """MaintenanceWindow - a model defined in OpenAPI

        :param daily_maintenance_window: The daily_maintenance_window of this MaintenanceWindow.
        :param maintenance_exclusions: The maintenance_exclusions of this MaintenanceWindow.
        :param recurring_window: The recurring_window of this MaintenanceWindow.
        """
        self.openapi_types = {
            'daily_maintenance_window': DailyMaintenanceWindow,
            'maintenance_exclusions': Dict[str, TimeWindow],
            'recurring_window': RecurringTimeWindow
        }

        self.attribute_map = {
            'daily_maintenance_window': 'dailyMaintenanceWindow',
            'maintenance_exclusions': 'maintenanceExclusions',
            'recurring_window': 'recurringWindow'
        }

        self._daily_maintenance_window = daily_maintenance_window
        self._maintenance_exclusions = maintenance_exclusions
        self._recurring_window = recurring_window

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MaintenanceWindow':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MaintenanceWindow of this MaintenanceWindow.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def daily_maintenance_window(self):
        """Gets the daily_maintenance_window of this MaintenanceWindow.


        :return: The daily_maintenance_window of this MaintenanceWindow.
        :rtype: DailyMaintenanceWindow
        """
        return self._daily_maintenance_window

    @daily_maintenance_window.setter
    def daily_maintenance_window(self, daily_maintenance_window):
        """Sets the daily_maintenance_window of this MaintenanceWindow.


        :param daily_maintenance_window: The daily_maintenance_window of this MaintenanceWindow.
        :type daily_maintenance_window: DailyMaintenanceWindow
        """

        self._daily_maintenance_window = daily_maintenance_window

    @property
    def maintenance_exclusions(self):
        """Gets the maintenance_exclusions of this MaintenanceWindow.

        Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows.

        :return: The maintenance_exclusions of this MaintenanceWindow.
        :rtype: Dict[str, TimeWindow]
        """
        return self._maintenance_exclusions

    @maintenance_exclusions.setter
    def maintenance_exclusions(self, maintenance_exclusions):
        """Sets the maintenance_exclusions of this MaintenanceWindow.

        Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows.

        :param maintenance_exclusions: The maintenance_exclusions of this MaintenanceWindow.
        :type maintenance_exclusions: Dict[str, TimeWindow]
        """

        self._maintenance_exclusions = maintenance_exclusions

    @property
    def recurring_window(self):
        """Gets the recurring_window of this MaintenanceWindow.


        :return: The recurring_window of this MaintenanceWindow.
        :rtype: RecurringTimeWindow
        """
        return self._recurring_window

    @recurring_window.setter
    def recurring_window(self, recurring_window):
        """Sets the recurring_window of this MaintenanceWindow.


        :param recurring_window: The recurring_window of this MaintenanceWindow.
        :type recurring_window: RecurringTimeWindow
        """

        self._recurring_window = recurring_window
