# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ParentProductConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, labels: Dict[str, str]=None, product_name: str=None):
        """ParentProductConfig - a model defined in OpenAPI

        :param labels: The labels of this ParentProductConfig.
        :param product_name: The product_name of this ParentProductConfig.
        """
        self.openapi_types = {
            'labels': Dict[str, str],
            'product_name': str
        }

        self.attribute_map = {
            'labels': 'labels',
            'product_name': 'productName'
        }

        self._labels = labels
        self._product_name = product_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ParentProductConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ParentProductConfig of this ParentProductConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def labels(self):
        """Gets the labels of this ParentProductConfig.

        Labels contain the configuration of the parent product.

        :return: The labels of this ParentProductConfig.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ParentProductConfig.

        Labels contain the configuration of the parent product.

        :param labels: The labels of this ParentProductConfig.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def product_name(self):
        """Gets the product_name of this ParentProductConfig.

        Name of the parent product associated with the cluster.

        :return: The product_name of this ParentProductConfig.
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this ParentProductConfig.

        Name of the parent product associated with the cluster.

        :param product_name: The product_name of this ParentProductConfig.
        :type product_name: str
        """

        self._product_name = product_name
