# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auto_upgrade_options import AutoUpgradeOptions
from openapi_server import util


class NodeManagement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_repair: bool=None, auto_upgrade: bool=None, upgrade_options: AutoUpgradeOptions=None):
        """NodeManagement - a model defined in OpenAPI

        :param auto_repair: The auto_repair of this NodeManagement.
        :param auto_upgrade: The auto_upgrade of this NodeManagement.
        :param upgrade_options: The upgrade_options of this NodeManagement.
        """
        self.openapi_types = {
            'auto_repair': bool,
            'auto_upgrade': bool,
            'upgrade_options': AutoUpgradeOptions
        }

        self.attribute_map = {
            'auto_repair': 'autoRepair',
            'auto_upgrade': 'autoUpgrade',
            'upgrade_options': 'upgradeOptions'
        }

        self._auto_repair = auto_repair
        self._auto_upgrade = auto_upgrade
        self._upgrade_options = upgrade_options

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeManagement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeManagement of this NodeManagement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_repair(self):
        """Gets the auto_repair of this NodeManagement.

        Whether the nodes will be automatically repaired.

        :return: The auto_repair of this NodeManagement.
        :rtype: bool
        """
        return self._auto_repair

    @auto_repair.setter
    def auto_repair(self, auto_repair):
        """Sets the auto_repair of this NodeManagement.

        Whether the nodes will be automatically repaired.

        :param auto_repair: The auto_repair of this NodeManagement.
        :type auto_repair: bool
        """

        self._auto_repair = auto_repair

    @property
    def auto_upgrade(self):
        """Gets the auto_upgrade of this NodeManagement.

        Whether the nodes will be automatically upgraded.

        :return: The auto_upgrade of this NodeManagement.
        :rtype: bool
        """
        return self._auto_upgrade

    @auto_upgrade.setter
    def auto_upgrade(self, auto_upgrade):
        """Sets the auto_upgrade of this NodeManagement.

        Whether the nodes will be automatically upgraded.

        :param auto_upgrade: The auto_upgrade of this NodeManagement.
        :type auto_upgrade: bool
        """

        self._auto_upgrade = auto_upgrade

    @property
    def upgrade_options(self):
        """Gets the upgrade_options of this NodeManagement.


        :return: The upgrade_options of this NodeManagement.
        :rtype: AutoUpgradeOptions
        """
        return self._upgrade_options

    @upgrade_options.setter
    def upgrade_options(self, upgrade_options):
        """Sets the upgrade_options of this NodeManagement.


        :param upgrade_options: The upgrade_options of this NodeManagement.
        :type upgrade_options: AutoUpgradeOptions
        """

        self._upgrade_options = upgrade_options
