# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WindowsNodeConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, os_version: str=None):
        """WindowsNodeConfig - a model defined in OpenAPI

        :param os_version: The os_version of this WindowsNodeConfig.
        """
        self.openapi_types = {
            'os_version': str
        }

        self.attribute_map = {
            'os_version': 'osVersion'
        }

        self._os_version = os_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WindowsNodeConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WindowsNodeConfig of this WindowsNodeConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def os_version(self):
        """Gets the os_version of this WindowsNodeConfig.

        OSVersion specifies the Windows node config to be used on the node

        :return: The os_version of this WindowsNodeConfig.
        :rtype: str
        """
        return self._os_version

    @os_version.setter
    def os_version(self, os_version):
        """Sets the os_version of this WindowsNodeConfig.

        OSVersion specifies the Windows node config to be used on the node

        :param os_version: The os_version of this WindowsNodeConfig.
        :type os_version: str
        """
        allowed_values = ["OS_VERSION_UNSPECIFIED", "OS_VERSION_LTSC2019", "OS_VERSION_LTSC2022"]  # noqa: E501
        if os_version not in allowed_values:
            raise ValueError(
                "Invalid value for `os_version` ({0}), must be one of {1}"
                .format(os_version, allowed_values)
            )

        self._os_version = os_version
