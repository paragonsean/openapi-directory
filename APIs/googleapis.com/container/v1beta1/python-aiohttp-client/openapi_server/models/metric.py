# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Metric(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, double_value: float=None, int_value: str=None, name: str=None, string_value: str=None):
        """Metric - a model defined in OpenAPI

        :param double_value: The double_value of this Metric.
        :param int_value: The int_value of this Metric.
        :param name: The name of this Metric.
        :param string_value: The string_value of this Metric.
        """
        self.openapi_types = {
            'double_value': float,
            'int_value': str,
            'name': str,
            'string_value': str
        }

        self.attribute_map = {
            'double_value': 'doubleValue',
            'int_value': 'intValue',
            'name': 'name',
            'string_value': 'stringValue'
        }

        self._double_value = double_value
        self._int_value = int_value
        self._name = name
        self._string_value = string_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Metric':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Metric of this Metric.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def double_value(self):
        """Gets the double_value of this Metric.

        For metrics with floating point value.

        :return: The double_value of this Metric.
        :rtype: float
        """
        return self._double_value

    @double_value.setter
    def double_value(self, double_value):
        """Sets the double_value of this Metric.

        For metrics with floating point value.

        :param double_value: The double_value of this Metric.
        :type double_value: float
        """

        self._double_value = double_value

    @property
    def int_value(self):
        """Gets the int_value of this Metric.

        For metrics with integer value.

        :return: The int_value of this Metric.
        :rtype: str
        """
        return self._int_value

    @int_value.setter
    def int_value(self, int_value):
        """Sets the int_value of this Metric.

        For metrics with integer value.

        :param int_value: The int_value of this Metric.
        :type int_value: str
        """

        self._int_value = int_value

    @property
    def name(self):
        """Gets the name of this Metric.

        Required. Metric name, e.g., \"nodes total\", \"percent done\".

        :return: The name of this Metric.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Metric.

        Required. Metric name, e.g., \"nodes total\", \"percent done\".

        :param name: The name of this Metric.
        :type name: str
        """

        self._name = name

    @property
    def string_value(self):
        """Gets the string_value of this Metric.

        For metrics with custom values (ratios, visual progress, etc.).

        :return: The string_value of this Metric.
        :rtype: str
        """
        return self._string_value

    @string_value.setter
    def string_value(self, string_value):
        """Sets the string_value of this Metric.

        For metrics with custom values (ratios, visual progress, etc.).

        :param string_value: The string_value of this Metric.
        :type string_value: str
        """

        self._string_value = string_value
