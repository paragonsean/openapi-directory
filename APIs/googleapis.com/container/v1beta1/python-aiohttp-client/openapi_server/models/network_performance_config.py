# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NetworkPerformanceConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, external_ip_egress_bandwidth_tier: str=None, total_egress_bandwidth_tier: str=None):
        """NetworkPerformanceConfig - a model defined in OpenAPI

        :param external_ip_egress_bandwidth_tier: The external_ip_egress_bandwidth_tier of this NetworkPerformanceConfig.
        :param total_egress_bandwidth_tier: The total_egress_bandwidth_tier of this NetworkPerformanceConfig.
        """
        self.openapi_types = {
            'external_ip_egress_bandwidth_tier': str,
            'total_egress_bandwidth_tier': str
        }

        self.attribute_map = {
            'external_ip_egress_bandwidth_tier': 'externalIpEgressBandwidthTier',
            'total_egress_bandwidth_tier': 'totalEgressBandwidthTier'
        }

        self._external_ip_egress_bandwidth_tier = external_ip_egress_bandwidth_tier
        self._total_egress_bandwidth_tier = total_egress_bandwidth_tier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkPerformanceConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkPerformanceConfig of this NetworkPerformanceConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def external_ip_egress_bandwidth_tier(self):
        """Gets the external_ip_egress_bandwidth_tier of this NetworkPerformanceConfig.

        Specifies the network bandwidth tier for the NodePool for traffic to external/public IP addresses.

        :return: The external_ip_egress_bandwidth_tier of this NetworkPerformanceConfig.
        :rtype: str
        """
        return self._external_ip_egress_bandwidth_tier

    @external_ip_egress_bandwidth_tier.setter
    def external_ip_egress_bandwidth_tier(self, external_ip_egress_bandwidth_tier):
        """Sets the external_ip_egress_bandwidth_tier of this NetworkPerformanceConfig.

        Specifies the network bandwidth tier for the NodePool for traffic to external/public IP addresses.

        :param external_ip_egress_bandwidth_tier: The external_ip_egress_bandwidth_tier of this NetworkPerformanceConfig.
        :type external_ip_egress_bandwidth_tier: str
        """
        allowed_values = ["TIER_UNSPECIFIED", "TIER_1"]  # noqa: E501
        if external_ip_egress_bandwidth_tier not in allowed_values:
            raise ValueError(
                "Invalid value for `external_ip_egress_bandwidth_tier` ({0}), must be one of {1}"
                .format(external_ip_egress_bandwidth_tier, allowed_values)
            )

        self._external_ip_egress_bandwidth_tier = external_ip_egress_bandwidth_tier

    @property
    def total_egress_bandwidth_tier(self):
        """Gets the total_egress_bandwidth_tier of this NetworkPerformanceConfig.

        Specifies the total network bandwidth tier for the NodePool.

        :return: The total_egress_bandwidth_tier of this NetworkPerformanceConfig.
        :rtype: str
        """
        return self._total_egress_bandwidth_tier

    @total_egress_bandwidth_tier.setter
    def total_egress_bandwidth_tier(self, total_egress_bandwidth_tier):
        """Sets the total_egress_bandwidth_tier of this NetworkPerformanceConfig.

        Specifies the total network bandwidth tier for the NodePool.

        :param total_egress_bandwidth_tier: The total_egress_bandwidth_tier of this NetworkPerformanceConfig.
        :type total_egress_bandwidth_tier: str
        """
        allowed_values = ["TIER_UNSPECIFIED", "TIER_1"]  # noqa: E501
        if total_egress_bandwidth_tier not in allowed_values:
            raise ValueError(
                "Invalid value for `total_egress_bandwidth_tier` ({0}), must be one of {1}"
                .format(total_egress_bandwidth_tier, allowed_values)
            )

        self._total_egress_bandwidth_tier = total_egress_bandwidth_tier
