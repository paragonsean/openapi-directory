# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StandardRolloutPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, batch_node_count: int=None, batch_percentage: float=None, batch_soak_duration: str=None):
        """StandardRolloutPolicy - a model defined in OpenAPI

        :param batch_node_count: The batch_node_count of this StandardRolloutPolicy.
        :param batch_percentage: The batch_percentage of this StandardRolloutPolicy.
        :param batch_soak_duration: The batch_soak_duration of this StandardRolloutPolicy.
        """
        self.openapi_types = {
            'batch_node_count': int,
            'batch_percentage': float,
            'batch_soak_duration': str
        }

        self.attribute_map = {
            'batch_node_count': 'batchNodeCount',
            'batch_percentage': 'batchPercentage',
            'batch_soak_duration': 'batchSoakDuration'
        }

        self._batch_node_count = batch_node_count
        self._batch_percentage = batch_percentage
        self._batch_soak_duration = batch_soak_duration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StandardRolloutPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StandardRolloutPolicy of this StandardRolloutPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def batch_node_count(self):
        """Gets the batch_node_count of this StandardRolloutPolicy.

        Number of blue nodes to drain in a batch.

        :return: The batch_node_count of this StandardRolloutPolicy.
        :rtype: int
        """
        return self._batch_node_count

    @batch_node_count.setter
    def batch_node_count(self, batch_node_count):
        """Sets the batch_node_count of this StandardRolloutPolicy.

        Number of blue nodes to drain in a batch.

        :param batch_node_count: The batch_node_count of this StandardRolloutPolicy.
        :type batch_node_count: int
        """

        self._batch_node_count = batch_node_count

    @property
    def batch_percentage(self):
        """Gets the batch_percentage of this StandardRolloutPolicy.

        Percentage of the blue pool nodes to drain in a batch. The range of this field should be (0.0, 1.0].

        :return: The batch_percentage of this StandardRolloutPolicy.
        :rtype: float
        """
        return self._batch_percentage

    @batch_percentage.setter
    def batch_percentage(self, batch_percentage):
        """Sets the batch_percentage of this StandardRolloutPolicy.

        Percentage of the blue pool nodes to drain in a batch. The range of this field should be (0.0, 1.0].

        :param batch_percentage: The batch_percentage of this StandardRolloutPolicy.
        :type batch_percentage: float
        """

        self._batch_percentage = batch_percentage

    @property
    def batch_soak_duration(self):
        """Gets the batch_soak_duration of this StandardRolloutPolicy.

        Soak time after each batch gets drained. Default to zero.

        :return: The batch_soak_duration of this StandardRolloutPolicy.
        :rtype: str
        """
        return self._batch_soak_duration

    @batch_soak_duration.setter
    def batch_soak_duration(self, batch_soak_duration):
        """Sets the batch_soak_duration of this StandardRolloutPolicy.

        Soak time after each batch gets drained. Default to zero.

        :param batch_soak_duration: The batch_soak_duration of this StandardRolloutPolicy.
        :type batch_soak_duration: str
        """

        self._batch_soak_duration = batch_soak_duration
