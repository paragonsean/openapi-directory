# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.private_cluster_master_global_access_config import PrivateClusterMasterGlobalAccessConfig
from openapi_server import util


class PrivateClusterConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enable_private_endpoint: bool=None, enable_private_nodes: bool=None, master_global_access_config: PrivateClusterMasterGlobalAccessConfig=None, master_ipv4_cidr_block: str=None, peering_name: str=None, private_endpoint: str=None, private_endpoint_subnetwork: str=None, public_endpoint: str=None):
        """PrivateClusterConfig - a model defined in OpenAPI

        :param enable_private_endpoint: The enable_private_endpoint of this PrivateClusterConfig.
        :param enable_private_nodes: The enable_private_nodes of this PrivateClusterConfig.
        :param master_global_access_config: The master_global_access_config of this PrivateClusterConfig.
        :param master_ipv4_cidr_block: The master_ipv4_cidr_block of this PrivateClusterConfig.
        :param peering_name: The peering_name of this PrivateClusterConfig.
        :param private_endpoint: The private_endpoint of this PrivateClusterConfig.
        :param private_endpoint_subnetwork: The private_endpoint_subnetwork of this PrivateClusterConfig.
        :param public_endpoint: The public_endpoint of this PrivateClusterConfig.
        """
        self.openapi_types = {
            'enable_private_endpoint': bool,
            'enable_private_nodes': bool,
            'master_global_access_config': PrivateClusterMasterGlobalAccessConfig,
            'master_ipv4_cidr_block': str,
            'peering_name': str,
            'private_endpoint': str,
            'private_endpoint_subnetwork': str,
            'public_endpoint': str
        }

        self.attribute_map = {
            'enable_private_endpoint': 'enablePrivateEndpoint',
            'enable_private_nodes': 'enablePrivateNodes',
            'master_global_access_config': 'masterGlobalAccessConfig',
            'master_ipv4_cidr_block': 'masterIpv4CidrBlock',
            'peering_name': 'peeringName',
            'private_endpoint': 'privateEndpoint',
            'private_endpoint_subnetwork': 'privateEndpointSubnetwork',
            'public_endpoint': 'publicEndpoint'
        }

        self._enable_private_endpoint = enable_private_endpoint
        self._enable_private_nodes = enable_private_nodes
        self._master_global_access_config = master_global_access_config
        self._master_ipv4_cidr_block = master_ipv4_cidr_block
        self._peering_name = peering_name
        self._private_endpoint = private_endpoint
        self._private_endpoint_subnetwork = private_endpoint_subnetwork
        self._public_endpoint = public_endpoint

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrivateClusterConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrivateClusterConfig of this PrivateClusterConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enable_private_endpoint(self):
        """Gets the enable_private_endpoint of this PrivateClusterConfig.

        Whether the master's internal IP address is used as the cluster endpoint.

        :return: The enable_private_endpoint of this PrivateClusterConfig.
        :rtype: bool
        """
        return self._enable_private_endpoint

    @enable_private_endpoint.setter
    def enable_private_endpoint(self, enable_private_endpoint):
        """Sets the enable_private_endpoint of this PrivateClusterConfig.

        Whether the master's internal IP address is used as the cluster endpoint.

        :param enable_private_endpoint: The enable_private_endpoint of this PrivateClusterConfig.
        :type enable_private_endpoint: bool
        """

        self._enable_private_endpoint = enable_private_endpoint

    @property
    def enable_private_nodes(self):
        """Gets the enable_private_nodes of this PrivateClusterConfig.

        Whether nodes have internal IP addresses only. If enabled, all nodes are given only RFC 1918 private addresses and communicate with the master via private networking.

        :return: The enable_private_nodes of this PrivateClusterConfig.
        :rtype: bool
        """
        return self._enable_private_nodes

    @enable_private_nodes.setter
    def enable_private_nodes(self, enable_private_nodes):
        """Sets the enable_private_nodes of this PrivateClusterConfig.

        Whether nodes have internal IP addresses only. If enabled, all nodes are given only RFC 1918 private addresses and communicate with the master via private networking.

        :param enable_private_nodes: The enable_private_nodes of this PrivateClusterConfig.
        :type enable_private_nodes: bool
        """

        self._enable_private_nodes = enable_private_nodes

    @property
    def master_global_access_config(self):
        """Gets the master_global_access_config of this PrivateClusterConfig.


        :return: The master_global_access_config of this PrivateClusterConfig.
        :rtype: PrivateClusterMasterGlobalAccessConfig
        """
        return self._master_global_access_config

    @master_global_access_config.setter
    def master_global_access_config(self, master_global_access_config):
        """Sets the master_global_access_config of this PrivateClusterConfig.


        :param master_global_access_config: The master_global_access_config of this PrivateClusterConfig.
        :type master_global_access_config: PrivateClusterMasterGlobalAccessConfig
        """

        self._master_global_access_config = master_global_access_config

    @property
    def master_ipv4_cidr_block(self):
        """Gets the master_ipv4_cidr_block of this PrivateClusterConfig.

        The IP range in CIDR notation to use for the hosted master network. This range will be used for assigning internal IP addresses to the master or set of masters, as well as the ILB VIP. This range must not overlap with any other ranges in use within the cluster's network.

        :return: The master_ipv4_cidr_block of this PrivateClusterConfig.
        :rtype: str
        """
        return self._master_ipv4_cidr_block

    @master_ipv4_cidr_block.setter
    def master_ipv4_cidr_block(self, master_ipv4_cidr_block):
        """Sets the master_ipv4_cidr_block of this PrivateClusterConfig.

        The IP range in CIDR notation to use for the hosted master network. This range will be used for assigning internal IP addresses to the master or set of masters, as well as the ILB VIP. This range must not overlap with any other ranges in use within the cluster's network.

        :param master_ipv4_cidr_block: The master_ipv4_cidr_block of this PrivateClusterConfig.
        :type master_ipv4_cidr_block: str
        """

        self._master_ipv4_cidr_block = master_ipv4_cidr_block

    @property
    def peering_name(self):
        """Gets the peering_name of this PrivateClusterConfig.

        Output only. The peering name in the customer VPC used by this cluster.

        :return: The peering_name of this PrivateClusterConfig.
        :rtype: str
        """
        return self._peering_name

    @peering_name.setter
    def peering_name(self, peering_name):
        """Sets the peering_name of this PrivateClusterConfig.

        Output only. The peering name in the customer VPC used by this cluster.

        :param peering_name: The peering_name of this PrivateClusterConfig.
        :type peering_name: str
        """

        self._peering_name = peering_name

    @property
    def private_endpoint(self):
        """Gets the private_endpoint of this PrivateClusterConfig.

        Output only. The internal IP address of this cluster's master endpoint.

        :return: The private_endpoint of this PrivateClusterConfig.
        :rtype: str
        """
        return self._private_endpoint

    @private_endpoint.setter
    def private_endpoint(self, private_endpoint):
        """Sets the private_endpoint of this PrivateClusterConfig.

        Output only. The internal IP address of this cluster's master endpoint.

        :param private_endpoint: The private_endpoint of this PrivateClusterConfig.
        :type private_endpoint: str
        """

        self._private_endpoint = private_endpoint

    @property
    def private_endpoint_subnetwork(self):
        """Gets the private_endpoint_subnetwork of this PrivateClusterConfig.

        Subnet to provision the master's private endpoint during cluster creation. Specified in projects/*/regions/*/subnetworks/* format.

        :return: The private_endpoint_subnetwork of this PrivateClusterConfig.
        :rtype: str
        """
        return self._private_endpoint_subnetwork

    @private_endpoint_subnetwork.setter
    def private_endpoint_subnetwork(self, private_endpoint_subnetwork):
        """Sets the private_endpoint_subnetwork of this PrivateClusterConfig.

        Subnet to provision the master's private endpoint during cluster creation. Specified in projects/*/regions/*/subnetworks/* format.

        :param private_endpoint_subnetwork: The private_endpoint_subnetwork of this PrivateClusterConfig.
        :type private_endpoint_subnetwork: str
        """

        self._private_endpoint_subnetwork = private_endpoint_subnetwork

    @property
    def public_endpoint(self):
        """Gets the public_endpoint of this PrivateClusterConfig.

        Output only. The external IP address of this cluster's master endpoint.

        :return: The public_endpoint of this PrivateClusterConfig.
        :rtype: str
        """
        return self._public_endpoint

    @public_endpoint.setter
    def public_endpoint(self, public_endpoint):
        """Sets the public_endpoint of this PrivateClusterConfig.

        Output only. The external IP address of this cluster's master endpoint.

        :param public_endpoint: The public_endpoint of this PrivateClusterConfig.
        :type public_endpoint: str
        """

        self._public_endpoint = public_endpoint
