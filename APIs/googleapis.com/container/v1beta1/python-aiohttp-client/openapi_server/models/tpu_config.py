# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TpuConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, ipv4_cidr_block: str=None, use_service_networking: bool=None):
        """TpuConfig - a model defined in OpenAPI

        :param enabled: The enabled of this TpuConfig.
        :param ipv4_cidr_block: The ipv4_cidr_block of this TpuConfig.
        :param use_service_networking: The use_service_networking of this TpuConfig.
        """
        self.openapi_types = {
            'enabled': bool,
            'ipv4_cidr_block': str,
            'use_service_networking': bool
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'ipv4_cidr_block': 'ipv4CidrBlock',
            'use_service_networking': 'useServiceNetworking'
        }

        self._enabled = enabled
        self._ipv4_cidr_block = ipv4_cidr_block
        self._use_service_networking = use_service_networking

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TpuConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TpuConfig of this TpuConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this TpuConfig.

        Whether Cloud TPU integration is enabled or not.

        :return: The enabled of this TpuConfig.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this TpuConfig.

        Whether Cloud TPU integration is enabled or not.

        :param enabled: The enabled of this TpuConfig.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def ipv4_cidr_block(self):
        """Gets the ipv4_cidr_block of this TpuConfig.

        IPv4 CIDR block reserved for Cloud TPU in the VPC.

        :return: The ipv4_cidr_block of this TpuConfig.
        :rtype: str
        """
        return self._ipv4_cidr_block

    @ipv4_cidr_block.setter
    def ipv4_cidr_block(self, ipv4_cidr_block):
        """Sets the ipv4_cidr_block of this TpuConfig.

        IPv4 CIDR block reserved for Cloud TPU in the VPC.

        :param ipv4_cidr_block: The ipv4_cidr_block of this TpuConfig.
        :type ipv4_cidr_block: str
        """

        self._ipv4_cidr_block = ipv4_cidr_block

    @property
    def use_service_networking(self):
        """Gets the use_service_networking of this TpuConfig.

        Whether to use service networking for Cloud TPU or not.

        :return: The use_service_networking of this TpuConfig.
        :rtype: bool
        """
        return self._use_service_networking

    @use_service_networking.setter
    def use_service_networking(self, use_service_networking):
        """Sets the use_service_networking of this TpuConfig.

        Whether to use service networking for Cloud TPU or not.

        :param use_service_networking: The use_service_networking of this TpuConfig.
        :type use_service_networking: bool
        """

        self._use_service_networking = use_service_networking
