# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.additional_node_network_config import AdditionalNodeNetworkConfig
from openapi_server.models.additional_pod_network_config import AdditionalPodNetworkConfig
from openapi_server.models.network_performance_config import NetworkPerformanceConfig
from openapi_server.models.pod_cidr_overprovision_config import PodCIDROverprovisionConfig
from openapi_server import util


class NodeNetworkConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_node_network_configs: List[AdditionalNodeNetworkConfig]=None, additional_pod_network_configs: List[AdditionalPodNetworkConfig]=None, create_pod_range: bool=None, enable_private_nodes: bool=None, network_performance_config: NetworkPerformanceConfig=None, pod_cidr_overprovision_config: PodCIDROverprovisionConfig=None, pod_ipv4_cidr_block: str=None, pod_ipv4_range_utilization: float=None, pod_range: str=None):
        """NodeNetworkConfig - a model defined in OpenAPI

        :param additional_node_network_configs: The additional_node_network_configs of this NodeNetworkConfig.
        :param additional_pod_network_configs: The additional_pod_network_configs of this NodeNetworkConfig.
        :param create_pod_range: The create_pod_range of this NodeNetworkConfig.
        :param enable_private_nodes: The enable_private_nodes of this NodeNetworkConfig.
        :param network_performance_config: The network_performance_config of this NodeNetworkConfig.
        :param pod_cidr_overprovision_config: The pod_cidr_overprovision_config of this NodeNetworkConfig.
        :param pod_ipv4_cidr_block: The pod_ipv4_cidr_block of this NodeNetworkConfig.
        :param pod_ipv4_range_utilization: The pod_ipv4_range_utilization of this NodeNetworkConfig.
        :param pod_range: The pod_range of this NodeNetworkConfig.
        """
        self.openapi_types = {
            'additional_node_network_configs': List[AdditionalNodeNetworkConfig],
            'additional_pod_network_configs': List[AdditionalPodNetworkConfig],
            'create_pod_range': bool,
            'enable_private_nodes': bool,
            'network_performance_config': NetworkPerformanceConfig,
            'pod_cidr_overprovision_config': PodCIDROverprovisionConfig,
            'pod_ipv4_cidr_block': str,
            'pod_ipv4_range_utilization': float,
            'pod_range': str
        }

        self.attribute_map = {
            'additional_node_network_configs': 'additionalNodeNetworkConfigs',
            'additional_pod_network_configs': 'additionalPodNetworkConfigs',
            'create_pod_range': 'createPodRange',
            'enable_private_nodes': 'enablePrivateNodes',
            'network_performance_config': 'networkPerformanceConfig',
            'pod_cidr_overprovision_config': 'podCidrOverprovisionConfig',
            'pod_ipv4_cidr_block': 'podIpv4CidrBlock',
            'pod_ipv4_range_utilization': 'podIpv4RangeUtilization',
            'pod_range': 'podRange'
        }

        self._additional_node_network_configs = additional_node_network_configs
        self._additional_pod_network_configs = additional_pod_network_configs
        self._create_pod_range = create_pod_range
        self._enable_private_nodes = enable_private_nodes
        self._network_performance_config = network_performance_config
        self._pod_cidr_overprovision_config = pod_cidr_overprovision_config
        self._pod_ipv4_cidr_block = pod_ipv4_cidr_block
        self._pod_ipv4_range_utilization = pod_ipv4_range_utilization
        self._pod_range = pod_range

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeNetworkConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeNetworkConfig of this NodeNetworkConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_node_network_configs(self):
        """Gets the additional_node_network_configs of this NodeNetworkConfig.

        We specify the additional node networks for this node pool using this list. Each node network corresponds to an additional interface

        :return: The additional_node_network_configs of this NodeNetworkConfig.
        :rtype: List[AdditionalNodeNetworkConfig]
        """
        return self._additional_node_network_configs

    @additional_node_network_configs.setter
    def additional_node_network_configs(self, additional_node_network_configs):
        """Sets the additional_node_network_configs of this NodeNetworkConfig.

        We specify the additional node networks for this node pool using this list. Each node network corresponds to an additional interface

        :param additional_node_network_configs: The additional_node_network_configs of this NodeNetworkConfig.
        :type additional_node_network_configs: List[AdditionalNodeNetworkConfig]
        """

        self._additional_node_network_configs = additional_node_network_configs

    @property
    def additional_pod_network_configs(self):
        """Gets the additional_pod_network_configs of this NodeNetworkConfig.

        We specify the additional pod networks for this node pool using this list. Each pod network corresponds to an additional alias IP range for the node

        :return: The additional_pod_network_configs of this NodeNetworkConfig.
        :rtype: List[AdditionalPodNetworkConfig]
        """
        return self._additional_pod_network_configs

    @additional_pod_network_configs.setter
    def additional_pod_network_configs(self, additional_pod_network_configs):
        """Sets the additional_pod_network_configs of this NodeNetworkConfig.

        We specify the additional pod networks for this node pool using this list. Each pod network corresponds to an additional alias IP range for the node

        :param additional_pod_network_configs: The additional_pod_network_configs of this NodeNetworkConfig.
        :type additional_pod_network_configs: List[AdditionalPodNetworkConfig]
        """

        self._additional_pod_network_configs = additional_pod_network_configs

    @property
    def create_pod_range(self):
        """Gets the create_pod_range of this NodeNetworkConfig.

        Input only. Whether to create a new range for pod IPs in this node pool. Defaults are provided for `pod_range` and `pod_ipv4_cidr_block` if they are not specified. If neither `create_pod_range` or `pod_range` are specified, the cluster-level default (`ip_allocation_policy.cluster_ipv4_cidr_block`) is used. Only applicable if `ip_allocation_policy.use_ip_aliases` is true. This field cannot be changed after the node pool has been created.

        :return: The create_pod_range of this NodeNetworkConfig.
        :rtype: bool
        """
        return self._create_pod_range

    @create_pod_range.setter
    def create_pod_range(self, create_pod_range):
        """Sets the create_pod_range of this NodeNetworkConfig.

        Input only. Whether to create a new range for pod IPs in this node pool. Defaults are provided for `pod_range` and `pod_ipv4_cidr_block` if they are not specified. If neither `create_pod_range` or `pod_range` are specified, the cluster-level default (`ip_allocation_policy.cluster_ipv4_cidr_block`) is used. Only applicable if `ip_allocation_policy.use_ip_aliases` is true. This field cannot be changed after the node pool has been created.

        :param create_pod_range: The create_pod_range of this NodeNetworkConfig.
        :type create_pod_range: bool
        """

        self._create_pod_range = create_pod_range

    @property
    def enable_private_nodes(self):
        """Gets the enable_private_nodes of this NodeNetworkConfig.

        Whether nodes have internal IP addresses only. If enable_private_nodes is not specified, then the value is derived from cluster.privateClusterConfig.enablePrivateNodes

        :return: The enable_private_nodes of this NodeNetworkConfig.
        :rtype: bool
        """
        return self._enable_private_nodes

    @enable_private_nodes.setter
    def enable_private_nodes(self, enable_private_nodes):
        """Sets the enable_private_nodes of this NodeNetworkConfig.

        Whether nodes have internal IP addresses only. If enable_private_nodes is not specified, then the value is derived from cluster.privateClusterConfig.enablePrivateNodes

        :param enable_private_nodes: The enable_private_nodes of this NodeNetworkConfig.
        :type enable_private_nodes: bool
        """

        self._enable_private_nodes = enable_private_nodes

    @property
    def network_performance_config(self):
        """Gets the network_performance_config of this NodeNetworkConfig.


        :return: The network_performance_config of this NodeNetworkConfig.
        :rtype: NetworkPerformanceConfig
        """
        return self._network_performance_config

    @network_performance_config.setter
    def network_performance_config(self, network_performance_config):
        """Sets the network_performance_config of this NodeNetworkConfig.


        :param network_performance_config: The network_performance_config of this NodeNetworkConfig.
        :type network_performance_config: NetworkPerformanceConfig
        """

        self._network_performance_config = network_performance_config

    @property
    def pod_cidr_overprovision_config(self):
        """Gets the pod_cidr_overprovision_config of this NodeNetworkConfig.


        :return: The pod_cidr_overprovision_config of this NodeNetworkConfig.
        :rtype: PodCIDROverprovisionConfig
        """
        return self._pod_cidr_overprovision_config

    @pod_cidr_overprovision_config.setter
    def pod_cidr_overprovision_config(self, pod_cidr_overprovision_config):
        """Sets the pod_cidr_overprovision_config of this NodeNetworkConfig.


        :param pod_cidr_overprovision_config: The pod_cidr_overprovision_config of this NodeNetworkConfig.
        :type pod_cidr_overprovision_config: PodCIDROverprovisionConfig
        """

        self._pod_cidr_overprovision_config = pod_cidr_overprovision_config

    @property
    def pod_ipv4_cidr_block(self):
        """Gets the pod_ipv4_cidr_block of this NodeNetworkConfig.

        The IP address range for pod IPs in this node pool. Only applicable if `create_pod_range` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) to pick a specific range to use. Only applicable if `ip_allocation_policy.use_ip_aliases` is true. This field cannot be changed after the node pool has been created.

        :return: The pod_ipv4_cidr_block of this NodeNetworkConfig.
        :rtype: str
        """
        return self._pod_ipv4_cidr_block

    @pod_ipv4_cidr_block.setter
    def pod_ipv4_cidr_block(self, pod_ipv4_cidr_block):
        """Sets the pod_ipv4_cidr_block of this NodeNetworkConfig.

        The IP address range for pod IPs in this node pool. Only applicable if `create_pod_range` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) to pick a specific range to use. Only applicable if `ip_allocation_policy.use_ip_aliases` is true. This field cannot be changed after the node pool has been created.

        :param pod_ipv4_cidr_block: The pod_ipv4_cidr_block of this NodeNetworkConfig.
        :type pod_ipv4_cidr_block: str
        """

        self._pod_ipv4_cidr_block = pod_ipv4_cidr_block

    @property
    def pod_ipv4_range_utilization(self):
        """Gets the pod_ipv4_range_utilization of this NodeNetworkConfig.

        Output only. [Output only] The utilization of the IPv4 range for the pod. The ratio is Usage/[Total number of IPs in the secondary range], Usage=numNodes*numZones*podIPsPerNode.

        :return: The pod_ipv4_range_utilization of this NodeNetworkConfig.
        :rtype: float
        """
        return self._pod_ipv4_range_utilization

    @pod_ipv4_range_utilization.setter
    def pod_ipv4_range_utilization(self, pod_ipv4_range_utilization):
        """Sets the pod_ipv4_range_utilization of this NodeNetworkConfig.

        Output only. [Output only] The utilization of the IPv4 range for the pod. The ratio is Usage/[Total number of IPs in the secondary range], Usage=numNodes*numZones*podIPsPerNode.

        :param pod_ipv4_range_utilization: The pod_ipv4_range_utilization of this NodeNetworkConfig.
        :type pod_ipv4_range_utilization: float
        """

        self._pod_ipv4_range_utilization = pod_ipv4_range_utilization

    @property
    def pod_range(self):
        """Gets the pod_range of this NodeNetworkConfig.

        The ID of the secondary range for pod IPs. If `create_pod_range` is true, this ID is used for the new range. If `create_pod_range` is false, uses an existing secondary range with this ID. Only applicable if `ip_allocation_policy.use_ip_aliases` is true. This field cannot be changed after the node pool has been created.

        :return: The pod_range of this NodeNetworkConfig.
        :rtype: str
        """
        return self._pod_range

    @pod_range.setter
    def pod_range(self, pod_range):
        """Sets the pod_range of this NodeNetworkConfig.

        The ID of the secondary range for pod IPs. If `create_pod_range` is true, this ID is used for the new range. If `create_pod_range` is false, uses an existing secondary range with this ID. Only applicable if `ip_allocation_policy.use_ip_aliases` is true. This field cannot be changed after the node pool has been created.

        :param pod_range: The pod_range of this NodeNetworkConfig.
        :type pod_range: str
        """

        self._pod_range = pod_range
