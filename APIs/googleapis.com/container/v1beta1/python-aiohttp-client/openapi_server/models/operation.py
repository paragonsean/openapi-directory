# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.operation_progress import OperationProgress
from openapi_server.models.status import Status
from openapi_server.models.status_condition import StatusCondition
from openapi_server import util


class Operation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_conditions: List[StatusCondition]=None, detail: str=None, end_time: str=None, error: Status=None, location: str=None, name: str=None, nodepool_conditions: List[StatusCondition]=None, operation_type: str=None, progress: OperationProgress=None, self_link: str=None, start_time: str=None, status: str=None, status_message: str=None, target_link: str=None, zone: str=None):
        """Operation - a model defined in OpenAPI

        :param cluster_conditions: The cluster_conditions of this Operation.
        :param detail: The detail of this Operation.
        :param end_time: The end_time of this Operation.
        :param error: The error of this Operation.
        :param location: The location of this Operation.
        :param name: The name of this Operation.
        :param nodepool_conditions: The nodepool_conditions of this Operation.
        :param operation_type: The operation_type of this Operation.
        :param progress: The progress of this Operation.
        :param self_link: The self_link of this Operation.
        :param start_time: The start_time of this Operation.
        :param status: The status of this Operation.
        :param status_message: The status_message of this Operation.
        :param target_link: The target_link of this Operation.
        :param zone: The zone of this Operation.
        """
        self.openapi_types = {
            'cluster_conditions': List[StatusCondition],
            'detail': str,
            'end_time': str,
            'error': Status,
            'location': str,
            'name': str,
            'nodepool_conditions': List[StatusCondition],
            'operation_type': str,
            'progress': OperationProgress,
            'self_link': str,
            'start_time': str,
            'status': str,
            'status_message': str,
            'target_link': str,
            'zone': str
        }

        self.attribute_map = {
            'cluster_conditions': 'clusterConditions',
            'detail': 'detail',
            'end_time': 'endTime',
            'error': 'error',
            'location': 'location',
            'name': 'name',
            'nodepool_conditions': 'nodepoolConditions',
            'operation_type': 'operationType',
            'progress': 'progress',
            'self_link': 'selfLink',
            'start_time': 'startTime',
            'status': 'status',
            'status_message': 'statusMessage',
            'target_link': 'targetLink',
            'zone': 'zone'
        }

        self._cluster_conditions = cluster_conditions
        self._detail = detail
        self._end_time = end_time
        self._error = error
        self._location = location
        self._name = name
        self._nodepool_conditions = nodepool_conditions
        self._operation_type = operation_type
        self._progress = progress
        self._self_link = self_link
        self._start_time = start_time
        self._status = status
        self._status_message = status_message
        self._target_link = target_link
        self._zone = zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Operation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Operation of this Operation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_conditions(self):
        """Gets the cluster_conditions of this Operation.

        Which conditions caused the current cluster state. Deprecated. Use field error instead.

        :return: The cluster_conditions of this Operation.
        :rtype: List[StatusCondition]
        """
        return self._cluster_conditions

    @cluster_conditions.setter
    def cluster_conditions(self, cluster_conditions):
        """Sets the cluster_conditions of this Operation.

        Which conditions caused the current cluster state. Deprecated. Use field error instead.

        :param cluster_conditions: The cluster_conditions of this Operation.
        :type cluster_conditions: List[StatusCondition]
        """

        self._cluster_conditions = cluster_conditions

    @property
    def detail(self):
        """Gets the detail of this Operation.

        Detailed operation progress, if available.

        :return: The detail of this Operation.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this Operation.

        Detailed operation progress, if available.

        :param detail: The detail of this Operation.
        :type detail: str
        """

        self._detail = detail

    @property
    def end_time(self):
        """Gets the end_time of this Operation.

        [Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.

        :return: The end_time of this Operation.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this Operation.

        [Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.

        :param end_time: The end_time of this Operation.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def error(self):
        """Gets the error of this Operation.


        :return: The error of this Operation.
        :rtype: Status
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this Operation.


        :param error: The error of this Operation.
        :type error: Status
        """

        self._error = error

    @property
    def location(self):
        """Gets the location of this Operation.

        [Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides.

        :return: The location of this Operation.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Operation.

        [Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides.

        :param location: The location of this Operation.
        :type location: str
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this Operation.

        The server-assigned ID for the operation.

        :return: The name of this Operation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Operation.

        The server-assigned ID for the operation.

        :param name: The name of this Operation.
        :type name: str
        """

        self._name = name

    @property
    def nodepool_conditions(self):
        """Gets the nodepool_conditions of this Operation.

        Which conditions caused the current node pool state. Deprecated. Use field error instead.

        :return: The nodepool_conditions of this Operation.
        :rtype: List[StatusCondition]
        """
        return self._nodepool_conditions

    @nodepool_conditions.setter
    def nodepool_conditions(self, nodepool_conditions):
        """Sets the nodepool_conditions of this Operation.

        Which conditions caused the current node pool state. Deprecated. Use field error instead.

        :param nodepool_conditions: The nodepool_conditions of this Operation.
        :type nodepool_conditions: List[StatusCondition]
        """

        self._nodepool_conditions = nodepool_conditions

    @property
    def operation_type(self):
        """Gets the operation_type of this Operation.

        The operation type.

        :return: The operation_type of this Operation.
        :rtype: str
        """
        return self._operation_type

    @operation_type.setter
    def operation_type(self, operation_type):
        """Sets the operation_type of this Operation.

        The operation type.

        :param operation_type: The operation_type of this Operation.
        :type operation_type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "CREATE_CLUSTER", "DELETE_CLUSTER", "UPGRADE_MASTER", "UPGRADE_NODES", "REPAIR_CLUSTER", "UPDATE_CLUSTER", "CREATE_NODE_POOL", "DELETE_NODE_POOL", "SET_NODE_POOL_MANAGEMENT", "AUTO_REPAIR_NODES", "AUTO_UPGRADE_NODES", "SET_LABELS", "SET_MASTER_AUTH", "SET_NODE_POOL_SIZE", "SET_NETWORK_POLICY", "SET_MAINTENANCE_POLICY", "RESIZE_CLUSTER", "FLEET_FEATURE_UPGRADE"]  # noqa: E501
        if operation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `operation_type` ({0}), must be one of {1}"
                .format(operation_type, allowed_values)
            )

        self._operation_type = operation_type

    @property
    def progress(self):
        """Gets the progress of this Operation.


        :return: The progress of this Operation.
        :rtype: OperationProgress
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this Operation.


        :param progress: The progress of this Operation.
        :type progress: OperationProgress
        """

        self._progress = progress

    @property
    def self_link(self):
        """Gets the self_link of this Operation.

        Server-defined URI for the operation. Example: `https://container.googleapis.com/v1alpha1/projects/123/locations/us-central1/operations/operation-123`.

        :return: The self_link of this Operation.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this Operation.

        Server-defined URI for the operation. Example: `https://container.googleapis.com/v1alpha1/projects/123/locations/us-central1/operations/operation-123`.

        :param self_link: The self_link of this Operation.
        :type self_link: str
        """

        self._self_link = self_link

    @property
    def start_time(self):
        """Gets the start_time of this Operation.

        [Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.

        :return: The start_time of this Operation.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Operation.

        [Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.

        :param start_time: The start_time of this Operation.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this Operation.

        The current status of the operation.

        :return: The status of this Operation.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Operation.

        The current status of the operation.

        :param status: The status of this Operation.
        :type status: str
        """
        allowed_values = ["STATUS_UNSPECIFIED", "PENDING", "RUNNING", "DONE", "ABORTING"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this Operation.

        Output only. If an error has occurred, a textual description of the error. Deprecated. Use field error instead.

        :return: The status_message of this Operation.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this Operation.

        Output only. If an error has occurred, a textual description of the error. Deprecated. Use field error instead.

        :param status_message: The status_message of this Operation.
        :type status_message: str
        """

        self._status_message = status_message

    @property
    def target_link(self):
        """Gets the target_link of this Operation.

        Server-defined URI for the target of the operation. The format of this is a URI to the resource being modified (such as a cluster, node pool, or node). For node pool repairs, there may be multiple nodes being repaired, but only one will be the target. Examples: - ## `https://container.googleapis.com/v1/projects/123/locations/us-central1/clusters/my-cluster` ## `https://container.googleapis.com/v1/projects/123/zones/us-central1-c/clusters/my-cluster/nodePools/my-np` `https://container.googleapis.com/v1/projects/123/zones/us-central1-c/clusters/my-cluster/nodePools/my-np/node/my-node`

        :return: The target_link of this Operation.
        :rtype: str
        """
        return self._target_link

    @target_link.setter
    def target_link(self, target_link):
        """Sets the target_link of this Operation.

        Server-defined URI for the target of the operation. The format of this is a URI to the resource being modified (such as a cluster, node pool, or node). For node pool repairs, there may be multiple nodes being repaired, but only one will be the target. Examples: - ## `https://container.googleapis.com/v1/projects/123/locations/us-central1/clusters/my-cluster` ## `https://container.googleapis.com/v1/projects/123/zones/us-central1-c/clusters/my-cluster/nodePools/my-np` `https://container.googleapis.com/v1/projects/123/zones/us-central1-c/clusters/my-cluster/nodePools/my-np/node/my-node`

        :param target_link: The target_link of this Operation.
        :type target_link: str
        """

        self._target_link = target_link

    @property
    def zone(self):
        """Gets the zone of this Operation.

        The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead.

        :return: The zone of this Operation.
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this Operation.

        The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead.

        :param zone: The zone of this Operation.
        :type zone: str
        """

        self._zone = zone
