# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.opportunistic_maintenance_strategy import OpportunisticMaintenanceStrategy
from openapi_server import util


class HostMaintenancePolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, maintenance_interval: str=None, opportunistic_maintenance_strategy: OpportunisticMaintenanceStrategy=None):
        """HostMaintenancePolicy - a model defined in OpenAPI

        :param maintenance_interval: The maintenance_interval of this HostMaintenancePolicy.
        :param opportunistic_maintenance_strategy: The opportunistic_maintenance_strategy of this HostMaintenancePolicy.
        """
        self.openapi_types = {
            'maintenance_interval': str,
            'opportunistic_maintenance_strategy': OpportunisticMaintenanceStrategy
        }

        self.attribute_map = {
            'maintenance_interval': 'maintenanceInterval',
            'opportunistic_maintenance_strategy': 'opportunisticMaintenanceStrategy'
        }

        self._maintenance_interval = maintenance_interval
        self._opportunistic_maintenance_strategy = opportunistic_maintenance_strategy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HostMaintenancePolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HostMaintenancePolicy of this HostMaintenancePolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def maintenance_interval(self):
        """Gets the maintenance_interval of this HostMaintenancePolicy.

        Specifies the frequency of planned maintenance events.

        :return: The maintenance_interval of this HostMaintenancePolicy.
        :rtype: str
        """
        return self._maintenance_interval

    @maintenance_interval.setter
    def maintenance_interval(self, maintenance_interval):
        """Sets the maintenance_interval of this HostMaintenancePolicy.

        Specifies the frequency of planned maintenance events.

        :param maintenance_interval: The maintenance_interval of this HostMaintenancePolicy.
        :type maintenance_interval: str
        """
        allowed_values = ["MAINTENANCE_INTERVAL_UNSPECIFIED", "AS_NEEDED", "PERIODIC"]  # noqa: E501
        if maintenance_interval not in allowed_values:
            raise ValueError(
                "Invalid value for `maintenance_interval` ({0}), must be one of {1}"
                .format(maintenance_interval, allowed_values)
            )

        self._maintenance_interval = maintenance_interval

    @property
    def opportunistic_maintenance_strategy(self):
        """Gets the opportunistic_maintenance_strategy of this HostMaintenancePolicy.


        :return: The opportunistic_maintenance_strategy of this HostMaintenancePolicy.
        :rtype: OpportunisticMaintenanceStrategy
        """
        return self._opportunistic_maintenance_strategy

    @opportunistic_maintenance_strategy.setter
    def opportunistic_maintenance_strategy(self, opportunistic_maintenance_strategy):
        """Sets the opportunistic_maintenance_strategy of this HostMaintenancePolicy.


        :param opportunistic_maintenance_strategy: The opportunistic_maintenance_strategy of this HostMaintenancePolicy.
        :type opportunistic_maintenance_strategy: OpportunisticMaintenanceStrategy
        """

        self._opportunistic_maintenance_strategy = opportunistic_maintenance_strategy
