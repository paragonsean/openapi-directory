# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Filter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_type: List[str]=None):
        """Filter - a model defined in OpenAPI

        :param event_type: The event_type of this Filter.
        """
        self.openapi_types = {
            'event_type': List[str]
        }

        self.attribute_map = {
            'event_type': 'eventType'
        }

        self._event_type = event_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Filter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Filter of this Filter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_type(self):
        """Gets the event_type of this Filter.

        Event types to allowlist.

        :return: The event_type of this Filter.
        :rtype: List[str]
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this Filter.

        Event types to allowlist.

        :param event_type: The event_type of this Filter.
        :type event_type: List[str]
        """
        allowed_values = ["EVENT_TYPE_UNSPECIFIED", "UPGRADE_AVAILABLE_EVENT", "UPGRADE_EVENT", "SECURITY_BULLETIN_EVENT"]  # noqa: E501
        if not set(event_type).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `event_type` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(event_type) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._event_type = event_type
