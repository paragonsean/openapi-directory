# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.additional_pod_ranges_config import AdditionalPodRangesConfig
from openapi_server.models.pod_cidr_overprovision_config import PodCIDROverprovisionConfig
from openapi_server import util


class IPAllocationPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_pod_ranges_config: AdditionalPodRangesConfig=None, allow_route_overlap: bool=None, cluster_ipv4_cidr: str=None, cluster_ipv4_cidr_block: str=None, cluster_secondary_range_name: str=None, create_subnetwork: bool=None, default_pod_ipv4_range_utilization: float=None, ipv6_access_type: str=None, node_ipv4_cidr: str=None, node_ipv4_cidr_block: str=None, pod_cidr_overprovision_config: PodCIDROverprovisionConfig=None, services_ipv4_cidr: str=None, services_ipv4_cidr_block: str=None, services_ipv6_cidr_block: str=None, services_secondary_range_name: str=None, stack_type: str=None, subnet_ipv6_cidr_block: str=None, subnetwork_name: str=None, tpu_ipv4_cidr_block: str=None, use_ip_aliases: bool=None, use_routes: bool=None):
        """IPAllocationPolicy - a model defined in OpenAPI

        :param additional_pod_ranges_config: The additional_pod_ranges_config of this IPAllocationPolicy.
        :param allow_route_overlap: The allow_route_overlap of this IPAllocationPolicy.
        :param cluster_ipv4_cidr: The cluster_ipv4_cidr of this IPAllocationPolicy.
        :param cluster_ipv4_cidr_block: The cluster_ipv4_cidr_block of this IPAllocationPolicy.
        :param cluster_secondary_range_name: The cluster_secondary_range_name of this IPAllocationPolicy.
        :param create_subnetwork: The create_subnetwork of this IPAllocationPolicy.
        :param default_pod_ipv4_range_utilization: The default_pod_ipv4_range_utilization of this IPAllocationPolicy.
        :param ipv6_access_type: The ipv6_access_type of this IPAllocationPolicy.
        :param node_ipv4_cidr: The node_ipv4_cidr of this IPAllocationPolicy.
        :param node_ipv4_cidr_block: The node_ipv4_cidr_block of this IPAllocationPolicy.
        :param pod_cidr_overprovision_config: The pod_cidr_overprovision_config of this IPAllocationPolicy.
        :param services_ipv4_cidr: The services_ipv4_cidr of this IPAllocationPolicy.
        :param services_ipv4_cidr_block: The services_ipv4_cidr_block of this IPAllocationPolicy.
        :param services_ipv6_cidr_block: The services_ipv6_cidr_block of this IPAllocationPolicy.
        :param services_secondary_range_name: The services_secondary_range_name of this IPAllocationPolicy.
        :param stack_type: The stack_type of this IPAllocationPolicy.
        :param subnet_ipv6_cidr_block: The subnet_ipv6_cidr_block of this IPAllocationPolicy.
        :param subnetwork_name: The subnetwork_name of this IPAllocationPolicy.
        :param tpu_ipv4_cidr_block: The tpu_ipv4_cidr_block of this IPAllocationPolicy.
        :param use_ip_aliases: The use_ip_aliases of this IPAllocationPolicy.
        :param use_routes: The use_routes of this IPAllocationPolicy.
        """
        self.openapi_types = {
            'additional_pod_ranges_config': AdditionalPodRangesConfig,
            'allow_route_overlap': bool,
            'cluster_ipv4_cidr': str,
            'cluster_ipv4_cidr_block': str,
            'cluster_secondary_range_name': str,
            'create_subnetwork': bool,
            'default_pod_ipv4_range_utilization': float,
            'ipv6_access_type': str,
            'node_ipv4_cidr': str,
            'node_ipv4_cidr_block': str,
            'pod_cidr_overprovision_config': PodCIDROverprovisionConfig,
            'services_ipv4_cidr': str,
            'services_ipv4_cidr_block': str,
            'services_ipv6_cidr_block': str,
            'services_secondary_range_name': str,
            'stack_type': str,
            'subnet_ipv6_cidr_block': str,
            'subnetwork_name': str,
            'tpu_ipv4_cidr_block': str,
            'use_ip_aliases': bool,
            'use_routes': bool
        }

        self.attribute_map = {
            'additional_pod_ranges_config': 'additionalPodRangesConfig',
            'allow_route_overlap': 'allowRouteOverlap',
            'cluster_ipv4_cidr': 'clusterIpv4Cidr',
            'cluster_ipv4_cidr_block': 'clusterIpv4CidrBlock',
            'cluster_secondary_range_name': 'clusterSecondaryRangeName',
            'create_subnetwork': 'createSubnetwork',
            'default_pod_ipv4_range_utilization': 'defaultPodIpv4RangeUtilization',
            'ipv6_access_type': 'ipv6AccessType',
            'node_ipv4_cidr': 'nodeIpv4Cidr',
            'node_ipv4_cidr_block': 'nodeIpv4CidrBlock',
            'pod_cidr_overprovision_config': 'podCidrOverprovisionConfig',
            'services_ipv4_cidr': 'servicesIpv4Cidr',
            'services_ipv4_cidr_block': 'servicesIpv4CidrBlock',
            'services_ipv6_cidr_block': 'servicesIpv6CidrBlock',
            'services_secondary_range_name': 'servicesSecondaryRangeName',
            'stack_type': 'stackType',
            'subnet_ipv6_cidr_block': 'subnetIpv6CidrBlock',
            'subnetwork_name': 'subnetworkName',
            'tpu_ipv4_cidr_block': 'tpuIpv4CidrBlock',
            'use_ip_aliases': 'useIpAliases',
            'use_routes': 'useRoutes'
        }

        self._additional_pod_ranges_config = additional_pod_ranges_config
        self._allow_route_overlap = allow_route_overlap
        self._cluster_ipv4_cidr = cluster_ipv4_cidr
        self._cluster_ipv4_cidr_block = cluster_ipv4_cidr_block
        self._cluster_secondary_range_name = cluster_secondary_range_name
        self._create_subnetwork = create_subnetwork
        self._default_pod_ipv4_range_utilization = default_pod_ipv4_range_utilization
        self._ipv6_access_type = ipv6_access_type
        self._node_ipv4_cidr = node_ipv4_cidr
        self._node_ipv4_cidr_block = node_ipv4_cidr_block
        self._pod_cidr_overprovision_config = pod_cidr_overprovision_config
        self._services_ipv4_cidr = services_ipv4_cidr
        self._services_ipv4_cidr_block = services_ipv4_cidr_block
        self._services_ipv6_cidr_block = services_ipv6_cidr_block
        self._services_secondary_range_name = services_secondary_range_name
        self._stack_type = stack_type
        self._subnet_ipv6_cidr_block = subnet_ipv6_cidr_block
        self._subnetwork_name = subnetwork_name
        self._tpu_ipv4_cidr_block = tpu_ipv4_cidr_block
        self._use_ip_aliases = use_ip_aliases
        self._use_routes = use_routes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IPAllocationPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IPAllocationPolicy of this IPAllocationPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_pod_ranges_config(self):
        """Gets the additional_pod_ranges_config of this IPAllocationPolicy.


        :return: The additional_pod_ranges_config of this IPAllocationPolicy.
        :rtype: AdditionalPodRangesConfig
        """
        return self._additional_pod_ranges_config

    @additional_pod_ranges_config.setter
    def additional_pod_ranges_config(self, additional_pod_ranges_config):
        """Sets the additional_pod_ranges_config of this IPAllocationPolicy.


        :param additional_pod_ranges_config: The additional_pod_ranges_config of this IPAllocationPolicy.
        :type additional_pod_ranges_config: AdditionalPodRangesConfig
        """

        self._additional_pod_ranges_config = additional_pod_ranges_config

    @property
    def allow_route_overlap(self):
        """Gets the allow_route_overlap of this IPAllocationPolicy.

        If true, allow allocation of cluster CIDR ranges that overlap with certain kinds of network routes. By default we do not allow cluster CIDR ranges to intersect with any user declared routes. With allow_route_overlap == true, we allow overlapping with CIDR ranges that are larger than the cluster CIDR range. If this field is set to true, then cluster and services CIDRs must be fully-specified (e.g. `10.96.0.0/14`, but not `/14`), which means: 1) When `use_ip_aliases` is true, `cluster_ipv4_cidr_block` and `services_ipv4_cidr_block` must be fully-specified. 2) When `use_ip_aliases` is false, `cluster.cluster_ipv4_cidr` muse be fully-specified.

        :return: The allow_route_overlap of this IPAllocationPolicy.
        :rtype: bool
        """
        return self._allow_route_overlap

    @allow_route_overlap.setter
    def allow_route_overlap(self, allow_route_overlap):
        """Sets the allow_route_overlap of this IPAllocationPolicy.

        If true, allow allocation of cluster CIDR ranges that overlap with certain kinds of network routes. By default we do not allow cluster CIDR ranges to intersect with any user declared routes. With allow_route_overlap == true, we allow overlapping with CIDR ranges that are larger than the cluster CIDR range. If this field is set to true, then cluster and services CIDRs must be fully-specified (e.g. `10.96.0.0/14`, but not `/14`), which means: 1) When `use_ip_aliases` is true, `cluster_ipv4_cidr_block` and `services_ipv4_cidr_block` must be fully-specified. 2) When `use_ip_aliases` is false, `cluster.cluster_ipv4_cidr` muse be fully-specified.

        :param allow_route_overlap: The allow_route_overlap of this IPAllocationPolicy.
        :type allow_route_overlap: bool
        """

        self._allow_route_overlap = allow_route_overlap

    @property
    def cluster_ipv4_cidr(self):
        """Gets the cluster_ipv4_cidr of this IPAllocationPolicy.

        This field is deprecated, use cluster_ipv4_cidr_block.

        :return: The cluster_ipv4_cidr of this IPAllocationPolicy.
        :rtype: str
        """
        return self._cluster_ipv4_cidr

    @cluster_ipv4_cidr.setter
    def cluster_ipv4_cidr(self, cluster_ipv4_cidr):
        """Sets the cluster_ipv4_cidr of this IPAllocationPolicy.

        This field is deprecated, use cluster_ipv4_cidr_block.

        :param cluster_ipv4_cidr: The cluster_ipv4_cidr of this IPAllocationPolicy.
        :type cluster_ipv4_cidr: str
        """

        self._cluster_ipv4_cidr = cluster_ipv4_cidr

    @property
    def cluster_ipv4_cidr_block(self):
        """Gets the cluster_ipv4_cidr_block of this IPAllocationPolicy.

        The IP address range for the cluster pod IPs. If this field is set, then `cluster.cluster_ipv4_cidr` must be left blank. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.

        :return: The cluster_ipv4_cidr_block of this IPAllocationPolicy.
        :rtype: str
        """
        return self._cluster_ipv4_cidr_block

    @cluster_ipv4_cidr_block.setter
    def cluster_ipv4_cidr_block(self, cluster_ipv4_cidr_block):
        """Sets the cluster_ipv4_cidr_block of this IPAllocationPolicy.

        The IP address range for the cluster pod IPs. If this field is set, then `cluster.cluster_ipv4_cidr` must be left blank. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.

        :param cluster_ipv4_cidr_block: The cluster_ipv4_cidr_block of this IPAllocationPolicy.
        :type cluster_ipv4_cidr_block: str
        """

        self._cluster_ipv4_cidr_block = cluster_ipv4_cidr_block

    @property
    def cluster_secondary_range_name(self):
        """Gets the cluster_secondary_range_name of this IPAllocationPolicy.

        The name of the secondary range to be used for the cluster CIDR block. The secondary range will be used for pod IP addresses. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases and create_subnetwork is false.

        :return: The cluster_secondary_range_name of this IPAllocationPolicy.
        :rtype: str
        """
        return self._cluster_secondary_range_name

    @cluster_secondary_range_name.setter
    def cluster_secondary_range_name(self, cluster_secondary_range_name):
        """Sets the cluster_secondary_range_name of this IPAllocationPolicy.

        The name of the secondary range to be used for the cluster CIDR block. The secondary range will be used for pod IP addresses. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases and create_subnetwork is false.

        :param cluster_secondary_range_name: The cluster_secondary_range_name of this IPAllocationPolicy.
        :type cluster_secondary_range_name: str
        """

        self._cluster_secondary_range_name = cluster_secondary_range_name

    @property
    def create_subnetwork(self):
        """Gets the create_subnetwork of this IPAllocationPolicy.

        Whether a new subnetwork will be created automatically for the cluster. This field is only applicable when `use_ip_aliases` is true.

        :return: The create_subnetwork of this IPAllocationPolicy.
        :rtype: bool
        """
        return self._create_subnetwork

    @create_subnetwork.setter
    def create_subnetwork(self, create_subnetwork):
        """Sets the create_subnetwork of this IPAllocationPolicy.

        Whether a new subnetwork will be created automatically for the cluster. This field is only applicable when `use_ip_aliases` is true.

        :param create_subnetwork: The create_subnetwork of this IPAllocationPolicy.
        :type create_subnetwork: bool
        """

        self._create_subnetwork = create_subnetwork

    @property
    def default_pod_ipv4_range_utilization(self):
        """Gets the default_pod_ipv4_range_utilization of this IPAllocationPolicy.

        Output only. [Output only] The utilization of the cluster default IPv4 range for the pod. The ratio is Usage/[Total number of IPs in the secondary range], Usage=numNodes*numZones*podIPsPerNode.

        :return: The default_pod_ipv4_range_utilization of this IPAllocationPolicy.
        :rtype: float
        """
        return self._default_pod_ipv4_range_utilization

    @default_pod_ipv4_range_utilization.setter
    def default_pod_ipv4_range_utilization(self, default_pod_ipv4_range_utilization):
        """Sets the default_pod_ipv4_range_utilization of this IPAllocationPolicy.

        Output only. [Output only] The utilization of the cluster default IPv4 range for the pod. The ratio is Usage/[Total number of IPs in the secondary range], Usage=numNodes*numZones*podIPsPerNode.

        :param default_pod_ipv4_range_utilization: The default_pod_ipv4_range_utilization of this IPAllocationPolicy.
        :type default_pod_ipv4_range_utilization: float
        """

        self._default_pod_ipv4_range_utilization = default_pod_ipv4_range_utilization

    @property
    def ipv6_access_type(self):
        """Gets the ipv6_access_type of this IPAllocationPolicy.

        The ipv6 access type (internal or external) when create_subnetwork is true

        :return: The ipv6_access_type of this IPAllocationPolicy.
        :rtype: str
        """
        return self._ipv6_access_type

    @ipv6_access_type.setter
    def ipv6_access_type(self, ipv6_access_type):
        """Sets the ipv6_access_type of this IPAllocationPolicy.

        The ipv6 access type (internal or external) when create_subnetwork is true

        :param ipv6_access_type: The ipv6_access_type of this IPAllocationPolicy.
        :type ipv6_access_type: str
        """
        allowed_values = ["IPV6_ACCESS_TYPE_UNSPECIFIED", "INTERNAL", "EXTERNAL"]  # noqa: E501
        if ipv6_access_type not in allowed_values:
            raise ValueError(
                "Invalid value for `ipv6_access_type` ({0}), must be one of {1}"
                .format(ipv6_access_type, allowed_values)
            )

        self._ipv6_access_type = ipv6_access_type

    @property
    def node_ipv4_cidr(self):
        """Gets the node_ipv4_cidr of this IPAllocationPolicy.

        This field is deprecated, use node_ipv4_cidr_block.

        :return: The node_ipv4_cidr of this IPAllocationPolicy.
        :rtype: str
        """
        return self._node_ipv4_cidr

    @node_ipv4_cidr.setter
    def node_ipv4_cidr(self, node_ipv4_cidr):
        """Sets the node_ipv4_cidr of this IPAllocationPolicy.

        This field is deprecated, use node_ipv4_cidr_block.

        :param node_ipv4_cidr: The node_ipv4_cidr of this IPAllocationPolicy.
        :type node_ipv4_cidr: str
        """

        self._node_ipv4_cidr = node_ipv4_cidr

    @property
    def node_ipv4_cidr_block(self):
        """Gets the node_ipv4_cidr_block of this IPAllocationPolicy.

        The IP address range of the instance IPs in this cluster. This is applicable only if `create_subnetwork` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.

        :return: The node_ipv4_cidr_block of this IPAllocationPolicy.
        :rtype: str
        """
        return self._node_ipv4_cidr_block

    @node_ipv4_cidr_block.setter
    def node_ipv4_cidr_block(self, node_ipv4_cidr_block):
        """Sets the node_ipv4_cidr_block of this IPAllocationPolicy.

        The IP address range of the instance IPs in this cluster. This is applicable only if `create_subnetwork` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.

        :param node_ipv4_cidr_block: The node_ipv4_cidr_block of this IPAllocationPolicy.
        :type node_ipv4_cidr_block: str
        """

        self._node_ipv4_cidr_block = node_ipv4_cidr_block

    @property
    def pod_cidr_overprovision_config(self):
        """Gets the pod_cidr_overprovision_config of this IPAllocationPolicy.


        :return: The pod_cidr_overprovision_config of this IPAllocationPolicy.
        :rtype: PodCIDROverprovisionConfig
        """
        return self._pod_cidr_overprovision_config

    @pod_cidr_overprovision_config.setter
    def pod_cidr_overprovision_config(self, pod_cidr_overprovision_config):
        """Sets the pod_cidr_overprovision_config of this IPAllocationPolicy.


        :param pod_cidr_overprovision_config: The pod_cidr_overprovision_config of this IPAllocationPolicy.
        :type pod_cidr_overprovision_config: PodCIDROverprovisionConfig
        """

        self._pod_cidr_overprovision_config = pod_cidr_overprovision_config

    @property
    def services_ipv4_cidr(self):
        """Gets the services_ipv4_cidr of this IPAllocationPolicy.

        This field is deprecated, use services_ipv4_cidr_block.

        :return: The services_ipv4_cidr of this IPAllocationPolicy.
        :rtype: str
        """
        return self._services_ipv4_cidr

    @services_ipv4_cidr.setter
    def services_ipv4_cidr(self, services_ipv4_cidr):
        """Sets the services_ipv4_cidr of this IPAllocationPolicy.

        This field is deprecated, use services_ipv4_cidr_block.

        :param services_ipv4_cidr: The services_ipv4_cidr of this IPAllocationPolicy.
        :type services_ipv4_cidr: str
        """

        self._services_ipv4_cidr = services_ipv4_cidr

    @property
    def services_ipv4_cidr_block(self):
        """Gets the services_ipv4_cidr_block of this IPAllocationPolicy.

        The IP address range of the services IPs in this cluster. If blank, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.

        :return: The services_ipv4_cidr_block of this IPAllocationPolicy.
        :rtype: str
        """
        return self._services_ipv4_cidr_block

    @services_ipv4_cidr_block.setter
    def services_ipv4_cidr_block(self, services_ipv4_cidr_block):
        """Sets the services_ipv4_cidr_block of this IPAllocationPolicy.

        The IP address range of the services IPs in this cluster. If blank, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.

        :param services_ipv4_cidr_block: The services_ipv4_cidr_block of this IPAllocationPolicy.
        :type services_ipv4_cidr_block: str
        """

        self._services_ipv4_cidr_block = services_ipv4_cidr_block

    @property
    def services_ipv6_cidr_block(self):
        """Gets the services_ipv6_cidr_block of this IPAllocationPolicy.

        Output only. [Output only] The services IPv6 CIDR block for the cluster.

        :return: The services_ipv6_cidr_block of this IPAllocationPolicy.
        :rtype: str
        """
        return self._services_ipv6_cidr_block

    @services_ipv6_cidr_block.setter
    def services_ipv6_cidr_block(self, services_ipv6_cidr_block):
        """Sets the services_ipv6_cidr_block of this IPAllocationPolicy.

        Output only. [Output only] The services IPv6 CIDR block for the cluster.

        :param services_ipv6_cidr_block: The services_ipv6_cidr_block of this IPAllocationPolicy.
        :type services_ipv6_cidr_block: str
        """

        self._services_ipv6_cidr_block = services_ipv6_cidr_block

    @property
    def services_secondary_range_name(self):
        """Gets the services_secondary_range_name of this IPAllocationPolicy.

        The name of the secondary range to be used as for the services CIDR block. The secondary range will be used for service ClusterIPs. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases and create_subnetwork is false.

        :return: The services_secondary_range_name of this IPAllocationPolicy.
        :rtype: str
        """
        return self._services_secondary_range_name

    @services_secondary_range_name.setter
    def services_secondary_range_name(self, services_secondary_range_name):
        """Sets the services_secondary_range_name of this IPAllocationPolicy.

        The name of the secondary range to be used as for the services CIDR block. The secondary range will be used for service ClusterIPs. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases and create_subnetwork is false.

        :param services_secondary_range_name: The services_secondary_range_name of this IPAllocationPolicy.
        :type services_secondary_range_name: str
        """

        self._services_secondary_range_name = services_secondary_range_name

    @property
    def stack_type(self):
        """Gets the stack_type of this IPAllocationPolicy.

        IP stack type

        :return: The stack_type of this IPAllocationPolicy.
        :rtype: str
        """
        return self._stack_type

    @stack_type.setter
    def stack_type(self, stack_type):
        """Sets the stack_type of this IPAllocationPolicy.

        IP stack type

        :param stack_type: The stack_type of this IPAllocationPolicy.
        :type stack_type: str
        """
        allowed_values = ["STACK_TYPE_UNSPECIFIED", "IPV4", "IPV4_IPV6"]  # noqa: E501
        if stack_type not in allowed_values:
            raise ValueError(
                "Invalid value for `stack_type` ({0}), must be one of {1}"
                .format(stack_type, allowed_values)
            )

        self._stack_type = stack_type

    @property
    def subnet_ipv6_cidr_block(self):
        """Gets the subnet_ipv6_cidr_block of this IPAllocationPolicy.

        Output only. [Output only] The subnet's IPv6 CIDR block used by nodes and pods.

        :return: The subnet_ipv6_cidr_block of this IPAllocationPolicy.
        :rtype: str
        """
        return self._subnet_ipv6_cidr_block

    @subnet_ipv6_cidr_block.setter
    def subnet_ipv6_cidr_block(self, subnet_ipv6_cidr_block):
        """Sets the subnet_ipv6_cidr_block of this IPAllocationPolicy.

        Output only. [Output only] The subnet's IPv6 CIDR block used by nodes and pods.

        :param subnet_ipv6_cidr_block: The subnet_ipv6_cidr_block of this IPAllocationPolicy.
        :type subnet_ipv6_cidr_block: str
        """

        self._subnet_ipv6_cidr_block = subnet_ipv6_cidr_block

    @property
    def subnetwork_name(self):
        """Gets the subnetwork_name of this IPAllocationPolicy.

        A custom subnetwork name to be used if `create_subnetwork` is true. If this field is empty, then an automatic name will be chosen for the new subnetwork.

        :return: The subnetwork_name of this IPAllocationPolicy.
        :rtype: str
        """
        return self._subnetwork_name

    @subnetwork_name.setter
    def subnetwork_name(self, subnetwork_name):
        """Sets the subnetwork_name of this IPAllocationPolicy.

        A custom subnetwork name to be used if `create_subnetwork` is true. If this field is empty, then an automatic name will be chosen for the new subnetwork.

        :param subnetwork_name: The subnetwork_name of this IPAllocationPolicy.
        :type subnetwork_name: str
        """

        self._subnetwork_name = subnetwork_name

    @property
    def tpu_ipv4_cidr_block(self):
        """Gets the tpu_ipv4_cidr_block of this IPAllocationPolicy.

        The IP address range of the Cloud TPUs in this cluster. If unspecified, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. If unspecified, the range will use the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use. This field is deprecated, use cluster.tpu_config.ipv4_cidr_block instead.

        :return: The tpu_ipv4_cidr_block of this IPAllocationPolicy.
        :rtype: str
        """
        return self._tpu_ipv4_cidr_block

    @tpu_ipv4_cidr_block.setter
    def tpu_ipv4_cidr_block(self, tpu_ipv4_cidr_block):
        """Sets the tpu_ipv4_cidr_block of this IPAllocationPolicy.

        The IP address range of the Cloud TPUs in this cluster. If unspecified, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. If unspecified, the range will use the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use. This field is deprecated, use cluster.tpu_config.ipv4_cidr_block instead.

        :param tpu_ipv4_cidr_block: The tpu_ipv4_cidr_block of this IPAllocationPolicy.
        :type tpu_ipv4_cidr_block: str
        """

        self._tpu_ipv4_cidr_block = tpu_ipv4_cidr_block

    @property
    def use_ip_aliases(self):
        """Gets the use_ip_aliases of this IPAllocationPolicy.

        Whether alias IPs will be used for pod IPs in the cluster. This is used in conjunction with use_routes. It cannot be true if use_routes is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode

        :return: The use_ip_aliases of this IPAllocationPolicy.
        :rtype: bool
        """
        return self._use_ip_aliases

    @use_ip_aliases.setter
    def use_ip_aliases(self, use_ip_aliases):
        """Sets the use_ip_aliases of this IPAllocationPolicy.

        Whether alias IPs will be used for pod IPs in the cluster. This is used in conjunction with use_routes. It cannot be true if use_routes is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode

        :param use_ip_aliases: The use_ip_aliases of this IPAllocationPolicy.
        :type use_ip_aliases: bool
        """

        self._use_ip_aliases = use_ip_aliases

    @property
    def use_routes(self):
        """Gets the use_routes of this IPAllocationPolicy.

        Whether routes will be used for pod IPs in the cluster. This is used in conjunction with use_ip_aliases. It cannot be true if use_ip_aliases is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode

        :return: The use_routes of this IPAllocationPolicy.
        :rtype: bool
        """
        return self._use_routes

    @use_routes.setter
    def use_routes(self, use_routes):
        """Sets the use_routes of this IPAllocationPolicy.

        Whether routes will be used for pod IPs in the cluster. This is used in conjunction with use_ip_aliases. It cannot be true if use_ip_aliases is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode

        :param use_routes: The use_routes of this IPAllocationPolicy.
        :type use_routes: bool
        """

        self._use_routes = use_routes
