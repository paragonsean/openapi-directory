# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StatusCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, canonical_code: str=None, code: str=None, message: str=None):
        """StatusCondition - a model defined in OpenAPI

        :param canonical_code: The canonical_code of this StatusCondition.
        :param code: The code of this StatusCondition.
        :param message: The message of this StatusCondition.
        """
        self.openapi_types = {
            'canonical_code': str,
            'code': str,
            'message': str
        }

        self.attribute_map = {
            'canonical_code': 'canonicalCode',
            'code': 'code',
            'message': 'message'
        }

        self._canonical_code = canonical_code
        self._code = code
        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StatusCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StatusCondition of this StatusCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def canonical_code(self):
        """Gets the canonical_code of this StatusCondition.

        Canonical code of the condition.

        :return: The canonical_code of this StatusCondition.
        :rtype: str
        """
        return self._canonical_code

    @canonical_code.setter
    def canonical_code(self, canonical_code):
        """Sets the canonical_code of this StatusCondition.

        Canonical code of the condition.

        :param canonical_code: The canonical_code of this StatusCondition.
        :type canonical_code: str
        """
        allowed_values = ["OK", "CANCELLED", "UNKNOWN", "INVALID_ARGUMENT", "DEADLINE_EXCEEDED", "NOT_FOUND", "ALREADY_EXISTS", "PERMISSION_DENIED", "UNAUTHENTICATED", "RESOURCE_EXHAUSTED", "FAILED_PRECONDITION", "ABORTED", "OUT_OF_RANGE", "UNIMPLEMENTED", "INTERNAL", "UNAVAILABLE", "DATA_LOSS"]  # noqa: E501
        if canonical_code not in allowed_values:
            raise ValueError(
                "Invalid value for `canonical_code` ({0}), must be one of {1}"
                .format(canonical_code, allowed_values)
            )

        self._canonical_code = canonical_code

    @property
    def code(self):
        """Gets the code of this StatusCondition.

        Machine-friendly representation of the condition Deprecated. Use canonical_code instead.

        :return: The code of this StatusCondition.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this StatusCondition.

        Machine-friendly representation of the condition Deprecated. Use canonical_code instead.

        :param code: The code of this StatusCondition.
        :type code: str
        """
        allowed_values = ["UNKNOWN", "GCE_STOCKOUT", "GKE_SERVICE_ACCOUNT_DELETED", "GCE_QUOTA_EXCEEDED", "SET_BY_OPERATOR", "CLOUD_KMS_KEY_ERROR", "CA_EXPIRING"]  # noqa: E501
        if code not in allowed_values:
            raise ValueError(
                "Invalid value for `code` ({0}), must be one of {1}"
                .format(code, allowed_values)
            )

        self._code = code

    @property
    def message(self):
        """Gets the message of this StatusCondition.

        Human-friendly representation of the condition

        :return: The message of this StatusCondition.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this StatusCondition.

        Human-friendly representation of the condition

        :param message: The message of this StatusCondition.
        :type message: str
        """

        self._message = message
