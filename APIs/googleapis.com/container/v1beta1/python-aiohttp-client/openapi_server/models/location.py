# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Location(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, recommended: bool=None, type: str=None):
        """Location - a model defined in OpenAPI

        :param name: The name of this Location.
        :param recommended: The recommended of this Location.
        :param type: The type of this Location.
        """
        self.openapi_types = {
            'name': str,
            'recommended': bool,
            'type': str
        }

        self.attribute_map = {
            'name': 'name',
            'recommended': 'recommended',
            'type': 'type'
        }

        self._name = name
        self._recommended = recommended
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Location':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Location of this Location.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Location.

        Contains the name of the resource requested. Specified in the format `projects/*/locations/*`.

        :return: The name of this Location.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Location.

        Contains the name of the resource requested. Specified in the format `projects/*/locations/*`.

        :param name: The name of this Location.
        :type name: str
        """

        self._name = name

    @property
    def recommended(self):
        """Gets the recommended of this Location.

        Whether the location is recommended for GKE cluster scheduling.

        :return: The recommended of this Location.
        :rtype: bool
        """
        return self._recommended

    @recommended.setter
    def recommended(self, recommended):
        """Sets the recommended of this Location.

        Whether the location is recommended for GKE cluster scheduling.

        :param recommended: The recommended of this Location.
        :type recommended: bool
        """

        self._recommended = recommended

    @property
    def type(self):
        """Gets the type of this Location.

        Contains the type of location this Location is for. Regional or Zonal.

        :return: The type of this Location.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Location.

        Contains the type of location this Location is for. Regional or Zonal.

        :param type: The type of this Location.
        :type type: str
        """
        allowed_values = ["LOCATION_TYPE_UNSPECIFIED", "ZONE", "REGION"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
