# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SecondaryBootDisk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disk_image: str=None, mode: str=None):
        """SecondaryBootDisk - a model defined in OpenAPI

        :param disk_image: The disk_image of this SecondaryBootDisk.
        :param mode: The mode of this SecondaryBootDisk.
        """
        self.openapi_types = {
            'disk_image': str,
            'mode': str
        }

        self.attribute_map = {
            'disk_image': 'diskImage',
            'mode': 'mode'
        }

        self._disk_image = disk_image
        self._mode = mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SecondaryBootDisk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SecondaryBootDisk of this SecondaryBootDisk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disk_image(self):
        """Gets the disk_image of this SecondaryBootDisk.

        Fully-qualified resource ID for an existing disk image.

        :return: The disk_image of this SecondaryBootDisk.
        :rtype: str
        """
        return self._disk_image

    @disk_image.setter
    def disk_image(self, disk_image):
        """Sets the disk_image of this SecondaryBootDisk.

        Fully-qualified resource ID for an existing disk image.

        :param disk_image: The disk_image of this SecondaryBootDisk.
        :type disk_image: str
        """

        self._disk_image = disk_image

    @property
    def mode(self):
        """Gets the mode of this SecondaryBootDisk.

        Disk mode (container image cache, etc.)

        :return: The mode of this SecondaryBootDisk.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this SecondaryBootDisk.

        Disk mode (container image cache, etc.)

        :param mode: The mode of this SecondaryBootDisk.
        :type mode: str
        """
        allowed_values = ["MODE_UNSPECIFIED", "CONTAINER_IMAGE_CACHE"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode
