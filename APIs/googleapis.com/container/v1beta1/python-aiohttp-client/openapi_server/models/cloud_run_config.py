# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CloudRunConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disabled: bool=None, load_balancer_type: str=None):
        """CloudRunConfig - a model defined in OpenAPI

        :param disabled: The disabled of this CloudRunConfig.
        :param load_balancer_type: The load_balancer_type of this CloudRunConfig.
        """
        self.openapi_types = {
            'disabled': bool,
            'load_balancer_type': str
        }

        self.attribute_map = {
            'disabled': 'disabled',
            'load_balancer_type': 'loadBalancerType'
        }

        self._disabled = disabled
        self._load_balancer_type = load_balancer_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloudRunConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloudRunConfig of this CloudRunConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disabled(self):
        """Gets the disabled of this CloudRunConfig.

        Whether Cloud Run addon is enabled for this cluster.

        :return: The disabled of this CloudRunConfig.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this CloudRunConfig.

        Whether Cloud Run addon is enabled for this cluster.

        :param disabled: The disabled of this CloudRunConfig.
        :type disabled: bool
        """

        self._disabled = disabled

    @property
    def load_balancer_type(self):
        """Gets the load_balancer_type of this CloudRunConfig.

        Which load balancer type is installed for Cloud Run.

        :return: The load_balancer_type of this CloudRunConfig.
        :rtype: str
        """
        return self._load_balancer_type

    @load_balancer_type.setter
    def load_balancer_type(self, load_balancer_type):
        """Sets the load_balancer_type of this CloudRunConfig.

        Which load balancer type is installed for Cloud Run.

        :param load_balancer_type: The load_balancer_type of this CloudRunConfig.
        :type load_balancer_type: str
        """
        allowed_values = ["LOAD_BALANCER_TYPE_UNSPECIFIED", "LOAD_BALANCER_TYPE_EXTERNAL", "LOAD_BALANCER_TYPE_INTERNAL"]  # noqa: E501
        if load_balancer_type not in allowed_values:
            raise ValueError(
                "Invalid value for `load_balancer_type` ({0}), must be one of {1}"
                .format(load_balancer_type, allowed_values)
            )

        self._load_balancer_type = load_balancer_type
