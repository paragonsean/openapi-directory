# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.gcfs_config import GcfsConfig
from openapi_server.models.host_maintenance_policy import HostMaintenancePolicy
from openapi_server.models.node_pool_logging_config import NodePoolLoggingConfig
from openapi_server import util


class NodeConfigDefaults(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gcfs_config: GcfsConfig=None, host_maintenance_policy: HostMaintenancePolicy=None, logging_config: NodePoolLoggingConfig=None):
        """NodeConfigDefaults - a model defined in OpenAPI

        :param gcfs_config: The gcfs_config of this NodeConfigDefaults.
        :param host_maintenance_policy: The host_maintenance_policy of this NodeConfigDefaults.
        :param logging_config: The logging_config of this NodeConfigDefaults.
        """
        self.openapi_types = {
            'gcfs_config': GcfsConfig,
            'host_maintenance_policy': HostMaintenancePolicy,
            'logging_config': NodePoolLoggingConfig
        }

        self.attribute_map = {
            'gcfs_config': 'gcfsConfig',
            'host_maintenance_policy': 'hostMaintenancePolicy',
            'logging_config': 'loggingConfig'
        }

        self._gcfs_config = gcfs_config
        self._host_maintenance_policy = host_maintenance_policy
        self._logging_config = logging_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeConfigDefaults':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeConfigDefaults of this NodeConfigDefaults.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gcfs_config(self):
        """Gets the gcfs_config of this NodeConfigDefaults.


        :return: The gcfs_config of this NodeConfigDefaults.
        :rtype: GcfsConfig
        """
        return self._gcfs_config

    @gcfs_config.setter
    def gcfs_config(self, gcfs_config):
        """Sets the gcfs_config of this NodeConfigDefaults.


        :param gcfs_config: The gcfs_config of this NodeConfigDefaults.
        :type gcfs_config: GcfsConfig
        """

        self._gcfs_config = gcfs_config

    @property
    def host_maintenance_policy(self):
        """Gets the host_maintenance_policy of this NodeConfigDefaults.


        :return: The host_maintenance_policy of this NodeConfigDefaults.
        :rtype: HostMaintenancePolicy
        """
        return self._host_maintenance_policy

    @host_maintenance_policy.setter
    def host_maintenance_policy(self, host_maintenance_policy):
        """Sets the host_maintenance_policy of this NodeConfigDefaults.


        :param host_maintenance_policy: The host_maintenance_policy of this NodeConfigDefaults.
        :type host_maintenance_policy: HostMaintenancePolicy
        """

        self._host_maintenance_policy = host_maintenance_policy

    @property
    def logging_config(self):
        """Gets the logging_config of this NodeConfigDefaults.


        :return: The logging_config of this NodeConfigDefaults.
        :rtype: NodePoolLoggingConfig
        """
        return self._logging_config

    @logging_config.setter
    def logging_config(self, logging_config):
        """Sets the logging_config of this NodeConfigDefaults.


        :param logging_config: The logging_config of this NodeConfigDefaults.
        :type logging_config: NodePoolLoggingConfig
        """

        self._logging_config = logging_config
