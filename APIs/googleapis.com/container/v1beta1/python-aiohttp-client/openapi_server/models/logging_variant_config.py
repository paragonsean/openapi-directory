# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LoggingVariantConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, variant: str=None):
        """LoggingVariantConfig - a model defined in OpenAPI

        :param variant: The variant of this LoggingVariantConfig.
        """
        self.openapi_types = {
            'variant': str
        }

        self.attribute_map = {
            'variant': 'variant'
        }

        self._variant = variant

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoggingVariantConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoggingVariantConfig of this LoggingVariantConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def variant(self):
        """Gets the variant of this LoggingVariantConfig.

        Logging variant deployed on nodes.

        :return: The variant of this LoggingVariantConfig.
        :rtype: str
        """
        return self._variant

    @variant.setter
    def variant(self, variant):
        """Sets the variant of this LoggingVariantConfig.

        Logging variant deployed on nodes.

        :param variant: The variant of this LoggingVariantConfig.
        :type variant: str
        """
        allowed_values = ["VARIANT_UNSPECIFIED", "DEFAULT", "MAX_THROUGHPUT"]  # noqa: E501
        if variant not in allowed_values:
            raise ValueError(
                "Invalid value for `variant` ({0}), must be one of {1}"
                .format(variant, allowed_values)
            )

        self._variant = variant
