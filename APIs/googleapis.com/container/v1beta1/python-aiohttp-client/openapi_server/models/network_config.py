# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cluster_network_performance_config import ClusterNetworkPerformanceConfig
from openapi_server.models.dns_config import DNSConfig
from openapi_server.models.default_snat_status import DefaultSnatStatus
from openapi_server.models.gateway_api_config import GatewayAPIConfig
from openapi_server.models.service_external_ips_config import ServiceExternalIPsConfig
from openapi_server import util


class NetworkConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, datapath_provider: str=None, default_snat_status: DefaultSnatStatus=None, dns_config: DNSConfig=None, enable_fqdn_network_policy: bool=None, enable_intra_node_visibility: bool=None, enable_l4ilb_subsetting: bool=None, enable_multi_networking: bool=None, gateway_api_config: GatewayAPIConfig=None, in_transit_encryption_config: str=None, network: str=None, network_performance_config: ClusterNetworkPerformanceConfig=None, private_ipv6_google_access: str=None, service_external_ips_config: ServiceExternalIPsConfig=None, subnetwork: str=None):
        """NetworkConfig - a model defined in OpenAPI

        :param datapath_provider: The datapath_provider of this NetworkConfig.
        :param default_snat_status: The default_snat_status of this NetworkConfig.
        :param dns_config: The dns_config of this NetworkConfig.
        :param enable_fqdn_network_policy: The enable_fqdn_network_policy of this NetworkConfig.
        :param enable_intra_node_visibility: The enable_intra_node_visibility of this NetworkConfig.
        :param enable_l4ilb_subsetting: The enable_l4ilb_subsetting of this NetworkConfig.
        :param enable_multi_networking: The enable_multi_networking of this NetworkConfig.
        :param gateway_api_config: The gateway_api_config of this NetworkConfig.
        :param in_transit_encryption_config: The in_transit_encryption_config of this NetworkConfig.
        :param network: The network of this NetworkConfig.
        :param network_performance_config: The network_performance_config of this NetworkConfig.
        :param private_ipv6_google_access: The private_ipv6_google_access of this NetworkConfig.
        :param service_external_ips_config: The service_external_ips_config of this NetworkConfig.
        :param subnetwork: The subnetwork of this NetworkConfig.
        """
        self.openapi_types = {
            'datapath_provider': str,
            'default_snat_status': DefaultSnatStatus,
            'dns_config': DNSConfig,
            'enable_fqdn_network_policy': bool,
            'enable_intra_node_visibility': bool,
            'enable_l4ilb_subsetting': bool,
            'enable_multi_networking': bool,
            'gateway_api_config': GatewayAPIConfig,
            'in_transit_encryption_config': str,
            'network': str,
            'network_performance_config': ClusterNetworkPerformanceConfig,
            'private_ipv6_google_access': str,
            'service_external_ips_config': ServiceExternalIPsConfig,
            'subnetwork': str
        }

        self.attribute_map = {
            'datapath_provider': 'datapathProvider',
            'default_snat_status': 'defaultSnatStatus',
            'dns_config': 'dnsConfig',
            'enable_fqdn_network_policy': 'enableFqdnNetworkPolicy',
            'enable_intra_node_visibility': 'enableIntraNodeVisibility',
            'enable_l4ilb_subsetting': 'enableL4ilbSubsetting',
            'enable_multi_networking': 'enableMultiNetworking',
            'gateway_api_config': 'gatewayApiConfig',
            'in_transit_encryption_config': 'inTransitEncryptionConfig',
            'network': 'network',
            'network_performance_config': 'networkPerformanceConfig',
            'private_ipv6_google_access': 'privateIpv6GoogleAccess',
            'service_external_ips_config': 'serviceExternalIpsConfig',
            'subnetwork': 'subnetwork'
        }

        self._datapath_provider = datapath_provider
        self._default_snat_status = default_snat_status
        self._dns_config = dns_config
        self._enable_fqdn_network_policy = enable_fqdn_network_policy
        self._enable_intra_node_visibility = enable_intra_node_visibility
        self._enable_l4ilb_subsetting = enable_l4ilb_subsetting
        self._enable_multi_networking = enable_multi_networking
        self._gateway_api_config = gateway_api_config
        self._in_transit_encryption_config = in_transit_encryption_config
        self._network = network
        self._network_performance_config = network_performance_config
        self._private_ipv6_google_access = private_ipv6_google_access
        self._service_external_ips_config = service_external_ips_config
        self._subnetwork = subnetwork

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkConfig of this NetworkConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def datapath_provider(self):
        """Gets the datapath_provider of this NetworkConfig.

        The desired datapath provider for this cluster. By default, uses the IPTables-based kube-proxy implementation.

        :return: The datapath_provider of this NetworkConfig.
        :rtype: str
        """
        return self._datapath_provider

    @datapath_provider.setter
    def datapath_provider(self, datapath_provider):
        """Sets the datapath_provider of this NetworkConfig.

        The desired datapath provider for this cluster. By default, uses the IPTables-based kube-proxy implementation.

        :param datapath_provider: The datapath_provider of this NetworkConfig.
        :type datapath_provider: str
        """
        allowed_values = ["DATAPATH_PROVIDER_UNSPECIFIED", "LEGACY_DATAPATH", "ADVANCED_DATAPATH"]  # noqa: E501
        if datapath_provider not in allowed_values:
            raise ValueError(
                "Invalid value for `datapath_provider` ({0}), must be one of {1}"
                .format(datapath_provider, allowed_values)
            )

        self._datapath_provider = datapath_provider

    @property
    def default_snat_status(self):
        """Gets the default_snat_status of this NetworkConfig.


        :return: The default_snat_status of this NetworkConfig.
        :rtype: DefaultSnatStatus
        """
        return self._default_snat_status

    @default_snat_status.setter
    def default_snat_status(self, default_snat_status):
        """Sets the default_snat_status of this NetworkConfig.


        :param default_snat_status: The default_snat_status of this NetworkConfig.
        :type default_snat_status: DefaultSnatStatus
        """

        self._default_snat_status = default_snat_status

    @property
    def dns_config(self):
        """Gets the dns_config of this NetworkConfig.


        :return: The dns_config of this NetworkConfig.
        :rtype: DNSConfig
        """
        return self._dns_config

    @dns_config.setter
    def dns_config(self, dns_config):
        """Sets the dns_config of this NetworkConfig.


        :param dns_config: The dns_config of this NetworkConfig.
        :type dns_config: DNSConfig
        """

        self._dns_config = dns_config

    @property
    def enable_fqdn_network_policy(self):
        """Gets the enable_fqdn_network_policy of this NetworkConfig.

        Whether FQDN Network Policy is enabled on this cluster.

        :return: The enable_fqdn_network_policy of this NetworkConfig.
        :rtype: bool
        """
        return self._enable_fqdn_network_policy

    @enable_fqdn_network_policy.setter
    def enable_fqdn_network_policy(self, enable_fqdn_network_policy):
        """Sets the enable_fqdn_network_policy of this NetworkConfig.

        Whether FQDN Network Policy is enabled on this cluster.

        :param enable_fqdn_network_policy: The enable_fqdn_network_policy of this NetworkConfig.
        :type enable_fqdn_network_policy: bool
        """

        self._enable_fqdn_network_policy = enable_fqdn_network_policy

    @property
    def enable_intra_node_visibility(self):
        """Gets the enable_intra_node_visibility of this NetworkConfig.

        Whether Intra-node visibility is enabled for this cluster. This makes same node pod to pod traffic visible for VPC network.

        :return: The enable_intra_node_visibility of this NetworkConfig.
        :rtype: bool
        """
        return self._enable_intra_node_visibility

    @enable_intra_node_visibility.setter
    def enable_intra_node_visibility(self, enable_intra_node_visibility):
        """Sets the enable_intra_node_visibility of this NetworkConfig.

        Whether Intra-node visibility is enabled for this cluster. This makes same node pod to pod traffic visible for VPC network.

        :param enable_intra_node_visibility: The enable_intra_node_visibility of this NetworkConfig.
        :type enable_intra_node_visibility: bool
        """

        self._enable_intra_node_visibility = enable_intra_node_visibility

    @property
    def enable_l4ilb_subsetting(self):
        """Gets the enable_l4ilb_subsetting of this NetworkConfig.

        Whether L4ILB Subsetting is enabled for this cluster.

        :return: The enable_l4ilb_subsetting of this NetworkConfig.
        :rtype: bool
        """
        return self._enable_l4ilb_subsetting

    @enable_l4ilb_subsetting.setter
    def enable_l4ilb_subsetting(self, enable_l4ilb_subsetting):
        """Sets the enable_l4ilb_subsetting of this NetworkConfig.

        Whether L4ILB Subsetting is enabled for this cluster.

        :param enable_l4ilb_subsetting: The enable_l4ilb_subsetting of this NetworkConfig.
        :type enable_l4ilb_subsetting: bool
        """

        self._enable_l4ilb_subsetting = enable_l4ilb_subsetting

    @property
    def enable_multi_networking(self):
        """Gets the enable_multi_networking of this NetworkConfig.

        Whether multi-networking is enabled for this cluster.

        :return: The enable_multi_networking of this NetworkConfig.
        :rtype: bool
        """
        return self._enable_multi_networking

    @enable_multi_networking.setter
    def enable_multi_networking(self, enable_multi_networking):
        """Sets the enable_multi_networking of this NetworkConfig.

        Whether multi-networking is enabled for this cluster.

        :param enable_multi_networking: The enable_multi_networking of this NetworkConfig.
        :type enable_multi_networking: bool
        """

        self._enable_multi_networking = enable_multi_networking

    @property
    def gateway_api_config(self):
        """Gets the gateway_api_config of this NetworkConfig.


        :return: The gateway_api_config of this NetworkConfig.
        :rtype: GatewayAPIConfig
        """
        return self._gateway_api_config

    @gateway_api_config.setter
    def gateway_api_config(self, gateway_api_config):
        """Sets the gateway_api_config of this NetworkConfig.


        :param gateway_api_config: The gateway_api_config of this NetworkConfig.
        :type gateway_api_config: GatewayAPIConfig
        """

        self._gateway_api_config = gateway_api_config

    @property
    def in_transit_encryption_config(self):
        """Gets the in_transit_encryption_config of this NetworkConfig.

        Specify the details of in-transit encryption.

        :return: The in_transit_encryption_config of this NetworkConfig.
        :rtype: str
        """
        return self._in_transit_encryption_config

    @in_transit_encryption_config.setter
    def in_transit_encryption_config(self, in_transit_encryption_config):
        """Sets the in_transit_encryption_config of this NetworkConfig.

        Specify the details of in-transit encryption.

        :param in_transit_encryption_config: The in_transit_encryption_config of this NetworkConfig.
        :type in_transit_encryption_config: str
        """
        allowed_values = ["IN_TRANSIT_ENCRYPTION_CONFIG_UNSPECIFIED", "IN_TRANSIT_ENCRYPTION_DISABLED", "IN_TRANSIT_ENCRYPTION_INTER_NODE_TRANSPARENT"]  # noqa: E501
        if in_transit_encryption_config not in allowed_values:
            raise ValueError(
                "Invalid value for `in_transit_encryption_config` ({0}), must be one of {1}"
                .format(in_transit_encryption_config, allowed_values)
            )

        self._in_transit_encryption_config = in_transit_encryption_config

    @property
    def network(self):
        """Gets the network of this NetworkConfig.

        Output only. The relative name of the Google Compute Engine network(https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the cluster is connected. Example: projects/my-project/global/networks/my-network

        :return: The network of this NetworkConfig.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this NetworkConfig.

        Output only. The relative name of the Google Compute Engine network(https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the cluster is connected. Example: projects/my-project/global/networks/my-network

        :param network: The network of this NetworkConfig.
        :type network: str
        """

        self._network = network

    @property
    def network_performance_config(self):
        """Gets the network_performance_config of this NetworkConfig.


        :return: The network_performance_config of this NetworkConfig.
        :rtype: ClusterNetworkPerformanceConfig
        """
        return self._network_performance_config

    @network_performance_config.setter
    def network_performance_config(self, network_performance_config):
        """Sets the network_performance_config of this NetworkConfig.


        :param network_performance_config: The network_performance_config of this NetworkConfig.
        :type network_performance_config: ClusterNetworkPerformanceConfig
        """

        self._network_performance_config = network_performance_config

    @property
    def private_ipv6_google_access(self):
        """Gets the private_ipv6_google_access of this NetworkConfig.

        The desired state of IPv6 connectivity to Google Services. By default, no private IPv6 access to or from Google Services (all access will be via IPv4)

        :return: The private_ipv6_google_access of this NetworkConfig.
        :rtype: str
        """
        return self._private_ipv6_google_access

    @private_ipv6_google_access.setter
    def private_ipv6_google_access(self, private_ipv6_google_access):
        """Sets the private_ipv6_google_access of this NetworkConfig.

        The desired state of IPv6 connectivity to Google Services. By default, no private IPv6 access to or from Google Services (all access will be via IPv4)

        :param private_ipv6_google_access: The private_ipv6_google_access of this NetworkConfig.
        :type private_ipv6_google_access: str
        """
        allowed_values = ["PRIVATE_IPV6_GOOGLE_ACCESS_UNSPECIFIED", "PRIVATE_IPV6_GOOGLE_ACCESS_DISABLED", "PRIVATE_IPV6_GOOGLE_ACCESS_TO_GOOGLE", "PRIVATE_IPV6_GOOGLE_ACCESS_BIDIRECTIONAL"]  # noqa: E501
        if private_ipv6_google_access not in allowed_values:
            raise ValueError(
                "Invalid value for `private_ipv6_google_access` ({0}), must be one of {1}"
                .format(private_ipv6_google_access, allowed_values)
            )

        self._private_ipv6_google_access = private_ipv6_google_access

    @property
    def service_external_ips_config(self):
        """Gets the service_external_ips_config of this NetworkConfig.


        :return: The service_external_ips_config of this NetworkConfig.
        :rtype: ServiceExternalIPsConfig
        """
        return self._service_external_ips_config

    @service_external_ips_config.setter
    def service_external_ips_config(self, service_external_ips_config):
        """Sets the service_external_ips_config of this NetworkConfig.


        :param service_external_ips_config: The service_external_ips_config of this NetworkConfig.
        :type service_external_ips_config: ServiceExternalIPsConfig
        """

        self._service_external_ips_config = service_external_ips_config

    @property
    def subnetwork(self):
        """Gets the subnetwork of this NetworkConfig.

        Output only. The relative name of the Google Compute Engine [subnetwork](https://cloud.google.com/compute/docs/vpc) to which the cluster is connected. Example: projects/my-project/regions/us-central1/subnetworks/my-subnet

        :return: The subnetwork of this NetworkConfig.
        :rtype: str
        """
        return self._subnetwork

    @subnetwork.setter
    def subnetwork(self, subnetwork):
        """Sets the subnetwork of this NetworkConfig.

        Output only. The relative name of the Google Compute Engine [subnetwork](https://cloud.google.com/compute/docs/vpc) to which the cluster is connected. Example: projects/my-project/regions/us-central1/subnetworks/my-subnet

        :param subnetwork: The subnetwork of this NetworkConfig.
        :type subnetwork: str
        """

        self._subnetwork = subnetwork
