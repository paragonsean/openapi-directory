# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.time_window import TimeWindow
from openapi_server import util


class RecurringTimeWindow(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, recurrence: str=None, window: TimeWindow=None):
        """RecurringTimeWindow - a model defined in OpenAPI

        :param recurrence: The recurrence of this RecurringTimeWindow.
        :param window: The window of this RecurringTimeWindow.
        """
        self.openapi_types = {
            'recurrence': str,
            'window': TimeWindow
        }

        self.attribute_map = {
            'recurrence': 'recurrence',
            'window': 'window'
        }

        self._recurrence = recurrence
        self._window = window

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecurringTimeWindow':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RecurringTimeWindow of this RecurringTimeWindow.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def recurrence(self):
        """Gets the recurrence of this RecurringTimeWindow.

        An RRULE (https://tools.ietf.org/html/rfc5545#section-3.8.5.3) for how this window reccurs. They go on for the span of time between the start and end time. For example, to have something repeat every weekday, you'd use: `FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR` To repeat some window daily (equivalent to the DailyMaintenanceWindow): `FREQ=DAILY` For the first weekend of every month: `FREQ=MONTHLY;BYSETPOS=1;BYDAY=SA,SU` This specifies how frequently the window starts. Eg, if you wanted to have a 9-5 UTC-4 window every weekday, you'd use something like: ``` start time = 2019-01-01T09:00:00-0400 end time = 2019-01-01T17:00:00-0400 recurrence = FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR ``` Windows can span multiple days. Eg, to make the window encompass every weekend from midnight Saturday till the last minute of Sunday UTC: ``` start time = 2019-01-05T00:00:00Z end time = 2019-01-07T23:59:00Z recurrence = FREQ=WEEKLY;BYDAY=SA ``` Note the start and end time's specific dates are largely arbitrary except to specify duration of the window and when it first starts. The FREQ values of HOURLY, MINUTELY, and SECONDLY are not supported.

        :return: The recurrence of this RecurringTimeWindow.
        :rtype: str
        """
        return self._recurrence

    @recurrence.setter
    def recurrence(self, recurrence):
        """Sets the recurrence of this RecurringTimeWindow.

        An RRULE (https://tools.ietf.org/html/rfc5545#section-3.8.5.3) for how this window reccurs. They go on for the span of time between the start and end time. For example, to have something repeat every weekday, you'd use: `FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR` To repeat some window daily (equivalent to the DailyMaintenanceWindow): `FREQ=DAILY` For the first weekend of every month: `FREQ=MONTHLY;BYSETPOS=1;BYDAY=SA,SU` This specifies how frequently the window starts. Eg, if you wanted to have a 9-5 UTC-4 window every weekday, you'd use something like: ``` start time = 2019-01-01T09:00:00-0400 end time = 2019-01-01T17:00:00-0400 recurrence = FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR ``` Windows can span multiple days. Eg, to make the window encompass every weekend from midnight Saturday till the last minute of Sunday UTC: ``` start time = 2019-01-05T00:00:00Z end time = 2019-01-07T23:59:00Z recurrence = FREQ=WEEKLY;BYDAY=SA ``` Note the start and end time's specific dates are largely arbitrary except to specify duration of the window and when it first starts. The FREQ values of HOURLY, MINUTELY, and SECONDLY are not supported.

        :param recurrence: The recurrence of this RecurringTimeWindow.
        :type recurrence: str
        """

        self._recurrence = recurrence

    @property
    def window(self):
        """Gets the window of this RecurringTimeWindow.


        :return: The window of this RecurringTimeWindow.
        :rtype: TimeWindow
        """
        return self._window

    @window.setter
    def window(self, window):
        """Sets the window of this RecurringTimeWindow.


        :param window: The window of this RecurringTimeWindow.
        :type window: TimeWindow
        """

        self._window = window
