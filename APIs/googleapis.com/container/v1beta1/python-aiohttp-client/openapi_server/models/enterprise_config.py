# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnterpriseConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_tier: str=None):
        """EnterpriseConfig - a model defined in OpenAPI

        :param cluster_tier: The cluster_tier of this EnterpriseConfig.
        """
        self.openapi_types = {
            'cluster_tier': str
        }

        self.attribute_map = {
            'cluster_tier': 'clusterTier'
        }

        self._cluster_tier = cluster_tier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnterpriseConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnterpriseConfig of this EnterpriseConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_tier(self):
        """Gets the cluster_tier of this EnterpriseConfig.

        Output only. [Output only] cluster_tier specifies the premium tier of the cluster.

        :return: The cluster_tier of this EnterpriseConfig.
        :rtype: str
        """
        return self._cluster_tier

    @cluster_tier.setter
    def cluster_tier(self, cluster_tier):
        """Sets the cluster_tier of this EnterpriseConfig.

        Output only. [Output only] cluster_tier specifies the premium tier of the cluster.

        :param cluster_tier: The cluster_tier of this EnterpriseConfig.
        :type cluster_tier: str
        """
        allowed_values = ["CLUSTER_TIER_UNSPECIFIED", "STANDARD", "ENTERPRISE"]  # noqa: E501
        if cluster_tier not in allowed_values:
            raise ValueError(
                "Invalid value for `cluster_tier` ({0}), must be one of {1}"
                .format(cluster_tier, allowed_values)
            )

        self._cluster_tier = cluster_tier
