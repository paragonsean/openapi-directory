# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.confidential_nodes import ConfidentialNodes
from openapi_server.models.fast_socket import FastSocket
from openapi_server.models.gcfs_config import GcfsConfig
from openapi_server.models.linux_node_config import LinuxNodeConfig
from openapi_server.models.network_tags import NetworkTags
from openapi_server.models.node_kubelet_config import NodeKubeletConfig
from openapi_server.models.node_labels import NodeLabels
from openapi_server.models.node_network_config import NodeNetworkConfig
from openapi_server.models.node_pool_logging_config import NodePoolLoggingConfig
from openapi_server.models.node_taints import NodeTaints
from openapi_server.models.queued_provisioning import QueuedProvisioning
from openapi_server.models.resource_labels import ResourceLabels
from openapi_server.models.resource_manager_tags import ResourceManagerTags
from openapi_server.models.upgrade_settings import UpgradeSettings
from openapi_server.models.virtual_nic import VirtualNIC
from openapi_server.models.windows_node_config import WindowsNodeConfig
from openapi_server.models.workload_metadata_config import WorkloadMetadataConfig
from openapi_server import util


class UpdateNodePoolRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_id: str=None, confidential_nodes: ConfidentialNodes=None, disk_size_gb: str=None, disk_type: str=None, etag: str=None, fast_socket: FastSocket=None, gcfs_config: GcfsConfig=None, gvnic: VirtualNIC=None, image_type: str=None, kubelet_config: NodeKubeletConfig=None, labels: NodeLabels=None, linux_node_config: LinuxNodeConfig=None, locations: List[str]=None, logging_config: NodePoolLoggingConfig=None, machine_type: str=None, name: str=None, node_network_config: NodeNetworkConfig=None, node_pool_id: str=None, node_version: str=None, project_id: str=None, queued_provisioning: QueuedProvisioning=None, resource_labels: ResourceLabels=None, resource_manager_tags: ResourceManagerTags=None, tags: NetworkTags=None, taints: NodeTaints=None, upgrade_settings: UpgradeSettings=None, windows_node_config: WindowsNodeConfig=None, workload_metadata_config: WorkloadMetadataConfig=None, zone: str=None):
        """UpdateNodePoolRequest - a model defined in OpenAPI

        :param cluster_id: The cluster_id of this UpdateNodePoolRequest.
        :param confidential_nodes: The confidential_nodes of this UpdateNodePoolRequest.
        :param disk_size_gb: The disk_size_gb of this UpdateNodePoolRequest.
        :param disk_type: The disk_type of this UpdateNodePoolRequest.
        :param etag: The etag of this UpdateNodePoolRequest.
        :param fast_socket: The fast_socket of this UpdateNodePoolRequest.
        :param gcfs_config: The gcfs_config of this UpdateNodePoolRequest.
        :param gvnic: The gvnic of this UpdateNodePoolRequest.
        :param image_type: The image_type of this UpdateNodePoolRequest.
        :param kubelet_config: The kubelet_config of this UpdateNodePoolRequest.
        :param labels: The labels of this UpdateNodePoolRequest.
        :param linux_node_config: The linux_node_config of this UpdateNodePoolRequest.
        :param locations: The locations of this UpdateNodePoolRequest.
        :param logging_config: The logging_config of this UpdateNodePoolRequest.
        :param machine_type: The machine_type of this UpdateNodePoolRequest.
        :param name: The name of this UpdateNodePoolRequest.
        :param node_network_config: The node_network_config of this UpdateNodePoolRequest.
        :param node_pool_id: The node_pool_id of this UpdateNodePoolRequest.
        :param node_version: The node_version of this UpdateNodePoolRequest.
        :param project_id: The project_id of this UpdateNodePoolRequest.
        :param queued_provisioning: The queued_provisioning of this UpdateNodePoolRequest.
        :param resource_labels: The resource_labels of this UpdateNodePoolRequest.
        :param resource_manager_tags: The resource_manager_tags of this UpdateNodePoolRequest.
        :param tags: The tags of this UpdateNodePoolRequest.
        :param taints: The taints of this UpdateNodePoolRequest.
        :param upgrade_settings: The upgrade_settings of this UpdateNodePoolRequest.
        :param windows_node_config: The windows_node_config of this UpdateNodePoolRequest.
        :param workload_metadata_config: The workload_metadata_config of this UpdateNodePoolRequest.
        :param zone: The zone of this UpdateNodePoolRequest.
        """
        self.openapi_types = {
            'cluster_id': str,
            'confidential_nodes': ConfidentialNodes,
            'disk_size_gb': str,
            'disk_type': str,
            'etag': str,
            'fast_socket': FastSocket,
            'gcfs_config': GcfsConfig,
            'gvnic': VirtualNIC,
            'image_type': str,
            'kubelet_config': NodeKubeletConfig,
            'labels': NodeLabels,
            'linux_node_config': LinuxNodeConfig,
            'locations': List[str],
            'logging_config': NodePoolLoggingConfig,
            'machine_type': str,
            'name': str,
            'node_network_config': NodeNetworkConfig,
            'node_pool_id': str,
            'node_version': str,
            'project_id': str,
            'queued_provisioning': QueuedProvisioning,
            'resource_labels': ResourceLabels,
            'resource_manager_tags': ResourceManagerTags,
            'tags': NetworkTags,
            'taints': NodeTaints,
            'upgrade_settings': UpgradeSettings,
            'windows_node_config': WindowsNodeConfig,
            'workload_metadata_config': WorkloadMetadataConfig,
            'zone': str
        }

        self.attribute_map = {
            'cluster_id': 'clusterId',
            'confidential_nodes': 'confidentialNodes',
            'disk_size_gb': 'diskSizeGb',
            'disk_type': 'diskType',
            'etag': 'etag',
            'fast_socket': 'fastSocket',
            'gcfs_config': 'gcfsConfig',
            'gvnic': 'gvnic',
            'image_type': 'imageType',
            'kubelet_config': 'kubeletConfig',
            'labels': 'labels',
            'linux_node_config': 'linuxNodeConfig',
            'locations': 'locations',
            'logging_config': 'loggingConfig',
            'machine_type': 'machineType',
            'name': 'name',
            'node_network_config': 'nodeNetworkConfig',
            'node_pool_id': 'nodePoolId',
            'node_version': 'nodeVersion',
            'project_id': 'projectId',
            'queued_provisioning': 'queuedProvisioning',
            'resource_labels': 'resourceLabels',
            'resource_manager_tags': 'resourceManagerTags',
            'tags': 'tags',
            'taints': 'taints',
            'upgrade_settings': 'upgradeSettings',
            'windows_node_config': 'windowsNodeConfig',
            'workload_metadata_config': 'workloadMetadataConfig',
            'zone': 'zone'
        }

        self._cluster_id = cluster_id
        self._confidential_nodes = confidential_nodes
        self._disk_size_gb = disk_size_gb
        self._disk_type = disk_type
        self._etag = etag
        self._fast_socket = fast_socket
        self._gcfs_config = gcfs_config
        self._gvnic = gvnic
        self._image_type = image_type
        self._kubelet_config = kubelet_config
        self._labels = labels
        self._linux_node_config = linux_node_config
        self._locations = locations
        self._logging_config = logging_config
        self._machine_type = machine_type
        self._name = name
        self._node_network_config = node_network_config
        self._node_pool_id = node_pool_id
        self._node_version = node_version
        self._project_id = project_id
        self._queued_provisioning = queued_provisioning
        self._resource_labels = resource_labels
        self._resource_manager_tags = resource_manager_tags
        self._tags = tags
        self._taints = taints
        self._upgrade_settings = upgrade_settings
        self._windows_node_config = windows_node_config
        self._workload_metadata_config = workload_metadata_config
        self._zone = zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNodePoolRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateNodePoolRequest of this UpdateNodePoolRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_id(self):
        """Gets the cluster_id of this UpdateNodePoolRequest.

        Required. Deprecated. The name of the cluster to upgrade. This field has been deprecated and replaced by the name field.

        :return: The cluster_id of this UpdateNodePoolRequest.
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this UpdateNodePoolRequest.

        Required. Deprecated. The name of the cluster to upgrade. This field has been deprecated and replaced by the name field.

        :param cluster_id: The cluster_id of this UpdateNodePoolRequest.
        :type cluster_id: str
        """

        self._cluster_id = cluster_id

    @property
    def confidential_nodes(self):
        """Gets the confidential_nodes of this UpdateNodePoolRequest.


        :return: The confidential_nodes of this UpdateNodePoolRequest.
        :rtype: ConfidentialNodes
        """
        return self._confidential_nodes

    @confidential_nodes.setter
    def confidential_nodes(self, confidential_nodes):
        """Sets the confidential_nodes of this UpdateNodePoolRequest.


        :param confidential_nodes: The confidential_nodes of this UpdateNodePoolRequest.
        :type confidential_nodes: ConfidentialNodes
        """

        self._confidential_nodes = confidential_nodes

    @property
    def disk_size_gb(self):
        """Gets the disk_size_gb of this UpdateNodePoolRequest.

        Optional. The desired disk size for nodes in the node pool. Initiates an upgrade operation that migrates the nodes in the node pool to the specified disk size.

        :return: The disk_size_gb of this UpdateNodePoolRequest.
        :rtype: str
        """
        return self._disk_size_gb

    @disk_size_gb.setter
    def disk_size_gb(self, disk_size_gb):
        """Sets the disk_size_gb of this UpdateNodePoolRequest.

        Optional. The desired disk size for nodes in the node pool. Initiates an upgrade operation that migrates the nodes in the node pool to the specified disk size.

        :param disk_size_gb: The disk_size_gb of this UpdateNodePoolRequest.
        :type disk_size_gb: str
        """

        self._disk_size_gb = disk_size_gb

    @property
    def disk_type(self):
        """Gets the disk_type of this UpdateNodePoolRequest.

        Optional. The desired disk type for nodes in the node pool. Initiates an upgrade operation that migrates the nodes in the node pool to the specified disk type.

        :return: The disk_type of this UpdateNodePoolRequest.
        :rtype: str
        """
        return self._disk_type

    @disk_type.setter
    def disk_type(self, disk_type):
        """Sets the disk_type of this UpdateNodePoolRequest.

        Optional. The desired disk type for nodes in the node pool. Initiates an upgrade operation that migrates the nodes in the node pool to the specified disk type.

        :param disk_type: The disk_type of this UpdateNodePoolRequest.
        :type disk_type: str
        """

        self._disk_type = disk_type

    @property
    def etag(self):
        """Gets the etag of this UpdateNodePoolRequest.

        The current etag of the node pool. If an etag is provided and does not match the current etag of the node pool, update will be blocked and an ABORTED error will be returned.

        :return: The etag of this UpdateNodePoolRequest.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this UpdateNodePoolRequest.

        The current etag of the node pool. If an etag is provided and does not match the current etag of the node pool, update will be blocked and an ABORTED error will be returned.

        :param etag: The etag of this UpdateNodePoolRequest.
        :type etag: str
        """

        self._etag = etag

    @property
    def fast_socket(self):
        """Gets the fast_socket of this UpdateNodePoolRequest.


        :return: The fast_socket of this UpdateNodePoolRequest.
        :rtype: FastSocket
        """
        return self._fast_socket

    @fast_socket.setter
    def fast_socket(self, fast_socket):
        """Sets the fast_socket of this UpdateNodePoolRequest.


        :param fast_socket: The fast_socket of this UpdateNodePoolRequest.
        :type fast_socket: FastSocket
        """

        self._fast_socket = fast_socket

    @property
    def gcfs_config(self):
        """Gets the gcfs_config of this UpdateNodePoolRequest.


        :return: The gcfs_config of this UpdateNodePoolRequest.
        :rtype: GcfsConfig
        """
        return self._gcfs_config

    @gcfs_config.setter
    def gcfs_config(self, gcfs_config):
        """Sets the gcfs_config of this UpdateNodePoolRequest.


        :param gcfs_config: The gcfs_config of this UpdateNodePoolRequest.
        :type gcfs_config: GcfsConfig
        """

        self._gcfs_config = gcfs_config

    @property
    def gvnic(self):
        """Gets the gvnic of this UpdateNodePoolRequest.


        :return: The gvnic of this UpdateNodePoolRequest.
        :rtype: VirtualNIC
        """
        return self._gvnic

    @gvnic.setter
    def gvnic(self, gvnic):
        """Sets the gvnic of this UpdateNodePoolRequest.


        :param gvnic: The gvnic of this UpdateNodePoolRequest.
        :type gvnic: VirtualNIC
        """

        self._gvnic = gvnic

    @property
    def image_type(self):
        """Gets the image_type of this UpdateNodePoolRequest.

        Required. The desired image type for the node pool. Please see https://cloud.google.com/kubernetes-engine/docs/concepts/node-images for available image types.

        :return: The image_type of this UpdateNodePoolRequest.
        :rtype: str
        """
        return self._image_type

    @image_type.setter
    def image_type(self, image_type):
        """Sets the image_type of this UpdateNodePoolRequest.

        Required. The desired image type for the node pool. Please see https://cloud.google.com/kubernetes-engine/docs/concepts/node-images for available image types.

        :param image_type: The image_type of this UpdateNodePoolRequest.
        :type image_type: str
        """

        self._image_type = image_type

    @property
    def kubelet_config(self):
        """Gets the kubelet_config of this UpdateNodePoolRequest.


        :return: The kubelet_config of this UpdateNodePoolRequest.
        :rtype: NodeKubeletConfig
        """
        return self._kubelet_config

    @kubelet_config.setter
    def kubelet_config(self, kubelet_config):
        """Sets the kubelet_config of this UpdateNodePoolRequest.


        :param kubelet_config: The kubelet_config of this UpdateNodePoolRequest.
        :type kubelet_config: NodeKubeletConfig
        """

        self._kubelet_config = kubelet_config

    @property
    def labels(self):
        """Gets the labels of this UpdateNodePoolRequest.


        :return: The labels of this UpdateNodePoolRequest.
        :rtype: NodeLabels
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this UpdateNodePoolRequest.


        :param labels: The labels of this UpdateNodePoolRequest.
        :type labels: NodeLabels
        """

        self._labels = labels

    @property
    def linux_node_config(self):
        """Gets the linux_node_config of this UpdateNodePoolRequest.


        :return: The linux_node_config of this UpdateNodePoolRequest.
        :rtype: LinuxNodeConfig
        """
        return self._linux_node_config

    @linux_node_config.setter
    def linux_node_config(self, linux_node_config):
        """Sets the linux_node_config of this UpdateNodePoolRequest.


        :param linux_node_config: The linux_node_config of this UpdateNodePoolRequest.
        :type linux_node_config: LinuxNodeConfig
        """

        self._linux_node_config = linux_node_config

    @property
    def locations(self):
        """Gets the locations of this UpdateNodePoolRequest.

        The desired list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the node pool's nodes should be located. Changing the locations for a node pool will result in nodes being either created or removed from the node pool, depending on whether locations are being added or removed.

        :return: The locations of this UpdateNodePoolRequest.
        :rtype: List[str]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this UpdateNodePoolRequest.

        The desired list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the node pool's nodes should be located. Changing the locations for a node pool will result in nodes being either created or removed from the node pool, depending on whether locations are being added or removed.

        :param locations: The locations of this UpdateNodePoolRequest.
        :type locations: List[str]
        """

        self._locations = locations

    @property
    def logging_config(self):
        """Gets the logging_config of this UpdateNodePoolRequest.


        :return: The logging_config of this UpdateNodePoolRequest.
        :rtype: NodePoolLoggingConfig
        """
        return self._logging_config

    @logging_config.setter
    def logging_config(self, logging_config):
        """Sets the logging_config of this UpdateNodePoolRequest.


        :param logging_config: The logging_config of this UpdateNodePoolRequest.
        :type logging_config: NodePoolLoggingConfig
        """

        self._logging_config = logging_config

    @property
    def machine_type(self):
        """Gets the machine_type of this UpdateNodePoolRequest.

        Optional. The desired machine type for nodes in the node pool. Initiates an upgrade operation that migrates the nodes in the node pool to the specified machine type.

        :return: The machine_type of this UpdateNodePoolRequest.
        :rtype: str
        """
        return self._machine_type

    @machine_type.setter
    def machine_type(self, machine_type):
        """Sets the machine_type of this UpdateNodePoolRequest.

        Optional. The desired machine type for nodes in the node pool. Initiates an upgrade operation that migrates the nodes in the node pool to the specified machine type.

        :param machine_type: The machine_type of this UpdateNodePoolRequest.
        :type machine_type: str
        """

        self._machine_type = machine_type

    @property
    def name(self):
        """Gets the name of this UpdateNodePoolRequest.

        The name (project, location, cluster, node pool) of the node pool to update. Specified in the format `projects/*/locations/*/clusters/*/nodePools/*`.

        :return: The name of this UpdateNodePoolRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateNodePoolRequest.

        The name (project, location, cluster, node pool) of the node pool to update. Specified in the format `projects/*/locations/*/clusters/*/nodePools/*`.

        :param name: The name of this UpdateNodePoolRequest.
        :type name: str
        """

        self._name = name

    @property
    def node_network_config(self):
        """Gets the node_network_config of this UpdateNodePoolRequest.


        :return: The node_network_config of this UpdateNodePoolRequest.
        :rtype: NodeNetworkConfig
        """
        return self._node_network_config

    @node_network_config.setter
    def node_network_config(self, node_network_config):
        """Sets the node_network_config of this UpdateNodePoolRequest.


        :param node_network_config: The node_network_config of this UpdateNodePoolRequest.
        :type node_network_config: NodeNetworkConfig
        """

        self._node_network_config = node_network_config

    @property
    def node_pool_id(self):
        """Gets the node_pool_id of this UpdateNodePoolRequest.

        Required. Deprecated. The name of the node pool to upgrade. This field has been deprecated and replaced by the name field.

        :return: The node_pool_id of this UpdateNodePoolRequest.
        :rtype: str
        """
        return self._node_pool_id

    @node_pool_id.setter
    def node_pool_id(self, node_pool_id):
        """Sets the node_pool_id of this UpdateNodePoolRequest.

        Required. Deprecated. The name of the node pool to upgrade. This field has been deprecated and replaced by the name field.

        :param node_pool_id: The node_pool_id of this UpdateNodePoolRequest.
        :type node_pool_id: str
        """

        self._node_pool_id = node_pool_id

    @property
    def node_version(self):
        """Gets the node_version of this UpdateNodePoolRequest.

        Required. The Kubernetes version to change the nodes to (typically an upgrade). Users may specify either explicit versions offered by Kubernetes Engine or version aliases, which have the following behavior: - \"latest\": picks the highest valid Kubernetes version - \"1.X\": picks the highest valid patch+gke.N patch in the 1.X version - \"1.X.Y\": picks the highest valid gke.N patch in the 1.X.Y version - \"1.X.Y-gke.N\": picks an explicit Kubernetes version - \"-\": picks the Kubernetes master version

        :return: The node_version of this UpdateNodePoolRequest.
        :rtype: str
        """
        return self._node_version

    @node_version.setter
    def node_version(self, node_version):
        """Sets the node_version of this UpdateNodePoolRequest.

        Required. The Kubernetes version to change the nodes to (typically an upgrade). Users may specify either explicit versions offered by Kubernetes Engine or version aliases, which have the following behavior: - \"latest\": picks the highest valid Kubernetes version - \"1.X\": picks the highest valid patch+gke.N patch in the 1.X version - \"1.X.Y\": picks the highest valid gke.N patch in the 1.X.Y version - \"1.X.Y-gke.N\": picks an explicit Kubernetes version - \"-\": picks the Kubernetes master version

        :param node_version: The node_version of this UpdateNodePoolRequest.
        :type node_version: str
        """

        self._node_version = node_version

    @property
    def project_id(self):
        """Gets the project_id of this UpdateNodePoolRequest.

        Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.

        :return: The project_id of this UpdateNodePoolRequest.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this UpdateNodePoolRequest.

        Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.

        :param project_id: The project_id of this UpdateNodePoolRequest.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def queued_provisioning(self):
        """Gets the queued_provisioning of this UpdateNodePoolRequest.


        :return: The queued_provisioning of this UpdateNodePoolRequest.
        :rtype: QueuedProvisioning
        """
        return self._queued_provisioning

    @queued_provisioning.setter
    def queued_provisioning(self, queued_provisioning):
        """Sets the queued_provisioning of this UpdateNodePoolRequest.


        :param queued_provisioning: The queued_provisioning of this UpdateNodePoolRequest.
        :type queued_provisioning: QueuedProvisioning
        """

        self._queued_provisioning = queued_provisioning

    @property
    def resource_labels(self):
        """Gets the resource_labels of this UpdateNodePoolRequest.


        :return: The resource_labels of this UpdateNodePoolRequest.
        :rtype: ResourceLabels
        """
        return self._resource_labels

    @resource_labels.setter
    def resource_labels(self, resource_labels):
        """Sets the resource_labels of this UpdateNodePoolRequest.


        :param resource_labels: The resource_labels of this UpdateNodePoolRequest.
        :type resource_labels: ResourceLabels
        """

        self._resource_labels = resource_labels

    @property
    def resource_manager_tags(self):
        """Gets the resource_manager_tags of this UpdateNodePoolRequest.


        :return: The resource_manager_tags of this UpdateNodePoolRequest.
        :rtype: ResourceManagerTags
        """
        return self._resource_manager_tags

    @resource_manager_tags.setter
    def resource_manager_tags(self, resource_manager_tags):
        """Sets the resource_manager_tags of this UpdateNodePoolRequest.


        :param resource_manager_tags: The resource_manager_tags of this UpdateNodePoolRequest.
        :type resource_manager_tags: ResourceManagerTags
        """

        self._resource_manager_tags = resource_manager_tags

    @property
    def tags(self):
        """Gets the tags of this UpdateNodePoolRequest.


        :return: The tags of this UpdateNodePoolRequest.
        :rtype: NetworkTags
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this UpdateNodePoolRequest.


        :param tags: The tags of this UpdateNodePoolRequest.
        :type tags: NetworkTags
        """

        self._tags = tags

    @property
    def taints(self):
        """Gets the taints of this UpdateNodePoolRequest.


        :return: The taints of this UpdateNodePoolRequest.
        :rtype: NodeTaints
        """
        return self._taints

    @taints.setter
    def taints(self, taints):
        """Sets the taints of this UpdateNodePoolRequest.


        :param taints: The taints of this UpdateNodePoolRequest.
        :type taints: NodeTaints
        """

        self._taints = taints

    @property
    def upgrade_settings(self):
        """Gets the upgrade_settings of this UpdateNodePoolRequest.


        :return: The upgrade_settings of this UpdateNodePoolRequest.
        :rtype: UpgradeSettings
        """
        return self._upgrade_settings

    @upgrade_settings.setter
    def upgrade_settings(self, upgrade_settings):
        """Sets the upgrade_settings of this UpdateNodePoolRequest.


        :param upgrade_settings: The upgrade_settings of this UpdateNodePoolRequest.
        :type upgrade_settings: UpgradeSettings
        """

        self._upgrade_settings = upgrade_settings

    @property
    def windows_node_config(self):
        """Gets the windows_node_config of this UpdateNodePoolRequest.


        :return: The windows_node_config of this UpdateNodePoolRequest.
        :rtype: WindowsNodeConfig
        """
        return self._windows_node_config

    @windows_node_config.setter
    def windows_node_config(self, windows_node_config):
        """Sets the windows_node_config of this UpdateNodePoolRequest.


        :param windows_node_config: The windows_node_config of this UpdateNodePoolRequest.
        :type windows_node_config: WindowsNodeConfig
        """

        self._windows_node_config = windows_node_config

    @property
    def workload_metadata_config(self):
        """Gets the workload_metadata_config of this UpdateNodePoolRequest.


        :return: The workload_metadata_config of this UpdateNodePoolRequest.
        :rtype: WorkloadMetadataConfig
        """
        return self._workload_metadata_config

    @workload_metadata_config.setter
    def workload_metadata_config(self, workload_metadata_config):
        """Sets the workload_metadata_config of this UpdateNodePoolRequest.


        :param workload_metadata_config: The workload_metadata_config of this UpdateNodePoolRequest.
        :type workload_metadata_config: WorkloadMetadataConfig
        """

        self._workload_metadata_config = workload_metadata_config

    @property
    def zone(self):
        """Gets the zone of this UpdateNodePoolRequest.

        Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.

        :return: The zone of this UpdateNodePoolRequest.
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this UpdateNodePoolRequest.

        Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.

        :param zone: The zone of this UpdateNodePoolRequest.
        :type zone: str
        """

        self._zone = zone
