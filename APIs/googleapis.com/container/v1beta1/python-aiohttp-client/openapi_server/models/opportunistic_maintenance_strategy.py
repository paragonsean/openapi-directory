# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OpportunisticMaintenanceStrategy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, maintenance_availability_window: str=None, min_nodes_per_pool: str=None, node_idle_time_window: str=None):
        """OpportunisticMaintenanceStrategy - a model defined in OpenAPI

        :param maintenance_availability_window: The maintenance_availability_window of this OpportunisticMaintenanceStrategy.
        :param min_nodes_per_pool: The min_nodes_per_pool of this OpportunisticMaintenanceStrategy.
        :param node_idle_time_window: The node_idle_time_window of this OpportunisticMaintenanceStrategy.
        """
        self.openapi_types = {
            'maintenance_availability_window': str,
            'min_nodes_per_pool': str,
            'node_idle_time_window': str
        }

        self.attribute_map = {
            'maintenance_availability_window': 'maintenanceAvailabilityWindow',
            'min_nodes_per_pool': 'minNodesPerPool',
            'node_idle_time_window': 'nodeIdleTimeWindow'
        }

        self._maintenance_availability_window = maintenance_availability_window
        self._min_nodes_per_pool = min_nodes_per_pool
        self._node_idle_time_window = node_idle_time_window

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OpportunisticMaintenanceStrategy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OpportunisticMaintenanceStrategy of this OpportunisticMaintenanceStrategy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def maintenance_availability_window(self):
        """Gets the maintenance_availability_window of this OpportunisticMaintenanceStrategy.

        The window of time that opportunistic maintenance can run. Example: A setting of 14 days implies that opportunistic maintenance can only be ran in the 2 weeks leading up to the scheduled maintenance date. Setting 28 days allows opportunistic maintenance to run at any time in the scheduled maintenance window (all `PERIODIC` maintenance is set 28 days in advance).

        :return: The maintenance_availability_window of this OpportunisticMaintenanceStrategy.
        :rtype: str
        """
        return self._maintenance_availability_window

    @maintenance_availability_window.setter
    def maintenance_availability_window(self, maintenance_availability_window):
        """Sets the maintenance_availability_window of this OpportunisticMaintenanceStrategy.

        The window of time that opportunistic maintenance can run. Example: A setting of 14 days implies that opportunistic maintenance can only be ran in the 2 weeks leading up to the scheduled maintenance date. Setting 28 days allows opportunistic maintenance to run at any time in the scheduled maintenance window (all `PERIODIC` maintenance is set 28 days in advance).

        :param maintenance_availability_window: The maintenance_availability_window of this OpportunisticMaintenanceStrategy.
        :type maintenance_availability_window: str
        """

        self._maintenance_availability_window = maintenance_availability_window

    @property
    def min_nodes_per_pool(self):
        """Gets the min_nodes_per_pool of this OpportunisticMaintenanceStrategy.

        The minimum nodes required to be available in a pool. Blocks maintenance if it would cause the number of running nodes to dip below this value.

        :return: The min_nodes_per_pool of this OpportunisticMaintenanceStrategy.
        :rtype: str
        """
        return self._min_nodes_per_pool

    @min_nodes_per_pool.setter
    def min_nodes_per_pool(self, min_nodes_per_pool):
        """Sets the min_nodes_per_pool of this OpportunisticMaintenanceStrategy.

        The minimum nodes required to be available in a pool. Blocks maintenance if it would cause the number of running nodes to dip below this value.

        :param min_nodes_per_pool: The min_nodes_per_pool of this OpportunisticMaintenanceStrategy.
        :type min_nodes_per_pool: str
        """

        self._min_nodes_per_pool = min_nodes_per_pool

    @property
    def node_idle_time_window(self):
        """Gets the node_idle_time_window of this OpportunisticMaintenanceStrategy.

        The amount of time that a node can remain idle (no customer owned workloads running), before triggering maintenance.

        :return: The node_idle_time_window of this OpportunisticMaintenanceStrategy.
        :rtype: str
        """
        return self._node_idle_time_window

    @node_idle_time_window.setter
    def node_idle_time_window(self, node_idle_time_window):
        """Sets the node_idle_time_window of this OpportunisticMaintenanceStrategy.

        The amount of time that a node can remain idle (no customer owned workloads running), before triggering maintenance.

        :param node_idle_time_window: The node_idle_time_window of this OpportunisticMaintenanceStrategy.
        :type node_idle_time_window: str
        """

        self._node_idle_time_window = node_idle_time_window
