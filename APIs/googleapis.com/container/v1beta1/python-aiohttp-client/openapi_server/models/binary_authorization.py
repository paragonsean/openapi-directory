# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.policy_binding import PolicyBinding
from openapi_server import util


class BinaryAuthorization(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, evaluation_mode: str=None, policy_bindings: List[PolicyBinding]=None):
        """BinaryAuthorization - a model defined in OpenAPI

        :param enabled: The enabled of this BinaryAuthorization.
        :param evaluation_mode: The evaluation_mode of this BinaryAuthorization.
        :param policy_bindings: The policy_bindings of this BinaryAuthorization.
        """
        self.openapi_types = {
            'enabled': bool,
            'evaluation_mode': str,
            'policy_bindings': List[PolicyBinding]
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'evaluation_mode': 'evaluationMode',
            'policy_bindings': 'policyBindings'
        }

        self._enabled = enabled
        self._evaluation_mode = evaluation_mode
        self._policy_bindings = policy_bindings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BinaryAuthorization':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BinaryAuthorization of this BinaryAuthorization.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this BinaryAuthorization.

        This field is deprecated. Leave this unset and instead configure BinaryAuthorization using evaluation_mode. If evaluation_mode is set to anything other than EVALUATION_MODE_UNSPECIFIED, this field is ignored.

        :return: The enabled of this BinaryAuthorization.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this BinaryAuthorization.

        This field is deprecated. Leave this unset and instead configure BinaryAuthorization using evaluation_mode. If evaluation_mode is set to anything other than EVALUATION_MODE_UNSPECIFIED, this field is ignored.

        :param enabled: The enabled of this BinaryAuthorization.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def evaluation_mode(self):
        """Gets the evaluation_mode of this BinaryAuthorization.

        Mode of operation for binauthz policy evaluation. If unspecified, defaults to DISABLED.

        :return: The evaluation_mode of this BinaryAuthorization.
        :rtype: str
        """
        return self._evaluation_mode

    @evaluation_mode.setter
    def evaluation_mode(self, evaluation_mode):
        """Sets the evaluation_mode of this BinaryAuthorization.

        Mode of operation for binauthz policy evaluation. If unspecified, defaults to DISABLED.

        :param evaluation_mode: The evaluation_mode of this BinaryAuthorization.
        :type evaluation_mode: str
        """
        allowed_values = ["EVALUATION_MODE_UNSPECIFIED", "DISABLED", "PROJECT_SINGLETON_POLICY_ENFORCE", "POLICY_BINDINGS", "POLICY_BINDINGS_AND_PROJECT_SINGLETON_POLICY_ENFORCE"]  # noqa: E501
        if evaluation_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `evaluation_mode` ({0}), must be one of {1}"
                .format(evaluation_mode, allowed_values)
            )

        self._evaluation_mode = evaluation_mode

    @property
    def policy_bindings(self):
        """Gets the policy_bindings of this BinaryAuthorization.

        Optional. Binauthz policies that apply to this cluster.

        :return: The policy_bindings of this BinaryAuthorization.
        :rtype: List[PolicyBinding]
        """
        return self._policy_bindings

    @policy_bindings.setter
    def policy_bindings(self, policy_bindings):
        """Sets the policy_bindings of this BinaryAuthorization.

        Optional. Binauthz policies that apply to this cluster.

        :param policy_bindings: The policy_bindings of this BinaryAuthorization.
        :type policy_bindings: List[PolicyBinding]
        """

        self._policy_bindings = policy_bindings
