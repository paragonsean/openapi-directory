# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpgradeEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_version: str=None, operation: str=None, operation_start_time: str=None, resource: str=None, resource_type: str=None, target_version: str=None):
        """UpgradeEvent - a model defined in OpenAPI

        :param current_version: The current_version of this UpgradeEvent.
        :param operation: The operation of this UpgradeEvent.
        :param operation_start_time: The operation_start_time of this UpgradeEvent.
        :param resource: The resource of this UpgradeEvent.
        :param resource_type: The resource_type of this UpgradeEvent.
        :param target_version: The target_version of this UpgradeEvent.
        """
        self.openapi_types = {
            'current_version': str,
            'operation': str,
            'operation_start_time': str,
            'resource': str,
            'resource_type': str,
            'target_version': str
        }

        self.attribute_map = {
            'current_version': 'currentVersion',
            'operation': 'operation',
            'operation_start_time': 'operationStartTime',
            'resource': 'resource',
            'resource_type': 'resourceType',
            'target_version': 'targetVersion'
        }

        self._current_version = current_version
        self._operation = operation
        self._operation_start_time = operation_start_time
        self._resource = resource
        self._resource_type = resource_type
        self._target_version = target_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpgradeEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpgradeEvent of this UpgradeEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_version(self):
        """Gets the current_version of this UpgradeEvent.

        The current version before the upgrade.

        :return: The current_version of this UpgradeEvent.
        :rtype: str
        """
        return self._current_version

    @current_version.setter
    def current_version(self, current_version):
        """Sets the current_version of this UpgradeEvent.

        The current version before the upgrade.

        :param current_version: The current_version of this UpgradeEvent.
        :type current_version: str
        """

        self._current_version = current_version

    @property
    def operation(self):
        """Gets the operation of this UpgradeEvent.

        The operation associated with this upgrade.

        :return: The operation of this UpgradeEvent.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this UpgradeEvent.

        The operation associated with this upgrade.

        :param operation: The operation of this UpgradeEvent.
        :type operation: str
        """

        self._operation = operation

    @property
    def operation_start_time(self):
        """Gets the operation_start_time of this UpgradeEvent.

        The time when the operation was started.

        :return: The operation_start_time of this UpgradeEvent.
        :rtype: str
        """
        return self._operation_start_time

    @operation_start_time.setter
    def operation_start_time(self, operation_start_time):
        """Sets the operation_start_time of this UpgradeEvent.

        The time when the operation was started.

        :param operation_start_time: The operation_start_time of this UpgradeEvent.
        :type operation_start_time: str
        """

        self._operation_start_time = operation_start_time

    @property
    def resource(self):
        """Gets the resource of this UpgradeEvent.

        Optional relative path to the resource. For example in node pool upgrades, the relative path of the node pool.

        :return: The resource of this UpgradeEvent.
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this UpgradeEvent.

        Optional relative path to the resource. For example in node pool upgrades, the relative path of the node pool.

        :param resource: The resource of this UpgradeEvent.
        :type resource: str
        """

        self._resource = resource

    @property
    def resource_type(self):
        """Gets the resource_type of this UpgradeEvent.

        The resource type that is upgrading.

        :return: The resource_type of this UpgradeEvent.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this UpgradeEvent.

        The resource type that is upgrading.

        :param resource_type: The resource_type of this UpgradeEvent.
        :type resource_type: str
        """
        allowed_values = ["UPGRADE_RESOURCE_TYPE_UNSPECIFIED", "MASTER", "NODE_POOL"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def target_version(self):
        """Gets the target_version of this UpgradeEvent.

        The target version for the upgrade.

        :return: The target_version of this UpgradeEvent.
        :rtype: str
        """
        return self._target_version

    @target_version.setter
    def target_version(self, target_version):
        """Sets the target_version of this UpgradeEvent.

        The target version for the upgrade.

        :param target_version: The target_version of this UpgradeEvent.
        :type target_version: str
        """

        self._target_version = target_version
