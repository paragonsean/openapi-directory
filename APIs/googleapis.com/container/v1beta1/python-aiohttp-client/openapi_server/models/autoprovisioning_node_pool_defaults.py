# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.node_management import NodeManagement
from openapi_server.models.shielded_instance_config import ShieldedInstanceConfig
from openapi_server.models.upgrade_settings import UpgradeSettings
from openapi_server import util


class AutoprovisioningNodePoolDefaults(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, boot_disk_kms_key: str=None, disk_size_gb: int=None, disk_type: str=None, image_type: str=None, insecure_kubelet_readonly_port_enabled: bool=None, management: NodeManagement=None, min_cpu_platform: str=None, oauth_scopes: List[str]=None, service_account: str=None, shielded_instance_config: ShieldedInstanceConfig=None, upgrade_settings: UpgradeSettings=None):
        """AutoprovisioningNodePoolDefaults - a model defined in OpenAPI

        :param boot_disk_kms_key: The boot_disk_kms_key of this AutoprovisioningNodePoolDefaults.
        :param disk_size_gb: The disk_size_gb of this AutoprovisioningNodePoolDefaults.
        :param disk_type: The disk_type of this AutoprovisioningNodePoolDefaults.
        :param image_type: The image_type of this AutoprovisioningNodePoolDefaults.
        :param insecure_kubelet_readonly_port_enabled: The insecure_kubelet_readonly_port_enabled of this AutoprovisioningNodePoolDefaults.
        :param management: The management of this AutoprovisioningNodePoolDefaults.
        :param min_cpu_platform: The min_cpu_platform of this AutoprovisioningNodePoolDefaults.
        :param oauth_scopes: The oauth_scopes of this AutoprovisioningNodePoolDefaults.
        :param service_account: The service_account of this AutoprovisioningNodePoolDefaults.
        :param shielded_instance_config: The shielded_instance_config of this AutoprovisioningNodePoolDefaults.
        :param upgrade_settings: The upgrade_settings of this AutoprovisioningNodePoolDefaults.
        """
        self.openapi_types = {
            'boot_disk_kms_key': str,
            'disk_size_gb': int,
            'disk_type': str,
            'image_type': str,
            'insecure_kubelet_readonly_port_enabled': bool,
            'management': NodeManagement,
            'min_cpu_platform': str,
            'oauth_scopes': List[str],
            'service_account': str,
            'shielded_instance_config': ShieldedInstanceConfig,
            'upgrade_settings': UpgradeSettings
        }

        self.attribute_map = {
            'boot_disk_kms_key': 'bootDiskKmsKey',
            'disk_size_gb': 'diskSizeGb',
            'disk_type': 'diskType',
            'image_type': 'imageType',
            'insecure_kubelet_readonly_port_enabled': 'insecureKubeletReadonlyPortEnabled',
            'management': 'management',
            'min_cpu_platform': 'minCpuPlatform',
            'oauth_scopes': 'oauthScopes',
            'service_account': 'serviceAccount',
            'shielded_instance_config': 'shieldedInstanceConfig',
            'upgrade_settings': 'upgradeSettings'
        }

        self._boot_disk_kms_key = boot_disk_kms_key
        self._disk_size_gb = disk_size_gb
        self._disk_type = disk_type
        self._image_type = image_type
        self._insecure_kubelet_readonly_port_enabled = insecure_kubelet_readonly_port_enabled
        self._management = management
        self._min_cpu_platform = min_cpu_platform
        self._oauth_scopes = oauth_scopes
        self._service_account = service_account
        self._shielded_instance_config = shielded_instance_config
        self._upgrade_settings = upgrade_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutoprovisioningNodePoolDefaults':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutoprovisioningNodePoolDefaults of this AutoprovisioningNodePoolDefaults.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def boot_disk_kms_key(self):
        """Gets the boot_disk_kms_key of this AutoprovisioningNodePoolDefaults.

         The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption

        :return: The boot_disk_kms_key of this AutoprovisioningNodePoolDefaults.
        :rtype: str
        """
        return self._boot_disk_kms_key

    @boot_disk_kms_key.setter
    def boot_disk_kms_key(self, boot_disk_kms_key):
        """Sets the boot_disk_kms_key of this AutoprovisioningNodePoolDefaults.

         The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption

        :param boot_disk_kms_key: The boot_disk_kms_key of this AutoprovisioningNodePoolDefaults.
        :type boot_disk_kms_key: str
        """

        self._boot_disk_kms_key = boot_disk_kms_key

    @property
    def disk_size_gb(self):
        """Gets the disk_size_gb of this AutoprovisioningNodePoolDefaults.

        Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.

        :return: The disk_size_gb of this AutoprovisioningNodePoolDefaults.
        :rtype: int
        """
        return self._disk_size_gb

    @disk_size_gb.setter
    def disk_size_gb(self, disk_size_gb):
        """Sets the disk_size_gb of this AutoprovisioningNodePoolDefaults.

        Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.

        :param disk_size_gb: The disk_size_gb of this AutoprovisioningNodePoolDefaults.
        :type disk_size_gb: int
        """

        self._disk_size_gb = disk_size_gb

    @property
    def disk_type(self):
        """Gets the disk_type of this AutoprovisioningNodePoolDefaults.

        Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'

        :return: The disk_type of this AutoprovisioningNodePoolDefaults.
        :rtype: str
        """
        return self._disk_type

    @disk_type.setter
    def disk_type(self, disk_type):
        """Sets the disk_type of this AutoprovisioningNodePoolDefaults.

        Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'

        :param disk_type: The disk_type of this AutoprovisioningNodePoolDefaults.
        :type disk_type: str
        """

        self._disk_type = disk_type

    @property
    def image_type(self):
        """Gets the image_type of this AutoprovisioningNodePoolDefaults.

        The image type to use for NAP created node. Please see https://cloud.google.com/kubernetes-engine/docs/concepts/node-images for available image types.

        :return: The image_type of this AutoprovisioningNodePoolDefaults.
        :rtype: str
        """
        return self._image_type

    @image_type.setter
    def image_type(self, image_type):
        """Sets the image_type of this AutoprovisioningNodePoolDefaults.

        The image type to use for NAP created node. Please see https://cloud.google.com/kubernetes-engine/docs/concepts/node-images for available image types.

        :param image_type: The image_type of this AutoprovisioningNodePoolDefaults.
        :type image_type: str
        """

        self._image_type = image_type

    @property
    def insecure_kubelet_readonly_port_enabled(self):
        """Gets the insecure_kubelet_readonly_port_enabled of this AutoprovisioningNodePoolDefaults.

        Enable or disable Kubelet read only port.

        :return: The insecure_kubelet_readonly_port_enabled of this AutoprovisioningNodePoolDefaults.
        :rtype: bool
        """
        return self._insecure_kubelet_readonly_port_enabled

    @insecure_kubelet_readonly_port_enabled.setter
    def insecure_kubelet_readonly_port_enabled(self, insecure_kubelet_readonly_port_enabled):
        """Sets the insecure_kubelet_readonly_port_enabled of this AutoprovisioningNodePoolDefaults.

        Enable or disable Kubelet read only port.

        :param insecure_kubelet_readonly_port_enabled: The insecure_kubelet_readonly_port_enabled of this AutoprovisioningNodePoolDefaults.
        :type insecure_kubelet_readonly_port_enabled: bool
        """

        self._insecure_kubelet_readonly_port_enabled = insecure_kubelet_readonly_port_enabled

    @property
    def management(self):
        """Gets the management of this AutoprovisioningNodePoolDefaults.


        :return: The management of this AutoprovisioningNodePoolDefaults.
        :rtype: NodeManagement
        """
        return self._management

    @management.setter
    def management(self, management):
        """Sets the management of this AutoprovisioningNodePoolDefaults.


        :param management: The management of this AutoprovisioningNodePoolDefaults.
        :type management: NodeManagement
        """

        self._management = management

    @property
    def min_cpu_platform(self):
        """Gets the min_cpu_platform of this AutoprovisioningNodePoolDefaults.

        Deprecated. Minimum CPU platform to be used for NAP created node pools. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: Intel Haswell or minCpuPlatform: Intel Sandy Bridge. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform). This field is deprecated, min_cpu_platform should be specified using `cloud.google.com/requested-min-cpu-platform` label selector on the pod. To unset the min cpu platform field pass \"automatic\" as field value.

        :return: The min_cpu_platform of this AutoprovisioningNodePoolDefaults.
        :rtype: str
        """
        return self._min_cpu_platform

    @min_cpu_platform.setter
    def min_cpu_platform(self, min_cpu_platform):
        """Sets the min_cpu_platform of this AutoprovisioningNodePoolDefaults.

        Deprecated. Minimum CPU platform to be used for NAP created node pools. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: Intel Haswell or minCpuPlatform: Intel Sandy Bridge. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform). This field is deprecated, min_cpu_platform should be specified using `cloud.google.com/requested-min-cpu-platform` label selector on the pod. To unset the min cpu platform field pass \"automatic\" as field value.

        :param min_cpu_platform: The min_cpu_platform of this AutoprovisioningNodePoolDefaults.
        :type min_cpu_platform: str
        """

        self._min_cpu_platform = min_cpu_platform

    @property
    def oauth_scopes(self):
        """Gets the oauth_scopes of this AutoprovisioningNodePoolDefaults.

        The set of Google API scopes to be made available on all of the node VMs under the \"default\" service account. The following scopes are recommended, but not required, and by default are not included: * `https://www.googleapis.com/auth/compute` is required for mounting persistent storage on your nodes. * `https://www.googleapis.com/auth/devstorage.read_only` is required for communicating with **gcr.io** (the [Google Container Registry](https://cloud.google.com/container-registry/)). If unspecified, no scopes are added, unless Cloud Logging or Cloud Monitoring are enabled, in which case their required scopes will be added.

        :return: The oauth_scopes of this AutoprovisioningNodePoolDefaults.
        :rtype: List[str]
        """
        return self._oauth_scopes

    @oauth_scopes.setter
    def oauth_scopes(self, oauth_scopes):
        """Sets the oauth_scopes of this AutoprovisioningNodePoolDefaults.

        The set of Google API scopes to be made available on all of the node VMs under the \"default\" service account. The following scopes are recommended, but not required, and by default are not included: * `https://www.googleapis.com/auth/compute` is required for mounting persistent storage on your nodes. * `https://www.googleapis.com/auth/devstorage.read_only` is required for communicating with **gcr.io** (the [Google Container Registry](https://cloud.google.com/container-registry/)). If unspecified, no scopes are added, unless Cloud Logging or Cloud Monitoring are enabled, in which case their required scopes will be added.

        :param oauth_scopes: The oauth_scopes of this AutoprovisioningNodePoolDefaults.
        :type oauth_scopes: List[str]
        """

        self._oauth_scopes = oauth_scopes

    @property
    def service_account(self):
        """Gets the service_account of this AutoprovisioningNodePoolDefaults.

        The Google Cloud Platform Service Account to be used by the node VMs. Specify the email address of the Service Account; otherwise, if no Service Account is specified, the \"default\" service account is used.

        :return: The service_account of this AutoprovisioningNodePoolDefaults.
        :rtype: str
        """
        return self._service_account

    @service_account.setter
    def service_account(self, service_account):
        """Sets the service_account of this AutoprovisioningNodePoolDefaults.

        The Google Cloud Platform Service Account to be used by the node VMs. Specify the email address of the Service Account; otherwise, if no Service Account is specified, the \"default\" service account is used.

        :param service_account: The service_account of this AutoprovisioningNodePoolDefaults.
        :type service_account: str
        """

        self._service_account = service_account

    @property
    def shielded_instance_config(self):
        """Gets the shielded_instance_config of this AutoprovisioningNodePoolDefaults.


        :return: The shielded_instance_config of this AutoprovisioningNodePoolDefaults.
        :rtype: ShieldedInstanceConfig
        """
        return self._shielded_instance_config

    @shielded_instance_config.setter
    def shielded_instance_config(self, shielded_instance_config):
        """Sets the shielded_instance_config of this AutoprovisioningNodePoolDefaults.


        :param shielded_instance_config: The shielded_instance_config of this AutoprovisioningNodePoolDefaults.
        :type shielded_instance_config: ShieldedInstanceConfig
        """

        self._shielded_instance_config = shielded_instance_config

    @property
    def upgrade_settings(self):
        """Gets the upgrade_settings of this AutoprovisioningNodePoolDefaults.


        :return: The upgrade_settings of this AutoprovisioningNodePoolDefaults.
        :rtype: UpgradeSettings
        """
        return self._upgrade_settings

    @upgrade_settings.setter
    def upgrade_settings(self, upgrade_settings):
        """Sets the upgrade_settings of this AutoprovisioningNodePoolDefaults.


        :param upgrade_settings: The upgrade_settings of this AutoprovisioningNodePoolDefaults.
        :type upgrade_settings: UpgradeSettings
        """

        self._upgrade_settings = upgrade_settings
