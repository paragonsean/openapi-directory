# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AdditionalNodeNetworkConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, network: str=None, subnetwork: str=None):
        """AdditionalNodeNetworkConfig - a model defined in OpenAPI

        :param network: The network of this AdditionalNodeNetworkConfig.
        :param subnetwork: The subnetwork of this AdditionalNodeNetworkConfig.
        """
        self.openapi_types = {
            'network': str,
            'subnetwork': str
        }

        self.attribute_map = {
            'network': 'network',
            'subnetwork': 'subnetwork'
        }

        self._network = network
        self._subnetwork = subnetwork

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdditionalNodeNetworkConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdditionalNodeNetworkConfig of this AdditionalNodeNetworkConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def network(self):
        """Gets the network of this AdditionalNodeNetworkConfig.

        Name of the VPC where the additional interface belongs

        :return: The network of this AdditionalNodeNetworkConfig.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this AdditionalNodeNetworkConfig.

        Name of the VPC where the additional interface belongs

        :param network: The network of this AdditionalNodeNetworkConfig.
        :type network: str
        """

        self._network = network

    @property
    def subnetwork(self):
        """Gets the subnetwork of this AdditionalNodeNetworkConfig.

        Name of the subnetwork where the additional interface belongs

        :return: The subnetwork of this AdditionalNodeNetworkConfig.
        :rtype: str
        """
        return self._subnetwork

    @subnetwork.setter
    def subnetwork(self, subnetwork):
        """Sets the subnetwork of this AdditionalNodeNetworkConfig.

        Name of the subnetwork where the additional interface belongs

        :param subnetwork: The subnetwork of this AdditionalNodeNetworkConfig.
        :type subnetwork: str
        """

        self._subnetwork = subnetwork
