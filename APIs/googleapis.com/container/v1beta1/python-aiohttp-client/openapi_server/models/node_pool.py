# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.best_effort_provisioning import BestEffortProvisioning
from openapi_server.models.max_pods_constraint import MaxPodsConstraint
from openapi_server.models.node_config import NodeConfig
from openapi_server.models.node_management import NodeManagement
from openapi_server.models.node_network_config import NodeNetworkConfig
from openapi_server.models.node_pool_autoscaling import NodePoolAutoscaling
from openapi_server.models.placement_policy import PlacementPolicy
from openapi_server.models.queued_provisioning import QueuedProvisioning
from openapi_server.models.status_condition import StatusCondition
from openapi_server.models.update_info import UpdateInfo
from openapi_server.models.upgrade_settings import UpgradeSettings
from openapi_server import util


class NodePool(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, autoscaling: NodePoolAutoscaling=None, best_effort_provisioning: BestEffortProvisioning=None, conditions: List[StatusCondition]=None, config: NodeConfig=None, etag: str=None, initial_node_count: int=None, instance_group_urls: List[str]=None, locations: List[str]=None, management: NodeManagement=None, max_pods_constraint: MaxPodsConstraint=None, name: str=None, network_config: NodeNetworkConfig=None, placement_policy: PlacementPolicy=None, pod_ipv4_cidr_size: int=None, queued_provisioning: QueuedProvisioning=None, self_link: str=None, status: str=None, status_message: str=None, update_info: UpdateInfo=None, upgrade_settings: UpgradeSettings=None, version: str=None):
        """NodePool - a model defined in OpenAPI

        :param autoscaling: The autoscaling of this NodePool.
        :param best_effort_provisioning: The best_effort_provisioning of this NodePool.
        :param conditions: The conditions of this NodePool.
        :param config: The config of this NodePool.
        :param etag: The etag of this NodePool.
        :param initial_node_count: The initial_node_count of this NodePool.
        :param instance_group_urls: The instance_group_urls of this NodePool.
        :param locations: The locations of this NodePool.
        :param management: The management of this NodePool.
        :param max_pods_constraint: The max_pods_constraint of this NodePool.
        :param name: The name of this NodePool.
        :param network_config: The network_config of this NodePool.
        :param placement_policy: The placement_policy of this NodePool.
        :param pod_ipv4_cidr_size: The pod_ipv4_cidr_size of this NodePool.
        :param queued_provisioning: The queued_provisioning of this NodePool.
        :param self_link: The self_link of this NodePool.
        :param status: The status of this NodePool.
        :param status_message: The status_message of this NodePool.
        :param update_info: The update_info of this NodePool.
        :param upgrade_settings: The upgrade_settings of this NodePool.
        :param version: The version of this NodePool.
        """
        self.openapi_types = {
            'autoscaling': NodePoolAutoscaling,
            'best_effort_provisioning': BestEffortProvisioning,
            'conditions': List[StatusCondition],
            'config': NodeConfig,
            'etag': str,
            'initial_node_count': int,
            'instance_group_urls': List[str],
            'locations': List[str],
            'management': NodeManagement,
            'max_pods_constraint': MaxPodsConstraint,
            'name': str,
            'network_config': NodeNetworkConfig,
            'placement_policy': PlacementPolicy,
            'pod_ipv4_cidr_size': int,
            'queued_provisioning': QueuedProvisioning,
            'self_link': str,
            'status': str,
            'status_message': str,
            'update_info': UpdateInfo,
            'upgrade_settings': UpgradeSettings,
            'version': str
        }

        self.attribute_map = {
            'autoscaling': 'autoscaling',
            'best_effort_provisioning': 'bestEffortProvisioning',
            'conditions': 'conditions',
            'config': 'config',
            'etag': 'etag',
            'initial_node_count': 'initialNodeCount',
            'instance_group_urls': 'instanceGroupUrls',
            'locations': 'locations',
            'management': 'management',
            'max_pods_constraint': 'maxPodsConstraint',
            'name': 'name',
            'network_config': 'networkConfig',
            'placement_policy': 'placementPolicy',
            'pod_ipv4_cidr_size': 'podIpv4CidrSize',
            'queued_provisioning': 'queuedProvisioning',
            'self_link': 'selfLink',
            'status': 'status',
            'status_message': 'statusMessage',
            'update_info': 'updateInfo',
            'upgrade_settings': 'upgradeSettings',
            'version': 'version'
        }

        self._autoscaling = autoscaling
        self._best_effort_provisioning = best_effort_provisioning
        self._conditions = conditions
        self._config = config
        self._etag = etag
        self._initial_node_count = initial_node_count
        self._instance_group_urls = instance_group_urls
        self._locations = locations
        self._management = management
        self._max_pods_constraint = max_pods_constraint
        self._name = name
        self._network_config = network_config
        self._placement_policy = placement_policy
        self._pod_ipv4_cidr_size = pod_ipv4_cidr_size
        self._queued_provisioning = queued_provisioning
        self._self_link = self_link
        self._status = status
        self._status_message = status_message
        self._update_info = update_info
        self._upgrade_settings = upgrade_settings
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodePool':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodePool of this NodePool.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def autoscaling(self):
        """Gets the autoscaling of this NodePool.


        :return: The autoscaling of this NodePool.
        :rtype: NodePoolAutoscaling
        """
        return self._autoscaling

    @autoscaling.setter
    def autoscaling(self, autoscaling):
        """Sets the autoscaling of this NodePool.


        :param autoscaling: The autoscaling of this NodePool.
        :type autoscaling: NodePoolAutoscaling
        """

        self._autoscaling = autoscaling

    @property
    def best_effort_provisioning(self):
        """Gets the best_effort_provisioning of this NodePool.


        :return: The best_effort_provisioning of this NodePool.
        :rtype: BestEffortProvisioning
        """
        return self._best_effort_provisioning

    @best_effort_provisioning.setter
    def best_effort_provisioning(self, best_effort_provisioning):
        """Sets the best_effort_provisioning of this NodePool.


        :param best_effort_provisioning: The best_effort_provisioning of this NodePool.
        :type best_effort_provisioning: BestEffortProvisioning
        """

        self._best_effort_provisioning = best_effort_provisioning

    @property
    def conditions(self):
        """Gets the conditions of this NodePool.

        Which conditions caused the current node pool state.

        :return: The conditions of this NodePool.
        :rtype: List[StatusCondition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this NodePool.

        Which conditions caused the current node pool state.

        :param conditions: The conditions of this NodePool.
        :type conditions: List[StatusCondition]
        """

        self._conditions = conditions

    @property
    def config(self):
        """Gets the config of this NodePool.


        :return: The config of this NodePool.
        :rtype: NodeConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this NodePool.


        :param config: The config of this NodePool.
        :type config: NodeConfig
        """

        self._config = config

    @property
    def etag(self):
        """Gets the etag of this NodePool.

        This checksum is computed by the server based on the value of node pool fields, and may be sent on update requests to ensure the client has an up-to-date value before proceeding.

        :return: The etag of this NodePool.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this NodePool.

        This checksum is computed by the server based on the value of node pool fields, and may be sent on update requests to ensure the client has an up-to-date value before proceeding.

        :param etag: The etag of this NodePool.
        :type etag: str
        """

        self._etag = etag

    @property
    def initial_node_count(self):
        """Gets the initial_node_count of this NodePool.

        The initial node count for the pool. You must ensure that your Compute Engine [resource quota](https://cloud.google.com/compute/quotas) is sufficient for this number of instances. You must also have available firewall and routes quota.

        :return: The initial_node_count of this NodePool.
        :rtype: int
        """
        return self._initial_node_count

    @initial_node_count.setter
    def initial_node_count(self, initial_node_count):
        """Sets the initial_node_count of this NodePool.

        The initial node count for the pool. You must ensure that your Compute Engine [resource quota](https://cloud.google.com/compute/quotas) is sufficient for this number of instances. You must also have available firewall and routes quota.

        :param initial_node_count: The initial_node_count of this NodePool.
        :type initial_node_count: int
        """

        self._initial_node_count = initial_node_count

    @property
    def instance_group_urls(self):
        """Gets the instance_group_urls of this NodePool.

        [Output only] The resource URLs of the [managed instance groups](https://cloud.google.com/compute/docs/instance-groups/creating-groups-of-managed-instances) associated with this node pool. During the node pool blue-green upgrade operation, the URLs contain both blue and green resources.

        :return: The instance_group_urls of this NodePool.
        :rtype: List[str]
        """
        return self._instance_group_urls

    @instance_group_urls.setter
    def instance_group_urls(self, instance_group_urls):
        """Sets the instance_group_urls of this NodePool.

        [Output only] The resource URLs of the [managed instance groups](https://cloud.google.com/compute/docs/instance-groups/creating-groups-of-managed-instances) associated with this node pool. During the node pool blue-green upgrade operation, the URLs contain both blue and green resources.

        :param instance_group_urls: The instance_group_urls of this NodePool.
        :type instance_group_urls: List[str]
        """

        self._instance_group_urls = instance_group_urls

    @property
    def locations(self):
        """Gets the locations of this NodePool.

        The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes should be located. If this value is unspecified during node pool creation, the [Cluster.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters#Cluster.FIELDS.locations) value will be used, instead. Warning: changing node pool locations will result in nodes being added and/or removed.

        :return: The locations of this NodePool.
        :rtype: List[str]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this NodePool.

        The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes should be located. If this value is unspecified during node pool creation, the [Cluster.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters#Cluster.FIELDS.locations) value will be used, instead. Warning: changing node pool locations will result in nodes being added and/or removed.

        :param locations: The locations of this NodePool.
        :type locations: List[str]
        """

        self._locations = locations

    @property
    def management(self):
        """Gets the management of this NodePool.


        :return: The management of this NodePool.
        :rtype: NodeManagement
        """
        return self._management

    @management.setter
    def management(self, management):
        """Sets the management of this NodePool.


        :param management: The management of this NodePool.
        :type management: NodeManagement
        """

        self._management = management

    @property
    def max_pods_constraint(self):
        """Gets the max_pods_constraint of this NodePool.


        :return: The max_pods_constraint of this NodePool.
        :rtype: MaxPodsConstraint
        """
        return self._max_pods_constraint

    @max_pods_constraint.setter
    def max_pods_constraint(self, max_pods_constraint):
        """Sets the max_pods_constraint of this NodePool.


        :param max_pods_constraint: The max_pods_constraint of this NodePool.
        :type max_pods_constraint: MaxPodsConstraint
        """

        self._max_pods_constraint = max_pods_constraint

    @property
    def name(self):
        """Gets the name of this NodePool.

        The name of the node pool.

        :return: The name of this NodePool.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NodePool.

        The name of the node pool.

        :param name: The name of this NodePool.
        :type name: str
        """

        self._name = name

    @property
    def network_config(self):
        """Gets the network_config of this NodePool.


        :return: The network_config of this NodePool.
        :rtype: NodeNetworkConfig
        """
        return self._network_config

    @network_config.setter
    def network_config(self, network_config):
        """Sets the network_config of this NodePool.


        :param network_config: The network_config of this NodePool.
        :type network_config: NodeNetworkConfig
        """

        self._network_config = network_config

    @property
    def placement_policy(self):
        """Gets the placement_policy of this NodePool.


        :return: The placement_policy of this NodePool.
        :rtype: PlacementPolicy
        """
        return self._placement_policy

    @placement_policy.setter
    def placement_policy(self, placement_policy):
        """Sets the placement_policy of this NodePool.


        :param placement_policy: The placement_policy of this NodePool.
        :type placement_policy: PlacementPolicy
        """

        self._placement_policy = placement_policy

    @property
    def pod_ipv4_cidr_size(self):
        """Gets the pod_ipv4_cidr_size of this NodePool.

        [Output only] The pod CIDR block size per node in this node pool.

        :return: The pod_ipv4_cidr_size of this NodePool.
        :rtype: int
        """
        return self._pod_ipv4_cidr_size

    @pod_ipv4_cidr_size.setter
    def pod_ipv4_cidr_size(self, pod_ipv4_cidr_size):
        """Sets the pod_ipv4_cidr_size of this NodePool.

        [Output only] The pod CIDR block size per node in this node pool.

        :param pod_ipv4_cidr_size: The pod_ipv4_cidr_size of this NodePool.
        :type pod_ipv4_cidr_size: int
        """

        self._pod_ipv4_cidr_size = pod_ipv4_cidr_size

    @property
    def queued_provisioning(self):
        """Gets the queued_provisioning of this NodePool.


        :return: The queued_provisioning of this NodePool.
        :rtype: QueuedProvisioning
        """
        return self._queued_provisioning

    @queued_provisioning.setter
    def queued_provisioning(self, queued_provisioning):
        """Sets the queued_provisioning of this NodePool.


        :param queued_provisioning: The queued_provisioning of this NodePool.
        :type queued_provisioning: QueuedProvisioning
        """

        self._queued_provisioning = queued_provisioning

    @property
    def self_link(self):
        """Gets the self_link of this NodePool.

        [Output only] Server-defined URL for the resource.

        :return: The self_link of this NodePool.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this NodePool.

        [Output only] Server-defined URL for the resource.

        :param self_link: The self_link of this NodePool.
        :type self_link: str
        """

        self._self_link = self_link

    @property
    def status(self):
        """Gets the status of this NodePool.

        [Output only] The status of the nodes in this pool instance.

        :return: The status of this NodePool.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NodePool.

        [Output only] The status of the nodes in this pool instance.

        :param status: The status of this NodePool.
        :type status: str
        """
        allowed_values = ["STATUS_UNSPECIFIED", "PROVISIONING", "RUNNING", "RUNNING_WITH_ERROR", "RECONCILING", "STOPPING", "ERROR"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this NodePool.

        [Output only] Deprecated. Use conditions instead. Additional information about the current status of this node pool instance, if available.

        :return: The status_message of this NodePool.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this NodePool.

        [Output only] Deprecated. Use conditions instead. Additional information about the current status of this node pool instance, if available.

        :param status_message: The status_message of this NodePool.
        :type status_message: str
        """

        self._status_message = status_message

    @property
    def update_info(self):
        """Gets the update_info of this NodePool.


        :return: The update_info of this NodePool.
        :rtype: UpdateInfo
        """
        return self._update_info

    @update_info.setter
    def update_info(self, update_info):
        """Sets the update_info of this NodePool.


        :param update_info: The update_info of this NodePool.
        :type update_info: UpdateInfo
        """

        self._update_info = update_info

    @property
    def upgrade_settings(self):
        """Gets the upgrade_settings of this NodePool.


        :return: The upgrade_settings of this NodePool.
        :rtype: UpgradeSettings
        """
        return self._upgrade_settings

    @upgrade_settings.setter
    def upgrade_settings(self, upgrade_settings):
        """Sets the upgrade_settings of this NodePool.


        :param upgrade_settings: The upgrade_settings of this NodePool.
        :type upgrade_settings: UpgradeSettings
        """

        self._upgrade_settings = upgrade_settings

    @property
    def version(self):
        """Gets the version of this NodePool.

        The version of Kubernetes running on this NodePool's nodes. If unspecified, it defaults as described [here](https://cloud.google.com/kubernetes-engine/versioning#specifying_node_version).

        :return: The version of this NodePool.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this NodePool.

        The version of Kubernetes running on this NodePool's nodes. If unspecified, it defaults as described [here](https://cloud.google.com/kubernetes-engine/versioning#specifying_node_version).

        :param version: The version of this NodePool.
        :type version: str
        """

        self._version = version
