# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UsableSubnetworkSecondaryRange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip_cidr_range: str=None, range_name: str=None, status: str=None):
        """UsableSubnetworkSecondaryRange - a model defined in OpenAPI

        :param ip_cidr_range: The ip_cidr_range of this UsableSubnetworkSecondaryRange.
        :param range_name: The range_name of this UsableSubnetworkSecondaryRange.
        :param status: The status of this UsableSubnetworkSecondaryRange.
        """
        self.openapi_types = {
            'ip_cidr_range': str,
            'range_name': str,
            'status': str
        }

        self.attribute_map = {
            'ip_cidr_range': 'ipCidrRange',
            'range_name': 'rangeName',
            'status': 'status'
        }

        self._ip_cidr_range = ip_cidr_range
        self._range_name = range_name
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UsableSubnetworkSecondaryRange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UsableSubnetworkSecondaryRange of this UsableSubnetworkSecondaryRange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip_cidr_range(self):
        """Gets the ip_cidr_range of this UsableSubnetworkSecondaryRange.

        The range of IP addresses belonging to this subnetwork secondary range.

        :return: The ip_cidr_range of this UsableSubnetworkSecondaryRange.
        :rtype: str
        """
        return self._ip_cidr_range

    @ip_cidr_range.setter
    def ip_cidr_range(self, ip_cidr_range):
        """Sets the ip_cidr_range of this UsableSubnetworkSecondaryRange.

        The range of IP addresses belonging to this subnetwork secondary range.

        :param ip_cidr_range: The ip_cidr_range of this UsableSubnetworkSecondaryRange.
        :type ip_cidr_range: str
        """

        self._ip_cidr_range = ip_cidr_range

    @property
    def range_name(self):
        """Gets the range_name of this UsableSubnetworkSecondaryRange.

        The name associated with this subnetwork secondary range, used when adding an alias IP range to a VM instance.

        :return: The range_name of this UsableSubnetworkSecondaryRange.
        :rtype: str
        """
        return self._range_name

    @range_name.setter
    def range_name(self, range_name):
        """Sets the range_name of this UsableSubnetworkSecondaryRange.

        The name associated with this subnetwork secondary range, used when adding an alias IP range to a VM instance.

        :param range_name: The range_name of this UsableSubnetworkSecondaryRange.
        :type range_name: str
        """

        self._range_name = range_name

    @property
    def status(self):
        """Gets the status of this UsableSubnetworkSecondaryRange.

        This field is to determine the status of the secondary range programmably.

        :return: The status of this UsableSubnetworkSecondaryRange.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UsableSubnetworkSecondaryRange.

        This field is to determine the status of the secondary range programmably.

        :param status: The status of this UsableSubnetworkSecondaryRange.
        :type status: str
        """
        allowed_values = ["UNKNOWN", "UNUSED", "IN_USE_SERVICE", "IN_USE_SHAREABLE_POD", "IN_USE_MANAGED_POD"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
