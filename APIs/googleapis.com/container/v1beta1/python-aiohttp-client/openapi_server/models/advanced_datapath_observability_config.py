# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AdvancedDatapathObservabilityConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enable_metrics: bool=None, enable_relay: bool=None, relay_mode: str=None):
        """AdvancedDatapathObservabilityConfig - a model defined in OpenAPI

        :param enable_metrics: The enable_metrics of this AdvancedDatapathObservabilityConfig.
        :param enable_relay: The enable_relay of this AdvancedDatapathObservabilityConfig.
        :param relay_mode: The relay_mode of this AdvancedDatapathObservabilityConfig.
        """
        self.openapi_types = {
            'enable_metrics': bool,
            'enable_relay': bool,
            'relay_mode': str
        }

        self.attribute_map = {
            'enable_metrics': 'enableMetrics',
            'enable_relay': 'enableRelay',
            'relay_mode': 'relayMode'
        }

        self._enable_metrics = enable_metrics
        self._enable_relay = enable_relay
        self._relay_mode = relay_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdvancedDatapathObservabilityConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdvancedDatapathObservabilityConfig of this AdvancedDatapathObservabilityConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enable_metrics(self):
        """Gets the enable_metrics of this AdvancedDatapathObservabilityConfig.

        Expose flow metrics on nodes

        :return: The enable_metrics of this AdvancedDatapathObservabilityConfig.
        :rtype: bool
        """
        return self._enable_metrics

    @enable_metrics.setter
    def enable_metrics(self, enable_metrics):
        """Sets the enable_metrics of this AdvancedDatapathObservabilityConfig.

        Expose flow metrics on nodes

        :param enable_metrics: The enable_metrics of this AdvancedDatapathObservabilityConfig.
        :type enable_metrics: bool
        """

        self._enable_metrics = enable_metrics

    @property
    def enable_relay(self):
        """Gets the enable_relay of this AdvancedDatapathObservabilityConfig.

        Enable Relay component

        :return: The enable_relay of this AdvancedDatapathObservabilityConfig.
        :rtype: bool
        """
        return self._enable_relay

    @enable_relay.setter
    def enable_relay(self, enable_relay):
        """Sets the enable_relay of this AdvancedDatapathObservabilityConfig.

        Enable Relay component

        :param enable_relay: The enable_relay of this AdvancedDatapathObservabilityConfig.
        :type enable_relay: bool
        """

        self._enable_relay = enable_relay

    @property
    def relay_mode(self):
        """Gets the relay_mode of this AdvancedDatapathObservabilityConfig.

        Method used to make Relay available

        :return: The relay_mode of this AdvancedDatapathObservabilityConfig.
        :rtype: str
        """
        return self._relay_mode

    @relay_mode.setter
    def relay_mode(self, relay_mode):
        """Sets the relay_mode of this AdvancedDatapathObservabilityConfig.

        Method used to make Relay available

        :param relay_mode: The relay_mode of this AdvancedDatapathObservabilityConfig.
        :type relay_mode: str
        """
        allowed_values = ["RELAY_MODE_UNSPECIFIED", "DISABLED", "INTERNAL_VPC_LB", "EXTERNAL_LB"]  # noqa: E501
        if relay_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `relay_mode` ({0}), must be one of {1}"
                .format(relay_mode, allowed_values)
            )

        self._relay_mode = relay_mode
