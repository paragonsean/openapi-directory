# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WorkloadConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audit_mode: str=None):
        """WorkloadConfig - a model defined in OpenAPI

        :param audit_mode: The audit_mode of this WorkloadConfig.
        """
        self.openapi_types = {
            'audit_mode': str
        }

        self.attribute_map = {
            'audit_mode': 'auditMode'
        }

        self._audit_mode = audit_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkloadConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkloadConfig of this WorkloadConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audit_mode(self):
        """Gets the audit_mode of this WorkloadConfig.

        Sets which mode of auditing should be used for the cluster's workloads.

        :return: The audit_mode of this WorkloadConfig.
        :rtype: str
        """
        return self._audit_mode

    @audit_mode.setter
    def audit_mode(self, audit_mode):
        """Sets the audit_mode of this WorkloadConfig.

        Sets which mode of auditing should be used for the cluster's workloads.

        :param audit_mode: The audit_mode of this WorkloadConfig.
        :type audit_mode: str
        """
        allowed_values = ["MODE_UNSPECIFIED", "DISABLED", "BASIC", "BASELINE", "RESTRICTED"]  # noqa: E501
        if audit_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `audit_mode` ({0}), must be one of {1}"
                .format(audit_mode, allowed_values)
            )

        self._audit_mode = audit_mode
