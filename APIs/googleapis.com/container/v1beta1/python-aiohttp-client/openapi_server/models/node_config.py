# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.accelerator_config import AcceleratorConfig
from openapi_server.models.advanced_machine_features import AdvancedMachineFeatures
from openapi_server.models.confidential_nodes import ConfidentialNodes
from openapi_server.models.ephemeral_storage_config import EphemeralStorageConfig
from openapi_server.models.ephemeral_storage_local_ssd_config import EphemeralStorageLocalSsdConfig
from openapi_server.models.fast_socket import FastSocket
from openapi_server.models.gcfs_config import GcfsConfig
from openapi_server.models.host_maintenance_policy import HostMaintenancePolicy
from openapi_server.models.linux_node_config import LinuxNodeConfig
from openapi_server.models.local_nvme_ssd_block_config import LocalNvmeSsdBlockConfig
from openapi_server.models.node_kubelet_config import NodeKubeletConfig
from openapi_server.models.node_pool_logging_config import NodePoolLoggingConfig
from openapi_server.models.node_taint import NodeTaint
from openapi_server.models.reservation_affinity import ReservationAffinity
from openapi_server.models.resource_manager_tags import ResourceManagerTags
from openapi_server.models.sandbox_config import SandboxConfig
from openapi_server.models.secondary_boot_disk import SecondaryBootDisk
from openapi_server.models.shielded_instance_config import ShieldedInstanceConfig
from openapi_server.models.sole_tenant_config import SoleTenantConfig
from openapi_server.models.virtual_nic import VirtualNIC
from openapi_server.models.windows_node_config import WindowsNodeConfig
from openapi_server.models.workload_metadata_config import WorkloadMetadataConfig
from openapi_server import util


class NodeConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accelerators: List[AcceleratorConfig]=None, advanced_machine_features: AdvancedMachineFeatures=None, boot_disk_kms_key: str=None, confidential_nodes: ConfidentialNodes=None, disk_size_gb: int=None, disk_type: str=None, enable_confidential_storage: bool=None, ephemeral_storage_config: EphemeralStorageConfig=None, ephemeral_storage_local_ssd_config: EphemeralStorageLocalSsdConfig=None, fast_socket: FastSocket=None, gcfs_config: GcfsConfig=None, gvnic: VirtualNIC=None, host_maintenance_policy: HostMaintenancePolicy=None, image_type: str=None, kubelet_config: NodeKubeletConfig=None, labels: Dict[str, str]=None, linux_node_config: LinuxNodeConfig=None, local_nvme_ssd_block_config: LocalNvmeSsdBlockConfig=None, local_ssd_count: int=None, logging_config: NodePoolLoggingConfig=None, machine_type: str=None, metadata: Dict[str, str]=None, min_cpu_platform: str=None, node_group: str=None, oauth_scopes: List[str]=None, preemptible: bool=None, reservation_affinity: ReservationAffinity=None, resource_labels: Dict[str, str]=None, resource_manager_tags: ResourceManagerTags=None, sandbox_config: SandboxConfig=None, secondary_boot_disks: List[SecondaryBootDisk]=None, service_account: str=None, shielded_instance_config: ShieldedInstanceConfig=None, sole_tenant_config: SoleTenantConfig=None, spot: bool=None, tags: List[str]=None, taints: List[NodeTaint]=None, windows_node_config: WindowsNodeConfig=None, workload_metadata_config: WorkloadMetadataConfig=None):
        """NodeConfig - a model defined in OpenAPI

        :param accelerators: The accelerators of this NodeConfig.
        :param advanced_machine_features: The advanced_machine_features of this NodeConfig.
        :param boot_disk_kms_key: The boot_disk_kms_key of this NodeConfig.
        :param confidential_nodes: The confidential_nodes of this NodeConfig.
        :param disk_size_gb: The disk_size_gb of this NodeConfig.
        :param disk_type: The disk_type of this NodeConfig.
        :param enable_confidential_storage: The enable_confidential_storage of this NodeConfig.
        :param ephemeral_storage_config: The ephemeral_storage_config of this NodeConfig.
        :param ephemeral_storage_local_ssd_config: The ephemeral_storage_local_ssd_config of this NodeConfig.
        :param fast_socket: The fast_socket of this NodeConfig.
        :param gcfs_config: The gcfs_config of this NodeConfig.
        :param gvnic: The gvnic of this NodeConfig.
        :param host_maintenance_policy: The host_maintenance_policy of this NodeConfig.
        :param image_type: The image_type of this NodeConfig.
        :param kubelet_config: The kubelet_config of this NodeConfig.
        :param labels: The labels of this NodeConfig.
        :param linux_node_config: The linux_node_config of this NodeConfig.
        :param local_nvme_ssd_block_config: The local_nvme_ssd_block_config of this NodeConfig.
        :param local_ssd_count: The local_ssd_count of this NodeConfig.
        :param logging_config: The logging_config of this NodeConfig.
        :param machine_type: The machine_type of this NodeConfig.
        :param metadata: The metadata of this NodeConfig.
        :param min_cpu_platform: The min_cpu_platform of this NodeConfig.
        :param node_group: The node_group of this NodeConfig.
        :param oauth_scopes: The oauth_scopes of this NodeConfig.
        :param preemptible: The preemptible of this NodeConfig.
        :param reservation_affinity: The reservation_affinity of this NodeConfig.
        :param resource_labels: The resource_labels of this NodeConfig.
        :param resource_manager_tags: The resource_manager_tags of this NodeConfig.
        :param sandbox_config: The sandbox_config of this NodeConfig.
        :param secondary_boot_disks: The secondary_boot_disks of this NodeConfig.
        :param service_account: The service_account of this NodeConfig.
        :param shielded_instance_config: The shielded_instance_config of this NodeConfig.
        :param sole_tenant_config: The sole_tenant_config of this NodeConfig.
        :param spot: The spot of this NodeConfig.
        :param tags: The tags of this NodeConfig.
        :param taints: The taints of this NodeConfig.
        :param windows_node_config: The windows_node_config of this NodeConfig.
        :param workload_metadata_config: The workload_metadata_config of this NodeConfig.
        """
        self.openapi_types = {
            'accelerators': List[AcceleratorConfig],
            'advanced_machine_features': AdvancedMachineFeatures,
            'boot_disk_kms_key': str,
            'confidential_nodes': ConfidentialNodes,
            'disk_size_gb': int,
            'disk_type': str,
            'enable_confidential_storage': bool,
            'ephemeral_storage_config': EphemeralStorageConfig,
            'ephemeral_storage_local_ssd_config': EphemeralStorageLocalSsdConfig,
            'fast_socket': FastSocket,
            'gcfs_config': GcfsConfig,
            'gvnic': VirtualNIC,
            'host_maintenance_policy': HostMaintenancePolicy,
            'image_type': str,
            'kubelet_config': NodeKubeletConfig,
            'labels': Dict[str, str],
            'linux_node_config': LinuxNodeConfig,
            'local_nvme_ssd_block_config': LocalNvmeSsdBlockConfig,
            'local_ssd_count': int,
            'logging_config': NodePoolLoggingConfig,
            'machine_type': str,
            'metadata': Dict[str, str],
            'min_cpu_platform': str,
            'node_group': str,
            'oauth_scopes': List[str],
            'preemptible': bool,
            'reservation_affinity': ReservationAffinity,
            'resource_labels': Dict[str, str],
            'resource_manager_tags': ResourceManagerTags,
            'sandbox_config': SandboxConfig,
            'secondary_boot_disks': List[SecondaryBootDisk],
            'service_account': str,
            'shielded_instance_config': ShieldedInstanceConfig,
            'sole_tenant_config': SoleTenantConfig,
            'spot': bool,
            'tags': List[str],
            'taints': List[NodeTaint],
            'windows_node_config': WindowsNodeConfig,
            'workload_metadata_config': WorkloadMetadataConfig
        }

        self.attribute_map = {
            'accelerators': 'accelerators',
            'advanced_machine_features': 'advancedMachineFeatures',
            'boot_disk_kms_key': 'bootDiskKmsKey',
            'confidential_nodes': 'confidentialNodes',
            'disk_size_gb': 'diskSizeGb',
            'disk_type': 'diskType',
            'enable_confidential_storage': 'enableConfidentialStorage',
            'ephemeral_storage_config': 'ephemeralStorageConfig',
            'ephemeral_storage_local_ssd_config': 'ephemeralStorageLocalSsdConfig',
            'fast_socket': 'fastSocket',
            'gcfs_config': 'gcfsConfig',
            'gvnic': 'gvnic',
            'host_maintenance_policy': 'hostMaintenancePolicy',
            'image_type': 'imageType',
            'kubelet_config': 'kubeletConfig',
            'labels': 'labels',
            'linux_node_config': 'linuxNodeConfig',
            'local_nvme_ssd_block_config': 'localNvmeSsdBlockConfig',
            'local_ssd_count': 'localSsdCount',
            'logging_config': 'loggingConfig',
            'machine_type': 'machineType',
            'metadata': 'metadata',
            'min_cpu_platform': 'minCpuPlatform',
            'node_group': 'nodeGroup',
            'oauth_scopes': 'oauthScopes',
            'preemptible': 'preemptible',
            'reservation_affinity': 'reservationAffinity',
            'resource_labels': 'resourceLabels',
            'resource_manager_tags': 'resourceManagerTags',
            'sandbox_config': 'sandboxConfig',
            'secondary_boot_disks': 'secondaryBootDisks',
            'service_account': 'serviceAccount',
            'shielded_instance_config': 'shieldedInstanceConfig',
            'sole_tenant_config': 'soleTenantConfig',
            'spot': 'spot',
            'tags': 'tags',
            'taints': 'taints',
            'windows_node_config': 'windowsNodeConfig',
            'workload_metadata_config': 'workloadMetadataConfig'
        }

        self._accelerators = accelerators
        self._advanced_machine_features = advanced_machine_features
        self._boot_disk_kms_key = boot_disk_kms_key
        self._confidential_nodes = confidential_nodes
        self._disk_size_gb = disk_size_gb
        self._disk_type = disk_type
        self._enable_confidential_storage = enable_confidential_storage
        self._ephemeral_storage_config = ephemeral_storage_config
        self._ephemeral_storage_local_ssd_config = ephemeral_storage_local_ssd_config
        self._fast_socket = fast_socket
        self._gcfs_config = gcfs_config
        self._gvnic = gvnic
        self._host_maintenance_policy = host_maintenance_policy
        self._image_type = image_type
        self._kubelet_config = kubelet_config
        self._labels = labels
        self._linux_node_config = linux_node_config
        self._local_nvme_ssd_block_config = local_nvme_ssd_block_config
        self._local_ssd_count = local_ssd_count
        self._logging_config = logging_config
        self._machine_type = machine_type
        self._metadata = metadata
        self._min_cpu_platform = min_cpu_platform
        self._node_group = node_group
        self._oauth_scopes = oauth_scopes
        self._preemptible = preemptible
        self._reservation_affinity = reservation_affinity
        self._resource_labels = resource_labels
        self._resource_manager_tags = resource_manager_tags
        self._sandbox_config = sandbox_config
        self._secondary_boot_disks = secondary_boot_disks
        self._service_account = service_account
        self._shielded_instance_config = shielded_instance_config
        self._sole_tenant_config = sole_tenant_config
        self._spot = spot
        self._tags = tags
        self._taints = taints
        self._windows_node_config = windows_node_config
        self._workload_metadata_config = workload_metadata_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeConfig of this NodeConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accelerators(self):
        """Gets the accelerators of this NodeConfig.

        A list of hardware accelerators to be attached to each node. See https://cloud.google.com/compute/docs/gpus for more information about support for GPUs.

        :return: The accelerators of this NodeConfig.
        :rtype: List[AcceleratorConfig]
        """
        return self._accelerators

    @accelerators.setter
    def accelerators(self, accelerators):
        """Sets the accelerators of this NodeConfig.

        A list of hardware accelerators to be attached to each node. See https://cloud.google.com/compute/docs/gpus for more information about support for GPUs.

        :param accelerators: The accelerators of this NodeConfig.
        :type accelerators: List[AcceleratorConfig]
        """

        self._accelerators = accelerators

    @property
    def advanced_machine_features(self):
        """Gets the advanced_machine_features of this NodeConfig.


        :return: The advanced_machine_features of this NodeConfig.
        :rtype: AdvancedMachineFeatures
        """
        return self._advanced_machine_features

    @advanced_machine_features.setter
    def advanced_machine_features(self, advanced_machine_features):
        """Sets the advanced_machine_features of this NodeConfig.


        :param advanced_machine_features: The advanced_machine_features of this NodeConfig.
        :type advanced_machine_features: AdvancedMachineFeatures
        """

        self._advanced_machine_features = advanced_machine_features

    @property
    def boot_disk_kms_key(self):
        """Gets the boot_disk_kms_key of this NodeConfig.

         The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption

        :return: The boot_disk_kms_key of this NodeConfig.
        :rtype: str
        """
        return self._boot_disk_kms_key

    @boot_disk_kms_key.setter
    def boot_disk_kms_key(self, boot_disk_kms_key):
        """Sets the boot_disk_kms_key of this NodeConfig.

         The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption

        :param boot_disk_kms_key: The boot_disk_kms_key of this NodeConfig.
        :type boot_disk_kms_key: str
        """

        self._boot_disk_kms_key = boot_disk_kms_key

    @property
    def confidential_nodes(self):
        """Gets the confidential_nodes of this NodeConfig.


        :return: The confidential_nodes of this NodeConfig.
        :rtype: ConfidentialNodes
        """
        return self._confidential_nodes

    @confidential_nodes.setter
    def confidential_nodes(self, confidential_nodes):
        """Sets the confidential_nodes of this NodeConfig.


        :param confidential_nodes: The confidential_nodes of this NodeConfig.
        :type confidential_nodes: ConfidentialNodes
        """

        self._confidential_nodes = confidential_nodes

    @property
    def disk_size_gb(self):
        """Gets the disk_size_gb of this NodeConfig.

        Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.

        :return: The disk_size_gb of this NodeConfig.
        :rtype: int
        """
        return self._disk_size_gb

    @disk_size_gb.setter
    def disk_size_gb(self, disk_size_gb):
        """Sets the disk_size_gb of this NodeConfig.

        Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.

        :param disk_size_gb: The disk_size_gb of this NodeConfig.
        :type disk_size_gb: int
        """

        self._disk_size_gb = disk_size_gb

    @property
    def disk_type(self):
        """Gets the disk_type of this NodeConfig.

        Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'

        :return: The disk_type of this NodeConfig.
        :rtype: str
        """
        return self._disk_type

    @disk_type.setter
    def disk_type(self, disk_type):
        """Sets the disk_type of this NodeConfig.

        Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'

        :param disk_type: The disk_type of this NodeConfig.
        :type disk_type: str
        """

        self._disk_type = disk_type

    @property
    def enable_confidential_storage(self):
        """Gets the enable_confidential_storage of this NodeConfig.

        Optional. Reserved for future use.

        :return: The enable_confidential_storage of this NodeConfig.
        :rtype: bool
        """
        return self._enable_confidential_storage

    @enable_confidential_storage.setter
    def enable_confidential_storage(self, enable_confidential_storage):
        """Sets the enable_confidential_storage of this NodeConfig.

        Optional. Reserved for future use.

        :param enable_confidential_storage: The enable_confidential_storage of this NodeConfig.
        :type enable_confidential_storage: bool
        """

        self._enable_confidential_storage = enable_confidential_storage

    @property
    def ephemeral_storage_config(self):
        """Gets the ephemeral_storage_config of this NodeConfig.


        :return: The ephemeral_storage_config of this NodeConfig.
        :rtype: EphemeralStorageConfig
        """
        return self._ephemeral_storage_config

    @ephemeral_storage_config.setter
    def ephemeral_storage_config(self, ephemeral_storage_config):
        """Sets the ephemeral_storage_config of this NodeConfig.


        :param ephemeral_storage_config: The ephemeral_storage_config of this NodeConfig.
        :type ephemeral_storage_config: EphemeralStorageConfig
        """

        self._ephemeral_storage_config = ephemeral_storage_config

    @property
    def ephemeral_storage_local_ssd_config(self):
        """Gets the ephemeral_storage_local_ssd_config of this NodeConfig.


        :return: The ephemeral_storage_local_ssd_config of this NodeConfig.
        :rtype: EphemeralStorageLocalSsdConfig
        """
        return self._ephemeral_storage_local_ssd_config

    @ephemeral_storage_local_ssd_config.setter
    def ephemeral_storage_local_ssd_config(self, ephemeral_storage_local_ssd_config):
        """Sets the ephemeral_storage_local_ssd_config of this NodeConfig.


        :param ephemeral_storage_local_ssd_config: The ephemeral_storage_local_ssd_config of this NodeConfig.
        :type ephemeral_storage_local_ssd_config: EphemeralStorageLocalSsdConfig
        """

        self._ephemeral_storage_local_ssd_config = ephemeral_storage_local_ssd_config

    @property
    def fast_socket(self):
        """Gets the fast_socket of this NodeConfig.


        :return: The fast_socket of this NodeConfig.
        :rtype: FastSocket
        """
        return self._fast_socket

    @fast_socket.setter
    def fast_socket(self, fast_socket):
        """Sets the fast_socket of this NodeConfig.


        :param fast_socket: The fast_socket of this NodeConfig.
        :type fast_socket: FastSocket
        """

        self._fast_socket = fast_socket

    @property
    def gcfs_config(self):
        """Gets the gcfs_config of this NodeConfig.


        :return: The gcfs_config of this NodeConfig.
        :rtype: GcfsConfig
        """
        return self._gcfs_config

    @gcfs_config.setter
    def gcfs_config(self, gcfs_config):
        """Sets the gcfs_config of this NodeConfig.


        :param gcfs_config: The gcfs_config of this NodeConfig.
        :type gcfs_config: GcfsConfig
        """

        self._gcfs_config = gcfs_config

    @property
    def gvnic(self):
        """Gets the gvnic of this NodeConfig.


        :return: The gvnic of this NodeConfig.
        :rtype: VirtualNIC
        """
        return self._gvnic

    @gvnic.setter
    def gvnic(self, gvnic):
        """Sets the gvnic of this NodeConfig.


        :param gvnic: The gvnic of this NodeConfig.
        :type gvnic: VirtualNIC
        """

        self._gvnic = gvnic

    @property
    def host_maintenance_policy(self):
        """Gets the host_maintenance_policy of this NodeConfig.


        :return: The host_maintenance_policy of this NodeConfig.
        :rtype: HostMaintenancePolicy
        """
        return self._host_maintenance_policy

    @host_maintenance_policy.setter
    def host_maintenance_policy(self, host_maintenance_policy):
        """Sets the host_maintenance_policy of this NodeConfig.


        :param host_maintenance_policy: The host_maintenance_policy of this NodeConfig.
        :type host_maintenance_policy: HostMaintenancePolicy
        """

        self._host_maintenance_policy = host_maintenance_policy

    @property
    def image_type(self):
        """Gets the image_type of this NodeConfig.

        The image type to use for this node. Note that for a given image type, the latest version of it will be used. Please see https://cloud.google.com/kubernetes-engine/docs/concepts/node-images for available image types.

        :return: The image_type of this NodeConfig.
        :rtype: str
        """
        return self._image_type

    @image_type.setter
    def image_type(self, image_type):
        """Sets the image_type of this NodeConfig.

        The image type to use for this node. Note that for a given image type, the latest version of it will be used. Please see https://cloud.google.com/kubernetes-engine/docs/concepts/node-images for available image types.

        :param image_type: The image_type of this NodeConfig.
        :type image_type: str
        """

        self._image_type = image_type

    @property
    def kubelet_config(self):
        """Gets the kubelet_config of this NodeConfig.


        :return: The kubelet_config of this NodeConfig.
        :rtype: NodeKubeletConfig
        """
        return self._kubelet_config

    @kubelet_config.setter
    def kubelet_config(self, kubelet_config):
        """Sets the kubelet_config of this NodeConfig.


        :param kubelet_config: The kubelet_config of this NodeConfig.
        :type kubelet_config: NodeKubeletConfig
        """

        self._kubelet_config = kubelet_config

    @property
    def labels(self):
        """Gets the labels of this NodeConfig.

        The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in label keys, the applied set may differ depending on the Kubernetes version -- it's best to assume the behavior is undefined and conflicts should be avoided. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/

        :return: The labels of this NodeConfig.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this NodeConfig.

        The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in label keys, the applied set may differ depending on the Kubernetes version -- it's best to assume the behavior is undefined and conflicts should be avoided. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/

        :param labels: The labels of this NodeConfig.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def linux_node_config(self):
        """Gets the linux_node_config of this NodeConfig.


        :return: The linux_node_config of this NodeConfig.
        :rtype: LinuxNodeConfig
        """
        return self._linux_node_config

    @linux_node_config.setter
    def linux_node_config(self, linux_node_config):
        """Sets the linux_node_config of this NodeConfig.


        :param linux_node_config: The linux_node_config of this NodeConfig.
        :type linux_node_config: LinuxNodeConfig
        """

        self._linux_node_config = linux_node_config

    @property
    def local_nvme_ssd_block_config(self):
        """Gets the local_nvme_ssd_block_config of this NodeConfig.


        :return: The local_nvme_ssd_block_config of this NodeConfig.
        :rtype: LocalNvmeSsdBlockConfig
        """
        return self._local_nvme_ssd_block_config

    @local_nvme_ssd_block_config.setter
    def local_nvme_ssd_block_config(self, local_nvme_ssd_block_config):
        """Sets the local_nvme_ssd_block_config of this NodeConfig.


        :param local_nvme_ssd_block_config: The local_nvme_ssd_block_config of this NodeConfig.
        :type local_nvme_ssd_block_config: LocalNvmeSsdBlockConfig
        """

        self._local_nvme_ssd_block_config = local_nvme_ssd_block_config

    @property
    def local_ssd_count(self):
        """Gets the local_ssd_count of this NodeConfig.

        The number of local SSD disks to be attached to the node. The limit for this value is dependent upon the maximum number of disks available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information.

        :return: The local_ssd_count of this NodeConfig.
        :rtype: int
        """
        return self._local_ssd_count

    @local_ssd_count.setter
    def local_ssd_count(self, local_ssd_count):
        """Sets the local_ssd_count of this NodeConfig.

        The number of local SSD disks to be attached to the node. The limit for this value is dependent upon the maximum number of disks available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information.

        :param local_ssd_count: The local_ssd_count of this NodeConfig.
        :type local_ssd_count: int
        """

        self._local_ssd_count = local_ssd_count

    @property
    def logging_config(self):
        """Gets the logging_config of this NodeConfig.


        :return: The logging_config of this NodeConfig.
        :rtype: NodePoolLoggingConfig
        """
        return self._logging_config

    @logging_config.setter
    def logging_config(self, logging_config):
        """Sets the logging_config of this NodeConfig.


        :param logging_config: The logging_config of this NodeConfig.
        :type logging_config: NodePoolLoggingConfig
        """

        self._logging_config = logging_config

    @property
    def machine_type(self):
        """Gets the machine_type of this NodeConfig.

        The name of a Google Compute Engine [machine type](https://cloud.google.com/compute/docs/machine-types). If unspecified, the default machine type is `e2-medium`.

        :return: The machine_type of this NodeConfig.
        :rtype: str
        """
        return self._machine_type

    @machine_type.setter
    def machine_type(self, machine_type):
        """Sets the machine_type of this NodeConfig.

        The name of a Google Compute Engine [machine type](https://cloud.google.com/compute/docs/machine-types). If unspecified, the default machine type is `e2-medium`.

        :param machine_type: The machine_type of this NodeConfig.
        :type machine_type: str
        """

        self._machine_type = machine_type

    @property
    def metadata(self):
        """Gets the metadata of this NodeConfig.

        The metadata key/value pairs assigned to instances in the cluster. Keys must conform to the regexp `[a-zA-Z0-9-_]+` and be less than 128 bytes in length. These are reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project or be one of the reserved keys: - \"cluster-location\" - \"cluster-name\" - \"cluster-uid\" - \"configure-sh\" - \"containerd-configure-sh\" - \"enable-oslogin\" - \"gci-ensure-gke-docker\" - \"gci-metrics-enabled\" - \"gci-update-strategy\" - \"instance-template\" - \"kube-env\" - \"startup-script\" - \"user-data\" - \"disable-address-manager\" - \"windows-startup-script-ps1\" - \"common-psm1\" - \"k8s-node-setup-psm1\" - \"install-ssh-psm1\" - \"user-profile-psm1\" Values are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on them is that each value's size must be less than or equal to 32 KB. The total size of all keys and values must be less than 512 KB.

        :return: The metadata of this NodeConfig.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this NodeConfig.

        The metadata key/value pairs assigned to instances in the cluster. Keys must conform to the regexp `[a-zA-Z0-9-_]+` and be less than 128 bytes in length. These are reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project or be one of the reserved keys: - \"cluster-location\" - \"cluster-name\" - \"cluster-uid\" - \"configure-sh\" - \"containerd-configure-sh\" - \"enable-oslogin\" - \"gci-ensure-gke-docker\" - \"gci-metrics-enabled\" - \"gci-update-strategy\" - \"instance-template\" - \"kube-env\" - \"startup-script\" - \"user-data\" - \"disable-address-manager\" - \"windows-startup-script-ps1\" - \"common-psm1\" - \"k8s-node-setup-psm1\" - \"install-ssh-psm1\" - \"user-profile-psm1\" Values are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on them is that each value's size must be less than or equal to 32 KB. The total size of all keys and values must be less than 512 KB.

        :param metadata: The metadata of this NodeConfig.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def min_cpu_platform(self):
        """Gets the min_cpu_platform of this NodeConfig.

        Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as `minCpuPlatform: \"Intel Haswell\"` or `minCpuPlatform: \"Intel Sandy Bridge\"`. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform).

        :return: The min_cpu_platform of this NodeConfig.
        :rtype: str
        """
        return self._min_cpu_platform

    @min_cpu_platform.setter
    def min_cpu_platform(self, min_cpu_platform):
        """Sets the min_cpu_platform of this NodeConfig.

        Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as `minCpuPlatform: \"Intel Haswell\"` or `minCpuPlatform: \"Intel Sandy Bridge\"`. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform).

        :param min_cpu_platform: The min_cpu_platform of this NodeConfig.
        :type min_cpu_platform: str
        """

        self._min_cpu_platform = min_cpu_platform

    @property
    def node_group(self):
        """Gets the node_group of this NodeConfig.

        Setting this field will assign instances of this pool to run on the specified node group. This is useful for running workloads on [sole tenant nodes](https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes).

        :return: The node_group of this NodeConfig.
        :rtype: str
        """
        return self._node_group

    @node_group.setter
    def node_group(self, node_group):
        """Sets the node_group of this NodeConfig.

        Setting this field will assign instances of this pool to run on the specified node group. This is useful for running workloads on [sole tenant nodes](https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes).

        :param node_group: The node_group of this NodeConfig.
        :type node_group: str
        """

        self._node_group = node_group

    @property
    def oauth_scopes(self):
        """Gets the oauth_scopes of this NodeConfig.

        The set of Google API scopes to be made available on all of the node VMs under the \"default\" service account. The following scopes are recommended, but not required, and by default are not included: * `https://www.googleapis.com/auth/compute` is required for mounting persistent storage on your nodes. * `https://www.googleapis.com/auth/devstorage.read_only` is required for communicating with **gcr.io** (the [Google Container Registry](https://cloud.google.com/container-registry/)). If unspecified, no scopes are added, unless Cloud Logging or Cloud Monitoring are enabled, in which case their required scopes will be added.

        :return: The oauth_scopes of this NodeConfig.
        :rtype: List[str]
        """
        return self._oauth_scopes

    @oauth_scopes.setter
    def oauth_scopes(self, oauth_scopes):
        """Sets the oauth_scopes of this NodeConfig.

        The set of Google API scopes to be made available on all of the node VMs under the \"default\" service account. The following scopes are recommended, but not required, and by default are not included: * `https://www.googleapis.com/auth/compute` is required for mounting persistent storage on your nodes. * `https://www.googleapis.com/auth/devstorage.read_only` is required for communicating with **gcr.io** (the [Google Container Registry](https://cloud.google.com/container-registry/)). If unspecified, no scopes are added, unless Cloud Logging or Cloud Monitoring are enabled, in which case their required scopes will be added.

        :param oauth_scopes: The oauth_scopes of this NodeConfig.
        :type oauth_scopes: List[str]
        """

        self._oauth_scopes = oauth_scopes

    @property
    def preemptible(self):
        """Gets the preemptible of this NodeConfig.

        Whether the nodes are created as preemptible VM instances. See: https://cloud.google.com/compute/docs/instances/preemptible for more information about preemptible VM instances.

        :return: The preemptible of this NodeConfig.
        :rtype: bool
        """
        return self._preemptible

    @preemptible.setter
    def preemptible(self, preemptible):
        """Sets the preemptible of this NodeConfig.

        Whether the nodes are created as preemptible VM instances. See: https://cloud.google.com/compute/docs/instances/preemptible for more information about preemptible VM instances.

        :param preemptible: The preemptible of this NodeConfig.
        :type preemptible: bool
        """

        self._preemptible = preemptible

    @property
    def reservation_affinity(self):
        """Gets the reservation_affinity of this NodeConfig.


        :return: The reservation_affinity of this NodeConfig.
        :rtype: ReservationAffinity
        """
        return self._reservation_affinity

    @reservation_affinity.setter
    def reservation_affinity(self, reservation_affinity):
        """Sets the reservation_affinity of this NodeConfig.


        :param reservation_affinity: The reservation_affinity of this NodeConfig.
        :type reservation_affinity: ReservationAffinity
        """

        self._reservation_affinity = reservation_affinity

    @property
    def resource_labels(self):
        """Gets the resource_labels of this NodeConfig.

        The resource labels for the node pool to use to annotate any related Google Compute Engine resources.

        :return: The resource_labels of this NodeConfig.
        :rtype: Dict[str, str]
        """
        return self._resource_labels

    @resource_labels.setter
    def resource_labels(self, resource_labels):
        """Sets the resource_labels of this NodeConfig.

        The resource labels for the node pool to use to annotate any related Google Compute Engine resources.

        :param resource_labels: The resource_labels of this NodeConfig.
        :type resource_labels: Dict[str, str]
        """

        self._resource_labels = resource_labels

    @property
    def resource_manager_tags(self):
        """Gets the resource_manager_tags of this NodeConfig.


        :return: The resource_manager_tags of this NodeConfig.
        :rtype: ResourceManagerTags
        """
        return self._resource_manager_tags

    @resource_manager_tags.setter
    def resource_manager_tags(self, resource_manager_tags):
        """Sets the resource_manager_tags of this NodeConfig.


        :param resource_manager_tags: The resource_manager_tags of this NodeConfig.
        :type resource_manager_tags: ResourceManagerTags
        """

        self._resource_manager_tags = resource_manager_tags

    @property
    def sandbox_config(self):
        """Gets the sandbox_config of this NodeConfig.


        :return: The sandbox_config of this NodeConfig.
        :rtype: SandboxConfig
        """
        return self._sandbox_config

    @sandbox_config.setter
    def sandbox_config(self, sandbox_config):
        """Sets the sandbox_config of this NodeConfig.


        :param sandbox_config: The sandbox_config of this NodeConfig.
        :type sandbox_config: SandboxConfig
        """

        self._sandbox_config = sandbox_config

    @property
    def secondary_boot_disks(self):
        """Gets the secondary_boot_disks of this NodeConfig.

        List of secondary boot disks attached to the nodes.

        :return: The secondary_boot_disks of this NodeConfig.
        :rtype: List[SecondaryBootDisk]
        """
        return self._secondary_boot_disks

    @secondary_boot_disks.setter
    def secondary_boot_disks(self, secondary_boot_disks):
        """Sets the secondary_boot_disks of this NodeConfig.

        List of secondary boot disks attached to the nodes.

        :param secondary_boot_disks: The secondary_boot_disks of this NodeConfig.
        :type secondary_boot_disks: List[SecondaryBootDisk]
        """

        self._secondary_boot_disks = secondary_boot_disks

    @property
    def service_account(self):
        """Gets the service_account of this NodeConfig.

        The Google Cloud Platform Service Account to be used by the node VMs. Specify the email address of the Service Account; otherwise, if no Service Account is specified, the \"default\" service account is used.

        :return: The service_account of this NodeConfig.
        :rtype: str
        """
        return self._service_account

    @service_account.setter
    def service_account(self, service_account):
        """Sets the service_account of this NodeConfig.

        The Google Cloud Platform Service Account to be used by the node VMs. Specify the email address of the Service Account; otherwise, if no Service Account is specified, the \"default\" service account is used.

        :param service_account: The service_account of this NodeConfig.
        :type service_account: str
        """

        self._service_account = service_account

    @property
    def shielded_instance_config(self):
        """Gets the shielded_instance_config of this NodeConfig.


        :return: The shielded_instance_config of this NodeConfig.
        :rtype: ShieldedInstanceConfig
        """
        return self._shielded_instance_config

    @shielded_instance_config.setter
    def shielded_instance_config(self, shielded_instance_config):
        """Sets the shielded_instance_config of this NodeConfig.


        :param shielded_instance_config: The shielded_instance_config of this NodeConfig.
        :type shielded_instance_config: ShieldedInstanceConfig
        """

        self._shielded_instance_config = shielded_instance_config

    @property
    def sole_tenant_config(self):
        """Gets the sole_tenant_config of this NodeConfig.


        :return: The sole_tenant_config of this NodeConfig.
        :rtype: SoleTenantConfig
        """
        return self._sole_tenant_config

    @sole_tenant_config.setter
    def sole_tenant_config(self, sole_tenant_config):
        """Sets the sole_tenant_config of this NodeConfig.


        :param sole_tenant_config: The sole_tenant_config of this NodeConfig.
        :type sole_tenant_config: SoleTenantConfig
        """

        self._sole_tenant_config = sole_tenant_config

    @property
    def spot(self):
        """Gets the spot of this NodeConfig.

        Spot flag for enabling Spot VM, which is a rebrand of the existing preemptible flag.

        :return: The spot of this NodeConfig.
        :rtype: bool
        """
        return self._spot

    @spot.setter
    def spot(self, spot):
        """Sets the spot of this NodeConfig.

        Spot flag for enabling Spot VM, which is a rebrand of the existing preemptible flag.

        :param spot: The spot of this NodeConfig.
        :type spot: bool
        """

        self._spot = spot

    @property
    def tags(self):
        """Gets the tags of this NodeConfig.

        The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035.

        :return: The tags of this NodeConfig.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this NodeConfig.

        The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035.

        :param tags: The tags of this NodeConfig.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def taints(self):
        """Gets the taints of this NodeConfig.

        List of kubernetes taints to be applied to each node. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/

        :return: The taints of this NodeConfig.
        :rtype: List[NodeTaint]
        """
        return self._taints

    @taints.setter
    def taints(self, taints):
        """Sets the taints of this NodeConfig.

        List of kubernetes taints to be applied to each node. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/

        :param taints: The taints of this NodeConfig.
        :type taints: List[NodeTaint]
        """

        self._taints = taints

    @property
    def windows_node_config(self):
        """Gets the windows_node_config of this NodeConfig.


        :return: The windows_node_config of this NodeConfig.
        :rtype: WindowsNodeConfig
        """
        return self._windows_node_config

    @windows_node_config.setter
    def windows_node_config(self, windows_node_config):
        """Sets the windows_node_config of this NodeConfig.


        :param windows_node_config: The windows_node_config of this NodeConfig.
        :type windows_node_config: WindowsNodeConfig
        """

        self._windows_node_config = windows_node_config

    @property
    def workload_metadata_config(self):
        """Gets the workload_metadata_config of this NodeConfig.


        :return: The workload_metadata_config of this NodeConfig.
        :rtype: WorkloadMetadataConfig
        """
        return self._workload_metadata_config

    @workload_metadata_config.setter
    def workload_metadata_config(self, workload_metadata_config):
        """Sets the workload_metadata_config of this NodeConfig.


        :param workload_metadata_config: The workload_metadata_config of this NodeConfig.
        :type workload_metadata_config: WorkloadMetadataConfig
        """

        self._workload_metadata_config = workload_metadata_config
