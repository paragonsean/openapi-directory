# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BlueGreenInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blue_instance_group_urls: List[str]=None, blue_pool_deletion_start_time: str=None, green_instance_group_urls: List[str]=None, green_pool_version: str=None, phase: str=None):
        """BlueGreenInfo - a model defined in OpenAPI

        :param blue_instance_group_urls: The blue_instance_group_urls of this BlueGreenInfo.
        :param blue_pool_deletion_start_time: The blue_pool_deletion_start_time of this BlueGreenInfo.
        :param green_instance_group_urls: The green_instance_group_urls of this BlueGreenInfo.
        :param green_pool_version: The green_pool_version of this BlueGreenInfo.
        :param phase: The phase of this BlueGreenInfo.
        """
        self.openapi_types = {
            'blue_instance_group_urls': List[str],
            'blue_pool_deletion_start_time': str,
            'green_instance_group_urls': List[str],
            'green_pool_version': str,
            'phase': str
        }

        self.attribute_map = {
            'blue_instance_group_urls': 'blueInstanceGroupUrls',
            'blue_pool_deletion_start_time': 'bluePoolDeletionStartTime',
            'green_instance_group_urls': 'greenInstanceGroupUrls',
            'green_pool_version': 'greenPoolVersion',
            'phase': 'phase'
        }

        self._blue_instance_group_urls = blue_instance_group_urls
        self._blue_pool_deletion_start_time = blue_pool_deletion_start_time
        self._green_instance_group_urls = green_instance_group_urls
        self._green_pool_version = green_pool_version
        self._phase = phase

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BlueGreenInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BlueGreenInfo of this BlueGreenInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blue_instance_group_urls(self):
        """Gets the blue_instance_group_urls of this BlueGreenInfo.

        The resource URLs of the [managed instance groups] (/compute/docs/instance-groups/creating-groups-of-managed-instances) associated with blue pool.

        :return: The blue_instance_group_urls of this BlueGreenInfo.
        :rtype: List[str]
        """
        return self._blue_instance_group_urls

    @blue_instance_group_urls.setter
    def blue_instance_group_urls(self, blue_instance_group_urls):
        """Sets the blue_instance_group_urls of this BlueGreenInfo.

        The resource URLs of the [managed instance groups] (/compute/docs/instance-groups/creating-groups-of-managed-instances) associated with blue pool.

        :param blue_instance_group_urls: The blue_instance_group_urls of this BlueGreenInfo.
        :type blue_instance_group_urls: List[str]
        """

        self._blue_instance_group_urls = blue_instance_group_urls

    @property
    def blue_pool_deletion_start_time(self):
        """Gets the blue_pool_deletion_start_time of this BlueGreenInfo.

        Time to start deleting blue pool to complete blue-green upgrade, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.

        :return: The blue_pool_deletion_start_time of this BlueGreenInfo.
        :rtype: str
        """
        return self._blue_pool_deletion_start_time

    @blue_pool_deletion_start_time.setter
    def blue_pool_deletion_start_time(self, blue_pool_deletion_start_time):
        """Sets the blue_pool_deletion_start_time of this BlueGreenInfo.

        Time to start deleting blue pool to complete blue-green upgrade, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.

        :param blue_pool_deletion_start_time: The blue_pool_deletion_start_time of this BlueGreenInfo.
        :type blue_pool_deletion_start_time: str
        """

        self._blue_pool_deletion_start_time = blue_pool_deletion_start_time

    @property
    def green_instance_group_urls(self):
        """Gets the green_instance_group_urls of this BlueGreenInfo.

        The resource URLs of the [managed instance groups] (/compute/docs/instance-groups/creating-groups-of-managed-instances) associated with green pool.

        :return: The green_instance_group_urls of this BlueGreenInfo.
        :rtype: List[str]
        """
        return self._green_instance_group_urls

    @green_instance_group_urls.setter
    def green_instance_group_urls(self, green_instance_group_urls):
        """Sets the green_instance_group_urls of this BlueGreenInfo.

        The resource URLs of the [managed instance groups] (/compute/docs/instance-groups/creating-groups-of-managed-instances) associated with green pool.

        :param green_instance_group_urls: The green_instance_group_urls of this BlueGreenInfo.
        :type green_instance_group_urls: List[str]
        """

        self._green_instance_group_urls = green_instance_group_urls

    @property
    def green_pool_version(self):
        """Gets the green_pool_version of this BlueGreenInfo.

        Version of green pool.

        :return: The green_pool_version of this BlueGreenInfo.
        :rtype: str
        """
        return self._green_pool_version

    @green_pool_version.setter
    def green_pool_version(self, green_pool_version):
        """Sets the green_pool_version of this BlueGreenInfo.

        Version of green pool.

        :param green_pool_version: The green_pool_version of this BlueGreenInfo.
        :type green_pool_version: str
        """

        self._green_pool_version = green_pool_version

    @property
    def phase(self):
        """Gets the phase of this BlueGreenInfo.

        Current blue-green upgrade phase.

        :return: The phase of this BlueGreenInfo.
        :rtype: str
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this BlueGreenInfo.

        Current blue-green upgrade phase.

        :param phase: The phase of this BlueGreenInfo.
        :type phase: str
        """
        allowed_values = ["PHASE_UNSPECIFIED", "UPDATE_STARTED", "CREATING_GREEN_POOL", "CORDONING_BLUE_POOL", "WAITING_TO_DRAIN_BLUE_POOL", "DRAINING_BLUE_POOL", "NODE_POOL_SOAKING", "DELETING_BLUE_POOL", "ROLLBACK_STARTED"]  # noqa: E501
        if phase not in allowed_values:
            raise ValueError(
                "Invalid value for `phase` ({0}), must be one of {1}"
                .format(phase, allowed_values)
            )

        self._phase = phase
