/*
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies options for controlling advanced machine features.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:27.538902-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AdvancedMachineFeatures {
  public static final String SERIALIZED_NAME_THREADS_PER_CORE = "threadsPerCore";
  @SerializedName(SERIALIZED_NAME_THREADS_PER_CORE)
  private String threadsPerCore;

  public AdvancedMachineFeatures() {
  }

  public AdvancedMachineFeatures threadsPerCore(String threadsPerCore) {
    this.threadsPerCore = threadsPerCore;
    return this;
  }

  /**
   * The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
   * @return threadsPerCore
   */
  @javax.annotation.Nullable
  public String getThreadsPerCore() {
    return threadsPerCore;
  }

  public void setThreadsPerCore(String threadsPerCore) {
    this.threadsPerCore = threadsPerCore;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdvancedMachineFeatures advancedMachineFeatures = (AdvancedMachineFeatures) o;
    return Objects.equals(this.threadsPerCore, advancedMachineFeatures.threadsPerCore);
  }

  @Override
  public int hashCode() {
    return Objects.hash(threadsPerCore);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdvancedMachineFeatures {\n");
    sb.append("    threadsPerCore: ").append(toIndentedString(threadsPerCore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("threadsPerCore");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdvancedMachineFeatures
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdvancedMachineFeatures.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdvancedMachineFeatures is not found in the empty JSON string", AdvancedMachineFeatures.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdvancedMachineFeatures.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdvancedMachineFeatures` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("threadsPerCore") != null && !jsonObj.get("threadsPerCore").isJsonNull()) && !jsonObj.get("threadsPerCore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `threadsPerCore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("threadsPerCore").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdvancedMachineFeatures.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdvancedMachineFeatures' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdvancedMachineFeatures> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdvancedMachineFeatures.class));

       return (TypeAdapter<T>) new TypeAdapter<AdvancedMachineFeatures>() {
           @Override
           public void write(JsonWriter out, AdvancedMachineFeatures value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdvancedMachineFeatures read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdvancedMachineFeatures given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdvancedMachineFeatures
   * @throws IOException if the JSON string is invalid with respect to AdvancedMachineFeatures
   */
  public static AdvancedMachineFeatures fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdvancedMachineFeatures.class);
  }

  /**
   * Convert an instance of AdvancedMachineFeatures to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

