/*
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SetLabelsRequest sets the Google Cloud Platform labels on a Google Container Engine cluster, which will in turn set them for Google Compute Engine resources used by that cluster
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:27.538902-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SetLabelsRequest {
  public static final String SERIALIZED_NAME_CLUSTER_ID = "clusterId";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_CLUSTER_ID)
  private String clusterId;

  public static final String SERIALIZED_NAME_LABEL_FINGERPRINT = "labelFingerprint";
  @SerializedName(SERIALIZED_NAME_LABEL_FINGERPRINT)
  private String labelFingerprint;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private String projectId;

  public static final String SERIALIZED_NAME_RESOURCE_LABELS = "resourceLabels";
  @SerializedName(SERIALIZED_NAME_RESOURCE_LABELS)
  private Map<String, String> resourceLabels = new HashMap<>();

  public static final String SERIALIZED_NAME_ZONE = "zone";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_ZONE)
  private String zone;

  public SetLabelsRequest() {
  }

  @Deprecated
  public SetLabelsRequest clusterId(String clusterId) {
    this.clusterId = clusterId;
    return this;
  }

  /**
   * Required. Deprecated. The name of the cluster. This field has been deprecated and replaced by the name field.
   * @return clusterId
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getClusterId() {
    return clusterId;
  }

  @Deprecated
  public void setClusterId(String clusterId) {
    this.clusterId = clusterId;
  }


  public SetLabelsRequest labelFingerprint(String labelFingerprint) {
    this.labelFingerprint = labelFingerprint;
    return this;
  }

  /**
   * Required. The fingerprint of the previous set of labels for this resource, used to detect conflicts. The fingerprint is initially generated by Kubernetes Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash when updating or changing labels. Make a &#x60;get()&#x60; request to the resource to get the latest fingerprint.
   * @return labelFingerprint
   */
  @javax.annotation.Nullable
  public String getLabelFingerprint() {
    return labelFingerprint;
  }

  public void setLabelFingerprint(String labelFingerprint) {
    this.labelFingerprint = labelFingerprint;
  }


  public SetLabelsRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name (project, location, cluster name) of the cluster to set labels. Specified in the format &#x60;projects/_*_/locations/_*_/clusters/_*&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  @Deprecated
  public SetLabelsRequest projectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.
   * @return projectId
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getProjectId() {
    return projectId;
  }

  @Deprecated
  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }


  public SetLabelsRequest resourceLabels(Map<String, String> resourceLabels) {
    this.resourceLabels = resourceLabels;
    return this;
  }

  public SetLabelsRequest putResourceLabelsItem(String key, String resourceLabelsItem) {
    if (this.resourceLabels == null) {
      this.resourceLabels = new HashMap<>();
    }
    this.resourceLabels.put(key, resourceLabelsItem);
    return this;
  }

  /**
   * Required. The labels to set for that cluster.
   * @return resourceLabels
   */
  @javax.annotation.Nullable
  public Map<String, String> getResourceLabels() {
    return resourceLabels;
  }

  public void setResourceLabels(Map<String, String> resourceLabels) {
    this.resourceLabels = resourceLabels;
  }


  @Deprecated
  public SetLabelsRequest zone(String zone) {
    this.zone = zone;
    return this;
  }

  /**
   * Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.
   * @return zone
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getZone() {
    return zone;
  }

  @Deprecated
  public void setZone(String zone) {
    this.zone = zone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SetLabelsRequest setLabelsRequest = (SetLabelsRequest) o;
    return Objects.equals(this.clusterId, setLabelsRequest.clusterId) &&
        Objects.equals(this.labelFingerprint, setLabelsRequest.labelFingerprint) &&
        Objects.equals(this.name, setLabelsRequest.name) &&
        Objects.equals(this.projectId, setLabelsRequest.projectId) &&
        Objects.equals(this.resourceLabels, setLabelsRequest.resourceLabels) &&
        Objects.equals(this.zone, setLabelsRequest.zone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clusterId, labelFingerprint, name, projectId, resourceLabels, zone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SetLabelsRequest {\n");
    sb.append("    clusterId: ").append(toIndentedString(clusterId)).append("\n");
    sb.append("    labelFingerprint: ").append(toIndentedString(labelFingerprint)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    resourceLabels: ").append(toIndentedString(resourceLabels)).append("\n");
    sb.append("    zone: ").append(toIndentedString(zone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clusterId");
    openapiFields.add("labelFingerprint");
    openapiFields.add("name");
    openapiFields.add("projectId");
    openapiFields.add("resourceLabels");
    openapiFields.add("zone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SetLabelsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SetLabelsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SetLabelsRequest is not found in the empty JSON string", SetLabelsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SetLabelsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SetLabelsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clusterId") != null && !jsonObj.get("clusterId").isJsonNull()) && !jsonObj.get("clusterId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clusterId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clusterId").toString()));
      }
      if ((jsonObj.get("labelFingerprint") != null && !jsonObj.get("labelFingerprint").isJsonNull()) && !jsonObj.get("labelFingerprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labelFingerprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labelFingerprint").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("projectId") != null && !jsonObj.get("projectId").isJsonNull()) && !jsonObj.get("projectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectId").toString()));
      }
      if ((jsonObj.get("zone") != null && !jsonObj.get("zone").isJsonNull()) && !jsonObj.get("zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SetLabelsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SetLabelsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SetLabelsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SetLabelsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SetLabelsRequest>() {
           @Override
           public void write(JsonWriter out, SetLabelsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SetLabelsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SetLabelsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SetLabelsRequest
   * @throws IOException if the JSON string is invalid with respect to SetLabelsRequest
   */
  public static SetLabelsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SetLabelsRequest.class);
  }

  /**
   * Convert an instance of SetLabelsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

