/*
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AvailableVersion;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReleaseChannelConfig exposes configuration for a release channel.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:27.538902-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReleaseChannelConfig {
  public static final String SERIALIZED_NAME_AVAILABLE_VERSIONS = "availableVersions";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_AVAILABLE_VERSIONS)
  private List<AvailableVersion> availableVersions = new ArrayList<>();

  /**
   * The release channel this configuration applies to.
   */
  @JsonAdapter(ChannelEnum.Adapter.class)
  public enum ChannelEnum {
    UNSPECIFIED("UNSPECIFIED"),
    
    RAPID("RAPID"),
    
    REGULAR("REGULAR"),
    
    STABLE("STABLE");

    private String value;

    ChannelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChannelEnum fromValue(String value) {
      for (ChannelEnum b : ChannelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChannelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChannelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChannelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChannelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ChannelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CHANNEL = "channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private ChannelEnum channel;

  public static final String SERIALIZED_NAME_DEFAULT_VERSION = "defaultVersion";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VERSION)
  private String defaultVersion;

  public static final String SERIALIZED_NAME_VALID_VERSIONS = "validVersions";
  @SerializedName(SERIALIZED_NAME_VALID_VERSIONS)
  private List<String> validVersions = new ArrayList<>();

  public ReleaseChannelConfig() {
  }

  @Deprecated
  public ReleaseChannelConfig availableVersions(List<AvailableVersion> availableVersions) {
    this.availableVersions = availableVersions;
    return this;
  }

  public ReleaseChannelConfig addAvailableVersionsItem(AvailableVersion availableVersionsItem) {
    if (this.availableVersions == null) {
      this.availableVersions = new ArrayList<>();
    }
    this.availableVersions.add(availableVersionsItem);
    return this;
  }

  /**
   * Deprecated. This field has been deprecated and replaced with the valid_versions field.
   * @return availableVersions
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<AvailableVersion> getAvailableVersions() {
    return availableVersions;
  }

  @Deprecated
  public void setAvailableVersions(List<AvailableVersion> availableVersions) {
    this.availableVersions = availableVersions;
  }


  public ReleaseChannelConfig channel(ChannelEnum channel) {
    this.channel = channel;
    return this;
  }

  /**
   * The release channel this configuration applies to.
   * @return channel
   */
  @javax.annotation.Nullable
  public ChannelEnum getChannel() {
    return channel;
  }

  public void setChannel(ChannelEnum channel) {
    this.channel = channel;
  }


  public ReleaseChannelConfig defaultVersion(String defaultVersion) {
    this.defaultVersion = defaultVersion;
    return this;
  }

  /**
   * The default version for newly created clusters on the channel.
   * @return defaultVersion
   */
  @javax.annotation.Nullable
  public String getDefaultVersion() {
    return defaultVersion;
  }

  public void setDefaultVersion(String defaultVersion) {
    this.defaultVersion = defaultVersion;
  }


  public ReleaseChannelConfig validVersions(List<String> validVersions) {
    this.validVersions = validVersions;
    return this;
  }

  public ReleaseChannelConfig addValidVersionsItem(String validVersionsItem) {
    if (this.validVersions == null) {
      this.validVersions = new ArrayList<>();
    }
    this.validVersions.add(validVersionsItem);
    return this;
  }

  /**
   * List of valid versions for the channel.
   * @return validVersions
   */
  @javax.annotation.Nullable
  public List<String> getValidVersions() {
    return validVersions;
  }

  public void setValidVersions(List<String> validVersions) {
    this.validVersions = validVersions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReleaseChannelConfig releaseChannelConfig = (ReleaseChannelConfig) o;
    return Objects.equals(this.availableVersions, releaseChannelConfig.availableVersions) &&
        Objects.equals(this.channel, releaseChannelConfig.channel) &&
        Objects.equals(this.defaultVersion, releaseChannelConfig.defaultVersion) &&
        Objects.equals(this.validVersions, releaseChannelConfig.validVersions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableVersions, channel, defaultVersion, validVersions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReleaseChannelConfig {\n");
    sb.append("    availableVersions: ").append(toIndentedString(availableVersions)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    defaultVersion: ").append(toIndentedString(defaultVersion)).append("\n");
    sb.append("    validVersions: ").append(toIndentedString(validVersions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availableVersions");
    openapiFields.add("channel");
    openapiFields.add("defaultVersion");
    openapiFields.add("validVersions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReleaseChannelConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReleaseChannelConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReleaseChannelConfig is not found in the empty JSON string", ReleaseChannelConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReleaseChannelConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReleaseChannelConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("availableVersions") != null && !jsonObj.get("availableVersions").isJsonNull()) {
        JsonArray jsonArrayavailableVersions = jsonObj.getAsJsonArray("availableVersions");
        if (jsonArrayavailableVersions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("availableVersions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `availableVersions` to be an array in the JSON string but got `%s`", jsonObj.get("availableVersions").toString()));
          }

          // validate the optional field `availableVersions` (array)
          for (int i = 0; i < jsonArrayavailableVersions.size(); i++) {
            AvailableVersion.validateJsonElement(jsonArrayavailableVersions.get(i));
          };
        }
      }
      if ((jsonObj.get("channel") != null && !jsonObj.get("channel").isJsonNull()) && !jsonObj.get("channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel").toString()));
      }
      // validate the optional field `channel`
      if (jsonObj.get("channel") != null && !jsonObj.get("channel").isJsonNull()) {
        ChannelEnum.validateJsonElement(jsonObj.get("channel"));
      }
      if ((jsonObj.get("defaultVersion") != null && !jsonObj.get("defaultVersion").isJsonNull()) && !jsonObj.get("defaultVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultVersion").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("validVersions") != null && !jsonObj.get("validVersions").isJsonNull() && !jsonObj.get("validVersions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `validVersions` to be an array in the JSON string but got `%s`", jsonObj.get("validVersions").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReleaseChannelConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReleaseChannelConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReleaseChannelConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReleaseChannelConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<ReleaseChannelConfig>() {
           @Override
           public void write(JsonWriter out, ReleaseChannelConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReleaseChannelConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReleaseChannelConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReleaseChannelConfig
   * @throws IOException if the JSON string is invalid with respect to ReleaseChannelConfig
   */
  public static ReleaseChannelConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReleaseChannelConfig.class);
  }

  /**
   * Convert an instance of ReleaseChannelConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

