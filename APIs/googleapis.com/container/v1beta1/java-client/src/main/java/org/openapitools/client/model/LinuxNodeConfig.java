/*
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Parameters that can be configured on Linux nodes.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:27.538902-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LinuxNodeConfig {
  /**
   * cgroup_mode specifies the cgroup mode to be used on the node.
   */
  @JsonAdapter(CgroupModeEnum.Adapter.class)
  public enum CgroupModeEnum {
    UNSPECIFIED("CGROUP_MODE_UNSPECIFIED"),
    
    V1("CGROUP_MODE_V1"),
    
    V2("CGROUP_MODE_V2");

    private String value;

    CgroupModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CgroupModeEnum fromValue(String value) {
      for (CgroupModeEnum b : CgroupModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CgroupModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CgroupModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CgroupModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CgroupModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CgroupModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CGROUP_MODE = "cgroupMode";
  @SerializedName(SERIALIZED_NAME_CGROUP_MODE)
  private CgroupModeEnum cgroupMode;

  public static final String SERIALIZED_NAME_SYSCTLS = "sysctls";
  @SerializedName(SERIALIZED_NAME_SYSCTLS)
  private Map<String, String> sysctls = new HashMap<>();

  public LinuxNodeConfig() {
  }

  public LinuxNodeConfig cgroupMode(CgroupModeEnum cgroupMode) {
    this.cgroupMode = cgroupMode;
    return this;
  }

  /**
   * cgroup_mode specifies the cgroup mode to be used on the node.
   * @return cgroupMode
   */
  @javax.annotation.Nullable
  public CgroupModeEnum getCgroupMode() {
    return cgroupMode;
  }

  public void setCgroupMode(CgroupModeEnum cgroupMode) {
    this.cgroupMode = cgroupMode;
  }


  public LinuxNodeConfig sysctls(Map<String, String> sysctls) {
    this.sysctls = sysctls;
    return this;
  }

  public LinuxNodeConfig putSysctlsItem(String key, String sysctlsItem) {
    if (this.sysctls == null) {
      this.sysctls = new HashMap<>();
    }
    this.sysctls.put(key, sysctlsItem);
    return this;
  }

  /**
   * The Linux kernel parameters to be applied to the nodes and all pods running on the nodes. The following parameters are supported. net.core.busy_poll net.core.busy_read net.core.netdev_max_backlog net.core.rmem_max net.core.wmem_default net.core.wmem_max net.core.optmem_max net.core.somaxconn net.ipv4.tcp_rmem net.ipv4.tcp_wmem net.ipv4.tcp_tw_reuse
   * @return sysctls
   */
  @javax.annotation.Nullable
  public Map<String, String> getSysctls() {
    return sysctls;
  }

  public void setSysctls(Map<String, String> sysctls) {
    this.sysctls = sysctls;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LinuxNodeConfig linuxNodeConfig = (LinuxNodeConfig) o;
    return Objects.equals(this.cgroupMode, linuxNodeConfig.cgroupMode) &&
        Objects.equals(this.sysctls, linuxNodeConfig.sysctls);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cgroupMode, sysctls);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LinuxNodeConfig {\n");
    sb.append("    cgroupMode: ").append(toIndentedString(cgroupMode)).append("\n");
    sb.append("    sysctls: ").append(toIndentedString(sysctls)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cgroupMode");
    openapiFields.add("sysctls");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LinuxNodeConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LinuxNodeConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LinuxNodeConfig is not found in the empty JSON string", LinuxNodeConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LinuxNodeConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LinuxNodeConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cgroupMode") != null && !jsonObj.get("cgroupMode").isJsonNull()) && !jsonObj.get("cgroupMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cgroupMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cgroupMode").toString()));
      }
      // validate the optional field `cgroupMode`
      if (jsonObj.get("cgroupMode") != null && !jsonObj.get("cgroupMode").isJsonNull()) {
        CgroupModeEnum.validateJsonElement(jsonObj.get("cgroupMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LinuxNodeConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LinuxNodeConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LinuxNodeConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LinuxNodeConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<LinuxNodeConfig>() {
           @Override
           public void write(JsonWriter out, LinuxNodeConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LinuxNodeConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LinuxNodeConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LinuxNodeConfig
   * @throws IOException if the JSON string is invalid with respect to LinuxNodeConfig
   */
  public static LinuxNodeConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LinuxNodeConfig.class);
  }

  /**
   * Convert an instance of LinuxNodeConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

