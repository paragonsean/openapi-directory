/*
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ClientCertificateConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The authentication information for accessing the master endpoint. Authentication can be done using HTTP basic auth or using client certificates.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:27.538902-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MasterAuth {
  public static final String SERIALIZED_NAME_CLIENT_CERTIFICATE = "clientCertificate";
  @SerializedName(SERIALIZED_NAME_CLIENT_CERTIFICATE)
  private String clientCertificate;

  public static final String SERIALIZED_NAME_CLIENT_CERTIFICATE_CONFIG = "clientCertificateConfig";
  @SerializedName(SERIALIZED_NAME_CLIENT_CERTIFICATE_CONFIG)
  private ClientCertificateConfig clientCertificateConfig;

  public static final String SERIALIZED_NAME_CLIENT_KEY = "clientKey";
  @SerializedName(SERIALIZED_NAME_CLIENT_KEY)
  private String clientKey;

  public static final String SERIALIZED_NAME_CLUSTER_CA_CERTIFICATE = "clusterCaCertificate";
  @SerializedName(SERIALIZED_NAME_CLUSTER_CA_CERTIFICATE)
  private String clusterCaCertificate;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public MasterAuth() {
  }

  public MasterAuth clientCertificate(String clientCertificate) {
    this.clientCertificate = clientCertificate;
    return this;
  }

  /**
   * [Output only] Base64-encoded public certificate used by clients to authenticate to the cluster endpoint.
   * @return clientCertificate
   */
  @javax.annotation.Nullable
  public String getClientCertificate() {
    return clientCertificate;
  }

  public void setClientCertificate(String clientCertificate) {
    this.clientCertificate = clientCertificate;
  }


  public MasterAuth clientCertificateConfig(ClientCertificateConfig clientCertificateConfig) {
    this.clientCertificateConfig = clientCertificateConfig;
    return this;
  }

  /**
   * Get clientCertificateConfig
   * @return clientCertificateConfig
   */
  @javax.annotation.Nullable
  public ClientCertificateConfig getClientCertificateConfig() {
    return clientCertificateConfig;
  }

  public void setClientCertificateConfig(ClientCertificateConfig clientCertificateConfig) {
    this.clientCertificateConfig = clientCertificateConfig;
  }


  public MasterAuth clientKey(String clientKey) {
    this.clientKey = clientKey;
    return this;
  }

  /**
   * [Output only] Base64-encoded private key used by clients to authenticate to the cluster endpoint.
   * @return clientKey
   */
  @javax.annotation.Nullable
  public String getClientKey() {
    return clientKey;
  }

  public void setClientKey(String clientKey) {
    this.clientKey = clientKey;
  }


  public MasterAuth clusterCaCertificate(String clusterCaCertificate) {
    this.clusterCaCertificate = clusterCaCertificate;
    return this;
  }

  /**
   * Get clusterCaCertificate
   * @return clusterCaCertificate
   */
  @javax.annotation.Nullable
  public String getClusterCaCertificate() {
    return clusterCaCertificate;
  }

  public void setClusterCaCertificate(String clusterCaCertificate) {
    this.clusterCaCertificate = clusterCaCertificate;
  }


  @Deprecated
  public MasterAuth password(String password) {
    this.password = password;
    return this;
  }

  /**
   * The password to use for HTTP basic authentication to the master endpoint. Because the master endpoint is open to the Internet, you should create a strong password. If a password is provided for cluster creation, username must be non-empty. Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication
   * @return password
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  @Deprecated
  public void setPassword(String password) {
    this.password = password;
  }


  @Deprecated
  public MasterAuth username(String username) {
    this.username = username;
    return this;
  }

  /**
   * The username to use for HTTP basic authentication to the master endpoint. For clusters v1.6.0 and later, basic authentication can be disabled by leaving username unspecified (or setting it to the empty string). Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication
   * @return username
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  @Deprecated
  public void setUsername(String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MasterAuth masterAuth = (MasterAuth) o;
    return Objects.equals(this.clientCertificate, masterAuth.clientCertificate) &&
        Objects.equals(this.clientCertificateConfig, masterAuth.clientCertificateConfig) &&
        Objects.equals(this.clientKey, masterAuth.clientKey) &&
        Objects.equals(this.clusterCaCertificate, masterAuth.clusterCaCertificate) &&
        Objects.equals(this.password, masterAuth.password) &&
        Objects.equals(this.username, masterAuth.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientCertificate, clientCertificateConfig, clientKey, clusterCaCertificate, password, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MasterAuth {\n");
    sb.append("    clientCertificate: ").append(toIndentedString(clientCertificate)).append("\n");
    sb.append("    clientCertificateConfig: ").append(toIndentedString(clientCertificateConfig)).append("\n");
    sb.append("    clientKey: ").append(toIndentedString(clientKey)).append("\n");
    sb.append("    clusterCaCertificate: ").append(toIndentedString(clusterCaCertificate)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientCertificate");
    openapiFields.add("clientCertificateConfig");
    openapiFields.add("clientKey");
    openapiFields.add("clusterCaCertificate");
    openapiFields.add("password");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MasterAuth
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MasterAuth.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MasterAuth is not found in the empty JSON string", MasterAuth.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MasterAuth.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MasterAuth` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clientCertificate") != null && !jsonObj.get("clientCertificate").isJsonNull()) && !jsonObj.get("clientCertificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientCertificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientCertificate").toString()));
      }
      // validate the optional field `clientCertificateConfig`
      if (jsonObj.get("clientCertificateConfig") != null && !jsonObj.get("clientCertificateConfig").isJsonNull()) {
        ClientCertificateConfig.validateJsonElement(jsonObj.get("clientCertificateConfig"));
      }
      if ((jsonObj.get("clientKey") != null && !jsonObj.get("clientKey").isJsonNull()) && !jsonObj.get("clientKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientKey").toString()));
      }
      if ((jsonObj.get("clusterCaCertificate") != null && !jsonObj.get("clusterCaCertificate").isJsonNull()) && !jsonObj.get("clusterCaCertificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clusterCaCertificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clusterCaCertificate").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MasterAuth.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MasterAuth' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MasterAuth> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MasterAuth.class));

       return (TypeAdapter<T>) new TypeAdapter<MasterAuth>() {
           @Override
           public void write(JsonWriter out, MasterAuth value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MasterAuth read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MasterAuth given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MasterAuth
   * @throws IOException if the JSON string is invalid with respect to MasterAuth
   */
  public static MasterAuth fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MasterAuth.class);
  }

  /**
   * Convert an instance of MasterAuth to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

