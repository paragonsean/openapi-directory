/*
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AutoprovisioningNodePoolDefaults;
import org.openapitools.client.model.ResourceLimit;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ClusterAutoscaling contains global, per-cluster information required by Cluster Autoscaler to automatically adjust the size of the cluster and create/delete node pools based on the current needs.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:27.538902-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClusterAutoscaling {
  public static final String SERIALIZED_NAME_AUTOPROVISIONING_LOCATIONS = "autoprovisioningLocations";
  @SerializedName(SERIALIZED_NAME_AUTOPROVISIONING_LOCATIONS)
  private List<String> autoprovisioningLocations = new ArrayList<>();

  public static final String SERIALIZED_NAME_AUTOPROVISIONING_NODE_POOL_DEFAULTS = "autoprovisioningNodePoolDefaults";
  @SerializedName(SERIALIZED_NAME_AUTOPROVISIONING_NODE_POOL_DEFAULTS)
  private AutoprovisioningNodePoolDefaults autoprovisioningNodePoolDefaults;

  /**
   * Defines autoscaling behaviour.
   */
  @JsonAdapter(AutoscalingProfileEnum.Adapter.class)
  public enum AutoscalingProfileEnum {
    PROFILE_UNSPECIFIED("PROFILE_UNSPECIFIED"),
    
    OPTIMIZE_UTILIZATION("OPTIMIZE_UTILIZATION"),
    
    BALANCED("BALANCED");

    private String value;

    AutoscalingProfileEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AutoscalingProfileEnum fromValue(String value) {
      for (AutoscalingProfileEnum b : AutoscalingProfileEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AutoscalingProfileEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AutoscalingProfileEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AutoscalingProfileEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AutoscalingProfileEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AutoscalingProfileEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTOSCALING_PROFILE = "autoscalingProfile";
  @SerializedName(SERIALIZED_NAME_AUTOSCALING_PROFILE)
  private AutoscalingProfileEnum autoscalingProfile;

  public static final String SERIALIZED_NAME_ENABLE_NODE_AUTOPROVISIONING = "enableNodeAutoprovisioning";
  @SerializedName(SERIALIZED_NAME_ENABLE_NODE_AUTOPROVISIONING)
  private Boolean enableNodeAutoprovisioning;

  public static final String SERIALIZED_NAME_RESOURCE_LIMITS = "resourceLimits";
  @SerializedName(SERIALIZED_NAME_RESOURCE_LIMITS)
  private List<ResourceLimit> resourceLimits = new ArrayList<>();

  public ClusterAutoscaling() {
  }

  public ClusterAutoscaling autoprovisioningLocations(List<String> autoprovisioningLocations) {
    this.autoprovisioningLocations = autoprovisioningLocations;
    return this;
  }

  public ClusterAutoscaling addAutoprovisioningLocationsItem(String autoprovisioningLocationsItem) {
    if (this.autoprovisioningLocations == null) {
      this.autoprovisioningLocations = new ArrayList<>();
    }
    this.autoprovisioningLocations.add(autoprovisioningLocationsItem);
    return this;
  }

  /**
   * The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool&#39;s nodes can be created by NAP.
   * @return autoprovisioningLocations
   */
  @javax.annotation.Nullable
  public List<String> getAutoprovisioningLocations() {
    return autoprovisioningLocations;
  }

  public void setAutoprovisioningLocations(List<String> autoprovisioningLocations) {
    this.autoprovisioningLocations = autoprovisioningLocations;
  }


  public ClusterAutoscaling autoprovisioningNodePoolDefaults(AutoprovisioningNodePoolDefaults autoprovisioningNodePoolDefaults) {
    this.autoprovisioningNodePoolDefaults = autoprovisioningNodePoolDefaults;
    return this;
  }

  /**
   * Get autoprovisioningNodePoolDefaults
   * @return autoprovisioningNodePoolDefaults
   */
  @javax.annotation.Nullable
  public AutoprovisioningNodePoolDefaults getAutoprovisioningNodePoolDefaults() {
    return autoprovisioningNodePoolDefaults;
  }

  public void setAutoprovisioningNodePoolDefaults(AutoprovisioningNodePoolDefaults autoprovisioningNodePoolDefaults) {
    this.autoprovisioningNodePoolDefaults = autoprovisioningNodePoolDefaults;
  }


  public ClusterAutoscaling autoscalingProfile(AutoscalingProfileEnum autoscalingProfile) {
    this.autoscalingProfile = autoscalingProfile;
    return this;
  }

  /**
   * Defines autoscaling behaviour.
   * @return autoscalingProfile
   */
  @javax.annotation.Nullable
  public AutoscalingProfileEnum getAutoscalingProfile() {
    return autoscalingProfile;
  }

  public void setAutoscalingProfile(AutoscalingProfileEnum autoscalingProfile) {
    this.autoscalingProfile = autoscalingProfile;
  }


  public ClusterAutoscaling enableNodeAutoprovisioning(Boolean enableNodeAutoprovisioning) {
    this.enableNodeAutoprovisioning = enableNodeAutoprovisioning;
    return this;
  }

  /**
   * Enables automatic node pool creation and deletion.
   * @return enableNodeAutoprovisioning
   */
  @javax.annotation.Nullable
  public Boolean getEnableNodeAutoprovisioning() {
    return enableNodeAutoprovisioning;
  }

  public void setEnableNodeAutoprovisioning(Boolean enableNodeAutoprovisioning) {
    this.enableNodeAutoprovisioning = enableNodeAutoprovisioning;
  }


  public ClusterAutoscaling resourceLimits(List<ResourceLimit> resourceLimits) {
    this.resourceLimits = resourceLimits;
    return this;
  }

  public ClusterAutoscaling addResourceLimitsItem(ResourceLimit resourceLimitsItem) {
    if (this.resourceLimits == null) {
      this.resourceLimits = new ArrayList<>();
    }
    this.resourceLimits.add(resourceLimitsItem);
    return this;
  }

  /**
   * Contains global constraints regarding minimum and maximum amount of resources in the cluster.
   * @return resourceLimits
   */
  @javax.annotation.Nullable
  public List<ResourceLimit> getResourceLimits() {
    return resourceLimits;
  }

  public void setResourceLimits(List<ResourceLimit> resourceLimits) {
    this.resourceLimits = resourceLimits;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClusterAutoscaling clusterAutoscaling = (ClusterAutoscaling) o;
    return Objects.equals(this.autoprovisioningLocations, clusterAutoscaling.autoprovisioningLocations) &&
        Objects.equals(this.autoprovisioningNodePoolDefaults, clusterAutoscaling.autoprovisioningNodePoolDefaults) &&
        Objects.equals(this.autoscalingProfile, clusterAutoscaling.autoscalingProfile) &&
        Objects.equals(this.enableNodeAutoprovisioning, clusterAutoscaling.enableNodeAutoprovisioning) &&
        Objects.equals(this.resourceLimits, clusterAutoscaling.resourceLimits);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoprovisioningLocations, autoprovisioningNodePoolDefaults, autoscalingProfile, enableNodeAutoprovisioning, resourceLimits);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClusterAutoscaling {\n");
    sb.append("    autoprovisioningLocations: ").append(toIndentedString(autoprovisioningLocations)).append("\n");
    sb.append("    autoprovisioningNodePoolDefaults: ").append(toIndentedString(autoprovisioningNodePoolDefaults)).append("\n");
    sb.append("    autoscalingProfile: ").append(toIndentedString(autoscalingProfile)).append("\n");
    sb.append("    enableNodeAutoprovisioning: ").append(toIndentedString(enableNodeAutoprovisioning)).append("\n");
    sb.append("    resourceLimits: ").append(toIndentedString(resourceLimits)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoprovisioningLocations");
    openapiFields.add("autoprovisioningNodePoolDefaults");
    openapiFields.add("autoscalingProfile");
    openapiFields.add("enableNodeAutoprovisioning");
    openapiFields.add("resourceLimits");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClusterAutoscaling
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClusterAutoscaling.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClusterAutoscaling is not found in the empty JSON string", ClusterAutoscaling.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClusterAutoscaling.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClusterAutoscaling` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("autoprovisioningLocations") != null && !jsonObj.get("autoprovisioningLocations").isJsonNull() && !jsonObj.get("autoprovisioningLocations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `autoprovisioningLocations` to be an array in the JSON string but got `%s`", jsonObj.get("autoprovisioningLocations").toString()));
      }
      // validate the optional field `autoprovisioningNodePoolDefaults`
      if (jsonObj.get("autoprovisioningNodePoolDefaults") != null && !jsonObj.get("autoprovisioningNodePoolDefaults").isJsonNull()) {
        AutoprovisioningNodePoolDefaults.validateJsonElement(jsonObj.get("autoprovisioningNodePoolDefaults"));
      }
      if ((jsonObj.get("autoscalingProfile") != null && !jsonObj.get("autoscalingProfile").isJsonNull()) && !jsonObj.get("autoscalingProfile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `autoscalingProfile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("autoscalingProfile").toString()));
      }
      // validate the optional field `autoscalingProfile`
      if (jsonObj.get("autoscalingProfile") != null && !jsonObj.get("autoscalingProfile").isJsonNull()) {
        AutoscalingProfileEnum.validateJsonElement(jsonObj.get("autoscalingProfile"));
      }
      if (jsonObj.get("resourceLimits") != null && !jsonObj.get("resourceLimits").isJsonNull()) {
        JsonArray jsonArrayresourceLimits = jsonObj.getAsJsonArray("resourceLimits");
        if (jsonArrayresourceLimits != null) {
          // ensure the json data is an array
          if (!jsonObj.get("resourceLimits").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `resourceLimits` to be an array in the JSON string but got `%s`", jsonObj.get("resourceLimits").toString()));
          }

          // validate the optional field `resourceLimits` (array)
          for (int i = 0; i < jsonArrayresourceLimits.size(); i++) {
            ResourceLimit.validateJsonElement(jsonArrayresourceLimits.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClusterAutoscaling.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClusterAutoscaling' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClusterAutoscaling> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClusterAutoscaling.class));

       return (TypeAdapter<T>) new TypeAdapter<ClusterAutoscaling>() {
           @Override
           public void write(JsonWriter out, ClusterAutoscaling value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClusterAutoscaling read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClusterAutoscaling given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClusterAutoscaling
   * @throws IOException if the JSON string is invalid with respect to ClusterAutoscaling
   */
  public static ClusterAutoscaling fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClusterAutoscaling.class);
  }

  /**
   * Convert an instance of ClusterAutoscaling to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

