/*
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.HttpCacheControlResponseHeader;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetOpenIDConfigResponse is an OIDC discovery document for the cluster. See the OpenID Connect Discovery 1.0 specification for details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:27.538902-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetOpenIDConfigResponse {
  public static final String SERIALIZED_NAME_CACHE_HEADER = "cacheHeader";
  @SerializedName(SERIALIZED_NAME_CACHE_HEADER)
  private HttpCacheControlResponseHeader cacheHeader;

  public static final String SERIALIZED_NAME_CLAIMS_SUPPORTED = "claims_supported";
  @SerializedName(SERIALIZED_NAME_CLAIMS_SUPPORTED)
  private List<String> claimsSupported = new ArrayList<>();

  public static final String SERIALIZED_NAME_GRANT_TYPES = "grant_types";
  @SerializedName(SERIALIZED_NAME_GRANT_TYPES)
  private List<String> grantTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID_TOKEN_SIGNING_ALG_VALUES_SUPPORTED = "id_token_signing_alg_values_supported";
  @SerializedName(SERIALIZED_NAME_ID_TOKEN_SIGNING_ALG_VALUES_SUPPORTED)
  private List<String> idTokenSigningAlgValuesSupported = new ArrayList<>();

  public static final String SERIALIZED_NAME_ISSUER = "issuer";
  @SerializedName(SERIALIZED_NAME_ISSUER)
  private String issuer;

  public static final String SERIALIZED_NAME_JWKS_URI = "jwks_uri";
  @SerializedName(SERIALIZED_NAME_JWKS_URI)
  private String jwksUri;

  public static final String SERIALIZED_NAME_RESPONSE_TYPES_SUPPORTED = "response_types_supported";
  @SerializedName(SERIALIZED_NAME_RESPONSE_TYPES_SUPPORTED)
  private List<String> responseTypesSupported = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBJECT_TYPES_SUPPORTED = "subject_types_supported";
  @SerializedName(SERIALIZED_NAME_SUBJECT_TYPES_SUPPORTED)
  private List<String> subjectTypesSupported = new ArrayList<>();

  public GetOpenIDConfigResponse() {
  }

  public GetOpenIDConfigResponse cacheHeader(HttpCacheControlResponseHeader cacheHeader) {
    this.cacheHeader = cacheHeader;
    return this;
  }

  /**
   * Get cacheHeader
   * @return cacheHeader
   */
  @javax.annotation.Nullable
  public HttpCacheControlResponseHeader getCacheHeader() {
    return cacheHeader;
  }

  public void setCacheHeader(HttpCacheControlResponseHeader cacheHeader) {
    this.cacheHeader = cacheHeader;
  }


  public GetOpenIDConfigResponse claimsSupported(List<String> claimsSupported) {
    this.claimsSupported = claimsSupported;
    return this;
  }

  public GetOpenIDConfigResponse addClaimsSupportedItem(String claimsSupportedItem) {
    if (this.claimsSupported == null) {
      this.claimsSupported = new ArrayList<>();
    }
    this.claimsSupported.add(claimsSupportedItem);
    return this;
  }

  /**
   * Supported claims.
   * @return claimsSupported
   */
  @javax.annotation.Nullable
  public List<String> getClaimsSupported() {
    return claimsSupported;
  }

  public void setClaimsSupported(List<String> claimsSupported) {
    this.claimsSupported = claimsSupported;
  }


  public GetOpenIDConfigResponse grantTypes(List<String> grantTypes) {
    this.grantTypes = grantTypes;
    return this;
  }

  public GetOpenIDConfigResponse addGrantTypesItem(String grantTypesItem) {
    if (this.grantTypes == null) {
      this.grantTypes = new ArrayList<>();
    }
    this.grantTypes.add(grantTypesItem);
    return this;
  }

  /**
   * Supported grant types.
   * @return grantTypes
   */
  @javax.annotation.Nullable
  public List<String> getGrantTypes() {
    return grantTypes;
  }

  public void setGrantTypes(List<String> grantTypes) {
    this.grantTypes = grantTypes;
  }


  public GetOpenIDConfigResponse idTokenSigningAlgValuesSupported(List<String> idTokenSigningAlgValuesSupported) {
    this.idTokenSigningAlgValuesSupported = idTokenSigningAlgValuesSupported;
    return this;
  }

  public GetOpenIDConfigResponse addIdTokenSigningAlgValuesSupportedItem(String idTokenSigningAlgValuesSupportedItem) {
    if (this.idTokenSigningAlgValuesSupported == null) {
      this.idTokenSigningAlgValuesSupported = new ArrayList<>();
    }
    this.idTokenSigningAlgValuesSupported.add(idTokenSigningAlgValuesSupportedItem);
    return this;
  }

  /**
   * supported ID Token signing Algorithms.
   * @return idTokenSigningAlgValuesSupported
   */
  @javax.annotation.Nullable
  public List<String> getIdTokenSigningAlgValuesSupported() {
    return idTokenSigningAlgValuesSupported;
  }

  public void setIdTokenSigningAlgValuesSupported(List<String> idTokenSigningAlgValuesSupported) {
    this.idTokenSigningAlgValuesSupported = idTokenSigningAlgValuesSupported;
  }


  public GetOpenIDConfigResponse issuer(String issuer) {
    this.issuer = issuer;
    return this;
  }

  /**
   * OIDC Issuer.
   * @return issuer
   */
  @javax.annotation.Nullable
  public String getIssuer() {
    return issuer;
  }

  public void setIssuer(String issuer) {
    this.issuer = issuer;
  }


  public GetOpenIDConfigResponse jwksUri(String jwksUri) {
    this.jwksUri = jwksUri;
    return this;
  }

  /**
   * JSON Web Key uri.
   * @return jwksUri
   */
  @javax.annotation.Nullable
  public String getJwksUri() {
    return jwksUri;
  }

  public void setJwksUri(String jwksUri) {
    this.jwksUri = jwksUri;
  }


  public GetOpenIDConfigResponse responseTypesSupported(List<String> responseTypesSupported) {
    this.responseTypesSupported = responseTypesSupported;
    return this;
  }

  public GetOpenIDConfigResponse addResponseTypesSupportedItem(String responseTypesSupportedItem) {
    if (this.responseTypesSupported == null) {
      this.responseTypesSupported = new ArrayList<>();
    }
    this.responseTypesSupported.add(responseTypesSupportedItem);
    return this;
  }

  /**
   * Supported response types.
   * @return responseTypesSupported
   */
  @javax.annotation.Nullable
  public List<String> getResponseTypesSupported() {
    return responseTypesSupported;
  }

  public void setResponseTypesSupported(List<String> responseTypesSupported) {
    this.responseTypesSupported = responseTypesSupported;
  }


  public GetOpenIDConfigResponse subjectTypesSupported(List<String> subjectTypesSupported) {
    this.subjectTypesSupported = subjectTypesSupported;
    return this;
  }

  public GetOpenIDConfigResponse addSubjectTypesSupportedItem(String subjectTypesSupportedItem) {
    if (this.subjectTypesSupported == null) {
      this.subjectTypesSupported = new ArrayList<>();
    }
    this.subjectTypesSupported.add(subjectTypesSupportedItem);
    return this;
  }

  /**
   * Supported subject types.
   * @return subjectTypesSupported
   */
  @javax.annotation.Nullable
  public List<String> getSubjectTypesSupported() {
    return subjectTypesSupported;
  }

  public void setSubjectTypesSupported(List<String> subjectTypesSupported) {
    this.subjectTypesSupported = subjectTypesSupported;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetOpenIDConfigResponse getOpenIDConfigResponse = (GetOpenIDConfigResponse) o;
    return Objects.equals(this.cacheHeader, getOpenIDConfigResponse.cacheHeader) &&
        Objects.equals(this.claimsSupported, getOpenIDConfigResponse.claimsSupported) &&
        Objects.equals(this.grantTypes, getOpenIDConfigResponse.grantTypes) &&
        Objects.equals(this.idTokenSigningAlgValuesSupported, getOpenIDConfigResponse.idTokenSigningAlgValuesSupported) &&
        Objects.equals(this.issuer, getOpenIDConfigResponse.issuer) &&
        Objects.equals(this.jwksUri, getOpenIDConfigResponse.jwksUri) &&
        Objects.equals(this.responseTypesSupported, getOpenIDConfigResponse.responseTypesSupported) &&
        Objects.equals(this.subjectTypesSupported, getOpenIDConfigResponse.subjectTypesSupported);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cacheHeader, claimsSupported, grantTypes, idTokenSigningAlgValuesSupported, issuer, jwksUri, responseTypesSupported, subjectTypesSupported);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetOpenIDConfigResponse {\n");
    sb.append("    cacheHeader: ").append(toIndentedString(cacheHeader)).append("\n");
    sb.append("    claimsSupported: ").append(toIndentedString(claimsSupported)).append("\n");
    sb.append("    grantTypes: ").append(toIndentedString(grantTypes)).append("\n");
    sb.append("    idTokenSigningAlgValuesSupported: ").append(toIndentedString(idTokenSigningAlgValuesSupported)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    jwksUri: ").append(toIndentedString(jwksUri)).append("\n");
    sb.append("    responseTypesSupported: ").append(toIndentedString(responseTypesSupported)).append("\n");
    sb.append("    subjectTypesSupported: ").append(toIndentedString(subjectTypesSupported)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cacheHeader");
    openapiFields.add("claims_supported");
    openapiFields.add("grant_types");
    openapiFields.add("id_token_signing_alg_values_supported");
    openapiFields.add("issuer");
    openapiFields.add("jwks_uri");
    openapiFields.add("response_types_supported");
    openapiFields.add("subject_types_supported");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetOpenIDConfigResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetOpenIDConfigResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetOpenIDConfigResponse is not found in the empty JSON string", GetOpenIDConfigResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetOpenIDConfigResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetOpenIDConfigResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cacheHeader`
      if (jsonObj.get("cacheHeader") != null && !jsonObj.get("cacheHeader").isJsonNull()) {
        HttpCacheControlResponseHeader.validateJsonElement(jsonObj.get("cacheHeader"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("claims_supported") != null && !jsonObj.get("claims_supported").isJsonNull() && !jsonObj.get("claims_supported").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `claims_supported` to be an array in the JSON string but got `%s`", jsonObj.get("claims_supported").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("grant_types") != null && !jsonObj.get("grant_types").isJsonNull() && !jsonObj.get("grant_types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `grant_types` to be an array in the JSON string but got `%s`", jsonObj.get("grant_types").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("id_token_signing_alg_values_supported") != null && !jsonObj.get("id_token_signing_alg_values_supported").isJsonNull() && !jsonObj.get("id_token_signing_alg_values_supported").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `id_token_signing_alg_values_supported` to be an array in the JSON string but got `%s`", jsonObj.get("id_token_signing_alg_values_supported").toString()));
      }
      if ((jsonObj.get("issuer") != null && !jsonObj.get("issuer").isJsonNull()) && !jsonObj.get("issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuer").toString()));
      }
      if ((jsonObj.get("jwks_uri") != null && !jsonObj.get("jwks_uri").isJsonNull()) && !jsonObj.get("jwks_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jwks_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jwks_uri").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("response_types_supported") != null && !jsonObj.get("response_types_supported").isJsonNull() && !jsonObj.get("response_types_supported").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `response_types_supported` to be an array in the JSON string but got `%s`", jsonObj.get("response_types_supported").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("subject_types_supported") != null && !jsonObj.get("subject_types_supported").isJsonNull() && !jsonObj.get("subject_types_supported").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject_types_supported` to be an array in the JSON string but got `%s`", jsonObj.get("subject_types_supported").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetOpenIDConfigResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetOpenIDConfigResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetOpenIDConfigResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetOpenIDConfigResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetOpenIDConfigResponse>() {
           @Override
           public void write(JsonWriter out, GetOpenIDConfigResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetOpenIDConfigResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetOpenIDConfigResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetOpenIDConfigResponse
   * @throws IOException if the JSON string is invalid with respect to GetOpenIDConfigResponse
   */
  public static GetOpenIDConfigResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetOpenIDConfigResponse.class);
  }

  /**
   * Convert an instance of GetOpenIDConfigResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

