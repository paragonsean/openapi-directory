/*
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Node kubelet configs.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:27.538902-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NodeKubeletConfig {
  public static final String SERIALIZED_NAME_CPU_CFS_QUOTA = "cpuCfsQuota";
  @SerializedName(SERIALIZED_NAME_CPU_CFS_QUOTA)
  private Boolean cpuCfsQuota;

  public static final String SERIALIZED_NAME_CPU_CFS_QUOTA_PERIOD = "cpuCfsQuotaPeriod";
  @SerializedName(SERIALIZED_NAME_CPU_CFS_QUOTA_PERIOD)
  private String cpuCfsQuotaPeriod;

  public static final String SERIALIZED_NAME_CPU_MANAGER_POLICY = "cpuManagerPolicy";
  @SerializedName(SERIALIZED_NAME_CPU_MANAGER_POLICY)
  private String cpuManagerPolicy;

  public static final String SERIALIZED_NAME_INSECURE_KUBELET_READONLY_PORT_ENABLED = "insecureKubeletReadonlyPortEnabled";
  @SerializedName(SERIALIZED_NAME_INSECURE_KUBELET_READONLY_PORT_ENABLED)
  private Boolean insecureKubeletReadonlyPortEnabled;

  public static final String SERIALIZED_NAME_POD_PIDS_LIMIT = "podPidsLimit";
  @SerializedName(SERIALIZED_NAME_POD_PIDS_LIMIT)
  private String podPidsLimit;

  public NodeKubeletConfig() {
  }

  public NodeKubeletConfig cpuCfsQuota(Boolean cpuCfsQuota) {
    this.cpuCfsQuota = cpuCfsQuota;
    return this;
  }

  /**
   * Enable CPU CFS quota enforcement for containers that specify CPU limits. This option is enabled by default which makes kubelet use CFS quota (https://www.kernel.org/doc/Documentation/scheduler/sched-bwc.txt) to enforce container CPU limits. Otherwise, CPU limits will not be enforced at all. Disable this option to mitigate CPU throttling problems while still having your pods to be in Guaranteed QoS class by specifying the CPU limits. The default value is &#39;true&#39; if unspecified.
   * @return cpuCfsQuota
   */
  @javax.annotation.Nullable
  public Boolean getCpuCfsQuota() {
    return cpuCfsQuota;
  }

  public void setCpuCfsQuota(Boolean cpuCfsQuota) {
    this.cpuCfsQuota = cpuCfsQuota;
  }


  public NodeKubeletConfig cpuCfsQuotaPeriod(String cpuCfsQuotaPeriod) {
    this.cpuCfsQuotaPeriod = cpuCfsQuotaPeriod;
    return this;
  }

  /**
   * Set the CPU CFS quota period value &#39;cpu.cfs_period_us&#39;. The string must be a sequence of decimal numbers, each with optional fraction and a unit suffix, such as \&quot;300ms\&quot;. Valid time units are \&quot;ns\&quot;, \&quot;us\&quot; (or \&quot;Âµs\&quot;), \&quot;ms\&quot;, \&quot;s\&quot;, \&quot;m\&quot;, \&quot;h\&quot;. The value must be a positive duration.
   * @return cpuCfsQuotaPeriod
   */
  @javax.annotation.Nullable
  public String getCpuCfsQuotaPeriod() {
    return cpuCfsQuotaPeriod;
  }

  public void setCpuCfsQuotaPeriod(String cpuCfsQuotaPeriod) {
    this.cpuCfsQuotaPeriod = cpuCfsQuotaPeriod;
  }


  public NodeKubeletConfig cpuManagerPolicy(String cpuManagerPolicy) {
    this.cpuManagerPolicy = cpuManagerPolicy;
    return this;
  }

  /**
   * Control the CPU management policy on the node. See https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/ The following values are allowed. * \&quot;none\&quot;: the default, which represents the existing scheduling behavior. * \&quot;static\&quot;: allows pods with certain resource characteristics to be granted increased CPU affinity and exclusivity on the node. The default value is &#39;none&#39; if unspecified.
   * @return cpuManagerPolicy
   */
  @javax.annotation.Nullable
  public String getCpuManagerPolicy() {
    return cpuManagerPolicy;
  }

  public void setCpuManagerPolicy(String cpuManagerPolicy) {
    this.cpuManagerPolicy = cpuManagerPolicy;
  }


  public NodeKubeletConfig insecureKubeletReadonlyPortEnabled(Boolean insecureKubeletReadonlyPortEnabled) {
    this.insecureKubeletReadonlyPortEnabled = insecureKubeletReadonlyPortEnabled;
    return this;
  }

  /**
   * Enable or disable Kubelet read only port.
   * @return insecureKubeletReadonlyPortEnabled
   */
  @javax.annotation.Nullable
  public Boolean getInsecureKubeletReadonlyPortEnabled() {
    return insecureKubeletReadonlyPortEnabled;
  }

  public void setInsecureKubeletReadonlyPortEnabled(Boolean insecureKubeletReadonlyPortEnabled) {
    this.insecureKubeletReadonlyPortEnabled = insecureKubeletReadonlyPortEnabled;
  }


  public NodeKubeletConfig podPidsLimit(String podPidsLimit) {
    this.podPidsLimit = podPidsLimit;
    return this;
  }

  /**
   * Set the Pod PID limits. See https://kubernetes.io/docs/concepts/policy/pid-limiting/#pod-pid-limits Controls the maximum number of processes allowed to run in a pod. The value must be greater than or equal to 1024 and less than 4194304.
   * @return podPidsLimit
   */
  @javax.annotation.Nullable
  public String getPodPidsLimit() {
    return podPidsLimit;
  }

  public void setPodPidsLimit(String podPidsLimit) {
    this.podPidsLimit = podPidsLimit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeKubeletConfig nodeKubeletConfig = (NodeKubeletConfig) o;
    return Objects.equals(this.cpuCfsQuota, nodeKubeletConfig.cpuCfsQuota) &&
        Objects.equals(this.cpuCfsQuotaPeriod, nodeKubeletConfig.cpuCfsQuotaPeriod) &&
        Objects.equals(this.cpuManagerPolicy, nodeKubeletConfig.cpuManagerPolicy) &&
        Objects.equals(this.insecureKubeletReadonlyPortEnabled, nodeKubeletConfig.insecureKubeletReadonlyPortEnabled) &&
        Objects.equals(this.podPidsLimit, nodeKubeletConfig.podPidsLimit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cpuCfsQuota, cpuCfsQuotaPeriod, cpuManagerPolicy, insecureKubeletReadonlyPortEnabled, podPidsLimit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeKubeletConfig {\n");
    sb.append("    cpuCfsQuota: ").append(toIndentedString(cpuCfsQuota)).append("\n");
    sb.append("    cpuCfsQuotaPeriod: ").append(toIndentedString(cpuCfsQuotaPeriod)).append("\n");
    sb.append("    cpuManagerPolicy: ").append(toIndentedString(cpuManagerPolicy)).append("\n");
    sb.append("    insecureKubeletReadonlyPortEnabled: ").append(toIndentedString(insecureKubeletReadonlyPortEnabled)).append("\n");
    sb.append("    podPidsLimit: ").append(toIndentedString(podPidsLimit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cpuCfsQuota");
    openapiFields.add("cpuCfsQuotaPeriod");
    openapiFields.add("cpuManagerPolicy");
    openapiFields.add("insecureKubeletReadonlyPortEnabled");
    openapiFields.add("podPidsLimit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NodeKubeletConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NodeKubeletConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NodeKubeletConfig is not found in the empty JSON string", NodeKubeletConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NodeKubeletConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NodeKubeletConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cpuCfsQuotaPeriod") != null && !jsonObj.get("cpuCfsQuotaPeriod").isJsonNull()) && !jsonObj.get("cpuCfsQuotaPeriod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cpuCfsQuotaPeriod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cpuCfsQuotaPeriod").toString()));
      }
      if ((jsonObj.get("cpuManagerPolicy") != null && !jsonObj.get("cpuManagerPolicy").isJsonNull()) && !jsonObj.get("cpuManagerPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cpuManagerPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cpuManagerPolicy").toString()));
      }
      if ((jsonObj.get("podPidsLimit") != null && !jsonObj.get("podPidsLimit").isJsonNull()) && !jsonObj.get("podPidsLimit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `podPidsLimit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("podPidsLimit").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NodeKubeletConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NodeKubeletConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NodeKubeletConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NodeKubeletConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<NodeKubeletConfig>() {
           @Override
           public void write(JsonWriter out, NodeKubeletConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NodeKubeletConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NodeKubeletConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NodeKubeletConfig
   * @throws IOException if the JSON string is invalid with respect to NodeKubeletConfig
   */
  public static NodeKubeletConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NodeKubeletConfig.class);
  }

  /**
   * Convert an instance of NodeKubeletConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

