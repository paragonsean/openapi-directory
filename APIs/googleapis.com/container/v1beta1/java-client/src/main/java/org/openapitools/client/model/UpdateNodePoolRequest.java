/*
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConfidentialNodes;
import org.openapitools.client.model.FastSocket;
import org.openapitools.client.model.GcfsConfig;
import org.openapitools.client.model.LinuxNodeConfig;
import org.openapitools.client.model.NetworkTags;
import org.openapitools.client.model.NodeKubeletConfig;
import org.openapitools.client.model.NodeLabels;
import org.openapitools.client.model.NodeNetworkConfig;
import org.openapitools.client.model.NodePoolLoggingConfig;
import org.openapitools.client.model.NodeTaints;
import org.openapitools.client.model.QueuedProvisioning;
import org.openapitools.client.model.ResourceLabels;
import org.openapitools.client.model.ResourceManagerTags;
import org.openapitools.client.model.UpgradeSettings;
import org.openapitools.client.model.VirtualNIC;
import org.openapitools.client.model.WindowsNodeConfig;
import org.openapitools.client.model.WorkloadMetadataConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SetNodePoolVersionRequest updates the version of a node pool.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:27.538902-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateNodePoolRequest {
  public static final String SERIALIZED_NAME_CLUSTER_ID = "clusterId";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_CLUSTER_ID)
  private String clusterId;

  public static final String SERIALIZED_NAME_CONFIDENTIAL_NODES = "confidentialNodes";
  @SerializedName(SERIALIZED_NAME_CONFIDENTIAL_NODES)
  private ConfidentialNodes confidentialNodes;

  public static final String SERIALIZED_NAME_DISK_SIZE_GB = "diskSizeGb";
  @SerializedName(SERIALIZED_NAME_DISK_SIZE_GB)
  private String diskSizeGb;

  public static final String SERIALIZED_NAME_DISK_TYPE = "diskType";
  @SerializedName(SERIALIZED_NAME_DISK_TYPE)
  private String diskType;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_FAST_SOCKET = "fastSocket";
  @SerializedName(SERIALIZED_NAME_FAST_SOCKET)
  private FastSocket fastSocket;

  public static final String SERIALIZED_NAME_GCFS_CONFIG = "gcfsConfig";
  @SerializedName(SERIALIZED_NAME_GCFS_CONFIG)
  private GcfsConfig gcfsConfig;

  public static final String SERIALIZED_NAME_GVNIC = "gvnic";
  @SerializedName(SERIALIZED_NAME_GVNIC)
  private VirtualNIC gvnic;

  public static final String SERIALIZED_NAME_IMAGE_TYPE = "imageType";
  @SerializedName(SERIALIZED_NAME_IMAGE_TYPE)
  private String imageType;

  public static final String SERIALIZED_NAME_KUBELET_CONFIG = "kubeletConfig";
  @SerializedName(SERIALIZED_NAME_KUBELET_CONFIG)
  private NodeKubeletConfig kubeletConfig;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private NodeLabels labels;

  public static final String SERIALIZED_NAME_LINUX_NODE_CONFIG = "linuxNodeConfig";
  @SerializedName(SERIALIZED_NAME_LINUX_NODE_CONFIG)
  private LinuxNodeConfig linuxNodeConfig;

  public static final String SERIALIZED_NAME_LOCATIONS = "locations";
  @SerializedName(SERIALIZED_NAME_LOCATIONS)
  private List<String> locations = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOGGING_CONFIG = "loggingConfig";
  @SerializedName(SERIALIZED_NAME_LOGGING_CONFIG)
  private NodePoolLoggingConfig loggingConfig;

  public static final String SERIALIZED_NAME_MACHINE_TYPE = "machineType";
  @SerializedName(SERIALIZED_NAME_MACHINE_TYPE)
  private String machineType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NODE_NETWORK_CONFIG = "nodeNetworkConfig";
  @SerializedName(SERIALIZED_NAME_NODE_NETWORK_CONFIG)
  private NodeNetworkConfig nodeNetworkConfig;

  public static final String SERIALIZED_NAME_NODE_POOL_ID = "nodePoolId";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_NODE_POOL_ID)
  private String nodePoolId;

  public static final String SERIALIZED_NAME_NODE_VERSION = "nodeVersion";
  @SerializedName(SERIALIZED_NAME_NODE_VERSION)
  private String nodeVersion;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private String projectId;

  public static final String SERIALIZED_NAME_QUEUED_PROVISIONING = "queuedProvisioning";
  @SerializedName(SERIALIZED_NAME_QUEUED_PROVISIONING)
  private QueuedProvisioning queuedProvisioning;

  public static final String SERIALIZED_NAME_RESOURCE_LABELS = "resourceLabels";
  @SerializedName(SERIALIZED_NAME_RESOURCE_LABELS)
  private ResourceLabels resourceLabels;

  public static final String SERIALIZED_NAME_RESOURCE_MANAGER_TAGS = "resourceManagerTags";
  @SerializedName(SERIALIZED_NAME_RESOURCE_MANAGER_TAGS)
  private ResourceManagerTags resourceManagerTags;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private NetworkTags tags;

  public static final String SERIALIZED_NAME_TAINTS = "taints";
  @SerializedName(SERIALIZED_NAME_TAINTS)
  private NodeTaints taints;

  public static final String SERIALIZED_NAME_UPGRADE_SETTINGS = "upgradeSettings";
  @SerializedName(SERIALIZED_NAME_UPGRADE_SETTINGS)
  private UpgradeSettings upgradeSettings;

  public static final String SERIALIZED_NAME_WINDOWS_NODE_CONFIG = "windowsNodeConfig";
  @SerializedName(SERIALIZED_NAME_WINDOWS_NODE_CONFIG)
  private WindowsNodeConfig windowsNodeConfig;

  public static final String SERIALIZED_NAME_WORKLOAD_METADATA_CONFIG = "workloadMetadataConfig";
  @SerializedName(SERIALIZED_NAME_WORKLOAD_METADATA_CONFIG)
  private WorkloadMetadataConfig workloadMetadataConfig;

  public static final String SERIALIZED_NAME_ZONE = "zone";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_ZONE)
  private String zone;

  public UpdateNodePoolRequest() {
  }

  @Deprecated
  public UpdateNodePoolRequest clusterId(String clusterId) {
    this.clusterId = clusterId;
    return this;
  }

  /**
   * Required. Deprecated. The name of the cluster to upgrade. This field has been deprecated and replaced by the name field.
   * @return clusterId
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getClusterId() {
    return clusterId;
  }

  @Deprecated
  public void setClusterId(String clusterId) {
    this.clusterId = clusterId;
  }


  public UpdateNodePoolRequest confidentialNodes(ConfidentialNodes confidentialNodes) {
    this.confidentialNodes = confidentialNodes;
    return this;
  }

  /**
   * Get confidentialNodes
   * @return confidentialNodes
   */
  @javax.annotation.Nullable
  public ConfidentialNodes getConfidentialNodes() {
    return confidentialNodes;
  }

  public void setConfidentialNodes(ConfidentialNodes confidentialNodes) {
    this.confidentialNodes = confidentialNodes;
  }


  public UpdateNodePoolRequest diskSizeGb(String diskSizeGb) {
    this.diskSizeGb = diskSizeGb;
    return this;
  }

  /**
   * Optional. The desired disk size for nodes in the node pool. Initiates an upgrade operation that migrates the nodes in the node pool to the specified disk size.
   * @return diskSizeGb
   */
  @javax.annotation.Nullable
  public String getDiskSizeGb() {
    return diskSizeGb;
  }

  public void setDiskSizeGb(String diskSizeGb) {
    this.diskSizeGb = diskSizeGb;
  }


  public UpdateNodePoolRequest diskType(String diskType) {
    this.diskType = diskType;
    return this;
  }

  /**
   * Optional. The desired disk type for nodes in the node pool. Initiates an upgrade operation that migrates the nodes in the node pool to the specified disk type.
   * @return diskType
   */
  @javax.annotation.Nullable
  public String getDiskType() {
    return diskType;
  }

  public void setDiskType(String diskType) {
    this.diskType = diskType;
  }


  public UpdateNodePoolRequest etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * The current etag of the node pool. If an etag is provided and does not match the current etag of the node pool, update will be blocked and an ABORTED error will be returned.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public UpdateNodePoolRequest fastSocket(FastSocket fastSocket) {
    this.fastSocket = fastSocket;
    return this;
  }

  /**
   * Get fastSocket
   * @return fastSocket
   */
  @javax.annotation.Nullable
  public FastSocket getFastSocket() {
    return fastSocket;
  }

  public void setFastSocket(FastSocket fastSocket) {
    this.fastSocket = fastSocket;
  }


  public UpdateNodePoolRequest gcfsConfig(GcfsConfig gcfsConfig) {
    this.gcfsConfig = gcfsConfig;
    return this;
  }

  /**
   * Get gcfsConfig
   * @return gcfsConfig
   */
  @javax.annotation.Nullable
  public GcfsConfig getGcfsConfig() {
    return gcfsConfig;
  }

  public void setGcfsConfig(GcfsConfig gcfsConfig) {
    this.gcfsConfig = gcfsConfig;
  }


  public UpdateNodePoolRequest gvnic(VirtualNIC gvnic) {
    this.gvnic = gvnic;
    return this;
  }

  /**
   * Get gvnic
   * @return gvnic
   */
  @javax.annotation.Nullable
  public VirtualNIC getGvnic() {
    return gvnic;
  }

  public void setGvnic(VirtualNIC gvnic) {
    this.gvnic = gvnic;
  }


  public UpdateNodePoolRequest imageType(String imageType) {
    this.imageType = imageType;
    return this;
  }

  /**
   * Required. The desired image type for the node pool. Please see https://cloud.google.com/kubernetes-engine/docs/concepts/node-images for available image types.
   * @return imageType
   */
  @javax.annotation.Nullable
  public String getImageType() {
    return imageType;
  }

  public void setImageType(String imageType) {
    this.imageType = imageType;
  }


  public UpdateNodePoolRequest kubeletConfig(NodeKubeletConfig kubeletConfig) {
    this.kubeletConfig = kubeletConfig;
    return this;
  }

  /**
   * Get kubeletConfig
   * @return kubeletConfig
   */
  @javax.annotation.Nullable
  public NodeKubeletConfig getKubeletConfig() {
    return kubeletConfig;
  }

  public void setKubeletConfig(NodeKubeletConfig kubeletConfig) {
    this.kubeletConfig = kubeletConfig;
  }


  public UpdateNodePoolRequest labels(NodeLabels labels) {
    this.labels = labels;
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @javax.annotation.Nullable
  public NodeLabels getLabels() {
    return labels;
  }

  public void setLabels(NodeLabels labels) {
    this.labels = labels;
  }


  public UpdateNodePoolRequest linuxNodeConfig(LinuxNodeConfig linuxNodeConfig) {
    this.linuxNodeConfig = linuxNodeConfig;
    return this;
  }

  /**
   * Get linuxNodeConfig
   * @return linuxNodeConfig
   */
  @javax.annotation.Nullable
  public LinuxNodeConfig getLinuxNodeConfig() {
    return linuxNodeConfig;
  }

  public void setLinuxNodeConfig(LinuxNodeConfig linuxNodeConfig) {
    this.linuxNodeConfig = linuxNodeConfig;
  }


  public UpdateNodePoolRequest locations(List<String> locations) {
    this.locations = locations;
    return this;
  }

  public UpdateNodePoolRequest addLocationsItem(String locationsItem) {
    if (this.locations == null) {
      this.locations = new ArrayList<>();
    }
    this.locations.add(locationsItem);
    return this;
  }

  /**
   * The desired list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the node pool&#39;s nodes should be located. Changing the locations for a node pool will result in nodes being either created or removed from the node pool, depending on whether locations are being added or removed.
   * @return locations
   */
  @javax.annotation.Nullable
  public List<String> getLocations() {
    return locations;
  }

  public void setLocations(List<String> locations) {
    this.locations = locations;
  }


  public UpdateNodePoolRequest loggingConfig(NodePoolLoggingConfig loggingConfig) {
    this.loggingConfig = loggingConfig;
    return this;
  }

  /**
   * Get loggingConfig
   * @return loggingConfig
   */
  @javax.annotation.Nullable
  public NodePoolLoggingConfig getLoggingConfig() {
    return loggingConfig;
  }

  public void setLoggingConfig(NodePoolLoggingConfig loggingConfig) {
    this.loggingConfig = loggingConfig;
  }


  public UpdateNodePoolRequest machineType(String machineType) {
    this.machineType = machineType;
    return this;
  }

  /**
   * Optional. The desired machine type for nodes in the node pool. Initiates an upgrade operation that migrates the nodes in the node pool to the specified machine type.
   * @return machineType
   */
  @javax.annotation.Nullable
  public String getMachineType() {
    return machineType;
  }

  public void setMachineType(String machineType) {
    this.machineType = machineType;
  }


  public UpdateNodePoolRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name (project, location, cluster, node pool) of the node pool to update. Specified in the format &#x60;projects/_*_/locations/_*_/clusters/_*_/nodePools/_*&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdateNodePoolRequest nodeNetworkConfig(NodeNetworkConfig nodeNetworkConfig) {
    this.nodeNetworkConfig = nodeNetworkConfig;
    return this;
  }

  /**
   * Get nodeNetworkConfig
   * @return nodeNetworkConfig
   */
  @javax.annotation.Nullable
  public NodeNetworkConfig getNodeNetworkConfig() {
    return nodeNetworkConfig;
  }

  public void setNodeNetworkConfig(NodeNetworkConfig nodeNetworkConfig) {
    this.nodeNetworkConfig = nodeNetworkConfig;
  }


  @Deprecated
  public UpdateNodePoolRequest nodePoolId(String nodePoolId) {
    this.nodePoolId = nodePoolId;
    return this;
  }

  /**
   * Required. Deprecated. The name of the node pool to upgrade. This field has been deprecated and replaced by the name field.
   * @return nodePoolId
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getNodePoolId() {
    return nodePoolId;
  }

  @Deprecated
  public void setNodePoolId(String nodePoolId) {
    this.nodePoolId = nodePoolId;
  }


  public UpdateNodePoolRequest nodeVersion(String nodeVersion) {
    this.nodeVersion = nodeVersion;
    return this;
  }

  /**
   * Required. The Kubernetes version to change the nodes to (typically an upgrade). Users may specify either explicit versions offered by Kubernetes Engine or version aliases, which have the following behavior: - \&quot;latest\&quot;: picks the highest valid Kubernetes version - \&quot;1.X\&quot;: picks the highest valid patch+gke.N patch in the 1.X version - \&quot;1.X.Y\&quot;: picks the highest valid gke.N patch in the 1.X.Y version - \&quot;1.X.Y-gke.N\&quot;: picks an explicit Kubernetes version - \&quot;-\&quot;: picks the Kubernetes master version
   * @return nodeVersion
   */
  @javax.annotation.Nullable
  public String getNodeVersion() {
    return nodeVersion;
  }

  public void setNodeVersion(String nodeVersion) {
    this.nodeVersion = nodeVersion;
  }


  @Deprecated
  public UpdateNodePoolRequest projectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.
   * @return projectId
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getProjectId() {
    return projectId;
  }

  @Deprecated
  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }


  public UpdateNodePoolRequest queuedProvisioning(QueuedProvisioning queuedProvisioning) {
    this.queuedProvisioning = queuedProvisioning;
    return this;
  }

  /**
   * Get queuedProvisioning
   * @return queuedProvisioning
   */
  @javax.annotation.Nullable
  public QueuedProvisioning getQueuedProvisioning() {
    return queuedProvisioning;
  }

  public void setQueuedProvisioning(QueuedProvisioning queuedProvisioning) {
    this.queuedProvisioning = queuedProvisioning;
  }


  public UpdateNodePoolRequest resourceLabels(ResourceLabels resourceLabels) {
    this.resourceLabels = resourceLabels;
    return this;
  }

  /**
   * Get resourceLabels
   * @return resourceLabels
   */
  @javax.annotation.Nullable
  public ResourceLabels getResourceLabels() {
    return resourceLabels;
  }

  public void setResourceLabels(ResourceLabels resourceLabels) {
    this.resourceLabels = resourceLabels;
  }


  public UpdateNodePoolRequest resourceManagerTags(ResourceManagerTags resourceManagerTags) {
    this.resourceManagerTags = resourceManagerTags;
    return this;
  }

  /**
   * Get resourceManagerTags
   * @return resourceManagerTags
   */
  @javax.annotation.Nullable
  public ResourceManagerTags getResourceManagerTags() {
    return resourceManagerTags;
  }

  public void setResourceManagerTags(ResourceManagerTags resourceManagerTags) {
    this.resourceManagerTags = resourceManagerTags;
  }


  public UpdateNodePoolRequest tags(NetworkTags tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public NetworkTags getTags() {
    return tags;
  }

  public void setTags(NetworkTags tags) {
    this.tags = tags;
  }


  public UpdateNodePoolRequest taints(NodeTaints taints) {
    this.taints = taints;
    return this;
  }

  /**
   * Get taints
   * @return taints
   */
  @javax.annotation.Nullable
  public NodeTaints getTaints() {
    return taints;
  }

  public void setTaints(NodeTaints taints) {
    this.taints = taints;
  }


  public UpdateNodePoolRequest upgradeSettings(UpgradeSettings upgradeSettings) {
    this.upgradeSettings = upgradeSettings;
    return this;
  }

  /**
   * Get upgradeSettings
   * @return upgradeSettings
   */
  @javax.annotation.Nullable
  public UpgradeSettings getUpgradeSettings() {
    return upgradeSettings;
  }

  public void setUpgradeSettings(UpgradeSettings upgradeSettings) {
    this.upgradeSettings = upgradeSettings;
  }


  public UpdateNodePoolRequest windowsNodeConfig(WindowsNodeConfig windowsNodeConfig) {
    this.windowsNodeConfig = windowsNodeConfig;
    return this;
  }

  /**
   * Get windowsNodeConfig
   * @return windowsNodeConfig
   */
  @javax.annotation.Nullable
  public WindowsNodeConfig getWindowsNodeConfig() {
    return windowsNodeConfig;
  }

  public void setWindowsNodeConfig(WindowsNodeConfig windowsNodeConfig) {
    this.windowsNodeConfig = windowsNodeConfig;
  }


  public UpdateNodePoolRequest workloadMetadataConfig(WorkloadMetadataConfig workloadMetadataConfig) {
    this.workloadMetadataConfig = workloadMetadataConfig;
    return this;
  }

  /**
   * Get workloadMetadataConfig
   * @return workloadMetadataConfig
   */
  @javax.annotation.Nullable
  public WorkloadMetadataConfig getWorkloadMetadataConfig() {
    return workloadMetadataConfig;
  }

  public void setWorkloadMetadataConfig(WorkloadMetadataConfig workloadMetadataConfig) {
    this.workloadMetadataConfig = workloadMetadataConfig;
  }


  @Deprecated
  public UpdateNodePoolRequest zone(String zone) {
    this.zone = zone;
    return this;
  }

  /**
   * Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.
   * @return zone
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getZone() {
    return zone;
  }

  @Deprecated
  public void setZone(String zone) {
    this.zone = zone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateNodePoolRequest updateNodePoolRequest = (UpdateNodePoolRequest) o;
    return Objects.equals(this.clusterId, updateNodePoolRequest.clusterId) &&
        Objects.equals(this.confidentialNodes, updateNodePoolRequest.confidentialNodes) &&
        Objects.equals(this.diskSizeGb, updateNodePoolRequest.diskSizeGb) &&
        Objects.equals(this.diskType, updateNodePoolRequest.diskType) &&
        Objects.equals(this.etag, updateNodePoolRequest.etag) &&
        Objects.equals(this.fastSocket, updateNodePoolRequest.fastSocket) &&
        Objects.equals(this.gcfsConfig, updateNodePoolRequest.gcfsConfig) &&
        Objects.equals(this.gvnic, updateNodePoolRequest.gvnic) &&
        Objects.equals(this.imageType, updateNodePoolRequest.imageType) &&
        Objects.equals(this.kubeletConfig, updateNodePoolRequest.kubeletConfig) &&
        Objects.equals(this.labels, updateNodePoolRequest.labels) &&
        Objects.equals(this.linuxNodeConfig, updateNodePoolRequest.linuxNodeConfig) &&
        Objects.equals(this.locations, updateNodePoolRequest.locations) &&
        Objects.equals(this.loggingConfig, updateNodePoolRequest.loggingConfig) &&
        Objects.equals(this.machineType, updateNodePoolRequest.machineType) &&
        Objects.equals(this.name, updateNodePoolRequest.name) &&
        Objects.equals(this.nodeNetworkConfig, updateNodePoolRequest.nodeNetworkConfig) &&
        Objects.equals(this.nodePoolId, updateNodePoolRequest.nodePoolId) &&
        Objects.equals(this.nodeVersion, updateNodePoolRequest.nodeVersion) &&
        Objects.equals(this.projectId, updateNodePoolRequest.projectId) &&
        Objects.equals(this.queuedProvisioning, updateNodePoolRequest.queuedProvisioning) &&
        Objects.equals(this.resourceLabels, updateNodePoolRequest.resourceLabels) &&
        Objects.equals(this.resourceManagerTags, updateNodePoolRequest.resourceManagerTags) &&
        Objects.equals(this.tags, updateNodePoolRequest.tags) &&
        Objects.equals(this.taints, updateNodePoolRequest.taints) &&
        Objects.equals(this.upgradeSettings, updateNodePoolRequest.upgradeSettings) &&
        Objects.equals(this.windowsNodeConfig, updateNodePoolRequest.windowsNodeConfig) &&
        Objects.equals(this.workloadMetadataConfig, updateNodePoolRequest.workloadMetadataConfig) &&
        Objects.equals(this.zone, updateNodePoolRequest.zone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clusterId, confidentialNodes, diskSizeGb, diskType, etag, fastSocket, gcfsConfig, gvnic, imageType, kubeletConfig, labels, linuxNodeConfig, locations, loggingConfig, machineType, name, nodeNetworkConfig, nodePoolId, nodeVersion, projectId, queuedProvisioning, resourceLabels, resourceManagerTags, tags, taints, upgradeSettings, windowsNodeConfig, workloadMetadataConfig, zone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateNodePoolRequest {\n");
    sb.append("    clusterId: ").append(toIndentedString(clusterId)).append("\n");
    sb.append("    confidentialNodes: ").append(toIndentedString(confidentialNodes)).append("\n");
    sb.append("    diskSizeGb: ").append(toIndentedString(diskSizeGb)).append("\n");
    sb.append("    diskType: ").append(toIndentedString(diskType)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    fastSocket: ").append(toIndentedString(fastSocket)).append("\n");
    sb.append("    gcfsConfig: ").append(toIndentedString(gcfsConfig)).append("\n");
    sb.append("    gvnic: ").append(toIndentedString(gvnic)).append("\n");
    sb.append("    imageType: ").append(toIndentedString(imageType)).append("\n");
    sb.append("    kubeletConfig: ").append(toIndentedString(kubeletConfig)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    linuxNodeConfig: ").append(toIndentedString(linuxNodeConfig)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    loggingConfig: ").append(toIndentedString(loggingConfig)).append("\n");
    sb.append("    machineType: ").append(toIndentedString(machineType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nodeNetworkConfig: ").append(toIndentedString(nodeNetworkConfig)).append("\n");
    sb.append("    nodePoolId: ").append(toIndentedString(nodePoolId)).append("\n");
    sb.append("    nodeVersion: ").append(toIndentedString(nodeVersion)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    queuedProvisioning: ").append(toIndentedString(queuedProvisioning)).append("\n");
    sb.append("    resourceLabels: ").append(toIndentedString(resourceLabels)).append("\n");
    sb.append("    resourceManagerTags: ").append(toIndentedString(resourceManagerTags)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    taints: ").append(toIndentedString(taints)).append("\n");
    sb.append("    upgradeSettings: ").append(toIndentedString(upgradeSettings)).append("\n");
    sb.append("    windowsNodeConfig: ").append(toIndentedString(windowsNodeConfig)).append("\n");
    sb.append("    workloadMetadataConfig: ").append(toIndentedString(workloadMetadataConfig)).append("\n");
    sb.append("    zone: ").append(toIndentedString(zone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clusterId");
    openapiFields.add("confidentialNodes");
    openapiFields.add("diskSizeGb");
    openapiFields.add("diskType");
    openapiFields.add("etag");
    openapiFields.add("fastSocket");
    openapiFields.add("gcfsConfig");
    openapiFields.add("gvnic");
    openapiFields.add("imageType");
    openapiFields.add("kubeletConfig");
    openapiFields.add("labels");
    openapiFields.add("linuxNodeConfig");
    openapiFields.add("locations");
    openapiFields.add("loggingConfig");
    openapiFields.add("machineType");
    openapiFields.add("name");
    openapiFields.add("nodeNetworkConfig");
    openapiFields.add("nodePoolId");
    openapiFields.add("nodeVersion");
    openapiFields.add("projectId");
    openapiFields.add("queuedProvisioning");
    openapiFields.add("resourceLabels");
    openapiFields.add("resourceManagerTags");
    openapiFields.add("tags");
    openapiFields.add("taints");
    openapiFields.add("upgradeSettings");
    openapiFields.add("windowsNodeConfig");
    openapiFields.add("workloadMetadataConfig");
    openapiFields.add("zone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateNodePoolRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateNodePoolRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateNodePoolRequest is not found in the empty JSON string", UpdateNodePoolRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateNodePoolRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateNodePoolRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clusterId") != null && !jsonObj.get("clusterId").isJsonNull()) && !jsonObj.get("clusterId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clusterId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clusterId").toString()));
      }
      // validate the optional field `confidentialNodes`
      if (jsonObj.get("confidentialNodes") != null && !jsonObj.get("confidentialNodes").isJsonNull()) {
        ConfidentialNodes.validateJsonElement(jsonObj.get("confidentialNodes"));
      }
      if ((jsonObj.get("diskSizeGb") != null && !jsonObj.get("diskSizeGb").isJsonNull()) && !jsonObj.get("diskSizeGb").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diskSizeGb` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diskSizeGb").toString()));
      }
      if ((jsonObj.get("diskType") != null && !jsonObj.get("diskType").isJsonNull()) && !jsonObj.get("diskType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diskType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diskType").toString()));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      // validate the optional field `fastSocket`
      if (jsonObj.get("fastSocket") != null && !jsonObj.get("fastSocket").isJsonNull()) {
        FastSocket.validateJsonElement(jsonObj.get("fastSocket"));
      }
      // validate the optional field `gcfsConfig`
      if (jsonObj.get("gcfsConfig") != null && !jsonObj.get("gcfsConfig").isJsonNull()) {
        GcfsConfig.validateJsonElement(jsonObj.get("gcfsConfig"));
      }
      // validate the optional field `gvnic`
      if (jsonObj.get("gvnic") != null && !jsonObj.get("gvnic").isJsonNull()) {
        VirtualNIC.validateJsonElement(jsonObj.get("gvnic"));
      }
      if ((jsonObj.get("imageType") != null && !jsonObj.get("imageType").isJsonNull()) && !jsonObj.get("imageType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageType").toString()));
      }
      // validate the optional field `kubeletConfig`
      if (jsonObj.get("kubeletConfig") != null && !jsonObj.get("kubeletConfig").isJsonNull()) {
        NodeKubeletConfig.validateJsonElement(jsonObj.get("kubeletConfig"));
      }
      // validate the optional field `labels`
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull()) {
        NodeLabels.validateJsonElement(jsonObj.get("labels"));
      }
      // validate the optional field `linuxNodeConfig`
      if (jsonObj.get("linuxNodeConfig") != null && !jsonObj.get("linuxNodeConfig").isJsonNull()) {
        LinuxNodeConfig.validateJsonElement(jsonObj.get("linuxNodeConfig"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("locations") != null && !jsonObj.get("locations").isJsonNull() && !jsonObj.get("locations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `locations` to be an array in the JSON string but got `%s`", jsonObj.get("locations").toString()));
      }
      // validate the optional field `loggingConfig`
      if (jsonObj.get("loggingConfig") != null && !jsonObj.get("loggingConfig").isJsonNull()) {
        NodePoolLoggingConfig.validateJsonElement(jsonObj.get("loggingConfig"));
      }
      if ((jsonObj.get("machineType") != null && !jsonObj.get("machineType").isJsonNull()) && !jsonObj.get("machineType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `machineType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("machineType").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `nodeNetworkConfig`
      if (jsonObj.get("nodeNetworkConfig") != null && !jsonObj.get("nodeNetworkConfig").isJsonNull()) {
        NodeNetworkConfig.validateJsonElement(jsonObj.get("nodeNetworkConfig"));
      }
      if ((jsonObj.get("nodePoolId") != null && !jsonObj.get("nodePoolId").isJsonNull()) && !jsonObj.get("nodePoolId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodePoolId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nodePoolId").toString()));
      }
      if ((jsonObj.get("nodeVersion") != null && !jsonObj.get("nodeVersion").isJsonNull()) && !jsonObj.get("nodeVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodeVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nodeVersion").toString()));
      }
      if ((jsonObj.get("projectId") != null && !jsonObj.get("projectId").isJsonNull()) && !jsonObj.get("projectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectId").toString()));
      }
      // validate the optional field `queuedProvisioning`
      if (jsonObj.get("queuedProvisioning") != null && !jsonObj.get("queuedProvisioning").isJsonNull()) {
        QueuedProvisioning.validateJsonElement(jsonObj.get("queuedProvisioning"));
      }
      // validate the optional field `resourceLabels`
      if (jsonObj.get("resourceLabels") != null && !jsonObj.get("resourceLabels").isJsonNull()) {
        ResourceLabels.validateJsonElement(jsonObj.get("resourceLabels"));
      }
      // validate the optional field `resourceManagerTags`
      if (jsonObj.get("resourceManagerTags") != null && !jsonObj.get("resourceManagerTags").isJsonNull()) {
        ResourceManagerTags.validateJsonElement(jsonObj.get("resourceManagerTags"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        NetworkTags.validateJsonElement(jsonObj.get("tags"));
      }
      // validate the optional field `taints`
      if (jsonObj.get("taints") != null && !jsonObj.get("taints").isJsonNull()) {
        NodeTaints.validateJsonElement(jsonObj.get("taints"));
      }
      // validate the optional field `upgradeSettings`
      if (jsonObj.get("upgradeSettings") != null && !jsonObj.get("upgradeSettings").isJsonNull()) {
        UpgradeSettings.validateJsonElement(jsonObj.get("upgradeSettings"));
      }
      // validate the optional field `windowsNodeConfig`
      if (jsonObj.get("windowsNodeConfig") != null && !jsonObj.get("windowsNodeConfig").isJsonNull()) {
        WindowsNodeConfig.validateJsonElement(jsonObj.get("windowsNodeConfig"));
      }
      // validate the optional field `workloadMetadataConfig`
      if (jsonObj.get("workloadMetadataConfig") != null && !jsonObj.get("workloadMetadataConfig").isJsonNull()) {
        WorkloadMetadataConfig.validateJsonElement(jsonObj.get("workloadMetadataConfig"));
      }
      if ((jsonObj.get("zone") != null && !jsonObj.get("zone").isJsonNull()) && !jsonObj.get("zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateNodePoolRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateNodePoolRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateNodePoolRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateNodePoolRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateNodePoolRequest>() {
           @Override
           public void write(JsonWriter out, UpdateNodePoolRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateNodePoolRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateNodePoolRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateNodePoolRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateNodePoolRequest
   */
  public static UpdateNodePoolRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateNodePoolRequest.class);
  }

  /**
   * Convert an instance of UpdateNodePoolRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

