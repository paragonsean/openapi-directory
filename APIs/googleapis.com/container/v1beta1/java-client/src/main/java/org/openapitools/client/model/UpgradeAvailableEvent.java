/*
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ReleaseChannel;
import org.openapitools.client.model.WindowsVersions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpgradeAvailableEvent is a notification sent to customers when a new available version is released.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:27.538902-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpgradeAvailableEvent {
  public static final String SERIALIZED_NAME_RELEASE_CHANNEL = "releaseChannel";
  @SerializedName(SERIALIZED_NAME_RELEASE_CHANNEL)
  private ReleaseChannel releaseChannel;

  public static final String SERIALIZED_NAME_RESOURCE = "resource";
  @SerializedName(SERIALIZED_NAME_RESOURCE)
  private String resource;

  /**
   * The resource type of the release version.
   */
  @JsonAdapter(ResourceTypeEnum.Adapter.class)
  public enum ResourceTypeEnum {
    UPGRADE_RESOURCE_TYPE_UNSPECIFIED("UPGRADE_RESOURCE_TYPE_UNSPECIFIED"),
    
    MASTER("MASTER"),
    
    NODE_POOL("NODE_POOL");

    private String value;

    ResourceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResourceTypeEnum fromValue(String value) {
      for (ResourceTypeEnum b : ResourceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResourceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResourceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResourceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResourceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResourceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private ResourceTypeEnum resourceType;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_WINDOWS_VERSIONS = "windowsVersions";
  @SerializedName(SERIALIZED_NAME_WINDOWS_VERSIONS)
  private WindowsVersions windowsVersions;

  public UpgradeAvailableEvent() {
  }

  public UpgradeAvailableEvent releaseChannel(ReleaseChannel releaseChannel) {
    this.releaseChannel = releaseChannel;
    return this;
  }

  /**
   * Get releaseChannel
   * @return releaseChannel
   */
  @javax.annotation.Nullable
  public ReleaseChannel getReleaseChannel() {
    return releaseChannel;
  }

  public void setReleaseChannel(ReleaseChannel releaseChannel) {
    this.releaseChannel = releaseChannel;
  }


  public UpgradeAvailableEvent resource(String resource) {
    this.resource = resource;
    return this;
  }

  /**
   * Optional relative path to the resource. For example, the relative path of the node pool.
   * @return resource
   */
  @javax.annotation.Nullable
  public String getResource() {
    return resource;
  }

  public void setResource(String resource) {
    this.resource = resource;
  }


  public UpgradeAvailableEvent resourceType(ResourceTypeEnum resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * The resource type of the release version.
   * @return resourceType
   */
  @javax.annotation.Nullable
  public ResourceTypeEnum getResourceType() {
    return resourceType;
  }

  public void setResourceType(ResourceTypeEnum resourceType) {
    this.resourceType = resourceType;
  }


  public UpgradeAvailableEvent version(String version) {
    this.version = version;
    return this;
  }

  /**
   * The release version available for upgrade.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  public UpgradeAvailableEvent windowsVersions(WindowsVersions windowsVersions) {
    this.windowsVersions = windowsVersions;
    return this;
  }

  /**
   * Get windowsVersions
   * @return windowsVersions
   */
  @javax.annotation.Nullable
  public WindowsVersions getWindowsVersions() {
    return windowsVersions;
  }

  public void setWindowsVersions(WindowsVersions windowsVersions) {
    this.windowsVersions = windowsVersions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpgradeAvailableEvent upgradeAvailableEvent = (UpgradeAvailableEvent) o;
    return Objects.equals(this.releaseChannel, upgradeAvailableEvent.releaseChannel) &&
        Objects.equals(this.resource, upgradeAvailableEvent.resource) &&
        Objects.equals(this.resourceType, upgradeAvailableEvent.resourceType) &&
        Objects.equals(this.version, upgradeAvailableEvent.version) &&
        Objects.equals(this.windowsVersions, upgradeAvailableEvent.windowsVersions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(releaseChannel, resource, resourceType, version, windowsVersions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpgradeAvailableEvent {\n");
    sb.append("    releaseChannel: ").append(toIndentedString(releaseChannel)).append("\n");
    sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    windowsVersions: ").append(toIndentedString(windowsVersions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("releaseChannel");
    openapiFields.add("resource");
    openapiFields.add("resourceType");
    openapiFields.add("version");
    openapiFields.add("windowsVersions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpgradeAvailableEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpgradeAvailableEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpgradeAvailableEvent is not found in the empty JSON string", UpgradeAvailableEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpgradeAvailableEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpgradeAvailableEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `releaseChannel`
      if (jsonObj.get("releaseChannel") != null && !jsonObj.get("releaseChannel").isJsonNull()) {
        ReleaseChannel.validateJsonElement(jsonObj.get("releaseChannel"));
      }
      if ((jsonObj.get("resource") != null && !jsonObj.get("resource").isJsonNull()) && !jsonObj.get("resource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource").toString()));
      }
      if ((jsonObj.get("resourceType") != null && !jsonObj.get("resourceType").isJsonNull()) && !jsonObj.get("resourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceType").toString()));
      }
      // validate the optional field `resourceType`
      if (jsonObj.get("resourceType") != null && !jsonObj.get("resourceType").isJsonNull()) {
        ResourceTypeEnum.validateJsonElement(jsonObj.get("resourceType"));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      // validate the optional field `windowsVersions`
      if (jsonObj.get("windowsVersions") != null && !jsonObj.get("windowsVersions").isJsonNull()) {
        WindowsVersions.validateJsonElement(jsonObj.get("windowsVersions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpgradeAvailableEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpgradeAvailableEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpgradeAvailableEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpgradeAvailableEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<UpgradeAvailableEvent>() {
           @Override
           public void write(JsonWriter out, UpgradeAvailableEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpgradeAvailableEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpgradeAvailableEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpgradeAvailableEvent
   * @throws IOException if the JSON string is invalid with respect to UpgradeAvailableEvent
   */
  public static UpgradeAvailableEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpgradeAvailableEvent.class);
  }

  /**
   * Convert an instance of UpgradeAvailableEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

