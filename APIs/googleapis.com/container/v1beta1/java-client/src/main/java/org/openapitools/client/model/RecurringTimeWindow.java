/*
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TimeWindow;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents an arbitrary window of time that recurs.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:27.538902-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RecurringTimeWindow {
  public static final String SERIALIZED_NAME_RECURRENCE = "recurrence";
  @SerializedName(SERIALIZED_NAME_RECURRENCE)
  private String recurrence;

  public static final String SERIALIZED_NAME_WINDOW = "window";
  @SerializedName(SERIALIZED_NAME_WINDOW)
  private TimeWindow window;

  public RecurringTimeWindow() {
  }

  public RecurringTimeWindow recurrence(String recurrence) {
    this.recurrence = recurrence;
    return this;
  }

  /**
   * An RRULE (https://tools.ietf.org/html/rfc5545#section-3.8.5.3) for how this window reccurs. They go on for the span of time between the start and end time. For example, to have something repeat every weekday, you&#39;d use: &#x60;FREQ&#x3D;WEEKLY;BYDAY&#x3D;MO,TU,WE,TH,FR&#x60; To repeat some window daily (equivalent to the DailyMaintenanceWindow): &#x60;FREQ&#x3D;DAILY&#x60; For the first weekend of every month: &#x60;FREQ&#x3D;MONTHLY;BYSETPOS&#x3D;1;BYDAY&#x3D;SA,SU&#x60; This specifies how frequently the window starts. Eg, if you wanted to have a 9-5 UTC-4 window every weekday, you&#39;d use something like: &#x60;&#x60;&#x60; start time &#x3D; 2019-01-01T09:00:00-0400 end time &#x3D; 2019-01-01T17:00:00-0400 recurrence &#x3D; FREQ&#x3D;WEEKLY;BYDAY&#x3D;MO,TU,WE,TH,FR &#x60;&#x60;&#x60; Windows can span multiple days. Eg, to make the window encompass every weekend from midnight Saturday till the last minute of Sunday UTC: &#x60;&#x60;&#x60; start time &#x3D; 2019-01-05T00:00:00Z end time &#x3D; 2019-01-07T23:59:00Z recurrence &#x3D; FREQ&#x3D;WEEKLY;BYDAY&#x3D;SA &#x60;&#x60;&#x60; Note the start and end time&#39;s specific dates are largely arbitrary except to specify duration of the window and when it first starts. The FREQ values of HOURLY, MINUTELY, and SECONDLY are not supported.
   * @return recurrence
   */
  @javax.annotation.Nullable
  public String getRecurrence() {
    return recurrence;
  }

  public void setRecurrence(String recurrence) {
    this.recurrence = recurrence;
  }


  public RecurringTimeWindow window(TimeWindow window) {
    this.window = window;
    return this;
  }

  /**
   * Get window
   * @return window
   */
  @javax.annotation.Nullable
  public TimeWindow getWindow() {
    return window;
  }

  public void setWindow(TimeWindow window) {
    this.window = window;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecurringTimeWindow recurringTimeWindow = (RecurringTimeWindow) o;
    return Objects.equals(this.recurrence, recurringTimeWindow.recurrence) &&
        Objects.equals(this.window, recurringTimeWindow.window);
  }

  @Override
  public int hashCode() {
    return Objects.hash(recurrence, window);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecurringTimeWindow {\n");
    sb.append("    recurrence: ").append(toIndentedString(recurrence)).append("\n");
    sb.append("    window: ").append(toIndentedString(window)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("recurrence");
    openapiFields.add("window");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecurringTimeWindow
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecurringTimeWindow.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecurringTimeWindow is not found in the empty JSON string", RecurringTimeWindow.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecurringTimeWindow.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecurringTimeWindow` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("recurrence") != null && !jsonObj.get("recurrence").isJsonNull()) && !jsonObj.get("recurrence").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recurrence` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recurrence").toString()));
      }
      // validate the optional field `window`
      if (jsonObj.get("window") != null && !jsonObj.get("window").isJsonNull()) {
        TimeWindow.validateJsonElement(jsonObj.get("window"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecurringTimeWindow.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecurringTimeWindow' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecurringTimeWindow> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecurringTimeWindow.class));

       return (TypeAdapter<T>) new TypeAdapter<RecurringTimeWindow>() {
           @Override
           public void write(JsonWriter out, RecurringTimeWindow value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecurringTimeWindow read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecurringTimeWindow given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecurringTimeWindow
   * @throws IOException if the JSON string is invalid with respect to RecurringTimeWindow
   */
  public static RecurringTimeWindow fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecurringTimeWindow.class);
  }

  /**
   * Convert an instance of RecurringTimeWindow to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

