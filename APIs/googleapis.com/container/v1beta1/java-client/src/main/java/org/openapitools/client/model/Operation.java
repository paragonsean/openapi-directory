/*
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OperationProgress;
import org.openapitools.client.model.Status;
import org.openapitools.client.model.StatusCondition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:27.538902-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Operation {
  public static final String SERIALIZED_NAME_CLUSTER_CONDITIONS = "clusterConditions";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_CLUSTER_CONDITIONS)
  private List<StatusCondition> clusterConditions = new ArrayList<>();

  public static final String SERIALIZED_NAME_DETAIL = "detail";
  @SerializedName(SERIALIZED_NAME_DETAIL)
  private String detail;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private Status error;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NODEPOOL_CONDITIONS = "nodepoolConditions";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_NODEPOOL_CONDITIONS)
  private List<StatusCondition> nodepoolConditions = new ArrayList<>();

  /**
   * The operation type.
   */
  @JsonAdapter(OperationTypeEnum.Adapter.class)
  public enum OperationTypeEnum {
    TYPE_UNSPECIFIED("TYPE_UNSPECIFIED"),
    
    CREATE_CLUSTER("CREATE_CLUSTER"),
    
    DELETE_CLUSTER("DELETE_CLUSTER"),
    
    UPGRADE_MASTER("UPGRADE_MASTER"),
    
    UPGRADE_NODES("UPGRADE_NODES"),
    
    REPAIR_CLUSTER("REPAIR_CLUSTER"),
    
    UPDATE_CLUSTER("UPDATE_CLUSTER"),
    
    CREATE_NODE_POOL("CREATE_NODE_POOL"),
    
    DELETE_NODE_POOL("DELETE_NODE_POOL"),
    
    SET_NODE_POOL_MANAGEMENT("SET_NODE_POOL_MANAGEMENT"),
    
    AUTO_REPAIR_NODES("AUTO_REPAIR_NODES"),
    
    AUTO_UPGRADE_NODES("AUTO_UPGRADE_NODES"),
    
    SET_LABELS("SET_LABELS"),
    
    SET_MASTER_AUTH("SET_MASTER_AUTH"),
    
    SET_NODE_POOL_SIZE("SET_NODE_POOL_SIZE"),
    
    SET_NETWORK_POLICY("SET_NETWORK_POLICY"),
    
    SET_MAINTENANCE_POLICY("SET_MAINTENANCE_POLICY"),
    
    RESIZE_CLUSTER("RESIZE_CLUSTER"),
    
    FLEET_FEATURE_UPGRADE("FLEET_FEATURE_UPGRADE");

    private String value;

    OperationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperationTypeEnum fromValue(String value) {
      for (OperationTypeEnum b : OperationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OperationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OperationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OperationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OPERATION_TYPE = "operationType";
  @SerializedName(SERIALIZED_NAME_OPERATION_TYPE)
  private OperationTypeEnum operationType;

  public static final String SERIALIZED_NAME_PROGRESS = "progress";
  @SerializedName(SERIALIZED_NAME_PROGRESS)
  private OperationProgress progress;

  public static final String SERIALIZED_NAME_SELF_LINK = "selfLink";
  @SerializedName(SERIALIZED_NAME_SELF_LINK)
  private String selfLink;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  /**
   * The current status of the operation.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    STATUS_UNSPECIFIED("STATUS_UNSPECIFIED"),
    
    PENDING("PENDING"),
    
    RUNNING("RUNNING"),
    
    DONE("DONE"),
    
    ABORTING("ABORTING");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE = "statusMessage";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
  private String statusMessage;

  public static final String SERIALIZED_NAME_TARGET_LINK = "targetLink";
  @SerializedName(SERIALIZED_NAME_TARGET_LINK)
  private String targetLink;

  public static final String SERIALIZED_NAME_ZONE = "zone";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_ZONE)
  private String zone;

  public Operation() {
  }

  public Operation(
     String statusMessage
  ) {
    this();
    this.statusMessage = statusMessage;
  }

  @Deprecated
  public Operation clusterConditions(List<StatusCondition> clusterConditions) {
    this.clusterConditions = clusterConditions;
    return this;
  }

  public Operation addClusterConditionsItem(StatusCondition clusterConditionsItem) {
    if (this.clusterConditions == null) {
      this.clusterConditions = new ArrayList<>();
    }
    this.clusterConditions.add(clusterConditionsItem);
    return this;
  }

  /**
   * Which conditions caused the current cluster state. Deprecated. Use field error instead.
   * @return clusterConditions
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<StatusCondition> getClusterConditions() {
    return clusterConditions;
  }

  @Deprecated
  public void setClusterConditions(List<StatusCondition> clusterConditions) {
    this.clusterConditions = clusterConditions;
  }


  public Operation detail(String detail) {
    this.detail = detail;
    return this;
  }

  /**
   * Detailed operation progress, if available.
   * @return detail
   */
  @javax.annotation.Nullable
  public String getDetail() {
    return detail;
  }

  public void setDetail(String detail) {
    this.detail = detail;
  }


  public Operation endTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * [Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }

  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }


  public Operation error(Status error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public Status getError() {
    return error;
  }

  public void setError(Status error) {
    this.error = error;
  }


  public Operation location(String location) {
    this.location = location;
    return this;
  }

  /**
   * [Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides.
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public Operation name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The server-assigned ID for the operation.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  @Deprecated
  public Operation nodepoolConditions(List<StatusCondition> nodepoolConditions) {
    this.nodepoolConditions = nodepoolConditions;
    return this;
  }

  public Operation addNodepoolConditionsItem(StatusCondition nodepoolConditionsItem) {
    if (this.nodepoolConditions == null) {
      this.nodepoolConditions = new ArrayList<>();
    }
    this.nodepoolConditions.add(nodepoolConditionsItem);
    return this;
  }

  /**
   * Which conditions caused the current node pool state. Deprecated. Use field error instead.
   * @return nodepoolConditions
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<StatusCondition> getNodepoolConditions() {
    return nodepoolConditions;
  }

  @Deprecated
  public void setNodepoolConditions(List<StatusCondition> nodepoolConditions) {
    this.nodepoolConditions = nodepoolConditions;
  }


  public Operation operationType(OperationTypeEnum operationType) {
    this.operationType = operationType;
    return this;
  }

  /**
   * The operation type.
   * @return operationType
   */
  @javax.annotation.Nullable
  public OperationTypeEnum getOperationType() {
    return operationType;
  }

  public void setOperationType(OperationTypeEnum operationType) {
    this.operationType = operationType;
  }


  public Operation progress(OperationProgress progress) {
    this.progress = progress;
    return this;
  }

  /**
   * Get progress
   * @return progress
   */
  @javax.annotation.Nullable
  public OperationProgress getProgress() {
    return progress;
  }

  public void setProgress(OperationProgress progress) {
    this.progress = progress;
  }


  public Operation selfLink(String selfLink) {
    this.selfLink = selfLink;
    return this;
  }

  /**
   * Server-defined URI for the operation. Example: &#x60;https://container.googleapis.com/v1alpha1/projects/123/locations/us-central1/operations/operation-123&#x60;.
   * @return selfLink
   */
  @javax.annotation.Nullable
  public String getSelfLink() {
    return selfLink;
  }

  public void setSelfLink(String selfLink) {
    this.selfLink = selfLink;
  }


  public Operation startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * [Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  public Operation status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The current status of the operation.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  /**
   * Output only. If an error has occurred, a textual description of the error. Deprecated. Use field error instead.
   * @return statusMessage
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getStatusMessage() {
    return statusMessage;
  }



  public Operation targetLink(String targetLink) {
    this.targetLink = targetLink;
    return this;
  }

  /**
   * Server-defined URI for the target of the operation. The format of this is a URI to the resource being modified (such as a cluster, node pool, or node). For node pool repairs, there may be multiple nodes being repaired, but only one will be the target. Examples: - ## &#x60;https://container.googleapis.com/v1/projects/123/locations/us-central1/clusters/my-cluster&#x60; ## &#x60;https://container.googleapis.com/v1/projects/123/zones/us-central1-c/clusters/my-cluster/nodePools/my-np&#x60; &#x60;https://container.googleapis.com/v1/projects/123/zones/us-central1-c/clusters/my-cluster/nodePools/my-np/node/my-node&#x60;
   * @return targetLink
   */
  @javax.annotation.Nullable
  public String getTargetLink() {
    return targetLink;
  }

  public void setTargetLink(String targetLink) {
    this.targetLink = targetLink;
  }


  @Deprecated
  public Operation zone(String zone) {
    this.zone = zone;
    return this;
  }

  /**
   * The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead.
   * @return zone
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getZone() {
    return zone;
  }

  @Deprecated
  public void setZone(String zone) {
    this.zone = zone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Operation operation = (Operation) o;
    return Objects.equals(this.clusterConditions, operation.clusterConditions) &&
        Objects.equals(this.detail, operation.detail) &&
        Objects.equals(this.endTime, operation.endTime) &&
        Objects.equals(this.error, operation.error) &&
        Objects.equals(this.location, operation.location) &&
        Objects.equals(this.name, operation.name) &&
        Objects.equals(this.nodepoolConditions, operation.nodepoolConditions) &&
        Objects.equals(this.operationType, operation.operationType) &&
        Objects.equals(this.progress, operation.progress) &&
        Objects.equals(this.selfLink, operation.selfLink) &&
        Objects.equals(this.startTime, operation.startTime) &&
        Objects.equals(this.status, operation.status) &&
        Objects.equals(this.statusMessage, operation.statusMessage) &&
        Objects.equals(this.targetLink, operation.targetLink) &&
        Objects.equals(this.zone, operation.zone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clusterConditions, detail, endTime, error, location, name, nodepoolConditions, operationType, progress, selfLink, startTime, status, statusMessage, targetLink, zone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Operation {\n");
    sb.append("    clusterConditions: ").append(toIndentedString(clusterConditions)).append("\n");
    sb.append("    detail: ").append(toIndentedString(detail)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nodepoolConditions: ").append(toIndentedString(nodepoolConditions)).append("\n");
    sb.append("    operationType: ").append(toIndentedString(operationType)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    selfLink: ").append(toIndentedString(selfLink)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("    targetLink: ").append(toIndentedString(targetLink)).append("\n");
    sb.append("    zone: ").append(toIndentedString(zone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clusterConditions");
    openapiFields.add("detail");
    openapiFields.add("endTime");
    openapiFields.add("error");
    openapiFields.add("location");
    openapiFields.add("name");
    openapiFields.add("nodepoolConditions");
    openapiFields.add("operationType");
    openapiFields.add("progress");
    openapiFields.add("selfLink");
    openapiFields.add("startTime");
    openapiFields.add("status");
    openapiFields.add("statusMessage");
    openapiFields.add("targetLink");
    openapiFields.add("zone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Operation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Operation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Operation is not found in the empty JSON string", Operation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Operation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Operation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("clusterConditions") != null && !jsonObj.get("clusterConditions").isJsonNull()) {
        JsonArray jsonArrayclusterConditions = jsonObj.getAsJsonArray("clusterConditions");
        if (jsonArrayclusterConditions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("clusterConditions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `clusterConditions` to be an array in the JSON string but got `%s`", jsonObj.get("clusterConditions").toString()));
          }

          // validate the optional field `clusterConditions` (array)
          for (int i = 0; i < jsonArrayclusterConditions.size(); i++) {
            StatusCondition.validateJsonElement(jsonArrayclusterConditions.get(i));
          };
        }
      }
      if ((jsonObj.get("detail") != null && !jsonObj.get("detail").isJsonNull()) && !jsonObj.get("detail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detail").toString()));
      }
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      // validate the optional field `error`
      if (jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) {
        Status.validateJsonElement(jsonObj.get("error"));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("nodepoolConditions") != null && !jsonObj.get("nodepoolConditions").isJsonNull()) {
        JsonArray jsonArraynodepoolConditions = jsonObj.getAsJsonArray("nodepoolConditions");
        if (jsonArraynodepoolConditions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("nodepoolConditions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `nodepoolConditions` to be an array in the JSON string but got `%s`", jsonObj.get("nodepoolConditions").toString()));
          }

          // validate the optional field `nodepoolConditions` (array)
          for (int i = 0; i < jsonArraynodepoolConditions.size(); i++) {
            StatusCondition.validateJsonElement(jsonArraynodepoolConditions.get(i));
          };
        }
      }
      if ((jsonObj.get("operationType") != null && !jsonObj.get("operationType").isJsonNull()) && !jsonObj.get("operationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationType").toString()));
      }
      // validate the optional field `operationType`
      if (jsonObj.get("operationType") != null && !jsonObj.get("operationType").isJsonNull()) {
        OperationTypeEnum.validateJsonElement(jsonObj.get("operationType"));
      }
      // validate the optional field `progress`
      if (jsonObj.get("progress") != null && !jsonObj.get("progress").isJsonNull()) {
        OperationProgress.validateJsonElement(jsonObj.get("progress"));
      }
      if ((jsonObj.get("selfLink") != null && !jsonObj.get("selfLink").isJsonNull()) && !jsonObj.get("selfLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selfLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selfLink").toString()));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("statusMessage") != null && !jsonObj.get("statusMessage").isJsonNull()) && !jsonObj.get("statusMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusMessage").toString()));
      }
      if ((jsonObj.get("targetLink") != null && !jsonObj.get("targetLink").isJsonNull()) && !jsonObj.get("targetLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetLink").toString()));
      }
      if ((jsonObj.get("zone") != null && !jsonObj.get("zone").isJsonNull()) && !jsonObj.get("zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Operation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Operation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Operation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Operation.class));

       return (TypeAdapter<T>) new TypeAdapter<Operation>() {
           @Override
           public void write(JsonWriter out, Operation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Operation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Operation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Operation
   * @throws IOException if the JSON string is invalid with respect to Operation
   */
  public static Operation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Operation.class);
  }

  /**
   * Convert an instance of Operation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

