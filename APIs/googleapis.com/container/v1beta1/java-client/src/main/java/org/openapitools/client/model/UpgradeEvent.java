/*
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpgradeEvent is a notification sent to customers by the cluster server when a resource is upgrading.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:27.538902-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpgradeEvent {
  public static final String SERIALIZED_NAME_CURRENT_VERSION = "currentVersion";
  @SerializedName(SERIALIZED_NAME_CURRENT_VERSION)
  private String currentVersion;

  public static final String SERIALIZED_NAME_OPERATION = "operation";
  @SerializedName(SERIALIZED_NAME_OPERATION)
  private String operation;

  public static final String SERIALIZED_NAME_OPERATION_START_TIME = "operationStartTime";
  @SerializedName(SERIALIZED_NAME_OPERATION_START_TIME)
  private String operationStartTime;

  public static final String SERIALIZED_NAME_RESOURCE = "resource";
  @SerializedName(SERIALIZED_NAME_RESOURCE)
  private String resource;

  /**
   * The resource type that is upgrading.
   */
  @JsonAdapter(ResourceTypeEnum.Adapter.class)
  public enum ResourceTypeEnum {
    UPGRADE_RESOURCE_TYPE_UNSPECIFIED("UPGRADE_RESOURCE_TYPE_UNSPECIFIED"),
    
    MASTER("MASTER"),
    
    NODE_POOL("NODE_POOL");

    private String value;

    ResourceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResourceTypeEnum fromValue(String value) {
      for (ResourceTypeEnum b : ResourceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResourceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResourceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResourceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResourceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResourceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private ResourceTypeEnum resourceType;

  public static final String SERIALIZED_NAME_TARGET_VERSION = "targetVersion";
  @SerializedName(SERIALIZED_NAME_TARGET_VERSION)
  private String targetVersion;

  public UpgradeEvent() {
  }

  public UpgradeEvent currentVersion(String currentVersion) {
    this.currentVersion = currentVersion;
    return this;
  }

  /**
   * The current version before the upgrade.
   * @return currentVersion
   */
  @javax.annotation.Nullable
  public String getCurrentVersion() {
    return currentVersion;
  }

  public void setCurrentVersion(String currentVersion) {
    this.currentVersion = currentVersion;
  }


  public UpgradeEvent operation(String operation) {
    this.operation = operation;
    return this;
  }

  /**
   * The operation associated with this upgrade.
   * @return operation
   */
  @javax.annotation.Nullable
  public String getOperation() {
    return operation;
  }

  public void setOperation(String operation) {
    this.operation = operation;
  }


  public UpgradeEvent operationStartTime(String operationStartTime) {
    this.operationStartTime = operationStartTime;
    return this;
  }

  /**
   * The time when the operation was started.
   * @return operationStartTime
   */
  @javax.annotation.Nullable
  public String getOperationStartTime() {
    return operationStartTime;
  }

  public void setOperationStartTime(String operationStartTime) {
    this.operationStartTime = operationStartTime;
  }


  public UpgradeEvent resource(String resource) {
    this.resource = resource;
    return this;
  }

  /**
   * Optional relative path to the resource. For example in node pool upgrades, the relative path of the node pool.
   * @return resource
   */
  @javax.annotation.Nullable
  public String getResource() {
    return resource;
  }

  public void setResource(String resource) {
    this.resource = resource;
  }


  public UpgradeEvent resourceType(ResourceTypeEnum resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * The resource type that is upgrading.
   * @return resourceType
   */
  @javax.annotation.Nullable
  public ResourceTypeEnum getResourceType() {
    return resourceType;
  }

  public void setResourceType(ResourceTypeEnum resourceType) {
    this.resourceType = resourceType;
  }


  public UpgradeEvent targetVersion(String targetVersion) {
    this.targetVersion = targetVersion;
    return this;
  }

  /**
   * The target version for the upgrade.
   * @return targetVersion
   */
  @javax.annotation.Nullable
  public String getTargetVersion() {
    return targetVersion;
  }

  public void setTargetVersion(String targetVersion) {
    this.targetVersion = targetVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpgradeEvent upgradeEvent = (UpgradeEvent) o;
    return Objects.equals(this.currentVersion, upgradeEvent.currentVersion) &&
        Objects.equals(this.operation, upgradeEvent.operation) &&
        Objects.equals(this.operationStartTime, upgradeEvent.operationStartTime) &&
        Objects.equals(this.resource, upgradeEvent.resource) &&
        Objects.equals(this.resourceType, upgradeEvent.resourceType) &&
        Objects.equals(this.targetVersion, upgradeEvent.targetVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentVersion, operation, operationStartTime, resource, resourceType, targetVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpgradeEvent {\n");
    sb.append("    currentVersion: ").append(toIndentedString(currentVersion)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    operationStartTime: ").append(toIndentedString(operationStartTime)).append("\n");
    sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    targetVersion: ").append(toIndentedString(targetVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currentVersion");
    openapiFields.add("operation");
    openapiFields.add("operationStartTime");
    openapiFields.add("resource");
    openapiFields.add("resourceType");
    openapiFields.add("targetVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpgradeEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpgradeEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpgradeEvent is not found in the empty JSON string", UpgradeEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpgradeEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpgradeEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currentVersion") != null && !jsonObj.get("currentVersion").isJsonNull()) && !jsonObj.get("currentVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentVersion").toString()));
      }
      if ((jsonObj.get("operation") != null && !jsonObj.get("operation").isJsonNull()) && !jsonObj.get("operation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operation").toString()));
      }
      if ((jsonObj.get("operationStartTime") != null && !jsonObj.get("operationStartTime").isJsonNull()) && !jsonObj.get("operationStartTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationStartTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationStartTime").toString()));
      }
      if ((jsonObj.get("resource") != null && !jsonObj.get("resource").isJsonNull()) && !jsonObj.get("resource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource").toString()));
      }
      if ((jsonObj.get("resourceType") != null && !jsonObj.get("resourceType").isJsonNull()) && !jsonObj.get("resourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceType").toString()));
      }
      // validate the optional field `resourceType`
      if (jsonObj.get("resourceType") != null && !jsonObj.get("resourceType").isJsonNull()) {
        ResourceTypeEnum.validateJsonElement(jsonObj.get("resourceType"));
      }
      if ((jsonObj.get("targetVersion") != null && !jsonObj.get("targetVersion").isJsonNull()) && !jsonObj.get("targetVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetVersion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpgradeEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpgradeEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpgradeEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpgradeEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<UpgradeEvent>() {
           @Override
           public void write(JsonWriter out, UpgradeEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpgradeEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpgradeEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpgradeEvent
   * @throws IOException if the JSON string is invalid with respect to UpgradeEvent
   */
  public static UpgradeEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpgradeEvent.class);
  }

  /**
   * Convert an instance of UpgradeEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

