/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KubernetesEngineApi);
  }
}(this, function(expect, KubernetesEngineApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KubernetesEngineApi.UpdateNodePoolRequest();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UpdateNodePoolRequest', function() {
    it('should create an instance of UpdateNodePoolRequest', function() {
      // uncomment below and update the code to test UpdateNodePoolRequest
      //var instance = new KubernetesEngineApi.UpdateNodePoolRequest();
      //expect(instance).to.be.a(KubernetesEngineApi.UpdateNodePoolRequest);
    });

    it('should have the property clusterId (base name: "clusterId")', function() {
      // uncomment below and update the code to test the property clusterId
      //var instance = new KubernetesEngineApi.UpdateNodePoolRequest();
      //expect(instance).to.be();
    });

    it('should have the property confidentialNodes (base name: "confidentialNodes")', function() {
      // uncomment below and update the code to test the property confidentialNodes
      //var instance = new KubernetesEngineApi.UpdateNodePoolRequest();
      //expect(instance).to.be();
    });

    it('should have the property diskSizeGb (base name: "diskSizeGb")', function() {
      // uncomment below and update the code to test the property diskSizeGb
      //var instance = new KubernetesEngineApi.UpdateNodePoolRequest();
      //expect(instance).to.be();
    });

    it('should have the property diskType (base name: "diskType")', function() {
      // uncomment below and update the code to test the property diskType
      //var instance = new KubernetesEngineApi.UpdateNodePoolRequest();
      //expect(instance).to.be();
    });

    it('should have the property etag (base name: "etag")', function() {
      // uncomment below and update the code to test the property etag
      //var instance = new KubernetesEngineApi.UpdateNodePoolRequest();
      //expect(instance).to.be();
    });

    it('should have the property fastSocket (base name: "fastSocket")', function() {
      // uncomment below and update the code to test the property fastSocket
      //var instance = new KubernetesEngineApi.UpdateNodePoolRequest();
      //expect(instance).to.be();
    });

    it('should have the property gcfsConfig (base name: "gcfsConfig")', function() {
      // uncomment below and update the code to test the property gcfsConfig
      //var instance = new KubernetesEngineApi.UpdateNodePoolRequest();
      //expect(instance).to.be();
    });

    it('should have the property gvnic (base name: "gvnic")', function() {
      // uncomment below and update the code to test the property gvnic
      //var instance = new KubernetesEngineApi.UpdateNodePoolRequest();
      //expect(instance).to.be();
    });

    it('should have the property imageType (base name: "imageType")', function() {
      // uncomment below and update the code to test the property imageType
      //var instance = new KubernetesEngineApi.UpdateNodePoolRequest();
      //expect(instance).to.be();
    });

    it('should have the property kubeletConfig (base name: "kubeletConfig")', function() {
      // uncomment below and update the code to test the property kubeletConfig
      //var instance = new KubernetesEngineApi.UpdateNodePoolRequest();
      //expect(instance).to.be();
    });

    it('should have the property labels (base name: "labels")', function() {
      // uncomment below and update the code to test the property labels
      //var instance = new KubernetesEngineApi.UpdateNodePoolRequest();
      //expect(instance).to.be();
    });

    it('should have the property linuxNodeConfig (base name: "linuxNodeConfig")', function() {
      // uncomment below and update the code to test the property linuxNodeConfig
      //var instance = new KubernetesEngineApi.UpdateNodePoolRequest();
      //expect(instance).to.be();
    });

    it('should have the property locations (base name: "locations")', function() {
      // uncomment below and update the code to test the property locations
      //var instance = new KubernetesEngineApi.UpdateNodePoolRequest();
      //expect(instance).to.be();
    });

    it('should have the property loggingConfig (base name: "loggingConfig")', function() {
      // uncomment below and update the code to test the property loggingConfig
      //var instance = new KubernetesEngineApi.UpdateNodePoolRequest();
      //expect(instance).to.be();
    });

    it('should have the property machineType (base name: "machineType")', function() {
      // uncomment below and update the code to test the property machineType
      //var instance = new KubernetesEngineApi.UpdateNodePoolRequest();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new KubernetesEngineApi.UpdateNodePoolRequest();
      //expect(instance).to.be();
    });

    it('should have the property nodeNetworkConfig (base name: "nodeNetworkConfig")', function() {
      // uncomment below and update the code to test the property nodeNetworkConfig
      //var instance = new KubernetesEngineApi.UpdateNodePoolRequest();
      //expect(instance).to.be();
    });

    it('should have the property nodePoolId (base name: "nodePoolId")', function() {
      // uncomment below and update the code to test the property nodePoolId
      //var instance = new KubernetesEngineApi.UpdateNodePoolRequest();
      //expect(instance).to.be();
    });

    it('should have the property nodeVersion (base name: "nodeVersion")', function() {
      // uncomment below and update the code to test the property nodeVersion
      //var instance = new KubernetesEngineApi.UpdateNodePoolRequest();
      //expect(instance).to.be();
    });

    it('should have the property projectId (base name: "projectId")', function() {
      // uncomment below and update the code to test the property projectId
      //var instance = new KubernetesEngineApi.UpdateNodePoolRequest();
      //expect(instance).to.be();
    });

    it('should have the property queuedProvisioning (base name: "queuedProvisioning")', function() {
      // uncomment below and update the code to test the property queuedProvisioning
      //var instance = new KubernetesEngineApi.UpdateNodePoolRequest();
      //expect(instance).to.be();
    });

    it('should have the property resourceLabels (base name: "resourceLabels")', function() {
      // uncomment below and update the code to test the property resourceLabels
      //var instance = new KubernetesEngineApi.UpdateNodePoolRequest();
      //expect(instance).to.be();
    });

    it('should have the property resourceManagerTags (base name: "resourceManagerTags")', function() {
      // uncomment below and update the code to test the property resourceManagerTags
      //var instance = new KubernetesEngineApi.UpdateNodePoolRequest();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new KubernetesEngineApi.UpdateNodePoolRequest();
      //expect(instance).to.be();
    });

    it('should have the property taints (base name: "taints")', function() {
      // uncomment below and update the code to test the property taints
      //var instance = new KubernetesEngineApi.UpdateNodePoolRequest();
      //expect(instance).to.be();
    });

    it('should have the property upgradeSettings (base name: "upgradeSettings")', function() {
      // uncomment below and update the code to test the property upgradeSettings
      //var instance = new KubernetesEngineApi.UpdateNodePoolRequest();
      //expect(instance).to.be();
    });

    it('should have the property windowsNodeConfig (base name: "windowsNodeConfig")', function() {
      // uncomment below and update the code to test the property windowsNodeConfig
      //var instance = new KubernetesEngineApi.UpdateNodePoolRequest();
      //expect(instance).to.be();
    });

    it('should have the property workloadMetadataConfig (base name: "workloadMetadataConfig")', function() {
      // uncomment below and update the code to test the property workloadMetadataConfig
      //var instance = new KubernetesEngineApi.UpdateNodePoolRequest();
      //expect(instance).to.be();
    });

    it('should have the property zone (base name: "zone")', function() {
      // uncomment below and update the code to test the property zone
      //var instance = new KubernetesEngineApi.UpdateNodePoolRequest();
      //expect(instance).to.be();
    });

  });

}));
