/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KubernetesEngineApi);
  }
}(this, function(expect, KubernetesEngineApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KubernetesEngineApi.IPAllocationPolicy();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('IPAllocationPolicy', function() {
    it('should create an instance of IPAllocationPolicy', function() {
      // uncomment below and update the code to test IPAllocationPolicy
      //var instance = new KubernetesEngineApi.IPAllocationPolicy();
      //expect(instance).to.be.a(KubernetesEngineApi.IPAllocationPolicy);
    });

    it('should have the property additionalPodRangesConfig (base name: "additionalPodRangesConfig")', function() {
      // uncomment below and update the code to test the property additionalPodRangesConfig
      //var instance = new KubernetesEngineApi.IPAllocationPolicy();
      //expect(instance).to.be();
    });

    it('should have the property allowRouteOverlap (base name: "allowRouteOverlap")', function() {
      // uncomment below and update the code to test the property allowRouteOverlap
      //var instance = new KubernetesEngineApi.IPAllocationPolicy();
      //expect(instance).to.be();
    });

    it('should have the property clusterIpv4Cidr (base name: "clusterIpv4Cidr")', function() {
      // uncomment below and update the code to test the property clusterIpv4Cidr
      //var instance = new KubernetesEngineApi.IPAllocationPolicy();
      //expect(instance).to.be();
    });

    it('should have the property clusterIpv4CidrBlock (base name: "clusterIpv4CidrBlock")', function() {
      // uncomment below and update the code to test the property clusterIpv4CidrBlock
      //var instance = new KubernetesEngineApi.IPAllocationPolicy();
      //expect(instance).to.be();
    });

    it('should have the property clusterSecondaryRangeName (base name: "clusterSecondaryRangeName")', function() {
      // uncomment below and update the code to test the property clusterSecondaryRangeName
      //var instance = new KubernetesEngineApi.IPAllocationPolicy();
      //expect(instance).to.be();
    });

    it('should have the property createSubnetwork (base name: "createSubnetwork")', function() {
      // uncomment below and update the code to test the property createSubnetwork
      //var instance = new KubernetesEngineApi.IPAllocationPolicy();
      //expect(instance).to.be();
    });

    it('should have the property defaultPodIpv4RangeUtilization (base name: "defaultPodIpv4RangeUtilization")', function() {
      // uncomment below and update the code to test the property defaultPodIpv4RangeUtilization
      //var instance = new KubernetesEngineApi.IPAllocationPolicy();
      //expect(instance).to.be();
    });

    it('should have the property ipv6AccessType (base name: "ipv6AccessType")', function() {
      // uncomment below and update the code to test the property ipv6AccessType
      //var instance = new KubernetesEngineApi.IPAllocationPolicy();
      //expect(instance).to.be();
    });

    it('should have the property nodeIpv4Cidr (base name: "nodeIpv4Cidr")', function() {
      // uncomment below and update the code to test the property nodeIpv4Cidr
      //var instance = new KubernetesEngineApi.IPAllocationPolicy();
      //expect(instance).to.be();
    });

    it('should have the property nodeIpv4CidrBlock (base name: "nodeIpv4CidrBlock")', function() {
      // uncomment below and update the code to test the property nodeIpv4CidrBlock
      //var instance = new KubernetesEngineApi.IPAllocationPolicy();
      //expect(instance).to.be();
    });

    it('should have the property podCidrOverprovisionConfig (base name: "podCidrOverprovisionConfig")', function() {
      // uncomment below and update the code to test the property podCidrOverprovisionConfig
      //var instance = new KubernetesEngineApi.IPAllocationPolicy();
      //expect(instance).to.be();
    });

    it('should have the property servicesIpv4Cidr (base name: "servicesIpv4Cidr")', function() {
      // uncomment below and update the code to test the property servicesIpv4Cidr
      //var instance = new KubernetesEngineApi.IPAllocationPolicy();
      //expect(instance).to.be();
    });

    it('should have the property servicesIpv4CidrBlock (base name: "servicesIpv4CidrBlock")', function() {
      // uncomment below and update the code to test the property servicesIpv4CidrBlock
      //var instance = new KubernetesEngineApi.IPAllocationPolicy();
      //expect(instance).to.be();
    });

    it('should have the property servicesIpv6CidrBlock (base name: "servicesIpv6CidrBlock")', function() {
      // uncomment below and update the code to test the property servicesIpv6CidrBlock
      //var instance = new KubernetesEngineApi.IPAllocationPolicy();
      //expect(instance).to.be();
    });

    it('should have the property servicesSecondaryRangeName (base name: "servicesSecondaryRangeName")', function() {
      // uncomment below and update the code to test the property servicesSecondaryRangeName
      //var instance = new KubernetesEngineApi.IPAllocationPolicy();
      //expect(instance).to.be();
    });

    it('should have the property stackType (base name: "stackType")', function() {
      // uncomment below and update the code to test the property stackType
      //var instance = new KubernetesEngineApi.IPAllocationPolicy();
      //expect(instance).to.be();
    });

    it('should have the property subnetIpv6CidrBlock (base name: "subnetIpv6CidrBlock")', function() {
      // uncomment below and update the code to test the property subnetIpv6CidrBlock
      //var instance = new KubernetesEngineApi.IPAllocationPolicy();
      //expect(instance).to.be();
    });

    it('should have the property subnetworkName (base name: "subnetworkName")', function() {
      // uncomment below and update the code to test the property subnetworkName
      //var instance = new KubernetesEngineApi.IPAllocationPolicy();
      //expect(instance).to.be();
    });

    it('should have the property tpuIpv4CidrBlock (base name: "tpuIpv4CidrBlock")', function() {
      // uncomment below and update the code to test the property tpuIpv4CidrBlock
      //var instance = new KubernetesEngineApi.IPAllocationPolicy();
      //expect(instance).to.be();
    });

    it('should have the property useIpAliases (base name: "useIpAliases")', function() {
      // uncomment below and update the code to test the property useIpAliases
      //var instance = new KubernetesEngineApi.IPAllocationPolicy();
      //expect(instance).to.be();
    });

    it('should have the property useRoutes (base name: "useRoutes")', function() {
      // uncomment below and update the code to test the property useRoutes
      //var instance = new KubernetesEngineApi.IPAllocationPolicy();
      //expect(instance).to.be();
    });

  });

}));
