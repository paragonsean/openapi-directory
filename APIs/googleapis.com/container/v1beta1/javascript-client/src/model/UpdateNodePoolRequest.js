/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConfidentialNodes from './ConfidentialNodes';
import FastSocket from './FastSocket';
import GcfsConfig from './GcfsConfig';
import LinuxNodeConfig from './LinuxNodeConfig';
import NetworkTags from './NetworkTags';
import NodeKubeletConfig from './NodeKubeletConfig';
import NodeLabels from './NodeLabels';
import NodeNetworkConfig from './NodeNetworkConfig';
import NodePoolLoggingConfig from './NodePoolLoggingConfig';
import NodeTaints from './NodeTaints';
import QueuedProvisioning from './QueuedProvisioning';
import ResourceLabels from './ResourceLabels';
import ResourceManagerTags from './ResourceManagerTags';
import UpgradeSettings from './UpgradeSettings';
import VirtualNIC from './VirtualNIC';
import WindowsNodeConfig from './WindowsNodeConfig';
import WorkloadMetadataConfig from './WorkloadMetadataConfig';

/**
 * The UpdateNodePoolRequest model module.
 * @module model/UpdateNodePoolRequest
 * @version v1beta1
 */
class UpdateNodePoolRequest {
    /**
     * Constructs a new <code>UpdateNodePoolRequest</code>.
     * SetNodePoolVersionRequest updates the version of a node pool.
     * @alias module:model/UpdateNodePoolRequest
     */
    constructor() { 
        
        UpdateNodePoolRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateNodePoolRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateNodePoolRequest} obj Optional instance to populate.
     * @return {module:model/UpdateNodePoolRequest} The populated <code>UpdateNodePoolRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateNodePoolRequest();

            if (data.hasOwnProperty('clusterId')) {
                obj['clusterId'] = ApiClient.convertToType(data['clusterId'], 'String');
            }
            if (data.hasOwnProperty('confidentialNodes')) {
                obj['confidentialNodes'] = ConfidentialNodes.constructFromObject(data['confidentialNodes']);
            }
            if (data.hasOwnProperty('diskSizeGb')) {
                obj['diskSizeGb'] = ApiClient.convertToType(data['diskSizeGb'], 'String');
            }
            if (data.hasOwnProperty('diskType')) {
                obj['diskType'] = ApiClient.convertToType(data['diskType'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('fastSocket')) {
                obj['fastSocket'] = FastSocket.constructFromObject(data['fastSocket']);
            }
            if (data.hasOwnProperty('gcfsConfig')) {
                obj['gcfsConfig'] = GcfsConfig.constructFromObject(data['gcfsConfig']);
            }
            if (data.hasOwnProperty('gvnic')) {
                obj['gvnic'] = VirtualNIC.constructFromObject(data['gvnic']);
            }
            if (data.hasOwnProperty('imageType')) {
                obj['imageType'] = ApiClient.convertToType(data['imageType'], 'String');
            }
            if (data.hasOwnProperty('kubeletConfig')) {
                obj['kubeletConfig'] = NodeKubeletConfig.constructFromObject(data['kubeletConfig']);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = NodeLabels.constructFromObject(data['labels']);
            }
            if (data.hasOwnProperty('linuxNodeConfig')) {
                obj['linuxNodeConfig'] = LinuxNodeConfig.constructFromObject(data['linuxNodeConfig']);
            }
            if (data.hasOwnProperty('locations')) {
                obj['locations'] = ApiClient.convertToType(data['locations'], ['String']);
            }
            if (data.hasOwnProperty('loggingConfig')) {
                obj['loggingConfig'] = NodePoolLoggingConfig.constructFromObject(data['loggingConfig']);
            }
            if (data.hasOwnProperty('machineType')) {
                obj['machineType'] = ApiClient.convertToType(data['machineType'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nodeNetworkConfig')) {
                obj['nodeNetworkConfig'] = NodeNetworkConfig.constructFromObject(data['nodeNetworkConfig']);
            }
            if (data.hasOwnProperty('nodePoolId')) {
                obj['nodePoolId'] = ApiClient.convertToType(data['nodePoolId'], 'String');
            }
            if (data.hasOwnProperty('nodeVersion')) {
                obj['nodeVersion'] = ApiClient.convertToType(data['nodeVersion'], 'String');
            }
            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = ApiClient.convertToType(data['projectId'], 'String');
            }
            if (data.hasOwnProperty('queuedProvisioning')) {
                obj['queuedProvisioning'] = QueuedProvisioning.constructFromObject(data['queuedProvisioning']);
            }
            if (data.hasOwnProperty('resourceLabels')) {
                obj['resourceLabels'] = ResourceLabels.constructFromObject(data['resourceLabels']);
            }
            if (data.hasOwnProperty('resourceManagerTags')) {
                obj['resourceManagerTags'] = ResourceManagerTags.constructFromObject(data['resourceManagerTags']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = NetworkTags.constructFromObject(data['tags']);
            }
            if (data.hasOwnProperty('taints')) {
                obj['taints'] = NodeTaints.constructFromObject(data['taints']);
            }
            if (data.hasOwnProperty('upgradeSettings')) {
                obj['upgradeSettings'] = UpgradeSettings.constructFromObject(data['upgradeSettings']);
            }
            if (data.hasOwnProperty('windowsNodeConfig')) {
                obj['windowsNodeConfig'] = WindowsNodeConfig.constructFromObject(data['windowsNodeConfig']);
            }
            if (data.hasOwnProperty('workloadMetadataConfig')) {
                obj['workloadMetadataConfig'] = WorkloadMetadataConfig.constructFromObject(data['workloadMetadataConfig']);
            }
            if (data.hasOwnProperty('zone')) {
                obj['zone'] = ApiClient.convertToType(data['zone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateNodePoolRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateNodePoolRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['clusterId'] && !(typeof data['clusterId'] === 'string' || data['clusterId'] instanceof String)) {
            throw new Error("Expected the field `clusterId` to be a primitive type in the JSON string but got " + data['clusterId']);
        }
        // validate the optional field `confidentialNodes`
        if (data['confidentialNodes']) { // data not null
          ConfidentialNodes.validateJSON(data['confidentialNodes']);
        }
        // ensure the json data is a string
        if (data['diskSizeGb'] && !(typeof data['diskSizeGb'] === 'string' || data['diskSizeGb'] instanceof String)) {
            throw new Error("Expected the field `diskSizeGb` to be a primitive type in the JSON string but got " + data['diskSizeGb']);
        }
        // ensure the json data is a string
        if (data['diskType'] && !(typeof data['diskType'] === 'string' || data['diskType'] instanceof String)) {
            throw new Error("Expected the field `diskType` to be a primitive type in the JSON string but got " + data['diskType']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // validate the optional field `fastSocket`
        if (data['fastSocket']) { // data not null
          FastSocket.validateJSON(data['fastSocket']);
        }
        // validate the optional field `gcfsConfig`
        if (data['gcfsConfig']) { // data not null
          GcfsConfig.validateJSON(data['gcfsConfig']);
        }
        // validate the optional field `gvnic`
        if (data['gvnic']) { // data not null
          VirtualNIC.validateJSON(data['gvnic']);
        }
        // ensure the json data is a string
        if (data['imageType'] && !(typeof data['imageType'] === 'string' || data['imageType'] instanceof String)) {
            throw new Error("Expected the field `imageType` to be a primitive type in the JSON string but got " + data['imageType']);
        }
        // validate the optional field `kubeletConfig`
        if (data['kubeletConfig']) { // data not null
          NodeKubeletConfig.validateJSON(data['kubeletConfig']);
        }
        // validate the optional field `labels`
        if (data['labels']) { // data not null
          NodeLabels.validateJSON(data['labels']);
        }
        // validate the optional field `linuxNodeConfig`
        if (data['linuxNodeConfig']) { // data not null
          LinuxNodeConfig.validateJSON(data['linuxNodeConfig']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['locations'])) {
            throw new Error("Expected the field `locations` to be an array in the JSON data but got " + data['locations']);
        }
        // validate the optional field `loggingConfig`
        if (data['loggingConfig']) { // data not null
          NodePoolLoggingConfig.validateJSON(data['loggingConfig']);
        }
        // ensure the json data is a string
        if (data['machineType'] && !(typeof data['machineType'] === 'string' || data['machineType'] instanceof String)) {
            throw new Error("Expected the field `machineType` to be a primitive type in the JSON string but got " + data['machineType']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `nodeNetworkConfig`
        if (data['nodeNetworkConfig']) { // data not null
          NodeNetworkConfig.validateJSON(data['nodeNetworkConfig']);
        }
        // ensure the json data is a string
        if (data['nodePoolId'] && !(typeof data['nodePoolId'] === 'string' || data['nodePoolId'] instanceof String)) {
            throw new Error("Expected the field `nodePoolId` to be a primitive type in the JSON string but got " + data['nodePoolId']);
        }
        // ensure the json data is a string
        if (data['nodeVersion'] && !(typeof data['nodeVersion'] === 'string' || data['nodeVersion'] instanceof String)) {
            throw new Error("Expected the field `nodeVersion` to be a primitive type in the JSON string but got " + data['nodeVersion']);
        }
        // ensure the json data is a string
        if (data['projectId'] && !(typeof data['projectId'] === 'string' || data['projectId'] instanceof String)) {
            throw new Error("Expected the field `projectId` to be a primitive type in the JSON string but got " + data['projectId']);
        }
        // validate the optional field `queuedProvisioning`
        if (data['queuedProvisioning']) { // data not null
          QueuedProvisioning.validateJSON(data['queuedProvisioning']);
        }
        // validate the optional field `resourceLabels`
        if (data['resourceLabels']) { // data not null
          ResourceLabels.validateJSON(data['resourceLabels']);
        }
        // validate the optional field `resourceManagerTags`
        if (data['resourceManagerTags']) { // data not null
          ResourceManagerTags.validateJSON(data['resourceManagerTags']);
        }
        // validate the optional field `tags`
        if (data['tags']) { // data not null
          NetworkTags.validateJSON(data['tags']);
        }
        // validate the optional field `taints`
        if (data['taints']) { // data not null
          NodeTaints.validateJSON(data['taints']);
        }
        // validate the optional field `upgradeSettings`
        if (data['upgradeSettings']) { // data not null
          UpgradeSettings.validateJSON(data['upgradeSettings']);
        }
        // validate the optional field `windowsNodeConfig`
        if (data['windowsNodeConfig']) { // data not null
          WindowsNodeConfig.validateJSON(data['windowsNodeConfig']);
        }
        // validate the optional field `workloadMetadataConfig`
        if (data['workloadMetadataConfig']) { // data not null
          WorkloadMetadataConfig.validateJSON(data['workloadMetadataConfig']);
        }
        // ensure the json data is a string
        if (data['zone'] && !(typeof data['zone'] === 'string' || data['zone'] instanceof String)) {
            throw new Error("Expected the field `zone` to be a primitive type in the JSON string but got " + data['zone']);
        }

        return true;
    }


}



/**
 * Required. Deprecated. The name of the cluster to upgrade. This field has been deprecated and replaced by the name field.
 * @member {String} clusterId
 */
UpdateNodePoolRequest.prototype['clusterId'] = undefined;

/**
 * @member {module:model/ConfidentialNodes} confidentialNodes
 */
UpdateNodePoolRequest.prototype['confidentialNodes'] = undefined;

/**
 * Optional. The desired disk size for nodes in the node pool. Initiates an upgrade operation that migrates the nodes in the node pool to the specified disk size.
 * @member {String} diskSizeGb
 */
UpdateNodePoolRequest.prototype['diskSizeGb'] = undefined;

/**
 * Optional. The desired disk type for nodes in the node pool. Initiates an upgrade operation that migrates the nodes in the node pool to the specified disk type.
 * @member {String} diskType
 */
UpdateNodePoolRequest.prototype['diskType'] = undefined;

/**
 * The current etag of the node pool. If an etag is provided and does not match the current etag of the node pool, update will be blocked and an ABORTED error will be returned.
 * @member {String} etag
 */
UpdateNodePoolRequest.prototype['etag'] = undefined;

/**
 * @member {module:model/FastSocket} fastSocket
 */
UpdateNodePoolRequest.prototype['fastSocket'] = undefined;

/**
 * @member {module:model/GcfsConfig} gcfsConfig
 */
UpdateNodePoolRequest.prototype['gcfsConfig'] = undefined;

/**
 * @member {module:model/VirtualNIC} gvnic
 */
UpdateNodePoolRequest.prototype['gvnic'] = undefined;

/**
 * Required. The desired image type for the node pool. Please see https://cloud.google.com/kubernetes-engine/docs/concepts/node-images for available image types.
 * @member {String} imageType
 */
UpdateNodePoolRequest.prototype['imageType'] = undefined;

/**
 * @member {module:model/NodeKubeletConfig} kubeletConfig
 */
UpdateNodePoolRequest.prototype['kubeletConfig'] = undefined;

/**
 * @member {module:model/NodeLabels} labels
 */
UpdateNodePoolRequest.prototype['labels'] = undefined;

/**
 * @member {module:model/LinuxNodeConfig} linuxNodeConfig
 */
UpdateNodePoolRequest.prototype['linuxNodeConfig'] = undefined;

/**
 * The desired list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the node pool's nodes should be located. Changing the locations for a node pool will result in nodes being either created or removed from the node pool, depending on whether locations are being added or removed.
 * @member {Array.<String>} locations
 */
UpdateNodePoolRequest.prototype['locations'] = undefined;

/**
 * @member {module:model/NodePoolLoggingConfig} loggingConfig
 */
UpdateNodePoolRequest.prototype['loggingConfig'] = undefined;

/**
 * Optional. The desired machine type for nodes in the node pool. Initiates an upgrade operation that migrates the nodes in the node pool to the specified machine type.
 * @member {String} machineType
 */
UpdateNodePoolRequest.prototype['machineType'] = undefined;

/**
 * The name (project, location, cluster, node pool) of the node pool to update. Specified in the format `projects/_*_/locations/_*_/clusters/_*_/nodePools/_*`.
 * @member {String} name
 */
UpdateNodePoolRequest.prototype['name'] = undefined;

/**
 * @member {module:model/NodeNetworkConfig} nodeNetworkConfig
 */
UpdateNodePoolRequest.prototype['nodeNetworkConfig'] = undefined;

/**
 * Required. Deprecated. The name of the node pool to upgrade. This field has been deprecated and replaced by the name field.
 * @member {String} nodePoolId
 */
UpdateNodePoolRequest.prototype['nodePoolId'] = undefined;

/**
 * Required. The Kubernetes version to change the nodes to (typically an upgrade). Users may specify either explicit versions offered by Kubernetes Engine or version aliases, which have the following behavior: - \"latest\": picks the highest valid Kubernetes version - \"1.X\": picks the highest valid patch+gke.N patch in the 1.X version - \"1.X.Y\": picks the highest valid gke.N patch in the 1.X.Y version - \"1.X.Y-gke.N\": picks an explicit Kubernetes version - \"-\": picks the Kubernetes master version
 * @member {String} nodeVersion
 */
UpdateNodePoolRequest.prototype['nodeVersion'] = undefined;

/**
 * Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.
 * @member {String} projectId
 */
UpdateNodePoolRequest.prototype['projectId'] = undefined;

/**
 * @member {module:model/QueuedProvisioning} queuedProvisioning
 */
UpdateNodePoolRequest.prototype['queuedProvisioning'] = undefined;

/**
 * @member {module:model/ResourceLabels} resourceLabels
 */
UpdateNodePoolRequest.prototype['resourceLabels'] = undefined;

/**
 * @member {module:model/ResourceManagerTags} resourceManagerTags
 */
UpdateNodePoolRequest.prototype['resourceManagerTags'] = undefined;

/**
 * @member {module:model/NetworkTags} tags
 */
UpdateNodePoolRequest.prototype['tags'] = undefined;

/**
 * @member {module:model/NodeTaints} taints
 */
UpdateNodePoolRequest.prototype['taints'] = undefined;

/**
 * @member {module:model/UpgradeSettings} upgradeSettings
 */
UpdateNodePoolRequest.prototype['upgradeSettings'] = undefined;

/**
 * @member {module:model/WindowsNodeConfig} windowsNodeConfig
 */
UpdateNodePoolRequest.prototype['windowsNodeConfig'] = undefined;

/**
 * @member {module:model/WorkloadMetadataConfig} workloadMetadataConfig
 */
UpdateNodePoolRequest.prototype['workloadMetadataConfig'] = undefined;

/**
 * Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.
 * @member {String} zone
 */
UpdateNodePoolRequest.prototype['zone'] = undefined;






export default UpdateNodePoolRequest;

