/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AdvancedDatapathObservabilityConfig model module.
 * @module model/AdvancedDatapathObservabilityConfig
 * @version v1beta1
 */
class AdvancedDatapathObservabilityConfig {
    /**
     * Constructs a new <code>AdvancedDatapathObservabilityConfig</code>.
     * AdvancedDatapathObservabilityConfig specifies configuration of observability features of advanced datapath.
     * @alias module:model/AdvancedDatapathObservabilityConfig
     */
    constructor() { 
        
        AdvancedDatapathObservabilityConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AdvancedDatapathObservabilityConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AdvancedDatapathObservabilityConfig} obj Optional instance to populate.
     * @return {module:model/AdvancedDatapathObservabilityConfig} The populated <code>AdvancedDatapathObservabilityConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AdvancedDatapathObservabilityConfig();

            if (data.hasOwnProperty('enableMetrics')) {
                obj['enableMetrics'] = ApiClient.convertToType(data['enableMetrics'], 'Boolean');
            }
            if (data.hasOwnProperty('enableRelay')) {
                obj['enableRelay'] = ApiClient.convertToType(data['enableRelay'], 'Boolean');
            }
            if (data.hasOwnProperty('relayMode')) {
                obj['relayMode'] = ApiClient.convertToType(data['relayMode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AdvancedDatapathObservabilityConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AdvancedDatapathObservabilityConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['relayMode'] && !(typeof data['relayMode'] === 'string' || data['relayMode'] instanceof String)) {
            throw new Error("Expected the field `relayMode` to be a primitive type in the JSON string but got " + data['relayMode']);
        }

        return true;
    }


}



/**
 * Expose flow metrics on nodes
 * @member {Boolean} enableMetrics
 */
AdvancedDatapathObservabilityConfig.prototype['enableMetrics'] = undefined;

/**
 * Enable Relay component
 * @member {Boolean} enableRelay
 */
AdvancedDatapathObservabilityConfig.prototype['enableRelay'] = undefined;

/**
 * Method used to make Relay available
 * @member {module:model/AdvancedDatapathObservabilityConfig.RelayModeEnum} relayMode
 */
AdvancedDatapathObservabilityConfig.prototype['relayMode'] = undefined;





/**
 * Allowed values for the <code>relayMode</code> property.
 * @enum {String}
 * @readonly
 */
AdvancedDatapathObservabilityConfig['RelayModeEnum'] = {

    /**
     * value: "RELAY_MODE_UNSPECIFIED"
     * @const
     */
    "RELAY_MODE_UNSPECIFIED": "RELAY_MODE_UNSPECIFIED",

    /**
     * value: "DISABLED"
     * @const
     */
    "DISABLED": "DISABLED",

    /**
     * value: "INTERNAL_VPC_LB"
     * @const
     */
    "INTERNAL_VPC_LB": "INTERNAL_VPC_LB",

    /**
     * value: "EXTERNAL_LB"
     * @const
     */
    "EXTERNAL_LB": "EXTERNAL_LB"
};



export default AdvancedDatapathObservabilityConfig;

