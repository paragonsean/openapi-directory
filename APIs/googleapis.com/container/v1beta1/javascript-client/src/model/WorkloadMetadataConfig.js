/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WorkloadMetadataConfig model module.
 * @module model/WorkloadMetadataConfig
 * @version v1beta1
 */
class WorkloadMetadataConfig {
    /**
     * Constructs a new <code>WorkloadMetadataConfig</code>.
     * WorkloadMetadataConfig defines the metadata configuration to expose to workloads on the node pool.
     * @alias module:model/WorkloadMetadataConfig
     */
    constructor() { 
        
        WorkloadMetadataConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WorkloadMetadataConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkloadMetadataConfig} obj Optional instance to populate.
     * @return {module:model/WorkloadMetadataConfig} The populated <code>WorkloadMetadataConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkloadMetadataConfig();

            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
            if (data.hasOwnProperty('nodeMetadata')) {
                obj['nodeMetadata'] = ApiClient.convertToType(data['nodeMetadata'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkloadMetadataConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkloadMetadataConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['mode'] && !(typeof data['mode'] === 'string' || data['mode'] instanceof String)) {
            throw new Error("Expected the field `mode` to be a primitive type in the JSON string but got " + data['mode']);
        }
        // ensure the json data is a string
        if (data['nodeMetadata'] && !(typeof data['nodeMetadata'] === 'string' || data['nodeMetadata'] instanceof String)) {
            throw new Error("Expected the field `nodeMetadata` to be a primitive type in the JSON string but got " + data['nodeMetadata']);
        }

        return true;
    }


}



/**
 * Mode is the configuration for how to expose metadata to workloads running on the node pool.
 * @member {module:model/WorkloadMetadataConfig.ModeEnum} mode
 */
WorkloadMetadataConfig.prototype['mode'] = undefined;

/**
 * NodeMetadata is the configuration for how to expose metadata to the workloads running on the node.
 * @member {module:model/WorkloadMetadataConfig.NodeMetadataEnum} nodeMetadata
 */
WorkloadMetadataConfig.prototype['nodeMetadata'] = undefined;





/**
 * Allowed values for the <code>mode</code> property.
 * @enum {String}
 * @readonly
 */
WorkloadMetadataConfig['ModeEnum'] = {

    /**
     * value: "MODE_UNSPECIFIED"
     * @const
     */
    "MODE_UNSPECIFIED": "MODE_UNSPECIFIED",

    /**
     * value: "GCE_METADATA"
     * @const
     */
    "GCE_METADATA": "GCE_METADATA",

    /**
     * value: "GKE_METADATA"
     * @const
     */
    "GKE_METADATA": "GKE_METADATA"
};


/**
 * Allowed values for the <code>nodeMetadata</code> property.
 * @enum {String}
 * @readonly
 */
WorkloadMetadataConfig['NodeMetadataEnum'] = {

    /**
     * value: "UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "UNSPECIFIED",

    /**
     * value: "SECURE"
     * @const
     */
    "SECURE": "SECURE",

    /**
     * value: "EXPOSE"
     * @const
     */
    "EXPOSE": "EXPOSE",

    /**
     * value: "GKE_METADATA_SERVER"
     * @const
     */
    "GKE_METADATA_SERVER": "GKE_METADATA_SERVER"
};



export default WorkloadMetadataConfig;

