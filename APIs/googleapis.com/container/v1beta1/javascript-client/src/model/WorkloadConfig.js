/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WorkloadConfig model module.
 * @module model/WorkloadConfig
 * @version v1beta1
 */
class WorkloadConfig {
    /**
     * Constructs a new <code>WorkloadConfig</code>.
     * WorkloadConfig defines the flags to enable or disable the workload configurations for the cluster.
     * @alias module:model/WorkloadConfig
     */
    constructor() { 
        
        WorkloadConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WorkloadConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkloadConfig} obj Optional instance to populate.
     * @return {module:model/WorkloadConfig} The populated <code>WorkloadConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkloadConfig();

            if (data.hasOwnProperty('auditMode')) {
                obj['auditMode'] = ApiClient.convertToType(data['auditMode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkloadConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkloadConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['auditMode'] && !(typeof data['auditMode'] === 'string' || data['auditMode'] instanceof String)) {
            throw new Error("Expected the field `auditMode` to be a primitive type in the JSON string but got " + data['auditMode']);
        }

        return true;
    }


}



/**
 * Sets which mode of auditing should be used for the cluster's workloads.
 * @member {module:model/WorkloadConfig.AuditModeEnum} auditMode
 */
WorkloadConfig.prototype['auditMode'] = undefined;





/**
 * Allowed values for the <code>auditMode</code> property.
 * @enum {String}
 * @readonly
 */
WorkloadConfig['AuditModeEnum'] = {

    /**
     * value: "MODE_UNSPECIFIED"
     * @const
     */
    "MODE_UNSPECIFIED": "MODE_UNSPECIFIED",

    /**
     * value: "DISABLED"
     * @const
     */
    "DISABLED": "DISABLED",

    /**
     * value: "BASIC"
     * @const
     */
    "BASIC": "BASIC",

    /**
     * value: "BASELINE"
     * @const
     */
    "BASELINE": "BASELINE",

    /**
     * value: "RESTRICTED"
     * @const
     */
    "RESTRICTED": "RESTRICTED"
};



export default WorkloadConfig;

