/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OpportunisticMaintenanceStrategy model module.
 * @module model/OpportunisticMaintenanceStrategy
 * @version v1beta1
 */
class OpportunisticMaintenanceStrategy {
    /**
     * Constructs a new <code>OpportunisticMaintenanceStrategy</code>.
     * Strategy that will trigger maintenance on behalf of the customer.
     * @alias module:model/OpportunisticMaintenanceStrategy
     */
    constructor() { 
        
        OpportunisticMaintenanceStrategy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OpportunisticMaintenanceStrategy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OpportunisticMaintenanceStrategy} obj Optional instance to populate.
     * @return {module:model/OpportunisticMaintenanceStrategy} The populated <code>OpportunisticMaintenanceStrategy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OpportunisticMaintenanceStrategy();

            if (data.hasOwnProperty('maintenanceAvailabilityWindow')) {
                obj['maintenanceAvailabilityWindow'] = ApiClient.convertToType(data['maintenanceAvailabilityWindow'], 'String');
            }
            if (data.hasOwnProperty('minNodesPerPool')) {
                obj['minNodesPerPool'] = ApiClient.convertToType(data['minNodesPerPool'], 'String');
            }
            if (data.hasOwnProperty('nodeIdleTimeWindow')) {
                obj['nodeIdleTimeWindow'] = ApiClient.convertToType(data['nodeIdleTimeWindow'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OpportunisticMaintenanceStrategy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OpportunisticMaintenanceStrategy</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['maintenanceAvailabilityWindow'] && !(typeof data['maintenanceAvailabilityWindow'] === 'string' || data['maintenanceAvailabilityWindow'] instanceof String)) {
            throw new Error("Expected the field `maintenanceAvailabilityWindow` to be a primitive type in the JSON string but got " + data['maintenanceAvailabilityWindow']);
        }
        // ensure the json data is a string
        if (data['minNodesPerPool'] && !(typeof data['minNodesPerPool'] === 'string' || data['minNodesPerPool'] instanceof String)) {
            throw new Error("Expected the field `minNodesPerPool` to be a primitive type in the JSON string but got " + data['minNodesPerPool']);
        }
        // ensure the json data is a string
        if (data['nodeIdleTimeWindow'] && !(typeof data['nodeIdleTimeWindow'] === 'string' || data['nodeIdleTimeWindow'] instanceof String)) {
            throw new Error("Expected the field `nodeIdleTimeWindow` to be a primitive type in the JSON string but got " + data['nodeIdleTimeWindow']);
        }

        return true;
    }


}



/**
 * The window of time that opportunistic maintenance can run. Example: A setting of 14 days implies that opportunistic maintenance can only be ran in the 2 weeks leading up to the scheduled maintenance date. Setting 28 days allows opportunistic maintenance to run at any time in the scheduled maintenance window (all `PERIODIC` maintenance is set 28 days in advance).
 * @member {String} maintenanceAvailabilityWindow
 */
OpportunisticMaintenanceStrategy.prototype['maintenanceAvailabilityWindow'] = undefined;

/**
 * The minimum nodes required to be available in a pool. Blocks maintenance if it would cause the number of running nodes to dip below this value.
 * @member {String} minNodesPerPool
 */
OpportunisticMaintenanceStrategy.prototype['minNodesPerPool'] = undefined;

/**
 * The amount of time that a node can remain idle (no customer owned workloads running), before triggering maintenance.
 * @member {String} nodeIdleTimeWindow
 */
OpportunisticMaintenanceStrategy.prototype['nodeIdleTimeWindow'] = undefined;






export default OpportunisticMaintenanceStrategy;

