/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UsableSubnetworkSecondaryRange from './UsableSubnetworkSecondaryRange';

/**
 * The UsableSubnetwork model module.
 * @module model/UsableSubnetwork
 * @version v1beta1
 */
class UsableSubnetwork {
    /**
     * Constructs a new <code>UsableSubnetwork</code>.
     * UsableSubnetwork resource returns the subnetwork name, its associated network and the primary CIDR range.
     * @alias module:model/UsableSubnetwork
     */
    constructor() { 
        
        UsableSubnetwork.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UsableSubnetwork</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UsableSubnetwork} obj Optional instance to populate.
     * @return {module:model/UsableSubnetwork} The populated <code>UsableSubnetwork</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UsableSubnetwork();

            if (data.hasOwnProperty('ipCidrRange')) {
                obj['ipCidrRange'] = ApiClient.convertToType(data['ipCidrRange'], 'String');
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = ApiClient.convertToType(data['network'], 'String');
            }
            if (data.hasOwnProperty('secondaryIpRanges')) {
                obj['secondaryIpRanges'] = ApiClient.convertToType(data['secondaryIpRanges'], [UsableSubnetworkSecondaryRange]);
            }
            if (data.hasOwnProperty('statusMessage')) {
                obj['statusMessage'] = ApiClient.convertToType(data['statusMessage'], 'String');
            }
            if (data.hasOwnProperty('subnetwork')) {
                obj['subnetwork'] = ApiClient.convertToType(data['subnetwork'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UsableSubnetwork</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UsableSubnetwork</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ipCidrRange'] && !(typeof data['ipCidrRange'] === 'string' || data['ipCidrRange'] instanceof String)) {
            throw new Error("Expected the field `ipCidrRange` to be a primitive type in the JSON string but got " + data['ipCidrRange']);
        }
        // ensure the json data is a string
        if (data['network'] && !(typeof data['network'] === 'string' || data['network'] instanceof String)) {
            throw new Error("Expected the field `network` to be a primitive type in the JSON string but got " + data['network']);
        }
        if (data['secondaryIpRanges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['secondaryIpRanges'])) {
                throw new Error("Expected the field `secondaryIpRanges` to be an array in the JSON data but got " + data['secondaryIpRanges']);
            }
            // validate the optional field `secondaryIpRanges` (array)
            for (const item of data['secondaryIpRanges']) {
                UsableSubnetworkSecondaryRange.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['statusMessage'] && !(typeof data['statusMessage'] === 'string' || data['statusMessage'] instanceof String)) {
            throw new Error("Expected the field `statusMessage` to be a primitive type in the JSON string but got " + data['statusMessage']);
        }
        // ensure the json data is a string
        if (data['subnetwork'] && !(typeof data['subnetwork'] === 'string' || data['subnetwork'] instanceof String)) {
            throw new Error("Expected the field `subnetwork` to be a primitive type in the JSON string but got " + data['subnetwork']);
        }

        return true;
    }


}



/**
 * The range of internal addresses that are owned by this subnetwork.
 * @member {String} ipCidrRange
 */
UsableSubnetwork.prototype['ipCidrRange'] = undefined;

/**
 * Network Name. Example: projects/my-project/global/networks/my-network
 * @member {String} network
 */
UsableSubnetwork.prototype['network'] = undefined;

/**
 * Secondary IP ranges.
 * @member {Array.<module:model/UsableSubnetworkSecondaryRange>} secondaryIpRanges
 */
UsableSubnetwork.prototype['secondaryIpRanges'] = undefined;

/**
 * A human readable status message representing the reasons for cases where the caller cannot use the secondary ranges under the subnet. For example if the secondary_ip_ranges is empty due to a permission issue, an insufficient permission message will be given by status_message.
 * @member {String} statusMessage
 */
UsableSubnetwork.prototype['statusMessage'] = undefined;

/**
 * Subnetwork Name. Example: projects/my-project/regions/us-central1/subnetworks/my-subnet
 * @member {String} subnetwork
 */
UsableSubnetwork.prototype['subnetwork'] = undefined;






export default UsableSubnetwork;

