/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BlueGreenInfo model module.
 * @module model/BlueGreenInfo
 * @version v1beta1
 */
class BlueGreenInfo {
    /**
     * Constructs a new <code>BlueGreenInfo</code>.
     * Information relevant to blue-green upgrade.
     * @alias module:model/BlueGreenInfo
     */
    constructor() { 
        
        BlueGreenInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BlueGreenInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BlueGreenInfo} obj Optional instance to populate.
     * @return {module:model/BlueGreenInfo} The populated <code>BlueGreenInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BlueGreenInfo();

            if (data.hasOwnProperty('blueInstanceGroupUrls')) {
                obj['blueInstanceGroupUrls'] = ApiClient.convertToType(data['blueInstanceGroupUrls'], ['String']);
            }
            if (data.hasOwnProperty('bluePoolDeletionStartTime')) {
                obj['bluePoolDeletionStartTime'] = ApiClient.convertToType(data['bluePoolDeletionStartTime'], 'String');
            }
            if (data.hasOwnProperty('greenInstanceGroupUrls')) {
                obj['greenInstanceGroupUrls'] = ApiClient.convertToType(data['greenInstanceGroupUrls'], ['String']);
            }
            if (data.hasOwnProperty('greenPoolVersion')) {
                obj['greenPoolVersion'] = ApiClient.convertToType(data['greenPoolVersion'], 'String');
            }
            if (data.hasOwnProperty('phase')) {
                obj['phase'] = ApiClient.convertToType(data['phase'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BlueGreenInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BlueGreenInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['blueInstanceGroupUrls'])) {
            throw new Error("Expected the field `blueInstanceGroupUrls` to be an array in the JSON data but got " + data['blueInstanceGroupUrls']);
        }
        // ensure the json data is a string
        if (data['bluePoolDeletionStartTime'] && !(typeof data['bluePoolDeletionStartTime'] === 'string' || data['bluePoolDeletionStartTime'] instanceof String)) {
            throw new Error("Expected the field `bluePoolDeletionStartTime` to be a primitive type in the JSON string but got " + data['bluePoolDeletionStartTime']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['greenInstanceGroupUrls'])) {
            throw new Error("Expected the field `greenInstanceGroupUrls` to be an array in the JSON data but got " + data['greenInstanceGroupUrls']);
        }
        // ensure the json data is a string
        if (data['greenPoolVersion'] && !(typeof data['greenPoolVersion'] === 'string' || data['greenPoolVersion'] instanceof String)) {
            throw new Error("Expected the field `greenPoolVersion` to be a primitive type in the JSON string but got " + data['greenPoolVersion']);
        }
        // ensure the json data is a string
        if (data['phase'] && !(typeof data['phase'] === 'string' || data['phase'] instanceof String)) {
            throw new Error("Expected the field `phase` to be a primitive type in the JSON string but got " + data['phase']);
        }

        return true;
    }


}



/**
 * The resource URLs of the [managed instance groups] (/compute/docs/instance-groups/creating-groups-of-managed-instances) associated with blue pool.
 * @member {Array.<String>} blueInstanceGroupUrls
 */
BlueGreenInfo.prototype['blueInstanceGroupUrls'] = undefined;

/**
 * Time to start deleting blue pool to complete blue-green upgrade, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
 * @member {String} bluePoolDeletionStartTime
 */
BlueGreenInfo.prototype['bluePoolDeletionStartTime'] = undefined;

/**
 * The resource URLs of the [managed instance groups] (/compute/docs/instance-groups/creating-groups-of-managed-instances) associated with green pool.
 * @member {Array.<String>} greenInstanceGroupUrls
 */
BlueGreenInfo.prototype['greenInstanceGroupUrls'] = undefined;

/**
 * Version of green pool.
 * @member {String} greenPoolVersion
 */
BlueGreenInfo.prototype['greenPoolVersion'] = undefined;

/**
 * Current blue-green upgrade phase.
 * @member {module:model/BlueGreenInfo.PhaseEnum} phase
 */
BlueGreenInfo.prototype['phase'] = undefined;





/**
 * Allowed values for the <code>phase</code> property.
 * @enum {String}
 * @readonly
 */
BlueGreenInfo['PhaseEnum'] = {

    /**
     * value: "PHASE_UNSPECIFIED"
     * @const
     */
    "PHASE_UNSPECIFIED": "PHASE_UNSPECIFIED",

    /**
     * value: "UPDATE_STARTED"
     * @const
     */
    "UPDATE_STARTED": "UPDATE_STARTED",

    /**
     * value: "CREATING_GREEN_POOL"
     * @const
     */
    "CREATING_GREEN_POOL": "CREATING_GREEN_POOL",

    /**
     * value: "CORDONING_BLUE_POOL"
     * @const
     */
    "CORDONING_BLUE_POOL": "CORDONING_BLUE_POOL",

    /**
     * value: "WAITING_TO_DRAIN_BLUE_POOL"
     * @const
     */
    "WAITING_TO_DRAIN_BLUE_POOL": "WAITING_TO_DRAIN_BLUE_POOL",

    /**
     * value: "DRAINING_BLUE_POOL"
     * @const
     */
    "DRAINING_BLUE_POOL": "DRAINING_BLUE_POOL",

    /**
     * value: "NODE_POOL_SOAKING"
     * @const
     */
    "NODE_POOL_SOAKING": "NODE_POOL_SOAKING",

    /**
     * value: "DELETING_BLUE_POOL"
     * @const
     */
    "DELETING_BLUE_POOL": "DELETING_BLUE_POOL",

    /**
     * value: "ROLLBACK_STARTED"
     * @const
     */
    "ROLLBACK_STARTED": "ROLLBACK_STARTED"
};



export default BlueGreenInfo;

