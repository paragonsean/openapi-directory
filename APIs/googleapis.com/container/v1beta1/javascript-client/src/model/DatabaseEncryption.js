/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DatabaseEncryption model module.
 * @module model/DatabaseEncryption
 * @version v1beta1
 */
class DatabaseEncryption {
    /**
     * Constructs a new <code>DatabaseEncryption</code>.
     * Configuration of etcd encryption.
     * @alias module:model/DatabaseEncryption
     */
    constructor() { 
        
        DatabaseEncryption.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DatabaseEncryption</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DatabaseEncryption} obj Optional instance to populate.
     * @return {module:model/DatabaseEncryption} The populated <code>DatabaseEncryption</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DatabaseEncryption();

            if (data.hasOwnProperty('keyName')) {
                obj['keyName'] = ApiClient.convertToType(data['keyName'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DatabaseEncryption</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DatabaseEncryption</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['keyName'] && !(typeof data['keyName'] === 'string' || data['keyName'] instanceof String)) {
            throw new Error("Expected the field `keyName` to be a primitive type in the JSON string but got " + data['keyName']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * Name of CloudKMS key to use for the encryption of secrets in etcd. Ex. projects/my-project/locations/global/keyRings/my-ring/cryptoKeys/my-key
 * @member {String} keyName
 */
DatabaseEncryption.prototype['keyName'] = undefined;

/**
 * The desired state of etcd encryption.
 * @member {module:model/DatabaseEncryption.StateEnum} state
 */
DatabaseEncryption.prototype['state'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
DatabaseEncryption['StateEnum'] = {

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN",

    /**
     * value: "ENCRYPTED"
     * @const
     */
    "ENCRYPTED": "ENCRYPTED",

    /**
     * value: "DECRYPTED"
     * @const
     */
    "DECRYPTED": "DECRYPTED"
};



export default DatabaseEncryption;

