/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DNSConfig model module.
 * @module model/DNSConfig
 * @version v1beta1
 */
class DNSConfig {
    /**
     * Constructs a new <code>DNSConfig</code>.
     * DNSConfig contains the desired set of options for configuring clusterDNS.
     * @alias module:model/DNSConfig
     */
    constructor() { 
        
        DNSConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DNSConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DNSConfig} obj Optional instance to populate.
     * @return {module:model/DNSConfig} The populated <code>DNSConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DNSConfig();

            if (data.hasOwnProperty('clusterDns')) {
                obj['clusterDns'] = ApiClient.convertToType(data['clusterDns'], 'String');
            }
            if (data.hasOwnProperty('clusterDnsDomain')) {
                obj['clusterDnsDomain'] = ApiClient.convertToType(data['clusterDnsDomain'], 'String');
            }
            if (data.hasOwnProperty('clusterDnsScope')) {
                obj['clusterDnsScope'] = ApiClient.convertToType(data['clusterDnsScope'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DNSConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DNSConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['clusterDns'] && !(typeof data['clusterDns'] === 'string' || data['clusterDns'] instanceof String)) {
            throw new Error("Expected the field `clusterDns` to be a primitive type in the JSON string but got " + data['clusterDns']);
        }
        // ensure the json data is a string
        if (data['clusterDnsDomain'] && !(typeof data['clusterDnsDomain'] === 'string' || data['clusterDnsDomain'] instanceof String)) {
            throw new Error("Expected the field `clusterDnsDomain` to be a primitive type in the JSON string but got " + data['clusterDnsDomain']);
        }
        // ensure the json data is a string
        if (data['clusterDnsScope'] && !(typeof data['clusterDnsScope'] === 'string' || data['clusterDnsScope'] instanceof String)) {
            throw new Error("Expected the field `clusterDnsScope` to be a primitive type in the JSON string but got " + data['clusterDnsScope']);
        }

        return true;
    }


}



/**
 * cluster_dns indicates which in-cluster DNS provider should be used.
 * @member {module:model/DNSConfig.ClusterDnsEnum} clusterDns
 */
DNSConfig.prototype['clusterDns'] = undefined;

/**
 * cluster_dns_domain is the suffix used for all cluster service records.
 * @member {String} clusterDnsDomain
 */
DNSConfig.prototype['clusterDnsDomain'] = undefined;

/**
 * cluster_dns_scope indicates the scope of access to cluster DNS records.
 * @member {module:model/DNSConfig.ClusterDnsScopeEnum} clusterDnsScope
 */
DNSConfig.prototype['clusterDnsScope'] = undefined;





/**
 * Allowed values for the <code>clusterDns</code> property.
 * @enum {String}
 * @readonly
 */
DNSConfig['ClusterDnsEnum'] = {

    /**
     * value: "PROVIDER_UNSPECIFIED"
     * @const
     */
    "PROVIDER_UNSPECIFIED": "PROVIDER_UNSPECIFIED",

    /**
     * value: "PLATFORM_DEFAULT"
     * @const
     */
    "PLATFORM_DEFAULT": "PLATFORM_DEFAULT",

    /**
     * value: "CLOUD_DNS"
     * @const
     */
    "CLOUD_DNS": "CLOUD_DNS",

    /**
     * value: "KUBE_DNS"
     * @const
     */
    "KUBE_DNS": "KUBE_DNS"
};


/**
 * Allowed values for the <code>clusterDnsScope</code> property.
 * @enum {String}
 * @readonly
 */
DNSConfig['ClusterDnsScopeEnum'] = {

    /**
     * value: "DNS_SCOPE_UNSPECIFIED"
     * @const
     */
    "DNS_SCOPE_UNSPECIFIED": "DNS_SCOPE_UNSPECIFIED",

    /**
     * value: "CLUSTER_SCOPE"
     * @const
     */
    "CLUSTER_SCOPE": "CLUSTER_SCOPE",

    /**
     * value: "VPC_SCOPE"
     * @const
     */
    "VPC_SCOPE": "VPC_SCOPE"
};



export default DNSConfig;

