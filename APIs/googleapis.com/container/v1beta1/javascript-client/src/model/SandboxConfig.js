/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SandboxConfig model module.
 * @module model/SandboxConfig
 * @version v1beta1
 */
class SandboxConfig {
    /**
     * Constructs a new <code>SandboxConfig</code>.
     * SandboxConfig contains configurations of the sandbox to use for the node.
     * @alias module:model/SandboxConfig
     */
    constructor() { 
        
        SandboxConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SandboxConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SandboxConfig} obj Optional instance to populate.
     * @return {module:model/SandboxConfig} The populated <code>SandboxConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SandboxConfig();

            if (data.hasOwnProperty('sandboxType')) {
                obj['sandboxType'] = ApiClient.convertToType(data['sandboxType'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SandboxConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SandboxConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['sandboxType'] && !(typeof data['sandboxType'] === 'string' || data['sandboxType'] instanceof String)) {
            throw new Error("Expected the field `sandboxType` to be a primitive type in the JSON string but got " + data['sandboxType']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Type of the sandbox to use for the node (e.g. 'gvisor')
 * @member {String} sandboxType
 */
SandboxConfig.prototype['sandboxType'] = undefined;

/**
 * Type of the sandbox to use for the node.
 * @member {module:model/SandboxConfig.TypeEnum} type
 */
SandboxConfig.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
SandboxConfig['TypeEnum'] = {

    /**
     * value: "UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "UNSPECIFIED",

    /**
     * value: "GVISOR"
     * @const
     */
    "GVISOR": "GVISOR"
};



export default SandboxConfig;

