/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISetNetworkPolicyRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISetNetworkPolicyRequest::OAISetNetworkPolicyRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISetNetworkPolicyRequest::OAISetNetworkPolicyRequest() {
    this->initializeModel();
}

OAISetNetworkPolicyRequest::~OAISetNetworkPolicyRequest() {}

void OAISetNetworkPolicyRequest::initializeModel() {

    m_cluster_id_isSet = false;
    m_cluster_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_policy_isSet = false;
    m_network_policy_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_zone_isSet = false;
    m_zone_isValid = false;
}

void OAISetNetworkPolicyRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISetNetworkPolicyRequest::fromJsonObject(QJsonObject json) {

    m_cluster_id_isValid = ::OpenAPI::fromJsonValue(m_cluster_id, json[QString("clusterId")]);
    m_cluster_id_isSet = !json[QString("clusterId")].isNull() && m_cluster_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_policy_isValid = ::OpenAPI::fromJsonValue(m_network_policy, json[QString("networkPolicy")]);
    m_network_policy_isSet = !json[QString("networkPolicy")].isNull() && m_network_policy_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_zone_isValid = ::OpenAPI::fromJsonValue(m_zone, json[QString("zone")]);
    m_zone_isSet = !json[QString("zone")].isNull() && m_zone_isValid;
}

QString OAISetNetworkPolicyRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISetNetworkPolicyRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_id_isSet) {
        obj.insert(QString("clusterId"), ::OpenAPI::toJsonValue(m_cluster_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_policy.isSet()) {
        obj.insert(QString("networkPolicy"), ::OpenAPI::toJsonValue(m_network_policy));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_zone_isSet) {
        obj.insert(QString("zone"), ::OpenAPI::toJsonValue(m_zone));
    }
    return obj;
}

QString OAISetNetworkPolicyRequest::getClusterId() const {
    return m_cluster_id;
}
void OAISetNetworkPolicyRequest::setClusterId(const QString &cluster_id) {
    m_cluster_id = cluster_id;
    m_cluster_id_isSet = true;
}

bool OAISetNetworkPolicyRequest::is_cluster_id_Set() const{
    return m_cluster_id_isSet;
}

bool OAISetNetworkPolicyRequest::is_cluster_id_Valid() const{
    return m_cluster_id_isValid;
}

QString OAISetNetworkPolicyRequest::getName() const {
    return m_name;
}
void OAISetNetworkPolicyRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISetNetworkPolicyRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAISetNetworkPolicyRequest::is_name_Valid() const{
    return m_name_isValid;
}

OAINetworkPolicy OAISetNetworkPolicyRequest::getNetworkPolicy() const {
    return m_network_policy;
}
void OAISetNetworkPolicyRequest::setNetworkPolicy(const OAINetworkPolicy &network_policy) {
    m_network_policy = network_policy;
    m_network_policy_isSet = true;
}

bool OAISetNetworkPolicyRequest::is_network_policy_Set() const{
    return m_network_policy_isSet;
}

bool OAISetNetworkPolicyRequest::is_network_policy_Valid() const{
    return m_network_policy_isValid;
}

QString OAISetNetworkPolicyRequest::getProjectId() const {
    return m_project_id;
}
void OAISetNetworkPolicyRequest::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAISetNetworkPolicyRequest::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAISetNetworkPolicyRequest::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAISetNetworkPolicyRequest::getZone() const {
    return m_zone;
}
void OAISetNetworkPolicyRequest::setZone(const QString &zone) {
    m_zone = zone;
    m_zone_isSet = true;
}

bool OAISetNetworkPolicyRequest::is_zone_Set() const{
    return m_zone_isSet;
}

bool OAISetNetworkPolicyRequest::is_zone_Valid() const{
    return m_zone_isValid;
}

bool OAISetNetworkPolicyRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISetNetworkPolicyRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
