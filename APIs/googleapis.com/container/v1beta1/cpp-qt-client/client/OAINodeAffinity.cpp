/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINodeAffinity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINodeAffinity::OAINodeAffinity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINodeAffinity::OAINodeAffinity() {
    this->initializeModel();
}

OAINodeAffinity::~OAINodeAffinity() {}

void OAINodeAffinity::initializeModel() {

    m_key_isSet = false;
    m_key_isValid = false;

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAINodeAffinity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINodeAffinity::fromJsonObject(QJsonObject json) {

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("operator")]);
    m_r_operator_isSet = !json[QString("operator")].isNull() && m_r_operator_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAINodeAffinity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINodeAffinity::asJsonObject() const {
    QJsonObject obj;
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_r_operator_isSet) {
        obj.insert(QString("operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QString OAINodeAffinity::getKey() const {
    return m_key;
}
void OAINodeAffinity::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAINodeAffinity::is_key_Set() const{
    return m_key_isSet;
}

bool OAINodeAffinity::is_key_Valid() const{
    return m_key_isValid;
}

QString OAINodeAffinity::getROperator() const {
    return m_r_operator;
}
void OAINodeAffinity::setROperator(const QString &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAINodeAffinity::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAINodeAffinity::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

QList<QString> OAINodeAffinity::getValues() const {
    return m_values;
}
void OAINodeAffinity::setValues(const QList<QString> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAINodeAffinity::is_values_Set() const{
    return m_values_isSet;
}

bool OAINodeAffinity::is_values_Valid() const{
    return m_values_isValid;
}

bool OAINodeAffinity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_operator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINodeAffinity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
