/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHostMaintenancePolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHostMaintenancePolicy::OAIHostMaintenancePolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHostMaintenancePolicy::OAIHostMaintenancePolicy() {
    this->initializeModel();
}

OAIHostMaintenancePolicy::~OAIHostMaintenancePolicy() {}

void OAIHostMaintenancePolicy::initializeModel() {

    m_maintenance_interval_isSet = false;
    m_maintenance_interval_isValid = false;

    m_opportunistic_maintenance_strategy_isSet = false;
    m_opportunistic_maintenance_strategy_isValid = false;
}

void OAIHostMaintenancePolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHostMaintenancePolicy::fromJsonObject(QJsonObject json) {

    m_maintenance_interval_isValid = ::OpenAPI::fromJsonValue(m_maintenance_interval, json[QString("maintenanceInterval")]);
    m_maintenance_interval_isSet = !json[QString("maintenanceInterval")].isNull() && m_maintenance_interval_isValid;

    m_opportunistic_maintenance_strategy_isValid = ::OpenAPI::fromJsonValue(m_opportunistic_maintenance_strategy, json[QString("opportunisticMaintenanceStrategy")]);
    m_opportunistic_maintenance_strategy_isSet = !json[QString("opportunisticMaintenanceStrategy")].isNull() && m_opportunistic_maintenance_strategy_isValid;
}

QString OAIHostMaintenancePolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHostMaintenancePolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_maintenance_interval_isSet) {
        obj.insert(QString("maintenanceInterval"), ::OpenAPI::toJsonValue(m_maintenance_interval));
    }
    if (m_opportunistic_maintenance_strategy.isSet()) {
        obj.insert(QString("opportunisticMaintenanceStrategy"), ::OpenAPI::toJsonValue(m_opportunistic_maintenance_strategy));
    }
    return obj;
}

QString OAIHostMaintenancePolicy::getMaintenanceInterval() const {
    return m_maintenance_interval;
}
void OAIHostMaintenancePolicy::setMaintenanceInterval(const QString &maintenance_interval) {
    m_maintenance_interval = maintenance_interval;
    m_maintenance_interval_isSet = true;
}

bool OAIHostMaintenancePolicy::is_maintenance_interval_Set() const{
    return m_maintenance_interval_isSet;
}

bool OAIHostMaintenancePolicy::is_maintenance_interval_Valid() const{
    return m_maintenance_interval_isValid;
}

OAIOpportunisticMaintenanceStrategy OAIHostMaintenancePolicy::getOpportunisticMaintenanceStrategy() const {
    return m_opportunistic_maintenance_strategy;
}
void OAIHostMaintenancePolicy::setOpportunisticMaintenanceStrategy(const OAIOpportunisticMaintenanceStrategy &opportunistic_maintenance_strategy) {
    m_opportunistic_maintenance_strategy = opportunistic_maintenance_strategy;
    m_opportunistic_maintenance_strategy_isSet = true;
}

bool OAIHostMaintenancePolicy::is_opportunistic_maintenance_strategy_Set() const{
    return m_opportunistic_maintenance_strategy_isSet;
}

bool OAIHostMaintenancePolicy::is_opportunistic_maintenance_strategy_Valid() const{
    return m_opportunistic_maintenance_strategy_isValid;
}

bool OAIHostMaintenancePolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_maintenance_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opportunistic_maintenance_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHostMaintenancePolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
