/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddonsConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddonsConfig::OAIAddonsConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddonsConfig::OAIAddonsConfig() {
    this->initializeModel();
}

OAIAddonsConfig::~OAIAddonsConfig() {}

void OAIAddonsConfig::initializeModel() {

    m_cloud_run_config_isSet = false;
    m_cloud_run_config_isValid = false;

    m_config_connector_config_isSet = false;
    m_config_connector_config_isValid = false;

    m_dns_cache_config_isSet = false;
    m_dns_cache_config_isValid = false;

    m_gce_persistent_disk_csi_driver_config_isSet = false;
    m_gce_persistent_disk_csi_driver_config_isValid = false;

    m_gcp_filestore_csi_driver_config_isSet = false;
    m_gcp_filestore_csi_driver_config_isValid = false;

    m_gcs_fuse_csi_driver_config_isSet = false;
    m_gcs_fuse_csi_driver_config_isValid = false;

    m_gke_backup_agent_config_isSet = false;
    m_gke_backup_agent_config_isValid = false;

    m_horizontal_pod_autoscaling_isSet = false;
    m_horizontal_pod_autoscaling_isValid = false;

    m_http_load_balancing_isSet = false;
    m_http_load_balancing_isValid = false;

    m_istio_config_isSet = false;
    m_istio_config_isValid = false;

    m_kalm_config_isSet = false;
    m_kalm_config_isValid = false;

    m_kubernetes_dashboard_isSet = false;
    m_kubernetes_dashboard_isValid = false;

    m_network_policy_config_isSet = false;
    m_network_policy_config_isValid = false;

    m_stateful_ha_config_isSet = false;
    m_stateful_ha_config_isValid = false;
}

void OAIAddonsConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddonsConfig::fromJsonObject(QJsonObject json) {

    m_cloud_run_config_isValid = ::OpenAPI::fromJsonValue(m_cloud_run_config, json[QString("cloudRunConfig")]);
    m_cloud_run_config_isSet = !json[QString("cloudRunConfig")].isNull() && m_cloud_run_config_isValid;

    m_config_connector_config_isValid = ::OpenAPI::fromJsonValue(m_config_connector_config, json[QString("configConnectorConfig")]);
    m_config_connector_config_isSet = !json[QString("configConnectorConfig")].isNull() && m_config_connector_config_isValid;

    m_dns_cache_config_isValid = ::OpenAPI::fromJsonValue(m_dns_cache_config, json[QString("dnsCacheConfig")]);
    m_dns_cache_config_isSet = !json[QString("dnsCacheConfig")].isNull() && m_dns_cache_config_isValid;

    m_gce_persistent_disk_csi_driver_config_isValid = ::OpenAPI::fromJsonValue(m_gce_persistent_disk_csi_driver_config, json[QString("gcePersistentDiskCsiDriverConfig")]);
    m_gce_persistent_disk_csi_driver_config_isSet = !json[QString("gcePersistentDiskCsiDriverConfig")].isNull() && m_gce_persistent_disk_csi_driver_config_isValid;

    m_gcp_filestore_csi_driver_config_isValid = ::OpenAPI::fromJsonValue(m_gcp_filestore_csi_driver_config, json[QString("gcpFilestoreCsiDriverConfig")]);
    m_gcp_filestore_csi_driver_config_isSet = !json[QString("gcpFilestoreCsiDriverConfig")].isNull() && m_gcp_filestore_csi_driver_config_isValid;

    m_gcs_fuse_csi_driver_config_isValid = ::OpenAPI::fromJsonValue(m_gcs_fuse_csi_driver_config, json[QString("gcsFuseCsiDriverConfig")]);
    m_gcs_fuse_csi_driver_config_isSet = !json[QString("gcsFuseCsiDriverConfig")].isNull() && m_gcs_fuse_csi_driver_config_isValid;

    m_gke_backup_agent_config_isValid = ::OpenAPI::fromJsonValue(m_gke_backup_agent_config, json[QString("gkeBackupAgentConfig")]);
    m_gke_backup_agent_config_isSet = !json[QString("gkeBackupAgentConfig")].isNull() && m_gke_backup_agent_config_isValid;

    m_horizontal_pod_autoscaling_isValid = ::OpenAPI::fromJsonValue(m_horizontal_pod_autoscaling, json[QString("horizontalPodAutoscaling")]);
    m_horizontal_pod_autoscaling_isSet = !json[QString("horizontalPodAutoscaling")].isNull() && m_horizontal_pod_autoscaling_isValid;

    m_http_load_balancing_isValid = ::OpenAPI::fromJsonValue(m_http_load_balancing, json[QString("httpLoadBalancing")]);
    m_http_load_balancing_isSet = !json[QString("httpLoadBalancing")].isNull() && m_http_load_balancing_isValid;

    m_istio_config_isValid = ::OpenAPI::fromJsonValue(m_istio_config, json[QString("istioConfig")]);
    m_istio_config_isSet = !json[QString("istioConfig")].isNull() && m_istio_config_isValid;

    m_kalm_config_isValid = ::OpenAPI::fromJsonValue(m_kalm_config, json[QString("kalmConfig")]);
    m_kalm_config_isSet = !json[QString("kalmConfig")].isNull() && m_kalm_config_isValid;

    m_kubernetes_dashboard_isValid = ::OpenAPI::fromJsonValue(m_kubernetes_dashboard, json[QString("kubernetesDashboard")]);
    m_kubernetes_dashboard_isSet = !json[QString("kubernetesDashboard")].isNull() && m_kubernetes_dashboard_isValid;

    m_network_policy_config_isValid = ::OpenAPI::fromJsonValue(m_network_policy_config, json[QString("networkPolicyConfig")]);
    m_network_policy_config_isSet = !json[QString("networkPolicyConfig")].isNull() && m_network_policy_config_isValid;

    m_stateful_ha_config_isValid = ::OpenAPI::fromJsonValue(m_stateful_ha_config, json[QString("statefulHaConfig")]);
    m_stateful_ha_config_isSet = !json[QString("statefulHaConfig")].isNull() && m_stateful_ha_config_isValid;
}

QString OAIAddonsConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddonsConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_cloud_run_config.isSet()) {
        obj.insert(QString("cloudRunConfig"), ::OpenAPI::toJsonValue(m_cloud_run_config));
    }
    if (m_config_connector_config.isSet()) {
        obj.insert(QString("configConnectorConfig"), ::OpenAPI::toJsonValue(m_config_connector_config));
    }
    if (m_dns_cache_config.isSet()) {
        obj.insert(QString("dnsCacheConfig"), ::OpenAPI::toJsonValue(m_dns_cache_config));
    }
    if (m_gce_persistent_disk_csi_driver_config.isSet()) {
        obj.insert(QString("gcePersistentDiskCsiDriverConfig"), ::OpenAPI::toJsonValue(m_gce_persistent_disk_csi_driver_config));
    }
    if (m_gcp_filestore_csi_driver_config.isSet()) {
        obj.insert(QString("gcpFilestoreCsiDriverConfig"), ::OpenAPI::toJsonValue(m_gcp_filestore_csi_driver_config));
    }
    if (m_gcs_fuse_csi_driver_config.isSet()) {
        obj.insert(QString("gcsFuseCsiDriverConfig"), ::OpenAPI::toJsonValue(m_gcs_fuse_csi_driver_config));
    }
    if (m_gke_backup_agent_config.isSet()) {
        obj.insert(QString("gkeBackupAgentConfig"), ::OpenAPI::toJsonValue(m_gke_backup_agent_config));
    }
    if (m_horizontal_pod_autoscaling.isSet()) {
        obj.insert(QString("horizontalPodAutoscaling"), ::OpenAPI::toJsonValue(m_horizontal_pod_autoscaling));
    }
    if (m_http_load_balancing.isSet()) {
        obj.insert(QString("httpLoadBalancing"), ::OpenAPI::toJsonValue(m_http_load_balancing));
    }
    if (m_istio_config.isSet()) {
        obj.insert(QString("istioConfig"), ::OpenAPI::toJsonValue(m_istio_config));
    }
    if (m_kalm_config.isSet()) {
        obj.insert(QString("kalmConfig"), ::OpenAPI::toJsonValue(m_kalm_config));
    }
    if (m_kubernetes_dashboard.isSet()) {
        obj.insert(QString("kubernetesDashboard"), ::OpenAPI::toJsonValue(m_kubernetes_dashboard));
    }
    if (m_network_policy_config.isSet()) {
        obj.insert(QString("networkPolicyConfig"), ::OpenAPI::toJsonValue(m_network_policy_config));
    }
    if (m_stateful_ha_config.isSet()) {
        obj.insert(QString("statefulHaConfig"), ::OpenAPI::toJsonValue(m_stateful_ha_config));
    }
    return obj;
}

OAICloudRunConfig OAIAddonsConfig::getCloudRunConfig() const {
    return m_cloud_run_config;
}
void OAIAddonsConfig::setCloudRunConfig(const OAICloudRunConfig &cloud_run_config) {
    m_cloud_run_config = cloud_run_config;
    m_cloud_run_config_isSet = true;
}

bool OAIAddonsConfig::is_cloud_run_config_Set() const{
    return m_cloud_run_config_isSet;
}

bool OAIAddonsConfig::is_cloud_run_config_Valid() const{
    return m_cloud_run_config_isValid;
}

OAIConfigConnectorConfig OAIAddonsConfig::getConfigConnectorConfig() const {
    return m_config_connector_config;
}
void OAIAddonsConfig::setConfigConnectorConfig(const OAIConfigConnectorConfig &config_connector_config) {
    m_config_connector_config = config_connector_config;
    m_config_connector_config_isSet = true;
}

bool OAIAddonsConfig::is_config_connector_config_Set() const{
    return m_config_connector_config_isSet;
}

bool OAIAddonsConfig::is_config_connector_config_Valid() const{
    return m_config_connector_config_isValid;
}

OAIDnsCacheConfig OAIAddonsConfig::getDnsCacheConfig() const {
    return m_dns_cache_config;
}
void OAIAddonsConfig::setDnsCacheConfig(const OAIDnsCacheConfig &dns_cache_config) {
    m_dns_cache_config = dns_cache_config;
    m_dns_cache_config_isSet = true;
}

bool OAIAddonsConfig::is_dns_cache_config_Set() const{
    return m_dns_cache_config_isSet;
}

bool OAIAddonsConfig::is_dns_cache_config_Valid() const{
    return m_dns_cache_config_isValid;
}

OAIGcePersistentDiskCsiDriverConfig OAIAddonsConfig::getGcePersistentDiskCsiDriverConfig() const {
    return m_gce_persistent_disk_csi_driver_config;
}
void OAIAddonsConfig::setGcePersistentDiskCsiDriverConfig(const OAIGcePersistentDiskCsiDriverConfig &gce_persistent_disk_csi_driver_config) {
    m_gce_persistent_disk_csi_driver_config = gce_persistent_disk_csi_driver_config;
    m_gce_persistent_disk_csi_driver_config_isSet = true;
}

bool OAIAddonsConfig::is_gce_persistent_disk_csi_driver_config_Set() const{
    return m_gce_persistent_disk_csi_driver_config_isSet;
}

bool OAIAddonsConfig::is_gce_persistent_disk_csi_driver_config_Valid() const{
    return m_gce_persistent_disk_csi_driver_config_isValid;
}

OAIGcpFilestoreCsiDriverConfig OAIAddonsConfig::getGcpFilestoreCsiDriverConfig() const {
    return m_gcp_filestore_csi_driver_config;
}
void OAIAddonsConfig::setGcpFilestoreCsiDriverConfig(const OAIGcpFilestoreCsiDriverConfig &gcp_filestore_csi_driver_config) {
    m_gcp_filestore_csi_driver_config = gcp_filestore_csi_driver_config;
    m_gcp_filestore_csi_driver_config_isSet = true;
}

bool OAIAddonsConfig::is_gcp_filestore_csi_driver_config_Set() const{
    return m_gcp_filestore_csi_driver_config_isSet;
}

bool OAIAddonsConfig::is_gcp_filestore_csi_driver_config_Valid() const{
    return m_gcp_filestore_csi_driver_config_isValid;
}

OAIGcsFuseCsiDriverConfig OAIAddonsConfig::getGcsFuseCsiDriverConfig() const {
    return m_gcs_fuse_csi_driver_config;
}
void OAIAddonsConfig::setGcsFuseCsiDriverConfig(const OAIGcsFuseCsiDriverConfig &gcs_fuse_csi_driver_config) {
    m_gcs_fuse_csi_driver_config = gcs_fuse_csi_driver_config;
    m_gcs_fuse_csi_driver_config_isSet = true;
}

bool OAIAddonsConfig::is_gcs_fuse_csi_driver_config_Set() const{
    return m_gcs_fuse_csi_driver_config_isSet;
}

bool OAIAddonsConfig::is_gcs_fuse_csi_driver_config_Valid() const{
    return m_gcs_fuse_csi_driver_config_isValid;
}

OAIGkeBackupAgentConfig OAIAddonsConfig::getGkeBackupAgentConfig() const {
    return m_gke_backup_agent_config;
}
void OAIAddonsConfig::setGkeBackupAgentConfig(const OAIGkeBackupAgentConfig &gke_backup_agent_config) {
    m_gke_backup_agent_config = gke_backup_agent_config;
    m_gke_backup_agent_config_isSet = true;
}

bool OAIAddonsConfig::is_gke_backup_agent_config_Set() const{
    return m_gke_backup_agent_config_isSet;
}

bool OAIAddonsConfig::is_gke_backup_agent_config_Valid() const{
    return m_gke_backup_agent_config_isValid;
}

OAIHorizontalPodAutoscaling OAIAddonsConfig::getHorizontalPodAutoscaling() const {
    return m_horizontal_pod_autoscaling;
}
void OAIAddonsConfig::setHorizontalPodAutoscaling(const OAIHorizontalPodAutoscaling &horizontal_pod_autoscaling) {
    m_horizontal_pod_autoscaling = horizontal_pod_autoscaling;
    m_horizontal_pod_autoscaling_isSet = true;
}

bool OAIAddonsConfig::is_horizontal_pod_autoscaling_Set() const{
    return m_horizontal_pod_autoscaling_isSet;
}

bool OAIAddonsConfig::is_horizontal_pod_autoscaling_Valid() const{
    return m_horizontal_pod_autoscaling_isValid;
}

OAIHttpLoadBalancing OAIAddonsConfig::getHttpLoadBalancing() const {
    return m_http_load_balancing;
}
void OAIAddonsConfig::setHttpLoadBalancing(const OAIHttpLoadBalancing &http_load_balancing) {
    m_http_load_balancing = http_load_balancing;
    m_http_load_balancing_isSet = true;
}

bool OAIAddonsConfig::is_http_load_balancing_Set() const{
    return m_http_load_balancing_isSet;
}

bool OAIAddonsConfig::is_http_load_balancing_Valid() const{
    return m_http_load_balancing_isValid;
}

OAIIstioConfig OAIAddonsConfig::getIstioConfig() const {
    return m_istio_config;
}
void OAIAddonsConfig::setIstioConfig(const OAIIstioConfig &istio_config) {
    m_istio_config = istio_config;
    m_istio_config_isSet = true;
}

bool OAIAddonsConfig::is_istio_config_Set() const{
    return m_istio_config_isSet;
}

bool OAIAddonsConfig::is_istio_config_Valid() const{
    return m_istio_config_isValid;
}

OAIKalmConfig OAIAddonsConfig::getKalmConfig() const {
    return m_kalm_config;
}
void OAIAddonsConfig::setKalmConfig(const OAIKalmConfig &kalm_config) {
    m_kalm_config = kalm_config;
    m_kalm_config_isSet = true;
}

bool OAIAddonsConfig::is_kalm_config_Set() const{
    return m_kalm_config_isSet;
}

bool OAIAddonsConfig::is_kalm_config_Valid() const{
    return m_kalm_config_isValid;
}

OAIKubernetesDashboard OAIAddonsConfig::getKubernetesDashboard() const {
    return m_kubernetes_dashboard;
}
void OAIAddonsConfig::setKubernetesDashboard(const OAIKubernetesDashboard &kubernetes_dashboard) {
    m_kubernetes_dashboard = kubernetes_dashboard;
    m_kubernetes_dashboard_isSet = true;
}

bool OAIAddonsConfig::is_kubernetes_dashboard_Set() const{
    return m_kubernetes_dashboard_isSet;
}

bool OAIAddonsConfig::is_kubernetes_dashboard_Valid() const{
    return m_kubernetes_dashboard_isValid;
}

OAINetworkPolicyConfig OAIAddonsConfig::getNetworkPolicyConfig() const {
    return m_network_policy_config;
}
void OAIAddonsConfig::setNetworkPolicyConfig(const OAINetworkPolicyConfig &network_policy_config) {
    m_network_policy_config = network_policy_config;
    m_network_policy_config_isSet = true;
}

bool OAIAddonsConfig::is_network_policy_config_Set() const{
    return m_network_policy_config_isSet;
}

bool OAIAddonsConfig::is_network_policy_config_Valid() const{
    return m_network_policy_config_isValid;
}

OAIStatefulHAConfig OAIAddonsConfig::getStatefulHaConfig() const {
    return m_stateful_ha_config;
}
void OAIAddonsConfig::setStatefulHaConfig(const OAIStatefulHAConfig &stateful_ha_config) {
    m_stateful_ha_config = stateful_ha_config;
    m_stateful_ha_config_isSet = true;
}

bool OAIAddonsConfig::is_stateful_ha_config_Set() const{
    return m_stateful_ha_config_isSet;
}

bool OAIAddonsConfig::is_stateful_ha_config_Valid() const{
    return m_stateful_ha_config_isValid;
}

bool OAIAddonsConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cloud_run_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_config_connector_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_cache_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gce_persistent_disk_csi_driver_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcp_filestore_csi_driver_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcs_fuse_csi_driver_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gke_backup_agent_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_horizontal_pod_autoscaling.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_load_balancing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_istio_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kalm_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kubernetes_dashboard.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_policy_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stateful_ha_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddonsConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
