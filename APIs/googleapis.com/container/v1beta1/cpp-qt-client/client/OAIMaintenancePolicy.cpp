/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMaintenancePolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMaintenancePolicy::OAIMaintenancePolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMaintenancePolicy::OAIMaintenancePolicy() {
    this->initializeModel();
}

OAIMaintenancePolicy::~OAIMaintenancePolicy() {}

void OAIMaintenancePolicy::initializeModel() {

    m_resource_version_isSet = false;
    m_resource_version_isValid = false;

    m_window_isSet = false;
    m_window_isValid = false;
}

void OAIMaintenancePolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMaintenancePolicy::fromJsonObject(QJsonObject json) {

    m_resource_version_isValid = ::OpenAPI::fromJsonValue(m_resource_version, json[QString("resourceVersion")]);
    m_resource_version_isSet = !json[QString("resourceVersion")].isNull() && m_resource_version_isValid;

    m_window_isValid = ::OpenAPI::fromJsonValue(m_window, json[QString("window")]);
    m_window_isSet = !json[QString("window")].isNull() && m_window_isValid;
}

QString OAIMaintenancePolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMaintenancePolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_version_isSet) {
        obj.insert(QString("resourceVersion"), ::OpenAPI::toJsonValue(m_resource_version));
    }
    if (m_window.isSet()) {
        obj.insert(QString("window"), ::OpenAPI::toJsonValue(m_window));
    }
    return obj;
}

QString OAIMaintenancePolicy::getResourceVersion() const {
    return m_resource_version;
}
void OAIMaintenancePolicy::setResourceVersion(const QString &resource_version) {
    m_resource_version = resource_version;
    m_resource_version_isSet = true;
}

bool OAIMaintenancePolicy::is_resource_version_Set() const{
    return m_resource_version_isSet;
}

bool OAIMaintenancePolicy::is_resource_version_Valid() const{
    return m_resource_version_isValid;
}

OAIMaintenanceWindow OAIMaintenancePolicy::getWindow() const {
    return m_window;
}
void OAIMaintenancePolicy::setWindow(const OAIMaintenanceWindow &window) {
    m_window = window;
    m_window_isSet = true;
}

bool OAIMaintenancePolicy::is_window_Set() const{
    return m_window_isSet;
}

bool OAIMaintenancePolicy::is_window_Valid() const{
    return m_window_isValid;
}

bool OAIMaintenancePolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_window.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMaintenancePolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
