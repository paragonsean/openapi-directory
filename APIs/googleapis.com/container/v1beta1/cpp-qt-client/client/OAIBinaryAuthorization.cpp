/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBinaryAuthorization.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBinaryAuthorization::OAIBinaryAuthorization(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBinaryAuthorization::OAIBinaryAuthorization() {
    this->initializeModel();
}

OAIBinaryAuthorization::~OAIBinaryAuthorization() {}

void OAIBinaryAuthorization::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_evaluation_mode_isSet = false;
    m_evaluation_mode_isValid = false;

    m_policy_bindings_isSet = false;
    m_policy_bindings_isValid = false;
}

void OAIBinaryAuthorization::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBinaryAuthorization::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_evaluation_mode_isValid = ::OpenAPI::fromJsonValue(m_evaluation_mode, json[QString("evaluationMode")]);
    m_evaluation_mode_isSet = !json[QString("evaluationMode")].isNull() && m_evaluation_mode_isValid;

    m_policy_bindings_isValid = ::OpenAPI::fromJsonValue(m_policy_bindings, json[QString("policyBindings")]);
    m_policy_bindings_isSet = !json[QString("policyBindings")].isNull() && m_policy_bindings_isValid;
}

QString OAIBinaryAuthorization::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBinaryAuthorization::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_evaluation_mode_isSet) {
        obj.insert(QString("evaluationMode"), ::OpenAPI::toJsonValue(m_evaluation_mode));
    }
    if (m_policy_bindings.size() > 0) {
        obj.insert(QString("policyBindings"), ::OpenAPI::toJsonValue(m_policy_bindings));
    }
    return obj;
}

bool OAIBinaryAuthorization::isEnabled() const {
    return m_enabled;
}
void OAIBinaryAuthorization::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIBinaryAuthorization::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIBinaryAuthorization::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIBinaryAuthorization::getEvaluationMode() const {
    return m_evaluation_mode;
}
void OAIBinaryAuthorization::setEvaluationMode(const QString &evaluation_mode) {
    m_evaluation_mode = evaluation_mode;
    m_evaluation_mode_isSet = true;
}

bool OAIBinaryAuthorization::is_evaluation_mode_Set() const{
    return m_evaluation_mode_isSet;
}

bool OAIBinaryAuthorization::is_evaluation_mode_Valid() const{
    return m_evaluation_mode_isValid;
}

QList<OAIPolicyBinding> OAIBinaryAuthorization::getPolicyBindings() const {
    return m_policy_bindings;
}
void OAIBinaryAuthorization::setPolicyBindings(const QList<OAIPolicyBinding> &policy_bindings) {
    m_policy_bindings = policy_bindings;
    m_policy_bindings_isSet = true;
}

bool OAIBinaryAuthorization::is_policy_bindings_Set() const{
    return m_policy_bindings_isSet;
}

bool OAIBinaryAuthorization::is_policy_bindings_Valid() const{
    return m_policy_bindings_isValid;
}

bool OAIBinaryAuthorization::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_bindings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBinaryAuthorization::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
