/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINodeConfigDefaults.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINodeConfigDefaults::OAINodeConfigDefaults(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINodeConfigDefaults::OAINodeConfigDefaults() {
    this->initializeModel();
}

OAINodeConfigDefaults::~OAINodeConfigDefaults() {}

void OAINodeConfigDefaults::initializeModel() {

    m_gcfs_config_isSet = false;
    m_gcfs_config_isValid = false;

    m_host_maintenance_policy_isSet = false;
    m_host_maintenance_policy_isValid = false;

    m_logging_config_isSet = false;
    m_logging_config_isValid = false;
}

void OAINodeConfigDefaults::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINodeConfigDefaults::fromJsonObject(QJsonObject json) {

    m_gcfs_config_isValid = ::OpenAPI::fromJsonValue(m_gcfs_config, json[QString("gcfsConfig")]);
    m_gcfs_config_isSet = !json[QString("gcfsConfig")].isNull() && m_gcfs_config_isValid;

    m_host_maintenance_policy_isValid = ::OpenAPI::fromJsonValue(m_host_maintenance_policy, json[QString("hostMaintenancePolicy")]);
    m_host_maintenance_policy_isSet = !json[QString("hostMaintenancePolicy")].isNull() && m_host_maintenance_policy_isValid;

    m_logging_config_isValid = ::OpenAPI::fromJsonValue(m_logging_config, json[QString("loggingConfig")]);
    m_logging_config_isSet = !json[QString("loggingConfig")].isNull() && m_logging_config_isValid;
}

QString OAINodeConfigDefaults::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINodeConfigDefaults::asJsonObject() const {
    QJsonObject obj;
    if (m_gcfs_config.isSet()) {
        obj.insert(QString("gcfsConfig"), ::OpenAPI::toJsonValue(m_gcfs_config));
    }
    if (m_host_maintenance_policy.isSet()) {
        obj.insert(QString("hostMaintenancePolicy"), ::OpenAPI::toJsonValue(m_host_maintenance_policy));
    }
    if (m_logging_config.isSet()) {
        obj.insert(QString("loggingConfig"), ::OpenAPI::toJsonValue(m_logging_config));
    }
    return obj;
}

OAIGcfsConfig OAINodeConfigDefaults::getGcfsConfig() const {
    return m_gcfs_config;
}
void OAINodeConfigDefaults::setGcfsConfig(const OAIGcfsConfig &gcfs_config) {
    m_gcfs_config = gcfs_config;
    m_gcfs_config_isSet = true;
}

bool OAINodeConfigDefaults::is_gcfs_config_Set() const{
    return m_gcfs_config_isSet;
}

bool OAINodeConfigDefaults::is_gcfs_config_Valid() const{
    return m_gcfs_config_isValid;
}

OAIHostMaintenancePolicy OAINodeConfigDefaults::getHostMaintenancePolicy() const {
    return m_host_maintenance_policy;
}
void OAINodeConfigDefaults::setHostMaintenancePolicy(const OAIHostMaintenancePolicy &host_maintenance_policy) {
    m_host_maintenance_policy = host_maintenance_policy;
    m_host_maintenance_policy_isSet = true;
}

bool OAINodeConfigDefaults::is_host_maintenance_policy_Set() const{
    return m_host_maintenance_policy_isSet;
}

bool OAINodeConfigDefaults::is_host_maintenance_policy_Valid() const{
    return m_host_maintenance_policy_isValid;
}

OAINodePoolLoggingConfig OAINodeConfigDefaults::getLoggingConfig() const {
    return m_logging_config;
}
void OAINodeConfigDefaults::setLoggingConfig(const OAINodePoolLoggingConfig &logging_config) {
    m_logging_config = logging_config;
    m_logging_config_isSet = true;
}

bool OAINodeConfigDefaults::is_logging_config_Set() const{
    return m_logging_config_isSet;
}

bool OAINodeConfigDefaults::is_logging_config_Valid() const{
    return m_logging_config_isValid;
}

bool OAINodeConfigDefaults::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gcfs_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_maintenance_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logging_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINodeConfigDefaults::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
