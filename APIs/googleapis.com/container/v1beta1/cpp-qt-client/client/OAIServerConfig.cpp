/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServerConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServerConfig::OAIServerConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServerConfig::OAIServerConfig() {
    this->initializeModel();
}

OAIServerConfig::~OAIServerConfig() {}

void OAIServerConfig::initializeModel() {

    m_channels_isSet = false;
    m_channels_isValid = false;

    m_default_cluster_version_isSet = false;
    m_default_cluster_version_isValid = false;

    m_default_image_type_isSet = false;
    m_default_image_type_isValid = false;

    m_valid_image_types_isSet = false;
    m_valid_image_types_isValid = false;

    m_valid_master_versions_isSet = false;
    m_valid_master_versions_isValid = false;

    m_valid_node_versions_isSet = false;
    m_valid_node_versions_isValid = false;

    m_windows_version_maps_isSet = false;
    m_windows_version_maps_isValid = false;
}

void OAIServerConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServerConfig::fromJsonObject(QJsonObject json) {

    m_channels_isValid = ::OpenAPI::fromJsonValue(m_channels, json[QString("channels")]);
    m_channels_isSet = !json[QString("channels")].isNull() && m_channels_isValid;

    m_default_cluster_version_isValid = ::OpenAPI::fromJsonValue(m_default_cluster_version, json[QString("defaultClusterVersion")]);
    m_default_cluster_version_isSet = !json[QString("defaultClusterVersion")].isNull() && m_default_cluster_version_isValid;

    m_default_image_type_isValid = ::OpenAPI::fromJsonValue(m_default_image_type, json[QString("defaultImageType")]);
    m_default_image_type_isSet = !json[QString("defaultImageType")].isNull() && m_default_image_type_isValid;

    m_valid_image_types_isValid = ::OpenAPI::fromJsonValue(m_valid_image_types, json[QString("validImageTypes")]);
    m_valid_image_types_isSet = !json[QString("validImageTypes")].isNull() && m_valid_image_types_isValid;

    m_valid_master_versions_isValid = ::OpenAPI::fromJsonValue(m_valid_master_versions, json[QString("validMasterVersions")]);
    m_valid_master_versions_isSet = !json[QString("validMasterVersions")].isNull() && m_valid_master_versions_isValid;

    m_valid_node_versions_isValid = ::OpenAPI::fromJsonValue(m_valid_node_versions, json[QString("validNodeVersions")]);
    m_valid_node_versions_isSet = !json[QString("validNodeVersions")].isNull() && m_valid_node_versions_isValid;

    m_windows_version_maps_isValid = ::OpenAPI::fromJsonValue(m_windows_version_maps, json[QString("windowsVersionMaps")]);
    m_windows_version_maps_isSet = !json[QString("windowsVersionMaps")].isNull() && m_windows_version_maps_isValid;
}

QString OAIServerConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServerConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_channels.size() > 0) {
        obj.insert(QString("channels"), ::OpenAPI::toJsonValue(m_channels));
    }
    if (m_default_cluster_version_isSet) {
        obj.insert(QString("defaultClusterVersion"), ::OpenAPI::toJsonValue(m_default_cluster_version));
    }
    if (m_default_image_type_isSet) {
        obj.insert(QString("defaultImageType"), ::OpenAPI::toJsonValue(m_default_image_type));
    }
    if (m_valid_image_types.size() > 0) {
        obj.insert(QString("validImageTypes"), ::OpenAPI::toJsonValue(m_valid_image_types));
    }
    if (m_valid_master_versions.size() > 0) {
        obj.insert(QString("validMasterVersions"), ::OpenAPI::toJsonValue(m_valid_master_versions));
    }
    if (m_valid_node_versions.size() > 0) {
        obj.insert(QString("validNodeVersions"), ::OpenAPI::toJsonValue(m_valid_node_versions));
    }
    if (m_windows_version_maps.size() > 0) {
        obj.insert(QString("windowsVersionMaps"), ::OpenAPI::toJsonValue(m_windows_version_maps));
    }
    return obj;
}

QList<OAIReleaseChannelConfig> OAIServerConfig::getChannels() const {
    return m_channels;
}
void OAIServerConfig::setChannels(const QList<OAIReleaseChannelConfig> &channels) {
    m_channels = channels;
    m_channels_isSet = true;
}

bool OAIServerConfig::is_channels_Set() const{
    return m_channels_isSet;
}

bool OAIServerConfig::is_channels_Valid() const{
    return m_channels_isValid;
}

QString OAIServerConfig::getDefaultClusterVersion() const {
    return m_default_cluster_version;
}
void OAIServerConfig::setDefaultClusterVersion(const QString &default_cluster_version) {
    m_default_cluster_version = default_cluster_version;
    m_default_cluster_version_isSet = true;
}

bool OAIServerConfig::is_default_cluster_version_Set() const{
    return m_default_cluster_version_isSet;
}

bool OAIServerConfig::is_default_cluster_version_Valid() const{
    return m_default_cluster_version_isValid;
}

QString OAIServerConfig::getDefaultImageType() const {
    return m_default_image_type;
}
void OAIServerConfig::setDefaultImageType(const QString &default_image_type) {
    m_default_image_type = default_image_type;
    m_default_image_type_isSet = true;
}

bool OAIServerConfig::is_default_image_type_Set() const{
    return m_default_image_type_isSet;
}

bool OAIServerConfig::is_default_image_type_Valid() const{
    return m_default_image_type_isValid;
}

QList<QString> OAIServerConfig::getValidImageTypes() const {
    return m_valid_image_types;
}
void OAIServerConfig::setValidImageTypes(const QList<QString> &valid_image_types) {
    m_valid_image_types = valid_image_types;
    m_valid_image_types_isSet = true;
}

bool OAIServerConfig::is_valid_image_types_Set() const{
    return m_valid_image_types_isSet;
}

bool OAIServerConfig::is_valid_image_types_Valid() const{
    return m_valid_image_types_isValid;
}

QList<QString> OAIServerConfig::getValidMasterVersions() const {
    return m_valid_master_versions;
}
void OAIServerConfig::setValidMasterVersions(const QList<QString> &valid_master_versions) {
    m_valid_master_versions = valid_master_versions;
    m_valid_master_versions_isSet = true;
}

bool OAIServerConfig::is_valid_master_versions_Set() const{
    return m_valid_master_versions_isSet;
}

bool OAIServerConfig::is_valid_master_versions_Valid() const{
    return m_valid_master_versions_isValid;
}

QList<QString> OAIServerConfig::getValidNodeVersions() const {
    return m_valid_node_versions;
}
void OAIServerConfig::setValidNodeVersions(const QList<QString> &valid_node_versions) {
    m_valid_node_versions = valid_node_versions;
    m_valid_node_versions_isSet = true;
}

bool OAIServerConfig::is_valid_node_versions_Set() const{
    return m_valid_node_versions_isSet;
}

bool OAIServerConfig::is_valid_node_versions_Valid() const{
    return m_valid_node_versions_isValid;
}

QMap<QString, OAIWindowsVersions> OAIServerConfig::getWindowsVersionMaps() const {
    return m_windows_version_maps;
}
void OAIServerConfig::setWindowsVersionMaps(const QMap<QString, OAIWindowsVersions> &windows_version_maps) {
    m_windows_version_maps = windows_version_maps;
    m_windows_version_maps_isSet = true;
}

bool OAIServerConfig::is_windows_version_maps_Set() const{
    return m_windows_version_maps_isSet;
}

bool OAIServerConfig::is_windows_version_maps_Valid() const{
    return m_windows_version_maps_isValid;
}

bool OAIServerConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_cluster_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_image_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_image_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_master_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_node_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_windows_version_maps.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServerConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
