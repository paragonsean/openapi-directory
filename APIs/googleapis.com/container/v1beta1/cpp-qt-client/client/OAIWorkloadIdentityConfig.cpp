/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkloadIdentityConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkloadIdentityConfig::OAIWorkloadIdentityConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkloadIdentityConfig::OAIWorkloadIdentityConfig() {
    this->initializeModel();
}

OAIWorkloadIdentityConfig::~OAIWorkloadIdentityConfig() {}

void OAIWorkloadIdentityConfig::initializeModel() {

    m_identity_namespace_isSet = false;
    m_identity_namespace_isValid = false;

    m_identity_provider_isSet = false;
    m_identity_provider_isValid = false;

    m_workload_pool_isSet = false;
    m_workload_pool_isValid = false;
}

void OAIWorkloadIdentityConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkloadIdentityConfig::fromJsonObject(QJsonObject json) {

    m_identity_namespace_isValid = ::OpenAPI::fromJsonValue(m_identity_namespace, json[QString("identityNamespace")]);
    m_identity_namespace_isSet = !json[QString("identityNamespace")].isNull() && m_identity_namespace_isValid;

    m_identity_provider_isValid = ::OpenAPI::fromJsonValue(m_identity_provider, json[QString("identityProvider")]);
    m_identity_provider_isSet = !json[QString("identityProvider")].isNull() && m_identity_provider_isValid;

    m_workload_pool_isValid = ::OpenAPI::fromJsonValue(m_workload_pool, json[QString("workloadPool")]);
    m_workload_pool_isSet = !json[QString("workloadPool")].isNull() && m_workload_pool_isValid;
}

QString OAIWorkloadIdentityConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkloadIdentityConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_identity_namespace_isSet) {
        obj.insert(QString("identityNamespace"), ::OpenAPI::toJsonValue(m_identity_namespace));
    }
    if (m_identity_provider_isSet) {
        obj.insert(QString("identityProvider"), ::OpenAPI::toJsonValue(m_identity_provider));
    }
    if (m_workload_pool_isSet) {
        obj.insert(QString("workloadPool"), ::OpenAPI::toJsonValue(m_workload_pool));
    }
    return obj;
}

QString OAIWorkloadIdentityConfig::getIdentityNamespace() const {
    return m_identity_namespace;
}
void OAIWorkloadIdentityConfig::setIdentityNamespace(const QString &identity_namespace) {
    m_identity_namespace = identity_namespace;
    m_identity_namespace_isSet = true;
}

bool OAIWorkloadIdentityConfig::is_identity_namespace_Set() const{
    return m_identity_namespace_isSet;
}

bool OAIWorkloadIdentityConfig::is_identity_namespace_Valid() const{
    return m_identity_namespace_isValid;
}

QString OAIWorkloadIdentityConfig::getIdentityProvider() const {
    return m_identity_provider;
}
void OAIWorkloadIdentityConfig::setIdentityProvider(const QString &identity_provider) {
    m_identity_provider = identity_provider;
    m_identity_provider_isSet = true;
}

bool OAIWorkloadIdentityConfig::is_identity_provider_Set() const{
    return m_identity_provider_isSet;
}

bool OAIWorkloadIdentityConfig::is_identity_provider_Valid() const{
    return m_identity_provider_isValid;
}

QString OAIWorkloadIdentityConfig::getWorkloadPool() const {
    return m_workload_pool;
}
void OAIWorkloadIdentityConfig::setWorkloadPool(const QString &workload_pool) {
    m_workload_pool = workload_pool;
    m_workload_pool_isSet = true;
}

bool OAIWorkloadIdentityConfig::is_workload_pool_Set() const{
    return m_workload_pool_isSet;
}

bool OAIWorkloadIdentityConfig::is_workload_pool_Valid() const{
    return m_workload_pool_isValid;
}

bool OAIWorkloadIdentityConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_identity_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workload_pool_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkloadIdentityConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
