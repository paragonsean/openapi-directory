/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNodePoolRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNodePoolRequest::OAIUpdateNodePoolRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNodePoolRequest::OAIUpdateNodePoolRequest() {
    this->initializeModel();
}

OAIUpdateNodePoolRequest::~OAIUpdateNodePoolRequest() {}

void OAIUpdateNodePoolRequest::initializeModel() {

    m_cluster_id_isSet = false;
    m_cluster_id_isValid = false;

    m_confidential_nodes_isSet = false;
    m_confidential_nodes_isValid = false;

    m_disk_size_gb_isSet = false;
    m_disk_size_gb_isValid = false;

    m_disk_type_isSet = false;
    m_disk_type_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_fast_socket_isSet = false;
    m_fast_socket_isValid = false;

    m_gcfs_config_isSet = false;
    m_gcfs_config_isValid = false;

    m_gvnic_isSet = false;
    m_gvnic_isValid = false;

    m_image_type_isSet = false;
    m_image_type_isValid = false;

    m_kubelet_config_isSet = false;
    m_kubelet_config_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_linux_node_config_isSet = false;
    m_linux_node_config_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_logging_config_isSet = false;
    m_logging_config_isValid = false;

    m_machine_type_isSet = false;
    m_machine_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_node_network_config_isSet = false;
    m_node_network_config_isValid = false;

    m_node_pool_id_isSet = false;
    m_node_pool_id_isValid = false;

    m_node_version_isSet = false;
    m_node_version_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_queued_provisioning_isSet = false;
    m_queued_provisioning_isValid = false;

    m_resource_labels_isSet = false;
    m_resource_labels_isValid = false;

    m_resource_manager_tags_isSet = false;
    m_resource_manager_tags_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_taints_isSet = false;
    m_taints_isValid = false;

    m_upgrade_settings_isSet = false;
    m_upgrade_settings_isValid = false;

    m_windows_node_config_isSet = false;
    m_windows_node_config_isValid = false;

    m_workload_metadata_config_isSet = false;
    m_workload_metadata_config_isValid = false;

    m_zone_isSet = false;
    m_zone_isValid = false;
}

void OAIUpdateNodePoolRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNodePoolRequest::fromJsonObject(QJsonObject json) {

    m_cluster_id_isValid = ::OpenAPI::fromJsonValue(m_cluster_id, json[QString("clusterId")]);
    m_cluster_id_isSet = !json[QString("clusterId")].isNull() && m_cluster_id_isValid;

    m_confidential_nodes_isValid = ::OpenAPI::fromJsonValue(m_confidential_nodes, json[QString("confidentialNodes")]);
    m_confidential_nodes_isSet = !json[QString("confidentialNodes")].isNull() && m_confidential_nodes_isValid;

    m_disk_size_gb_isValid = ::OpenAPI::fromJsonValue(m_disk_size_gb, json[QString("diskSizeGb")]);
    m_disk_size_gb_isSet = !json[QString("diskSizeGb")].isNull() && m_disk_size_gb_isValid;

    m_disk_type_isValid = ::OpenAPI::fromJsonValue(m_disk_type, json[QString("diskType")]);
    m_disk_type_isSet = !json[QString("diskType")].isNull() && m_disk_type_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_fast_socket_isValid = ::OpenAPI::fromJsonValue(m_fast_socket, json[QString("fastSocket")]);
    m_fast_socket_isSet = !json[QString("fastSocket")].isNull() && m_fast_socket_isValid;

    m_gcfs_config_isValid = ::OpenAPI::fromJsonValue(m_gcfs_config, json[QString("gcfsConfig")]);
    m_gcfs_config_isSet = !json[QString("gcfsConfig")].isNull() && m_gcfs_config_isValid;

    m_gvnic_isValid = ::OpenAPI::fromJsonValue(m_gvnic, json[QString("gvnic")]);
    m_gvnic_isSet = !json[QString("gvnic")].isNull() && m_gvnic_isValid;

    m_image_type_isValid = ::OpenAPI::fromJsonValue(m_image_type, json[QString("imageType")]);
    m_image_type_isSet = !json[QString("imageType")].isNull() && m_image_type_isValid;

    m_kubelet_config_isValid = ::OpenAPI::fromJsonValue(m_kubelet_config, json[QString("kubeletConfig")]);
    m_kubelet_config_isSet = !json[QString("kubeletConfig")].isNull() && m_kubelet_config_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_linux_node_config_isValid = ::OpenAPI::fromJsonValue(m_linux_node_config, json[QString("linuxNodeConfig")]);
    m_linux_node_config_isSet = !json[QString("linuxNodeConfig")].isNull() && m_linux_node_config_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;

    m_logging_config_isValid = ::OpenAPI::fromJsonValue(m_logging_config, json[QString("loggingConfig")]);
    m_logging_config_isSet = !json[QString("loggingConfig")].isNull() && m_logging_config_isValid;

    m_machine_type_isValid = ::OpenAPI::fromJsonValue(m_machine_type, json[QString("machineType")]);
    m_machine_type_isSet = !json[QString("machineType")].isNull() && m_machine_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_node_network_config_isValid = ::OpenAPI::fromJsonValue(m_node_network_config, json[QString("nodeNetworkConfig")]);
    m_node_network_config_isSet = !json[QString("nodeNetworkConfig")].isNull() && m_node_network_config_isValid;

    m_node_pool_id_isValid = ::OpenAPI::fromJsonValue(m_node_pool_id, json[QString("nodePoolId")]);
    m_node_pool_id_isSet = !json[QString("nodePoolId")].isNull() && m_node_pool_id_isValid;

    m_node_version_isValid = ::OpenAPI::fromJsonValue(m_node_version, json[QString("nodeVersion")]);
    m_node_version_isSet = !json[QString("nodeVersion")].isNull() && m_node_version_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_queued_provisioning_isValid = ::OpenAPI::fromJsonValue(m_queued_provisioning, json[QString("queuedProvisioning")]);
    m_queued_provisioning_isSet = !json[QString("queuedProvisioning")].isNull() && m_queued_provisioning_isValid;

    m_resource_labels_isValid = ::OpenAPI::fromJsonValue(m_resource_labels, json[QString("resourceLabels")]);
    m_resource_labels_isSet = !json[QString("resourceLabels")].isNull() && m_resource_labels_isValid;

    m_resource_manager_tags_isValid = ::OpenAPI::fromJsonValue(m_resource_manager_tags, json[QString("resourceManagerTags")]);
    m_resource_manager_tags_isSet = !json[QString("resourceManagerTags")].isNull() && m_resource_manager_tags_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_taints_isValid = ::OpenAPI::fromJsonValue(m_taints, json[QString("taints")]);
    m_taints_isSet = !json[QString("taints")].isNull() && m_taints_isValid;

    m_upgrade_settings_isValid = ::OpenAPI::fromJsonValue(m_upgrade_settings, json[QString("upgradeSettings")]);
    m_upgrade_settings_isSet = !json[QString("upgradeSettings")].isNull() && m_upgrade_settings_isValid;

    m_windows_node_config_isValid = ::OpenAPI::fromJsonValue(m_windows_node_config, json[QString("windowsNodeConfig")]);
    m_windows_node_config_isSet = !json[QString("windowsNodeConfig")].isNull() && m_windows_node_config_isValid;

    m_workload_metadata_config_isValid = ::OpenAPI::fromJsonValue(m_workload_metadata_config, json[QString("workloadMetadataConfig")]);
    m_workload_metadata_config_isSet = !json[QString("workloadMetadataConfig")].isNull() && m_workload_metadata_config_isValid;

    m_zone_isValid = ::OpenAPI::fromJsonValue(m_zone, json[QString("zone")]);
    m_zone_isSet = !json[QString("zone")].isNull() && m_zone_isValid;
}

QString OAIUpdateNodePoolRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNodePoolRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_id_isSet) {
        obj.insert(QString("clusterId"), ::OpenAPI::toJsonValue(m_cluster_id));
    }
    if (m_confidential_nodes.isSet()) {
        obj.insert(QString("confidentialNodes"), ::OpenAPI::toJsonValue(m_confidential_nodes));
    }
    if (m_disk_size_gb_isSet) {
        obj.insert(QString("diskSizeGb"), ::OpenAPI::toJsonValue(m_disk_size_gb));
    }
    if (m_disk_type_isSet) {
        obj.insert(QString("diskType"), ::OpenAPI::toJsonValue(m_disk_type));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_fast_socket.isSet()) {
        obj.insert(QString("fastSocket"), ::OpenAPI::toJsonValue(m_fast_socket));
    }
    if (m_gcfs_config.isSet()) {
        obj.insert(QString("gcfsConfig"), ::OpenAPI::toJsonValue(m_gcfs_config));
    }
    if (m_gvnic.isSet()) {
        obj.insert(QString("gvnic"), ::OpenAPI::toJsonValue(m_gvnic));
    }
    if (m_image_type_isSet) {
        obj.insert(QString("imageType"), ::OpenAPI::toJsonValue(m_image_type));
    }
    if (m_kubelet_config.isSet()) {
        obj.insert(QString("kubeletConfig"), ::OpenAPI::toJsonValue(m_kubelet_config));
    }
    if (m_labels.isSet()) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_linux_node_config.isSet()) {
        obj.insert(QString("linuxNodeConfig"), ::OpenAPI::toJsonValue(m_linux_node_config));
    }
    if (m_locations.size() > 0) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_logging_config.isSet()) {
        obj.insert(QString("loggingConfig"), ::OpenAPI::toJsonValue(m_logging_config));
    }
    if (m_machine_type_isSet) {
        obj.insert(QString("machineType"), ::OpenAPI::toJsonValue(m_machine_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_node_network_config.isSet()) {
        obj.insert(QString("nodeNetworkConfig"), ::OpenAPI::toJsonValue(m_node_network_config));
    }
    if (m_node_pool_id_isSet) {
        obj.insert(QString("nodePoolId"), ::OpenAPI::toJsonValue(m_node_pool_id));
    }
    if (m_node_version_isSet) {
        obj.insert(QString("nodeVersion"), ::OpenAPI::toJsonValue(m_node_version));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_queued_provisioning.isSet()) {
        obj.insert(QString("queuedProvisioning"), ::OpenAPI::toJsonValue(m_queued_provisioning));
    }
    if (m_resource_labels.isSet()) {
        obj.insert(QString("resourceLabels"), ::OpenAPI::toJsonValue(m_resource_labels));
    }
    if (m_resource_manager_tags.isSet()) {
        obj.insert(QString("resourceManagerTags"), ::OpenAPI::toJsonValue(m_resource_manager_tags));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_taints.isSet()) {
        obj.insert(QString("taints"), ::OpenAPI::toJsonValue(m_taints));
    }
    if (m_upgrade_settings.isSet()) {
        obj.insert(QString("upgradeSettings"), ::OpenAPI::toJsonValue(m_upgrade_settings));
    }
    if (m_windows_node_config.isSet()) {
        obj.insert(QString("windowsNodeConfig"), ::OpenAPI::toJsonValue(m_windows_node_config));
    }
    if (m_workload_metadata_config.isSet()) {
        obj.insert(QString("workloadMetadataConfig"), ::OpenAPI::toJsonValue(m_workload_metadata_config));
    }
    if (m_zone_isSet) {
        obj.insert(QString("zone"), ::OpenAPI::toJsonValue(m_zone));
    }
    return obj;
}

QString OAIUpdateNodePoolRequest::getClusterId() const {
    return m_cluster_id;
}
void OAIUpdateNodePoolRequest::setClusterId(const QString &cluster_id) {
    m_cluster_id = cluster_id;
    m_cluster_id_isSet = true;
}

bool OAIUpdateNodePoolRequest::is_cluster_id_Set() const{
    return m_cluster_id_isSet;
}

bool OAIUpdateNodePoolRequest::is_cluster_id_Valid() const{
    return m_cluster_id_isValid;
}

OAIConfidentialNodes OAIUpdateNodePoolRequest::getConfidentialNodes() const {
    return m_confidential_nodes;
}
void OAIUpdateNodePoolRequest::setConfidentialNodes(const OAIConfidentialNodes &confidential_nodes) {
    m_confidential_nodes = confidential_nodes;
    m_confidential_nodes_isSet = true;
}

bool OAIUpdateNodePoolRequest::is_confidential_nodes_Set() const{
    return m_confidential_nodes_isSet;
}

bool OAIUpdateNodePoolRequest::is_confidential_nodes_Valid() const{
    return m_confidential_nodes_isValid;
}

QString OAIUpdateNodePoolRequest::getDiskSizeGb() const {
    return m_disk_size_gb;
}
void OAIUpdateNodePoolRequest::setDiskSizeGb(const QString &disk_size_gb) {
    m_disk_size_gb = disk_size_gb;
    m_disk_size_gb_isSet = true;
}

bool OAIUpdateNodePoolRequest::is_disk_size_gb_Set() const{
    return m_disk_size_gb_isSet;
}

bool OAIUpdateNodePoolRequest::is_disk_size_gb_Valid() const{
    return m_disk_size_gb_isValid;
}

QString OAIUpdateNodePoolRequest::getDiskType() const {
    return m_disk_type;
}
void OAIUpdateNodePoolRequest::setDiskType(const QString &disk_type) {
    m_disk_type = disk_type;
    m_disk_type_isSet = true;
}

bool OAIUpdateNodePoolRequest::is_disk_type_Set() const{
    return m_disk_type_isSet;
}

bool OAIUpdateNodePoolRequest::is_disk_type_Valid() const{
    return m_disk_type_isValid;
}

QString OAIUpdateNodePoolRequest::getEtag() const {
    return m_etag;
}
void OAIUpdateNodePoolRequest::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIUpdateNodePoolRequest::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIUpdateNodePoolRequest::is_etag_Valid() const{
    return m_etag_isValid;
}

OAIFastSocket OAIUpdateNodePoolRequest::getFastSocket() const {
    return m_fast_socket;
}
void OAIUpdateNodePoolRequest::setFastSocket(const OAIFastSocket &fast_socket) {
    m_fast_socket = fast_socket;
    m_fast_socket_isSet = true;
}

bool OAIUpdateNodePoolRequest::is_fast_socket_Set() const{
    return m_fast_socket_isSet;
}

bool OAIUpdateNodePoolRequest::is_fast_socket_Valid() const{
    return m_fast_socket_isValid;
}

OAIGcfsConfig OAIUpdateNodePoolRequest::getGcfsConfig() const {
    return m_gcfs_config;
}
void OAIUpdateNodePoolRequest::setGcfsConfig(const OAIGcfsConfig &gcfs_config) {
    m_gcfs_config = gcfs_config;
    m_gcfs_config_isSet = true;
}

bool OAIUpdateNodePoolRequest::is_gcfs_config_Set() const{
    return m_gcfs_config_isSet;
}

bool OAIUpdateNodePoolRequest::is_gcfs_config_Valid() const{
    return m_gcfs_config_isValid;
}

OAIVirtualNIC OAIUpdateNodePoolRequest::getGvnic() const {
    return m_gvnic;
}
void OAIUpdateNodePoolRequest::setGvnic(const OAIVirtualNIC &gvnic) {
    m_gvnic = gvnic;
    m_gvnic_isSet = true;
}

bool OAIUpdateNodePoolRequest::is_gvnic_Set() const{
    return m_gvnic_isSet;
}

bool OAIUpdateNodePoolRequest::is_gvnic_Valid() const{
    return m_gvnic_isValid;
}

QString OAIUpdateNodePoolRequest::getImageType() const {
    return m_image_type;
}
void OAIUpdateNodePoolRequest::setImageType(const QString &image_type) {
    m_image_type = image_type;
    m_image_type_isSet = true;
}

bool OAIUpdateNodePoolRequest::is_image_type_Set() const{
    return m_image_type_isSet;
}

bool OAIUpdateNodePoolRequest::is_image_type_Valid() const{
    return m_image_type_isValid;
}

OAINodeKubeletConfig OAIUpdateNodePoolRequest::getKubeletConfig() const {
    return m_kubelet_config;
}
void OAIUpdateNodePoolRequest::setKubeletConfig(const OAINodeKubeletConfig &kubelet_config) {
    m_kubelet_config = kubelet_config;
    m_kubelet_config_isSet = true;
}

bool OAIUpdateNodePoolRequest::is_kubelet_config_Set() const{
    return m_kubelet_config_isSet;
}

bool OAIUpdateNodePoolRequest::is_kubelet_config_Valid() const{
    return m_kubelet_config_isValid;
}

OAINodeLabels OAIUpdateNodePoolRequest::getLabels() const {
    return m_labels;
}
void OAIUpdateNodePoolRequest::setLabels(const OAINodeLabels &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIUpdateNodePoolRequest::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIUpdateNodePoolRequest::is_labels_Valid() const{
    return m_labels_isValid;
}

OAILinuxNodeConfig OAIUpdateNodePoolRequest::getLinuxNodeConfig() const {
    return m_linux_node_config;
}
void OAIUpdateNodePoolRequest::setLinuxNodeConfig(const OAILinuxNodeConfig &linux_node_config) {
    m_linux_node_config = linux_node_config;
    m_linux_node_config_isSet = true;
}

bool OAIUpdateNodePoolRequest::is_linux_node_config_Set() const{
    return m_linux_node_config_isSet;
}

bool OAIUpdateNodePoolRequest::is_linux_node_config_Valid() const{
    return m_linux_node_config_isValid;
}

QList<QString> OAIUpdateNodePoolRequest::getLocations() const {
    return m_locations;
}
void OAIUpdateNodePoolRequest::setLocations(const QList<QString> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAIUpdateNodePoolRequest::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAIUpdateNodePoolRequest::is_locations_Valid() const{
    return m_locations_isValid;
}

OAINodePoolLoggingConfig OAIUpdateNodePoolRequest::getLoggingConfig() const {
    return m_logging_config;
}
void OAIUpdateNodePoolRequest::setLoggingConfig(const OAINodePoolLoggingConfig &logging_config) {
    m_logging_config = logging_config;
    m_logging_config_isSet = true;
}

bool OAIUpdateNodePoolRequest::is_logging_config_Set() const{
    return m_logging_config_isSet;
}

bool OAIUpdateNodePoolRequest::is_logging_config_Valid() const{
    return m_logging_config_isValid;
}

QString OAIUpdateNodePoolRequest::getMachineType() const {
    return m_machine_type;
}
void OAIUpdateNodePoolRequest::setMachineType(const QString &machine_type) {
    m_machine_type = machine_type;
    m_machine_type_isSet = true;
}

bool OAIUpdateNodePoolRequest::is_machine_type_Set() const{
    return m_machine_type_isSet;
}

bool OAIUpdateNodePoolRequest::is_machine_type_Valid() const{
    return m_machine_type_isValid;
}

QString OAIUpdateNodePoolRequest::getName() const {
    return m_name;
}
void OAIUpdateNodePoolRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateNodePoolRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateNodePoolRequest::is_name_Valid() const{
    return m_name_isValid;
}

OAINodeNetworkConfig OAIUpdateNodePoolRequest::getNodeNetworkConfig() const {
    return m_node_network_config;
}
void OAIUpdateNodePoolRequest::setNodeNetworkConfig(const OAINodeNetworkConfig &node_network_config) {
    m_node_network_config = node_network_config;
    m_node_network_config_isSet = true;
}

bool OAIUpdateNodePoolRequest::is_node_network_config_Set() const{
    return m_node_network_config_isSet;
}

bool OAIUpdateNodePoolRequest::is_node_network_config_Valid() const{
    return m_node_network_config_isValid;
}

QString OAIUpdateNodePoolRequest::getNodePoolId() const {
    return m_node_pool_id;
}
void OAIUpdateNodePoolRequest::setNodePoolId(const QString &node_pool_id) {
    m_node_pool_id = node_pool_id;
    m_node_pool_id_isSet = true;
}

bool OAIUpdateNodePoolRequest::is_node_pool_id_Set() const{
    return m_node_pool_id_isSet;
}

bool OAIUpdateNodePoolRequest::is_node_pool_id_Valid() const{
    return m_node_pool_id_isValid;
}

QString OAIUpdateNodePoolRequest::getNodeVersion() const {
    return m_node_version;
}
void OAIUpdateNodePoolRequest::setNodeVersion(const QString &node_version) {
    m_node_version = node_version;
    m_node_version_isSet = true;
}

bool OAIUpdateNodePoolRequest::is_node_version_Set() const{
    return m_node_version_isSet;
}

bool OAIUpdateNodePoolRequest::is_node_version_Valid() const{
    return m_node_version_isValid;
}

QString OAIUpdateNodePoolRequest::getProjectId() const {
    return m_project_id;
}
void OAIUpdateNodePoolRequest::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIUpdateNodePoolRequest::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIUpdateNodePoolRequest::is_project_id_Valid() const{
    return m_project_id_isValid;
}

OAIQueuedProvisioning OAIUpdateNodePoolRequest::getQueuedProvisioning() const {
    return m_queued_provisioning;
}
void OAIUpdateNodePoolRequest::setQueuedProvisioning(const OAIQueuedProvisioning &queued_provisioning) {
    m_queued_provisioning = queued_provisioning;
    m_queued_provisioning_isSet = true;
}

bool OAIUpdateNodePoolRequest::is_queued_provisioning_Set() const{
    return m_queued_provisioning_isSet;
}

bool OAIUpdateNodePoolRequest::is_queued_provisioning_Valid() const{
    return m_queued_provisioning_isValid;
}

OAIResourceLabels OAIUpdateNodePoolRequest::getResourceLabels() const {
    return m_resource_labels;
}
void OAIUpdateNodePoolRequest::setResourceLabels(const OAIResourceLabels &resource_labels) {
    m_resource_labels = resource_labels;
    m_resource_labels_isSet = true;
}

bool OAIUpdateNodePoolRequest::is_resource_labels_Set() const{
    return m_resource_labels_isSet;
}

bool OAIUpdateNodePoolRequest::is_resource_labels_Valid() const{
    return m_resource_labels_isValid;
}

OAIResourceManagerTags OAIUpdateNodePoolRequest::getResourceManagerTags() const {
    return m_resource_manager_tags;
}
void OAIUpdateNodePoolRequest::setResourceManagerTags(const OAIResourceManagerTags &resource_manager_tags) {
    m_resource_manager_tags = resource_manager_tags;
    m_resource_manager_tags_isSet = true;
}

bool OAIUpdateNodePoolRequest::is_resource_manager_tags_Set() const{
    return m_resource_manager_tags_isSet;
}

bool OAIUpdateNodePoolRequest::is_resource_manager_tags_Valid() const{
    return m_resource_manager_tags_isValid;
}

OAINetworkTags OAIUpdateNodePoolRequest::getTags() const {
    return m_tags;
}
void OAIUpdateNodePoolRequest::setTags(const OAINetworkTags &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIUpdateNodePoolRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIUpdateNodePoolRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

OAINodeTaints OAIUpdateNodePoolRequest::getTaints() const {
    return m_taints;
}
void OAIUpdateNodePoolRequest::setTaints(const OAINodeTaints &taints) {
    m_taints = taints;
    m_taints_isSet = true;
}

bool OAIUpdateNodePoolRequest::is_taints_Set() const{
    return m_taints_isSet;
}

bool OAIUpdateNodePoolRequest::is_taints_Valid() const{
    return m_taints_isValid;
}

OAIUpgradeSettings OAIUpdateNodePoolRequest::getUpgradeSettings() const {
    return m_upgrade_settings;
}
void OAIUpdateNodePoolRequest::setUpgradeSettings(const OAIUpgradeSettings &upgrade_settings) {
    m_upgrade_settings = upgrade_settings;
    m_upgrade_settings_isSet = true;
}

bool OAIUpdateNodePoolRequest::is_upgrade_settings_Set() const{
    return m_upgrade_settings_isSet;
}

bool OAIUpdateNodePoolRequest::is_upgrade_settings_Valid() const{
    return m_upgrade_settings_isValid;
}

OAIWindowsNodeConfig OAIUpdateNodePoolRequest::getWindowsNodeConfig() const {
    return m_windows_node_config;
}
void OAIUpdateNodePoolRequest::setWindowsNodeConfig(const OAIWindowsNodeConfig &windows_node_config) {
    m_windows_node_config = windows_node_config;
    m_windows_node_config_isSet = true;
}

bool OAIUpdateNodePoolRequest::is_windows_node_config_Set() const{
    return m_windows_node_config_isSet;
}

bool OAIUpdateNodePoolRequest::is_windows_node_config_Valid() const{
    return m_windows_node_config_isValid;
}

OAIWorkloadMetadataConfig OAIUpdateNodePoolRequest::getWorkloadMetadataConfig() const {
    return m_workload_metadata_config;
}
void OAIUpdateNodePoolRequest::setWorkloadMetadataConfig(const OAIWorkloadMetadataConfig &workload_metadata_config) {
    m_workload_metadata_config = workload_metadata_config;
    m_workload_metadata_config_isSet = true;
}

bool OAIUpdateNodePoolRequest::is_workload_metadata_config_Set() const{
    return m_workload_metadata_config_isSet;
}

bool OAIUpdateNodePoolRequest::is_workload_metadata_config_Valid() const{
    return m_workload_metadata_config_isValid;
}

QString OAIUpdateNodePoolRequest::getZone() const {
    return m_zone;
}
void OAIUpdateNodePoolRequest::setZone(const QString &zone) {
    m_zone = zone;
    m_zone_isSet = true;
}

bool OAIUpdateNodePoolRequest::is_zone_Set() const{
    return m_zone_isSet;
}

bool OAIUpdateNodePoolRequest::is_zone_Valid() const{
    return m_zone_isValid;
}

bool OAIUpdateNodePoolRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidential_nodes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_size_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fast_socket.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcfs_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gvnic.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kubelet_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_linux_node_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_logging_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_network_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_pool_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queued_provisioning.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_manager_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_taints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_windows_node_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workload_metadata_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNodePoolRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
