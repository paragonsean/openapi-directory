/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutopilotCompatibilityIssue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutopilotCompatibilityIssue::OAIAutopilotCompatibilityIssue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutopilotCompatibilityIssue::OAIAutopilotCompatibilityIssue() {
    this->initializeModel();
}

OAIAutopilotCompatibilityIssue::~OAIAutopilotCompatibilityIssue() {}

void OAIAutopilotCompatibilityIssue::initializeModel() {

    m_constraint_type_isSet = false;
    m_constraint_type_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_documentation_url_isSet = false;
    m_documentation_url_isValid = false;

    m_incompatibility_type_isSet = false;
    m_incompatibility_type_isValid = false;

    m_last_observation_isSet = false;
    m_last_observation_isValid = false;

    m_subjects_isSet = false;
    m_subjects_isValid = false;
}

void OAIAutopilotCompatibilityIssue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutopilotCompatibilityIssue::fromJsonObject(QJsonObject json) {

    m_constraint_type_isValid = ::OpenAPI::fromJsonValue(m_constraint_type, json[QString("constraintType")]);
    m_constraint_type_isSet = !json[QString("constraintType")].isNull() && m_constraint_type_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_documentation_url_isValid = ::OpenAPI::fromJsonValue(m_documentation_url, json[QString("documentationUrl")]);
    m_documentation_url_isSet = !json[QString("documentationUrl")].isNull() && m_documentation_url_isValid;

    m_incompatibility_type_isValid = ::OpenAPI::fromJsonValue(m_incompatibility_type, json[QString("incompatibilityType")]);
    m_incompatibility_type_isSet = !json[QString("incompatibilityType")].isNull() && m_incompatibility_type_isValid;

    m_last_observation_isValid = ::OpenAPI::fromJsonValue(m_last_observation, json[QString("lastObservation")]);
    m_last_observation_isSet = !json[QString("lastObservation")].isNull() && m_last_observation_isValid;

    m_subjects_isValid = ::OpenAPI::fromJsonValue(m_subjects, json[QString("subjects")]);
    m_subjects_isSet = !json[QString("subjects")].isNull() && m_subjects_isValid;
}

QString OAIAutopilotCompatibilityIssue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutopilotCompatibilityIssue::asJsonObject() const {
    QJsonObject obj;
    if (m_constraint_type_isSet) {
        obj.insert(QString("constraintType"), ::OpenAPI::toJsonValue(m_constraint_type));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_documentation_url_isSet) {
        obj.insert(QString("documentationUrl"), ::OpenAPI::toJsonValue(m_documentation_url));
    }
    if (m_incompatibility_type_isSet) {
        obj.insert(QString("incompatibilityType"), ::OpenAPI::toJsonValue(m_incompatibility_type));
    }
    if (m_last_observation_isSet) {
        obj.insert(QString("lastObservation"), ::OpenAPI::toJsonValue(m_last_observation));
    }
    if (m_subjects.size() > 0) {
        obj.insert(QString("subjects"), ::OpenAPI::toJsonValue(m_subjects));
    }
    return obj;
}

QString OAIAutopilotCompatibilityIssue::getConstraintType() const {
    return m_constraint_type;
}
void OAIAutopilotCompatibilityIssue::setConstraintType(const QString &constraint_type) {
    m_constraint_type = constraint_type;
    m_constraint_type_isSet = true;
}

bool OAIAutopilotCompatibilityIssue::is_constraint_type_Set() const{
    return m_constraint_type_isSet;
}

bool OAIAutopilotCompatibilityIssue::is_constraint_type_Valid() const{
    return m_constraint_type_isValid;
}

QString OAIAutopilotCompatibilityIssue::getDescription() const {
    return m_description;
}
void OAIAutopilotCompatibilityIssue::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAutopilotCompatibilityIssue::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAutopilotCompatibilityIssue::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAutopilotCompatibilityIssue::getDocumentationUrl() const {
    return m_documentation_url;
}
void OAIAutopilotCompatibilityIssue::setDocumentationUrl(const QString &documentation_url) {
    m_documentation_url = documentation_url;
    m_documentation_url_isSet = true;
}

bool OAIAutopilotCompatibilityIssue::is_documentation_url_Set() const{
    return m_documentation_url_isSet;
}

bool OAIAutopilotCompatibilityIssue::is_documentation_url_Valid() const{
    return m_documentation_url_isValid;
}

QString OAIAutopilotCompatibilityIssue::getIncompatibilityType() const {
    return m_incompatibility_type;
}
void OAIAutopilotCompatibilityIssue::setIncompatibilityType(const QString &incompatibility_type) {
    m_incompatibility_type = incompatibility_type;
    m_incompatibility_type_isSet = true;
}

bool OAIAutopilotCompatibilityIssue::is_incompatibility_type_Set() const{
    return m_incompatibility_type_isSet;
}

bool OAIAutopilotCompatibilityIssue::is_incompatibility_type_Valid() const{
    return m_incompatibility_type_isValid;
}

QString OAIAutopilotCompatibilityIssue::getLastObservation() const {
    return m_last_observation;
}
void OAIAutopilotCompatibilityIssue::setLastObservation(const QString &last_observation) {
    m_last_observation = last_observation;
    m_last_observation_isSet = true;
}

bool OAIAutopilotCompatibilityIssue::is_last_observation_Set() const{
    return m_last_observation_isSet;
}

bool OAIAutopilotCompatibilityIssue::is_last_observation_Valid() const{
    return m_last_observation_isValid;
}

QList<QString> OAIAutopilotCompatibilityIssue::getSubjects() const {
    return m_subjects;
}
void OAIAutopilotCompatibilityIssue::setSubjects(const QList<QString> &subjects) {
    m_subjects = subjects;
    m_subjects_isSet = true;
}

bool OAIAutopilotCompatibilityIssue::is_subjects_Set() const{
    return m_subjects_isSet;
}

bool OAIAutopilotCompatibilityIssue::is_subjects_Valid() const{
    return m_subjects_isValid;
}

bool OAIAutopilotCompatibilityIssue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_constraint_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_documentation_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_incompatibility_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_observation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subjects.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutopilotCompatibilityIssue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
