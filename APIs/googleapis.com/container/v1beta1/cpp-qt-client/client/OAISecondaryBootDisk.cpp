/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISecondaryBootDisk.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISecondaryBootDisk::OAISecondaryBootDisk(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISecondaryBootDisk::OAISecondaryBootDisk() {
    this->initializeModel();
}

OAISecondaryBootDisk::~OAISecondaryBootDisk() {}

void OAISecondaryBootDisk::initializeModel() {

    m_disk_image_isSet = false;
    m_disk_image_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;
}

void OAISecondaryBootDisk::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISecondaryBootDisk::fromJsonObject(QJsonObject json) {

    m_disk_image_isValid = ::OpenAPI::fromJsonValue(m_disk_image, json[QString("diskImage")]);
    m_disk_image_isSet = !json[QString("diskImage")].isNull() && m_disk_image_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;
}

QString OAISecondaryBootDisk::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISecondaryBootDisk::asJsonObject() const {
    QJsonObject obj;
    if (m_disk_image_isSet) {
        obj.insert(QString("diskImage"), ::OpenAPI::toJsonValue(m_disk_image));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    return obj;
}

QString OAISecondaryBootDisk::getDiskImage() const {
    return m_disk_image;
}
void OAISecondaryBootDisk::setDiskImage(const QString &disk_image) {
    m_disk_image = disk_image;
    m_disk_image_isSet = true;
}

bool OAISecondaryBootDisk::is_disk_image_Set() const{
    return m_disk_image_isSet;
}

bool OAISecondaryBootDisk::is_disk_image_Valid() const{
    return m_disk_image_isValid;
}

QString OAISecondaryBootDisk::getMode() const {
    return m_mode;
}
void OAISecondaryBootDisk::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAISecondaryBootDisk::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAISecondaryBootDisk::is_mode_Valid() const{
    return m_mode_isValid;
}

bool OAISecondaryBootDisk::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disk_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISecondaryBootDisk::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
