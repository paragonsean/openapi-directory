/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetOpenIDConfigResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetOpenIDConfigResponse::OAIGetOpenIDConfigResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetOpenIDConfigResponse::OAIGetOpenIDConfigResponse() {
    this->initializeModel();
}

OAIGetOpenIDConfigResponse::~OAIGetOpenIDConfigResponse() {}

void OAIGetOpenIDConfigResponse::initializeModel() {

    m_cache_header_isSet = false;
    m_cache_header_isValid = false;

    m_claims_supported_isSet = false;
    m_claims_supported_isValid = false;

    m_grant_types_isSet = false;
    m_grant_types_isValid = false;

    m_id_token_signing_alg_values_supported_isSet = false;
    m_id_token_signing_alg_values_supported_isValid = false;

    m_issuer_isSet = false;
    m_issuer_isValid = false;

    m_jwks_uri_isSet = false;
    m_jwks_uri_isValid = false;

    m_response_types_supported_isSet = false;
    m_response_types_supported_isValid = false;

    m_subject_types_supported_isSet = false;
    m_subject_types_supported_isValid = false;
}

void OAIGetOpenIDConfigResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetOpenIDConfigResponse::fromJsonObject(QJsonObject json) {

    m_cache_header_isValid = ::OpenAPI::fromJsonValue(m_cache_header, json[QString("cacheHeader")]);
    m_cache_header_isSet = !json[QString("cacheHeader")].isNull() && m_cache_header_isValid;

    m_claims_supported_isValid = ::OpenAPI::fromJsonValue(m_claims_supported, json[QString("claims_supported")]);
    m_claims_supported_isSet = !json[QString("claims_supported")].isNull() && m_claims_supported_isValid;

    m_grant_types_isValid = ::OpenAPI::fromJsonValue(m_grant_types, json[QString("grant_types")]);
    m_grant_types_isSet = !json[QString("grant_types")].isNull() && m_grant_types_isValid;

    m_id_token_signing_alg_values_supported_isValid = ::OpenAPI::fromJsonValue(m_id_token_signing_alg_values_supported, json[QString("id_token_signing_alg_values_supported")]);
    m_id_token_signing_alg_values_supported_isSet = !json[QString("id_token_signing_alg_values_supported")].isNull() && m_id_token_signing_alg_values_supported_isValid;

    m_issuer_isValid = ::OpenAPI::fromJsonValue(m_issuer, json[QString("issuer")]);
    m_issuer_isSet = !json[QString("issuer")].isNull() && m_issuer_isValid;

    m_jwks_uri_isValid = ::OpenAPI::fromJsonValue(m_jwks_uri, json[QString("jwks_uri")]);
    m_jwks_uri_isSet = !json[QString("jwks_uri")].isNull() && m_jwks_uri_isValid;

    m_response_types_supported_isValid = ::OpenAPI::fromJsonValue(m_response_types_supported, json[QString("response_types_supported")]);
    m_response_types_supported_isSet = !json[QString("response_types_supported")].isNull() && m_response_types_supported_isValid;

    m_subject_types_supported_isValid = ::OpenAPI::fromJsonValue(m_subject_types_supported, json[QString("subject_types_supported")]);
    m_subject_types_supported_isSet = !json[QString("subject_types_supported")].isNull() && m_subject_types_supported_isValid;
}

QString OAIGetOpenIDConfigResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetOpenIDConfigResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_cache_header.isSet()) {
        obj.insert(QString("cacheHeader"), ::OpenAPI::toJsonValue(m_cache_header));
    }
    if (m_claims_supported.size() > 0) {
        obj.insert(QString("claims_supported"), ::OpenAPI::toJsonValue(m_claims_supported));
    }
    if (m_grant_types.size() > 0) {
        obj.insert(QString("grant_types"), ::OpenAPI::toJsonValue(m_grant_types));
    }
    if (m_id_token_signing_alg_values_supported.size() > 0) {
        obj.insert(QString("id_token_signing_alg_values_supported"), ::OpenAPI::toJsonValue(m_id_token_signing_alg_values_supported));
    }
    if (m_issuer_isSet) {
        obj.insert(QString("issuer"), ::OpenAPI::toJsonValue(m_issuer));
    }
    if (m_jwks_uri_isSet) {
        obj.insert(QString("jwks_uri"), ::OpenAPI::toJsonValue(m_jwks_uri));
    }
    if (m_response_types_supported.size() > 0) {
        obj.insert(QString("response_types_supported"), ::OpenAPI::toJsonValue(m_response_types_supported));
    }
    if (m_subject_types_supported.size() > 0) {
        obj.insert(QString("subject_types_supported"), ::OpenAPI::toJsonValue(m_subject_types_supported));
    }
    return obj;
}

OAIHttpCacheControlResponseHeader OAIGetOpenIDConfigResponse::getCacheHeader() const {
    return m_cache_header;
}
void OAIGetOpenIDConfigResponse::setCacheHeader(const OAIHttpCacheControlResponseHeader &cache_header) {
    m_cache_header = cache_header;
    m_cache_header_isSet = true;
}

bool OAIGetOpenIDConfigResponse::is_cache_header_Set() const{
    return m_cache_header_isSet;
}

bool OAIGetOpenIDConfigResponse::is_cache_header_Valid() const{
    return m_cache_header_isValid;
}

QList<QString> OAIGetOpenIDConfigResponse::getClaimsSupported() const {
    return m_claims_supported;
}
void OAIGetOpenIDConfigResponse::setClaimsSupported(const QList<QString> &claims_supported) {
    m_claims_supported = claims_supported;
    m_claims_supported_isSet = true;
}

bool OAIGetOpenIDConfigResponse::is_claims_supported_Set() const{
    return m_claims_supported_isSet;
}

bool OAIGetOpenIDConfigResponse::is_claims_supported_Valid() const{
    return m_claims_supported_isValid;
}

QList<QString> OAIGetOpenIDConfigResponse::getGrantTypes() const {
    return m_grant_types;
}
void OAIGetOpenIDConfigResponse::setGrantTypes(const QList<QString> &grant_types) {
    m_grant_types = grant_types;
    m_grant_types_isSet = true;
}

bool OAIGetOpenIDConfigResponse::is_grant_types_Set() const{
    return m_grant_types_isSet;
}

bool OAIGetOpenIDConfigResponse::is_grant_types_Valid() const{
    return m_grant_types_isValid;
}

QList<QString> OAIGetOpenIDConfigResponse::getIdTokenSigningAlgValuesSupported() const {
    return m_id_token_signing_alg_values_supported;
}
void OAIGetOpenIDConfigResponse::setIdTokenSigningAlgValuesSupported(const QList<QString> &id_token_signing_alg_values_supported) {
    m_id_token_signing_alg_values_supported = id_token_signing_alg_values_supported;
    m_id_token_signing_alg_values_supported_isSet = true;
}

bool OAIGetOpenIDConfigResponse::is_id_token_signing_alg_values_supported_Set() const{
    return m_id_token_signing_alg_values_supported_isSet;
}

bool OAIGetOpenIDConfigResponse::is_id_token_signing_alg_values_supported_Valid() const{
    return m_id_token_signing_alg_values_supported_isValid;
}

QString OAIGetOpenIDConfigResponse::getIssuer() const {
    return m_issuer;
}
void OAIGetOpenIDConfigResponse::setIssuer(const QString &issuer) {
    m_issuer = issuer;
    m_issuer_isSet = true;
}

bool OAIGetOpenIDConfigResponse::is_issuer_Set() const{
    return m_issuer_isSet;
}

bool OAIGetOpenIDConfigResponse::is_issuer_Valid() const{
    return m_issuer_isValid;
}

QString OAIGetOpenIDConfigResponse::getJwksUri() const {
    return m_jwks_uri;
}
void OAIGetOpenIDConfigResponse::setJwksUri(const QString &jwks_uri) {
    m_jwks_uri = jwks_uri;
    m_jwks_uri_isSet = true;
}

bool OAIGetOpenIDConfigResponse::is_jwks_uri_Set() const{
    return m_jwks_uri_isSet;
}

bool OAIGetOpenIDConfigResponse::is_jwks_uri_Valid() const{
    return m_jwks_uri_isValid;
}

QList<QString> OAIGetOpenIDConfigResponse::getResponseTypesSupported() const {
    return m_response_types_supported;
}
void OAIGetOpenIDConfigResponse::setResponseTypesSupported(const QList<QString> &response_types_supported) {
    m_response_types_supported = response_types_supported;
    m_response_types_supported_isSet = true;
}

bool OAIGetOpenIDConfigResponse::is_response_types_supported_Set() const{
    return m_response_types_supported_isSet;
}

bool OAIGetOpenIDConfigResponse::is_response_types_supported_Valid() const{
    return m_response_types_supported_isValid;
}

QList<QString> OAIGetOpenIDConfigResponse::getSubjectTypesSupported() const {
    return m_subject_types_supported;
}
void OAIGetOpenIDConfigResponse::setSubjectTypesSupported(const QList<QString> &subject_types_supported) {
    m_subject_types_supported = subject_types_supported;
    m_subject_types_supported_isSet = true;
}

bool OAIGetOpenIDConfigResponse::is_subject_types_supported_Set() const{
    return m_subject_types_supported_isSet;
}

bool OAIGetOpenIDConfigResponse::is_subject_types_supported_Valid() const{
    return m_subject_types_supported_isValid;
}

bool OAIGetOpenIDConfigResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cache_header.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_claims_supported.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_grant_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_token_signing_alg_values_supported.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jwks_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_types_supported.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_types_supported.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetOpenIDConfigResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
