/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOperation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOperation::OAIOperation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOperation::OAIOperation() {
    this->initializeModel();
}

OAIOperation::~OAIOperation() {}

void OAIOperation::initializeModel() {

    m_cluster_conditions_isSet = false;
    m_cluster_conditions_isValid = false;

    m_detail_isSet = false;
    m_detail_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_nodepool_conditions_isSet = false;
    m_nodepool_conditions_isValid = false;

    m_operation_type_isSet = false;
    m_operation_type_isValid = false;

    m_progress_isSet = false;
    m_progress_isValid = false;

    m_self_link_isSet = false;
    m_self_link_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_target_link_isSet = false;
    m_target_link_isValid = false;

    m_zone_isSet = false;
    m_zone_isValid = false;
}

void OAIOperation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOperation::fromJsonObject(QJsonObject json) {

    m_cluster_conditions_isValid = ::OpenAPI::fromJsonValue(m_cluster_conditions, json[QString("clusterConditions")]);
    m_cluster_conditions_isSet = !json[QString("clusterConditions")].isNull() && m_cluster_conditions_isValid;

    m_detail_isValid = ::OpenAPI::fromJsonValue(m_detail, json[QString("detail")]);
    m_detail_isSet = !json[QString("detail")].isNull() && m_detail_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_nodepool_conditions_isValid = ::OpenAPI::fromJsonValue(m_nodepool_conditions, json[QString("nodepoolConditions")]);
    m_nodepool_conditions_isSet = !json[QString("nodepoolConditions")].isNull() && m_nodepool_conditions_isValid;

    m_operation_type_isValid = ::OpenAPI::fromJsonValue(m_operation_type, json[QString("operationType")]);
    m_operation_type_isSet = !json[QString("operationType")].isNull() && m_operation_type_isValid;

    m_progress_isValid = ::OpenAPI::fromJsonValue(m_progress, json[QString("progress")]);
    m_progress_isSet = !json[QString("progress")].isNull() && m_progress_isValid;

    m_self_link_isValid = ::OpenAPI::fromJsonValue(m_self_link, json[QString("selfLink")]);
    m_self_link_isSet = !json[QString("selfLink")].isNull() && m_self_link_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("statusMessage")]);
    m_status_message_isSet = !json[QString("statusMessage")].isNull() && m_status_message_isValid;

    m_target_link_isValid = ::OpenAPI::fromJsonValue(m_target_link, json[QString("targetLink")]);
    m_target_link_isSet = !json[QString("targetLink")].isNull() && m_target_link_isValid;

    m_zone_isValid = ::OpenAPI::fromJsonValue(m_zone, json[QString("zone")]);
    m_zone_isSet = !json[QString("zone")].isNull() && m_zone_isValid;
}

QString OAIOperation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOperation::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_conditions.size() > 0) {
        obj.insert(QString("clusterConditions"), ::OpenAPI::toJsonValue(m_cluster_conditions));
    }
    if (m_detail_isSet) {
        obj.insert(QString("detail"), ::OpenAPI::toJsonValue(m_detail));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_nodepool_conditions.size() > 0) {
        obj.insert(QString("nodepoolConditions"), ::OpenAPI::toJsonValue(m_nodepool_conditions));
    }
    if (m_operation_type_isSet) {
        obj.insert(QString("operationType"), ::OpenAPI::toJsonValue(m_operation_type));
    }
    if (m_progress.isSet()) {
        obj.insert(QString("progress"), ::OpenAPI::toJsonValue(m_progress));
    }
    if (m_self_link_isSet) {
        obj.insert(QString("selfLink"), ::OpenAPI::toJsonValue(m_self_link));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("statusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_target_link_isSet) {
        obj.insert(QString("targetLink"), ::OpenAPI::toJsonValue(m_target_link));
    }
    if (m_zone_isSet) {
        obj.insert(QString("zone"), ::OpenAPI::toJsonValue(m_zone));
    }
    return obj;
}

QList<OAIStatusCondition> OAIOperation::getClusterConditions() const {
    return m_cluster_conditions;
}
void OAIOperation::setClusterConditions(const QList<OAIStatusCondition> &cluster_conditions) {
    m_cluster_conditions = cluster_conditions;
    m_cluster_conditions_isSet = true;
}

bool OAIOperation::is_cluster_conditions_Set() const{
    return m_cluster_conditions_isSet;
}

bool OAIOperation::is_cluster_conditions_Valid() const{
    return m_cluster_conditions_isValid;
}

QString OAIOperation::getDetail() const {
    return m_detail;
}
void OAIOperation::setDetail(const QString &detail) {
    m_detail = detail;
    m_detail_isSet = true;
}

bool OAIOperation::is_detail_Set() const{
    return m_detail_isSet;
}

bool OAIOperation::is_detail_Valid() const{
    return m_detail_isValid;
}

QString OAIOperation::getEndTime() const {
    return m_end_time;
}
void OAIOperation::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIOperation::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIOperation::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAIStatus OAIOperation::getError() const {
    return m_error;
}
void OAIOperation::setError(const OAIStatus &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIOperation::is_error_Set() const{
    return m_error_isSet;
}

bool OAIOperation::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIOperation::getLocation() const {
    return m_location;
}
void OAIOperation::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIOperation::is_location_Set() const{
    return m_location_isSet;
}

bool OAIOperation::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIOperation::getName() const {
    return m_name;
}
void OAIOperation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOperation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOperation::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIStatusCondition> OAIOperation::getNodepoolConditions() const {
    return m_nodepool_conditions;
}
void OAIOperation::setNodepoolConditions(const QList<OAIStatusCondition> &nodepool_conditions) {
    m_nodepool_conditions = nodepool_conditions;
    m_nodepool_conditions_isSet = true;
}

bool OAIOperation::is_nodepool_conditions_Set() const{
    return m_nodepool_conditions_isSet;
}

bool OAIOperation::is_nodepool_conditions_Valid() const{
    return m_nodepool_conditions_isValid;
}

QString OAIOperation::getOperationType() const {
    return m_operation_type;
}
void OAIOperation::setOperationType(const QString &operation_type) {
    m_operation_type = operation_type;
    m_operation_type_isSet = true;
}

bool OAIOperation::is_operation_type_Set() const{
    return m_operation_type_isSet;
}

bool OAIOperation::is_operation_type_Valid() const{
    return m_operation_type_isValid;
}

OAIOperationProgress OAIOperation::getProgress() const {
    return m_progress;
}
void OAIOperation::setProgress(const OAIOperationProgress &progress) {
    m_progress = progress;
    m_progress_isSet = true;
}

bool OAIOperation::is_progress_Set() const{
    return m_progress_isSet;
}

bool OAIOperation::is_progress_Valid() const{
    return m_progress_isValid;
}

QString OAIOperation::getSelfLink() const {
    return m_self_link;
}
void OAIOperation::setSelfLink(const QString &self_link) {
    m_self_link = self_link;
    m_self_link_isSet = true;
}

bool OAIOperation::is_self_link_Set() const{
    return m_self_link_isSet;
}

bool OAIOperation::is_self_link_Valid() const{
    return m_self_link_isValid;
}

QString OAIOperation::getStartTime() const {
    return m_start_time;
}
void OAIOperation::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIOperation::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIOperation::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIOperation::getStatus() const {
    return m_status;
}
void OAIOperation::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIOperation::is_status_Set() const{
    return m_status_isSet;
}

bool OAIOperation::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIOperation::getStatusMessage() const {
    return m_status_message;
}
void OAIOperation::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIOperation::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIOperation::is_status_message_Valid() const{
    return m_status_message_isValid;
}

QString OAIOperation::getTargetLink() const {
    return m_target_link;
}
void OAIOperation::setTargetLink(const QString &target_link) {
    m_target_link = target_link;
    m_target_link_isSet = true;
}

bool OAIOperation::is_target_link_Set() const{
    return m_target_link_isSet;
}

bool OAIOperation::is_target_link_Valid() const{
    return m_target_link_isValid;
}

QString OAIOperation::getZone() const {
    return m_zone;
}
void OAIOperation::setZone(const QString &zone) {
    m_zone = zone;
    m_zone_isSet = true;
}

bool OAIOperation::is_zone_Set() const{
    return m_zone_isSet;
}

bool OAIOperation::is_zone_Valid() const{
    return m_zone_isValid;
}

bool OAIOperation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nodepool_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOperation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
