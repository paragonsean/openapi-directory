/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpgradeEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpgradeEvent::OAIUpgradeEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpgradeEvent::OAIUpgradeEvent() {
    this->initializeModel();
}

OAIUpgradeEvent::~OAIUpgradeEvent() {}

void OAIUpgradeEvent::initializeModel() {

    m_current_version_isSet = false;
    m_current_version_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_operation_start_time_isSet = false;
    m_operation_start_time_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_target_version_isSet = false;
    m_target_version_isValid = false;
}

void OAIUpgradeEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpgradeEvent::fromJsonObject(QJsonObject json) {

    m_current_version_isValid = ::OpenAPI::fromJsonValue(m_current_version, json[QString("currentVersion")]);
    m_current_version_isSet = !json[QString("currentVersion")].isNull() && m_current_version_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_operation_start_time_isValid = ::OpenAPI::fromJsonValue(m_operation_start_time, json[QString("operationStartTime")]);
    m_operation_start_time_isSet = !json[QString("operationStartTime")].isNull() && m_operation_start_time_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resourceType")]);
    m_resource_type_isSet = !json[QString("resourceType")].isNull() && m_resource_type_isValid;

    m_target_version_isValid = ::OpenAPI::fromJsonValue(m_target_version, json[QString("targetVersion")]);
    m_target_version_isSet = !json[QString("targetVersion")].isNull() && m_target_version_isValid;
}

QString OAIUpgradeEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpgradeEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_current_version_isSet) {
        obj.insert(QString("currentVersion"), ::OpenAPI::toJsonValue(m_current_version));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_operation_start_time_isSet) {
        obj.insert(QString("operationStartTime"), ::OpenAPI::toJsonValue(m_operation_start_time));
    }
    if (m_resource_isSet) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_target_version_isSet) {
        obj.insert(QString("targetVersion"), ::OpenAPI::toJsonValue(m_target_version));
    }
    return obj;
}

QString OAIUpgradeEvent::getCurrentVersion() const {
    return m_current_version;
}
void OAIUpgradeEvent::setCurrentVersion(const QString &current_version) {
    m_current_version = current_version;
    m_current_version_isSet = true;
}

bool OAIUpgradeEvent::is_current_version_Set() const{
    return m_current_version_isSet;
}

bool OAIUpgradeEvent::is_current_version_Valid() const{
    return m_current_version_isValid;
}

QString OAIUpgradeEvent::getOperation() const {
    return m_operation;
}
void OAIUpgradeEvent::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAIUpgradeEvent::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAIUpgradeEvent::is_operation_Valid() const{
    return m_operation_isValid;
}

QString OAIUpgradeEvent::getOperationStartTime() const {
    return m_operation_start_time;
}
void OAIUpgradeEvent::setOperationStartTime(const QString &operation_start_time) {
    m_operation_start_time = operation_start_time;
    m_operation_start_time_isSet = true;
}

bool OAIUpgradeEvent::is_operation_start_time_Set() const{
    return m_operation_start_time_isSet;
}

bool OAIUpgradeEvent::is_operation_start_time_Valid() const{
    return m_operation_start_time_isValid;
}

QString OAIUpgradeEvent::getResource() const {
    return m_resource;
}
void OAIUpgradeEvent::setResource(const QString &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIUpgradeEvent::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIUpgradeEvent::is_resource_Valid() const{
    return m_resource_isValid;
}

QString OAIUpgradeEvent::getResourceType() const {
    return m_resource_type;
}
void OAIUpgradeEvent::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIUpgradeEvent::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIUpgradeEvent::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAIUpgradeEvent::getTargetVersion() const {
    return m_target_version;
}
void OAIUpgradeEvent::setTargetVersion(const QString &target_version) {
    m_target_version = target_version;
    m_target_version_isSet = true;
}

bool OAIUpgradeEvent::is_target_version_Set() const{
    return m_target_version_isSet;
}

bool OAIUpgradeEvent::is_target_version_Valid() const{
    return m_target_version_isValid;
}

bool OAIUpgradeEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpgradeEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
