/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPrivateClusterConfig.h
 *
 * Configuration options for private clusters.
 */

#ifndef OAIPrivateClusterConfig_H
#define OAIPrivateClusterConfig_H

#include <QJsonObject>

#include "OAIPrivateClusterMasterGlobalAccessConfig.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPrivateClusterMasterGlobalAccessConfig;

class OAIPrivateClusterConfig : public OAIObject {
public:
    OAIPrivateClusterConfig();
    OAIPrivateClusterConfig(QString json);
    ~OAIPrivateClusterConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isEnablePrivateEndpoint() const;
    void setEnablePrivateEndpoint(const bool &enable_private_endpoint);
    bool is_enable_private_endpoint_Set() const;
    bool is_enable_private_endpoint_Valid() const;

    bool isEnablePrivateNodes() const;
    void setEnablePrivateNodes(const bool &enable_private_nodes);
    bool is_enable_private_nodes_Set() const;
    bool is_enable_private_nodes_Valid() const;

    OAIPrivateClusterMasterGlobalAccessConfig getMasterGlobalAccessConfig() const;
    void setMasterGlobalAccessConfig(const OAIPrivateClusterMasterGlobalAccessConfig &master_global_access_config);
    bool is_master_global_access_config_Set() const;
    bool is_master_global_access_config_Valid() const;

    QString getMasterIpv4CidrBlock() const;
    void setMasterIpv4CidrBlock(const QString &master_ipv4_cidr_block);
    bool is_master_ipv4_cidr_block_Set() const;
    bool is_master_ipv4_cidr_block_Valid() const;

    QString getPeeringName() const;
    void setPeeringName(const QString &peering_name);
    bool is_peering_name_Set() const;
    bool is_peering_name_Valid() const;

    QString getPrivateEndpoint() const;
    void setPrivateEndpoint(const QString &private_endpoint);
    bool is_private_endpoint_Set() const;
    bool is_private_endpoint_Valid() const;

    QString getPrivateEndpointSubnetwork() const;
    void setPrivateEndpointSubnetwork(const QString &private_endpoint_subnetwork);
    bool is_private_endpoint_subnetwork_Set() const;
    bool is_private_endpoint_subnetwork_Valid() const;

    QString getPublicEndpoint() const;
    void setPublicEndpoint(const QString &public_endpoint);
    bool is_public_endpoint_Set() const;
    bool is_public_endpoint_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_enable_private_endpoint;
    bool m_enable_private_endpoint_isSet;
    bool m_enable_private_endpoint_isValid;

    bool m_enable_private_nodes;
    bool m_enable_private_nodes_isSet;
    bool m_enable_private_nodes_isValid;

    OAIPrivateClusterMasterGlobalAccessConfig m_master_global_access_config;
    bool m_master_global_access_config_isSet;
    bool m_master_global_access_config_isValid;

    QString m_master_ipv4_cidr_block;
    bool m_master_ipv4_cidr_block_isSet;
    bool m_master_ipv4_cidr_block_isValid;

    QString m_peering_name;
    bool m_peering_name_isSet;
    bool m_peering_name_isValid;

    QString m_private_endpoint;
    bool m_private_endpoint_isSet;
    bool m_private_endpoint_isValid;

    QString m_private_endpoint_subnetwork;
    bool m_private_endpoint_subnetwork_isSet;
    bool m_private_endpoint_subnetwork_isValid;

    QString m_public_endpoint;
    bool m_public_endpoint_isSet;
    bool m_public_endpoint_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPrivateClusterConfig)

#endif // OAIPrivateClusterConfig_H
