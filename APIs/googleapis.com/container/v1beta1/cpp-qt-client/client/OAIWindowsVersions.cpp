/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWindowsVersions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWindowsVersions::OAIWindowsVersions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWindowsVersions::OAIWindowsVersions() {
    this->initializeModel();
}

OAIWindowsVersions::~OAIWindowsVersions() {}

void OAIWindowsVersions::initializeModel() {

    m_windows_versions_isSet = false;
    m_windows_versions_isValid = false;
}

void OAIWindowsVersions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWindowsVersions::fromJsonObject(QJsonObject json) {

    m_windows_versions_isValid = ::OpenAPI::fromJsonValue(m_windows_versions, json[QString("windowsVersions")]);
    m_windows_versions_isSet = !json[QString("windowsVersions")].isNull() && m_windows_versions_isValid;
}

QString OAIWindowsVersions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWindowsVersions::asJsonObject() const {
    QJsonObject obj;
    if (m_windows_versions.size() > 0) {
        obj.insert(QString("windowsVersions"), ::OpenAPI::toJsonValue(m_windows_versions));
    }
    return obj;
}

QList<OAIWindowsVersion> OAIWindowsVersions::getWindowsVersions() const {
    return m_windows_versions;
}
void OAIWindowsVersions::setWindowsVersions(const QList<OAIWindowsVersion> &windows_versions) {
    m_windows_versions = windows_versions;
    m_windows_versions_isSet = true;
}

bool OAIWindowsVersions::is_windows_versions_Set() const{
    return m_windows_versions_isSet;
}

bool OAIWindowsVersions::is_windows_versions_Valid() const{
    return m_windows_versions_isValid;
}

bool OAIWindowsVersions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_windows_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWindowsVersions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
