/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINodeConfig.h
 *
 * Parameters that describe the nodes in a cluster. GKE Autopilot clusters do not recognize parameters in &#x60;NodeConfig&#x60;. Use AutoprovisioningNodePoolDefaults instead.
 */

#ifndef OAINodeConfig_H
#define OAINodeConfig_H

#include <QJsonObject>

#include "OAIAcceleratorConfig.h"
#include "OAIAdvancedMachineFeatures.h"
#include "OAIConfidentialNodes.h"
#include "OAIEphemeralStorageConfig.h"
#include "OAIEphemeralStorageLocalSsdConfig.h"
#include "OAIFastSocket.h"
#include "OAIGcfsConfig.h"
#include "OAIHostMaintenancePolicy.h"
#include "OAILinuxNodeConfig.h"
#include "OAILocalNvmeSsdBlockConfig.h"
#include "OAINodeKubeletConfig.h"
#include "OAINodePoolLoggingConfig.h"
#include "OAINodeTaint.h"
#include "OAIReservationAffinity.h"
#include "OAIResourceManagerTags.h"
#include "OAISandboxConfig.h"
#include "OAISecondaryBootDisk.h"
#include "OAIShieldedInstanceConfig.h"
#include "OAISoleTenantConfig.h"
#include "OAIVirtualNIC.h"
#include "OAIWindowsNodeConfig.h"
#include "OAIWorkloadMetadataConfig.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAcceleratorConfig;
class OAIAdvancedMachineFeatures;
class OAIConfidentialNodes;
class OAIEphemeralStorageConfig;
class OAIEphemeralStorageLocalSsdConfig;
class OAIFastSocket;
class OAIGcfsConfig;
class OAIVirtualNIC;
class OAIHostMaintenancePolicy;
class OAINodeKubeletConfig;
class OAILinuxNodeConfig;
class OAILocalNvmeSsdBlockConfig;
class OAINodePoolLoggingConfig;
class OAIReservationAffinity;
class OAIResourceManagerTags;
class OAISandboxConfig;
class OAISecondaryBootDisk;
class OAIShieldedInstanceConfig;
class OAISoleTenantConfig;
class OAINodeTaint;
class OAIWindowsNodeConfig;
class OAIWorkloadMetadataConfig;

class OAINodeConfig : public OAIObject {
public:
    OAINodeConfig();
    OAINodeConfig(QString json);
    ~OAINodeConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIAcceleratorConfig> getAccelerators() const;
    void setAccelerators(const QList<OAIAcceleratorConfig> &accelerators);
    bool is_accelerators_Set() const;
    bool is_accelerators_Valid() const;

    OAIAdvancedMachineFeatures getAdvancedMachineFeatures() const;
    void setAdvancedMachineFeatures(const OAIAdvancedMachineFeatures &advanced_machine_features);
    bool is_advanced_machine_features_Set() const;
    bool is_advanced_machine_features_Valid() const;

    QString getBootDiskKmsKey() const;
    void setBootDiskKmsKey(const QString &boot_disk_kms_key);
    bool is_boot_disk_kms_key_Set() const;
    bool is_boot_disk_kms_key_Valid() const;

    OAIConfidentialNodes getConfidentialNodes() const;
    void setConfidentialNodes(const OAIConfidentialNodes &confidential_nodes);
    bool is_confidential_nodes_Set() const;
    bool is_confidential_nodes_Valid() const;

    qint32 getDiskSizeGb() const;
    void setDiskSizeGb(const qint32 &disk_size_gb);
    bool is_disk_size_gb_Set() const;
    bool is_disk_size_gb_Valid() const;

    QString getDiskType() const;
    void setDiskType(const QString &disk_type);
    bool is_disk_type_Set() const;
    bool is_disk_type_Valid() const;

    bool isEnableConfidentialStorage() const;
    void setEnableConfidentialStorage(const bool &enable_confidential_storage);
    bool is_enable_confidential_storage_Set() const;
    bool is_enable_confidential_storage_Valid() const;

    OAIEphemeralStorageConfig getEphemeralStorageConfig() const;
    void setEphemeralStorageConfig(const OAIEphemeralStorageConfig &ephemeral_storage_config);
    bool is_ephemeral_storage_config_Set() const;
    bool is_ephemeral_storage_config_Valid() const;

    OAIEphemeralStorageLocalSsdConfig getEphemeralStorageLocalSsdConfig() const;
    void setEphemeralStorageLocalSsdConfig(const OAIEphemeralStorageLocalSsdConfig &ephemeral_storage_local_ssd_config);
    bool is_ephemeral_storage_local_ssd_config_Set() const;
    bool is_ephemeral_storage_local_ssd_config_Valid() const;

    OAIFastSocket getFastSocket() const;
    void setFastSocket(const OAIFastSocket &fast_socket);
    bool is_fast_socket_Set() const;
    bool is_fast_socket_Valid() const;

    OAIGcfsConfig getGcfsConfig() const;
    void setGcfsConfig(const OAIGcfsConfig &gcfs_config);
    bool is_gcfs_config_Set() const;
    bool is_gcfs_config_Valid() const;

    OAIVirtualNIC getGvnic() const;
    void setGvnic(const OAIVirtualNIC &gvnic);
    bool is_gvnic_Set() const;
    bool is_gvnic_Valid() const;

    OAIHostMaintenancePolicy getHostMaintenancePolicy() const;
    void setHostMaintenancePolicy(const OAIHostMaintenancePolicy &host_maintenance_policy);
    bool is_host_maintenance_policy_Set() const;
    bool is_host_maintenance_policy_Valid() const;

    QString getImageType() const;
    void setImageType(const QString &image_type);
    bool is_image_type_Set() const;
    bool is_image_type_Valid() const;

    OAINodeKubeletConfig getKubeletConfig() const;
    void setKubeletConfig(const OAINodeKubeletConfig &kubelet_config);
    bool is_kubelet_config_Set() const;
    bool is_kubelet_config_Valid() const;

    QMap<QString, QString> getLabels() const;
    void setLabels(const QMap<QString, QString> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    OAILinuxNodeConfig getLinuxNodeConfig() const;
    void setLinuxNodeConfig(const OAILinuxNodeConfig &linux_node_config);
    bool is_linux_node_config_Set() const;
    bool is_linux_node_config_Valid() const;

    OAILocalNvmeSsdBlockConfig getLocalNvmeSsdBlockConfig() const;
    void setLocalNvmeSsdBlockConfig(const OAILocalNvmeSsdBlockConfig &local_nvme_ssd_block_config);
    bool is_local_nvme_ssd_block_config_Set() const;
    bool is_local_nvme_ssd_block_config_Valid() const;

    qint32 getLocalSsdCount() const;
    void setLocalSsdCount(const qint32 &local_ssd_count);
    bool is_local_ssd_count_Set() const;
    bool is_local_ssd_count_Valid() const;

    OAINodePoolLoggingConfig getLoggingConfig() const;
    void setLoggingConfig(const OAINodePoolLoggingConfig &logging_config);
    bool is_logging_config_Set() const;
    bool is_logging_config_Valid() const;

    QString getMachineType() const;
    void setMachineType(const QString &machine_type);
    bool is_machine_type_Set() const;
    bool is_machine_type_Valid() const;

    QMap<QString, QString> getMetadata() const;
    void setMetadata(const QMap<QString, QString> &metadata);
    bool is_metadata_Set() const;
    bool is_metadata_Valid() const;

    QString getMinCpuPlatform() const;
    void setMinCpuPlatform(const QString &min_cpu_platform);
    bool is_min_cpu_platform_Set() const;
    bool is_min_cpu_platform_Valid() const;

    QString getNodeGroup() const;
    void setNodeGroup(const QString &node_group);
    bool is_node_group_Set() const;
    bool is_node_group_Valid() const;

    QList<QString> getOauthScopes() const;
    void setOauthScopes(const QList<QString> &oauth_scopes);
    bool is_oauth_scopes_Set() const;
    bool is_oauth_scopes_Valid() const;

    bool isPreemptible() const;
    void setPreemptible(const bool &preemptible);
    bool is_preemptible_Set() const;
    bool is_preemptible_Valid() const;

    OAIReservationAffinity getReservationAffinity() const;
    void setReservationAffinity(const OAIReservationAffinity &reservation_affinity);
    bool is_reservation_affinity_Set() const;
    bool is_reservation_affinity_Valid() const;

    QMap<QString, QString> getResourceLabels() const;
    void setResourceLabels(const QMap<QString, QString> &resource_labels);
    bool is_resource_labels_Set() const;
    bool is_resource_labels_Valid() const;

    OAIResourceManagerTags getResourceManagerTags() const;
    void setResourceManagerTags(const OAIResourceManagerTags &resource_manager_tags);
    bool is_resource_manager_tags_Set() const;
    bool is_resource_manager_tags_Valid() const;

    OAISandboxConfig getSandboxConfig() const;
    void setSandboxConfig(const OAISandboxConfig &sandbox_config);
    bool is_sandbox_config_Set() const;
    bool is_sandbox_config_Valid() const;

    QList<OAISecondaryBootDisk> getSecondaryBootDisks() const;
    void setSecondaryBootDisks(const QList<OAISecondaryBootDisk> &secondary_boot_disks);
    bool is_secondary_boot_disks_Set() const;
    bool is_secondary_boot_disks_Valid() const;

    QString getServiceAccount() const;
    void setServiceAccount(const QString &service_account);
    bool is_service_account_Set() const;
    bool is_service_account_Valid() const;

    OAIShieldedInstanceConfig getShieldedInstanceConfig() const;
    void setShieldedInstanceConfig(const OAIShieldedInstanceConfig &shielded_instance_config);
    bool is_shielded_instance_config_Set() const;
    bool is_shielded_instance_config_Valid() const;

    OAISoleTenantConfig getSoleTenantConfig() const;
    void setSoleTenantConfig(const OAISoleTenantConfig &sole_tenant_config);
    bool is_sole_tenant_config_Set() const;
    bool is_sole_tenant_config_Valid() const;

    bool isSpot() const;
    void setSpot(const bool &spot);
    bool is_spot_Set() const;
    bool is_spot_Valid() const;

    QList<QString> getTags() const;
    void setTags(const QList<QString> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QList<OAINodeTaint> getTaints() const;
    void setTaints(const QList<OAINodeTaint> &taints);
    bool is_taints_Set() const;
    bool is_taints_Valid() const;

    OAIWindowsNodeConfig getWindowsNodeConfig() const;
    void setWindowsNodeConfig(const OAIWindowsNodeConfig &windows_node_config);
    bool is_windows_node_config_Set() const;
    bool is_windows_node_config_Valid() const;

    OAIWorkloadMetadataConfig getWorkloadMetadataConfig() const;
    void setWorkloadMetadataConfig(const OAIWorkloadMetadataConfig &workload_metadata_config);
    bool is_workload_metadata_config_Set() const;
    bool is_workload_metadata_config_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIAcceleratorConfig> m_accelerators;
    bool m_accelerators_isSet;
    bool m_accelerators_isValid;

    OAIAdvancedMachineFeatures m_advanced_machine_features;
    bool m_advanced_machine_features_isSet;
    bool m_advanced_machine_features_isValid;

    QString m_boot_disk_kms_key;
    bool m_boot_disk_kms_key_isSet;
    bool m_boot_disk_kms_key_isValid;

    OAIConfidentialNodes m_confidential_nodes;
    bool m_confidential_nodes_isSet;
    bool m_confidential_nodes_isValid;

    qint32 m_disk_size_gb;
    bool m_disk_size_gb_isSet;
    bool m_disk_size_gb_isValid;

    QString m_disk_type;
    bool m_disk_type_isSet;
    bool m_disk_type_isValid;

    bool m_enable_confidential_storage;
    bool m_enable_confidential_storage_isSet;
    bool m_enable_confidential_storage_isValid;

    OAIEphemeralStorageConfig m_ephemeral_storage_config;
    bool m_ephemeral_storage_config_isSet;
    bool m_ephemeral_storage_config_isValid;

    OAIEphemeralStorageLocalSsdConfig m_ephemeral_storage_local_ssd_config;
    bool m_ephemeral_storage_local_ssd_config_isSet;
    bool m_ephemeral_storage_local_ssd_config_isValid;

    OAIFastSocket m_fast_socket;
    bool m_fast_socket_isSet;
    bool m_fast_socket_isValid;

    OAIGcfsConfig m_gcfs_config;
    bool m_gcfs_config_isSet;
    bool m_gcfs_config_isValid;

    OAIVirtualNIC m_gvnic;
    bool m_gvnic_isSet;
    bool m_gvnic_isValid;

    OAIHostMaintenancePolicy m_host_maintenance_policy;
    bool m_host_maintenance_policy_isSet;
    bool m_host_maintenance_policy_isValid;

    QString m_image_type;
    bool m_image_type_isSet;
    bool m_image_type_isValid;

    OAINodeKubeletConfig m_kubelet_config;
    bool m_kubelet_config_isSet;
    bool m_kubelet_config_isValid;

    QMap<QString, QString> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    OAILinuxNodeConfig m_linux_node_config;
    bool m_linux_node_config_isSet;
    bool m_linux_node_config_isValid;

    OAILocalNvmeSsdBlockConfig m_local_nvme_ssd_block_config;
    bool m_local_nvme_ssd_block_config_isSet;
    bool m_local_nvme_ssd_block_config_isValid;

    qint32 m_local_ssd_count;
    bool m_local_ssd_count_isSet;
    bool m_local_ssd_count_isValid;

    OAINodePoolLoggingConfig m_logging_config;
    bool m_logging_config_isSet;
    bool m_logging_config_isValid;

    QString m_machine_type;
    bool m_machine_type_isSet;
    bool m_machine_type_isValid;

    QMap<QString, QString> m_metadata;
    bool m_metadata_isSet;
    bool m_metadata_isValid;

    QString m_min_cpu_platform;
    bool m_min_cpu_platform_isSet;
    bool m_min_cpu_platform_isValid;

    QString m_node_group;
    bool m_node_group_isSet;
    bool m_node_group_isValid;

    QList<QString> m_oauth_scopes;
    bool m_oauth_scopes_isSet;
    bool m_oauth_scopes_isValid;

    bool m_preemptible;
    bool m_preemptible_isSet;
    bool m_preemptible_isValid;

    OAIReservationAffinity m_reservation_affinity;
    bool m_reservation_affinity_isSet;
    bool m_reservation_affinity_isValid;

    QMap<QString, QString> m_resource_labels;
    bool m_resource_labels_isSet;
    bool m_resource_labels_isValid;

    OAIResourceManagerTags m_resource_manager_tags;
    bool m_resource_manager_tags_isSet;
    bool m_resource_manager_tags_isValid;

    OAISandboxConfig m_sandbox_config;
    bool m_sandbox_config_isSet;
    bool m_sandbox_config_isValid;

    QList<OAISecondaryBootDisk> m_secondary_boot_disks;
    bool m_secondary_boot_disks_isSet;
    bool m_secondary_boot_disks_isValid;

    QString m_service_account;
    bool m_service_account_isSet;
    bool m_service_account_isValid;

    OAIShieldedInstanceConfig m_shielded_instance_config;
    bool m_shielded_instance_config_isSet;
    bool m_shielded_instance_config_isValid;

    OAISoleTenantConfig m_sole_tenant_config;
    bool m_sole_tenant_config_isSet;
    bool m_sole_tenant_config_isValid;

    bool m_spot;
    bool m_spot_isSet;
    bool m_spot_isValid;

    QList<QString> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QList<OAINodeTaint> m_taints;
    bool m_taints_isSet;
    bool m_taints_isValid;

    OAIWindowsNodeConfig m_windows_node_config;
    bool m_windows_node_config_isSet;
    bool m_windows_node_config_isValid;

    OAIWorkloadMetadataConfig m_workload_metadata_config;
    bool m_workload_metadata_config_isSet;
    bool m_workload_metadata_config_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINodeConfig)

#endif // OAINodeConfig_H
