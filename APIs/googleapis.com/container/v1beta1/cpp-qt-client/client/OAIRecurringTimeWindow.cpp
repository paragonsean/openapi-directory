/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecurringTimeWindow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecurringTimeWindow::OAIRecurringTimeWindow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecurringTimeWindow::OAIRecurringTimeWindow() {
    this->initializeModel();
}

OAIRecurringTimeWindow::~OAIRecurringTimeWindow() {}

void OAIRecurringTimeWindow::initializeModel() {

    m_recurrence_isSet = false;
    m_recurrence_isValid = false;

    m_window_isSet = false;
    m_window_isValid = false;
}

void OAIRecurringTimeWindow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecurringTimeWindow::fromJsonObject(QJsonObject json) {

    m_recurrence_isValid = ::OpenAPI::fromJsonValue(m_recurrence, json[QString("recurrence")]);
    m_recurrence_isSet = !json[QString("recurrence")].isNull() && m_recurrence_isValid;

    m_window_isValid = ::OpenAPI::fromJsonValue(m_window, json[QString("window")]);
    m_window_isSet = !json[QString("window")].isNull() && m_window_isValid;
}

QString OAIRecurringTimeWindow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecurringTimeWindow::asJsonObject() const {
    QJsonObject obj;
    if (m_recurrence_isSet) {
        obj.insert(QString("recurrence"), ::OpenAPI::toJsonValue(m_recurrence));
    }
    if (m_window.isSet()) {
        obj.insert(QString("window"), ::OpenAPI::toJsonValue(m_window));
    }
    return obj;
}

QString OAIRecurringTimeWindow::getRecurrence() const {
    return m_recurrence;
}
void OAIRecurringTimeWindow::setRecurrence(const QString &recurrence) {
    m_recurrence = recurrence;
    m_recurrence_isSet = true;
}

bool OAIRecurringTimeWindow::is_recurrence_Set() const{
    return m_recurrence_isSet;
}

bool OAIRecurringTimeWindow::is_recurrence_Valid() const{
    return m_recurrence_isValid;
}

OAITimeWindow OAIRecurringTimeWindow::getWindow() const {
    return m_window;
}
void OAIRecurringTimeWindow::setWindow(const OAITimeWindow &window) {
    m_window = window;
    m_window_isSet = true;
}

bool OAIRecurringTimeWindow::is_window_Set() const{
    return m_window_isSet;
}

bool OAIRecurringTimeWindow::is_window_Valid() const{
    return m_window_isValid;
}

bool OAIRecurringTimeWindow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_recurrence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_window.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecurringTimeWindow::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
