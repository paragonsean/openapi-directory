/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWindowsVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWindowsVersion::OAIWindowsVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWindowsVersion::OAIWindowsVersion() {
    this->initializeModel();
}

OAIWindowsVersion::~OAIWindowsVersion() {}

void OAIWindowsVersion::initializeModel() {

    m_image_type_isSet = false;
    m_image_type_isValid = false;

    m_os_version_isSet = false;
    m_os_version_isValid = false;

    m_support_end_date_isSet = false;
    m_support_end_date_isValid = false;
}

void OAIWindowsVersion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWindowsVersion::fromJsonObject(QJsonObject json) {

    m_image_type_isValid = ::OpenAPI::fromJsonValue(m_image_type, json[QString("imageType")]);
    m_image_type_isSet = !json[QString("imageType")].isNull() && m_image_type_isValid;

    m_os_version_isValid = ::OpenAPI::fromJsonValue(m_os_version, json[QString("osVersion")]);
    m_os_version_isSet = !json[QString("osVersion")].isNull() && m_os_version_isValid;

    m_support_end_date_isValid = ::OpenAPI::fromJsonValue(m_support_end_date, json[QString("supportEndDate")]);
    m_support_end_date_isSet = !json[QString("supportEndDate")].isNull() && m_support_end_date_isValid;
}

QString OAIWindowsVersion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWindowsVersion::asJsonObject() const {
    QJsonObject obj;
    if (m_image_type_isSet) {
        obj.insert(QString("imageType"), ::OpenAPI::toJsonValue(m_image_type));
    }
    if (m_os_version_isSet) {
        obj.insert(QString("osVersion"), ::OpenAPI::toJsonValue(m_os_version));
    }
    if (m_support_end_date.isSet()) {
        obj.insert(QString("supportEndDate"), ::OpenAPI::toJsonValue(m_support_end_date));
    }
    return obj;
}

QString OAIWindowsVersion::getImageType() const {
    return m_image_type;
}
void OAIWindowsVersion::setImageType(const QString &image_type) {
    m_image_type = image_type;
    m_image_type_isSet = true;
}

bool OAIWindowsVersion::is_image_type_Set() const{
    return m_image_type_isSet;
}

bool OAIWindowsVersion::is_image_type_Valid() const{
    return m_image_type_isValid;
}

QString OAIWindowsVersion::getOsVersion() const {
    return m_os_version;
}
void OAIWindowsVersion::setOsVersion(const QString &os_version) {
    m_os_version = os_version;
    m_os_version_isSet = true;
}

bool OAIWindowsVersion::is_os_version_Set() const{
    return m_os_version_isSet;
}

bool OAIWindowsVersion::is_os_version_Valid() const{
    return m_os_version_isValid;
}

OAIDate OAIWindowsVersion::getSupportEndDate() const {
    return m_support_end_date;
}
void OAIWindowsVersion::setSupportEndDate(const OAIDate &support_end_date) {
    m_support_end_date = support_end_date;
    m_support_end_date_isSet = true;
}

bool OAIWindowsVersion::is_support_end_date_Set() const{
    return m_support_end_date_isSet;
}

bool OAIWindowsVersion::is_support_end_date_Valid() const{
    return m_support_end_date_isValid;
}

bool OAIWindowsVersion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_end_date.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWindowsVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
