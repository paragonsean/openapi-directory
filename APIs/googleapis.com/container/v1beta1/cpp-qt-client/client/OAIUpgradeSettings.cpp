/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpgradeSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpgradeSettings::OAIUpgradeSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpgradeSettings::OAIUpgradeSettings() {
    this->initializeModel();
}

OAIUpgradeSettings::~OAIUpgradeSettings() {}

void OAIUpgradeSettings::initializeModel() {

    m_blue_green_settings_isSet = false;
    m_blue_green_settings_isValid = false;

    m_max_surge_isSet = false;
    m_max_surge_isValid = false;

    m_max_unavailable_isSet = false;
    m_max_unavailable_isValid = false;

    m_strategy_isSet = false;
    m_strategy_isValid = false;
}

void OAIUpgradeSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpgradeSettings::fromJsonObject(QJsonObject json) {

    m_blue_green_settings_isValid = ::OpenAPI::fromJsonValue(m_blue_green_settings, json[QString("blueGreenSettings")]);
    m_blue_green_settings_isSet = !json[QString("blueGreenSettings")].isNull() && m_blue_green_settings_isValid;

    m_max_surge_isValid = ::OpenAPI::fromJsonValue(m_max_surge, json[QString("maxSurge")]);
    m_max_surge_isSet = !json[QString("maxSurge")].isNull() && m_max_surge_isValid;

    m_max_unavailable_isValid = ::OpenAPI::fromJsonValue(m_max_unavailable, json[QString("maxUnavailable")]);
    m_max_unavailable_isSet = !json[QString("maxUnavailable")].isNull() && m_max_unavailable_isValid;

    m_strategy_isValid = ::OpenAPI::fromJsonValue(m_strategy, json[QString("strategy")]);
    m_strategy_isSet = !json[QString("strategy")].isNull() && m_strategy_isValid;
}

QString OAIUpgradeSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpgradeSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_blue_green_settings.isSet()) {
        obj.insert(QString("blueGreenSettings"), ::OpenAPI::toJsonValue(m_blue_green_settings));
    }
    if (m_max_surge_isSet) {
        obj.insert(QString("maxSurge"), ::OpenAPI::toJsonValue(m_max_surge));
    }
    if (m_max_unavailable_isSet) {
        obj.insert(QString("maxUnavailable"), ::OpenAPI::toJsonValue(m_max_unavailable));
    }
    if (m_strategy_isSet) {
        obj.insert(QString("strategy"), ::OpenAPI::toJsonValue(m_strategy));
    }
    return obj;
}

OAIBlueGreenSettings OAIUpgradeSettings::getBlueGreenSettings() const {
    return m_blue_green_settings;
}
void OAIUpgradeSettings::setBlueGreenSettings(const OAIBlueGreenSettings &blue_green_settings) {
    m_blue_green_settings = blue_green_settings;
    m_blue_green_settings_isSet = true;
}

bool OAIUpgradeSettings::is_blue_green_settings_Set() const{
    return m_blue_green_settings_isSet;
}

bool OAIUpgradeSettings::is_blue_green_settings_Valid() const{
    return m_blue_green_settings_isValid;
}

qint32 OAIUpgradeSettings::getMaxSurge() const {
    return m_max_surge;
}
void OAIUpgradeSettings::setMaxSurge(const qint32 &max_surge) {
    m_max_surge = max_surge;
    m_max_surge_isSet = true;
}

bool OAIUpgradeSettings::is_max_surge_Set() const{
    return m_max_surge_isSet;
}

bool OAIUpgradeSettings::is_max_surge_Valid() const{
    return m_max_surge_isValid;
}

qint32 OAIUpgradeSettings::getMaxUnavailable() const {
    return m_max_unavailable;
}
void OAIUpgradeSettings::setMaxUnavailable(const qint32 &max_unavailable) {
    m_max_unavailable = max_unavailable;
    m_max_unavailable_isSet = true;
}

bool OAIUpgradeSettings::is_max_unavailable_Set() const{
    return m_max_unavailable_isSet;
}

bool OAIUpgradeSettings::is_max_unavailable_Valid() const{
    return m_max_unavailable_isValid;
}

QString OAIUpgradeSettings::getStrategy() const {
    return m_strategy;
}
void OAIUpgradeSettings::setStrategy(const QString &strategy) {
    m_strategy = strategy;
    m_strategy_isSet = true;
}

bool OAIUpgradeSettings::is_strategy_Set() const{
    return m_strategy_isSet;
}

bool OAIUpgradeSettings::is_strategy_Valid() const{
    return m_strategy_isValid;
}

bool OAIUpgradeSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blue_green_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_surge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_unavailable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_strategy_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpgradeSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
