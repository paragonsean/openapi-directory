/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISetNodePoolAutoscalingRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISetNodePoolAutoscalingRequest::OAISetNodePoolAutoscalingRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISetNodePoolAutoscalingRequest::OAISetNodePoolAutoscalingRequest() {
    this->initializeModel();
}

OAISetNodePoolAutoscalingRequest::~OAISetNodePoolAutoscalingRequest() {}

void OAISetNodePoolAutoscalingRequest::initializeModel() {

    m_autoscaling_isSet = false;
    m_autoscaling_isValid = false;

    m_cluster_id_isSet = false;
    m_cluster_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_node_pool_id_isSet = false;
    m_node_pool_id_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_zone_isSet = false;
    m_zone_isValid = false;
}

void OAISetNodePoolAutoscalingRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISetNodePoolAutoscalingRequest::fromJsonObject(QJsonObject json) {

    m_autoscaling_isValid = ::OpenAPI::fromJsonValue(m_autoscaling, json[QString("autoscaling")]);
    m_autoscaling_isSet = !json[QString("autoscaling")].isNull() && m_autoscaling_isValid;

    m_cluster_id_isValid = ::OpenAPI::fromJsonValue(m_cluster_id, json[QString("clusterId")]);
    m_cluster_id_isSet = !json[QString("clusterId")].isNull() && m_cluster_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_node_pool_id_isValid = ::OpenAPI::fromJsonValue(m_node_pool_id, json[QString("nodePoolId")]);
    m_node_pool_id_isSet = !json[QString("nodePoolId")].isNull() && m_node_pool_id_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_zone_isValid = ::OpenAPI::fromJsonValue(m_zone, json[QString("zone")]);
    m_zone_isSet = !json[QString("zone")].isNull() && m_zone_isValid;
}

QString OAISetNodePoolAutoscalingRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISetNodePoolAutoscalingRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_autoscaling.isSet()) {
        obj.insert(QString("autoscaling"), ::OpenAPI::toJsonValue(m_autoscaling));
    }
    if (m_cluster_id_isSet) {
        obj.insert(QString("clusterId"), ::OpenAPI::toJsonValue(m_cluster_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_node_pool_id_isSet) {
        obj.insert(QString("nodePoolId"), ::OpenAPI::toJsonValue(m_node_pool_id));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_zone_isSet) {
        obj.insert(QString("zone"), ::OpenAPI::toJsonValue(m_zone));
    }
    return obj;
}

OAINodePoolAutoscaling OAISetNodePoolAutoscalingRequest::getAutoscaling() const {
    return m_autoscaling;
}
void OAISetNodePoolAutoscalingRequest::setAutoscaling(const OAINodePoolAutoscaling &autoscaling) {
    m_autoscaling = autoscaling;
    m_autoscaling_isSet = true;
}

bool OAISetNodePoolAutoscalingRequest::is_autoscaling_Set() const{
    return m_autoscaling_isSet;
}

bool OAISetNodePoolAutoscalingRequest::is_autoscaling_Valid() const{
    return m_autoscaling_isValid;
}

QString OAISetNodePoolAutoscalingRequest::getClusterId() const {
    return m_cluster_id;
}
void OAISetNodePoolAutoscalingRequest::setClusterId(const QString &cluster_id) {
    m_cluster_id = cluster_id;
    m_cluster_id_isSet = true;
}

bool OAISetNodePoolAutoscalingRequest::is_cluster_id_Set() const{
    return m_cluster_id_isSet;
}

bool OAISetNodePoolAutoscalingRequest::is_cluster_id_Valid() const{
    return m_cluster_id_isValid;
}

QString OAISetNodePoolAutoscalingRequest::getName() const {
    return m_name;
}
void OAISetNodePoolAutoscalingRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISetNodePoolAutoscalingRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAISetNodePoolAutoscalingRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISetNodePoolAutoscalingRequest::getNodePoolId() const {
    return m_node_pool_id;
}
void OAISetNodePoolAutoscalingRequest::setNodePoolId(const QString &node_pool_id) {
    m_node_pool_id = node_pool_id;
    m_node_pool_id_isSet = true;
}

bool OAISetNodePoolAutoscalingRequest::is_node_pool_id_Set() const{
    return m_node_pool_id_isSet;
}

bool OAISetNodePoolAutoscalingRequest::is_node_pool_id_Valid() const{
    return m_node_pool_id_isValid;
}

QString OAISetNodePoolAutoscalingRequest::getProjectId() const {
    return m_project_id;
}
void OAISetNodePoolAutoscalingRequest::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAISetNodePoolAutoscalingRequest::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAISetNodePoolAutoscalingRequest::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAISetNodePoolAutoscalingRequest::getZone() const {
    return m_zone;
}
void OAISetNodePoolAutoscalingRequest::setZone(const QString &zone) {
    m_zone = zone;
    m_zone_isSet = true;
}

bool OAISetNodePoolAutoscalingRequest::is_zone_Set() const{
    return m_zone_isSet;
}

bool OAISetNodePoolAutoscalingRequest::is_zone_Valid() const{
    return m_zone_isValid;
}

bool OAISetNodePoolAutoscalingRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_autoscaling.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_pool_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISetNodePoolAutoscalingRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
