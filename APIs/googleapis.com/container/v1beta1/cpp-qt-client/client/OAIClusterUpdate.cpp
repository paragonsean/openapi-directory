/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClusterUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClusterUpdate::OAIClusterUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClusterUpdate::OAIClusterUpdate() {
    this->initializeModel();
}

OAIClusterUpdate::~OAIClusterUpdate() {}

void OAIClusterUpdate::initializeModel() {

    m_additional_pod_ranges_config_isSet = false;
    m_additional_pod_ranges_config_isValid = false;

    m_desired_addons_config_isSet = false;
    m_desired_addons_config_isValid = false;

    m_desired_authenticator_groups_config_isSet = false;
    m_desired_authenticator_groups_config_isValid = false;

    m_desired_autopilot_workload_policy_config_isSet = false;
    m_desired_autopilot_workload_policy_config_isValid = false;

    m_desired_binary_authorization_isSet = false;
    m_desired_binary_authorization_isValid = false;

    m_desired_cluster_autoscaling_isSet = false;
    m_desired_cluster_autoscaling_isValid = false;

    m_desired_cluster_telemetry_isSet = false;
    m_desired_cluster_telemetry_isValid = false;

    m_desired_cost_management_config_isSet = false;
    m_desired_cost_management_config_isValid = false;

    m_desired_database_encryption_isSet = false;
    m_desired_database_encryption_isValid = false;

    m_desired_datapath_provider_isSet = false;
    m_desired_datapath_provider_isValid = false;

    m_desired_default_snat_status_isSet = false;
    m_desired_default_snat_status_isValid = false;

    m_desired_dns_config_isSet = false;
    m_desired_dns_config_isValid = false;

    m_desired_enable_fqdn_network_policy_isSet = false;
    m_desired_enable_fqdn_network_policy_isValid = false;

    m_desired_enable_private_endpoint_isSet = false;
    m_desired_enable_private_endpoint_isValid = false;

    m_desired_fleet_isSet = false;
    m_desired_fleet_isValid = false;

    m_desired_gateway_api_config_isSet = false;
    m_desired_gateway_api_config_isValid = false;

    m_desired_gcfs_config_isSet = false;
    m_desired_gcfs_config_isValid = false;

    m_desired_host_maintenance_policy_isSet = false;
    m_desired_host_maintenance_policy_isValid = false;

    m_desired_identity_service_config_isSet = false;
    m_desired_identity_service_config_isValid = false;

    m_desired_image_type_isSet = false;
    m_desired_image_type_isValid = false;

    m_desired_in_transit_encryption_config_isSet = false;
    m_desired_in_transit_encryption_config_isValid = false;

    m_desired_intra_node_visibility_config_isSet = false;
    m_desired_intra_node_visibility_config_isValid = false;

    m_desired_k8s_beta_apis_isSet = false;
    m_desired_k8s_beta_apis_isValid = false;

    m_desired_l4ilb_subsetting_config_isSet = false;
    m_desired_l4ilb_subsetting_config_isValid = false;

    m_desired_locations_isSet = false;
    m_desired_locations_isValid = false;

    m_desired_logging_config_isSet = false;
    m_desired_logging_config_isValid = false;

    m_desired_logging_service_isSet = false;
    m_desired_logging_service_isValid = false;

    m_desired_master_isSet = false;
    m_desired_master_isValid = false;

    m_desired_master_authorized_networks_config_isSet = false;
    m_desired_master_authorized_networks_config_isValid = false;

    m_desired_master_version_isSet = false;
    m_desired_master_version_isValid = false;

    m_desired_mesh_certificates_isSet = false;
    m_desired_mesh_certificates_isValid = false;

    m_desired_monitoring_config_isSet = false;
    m_desired_monitoring_config_isValid = false;

    m_desired_monitoring_service_isSet = false;
    m_desired_monitoring_service_isValid = false;

    m_desired_network_performance_config_isSet = false;
    m_desired_network_performance_config_isValid = false;

    m_desired_node_pool_auto_config_network_tags_isSet = false;
    m_desired_node_pool_auto_config_network_tags_isValid = false;

    m_desired_node_pool_auto_config_resource_manager_tags_isSet = false;
    m_desired_node_pool_auto_config_resource_manager_tags_isValid = false;

    m_desired_node_pool_autoscaling_isSet = false;
    m_desired_node_pool_autoscaling_isValid = false;

    m_desired_node_pool_id_isSet = false;
    m_desired_node_pool_id_isValid = false;

    m_desired_node_pool_logging_config_isSet = false;
    m_desired_node_pool_logging_config_isValid = false;

    m_desired_node_version_isSet = false;
    m_desired_node_version_isValid = false;

    m_desired_notification_config_isSet = false;
    m_desired_notification_config_isValid = false;

    m_desired_parent_product_config_isSet = false;
    m_desired_parent_product_config_isValid = false;

    m_desired_pod_security_policy_config_isSet = false;
    m_desired_pod_security_policy_config_isValid = false;

    m_desired_private_cluster_config_isSet = false;
    m_desired_private_cluster_config_isValid = false;

    m_desired_private_ipv6_google_access_isSet = false;
    m_desired_private_ipv6_google_access_isValid = false;

    m_desired_protect_config_isSet = false;
    m_desired_protect_config_isValid = false;

    m_desired_release_channel_isSet = false;
    m_desired_release_channel_isValid = false;

    m_desired_resource_usage_export_config_isSet = false;
    m_desired_resource_usage_export_config_isValid = false;

    m_desired_security_posture_config_isSet = false;
    m_desired_security_posture_config_isValid = false;

    m_desired_service_external_ips_config_isSet = false;
    m_desired_service_external_ips_config_isValid = false;

    m_desired_shielded_nodes_isSet = false;
    m_desired_shielded_nodes_isValid = false;

    m_desired_stack_type_isSet = false;
    m_desired_stack_type_isValid = false;

    m_desired_tpu_config_isSet = false;
    m_desired_tpu_config_isValid = false;

    m_desired_vertical_pod_autoscaling_isSet = false;
    m_desired_vertical_pod_autoscaling_isValid = false;

    m_desired_workload_alts_config_isSet = false;
    m_desired_workload_alts_config_isValid = false;

    m_desired_workload_certificates_isSet = false;
    m_desired_workload_certificates_isValid = false;

    m_desired_workload_identity_config_isSet = false;
    m_desired_workload_identity_config_isValid = false;

    m_enable_k8s_beta_apis_isSet = false;
    m_enable_k8s_beta_apis_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_removed_additional_pod_ranges_config_isSet = false;
    m_removed_additional_pod_ranges_config_isValid = false;
}

void OAIClusterUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClusterUpdate::fromJsonObject(QJsonObject json) {

    m_additional_pod_ranges_config_isValid = ::OpenAPI::fromJsonValue(m_additional_pod_ranges_config, json[QString("additionalPodRangesConfig")]);
    m_additional_pod_ranges_config_isSet = !json[QString("additionalPodRangesConfig")].isNull() && m_additional_pod_ranges_config_isValid;

    m_desired_addons_config_isValid = ::OpenAPI::fromJsonValue(m_desired_addons_config, json[QString("desiredAddonsConfig")]);
    m_desired_addons_config_isSet = !json[QString("desiredAddonsConfig")].isNull() && m_desired_addons_config_isValid;

    m_desired_authenticator_groups_config_isValid = ::OpenAPI::fromJsonValue(m_desired_authenticator_groups_config, json[QString("desiredAuthenticatorGroupsConfig")]);
    m_desired_authenticator_groups_config_isSet = !json[QString("desiredAuthenticatorGroupsConfig")].isNull() && m_desired_authenticator_groups_config_isValid;

    m_desired_autopilot_workload_policy_config_isValid = ::OpenAPI::fromJsonValue(m_desired_autopilot_workload_policy_config, json[QString("desiredAutopilotWorkloadPolicyConfig")]);
    m_desired_autopilot_workload_policy_config_isSet = !json[QString("desiredAutopilotWorkloadPolicyConfig")].isNull() && m_desired_autopilot_workload_policy_config_isValid;

    m_desired_binary_authorization_isValid = ::OpenAPI::fromJsonValue(m_desired_binary_authorization, json[QString("desiredBinaryAuthorization")]);
    m_desired_binary_authorization_isSet = !json[QString("desiredBinaryAuthorization")].isNull() && m_desired_binary_authorization_isValid;

    m_desired_cluster_autoscaling_isValid = ::OpenAPI::fromJsonValue(m_desired_cluster_autoscaling, json[QString("desiredClusterAutoscaling")]);
    m_desired_cluster_autoscaling_isSet = !json[QString("desiredClusterAutoscaling")].isNull() && m_desired_cluster_autoscaling_isValid;

    m_desired_cluster_telemetry_isValid = ::OpenAPI::fromJsonValue(m_desired_cluster_telemetry, json[QString("desiredClusterTelemetry")]);
    m_desired_cluster_telemetry_isSet = !json[QString("desiredClusterTelemetry")].isNull() && m_desired_cluster_telemetry_isValid;

    m_desired_cost_management_config_isValid = ::OpenAPI::fromJsonValue(m_desired_cost_management_config, json[QString("desiredCostManagementConfig")]);
    m_desired_cost_management_config_isSet = !json[QString("desiredCostManagementConfig")].isNull() && m_desired_cost_management_config_isValid;

    m_desired_database_encryption_isValid = ::OpenAPI::fromJsonValue(m_desired_database_encryption, json[QString("desiredDatabaseEncryption")]);
    m_desired_database_encryption_isSet = !json[QString("desiredDatabaseEncryption")].isNull() && m_desired_database_encryption_isValid;

    m_desired_datapath_provider_isValid = ::OpenAPI::fromJsonValue(m_desired_datapath_provider, json[QString("desiredDatapathProvider")]);
    m_desired_datapath_provider_isSet = !json[QString("desiredDatapathProvider")].isNull() && m_desired_datapath_provider_isValid;

    m_desired_default_snat_status_isValid = ::OpenAPI::fromJsonValue(m_desired_default_snat_status, json[QString("desiredDefaultSnatStatus")]);
    m_desired_default_snat_status_isSet = !json[QString("desiredDefaultSnatStatus")].isNull() && m_desired_default_snat_status_isValid;

    m_desired_dns_config_isValid = ::OpenAPI::fromJsonValue(m_desired_dns_config, json[QString("desiredDnsConfig")]);
    m_desired_dns_config_isSet = !json[QString("desiredDnsConfig")].isNull() && m_desired_dns_config_isValid;

    m_desired_enable_fqdn_network_policy_isValid = ::OpenAPI::fromJsonValue(m_desired_enable_fqdn_network_policy, json[QString("desiredEnableFqdnNetworkPolicy")]);
    m_desired_enable_fqdn_network_policy_isSet = !json[QString("desiredEnableFqdnNetworkPolicy")].isNull() && m_desired_enable_fqdn_network_policy_isValid;

    m_desired_enable_private_endpoint_isValid = ::OpenAPI::fromJsonValue(m_desired_enable_private_endpoint, json[QString("desiredEnablePrivateEndpoint")]);
    m_desired_enable_private_endpoint_isSet = !json[QString("desiredEnablePrivateEndpoint")].isNull() && m_desired_enable_private_endpoint_isValid;

    m_desired_fleet_isValid = ::OpenAPI::fromJsonValue(m_desired_fleet, json[QString("desiredFleet")]);
    m_desired_fleet_isSet = !json[QString("desiredFleet")].isNull() && m_desired_fleet_isValid;

    m_desired_gateway_api_config_isValid = ::OpenAPI::fromJsonValue(m_desired_gateway_api_config, json[QString("desiredGatewayApiConfig")]);
    m_desired_gateway_api_config_isSet = !json[QString("desiredGatewayApiConfig")].isNull() && m_desired_gateway_api_config_isValid;

    m_desired_gcfs_config_isValid = ::OpenAPI::fromJsonValue(m_desired_gcfs_config, json[QString("desiredGcfsConfig")]);
    m_desired_gcfs_config_isSet = !json[QString("desiredGcfsConfig")].isNull() && m_desired_gcfs_config_isValid;

    m_desired_host_maintenance_policy_isValid = ::OpenAPI::fromJsonValue(m_desired_host_maintenance_policy, json[QString("desiredHostMaintenancePolicy")]);
    m_desired_host_maintenance_policy_isSet = !json[QString("desiredHostMaintenancePolicy")].isNull() && m_desired_host_maintenance_policy_isValid;

    m_desired_identity_service_config_isValid = ::OpenAPI::fromJsonValue(m_desired_identity_service_config, json[QString("desiredIdentityServiceConfig")]);
    m_desired_identity_service_config_isSet = !json[QString("desiredIdentityServiceConfig")].isNull() && m_desired_identity_service_config_isValid;

    m_desired_image_type_isValid = ::OpenAPI::fromJsonValue(m_desired_image_type, json[QString("desiredImageType")]);
    m_desired_image_type_isSet = !json[QString("desiredImageType")].isNull() && m_desired_image_type_isValid;

    m_desired_in_transit_encryption_config_isValid = ::OpenAPI::fromJsonValue(m_desired_in_transit_encryption_config, json[QString("desiredInTransitEncryptionConfig")]);
    m_desired_in_transit_encryption_config_isSet = !json[QString("desiredInTransitEncryptionConfig")].isNull() && m_desired_in_transit_encryption_config_isValid;

    m_desired_intra_node_visibility_config_isValid = ::OpenAPI::fromJsonValue(m_desired_intra_node_visibility_config, json[QString("desiredIntraNodeVisibilityConfig")]);
    m_desired_intra_node_visibility_config_isSet = !json[QString("desiredIntraNodeVisibilityConfig")].isNull() && m_desired_intra_node_visibility_config_isValid;

    m_desired_k8s_beta_apis_isValid = ::OpenAPI::fromJsonValue(m_desired_k8s_beta_apis, json[QString("desiredK8sBetaApis")]);
    m_desired_k8s_beta_apis_isSet = !json[QString("desiredK8sBetaApis")].isNull() && m_desired_k8s_beta_apis_isValid;

    m_desired_l4ilb_subsetting_config_isValid = ::OpenAPI::fromJsonValue(m_desired_l4ilb_subsetting_config, json[QString("desiredL4ilbSubsettingConfig")]);
    m_desired_l4ilb_subsetting_config_isSet = !json[QString("desiredL4ilbSubsettingConfig")].isNull() && m_desired_l4ilb_subsetting_config_isValid;

    m_desired_locations_isValid = ::OpenAPI::fromJsonValue(m_desired_locations, json[QString("desiredLocations")]);
    m_desired_locations_isSet = !json[QString("desiredLocations")].isNull() && m_desired_locations_isValid;

    m_desired_logging_config_isValid = ::OpenAPI::fromJsonValue(m_desired_logging_config, json[QString("desiredLoggingConfig")]);
    m_desired_logging_config_isSet = !json[QString("desiredLoggingConfig")].isNull() && m_desired_logging_config_isValid;

    m_desired_logging_service_isValid = ::OpenAPI::fromJsonValue(m_desired_logging_service, json[QString("desiredLoggingService")]);
    m_desired_logging_service_isSet = !json[QString("desiredLoggingService")].isNull() && m_desired_logging_service_isValid;

    m_desired_master_isValid = ::OpenAPI::fromJsonValue(m_desired_master, json[QString("desiredMaster")]);
    m_desired_master_isSet = !json[QString("desiredMaster")].isNull() && m_desired_master_isValid;

    m_desired_master_authorized_networks_config_isValid = ::OpenAPI::fromJsonValue(m_desired_master_authorized_networks_config, json[QString("desiredMasterAuthorizedNetworksConfig")]);
    m_desired_master_authorized_networks_config_isSet = !json[QString("desiredMasterAuthorizedNetworksConfig")].isNull() && m_desired_master_authorized_networks_config_isValid;

    m_desired_master_version_isValid = ::OpenAPI::fromJsonValue(m_desired_master_version, json[QString("desiredMasterVersion")]);
    m_desired_master_version_isSet = !json[QString("desiredMasterVersion")].isNull() && m_desired_master_version_isValid;

    m_desired_mesh_certificates_isValid = ::OpenAPI::fromJsonValue(m_desired_mesh_certificates, json[QString("desiredMeshCertificates")]);
    m_desired_mesh_certificates_isSet = !json[QString("desiredMeshCertificates")].isNull() && m_desired_mesh_certificates_isValid;

    m_desired_monitoring_config_isValid = ::OpenAPI::fromJsonValue(m_desired_monitoring_config, json[QString("desiredMonitoringConfig")]);
    m_desired_monitoring_config_isSet = !json[QString("desiredMonitoringConfig")].isNull() && m_desired_monitoring_config_isValid;

    m_desired_monitoring_service_isValid = ::OpenAPI::fromJsonValue(m_desired_monitoring_service, json[QString("desiredMonitoringService")]);
    m_desired_monitoring_service_isSet = !json[QString("desiredMonitoringService")].isNull() && m_desired_monitoring_service_isValid;

    m_desired_network_performance_config_isValid = ::OpenAPI::fromJsonValue(m_desired_network_performance_config, json[QString("desiredNetworkPerformanceConfig")]);
    m_desired_network_performance_config_isSet = !json[QString("desiredNetworkPerformanceConfig")].isNull() && m_desired_network_performance_config_isValid;

    m_desired_node_pool_auto_config_network_tags_isValid = ::OpenAPI::fromJsonValue(m_desired_node_pool_auto_config_network_tags, json[QString("desiredNodePoolAutoConfigNetworkTags")]);
    m_desired_node_pool_auto_config_network_tags_isSet = !json[QString("desiredNodePoolAutoConfigNetworkTags")].isNull() && m_desired_node_pool_auto_config_network_tags_isValid;

    m_desired_node_pool_auto_config_resource_manager_tags_isValid = ::OpenAPI::fromJsonValue(m_desired_node_pool_auto_config_resource_manager_tags, json[QString("desiredNodePoolAutoConfigResourceManagerTags")]);
    m_desired_node_pool_auto_config_resource_manager_tags_isSet = !json[QString("desiredNodePoolAutoConfigResourceManagerTags")].isNull() && m_desired_node_pool_auto_config_resource_manager_tags_isValid;

    m_desired_node_pool_autoscaling_isValid = ::OpenAPI::fromJsonValue(m_desired_node_pool_autoscaling, json[QString("desiredNodePoolAutoscaling")]);
    m_desired_node_pool_autoscaling_isSet = !json[QString("desiredNodePoolAutoscaling")].isNull() && m_desired_node_pool_autoscaling_isValid;

    m_desired_node_pool_id_isValid = ::OpenAPI::fromJsonValue(m_desired_node_pool_id, json[QString("desiredNodePoolId")]);
    m_desired_node_pool_id_isSet = !json[QString("desiredNodePoolId")].isNull() && m_desired_node_pool_id_isValid;

    m_desired_node_pool_logging_config_isValid = ::OpenAPI::fromJsonValue(m_desired_node_pool_logging_config, json[QString("desiredNodePoolLoggingConfig")]);
    m_desired_node_pool_logging_config_isSet = !json[QString("desiredNodePoolLoggingConfig")].isNull() && m_desired_node_pool_logging_config_isValid;

    m_desired_node_version_isValid = ::OpenAPI::fromJsonValue(m_desired_node_version, json[QString("desiredNodeVersion")]);
    m_desired_node_version_isSet = !json[QString("desiredNodeVersion")].isNull() && m_desired_node_version_isValid;

    m_desired_notification_config_isValid = ::OpenAPI::fromJsonValue(m_desired_notification_config, json[QString("desiredNotificationConfig")]);
    m_desired_notification_config_isSet = !json[QString("desiredNotificationConfig")].isNull() && m_desired_notification_config_isValid;

    m_desired_parent_product_config_isValid = ::OpenAPI::fromJsonValue(m_desired_parent_product_config, json[QString("desiredParentProductConfig")]);
    m_desired_parent_product_config_isSet = !json[QString("desiredParentProductConfig")].isNull() && m_desired_parent_product_config_isValid;

    m_desired_pod_security_policy_config_isValid = ::OpenAPI::fromJsonValue(m_desired_pod_security_policy_config, json[QString("desiredPodSecurityPolicyConfig")]);
    m_desired_pod_security_policy_config_isSet = !json[QString("desiredPodSecurityPolicyConfig")].isNull() && m_desired_pod_security_policy_config_isValid;

    m_desired_private_cluster_config_isValid = ::OpenAPI::fromJsonValue(m_desired_private_cluster_config, json[QString("desiredPrivateClusterConfig")]);
    m_desired_private_cluster_config_isSet = !json[QString("desiredPrivateClusterConfig")].isNull() && m_desired_private_cluster_config_isValid;

    m_desired_private_ipv6_google_access_isValid = ::OpenAPI::fromJsonValue(m_desired_private_ipv6_google_access, json[QString("desiredPrivateIpv6GoogleAccess")]);
    m_desired_private_ipv6_google_access_isSet = !json[QString("desiredPrivateIpv6GoogleAccess")].isNull() && m_desired_private_ipv6_google_access_isValid;

    m_desired_protect_config_isValid = ::OpenAPI::fromJsonValue(m_desired_protect_config, json[QString("desiredProtectConfig")]);
    m_desired_protect_config_isSet = !json[QString("desiredProtectConfig")].isNull() && m_desired_protect_config_isValid;

    m_desired_release_channel_isValid = ::OpenAPI::fromJsonValue(m_desired_release_channel, json[QString("desiredReleaseChannel")]);
    m_desired_release_channel_isSet = !json[QString("desiredReleaseChannel")].isNull() && m_desired_release_channel_isValid;

    m_desired_resource_usage_export_config_isValid = ::OpenAPI::fromJsonValue(m_desired_resource_usage_export_config, json[QString("desiredResourceUsageExportConfig")]);
    m_desired_resource_usage_export_config_isSet = !json[QString("desiredResourceUsageExportConfig")].isNull() && m_desired_resource_usage_export_config_isValid;

    m_desired_security_posture_config_isValid = ::OpenAPI::fromJsonValue(m_desired_security_posture_config, json[QString("desiredSecurityPostureConfig")]);
    m_desired_security_posture_config_isSet = !json[QString("desiredSecurityPostureConfig")].isNull() && m_desired_security_posture_config_isValid;

    m_desired_service_external_ips_config_isValid = ::OpenAPI::fromJsonValue(m_desired_service_external_ips_config, json[QString("desiredServiceExternalIpsConfig")]);
    m_desired_service_external_ips_config_isSet = !json[QString("desiredServiceExternalIpsConfig")].isNull() && m_desired_service_external_ips_config_isValid;

    m_desired_shielded_nodes_isValid = ::OpenAPI::fromJsonValue(m_desired_shielded_nodes, json[QString("desiredShieldedNodes")]);
    m_desired_shielded_nodes_isSet = !json[QString("desiredShieldedNodes")].isNull() && m_desired_shielded_nodes_isValid;

    m_desired_stack_type_isValid = ::OpenAPI::fromJsonValue(m_desired_stack_type, json[QString("desiredStackType")]);
    m_desired_stack_type_isSet = !json[QString("desiredStackType")].isNull() && m_desired_stack_type_isValid;

    m_desired_tpu_config_isValid = ::OpenAPI::fromJsonValue(m_desired_tpu_config, json[QString("desiredTpuConfig")]);
    m_desired_tpu_config_isSet = !json[QString("desiredTpuConfig")].isNull() && m_desired_tpu_config_isValid;

    m_desired_vertical_pod_autoscaling_isValid = ::OpenAPI::fromJsonValue(m_desired_vertical_pod_autoscaling, json[QString("desiredVerticalPodAutoscaling")]);
    m_desired_vertical_pod_autoscaling_isSet = !json[QString("desiredVerticalPodAutoscaling")].isNull() && m_desired_vertical_pod_autoscaling_isValid;

    m_desired_workload_alts_config_isValid = ::OpenAPI::fromJsonValue(m_desired_workload_alts_config, json[QString("desiredWorkloadAltsConfig")]);
    m_desired_workload_alts_config_isSet = !json[QString("desiredWorkloadAltsConfig")].isNull() && m_desired_workload_alts_config_isValid;

    m_desired_workload_certificates_isValid = ::OpenAPI::fromJsonValue(m_desired_workload_certificates, json[QString("desiredWorkloadCertificates")]);
    m_desired_workload_certificates_isSet = !json[QString("desiredWorkloadCertificates")].isNull() && m_desired_workload_certificates_isValid;

    m_desired_workload_identity_config_isValid = ::OpenAPI::fromJsonValue(m_desired_workload_identity_config, json[QString("desiredWorkloadIdentityConfig")]);
    m_desired_workload_identity_config_isSet = !json[QString("desiredWorkloadIdentityConfig")].isNull() && m_desired_workload_identity_config_isValid;

    m_enable_k8s_beta_apis_isValid = ::OpenAPI::fromJsonValue(m_enable_k8s_beta_apis, json[QString("enableK8sBetaApis")]);
    m_enable_k8s_beta_apis_isSet = !json[QString("enableK8sBetaApis")].isNull() && m_enable_k8s_beta_apis_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_removed_additional_pod_ranges_config_isValid = ::OpenAPI::fromJsonValue(m_removed_additional_pod_ranges_config, json[QString("removedAdditionalPodRangesConfig")]);
    m_removed_additional_pod_ranges_config_isSet = !json[QString("removedAdditionalPodRangesConfig")].isNull() && m_removed_additional_pod_ranges_config_isValid;
}

QString OAIClusterUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClusterUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_pod_ranges_config.isSet()) {
        obj.insert(QString("additionalPodRangesConfig"), ::OpenAPI::toJsonValue(m_additional_pod_ranges_config));
    }
    if (m_desired_addons_config.isSet()) {
        obj.insert(QString("desiredAddonsConfig"), ::OpenAPI::toJsonValue(m_desired_addons_config));
    }
    if (m_desired_authenticator_groups_config.isSet()) {
        obj.insert(QString("desiredAuthenticatorGroupsConfig"), ::OpenAPI::toJsonValue(m_desired_authenticator_groups_config));
    }
    if (m_desired_autopilot_workload_policy_config.isSet()) {
        obj.insert(QString("desiredAutopilotWorkloadPolicyConfig"), ::OpenAPI::toJsonValue(m_desired_autopilot_workload_policy_config));
    }
    if (m_desired_binary_authorization.isSet()) {
        obj.insert(QString("desiredBinaryAuthorization"), ::OpenAPI::toJsonValue(m_desired_binary_authorization));
    }
    if (m_desired_cluster_autoscaling.isSet()) {
        obj.insert(QString("desiredClusterAutoscaling"), ::OpenAPI::toJsonValue(m_desired_cluster_autoscaling));
    }
    if (m_desired_cluster_telemetry.isSet()) {
        obj.insert(QString("desiredClusterTelemetry"), ::OpenAPI::toJsonValue(m_desired_cluster_telemetry));
    }
    if (m_desired_cost_management_config.isSet()) {
        obj.insert(QString("desiredCostManagementConfig"), ::OpenAPI::toJsonValue(m_desired_cost_management_config));
    }
    if (m_desired_database_encryption.isSet()) {
        obj.insert(QString("desiredDatabaseEncryption"), ::OpenAPI::toJsonValue(m_desired_database_encryption));
    }
    if (m_desired_datapath_provider_isSet) {
        obj.insert(QString("desiredDatapathProvider"), ::OpenAPI::toJsonValue(m_desired_datapath_provider));
    }
    if (m_desired_default_snat_status.isSet()) {
        obj.insert(QString("desiredDefaultSnatStatus"), ::OpenAPI::toJsonValue(m_desired_default_snat_status));
    }
    if (m_desired_dns_config.isSet()) {
        obj.insert(QString("desiredDnsConfig"), ::OpenAPI::toJsonValue(m_desired_dns_config));
    }
    if (m_desired_enable_fqdn_network_policy_isSet) {
        obj.insert(QString("desiredEnableFqdnNetworkPolicy"), ::OpenAPI::toJsonValue(m_desired_enable_fqdn_network_policy));
    }
    if (m_desired_enable_private_endpoint_isSet) {
        obj.insert(QString("desiredEnablePrivateEndpoint"), ::OpenAPI::toJsonValue(m_desired_enable_private_endpoint));
    }
    if (m_desired_fleet.isSet()) {
        obj.insert(QString("desiredFleet"), ::OpenAPI::toJsonValue(m_desired_fleet));
    }
    if (m_desired_gateway_api_config.isSet()) {
        obj.insert(QString("desiredGatewayApiConfig"), ::OpenAPI::toJsonValue(m_desired_gateway_api_config));
    }
    if (m_desired_gcfs_config.isSet()) {
        obj.insert(QString("desiredGcfsConfig"), ::OpenAPI::toJsonValue(m_desired_gcfs_config));
    }
    if (m_desired_host_maintenance_policy.isSet()) {
        obj.insert(QString("desiredHostMaintenancePolicy"), ::OpenAPI::toJsonValue(m_desired_host_maintenance_policy));
    }
    if (m_desired_identity_service_config.isSet()) {
        obj.insert(QString("desiredIdentityServiceConfig"), ::OpenAPI::toJsonValue(m_desired_identity_service_config));
    }
    if (m_desired_image_type_isSet) {
        obj.insert(QString("desiredImageType"), ::OpenAPI::toJsonValue(m_desired_image_type));
    }
    if (m_desired_in_transit_encryption_config_isSet) {
        obj.insert(QString("desiredInTransitEncryptionConfig"), ::OpenAPI::toJsonValue(m_desired_in_transit_encryption_config));
    }
    if (m_desired_intra_node_visibility_config.isSet()) {
        obj.insert(QString("desiredIntraNodeVisibilityConfig"), ::OpenAPI::toJsonValue(m_desired_intra_node_visibility_config));
    }
    if (m_desired_k8s_beta_apis.isSet()) {
        obj.insert(QString("desiredK8sBetaApis"), ::OpenAPI::toJsonValue(m_desired_k8s_beta_apis));
    }
    if (m_desired_l4ilb_subsetting_config.isSet()) {
        obj.insert(QString("desiredL4ilbSubsettingConfig"), ::OpenAPI::toJsonValue(m_desired_l4ilb_subsetting_config));
    }
    if (m_desired_locations.size() > 0) {
        obj.insert(QString("desiredLocations"), ::OpenAPI::toJsonValue(m_desired_locations));
    }
    if (m_desired_logging_config.isSet()) {
        obj.insert(QString("desiredLoggingConfig"), ::OpenAPI::toJsonValue(m_desired_logging_config));
    }
    if (m_desired_logging_service_isSet) {
        obj.insert(QString("desiredLoggingService"), ::OpenAPI::toJsonValue(m_desired_logging_service));
    }
    if (m_desired_master_isSet) {
        obj.insert(QString("desiredMaster"), ::OpenAPI::toJsonValue(m_desired_master));
    }
    if (m_desired_master_authorized_networks_config.isSet()) {
        obj.insert(QString("desiredMasterAuthorizedNetworksConfig"), ::OpenAPI::toJsonValue(m_desired_master_authorized_networks_config));
    }
    if (m_desired_master_version_isSet) {
        obj.insert(QString("desiredMasterVersion"), ::OpenAPI::toJsonValue(m_desired_master_version));
    }
    if (m_desired_mesh_certificates.isSet()) {
        obj.insert(QString("desiredMeshCertificates"), ::OpenAPI::toJsonValue(m_desired_mesh_certificates));
    }
    if (m_desired_monitoring_config.isSet()) {
        obj.insert(QString("desiredMonitoringConfig"), ::OpenAPI::toJsonValue(m_desired_monitoring_config));
    }
    if (m_desired_monitoring_service_isSet) {
        obj.insert(QString("desiredMonitoringService"), ::OpenAPI::toJsonValue(m_desired_monitoring_service));
    }
    if (m_desired_network_performance_config.isSet()) {
        obj.insert(QString("desiredNetworkPerformanceConfig"), ::OpenAPI::toJsonValue(m_desired_network_performance_config));
    }
    if (m_desired_node_pool_auto_config_network_tags.isSet()) {
        obj.insert(QString("desiredNodePoolAutoConfigNetworkTags"), ::OpenAPI::toJsonValue(m_desired_node_pool_auto_config_network_tags));
    }
    if (m_desired_node_pool_auto_config_resource_manager_tags.isSet()) {
        obj.insert(QString("desiredNodePoolAutoConfigResourceManagerTags"), ::OpenAPI::toJsonValue(m_desired_node_pool_auto_config_resource_manager_tags));
    }
    if (m_desired_node_pool_autoscaling.isSet()) {
        obj.insert(QString("desiredNodePoolAutoscaling"), ::OpenAPI::toJsonValue(m_desired_node_pool_autoscaling));
    }
    if (m_desired_node_pool_id_isSet) {
        obj.insert(QString("desiredNodePoolId"), ::OpenAPI::toJsonValue(m_desired_node_pool_id));
    }
    if (m_desired_node_pool_logging_config.isSet()) {
        obj.insert(QString("desiredNodePoolLoggingConfig"), ::OpenAPI::toJsonValue(m_desired_node_pool_logging_config));
    }
    if (m_desired_node_version_isSet) {
        obj.insert(QString("desiredNodeVersion"), ::OpenAPI::toJsonValue(m_desired_node_version));
    }
    if (m_desired_notification_config.isSet()) {
        obj.insert(QString("desiredNotificationConfig"), ::OpenAPI::toJsonValue(m_desired_notification_config));
    }
    if (m_desired_parent_product_config.isSet()) {
        obj.insert(QString("desiredParentProductConfig"), ::OpenAPI::toJsonValue(m_desired_parent_product_config));
    }
    if (m_desired_pod_security_policy_config.isSet()) {
        obj.insert(QString("desiredPodSecurityPolicyConfig"), ::OpenAPI::toJsonValue(m_desired_pod_security_policy_config));
    }
    if (m_desired_private_cluster_config.isSet()) {
        obj.insert(QString("desiredPrivateClusterConfig"), ::OpenAPI::toJsonValue(m_desired_private_cluster_config));
    }
    if (m_desired_private_ipv6_google_access_isSet) {
        obj.insert(QString("desiredPrivateIpv6GoogleAccess"), ::OpenAPI::toJsonValue(m_desired_private_ipv6_google_access));
    }
    if (m_desired_protect_config.isSet()) {
        obj.insert(QString("desiredProtectConfig"), ::OpenAPI::toJsonValue(m_desired_protect_config));
    }
    if (m_desired_release_channel.isSet()) {
        obj.insert(QString("desiredReleaseChannel"), ::OpenAPI::toJsonValue(m_desired_release_channel));
    }
    if (m_desired_resource_usage_export_config.isSet()) {
        obj.insert(QString("desiredResourceUsageExportConfig"), ::OpenAPI::toJsonValue(m_desired_resource_usage_export_config));
    }
    if (m_desired_security_posture_config.isSet()) {
        obj.insert(QString("desiredSecurityPostureConfig"), ::OpenAPI::toJsonValue(m_desired_security_posture_config));
    }
    if (m_desired_service_external_ips_config.isSet()) {
        obj.insert(QString("desiredServiceExternalIpsConfig"), ::OpenAPI::toJsonValue(m_desired_service_external_ips_config));
    }
    if (m_desired_shielded_nodes.isSet()) {
        obj.insert(QString("desiredShieldedNodes"), ::OpenAPI::toJsonValue(m_desired_shielded_nodes));
    }
    if (m_desired_stack_type_isSet) {
        obj.insert(QString("desiredStackType"), ::OpenAPI::toJsonValue(m_desired_stack_type));
    }
    if (m_desired_tpu_config.isSet()) {
        obj.insert(QString("desiredTpuConfig"), ::OpenAPI::toJsonValue(m_desired_tpu_config));
    }
    if (m_desired_vertical_pod_autoscaling.isSet()) {
        obj.insert(QString("desiredVerticalPodAutoscaling"), ::OpenAPI::toJsonValue(m_desired_vertical_pod_autoscaling));
    }
    if (m_desired_workload_alts_config.isSet()) {
        obj.insert(QString("desiredWorkloadAltsConfig"), ::OpenAPI::toJsonValue(m_desired_workload_alts_config));
    }
    if (m_desired_workload_certificates.isSet()) {
        obj.insert(QString("desiredWorkloadCertificates"), ::OpenAPI::toJsonValue(m_desired_workload_certificates));
    }
    if (m_desired_workload_identity_config.isSet()) {
        obj.insert(QString("desiredWorkloadIdentityConfig"), ::OpenAPI::toJsonValue(m_desired_workload_identity_config));
    }
    if (m_enable_k8s_beta_apis.isSet()) {
        obj.insert(QString("enableK8sBetaApis"), ::OpenAPI::toJsonValue(m_enable_k8s_beta_apis));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_removed_additional_pod_ranges_config.isSet()) {
        obj.insert(QString("removedAdditionalPodRangesConfig"), ::OpenAPI::toJsonValue(m_removed_additional_pod_ranges_config));
    }
    return obj;
}

OAIAdditionalPodRangesConfig OAIClusterUpdate::getAdditionalPodRangesConfig() const {
    return m_additional_pod_ranges_config;
}
void OAIClusterUpdate::setAdditionalPodRangesConfig(const OAIAdditionalPodRangesConfig &additional_pod_ranges_config) {
    m_additional_pod_ranges_config = additional_pod_ranges_config;
    m_additional_pod_ranges_config_isSet = true;
}

bool OAIClusterUpdate::is_additional_pod_ranges_config_Set() const{
    return m_additional_pod_ranges_config_isSet;
}

bool OAIClusterUpdate::is_additional_pod_ranges_config_Valid() const{
    return m_additional_pod_ranges_config_isValid;
}

OAIAddonsConfig OAIClusterUpdate::getDesiredAddonsConfig() const {
    return m_desired_addons_config;
}
void OAIClusterUpdate::setDesiredAddonsConfig(const OAIAddonsConfig &desired_addons_config) {
    m_desired_addons_config = desired_addons_config;
    m_desired_addons_config_isSet = true;
}

bool OAIClusterUpdate::is_desired_addons_config_Set() const{
    return m_desired_addons_config_isSet;
}

bool OAIClusterUpdate::is_desired_addons_config_Valid() const{
    return m_desired_addons_config_isValid;
}

OAIAuthenticatorGroupsConfig OAIClusterUpdate::getDesiredAuthenticatorGroupsConfig() const {
    return m_desired_authenticator_groups_config;
}
void OAIClusterUpdate::setDesiredAuthenticatorGroupsConfig(const OAIAuthenticatorGroupsConfig &desired_authenticator_groups_config) {
    m_desired_authenticator_groups_config = desired_authenticator_groups_config;
    m_desired_authenticator_groups_config_isSet = true;
}

bool OAIClusterUpdate::is_desired_authenticator_groups_config_Set() const{
    return m_desired_authenticator_groups_config_isSet;
}

bool OAIClusterUpdate::is_desired_authenticator_groups_config_Valid() const{
    return m_desired_authenticator_groups_config_isValid;
}

OAIWorkloadPolicyConfig OAIClusterUpdate::getDesiredAutopilotWorkloadPolicyConfig() const {
    return m_desired_autopilot_workload_policy_config;
}
void OAIClusterUpdate::setDesiredAutopilotWorkloadPolicyConfig(const OAIWorkloadPolicyConfig &desired_autopilot_workload_policy_config) {
    m_desired_autopilot_workload_policy_config = desired_autopilot_workload_policy_config;
    m_desired_autopilot_workload_policy_config_isSet = true;
}

bool OAIClusterUpdate::is_desired_autopilot_workload_policy_config_Set() const{
    return m_desired_autopilot_workload_policy_config_isSet;
}

bool OAIClusterUpdate::is_desired_autopilot_workload_policy_config_Valid() const{
    return m_desired_autopilot_workload_policy_config_isValid;
}

OAIBinaryAuthorization OAIClusterUpdate::getDesiredBinaryAuthorization() const {
    return m_desired_binary_authorization;
}
void OAIClusterUpdate::setDesiredBinaryAuthorization(const OAIBinaryAuthorization &desired_binary_authorization) {
    m_desired_binary_authorization = desired_binary_authorization;
    m_desired_binary_authorization_isSet = true;
}

bool OAIClusterUpdate::is_desired_binary_authorization_Set() const{
    return m_desired_binary_authorization_isSet;
}

bool OAIClusterUpdate::is_desired_binary_authorization_Valid() const{
    return m_desired_binary_authorization_isValid;
}

OAIClusterAutoscaling OAIClusterUpdate::getDesiredClusterAutoscaling() const {
    return m_desired_cluster_autoscaling;
}
void OAIClusterUpdate::setDesiredClusterAutoscaling(const OAIClusterAutoscaling &desired_cluster_autoscaling) {
    m_desired_cluster_autoscaling = desired_cluster_autoscaling;
    m_desired_cluster_autoscaling_isSet = true;
}

bool OAIClusterUpdate::is_desired_cluster_autoscaling_Set() const{
    return m_desired_cluster_autoscaling_isSet;
}

bool OAIClusterUpdate::is_desired_cluster_autoscaling_Valid() const{
    return m_desired_cluster_autoscaling_isValid;
}

OAIClusterTelemetry OAIClusterUpdate::getDesiredClusterTelemetry() const {
    return m_desired_cluster_telemetry;
}
void OAIClusterUpdate::setDesiredClusterTelemetry(const OAIClusterTelemetry &desired_cluster_telemetry) {
    m_desired_cluster_telemetry = desired_cluster_telemetry;
    m_desired_cluster_telemetry_isSet = true;
}

bool OAIClusterUpdate::is_desired_cluster_telemetry_Set() const{
    return m_desired_cluster_telemetry_isSet;
}

bool OAIClusterUpdate::is_desired_cluster_telemetry_Valid() const{
    return m_desired_cluster_telemetry_isValid;
}

OAICostManagementConfig OAIClusterUpdate::getDesiredCostManagementConfig() const {
    return m_desired_cost_management_config;
}
void OAIClusterUpdate::setDesiredCostManagementConfig(const OAICostManagementConfig &desired_cost_management_config) {
    m_desired_cost_management_config = desired_cost_management_config;
    m_desired_cost_management_config_isSet = true;
}

bool OAIClusterUpdate::is_desired_cost_management_config_Set() const{
    return m_desired_cost_management_config_isSet;
}

bool OAIClusterUpdate::is_desired_cost_management_config_Valid() const{
    return m_desired_cost_management_config_isValid;
}

OAIDatabaseEncryption OAIClusterUpdate::getDesiredDatabaseEncryption() const {
    return m_desired_database_encryption;
}
void OAIClusterUpdate::setDesiredDatabaseEncryption(const OAIDatabaseEncryption &desired_database_encryption) {
    m_desired_database_encryption = desired_database_encryption;
    m_desired_database_encryption_isSet = true;
}

bool OAIClusterUpdate::is_desired_database_encryption_Set() const{
    return m_desired_database_encryption_isSet;
}

bool OAIClusterUpdate::is_desired_database_encryption_Valid() const{
    return m_desired_database_encryption_isValid;
}

QString OAIClusterUpdate::getDesiredDatapathProvider() const {
    return m_desired_datapath_provider;
}
void OAIClusterUpdate::setDesiredDatapathProvider(const QString &desired_datapath_provider) {
    m_desired_datapath_provider = desired_datapath_provider;
    m_desired_datapath_provider_isSet = true;
}

bool OAIClusterUpdate::is_desired_datapath_provider_Set() const{
    return m_desired_datapath_provider_isSet;
}

bool OAIClusterUpdate::is_desired_datapath_provider_Valid() const{
    return m_desired_datapath_provider_isValid;
}

OAIDefaultSnatStatus OAIClusterUpdate::getDesiredDefaultSnatStatus() const {
    return m_desired_default_snat_status;
}
void OAIClusterUpdate::setDesiredDefaultSnatStatus(const OAIDefaultSnatStatus &desired_default_snat_status) {
    m_desired_default_snat_status = desired_default_snat_status;
    m_desired_default_snat_status_isSet = true;
}

bool OAIClusterUpdate::is_desired_default_snat_status_Set() const{
    return m_desired_default_snat_status_isSet;
}

bool OAIClusterUpdate::is_desired_default_snat_status_Valid() const{
    return m_desired_default_snat_status_isValid;
}

OAIDNSConfig OAIClusterUpdate::getDesiredDnsConfig() const {
    return m_desired_dns_config;
}
void OAIClusterUpdate::setDesiredDnsConfig(const OAIDNSConfig &desired_dns_config) {
    m_desired_dns_config = desired_dns_config;
    m_desired_dns_config_isSet = true;
}

bool OAIClusterUpdate::is_desired_dns_config_Set() const{
    return m_desired_dns_config_isSet;
}

bool OAIClusterUpdate::is_desired_dns_config_Valid() const{
    return m_desired_dns_config_isValid;
}

bool OAIClusterUpdate::isDesiredEnableFqdnNetworkPolicy() const {
    return m_desired_enable_fqdn_network_policy;
}
void OAIClusterUpdate::setDesiredEnableFqdnNetworkPolicy(const bool &desired_enable_fqdn_network_policy) {
    m_desired_enable_fqdn_network_policy = desired_enable_fqdn_network_policy;
    m_desired_enable_fqdn_network_policy_isSet = true;
}

bool OAIClusterUpdate::is_desired_enable_fqdn_network_policy_Set() const{
    return m_desired_enable_fqdn_network_policy_isSet;
}

bool OAIClusterUpdate::is_desired_enable_fqdn_network_policy_Valid() const{
    return m_desired_enable_fqdn_network_policy_isValid;
}

bool OAIClusterUpdate::isDesiredEnablePrivateEndpoint() const {
    return m_desired_enable_private_endpoint;
}
void OAIClusterUpdate::setDesiredEnablePrivateEndpoint(const bool &desired_enable_private_endpoint) {
    m_desired_enable_private_endpoint = desired_enable_private_endpoint;
    m_desired_enable_private_endpoint_isSet = true;
}

bool OAIClusterUpdate::is_desired_enable_private_endpoint_Set() const{
    return m_desired_enable_private_endpoint_isSet;
}

bool OAIClusterUpdate::is_desired_enable_private_endpoint_Valid() const{
    return m_desired_enable_private_endpoint_isValid;
}

OAIFleet OAIClusterUpdate::getDesiredFleet() const {
    return m_desired_fleet;
}
void OAIClusterUpdate::setDesiredFleet(const OAIFleet &desired_fleet) {
    m_desired_fleet = desired_fleet;
    m_desired_fleet_isSet = true;
}

bool OAIClusterUpdate::is_desired_fleet_Set() const{
    return m_desired_fleet_isSet;
}

bool OAIClusterUpdate::is_desired_fleet_Valid() const{
    return m_desired_fleet_isValid;
}

OAIGatewayAPIConfig OAIClusterUpdate::getDesiredGatewayApiConfig() const {
    return m_desired_gateway_api_config;
}
void OAIClusterUpdate::setDesiredGatewayApiConfig(const OAIGatewayAPIConfig &desired_gateway_api_config) {
    m_desired_gateway_api_config = desired_gateway_api_config;
    m_desired_gateway_api_config_isSet = true;
}

bool OAIClusterUpdate::is_desired_gateway_api_config_Set() const{
    return m_desired_gateway_api_config_isSet;
}

bool OAIClusterUpdate::is_desired_gateway_api_config_Valid() const{
    return m_desired_gateway_api_config_isValid;
}

OAIGcfsConfig OAIClusterUpdate::getDesiredGcfsConfig() const {
    return m_desired_gcfs_config;
}
void OAIClusterUpdate::setDesiredGcfsConfig(const OAIGcfsConfig &desired_gcfs_config) {
    m_desired_gcfs_config = desired_gcfs_config;
    m_desired_gcfs_config_isSet = true;
}

bool OAIClusterUpdate::is_desired_gcfs_config_Set() const{
    return m_desired_gcfs_config_isSet;
}

bool OAIClusterUpdate::is_desired_gcfs_config_Valid() const{
    return m_desired_gcfs_config_isValid;
}

OAIHostMaintenancePolicy OAIClusterUpdate::getDesiredHostMaintenancePolicy() const {
    return m_desired_host_maintenance_policy;
}
void OAIClusterUpdate::setDesiredHostMaintenancePolicy(const OAIHostMaintenancePolicy &desired_host_maintenance_policy) {
    m_desired_host_maintenance_policy = desired_host_maintenance_policy;
    m_desired_host_maintenance_policy_isSet = true;
}

bool OAIClusterUpdate::is_desired_host_maintenance_policy_Set() const{
    return m_desired_host_maintenance_policy_isSet;
}

bool OAIClusterUpdate::is_desired_host_maintenance_policy_Valid() const{
    return m_desired_host_maintenance_policy_isValid;
}

OAIIdentityServiceConfig OAIClusterUpdate::getDesiredIdentityServiceConfig() const {
    return m_desired_identity_service_config;
}
void OAIClusterUpdate::setDesiredIdentityServiceConfig(const OAIIdentityServiceConfig &desired_identity_service_config) {
    m_desired_identity_service_config = desired_identity_service_config;
    m_desired_identity_service_config_isSet = true;
}

bool OAIClusterUpdate::is_desired_identity_service_config_Set() const{
    return m_desired_identity_service_config_isSet;
}

bool OAIClusterUpdate::is_desired_identity_service_config_Valid() const{
    return m_desired_identity_service_config_isValid;
}

QString OAIClusterUpdate::getDesiredImageType() const {
    return m_desired_image_type;
}
void OAIClusterUpdate::setDesiredImageType(const QString &desired_image_type) {
    m_desired_image_type = desired_image_type;
    m_desired_image_type_isSet = true;
}

bool OAIClusterUpdate::is_desired_image_type_Set() const{
    return m_desired_image_type_isSet;
}

bool OAIClusterUpdate::is_desired_image_type_Valid() const{
    return m_desired_image_type_isValid;
}

QString OAIClusterUpdate::getDesiredInTransitEncryptionConfig() const {
    return m_desired_in_transit_encryption_config;
}
void OAIClusterUpdate::setDesiredInTransitEncryptionConfig(const QString &desired_in_transit_encryption_config) {
    m_desired_in_transit_encryption_config = desired_in_transit_encryption_config;
    m_desired_in_transit_encryption_config_isSet = true;
}

bool OAIClusterUpdate::is_desired_in_transit_encryption_config_Set() const{
    return m_desired_in_transit_encryption_config_isSet;
}

bool OAIClusterUpdate::is_desired_in_transit_encryption_config_Valid() const{
    return m_desired_in_transit_encryption_config_isValid;
}

OAIIntraNodeVisibilityConfig OAIClusterUpdate::getDesiredIntraNodeVisibilityConfig() const {
    return m_desired_intra_node_visibility_config;
}
void OAIClusterUpdate::setDesiredIntraNodeVisibilityConfig(const OAIIntraNodeVisibilityConfig &desired_intra_node_visibility_config) {
    m_desired_intra_node_visibility_config = desired_intra_node_visibility_config;
    m_desired_intra_node_visibility_config_isSet = true;
}

bool OAIClusterUpdate::is_desired_intra_node_visibility_config_Set() const{
    return m_desired_intra_node_visibility_config_isSet;
}

bool OAIClusterUpdate::is_desired_intra_node_visibility_config_Valid() const{
    return m_desired_intra_node_visibility_config_isValid;
}

OAIK8sBetaAPIConfig OAIClusterUpdate::getDesiredK8sBetaApis() const {
    return m_desired_k8s_beta_apis;
}
void OAIClusterUpdate::setDesiredK8sBetaApis(const OAIK8sBetaAPIConfig &desired_k8s_beta_apis) {
    m_desired_k8s_beta_apis = desired_k8s_beta_apis;
    m_desired_k8s_beta_apis_isSet = true;
}

bool OAIClusterUpdate::is_desired_k8s_beta_apis_Set() const{
    return m_desired_k8s_beta_apis_isSet;
}

bool OAIClusterUpdate::is_desired_k8s_beta_apis_Valid() const{
    return m_desired_k8s_beta_apis_isValid;
}

OAIILBSubsettingConfig OAIClusterUpdate::getDesiredL4ilbSubsettingConfig() const {
    return m_desired_l4ilb_subsetting_config;
}
void OAIClusterUpdate::setDesiredL4ilbSubsettingConfig(const OAIILBSubsettingConfig &desired_l4ilb_subsetting_config) {
    m_desired_l4ilb_subsetting_config = desired_l4ilb_subsetting_config;
    m_desired_l4ilb_subsetting_config_isSet = true;
}

bool OAIClusterUpdate::is_desired_l4ilb_subsetting_config_Set() const{
    return m_desired_l4ilb_subsetting_config_isSet;
}

bool OAIClusterUpdate::is_desired_l4ilb_subsetting_config_Valid() const{
    return m_desired_l4ilb_subsetting_config_isValid;
}

QList<QString> OAIClusterUpdate::getDesiredLocations() const {
    return m_desired_locations;
}
void OAIClusterUpdate::setDesiredLocations(const QList<QString> &desired_locations) {
    m_desired_locations = desired_locations;
    m_desired_locations_isSet = true;
}

bool OAIClusterUpdate::is_desired_locations_Set() const{
    return m_desired_locations_isSet;
}

bool OAIClusterUpdate::is_desired_locations_Valid() const{
    return m_desired_locations_isValid;
}

OAILoggingConfig OAIClusterUpdate::getDesiredLoggingConfig() const {
    return m_desired_logging_config;
}
void OAIClusterUpdate::setDesiredLoggingConfig(const OAILoggingConfig &desired_logging_config) {
    m_desired_logging_config = desired_logging_config;
    m_desired_logging_config_isSet = true;
}

bool OAIClusterUpdate::is_desired_logging_config_Set() const{
    return m_desired_logging_config_isSet;
}

bool OAIClusterUpdate::is_desired_logging_config_Valid() const{
    return m_desired_logging_config_isValid;
}

QString OAIClusterUpdate::getDesiredLoggingService() const {
    return m_desired_logging_service;
}
void OAIClusterUpdate::setDesiredLoggingService(const QString &desired_logging_service) {
    m_desired_logging_service = desired_logging_service;
    m_desired_logging_service_isSet = true;
}

bool OAIClusterUpdate::is_desired_logging_service_Set() const{
    return m_desired_logging_service_isSet;
}

bool OAIClusterUpdate::is_desired_logging_service_Valid() const{
    return m_desired_logging_service_isValid;
}

OAIObject OAIClusterUpdate::getDesiredMaster() const {
    return m_desired_master;
}
void OAIClusterUpdate::setDesiredMaster(const OAIObject &desired_master) {
    m_desired_master = desired_master;
    m_desired_master_isSet = true;
}

bool OAIClusterUpdate::is_desired_master_Set() const{
    return m_desired_master_isSet;
}

bool OAIClusterUpdate::is_desired_master_Valid() const{
    return m_desired_master_isValid;
}

OAIMasterAuthorizedNetworksConfig OAIClusterUpdate::getDesiredMasterAuthorizedNetworksConfig() const {
    return m_desired_master_authorized_networks_config;
}
void OAIClusterUpdate::setDesiredMasterAuthorizedNetworksConfig(const OAIMasterAuthorizedNetworksConfig &desired_master_authorized_networks_config) {
    m_desired_master_authorized_networks_config = desired_master_authorized_networks_config;
    m_desired_master_authorized_networks_config_isSet = true;
}

bool OAIClusterUpdate::is_desired_master_authorized_networks_config_Set() const{
    return m_desired_master_authorized_networks_config_isSet;
}

bool OAIClusterUpdate::is_desired_master_authorized_networks_config_Valid() const{
    return m_desired_master_authorized_networks_config_isValid;
}

QString OAIClusterUpdate::getDesiredMasterVersion() const {
    return m_desired_master_version;
}
void OAIClusterUpdate::setDesiredMasterVersion(const QString &desired_master_version) {
    m_desired_master_version = desired_master_version;
    m_desired_master_version_isSet = true;
}

bool OAIClusterUpdate::is_desired_master_version_Set() const{
    return m_desired_master_version_isSet;
}

bool OAIClusterUpdate::is_desired_master_version_Valid() const{
    return m_desired_master_version_isValid;
}

OAIMeshCertificates OAIClusterUpdate::getDesiredMeshCertificates() const {
    return m_desired_mesh_certificates;
}
void OAIClusterUpdate::setDesiredMeshCertificates(const OAIMeshCertificates &desired_mesh_certificates) {
    m_desired_mesh_certificates = desired_mesh_certificates;
    m_desired_mesh_certificates_isSet = true;
}

bool OAIClusterUpdate::is_desired_mesh_certificates_Set() const{
    return m_desired_mesh_certificates_isSet;
}

bool OAIClusterUpdate::is_desired_mesh_certificates_Valid() const{
    return m_desired_mesh_certificates_isValid;
}

OAIMonitoringConfig OAIClusterUpdate::getDesiredMonitoringConfig() const {
    return m_desired_monitoring_config;
}
void OAIClusterUpdate::setDesiredMonitoringConfig(const OAIMonitoringConfig &desired_monitoring_config) {
    m_desired_monitoring_config = desired_monitoring_config;
    m_desired_monitoring_config_isSet = true;
}

bool OAIClusterUpdate::is_desired_monitoring_config_Set() const{
    return m_desired_monitoring_config_isSet;
}

bool OAIClusterUpdate::is_desired_monitoring_config_Valid() const{
    return m_desired_monitoring_config_isValid;
}

QString OAIClusterUpdate::getDesiredMonitoringService() const {
    return m_desired_monitoring_service;
}
void OAIClusterUpdate::setDesiredMonitoringService(const QString &desired_monitoring_service) {
    m_desired_monitoring_service = desired_monitoring_service;
    m_desired_monitoring_service_isSet = true;
}

bool OAIClusterUpdate::is_desired_monitoring_service_Set() const{
    return m_desired_monitoring_service_isSet;
}

bool OAIClusterUpdate::is_desired_monitoring_service_Valid() const{
    return m_desired_monitoring_service_isValid;
}

OAIClusterNetworkPerformanceConfig OAIClusterUpdate::getDesiredNetworkPerformanceConfig() const {
    return m_desired_network_performance_config;
}
void OAIClusterUpdate::setDesiredNetworkPerformanceConfig(const OAIClusterNetworkPerformanceConfig &desired_network_performance_config) {
    m_desired_network_performance_config = desired_network_performance_config;
    m_desired_network_performance_config_isSet = true;
}

bool OAIClusterUpdate::is_desired_network_performance_config_Set() const{
    return m_desired_network_performance_config_isSet;
}

bool OAIClusterUpdate::is_desired_network_performance_config_Valid() const{
    return m_desired_network_performance_config_isValid;
}

OAINetworkTags OAIClusterUpdate::getDesiredNodePoolAutoConfigNetworkTags() const {
    return m_desired_node_pool_auto_config_network_tags;
}
void OAIClusterUpdate::setDesiredNodePoolAutoConfigNetworkTags(const OAINetworkTags &desired_node_pool_auto_config_network_tags) {
    m_desired_node_pool_auto_config_network_tags = desired_node_pool_auto_config_network_tags;
    m_desired_node_pool_auto_config_network_tags_isSet = true;
}

bool OAIClusterUpdate::is_desired_node_pool_auto_config_network_tags_Set() const{
    return m_desired_node_pool_auto_config_network_tags_isSet;
}

bool OAIClusterUpdate::is_desired_node_pool_auto_config_network_tags_Valid() const{
    return m_desired_node_pool_auto_config_network_tags_isValid;
}

OAIResourceManagerTags OAIClusterUpdate::getDesiredNodePoolAutoConfigResourceManagerTags() const {
    return m_desired_node_pool_auto_config_resource_manager_tags;
}
void OAIClusterUpdate::setDesiredNodePoolAutoConfigResourceManagerTags(const OAIResourceManagerTags &desired_node_pool_auto_config_resource_manager_tags) {
    m_desired_node_pool_auto_config_resource_manager_tags = desired_node_pool_auto_config_resource_manager_tags;
    m_desired_node_pool_auto_config_resource_manager_tags_isSet = true;
}

bool OAIClusterUpdate::is_desired_node_pool_auto_config_resource_manager_tags_Set() const{
    return m_desired_node_pool_auto_config_resource_manager_tags_isSet;
}

bool OAIClusterUpdate::is_desired_node_pool_auto_config_resource_manager_tags_Valid() const{
    return m_desired_node_pool_auto_config_resource_manager_tags_isValid;
}

OAINodePoolAutoscaling OAIClusterUpdate::getDesiredNodePoolAutoscaling() const {
    return m_desired_node_pool_autoscaling;
}
void OAIClusterUpdate::setDesiredNodePoolAutoscaling(const OAINodePoolAutoscaling &desired_node_pool_autoscaling) {
    m_desired_node_pool_autoscaling = desired_node_pool_autoscaling;
    m_desired_node_pool_autoscaling_isSet = true;
}

bool OAIClusterUpdate::is_desired_node_pool_autoscaling_Set() const{
    return m_desired_node_pool_autoscaling_isSet;
}

bool OAIClusterUpdate::is_desired_node_pool_autoscaling_Valid() const{
    return m_desired_node_pool_autoscaling_isValid;
}

QString OAIClusterUpdate::getDesiredNodePoolId() const {
    return m_desired_node_pool_id;
}
void OAIClusterUpdate::setDesiredNodePoolId(const QString &desired_node_pool_id) {
    m_desired_node_pool_id = desired_node_pool_id;
    m_desired_node_pool_id_isSet = true;
}

bool OAIClusterUpdate::is_desired_node_pool_id_Set() const{
    return m_desired_node_pool_id_isSet;
}

bool OAIClusterUpdate::is_desired_node_pool_id_Valid() const{
    return m_desired_node_pool_id_isValid;
}

OAINodePoolLoggingConfig OAIClusterUpdate::getDesiredNodePoolLoggingConfig() const {
    return m_desired_node_pool_logging_config;
}
void OAIClusterUpdate::setDesiredNodePoolLoggingConfig(const OAINodePoolLoggingConfig &desired_node_pool_logging_config) {
    m_desired_node_pool_logging_config = desired_node_pool_logging_config;
    m_desired_node_pool_logging_config_isSet = true;
}

bool OAIClusterUpdate::is_desired_node_pool_logging_config_Set() const{
    return m_desired_node_pool_logging_config_isSet;
}

bool OAIClusterUpdate::is_desired_node_pool_logging_config_Valid() const{
    return m_desired_node_pool_logging_config_isValid;
}

QString OAIClusterUpdate::getDesiredNodeVersion() const {
    return m_desired_node_version;
}
void OAIClusterUpdate::setDesiredNodeVersion(const QString &desired_node_version) {
    m_desired_node_version = desired_node_version;
    m_desired_node_version_isSet = true;
}

bool OAIClusterUpdate::is_desired_node_version_Set() const{
    return m_desired_node_version_isSet;
}

bool OAIClusterUpdate::is_desired_node_version_Valid() const{
    return m_desired_node_version_isValid;
}

OAINotificationConfig OAIClusterUpdate::getDesiredNotificationConfig() const {
    return m_desired_notification_config;
}
void OAIClusterUpdate::setDesiredNotificationConfig(const OAINotificationConfig &desired_notification_config) {
    m_desired_notification_config = desired_notification_config;
    m_desired_notification_config_isSet = true;
}

bool OAIClusterUpdate::is_desired_notification_config_Set() const{
    return m_desired_notification_config_isSet;
}

bool OAIClusterUpdate::is_desired_notification_config_Valid() const{
    return m_desired_notification_config_isValid;
}

OAIParentProductConfig OAIClusterUpdate::getDesiredParentProductConfig() const {
    return m_desired_parent_product_config;
}
void OAIClusterUpdate::setDesiredParentProductConfig(const OAIParentProductConfig &desired_parent_product_config) {
    m_desired_parent_product_config = desired_parent_product_config;
    m_desired_parent_product_config_isSet = true;
}

bool OAIClusterUpdate::is_desired_parent_product_config_Set() const{
    return m_desired_parent_product_config_isSet;
}

bool OAIClusterUpdate::is_desired_parent_product_config_Valid() const{
    return m_desired_parent_product_config_isValid;
}

OAIPodSecurityPolicyConfig OAIClusterUpdate::getDesiredPodSecurityPolicyConfig() const {
    return m_desired_pod_security_policy_config;
}
void OAIClusterUpdate::setDesiredPodSecurityPolicyConfig(const OAIPodSecurityPolicyConfig &desired_pod_security_policy_config) {
    m_desired_pod_security_policy_config = desired_pod_security_policy_config;
    m_desired_pod_security_policy_config_isSet = true;
}

bool OAIClusterUpdate::is_desired_pod_security_policy_config_Set() const{
    return m_desired_pod_security_policy_config_isSet;
}

bool OAIClusterUpdate::is_desired_pod_security_policy_config_Valid() const{
    return m_desired_pod_security_policy_config_isValid;
}

OAIPrivateClusterConfig OAIClusterUpdate::getDesiredPrivateClusterConfig() const {
    return m_desired_private_cluster_config;
}
void OAIClusterUpdate::setDesiredPrivateClusterConfig(const OAIPrivateClusterConfig &desired_private_cluster_config) {
    m_desired_private_cluster_config = desired_private_cluster_config;
    m_desired_private_cluster_config_isSet = true;
}

bool OAIClusterUpdate::is_desired_private_cluster_config_Set() const{
    return m_desired_private_cluster_config_isSet;
}

bool OAIClusterUpdate::is_desired_private_cluster_config_Valid() const{
    return m_desired_private_cluster_config_isValid;
}

QString OAIClusterUpdate::getDesiredPrivateIpv6GoogleAccess() const {
    return m_desired_private_ipv6_google_access;
}
void OAIClusterUpdate::setDesiredPrivateIpv6GoogleAccess(const QString &desired_private_ipv6_google_access) {
    m_desired_private_ipv6_google_access = desired_private_ipv6_google_access;
    m_desired_private_ipv6_google_access_isSet = true;
}

bool OAIClusterUpdate::is_desired_private_ipv6_google_access_Set() const{
    return m_desired_private_ipv6_google_access_isSet;
}

bool OAIClusterUpdate::is_desired_private_ipv6_google_access_Valid() const{
    return m_desired_private_ipv6_google_access_isValid;
}

OAIProtectConfig OAIClusterUpdate::getDesiredProtectConfig() const {
    return m_desired_protect_config;
}
void OAIClusterUpdate::setDesiredProtectConfig(const OAIProtectConfig &desired_protect_config) {
    m_desired_protect_config = desired_protect_config;
    m_desired_protect_config_isSet = true;
}

bool OAIClusterUpdate::is_desired_protect_config_Set() const{
    return m_desired_protect_config_isSet;
}

bool OAIClusterUpdate::is_desired_protect_config_Valid() const{
    return m_desired_protect_config_isValid;
}

OAIReleaseChannel OAIClusterUpdate::getDesiredReleaseChannel() const {
    return m_desired_release_channel;
}
void OAIClusterUpdate::setDesiredReleaseChannel(const OAIReleaseChannel &desired_release_channel) {
    m_desired_release_channel = desired_release_channel;
    m_desired_release_channel_isSet = true;
}

bool OAIClusterUpdate::is_desired_release_channel_Set() const{
    return m_desired_release_channel_isSet;
}

bool OAIClusterUpdate::is_desired_release_channel_Valid() const{
    return m_desired_release_channel_isValid;
}

OAIResourceUsageExportConfig OAIClusterUpdate::getDesiredResourceUsageExportConfig() const {
    return m_desired_resource_usage_export_config;
}
void OAIClusterUpdate::setDesiredResourceUsageExportConfig(const OAIResourceUsageExportConfig &desired_resource_usage_export_config) {
    m_desired_resource_usage_export_config = desired_resource_usage_export_config;
    m_desired_resource_usage_export_config_isSet = true;
}

bool OAIClusterUpdate::is_desired_resource_usage_export_config_Set() const{
    return m_desired_resource_usage_export_config_isSet;
}

bool OAIClusterUpdate::is_desired_resource_usage_export_config_Valid() const{
    return m_desired_resource_usage_export_config_isValid;
}

OAISecurityPostureConfig OAIClusterUpdate::getDesiredSecurityPostureConfig() const {
    return m_desired_security_posture_config;
}
void OAIClusterUpdate::setDesiredSecurityPostureConfig(const OAISecurityPostureConfig &desired_security_posture_config) {
    m_desired_security_posture_config = desired_security_posture_config;
    m_desired_security_posture_config_isSet = true;
}

bool OAIClusterUpdate::is_desired_security_posture_config_Set() const{
    return m_desired_security_posture_config_isSet;
}

bool OAIClusterUpdate::is_desired_security_posture_config_Valid() const{
    return m_desired_security_posture_config_isValid;
}

OAIServiceExternalIPsConfig OAIClusterUpdate::getDesiredServiceExternalIpsConfig() const {
    return m_desired_service_external_ips_config;
}
void OAIClusterUpdate::setDesiredServiceExternalIpsConfig(const OAIServiceExternalIPsConfig &desired_service_external_ips_config) {
    m_desired_service_external_ips_config = desired_service_external_ips_config;
    m_desired_service_external_ips_config_isSet = true;
}

bool OAIClusterUpdate::is_desired_service_external_ips_config_Set() const{
    return m_desired_service_external_ips_config_isSet;
}

bool OAIClusterUpdate::is_desired_service_external_ips_config_Valid() const{
    return m_desired_service_external_ips_config_isValid;
}

OAIShieldedNodes OAIClusterUpdate::getDesiredShieldedNodes() const {
    return m_desired_shielded_nodes;
}
void OAIClusterUpdate::setDesiredShieldedNodes(const OAIShieldedNodes &desired_shielded_nodes) {
    m_desired_shielded_nodes = desired_shielded_nodes;
    m_desired_shielded_nodes_isSet = true;
}

bool OAIClusterUpdate::is_desired_shielded_nodes_Set() const{
    return m_desired_shielded_nodes_isSet;
}

bool OAIClusterUpdate::is_desired_shielded_nodes_Valid() const{
    return m_desired_shielded_nodes_isValid;
}

QString OAIClusterUpdate::getDesiredStackType() const {
    return m_desired_stack_type;
}
void OAIClusterUpdate::setDesiredStackType(const QString &desired_stack_type) {
    m_desired_stack_type = desired_stack_type;
    m_desired_stack_type_isSet = true;
}

bool OAIClusterUpdate::is_desired_stack_type_Set() const{
    return m_desired_stack_type_isSet;
}

bool OAIClusterUpdate::is_desired_stack_type_Valid() const{
    return m_desired_stack_type_isValid;
}

OAITpuConfig OAIClusterUpdate::getDesiredTpuConfig() const {
    return m_desired_tpu_config;
}
void OAIClusterUpdate::setDesiredTpuConfig(const OAITpuConfig &desired_tpu_config) {
    m_desired_tpu_config = desired_tpu_config;
    m_desired_tpu_config_isSet = true;
}

bool OAIClusterUpdate::is_desired_tpu_config_Set() const{
    return m_desired_tpu_config_isSet;
}

bool OAIClusterUpdate::is_desired_tpu_config_Valid() const{
    return m_desired_tpu_config_isValid;
}

OAIVerticalPodAutoscaling OAIClusterUpdate::getDesiredVerticalPodAutoscaling() const {
    return m_desired_vertical_pod_autoscaling;
}
void OAIClusterUpdate::setDesiredVerticalPodAutoscaling(const OAIVerticalPodAutoscaling &desired_vertical_pod_autoscaling) {
    m_desired_vertical_pod_autoscaling = desired_vertical_pod_autoscaling;
    m_desired_vertical_pod_autoscaling_isSet = true;
}

bool OAIClusterUpdate::is_desired_vertical_pod_autoscaling_Set() const{
    return m_desired_vertical_pod_autoscaling_isSet;
}

bool OAIClusterUpdate::is_desired_vertical_pod_autoscaling_Valid() const{
    return m_desired_vertical_pod_autoscaling_isValid;
}

OAIWorkloadALTSConfig OAIClusterUpdate::getDesiredWorkloadAltsConfig() const {
    return m_desired_workload_alts_config;
}
void OAIClusterUpdate::setDesiredWorkloadAltsConfig(const OAIWorkloadALTSConfig &desired_workload_alts_config) {
    m_desired_workload_alts_config = desired_workload_alts_config;
    m_desired_workload_alts_config_isSet = true;
}

bool OAIClusterUpdate::is_desired_workload_alts_config_Set() const{
    return m_desired_workload_alts_config_isSet;
}

bool OAIClusterUpdate::is_desired_workload_alts_config_Valid() const{
    return m_desired_workload_alts_config_isValid;
}

OAIWorkloadCertificates OAIClusterUpdate::getDesiredWorkloadCertificates() const {
    return m_desired_workload_certificates;
}
void OAIClusterUpdate::setDesiredWorkloadCertificates(const OAIWorkloadCertificates &desired_workload_certificates) {
    m_desired_workload_certificates = desired_workload_certificates;
    m_desired_workload_certificates_isSet = true;
}

bool OAIClusterUpdate::is_desired_workload_certificates_Set() const{
    return m_desired_workload_certificates_isSet;
}

bool OAIClusterUpdate::is_desired_workload_certificates_Valid() const{
    return m_desired_workload_certificates_isValid;
}

OAIWorkloadIdentityConfig OAIClusterUpdate::getDesiredWorkloadIdentityConfig() const {
    return m_desired_workload_identity_config;
}
void OAIClusterUpdate::setDesiredWorkloadIdentityConfig(const OAIWorkloadIdentityConfig &desired_workload_identity_config) {
    m_desired_workload_identity_config = desired_workload_identity_config;
    m_desired_workload_identity_config_isSet = true;
}

bool OAIClusterUpdate::is_desired_workload_identity_config_Set() const{
    return m_desired_workload_identity_config_isSet;
}

bool OAIClusterUpdate::is_desired_workload_identity_config_Valid() const{
    return m_desired_workload_identity_config_isValid;
}

OAIK8sBetaAPIConfig OAIClusterUpdate::getEnableK8sBetaApis() const {
    return m_enable_k8s_beta_apis;
}
void OAIClusterUpdate::setEnableK8sBetaApis(const OAIK8sBetaAPIConfig &enable_k8s_beta_apis) {
    m_enable_k8s_beta_apis = enable_k8s_beta_apis;
    m_enable_k8s_beta_apis_isSet = true;
}

bool OAIClusterUpdate::is_enable_k8s_beta_apis_Set() const{
    return m_enable_k8s_beta_apis_isSet;
}

bool OAIClusterUpdate::is_enable_k8s_beta_apis_Valid() const{
    return m_enable_k8s_beta_apis_isValid;
}

QString OAIClusterUpdate::getEtag() const {
    return m_etag;
}
void OAIClusterUpdate::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIClusterUpdate::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIClusterUpdate::is_etag_Valid() const{
    return m_etag_isValid;
}

OAIAdditionalPodRangesConfig OAIClusterUpdate::getRemovedAdditionalPodRangesConfig() const {
    return m_removed_additional_pod_ranges_config;
}
void OAIClusterUpdate::setRemovedAdditionalPodRangesConfig(const OAIAdditionalPodRangesConfig &removed_additional_pod_ranges_config) {
    m_removed_additional_pod_ranges_config = removed_additional_pod_ranges_config;
    m_removed_additional_pod_ranges_config_isSet = true;
}

bool OAIClusterUpdate::is_removed_additional_pod_ranges_config_Set() const{
    return m_removed_additional_pod_ranges_config_isSet;
}

bool OAIClusterUpdate::is_removed_additional_pod_ranges_config_Valid() const{
    return m_removed_additional_pod_ranges_config_isValid;
}

bool OAIClusterUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_pod_ranges_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_addons_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_authenticator_groups_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_autopilot_workload_policy_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_binary_authorization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_cluster_autoscaling.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_cluster_telemetry.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_cost_management_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_database_encryption.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_datapath_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_default_snat_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_dns_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_enable_fqdn_network_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_enable_private_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_fleet.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_gateway_api_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_gcfs_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_host_maintenance_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_identity_service_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_image_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_in_transit_encryption_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_intra_node_visibility_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_k8s_beta_apis.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_l4ilb_subsetting_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_logging_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_logging_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_master_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_master_authorized_networks_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_master_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_mesh_certificates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_monitoring_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_monitoring_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_network_performance_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_node_pool_auto_config_network_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_node_pool_auto_config_resource_manager_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_node_pool_autoscaling.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_node_pool_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_node_pool_logging_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_node_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_notification_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_parent_product_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_pod_security_policy_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_private_cluster_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_private_ipv6_google_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_protect_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_release_channel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_resource_usage_export_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_security_posture_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_service_external_ips_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_shielded_nodes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_stack_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_tpu_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_vertical_pod_autoscaling.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_workload_alts_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_workload_certificates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_workload_identity_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_k8s_beta_apis.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_removed_additional_pod_ranges_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClusterUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
