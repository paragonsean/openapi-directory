/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINodePool.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINodePool::OAINodePool(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINodePool::OAINodePool() {
    this->initializeModel();
}

OAINodePool::~OAINodePool() {}

void OAINodePool::initializeModel() {

    m_autoscaling_isSet = false;
    m_autoscaling_isValid = false;

    m_best_effort_provisioning_isSet = false;
    m_best_effort_provisioning_isValid = false;

    m_conditions_isSet = false;
    m_conditions_isValid = false;

    m_config_isSet = false;
    m_config_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_initial_node_count_isSet = false;
    m_initial_node_count_isValid = false;

    m_instance_group_urls_isSet = false;
    m_instance_group_urls_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_management_isSet = false;
    m_management_isValid = false;

    m_max_pods_constraint_isSet = false;
    m_max_pods_constraint_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_config_isSet = false;
    m_network_config_isValid = false;

    m_placement_policy_isSet = false;
    m_placement_policy_isValid = false;

    m_pod_ipv4_cidr_size_isSet = false;
    m_pod_ipv4_cidr_size_isValid = false;

    m_queued_provisioning_isSet = false;
    m_queued_provisioning_isValid = false;

    m_self_link_isSet = false;
    m_self_link_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_update_info_isSet = false;
    m_update_info_isValid = false;

    m_upgrade_settings_isSet = false;
    m_upgrade_settings_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAINodePool::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINodePool::fromJsonObject(QJsonObject json) {

    m_autoscaling_isValid = ::OpenAPI::fromJsonValue(m_autoscaling, json[QString("autoscaling")]);
    m_autoscaling_isSet = !json[QString("autoscaling")].isNull() && m_autoscaling_isValid;

    m_best_effort_provisioning_isValid = ::OpenAPI::fromJsonValue(m_best_effort_provisioning, json[QString("bestEffortProvisioning")]);
    m_best_effort_provisioning_isSet = !json[QString("bestEffortProvisioning")].isNull() && m_best_effort_provisioning_isValid;

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("conditions")]);
    m_conditions_isSet = !json[QString("conditions")].isNull() && m_conditions_isValid;

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_initial_node_count_isValid = ::OpenAPI::fromJsonValue(m_initial_node_count, json[QString("initialNodeCount")]);
    m_initial_node_count_isSet = !json[QString("initialNodeCount")].isNull() && m_initial_node_count_isValid;

    m_instance_group_urls_isValid = ::OpenAPI::fromJsonValue(m_instance_group_urls, json[QString("instanceGroupUrls")]);
    m_instance_group_urls_isSet = !json[QString("instanceGroupUrls")].isNull() && m_instance_group_urls_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;

    m_management_isValid = ::OpenAPI::fromJsonValue(m_management, json[QString("management")]);
    m_management_isSet = !json[QString("management")].isNull() && m_management_isValid;

    m_max_pods_constraint_isValid = ::OpenAPI::fromJsonValue(m_max_pods_constraint, json[QString("maxPodsConstraint")]);
    m_max_pods_constraint_isSet = !json[QString("maxPodsConstraint")].isNull() && m_max_pods_constraint_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_config_isValid = ::OpenAPI::fromJsonValue(m_network_config, json[QString("networkConfig")]);
    m_network_config_isSet = !json[QString("networkConfig")].isNull() && m_network_config_isValid;

    m_placement_policy_isValid = ::OpenAPI::fromJsonValue(m_placement_policy, json[QString("placementPolicy")]);
    m_placement_policy_isSet = !json[QString("placementPolicy")].isNull() && m_placement_policy_isValid;

    m_pod_ipv4_cidr_size_isValid = ::OpenAPI::fromJsonValue(m_pod_ipv4_cidr_size, json[QString("podIpv4CidrSize")]);
    m_pod_ipv4_cidr_size_isSet = !json[QString("podIpv4CidrSize")].isNull() && m_pod_ipv4_cidr_size_isValid;

    m_queued_provisioning_isValid = ::OpenAPI::fromJsonValue(m_queued_provisioning, json[QString("queuedProvisioning")]);
    m_queued_provisioning_isSet = !json[QString("queuedProvisioning")].isNull() && m_queued_provisioning_isValid;

    m_self_link_isValid = ::OpenAPI::fromJsonValue(m_self_link, json[QString("selfLink")]);
    m_self_link_isSet = !json[QString("selfLink")].isNull() && m_self_link_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("statusMessage")]);
    m_status_message_isSet = !json[QString("statusMessage")].isNull() && m_status_message_isValid;

    m_update_info_isValid = ::OpenAPI::fromJsonValue(m_update_info, json[QString("updateInfo")]);
    m_update_info_isSet = !json[QString("updateInfo")].isNull() && m_update_info_isValid;

    m_upgrade_settings_isValid = ::OpenAPI::fromJsonValue(m_upgrade_settings, json[QString("upgradeSettings")]);
    m_upgrade_settings_isSet = !json[QString("upgradeSettings")].isNull() && m_upgrade_settings_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAINodePool::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINodePool::asJsonObject() const {
    QJsonObject obj;
    if (m_autoscaling.isSet()) {
        obj.insert(QString("autoscaling"), ::OpenAPI::toJsonValue(m_autoscaling));
    }
    if (m_best_effort_provisioning.isSet()) {
        obj.insert(QString("bestEffortProvisioning"), ::OpenAPI::toJsonValue(m_best_effort_provisioning));
    }
    if (m_conditions.size() > 0) {
        obj.insert(QString("conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    if (m_config.isSet()) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_initial_node_count_isSet) {
        obj.insert(QString("initialNodeCount"), ::OpenAPI::toJsonValue(m_initial_node_count));
    }
    if (m_instance_group_urls.size() > 0) {
        obj.insert(QString("instanceGroupUrls"), ::OpenAPI::toJsonValue(m_instance_group_urls));
    }
    if (m_locations.size() > 0) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_management.isSet()) {
        obj.insert(QString("management"), ::OpenAPI::toJsonValue(m_management));
    }
    if (m_max_pods_constraint.isSet()) {
        obj.insert(QString("maxPodsConstraint"), ::OpenAPI::toJsonValue(m_max_pods_constraint));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_config.isSet()) {
        obj.insert(QString("networkConfig"), ::OpenAPI::toJsonValue(m_network_config));
    }
    if (m_placement_policy.isSet()) {
        obj.insert(QString("placementPolicy"), ::OpenAPI::toJsonValue(m_placement_policy));
    }
    if (m_pod_ipv4_cidr_size_isSet) {
        obj.insert(QString("podIpv4CidrSize"), ::OpenAPI::toJsonValue(m_pod_ipv4_cidr_size));
    }
    if (m_queued_provisioning.isSet()) {
        obj.insert(QString("queuedProvisioning"), ::OpenAPI::toJsonValue(m_queued_provisioning));
    }
    if (m_self_link_isSet) {
        obj.insert(QString("selfLink"), ::OpenAPI::toJsonValue(m_self_link));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("statusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_update_info.isSet()) {
        obj.insert(QString("updateInfo"), ::OpenAPI::toJsonValue(m_update_info));
    }
    if (m_upgrade_settings.isSet()) {
        obj.insert(QString("upgradeSettings"), ::OpenAPI::toJsonValue(m_upgrade_settings));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

OAINodePoolAutoscaling OAINodePool::getAutoscaling() const {
    return m_autoscaling;
}
void OAINodePool::setAutoscaling(const OAINodePoolAutoscaling &autoscaling) {
    m_autoscaling = autoscaling;
    m_autoscaling_isSet = true;
}

bool OAINodePool::is_autoscaling_Set() const{
    return m_autoscaling_isSet;
}

bool OAINodePool::is_autoscaling_Valid() const{
    return m_autoscaling_isValid;
}

OAIBestEffortProvisioning OAINodePool::getBestEffortProvisioning() const {
    return m_best_effort_provisioning;
}
void OAINodePool::setBestEffortProvisioning(const OAIBestEffortProvisioning &best_effort_provisioning) {
    m_best_effort_provisioning = best_effort_provisioning;
    m_best_effort_provisioning_isSet = true;
}

bool OAINodePool::is_best_effort_provisioning_Set() const{
    return m_best_effort_provisioning_isSet;
}

bool OAINodePool::is_best_effort_provisioning_Valid() const{
    return m_best_effort_provisioning_isValid;
}

QList<OAIStatusCondition> OAINodePool::getConditions() const {
    return m_conditions;
}
void OAINodePool::setConditions(const QList<OAIStatusCondition> &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAINodePool::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAINodePool::is_conditions_Valid() const{
    return m_conditions_isValid;
}

OAINodeConfig OAINodePool::getConfig() const {
    return m_config;
}
void OAINodePool::setConfig(const OAINodeConfig &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAINodePool::is_config_Set() const{
    return m_config_isSet;
}

bool OAINodePool::is_config_Valid() const{
    return m_config_isValid;
}

QString OAINodePool::getEtag() const {
    return m_etag;
}
void OAINodePool::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAINodePool::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAINodePool::is_etag_Valid() const{
    return m_etag_isValid;
}

qint32 OAINodePool::getInitialNodeCount() const {
    return m_initial_node_count;
}
void OAINodePool::setInitialNodeCount(const qint32 &initial_node_count) {
    m_initial_node_count = initial_node_count;
    m_initial_node_count_isSet = true;
}

bool OAINodePool::is_initial_node_count_Set() const{
    return m_initial_node_count_isSet;
}

bool OAINodePool::is_initial_node_count_Valid() const{
    return m_initial_node_count_isValid;
}

QList<QString> OAINodePool::getInstanceGroupUrls() const {
    return m_instance_group_urls;
}
void OAINodePool::setInstanceGroupUrls(const QList<QString> &instance_group_urls) {
    m_instance_group_urls = instance_group_urls;
    m_instance_group_urls_isSet = true;
}

bool OAINodePool::is_instance_group_urls_Set() const{
    return m_instance_group_urls_isSet;
}

bool OAINodePool::is_instance_group_urls_Valid() const{
    return m_instance_group_urls_isValid;
}

QList<QString> OAINodePool::getLocations() const {
    return m_locations;
}
void OAINodePool::setLocations(const QList<QString> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAINodePool::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAINodePool::is_locations_Valid() const{
    return m_locations_isValid;
}

OAINodeManagement OAINodePool::getManagement() const {
    return m_management;
}
void OAINodePool::setManagement(const OAINodeManagement &management) {
    m_management = management;
    m_management_isSet = true;
}

bool OAINodePool::is_management_Set() const{
    return m_management_isSet;
}

bool OAINodePool::is_management_Valid() const{
    return m_management_isValid;
}

OAIMaxPodsConstraint OAINodePool::getMaxPodsConstraint() const {
    return m_max_pods_constraint;
}
void OAINodePool::setMaxPodsConstraint(const OAIMaxPodsConstraint &max_pods_constraint) {
    m_max_pods_constraint = max_pods_constraint;
    m_max_pods_constraint_isSet = true;
}

bool OAINodePool::is_max_pods_constraint_Set() const{
    return m_max_pods_constraint_isSet;
}

bool OAINodePool::is_max_pods_constraint_Valid() const{
    return m_max_pods_constraint_isValid;
}

QString OAINodePool::getName() const {
    return m_name;
}
void OAINodePool::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINodePool::is_name_Set() const{
    return m_name_isSet;
}

bool OAINodePool::is_name_Valid() const{
    return m_name_isValid;
}

OAINodeNetworkConfig OAINodePool::getNetworkConfig() const {
    return m_network_config;
}
void OAINodePool::setNetworkConfig(const OAINodeNetworkConfig &network_config) {
    m_network_config = network_config;
    m_network_config_isSet = true;
}

bool OAINodePool::is_network_config_Set() const{
    return m_network_config_isSet;
}

bool OAINodePool::is_network_config_Valid() const{
    return m_network_config_isValid;
}

OAIPlacementPolicy OAINodePool::getPlacementPolicy() const {
    return m_placement_policy;
}
void OAINodePool::setPlacementPolicy(const OAIPlacementPolicy &placement_policy) {
    m_placement_policy = placement_policy;
    m_placement_policy_isSet = true;
}

bool OAINodePool::is_placement_policy_Set() const{
    return m_placement_policy_isSet;
}

bool OAINodePool::is_placement_policy_Valid() const{
    return m_placement_policy_isValid;
}

qint32 OAINodePool::getPodIpv4CidrSize() const {
    return m_pod_ipv4_cidr_size;
}
void OAINodePool::setPodIpv4CidrSize(const qint32 &pod_ipv4_cidr_size) {
    m_pod_ipv4_cidr_size = pod_ipv4_cidr_size;
    m_pod_ipv4_cidr_size_isSet = true;
}

bool OAINodePool::is_pod_ipv4_cidr_size_Set() const{
    return m_pod_ipv4_cidr_size_isSet;
}

bool OAINodePool::is_pod_ipv4_cidr_size_Valid() const{
    return m_pod_ipv4_cidr_size_isValid;
}

OAIQueuedProvisioning OAINodePool::getQueuedProvisioning() const {
    return m_queued_provisioning;
}
void OAINodePool::setQueuedProvisioning(const OAIQueuedProvisioning &queued_provisioning) {
    m_queued_provisioning = queued_provisioning;
    m_queued_provisioning_isSet = true;
}

bool OAINodePool::is_queued_provisioning_Set() const{
    return m_queued_provisioning_isSet;
}

bool OAINodePool::is_queued_provisioning_Valid() const{
    return m_queued_provisioning_isValid;
}

QString OAINodePool::getSelfLink() const {
    return m_self_link;
}
void OAINodePool::setSelfLink(const QString &self_link) {
    m_self_link = self_link;
    m_self_link_isSet = true;
}

bool OAINodePool::is_self_link_Set() const{
    return m_self_link_isSet;
}

bool OAINodePool::is_self_link_Valid() const{
    return m_self_link_isValid;
}

QString OAINodePool::getStatus() const {
    return m_status;
}
void OAINodePool::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAINodePool::is_status_Set() const{
    return m_status_isSet;
}

bool OAINodePool::is_status_Valid() const{
    return m_status_isValid;
}

QString OAINodePool::getStatusMessage() const {
    return m_status_message;
}
void OAINodePool::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAINodePool::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAINodePool::is_status_message_Valid() const{
    return m_status_message_isValid;
}

OAIUpdateInfo OAINodePool::getUpdateInfo() const {
    return m_update_info;
}
void OAINodePool::setUpdateInfo(const OAIUpdateInfo &update_info) {
    m_update_info = update_info;
    m_update_info_isSet = true;
}

bool OAINodePool::is_update_info_Set() const{
    return m_update_info_isSet;
}

bool OAINodePool::is_update_info_Valid() const{
    return m_update_info_isValid;
}

OAIUpgradeSettings OAINodePool::getUpgradeSettings() const {
    return m_upgrade_settings;
}
void OAINodePool::setUpgradeSettings(const OAIUpgradeSettings &upgrade_settings) {
    m_upgrade_settings = upgrade_settings;
    m_upgrade_settings_isSet = true;
}

bool OAINodePool::is_upgrade_settings_Set() const{
    return m_upgrade_settings_isSet;
}

bool OAINodePool::is_upgrade_settings_Valid() const{
    return m_upgrade_settings_isValid;
}

QString OAINodePool::getVersion() const {
    return m_version;
}
void OAINodePool::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAINodePool::is_version_Set() const{
    return m_version_isSet;
}

bool OAINodePool::is_version_Valid() const{
    return m_version_isValid;
}

bool OAINodePool::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_autoscaling.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_best_effort_provisioning.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_node_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_group_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_management.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_pods_constraint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pod_ipv4_cidr_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queued_provisioning.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINodePool::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
