/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReleaseChannelConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReleaseChannelConfig::OAIReleaseChannelConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReleaseChannelConfig::OAIReleaseChannelConfig() {
    this->initializeModel();
}

OAIReleaseChannelConfig::~OAIReleaseChannelConfig() {}

void OAIReleaseChannelConfig::initializeModel() {

    m_available_versions_isSet = false;
    m_available_versions_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_default_version_isSet = false;
    m_default_version_isValid = false;

    m_valid_versions_isSet = false;
    m_valid_versions_isValid = false;
}

void OAIReleaseChannelConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReleaseChannelConfig::fromJsonObject(QJsonObject json) {

    m_available_versions_isValid = ::OpenAPI::fromJsonValue(m_available_versions, json[QString("availableVersions")]);
    m_available_versions_isSet = !json[QString("availableVersions")].isNull() && m_available_versions_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_default_version_isValid = ::OpenAPI::fromJsonValue(m_default_version, json[QString("defaultVersion")]);
    m_default_version_isSet = !json[QString("defaultVersion")].isNull() && m_default_version_isValid;

    m_valid_versions_isValid = ::OpenAPI::fromJsonValue(m_valid_versions, json[QString("validVersions")]);
    m_valid_versions_isSet = !json[QString("validVersions")].isNull() && m_valid_versions_isValid;
}

QString OAIReleaseChannelConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReleaseChannelConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_available_versions.size() > 0) {
        obj.insert(QString("availableVersions"), ::OpenAPI::toJsonValue(m_available_versions));
    }
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_default_version_isSet) {
        obj.insert(QString("defaultVersion"), ::OpenAPI::toJsonValue(m_default_version));
    }
    if (m_valid_versions.size() > 0) {
        obj.insert(QString("validVersions"), ::OpenAPI::toJsonValue(m_valid_versions));
    }
    return obj;
}

QList<OAIAvailableVersion> OAIReleaseChannelConfig::getAvailableVersions() const {
    return m_available_versions;
}
void OAIReleaseChannelConfig::setAvailableVersions(const QList<OAIAvailableVersion> &available_versions) {
    m_available_versions = available_versions;
    m_available_versions_isSet = true;
}

bool OAIReleaseChannelConfig::is_available_versions_Set() const{
    return m_available_versions_isSet;
}

bool OAIReleaseChannelConfig::is_available_versions_Valid() const{
    return m_available_versions_isValid;
}

QString OAIReleaseChannelConfig::getChannel() const {
    return m_channel;
}
void OAIReleaseChannelConfig::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIReleaseChannelConfig::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIReleaseChannelConfig::is_channel_Valid() const{
    return m_channel_isValid;
}

QString OAIReleaseChannelConfig::getDefaultVersion() const {
    return m_default_version;
}
void OAIReleaseChannelConfig::setDefaultVersion(const QString &default_version) {
    m_default_version = default_version;
    m_default_version_isSet = true;
}

bool OAIReleaseChannelConfig::is_default_version_Set() const{
    return m_default_version_isSet;
}

bool OAIReleaseChannelConfig::is_default_version_Valid() const{
    return m_default_version_isValid;
}

QList<QString> OAIReleaseChannelConfig::getValidVersions() const {
    return m_valid_versions;
}
void OAIReleaseChannelConfig::setValidVersions(const QList<QString> &valid_versions) {
    m_valid_versions = valid_versions;
    m_valid_versions_isSet = true;
}

bool OAIReleaseChannelConfig::is_valid_versions_Set() const{
    return m_valid_versions_isSet;
}

bool OAIReleaseChannelConfig::is_valid_versions_Valid() const{
    return m_valid_versions_isValid;
}

bool OAIReleaseChannelConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReleaseChannelConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
