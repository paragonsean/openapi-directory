/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRangeInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRangeInfo::OAIRangeInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRangeInfo::OAIRangeInfo() {
    this->initializeModel();
}

OAIRangeInfo::~OAIRangeInfo() {}

void OAIRangeInfo::initializeModel() {

    m_range_name_isSet = false;
    m_range_name_isValid = false;

    m_utilization_isSet = false;
    m_utilization_isValid = false;
}

void OAIRangeInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRangeInfo::fromJsonObject(QJsonObject json) {

    m_range_name_isValid = ::OpenAPI::fromJsonValue(m_range_name, json[QString("rangeName")]);
    m_range_name_isSet = !json[QString("rangeName")].isNull() && m_range_name_isValid;

    m_utilization_isValid = ::OpenAPI::fromJsonValue(m_utilization, json[QString("utilization")]);
    m_utilization_isSet = !json[QString("utilization")].isNull() && m_utilization_isValid;
}

QString OAIRangeInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRangeInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_range_name_isSet) {
        obj.insert(QString("rangeName"), ::OpenAPI::toJsonValue(m_range_name));
    }
    if (m_utilization_isSet) {
        obj.insert(QString("utilization"), ::OpenAPI::toJsonValue(m_utilization));
    }
    return obj;
}

QString OAIRangeInfo::getRangeName() const {
    return m_range_name;
}
void OAIRangeInfo::setRangeName(const QString &range_name) {
    m_range_name = range_name;
    m_range_name_isSet = true;
}

bool OAIRangeInfo::is_range_name_Set() const{
    return m_range_name_isSet;
}

bool OAIRangeInfo::is_range_name_Valid() const{
    return m_range_name_isValid;
}

double OAIRangeInfo::getUtilization() const {
    return m_utilization;
}
void OAIRangeInfo::setUtilization(const double &utilization) {
    m_utilization = utilization;
    m_utilization_isSet = true;
}

bool OAIRangeInfo::is_utilization_Set() const{
    return m_utilization_isSet;
}

bool OAIRangeInfo::is_utilization_Valid() const{
    return m_utilization_isValid;
}

bool OAIRangeInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_range_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utilization_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRangeInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
