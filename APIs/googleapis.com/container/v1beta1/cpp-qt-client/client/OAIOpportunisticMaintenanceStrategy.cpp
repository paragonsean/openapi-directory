/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOpportunisticMaintenanceStrategy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOpportunisticMaintenanceStrategy::OAIOpportunisticMaintenanceStrategy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOpportunisticMaintenanceStrategy::OAIOpportunisticMaintenanceStrategy() {
    this->initializeModel();
}

OAIOpportunisticMaintenanceStrategy::~OAIOpportunisticMaintenanceStrategy() {}

void OAIOpportunisticMaintenanceStrategy::initializeModel() {

    m_maintenance_availability_window_isSet = false;
    m_maintenance_availability_window_isValid = false;

    m_min_nodes_per_pool_isSet = false;
    m_min_nodes_per_pool_isValid = false;

    m_node_idle_time_window_isSet = false;
    m_node_idle_time_window_isValid = false;
}

void OAIOpportunisticMaintenanceStrategy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOpportunisticMaintenanceStrategy::fromJsonObject(QJsonObject json) {

    m_maintenance_availability_window_isValid = ::OpenAPI::fromJsonValue(m_maintenance_availability_window, json[QString("maintenanceAvailabilityWindow")]);
    m_maintenance_availability_window_isSet = !json[QString("maintenanceAvailabilityWindow")].isNull() && m_maintenance_availability_window_isValid;

    m_min_nodes_per_pool_isValid = ::OpenAPI::fromJsonValue(m_min_nodes_per_pool, json[QString("minNodesPerPool")]);
    m_min_nodes_per_pool_isSet = !json[QString("minNodesPerPool")].isNull() && m_min_nodes_per_pool_isValid;

    m_node_idle_time_window_isValid = ::OpenAPI::fromJsonValue(m_node_idle_time_window, json[QString("nodeIdleTimeWindow")]);
    m_node_idle_time_window_isSet = !json[QString("nodeIdleTimeWindow")].isNull() && m_node_idle_time_window_isValid;
}

QString OAIOpportunisticMaintenanceStrategy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOpportunisticMaintenanceStrategy::asJsonObject() const {
    QJsonObject obj;
    if (m_maintenance_availability_window_isSet) {
        obj.insert(QString("maintenanceAvailabilityWindow"), ::OpenAPI::toJsonValue(m_maintenance_availability_window));
    }
    if (m_min_nodes_per_pool_isSet) {
        obj.insert(QString("minNodesPerPool"), ::OpenAPI::toJsonValue(m_min_nodes_per_pool));
    }
    if (m_node_idle_time_window_isSet) {
        obj.insert(QString("nodeIdleTimeWindow"), ::OpenAPI::toJsonValue(m_node_idle_time_window));
    }
    return obj;
}

QString OAIOpportunisticMaintenanceStrategy::getMaintenanceAvailabilityWindow() const {
    return m_maintenance_availability_window;
}
void OAIOpportunisticMaintenanceStrategy::setMaintenanceAvailabilityWindow(const QString &maintenance_availability_window) {
    m_maintenance_availability_window = maintenance_availability_window;
    m_maintenance_availability_window_isSet = true;
}

bool OAIOpportunisticMaintenanceStrategy::is_maintenance_availability_window_Set() const{
    return m_maintenance_availability_window_isSet;
}

bool OAIOpportunisticMaintenanceStrategy::is_maintenance_availability_window_Valid() const{
    return m_maintenance_availability_window_isValid;
}

QString OAIOpportunisticMaintenanceStrategy::getMinNodesPerPool() const {
    return m_min_nodes_per_pool;
}
void OAIOpportunisticMaintenanceStrategy::setMinNodesPerPool(const QString &min_nodes_per_pool) {
    m_min_nodes_per_pool = min_nodes_per_pool;
    m_min_nodes_per_pool_isSet = true;
}

bool OAIOpportunisticMaintenanceStrategy::is_min_nodes_per_pool_Set() const{
    return m_min_nodes_per_pool_isSet;
}

bool OAIOpportunisticMaintenanceStrategy::is_min_nodes_per_pool_Valid() const{
    return m_min_nodes_per_pool_isValid;
}

QString OAIOpportunisticMaintenanceStrategy::getNodeIdleTimeWindow() const {
    return m_node_idle_time_window;
}
void OAIOpportunisticMaintenanceStrategy::setNodeIdleTimeWindow(const QString &node_idle_time_window) {
    m_node_idle_time_window = node_idle_time_window;
    m_node_idle_time_window_isSet = true;
}

bool OAIOpportunisticMaintenanceStrategy::is_node_idle_time_window_Set() const{
    return m_node_idle_time_window_isSet;
}

bool OAIOpportunisticMaintenanceStrategy::is_node_idle_time_window_Valid() const{
    return m_node_idle_time_window_isValid;
}

bool OAIOpportunisticMaintenanceStrategy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_maintenance_availability_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_nodes_per_pool_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_idle_time_window_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOpportunisticMaintenanceStrategy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
