/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMonitoringConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMonitoringConfig::OAIMonitoringConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMonitoringConfig::OAIMonitoringConfig() {
    this->initializeModel();
}

OAIMonitoringConfig::~OAIMonitoringConfig() {}

void OAIMonitoringConfig::initializeModel() {

    m_advanced_datapath_observability_config_isSet = false;
    m_advanced_datapath_observability_config_isValid = false;

    m_component_config_isSet = false;
    m_component_config_isValid = false;

    m_managed_prometheus_config_isSet = false;
    m_managed_prometheus_config_isValid = false;
}

void OAIMonitoringConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMonitoringConfig::fromJsonObject(QJsonObject json) {

    m_advanced_datapath_observability_config_isValid = ::OpenAPI::fromJsonValue(m_advanced_datapath_observability_config, json[QString("advancedDatapathObservabilityConfig")]);
    m_advanced_datapath_observability_config_isSet = !json[QString("advancedDatapathObservabilityConfig")].isNull() && m_advanced_datapath_observability_config_isValid;

    m_component_config_isValid = ::OpenAPI::fromJsonValue(m_component_config, json[QString("componentConfig")]);
    m_component_config_isSet = !json[QString("componentConfig")].isNull() && m_component_config_isValid;

    m_managed_prometheus_config_isValid = ::OpenAPI::fromJsonValue(m_managed_prometheus_config, json[QString("managedPrometheusConfig")]);
    m_managed_prometheus_config_isSet = !json[QString("managedPrometheusConfig")].isNull() && m_managed_prometheus_config_isValid;
}

QString OAIMonitoringConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMonitoringConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_advanced_datapath_observability_config.isSet()) {
        obj.insert(QString("advancedDatapathObservabilityConfig"), ::OpenAPI::toJsonValue(m_advanced_datapath_observability_config));
    }
    if (m_component_config.isSet()) {
        obj.insert(QString("componentConfig"), ::OpenAPI::toJsonValue(m_component_config));
    }
    if (m_managed_prometheus_config.isSet()) {
        obj.insert(QString("managedPrometheusConfig"), ::OpenAPI::toJsonValue(m_managed_prometheus_config));
    }
    return obj;
}

OAIAdvancedDatapathObservabilityConfig OAIMonitoringConfig::getAdvancedDatapathObservabilityConfig() const {
    return m_advanced_datapath_observability_config;
}
void OAIMonitoringConfig::setAdvancedDatapathObservabilityConfig(const OAIAdvancedDatapathObservabilityConfig &advanced_datapath_observability_config) {
    m_advanced_datapath_observability_config = advanced_datapath_observability_config;
    m_advanced_datapath_observability_config_isSet = true;
}

bool OAIMonitoringConfig::is_advanced_datapath_observability_config_Set() const{
    return m_advanced_datapath_observability_config_isSet;
}

bool OAIMonitoringConfig::is_advanced_datapath_observability_config_Valid() const{
    return m_advanced_datapath_observability_config_isValid;
}

OAIMonitoringComponentConfig OAIMonitoringConfig::getComponentConfig() const {
    return m_component_config;
}
void OAIMonitoringConfig::setComponentConfig(const OAIMonitoringComponentConfig &component_config) {
    m_component_config = component_config;
    m_component_config_isSet = true;
}

bool OAIMonitoringConfig::is_component_config_Set() const{
    return m_component_config_isSet;
}

bool OAIMonitoringConfig::is_component_config_Valid() const{
    return m_component_config_isValid;
}

OAIManagedPrometheusConfig OAIMonitoringConfig::getManagedPrometheusConfig() const {
    return m_managed_prometheus_config;
}
void OAIMonitoringConfig::setManagedPrometheusConfig(const OAIManagedPrometheusConfig &managed_prometheus_config) {
    m_managed_prometheus_config = managed_prometheus_config;
    m_managed_prometheus_config_isSet = true;
}

bool OAIMonitoringConfig::is_managed_prometheus_config_Set() const{
    return m_managed_prometheus_config_isSet;
}

bool OAIMonitoringConfig::is_managed_prometheus_config_Valid() const{
    return m_managed_prometheus_config_isValid;
}

bool OAIMonitoringConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advanced_datapath_observability_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_prometheus_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMonitoringConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
