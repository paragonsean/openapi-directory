/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShieldedInstanceConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShieldedInstanceConfig::OAIShieldedInstanceConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShieldedInstanceConfig::OAIShieldedInstanceConfig() {
    this->initializeModel();
}

OAIShieldedInstanceConfig::~OAIShieldedInstanceConfig() {}

void OAIShieldedInstanceConfig::initializeModel() {

    m_enable_integrity_monitoring_isSet = false;
    m_enable_integrity_monitoring_isValid = false;

    m_enable_secure_boot_isSet = false;
    m_enable_secure_boot_isValid = false;
}

void OAIShieldedInstanceConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShieldedInstanceConfig::fromJsonObject(QJsonObject json) {

    m_enable_integrity_monitoring_isValid = ::OpenAPI::fromJsonValue(m_enable_integrity_monitoring, json[QString("enableIntegrityMonitoring")]);
    m_enable_integrity_monitoring_isSet = !json[QString("enableIntegrityMonitoring")].isNull() && m_enable_integrity_monitoring_isValid;

    m_enable_secure_boot_isValid = ::OpenAPI::fromJsonValue(m_enable_secure_boot, json[QString("enableSecureBoot")]);
    m_enable_secure_boot_isSet = !json[QString("enableSecureBoot")].isNull() && m_enable_secure_boot_isValid;
}

QString OAIShieldedInstanceConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShieldedInstanceConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_enable_integrity_monitoring_isSet) {
        obj.insert(QString("enableIntegrityMonitoring"), ::OpenAPI::toJsonValue(m_enable_integrity_monitoring));
    }
    if (m_enable_secure_boot_isSet) {
        obj.insert(QString("enableSecureBoot"), ::OpenAPI::toJsonValue(m_enable_secure_boot));
    }
    return obj;
}

bool OAIShieldedInstanceConfig::isEnableIntegrityMonitoring() const {
    return m_enable_integrity_monitoring;
}
void OAIShieldedInstanceConfig::setEnableIntegrityMonitoring(const bool &enable_integrity_monitoring) {
    m_enable_integrity_monitoring = enable_integrity_monitoring;
    m_enable_integrity_monitoring_isSet = true;
}

bool OAIShieldedInstanceConfig::is_enable_integrity_monitoring_Set() const{
    return m_enable_integrity_monitoring_isSet;
}

bool OAIShieldedInstanceConfig::is_enable_integrity_monitoring_Valid() const{
    return m_enable_integrity_monitoring_isValid;
}

bool OAIShieldedInstanceConfig::isEnableSecureBoot() const {
    return m_enable_secure_boot;
}
void OAIShieldedInstanceConfig::setEnableSecureBoot(const bool &enable_secure_boot) {
    m_enable_secure_boot = enable_secure_boot;
    m_enable_secure_boot_isSet = true;
}

bool OAIShieldedInstanceConfig::is_enable_secure_boot_Set() const{
    return m_enable_secure_boot_isSet;
}

bool OAIShieldedInstanceConfig::is_enable_secure_boot_Valid() const{
    return m_enable_secure_boot_isValid;
}

bool OAIShieldedInstanceConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enable_integrity_monitoring_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_secure_boot_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShieldedInstanceConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
