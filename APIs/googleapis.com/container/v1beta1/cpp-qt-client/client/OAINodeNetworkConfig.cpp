/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINodeNetworkConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINodeNetworkConfig::OAINodeNetworkConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINodeNetworkConfig::OAINodeNetworkConfig() {
    this->initializeModel();
}

OAINodeNetworkConfig::~OAINodeNetworkConfig() {}

void OAINodeNetworkConfig::initializeModel() {

    m_additional_node_network_configs_isSet = false;
    m_additional_node_network_configs_isValid = false;

    m_additional_pod_network_configs_isSet = false;
    m_additional_pod_network_configs_isValid = false;

    m_create_pod_range_isSet = false;
    m_create_pod_range_isValid = false;

    m_enable_private_nodes_isSet = false;
    m_enable_private_nodes_isValid = false;

    m_network_performance_config_isSet = false;
    m_network_performance_config_isValid = false;

    m_pod_cidr_overprovision_config_isSet = false;
    m_pod_cidr_overprovision_config_isValid = false;

    m_pod_ipv4_cidr_block_isSet = false;
    m_pod_ipv4_cidr_block_isValid = false;

    m_pod_ipv4_range_utilization_isSet = false;
    m_pod_ipv4_range_utilization_isValid = false;

    m_pod_range_isSet = false;
    m_pod_range_isValid = false;
}

void OAINodeNetworkConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINodeNetworkConfig::fromJsonObject(QJsonObject json) {

    m_additional_node_network_configs_isValid = ::OpenAPI::fromJsonValue(m_additional_node_network_configs, json[QString("additionalNodeNetworkConfigs")]);
    m_additional_node_network_configs_isSet = !json[QString("additionalNodeNetworkConfigs")].isNull() && m_additional_node_network_configs_isValid;

    m_additional_pod_network_configs_isValid = ::OpenAPI::fromJsonValue(m_additional_pod_network_configs, json[QString("additionalPodNetworkConfigs")]);
    m_additional_pod_network_configs_isSet = !json[QString("additionalPodNetworkConfigs")].isNull() && m_additional_pod_network_configs_isValid;

    m_create_pod_range_isValid = ::OpenAPI::fromJsonValue(m_create_pod_range, json[QString("createPodRange")]);
    m_create_pod_range_isSet = !json[QString("createPodRange")].isNull() && m_create_pod_range_isValid;

    m_enable_private_nodes_isValid = ::OpenAPI::fromJsonValue(m_enable_private_nodes, json[QString("enablePrivateNodes")]);
    m_enable_private_nodes_isSet = !json[QString("enablePrivateNodes")].isNull() && m_enable_private_nodes_isValid;

    m_network_performance_config_isValid = ::OpenAPI::fromJsonValue(m_network_performance_config, json[QString("networkPerformanceConfig")]);
    m_network_performance_config_isSet = !json[QString("networkPerformanceConfig")].isNull() && m_network_performance_config_isValid;

    m_pod_cidr_overprovision_config_isValid = ::OpenAPI::fromJsonValue(m_pod_cidr_overprovision_config, json[QString("podCidrOverprovisionConfig")]);
    m_pod_cidr_overprovision_config_isSet = !json[QString("podCidrOverprovisionConfig")].isNull() && m_pod_cidr_overprovision_config_isValid;

    m_pod_ipv4_cidr_block_isValid = ::OpenAPI::fromJsonValue(m_pod_ipv4_cidr_block, json[QString("podIpv4CidrBlock")]);
    m_pod_ipv4_cidr_block_isSet = !json[QString("podIpv4CidrBlock")].isNull() && m_pod_ipv4_cidr_block_isValid;

    m_pod_ipv4_range_utilization_isValid = ::OpenAPI::fromJsonValue(m_pod_ipv4_range_utilization, json[QString("podIpv4RangeUtilization")]);
    m_pod_ipv4_range_utilization_isSet = !json[QString("podIpv4RangeUtilization")].isNull() && m_pod_ipv4_range_utilization_isValid;

    m_pod_range_isValid = ::OpenAPI::fromJsonValue(m_pod_range, json[QString("podRange")]);
    m_pod_range_isSet = !json[QString("podRange")].isNull() && m_pod_range_isValid;
}

QString OAINodeNetworkConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINodeNetworkConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_node_network_configs.size() > 0) {
        obj.insert(QString("additionalNodeNetworkConfigs"), ::OpenAPI::toJsonValue(m_additional_node_network_configs));
    }
    if (m_additional_pod_network_configs.size() > 0) {
        obj.insert(QString("additionalPodNetworkConfigs"), ::OpenAPI::toJsonValue(m_additional_pod_network_configs));
    }
    if (m_create_pod_range_isSet) {
        obj.insert(QString("createPodRange"), ::OpenAPI::toJsonValue(m_create_pod_range));
    }
    if (m_enable_private_nodes_isSet) {
        obj.insert(QString("enablePrivateNodes"), ::OpenAPI::toJsonValue(m_enable_private_nodes));
    }
    if (m_network_performance_config.isSet()) {
        obj.insert(QString("networkPerformanceConfig"), ::OpenAPI::toJsonValue(m_network_performance_config));
    }
    if (m_pod_cidr_overprovision_config.isSet()) {
        obj.insert(QString("podCidrOverprovisionConfig"), ::OpenAPI::toJsonValue(m_pod_cidr_overprovision_config));
    }
    if (m_pod_ipv4_cidr_block_isSet) {
        obj.insert(QString("podIpv4CidrBlock"), ::OpenAPI::toJsonValue(m_pod_ipv4_cidr_block));
    }
    if (m_pod_ipv4_range_utilization_isSet) {
        obj.insert(QString("podIpv4RangeUtilization"), ::OpenAPI::toJsonValue(m_pod_ipv4_range_utilization));
    }
    if (m_pod_range_isSet) {
        obj.insert(QString("podRange"), ::OpenAPI::toJsonValue(m_pod_range));
    }
    return obj;
}

QList<OAIAdditionalNodeNetworkConfig> OAINodeNetworkConfig::getAdditionalNodeNetworkConfigs() const {
    return m_additional_node_network_configs;
}
void OAINodeNetworkConfig::setAdditionalNodeNetworkConfigs(const QList<OAIAdditionalNodeNetworkConfig> &additional_node_network_configs) {
    m_additional_node_network_configs = additional_node_network_configs;
    m_additional_node_network_configs_isSet = true;
}

bool OAINodeNetworkConfig::is_additional_node_network_configs_Set() const{
    return m_additional_node_network_configs_isSet;
}

bool OAINodeNetworkConfig::is_additional_node_network_configs_Valid() const{
    return m_additional_node_network_configs_isValid;
}

QList<OAIAdditionalPodNetworkConfig> OAINodeNetworkConfig::getAdditionalPodNetworkConfigs() const {
    return m_additional_pod_network_configs;
}
void OAINodeNetworkConfig::setAdditionalPodNetworkConfigs(const QList<OAIAdditionalPodNetworkConfig> &additional_pod_network_configs) {
    m_additional_pod_network_configs = additional_pod_network_configs;
    m_additional_pod_network_configs_isSet = true;
}

bool OAINodeNetworkConfig::is_additional_pod_network_configs_Set() const{
    return m_additional_pod_network_configs_isSet;
}

bool OAINodeNetworkConfig::is_additional_pod_network_configs_Valid() const{
    return m_additional_pod_network_configs_isValid;
}

bool OAINodeNetworkConfig::isCreatePodRange() const {
    return m_create_pod_range;
}
void OAINodeNetworkConfig::setCreatePodRange(const bool &create_pod_range) {
    m_create_pod_range = create_pod_range;
    m_create_pod_range_isSet = true;
}

bool OAINodeNetworkConfig::is_create_pod_range_Set() const{
    return m_create_pod_range_isSet;
}

bool OAINodeNetworkConfig::is_create_pod_range_Valid() const{
    return m_create_pod_range_isValid;
}

bool OAINodeNetworkConfig::isEnablePrivateNodes() const {
    return m_enable_private_nodes;
}
void OAINodeNetworkConfig::setEnablePrivateNodes(const bool &enable_private_nodes) {
    m_enable_private_nodes = enable_private_nodes;
    m_enable_private_nodes_isSet = true;
}

bool OAINodeNetworkConfig::is_enable_private_nodes_Set() const{
    return m_enable_private_nodes_isSet;
}

bool OAINodeNetworkConfig::is_enable_private_nodes_Valid() const{
    return m_enable_private_nodes_isValid;
}

OAINetworkPerformanceConfig OAINodeNetworkConfig::getNetworkPerformanceConfig() const {
    return m_network_performance_config;
}
void OAINodeNetworkConfig::setNetworkPerformanceConfig(const OAINetworkPerformanceConfig &network_performance_config) {
    m_network_performance_config = network_performance_config;
    m_network_performance_config_isSet = true;
}

bool OAINodeNetworkConfig::is_network_performance_config_Set() const{
    return m_network_performance_config_isSet;
}

bool OAINodeNetworkConfig::is_network_performance_config_Valid() const{
    return m_network_performance_config_isValid;
}

OAIPodCIDROverprovisionConfig OAINodeNetworkConfig::getPodCidrOverprovisionConfig() const {
    return m_pod_cidr_overprovision_config;
}
void OAINodeNetworkConfig::setPodCidrOverprovisionConfig(const OAIPodCIDROverprovisionConfig &pod_cidr_overprovision_config) {
    m_pod_cidr_overprovision_config = pod_cidr_overprovision_config;
    m_pod_cidr_overprovision_config_isSet = true;
}

bool OAINodeNetworkConfig::is_pod_cidr_overprovision_config_Set() const{
    return m_pod_cidr_overprovision_config_isSet;
}

bool OAINodeNetworkConfig::is_pod_cidr_overprovision_config_Valid() const{
    return m_pod_cidr_overprovision_config_isValid;
}

QString OAINodeNetworkConfig::getPodIpv4CidrBlock() const {
    return m_pod_ipv4_cidr_block;
}
void OAINodeNetworkConfig::setPodIpv4CidrBlock(const QString &pod_ipv4_cidr_block) {
    m_pod_ipv4_cidr_block = pod_ipv4_cidr_block;
    m_pod_ipv4_cidr_block_isSet = true;
}

bool OAINodeNetworkConfig::is_pod_ipv4_cidr_block_Set() const{
    return m_pod_ipv4_cidr_block_isSet;
}

bool OAINodeNetworkConfig::is_pod_ipv4_cidr_block_Valid() const{
    return m_pod_ipv4_cidr_block_isValid;
}

double OAINodeNetworkConfig::getPodIpv4RangeUtilization() const {
    return m_pod_ipv4_range_utilization;
}
void OAINodeNetworkConfig::setPodIpv4RangeUtilization(const double &pod_ipv4_range_utilization) {
    m_pod_ipv4_range_utilization = pod_ipv4_range_utilization;
    m_pod_ipv4_range_utilization_isSet = true;
}

bool OAINodeNetworkConfig::is_pod_ipv4_range_utilization_Set() const{
    return m_pod_ipv4_range_utilization_isSet;
}

bool OAINodeNetworkConfig::is_pod_ipv4_range_utilization_Valid() const{
    return m_pod_ipv4_range_utilization_isValid;
}

QString OAINodeNetworkConfig::getPodRange() const {
    return m_pod_range;
}
void OAINodeNetworkConfig::setPodRange(const QString &pod_range) {
    m_pod_range = pod_range;
    m_pod_range_isSet = true;
}

bool OAINodeNetworkConfig::is_pod_range_Set() const{
    return m_pod_range_isSet;
}

bool OAINodeNetworkConfig::is_pod_range_Valid() const{
    return m_pod_range_isValid;
}

bool OAINodeNetworkConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_node_network_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_pod_network_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_pod_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_private_nodes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_performance_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pod_cidr_overprovision_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pod_ipv4_cidr_block_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pod_ipv4_range_utilization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pod_range_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINodeNetworkConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
