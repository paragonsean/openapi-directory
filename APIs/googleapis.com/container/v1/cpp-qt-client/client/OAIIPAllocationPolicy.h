/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIIPAllocationPolicy.h
 *
 * Configuration for controlling how IPs are allocated in the cluster.
 */

#ifndef OAIIPAllocationPolicy_H
#define OAIIPAllocationPolicy_H

#include <QJsonObject>

#include "OAIAdditionalPodRangesConfig.h"
#include "OAIPodCIDROverprovisionConfig.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAdditionalPodRangesConfig;
class OAIPodCIDROverprovisionConfig;

class OAIIPAllocationPolicy : public OAIObject {
public:
    OAIIPAllocationPolicy();
    OAIIPAllocationPolicy(QString json);
    ~OAIIPAllocationPolicy() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAdditionalPodRangesConfig getAdditionalPodRangesConfig() const;
    void setAdditionalPodRangesConfig(const OAIAdditionalPodRangesConfig &additional_pod_ranges_config);
    bool is_additional_pod_ranges_config_Set() const;
    bool is_additional_pod_ranges_config_Valid() const;

    Q_DECL_DEPRECATED QString getClusterIpv4Cidr() const;
    Q_DECL_DEPRECATED void setClusterIpv4Cidr(const QString &cluster_ipv4_cidr);
    Q_DECL_DEPRECATED bool is_cluster_ipv4_cidr_Set() const;
    Q_DECL_DEPRECATED bool is_cluster_ipv4_cidr_Valid() const;

    QString getClusterIpv4CidrBlock() const;
    void setClusterIpv4CidrBlock(const QString &cluster_ipv4_cidr_block);
    bool is_cluster_ipv4_cidr_block_Set() const;
    bool is_cluster_ipv4_cidr_block_Valid() const;

    QString getClusterSecondaryRangeName() const;
    void setClusterSecondaryRangeName(const QString &cluster_secondary_range_name);
    bool is_cluster_secondary_range_name_Set() const;
    bool is_cluster_secondary_range_name_Valid() const;

    bool isCreateSubnetwork() const;
    void setCreateSubnetwork(const bool &create_subnetwork);
    bool is_create_subnetwork_Set() const;
    bool is_create_subnetwork_Valid() const;

    double getDefaultPodIpv4RangeUtilization() const;
    void setDefaultPodIpv4RangeUtilization(const double &default_pod_ipv4_range_utilization);
    bool is_default_pod_ipv4_range_utilization_Set() const;
    bool is_default_pod_ipv4_range_utilization_Valid() const;

    QString getIpv6AccessType() const;
    void setIpv6AccessType(const QString &ipv6_access_type);
    bool is_ipv6_access_type_Set() const;
    bool is_ipv6_access_type_Valid() const;

    Q_DECL_DEPRECATED QString getNodeIpv4Cidr() const;
    Q_DECL_DEPRECATED void setNodeIpv4Cidr(const QString &node_ipv4_cidr);
    Q_DECL_DEPRECATED bool is_node_ipv4_cidr_Set() const;
    Q_DECL_DEPRECATED bool is_node_ipv4_cidr_Valid() const;

    QString getNodeIpv4CidrBlock() const;
    void setNodeIpv4CidrBlock(const QString &node_ipv4_cidr_block);
    bool is_node_ipv4_cidr_block_Set() const;
    bool is_node_ipv4_cidr_block_Valid() const;

    OAIPodCIDROverprovisionConfig getPodCidrOverprovisionConfig() const;
    void setPodCidrOverprovisionConfig(const OAIPodCIDROverprovisionConfig &pod_cidr_overprovision_config);
    bool is_pod_cidr_overprovision_config_Set() const;
    bool is_pod_cidr_overprovision_config_Valid() const;

    Q_DECL_DEPRECATED QString getServicesIpv4Cidr() const;
    Q_DECL_DEPRECATED void setServicesIpv4Cidr(const QString &services_ipv4_cidr);
    Q_DECL_DEPRECATED bool is_services_ipv4_cidr_Set() const;
    Q_DECL_DEPRECATED bool is_services_ipv4_cidr_Valid() const;

    QString getServicesIpv4CidrBlock() const;
    void setServicesIpv4CidrBlock(const QString &services_ipv4_cidr_block);
    bool is_services_ipv4_cidr_block_Set() const;
    bool is_services_ipv4_cidr_block_Valid() const;

    QString getServicesIpv6CidrBlock() const;
    void setServicesIpv6CidrBlock(const QString &services_ipv6_cidr_block);
    bool is_services_ipv6_cidr_block_Set() const;
    bool is_services_ipv6_cidr_block_Valid() const;

    QString getServicesSecondaryRangeName() const;
    void setServicesSecondaryRangeName(const QString &services_secondary_range_name);
    bool is_services_secondary_range_name_Set() const;
    bool is_services_secondary_range_name_Valid() const;

    QString getStackType() const;
    void setStackType(const QString &stack_type);
    bool is_stack_type_Set() const;
    bool is_stack_type_Valid() const;

    QString getSubnetIpv6CidrBlock() const;
    void setSubnetIpv6CidrBlock(const QString &subnet_ipv6_cidr_block);
    bool is_subnet_ipv6_cidr_block_Set() const;
    bool is_subnet_ipv6_cidr_block_Valid() const;

    QString getSubnetworkName() const;
    void setSubnetworkName(const QString &subnetwork_name);
    bool is_subnetwork_name_Set() const;
    bool is_subnetwork_name_Valid() const;

    QString getTpuIpv4CidrBlock() const;
    void setTpuIpv4CidrBlock(const QString &tpu_ipv4_cidr_block);
    bool is_tpu_ipv4_cidr_block_Set() const;
    bool is_tpu_ipv4_cidr_block_Valid() const;

    bool isUseIpAliases() const;
    void setUseIpAliases(const bool &use_ip_aliases);
    bool is_use_ip_aliases_Set() const;
    bool is_use_ip_aliases_Valid() const;

    bool isUseRoutes() const;
    void setUseRoutes(const bool &use_routes);
    bool is_use_routes_Set() const;
    bool is_use_routes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAdditionalPodRangesConfig m_additional_pod_ranges_config;
    bool m_additional_pod_ranges_config_isSet;
    bool m_additional_pod_ranges_config_isValid;

    QString m_cluster_ipv4_cidr;
    bool m_cluster_ipv4_cidr_isSet;
    bool m_cluster_ipv4_cidr_isValid;

    QString m_cluster_ipv4_cidr_block;
    bool m_cluster_ipv4_cidr_block_isSet;
    bool m_cluster_ipv4_cidr_block_isValid;

    QString m_cluster_secondary_range_name;
    bool m_cluster_secondary_range_name_isSet;
    bool m_cluster_secondary_range_name_isValid;

    bool m_create_subnetwork;
    bool m_create_subnetwork_isSet;
    bool m_create_subnetwork_isValid;

    double m_default_pod_ipv4_range_utilization;
    bool m_default_pod_ipv4_range_utilization_isSet;
    bool m_default_pod_ipv4_range_utilization_isValid;

    QString m_ipv6_access_type;
    bool m_ipv6_access_type_isSet;
    bool m_ipv6_access_type_isValid;

    QString m_node_ipv4_cidr;
    bool m_node_ipv4_cidr_isSet;
    bool m_node_ipv4_cidr_isValid;

    QString m_node_ipv4_cidr_block;
    bool m_node_ipv4_cidr_block_isSet;
    bool m_node_ipv4_cidr_block_isValid;

    OAIPodCIDROverprovisionConfig m_pod_cidr_overprovision_config;
    bool m_pod_cidr_overprovision_config_isSet;
    bool m_pod_cidr_overprovision_config_isValid;

    QString m_services_ipv4_cidr;
    bool m_services_ipv4_cidr_isSet;
    bool m_services_ipv4_cidr_isValid;

    QString m_services_ipv4_cidr_block;
    bool m_services_ipv4_cidr_block_isSet;
    bool m_services_ipv4_cidr_block_isValid;

    QString m_services_ipv6_cidr_block;
    bool m_services_ipv6_cidr_block_isSet;
    bool m_services_ipv6_cidr_block_isValid;

    QString m_services_secondary_range_name;
    bool m_services_secondary_range_name_isSet;
    bool m_services_secondary_range_name_isValid;

    QString m_stack_type;
    bool m_stack_type_isSet;
    bool m_stack_type_isValid;

    QString m_subnet_ipv6_cidr_block;
    bool m_subnet_ipv6_cidr_block_isSet;
    bool m_subnet_ipv6_cidr_block_isValid;

    QString m_subnetwork_name;
    bool m_subnetwork_name_isSet;
    bool m_subnetwork_name_isValid;

    QString m_tpu_ipv4_cidr_block;
    bool m_tpu_ipv4_cidr_block_isSet;
    bool m_tpu_ipv4_cidr_block_isValid;

    bool m_use_ip_aliases;
    bool m_use_ip_aliases_isSet;
    bool m_use_ip_aliases_isValid;

    bool m_use_routes;
    bool m_use_routes_isSet;
    bool m_use_routes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIIPAllocationPolicy)

#endif // OAIIPAllocationPolicy_H
