/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINodeKubeletConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINodeKubeletConfig::OAINodeKubeletConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINodeKubeletConfig::OAINodeKubeletConfig() {
    this->initializeModel();
}

OAINodeKubeletConfig::~OAINodeKubeletConfig() {}

void OAINodeKubeletConfig::initializeModel() {

    m_cpu_cfs_quota_isSet = false;
    m_cpu_cfs_quota_isValid = false;

    m_cpu_cfs_quota_period_isSet = false;
    m_cpu_cfs_quota_period_isValid = false;

    m_cpu_manager_policy_isSet = false;
    m_cpu_manager_policy_isValid = false;

    m_insecure_kubelet_readonly_port_enabled_isSet = false;
    m_insecure_kubelet_readonly_port_enabled_isValid = false;

    m_pod_pids_limit_isSet = false;
    m_pod_pids_limit_isValid = false;
}

void OAINodeKubeletConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINodeKubeletConfig::fromJsonObject(QJsonObject json) {

    m_cpu_cfs_quota_isValid = ::OpenAPI::fromJsonValue(m_cpu_cfs_quota, json[QString("cpuCfsQuota")]);
    m_cpu_cfs_quota_isSet = !json[QString("cpuCfsQuota")].isNull() && m_cpu_cfs_quota_isValid;

    m_cpu_cfs_quota_period_isValid = ::OpenAPI::fromJsonValue(m_cpu_cfs_quota_period, json[QString("cpuCfsQuotaPeriod")]);
    m_cpu_cfs_quota_period_isSet = !json[QString("cpuCfsQuotaPeriod")].isNull() && m_cpu_cfs_quota_period_isValid;

    m_cpu_manager_policy_isValid = ::OpenAPI::fromJsonValue(m_cpu_manager_policy, json[QString("cpuManagerPolicy")]);
    m_cpu_manager_policy_isSet = !json[QString("cpuManagerPolicy")].isNull() && m_cpu_manager_policy_isValid;

    m_insecure_kubelet_readonly_port_enabled_isValid = ::OpenAPI::fromJsonValue(m_insecure_kubelet_readonly_port_enabled, json[QString("insecureKubeletReadonlyPortEnabled")]);
    m_insecure_kubelet_readonly_port_enabled_isSet = !json[QString("insecureKubeletReadonlyPortEnabled")].isNull() && m_insecure_kubelet_readonly_port_enabled_isValid;

    m_pod_pids_limit_isValid = ::OpenAPI::fromJsonValue(m_pod_pids_limit, json[QString("podPidsLimit")]);
    m_pod_pids_limit_isSet = !json[QString("podPidsLimit")].isNull() && m_pod_pids_limit_isValid;
}

QString OAINodeKubeletConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINodeKubeletConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_cpu_cfs_quota_isSet) {
        obj.insert(QString("cpuCfsQuota"), ::OpenAPI::toJsonValue(m_cpu_cfs_quota));
    }
    if (m_cpu_cfs_quota_period_isSet) {
        obj.insert(QString("cpuCfsQuotaPeriod"), ::OpenAPI::toJsonValue(m_cpu_cfs_quota_period));
    }
    if (m_cpu_manager_policy_isSet) {
        obj.insert(QString("cpuManagerPolicy"), ::OpenAPI::toJsonValue(m_cpu_manager_policy));
    }
    if (m_insecure_kubelet_readonly_port_enabled_isSet) {
        obj.insert(QString("insecureKubeletReadonlyPortEnabled"), ::OpenAPI::toJsonValue(m_insecure_kubelet_readonly_port_enabled));
    }
    if (m_pod_pids_limit_isSet) {
        obj.insert(QString("podPidsLimit"), ::OpenAPI::toJsonValue(m_pod_pids_limit));
    }
    return obj;
}

bool OAINodeKubeletConfig::isCpuCfsQuota() const {
    return m_cpu_cfs_quota;
}
void OAINodeKubeletConfig::setCpuCfsQuota(const bool &cpu_cfs_quota) {
    m_cpu_cfs_quota = cpu_cfs_quota;
    m_cpu_cfs_quota_isSet = true;
}

bool OAINodeKubeletConfig::is_cpu_cfs_quota_Set() const{
    return m_cpu_cfs_quota_isSet;
}

bool OAINodeKubeletConfig::is_cpu_cfs_quota_Valid() const{
    return m_cpu_cfs_quota_isValid;
}

QString OAINodeKubeletConfig::getCpuCfsQuotaPeriod() const {
    return m_cpu_cfs_quota_period;
}
void OAINodeKubeletConfig::setCpuCfsQuotaPeriod(const QString &cpu_cfs_quota_period) {
    m_cpu_cfs_quota_period = cpu_cfs_quota_period;
    m_cpu_cfs_quota_period_isSet = true;
}

bool OAINodeKubeletConfig::is_cpu_cfs_quota_period_Set() const{
    return m_cpu_cfs_quota_period_isSet;
}

bool OAINodeKubeletConfig::is_cpu_cfs_quota_period_Valid() const{
    return m_cpu_cfs_quota_period_isValid;
}

QString OAINodeKubeletConfig::getCpuManagerPolicy() const {
    return m_cpu_manager_policy;
}
void OAINodeKubeletConfig::setCpuManagerPolicy(const QString &cpu_manager_policy) {
    m_cpu_manager_policy = cpu_manager_policy;
    m_cpu_manager_policy_isSet = true;
}

bool OAINodeKubeletConfig::is_cpu_manager_policy_Set() const{
    return m_cpu_manager_policy_isSet;
}

bool OAINodeKubeletConfig::is_cpu_manager_policy_Valid() const{
    return m_cpu_manager_policy_isValid;
}

bool OAINodeKubeletConfig::isInsecureKubeletReadonlyPortEnabled() const {
    return m_insecure_kubelet_readonly_port_enabled;
}
void OAINodeKubeletConfig::setInsecureKubeletReadonlyPortEnabled(const bool &insecure_kubelet_readonly_port_enabled) {
    m_insecure_kubelet_readonly_port_enabled = insecure_kubelet_readonly_port_enabled;
    m_insecure_kubelet_readonly_port_enabled_isSet = true;
}

bool OAINodeKubeletConfig::is_insecure_kubelet_readonly_port_enabled_Set() const{
    return m_insecure_kubelet_readonly_port_enabled_isSet;
}

bool OAINodeKubeletConfig::is_insecure_kubelet_readonly_port_enabled_Valid() const{
    return m_insecure_kubelet_readonly_port_enabled_isValid;
}

QString OAINodeKubeletConfig::getPodPidsLimit() const {
    return m_pod_pids_limit;
}
void OAINodeKubeletConfig::setPodPidsLimit(const QString &pod_pids_limit) {
    m_pod_pids_limit = pod_pids_limit;
    m_pod_pids_limit_isSet = true;
}

bool OAINodeKubeletConfig::is_pod_pids_limit_Set() const{
    return m_pod_pids_limit_isSet;
}

bool OAINodeKubeletConfig::is_pod_pids_limit_Valid() const{
    return m_pod_pids_limit_isValid;
}

bool OAINodeKubeletConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cpu_cfs_quota_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpu_cfs_quota_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpu_manager_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insecure_kubelet_readonly_port_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pod_pids_limit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINodeKubeletConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
