/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectsApi_H
#define OAI_OAIProjectsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICancelOperationRequest.h"
#include "OAICheckAutopilotCompatibilityResponse.h"
#include "OAICluster.h"
#include "OAICompleteIPRotationRequest.h"
#include "OAICreateClusterRequest.h"
#include "OAICreateNodePoolRequest.h"
#include "OAIGetJSONWebKeysResponse.h"
#include "OAIGetOpenIDConfigResponse.h"
#include "OAIListClustersResponse.h"
#include "OAIListNodePoolsResponse.h"
#include "OAIListOperationsResponse.h"
#include "OAIListUsableSubnetworksResponse.h"
#include "OAINodePool.h"
#include "OAIObject.h"
#include "OAIOperation.h"
#include "OAIRollbackNodePoolUpgradeRequest.h"
#include "OAIServerConfig.h"
#include "OAISetAddonsConfigRequest.h"
#include "OAISetLabelsRequest.h"
#include "OAISetLegacyAbacRequest.h"
#include "OAISetLocationsRequest.h"
#include "OAISetLoggingServiceRequest.h"
#include "OAISetMaintenancePolicyRequest.h"
#include "OAISetMasterAuthRequest.h"
#include "OAISetMonitoringServiceRequest.h"
#include "OAISetNetworkPolicyRequest.h"
#include "OAISetNodePoolAutoscalingRequest.h"
#include "OAISetNodePoolManagementRequest.h"
#include "OAISetNodePoolSizeRequest.h"
#include "OAIStartIPRotationRequest.h"
#include "OAIUpdateClusterRequest.h"
#include "OAIUpdateMasterRequest.h"
#include "OAIUpdateNodePoolRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectsApi : public QObject {
    Q_OBJECT

public:
    OAIProjectsApi(const int timeOut = 0);
    ~OAIProjectsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void container_projects_aggregated_usableSubnetworks_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void container_projects_locations_clusters_checkAutopilotCompatibility(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_complete_ip_rotation_request OAICompleteIPRotationRequest [optional]
    */
    virtual void container_projects_locations_clusters_completeIpRotation(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICompleteIPRotationRequest> &oai_complete_ip_rotation_request = ::OpenAPI::OptionalParam<OAICompleteIPRotationRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_create_cluster_request OAICreateClusterRequest [optional]
    */
    virtual void container_projects_locations_clusters_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateClusterRequest> &oai_create_cluster_request = ::OpenAPI::OptionalParam<OAICreateClusterRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void container_projects_locations_clusters_getJwks(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  project_id QString [optional]
    * @param[in]  zone QString [optional]
    */
    virtual void container_projects_locations_clusters_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &project_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &zone = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void container_projects_locations_clusters_nodePools_completeUpgrade(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_create_node_pool_request OAICreateNodePoolRequest [optional]
    */
    virtual void container_projects_locations_clusters_nodePools_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateNodePoolRequest> &oai_create_node_pool_request = ::OpenAPI::OptionalParam<OAICreateNodePoolRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  cluster_id QString [optional]
    * @param[in]  node_pool_id QString [optional]
    * @param[in]  project_id QString [optional]
    * @param[in]  zone QString [optional]
    */
    virtual void container_projects_locations_clusters_nodePools_delete(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &node_pool_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &project_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &zone = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  cluster_id QString [optional]
    * @param[in]  project_id QString [optional]
    * @param[in]  zone QString [optional]
    */
    virtual void container_projects_locations_clusters_nodePools_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &project_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &zone = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_rollback_node_pool_upgrade_request OAIRollbackNodePoolUpgradeRequest [optional]
    */
    virtual void container_projects_locations_clusters_nodePools_rollback(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRollbackNodePoolUpgradeRequest> &oai_rollback_node_pool_upgrade_request = ::OpenAPI::OptionalParam<OAIRollbackNodePoolUpgradeRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_set_node_pool_autoscaling_request OAISetNodePoolAutoscalingRequest [optional]
    */
    virtual void container_projects_locations_clusters_nodePools_setAutoscaling(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetNodePoolAutoscalingRequest> &oai_set_node_pool_autoscaling_request = ::OpenAPI::OptionalParam<OAISetNodePoolAutoscalingRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_set_node_pool_management_request OAISetNodePoolManagementRequest [optional]
    */
    virtual void container_projects_locations_clusters_nodePools_setManagement(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetNodePoolManagementRequest> &oai_set_node_pool_management_request = ::OpenAPI::OptionalParam<OAISetNodePoolManagementRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_set_node_pool_size_request OAISetNodePoolSizeRequest [optional]
    */
    virtual void container_projects_locations_clusters_nodePools_setSize(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetNodePoolSizeRequest> &oai_set_node_pool_size_request = ::OpenAPI::OptionalParam<OAISetNodePoolSizeRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_update_node_pool_request OAIUpdateNodePoolRequest [optional]
    */
    virtual void container_projects_locations_clusters_nodePools_update(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUpdateNodePoolRequest> &oai_update_node_pool_request = ::OpenAPI::OptionalParam<OAIUpdateNodePoolRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_set_addons_config_request OAISetAddonsConfigRequest [optional]
    */
    virtual void container_projects_locations_clusters_setAddons(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetAddonsConfigRequest> &oai_set_addons_config_request = ::OpenAPI::OptionalParam<OAISetAddonsConfigRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_set_legacy_abac_request OAISetLegacyAbacRequest [optional]
    */
    virtual void container_projects_locations_clusters_setLegacyAbac(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetLegacyAbacRequest> &oai_set_legacy_abac_request = ::OpenAPI::OptionalParam<OAISetLegacyAbacRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_set_locations_request OAISetLocationsRequest [optional]
    */
    virtual void container_projects_locations_clusters_setLocations(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetLocationsRequest> &oai_set_locations_request = ::OpenAPI::OptionalParam<OAISetLocationsRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_set_logging_service_request OAISetLoggingServiceRequest [optional]
    */
    virtual void container_projects_locations_clusters_setLogging(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetLoggingServiceRequest> &oai_set_logging_service_request = ::OpenAPI::OptionalParam<OAISetLoggingServiceRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_set_maintenance_policy_request OAISetMaintenancePolicyRequest [optional]
    */
    virtual void container_projects_locations_clusters_setMaintenancePolicy(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetMaintenancePolicyRequest> &oai_set_maintenance_policy_request = ::OpenAPI::OptionalParam<OAISetMaintenancePolicyRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_set_master_auth_request OAISetMasterAuthRequest [optional]
    */
    virtual void container_projects_locations_clusters_setMasterAuth(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetMasterAuthRequest> &oai_set_master_auth_request = ::OpenAPI::OptionalParam<OAISetMasterAuthRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_set_monitoring_service_request OAISetMonitoringServiceRequest [optional]
    */
    virtual void container_projects_locations_clusters_setMonitoring(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetMonitoringServiceRequest> &oai_set_monitoring_service_request = ::OpenAPI::OptionalParam<OAISetMonitoringServiceRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_set_network_policy_request OAISetNetworkPolicyRequest [optional]
    */
    virtual void container_projects_locations_clusters_setNetworkPolicy(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetNetworkPolicyRequest> &oai_set_network_policy_request = ::OpenAPI::OptionalParam<OAISetNetworkPolicyRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_set_labels_request OAISetLabelsRequest [optional]
    */
    virtual void container_projects_locations_clusters_setResourceLabels(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetLabelsRequest> &oai_set_labels_request = ::OpenAPI::OptionalParam<OAISetLabelsRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_start_ip_rotation_request OAIStartIPRotationRequest [optional]
    */
    virtual void container_projects_locations_clusters_startIpRotation(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIStartIPRotationRequest> &oai_start_ip_rotation_request = ::OpenAPI::OptionalParam<OAIStartIPRotationRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_update_master_request OAIUpdateMasterRequest [optional]
    */
    virtual void container_projects_locations_clusters_updateMaster(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUpdateMasterRequest> &oai_update_master_request = ::OpenAPI::OptionalParam<OAIUpdateMasterRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void container_projects_locations_clusters_wellKnown_getOpenidConfiguration(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  project_id QString [optional]
    * @param[in]  zone QString [optional]
    */
    virtual void container_projects_locations_getServerConfig(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &project_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &zone = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_cancel_operation_request OAICancelOperationRequest [optional]
    */
    virtual void container_projects_locations_operations_cancel(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICancelOperationRequest> &oai_cancel_operation_request = ::OpenAPI::OptionalParam<OAICancelOperationRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  operation_id QString [optional]
    * @param[in]  project_id QString [optional]
    * @param[in]  zone QString [optional]
    */
    virtual void container_projects_locations_operations_get(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &operation_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &project_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &zone = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  project_id QString [optional]
    * @param[in]  zone QString [optional]
    */
    virtual void container_projects_locations_operations_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &project_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &zone = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  zone QString [required]
    * @param[in]  cluster_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_set_addons_config_request OAISetAddonsConfigRequest [optional]
    */
    virtual void container_projects_zones_clusters_addons(const QString &project_id, const QString &zone, const QString &cluster_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetAddonsConfigRequest> &oai_set_addons_config_request = ::OpenAPI::OptionalParam<OAISetAddonsConfigRequest>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  zone QString [required]
    * @param[in]  cluster_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_complete_ip_rotation_request OAICompleteIPRotationRequest [optional]
    */
    virtual void container_projects_zones_clusters_completeIpRotation(const QString &project_id, const QString &zone, const QString &cluster_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICompleteIPRotationRequest> &oai_complete_ip_rotation_request = ::OpenAPI::OptionalParam<OAICompleteIPRotationRequest>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  zone QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_create_cluster_request OAICreateClusterRequest [optional]
    */
    virtual void container_projects_zones_clusters_create(const QString &project_id, const QString &zone, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateClusterRequest> &oai_create_cluster_request = ::OpenAPI::OptionalParam<OAICreateClusterRequest>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  zone QString [required]
    * @param[in]  cluster_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  name QString [optional]
    */
    virtual void container_projects_zones_clusters_delete(const QString &project_id, const QString &zone, const QString &cluster_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  zone QString [required]
    * @param[in]  cluster_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  name QString [optional]
    */
    virtual void container_projects_zones_clusters_get(const QString &project_id, const QString &zone, const QString &cluster_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  zone QString [required]
    * @param[in]  cluster_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_set_legacy_abac_request OAISetLegacyAbacRequest [optional]
    */
    virtual void container_projects_zones_clusters_legacyAbac(const QString &project_id, const QString &zone, const QString &cluster_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetLegacyAbacRequest> &oai_set_legacy_abac_request = ::OpenAPI::OptionalParam<OAISetLegacyAbacRequest>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  zone QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  parent QString [optional]
    */
    virtual void container_projects_zones_clusters_list(const QString &project_id, const QString &zone, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  zone QString [required]
    * @param[in]  cluster_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_set_locations_request OAISetLocationsRequest [optional]
    */
    virtual void container_projects_zones_clusters_locations(const QString &project_id, const QString &zone, const QString &cluster_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetLocationsRequest> &oai_set_locations_request = ::OpenAPI::OptionalParam<OAISetLocationsRequest>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  zone QString [required]
    * @param[in]  cluster_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_set_logging_service_request OAISetLoggingServiceRequest [optional]
    */
    virtual void container_projects_zones_clusters_logging(const QString &project_id, const QString &zone, const QString &cluster_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetLoggingServiceRequest> &oai_set_logging_service_request = ::OpenAPI::OptionalParam<OAISetLoggingServiceRequest>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  zone QString [required]
    * @param[in]  cluster_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_update_master_request OAIUpdateMasterRequest [optional]
    */
    virtual void container_projects_zones_clusters_master(const QString &project_id, const QString &zone, const QString &cluster_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUpdateMasterRequest> &oai_update_master_request = ::OpenAPI::OptionalParam<OAIUpdateMasterRequest>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  zone QString [required]
    * @param[in]  cluster_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_set_monitoring_service_request OAISetMonitoringServiceRequest [optional]
    */
    virtual void container_projects_zones_clusters_monitoring(const QString &project_id, const QString &zone, const QString &cluster_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetMonitoringServiceRequest> &oai_set_monitoring_service_request = ::OpenAPI::OptionalParam<OAISetMonitoringServiceRequest>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  zone QString [required]
    * @param[in]  cluster_id QString [required]
    * @param[in]  node_pool_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_set_node_pool_autoscaling_request OAISetNodePoolAutoscalingRequest [optional]
    */
    virtual void container_projects_zones_clusters_nodePools_autoscaling(const QString &project_id, const QString &zone, const QString &cluster_id, const QString &node_pool_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetNodePoolAutoscalingRequest> &oai_set_node_pool_autoscaling_request = ::OpenAPI::OptionalParam<OAISetNodePoolAutoscalingRequest>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  zone QString [required]
    * @param[in]  cluster_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_create_node_pool_request OAICreateNodePoolRequest [optional]
    */
    virtual void container_projects_zones_clusters_nodePools_create(const QString &project_id, const QString &zone, const QString &cluster_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateNodePoolRequest> &oai_create_node_pool_request = ::OpenAPI::OptionalParam<OAICreateNodePoolRequest>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  zone QString [required]
    * @param[in]  cluster_id QString [required]
    * @param[in]  node_pool_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  name QString [optional]
    */
    virtual void container_projects_zones_clusters_nodePools_delete(const QString &project_id, const QString &zone, const QString &cluster_id, const QString &node_pool_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  zone QString [required]
    * @param[in]  cluster_id QString [required]
    * @param[in]  node_pool_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  name QString [optional]
    */
    virtual void container_projects_zones_clusters_nodePools_get(const QString &project_id, const QString &zone, const QString &cluster_id, const QString &node_pool_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  zone QString [required]
    * @param[in]  cluster_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  parent QString [optional]
    */
    virtual void container_projects_zones_clusters_nodePools_list(const QString &project_id, const QString &zone, const QString &cluster_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  zone QString [required]
    * @param[in]  cluster_id QString [required]
    * @param[in]  node_pool_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_rollback_node_pool_upgrade_request OAIRollbackNodePoolUpgradeRequest [optional]
    */
    virtual void container_projects_zones_clusters_nodePools_rollback(const QString &project_id, const QString &zone, const QString &cluster_id, const QString &node_pool_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRollbackNodePoolUpgradeRequest> &oai_rollback_node_pool_upgrade_request = ::OpenAPI::OptionalParam<OAIRollbackNodePoolUpgradeRequest>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  zone QString [required]
    * @param[in]  cluster_id QString [required]
    * @param[in]  node_pool_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_set_node_pool_management_request OAISetNodePoolManagementRequest [optional]
    */
    virtual void container_projects_zones_clusters_nodePools_setManagement(const QString &project_id, const QString &zone, const QString &cluster_id, const QString &node_pool_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetNodePoolManagementRequest> &oai_set_node_pool_management_request = ::OpenAPI::OptionalParam<OAISetNodePoolManagementRequest>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  zone QString [required]
    * @param[in]  cluster_id QString [required]
    * @param[in]  node_pool_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_set_node_pool_size_request OAISetNodePoolSizeRequest [optional]
    */
    virtual void container_projects_zones_clusters_nodePools_setSize(const QString &project_id, const QString &zone, const QString &cluster_id, const QString &node_pool_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetNodePoolSizeRequest> &oai_set_node_pool_size_request = ::OpenAPI::OptionalParam<OAISetNodePoolSizeRequest>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  zone QString [required]
    * @param[in]  cluster_id QString [required]
    * @param[in]  node_pool_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_update_node_pool_request OAIUpdateNodePoolRequest [optional]
    */
    virtual void container_projects_zones_clusters_nodePools_update(const QString &project_id, const QString &zone, const QString &cluster_id, const QString &node_pool_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUpdateNodePoolRequest> &oai_update_node_pool_request = ::OpenAPI::OptionalParam<OAIUpdateNodePoolRequest>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  zone QString [required]
    * @param[in]  cluster_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_set_labels_request OAISetLabelsRequest [optional]
    */
    virtual void container_projects_zones_clusters_resourceLabels(const QString &project_id, const QString &zone, const QString &cluster_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetLabelsRequest> &oai_set_labels_request = ::OpenAPI::OptionalParam<OAISetLabelsRequest>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  zone QString [required]
    * @param[in]  cluster_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_set_maintenance_policy_request OAISetMaintenancePolicyRequest [optional]
    */
    virtual void container_projects_zones_clusters_setMaintenancePolicy(const QString &project_id, const QString &zone, const QString &cluster_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetMaintenancePolicyRequest> &oai_set_maintenance_policy_request = ::OpenAPI::OptionalParam<OAISetMaintenancePolicyRequest>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  zone QString [required]
    * @param[in]  cluster_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_set_master_auth_request OAISetMasterAuthRequest [optional]
    */
    virtual void container_projects_zones_clusters_setMasterAuth(const QString &project_id, const QString &zone, const QString &cluster_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetMasterAuthRequest> &oai_set_master_auth_request = ::OpenAPI::OptionalParam<OAISetMasterAuthRequest>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  zone QString [required]
    * @param[in]  cluster_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_set_network_policy_request OAISetNetworkPolicyRequest [optional]
    */
    virtual void container_projects_zones_clusters_setNetworkPolicy(const QString &project_id, const QString &zone, const QString &cluster_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetNetworkPolicyRequest> &oai_set_network_policy_request = ::OpenAPI::OptionalParam<OAISetNetworkPolicyRequest>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  zone QString [required]
    * @param[in]  cluster_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_start_ip_rotation_request OAIStartIPRotationRequest [optional]
    */
    virtual void container_projects_zones_clusters_startIpRotation(const QString &project_id, const QString &zone, const QString &cluster_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIStartIPRotationRequest> &oai_start_ip_rotation_request = ::OpenAPI::OptionalParam<OAIStartIPRotationRequest>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  zone QString [required]
    * @param[in]  cluster_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_update_cluster_request OAIUpdateClusterRequest [optional]
    */
    virtual void container_projects_zones_clusters_update(const QString &project_id, const QString &zone, const QString &cluster_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUpdateClusterRequest> &oai_update_cluster_request = ::OpenAPI::OptionalParam<OAIUpdateClusterRequest>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  zone QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  name QString [optional]
    */
    virtual void container_projects_zones_getServerconfig(const QString &project_id, const QString &zone, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  zone QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_cancel_operation_request OAICancelOperationRequest [optional]
    */
    virtual void container_projects_zones_operations_cancel(const QString &project_id, const QString &zone, const QString &operation_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICancelOperationRequest> &oai_cancel_operation_request = ::OpenAPI::OptionalParam<OAICancelOperationRequest>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  zone QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  name QString [optional]
    */
    virtual void container_projects_zones_operations_get(const QString &project_id, const QString &zone, const QString &operation_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  zone QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  parent QString [optional]
    */
    virtual void container_projects_zones_operations_list(const QString &project_id, const QString &zone, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void container_projects_aggregated_usableSubnetworks_listCallback(OAIHttpRequestWorker *worker);
    void container_projects_locations_clusters_checkAutopilotCompatibilityCallback(OAIHttpRequestWorker *worker);
    void container_projects_locations_clusters_completeIpRotationCallback(OAIHttpRequestWorker *worker);
    void container_projects_locations_clusters_createCallback(OAIHttpRequestWorker *worker);
    void container_projects_locations_clusters_getJwksCallback(OAIHttpRequestWorker *worker);
    void container_projects_locations_clusters_listCallback(OAIHttpRequestWorker *worker);
    void container_projects_locations_clusters_nodePools_completeUpgradeCallback(OAIHttpRequestWorker *worker);
    void container_projects_locations_clusters_nodePools_createCallback(OAIHttpRequestWorker *worker);
    void container_projects_locations_clusters_nodePools_deleteCallback(OAIHttpRequestWorker *worker);
    void container_projects_locations_clusters_nodePools_listCallback(OAIHttpRequestWorker *worker);
    void container_projects_locations_clusters_nodePools_rollbackCallback(OAIHttpRequestWorker *worker);
    void container_projects_locations_clusters_nodePools_setAutoscalingCallback(OAIHttpRequestWorker *worker);
    void container_projects_locations_clusters_nodePools_setManagementCallback(OAIHttpRequestWorker *worker);
    void container_projects_locations_clusters_nodePools_setSizeCallback(OAIHttpRequestWorker *worker);
    void container_projects_locations_clusters_nodePools_updateCallback(OAIHttpRequestWorker *worker);
    void container_projects_locations_clusters_setAddonsCallback(OAIHttpRequestWorker *worker);
    void container_projects_locations_clusters_setLegacyAbacCallback(OAIHttpRequestWorker *worker);
    void container_projects_locations_clusters_setLocationsCallback(OAIHttpRequestWorker *worker);
    void container_projects_locations_clusters_setLoggingCallback(OAIHttpRequestWorker *worker);
    void container_projects_locations_clusters_setMaintenancePolicyCallback(OAIHttpRequestWorker *worker);
    void container_projects_locations_clusters_setMasterAuthCallback(OAIHttpRequestWorker *worker);
    void container_projects_locations_clusters_setMonitoringCallback(OAIHttpRequestWorker *worker);
    void container_projects_locations_clusters_setNetworkPolicyCallback(OAIHttpRequestWorker *worker);
    void container_projects_locations_clusters_setResourceLabelsCallback(OAIHttpRequestWorker *worker);
    void container_projects_locations_clusters_startIpRotationCallback(OAIHttpRequestWorker *worker);
    void container_projects_locations_clusters_updateMasterCallback(OAIHttpRequestWorker *worker);
    void container_projects_locations_clusters_wellKnown_getOpenidConfigurationCallback(OAIHttpRequestWorker *worker);
    void container_projects_locations_getServerConfigCallback(OAIHttpRequestWorker *worker);
    void container_projects_locations_operations_cancelCallback(OAIHttpRequestWorker *worker);
    void container_projects_locations_operations_getCallback(OAIHttpRequestWorker *worker);
    void container_projects_locations_operations_listCallback(OAIHttpRequestWorker *worker);
    void container_projects_zones_clusters_addonsCallback(OAIHttpRequestWorker *worker);
    void container_projects_zones_clusters_completeIpRotationCallback(OAIHttpRequestWorker *worker);
    void container_projects_zones_clusters_createCallback(OAIHttpRequestWorker *worker);
    void container_projects_zones_clusters_deleteCallback(OAIHttpRequestWorker *worker);
    void container_projects_zones_clusters_getCallback(OAIHttpRequestWorker *worker);
    void container_projects_zones_clusters_legacyAbacCallback(OAIHttpRequestWorker *worker);
    void container_projects_zones_clusters_listCallback(OAIHttpRequestWorker *worker);
    void container_projects_zones_clusters_locationsCallback(OAIHttpRequestWorker *worker);
    void container_projects_zones_clusters_loggingCallback(OAIHttpRequestWorker *worker);
    void container_projects_zones_clusters_masterCallback(OAIHttpRequestWorker *worker);
    void container_projects_zones_clusters_monitoringCallback(OAIHttpRequestWorker *worker);
    void container_projects_zones_clusters_nodePools_autoscalingCallback(OAIHttpRequestWorker *worker);
    void container_projects_zones_clusters_nodePools_createCallback(OAIHttpRequestWorker *worker);
    void container_projects_zones_clusters_nodePools_deleteCallback(OAIHttpRequestWorker *worker);
    void container_projects_zones_clusters_nodePools_getCallback(OAIHttpRequestWorker *worker);
    void container_projects_zones_clusters_nodePools_listCallback(OAIHttpRequestWorker *worker);
    void container_projects_zones_clusters_nodePools_rollbackCallback(OAIHttpRequestWorker *worker);
    void container_projects_zones_clusters_nodePools_setManagementCallback(OAIHttpRequestWorker *worker);
    void container_projects_zones_clusters_nodePools_setSizeCallback(OAIHttpRequestWorker *worker);
    void container_projects_zones_clusters_nodePools_updateCallback(OAIHttpRequestWorker *worker);
    void container_projects_zones_clusters_resourceLabelsCallback(OAIHttpRequestWorker *worker);
    void container_projects_zones_clusters_setMaintenancePolicyCallback(OAIHttpRequestWorker *worker);
    void container_projects_zones_clusters_setMasterAuthCallback(OAIHttpRequestWorker *worker);
    void container_projects_zones_clusters_setNetworkPolicyCallback(OAIHttpRequestWorker *worker);
    void container_projects_zones_clusters_startIpRotationCallback(OAIHttpRequestWorker *worker);
    void container_projects_zones_clusters_updateCallback(OAIHttpRequestWorker *worker);
    void container_projects_zones_getServerconfigCallback(OAIHttpRequestWorker *worker);
    void container_projects_zones_operations_cancelCallback(OAIHttpRequestWorker *worker);
    void container_projects_zones_operations_getCallback(OAIHttpRequestWorker *worker);
    void container_projects_zones_operations_listCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void container_projects_aggregated_usableSubnetworks_listSignal(OAIListUsableSubnetworksResponse summary);
    void container_projects_locations_clusters_checkAutopilotCompatibilitySignal(OAICheckAutopilotCompatibilityResponse summary);
    void container_projects_locations_clusters_completeIpRotationSignal(OAIOperation summary);
    void container_projects_locations_clusters_createSignal(OAIOperation summary);
    void container_projects_locations_clusters_getJwksSignal(OAIGetJSONWebKeysResponse summary);
    void container_projects_locations_clusters_listSignal(OAIListClustersResponse summary);
    void container_projects_locations_clusters_nodePools_completeUpgradeSignal(OAIObject summary);
    void container_projects_locations_clusters_nodePools_createSignal(OAIOperation summary);
    void container_projects_locations_clusters_nodePools_deleteSignal(OAIOperation summary);
    void container_projects_locations_clusters_nodePools_listSignal(OAIListNodePoolsResponse summary);
    void container_projects_locations_clusters_nodePools_rollbackSignal(OAIOperation summary);
    void container_projects_locations_clusters_nodePools_setAutoscalingSignal(OAIOperation summary);
    void container_projects_locations_clusters_nodePools_setManagementSignal(OAIOperation summary);
    void container_projects_locations_clusters_nodePools_setSizeSignal(OAIOperation summary);
    void container_projects_locations_clusters_nodePools_updateSignal(OAIOperation summary);
    void container_projects_locations_clusters_setAddonsSignal(OAIOperation summary);
    void container_projects_locations_clusters_setLegacyAbacSignal(OAIOperation summary);
    void container_projects_locations_clusters_setLocationsSignal(OAIOperation summary);
    void container_projects_locations_clusters_setLoggingSignal(OAIOperation summary);
    void container_projects_locations_clusters_setMaintenancePolicySignal(OAIOperation summary);
    void container_projects_locations_clusters_setMasterAuthSignal(OAIOperation summary);
    void container_projects_locations_clusters_setMonitoringSignal(OAIOperation summary);
    void container_projects_locations_clusters_setNetworkPolicySignal(OAIOperation summary);
    void container_projects_locations_clusters_setResourceLabelsSignal(OAIOperation summary);
    void container_projects_locations_clusters_startIpRotationSignal(OAIOperation summary);
    void container_projects_locations_clusters_updateMasterSignal(OAIOperation summary);
    void container_projects_locations_clusters_wellKnown_getOpenidConfigurationSignal(OAIGetOpenIDConfigResponse summary);
    void container_projects_locations_getServerConfigSignal(OAIServerConfig summary);
    void container_projects_locations_operations_cancelSignal(OAIObject summary);
    void container_projects_locations_operations_getSignal(OAIOperation summary);
    void container_projects_locations_operations_listSignal(OAIListOperationsResponse summary);
    void container_projects_zones_clusters_addonsSignal(OAIOperation summary);
    void container_projects_zones_clusters_completeIpRotationSignal(OAIOperation summary);
    void container_projects_zones_clusters_createSignal(OAIOperation summary);
    void container_projects_zones_clusters_deleteSignal(OAIOperation summary);
    void container_projects_zones_clusters_getSignal(OAICluster summary);
    void container_projects_zones_clusters_legacyAbacSignal(OAIOperation summary);
    void container_projects_zones_clusters_listSignal(OAIListClustersResponse summary);
    void container_projects_zones_clusters_locationsSignal(OAIOperation summary);
    void container_projects_zones_clusters_loggingSignal(OAIOperation summary);
    void container_projects_zones_clusters_masterSignal(OAIOperation summary);
    void container_projects_zones_clusters_monitoringSignal(OAIOperation summary);
    void container_projects_zones_clusters_nodePools_autoscalingSignal(OAIOperation summary);
    void container_projects_zones_clusters_nodePools_createSignal(OAIOperation summary);
    void container_projects_zones_clusters_nodePools_deleteSignal(OAIOperation summary);
    void container_projects_zones_clusters_nodePools_getSignal(OAINodePool summary);
    void container_projects_zones_clusters_nodePools_listSignal(OAIListNodePoolsResponse summary);
    void container_projects_zones_clusters_nodePools_rollbackSignal(OAIOperation summary);
    void container_projects_zones_clusters_nodePools_setManagementSignal(OAIOperation summary);
    void container_projects_zones_clusters_nodePools_setSizeSignal(OAIOperation summary);
    void container_projects_zones_clusters_nodePools_updateSignal(OAIOperation summary);
    void container_projects_zones_clusters_resourceLabelsSignal(OAIOperation summary);
    void container_projects_zones_clusters_setMaintenancePolicySignal(OAIOperation summary);
    void container_projects_zones_clusters_setMasterAuthSignal(OAIOperation summary);
    void container_projects_zones_clusters_setNetworkPolicySignal(OAIOperation summary);
    void container_projects_zones_clusters_startIpRotationSignal(OAIOperation summary);
    void container_projects_zones_clusters_updateSignal(OAIOperation summary);
    void container_projects_zones_getServerconfigSignal(OAIServerConfig summary);
    void container_projects_zones_operations_cancelSignal(OAIObject summary);
    void container_projects_zones_operations_getSignal(OAIOperation summary);
    void container_projects_zones_operations_listSignal(OAIListOperationsResponse summary);


    void container_projects_aggregated_usableSubnetworks_listSignalFull(OAIHttpRequestWorker *worker, OAIListUsableSubnetworksResponse summary);
    void container_projects_locations_clusters_checkAutopilotCompatibilitySignalFull(OAIHttpRequestWorker *worker, OAICheckAutopilotCompatibilityResponse summary);
    void container_projects_locations_clusters_completeIpRotationSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void container_projects_locations_clusters_createSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void container_projects_locations_clusters_getJwksSignalFull(OAIHttpRequestWorker *worker, OAIGetJSONWebKeysResponse summary);
    void container_projects_locations_clusters_listSignalFull(OAIHttpRequestWorker *worker, OAIListClustersResponse summary);
    void container_projects_locations_clusters_nodePools_completeUpgradeSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void container_projects_locations_clusters_nodePools_createSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void container_projects_locations_clusters_nodePools_deleteSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void container_projects_locations_clusters_nodePools_listSignalFull(OAIHttpRequestWorker *worker, OAIListNodePoolsResponse summary);
    void container_projects_locations_clusters_nodePools_rollbackSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void container_projects_locations_clusters_nodePools_setAutoscalingSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void container_projects_locations_clusters_nodePools_setManagementSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void container_projects_locations_clusters_nodePools_setSizeSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void container_projects_locations_clusters_nodePools_updateSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void container_projects_locations_clusters_setAddonsSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void container_projects_locations_clusters_setLegacyAbacSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void container_projects_locations_clusters_setLocationsSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void container_projects_locations_clusters_setLoggingSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void container_projects_locations_clusters_setMaintenancePolicySignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void container_projects_locations_clusters_setMasterAuthSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void container_projects_locations_clusters_setMonitoringSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void container_projects_locations_clusters_setNetworkPolicySignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void container_projects_locations_clusters_setResourceLabelsSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void container_projects_locations_clusters_startIpRotationSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void container_projects_locations_clusters_updateMasterSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void container_projects_locations_clusters_wellKnown_getOpenidConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIGetOpenIDConfigResponse summary);
    void container_projects_locations_getServerConfigSignalFull(OAIHttpRequestWorker *worker, OAIServerConfig summary);
    void container_projects_locations_operations_cancelSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void container_projects_locations_operations_getSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void container_projects_locations_operations_listSignalFull(OAIHttpRequestWorker *worker, OAIListOperationsResponse summary);
    void container_projects_zones_clusters_addonsSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void container_projects_zones_clusters_completeIpRotationSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void container_projects_zones_clusters_createSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void container_projects_zones_clusters_deleteSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void container_projects_zones_clusters_getSignalFull(OAIHttpRequestWorker *worker, OAICluster summary);
    void container_projects_zones_clusters_legacyAbacSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void container_projects_zones_clusters_listSignalFull(OAIHttpRequestWorker *worker, OAIListClustersResponse summary);
    void container_projects_zones_clusters_locationsSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void container_projects_zones_clusters_loggingSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void container_projects_zones_clusters_masterSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void container_projects_zones_clusters_monitoringSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void container_projects_zones_clusters_nodePools_autoscalingSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void container_projects_zones_clusters_nodePools_createSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void container_projects_zones_clusters_nodePools_deleteSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void container_projects_zones_clusters_nodePools_getSignalFull(OAIHttpRequestWorker *worker, OAINodePool summary);
    void container_projects_zones_clusters_nodePools_listSignalFull(OAIHttpRequestWorker *worker, OAIListNodePoolsResponse summary);
    void container_projects_zones_clusters_nodePools_rollbackSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void container_projects_zones_clusters_nodePools_setManagementSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void container_projects_zones_clusters_nodePools_setSizeSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void container_projects_zones_clusters_nodePools_updateSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void container_projects_zones_clusters_resourceLabelsSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void container_projects_zones_clusters_setMaintenancePolicySignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void container_projects_zones_clusters_setMasterAuthSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void container_projects_zones_clusters_setNetworkPolicySignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void container_projects_zones_clusters_startIpRotationSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void container_projects_zones_clusters_updateSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void container_projects_zones_getServerconfigSignalFull(OAIHttpRequestWorker *worker, OAIServerConfig summary);
    void container_projects_zones_operations_cancelSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void container_projects_zones_operations_getSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void container_projects_zones_operations_listSignalFull(OAIHttpRequestWorker *worker, OAIListOperationsResponse summary);

    Q_DECL_DEPRECATED_X("Use container_projects_aggregated_usableSubnetworks_listSignalError() instead")
    void container_projects_aggregated_usableSubnetworks_listSignalE(OAIListUsableSubnetworksResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_aggregated_usableSubnetworks_listSignalError(OAIListUsableSubnetworksResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_checkAutopilotCompatibilitySignalError() instead")
    void container_projects_locations_clusters_checkAutopilotCompatibilitySignalE(OAICheckAutopilotCompatibilityResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_checkAutopilotCompatibilitySignalError(OAICheckAutopilotCompatibilityResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_completeIpRotationSignalError() instead")
    void container_projects_locations_clusters_completeIpRotationSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_completeIpRotationSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_createSignalError() instead")
    void container_projects_locations_clusters_createSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_createSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_getJwksSignalError() instead")
    void container_projects_locations_clusters_getJwksSignalE(OAIGetJSONWebKeysResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_getJwksSignalError(OAIGetJSONWebKeysResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_listSignalError() instead")
    void container_projects_locations_clusters_listSignalE(OAIListClustersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_listSignalError(OAIListClustersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_nodePools_completeUpgradeSignalError() instead")
    void container_projects_locations_clusters_nodePools_completeUpgradeSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_nodePools_completeUpgradeSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_nodePools_createSignalError() instead")
    void container_projects_locations_clusters_nodePools_createSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_nodePools_createSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_nodePools_deleteSignalError() instead")
    void container_projects_locations_clusters_nodePools_deleteSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_nodePools_deleteSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_nodePools_listSignalError() instead")
    void container_projects_locations_clusters_nodePools_listSignalE(OAIListNodePoolsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_nodePools_listSignalError(OAIListNodePoolsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_nodePools_rollbackSignalError() instead")
    void container_projects_locations_clusters_nodePools_rollbackSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_nodePools_rollbackSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_nodePools_setAutoscalingSignalError() instead")
    void container_projects_locations_clusters_nodePools_setAutoscalingSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_nodePools_setAutoscalingSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_nodePools_setManagementSignalError() instead")
    void container_projects_locations_clusters_nodePools_setManagementSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_nodePools_setManagementSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_nodePools_setSizeSignalError() instead")
    void container_projects_locations_clusters_nodePools_setSizeSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_nodePools_setSizeSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_nodePools_updateSignalError() instead")
    void container_projects_locations_clusters_nodePools_updateSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_nodePools_updateSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_setAddonsSignalError() instead")
    void container_projects_locations_clusters_setAddonsSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_setAddonsSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_setLegacyAbacSignalError() instead")
    void container_projects_locations_clusters_setLegacyAbacSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_setLegacyAbacSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_setLocationsSignalError() instead")
    void container_projects_locations_clusters_setLocationsSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_setLocationsSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_setLoggingSignalError() instead")
    void container_projects_locations_clusters_setLoggingSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_setLoggingSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_setMaintenancePolicySignalError() instead")
    void container_projects_locations_clusters_setMaintenancePolicySignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_setMaintenancePolicySignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_setMasterAuthSignalError() instead")
    void container_projects_locations_clusters_setMasterAuthSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_setMasterAuthSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_setMonitoringSignalError() instead")
    void container_projects_locations_clusters_setMonitoringSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_setMonitoringSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_setNetworkPolicySignalError() instead")
    void container_projects_locations_clusters_setNetworkPolicySignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_setNetworkPolicySignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_setResourceLabelsSignalError() instead")
    void container_projects_locations_clusters_setResourceLabelsSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_setResourceLabelsSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_startIpRotationSignalError() instead")
    void container_projects_locations_clusters_startIpRotationSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_startIpRotationSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_updateMasterSignalError() instead")
    void container_projects_locations_clusters_updateMasterSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_updateMasterSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_wellKnown_getOpenidConfigurationSignalError() instead")
    void container_projects_locations_clusters_wellKnown_getOpenidConfigurationSignalE(OAIGetOpenIDConfigResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_wellKnown_getOpenidConfigurationSignalError(OAIGetOpenIDConfigResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_getServerConfigSignalError() instead")
    void container_projects_locations_getServerConfigSignalE(OAIServerConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_getServerConfigSignalError(OAIServerConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_operations_cancelSignalError() instead")
    void container_projects_locations_operations_cancelSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_operations_cancelSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_operations_getSignalError() instead")
    void container_projects_locations_operations_getSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_operations_getSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_operations_listSignalError() instead")
    void container_projects_locations_operations_listSignalE(OAIListOperationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_operations_listSignalError(OAIListOperationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_addonsSignalError() instead")
    void container_projects_zones_clusters_addonsSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_addonsSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_completeIpRotationSignalError() instead")
    void container_projects_zones_clusters_completeIpRotationSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_completeIpRotationSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_createSignalError() instead")
    void container_projects_zones_clusters_createSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_createSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_deleteSignalError() instead")
    void container_projects_zones_clusters_deleteSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_deleteSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_getSignalError() instead")
    void container_projects_zones_clusters_getSignalE(OAICluster summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_getSignalError(OAICluster summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_legacyAbacSignalError() instead")
    void container_projects_zones_clusters_legacyAbacSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_legacyAbacSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_listSignalError() instead")
    void container_projects_zones_clusters_listSignalE(OAIListClustersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_listSignalError(OAIListClustersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_locationsSignalError() instead")
    void container_projects_zones_clusters_locationsSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_locationsSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_loggingSignalError() instead")
    void container_projects_zones_clusters_loggingSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_loggingSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_masterSignalError() instead")
    void container_projects_zones_clusters_masterSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_masterSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_monitoringSignalError() instead")
    void container_projects_zones_clusters_monitoringSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_monitoringSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_nodePools_autoscalingSignalError() instead")
    void container_projects_zones_clusters_nodePools_autoscalingSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_nodePools_autoscalingSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_nodePools_createSignalError() instead")
    void container_projects_zones_clusters_nodePools_createSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_nodePools_createSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_nodePools_deleteSignalError() instead")
    void container_projects_zones_clusters_nodePools_deleteSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_nodePools_deleteSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_nodePools_getSignalError() instead")
    void container_projects_zones_clusters_nodePools_getSignalE(OAINodePool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_nodePools_getSignalError(OAINodePool summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_nodePools_listSignalError() instead")
    void container_projects_zones_clusters_nodePools_listSignalE(OAIListNodePoolsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_nodePools_listSignalError(OAIListNodePoolsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_nodePools_rollbackSignalError() instead")
    void container_projects_zones_clusters_nodePools_rollbackSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_nodePools_rollbackSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_nodePools_setManagementSignalError() instead")
    void container_projects_zones_clusters_nodePools_setManagementSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_nodePools_setManagementSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_nodePools_setSizeSignalError() instead")
    void container_projects_zones_clusters_nodePools_setSizeSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_nodePools_setSizeSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_nodePools_updateSignalError() instead")
    void container_projects_zones_clusters_nodePools_updateSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_nodePools_updateSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_resourceLabelsSignalError() instead")
    void container_projects_zones_clusters_resourceLabelsSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_resourceLabelsSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_setMaintenancePolicySignalError() instead")
    void container_projects_zones_clusters_setMaintenancePolicySignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_setMaintenancePolicySignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_setMasterAuthSignalError() instead")
    void container_projects_zones_clusters_setMasterAuthSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_setMasterAuthSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_setNetworkPolicySignalError() instead")
    void container_projects_zones_clusters_setNetworkPolicySignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_setNetworkPolicySignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_startIpRotationSignalError() instead")
    void container_projects_zones_clusters_startIpRotationSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_startIpRotationSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_updateSignalError() instead")
    void container_projects_zones_clusters_updateSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_updateSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_getServerconfigSignalError() instead")
    void container_projects_zones_getServerconfigSignalE(OAIServerConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_getServerconfigSignalError(OAIServerConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_operations_cancelSignalError() instead")
    void container_projects_zones_operations_cancelSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_operations_cancelSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_operations_getSignalError() instead")
    void container_projects_zones_operations_getSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_operations_getSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_operations_listSignalError() instead")
    void container_projects_zones_operations_listSignalE(OAIListOperationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_operations_listSignalError(OAIListOperationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use container_projects_aggregated_usableSubnetworks_listSignalErrorFull() instead")
    void container_projects_aggregated_usableSubnetworks_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_aggregated_usableSubnetworks_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_checkAutopilotCompatibilitySignalErrorFull() instead")
    void container_projects_locations_clusters_checkAutopilotCompatibilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_checkAutopilotCompatibilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_completeIpRotationSignalErrorFull() instead")
    void container_projects_locations_clusters_completeIpRotationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_completeIpRotationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_createSignalErrorFull() instead")
    void container_projects_locations_clusters_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_getJwksSignalErrorFull() instead")
    void container_projects_locations_clusters_getJwksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_getJwksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_listSignalErrorFull() instead")
    void container_projects_locations_clusters_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_nodePools_completeUpgradeSignalErrorFull() instead")
    void container_projects_locations_clusters_nodePools_completeUpgradeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_nodePools_completeUpgradeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_nodePools_createSignalErrorFull() instead")
    void container_projects_locations_clusters_nodePools_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_nodePools_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_nodePools_deleteSignalErrorFull() instead")
    void container_projects_locations_clusters_nodePools_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_nodePools_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_nodePools_listSignalErrorFull() instead")
    void container_projects_locations_clusters_nodePools_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_nodePools_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_nodePools_rollbackSignalErrorFull() instead")
    void container_projects_locations_clusters_nodePools_rollbackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_nodePools_rollbackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_nodePools_setAutoscalingSignalErrorFull() instead")
    void container_projects_locations_clusters_nodePools_setAutoscalingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_nodePools_setAutoscalingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_nodePools_setManagementSignalErrorFull() instead")
    void container_projects_locations_clusters_nodePools_setManagementSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_nodePools_setManagementSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_nodePools_setSizeSignalErrorFull() instead")
    void container_projects_locations_clusters_nodePools_setSizeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_nodePools_setSizeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_nodePools_updateSignalErrorFull() instead")
    void container_projects_locations_clusters_nodePools_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_nodePools_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_setAddonsSignalErrorFull() instead")
    void container_projects_locations_clusters_setAddonsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_setAddonsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_setLegacyAbacSignalErrorFull() instead")
    void container_projects_locations_clusters_setLegacyAbacSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_setLegacyAbacSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_setLocationsSignalErrorFull() instead")
    void container_projects_locations_clusters_setLocationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_setLocationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_setLoggingSignalErrorFull() instead")
    void container_projects_locations_clusters_setLoggingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_setLoggingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_setMaintenancePolicySignalErrorFull() instead")
    void container_projects_locations_clusters_setMaintenancePolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_setMaintenancePolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_setMasterAuthSignalErrorFull() instead")
    void container_projects_locations_clusters_setMasterAuthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_setMasterAuthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_setMonitoringSignalErrorFull() instead")
    void container_projects_locations_clusters_setMonitoringSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_setMonitoringSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_setNetworkPolicySignalErrorFull() instead")
    void container_projects_locations_clusters_setNetworkPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_setNetworkPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_setResourceLabelsSignalErrorFull() instead")
    void container_projects_locations_clusters_setResourceLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_setResourceLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_startIpRotationSignalErrorFull() instead")
    void container_projects_locations_clusters_startIpRotationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_startIpRotationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_updateMasterSignalErrorFull() instead")
    void container_projects_locations_clusters_updateMasterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_updateMasterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_clusters_wellKnown_getOpenidConfigurationSignalErrorFull() instead")
    void container_projects_locations_clusters_wellKnown_getOpenidConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_clusters_wellKnown_getOpenidConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_getServerConfigSignalErrorFull() instead")
    void container_projects_locations_getServerConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_getServerConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_operations_cancelSignalErrorFull() instead")
    void container_projects_locations_operations_cancelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_operations_cancelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_operations_getSignalErrorFull() instead")
    void container_projects_locations_operations_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_operations_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_locations_operations_listSignalErrorFull() instead")
    void container_projects_locations_operations_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_locations_operations_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_addonsSignalErrorFull() instead")
    void container_projects_zones_clusters_addonsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_addonsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_completeIpRotationSignalErrorFull() instead")
    void container_projects_zones_clusters_completeIpRotationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_completeIpRotationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_createSignalErrorFull() instead")
    void container_projects_zones_clusters_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_deleteSignalErrorFull() instead")
    void container_projects_zones_clusters_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_getSignalErrorFull() instead")
    void container_projects_zones_clusters_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_legacyAbacSignalErrorFull() instead")
    void container_projects_zones_clusters_legacyAbacSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_legacyAbacSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_listSignalErrorFull() instead")
    void container_projects_zones_clusters_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_locationsSignalErrorFull() instead")
    void container_projects_zones_clusters_locationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_locationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_loggingSignalErrorFull() instead")
    void container_projects_zones_clusters_loggingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_loggingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_masterSignalErrorFull() instead")
    void container_projects_zones_clusters_masterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_masterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_monitoringSignalErrorFull() instead")
    void container_projects_zones_clusters_monitoringSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_monitoringSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_nodePools_autoscalingSignalErrorFull() instead")
    void container_projects_zones_clusters_nodePools_autoscalingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_nodePools_autoscalingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_nodePools_createSignalErrorFull() instead")
    void container_projects_zones_clusters_nodePools_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_nodePools_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_nodePools_deleteSignalErrorFull() instead")
    void container_projects_zones_clusters_nodePools_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_nodePools_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_nodePools_getSignalErrorFull() instead")
    void container_projects_zones_clusters_nodePools_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_nodePools_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_nodePools_listSignalErrorFull() instead")
    void container_projects_zones_clusters_nodePools_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_nodePools_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_nodePools_rollbackSignalErrorFull() instead")
    void container_projects_zones_clusters_nodePools_rollbackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_nodePools_rollbackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_nodePools_setManagementSignalErrorFull() instead")
    void container_projects_zones_clusters_nodePools_setManagementSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_nodePools_setManagementSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_nodePools_setSizeSignalErrorFull() instead")
    void container_projects_zones_clusters_nodePools_setSizeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_nodePools_setSizeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_nodePools_updateSignalErrorFull() instead")
    void container_projects_zones_clusters_nodePools_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_nodePools_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_resourceLabelsSignalErrorFull() instead")
    void container_projects_zones_clusters_resourceLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_resourceLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_setMaintenancePolicySignalErrorFull() instead")
    void container_projects_zones_clusters_setMaintenancePolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_setMaintenancePolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_setMasterAuthSignalErrorFull() instead")
    void container_projects_zones_clusters_setMasterAuthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_setMasterAuthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_setNetworkPolicySignalErrorFull() instead")
    void container_projects_zones_clusters_setNetworkPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_setNetworkPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_startIpRotationSignalErrorFull() instead")
    void container_projects_zones_clusters_startIpRotationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_startIpRotationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_clusters_updateSignalErrorFull() instead")
    void container_projects_zones_clusters_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_clusters_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_getServerconfigSignalErrorFull() instead")
    void container_projects_zones_getServerconfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_getServerconfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_operations_cancelSignalErrorFull() instead")
    void container_projects_zones_operations_cancelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_operations_cancelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_operations_getSignalErrorFull() instead")
    void container_projects_zones_operations_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_operations_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use container_projects_zones_operations_listSignalErrorFull() instead")
    void container_projects_zones_operations_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void container_projects_zones_operations_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
